File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/notification/NotificationsControllerTest.java
Patch:
@@ -68,7 +68,7 @@ public void setUp() {
         AppBrand appBrand = mock(AppBrand.class);
         when(appBrand.property(BrandableProperty.DOWNLOAD_URL)).thenReturn("http://www.pdfsam.org");
         when(appBrand.property(BrandableProperty.DONATE_URL)).thenReturn("http://www.pdfsam.org");
-        when(appBrand.property(BrandableProperty.TWEETER_SHARE_URL)).thenReturn("http://www.pdfsam.org");
+        when(appBrand.property(BrandableProperty.BLUESKY_SHARE_URL)).thenReturn("http://www.pdfsam.org");
         when(appBrand.property(BrandableProperty.FACEBOOK_SHARE_URL)).thenReturn("http://www.pdfsam.org");
         victim = new NotificationsController(container, service, appBrand);
         app().persistentSettings().set(BooleanPersistentProperty.DONATION_NOTIFICATION, true);

File: pdfsam-core/src/main/java/org/pdfsam/core/ConfigurableSystemProperty.java
Patch:
@@ -39,6 +39,7 @@ public class ConfigurableSystemProperty {
     public static final String PDFSAM_DISABLE_SETTINGS = "org.pdfsam.disable.settings.panel";
     public static final String DISCARD_BOOKMARKS_PROP = "org.pdfsam.default.discard.bookmarks";
     public static final String PREFIX_PROP = "org.pdfsam.default.prefix";
+    public static final String PDFVERSION_PROP = "org.pdfsam.default.pdf.version";
 
     private ConfigurableSystemProperty() {
         //NOOP

File: pdfsam-tools/pdfsam-backpages/src/main/java/org/pdfsam/tools/backpages/AddBackpagesPane.java
Patch:
@@ -132,7 +132,7 @@ public void apply(AddBackpagesParametersBuilder builder, Consumer<String> onErro
         if (textField.getValidationState() == FXValidationSupport.ValidationState.VALID) {
             builder.backPagesSource(new PdfFileSourceAdapter(textField.getText()).getPdfFileSource());
         } else {
-            onError.accept(i18n().tr("The selected PDF file is invalid"));
+            onError.accept(i18n().tr("A .pdf extension is required for the repeating file"));
         }
 
         this.pace.validate();

File: pdfsam-tools/pdfsam-backpages/src/main/java/org/pdfsam/tools/backpages/AddBackpagesToolPanel.java
Patch:
@@ -89,7 +89,7 @@ protected AddBackpagesParametersBuilder getBuilder(Consumer<String> onError) {
         if (destinationField.getValidationState() == FXValidationSupport.ValidationState.VALID) {
             builder.output(FileOrDirectoryTaskOutput.file(new File(destinationField.getText())));
         } else {
-            onError.accept(i18n().tr("The selected PDF file is invalid"));
+            onError.accept(i18n().tr("A .pdf destination file extension is required"));
         }
         destinationPane.apply(builder, onError);
         return builder;

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/BrowsablePdfOutputField.java
Patch:
@@ -63,7 +63,7 @@ public void apply(SingleOutputTaskParametersBuilder<?> builder, Consumer<String>
         if (getTextField().getValidationState() == FXValidationSupport.ValidationState.VALID) {
             builder.output(new FileTaskOutput(new File(getTextField().getText())));
         } else {
-            onError.accept(i18n().tr("The selected PDF file is invalid"));
+            onError.accept(i18n().tr("A .pdf destination file extension is required"));
         }
     }
 

File: pdfsam-tools/pdfsam-merge/src/main/java/org/pdfsam/tools/merge/MergeParametersBuilder.java
Patch:
@@ -44,7 +44,7 @@ class MergeParametersBuilder extends AbstractPdfOutputParametersBuilder<MergePar
     private boolean blankIfOdd;
     private boolean footer;
     private PageNormalizationPolicy pageNormalizationPolicy = PageNormalizationPolicy.NONE;
-    private AcroFormPolicy formsPolicy = AcroFormPolicy.MERGE;
+    private AcroFormPolicy formsPolicy = AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS;
     private ToCPolicy tocPolicy = ToCPolicy.NONE;
     private FileTaskOutput output;
 

File: pdfsam-tools/pdfsam-merge/src/main/java/org/pdfsam/tools/merge/MergeOptionsPane.java
Patch:
@@ -83,9 +83,9 @@ class MergeOptionsPane extends VBox
                 helpIcon(i18n().tr("Set whether pages should be resized to all have the same width as the first one")),
                 2, 0);
 
-        acroForms.getItems().add(new ComboItem<>(AcroFormPolicy.MERGE, i18n().tr("Merge fields")));
         acroForms.getItems().add(new ComboItem<>(AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS,
                 i18n().tr("Merge renaming existing fields")));
+        acroForms.getItems().add(new ComboItem<>(AcroFormPolicy.MERGE, i18n().tr("Merge fields")));
         acroForms.getItems().add(new ComboItem<>(AcroFormPolicy.FLATTEN, i18n().tr("Flatten")));
         acroForms.getItems().add(new ComboItem<>(AcroFormPolicy.DISCARD, i18n().tr("Discard forms")));
         acroForms.setId("acroFormsCombo");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/sidebar/VerticalSidebar.java
Patch:
@@ -20,6 +20,7 @@
 
 import jakarta.inject.Inject;
 import javafx.geometry.Orientation;
+import javafx.scene.control.ContentDisplay;
 import javafx.scene.control.Label;
 import javafx.scene.control.ScrollPane;
 import javafx.scene.control.Separator;
@@ -64,7 +65,8 @@ public VerticalSidebar(HomeContentItem homeItem, LogButton logButton, NewsButton
         addButton(homeItem, expandButton);
         var toolsLabel = new Label(i18n().tr("Tools").toUpperCase());
         toolsLabel.getStyleClass().add("sidebar-title");
-        toolsLabel.visibleProperty().bind(expandButton.selectedProperty());
+        toolsLabel.contentDisplayProperty()
+                .bind(expandButton.selectedProperty().map(b -> b ? ContentDisplay.LEFT : ContentDisplay.GRAPHIC_ONLY));
         buttons.getChildren().addAll(new Separator(Orientation.HORIZONTAL), toolsLabel);
         tools.getChildren().forEach(b -> {
             if (b instanceof SidebarButton button) {

File: pdfsam-core/src/main/java/org/pdfsam/core/io/DirectoryChooserWithWorkingDirectory.java
Patch:
@@ -57,7 +57,7 @@ public Path showDialog(Window ownerWindow) {
         Path selected = ofNullable(wrapped.showDialog(ownerWindow)).map(File::toPath).filter(Files::isDirectory)
                 .orElse(null);
         if (nonNull(selected)) {
-            app().runtimeState().workingPath(selected);
+            app().runtimeState().maybeWorkingPath(selected);
         }
         return selected;
     }

File: pdfsam-core/src/main/java/org/pdfsam/core/io/FileChooserWithWorkingDirectory.java
Patch:
@@ -86,7 +86,7 @@ void setFileTypes(FileType... filters) {
 
     private Path updateWorkingPath(Path path) {
         if (nonNull(path)) {
-            app().runtimeState().workingPath(path);
+            app().runtimeState().maybeWorkingPath(path);
         }
         return path;
     }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dnd/FilesDropController.java
Patch:
@@ -78,14 +78,14 @@ private void doRequestMultiple(FilesDroppedEvent event) {
                 FileType.TXT.matches(event.files().get(0).getName()) || FileType.CSV.matches(
                         event.files().get(0).getName()))) {
             var path = event.files().get(0).toPath();
-            app().runtimeState().workingPath(path);
+            app().runtimeState().maybeWorkingPath(path);
             eventStudio().broadcast(new PdfFilesListLoadRequest(event.toolBinding(), path));
         } else {
             final var loadEvent = new PdfLoadRequest(event.toolBinding());
             getFiles(event.files()).filter(f -> FileType.PDF.matches(f.getName()))
                     .map(PdfDocumentDescriptor::newDescriptorNoPassword).forEach(loadEvent::add);
             if (!loadEvent.getDocuments().isEmpty()) {
-                app().runtimeState().workingPath(loadEvent.getDocuments().get(0).getFileName());
+                app().runtimeState().maybeWorkingPath(loadEvent.getDocuments().get(0).getFileName());
                 eventStudio().broadcast(loadEvent, event.toolBinding());
             } else {
                 eventStudio().broadcast(new AddNotificationRequest(NotificationType.WARN,

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/SelectionTableToolbar.java
Patch:
@@ -98,7 +98,7 @@ public void loadDocuments(ActionEvent event) {
             var fileChooser = Choosers.fileChooser(i18n().tr("Select pdf documents to load"), FileType.PDF);
             List<Path> chosenFiles = fileChooser.showOpenMultipleDialog(this.getScene().getWindow());
             if (chosenFiles != null && !chosenFiles.isEmpty()) {
-                PdfLoadRequest loadEvent = new PdfLoadRequest(toolBinding());
+                var loadEvent = new PdfLoadRequest(toolBinding());
                 chosenFiles.stream().map(Path::toFile).map(PdfDocumentDescriptor::newDescriptorNoPassword)
                         .forEach(loadEvent::add);
                 eventStudio().broadcast(loadEvent, toolBinding());

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/content/log/LogPaneToolbarTest.java
Patch:
@@ -69,7 +69,6 @@ public void start(Stage stage) {
 
     @Stop
     public void stop() {
-        victim.dispose();
         app().runtimeState().activeTool(null);
     }
 

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/BrowsableDirectoryField.java
Patch:
@@ -26,7 +26,6 @@
 
 import java.io.File;
 import java.nio.file.Files;
-import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.List;
 import java.util.function.Consumer;
@@ -67,7 +66,7 @@ public void handle(ActionEvent event) {
             var directoryChooser = Choosers.directoryChooser(getBrowseWindowTitle());
             String currentSelection = getTextField().getText();
             if (isNotBlank(currentSelection)) {
-                Path path = Paths.get(currentSelection);
+                var path = Paths.get(currentSelection);
                 if (Files.exists(path)) {
                     directoryChooser.setInitialDirectory(path);
                 }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/content/preference/PreferenceConfig.java
Patch:
@@ -28,7 +28,6 @@
 import org.pdfsam.model.io.OpenType;
 import org.pdfsam.model.ui.ComboItem;
 import org.pdfsam.model.ui.DefaultPdfVersionComboItem;
-import org.pdfsam.ui.components.prefix.PrefixField;
 import org.pdfsam.ui.components.support.FXValidationSupport;
 import org.pdfsam.ui.components.support.Style;
 import org.sejda.model.pdf.PdfVersion;
@@ -186,7 +185,7 @@ public PreferenceCheckBox discardBookmarks() {
 
     @Provides
     @Named("prefixField")
-    public PrefixField prefixField() {
+    public PreferencePrefixField prefixField() {
         return new PreferencePrefixField();
     }
 

File: pdfsam-core/src/main/java/org/pdfsam/core/ConfigurableSystemProperty.java
Patch:
@@ -38,6 +38,7 @@ public class ConfigurableSystemProperty {
     public static final String PDFSAM_DISABLE_SETTINGS_DEPRECATED = "org.pdfsam.settings.panel";
     public static final String PDFSAM_DISABLE_SETTINGS = "org.pdfsam.disable.settings.panel";
     public static final String DISCARD_BOOKMARKS_PROP = "org.pdfsam.default.discard.bookmarks";
+    public static final String PREFIX_PROP = "org.pdfsam.default.prefix";
 
     private ConfigurableSystemProperty() {
         //NOOP

File: pdfsam-core/src/main/java/org/pdfsam/core/context/StringPersistentProperty.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.function.Supplier;
 
 import static org.pdfsam.core.ConfigurableSystemProperty.LOCALE_PROP;
+import static org.pdfsam.core.ConfigurableSystemProperty.PREFIX_PROP;
 import static org.pdfsam.core.ConfigurableSystemProperty.THEME_PROP;
 
 /**
@@ -37,7 +38,8 @@ public enum StringPersistentProperty implements PersistentProperty<String> {
     LOCALE(() -> System.getProperty(LOCALE_PROP)),
     THEME(() -> System.getProperty(THEME_PROP)),
     FONT_SIZE(() -> ""),
-    PDF_VERSION(PdfVersion.VERSION_1_5::name);
+    PDF_VERSION(PdfVersion.VERSION_1_5::name),
+    PREFIX(() -> System.getProperty(PREFIX_PROP, "PDFsam_"));
 
     private final Supplier<String> defaultSupplier;
 

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/content/preference/PreferenceOutputPaneTest.java
Patch:
@@ -66,9 +66,10 @@ public void start(Stage stage) {
         var discardBookmarks = new PreferenceCheckBox(BooleanPersistentProperty.DISCARD_BOOKMARKS, "discard", false,
                 appContext);
         discardBookmarks.setId("discardBookmarks");
-
+        var prefixField = new PreferencePrefixField();
+        prefixField.setId("prefixField");
         var victim = new PreferenceOutputPane(smartRadio, compressionEnabled, overwriteOutput, discardBookmarks,
-                pdfVersionCombo);
+                pdfVersionCombo, prefixField);
         victim.setId("victim");
         Scene scene = new Scene(new HBox(victim));
         stage.setScene(scene);

File: pdfsam-core/src/main/java/org/pdfsam/core/ConfigurableSystemProperty.java
Patch:
@@ -37,6 +37,7 @@ public class ConfigurableSystemProperty {
     public static final String PDFSAM_DISABLE_UI_RESTORE = "org.pdfsam.disable.ui.restore";
     public static final String PDFSAM_DISABLE_SETTINGS_DEPRECATED = "org.pdfsam.settings.panel";
     public static final String PDFSAM_DISABLE_SETTINGS = "org.pdfsam.disable.settings.panel";
+    public static final String DISCARD_BOOKMARKS_PROP = "org.pdfsam.default.discard.bookmarks";
 
     private ConfigurableSystemProperty() {
         //NOOP

File: pdfsam-core/src/main/java/org/pdfsam/core/context/BooleanPersistentProperty.java
Patch:
@@ -22,6 +22,7 @@
 
 import static org.pdfsam.core.ConfigurableSystemProperty.CHECK_FOR_NEWS_PROP;
 import static org.pdfsam.core.ConfigurableSystemProperty.CHECK_FOR_UPDATES_PROP;
+import static org.pdfsam.core.ConfigurableSystemProperty.DISCARD_BOOKMARKS_PROP;
 import static org.pdfsam.core.ConfigurableSystemProperty.DONATE_NOTIFICATION_PROP;
 import static org.pdfsam.core.ConfigurableSystemProperty.FETCH_PREMIUM_MODULES_PROP;
 import static org.pdfsam.core.ConfigurableSystemProperty.OVERWRITE_OUTPUT_PROP;
@@ -47,7 +48,8 @@ public enum BooleanPersistentProperty implements PersistentProperty<Boolean> {
     CLEAR_CONFIRMATION(() -> Boolean.TRUE),
     SAVE_WORKSPACE_ON_EXIT(() -> Boolean.FALSE),
     SAVE_PWD_IN_WORKSPACE(() -> Boolean.FALSE),
-    SIDEBAR_EXPANDED_STATE(() -> Boolean.TRUE);
+    SIDEBAR_EXPANDED_STATE(() -> Boolean.TRUE),
+    DISCARD_BOOKMARKS(() -> Boolean.parseBoolean(System.getProperty(DISCARD_BOOKMARKS_PROP, Boolean.FALSE.toString())));
 
     private final Supplier<Boolean> defaultSupplier;
 

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/content/preference/PreferenceOutputPane.java
Patch:
@@ -43,6 +43,7 @@ class PreferenceOutputPane extends GridPane {
     public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadio,
             @Named("compressionEnabled") PreferenceCheckBox compressionEnabled,
             @Named("overwriteOutput") PreferenceCheckBox overwriteOutput,
+            @Named("discardBookmarks") PreferenceCheckBox discardBookmarks,
             @Named("pdfVersionCombo") PreferenceComboBox<ComboItem<PdfVersion>> pdfVersionCombo) {
 
         add(new Label(i18n().tr("Default PDF version:")), 0, 1);
@@ -72,6 +73,7 @@ public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadi
 
         add(compressionEnabled, 0, 4, 3, 1);
         add(overwriteOutput, 0, 5, 3, 1);
+        add(discardBookmarks, 0, 6, 3, 1);
         getStyleClass().addAll(Style.CONTAINER.css());
         getStyleClass().addAll(Style.GRID.css());
     }

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/PdfDestinationPaneUITest.java
Patch:
@@ -76,6 +76,7 @@ public void setUp() {
     public void start(Stage stage) {
         app().persistentSettings().set(BooleanPersistentProperty.PDF_COMPRESSION_ENABLED, true);
         app().persistentSettings().set(BooleanPersistentProperty.OVERWRITE_OUTPUT, false);
+        app().persistentSettings().set(BooleanPersistentProperty.DISCARD_BOOKMARKS, false);
         BrowsablePdfInputField destination = new BrowsablePdfInputField();
         victim = new PdfDestinationPane(destination, MODULE, true, DestinationPanelFields.DISCARD_BOOKMARKS);
         Scene scene = new Scene(victim);
@@ -119,6 +120,5 @@ public void reset() {
         assertFalse(victim.overwrite().isSelected());
         assertFalse(robot.lookup("#discardBookmarksField").queryAs(CheckBox.class).isSelected());
         assertTrue(robot.lookup("#compressField").queryAs(CheckBox.class).isSelected());
-
     }
 }

File: pdfsam-core/src/test/java/org/pdfsam/core/context/StringPersistentPropertyTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junitpioneer.jupiter.ClearSystemProperty;
 import org.junitpioneer.jupiter.SetSystemProperty;
 import org.pdfsam.core.ConfigurableSystemProperty;
+import org.sejda.model.pdf.PdfVersion;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNull;
@@ -56,5 +57,6 @@ public void defaultValue() {
         assertEquals("", StringPersistentProperty.WORKING_PATH.defaultSupplier().get());
         assertEquals("", StringPersistentProperty.WORKSPACE_PATH.defaultSupplier().get());
         assertEquals("", StringPersistentProperty.STARTUP_MODULE.defaultSupplier().get());
+        assertEquals(PdfVersion.VERSION_1_5.name(), StringPersistentProperty.PDF_VERSION.defaultSupplier().get());
     }
 }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/content/preference/PreferenceComboBox.java
Patch:
@@ -34,7 +34,7 @@
  * @param <T> the type of the elements in the combo
  * @author Andrea Vacondio
  */
-public class PreferenceComboBox<T extends ComboItem<String>> extends ComboBox<T> {
+public class PreferenceComboBox<T extends ComboItem<?>> extends ComboBox<T> {
     private static final Logger LOG = LoggerFactory.getLogger(PreferenceComboBox.class);
 
     PreferenceComboBox(StringPersistentProperty property) {
@@ -44,7 +44,7 @@ public class PreferenceComboBox<T extends ComboItem<String>> extends ComboBox<T>
     PreferenceComboBox(StringPersistentProperty property, ApplicationContext context) {
         requireNotNullArg(property, "Preference cannot be null");
         valueProperty().addListener((observable, oldValue, newValue) -> {
-            context.persistentSettings().set(property, newValue.key());
+            context.persistentSettings().set(property, newValue.key().toString());
             LOG.trace("Preference {} set to {}", property, newValue.key());
         });
     }

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/PdfDestinationPane.java
Patch:
@@ -23,13 +23,13 @@
 import javafx.scene.control.TitledPane;
 import javafx.scene.layout.HBox;
 import javafx.scene.layout.VBox;
-import org.apache.commons.lang3.StringUtils;
 import org.pdfsam.core.context.BooleanPersistentProperty;
 import org.pdfsam.core.support.params.AbstractPdfOutputParametersBuilder;
 import org.pdfsam.core.support.params.TaskParametersBuildStep;
 import org.pdfsam.eventstudio.annotation.EventListener;
 import org.pdfsam.eventstudio.annotation.EventStation;
 import org.pdfsam.model.tool.ToolBound;
+import org.pdfsam.model.ui.DefaultPdfVersionComboItem;
 import org.pdfsam.model.ui.ResettableView;
 import org.pdfsam.model.ui.SetDestinationRequest;
 import org.pdfsam.model.ui.workspace.RestorableView;
@@ -64,7 +64,7 @@ public class PdfDestinationPane extends DestinationPane implements ToolBound, Re
     private final PdfVersionCombo version;
     private final PdfVersionConstrainedCheckBox compress;
     private Optional<CheckBox> discardBookmarks = empty();
-    private String toolBinding = StringUtils.EMPTY;
+    private final String toolBinding;
 
     public PdfDestinationPane(BrowsableField destination, String toolBinding,
             DestinationPanelFields... optionalFields) {
@@ -168,7 +168,7 @@ public void restoreStateFrom(Map<String, String> data) {
         compress.setSelected(Boolean.parseBoolean(data.get("compress")));
         overwrite().setSelected(Boolean.parseBoolean(data.get("overwrite")));
         discardBookmarks.ifPresent(d -> d.setSelected(Boolean.parseBoolean(data.get("discardBookmarks"))));
-        ofNullable(data.get("version")).map(PdfVersion::valueOf).map(PdfVersionCombo.DefaultPdfVersionComboItem::new)
+        ofNullable(data.get("version")).map(PdfVersion::valueOf).map(DefaultPdfVersionComboItem::new)
                 .ifPresent(v -> this.version.getSelectionModel().select(v));
     }
 

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/PdfDestinationPaneTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.junit.jupiter.api.io.TempDir;
 import org.mockito.Mockito;
 import org.pdfsam.core.context.BooleanPersistentProperty;
+import org.pdfsam.model.ui.PdfVersionComboItem;
 import org.pdfsam.model.ui.SetDestinationRequest;
 import org.pdfsam.test.ClearEventStudioExtension;
 import org.pdfsam.test.JavaFxThreadInitializeExtension;
-import org.pdfsam.ui.components.io.PdfVersionCombo.PdfVersionComboItem;
 import org.sejda.model.pdf.PdfVersion;
 
 import java.io.File;

File: pdfsam-tools/pdfsam-merge/src/main/java/org/pdfsam/tools/merge/MergeTool.java
Patch:
@@ -52,7 +52,7 @@ public class MergeTool implements Tool {
 
     private final ToolDescriptor descriptor = builder().category(ToolCategory.MERGE)
             .inputTypes(ToolInputOutputType.MULTIPLE_PDF).name(i18n().tr("Merge"))
-            .description(i18n().tr("Merge together multiple PDF documents or subsections of them."))
+            .description(i18n().tr("Merge multiple PDF documents or subsections of them."))
             .priority(ToolPriority.HIGH.getPriority()).supportURL("https://pdfsam.org/pdf-merge/")
             .build();
 

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/content/preference/PreferenceBrowsableDirectoryFieldTest.java
Patch:
@@ -22,6 +22,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
@@ -45,6 +46,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class })
+@Tag("NoHeadless")
 public class PreferenceBrowsableDirectoryFieldTest {
 
     @TempDir

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/content/preference/PreferenceBrowsableFileFieldTest.java
Patch:
@@ -22,6 +22,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
@@ -48,6 +49,7 @@
  *
  */
 @ExtendWith({ ApplicationExtension.class })
+@Tag("NoHeadless")
 public class PreferenceBrowsableFileFieldTest {
 
     @TempDir

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/content/preference/PreferenceIntTextFieldTest.java
Patch:
@@ -22,6 +22,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.core.context.ApplicationContext;
@@ -43,6 +44,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class })
+@Tag("NoHeadless")
 public class PreferenceIntTextFieldTest {
 
     private final ApplicationContext appContext = mock(ApplicationContext.class);

File: pdfsam-tools/pdfsam-backpages/src/test/java/org/pdfsam/tools/backpages/AddBackpagesPaneTest.java
Patch:
@@ -4,6 +4,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -48,6 +49,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 @ExtendWith({ ApplicationExtension.class })
+@Tag("NoHeadless")
 class AddBackpagesPaneTest {
 
     private static final String TOOL_ID = "AddBackpages";

File: pdfsam-tools/pdfsam-extract/src/test/java/org/pdfsam/tools/extract/ExtractOptionsPaneTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.test.ClearEventStudioExtension;
@@ -49,6 +50,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class ExtractOptionsPaneTest {
 
     private ExtractParametersBuilder builder;

File: pdfsam-tools/pdfsam-simple-split/src/test/java/org/pdfsam/tools/split/SplitAfterRadioButtonTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
@@ -59,7 +60,8 @@
  * @author Andrea Vacondio
  *
  */
- @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class SplitAfterRadioButtonTest {
     private Consumer<String> onError;
     private SplitAfterRadioButton victim;

File: pdfsam-tools/pdfsam-simple-split/src/test/java/org/pdfsam/tools/split/SplitByEveryRadioButtonTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.io.TempDir;
@@ -59,6 +60,7 @@
  *
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class SplitByEveryRadioButtonTest {
 
     private Consumer<String> onError;

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/tools/splitbybookmarks/BookmarksLevelComboBoxTest.java
Patch:
@@ -24,6 +24,7 @@
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.test.ClearEventStudioExtension;
@@ -58,6 +59,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class BookmarksLevelComboBoxTest {
     private SplitByOutlineLevelParametersBuilder builder;
     private Consumer<String> onError;

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/tools/splitbybookmarks/SplitOptionsPaneTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.test.ClearEventStudioExtension;
@@ -52,6 +53,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class SplitOptionsPaneTest {
 
     private SplitByOutlineLevelParametersBuilder builder;

File: pdfsam-tools/pdfsam-split-by-size/src/test/java/org/pdfsam/tools/splitbysize/SplitOptionsPaneTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.test.ClearEventStudioExtension;
@@ -49,6 +50,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class SplitOptionsPaneTest {
 
     private SplitBySizeParametersBuilder builder;

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/commons/RadioButtonDrivenTextFieldsPaneTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.control.TextField;
 import javafx.scene.control.ToggleGroup;
 import javafx.stage.Stage;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.testfx.api.FxRobot;
@@ -82,6 +83,7 @@ public void addRow(FxRobot robot) {
     }
 
     @Test
+    @Tag("NoHeadless")
     public void focusedField(FxRobot robot) {
         TextField field = robot.lookup(".FIELD").queryAs(TextField.class);
         robot.clickOn("RADIO").write("Chuck");

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/commons/ValidableTextFieldTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.core.support.validation.Validators;
@@ -43,6 +44,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith(ApplicationExtension.class)
+@Tag("NoHeadless")
 public class ValidableTextFieldTest {
     private ValidableTextField victim;
 

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/PdfDestinationPaneUITest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.control.CheckBox;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -108,6 +109,7 @@ public void applyClickAll() {
     }
 
     @Test
+    @Tag("NoHeadless")
     public void reset() {
         robot.clickOn(".validable-container-field").write("Chuck");
         Set<Node> nodes = robot.lookup(n -> n instanceof CheckBox).queryAll();

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/prefix/PrefixPaneTest.java
Patch:
@@ -21,6 +21,7 @@
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.core.support.params.MultipleOutputTaskParametersBuilder;
@@ -49,6 +50,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 @SuppressWarnings({ "rawtypes", "unchecked" })
 public class PrefixPaneTest {
 

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/PasswordFieldPopupTest.java
Patch:
@@ -23,6 +23,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.HBox;
 import javafx.stage.Stage;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -43,6 +44,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class })
+@Tag("NoHeadless")
 public class PasswordFieldPopupTest {
     @RegisterExtension
     static ClearEventStudioExtension staticExtension = new ClearEventStudioExtension("LogStage");

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/multiple/SelectionTableTest.java
Patch:
@@ -85,6 +85,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith(ApplicationExtension.class)
+@Tag("NoHeadless")
 public class SelectionTableTest {
 
     private static final String MODULE = "MODULE";

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/single/SingleSelectionPaneTest.java
Patch:
@@ -79,6 +79,7 @@
  */
 @SuppressWarnings("unchecked")
 @ExtendWith(ApplicationExtension.class)
+@Tag("NoHeadless")
 public class SingleSelectionPaneTest {
     private static final String MODULE = "MODULE";
     @RegisterExtension

File: pdfsam-i18n/src/test/java/org/pdfsam/i18n/I18NContextTest.java
Patch:
@@ -63,7 +63,7 @@ public void getBestLocaleSupported() {
     @Test
     public void getBestLocaleSupportedLanguage() {
         var victim = new I18nContext();
-        Locale.setDefault(new Locale("en", "CA"));
+        Locale.setDefault(Locale.of("en", "CA"));
         var observer = victim.locale().test();
         observer.assertNoValues();
         victim.tr("chuck norris");

File: pdfsam-model/src/test/java/org/pdfsam/model/task/PdfRotationInputTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.jupiter.api.Test;
 import org.sejda.model.input.PdfSource;
 import org.sejda.model.pdf.page.PageRange;
-import org.sejda.model.pdf.page.PagesSelection;
 import org.sejda.model.pdf.page.PredefinedSetOfPages;
 import org.sejda.model.rotation.Rotation;
 
@@ -60,8 +59,7 @@ public void nullPagesAllPages() {
 
     @Test
     public void emptyPagesAllPages() {
-        PdfRotationInput victim = new PdfRotationInput(mock(PdfSource.class), Rotation.DEGREES_180,
-                new PagesSelection[0]);
+        PdfRotationInput victim = new PdfRotationInput(mock(PdfSource.class), Rotation.DEGREES_180);
         Set<Integer> pages = victim.getPages(3);
         assertEquals(3, pages.size());
         assertTrue(pages.contains(1));

File: pdfsam-core/src/main/java/org/pdfsam/core/context/ApplicationContext.java
Patch:
@@ -91,7 +91,7 @@ public ApplicationRuntimeState runtimeState() {
      * @param scene
      */
     public void registerScene(Scene scene) {
-        disposable.add(this.runtimeState.theme().subscribe(t -> {
+        disposable.add(this.runtimeState().theme().subscribe(t -> {
             scene.getStylesheets().setAll(t.stylesheets());
             if (!Platform.isSupported(ConditionalFeature.TRANSPARENT_WINDOW)) {
                 scene.getStylesheets().addAll(t.transparentIncapableStylesheets());
@@ -133,7 +133,7 @@ public void clean() {
     @Override
     public void close() {
         injector.ifPresent(Injector::close);
-        runtimeState.close();
+        runtimeState().close();
         persistentSettings.close();
         disposable.dispose();
     }

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/sidebar/ToolSelectableSidebarButtonTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.pdfsam.gui.components.sidebar;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.pdfsam.test.JavaFxThreadInitializeExtension;
 
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
@@ -22,6 +24,7 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
+@ExtendWith(JavaFxThreadInitializeExtension.class)
 class ToolSelectableSidebarButtonTest {
     @Test
     public void requiredTool() {

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/sidebar/VerticalSidebarUITest.java
Patch:
@@ -6,6 +6,7 @@
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.parallel.Isolated;
@@ -107,6 +108,7 @@ public void toolSelectedOnClick() {
 
     @Test
     @DisplayName("Drag and drop on tools stores the new order")
+    @Tag("NoHeadless")
     public void dragoAndDrop() {
         var repo = injector.instance(Key.of(PreferencesRepository.class, "toolsOrderRepository"));
         robot.drag("HighPriorityTestModule", MouseButton.PRIMARY).dropTo("TestModule");
@@ -117,6 +119,7 @@ public void dragoAndDrop() {
 
     @Test
     @DisplayName("Drag and drop on non tools does not store the new order")
+    @Tag("NoHeadless")
     public void dragoAndDropOnNonTools() {
         var logButton = injector.instance(LogButton.class);
         var repo = injector.instance(Key.of(PreferencesRepository.class, "toolsOrderRepository"));

File: pdfsam-gui/src/main/java/org/pdfsam/gui/AppContainer.java
Patch:
@@ -39,6 +39,7 @@ public class AppContainer extends BorderPane {
         setId("app-container");
         center.getStyleClass().addAll(Style.CONTAINER.css());
         center.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
+        center.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
         center.setFitToWidth(true);
         center.setFitToHeight(true);
         setCenter(center);

File: pdfsam-themes/src/main/java/module-info.java
Patch:
@@ -1,7 +1,7 @@
 import org.pdfsam.theme.Dark;
 import org.pdfsam.theme.DarkTeal;
 import org.pdfsam.theme.Light;
-import org.pdfsam.theme.LightBlue;
+import org.pdfsam.theme.LightMaroon;
 import org.pdfsam.theme.Theme;
 
 /*
@@ -26,10 +26,10 @@
     exports org.pdfsam.theme;
 
     requires org.pdfsam.i18n;
-    provides Theme with Light, Dark, LightBlue, DarkTeal;
+    provides Theme with Light, Dark, LightMaroon, DarkTeal;
 
     opens themes.light;
     opens themes.dark;
-    opens themes.lightblue;
+    opens themes.lightmaroon;
     opens themes.darkteal;
 }
\ No newline at end of file

File: pdfsam-themes/src/main/java/org/pdfsam/theme/Light.java
Patch:
@@ -50,7 +50,7 @@ public List<String> transparentIncapableStylesheets() {
 
     @Override
     public String name() {
-        return i18n().tr("Light with green");
+        return i18n().tr("Light with blue");
     }
 
     @Override

File: pdfsam-themes/src/main/java/org/pdfsam/theme/LightMaroon.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * @author Andrea Vacondio
  */
-public class LightBlue extends Light {
+public class LightMaroon extends Light {
 
     @Override
     public String id() {
@@ -36,13 +36,13 @@ public String id() {
     @Override
     public List<String> stylesheets() {
         var css = new ArrayList<>(super.stylesheets());
-        css.add("/themes/lightblue/colors.css");
+        css.add("/themes/lightmaroon/colors.css");
         return css;
     }
 
     @Override
     public String name() {
-        return i18n().tr("Light with blue");
+        return i18n().tr("Light with maroon");
     }
 
 }

File: pdfsam-service/src/test/java/org/pdfsam/service/pdf/SAMBoxPdfLoadServiceTest.java
Patch:
@@ -33,12 +33,11 @@
 import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.List;
-import java.util.concurrent.TimeoutException;
 
 import static java.time.Duration.ofSeconds;
 import static org.awaitility.Awaitility.await;
-import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 /**
  * @author Andrea Vacondio

File: pdfsam-tools/pdfsam-backpages/src/test/java/org/pdfsam/tools/backpages/AddBackpagesPaneTest.java
Patch:
@@ -89,8 +89,7 @@ public void emptyRange() throws Exception {
         populate();
         robot.clickOn("#selectedBackpages").push(KeyCode.ENTER);
         victim.apply(builder, onError);
-        //empty set is passed
-        verify(builder).ranges(anySet());
+        verify(builder, never()).ranges(anySet());
         verify(onError, never()).accept(anyString());
     }
 

File: pdfsam-core/src/main/java/org/pdfsam/core/context/StringPersistentProperty.java
Patch:
@@ -33,7 +33,7 @@ public enum StringPersistentProperty implements PersistentProperty<String> {
     WORKING_PATH(() -> ""),
     STARTUP_MODULE(() -> ""),
     LOCALE(() -> System.getProperty(LOCALE_PROP)),
-    THEME(() -> System.getProperty(THEME_PROP, ""));
+    THEME(() -> System.getProperty(THEME_PROP));
 
     private final Supplier<String> defaultSupplier;
 

File: pdfsam-core/src/test/java/org/pdfsam/core/context/StringPersistentPropertyTest.java
Patch:
@@ -48,7 +48,7 @@ public void defaultValuesFromSysProp() {
     @DisplayName("Default value supplier when no sys props")
     public void defaultValuesClearedSysProp() {
         assertNull(StringPersistentProperty.LOCALE.defaultSupplier().get());
-        assertEquals("LIGHT", StringPersistentProperty.THEME.defaultSupplier().get());
+        assertNull(StringPersistentProperty.THEME.defaultSupplier().get());
     }
 
     @Test

File: pdfsam-gui/src/main/java/module-info.java
Patch:
@@ -37,7 +37,6 @@
     requires org.sejda.core;
     requires org.sejda.impl.sambox;
     requires org.slf4j;
-    requires fr.brouillard.oss.cssfx;
     requires transitive org.tinylog.impl;
     requires transitive org.tinylog.api;
     requires transitive com.fasterxml.jackson.databind;

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/QuickbarDashboardButtonsPaneTest.java
Patch:
@@ -53,11 +53,11 @@ public void setUp() {
 
     @Test
     public void displayText() {
-        assertTrue(victim.getChildren().stream().filter(n -> n instanceof DashboardButton).map(n -> (DashboardButton) n)
-                .noneMatch(DashboardButton::isDisplayText));
-        victim.setDisplayText(true);
         assertTrue(victim.getChildren().stream().filter(n -> n instanceof DashboardButton).map(n -> (DashboardButton) n)
                 .allMatch(DashboardButton::isDisplayText));
+        victim.setDisplayText(false);
+        assertTrue(victim.getChildren().stream().filter(n -> n instanceof DashboardButton).map(n -> (DashboardButton) n)
+                .noneMatch(DashboardButton::isDisplayText));
     }
 
     @Test

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/quickbar/QuickbarPaneTest.java
Patch:
@@ -50,8 +50,8 @@ public void start(Stage stage) {
     @Test
     public void click() {
         BaseQuickbarButtonsPane buttons = robot.lookup("#buttons").queryAs(BaseQuickbarButtonsPane.class);
-        assertFalse(buttons.isDisplayText());
-        robot.clickOn(".quickbar-expand-button");
         assertTrue(buttons.isDisplayText());
+        robot.clickOn(".quickbar-expand-button");
+        assertFalse(buttons.isDisplayText());
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/workarea/QuickbarToolButtonsPaneTest.java
Patch:
@@ -66,8 +66,8 @@ public void displayTest() {
         var buttons = victim.getChildren().stream().filter(t -> t instanceof ToolButton).map(t -> (ToolButton) t)
                 .toList();
         assertEquals(2, buttons.size());
-        buttons.forEach(m -> assertFalse(m.isDisplayText()));
-        victim.setDisplayText(true);
         buttons.forEach(m -> assertTrue(m.isDisplayText()));
+        victim.setDisplayText(false);
+        buttons.forEach(m -> assertFalse(m.isDisplayText()));
     }
 }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/preference/PreferenceAppearencePane.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Preference pane displaying the appearance section

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/preference/PreferenceBehaviorPane.java
Patch:
@@ -26,7 +26,7 @@
 import org.pdfsam.ui.components.support.Style;
 
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Preference pane displaying the behavior section

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/preference/PreferenceOutputPane.java
Patch:
@@ -27,7 +27,7 @@
 
 import static java.util.Objects.isNull;
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Preference pane displaying the output section

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/preference/PreferenceWorkspacePane.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.apache.commons.lang3.StringUtils.isBlank;
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Preference pane displaying the workspace section

File: pdfsam-tools/pdfsam-extract/src/main/java/org/pdfsam/tools/extract/ExtractOptionsPane.java
Patch:
@@ -39,7 +39,7 @@
 import static org.apache.commons.lang3.StringUtils.defaultString;
 import static org.pdfsam.core.support.params.ConversionUtils.toPageRangeSet;
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Panel for the Extract options

File: pdfsam-tools/pdfsam-merge/src/main/java/org/pdfsam/tools/merge/MergeOptionsPane.java
Patch:
@@ -38,7 +38,7 @@
 
 import static org.apache.commons.lang3.StringUtils.EMPTY;
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Panel for the Merge options

File: pdfsam-tools/pdfsam-simple-split/src/main/java/org/pdfsam/tools/split/SplitOptionsPane.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.function.Consumer;
 
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Panel for the Split options

File: pdfsam-ui-components/src/main/java/module-info.java
Patch:
@@ -38,7 +38,6 @@
     requires transitive org.sejda.model;
 
     exports org.pdfsam.ui.components.commons;
-    exports org.pdfsam.ui.components.help;
     exports org.pdfsam.ui.components.io;
     exports org.pdfsam.ui.components.notification;
     exports org.pdfsam.ui.components.prefix;

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/DestinationPane.java
Patch:
@@ -21,10 +21,10 @@
 import javafx.scene.control.CheckBox;
 import javafx.scene.layout.VBox;
 import org.pdfsam.model.ui.ResettableView;
-import org.pdfsam.ui.components.help.HelpUtils;
 import org.pdfsam.ui.components.support.Style;
 
 import static org.pdfsam.i18n.I18nContext.i18n;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 import static org.sejda.commons.util.RequireUtils.requireNotNullArg;
 
 /**
@@ -44,7 +44,7 @@ public DestinationPane(BrowsableField destination) {
         this.destination = destination;
         overwrite.setSelected(false);
         overwrite.setGraphic(
-                HelpUtils.helpIcon(i18n().tr("Tick the box if you want to overwrite the output files if they already exist.")));
+                helpIcon(i18n().tr("Tick the box if you want to overwrite the output files if they already exist.")));
         overwrite.getStyleClass().addAll(Style.WITH_HELP.css());
 
        // destination.getStyleClass().addAll(Style.VITEM.css());

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/PdfDestinationPane.java
Patch:
@@ -33,7 +33,6 @@
 import org.pdfsam.model.ui.ResettableView;
 import org.pdfsam.model.ui.SetDestinationRequest;
 import org.pdfsam.model.ui.workspace.RestorableView;
-import org.pdfsam.ui.components.help.HelpUtils;
 import org.pdfsam.ui.components.support.Style;
 import org.pdfsam.ui.components.support.Views;
 import org.sejda.model.output.ExistingOutputPolicy;
@@ -52,6 +51,7 @@
 import static org.pdfsam.core.context.ApplicationContext.app;
 import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
 import static org.pdfsam.i18n.I18nContext.i18n;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 
 /**
  * Panel letting the user select an output destination for generated Pdf document/s.
@@ -88,7 +88,7 @@ public PdfDestinationPane(BrowsableField destination, String toolBinding, boolea
 
         if (asList(optionalFields).contains(DestinationPanelFields.DISCARD_BOOKMARKS)) {
             CheckBox discardBookmarksField = new CheckBox(i18n().tr("Discard bookmarks"));
-            discardBookmarksField.setGraphic(HelpUtils.helpIcon(
+            discardBookmarksField.setGraphic(helpIcon(
                     i18n().tr("Tick the box if you don't want to retain any bookmark from the original PDF document")));
             discardBookmarksField.getStyleClass().addAll(Style.WITH_HELP.css());
             discardBookmarksField.getStyleClass().addAll(Style.VITEM.css());

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/PdfVersionConstrainedCheckBox.java
Patch:
@@ -23,13 +23,13 @@
 import org.pdfsam.model.tool.ToolBound;
 import org.pdfsam.model.ui.AddPdfVersionConstraintEvent;
 import org.pdfsam.model.ui.RemovePdfVersionConstraintEvent;
-import org.pdfsam.ui.components.help.HelpUtils;
 import org.pdfsam.ui.components.support.Style;
 import org.sejda.model.pdf.PdfVersion;
 
 import static org.apache.commons.lang3.StringUtils.defaultString;
 import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
 import static org.pdfsam.i18n.I18nContext.i18n;
+import static org.pdfsam.ui.components.support.Views.helpIcon;
 import static org.sejda.commons.util.RequireUtils.requireNotNullArg;
 
 /**
@@ -45,7 +45,7 @@ public PdfVersionConstrainedCheckBox(PdfVersion constraint, String toolBinding)
         requireNotNullArg(constraint, "PdfVersion cannot be null");
         this.toolBinding = defaultString(toolBinding);
         this.constraint = constraint;
-        this.setGraphic(HelpUtils.helpIcon(i18n().tr("PDF version required: {0}", this.constraint.getVersionString())));
+        this.setGraphic(helpIcon(i18n().tr("PDF version required: {0}", this.constraint.getVersionString())));
         this.getStyleClass().addAll(Style.WITH_HELP.css());
 
         selectedProperty().addListener((o, oldVal, newVal) -> {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/info/KeywordsTab.java
Patch:
@@ -79,6 +79,5 @@ public void changed(ObservableValue<? extends PdfDescriptorLoadingStatus> observ
             LOG.trace("Descriptor loaded, updating keywords tab");
             Platform.runLater(() -> keywords.setText(current.getInformation(PdfMetadataFields.KEYWORDS)));
         }
-
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/banner/SettingsMenuTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import javafx.scene.Scene;
 import javafx.stage.Stage;
-import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.gui.components.dashboard.PreferencesDashboardItem;
@@ -55,7 +54,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void onSettingsClick() {
         HitTestListener<SetActiveDashboardItemRequest> listener = new HitTestListener<>() {
             @Override

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/banner/ToolsMenuTest.java
Patch:
@@ -54,7 +54,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void toolClick() {
         DefaultPriorityTestTool tool = injector.instance(DefaultPriorityTestTool.class);
         HitTestListener<SetActiveToolRequest> listener = new HitTestListener<>() {

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/banner/WorkspaceMenuTest.java
Patch:
@@ -46,7 +46,6 @@
 /**
  * @author Andrea Vacondio
  */
-@Tag("NoHeadless")
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
 public class WorkspaceMenuTest {
     private Injector injector;

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceAppearencePaneTest.java
Patch:
@@ -70,7 +70,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void eventSentOnLocaleChange() {
         Listener<SetLocaleRequest> listener = mock(Listener.class);
         eventStudio().add(SetLocaleRequest.class, listener);

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceComboBoxTest.java
Patch:
@@ -62,7 +62,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void preferenceSetOnClick() {
         robot.clickOn("#victim").clickOn("value2");
         verify(persistentSettings).set(eq(StringPersistentProperty.LOCALE), eq("key2"));

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -40,7 +40,6 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.pdfsam.core.context.ApplicationContext.app;
-import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
 import static org.pdfsam.i18n.I18nContext.i18n;
 
 /**
@@ -52,7 +51,7 @@ public class PreferencePaneTest {
 
     @BeforeAll
     public static void setUpClass() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
         app().persistentSettings().set(BooleanPersistentProperty.CHECK_UPDATES, Boolean.TRUE);
         app().persistentSettings().set(BooleanPersistentProperty.CHECK_FOR_NEWS, Boolean.TRUE);
         app().persistentSettings().set(BooleanPersistentProperty.PLAY_SOUNDS, Boolean.FALSE);

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/ClearToolConfirmationDialogControllerTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Order;
-import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -68,7 +67,7 @@ public class ClearToolConfirmationDialogControllerTest {
 
     @BeforeAll
     public static void setUp() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
     }
 
     @Start
@@ -111,7 +110,6 @@ public void noAskConfirmationPreference() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void positiveTest() {
         button.setOnAction(a -> eventStudio().broadcast(new ClearToolRequest(TOOL, true, true)));
         eventStudio().add(ClearToolRequest.class, listener, TOOL);

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/LenientTaskExecutionDialogControllerTest.java
Patch:
@@ -23,7 +23,6 @@
 import javafx.scene.layout.VBox;
 import javafx.stage.Stage;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.eventstudio.Listener;
@@ -61,7 +60,7 @@ public class LenientTaskExecutionDialogControllerTest {
 
     @BeforeAll
     public static void setUp() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
     }
 
     @Start
@@ -111,7 +110,6 @@ public void negativeNoTest() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void positiveTest() {
         AbstractParameters params = mock(AbstractParameters.class);
         var request = new TaskExecutionRequest("id", params);

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/OpenWithDialogTest.java
Patch:
@@ -73,7 +73,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void singleArg(@TempDir Path folder) throws IOException {
         Listener<ClearToolRequest> clearListener = mock(Listener.class);
         eventStudio().add(ClearToolRequest.class, clearListener, tool.id());

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/log/LogPaneTest.java
Patch:
@@ -40,6 +40,7 @@
  * @author Andrea Vacondio
  */
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
+@Tag("NoHeadless")
 public class LogPaneTest {
 
     private Injector injector;
@@ -70,7 +71,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void clear() {
         LogListView view = injector.instance(LogListView.class);
         assertEquals(2, view.getItems().size());
@@ -79,7 +79,6 @@ public void clear() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void copy() {
         WaitForAsyncUtils.waitForAsyncFx(2000, () -> {
             Clipboard.getSystemClipboard().clear();
@@ -91,7 +90,6 @@ public void copy() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void selectAll() {
         LogListView view = injector.instance(LogListView.class);
         robot.rightClickOn("A message").clickOn("#selectAllLogMenuItem");

File: pdfsam-service/src/test/java/org/pdfsam/service/task/TaskExecutionControllerTest.java
Patch:
@@ -24,10 +24,10 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.eventstudio.Listener;
 import org.pdfsam.model.tool.TaskExecutionRequest;
-import org.pdfsam.service.task.TaskExecutionController;
 import org.pdfsam.service.task.TaskExecutionController.TaskEventBroadcaster;
-import org.pdfsam.test.ClearEventStudioExtension;
 import org.pdfsam.service.tool.UsageService;
+import org.pdfsam.test.ClearEventStudioExtension;
+import org.pdfsam.test.JavaFxThreadInitializeExtension;
 import org.sejda.core.notification.context.GlobalNotificationContext;
 import org.sejda.core.service.TaskExecutionService;
 import org.sejda.model.notification.event.TaskExecutionStartedEvent;
@@ -42,7 +42,7 @@
  * @author Andrea Vacondio
  *
  */
-@ExtendWith(ClearEventStudioExtension.class)
+@ExtendWith({ ClearEventStudioExtension.class, JavaFxThreadInitializeExtension.class })
 public class TaskExecutionControllerTest {
 
     private TaskExecutionService executionService;

File: pdfsam-service/src/test/java/org/pdfsam/service/update/DefaultUpdateServiceTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.pdfsam.core.AppBrand;
 import org.pdfsam.core.BrandableProperty;
 import org.pdfsam.test.ClearEventStudioExtension;
-import org.pdfsam.test.JavaFxThreadInitializeExtension;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -47,7 +46,7 @@
 /**
  * @author Andrea Vacondio
  */
-@ExtendWith({ ClearEventStudioExtension.class, JavaFxThreadInitializeExtension.class })
+@ExtendWith({ ClearEventStudioExtension.class })
 public class DefaultUpdateServiceTest {
 
     private DefaultUpdateService victim;

File: pdfsam-service/src/test/java/org/pdfsam/service/update/UpdatesControllerTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.pdfsam.model.update.UpdateAvailableEvent;
 import org.pdfsam.model.update.UpdateCheckRequest;
 import org.pdfsam.test.ClearEventStudioExtension;
-import org.pdfsam.test.JavaFxThreadInitializeExtension;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.after;
@@ -41,7 +40,7 @@
 /**
  * @author Andrea Vacondio
  */
-@ExtendWith({ ClearEventStudioExtension.class, JavaFxThreadInitializeExtension.class })
+@ExtendWith({ ClearEventStudioExtension.class })
 public class UpdatesControllerTest {
 
     private UpdatesController victim;

File: pdfsam-tools/pdfsam-simple-split/src/test/java/org/pdfsam/tools/split/SplitAfterPredefinedSetOfPagesRadioButtonTest.java
Patch:
@@ -89,7 +89,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void builder() throws Exception {
         robot.clickOn("#combo").clickOn("Odd pages");
         var file = Files.createTempFile(folder, null, ".pdf").toFile();
@@ -141,7 +140,6 @@ public void builderDisabledOptimization() throws Exception {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void saveStateSelected() {
         robot.clickOn(victim);
         robot.clickOn("#combo").clickOn("Odd pages");
@@ -175,7 +173,6 @@ public void restoreState() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void reset() {
         robot.clickOn(victim);
         robot.clickOn("#combo").clickOn("Odd pages");

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/tools/splitbybookmarks/BookmarksLevelComboBoxTest.java
Patch:
@@ -81,7 +81,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void validateOnChange() {
         victim.setValidBookmarkLevels(new TreeSet<>(List.of(300)));
         victim.setValidBookmarkLevels(validLevels);
@@ -155,7 +154,6 @@ public void validApply() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void saveState() {
         victim.setValidBookmarkLevels(validLevels);
         robot.clickOn(victim).push(KeyCode.ALT, KeyCode.DOWN).clickOn("2");

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/commons/ClosePaneCustomTest.java
Patch:
@@ -46,7 +46,6 @@ private void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void customAction(FxRobot robot) {
         HitTestListener<HideStageRequest> listener = new HitTestListener<>();
         eventStudio().add(HideStageRequest.class, listener);

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/commons/ClosePaneTest.java
Patch:
@@ -44,7 +44,6 @@ private void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void hide(FxRobot robot) {
         assertEquals(1, robot.listWindows().size());
         robot.clickOn(".pdfsam-button");

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/BrowsableFileFieldTest.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
 import static org.pdfsam.i18n.I18nContext.i18n;
 
 /**
@@ -47,7 +46,7 @@ public class BrowsableFileFieldTest {
 
     @Test
     public void defaultPromptText() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
         var victim = new BrowsableFileField(FileType.ALL, OpenType.OPEN);
         assertEquals(i18n().tr("Select a file"), victim.getTextField().getPromptText());
     }

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/PasswordFieldPopupTest.java
Patch:
@@ -72,7 +72,6 @@ public void pwdSentOnEnterKey(FxRobot robot) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void pwdSentOnButtonPressed(FxRobot robot) {
         robot.clickOn("press");
         Listener<PdfLoadRequest> listener = mock(Listener.class);

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/multiple/FileColumnTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
+import static org.pdfsam.i18n.I18nContext.i18n;
 
 /**
  * @author Andrea Vacondio
@@ -40,7 +40,7 @@
 public class FileColumnTest {
     @BeforeAll
     public static void setUpClass() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
     }
 
     @Test

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/multiple/SelectionTableToolbarTest.java
Patch:
@@ -79,7 +79,6 @@ public void clear(FxRobot robot) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void clearAllSettings(FxRobot robot) {
         Listener<ClearToolRequest> listener = mock(Listener.class);
         ArgumentCaptor<ClearToolRequest> captor = ArgumentCaptor.forClass(ClearToolRequest.class);

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/single/SingleSelectionPaneTest.java
Patch:
@@ -90,7 +90,7 @@ public class SingleSelectionPaneTest {
 
     @BeforeAll
     public static void setUp() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
         System.setProperty("testfx.robot.write_sleep", "5");
     }
 
@@ -377,7 +377,6 @@ public void clickWithErrorsShowsLogStage() throws Exception {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void clickEncryptedThrowsRequest() throws Exception {
         Listener<PdfLoadRequest> listener = mock(Listener.class);
         eventStudio().add(PdfLoadRequest.class, listener);

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/single/SingleSelectionPaneToolbarTest.java
Patch:
@@ -21,7 +21,6 @@
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
 import javafx.stage.Stage;
-import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -60,7 +59,6 @@ public void start(Stage stage) {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void clear(FxRobot robot) {
         Listener<ClearToolRequest> listener = mock(Listener.class);
         ArgumentCaptor<ClearToolRequest> captor = ArgumentCaptor.forClass(ClearToolRequest.class);

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/tool/FooterTest.java
Patch:
@@ -65,7 +65,7 @@ public class FooterTest {
 
     @BeforeEach
     public void setUp() {
-        eventStudio().broadcast(new SetLocaleRequest(Locale.UK.toLanguageTag()));
+        i18n().setLocale(new SetLocaleRequest(Locale.UK.toLanguageTag()));
         OpenButton button = new OpenButton(TOOL_ID, ToolInputOutputType.SINGLE_PDF);
         victim = new Footer(new RunButton(), button, TOOL_ID);
     }

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/tool/OpenButtonTest.java
Patch:
@@ -22,7 +22,6 @@
 import javafx.scene.layout.HBox;
 import javafx.scene.text.Text;
 import javafx.stage.Stage;
-import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -147,7 +146,6 @@ public void fileOrDirDestination() {
     }
 
     @Test
-    @Tag("NoHeadless")
     public void sendToModuleClick(@TempDir Path folder) throws Exception {
         File file = Files.createTempFile(folder, null, null).toFile();
         NotifiableTaskMetadata taskMetadata = new NotifiableTaskMetadata(mock(Task.class));

File: pdfsam-basic/src/main/java/org/pdfsam/basic/PdfsamBasic.java
Patch:
@@ -32,7 +32,7 @@
  *
  */
 public class PdfsamBasic implements AppBrand {
-    private Properties properties = new Properties();
+    private final Properties properties = new Properties();
 
     public PdfsamBasic() throws IOException {
         try (InputStream stream = this.getClass().getResourceAsStream("/pdfsam.properties")) {

File: pdfsam-core/src/main/java/org/pdfsam/core/BrandableProperty.java
Patch:
@@ -51,7 +51,7 @@ public enum BrandableProperty {
 
     public final String prop;
 
-    private BrandableProperty(String prop) {
+    BrandableProperty(String prop) {
         this.prop = prop;
     }
 }

File: pdfsam-core/src/main/java/org/pdfsam/core/context/ApplicationContext.java
Patch:
@@ -65,7 +65,6 @@ public ApplicationRuntimeState runtimeState() {
     /**
      * Sets the injector
      *
-     * @param injector
      */
     public void injector(Injector injector) {
         this.injector = Optional.ofNullable(injector);

File: pdfsam-core/src/main/java/org/pdfsam/core/context/ApplicationRuntimeState.java
Patch:
@@ -56,7 +56,7 @@ public class ApplicationRuntimeState implements AutoCloseable {
 
     private final BehaviorSubject<Optional<Path>> workingPath = BehaviorSubject.createDefault(empty());
     private final ReplaySubject<Theme> theme = ReplaySubject.create(1);
-    private CompletableFuture<Map<String, Tool>> tools;
+    private final CompletableFuture<Map<String, Tool>> tools;
 
     ApplicationRuntimeState() {
         this.tools = CompletableFuture.supplyAsync(
@@ -80,7 +80,7 @@ public void workingPath(String path) {
     /**
      * Sets the current working path for the application
      *
-     * @param path the current working directory or the path.parent in case of regular file. A null value clears the current working path
+     * @param path the current working directory or the parent in case of regular file. A null value clears the current working path
      */
     public void workingPath(Path path) {
         workingPath.onNext(ofNullable(path).map(p -> {

File: pdfsam-core/src/main/java/org/pdfsam/core/support/io/ObjectCollectionWriter.java
Patch:
@@ -44,13 +44,13 @@ public final class ObjectCollectionWriter implements OngoingWrite {
 
     private static final Logger LOG = LoggerFactory.getLogger(ObjectCollectionWriter.class);
 
-    private Collection<? extends Object> content;
+    private final Collection<?> content;
 
-    private ObjectCollectionWriter(Collection<? extends Object> content) {
+    private ObjectCollectionWriter(Collection<?> content) {
         this.content = content;
     }
 
-    public static OngoingWrite writeContent(Collection<? extends Object> content) {
+    public static OngoingWrite writeContent(Collection<?> content) {
         return new ObjectCollectionWriter(content);
     }
 

File: pdfsam-core/src/main/java/org/pdfsam/core/support/params/MultiplePdfSourceMultipleOutputParametersBuilder.java
Patch:
@@ -35,7 +35,7 @@
 public abstract class MultiplePdfSourceMultipleOutputParametersBuilder<P extends MultiplePdfSourceMultipleOutputParameters>
         extends AbstractPdfOutputParametersBuilder<P> implements MultipleOutputTaskParametersBuilder<P> {
 
-    private Set<PdfFileSource> inputs = new NullSafeSet<>();
+    private final Set<PdfFileSource> inputs = new NullSafeSet<>();
     private SingleOrMultipleTaskOutput output;
     private String prefix;
 

File: pdfsam-core/src/main/java/org/pdfsam/core/support/validation/ContainedIntegerValidator.java
Patch:
@@ -30,7 +30,7 @@
  *
  */
 public class ContainedIntegerValidator implements Validator<String> {
-    private Set<Integer> valid = new HashSet<>();
+    private final Set<Integer> valid = new HashSet<>();
 
     public ContainedIntegerValidator(Set<Integer> validValues) {
         ofNullable(validValues).map(valid::addAll);

File: pdfsam-core/src/main/java/org/pdfsam/core/support/validation/FileTypeValidator.java
Patch:
@@ -30,7 +30,7 @@
  */
 class FileTypeValidator extends FileValidator {
 
-    private FileType type;
+    private final FileType type;
     private boolean mustExist = true;
 
     public FileTypeValidator(FileType type, boolean mustExist) {

File: pdfsam-core/src/main/java/org/pdfsam/core/support/validation/RegexValidator.java
Patch:
@@ -31,7 +31,7 @@
  */
 class RegexValidator implements Validator<String> {
 
-    private Pattern pattern;
+    private final Pattern pattern;
 
     public RegexValidator(String regex) {
         requireNotBlank(regex, "Regex cannot be blank");

File: pdfsam-core/src/main/java/org/pdfsam/core/support/validation/Validators.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.pdfsam.core.support.validation;
 
+import org.apache.commons.lang3.StringUtils;
 import org.pdfsam.model.io.FileType;
 
 import java.nio.file.Files;
@@ -51,7 +52,7 @@ public static Validator<String> alwaysFalse() {
      * @return a new instance of a validator checking for a on blank input string
      */
     public static Validator<String> nonBlank() {
-        return v -> isNotBlank(v);
+        return StringUtils::isNotBlank;
     }
 
     /**

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/AlwaysInvalidStringTest.java
Patch:
@@ -27,7 +27,7 @@
  *
  */
 public class AlwaysInvalidStringTest {
-    private Validator<String> victim = Validators.alwaysFalse();
+    private final Validator<String> victim = Validators.alwaysFalse();
 
     @Test
     public void negative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/BlankStringDecoratorTest.java
Patch:
@@ -30,7 +30,7 @@
  * 
  */
 public class BlankStringDecoratorTest {
-    private Validator<String> victim = validEmpty(positiveInteger());
+    private final Validator<String> victim = validEmpty(positiveInteger());
 
     @Test
     public void negative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/ContainedIntegerValidatorTest.java
Patch:
@@ -31,7 +31,7 @@
  *
  */
 public class ContainedIntegerValidatorTest {
-    private Validator<String> victim = Validators.containedInteger(new HashSet<>(Arrays.asList(-2, 5, 6)));
+    private final Validator<String> victim = Validators.containedInteger(new HashSet<>(Arrays.asList(-2, 5, 6)));
 
     @Test
     public void testNotContained() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/DirectoryValidatorTest.java
Patch:
@@ -32,7 +32,7 @@
  *
  */
 public class DirectoryValidatorTest {
-    private Validator<String> victim = Validators.existingDirectory();
+    private final Validator<String> victim = Validators.existingDirectory();
 
     @Test
     public void testNegative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/FileValidatorTest.java
Patch:
@@ -32,7 +32,7 @@
  *
  */
 public class FileValidatorTest {
-    private Validator<String> victim = Validators.existingFile();
+    private final Validator<String> victim = Validators.existingFile();
 
     @Test
     public void testNegative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/IntRangeStringValidatorTest.java
Patch:
@@ -28,7 +28,7 @@
  * @author Andrea Vacondio
  */
 public class IntRangeStringValidatorTest {
-    private Validator<String> victim = Validators.positiveIntRange(1, 5);
+    private final Validator<String> victim = Validators.positiveIntRange(1, 5);
 
     @Test
     public void negative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/IntegerStringValidatorTest.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class IntegerStringValidatorTest {
 
-    private Validator<String> victim = Validators.positiveInteger();
+    private final Validator<String> victim = Validators.positiveInteger();
 
     @Test
     public void testNegative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/NonBlankStringValidatorTest.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class NonBlankStringValidatorTest {
 
-    private Validator<String> victim = Validators.nonBlank();
+    private final Validator<String> victim = Validators.nonBlank();
 
     @Test
     public void testNegative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/PositiveIntegerValidatorTest.java
Patch:
@@ -25,7 +25,7 @@
  */
 class PositiveIntegerValidatorTest {
 
-    private PositiveIntegerValidator victim = new PositiveIntegerValidator();
+    private final PositiveIntegerValidator victim = new PositiveIntegerValidator();
 
     @Test
     public void testNegative() {

File: pdfsam-core/src/test/java/org/pdfsam/core/support/validation/RegexValidatorTest.java
Patch:
@@ -28,7 +28,7 @@
  *
  */
 public class RegexValidatorTest {
-    private Validator<String> victim = Validators.regexMatching("^([0-9]+,?)+$");
+    private final Validator<String> victim = Validators.regexMatching("^([0-9]+,?)+$");
 
     @Test
     public void testNegative() {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/PdfsamApp.java
Patch:
@@ -229,7 +229,7 @@ private void requestLatestNewsIfRequired() {
     }
 
     /**
-     * This is a workaround for https://bugs.openjdk.java.net/browse/JDK-8238731
+     * This is a workaround for <a href="https://bugs.openjdk.java.net/browse/JDK-8238731">...</a>
      * <p>
      * We fire an ESC key pressed event when the windows looses focus to clear all the mnemonics. Not sure all the edge cases are taken into account, I guess we'll see if some user
      * reports something.

File: pdfsam-gui/src/main/java/org/pdfsam/gui/WindowStatusController.java
Patch:
@@ -42,7 +42,7 @@ public class WindowStatusController {
     private static final Logger LOG = LoggerFactory.getLogger(WindowStatusController.class);
 
     private Stage stage;
-    private StageService service;
+    private final StageService service;
 
     @Inject
     WindowStatusController(StageService service) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/banner/LogButton.java
Patch:
@@ -40,7 +40,7 @@
 class LogButton extends BannerButton {
 
     static final String HAS_ERRORS_CSS_CLASS = "log-has-errors";
-    private Timeline anim;
+    private final Timeline anim;
     private Object action = ShowStageRequest.INSTANCE;
 
     LogButton() {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/banner/NewsButton.java
Patch:
@@ -37,7 +37,7 @@
 class NewsButton extends BannerButton {
 
     static final String UP_TO_DATE_CSS_CLASS = "news-not-up-to-date";
-    private Timeline anim;
+    private final Timeline anim;
     private Object action = ShowNewsPanelRequest.INSTANCE;
 
     NewsButton() {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/Dashboard.java
Patch:
@@ -42,9 +42,9 @@
  */
 public class Dashboard extends BorderPane {
 
-    private Map<String, DashboardItemPane> items = new HashMap<>();
-    private StackPane center = new StackPane();
-    private FadeTransition fade = new FadeTransition(new Duration(300), center);
+    private final Map<String, DashboardItemPane> items = new HashMap<>();
+    private final StackPane center = new StackPane();
+    private final FadeTransition fade = new FadeTransition(new Duration(300), center);
 
     @Inject
     public Dashboard(List<DashboardItem> itemsList, QuickbarDashboardButtonsPane dashboardButtons) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/DashboardButton.java
Patch:
@@ -31,7 +31,7 @@
  *
  */
 class DashboardButton extends BaseQuickbarButton {
-    private DashboardItem item;
+    private final DashboardItem item;
 
     DashboardButton(DashboardItem item) {
         requireNotNullArg(item, "Dashboard item cannot be null");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/DashboardItemPane.java
Patch:
@@ -41,8 +41,8 @@
  */
 class DashboardItemPane extends BorderPane {
 
-    private DashboardItem item;
-    private Listener<SetActiveToolRequest> enableFooterListener = e -> {
+    private final DashboardItem item;
+    private final Listener<SetActiveToolRequest> enableFooterListener = e -> {
         unregister();
         setBottom(buildFooter());
     };

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/PreferencesDashboardItem.java
Patch:
@@ -39,7 +39,7 @@ public class PreferencesDashboardItem implements DashboardItem {
 
 
     public static final String ID = "SETTINGS";
-    private PreferencePane pane;
+    private final PreferencePane pane;
 
     @Inject
     PreferencesDashboardItem(PreferencePane pane) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/QuickbarDashboardButtonsPane.java
Patch:
@@ -37,7 +37,7 @@
  */
 class QuickbarDashboardButtonsPane extends BaseQuickbarButtonsPane {
 
-    private List<DashboardButton> buttons = new ArrayList<>();
+    private final List<DashboardButton> buttons = new ArrayList<>();
 
     @Inject
     QuickbarDashboardButtonsPane(List<DashboardItem> items) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/ToolsDashboardItem.java
Patch:
@@ -36,7 +36,7 @@ public class ToolsDashboardItem implements DashboardItem {
 
     public static final String ID = "TOOLS";
 
-    private ToolsDashboardPane pane;
+    private final ToolsDashboardPane pane;
 
     @Inject
     ToolsDashboardItem(ToolsDashboardPane pane) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/about/AboutDashboardPane.java
Patch:
@@ -56,10 +56,9 @@
 import static org.pdfsam.i18n.I18nContext.i18n;
 
 /**
- * Panel displaying PDFsam logo and About panel informations
- * 
+ * Panel displaying PDFsam logo and About panel information
+ *
  * @author Andrea Vacondio
- * 
  */
 public class AboutDashboardPane extends HBox {
 

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/preference/PreferenceSetterOnValidState.java
Patch:
@@ -37,9 +37,9 @@ class PreferenceSetterOnValidState implements ChangeListener<FXValidationSupport
 
     private static final Logger LOG = LoggerFactory.getLogger(PreferenceBrowsableFileField.class);
 
-    private StringPersistentProperty property;
-    private ValidableTextField textField;
-    private ApplicationContext context;
+    private final StringPersistentProperty property;
+    private final ValidableTextField textField;
+    private final ApplicationContext context;
 
     PreferenceSetterOnValidState(StringPersistentProperty property, ValidableTextField textField,
             ApplicationContext context) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/tools/DashboardTile.java
Patch:
@@ -41,7 +41,7 @@
 class DashboardTile extends VBox {
     private static final PseudoClass ARMED_PSEUDOCLASS_STATE = PseudoClass.getPseudoClass("armed");
 
-    private Button button = new Button();
+    private final Button button = new Button();
 
     public DashboardTile(String title, String description, Node graphic) {
         getStyleClass().addAll("dashboard-modules-tile");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dashboard/tools/ToolsDashboardTile.java
Patch:
@@ -44,8 +44,8 @@
  */
 class ToolsDashboardTile extends DashboardTile {
 
-    private VBox toolButtons = new VBox(5);
-    private String id;
+    private final VBox toolButtons = new VBox(5);
+    private final String id;
 
     ToolsDashboardTile(Tool tool) {
         super(tool.descriptor().name(), tool.descriptor().description(), tool.graphic());

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/ClearToolConfirmationDialogController.java
Patch:
@@ -35,7 +35,7 @@
 @Auto
 public class ClearToolConfirmationDialogController {
 
-    private Provider<ClearToolConfirmationDialog> dialog;
+    private final Provider<ClearToolConfirmationDialog> dialog;
 
     @Inject
     public ClearToolConfirmationDialogController(Provider<ClearToolConfirmationDialog> dialog) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/ConfirmationDialog.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class ConfirmationDialog extends Stage {
 
-    private ConfirmationDialogContent dialogContent;
+    private final ConfirmationDialogContent dialogContent;
     private boolean response = false;
 
     public ConfirmationDialog(DialogStyle style, Stage owner, String positiveButtonText, String negativeButtonText) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/CreateOutputDirectoryDialogController.java
Patch:
@@ -42,7 +42,7 @@ public class CreateOutputDirectoryDialogController {
 
     private static final Logger LOG = LoggerFactory.getLogger(CreateOutputDirectoryDialogController.class);
 
-    private Provider<CreateOutputDirectoryConfirmationDialog> dialog;
+    private final Provider<CreateOutputDirectoryConfirmationDialog> dialog;
 
     @Inject
     public CreateOutputDirectoryDialogController(Provider<CreateOutputDirectoryConfirmationDialog> dialog) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/DialogStyle.java
Patch:
@@ -32,7 +32,7 @@ public enum DialogStyle {
     public final String style;
     public final Ikon icon;
 
-    private DialogStyle(String style, Ikon icon) {
+    DialogStyle(String style, Ikon icon) {
         this.style = style;
         this.icon = icon;
     }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/LenientTaskExecutionDialogController.java
Patch:
@@ -42,7 +42,7 @@ public class LenientTaskExecutionDialogController {
     private static final Logger LOG = LoggerFactory.getLogger(LenientTaskExecutionDialogController.class);
 
     private TaskExecutionRequest latest;
-    private Provider<LenientExecutionConfirmationDialog> dialog;
+    private final Provider<LenientExecutionConfirmationDialog> dialog;
 
     @Inject
     public LenientTaskExecutionDialogController(Provider<LenientExecutionConfirmationDialog> dialog) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/OpenWithDialogController.java
Patch:
@@ -34,7 +34,7 @@
 @Auto
 public class OpenWithDialogController {
 
-    private OpenWithDialog dialog;
+    private final OpenWithDialog dialog;
 
     @Inject
     public OpenWithDialogController(OpenWithDialog dialog) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/OverwriteConfirmationDialog.java
Patch:
@@ -43,9 +43,9 @@
  */
 public class OverwriteConfirmationDialog extends Stage {
 
-    private ConfirmationDialogContent dialogContent;
+    private final ConfirmationDialogContent dialogContent;
     private Optional<ExistingOutputPolicy> response = empty();
-    private HBox buttons = new HBox();
+    private final HBox buttons = new HBox();
 
     @Inject
     public OverwriteConfirmationDialog(@Named("primaryStage") Stage stage) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dialog/OverwriteDialogController.java
Patch:
@@ -49,7 +49,7 @@
 public class OverwriteDialogController {
     private static final Logger LOG = LoggerFactory.getLogger(OverwriteDialogController.class);
 
-    private Provider<OverwriteConfirmationDialog> dialog;
+    private final Provider<OverwriteConfirmationDialog> dialog;
 
     @Inject
     public OverwriteDialogController(Provider<OverwriteConfirmationDialog> dialog) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/dnd/FilesDropController.java
Patch:
@@ -55,7 +55,7 @@ public class FilesDropController {
 
     private static final Logger LOG = LoggerFactory.getLogger(FilesDropController.class);
 
-    private Provider<AddSubdirectoriesConfirmationDialog> dialog;
+    private final Provider<AddSubdirectoriesConfirmationDialog> dialog;
 
     @Inject
     public FilesDropController(Provider<AddSubdirectoriesConfirmationDialog> dialog) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/info/BaseInfoTab.java
Patch:
@@ -36,7 +36,7 @@
  *
  */
 class BaseInfoTab extends Tab {
-    private GridPane grid = new GridPane();
+    private final GridPane grid = new GridPane();
 
     BaseInfoTab() {
         setClosable(false);

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/info/InfoStageController.java
Patch:
@@ -35,7 +35,7 @@
 @Auto
 public class InfoStageController {
 
-    private Provider<InfoStage> stageProvider;
+    private final Provider<InfoStage> stageProvider;
 
     @Inject
     InfoStageController(Provider<InfoStage> stageProvider) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/info/KeywordsTab.java
Patch:
@@ -45,7 +45,7 @@
  */
 class KeywordsTab extends Tab implements ChangeListener<PdfDescriptorLoadingStatus> {
     private static final Logger LOG = LoggerFactory.getLogger(KeywordsTab.class);
-    private Label keywords = new Label();
+    private final Label keywords = new Label();
     private PdfDocumentDescriptor current;
 
     KeywordsTab() {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/log/LogListView.java
Patch:
@@ -62,8 +62,8 @@ public void updateItem(LogMessage item, boolean empty) {
                 getStyleClass().remove(current.style());
             }
             if (nonNull(item)) {
-                setText(item.getMessage());
-                getStyleClass().add(item.getLevel().style());
+                setText(item.message());
+                getStyleClass().add(item.level().style());
             } else {
                 setText("");
             }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/log/LogPane.java
Patch:
@@ -48,7 +48,7 @@
  */
 public class LogPane extends BorderPane {
 
-    private LogListView logView;
+    private final LogListView logView;
 
     @Inject
     public LogPane(LogListView view) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/news/NewsPanel.java
Patch:
@@ -42,8 +42,8 @@
  * @author Andrea Vacondio
  */
 public class NewsPanel extends VBox {
-    private VBox newsPanel = new VBox();
-    ScrollPane scroll = new ScrollPane(newsPanel);
+    private final VBox newsPanel = new VBox();
+    final ScrollPane scroll = new ScrollPane(newsPanel);
 
     public NewsPanel() {
         getStyleClass().add("news-panel");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/notification/Notification.java
Patch:
@@ -45,7 +45,7 @@
  */
 class Notification extends VBox {
 
-    private FadeTransition fade = new FadeTransition(Duration.millis(500), this);
+    private final FadeTransition fade = new FadeTransition(Duration.millis(500), this);
 
     Notification(String title, Node content) {
         requireNotNullArg(content, "Notification content cannot be blank");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/notification/NotificationsContainer.java
Patch:
@@ -73,8 +73,8 @@ private void fadeIn(Notification toAdd, EventHandler<ActionEvent> onFinished) {
 
     void removeNotification(String id) {
         Node toRemove = lookup(String.format("#%s", id));
-        if (toRemove != null && toRemove instanceof Notification) {
-            ((Notification) toRemove).fadeAway();
+        if (toRemove instanceof Notification notification) {
+            notification.fadeAway();
         }
     }
 

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/quickbar/BaseQuickbarButton.java
Patch:
@@ -48,7 +48,7 @@ public BaseQuickbarButton() {
         });
     }
 
-    private BooleanProperty displayText = new SimpleBooleanProperty(false) {
+    private final BooleanProperty displayText = new SimpleBooleanProperty(false) {
         @Override
         protected void invalidated() {
             if (get()) {
@@ -76,7 +76,7 @@ public final boolean isDisplayText() {
     /**
      * Property telling if the button is selected
      */
-    private BooleanProperty selected = new SimpleBooleanProperty(false) {
+    private final BooleanProperty selected = new SimpleBooleanProperty(false) {
         @Override
         protected void invalidated() {
             pseudoClassStateChanged(SELECTED_PSEUDOCLASS_STATE, get());

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/quickbar/BaseQuickbarButtonsPane.java
Patch:
@@ -37,7 +37,7 @@ public BaseQuickbarButtonsPane() {
     /**
      * Property telling if the buttons labels should be visible
      */
-    private BooleanProperty displayText = new SimpleBooleanProperty(false);
+    private final BooleanProperty displayText = new SimpleBooleanProperty(false);
 
     public final void setDisplayText(boolean value) {
         displayTextProperty().set(value);

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/quickbar/ExpandButton.java
Patch:
@@ -31,9 +31,9 @@
  * 
  */
 class ExpandButton extends HBox {
-    private ToggleButton toggle = new ToggleButton();
-    private SVGPath expand = new SVGPath();
-    private SVGPath collapse = new SVGPath();
+    private final ToggleButton toggle = new ToggleButton();
+    private final SVGPath expand = new SVGPath();
+    private final SVGPath collapse = new SVGPath();
 
     public ExpandButton() {
         getStyleClass().add("quickbar-expand-button");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/workarea/QuickbarToolButtonsPane.java
Patch:
@@ -39,7 +39,7 @@
  */
 class QuickbarToolButtonsPane extends BaseQuickbarButtonsPane {
 
-    private Set<ToolButton> buttons = new HashSet<>();
+    private final Set<ToolButton> buttons = new HashSet<>();
 
     @Inject
     QuickbarToolButtonsPane() {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/components/workarea/ToolButton.java
Patch:
@@ -34,7 +34,7 @@
  */
 class ToolButton extends BaseQuickbarButton implements ToolBound {
 
-    private Tool tool;
+    private final Tool tool;
 
     ToolButton(Tool tool) {
         requireNotNullArg(tool, "Module cannot be null");

File: pdfsam-gui/src/main/java/org/pdfsam/gui/configuration/DashboardConfig.java
Patch:
@@ -19,7 +19,7 @@
 package org.pdfsam.gui.configuration;
 
 import jakarta.inject.Named;
-import org.pdfsam.gui.components.dashboard.AboutDashboadItem;
+import org.pdfsam.gui.components.dashboard.AboutDashboardItem;
 import org.pdfsam.gui.components.dashboard.PreferencesDashboardItem;
 import org.pdfsam.gui.components.dashboard.ToolsDashboardItem;
 import org.pdfsam.injector.Components;
@@ -29,7 +29,7 @@
  * @author Andrea Vacondio
  *
  */
-@Components({ AboutDashboadItem.class, PreferencesDashboardItem.class, ToolsDashboardItem.class })
+@Components({ AboutDashboardItem.class, PreferencesDashboardItem.class, ToolsDashboardItem.class })
 public class DashboardConfig {
 
     @Provides

File: pdfsam-gui/src/main/java/org/pdfsam/gui/io/NativeOpenUrlController.java
Patch:
@@ -37,7 +37,7 @@
 @Auto
 public class NativeOpenUrlController {
     private static final Logger LOG = LoggerFactory.getLogger(NativeOpenUrlController.class);
-    private HostServices services;
+    private final HostServices services;
 
     @Inject
     public NativeOpenUrlController(HostServices services) {

File: pdfsam-gui/src/main/java/org/pdfsam/gui/sound/PlaySoundController.java
Patch:
@@ -38,8 +38,8 @@
  */
 @Auto
 public class PlaySoundController {
-    private String okSoundURI;
-    private String errorSoundURI;
+    private final String okSoundURI;
+    private final String errorSoundURI;
 
     @Inject
     public PlaySoundController(@Named("okSound") String okSoundURI, @Named("errorSound") String errorSoundURI) {

File: pdfsam-gui/src/test/java/org/pdfsam/gui/InputPdfArgumentsControllerTest.java
Patch:
@@ -75,7 +75,7 @@ public void onOtherArgs() {
 
     @Test
     public void onNonExisting() {
-        new InputPdfArgumentsConsumer().accept(Arrays.asList("/chuck/norris.pdf"));
+        new InputPdfArgumentsConsumer().accept(List.of("/chuck/norris.pdf"));
         verify(listener, never()).onEvent(any());
     }
 

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/banner/MenuButtonTest.java
Patch:
@@ -52,7 +52,7 @@ public void start(Stage stage) {
     }
 
     @Test
-    public void onClick() throws InterruptedException {
+    public void onClick() {
         var tool = injector.instance(DefaultPriorityTestTool.class);
         HitTestListener<SetActiveToolRequest> listener = new HitTestListener<>();
         eventStudio().add(SetActiveToolRequest.class, listener);

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/DashboardTest.java
Patch:
@@ -54,7 +54,7 @@
 @ExtendWith({ JavaFxThreadExtension.class, ClearEventStudioExtension.class })
 public class DashboardTest {
 
-    @Components({ AboutDashboadItem.class })
+    @Components({ AboutDashboardItem.class })
     static class Config {
         @Provides
         public AboutDashboardPane aboutPane() {
@@ -180,7 +180,7 @@ public void eventIsSent() {
             Listener<SetTitleRequest> listener = mock(Listener.class);
             eventStudio().add(SetTitleRequest.class, listener);
             victim.onSetActiveDashboardItem(
-                    new SetActiveDashboardItemRequest(injector.instance(AboutDashboadItem.class).id()));
+                    new SetActiveDashboardItemRequest(injector.instance(AboutDashboardItem.class).id()));
             verify(listener).onEvent(any());
             assertFalse(((StackPane) victim.getCenter()).getChildren().isEmpty());
         }

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceAppearencePaneTest.java
Patch:
@@ -51,8 +51,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class PreferenceAppearencePaneTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceBrowsableDirectoryFieldTest.java
Patch:
@@ -49,8 +49,8 @@ public class PreferenceBrowsableDirectoryFieldTest {
 
     @TempDir
     public Path folder;
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceBrowsableFileFieldTest.java
Patch:
@@ -52,8 +52,8 @@ public class PreferenceBrowsableFileFieldTest {
 
     @TempDir
     public Path folder;
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceCheckBoxTest.java
Patch:
@@ -41,8 +41,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class PreferenceCheckBoxTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceComboBoxTest.java
Patch:
@@ -44,8 +44,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class PreferenceComboBoxTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceIntTextFieldTest.java
Patch:
@@ -45,8 +45,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class PreferenceIntTextFieldTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceOutputPaneTest.java
Patch:
@@ -42,8 +42,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class PreferenceOutputPaneTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceRadioButtonTest.java
Patch:
@@ -41,8 +41,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class PreferenceRadioButtonTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dashboard/preference/PreferenceSetterOnValidStateTest.java
Patch:
@@ -38,8 +38,8 @@
 @ExtendWith({ JavaFxThreadExtension.class })
 public class PreferenceSetterOnValidStateTest {
 
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
 
     @BeforeEach
     public void setUp() {

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/ClearToolConfirmationDialogControllerTest.java
Patch:
@@ -62,8 +62,8 @@ public class ClearToolConfirmationDialogControllerTest {
     public static ClearEventStudioExtension extension = new ClearEventStudioExtension(TOOL);
     private Button button;
     private HitTestListener<ClearToolRequest> listener;
-    private ApplicationContext appContext = mock(ApplicationContext.class);
-    private ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
+    private final ApplicationContext appContext = mock(ApplicationContext.class);
+    private final ApplicationPersistentSettings persistentSettings = mock(ApplicationPersistentSettings.class);
     private FxRobot robot;
 
     @BeforeAll

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/CreateOutputDirectoryDialogControllerTest.java
Patch:
@@ -70,7 +70,7 @@ public void start(Stage stage) {
 
 
     @Test
-    public void negativeTest(@TempDir Path folder) throws IOException {
+    public void negativeTest(@TempDir Path folder) {
         Path file = folder.resolve("folder");
         button.setOnAction(a -> eventStudio().broadcast(new NonExistingOutputDirectoryEvent(file)));
         robot.clickOn("show");
@@ -80,7 +80,7 @@ public void negativeTest(@TempDir Path folder) throws IOException {
 
     @Test
     @Tag("NoHeadless")
-    public void positiveTest(@TempDir Path folder) throws IOException {
+    public void positiveTest(@TempDir Path folder) {
         Path file = folder.resolve("folder");
         button.setOnAction(a -> eventStudio().broadcast(new NonExistingOutputDirectoryEvent(file)));
         robot.clickOn("show");

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/LenientExecutionConfirmationDialogTest.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.ui.components.dialog;
+package org.pdfsam.gui.components.dialog;
 
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
@@ -26,7 +26,6 @@
 import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.pdfsam.gui.components.dialog.LenientExecutionConfirmationDialog;
 import org.pdfsam.i18n.SetLocaleRequest;
 import org.pdfsam.test.ClearEventStudioExtension;
 import org.testfx.api.FxRobot;

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/LenientTaskExecutionDialogControllerTest.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.ui.components.dialog;
+package org.pdfsam.gui.components.dialog;
 
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
@@ -27,8 +27,6 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.pdfsam.eventstudio.Listener;
-import org.pdfsam.gui.components.dialog.LenientExecutionConfirmationDialog;
-import org.pdfsam.gui.components.dialog.LenientTaskExecutionDialogController;
 import org.pdfsam.i18n.SetLocaleRequest;
 import org.pdfsam.model.tool.TaskExecutionRequest;
 import org.pdfsam.test.ClearEventStudioExtension;

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/OpenWithDialogControllerTest.java
Patch:
@@ -48,8 +48,8 @@
 @ExtendWith({ ApplicationExtension.class })
 public class OpenWithDialogControllerTest {
 
-    private Tool tool1 = new HighPriorityTestTool();
-    private Tool tool2 = new DefaultPriorityTestTool();
+    private final Tool tool1 = new HighPriorityTestTool();
+    private final Tool tool2 = new DefaultPriorityTestTool();
     @RegisterExtension
     public ClearEventStudioExtension clearEventStudio = new ClearEventStudioExtension(tool1.id(), tool2.id());
     private Button button;

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/dialog/OpenWithDialogTest.java
Patch:
@@ -57,7 +57,7 @@
 @ExtendWith({ ApplicationExtension.class })
 public class OpenWithDialogTest {
 
-    private Tool tool = new DefaultPriorityTestTool();
+    private final Tool tool = new DefaultPriorityTestTool();
     @RegisterExtension
     public ClearEventStudioExtension clearEventStudio = new ClearEventStudioExtension(tool.id());
     private Button button;

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/log/LogMessageTest.java
Patch:
@@ -31,7 +31,7 @@ public class LogMessageTest {
     @Test
     public void defaultLevel() {
         LogMessage victim = new LogMessage("message", null);
-        assertEquals(LogLevel.INFO, victim.getLevel());
+        assertEquals(LogLevel.INFO, victim.level());
     }
 
     @Test

File: pdfsam-gui/src/test/java/org/pdfsam/gui/components/workarea/ModuleButtonTest.java
Patch:
@@ -44,7 +44,7 @@
 @ExtendWith({ ApplicationExtension.class, ClearEventStudioExtension.class })
 public class ModuleButtonTest   {
 
-    private DefaultPriorityTestTool module = new DefaultPriorityTestTool();
+    private final DefaultPriorityTestTool module = new DefaultPriorityTestTool();
     private FxRobot robot;
 
     @Start

File: pdfsam-gui/src/test/java/org/pdfsam/gui/sound/PlaySoundControllerTest.java
Patch:
@@ -16,11 +16,10 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.sound;
+package org.pdfsam.gui.sound;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.pdfsam.gui.sound.PlaySoundController;
 import org.pdfsam.test.ClearEventStudioExtension;
 
 import static org.junit.jupiter.api.Assertions.assertThrows;

File: pdfsam-model/src/main/java/org/pdfsam/model/ObservableAtomicReference.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class ObservableAtomicReference<T> extends ObservableValueBase<T> {
 
-    private AtomicReference<T> value = new AtomicReference<>();
+    private final AtomicReference<T> value = new AtomicReference<>();
 
     public ObservableAtomicReference(T initialValue) {
         this.value.set(initialValue);

File: pdfsam-model/src/main/java/org/pdfsam/model/io/FileType.java
Patch:
@@ -37,9 +37,9 @@ public enum FileType {
     XML("(*.xml)", "*.xml", "*.XML"),
     JSON("(*.json)", "*.json", "*.JSON"),
     HTML("(*.html, *.htm)", "*.htm", "*.html", "*.HTM", "*.HTML");
-    private ExtensionFilter filter;
+    private final ExtensionFilter filter;
 
-    private FileType(String description, String... extensions) {
+    FileType(String description, String... extensions) {
         this.filter = new ExtensionFilter(description, extensions);
     }
 

File: pdfsam-model/src/main/java/org/pdfsam/model/io/OpenType.java
Patch:
@@ -23,5 +23,5 @@
  */
 public enum OpenType {
     SAVE,
-    OPEN;
+    OPEN
 }

File: pdfsam-model/src/main/java/org/pdfsam/model/pdf/PdfLoadRequest.java
Patch:
@@ -30,7 +30,7 @@
  * @author Andrea Vacondio
  */
 public class PdfLoadRequest extends BaseToolBound {
-    private List<PdfDocumentDescriptor> documents = new ArrayList<>();
+    private final List<PdfDocumentDescriptor> documents = new ArrayList<>();
 
     public PdfLoadRequest(String toolId) {
         super(toolId);

File: pdfsam-model/src/main/java/org/pdfsam/model/task/BulkRotateParameters.java
Patch:
@@ -89,10 +89,9 @@ public boolean equals(Object other) {
         if (this == other) {
             return true;
         }
-        if (!(other instanceof BulkRotateParameters)) {
+        if (!(other instanceof BulkRotateParameters params)) {
             return false;
         }
-        BulkRotateParameters params = (BulkRotateParameters) other;
         return new EqualsBuilder().appendSuper(super.equals(other)).append(outputPrefix, params.outputPrefix)
                 .append(output, params.output).append(inputSet, params.inputSet).isEquals();
     }

File: pdfsam-model/src/main/java/org/pdfsam/model/task/PdfRotationInput.java
Patch:
@@ -31,6 +31,7 @@
 import org.sejda.model.rotation.Rotation;
 
 import java.util.Arrays;
+import java.util.List;
 import java.util.Set;
 
 import static java.util.Objects.requireNonNull;
@@ -64,7 +65,7 @@ public PdfRotationInput(PdfSource<?> source, Rotation rotation, PagesSelection..
         this.source = source;
         this.rotation = rotation;
         this.pageSelection.addAll(ofNullable(pages).filter(p -> p.length > 0).map(Arrays::asList)
-                .orElseGet(() -> Arrays.asList(PredefinedSetOfPages.ALL_PAGES)));
+                .orElseGet(() -> List.of(PredefinedSetOfPages.ALL_PAGES)));
     }
 
     @Override
@@ -90,10 +91,9 @@ public boolean equals(Object other) {
         if (this == other) {
             return true;
         }
-        if (!(other instanceof PdfRotationInput)) {
+        if (!(other instanceof PdfRotationInput input)) {
             return false;
         }
-        PdfRotationInput input = (PdfRotationInput) other;
         return new EqualsBuilder().append(source, input.source).append(rotation, input.rotation)
                 .append(pageSelection, input.pageSelection).isEquals();
     }

File: pdfsam-model/src/main/java/org/pdfsam/model/tool/RequiredPdfData.java
Patch:
@@ -25,5 +25,5 @@
  */
 public enum RequiredPdfData {
     DEFAULT,
-    BOOMARKS;
+    BOOMARKS
 }

File: pdfsam-model/src/main/java/org/pdfsam/model/tool/ToolCategory.java
Patch:
@@ -36,10 +36,10 @@ public enum ToolCategory {
 
     OTHER(i18n().tr("Other tools"), "category-other");
 
-    private String description;
-    private String styleClass;
+    private final String description;
+    private final String styleClass;
 
-    private ToolCategory(String description, String styleClass) {
+    ToolCategory(String description, String styleClass) {
         this.description = description;
         this.styleClass = styleClass;
     }

File: pdfsam-model/src/main/java/org/pdfsam/model/tool/ToolInputOutputType.java
Patch:
@@ -26,5 +26,5 @@
 public enum ToolInputOutputType {
     MULTIPLE_PDF,
     SINGLE_PDF,
-    OTHER;
+    OTHER
 }

File: pdfsam-model/src/main/java/org/pdfsam/model/tool/ToolPriority.java
Patch:
@@ -27,7 +27,7 @@ public enum ToolPriority {
     LOW(10),
     DEFAULT(0),
     HIGH(-10);
-    private int priority;
+    private final int priority;
 
     ToolPriority(int priority) {
         this.priority = priority;

File: pdfsam-model/src/main/java/org/pdfsam/model/ui/StageStatus.java
Patch:
@@ -26,7 +26,7 @@
  * @author Andrea Vacondio
  */
 public record StageStatus(double x, double y, double width, double height, StageMode mode) {
-    public static StageStatus NULL = new StageStatus(0, 0, 0, 0);
+    public static final StageStatus NULL = new StageStatus(0, 0, 0, 0);
 
     public StageStatus {
         requireNonNull(mode);

File: pdfsam-persistence/src/main/java/org/pdfsam/persistence/PersistenceException.java
Patch:
@@ -18,13 +18,16 @@
  */
 package org.pdfsam.persistence;
 
+import java.io.Serial;
+
 /**
  * Exception thrown by persistence layer.
  *
  * @author Andrea Vacondio
  */
 public class PersistenceException extends RuntimeException {
 
+    @Serial
     private static final long serialVersionUID = 4205785256638672842L;
 
     public PersistenceException(String message, Throwable cause) {

File: pdfsam-persistence/src/test/java/org/pdfsam/persistence/PreferencesRepositoryTest.java
Patch:
@@ -131,8 +131,7 @@ public void getNullKey() {
     @Test
     @DisplayName("Getting the NUL character throws an exception")
     public void negativeGet() {
-        assertThrows(PersistenceException.class,
-                () -> victim.getString("key7" + Character.toString('\0'), (String) null));
+        assertThrows(PersistenceException.class, () -> victim.getString("key7" + '\0', (String) null));
     }
 
     @Test
@@ -148,7 +147,7 @@ public void deleteNullKey() {
     @Test
     @DisplayName("Deleting a key containing the NUL character throws an exception")
     public void negativeDelete() {
-        assertThrows(PersistenceException.class, () -> victim.delete("key8" + Character.toString('\0')));
+        assertThrows(PersistenceException.class, () -> victim.delete("key8" + '\0'));
     }
 
     @Test

File: pdfsam-service/src/main/java/org/pdfsam/service/pdf/DefaultPdfLoadService.java
Patch:
@@ -71,7 +71,7 @@ public DefaultPdfLoadService(List<PdfLoader<PDDocument>> loaders) {
     public void load(Collection<? extends PdfDocumentDescriptor> toLoad, RequiredPdfData... requires) {
         LOG.debug(i18n().tr("Loading pdf documents"));
         BiConsumer<PDDocument, PdfDocumentDescriptor> consumer = Arrays.stream(requires).map(consumers::get)
-                .reduce(STARTER, (r, d) -> r.andThen(d)).andThen(FINISHER);
+                .reduce(STARTER, BiConsumer::andThen).andThen(FINISHER);
 
         for (PdfDocumentDescriptor current : toLoad) {
             if (current.hasReferences()) {

File: pdfsam-service/src/main/java/org/pdfsam/service/pdf/DefaultSAMBoxLoader.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class DefaultSAMBoxLoader implements PdfLoader<PDDocument> {
 
-    private static FastDateFormat FORMATTER = FastDateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.MEDIUM);
+    private static final FastDateFormat FORMATTER = FastDateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.MEDIUM);
 
     @Override
     public void accept(PDDocument document, PdfDocumentDescriptor descriptor) {

File: pdfsam-service/src/main/java/org/pdfsam/service/pdf/PdfLoadController.java
Patch:
@@ -52,9 +52,9 @@ public class PdfLoadController {
 
     private static final Logger LOG = LoggerFactory.getLogger(PdfLoadController.class);
 
-    private PdfLoadService loadService;
-    private ExecutorService executor = Executors.newSingleThreadExecutor();
-    private Map<String, RequiredPdfData[]> requiredLoadData = new HashMap<>();
+    private final PdfLoadService loadService;
+    private final ExecutorService executor = Executors.newSingleThreadExecutor();
+    private final Map<String, RequiredPdfData[]> requiredLoadData = new HashMap<>();
 
     @Inject
     public PdfLoadController(PdfLoadService loadService) {

File: pdfsam-service/src/main/java/org/pdfsam/service/premium/PremiumToolsController.java
Patch:
@@ -39,7 +39,7 @@
 public class PremiumToolsController {
     private static final Logger LOG = LoggerFactory.getLogger(PremiumToolsController.class);
 
-    private PremiumToolsService service;
+    private final PremiumToolsService service;
 
     @Inject
     PremiumToolsController(PremiumToolsService service) {

File: pdfsam-service/src/main/java/org/pdfsam/service/ui/DefaultRecentWorkspacesService.java
Patch:
@@ -51,7 +51,7 @@ public class DefaultRecentWorkspacesService implements RecentWorkspacesService {
 
     static final int MAX_CAPACITY = 5;
     private final PreferencesRepository repo;
-    private Map<String, String> cache = new LRUMap<>(MAX_CAPACITY);
+    private final Map<String, String> cache = new LRUMap<>(MAX_CAPACITY);
 
     @Inject
     public DefaultRecentWorkspacesService(@Named("recentWorkspacesRepository") PreferencesRepository repo) {

File: pdfsam-service/src/main/java/org/pdfsam/service/ui/StageServiceController.java
Patch:
@@ -37,7 +37,7 @@
 public class StageServiceController {
     private static final Logger LOG = LoggerFactory.getLogger(StageServiceController.class);
 
-    private StageService service;
+    private final StageService service;
 
     @Inject
     public StageServiceController(StageService service) {

File: pdfsam-service/src/main/java/org/pdfsam/service/ui/WorkspaceController.java
Patch:
@@ -47,9 +47,9 @@
 public class WorkspaceController {
     private static final Logger LOG = LoggerFactory.getLogger(WorkspaceController.class);
 
-    private Collection<Tool> tools;
-    private WorkspaceService service;
-    private RecentWorkspacesService recentWorkspace;
+    private final Collection<Tool> tools;
+    private final WorkspaceService service;
+    private final RecentWorkspacesService recentWorkspace;
 
     @Inject
     WorkspaceController(WorkspaceService service, RecentWorkspacesService recentWorkspace) {

File: pdfsam-service/src/main/java/org/pdfsam/service/update/UpdatesController.java
Patch:
@@ -46,8 +46,8 @@
 public class UpdatesController {
     private static final Logger LOG = LoggerFactory.getLogger(UpdatesController.class);
 
-    private AppBrand appBrand;
-    private UpdateService service;
+    private final AppBrand appBrand;
+    private final UpdateService service;
 
     @Inject
     UpdatesController(UpdateService service, AppBrand appBrand) {

File: pdfsam-service/src/test/java/org/pdfsam/service/tool/DefaultUsageServiceTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() {
                 .serializationInclusion(JsonInclude.Include.NON_EMPTY)
                 .build();
         this.victim = new DefaultUsageService(
-                new DefaultEntityRepository<ToolUsage>("/test/org/pdfsam/moduleusage", mapper, ToolUsage.class));
+                new DefaultEntityRepository<>("/test/org/pdfsam/moduleusage", mapper, ToolUsage.class));
     }
 
     @AfterEach

File: pdfsam-service/src/test/java/org/pdfsam/service/tool/ToolUsageTest.java
Patch:
@@ -30,7 +30,7 @@
 public class ToolUsageTest {
 
     @Test
-    public void lastSeenIsUpdated() throws InterruptedException {
+    public void lastSeenIsUpdated() {
         var victim = new ToolUsage("ChuckNorris");
         victim.inc();
         long lastSeen = victim.getLastSeen();

File: pdfsam-service/src/test/java/org/pdfsam/service/ui/DefaultRecentWorkspacesServiceTest.java
Patch:
@@ -95,7 +95,7 @@ public void noDuplicateIsPushedTop(@TempDir Path folder) throws IOException, Int
     }
 
     @Test
-    public void addWorkspace(@TempDir Path folder) throws IOException, InterruptedException {
+    public void addWorkspace(@TempDir Path folder) throws IOException {
         var file = Files.createTempFile(folder, null, ".json").toFile();
         victim.addWorkspaceLastUsed(file);
         assertThat(victim.getRecentlyUsedWorkspaces()).containsExactly(file.getAbsolutePath());

File: pdfsam-service/src/test/java/org/pdfsam/service/ui/DefaultStageServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() {
                 .serializationInclusion(JsonInclude.Include.NON_EMPTY)
                 .build();
         this.victim = new DefaultStageService(
-                new DefaultEntityRepository<StageStatus>("/test/org/pdfsam/stageservice", mapper, StageStatus.class));
+                new DefaultEntityRepository<>("/test/org/pdfsam/stageservice", mapper, StageStatus.class));
     }
 
     @AfterEach

File: pdfsam-service/src/test/java/org/pdfsam/service/ui/WorkspaceControllerTest.java
Patch:
@@ -97,7 +97,7 @@ public void loadEmptyWorkspace() throws InterruptedException, ExecutionException
     }
 
     @Test
-    public void loadWorkspaceWithException() throws InterruptedException, ExecutionException {
+    public void loadWorkspaceWithException() {
         Listener<LoadWorkspaceRequest> listener = mock(Listener.class);
         eventStudio().add(LoadWorkspaceRequest.class, listener, DefaultPriorityTestTool.ID);
         when(service.loadWorkspace(eq(file))).thenThrow(new RuntimeException("mock"));

File: pdfsam-test/src/main/java/org/pdfsam/test/AdditionalDefaultPriorityTestTool.java
Patch:
@@ -30,7 +30,7 @@ public class AdditionalDefaultPriorityTestTool implements Tool {
 
     public static final String ID = "additional.test.module";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.MERGE).description("Test module")
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.MERGE).description("Test module")
             .inputTypes(ToolInputOutputType.SINGLE_PDF).name("ATestModule").priority(ToolPriority.DEFAULT)
             .supportURL("http://www.chucknorrisfacts.com/")
             .build();

File: pdfsam-test/src/main/java/org/pdfsam/test/DefaultPriorityTestTool.java
Patch:
@@ -36,7 +36,7 @@
 public class DefaultPriorityTestTool implements Tool {
     public static final String ID = "test.module";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.MERGE).description("Test module")
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.MERGE).description("Test module")
             .inputTypes(ToolInputOutputType.SINGLE_PDF).name("TestModule").priority(ToolPriority.DEFAULT)
             .supportURL("http://www.chucknorrisfacts.com/")
             .build();

File: pdfsam-test/src/main/java/org/pdfsam/test/HighPriorityTestTool.java
Patch:
@@ -34,7 +34,7 @@
 public class HighPriorityTestTool implements Tool {
     public static final String ID = "high.test.module";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.EDIT).description("High priority test module")
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.EDIT).description("High priority test module")
             .name("HighPriorityTestModule").priority(ToolPriority.HIGH).inputTypes(ToolInputOutputType.MULTIPLE_PDF)
             .build();
 

File: pdfsam-test/src/main/java/org/pdfsam/test/LowPriorityTestTool.java
Patch:
@@ -35,7 +35,7 @@
 public class LowPriorityTestTool implements Tool {
     public static final String ID = "low.test.module";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT).description("Low priority test module")
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT).description("Low priority test module")
             .name("LowPriorityTestModule").priority(ToolPriority.LOW)
             .build();
 

File: pdfsam-themes/src/main/java/org/pdfsam/theme/Dark.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class Dark implements Theme {
 
-    private Light parent = new Light();
+    private final Light parent = new Light();
 
     @Override
     public String id() {

File: pdfsam-tools/pdfsam-alternate-mix/src/main/java/module-info.java
Patch:
@@ -28,7 +28,6 @@
     requires transitive org.pdfsam.model;
     requires jakarta.inject;
     requires javafx.graphics;
-    requires javafx.controls;
     requires org.pdfsam.eventstudio;
     requires org.pdfsam.injector;
     requires org.kordamp.ikonli.javafx;

File: pdfsam-tools/pdfsam-alternate-mix/src/main/java/org/pdfsam/tools/alternatemix/AlternateMixParametersBuilder.java
Patch:
@@ -37,7 +37,7 @@ class AlternateMixParametersBuilder extends AbstractPdfOutputParametersBuilder<A
         implements SingleOutputTaskParametersBuilder<AlternateMixMultipleInputParameters> {
 
     private FileTaskOutput output;
-    private Set<PdfMixInput> inputs = new NullSafeSet<>();
+    private final Set<PdfMixInput> inputs = new NullSafeSet<>();
 
     @Override
     public void output(FileTaskOutput output) {

File: pdfsam-tools/pdfsam-alternate-mix/src/main/java/org/pdfsam/tools/alternatemix/AlternateMixToolPanel.java
Patch:
@@ -43,9 +43,9 @@
  */
 public class AlternateMixToolPanel extends BaseToolPanel {
 
-    private AlternateMixSelectionPane selectionPane = new AlternateMixSelectionPane(TOOL_ID);
-    private BrowsablePdfOutputField destinationFileField;
-    private PdfDestinationPane destinationPane;
+    private final AlternateMixSelectionPane selectionPane = new AlternateMixSelectionPane(TOOL_ID);
+    private final BrowsablePdfOutputField destinationFileField;
+    private final PdfDestinationPane destinationPane;
 
     @Inject
     public AlternateMixToolPanel(@Named(TOOL_ID + "field") BrowsablePdfOutputField destinationFileField,

File: pdfsam-tools/pdfsam-extract/src/main/java/org/pdfsam/tools/extract/ExtractSelectionPane.java
Patch:
@@ -52,7 +52,7 @@ public ExtractSelectionPane(String ownerModule) {
     @Override
     public void apply(ExtractParametersBuilder builder, Consumer<String> onError) {
         try {
-            table().getItems().stream().forEach(i -> builder.addSource(i.descriptor().toPdfFileSource()));
+            table().getItems().forEach(i -> builder.addSource(i.descriptor().toPdfFileSource()));
             if (!builder.hasInput()) {
                 onError.accept(i18n().tr("No PDF document has been selected"));
             }

File: pdfsam-tools/pdfsam-extract/src/main/java/org/pdfsam/tools/extract/ExtractTool.java
Patch:
@@ -53,7 +53,7 @@ public class ExtractTool implements Tool {
 
     static final String TOOL_ID = "extract";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
             .inputTypes(ToolInputOutputType.MULTIPLE_PDF, ToolInputOutputType.SINGLE_PDF).name(i18n().tr("Extract"))
             .description(i18n().tr("Extract pages from PDF documents.")).priority(ToolPriority.DEFAULT.getPriority())
             .supportURL("https://pdfsam.org/pdf-extract-pages/")

File: pdfsam-tools/pdfsam-extract/src/main/java/org/pdfsam/tools/extract/ExtractToolPanel.java
Patch:
@@ -49,9 +49,9 @@ public class ExtractToolPanel extends BaseToolPanel {
 
     private final ExtractSelectionPane selectionPane = new ExtractSelectionPane(TOOL_ID);
     private final ExtractOptionsPane extractOptions = new ExtractOptionsPane();
-    private BrowsableOutputDirectoryField destinationDirectoryField;
-    private PdfDestinationPane destinationPane;
-    private PrefixPane prefix;
+    private final BrowsableOutputDirectoryField destinationDirectoryField;
+    private final PdfDestinationPane destinationPane;
+    private final PrefixPane prefix;
 
     @Inject
     public ExtractToolPanel(@Named(TOOL_ID + "field") BrowsableOutputDirectoryField destinationDirectoryField,

File: pdfsam-tools/pdfsam-merge/src/main/java/org/pdfsam/tools/merge/MergeParametersBuilder.java
Patch:
@@ -39,7 +39,7 @@
 class MergeParametersBuilder extends AbstractPdfOutputParametersBuilder<MergeParameters>
         implements SingleOutputTaskParametersBuilder<MergeParameters> {
 
-    private Set<PdfMergeInput> inputs = new NullSafeSet<>();
+    private final Set<PdfMergeInput> inputs = new NullSafeSet<>();
     private OutlinePolicy outlinePolicy = OutlinePolicy.RETAIN;
     private boolean blankIfOdd;
     private boolean footer;

File: pdfsam-tools/pdfsam-merge/src/main/java/org/pdfsam/tools/merge/MergeTool.java
Patch:
@@ -50,7 +50,7 @@ public class MergeTool implements Tool {
 
     static final String TOOL_ID = "merge";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.MERGE)
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.MERGE)
             .inputTypes(ToolInputOutputType.MULTIPLE_PDF).name(i18n().tr("Merge"))
             .description(i18n().tr("Merge together multiple PDF documents or subsections of them."))
             .priority(ToolPriority.HIGH.getPriority()).supportURL("https://pdfsam.org/pdf-merge/")

File: pdfsam-tools/pdfsam-rotate/src/main/java/org/pdfsam/tools/rotate/RotateParametersBuilder.java
Patch:
@@ -44,15 +44,15 @@ class RotateParametersBuilder extends AbstractPdfOutputParametersBuilder<BulkRot
 
     private SingleOrMultipleTaskOutput output;
     private String prefix;
-    private Set<PdfRotationInput> inputs = new NullSafeSet<>();
+    private final Set<PdfRotationInput> inputs = new NullSafeSet<>();
     private Rotation rotation;
     private PredefinedSetOfPages predefinedRotationType;
 
     void addInput(PdfSource<?> source, Set<PageRange> pageSelection) {
         if (isNull(pageSelection) || pageSelection.isEmpty()) {
             this.inputs.add(new PdfRotationInput(source, rotation, predefinedRotationType));
         } else {
-            this.inputs.add(new PdfRotationInput(source, rotation, pageSelection.stream().toArray(PageRange[]::new)));
+            this.inputs.add(new PdfRotationInput(source, rotation, pageSelection.toArray(PageRange[]::new)));
         }
     }
 

File: pdfsam-tools/pdfsam-rotate/src/main/java/org/pdfsam/tools/rotate/RotateTool.java
Patch:
@@ -52,7 +52,7 @@ public class RotateTool implements Tool {
 
     static final String TOOL_ID = "rotate";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.OTHER)
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.OTHER)
             .inputTypes(ToolInputOutputType.MULTIPLE_PDF, ToolInputOutputType.SINGLE_PDF).name(i18n().tr("Rotate"))
             .description(i18n().tr("Rotate the pages of multiple PDF documents."))
             .priority(ToolPriority.DEFAULT.getPriority()).supportURL("https://pdfsam.org/rotate-pdf/")

File: pdfsam-tools/pdfsam-simple-split/src/main/java/module-info.java
Patch:
@@ -22,7 +22,6 @@
 module org.pdfsam.tools.split {
     exports org.pdfsam.tools.split;
 
-    requires org.slf4j;
     requires org.pdfsam.core;
     requires org.pdfsam.ui.components;
     requires org.pdfsam.i18n;

File: pdfsam-tools/pdfsam-simple-split/src/main/java/org/pdfsam/tools/split/SplitAfterPredefinedSetOfPagesRadioButton.java
Patch:
@@ -42,7 +42,7 @@
 class SplitAfterPredefinedSetOfPagesRadioButton extends RadioButton
         implements SplitParametersBuilderCreator, RestorableView, ResettableView {
 
-    private ComboBox<ComboItem<PredefinedSetOfPages>> combo;
+    private final ComboBox<ComboItem<PredefinedSetOfPages>> combo;
 
     public SplitAfterPredefinedSetOfPagesRadioButton(ComboBox<ComboItem<PredefinedSetOfPages>> combo) {
         super(i18n().tr("Split after"));
@@ -92,7 +92,7 @@ public void restoreStateFrom(Map<String, String> data) {
      */
     static class SimpleSplitParametersBuilder extends SplitParametersBuilder<SimpleSplitParameters> {
 
-        private PredefinedSetOfPages pages;
+        private final PredefinedSetOfPages pages;
 
         SimpleSplitParametersBuilder(PredefinedSetOfPages pages) {
             this.pages = pages;

File: pdfsam-tools/pdfsam-simple-split/src/main/java/org/pdfsam/tools/split/SplitAfterRadioButton.java
Patch:
@@ -95,7 +95,7 @@ public void resetView() {
      */
     static class SplitByPageParametersBuilder extends SplitParametersBuilder<SplitByPagesParameters> {
 
-        private List<Integer> pages;
+        private final List<Integer> pages;
 
         SplitByPageParametersBuilder(List<Integer> pages) {
             this.pages = pages;

File: pdfsam-tools/pdfsam-simple-split/src/main/java/org/pdfsam/tools/split/SplitByEveryRadioButton.java
Patch:
@@ -99,7 +99,7 @@ public void resetView() {
      */
     static class SplitByEveryXPagesParametersBuilder extends SplitParametersBuilder<SplitByEveryXPagesParameters> {
 
-        private int step;
+        private final int step;
 
         SplitByEveryXPagesParametersBuilder(int step) {
             this.step = step;

File: pdfsam-tools/pdfsam-simple-split/src/main/java/org/pdfsam/tools/split/SplitTool.java
Patch:
@@ -53,7 +53,7 @@ public class SplitTool implements Tool {
 
     static final String TOOL_ID = "split.simple";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
             .inputTypes(ToolInputOutputType.SINGLE_PDF).name(i18n().tr("Split"))
             .description(i18n().tr("Split a PDF document at the given page numbers."))
             .priority(ToolPriority.HIGH.getPriority()).supportURL("https://pdfsam.org/pdf-split/")

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/main/java/module-info.java
Patch:
@@ -21,7 +21,6 @@
  */module org.pdfsam.tools.splitbybookmarks {
     exports org.pdfsam.tools.splitbybookmarks;
 
-    requires org.slf4j;
     requires org.pdfsam.core;
     requires org.pdfsam.ui.components;
     requires org.pdfsam.i18n;

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/tools/splitbybookmarks/BookmarksLevelComboBox.java
Patch:
@@ -122,9 +122,7 @@ public void saveStateTo(Map<String, String> data) {
     @Override
     public void restoreStateFrom(Map<String, String> data) {
         getSelectionModel().selectFirst();
-        ofNullable(data.get("levelCombo.max")).map(Integer::valueOf).ifPresent(max -> {
-            IntStream.rangeClosed(1, max).mapToObj(Integer::toString).forEach(getItems()::add);
-        });
+        ofNullable(data.get("levelCombo.max")).map(Integer::valueOf).ifPresent(max -> IntStream.rangeClosed(1, max).mapToObj(Integer::toString).forEach(getItems()::add));
         Arrays.stream(ofNullable(data.get("levelCombo.levels")).map(l -> l.split(",")).orElse(new String[0]))
                 .forEach(getItems()::add);
         setValue(ofNullable(data.get("levelCombo.selected")).orElse(""));

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/tools/splitbybookmarks/SplitByBookmarksTool.java
Patch:
@@ -55,7 +55,7 @@ public class SplitByBookmarksTool implements Tool {
     static final String TOOL_ID = "split.bybookmarks";
 
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
             .inputTypes(ToolInputOutputType.SINGLE_PDF).name(i18n().tr("Split by bookmarks")).description(
                     i18n().tr("Split a PDF document at bookmarked pages by specifying a bookmark level."))
             .priority(ToolPriority.DEFAULT.getPriority()).supportURL("https://pdfsam.org/pdf-split/")

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/tools/splitbybookmarks/SplitOptionsPane.java
Patch:
@@ -50,8 +50,8 @@
 class SplitOptionsPane extends VBox
         implements TaskParametersBuildStep<SplitByOutlineLevelParametersBuilder>, RestorableView, ResettableView {
 
-    private BookmarksLevelComboBox levelCombo = new BookmarksLevelComboBox();
-    private TextField regexpField = new TextField();
+    private final BookmarksLevelComboBox levelCombo = new BookmarksLevelComboBox();
+    private final TextField regexpField = new TextField();
 
     SplitOptionsPane() {
         super(Style.DEFAULT_SPACING);

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/tools/splitbybookmarks/BookmarksLevelComboBoxTest.java
Patch:
@@ -62,7 +62,7 @@
 public class BookmarksLevelComboBoxTest {
     private SplitByOutlineLevelParametersBuilder builder;
     private Consumer<String> onError;
-    private SortedSet<Integer> validLevels = new TreeSet<>(Arrays.asList(2, 3, 4, 5, 6, 7, 10));
+    private final SortedSet<Integer> validLevels = new TreeSet<>(Arrays.asList(2, 3, 4, 5, 6, 7, 10));
     private BookmarksLevelComboBox victim;
     private FxRobot robot;
 

File: pdfsam-tools/pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/tools/splitbybookmarks/SplitOptionsPaneTest.java
Patch:
@@ -56,7 +56,7 @@ public class SplitOptionsPaneTest {
 
     private SplitByOutlineLevelParametersBuilder builder;
     private Consumer<String> onError;
-    private SortedSet<Integer> validLevels = new TreeSet<>(Arrays.asList(2, 3, 4, 5, 6, 7, 10));
+    private final SortedSet<Integer> validLevels = new TreeSet<>(Arrays.asList(2, 3, 4, 5, 6, 7, 10));
     private SplitOptionsPane victim;
     private FxRobot robot;
 

File: pdfsam-tools/pdfsam-split-by-size/src/main/java/module-info.java
Patch:
@@ -20,7 +20,6 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */module org.pdfsam.tools.splitbysize {
     exports org.pdfsam.tools.splitbysize;
-    requires org.slf4j;
     requires org.pdfsam.core;
     requires org.pdfsam.ui.components;
     requires org.pdfsam.i18n;

File: pdfsam-tools/pdfsam-split-by-size/src/main/java/org/pdfsam/tools/splitbysize/SizeUnit.java
Patch:
@@ -43,7 +43,7 @@ public long toBytes(int raw) {
     private final String name;
     private final String symbol;
 
-    private SizeUnit(String name, String symbol) {
+    SizeUnit(String name, String symbol) {
         this.name = name;
         this.symbol = symbol;
     }

File: pdfsam-tools/pdfsam-split-by-size/src/main/java/org/pdfsam/tools/splitbysize/SizeUnitRadio.java
Patch:
@@ -33,7 +33,7 @@
  */
 class SizeUnitRadio extends RadioButton implements RestorableView {
 
-    private SizeUnit unit;
+    private final SizeUnit unit;
 
     public SizeUnitRadio(SizeUnit unit) {
         requireNotNullArg(unit, "Unit cannot be null");

File: pdfsam-tools/pdfsam-split-by-size/src/main/java/org/pdfsam/tools/splitbysize/SplitBySizeTool.java
Patch:
@@ -53,7 +53,7 @@ public class SplitBySizeTool implements Tool {
 
     static final String TOOL_ID = "split.bysize";
 
-    private ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
+    private final ToolDescriptor descriptor = builder().category(ToolCategory.SPLIT)
             .inputTypes(ToolInputOutputType.SINGLE_PDF).name(i18n().tr("Split by size"))
             .description(i18n().tr("Split a PDF document in files of the given size (roughly)."))
             .priority(ToolPriority.LOW.getPriority()).supportURL("https://pdfsam.org/pdf-split/")

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/commons/ClosePane.java
Patch:
@@ -37,8 +37,6 @@
  */
 public class ClosePane extends HBox {
 
-    private final EventHandler<ActionEvent> defaultHandler = e -> this.getScene().getWindow().hide();
-
     public ClosePane() {
         this(null);
     }
@@ -49,7 +47,7 @@ public ClosePane(EventHandler<ActionEvent> handler) {
         Button closeButton = new Button(i18n().tr("Close"));
         closeButton.getStyleClass().addAll(Style.BUTTON.css());
         closeButton.setTextAlignment(TextAlignment.CENTER);
-        closeButton.setOnAction(ofNullable(handler).orElse(defaultHandler));
+        closeButton.setOnAction(ofNullable(handler).orElse(e -> this.getScene().getWindow().hide()));
         getChildren().add(closeButton);
     }
 }

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/commons/HideOnEscapeHandler.java
Patch:
@@ -36,7 +36,7 @@
 public class HideOnEscapeHandler implements EventHandler<KeyEvent> {
 
     private static final KeyCombination ESCAPE_COMBO = new KeyCodeCombination(KeyCode.ESCAPE);
-    private Window window;
+    private final Window window;
 
     public HideOnEscapeHandler(Window window) {
         requireNotNullArg(window, "Window cannot be null");

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/commons/RadioButtonDrivenTextFieldsPane.java
Patch:
@@ -40,7 +40,7 @@
 public class RadioButtonDrivenTextFieldsPane extends GridPane {
 
     private int rows = 0;
-    private ToggleGroup group;
+    private final ToggleGroup group;
 
     public RadioButtonDrivenTextFieldsPane(ToggleGroup group) {
         this.group = group;

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/commons/ValidableTextField.java
Patch:
@@ -148,11 +148,11 @@ private final class ErrorTooltipManager {
 
         private static final String ERROR_TOOLTIP_CLASS = "error-tooltip";
 
-        private Tooltip tooltip;
+        private final Tooltip tooltip;
         private boolean active = false;
 
-        private Timeline activationTimer = new Timeline();
-        private Timeline hideTimer = new Timeline();
+        private final Timeline activationTimer = new Timeline();
+        private final Timeline hideTimer = new Timeline();
 
         private ErrorTooltipManager(String message) {
             requireNotBlank(message, "Tooltip message cannot be blank");

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/help/HelpPopup.java
Patch:
@@ -33,7 +33,7 @@
  *
  */
 public class HelpPopup extends PopupControl {
-    private Region content;
+    private final Region content;
 
     public HelpPopup(String message) {
         this(new TextFlow(new Text(message)));

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/BrowsableDirectoryField.java
Patch:
@@ -43,12 +43,11 @@
  */
 public class BrowsableDirectoryField extends BrowsableField {
 
-    private BrowseEventHandler handler = new BrowseEventHandler();
-
     public BrowsableDirectoryField() {
         setBrowseWindowTitle(i18n().tr("Select a directory"));
         getTextField().setErrorMessage(i18n().tr("Select an existing directory"));
         getTextField().setPromptText(i18n().tr("Select a directory"));
+        var handler = new BrowseEventHandler();
         getBrowseButton().setOnAction(handler);
         getTextField().setOnAction(handler);
         setOnDragOver(e -> dragConsume(e, this.onDragOverConsumer()));

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/BrowsableFileField.java
Patch:
@@ -41,7 +41,7 @@
 import static org.pdfsam.i18n.I18nContext.i18n;
 
 /**
- * Component letting the user select a File of an expected type. By default no validation is enforced and the filetype is used only in the file chooser but the component provides a
+ * Component letting the user select a File of an expected type. By default, no validation is enforced and the filetype is used only in the file chooser but the component provides a
  * method to initialize validation.
  *
  * @author Andrea Vacondio
@@ -50,7 +50,7 @@ public class BrowsableFileField extends BrowsableField {
 
     private FileType fileType = FileType.ALL;
     private OpenType openType = OpenType.OPEN;
-    private BrowseEventHandler handler = new BrowseEventHandler();
+    private final BrowseEventHandler handler = new BrowseEventHandler();
 
     public BrowsableFileField(FileType fileType, OpenType openType) {
         this.init(fileType, openType);

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/DestinationPane.java
Patch:
@@ -25,7 +25,6 @@
 import org.pdfsam.ui.components.support.Style;
 
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
 import static org.sejda.commons.util.RequireUtils.requireNotNullArg;
 
 /**
@@ -36,8 +35,8 @@
  */
 class DestinationPane extends VBox implements ResettableView {
 
-    private CheckBox overwrite = new CheckBox(i18n().tr("Overwrite if already exists"));
-    private BrowsableField destination;
+    private final CheckBox overwrite = new CheckBox(i18n().tr("Overwrite if already exists"));
+    private final BrowsableField destination;
 
     public DestinationPane(BrowsableField destination) {
         super(Style.DEFAULT_SPACING);

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/PdfVersionConstrainedCheckBox.java
Patch:
@@ -30,7 +30,6 @@
 import static org.apache.commons.lang3.StringUtils.defaultString;
 import static org.pdfsam.eventstudio.StaticStudio.eventStudio;
 import static org.pdfsam.i18n.I18nContext.i18n;
-import static org.pdfsam.ui.components.help.HelpUtils.helpIcon;
 import static org.sejda.commons.util.RequireUtils.requireNotNullArg;
 
 /**
@@ -39,7 +38,7 @@
  * @author Andrea Vacondio
  */
 class PdfVersionConstrainedCheckBox extends CheckBox implements ToolBound {
-    private PdfVersion constraint;
+    private final PdfVersion constraint;
     private String toolBinding = StringUtils.EMPTY;
 
     public PdfVersionConstrainedCheckBox(PdfVersion constraint, String toolBinding) {

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/io/PdfVersionFilter.java
Patch:
@@ -32,7 +32,7 @@
  * @author Andrea Vacondio
  */
 class PdfVersionFilter {
-    private SortedSet<PdfVersion> filters = new TreeSet<>(Comparator.comparingDouble(PdfVersion::getVersion));
+    private final SortedSet<PdfVersion> filters = new TreeSet<>(Comparator.comparingDouble(PdfVersion::getVersion));
     private final ReadOnlyObjectWrapper<PdfVersion> required = new ReadOnlyObjectWrapper<>();
 
     PdfVersionFilter() {

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/prefix/PrefixField.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class PrefixField extends TextField implements ResettableView {
 
-    private Menu menu;
+    private final Menu menu;
 
     /**
      * @param placeholder

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/prefix/PrefixPane.java
Patch:
@@ -51,7 +51,7 @@
 public class PrefixPane extends HBox
         implements TaskParametersBuildStep<MultipleOutputTaskParametersBuilder<?>>, RestorableView, ResettableView,
         ToolBound {
-    private PrefixField field;
+    private final PrefixField field;
 
     private String toolBinding = StringUtils.EMPTY;
 

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/PasswordFieldPopup.java
Patch:
@@ -43,7 +43,7 @@
  */
 public class PasswordFieldPopup extends PopupControl implements ToolBound {
     private String toolBinding = StringUtils.EMPTY;
-    private PasswordFieldPopupContent content = new PasswordFieldPopupContent();
+    private final PasswordFieldPopupContent content = new PasswordFieldPopupContent();
     private PdfDocumentDescriptor pdfDescriptor;
 
     public PasswordFieldPopup(String toolBinding) {
@@ -81,7 +81,7 @@ public void showFor(Node owner, PdfDocumentDescriptor pdfDescriptor, double anch
      *
      */
     private class PasswordFieldPopupContent extends HBox {
-        private PasswordField passwordField = new PasswordField();
+        private final PasswordField passwordField = new PasswordField();
 
         public PasswordFieldPopupContent() {
             getStyleClass().setAll("pdfsam-input-password-content");

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/IntColumn.java
Patch:
@@ -45,7 +45,7 @@ public ObservableValue<Integer> getObservableValue(SelectionTableRowData data) {
 
         @Override
         public String getTextValue(Integer item) {
-            if (item != null && item.intValue() > 0) {
+            if (item != null && item > 0) {
                 return item.toString();
             }
             return StringUtils.EMPTY;
@@ -55,5 +55,5 @@ public String getTextValue(Integer item) {
         public Comparator<Integer> comparator() {
             return Comparator.naturalOrder();
         }
-    };
+    }
 }

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/MultipleSelectionPane.java
Patch:
@@ -38,7 +38,7 @@
 public class MultipleSelectionPane extends BorderPane implements ToolBound, RestorableView {
 
     private String toolBinding = StringUtils.EMPTY;
-    private SelectionTable table;
+    private final SelectionTable table;
 
     public MultipleSelectionPane(String toolBinding, boolean canDuplicate, boolean canMove,
             TableColumnProvider<?>... columns) {

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/SelectionChangedEvent.java
Patch:
@@ -81,7 +81,6 @@ public boolean canMove(MoveType type) {
         return switch (type) {
             case BOTTOM -> bottom < totalRows - 1;
             case DOWN -> bottom < totalRows - 1;
-            case TOP -> top > 0;
             default -> top > 0;
         };
     }

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/SelectionTableRowData.java
Patch:
@@ -36,7 +36,7 @@
  */
 public final class SelectionTableRowData {
 
-    private PdfDocumentDescriptor descriptor;
+    private final PdfDocumentDescriptor descriptor;
 
     public final SimpleStringProperty pageSelection = new SimpleStringProperty(StringUtils.EMPTY);
     public final SimpleStringProperty pace = new SimpleStringProperty("1");

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/SelectionTableToolbar.java
Patch:
@@ -191,7 +191,7 @@ public String toolBinding() {
      */
     private static class BaseMoveSelectedButton extends ToolbarButton {
 
-        private MoveType type;
+        private final MoveType type;
 
         public BaseMoveSelectedButton(String ownerModule, MoveType type) {
             super(ownerModule);

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/move/MultipleSelectionAndFocus.java
Patch:
@@ -35,7 +35,7 @@ class MultipleSelectionAndFocus implements SelectionAndFocus {
     private int focus = -1;
     private int originalFocus = -1;
     private int row = -1;
-    private Set<Integer> rows = new HashSet<>();
+    private final Set<Integer> rows = new HashSet<>();
 
     MultipleSelectionAndFocus(int originalFocus) {
         this.originalFocus = originalFocus;
@@ -68,14 +68,14 @@ public int getFocus() {
     }
 
     @Override
-    public int getRow() {
+    public int row() {
         return row;
     }
 
     @Override
     public int[] getRows() {
         // TODO this sucks
-        return ArrayUtils.toPrimitive(rows.toArray(new Integer[rows.size()]));
+        return ArrayUtils.toPrimitive(rows.toArray(new Integer[0]));
     }
 
     @Override

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/selection/multiple/move/SelectionAndFocus.java
Patch:
@@ -34,7 +34,7 @@ public int[] getRows() {
         }
 
         @Override
-        public int getRow() {
+        public int row() {
             return -1;
         }
 
@@ -52,7 +52,7 @@ public int getFocus() {
     /**
      * @return the index of selected item
      */
-    int getRow();
+    int row();
 
     /**
      * @return the index of additional selected items in case of multi selection

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/support/Style.java
Patch:
@@ -43,9 +43,9 @@ public enum Style {
     WITH_HELP("with-help");
 
     public static final int DEFAULT_SPACING = 5;
-    private String[] classes;
+    private final String[] classes;
 
-    private Style(String... classes) {
+    Style(String... classes) {
         this.classes = classes;
     }
 

File: pdfsam-ui-components/src/main/java/org/pdfsam/ui/components/tool/BaseToolPanel.java
Patch:
@@ -42,13 +42,13 @@
 import static org.sejda.commons.util.RequireUtils.requireNotBlank;
 
 /**
- * Base class for a {@link Tool}. Tools are automatically scanned for event listener annotations and have their {@link EventStation} set to their {@link #id()}.
+ * Base class for a {@link Tool}. Tools are automatically scanned for event listener annotations and have their {@link EventStation} set to their {@link #toolBinding()}.
  *
  * @author Andrea Vacondio
  */
 public abstract class BaseToolPanel extends BorderPane implements ToolBound {
 
-    private Footer footer;
+    private final Footer footer;
     private final String toolId;
 
     public BaseToolPanel(String toolId, Footer footer) {

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/commons/RadioButtonDrivenTextFieldsPaneTest.java
Patch:
@@ -42,7 +42,7 @@
 @ExtendWith(ApplicationExtension.class)
 public class RadioButtonDrivenTextFieldsPaneTest {
 
-    private ToggleGroup group = new ToggleGroup();
+    private final ToggleGroup group = new ToggleGroup();
     private RadioButtonDrivenTextFieldsPane victim;
 
     @Start

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/BrowsableDirectoryFieldTest.java
Patch:
@@ -77,7 +77,7 @@ public void setTextFromDirectory(@TempDir Path folder) throws IOException {
     }
 
     @Test
-    public void setTextFromDirectoryPath(@TempDir Path folder) throws IOException {
+    public void setTextFromDirectoryPath(@TempDir Path folder) {
         var victim = new BrowsableDirectoryField();
         victim.setTextFromFile(folder);
         assertEquals(folder.toAbsolutePath().toString(), victim.getTextField().getText());

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/BrowsableFileFieldTest.java
Patch:
@@ -159,7 +159,7 @@ public void validSpecialCharsFolderExistingPath(@TempDir Path folder) throws IOE
     }
 
     @Test
-    public void saveState(@TempDir Path folder) throws IOException {
+    public void saveState(@TempDir Path folder) {
         var victim = new BrowsableFileField(FileType.PDF, OpenType.SAVE);
         victim.setId("fieldId");
         victim.enforceValidation(true, true);

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/io/PdfVersionFilterTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.sejda.model.pdf.PdfVersion;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -49,7 +48,7 @@ public void remove() {
         victim.addFilter(PdfVersion.VERSION_1_4);
         assertEquals(PdfVersion.VERSION_1_4, victim.requiredProperty().get());
         victim.removeFilter(PdfVersion.VERSION_1_4);
-        assertNotEquals(10, victim.requiredProperty().get());
+        assertEquals(PdfVersion.VERSION_1_0, victim.requiredProperty().get());
     }
 
     @Test

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/LoadingStatusIndicatorUpdaterTest.java
Patch:
@@ -38,8 +38,8 @@
 @ExtendWith(JavaFxThreadInitializeExtension.class)
 public class LoadingStatusIndicatorUpdaterTest {
 
-    private Label labeled = new Label();
-    private LoadingStatusIndicatorUpdater victim = new LoadingStatusIndicatorUpdater(labeled);
+    private final Label labeled = new Label();
+    private final LoadingStatusIndicatorUpdater victim = new LoadingStatusIndicatorUpdater(labeled);
 
     @BeforeEach
     public void setUp() {

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/multiple/SelectionChangedEventTest.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
-import static java.util.Arrays.stream;
 import static java.util.Collections.emptyList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/multiple/move/MultipleSelectionAndFocusTest.java
Patch:
@@ -35,7 +35,7 @@ public void moveUp() {
         victim.moveUp(4);
         victim.moveUp(5);
         assertEquals(-1, victim.getFocus());
-        assertEquals(3, victim.getRow());
+        assertEquals(3, victim.row());
         assertArrayEquals(new int[] { 4 }, victim.getRows());
     }
 
@@ -53,7 +53,7 @@ public void moveDown() {
         victim.moveDown(6);
         victim.moveDown(5);
         assertEquals(-1, victim.getFocus());
-        assertEquals(7, victim.getRow());
+        assertEquals(7, victim.row());
         assertArrayEquals(new int[] { 6 }, victim.getRows());
     }
 
@@ -72,7 +72,7 @@ public void moveTo() {
         victim.moveTo(6, 11);
         victim.moveTo(8, 12);
         assertEquals(10, victim.getFocus());
-        assertEquals(10, victim.getRow());
+        assertEquals(10, victim.row());
         assertArrayEquals(new int[] { 11, 12 }, victim.getRows());
     }
 }

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/selection/multiple/move/SingleSelectionAndFocusTest.java
Patch:
@@ -38,7 +38,7 @@ public void negative() {
     public void positive() {
         SingleSelectionAndFocus victim = new SingleSelectionAndFocus(10);
         assertEquals(10, victim.getFocus());
-        assertEquals(10, victim.getRow());
+        assertEquals(10, victim.row());
         assertEquals(0, victim.getRows().length);
     }
 }

File: pdfsam-ui-components/src/test/java/org/pdfsam/ui/components/tool/FooterTest.java
Patch:
@@ -105,7 +105,7 @@ public void onProgress() {
         assertFalse(victim.lookup(".footer-failed-button").isVisible());
         assertFalse(victim.lookup(".footer-open-button").isVisible());
         assertEquals(i18n().tr("Running {0}%", "50"), ((Labeled) victim.lookup(".status-label")).getText());
-        assertEquals(0.5, ((ProgressBar) victim.lookup(".pdfsam-footer-bar")).getProgress(), 0.01);
+        assertEquals(1, ((ProgressBar) victim.lookup(".pdfsam-footer-bar")).getProgress(), 0.01);
     }
 
     @Test

File: pdfsam-gui/src/main/java/org/pdfsam/PdfsamApp.java
Patch:
@@ -100,7 +100,7 @@
 public class PdfsamApp extends Application {
     private static final Logger LOG = LoggerFactory.getLogger(PdfsamApp.class);
 
-    private static StopWatch STOPWATCH = new StopWatch();
+    private static final StopWatch STOPWATCH = new StopWatch();
     private Stage primaryStage;
     private UserContext userContext = new DefaultUserContext();
     private List<String> rawParameters;

File: pdfsam-gui/src/main/java/org/pdfsam/PdfsamApp.java
Patch:
@@ -47,6 +47,7 @@
 import org.pdfsam.news.FetchLatestNewsRequest;
 import org.pdfsam.news.NewsService;
 import org.pdfsam.premium.FetchPremiumModulesRequest;
+import org.pdfsam.service.Services;
 import org.pdfsam.ui.MainPane;
 import org.pdfsam.ui.SetLatestStageStatusRequest;
 import org.pdfsam.ui.StageMode;

File: pdfsam-service/src/main/java/org/pdfsam/service/Services.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam;
+package org.pdfsam.service;
 
 import org.pdfsam.injector.Injector;
 import org.pdfsam.module.ModuleServiceConfig;

File: pdfsam-gui/src/main/java/org/pdfsam/PdfsamApp.java
Patch:
@@ -68,6 +68,7 @@
 import org.pdfsam.ui.workspace.SaveWorkspaceEvent;
 import org.pdfsam.update.UpdateCheckRequest;
 import org.sejda.core.Sejda;
+import org.sejda.core.support.io.IOUtils;
 import org.sejda.impl.sambox.component.PDDocumentHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -113,6 +114,7 @@ public void init() {
         startLogAppender();
         System.setProperty(PDDocumentHandler.SAMBOX_USE_ASYNC_WRITER, Boolean.TRUE.toString());
         System.setProperty(Sejda.UNETHICAL_READ_PROPERTY_NAME, Boolean.TRUE.toString());
+        System.setProperty(IOUtils.TMP_BUFFER_PREFIX_PROPERTY_NAME, "pdfsam");
         LOG.info("Starting PDFsam");
         clean = rawParameters.contains("--clean") || rawParameters.contains("-clean") || rawParameters.contains("-c");
         cleanUserContextIfNeeded(userContext);

File: pdfsam-core/src/main/java/org/pdfsam/context/BooleanUserPreference.java
Patch:
@@ -28,6 +28,7 @@ public enum BooleanUserPreference {
     CHECK_UPDATES,
     CHECK_FOR_NEWS,
     PDF_COMPRESSION_ENABLED,
+    OVERWRITE_OUTPUT,
     PLAY_SOUNDS,
     DONATION_NOTIFICATION,
     PREMIUM_MODULES,

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceOutputPane.java
Patch:
@@ -42,7 +42,8 @@ class PreferenceOutputPane extends VBox {
 
     @Inject
     public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadio,
-            @Named("compressionEnabled") PreferenceCheckBox compressionEnabled) {
+            @Named("compressionEnabled") PreferenceCheckBox compressionEnabled,
+            @Named("overwriteOutput") PreferenceCheckBox overwriteOutput) {
         I18nContext i18n = DefaultI18nContext.getInstance();
         ToggleGroup group = new ToggleGroup();
 
@@ -61,7 +62,7 @@ public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadi
             group.selectToggle(manualRadio);
         }
 
-        getChildren().addAll(manualRadio, smartRadio, compressionEnabled);
+        getChildren().addAll(manualRadio, smartRadio, compressionEnabled, overwriteOutput);
         getStyleClass().addAll(Style.CONTAINER.css());
     }
 }

File: pdfsam-service/src/main/java/org/pdfsam/task/BulkRotateTask.java
Patch:
@@ -67,7 +67,6 @@ public void execute(BulkRotateParameters parameters) throws TaskException {
         int currentStep = 0;
 
         for (PdfRotationInput input : parameters.getInputSet()) {
-            executionContext().assertTaskNotCancelled();
             currentStep++;
             LOG.debug("Opening {}", input.source);
             try {
@@ -80,7 +79,6 @@ public void execute(BulkRotateParameters parameters) throws TaskException {
 
                 PdfRotator rotator = new PdfRotator(documentHandler.getUnderlyingPDDocument());
                 for (Integer page : input.getPages(documentHandler.getNumberOfPages())) {
-                    executionContext().assertTaskNotCancelled();
                     rotator.rotate(page, input.rotation);
                 }
 

File: pdfsam-gui/src/test/java/org/pdfsam/ui/info/InfoStageTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.pdfsam.pdf.PdfDocumentDescriptor;
 import org.pdfsam.test.ClearEventStudioRule;
 import org.pdfsam.ui.commons.ShowPdfDescriptorRequest;
-import org.sejda.model.pdf.PdfMetadataKey;
+import org.sejda.model.pdf.PdfMetadataFields;
 import org.testfx.framework.junit.ApplicationTest;
 import org.testfx.util.WaitForAsyncUtils;
 
@@ -74,7 +74,7 @@ public void start(Stage stage) {
         injector = Injector.start(new Config());
         Button button = new Button("show");
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(mock(File.class));
-        descriptor.putInformation(PdfMetadataKey.KEYWORDS.getKey(), "test");
+        descriptor.putInformation(PdfMetadataFields.KEYWORDS, "test");
         button.setOnAction(e -> eventStudio().broadcast(new ShowPdfDescriptorRequest(descriptor)));
         Scene scene = new Scene(new VBox(button));
         stage.setScene(scene);

File: pdfsam-gui/src/test/java/org/pdfsam/ui/info/KeywordsTabTest.java
Patch:
@@ -35,7 +35,7 @@
 import org.pdfsam.test.ClearEventStudioRule;
 import org.pdfsam.test.InitializeJavaFxThreadRule;
 import org.pdfsam.ui.commons.ShowPdfDescriptorRequest;
-import org.sejda.model.pdf.PdfMetadataKey;
+import org.sejda.model.pdf.PdfMetadataFields;
 import org.testfx.util.WaitForAsyncUtils;
 
 import javafx.beans.value.ChangeListener;
@@ -61,7 +61,7 @@ public void showRequest() {
         ChangeListener<? super String> listener = mock(ChangeListener.class);
         keywords.textProperty().addListener(listener);
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(mock(File.class));
-        descriptor.putInformation(PdfMetadataKey.KEYWORDS.getKey(), "test");
+        descriptor.putInformation(PdfMetadataFields.KEYWORDS, "test");
         WaitForAsyncUtils.waitForAsyncFx(2000, () -> victim.requestShow(new ShowPdfDescriptorRequest(descriptor)));
         verify(listener, timeout(2000).times(1)).changed(any(ObservableValue.class), anyString(), eq("test"));
     }
@@ -75,7 +75,7 @@ public void onLoad() {
         keywords.textProperty().addListener(listener);
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(mock(File.class));
         WaitForAsyncUtils.waitForAsyncFx(2000, () -> victim.requestShow(new ShowPdfDescriptorRequest(descriptor)));
-        descriptor.putInformation(PdfMetadataKey.KEYWORDS.getKey(), "test");
+        descriptor.putInformation(PdfMetadataFields.KEYWORDS, "test");
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADING);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADED);

File: pdfsam-gui/src/main/java/org/pdfsam/WindowStatusController.java
Patch:
@@ -73,7 +73,6 @@ private void defaultStageStatus() {
         stage.setX((primScreenBounds.getWidth() - stage.getWidth()) / 2);
         stage.setY((primScreenBounds.getHeight() - stage.getHeight()) / 4);
         stage.setMaximized(true);
-
     }
 
     private void restore(StageStatus latestStatus) {

File: pdfsam-core/src/main/java/org/pdfsam/context/StringUserPreference.java
Patch:
@@ -29,5 +29,6 @@ public enum StringUserPreference {
     THUMBNAILS_IDENTIFIER,
     WORKING_PATH,
     WORKSPACE_PATH,
-    STARTUP_MODULE;
+    STARTUP_MODULE,
+    DEFAULT_PREFIX;
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/Footer.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.pdfsam.i18n.DefaultI18nContext;
+import org.pdfsam.module.ModuleOwned;
 import org.pdfsam.module.TaskExecutionRequestEvent;
 import org.sejda.eventstudio.annotation.EventListener;
 import org.sejda.eventstudio.annotation.EventStation;
@@ -47,7 +48,7 @@
  * @author Andrea Vacondio
  *
  */
-public class Footer extends HBox {
+public class Footer extends HBox implements ModuleOwned {
 
     private ProgressBar bar = new ProgressBar(0);
     private Label statusLabel = new Label();
@@ -95,6 +96,7 @@ public RunButton runButton() {
         return runButton;
     }
 
+    @Override
     @EventStation
     public String getOwnerModule() {
         return ownerModule;

File: pdfsam-core/src/test/java/org/pdfsam/module/TaskExecutionRequestEventTest.java
Patch:
@@ -22,13 +22,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.sejda.model.parameter.base.AbstractParameters;
-
 /**
  * @author Andrea Vacondio
  * 
  */
-@RunWith(value = org.mockito.runners.MockitoJUnitRunner.class)
+@RunWith(value = MockitoJUnitRunner.class)
 public class TaskExecutionRequestEventTest {
     @Mock
     private AbstractParameters params;

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/PdfDestinationPaneUITest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -34,7 +34,7 @@
 import org.junit.rules.TemporaryFolder;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.pdfsam.context.UserContext;
 import org.pdfsam.support.params.AbstractPdfOutputParametersBuilder;
 import org.pdfsam.test.ClearEventStudioRule;

File: pdfsam-fx/src/test/java/org/pdfsam/ui/selection/multiple/move/MoveTypeTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 import org.pdfsam.pdf.PdfDocumentDescriptor;
 
 import javafx.collections.FXCollections;

File: pdfsam-gui/src/test/java/org/pdfsam/ui/info/SummaryTabTest.java
Patch:
@@ -21,12 +21,12 @@
 import static org.hamcrest.Matchers.isIn;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.argThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.timeout;
 import static org.mockito.Mockito.verify;
+import static org.mockito.hamcrest.MockitoHamcrest.argThat;
 
 import java.io.File;
 import java.text.DateFormat;

File: pdfsam-gui/src/test/java/org/pdfsam/ui/log/LogMessageBroadcasterTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.pdfsam.ui.log;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.timeout;
@@ -75,7 +75,7 @@ public void infoLog() {
         Listener<LogMessage> listener = mock(Listener.class);
         eventStudio().add(LogMessage.class, listener, "LogStage");
         LogMessageBroadcaster victim = injector.instance(LogMessageBroadcaster.class);
-        PatternLayoutEncoder encoder = injector.instance(PatternLayoutEncoder.class);
+        injector.instance(PatternLayoutEncoder.class);
         ILoggingEvent event = mock(ILoggingEvent.class);
         when(event.getLevel()).thenReturn(Level.INFO);
         when(event.getFormattedMessage()).thenReturn("myMessage");

File: pdfsam-service/src/test/java/org/pdfsam/ui/JsonWorkspaceServiceTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -51,13 +52,13 @@ public void saveNull() {
     @Test
     public void saveWorkspace() throws IOException {
         File file = folder.newFile();
-        assertFalse(FileUtils.readLines(file).size() > 0);
+        assertFalse(FileUtils.readLines(file, StandardCharsets.UTF_8).size() > 0);
         Map<String, Map<String, String>> data = new HashMap<>();
         Map<String, String> moduleData = new HashMap<>();
         moduleData.put("key", "value");
         data.put("module", moduleData);
         victim.saveWorkspace(data, file);
-        assertTrue(FileUtils.readLines(file).size() > 0);
+        assertTrue(FileUtils.readLines(file, StandardCharsets.UTF_8).size() > 0);
     }
 
     @Test(expected = RuntimeException.class)

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/Style.java
Patch:
@@ -28,7 +28,7 @@ public enum Style {
     BUTTON("pdfsam-button"),
     BROWSE_BUTTON("pdfsam-button", "browse-button"),
     FOOTER_BUTTON("pdfsam-button", "footer-button"),
-    TOOLBAR_BUTTON("pdfsam-button", "toolbar-button"),
+    TOOLBAR_BUTTON("toolbar-button"),
     TITLED_PANE("titled-pane"),
     DEAULT_CONTAINER("default-container"),
     CONTAINER("pdfsam-container"),

File: pdfsam-core/src/main/java/org/pdfsam/context/BooleanUserPreference.java
Patch:
@@ -27,6 +27,7 @@
 public enum BooleanUserPreference {
     CHECK_UPDATES,
     CHECK_FOR_NEWS,
+    PDF_COMPRESSION_ENABLED,
     PLAY_SOUNDS,
     DONATION_NOTIFICATION,
     PREMIUM_MODULES,

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/PdfDestinationPane.java
Patch:
@@ -87,7 +87,7 @@ public PdfDestinationPane(BrowsableField destination, String ownerModule, UserCo
         version = new PdfVersionCombo(ownerModule);
         compress = new PdfVersionConstrainedCheckBox(PdfVersion.VERSION_1_5, ownerModule);
         compress.setText(DefaultI18nContext.getInstance().i18n("Compress output file/files"));
-        compress.setSelected(true);
+        compress.setSelected(userContext.isCompressionEnabled());
         compress.setId("compressField");
         compress.getStyleClass().addAll(Style.VITEM.css());
 

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/PdfDestinationPaneTest.java
Patch:
@@ -71,6 +71,7 @@ public class PdfDestinationPaneTest {
     public void setUp() {
         destination = spy(new BrowsableDirectoryField());
         when(userContext.isUseSmartOutput()).thenReturn(Boolean.FALSE);
+        when(userContext.isCompressionEnabled()).thenReturn(Boolean.TRUE);
         victim = new PdfDestinationPane(destination, MODULE, userContext);
     }
 

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/PdfDestinationPaneUITest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 import java.util.Set;
 import java.util.function.Consumer;
@@ -71,6 +72,7 @@ public class PdfDestinationPaneUITest extends ApplicationTest {
 
     @Override
     public void start(Stage stage) {
+        when(userContext.isCompressionEnabled()).thenReturn(Boolean.TRUE);
         BrowsablePdfInputField destination = new BrowsablePdfInputField();
         victim = new PdfDestinationPane(destination, MODULE, userContext, true,
                 DestinationPanelFields.DISCARD_BOOKMARKS);

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceOutputPane.java
Patch:
@@ -41,7 +41,8 @@
 class PreferenceOutputPane extends VBox {
 
     @Inject
-    public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadio) {
+    public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadio,
+            @Named("compressionEnabled") PreferenceCheckBox compressionEnabled) {
         I18nContext i18n = DefaultI18nContext.getInstance();
         ToggleGroup group = new ToggleGroup();
 
@@ -60,7 +61,7 @@ public PreferenceOutputPane(@Named("smartRadio") PreferenceRadioButton smartRadi
             group.selectToggle(manualRadio);
         }
 
-        getChildren().addAll(manualRadio, smartRadio);
+        getChildren().addAll(manualRadio, smartRadio, compressionEnabled);
         getStyleClass().addAll(Style.CONTAINER.css());
     }
 }

File: pdfsam-fx/src/test/java/org/pdfsam/ui/selection/single/SingleSelectionPaneTest.java
Patch:
@@ -65,6 +65,7 @@
 import org.testfx.framework.junit.ApplicationTest;
 import org.testfx.util.WaitForAsyncUtils;
 
+import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import javafx.scene.Scene;
 import javafx.scene.control.Labeled;
 import javafx.scene.control.SeparatorMenuItem;
@@ -373,7 +374,7 @@ public void clickWithErrorsShowsLogStage() throws Exception {
         });
         Listener<ShowStageRequest> listener = mock(Listener.class);
         eventStudio().add(ShowStageRequest.class, listener, "LogStage");
-        clickOn(".glyph-icon");
+        clickOn(FontAwesomeIcon.WARNING.unicode());
         verify(listener).onEvent(any());
     }
 
@@ -383,7 +384,7 @@ public void clickEncryptedThrowsRequest() throws Exception {
         Listener<PdfLoadRequestEvent> listener = mock(Listener.class);
         eventStudio().add(PdfLoadRequestEvent.class, listener);
         moveToEncrytedState(victim);
-        clickOn(".glyph-icon");
+        clickOn(FontAwesomeIcon.LOCK.unicode());
         write("pwd").clickOn(DefaultI18nContext.getInstance().i18n("Unlock"));
         verify(listener, times(2)).onEvent(any());
     }

File: pdfsam-simple-split/src/test/java/org/pdfsam/split/SplitAfterPredefinedSetOfPagesRadioButtonTest.java
Patch:
@@ -178,6 +178,7 @@ public void restoreState() {
     }
 
     @Test
+    @Category(NoHeadless.class)
     public void reset() {
         clickOn(victim);
         clickOn("#combo").clickOn("Odd pages");

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BaseRememberingLatestChooser.java
Patch:
@@ -30,7 +30,7 @@
  */
 public abstract class BaseRememberingLatestChooser {
 
-    abstract void setInitialDirectory(File value);
+    public abstract void setInitialDirectory(File value);
 
     @EventListener
     public void doSetInitialDir(SetLatestDirectoryEvent event) {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/RememberingLatestFileChooserWrapper.java
Patch:
@@ -46,7 +46,7 @@ final void setTitle(String value) {
     }
 
     @Override
-    final void setInitialDirectory(File value) {
+    public final void setInitialDirectory(File value) {
         wrapped.setInitialDirectory(value);
     }
 

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/WorkspaceMenuTest.java
Patch:
@@ -87,7 +87,7 @@ public void recentIsUpdatedAndMnemonicAreNotParsed() {
     }
 
     @Test
-    public void recentIsClear() {
+    public void recentIsCleared() {
         RecentWorkspacesService service = injector.instance(RecentWorkspacesService.class);
         when(service.getRecentlyUsedWorkspaces()).thenReturn(Arrays.asList("Michael"));
         eventStudio().broadcast(new WorkspaceLoadedEvent(mock(File.class)));

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/BrowsableDirectoryFieldTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import static org.apache.commons.lang3.StringUtils.isBlank;
 import static org.junit.Assert.assertEquals;
-import static org.loadui.testfx.Assertions.verifyThat;
 
 import java.io.File;
 import java.io.IOException;
@@ -29,6 +28,7 @@
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 import org.pdfsam.test.InitializeAndApplyJavaFxThreadRule;
+import org.testfx.api.FxAssert;
 
 /**
  * @author Andrea Vacondio
@@ -52,7 +52,7 @@ public void setTextFromFile() throws IOException {
     public void setTextFromNullFile() {
         BrowsableDirectoryField victim = new BrowsableDirectoryField();
         victim.setTextFromFile(null);
-        verifyThat(victim, v -> isBlank(v.getTextField().getText()));
+        FxAssert.verifyThat(victim, v -> isBlank(v.getTextField().getText()));
     }
 
     @Test

File: pdfsam-gui/src/test/java/org/pdfsam/ui/info/SummaryTabTest.java
Patch:
@@ -40,14 +40,14 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
-import org.loadui.testfx.utils.FXTestUtils;
 import org.pdfsam.pdf.PdfDescriptorLoadingStatus;
 import org.pdfsam.pdf.PdfDocumentDescriptor;
 import org.pdfsam.test.ClearEventStudioRule;
 import org.pdfsam.test.InitializeJavaFxThreadRule;
 import org.pdfsam.ui.commons.ShowPdfDescriptorRequest;
 import org.sejda.model.pdf.PdfMetadataKey;
 import org.sejda.model.pdf.PdfVersion;
+import org.testfx.util.WaitForAsyncUtils;
 
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;
@@ -79,7 +79,7 @@ public void showRequest() throws Exception {
         List<ChangeListener<? super String>> listeners = initListener(properties);
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(file);
         fillDescriptor(descriptor);
-        FXTestUtils.invokeAndWait(() -> victim.requestShow(new ShowPdfDescriptorRequest(descriptor)), 1);
+        WaitForAsyncUtils.waitForAsyncFx(2000, () -> victim.requestShow(new ShowPdfDescriptorRequest(descriptor)));
         assertInfoIsDisplayed(listeners, descriptor);
     }
 
@@ -92,7 +92,7 @@ public void onLoad() throws Exception {
         assertFalse(properties.isEmpty());
         List<ChangeListener<? super String>> listeners = initListener(properties);
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(file);
-        FXTestUtils.invokeAndWait(() -> victim.requestShow(new ShowPdfDescriptorRequest(descriptor)), 1);
+        WaitForAsyncUtils.waitForAsyncFx(2000, () -> victim.requestShow(new ShowPdfDescriptorRequest(descriptor)));
         fillDescriptor(descriptor);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADING);

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/RunButton.java
Patch:
@@ -28,7 +28,6 @@
 import org.sejda.model.notification.event.TaskExecutionCompletedEvent;
 import org.sejda.model.notification.event.TaskExecutionFailedEvent;
 
-import de.jensd.fx.glyphs.GlyphsFactory;
 import de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon;
 import de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory;
 import javafx.scene.control.Button;

File: pdfsam-fx/src/main/java/org/pdfsam/ui/notification/NotificationType.java
Patch:
@@ -18,11 +18,10 @@
  */
 package org.pdfsam.ui.notification;
 
-import de.jensd.fx.glyphs.GlyphsFactory;
 import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
+import de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory;
 import de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon;
 import de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory;
-import de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory;
 import javafx.scene.Node;
 
 /**

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/LoadingStatusIndicatorUpdater.java
Patch:
@@ -27,8 +27,7 @@
 
 import org.pdfsam.pdf.PdfDescriptorLoadingStatus;
 
-import de.jensd.fx.glyphs.GlyphIcons;
-import de.jensd.fx.glyphs.GlyphsFactory;
+import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory;
 import javafx.scene.control.ContentDisplay;
 import javafx.scene.control.Labeled;
@@ -52,7 +51,7 @@ public LoadingStatusIndicatorUpdater(Labeled indicator) {
     @Override
     public void accept(PdfDescriptorLoadingStatus t) {
 
-        GlyphIcons icon = Optional.ofNullable(t).map(PdfDescriptorLoadingStatus::getIcon).orElse(null);
+        FontAwesomeIcon icon = Optional.ofNullable(t).map(PdfDescriptorLoadingStatus::getIcon).orElse(null);
         if (nonNull(icon)) {
             FontAwesomeIconFactory.get().setIcon(indicator, icon, ContentDisplay.CENTER);
         } else {

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/StylesConfig.java
Patch:
@@ -29,7 +29,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import de.jensd.fx.glyphs.GlyphsStyle;
 import javafx.application.ConditionalFeature;
 import javafx.application.Platform;
 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferencePane.java
Patch:
@@ -45,8 +45,6 @@ public PreferencePane(PreferenceAppearencePane appearence, PreferenceBehaviorPan
         left.setMinWidth(USE_PREF_SIZE);
         addSectionTitle(DefaultI18nContext.getInstance().i18n("Appearance"), left);
         left.getChildren().add(appearence);
-        // addSectionTitle(DefaultI18nContext.getInstance().i18n("Thumbnails"), left);
-        // left.getChildren().add(thumbnails);
         addSectionTitle(DefaultI18nContext.getInstance().i18n("Behavior"), left);
         left.getChildren().add(behavior);
         VBox right = new VBox(Style.DEFAULT_SPACING);

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.pdfsam.ui.dashboard.preference;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -69,7 +70,7 @@ public UserContext userContext() {
             UserContext userContext = mock(UserContext.class);
             when(userContext.isCheckForUpdates()).thenReturn(Boolean.TRUE);
             when(userContext.isCheckForNews()).thenReturn(Boolean.TRUE);
-            when(userContext.isPlaySounds()).thenReturn(Boolean.TRUE);
+            when(userContext.isPlaySounds()).thenReturn(Boolean.FALSE);
             when(userContext.isDonationNotification()).thenReturn(Boolean.TRUE);
             when(userContext.isFetchPremiumModules()).thenReturn(Boolean.TRUE);
             when(userContext.isUseSmartOutput()).thenReturn(Boolean.TRUE);
@@ -93,7 +94,7 @@ public void configOnStartup() {
                 .lookup("#startupModuleCombo");
         assertTrue(((PreferenceCheckBox) victim.lookup("#checkForUpdates")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#checkForNews")).isSelected());
-        assertTrue(((PreferenceCheckBox) victim.lookup("#playSounds")).isSelected());
+        assertFalse(((PreferenceCheckBox) victim.lookup("#playSounds")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#donationNotification")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#fetchPremiumModules")).isSelected());
         assertTrue(((PreferenceRadioButton) victim.lookup("#smartRadio")).isSelected());

File: pdfsam-core/src/main/java/org/pdfsam/context/StringUserPreference.java
Patch:
@@ -26,7 +26,6 @@
  */
 public enum StringUserPreference {
     LOCALE,
-    THEME,
     THUMBNAILS_IDENTIFIER,
     WORKING_PATH,
     WORKSPACE_PATH,

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/modules/DashboardTile.java
Patch:
@@ -61,7 +61,6 @@ public DashboardTile(String title, String description, Node graphic) {
 
         armed.bind(button.armedProperty());
         getChildren().addAll(new StackPane(topTile, button));
-        getStyleClass().add("dashboard-modules-tile-inner");
         setMaxHeight(USE_PREF_SIZE);
         setMinHeight(USE_PREF_SIZE);
     }

File: pdfsam-gui/src/test/java/org/pdfsam/configuration/StylesConfigTest.java
Patch:
@@ -42,7 +42,7 @@ public void nullArg() {
 
     @Test
     public void nonNullArg() {
-        StylesConfig victim = new StylesConfig(Theme.GREEN);
+        StylesConfig victim = new StylesConfig(Theme.ROUNDISH);
         assertFalse(victim.styles().isEmpty());
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferenceAppearencePaneTest.java
Patch:
@@ -57,12 +57,10 @@ protected Parent getRootNode() {
         PreferenceComboBox<LocaleKeyValueItem> localeCombo = new PreferenceComboBox<>(StringUserPreference.LOCALE,
                 userContext);
         localeCombo.setId("localeCombo");
-        PreferenceComboBox<KeyStringValueItem<String>> themeCombo = new PreferenceComboBox<>(
-                StringUserPreference.THEME, userContext);
         PreferenceComboBox<KeyStringValueItem<String>> startupModuleCombo = new PreferenceComboBox<>(
                 StringUserPreference.STARTUP_MODULE, userContext);
         ClearStatisticsButton clearStatsButton = new ClearStatisticsButton();
-        PreferenceAppearencePane victim = new PreferenceAppearencePane(localeCombo, themeCombo, startupModuleCombo,
+        PreferenceAppearencePane victim = new PreferenceAppearencePane(localeCombo, startupModuleCombo,
                 clearStatsButton);
         victim.setId("victim");
         return victim;

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -68,7 +68,6 @@ static class Config {
         @Provides
         public UserContext userContext() {
             UserContext userContext = mock(UserContext.class);
-            when(userContext.getTheme()).thenReturn(Theme.ROUNDISH.toString());
             when(userContext.isCheckForUpdates()).thenReturn(Boolean.TRUE);
             when(userContext.isCheckForNews()).thenReturn(Boolean.TRUE);
             when(userContext.isPlaySounds()).thenReturn(Boolean.TRUE);

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferenceSetterOnValidStateTest.java
Patch:
@@ -48,10 +48,10 @@ public void setUp() {
 
     @Test
     public void changed() {
-        PreferenceSetterOnValidState victim = new PreferenceSetterOnValidState(StringUserPreference.THEME,
+        PreferenceSetterOnValidState victim = new PreferenceSetterOnValidState(StringUserPreference.STARTUP_MODULE,
                 new ValidableTextField("testText"), userContext);
         victim.changed(null, ValidationState.NOT_VALIDATED, ValidationState.VALID);
-        verify(userContext).setStringPreference(StringUserPreference.THEME, "testText");
+        verify(userContext).setStringPreference(StringUserPreference.STARTUP_MODULE, "testText");
 
     }
 }

File: pdfsam-core/src/main/java/org/pdfsam/ConfigurableProperty.java
Patch:
@@ -45,6 +45,7 @@ public enum ConfigurableProperty {
     FACEBOOK_SHARE_URL("pdfsam.facebook.share.url"),
     GPLUS_SHARE_URL("pdfsam.gplus.share.url"),
     NEWS_URL("pdfsam.news.url"),
+    PREMIUM_MODULES_URL("pdfsam.premium.modules.url"),
     DOWNLOAD_URL("pdfsam.download.url");
 
     public final String prop;

File: pdfsam-core/src/main/java/org/pdfsam/context/BooleanUserPreference.java
Patch:
@@ -29,6 +29,7 @@ public enum BooleanUserPreference {
     CHECK_FOR_NEWS,
     PLAY_SOUNDS,
     DONATION_NOTIFICATION,
+    PREMIUM_MODULES,
     HIGH_QUALITY_THUMB,
     SMART_OUTPUT,
     SAVE_WORKSPACE_ON_EXIT,

File: pdfsam-core/src/main/java/org/pdfsam/news/NewImportantNewsEvent.java
Patch:
@@ -26,11 +26,11 @@
  * @author Andrea Vacondio
  *
  */
-public class NewImportantNews {
+public class NewImportantNewsEvent {
 
     public final NewsData news;
 
-    public NewImportantNews(NewsData news) {
+    public NewImportantNewsEvent(NewsData news) {
         RequireUtils.requireNotNull(news, "News cannot be null");
         this.news = news;
     }

File: pdfsam-core/src/test/java/org/pdfsam/news/NewImportantNewsEventTest.java
Patch:
@@ -20,9 +20,9 @@
 
 import org.junit.Test;
 
-public class NewImportantNewsTest {
+public class NewImportantNewsEventTest {
     @Test(expected = IllegalArgumentException.class)
     public void invalidArg() {
-        new NewImportantNews(null);
+        new NewImportantNewsEvent(null);
     }
 }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceBehaviorPane.java
Patch:
@@ -42,6 +42,7 @@ class PreferenceBehaviorPane extends GridPane {
     public PreferenceBehaviorPane(@Named("checkForUpdates") PreferenceCheckBox checkForUpdates,
             @Named("playSounds") PreferenceCheckBox playSounds,
             @Named("donationNotification") PreferenceCheckBox donationNotification,
+            @Named("fetchPremiumModules") PreferenceCheckBox fetchPremiumModules,
             CheckForUpdatesButton checkForUpdatesNow,
             @Named("logViewRowsNumber") PreferenceIntTextField logViewRowsNumber,
             @Named("checkForNews") PreferenceCheckBox checkForNews) {
@@ -56,7 +57,8 @@ public PreferenceBehaviorPane(@Named("checkForUpdates") PreferenceCheckBox check
         add(playSounds, 0, 2, 3, 1);
         add(donationNotification, 0, 3, 3, 1);
         add(checkForNews, 0, 4, 3, 1);
-        add(new VBox(checkForUpdates, checkForUpdatesNow), 0, 5, 3, 1);
+        add(fetchPremiumModules, 0, 5, 3, 1);
+        add(new VBox(checkForUpdates, checkForUpdatesNow), 0, 6, 3, 1);
 
         getStyleClass().addAll(Style.CONTAINER.css());
         getStyleClass().addAll(Style.GRID.css());

File: pdfsam-gui/src/main/java/org/pdfsam/ui/notification/NotificationsController.java
Patch:
@@ -30,7 +30,7 @@
 import org.pdfsam.context.UserContext;
 import org.pdfsam.i18n.DefaultI18nContext;
 import org.pdfsam.module.UsageService;
-import org.pdfsam.news.NewImportantNews;
+import org.pdfsam.news.NewImportantNewsEvent;
 import org.pdfsam.update.UpdateAvailableEvent;
 import org.sejda.eventstudio.annotation.EventListener;
 import org.sejda.injector.Auto;
@@ -158,7 +158,7 @@ public void onUpdateAvailable(UpdateAvailableEvent event) {
     }
 
     @EventListener
-    public void onNewImportantNews(NewImportantNews event) {
+    public void onNewImportantNews(NewImportantNewsEvent event) {
         VBox content = new VBox(3, buildLabel(event.news.getContent(), null), styledUrlButton(
                 DefaultI18nContext.getInstance().i18n("Open"), event.news.getLink(), FontAwesomeIcon.EXTERNAL_LINK));
         content.setAlignment(Pos.TOP_RIGHT);

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -73,6 +73,7 @@ public UserContext userContext() {
             when(userContext.isCheckForNews()).thenReturn(Boolean.TRUE);
             when(userContext.isPlaySounds()).thenReturn(Boolean.TRUE);
             when(userContext.isDonationNotification()).thenReturn(Boolean.TRUE);
+            when(userContext.isFetchPremiumModules()).thenReturn(Boolean.TRUE);
             when(userContext.isUseSmartOutput()).thenReturn(Boolean.TRUE);
             when(userContext.getDefaultWorkingPath()).thenReturn("/my/path");
             when(userContext.getDefaultWorkspacePath()).thenReturn("/my/path.xml");
@@ -98,6 +99,8 @@ public void configOnStartup() {
         assertTrue(((PreferenceCheckBox) victim.lookup("#checkForUpdates")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#checkForNews")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#playSounds")).isSelected());
+        assertTrue(((PreferenceCheckBox) victim.lookup("#donationNotification")).isSelected());
+        assertTrue(((PreferenceCheckBox) victim.lookup("#fetchPremiumModules")).isSelected());
         assertTrue(((PreferenceRadioButton) victim.lookup("#smartRadio")).isSelected());
         assertEquals("/my/path.xml",
                 ((PreferenceBrowsableFileField) victim.lookup("#workspace")).getTextField().getText());

File: pdfsam-gui/src/test/java/org/pdfsam/ui/notification/NotificationsControllerTest.java
Patch:
@@ -36,7 +36,7 @@
 import org.pdfsam.Pdfsam;
 import org.pdfsam.context.UserContext;
 import org.pdfsam.module.UsageService;
-import org.pdfsam.news.NewImportantNews;
+import org.pdfsam.news.NewImportantNewsEvent;
 import org.pdfsam.news.NewsData;
 import org.pdfsam.test.ClearEventStudioRule;
 import org.pdfsam.test.InitializeAndApplyJavaFxThreadRule;
@@ -141,7 +141,7 @@ public void onNewImportantNews() {
         data.setTitle("title");
         data.setContent("content");
         data.setLink("link");
-        NewImportantNews event = new NewImportantNews(data);
+        NewImportantNewsEvent event = new NewImportantNewsEvent(data);
         victim.onNewImportantNews(event);
         verify(container).addStickyNotification(eq("title"), any());
     }

File: pdfsam-service/src/main/java/org/pdfsam/Services.java
Patch:
@@ -21,6 +21,7 @@
 import org.pdfsam.module.ModuleServiceConfig;
 import org.pdfsam.news.NewsServiceConfig;
 import org.pdfsam.pdf.PdfServiceConfig;
+import org.pdfsam.premium.PremiumServiceConfig;
 import org.pdfsam.task.TaskExecutionServiceConfig;
 import org.pdfsam.ui.UIServiceConfig;
 import org.pdfsam.update.UpdateServiceConfig;
@@ -36,6 +37,6 @@ public class Services {
      */
     public static void initServices() {
         Injector.addConfig(new UpdateServiceConfig(), new UIServiceConfig(), new TaskExecutionServiceConfig(),
-                new PdfServiceConfig(), new NewsServiceConfig(), new ModuleServiceConfig());
+                new PdfServiceConfig(), new NewsServiceConfig(), new ModuleServiceConfig(), new PremiumServiceConfig());
     }
 }

File: pdfsam-service/src/main/java/org/pdfsam/news/LatestNewsController.java
Patch:
@@ -59,7 +59,7 @@ public void fetchLatestNews(FetchLatestNewsRequest event) {
                 news.stream().filter(n -> n.isImportant()).findFirst()
                         .filter(n -> service.getLatestImportantNewsSeen() < n.getId()).ifPresent(n -> {
                             service.setLatestImportantNewsSeen(n.getId());
-                            eventStudio().broadcast(new NewImportantNews(n));
+                            eventStudio().broadcast(new NewImportantNewsEvent(n));
                         });
             }
         }).whenComplete((r, e) -> {

File: pdfsam-service/src/main/java/org/pdfsam/module/ModuleServiceConfig.java
Patch:
@@ -30,7 +30,7 @@
 @Components({ ClearUsageController.class })
 public class ModuleServiceConfig {
     @Provides
-    UsageService usageService(List<Module> modules) {
-        return new StatefulPreferencesUsageService(modules);
+    UsageService usageService(List<Module> modules, PreferencesUsageDataStore dataStore) {
+        return new StatefulPreferencesUsageService(modules, dataStore);
     }
 }

File: pdfsam-service/src/main/java/org/pdfsam/module/StatefulPreferencesUsageService.java
Patch:
@@ -35,12 +35,13 @@
  */
 class StatefulPreferencesUsageService implements UsageService {
 
-    private PreferencesUsageDataStore dataStore = new PreferencesUsageDataStore();
+    private PreferencesUsageDataStore dataStore;
     private Map<String, Module> modulesMap;
 
     @Inject
-    StatefulPreferencesUsageService(List<Module> modules) {
+    StatefulPreferencesUsageService(List<Module> modules, PreferencesUsageDataStore dataStore) {
         this.modulesMap = modules.stream().collect(Collectors.toMap(Module::id, m -> m));
+        this.dataStore = dataStore;
     }
 
     @Override

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dialog/OpenWithDialog.java
Patch:
@@ -105,8 +105,7 @@ public void setOwner(Window owner) {
     OpenWithDialog initFor(InputPdfArgumentsLoadRequest event) {
 
         this.messageTitle
-                .setText(DefaultI18nContext.getInstance().i18npl("Select the task to perform on the following file",
-                        "Select the task to perform on the following files", event.pdfs.size()));
+                .setText(DefaultI18nContext.getInstance().i18n("Select the task to perform on the following files"));
         filesList
                 .setItems(FXCollections.observableArrayList(event.pdfs.stream().map(Path::toString).collect(toList())));
         modules.forEach(m -> {

File: pdfsam-i18n/src/main/java/org/pdfsam/i18n/I18nContext.java
Patch:
@@ -62,6 +62,6 @@ public interface I18nContext {
      *            discriminating
      * @return the internationalized message.
      */
-    String i18npl(String singular, String plural, long n);
+    // String i18npl(String singular, String plural, long n);
 
 }

File: pdfsam-core/src/test/java/org/pdfsam/context/DefaultUserContextTest.java
Patch:
@@ -59,9 +59,9 @@ public void isCheckUpdates() {
     @Test
     public void isCheckForNews() {
         victim.setBooleanPreference(BooleanUserPreference.CHECK_FOR_NEWS, false);
-        assertFalse(victim.isCheckForUpdates());
+        assertFalse(victim.isCheckForNews());
         victim.setBooleanPreference(BooleanUserPreference.CHECK_FOR_NEWS, true);
-        assertTrue(victim.isCheckForUpdates());
+        assertTrue(victim.isCheckForNews());
     }
 
     @Test

File: pdfsam-gui/src/main/java/org/pdfsam/ui/notification/Notification.java
Patch:
@@ -48,6 +48,7 @@ class Notification extends BorderPane {
         setId(UUID.randomUUID().toString());
         Label titleLabel = new Label(title);
         titleLabel.getStyleClass().add("notification-title");
+        content.getStyleClass().add("notification-content");
         BorderPane.setAlignment(content, Pos.CENTER_LEFT);
         setTop(titleLabel);
         setCenter(content);

File: pdfsam-fx/src/test/java/org/pdfsam/ui/selection/multiple/PaceColumnTest.java
Patch:
@@ -35,7 +35,7 @@ public class PaceColumnTest {
     public void getObservableValue() {
         File file = mock(File.class);
         SelectionTableRowData data = new SelectionTableRowData(PdfDocumentDescriptor.newDescriptorNoPassword(file));
-        data.pageSelection.set("2");
+        data.pace.set("2");
         assertEquals("2", new PaceColumn().getObservableValue(data).getValue());
     }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/PdfDestinationPane.java
Patch:
@@ -75,6 +75,7 @@ public PdfDestinationPane(BrowsableField destination, String ownerModule, UserCo
         version = new PdfVersionCombo(ownerModule);
         compress = new PdfVersionConstrainedCheckBox(PdfVersion.VERSION_1_5, ownerModule);
         compress.setText(DefaultI18nContext.getInstance().i18n("Compress output file/files"));
+        compress.setSelected(true);
         if (asList(optionalFields).contains(DestinationPanelFields.DISCARD_BOOKMARKS)) {
             CheckBox discardBookmarksField = new CheckBox(DefaultI18nContext.getInstance().i18n("Discard bookmarks"));
             discardBookmarksField.setGraphic(helpIcon(DefaultI18nContext.getInstance()

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dialog/OpenWithDialog.java
Patch:
@@ -105,8 +105,8 @@ public void setOwner(Window owner) {
     OpenWithDialog initFor(InputPdfArgumentsLoadRequest event) {
 
         this.messageTitle
-                .setText(DefaultI18nContext.getInstance().i18npl("Select the task to perform on the following files",
-                        "Select the task to perform on the following file", event.pdfs.size()));
+                .setText(DefaultI18nContext.getInstance().i18npl("Select the task to perform on the following file",
+                        "Select the task to perform on the following files", event.pdfs.size()));
         filesList
                 .setItems(FXCollections.observableArrayList(event.pdfs.stream().map(Path::toString).collect(toList())));
         modules.forEach(m -> {

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dialog/OpenWithDialogControllerTest.java
Patch:
@@ -48,13 +48,13 @@
  */
 @Category(TestFX.class)
 public class OpenWithDialogControllerTest extends GuiTest {
-    @Rule
-    public ClearEventStudioRule clearEventStudio = new ClearEventStudioRule();
 
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();
     private Module module1 = new HighPriorityTestModule();
     private Module module2 = new DefaultPriorityTestModule();
+    @Rule
+    public ClearEventStudioRule clearEventStudio = new ClearEventStudioRule(module1.id(), module2.id());
 
     @Override
     protected Parent getRootNode() {

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dialog/OpenWithDialogTest.java
Patch:
@@ -53,12 +53,12 @@
  */
 @Category(TestFX.class)
 public class OpenWithDialogTest extends GuiTest {
-    @Rule
-    public ClearEventStudioRule clearEventStudio = new ClearEventStudioRule();
 
     @Rule
     public TemporaryFolder folder = new TemporaryFolder();
     private Module module = new DefaultPriorityTestModule();
+    @Rule
+    public ClearEventStudioRule clearEventStudio = new ClearEventStudioRule(module.id());
 
     @Override
     protected Parent getRootNode() {

File: pdfsam-service/src/test/java/org/pdfsam/module/PreferencesUsageDataStoreTest.java
Patch:
@@ -59,13 +59,14 @@ public void incrementUsageFor() throws JSONObjectException, IOException {
     }
 
     @Test
-    public void multipleIncrementUsageFor() throws JSONObjectException, IOException {
+    public void multipleIncrementUsageFor() throws JSONObjectException, IOException, InterruptedException {
         victim.incrementUsageFor("moduleId");
         ModuleUsage usage = JSON.std.beanFrom(
                 ModuleUsage.class,
                 Preferences.userRoot().node(PreferencesUsageDataStore.USAGE_PATH).node("moduleId")
                         .get(PreferencesUsageDataStore.MODULE_USAGE_KEY, ""));
         victim.flush();
+        Thread.sleep(1000);
         victim.incrementUsageFor("moduleId");
         ModuleUsage usage2 = JSON.std.beanFrom(
                 ModuleUsage.class,

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceConfig.java
Patch:
@@ -115,7 +115,7 @@ public PreferenceCheckBox playSounds() {
     @Bean(name = "savePwdInWorkspace")
     public PreferenceCheckBox savePwdInWorkspace() {
         PreferenceCheckBox savePwdInWorkspace = new PreferenceCheckBox(BooleanUserPreference.SAVE_PWD_IN_WORKSPACE,
-                DefaultI18nContext.getInstance().i18n("Store passwords in the workspace file"),
+                DefaultI18nContext.getInstance().i18n("Store passwords when saving a workspace file"),
                 userContext.isPlaySounds(), userContext);
         savePwdInWorkspace.setId("savePwdInWorkspace");
         savePwdInWorkspace.setGraphic(helpIcon(DefaultI18nContext.getInstance().i18n(

File: pdfsam-rotate/src/main/java/org/pdfsam/rotate/RotateModule.java
Patch:
@@ -163,7 +163,7 @@ public Footer footer(RunButton runButton, @Named(MODULE_ID + "openButton") OpenB
 
         @Bean(name = MODULE_ID + "openButton")
         public OpenButton openButton() {
-            return new OpenButton(MODULE_ID, ModuleInputOutputType.SINGLE_PDF);
+            return new OpenButton(MODULE_ID, ModuleInputOutputType.MULTIPLE_PDF);
         }
     }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/PdfVersionCombo.java
Patch:
@@ -63,7 +63,7 @@ public PdfVersionCombo(String ownerModule) {
             if (selecedIndex != -1) {
                 getSelectionModel().select(selecedIndex);
             } else {
-                getSelectionModel().selectLast();
+                getSelectionModel().selectFirst();
             }
         });
         initializeState();

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceConfig.java
Patch:
@@ -146,7 +146,7 @@ public PreferenceBrowsableDirectoryField workingDirectory() {
     @Bean(name = "workspace")
     public PreferenceBrowsableFileField workspace() {
         PreferenceBrowsableFileField workspace = new PreferenceBrowsableFileField(StringUserPreference.WORKSPACE_PATH,
-                FileType.XML, OpenType.OPEN, userContext);
+                FileType.JSON, OpenType.OPEN, userContext);
         workspace.getTextField().setText(userContext.getDefaultWorkspacePath());
         workspace.setId("workspace");
         return workspace;

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/PdfVersionFilterTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Test;
 
 import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
 
 /**
  * @author Andrea Vacondio
@@ -57,7 +58,7 @@ public void failingRemove() {
         ChangeListener<? super Number> listener = mock(ChangeListener.class);
         victim.requiredProperty().addListener(listener);
         victim.removeFilter(10);
-        verify(listener, never()).changed(any(), any(), any());
+        verify(listener, never()).changed(any(ObservableValue.class), any(Number.class), any(Number.class));
     }
 
     @Test
@@ -68,7 +69,7 @@ public void failingAdd() {
         ChangeListener<? super Number> listener = mock(ChangeListener.class);
         victim.requiredProperty().addListener(listener);
         victim.addFilter(Integer.valueOf(10));
-        verify(listener, never()).changed(any(), any(), any());
+        verify(listener, never()).changed(any(ObservableValue.class), any(Number.class), any(Number.class));
     }
 
     @Test

File: pdfsam-gui/src/test/java/org/pdfsam/ui/quickbar/ExpandButtonTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.loadui.testfx.categories.TestFX;
 
 import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
 import javafx.scene.Node;
 import javafx.scene.Parent;
 import javafx.scene.control.ToggleButton;
@@ -50,6 +51,6 @@ public void changeGraphic() {
         ChangeListener<? super Node> listener = mock(ChangeListener.class);
         toggle.graphicProperty().addListener(listener);
         click(".quickbar-expand-toggle");
-        verify(listener).changed(any(), any(), any());
+        verify(listener).changed(any(ObservableValue.class), any(Node.class), any(Node.class));
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/notification/NotificationsControllerTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.ClassRule;
 import org.junit.Rule;
 import org.junit.Test;
+import org.pdfsam.ConfigurableProperty;
 import org.pdfsam.Pdfsam;
 import org.pdfsam.PdfsamEdition;
 import org.pdfsam.module.UsageService;
@@ -60,6 +61,8 @@ public void setUp() {
         container = mock(NotificationsContainer.class);
         Pdfsam pdfsam = mock(Pdfsam.class);
         when(pdfsam.edition()).thenReturn(PdfsamEdition.COMMUNITY);
+        when(pdfsam.property(ConfigurableProperty.DOWNLOAD_URL)).thenReturn("http://www.pdfsam.org");
+        when(pdfsam.property(ConfigurableProperty.DONATE_URL)).thenReturn("http://www.pdfsam.org");
         victim = new NotificationsController(container, service, pdfsam);
     }
 

File: pdfsam-core/src/main/java/org/pdfsam/context/DefaultUserContext.java
Patch:
@@ -18,7 +18,6 @@
  */
 package org.pdfsam.context;
 
-import static org.apache.commons.lang3.StringUtils.EMPTY;
 import static org.apache.commons.lang3.StringUtils.defaultIfBlank;
 
 import java.util.prefs.BackingStoreException;
@@ -42,6 +41,7 @@ public final class DefaultUserContext implements UserContext {
 
     static final String CHECK_FOR_UPDATES_PROP = "org.pdfsam.default.checkforupdate";
     static final String LOCALE_PROP = "org.pdfsam.default.locale";
+    static final String NEWS_PROP = "org.pdfsam.default.news";
 
     private Preferences prefs;
 
@@ -97,7 +97,8 @@ public String getStartupModule() {
     @Override
     public NewsPolicy getNewsPolicy() {
         try {
-            return NewsPolicy.valueOf(defaultIfBlank(prefs.get(StringUserPreference.NEWS_POLICY.toString(), EMPTY),
+            return NewsPolicy.valueOf(defaultIfBlank(
+                    prefs.get(StringUserPreference.NEWS_POLICY.toString(), System.getProperty(NEWS_PROP)),
                     NewsPolicy.ONCE_A_WEEK.toString()));
         } catch (IllegalArgumentException e) {
             LOG.warn("Invalid news policy", e);

File: pdfsam-core/src/main/java/org/pdfsam/context/UserContext.java
Patch:
@@ -18,6 +18,8 @@
  */
 package org.pdfsam.context;
 
+import org.pdfsam.ui.NewsPolicy;
+
 /**
  * Context holding user related application settings.
  * 
@@ -89,7 +91,7 @@ public interface UserContext {
     /**
      * @return the policy to use regarding displaying news
      */
-    String getNewsPolicy();
+    NewsPolicy getNewsPolicy();
 
     /**
      * Clear user preferences

File: pdfsam-gui/src/main/java/org/pdfsam/WindowStatusController.java
Patch:
@@ -39,7 +39,7 @@
 @Named
 class WindowStatusController {
     private static final Logger LOG = LoggerFactory.getLogger(WindowStatusController.class);
-    public static final String PDFSAM_DISABLE_UI_RESTORE = "pdfsam.disable.ui.restore";
+    public static final String PDFSAM_DISABLE_UI_RESTORE = "org.pdfsam.disable.ui.restore";
 
     private Stage stage;
     private StageService service;

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/EnhancedClassloaderProvider.java
Patch:
@@ -54,7 +54,7 @@ final class EnhancedClassloaderProvider {
     private static final Logger LOG = LoggerFactory.getLogger(EnhancedClassloaderProvider.class);
     private static final String MODULES_DIRECTORY = "modules";
 
-    public static final String PDFSAM_MODULES_DIRECTORY = "pdfsam.modules.directory";
+    public static final String PDFSAM_MODULES_DIRECTORY = "org.pdfsam.modules.directory";
 
     private EnhancedClassloaderProvider() {
         // hide

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceConfig.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import javafx.scene.control.Tooltip;
-
 import javax.inject.Inject;
 
 import org.pdfsam.context.BooleanUserPreference;
@@ -51,6 +49,8 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Scope;
 
+import javafx.scene.control.Tooltip;
+
 /**
  * Configuration for the PDFsam preferences components
  * 
@@ -105,7 +105,7 @@ public PreferenceComboBox<KeyStringValueItem<String>> newsDisplayPolicy() {
                 Arrays.stream(NewsPolicy.values()).map(t -> keyValue(t.toString(), t.friendlyName()))
                         .collect(Collectors.toList()));
 
-        newsDisplayPolicyCombo.setValue(keyEmptyValue(userContext.getNewsPolicy()));
+        newsDisplayPolicyCombo.setValue(keyEmptyValue(userContext.getNewsPolicy().toString()));
         return newsDisplayPolicyCombo;
     }
 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/news/NewsStageController.java
Patch:
@@ -24,7 +24,6 @@
 import javax.inject.Named;
 
 import org.pdfsam.context.UserContext;
-import org.pdfsam.ui.NewsPolicy;
 import org.pdfsam.ui.StageService;
 import org.pdfsam.ui.commons.ShowStageRequest;
 import org.sejda.eventstudio.annotation.EventListener;
@@ -59,8 +58,7 @@ public class NewsStageController {
     @SuppressWarnings("unused")
     @EventListener
     void requestShow(ShowStageRequest event) {
-        if (NewsPolicy.valueOf(userContext.getNewsPolicy()).isTimeToShow(
-                this.service.getLatestNewsStageDisplayInstant())) {
+        if (userContext.getNewsPolicy().isTimeToShow(this.service.getLatestNewsStageDisplayInstant())) {
             LOG.debug("Requesting to display latest PDFsam news");
             NewsStage stage = applicationContext.getBean(NewsStage.class);
             stage.loadAndShow(showing -> service.newsStageDisplayed());

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -87,7 +87,7 @@ public UserContext userContext() {
             when(userContext.getDefaultWorkspacePath()).thenReturn("/my/path.xml");
             when(userContext.getThumbnailsSize()).thenReturn(200);
             when(userContext.getStartupModule()).thenReturn("");
-            when(userContext.getNewsPolicy()).thenReturn(NewsPolicy.ONCE_A_DAY.toString());
+            when(userContext.getNewsPolicy()).thenReturn(NewsPolicy.ONCE_A_DAY);
             return userContext;
         }
 

File: pdfsam-core/src/main/java/org/pdfsam/pdf/PdfDescriptorLoadingStatus.java
Patch:
@@ -45,7 +45,8 @@ public enum PdfDescriptorLoadingStatus {
             "Valid user password provided.")),
     ENCRYPTED(FontAwesomeIcon.LOCK, DefaultI18nContext.getInstance().i18n(
             "This document is encrypted, click to provide a password.")),
-    WITH_ERRORS(FontAwesomeIcon.WARNING, "");
+    WITH_ERRORS(FontAwesomeIcon.WARNING, DefaultI18nContext.getInstance()
+            .i18n("An error has occurred, click for more details."));
 
     static {
         INITIAL.setValidDestinationStatus(REQUESTED, WITH_ERRORS);

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/LoggerConfig.java
Patch:
@@ -19,7 +19,7 @@
 package org.pdfsam.configuration;
 
 import org.pdfsam.ui.log.LogPane;
-import org.pdfsam.ui.log.TextAreaAppender;
+import org.pdfsam.ui.log.LogMessageBroadcaster;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.ComponentScan.Filter;
@@ -36,7 +36,7 @@
  */
 @Configuration
 @ComponentScan(basePackages = { "org.pdfsam.gui.log" }, includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, value = {
-        LogPane.class, TextAreaAppender.class }))
+        LogPane.class, LogMessageBroadcaster.class }))
 public class LoggerConfig {
 
     @Bean

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/DashboardButtonTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.pdfsam.ui.event.SetActiveDashboardItemRequest;
 import org.sejda.eventstudio.Listener;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import javafx.scene.Parent;
 
 /**
@@ -50,7 +49,7 @@ protected Parent getRootNode() {
     public void testClick() {
         Listener<SetActiveDashboardItemRequest> listener = mock(Listener.class);
         eventStudio().add(SetActiveDashboardItemRequest.class, listener);
-        click(FontAwesomeIcon.HOME.toString());
+        click(".button");
         ArgumentCaptor<SetActiveDashboardItemRequest> argument = ArgumentCaptor
                 .forClass(SetActiveDashboardItemRequest.class);
         verify(listener).onEvent(argument.capture());

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/LogButtonTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.pdfsam.ui.commons.ShowStageRequest;
 import org.sejda.eventstudio.Listener;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import javafx.scene.Parent;
 
 /**
@@ -48,7 +47,7 @@ protected Parent getRootNode() {
     public void onClick() {
         Listener<ShowStageRequest> listener = mock(Listener.class);
         eventStudio().add(ShowStageRequest.class, listener, "LogStage");
-        click(FontAwesomeIcon.LIST.toString());
+        click(".button");
         verify(listener).onEvent(any());
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/MenuButtonTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import javafx.geometry.Side;
 import javafx.scene.Parent;
 
@@ -68,7 +67,7 @@ public void tearDown() throws Exception {
     @Test
     public void onClick() {
         AppContextMenu menu = applicationContext.getBean(AppContextMenu.class);
-        click(FontAwesomeIcon.BARS.toString());
+        click(".button");
         verify(menu).show(any(), eq(Side.BOTTOM), eq(0d), eq(0d));
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/ModulesMenuTest.java
Patch:
@@ -40,7 +40,6 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import javafx.scene.Parent;
 
 /**
@@ -68,7 +67,7 @@ public void onSaveClick() {
         Listener<SetActiveModuleRequest> listener = mock(Listener.class);
         eventStudio().add(SetActiveModuleRequest.class, listener);
         ArgumentCaptor<SetActiveModuleRequest> argument = ArgumentCaptor.forClass(SetActiveModuleRequest.class);
-        click(FontAwesomeIcon.BARS.toString()).click("#modulesMenu")
+        click(".button").click("#modulesMenu")
                 .click(module.descriptor().getCategory().getDescription()).click(module.descriptor().getName());
         verify(listener).onEvent(argument.capture());
         assertEquals(module.id(), argument.getValue().getActiveModuleId().get());

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/about/AboutDashboardPaneTest.java
Patch:
@@ -27,6 +27,7 @@
 import static org.sejda.eventstudio.StaticStudio.eventStudio;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -48,6 +49,7 @@
  * @author Andrea Vacondio
  *
  */
+@Ignore("Buttons graphics are now Text and are not found by TestFX, needs to be investigated")
 @Category(TestFX.class)
 public class AboutDashboardPaneTest extends GuiTest {
 
@@ -150,7 +152,7 @@ public void clickCopy() throws Exception {
         FXTestUtils.invokeAndWait(() -> {
             Clipboard.getSystemClipboard().clear();
             assertTrue(isBlank(Clipboard.getSystemClipboard().getString()));
-        }, 2);
+        } , 2);
         click("#copyEnvDetails");
         FXTestUtils.invokeAndWait(() -> assertTrue(Clipboard.getSystemClipboard().getString().contains("PDFsam")), 1);
     }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.pdfsam.context.UserContext;
+import org.pdfsam.i18n.DefaultI18nContext;
 import org.pdfsam.i18n.SetLocaleEvent;
 import org.pdfsam.module.Module;
 import org.pdfsam.support.KeyStringValueItem;
@@ -117,7 +118,8 @@ public void configOnStartup() {
         assertEquals("/my/path", ((PreferenceBrowsableDirectoryField) victim.lookup("#workingDirectory"))
                 .getTextField().getText());
         // assertEquals("200", ((PreferenceIntTextField) victim.lookup("#thumbnailsSize")).getText());
-        assertEquals("Dashboard", startupModuleCombo.getSelectionModel().getSelectedItem().getValue());
+        assertEquals(DefaultI18nContext.getInstance().i18n("Dashboard"),
+                startupModuleCombo.getSelectionModel().getSelectedItem().getValue());
         assertEquals(NewsPolicy.ONCE_A_DAY.friendlyName(), newsDisplayPolicy.getSelectionModel().getSelectedItem()
                 .getValue());
     }

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/ApplicationContextHolder.java
Patch:
@@ -47,7 +47,7 @@ private ApplicationContextHolder() {
     public static AnnotationConfigApplicationContext getContext() {
         return DefaultApplicationContextHolder.CONTEXT.ctx;
     }
-
+    
     /**
      * Lazy initialization holder class idiom (Joshua Bloch, Effective Java second edition, item 71).
      * 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/BannerButton.java
Patch:
@@ -18,8 +18,8 @@
  */
 package org.pdfsam.ui.banner;
 
+import de.jensd.fx.glyphs.GlyphIcons;
 import de.jensd.fx.glyphs.GlyphsDude;
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
 import javafx.scene.control.Button;
 
 /**
@@ -29,7 +29,7 @@
  *
  */
 class BannerButton extends Button {
-    BannerButton(FontAwesomeIcon icon) {
+    BannerButton(GlyphIcons icon) {
         getStyleClass().addAll("pdfsam-toolbar-button");
         setGraphic(GlyphsDude.createIcon(icon, "28.0"));
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/DashboardButton.java
Patch:
@@ -26,7 +26,7 @@
 import org.pdfsam.i18n.DefaultI18nContext;
 import org.pdfsam.ui.event.SetActiveDashboardItemRequest;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
+import de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon;
 import javafx.scene.control.Tooltip;
 
 /**
@@ -39,7 +39,7 @@
 class DashboardButton extends BannerButton {
     @Inject
     DashboardButton(@Named("defaultDashboardItemId") String defaultDasboardItem) {
-        super(FontAwesomeIcon.HOME);
+        super(MaterialDesignIcon.HOME);
         setOnAction(e -> eventStudio().broadcast(new SetActiveDashboardItemRequest(defaultDasboardItem)));
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Dashboard")));
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/LogButton.java
Patch:
@@ -25,7 +25,7 @@
 import org.pdfsam.i18n.DefaultI18nContext;
 import org.pdfsam.ui.commons.ShowStageRequest;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
+import de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon;
 import javafx.scene.control.Tooltip;
 
 /**
@@ -38,7 +38,7 @@
 class LogButton extends BannerButton {
 
     LogButton() {
-        super(FontAwesomeIcon.LIST);
+        super(MaterialDesignIcon.COMMENT_ALERT_OUTLINE);
         setOnAction(e -> eventStudio().broadcast(new ShowStageRequest(), "LogStage"));
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Application messages")));
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/MenuButton.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.pdfsam.i18n.DefaultI18nContext;
 
-import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;
+import de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon;
 import javafx.geometry.Side;
 import javafx.scene.control.Tooltip;
 
@@ -38,7 +38,7 @@ class MenuButton extends BannerButton {
 
     @Inject
     MenuButton(AppContextMenu menu) {
-        super(FontAwesomeIcon.BARS);
+        super(MaterialDesignIcon.MENU);
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Application menu")));
         setOnAction(e -> menu.show(this, Side.BOTTOM, 0, 0));
     }

File: pdfsam-merge/src/test/java/org/pdfsam/merge/MergeParametersBuilderTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.sejda.model.output.FileTaskOutput;
 import org.sejda.model.parameter.MergeParameters;
 import org.sejda.model.pdf.PdfVersion;
+import org.sejda.model.pdf.form.AcroFormPolicy;
 
 /**
  * @author Andrea Vacondio
@@ -63,7 +64,7 @@ public void build() throws IOException {
         assertTrue(params.isOverwrite());
         assertEquals(PdfVersion.VERSION_1_7, params.getVersion());
         assertTrue(params.isBlankPageIfOdd());
-        assertTrue(params.isCopyFormFields());
+        assertEquals(AcroFormPolicy.MERGE, params.getAcroFormPolicy());
         assertEquals(OutlinePolicy.ONE_ENTRY_EACH_DOC, params.getOutlinePolicy());
         assertEquals(output, params.getOutput());
         assertEquals(input, params.getInputList().get(0));

File: pdfsam-service/src/main/java/org/pdfsam/pdf/BookmarksLevelSAMBoxLoader.java
Patch:
@@ -34,7 +34,7 @@
 class BookmarksLevelSAMBoxLoader implements PdfLoader<PDDocument> {
 
     public void accept(PDDocument document, PdfDocumentDescriptor descriptor) {
-        descriptor.setMaxGoToActionDepth(OutlineUtils.getMaxBookmarkLevel(document));
+        descriptor.setMaxGoToActionDepth(OutlineUtils.getMaxOutlineLevel(document));
     }
 
     public RequiredPdfData key() {

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SizeUnitRadio.java
Patch:
@@ -28,8 +28,9 @@
 import org.pdfsam.ui.workspace.RestorableView;
 
 /**
+ * Radio button for {@link SizeUnit}
+ * 
  * @author Andrea Vacondio
- *
  */
 class SizeUnitRadio extends RadioButton implements RestorableView {
 

File: pdfsam-service/src/main/java/org/pdfsam/pdf/BookmarksLevelITextLoader.java
Patch:
@@ -19,7 +19,7 @@
 package org.pdfsam.pdf;
 
 import org.pdfsam.module.RequiredPdfData;
-import org.sejda.impl.itext5.component.ITextOutlineHandler;
+import org.sejda.impl.itext5.component.ITextOutlineLevelsHandler;
 
 import com.itextpdf.text.pdf.PdfReader;
 
@@ -33,7 +33,7 @@
 class BookmarksLevelITextLoader implements PdfLoader<PdfReader> {
 
     public void accept(PdfReader reader, PdfDocumentDescriptor descriptor) {
-        descriptor.setMaxGoToActionDepth(new ITextOutlineHandler(reader, "").getMaxGoToActionDepth());
+        descriptor.setMaxGoToActionDepth(new ITextOutlineLevelsHandler(reader, "").getMaxOutlineDepth());
     }
 
     public RequiredPdfData key() {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/DestinationPane.java
Patch:
@@ -43,7 +43,7 @@ public DestinationPane(BrowsableField destination) {
         this.destination = destination;
         overwrite.setSelected(false);
         overwrite.setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n(
-                "Tick the box if you want to overwrite the outpuf files if they already exist.")));
+                "Tick the box if you want to overwrite the output files if they already exist.")));
 
         destination.getStyleClass().addAll(Style.VITEM.css());
         getChildren().addAll(destination, overwrite);

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/DestinationPane.java
Patch:
@@ -43,7 +43,7 @@ public DestinationPane(BrowsableField destination) {
         this.destination = destination;
         overwrite.setSelected(false);
         overwrite.setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n(
-                "Tick the box if you want to overwrite the outpuf files if they already exist.")));
+                "Tick the box if you want to overwrite the output files if they already exist.")));
 
         destination.getStyleClass().addAll(Style.VITEM.css());
         getChildren().addAll(destination, overwrite);

File: pdfsam-pdfbox/src/main/java/org/pdfsam/pdfbox/SplitByPageNumbersTask.java
Patch:
@@ -53,9 +53,9 @@ public void execute(T parameters) throws TaskException {
         LOG.debug("Opening {} ", parameters.getSource());
         document = parameters.getSource().open(documentLoader);
 
-        splitter = new PagesPdfSplitter<T>(document);
+        splitter = new PagesPdfSplitter<>(document, parameters);
         LOG.debug("Starting split by page numbers for {} ", parameters);
-        splitter.split(getNotifiableTaskMetadata(), parameters);
+        splitter.split(getNotifiableTaskMetadata());
 
         LOG.debug("Input documents split and written to {}", parameters.getOutput());
     }

File: pdfsam-service/src/test/java/org/pdfsam/ui/JsonWorkspaceServiceTest.java
Patch:
@@ -97,7 +97,9 @@ public void loadBrokenWorkspace() throws IOException {
     public void cannotAccessWorkspace() throws IOException {
         File file = folder.newFile();
         FileUtils.copyInputStreamToFile(getClass().getResourceAsStream("/workspace.json"), file);
-        file.setReadable(false);
+        if (!file.setReadable(false)) {
+            throw new RuntimeException("OS does not implement read pemissions");
+        }
         victim.loadWorkspace(file);
     }
 

File: pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/splitbybookmarks/BookmarksLevelComboBoxTest.java
Patch:
@@ -138,12 +138,12 @@ public void saveStateEmptySelection() {
     }
 
     @Test
-    public void restoreState() {
+    public void restoreState() throws Exception {
         BookmarksLevelComboBox victim = find("#victim");
         Map<String, String> data = new HashMap<>();
         data.put("levelCombo.max", "3");
         data.put("levelCombo.selected", "2");
-        victim.restoreStateFrom(data);
+        FXTestUtils.invokeAndWait(() -> victim.restoreStateFrom(data), 2);
         assertEquals("2", victim.getSelectionModel().getSelectedItem());
         assertEquals(3, victim.getItems().size());
     }

File: pdfsam-split-by-bookmarks/src/test/java/org/pdfsam/splitbybookmarks/SplitOptionsPaneTest.java
Patch:
@@ -117,12 +117,12 @@ public void saveStateEmptyRegexp() {
     }
 
     @Test
-    public void restoreState() {
+    public void restoreState() throws Exception {
         SplitOptionsPane victim = find(".pdfsam-container");
         Map<String, String> data = new HashMap<>();
         data.put("regexp", "Chuck");
         data.put("levelCombo.selected", "2");
-        victim.restoreStateFrom(data);
+        FXTestUtils.invokeAndWait(() -> victim.restoreStateFrom(data), 2);
         TextField field = find("#bookmarksRegexp");
         assertEquals("Chuck", field.getText());
         BookmarksLevelComboBox levelCombo = find("#bookmarksLevel");

File: pdfsam-split-by-size/src/test/java/org/pdfsam/splitbysize/SplitOptionsPaneTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.junit.experimental.categories.Category;
 import org.loadui.testfx.GuiTest;
 import org.loadui.testfx.categories.TestFX;
+import org.loadui.testfx.utils.FXTestUtils;
 import org.pdfsam.test.ClearEventStudioRule;
 import org.pdfsam.ui.commons.ValidableTextField;
 
@@ -99,14 +100,14 @@ public void saveState() {
     }
 
     @Test
-    public void restoreState() {
+    public void restoreState() throws Exception {
         SplitOptionsPane victim = find(".pdfsam-container");
         SizeUnitRadio kilo = find("#unit" + SizeUnit.KILOBYTE.symbol());
         SizeUnitRadio mega = find("#unit" + SizeUnit.MEGABYTE.symbol());
         Map<String, String> data = new HashMap<>();
         data.put("size", "100");
         data.put(SizeUnit.MEGABYTE.toString(), Boolean.TRUE.toString());
-        victim.restoreStateFrom(data);
+        FXTestUtils.invokeAndWait(() -> victim.restoreStateFrom(data), 2);
         ValidableTextField field = find("#sizeField");
         assertEquals("100", field.getText());
         assertTrue(mega.isSelected());

File: pdfsam-fx/src/main/java/org/pdfsam/ui/notification/NotificationType.java
Patch:
@@ -74,7 +74,7 @@ public String getStyleClass() {
         }
     };
 
-    private final static String DEFAULT_ICON_SIZE = "32.0";
+    private static final String DEFAULT_ICON_SIZE = "32.0";
 
     public abstract Node getGraphic();
 

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/WorkspaceMenuTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import javax.inject.Inject;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 import org.junit.runner.RunWith;
@@ -60,6 +61,7 @@ protected Parent getRootNode() {
     }
 
     @Test
+    @Ignore("need to find a way to test file chooser")
     public void onSaveClick() {
         Listener<SaveWorkspaceEvent> listener = mock(Listener.class);
         eventStudio().add(SaveWorkspaceEvent.class, listener);

File: pdfsam-simple-split/src/test/java/org/pdfsam/split/SplitAfterRadioButtonTest.java
Patch:
@@ -157,13 +157,13 @@ public void saveStateNotSelected() {
     }
 
     @Test
-    public void restoreState() {
+    public void restoreState() throws Exception {
         SplitAfterRadioButton victim = find("#victim");
         ValidableTextField field = find("#field");
         Map<String, String> data = new HashMap<>();
         data.put("splitAfter", Boolean.TRUE.toString());
         data.put("splitAfter.field", "chuck");
-        victim.restoreStateFrom(data);
+        FXTestUtils.invokeAndWait(() -> victim.restoreStateFrom(data), 2);
         assertTrue(victim.isSelected());
         assertEquals("chuck", field.getText());
     }

File: pdfsam-simple-split/src/test/java/org/pdfsam/split/SplitByEveryRadioButtonTest.java
Patch:
@@ -157,13 +157,13 @@ public void saveStateNotSelected() {
     }
 
     @Test
-    public void restoreState() {
+    public void restoreState() throws Exception {
         SplitByEveryRadioButton victim = find("#victim");
         ValidableTextField field = find("#field");
         Map<String, String> data = new HashMap<>();
         data.put("splitByEvery", Boolean.TRUE.toString());
         data.put("splitByEvery.field", "chuck");
-        victim.restoreStateFrom(data);
+        FXTestUtils.invokeAndWait(() -> victim.restoreStateFrom(data), 2);
         assertTrue(victim.isSelected());
         assertEquals("chuck", field.getText());
     }

File: pdfsam-core/src/main/java/org/pdfsam/support/validation/Validators.java
Patch:
@@ -49,10 +49,10 @@ public static Validator<String> newPositiveIntegerString() {
     }
 
     /**
-     * @return a new instance of a validator checking for a input string representing an integer number in the given range
+     * @return a new instance of a validator checking for a input string representing a positive integer number in the given range
      */
-    public static Validator<String> newIntRangeString(int lower, int upper) {
-        return new IntRangeStringValidator(lower, upper);
+    public static Validator<String> newPositiveIntRangeString(int lower, int upper) {
+        return new PositiveIntRangeStringValidator(lower, upper);
     }
 
     /**

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceConfig.java
Patch:
@@ -170,7 +170,7 @@ public PreferenceBrowsableFileField workspace() {
     @Bean(name = "thumbnailsSize")
     public PreferenceIntTextField thumbnailsSize() {
         PreferenceIntTextField thumbnails = new PreferenceIntTextField(IntUserPreference.THUMBNAILS_SIZE, userContext,
-                Validators.newIntRangeString(THUMB_SIZE_LOWER, THUMB_SIZE_UPPER));
+                Validators.newPositiveIntRangeString(THUMB_SIZE_LOWER, THUMB_SIZE_UPPER));
         thumbnails.setText(Integer.toString(userContext.getThumbnailsSize()));
         thumbnails.setErrorMessage(DefaultI18nContext.getInstance().i18n("Size must be between {0}px and {1}px",
                 THUMB_SIZE_LOWER.toString(), THUMB_SIZE_UPPER.toString()));

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/BookmarksLevelComboBox.java
Patch:
@@ -59,7 +59,7 @@ class BookmarksLevelComboBox extends ComboBox<String> implements
     public void setMaxBookmarkLevel(int max) {
         getItems().clear();
         if (max > 0) {
-            validationSupport.setValidator(Validators.newIntRangeString(1, max));
+            validationSupport.setValidator(Validators.newPositiveIntRangeString(1, max));
             for (int i = 1; i <= max; i++) {
                 getItems().add(Integer.toString(i));
             }

File: pdfsam-gui/src/test/java/org/pdfsam/configuration/JarSignatureFilterTest.java
Patch:
@@ -50,8 +50,7 @@ public void isNull() {
     @Test
     public void isCaseInsensitive() throws IOException {
         assertTrue(victim.test(folder.newFile("test.jar").toPath()));
-        assertTrue(victim.test(folder.newFile("test.JaR").toPath()));
-        assertTrue(victim.test(folder.newFile("test.JAR").toPath()));
+        assertTrue(victim.test(folder.newFile("test1.JaR").toPath()));
+        assertTrue(victim.test(folder.newFile("test2.JAR").toPath()));
     }
-
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsablePdfInputField.java
Patch:
@@ -26,6 +26,7 @@
 import org.pdfsam.support.io.FileType;
 import org.pdfsam.support.params.SinglePdfSourceTaskParametersBuilder;
 import org.pdfsam.support.params.TaskParametersBuildStep;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 import org.pdfsam.ui.support.FXValidationSupport.ValidationState;
 import org.sejda.conversion.PdfFileSourceAdapter;
 import org.sejda.model.parameter.base.SinglePdfSourceTaskParameters;
@@ -44,7 +45,7 @@ public class BrowsablePdfInputField extends BrowsableFileField implements
         TaskParametersBuildStep<SinglePdfSourceTaskParametersBuilder<?>> {
 
     public BrowsablePdfInputField() {
-        super(FileType.PDF);
+        super(FileType.PDF, OpenType.OPEN);
     }
 
     public void apply(SinglePdfSourceTaskParametersBuilder<?> builder, Consumer<String> onError) {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsablePdfOutputField.java
Patch:
@@ -24,6 +24,7 @@
 import org.pdfsam.support.io.FileType;
 import org.pdfsam.support.params.SingleOutputTaskParametersBuilder;
 import org.pdfsam.support.params.TaskParametersBuildStep;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 import org.pdfsam.ui.support.FXValidationSupport.ValidationState;
 import org.sejda.conversion.FileOutputAdapter;
 import org.sejda.model.parameter.base.SingleOutputTaskParameters;
@@ -38,7 +39,7 @@ public class BrowsablePdfOutputField extends BrowsableFileField implements
         TaskParametersBuildStep<SingleOutputTaskParametersBuilder<?>> {
 
     public BrowsablePdfOutputField() {
-        super(FileType.PDF);
+        super(FileType.PDF, OpenType.SAVE);
         this.enforceValidation(false, false);
     }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/single/SingleSelectionPane.java
Patch:
@@ -60,6 +60,7 @@
 import org.pdfsam.ui.commons.ShowStageRequest;
 import org.pdfsam.ui.io.BrowsableFileField;
 import org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 import org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater;
 import org.pdfsam.ui.selection.PasswordFieldPopup;
 import org.pdfsam.ui.support.FXValidationSupport.ValidationState;
@@ -76,7 +77,7 @@
 public class SingleSelectionPane extends VBox implements ModuleOwned, PdfDocumentDescriptorProvider {
 
     private String ownerModule = StringUtils.EMPTY;
-    private BrowsableFileField field = new BrowsableFileField(FileType.PDF);
+    private BrowsableFileField field = new BrowsableFileField(FileType.PDF, OpenType.OPEN);
     private Label details = new Label();
     private PdfDocumentDescriptor descriptor;
     private PasswordFieldPopup passwordPopup;

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/BrowsableFileFieldUITest.java
Patch:
@@ -33,6 +33,7 @@
 import org.loadui.testfx.categories.TestFX;
 import org.pdfsam.support.io.FileType;
 import org.pdfsam.test.ClearEventStudioRule;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 import org.pdfsam.ui.support.FXValidationSupport.ValidationState;
 import org.pdfsam.ui.support.Style;
 
@@ -47,11 +48,11 @@ public class BrowsableFileFieldUITest extends GuiTest {
 
     @Override
     protected Parent getRootNode() {
-        BrowsableFileField victimBlank = new BrowsableFileField(FileType.PDF);
+        BrowsableFileField victimBlank = new BrowsableFileField(FileType.PDF, OpenType.OPEN);
         victimBlank.enforceValidation(false, true);
         victimBlank.getStyleClass().add("victim-blank");
 
-        BrowsableFileField victimNoBlank = new BrowsableFileField(FileType.PDF);
+        BrowsableFileField victimNoBlank = new BrowsableFileField(FileType.PDF, OpenType.OPEN);
         victimNoBlank.enforceValidation(false, false);
         victimNoBlank.getStyleClass().add("victim-no-blank");
         return new HBox(victimBlank, victimNoBlank);

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceConfig.java
Patch:
@@ -39,6 +39,7 @@
 import org.pdfsam.support.validation.Validators;
 import org.pdfsam.ui.NewsPolicy;
 import org.pdfsam.ui.Theme;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 import org.springframework.beans.factory.config.ConfigurableBeanFactory;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -160,7 +161,7 @@ public PreferenceBrowsableDirectoryField workingDirectory() {
     @Bean(name = "workspace")
     public PreferenceBrowsableFileField workspace() {
         PreferenceBrowsableFileField workspace = new PreferenceBrowsableFileField(StringUserPreference.WORKSPACE_PATH,
-                FileType.XML, userContext);
+                FileType.XML, OpenType.OPEN, userContext);
         workspace.getTextField().setText(userContext.getDefaultWorkspacePath());
         workspace.setId("workspace");
         return workspace;

File: pdfsam-gui/src/main/java/org/pdfsam/ui/log/LogPane.java
Patch:
@@ -43,6 +43,7 @@
 import org.pdfsam.support.io.FileType;
 import org.pdfsam.ui.io.FileChoosers;
 import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 import org.pdfsam.ui.support.Style;
 
 /**
@@ -115,7 +116,7 @@ public void saveLog() {
         RememberingLatestFileChooserWrapper fileChooser = FileChoosers.getFileChooser(FileType.LOG, DefaultI18nContext
                 .getInstance().i18n("Select where to save the log file"));
         fileChooser.setInitialFileName("PDFsam.log");
-        File chosenFile = fileChooser.showSaveDialog(this.getScene().getWindow());
+        File chosenFile = fileChooser.showDialog(this.getScene().getWindow(), OpenType.SAVE);
         if (chosenFile != null) {
             if (chosenFile.exists()) {
                 // TODO show dialog? investigate. On Ubuntu it already asks confirmation.

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferenceBrowsableFileFieldTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.pdfsam.context.UserContext;
 import org.pdfsam.support.io.FileType;
 import org.pdfsam.ui.commons.ValidableTextField;
+import org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.OpenType;
 
 /**
  * @author Andrea Vacondio
@@ -54,7 +55,7 @@ public class PreferenceBrowsableFileFieldTest extends GuiTest {
     @Override
     protected Parent getRootNode() {
         PreferenceBrowsableFileField victim = new PreferenceBrowsableFileField(StringUserPreference.WORKING_PATH,
-                FileType.PDF, userContext);
+                FileType.PDF, OpenType.OPEN, userContext);
         victim.setId("victim");
         return victim;
     }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/log/TextAreaAppenderTest.java
Patch:
@@ -65,7 +65,7 @@ public class TextAreaAppenderTest {
     static class Config {
         @Bean
         public TextAreaAppender victim() {
-            return new TextAreaAppender();
+            return new TextAreaAppender(view(), encoder());
         }
 
         @Bean

File: pdfsam-service/src/main/java/org/pdfsam/pdf/PdfLoadController.java
Patch:
@@ -68,7 +68,6 @@ public void close() {
      * Request to load a collection of documents
      * 
      * @param event
-     * @throws InterruptedException
      */
     @EventListener
     public void request(PdfLoadRequestEvent<? extends PdfDocumentDescriptor> event) {

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -110,13 +110,13 @@ public void configOnStartup() {
         assertEquals(Theme.ROUNDISH.friendlyName(), theme.getSelectionModel().getSelectedItem().getValue());
         assertTrue(((PreferenceCheckBox) victim.lookup("#checkForUpdates")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#playSounds")).isSelected());
-        assertTrue(((PreferenceCheckBox) victim.lookup("#highQualityThumbnails")).isSelected());
+        // assertTrue(((PreferenceCheckBox) victim.lookup("#highQualityThumbnails")).isSelected());
         assertTrue(((PreferenceRadioButton) victim.lookup("#smartRadio")).isSelected());
         assertEquals("/my/path.xml", ((PreferenceBrowsableFileField) victim.lookup("#workspace")).getTextField()
                 .getText());
         assertEquals("/my/path", ((PreferenceBrowsableDirectoryField) victim.lookup("#workingDirectory"))
                 .getTextField().getText());
-        assertEquals("200", ((PreferenceIntTextField) victim.lookup("#thumbnailsSize")).getText());
+        // assertEquals("200", ((PreferenceIntTextField) victim.lookup("#thumbnailsSize")).getText());
         assertEquals("Dashboard", startupModuleCombo.getSelectionModel().getSelectedItem().getValue());
         assertEquals(NewsPolicy.ONCE_A_DAY.friendlyName(), newsDisplayPolicy.getSelectionModel().getSelectedItem()
                 .getValue());

File: pdfsam-community/src/main/java/org/pdfsam/community/CommunityPane.java
Patch:
@@ -41,14 +41,15 @@
 public class CommunityPane extends VBox {
     private static final Logger LOG = LoggerFactory.getLogger(CommunityPane.class);
 
-    private ProgressBar progress = new ProgressBar(0);
+    private ProgressBar progress;
 
     CommunityPane() {
         getStyleClass().add("-pdfsam-community-splash");
         HBox logoView = new HBox(15);
         logoView.getChildren().addAll(
                 new ImageView(this.getClass().getResource("/images/community/32x32.png").toExternalForm()),
                 new ImageView(this.getClass().getResource("/images/payoff.png").toExternalForm()));
+        progress = new ProgressBar(0);
         progress.setMaxWidth(Double.MAX_VALUE);
         Label message = new Label("Loading...");
         message.getStyleClass().add("-pdfsam-update-message");

File: pdfsam-core/src/test/java/org/pdfsam/context/DefaultUserContextTest.java
Patch:
@@ -118,7 +118,7 @@ public void getNewsPolicy() {
         victim.setStringPreference(StringUserPreference.NEWS_POLICY, "ChuckNorris");
         assertEquals("ChuckNorris", victim.getNewsPolicy());
         victim.setStringPreference(StringUserPreference.NEWS_POLICY, "");
-        assertEquals(NewsPolicy.ONCE_A_DAY.toString(), victim.getNewsPolicy());
+        assertEquals(NewsPolicy.ONCE_A_WEEK.toString(), victim.getNewsPolicy());
     }
 
     @Test

File: pdfsam-service/src/test/java/org/pdfsam/update/DefaultUpdateServiceTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.pdfsam.update;
 
 import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.after;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.timeout;
 import static org.mockito.Mockito.verify;
@@ -56,6 +57,6 @@ public void negativeCheckForUpdates() {
         Listener<UpdateAvailableEvent> listener = mock(Listener.class);
         eventStudio().add(UpdateAvailableEvent.class, listener);
         victim.checkForUpdates();
-        verify(listener, timeout(1000).never()).onEvent(any(UpdateAvailableEvent.class));
+        verify(listener, after(1000).never()).onEvent(any(UpdateAvailableEvent.class));
     }
 }

File: pdfsam-fx/src/test/java/org/pdfsam/ui/selection/multiple/SelectionTableTest.java
Patch:
@@ -158,7 +158,7 @@ public void removeByContextMenu() throws Exception {
         rightClick("temp.pdf");
         click(AwesomeIcon.MINUS_SQUARE_ALT.toString());
         verifyThat("#victim", (SelectionTable n) -> n.getItems().size() == 2);
-        verifyThat("#victim", (SelectionTable n) -> n.getSelectionModel().getSelectedIndices().isEmpty());
+        verifyThat("#victim", (SelectionTable n) -> n.getSelectionModel().getSelectedIndices().size() == 1);
     }
 
     @Test

File: pdfsam-fx/src/main/java/org/pdfsam/ui/commons/ClosePane.java
Patch:
@@ -40,7 +40,7 @@ public ClosePane() {
         Button closeButton = new Button(DefaultI18nContext.getInstance().i18n("Close"));
         closeButton.getStyleClass().addAll(Style.BUTTON.css());
         closeButton.setTextAlignment(TextAlignment.CENTER);
-        closeButton.setOnAction((e) -> this.getScene().getWindow().hide());
+        closeButton.setOnAction(e -> this.getScene().getWindow().hide());
         getChildren().add(closeButton);
     }
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/commons/HidingPane.java
Patch:
@@ -39,7 +39,7 @@ public HidingPane() {
         Button closeButton = new Button(DefaultI18nContext.getInstance().i18n("Close"));
         closeButton.getStyleClass().addAll(Style.BUTTON.css());
         closeButton.setTextAlignment(TextAlignment.CENTER);
-        closeButton.setOnAction((e) -> this.setVisible(false));
+        closeButton.setOnAction(e -> this.setVisible(false));
         HBox bottom = new HBox(closeButton);
         bottom.setAlignment(Pos.CENTER_RIGHT);
         bottom.getStyleClass().addAll(Style.CONTAINER.css());

File: pdfsam-fx/src/main/java/org/pdfsam/ui/commons/ValidableTextField.java
Patch:
@@ -68,7 +68,7 @@ public ValidableTextField(String text) {
 
         textProperty().addListener((o, oldVal, newVal) -> validationSupport.makeNotValidated());
         validationSupport.validationStateProperty().addListener(
-                (o) -> {
+                o -> {
                     if (validationSupport.validationStateProperty().get() == ValidationState.INVALID
                             && errorTooltipManager != null) {
                         errorTooltipManager.showTooltip();
@@ -88,7 +88,7 @@ public final ReadOnlyObjectProperty<ValidationState> validProperty() {
      * the field is marked with the class "invalid" when the validation status is invalid to give the user visual feedback.
      */
     public void setEnableInvalidStyle(final boolean active) {
-        validationSupport.validationStateProperty().addListener((o) -> {
+        validationSupport.validationStateProperty().addListener(o -> {
             if (active) {
                 if (validationSupport.validationStateProperty().get() == ValidationState.INVALID) {
                     getStyleClass().addAll(Style.INVALID.css());
@@ -113,7 +113,7 @@ public void setErrorMessage(String message) {
     }
 
     public void setOnEnterValidation(final boolean active) {
-        setOnKeyReleased((t) -> {
+        setOnKeyReleased(t -> {
             if (active && ENTER_COMBO.match(t)) {
                 validate();
             }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableDirectoryField.java
Patch:
@@ -110,7 +110,7 @@ private Consumer<DragEvent> onDragOverConsumer() {
     private Consumer<DragEvent> onDragDropped() {
         return (DragEvent e) -> {
             e.getDragboard().getFiles().stream().filter(f -> f.isDirectory()).findFirst()
-                    .ifPresent((file) -> setTextFromFile(file));
+                    .ifPresent(file -> setTextFromFile(file));
             e.setDropCompleted(true);
         };
     }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableFileField.java
Patch:
@@ -138,7 +138,7 @@ private Consumer<DragEvent> onDragOverConsumer() {
     private Consumer<DragEvent> onDragDropped() {
         return (DragEvent e) -> {
             e.getDragboard().getFiles().stream().filter(f -> fileType.matches(f.getName())).findFirst()
-                    .ifPresent((file) -> setTextFromFile(file));
+                    .ifPresent(file -> setTextFromFile(file));
             e.setDropCompleted(true);
         };
     }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/LoadingStatusIndicator.java
Patch:
@@ -73,7 +73,7 @@ public LoadingStatusIndicator(PdfDocumentDescriptorProvider descriptorProvider,
         this.ownerModule = defaultString(ownerModule);
         this.popup = new PasswordFieldPopup(getOwnerModule());
         this.descriptorProvider = descriptorProvider;
-        this.addEventFilter(MouseEvent.MOUSE_CLICKED, (e) -> {
+        this.addEventFilter(MouseEvent.MOUSE_CLICKED, e -> {
             if (loadingStatus.get() == ENCRYPTED) {
                 showPasswordRequest();
             } else if (loadingStatus.get() == WITH_ERRORS) {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/PasswordFieldPopup.java
Patch:
@@ -93,8 +93,8 @@ public PasswordFieldPopupContent() {
             doneButton.prefHeightProperty().bind(passwordField.heightProperty());
             doneButton.setMaxHeight(USE_PREF_SIZE);
             doneButton.setMinHeight(USE_PREF_SIZE);
-            doneButton.setOnAction((e) -> requestLoad());
-            passwordField.setOnAction((e) -> requestLoad());
+            doneButton.setOnAction(e -> requestLoad());
+            passwordField.setOnAction(e -> requestLoad());
             getChildren().addAll(passwordField, doneButton);
         }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/multiple/FileColumn.java
Patch:
@@ -75,7 +75,7 @@ public void updateItem(final File item, boolean empty) {
         }
 
         public Comparator<File> comparator() {
-            return Comparator.comparing((f) -> f.getName().toLowerCase());
+            return Comparator.comparing(f -> f.getName().toLowerCase());
         }
     }
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/multiple/move/MoveType.java
Patch:
@@ -53,7 +53,7 @@ public <T extends PdfDocumentDescriptor> SelectionAndFocus move(Integer[] select
                 MultipleSelectionAndFocus newSelection = new MultipleSelectionAndFocus(focused);
                 Arrays.parallelSort(selected);
                 if (isNotFirst(selected)) {
-                    Arrays.stream(selected).forEach((i) -> {
+                    Arrays.stream(selected).forEach(i -> {
                         Collections.swap(items, i, i - 1);
                         newSelection.moveUp(i);
                     });
@@ -71,7 +71,7 @@ public <T extends PdfDocumentDescriptor> SelectionAndFocus move(Integer[] select
                 MultipleSelectionAndFocus newSelection = new MultipleSelectionAndFocus(focused);
                 Arrays.parallelSort(selected, Collections.reverseOrder(Integer::compare));
                 if (isNotLast(selected, items)) {
-                    Arrays.stream(selected).forEach((i) -> {
+                    Arrays.stream(selected).forEach(i -> {
                         Collections.swap(items, i, i + 1);
                         newSelection.moveDown(i);
                     });

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/single/SingleSelectionPane.java
Patch:
@@ -74,7 +74,7 @@ public class SingleSelectionPane extends VBox implements ModuleOwned, PdfDocumen
     private PdfDocumentDescriptor descriptor;
     private LoadingStatusIndicator encryptionIndicator;
 
-    private Consumer<PdfDocumentDescriptor> onLoaded = (d) -> {
+    private Consumer<PdfDocumentDescriptor> onLoaded = d -> {
         details.setText(DefaultI18nContext.getInstance().i18n("Pages: {0}, PDF Version: {1}",
                 Integer.toString(d.pagesPropery().get()), d.getVersionString()));
         eventStudio().broadcast(requestFallbackDestination(d.getFile(), getOwnerModule()), getOwnerModule());

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/AppContextMenu.java
Patch:
@@ -39,7 +39,7 @@ class AppContextMenu extends ContextMenu {
     @Inject
     AppContextMenu(WorkspaceMenu workspace, ModulesMenu modulesMenu) {
         MenuItem exit = new MenuItem(DefaultI18nContext.getInstance().i18n("E_xit"));
-        exit.setOnAction((e) -> Platform.exit());
+        exit.setOnAction(e -> Platform.exit());
         getItems().addAll(workspace, modulesMenu, new SeparatorMenuItem(), exit);
     }
 }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/DashboardItemPane.java
Patch:
@@ -68,7 +68,7 @@ private HBox buildFooter() {
         Button closeButton = new Button(DefaultI18nContext.getInstance().i18n("Close"));
         closeButton.getStyleClass().addAll(Style.BUTTON.css());
         closeButton.setTextAlignment(TextAlignment.CENTER);
-        closeButton.setOnAction((e) -> eventStudio().broadcast(activeteCurrentModule()));
+        closeButton.setOnAction(e -> eventStudio().broadcast(activeteCurrentModule()));
         HBox footer = new HBox(closeButton);
         footer.getStyleClass().addAll(Style.CLOSE_FOOTER.css());
         return footer;

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/QuickbarDashboardButtonsPane.java
Patch:
@@ -54,7 +54,7 @@ class QuickbarDashboardButtonsPane extends BaseQuickbarButtonsPane {
 
     @EventListener
     public void setCurrentDashboardItem(SetActiveDashboardItemRequest r) {
-        buttons.forEach((b) -> b.selectIf(r.getActiveItemId()));
+        buttons.forEach(b -> b.selectIf(r.getActiveItemId()));
     }
 
 }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/about/AboutDashboardPane.java
Patch:
@@ -73,7 +73,7 @@ public AboutDashboardPane(@Named("appName") String name, @Named("appVersion") St
         AwesomeDude.setIcon(copyButton, AwesomeIcon.COPY);
         copyButton.getStyleClass().addAll(Style.BUTTON.css());
         copyButton.setId("copyEnvDetails");
-        copyButton.setOnAction((a) -> {
+        copyButton.setOnAction(a -> {
             ClipboardContent content = new ClipboardContent();
             writeContent(Arrays.asList(name, version, runtime.getText(), fxRuntime.getText(), memory.getText())).to(
                     content);

File: pdfsam-gui/src/main/java/org/pdfsam/ui/notification/NotificationsContainer.java
Patch:
@@ -44,7 +44,7 @@ public NotificationsContainer() {
 
     void addNotification(String title, Node message) {
         Notification toAdd = doAddNotification(title, message);
-        fadeIn(toAdd, (e) -> toAdd.fadeAway(Duration.millis(2000)));
+        fadeIn(toAdd, e -> toAdd.fadeAway(Duration.millis(2000)));
     }
 
     void addStickyNotification(String title, Node message) {

File: pdfsam-gui/src/main/java/org/pdfsam/ui/workarea/QuickbarModuleButtonsPane.java
Patch:
@@ -53,7 +53,7 @@ class QuickbarModuleButtonsPane extends BaseQuickbarButtonsPane {
 
     @EventListener
     public void onSetCurrentModuleRequest(SetActiveModuleRequest r) {
-        r.getActiveModuleId().ifPresent(id -> buttons.forEach((b) -> b.setSelected(b.moduleId().equals(id))));
+        r.getActiveModuleId().ifPresent(id -> buttons.forEach(b -> b.setSelected(b.moduleId().equals(id))));
     }
 
 }

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/BookmarksLevelComboBox.java
Patch:
@@ -47,7 +47,7 @@ class BookmarksLevelComboBox extends ComboBox<String> implements
         getSelectionModel().selectFirst();
         valueProperty().addListener((o, oldVal, newVal) -> validate());
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Set the bookmarks level to split at")));
-        validationSupport.validationStateProperty().addListener((o) -> {
+        validationSupport.validationStateProperty().addListener(o -> {
             if (validationSupport.validationStateProperty().get() == ValidationState.INVALID) {
                 getEditor().getStyleClass().addAll(Style.INVALID.css());
             } else {

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SizeComboBox.java
Patch:
@@ -55,7 +55,7 @@ class SizeComboBox extends ComboBox<String> implements TaskParametersBuildStep<S
         valueProperty().addListener((o, oldVal, newVal) -> validate());
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n(
                 "Set the size as number of bytes or specify KB or MB")));
-        validationSupport.validationStateProperty().addListener((o) -> {
+        validationSupport.validationStateProperty().addListener(o -> {
             if (validationSupport.validationStateProperty().get() == ValidationState.INVALID) {
                 getEditor().getStyleClass().addAll(Style.INVALID.css());
             } else {

File: pdfsam-core/src/main/java/org/pdfsam/context/DefaultUserContext.java
Patch:
@@ -65,7 +65,7 @@ public int getThumbnailsSize() {
 
     @Override
     public String getTheme() {
-        return prefs.get(StringUserPreference.THEME.toString(), Theme.GREEN.toString());
+        return prefs.get(StringUserPreference.THEME.toString(), Theme.ROUNDISH.toString());
     }
 
     @Override

File: pdfsam-core/src/main/java/org/pdfsam/context/BooleanUserPreference.java
Patch:
@@ -25,7 +25,6 @@
  * 
  */
 public enum BooleanUserPreference {
-    ASK_OVERWRITE_CONFIRMATION,
     CHECK_UPDATES,
     PLAY_SOUNDS,
     HIGH_QUALITY_THUMB,

File: pdfsam-core/src/test/java/org/pdfsam/module/TaskExecutionRequestEventTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.sejda.model.parameter.base.TaskParameters;
+import org.sejda.model.parameter.base.AbstractParameters;
 
 /**
  * @author Andrea Vacondio
@@ -31,7 +31,7 @@
 @RunWith(value = org.mockito.runners.MockitoJUnitRunner.class)
 public class TaskExecutionRequestEventTest {
     @Mock
-    private TaskParameters params;
+    private AbstractParameters params;
 
     @Test(expected = IllegalArgumentException.class)
     public void testNullParams() {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/DestinationPane.java
Patch:
@@ -41,7 +41,7 @@ public DestinationPane(BrowsableField destination) {
         super(5);
         requireNotNull(destination, "Destination field cannot be null");
         this.destination = destination;
-        overwrite.setSelected(true);
+        overwrite.setSelected(false);
         overwrite.setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n(
                 "Tick the box if you want to overwrite the outpuf files if they already exist.")));
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/BaseTaskExecutionModule.java
Patch:
@@ -37,7 +37,7 @@
 import org.pdfsam.ui.notification.NotificationType;
 import org.pdfsam.ui.support.Style;
 import org.sejda.eventstudio.annotation.EventStation;
-import org.sejda.model.parameter.base.TaskParameters;
+import org.sejda.model.parameter.base.AbstractParameters;
 
 /**
  * Base class for a {@link Module}. Modules are automatically scanned for event listener annotations and have their {@link EventStation} set to their {@link #id()}.
@@ -60,7 +60,7 @@ final void init() {
         footer.runButton().setOnAction(
                 event -> {
                     ErrorTracker errorTracker = new ErrorTracker();
-                    Builder<? extends TaskParameters> builder = getBuilder(errorTracker.andThen(s -> eventStudio()
+                    Builder<? extends AbstractParameters> builder = getBuilder(errorTracker.andThen(s -> eventStudio()
                             .broadcast(
                                     new AddNotificationRequestEvent(NotificationType.ERROR, s, DefaultI18nContext
                                             .getInstance().i18n("Invalid parameters")))));
@@ -86,7 +86,7 @@ final void init() {
      *            function to be called in case of error while building the task parameters
      * @return a {@link Builder} for the parameters to be used to perform a pdf manipulation
      */
-    protected abstract Builder<? extends TaskParameters> getBuilder(Consumer<String> onError);
+    protected abstract Builder<? extends AbstractParameters> getBuilder(Consumer<String> onError);
 
     @Inject
     public void setFooter(ModuleFooterPane footer) {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/ProgressPane.java
Patch:
@@ -82,7 +82,7 @@ public void onTaskExecutionStarted(TaskExecutionStartedEvent event) {
         statusLabel.setText(DefaultI18nContext.getInstance().i18n("Running"));
     }
 
-    @EventListener(priority = Integer.MIN_VALUE)
+    @EventListener
     public void onTaskExecutionRequest(TaskExecutionRequestEvent event) {
         open.setVisible(false);
         failed.setVisible(false);

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/RunButton.java
Patch:
@@ -42,7 +42,7 @@ public RunButton() {
         eventStudio().addAnnotatedListeners(this);
     }
 
-    @EventListener(priority = Integer.MIN_VALUE)
+    @EventListener
     public void disableRunButtonIfTaskRequested(TaskExecutionRequestEvent event) {
         setDisable(true);
     }

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/PdfDestinationPaneUITest.java
Patch:
@@ -74,7 +74,7 @@ public void applyDefault() {
         PdfDestinationPane victim = find(".victim");
         victim.apply(builder, onError);
         verify(builder).compress(false);
-        verify(builder).overwrite(true);
+        verify(builder).overwrite(false);
     }
 
     @Test
@@ -92,6 +92,6 @@ public void applyClickAll() {
         nodes.forEach(n -> click(n));
         victim.apply(builder, onError);
         verify(builder).compress(true);
-        verify(builder).overwrite(false);
+        verify(builder).overwrite(true);
     }
 }

File: pdfsam-fx/src/test/java/org/pdfsam/ui/module/ProgressPaneTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.sejda.model.notification.event.TaskExecutionFailedEvent;
 import org.sejda.model.output.FileTaskOutput;
 import org.sejda.model.output.TaskOutput;
-import org.sejda.model.parameter.base.TaskParameters;
+import org.sejda.model.parameter.base.AbstractParameters;
 import org.sejda.model.task.NotifiableTaskMetadata;
 
 /**
@@ -119,7 +119,7 @@ public void onProgressIndeterminate() {
     @Test
     public void onTaskExecutionRequest() throws TaskOutputVisitException {
         TaskExecutionRequestEvent event = mock(TaskExecutionRequestEvent.class);
-        TaskParameters params = mock(TaskParameters.class);
+        AbstractParameters params = mock(AbstractParameters.class);
         TaskOutput output = mock(FileTaskOutput.class);
         when(event.getParameters()).thenReturn(params);
         when(params.getOutput()).thenReturn(output);

File: pdfsam-fx/src/test/java/org/pdfsam/ui/module/RunButtonTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.pdfsam.test.InitializeAndApplyJavaFxThreadRule;
 import org.sejda.model.notification.event.TaskExecutionCompletedEvent;
 import org.sejda.model.notification.event.TaskExecutionFailedEvent;
-import org.sejda.model.parameter.base.TaskParameters;
+import org.sejda.model.parameter.base.AbstractParameters;
 import org.sejda.model.task.NotifiableTaskMetadata;
 
 /**
@@ -54,7 +54,7 @@ public void setUp() {
     @Test
     public void disableOnRequest() {
         victim.setDisable(false);
-        TaskParameters parameters = mock(TaskParameters.class);
+        AbstractParameters parameters = mock(AbstractParameters.class);
         eventStudio().broadcast(new TaskExecutionRequestEvent("id", parameters));
         assertTrue(victim.isDisabled());
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceBehaviorPane.java
Patch:
@@ -36,9 +36,8 @@ class PreferenceBehaviorPane extends VBox {
 
     @Inject
     public PreferenceBehaviorPane(@Named("checkForUpdates") PreferenceCheckBox checkForUpdates,
-            @Named("playSounds") PreferenceCheckBox playSounds,
-            @Named("askConfirmation") PreferenceCheckBox askConfirmation) {
-        super(checkForUpdates, playSounds, askConfirmation);
+            @Named("playSounds") PreferenceCheckBox playSounds) {
+        super(checkForUpdates, playSounds);
         getStyleClass().addAll(Style.CONTAINER.css());
     }
 

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferenceCheckBoxTest.java
Patch:
@@ -41,13 +41,13 @@ public class PreferenceCheckBoxTest extends GuiTest {
 
     @Override
     protected Parent getRootNode() {
-        return new PreferenceCheckBox(BooleanUserPreference.ASK_OVERWRITE_CONFIRMATION, "select", false, userContext);
+        return new PreferenceCheckBox(BooleanUserPreference.CHECK_UPDATES, "select", false, userContext);
     }
 
     @Test
     public void preferenceSetOnClick() {
         click("select");
         verify(userContext)
-                .setBooleanPreference(eq(BooleanUserPreference.ASK_OVERWRITE_CONFIRMATION), eq(Boolean.TRUE));
+.setBooleanPreference(eq(BooleanUserPreference.CHECK_UPDATES), eq(Boolean.TRUE));
     }
 }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -65,7 +65,6 @@ static class Config {
         public UserContext userContext() {
             when(userContext.getTheme()).thenReturn("sienna.css");
             when(userContext.isCheckForUpdates()).thenReturn(Boolean.TRUE);
-            when(userContext.isAskOverwriteConfirmation()).thenReturn(Boolean.TRUE);
             when(userContext.isPlaySounds()).thenReturn(Boolean.TRUE);
             when(userContext.isHighQualityThumbnails()).thenReturn(Boolean.TRUE);
             when(userContext.isUseSmartOutput()).thenReturn(Boolean.TRUE);
@@ -85,7 +84,6 @@ public void configOnStartup() {
         assertEquals("sienna.css", theme.getSelectionModel().getSelectedItem().getKey());
         assertTrue(((PreferenceCheckBox) victim.lookup("#checkForUpdates")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#playSounds")).isSelected());
-        assertTrue(((PreferenceCheckBox) victim.lookup("#askConfirmation")).isSelected());
         assertTrue(((PreferenceCheckBox) victim.lookup("#highQualityThumbnails")).isSelected());
         assertTrue(((PreferenceRadioButton) victim.lookup("#smartRadio")).isSelected());
         assertEquals("/my/path.xml", ((PreferenceBrowsableFileField) victim.lookup("#workspace")).getTextField()

File: pdfsam-service/src/main/java/org/pdfsam/task/TaskExecutionController.java
Patch:
@@ -73,7 +73,7 @@ public TaskExecutionController(ExecutionService executionService, UsageService u
      * 
      * @param event
      */
-    @EventListener
+    @EventListener(priority = Integer.MAX_VALUE)
     public void request(TaskExecutionRequestEvent event) {
         LOG.trace("Task execution request received");
         usageService.incrementUsageFor(event.getModuleId());

File: pdfsam-service/src/test/java/org/pdfsam/task/TaskExecutionControllerTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.pdfsam.module.UsageService;
 import org.pdfsam.test.ClearEventStudioRule;
 import org.sejda.core.notification.context.GlobalNotificationContext;
-import org.sejda.model.parameter.base.TaskParameters;
+import org.sejda.model.parameter.base.AbstractParameters;
 
 /**
  * @author Andrea Vacondio
@@ -58,7 +58,7 @@ public static void tearDown() {
     @Test
     public void request() {
         String moduleId = "module";
-        TaskParameters params = mock(TaskParameters.class);
+        AbstractParameters params = mock(AbstractParameters.class);
         victim.request(new TaskExecutionRequestEvent(moduleId, params));
         verify(usageService).incrementUsageFor(moduleId);
         verify(executionService, timeout(1000).times(1)).submit(moduleId, params);

File: pdfsam-gui/src/main/java/org/pdfsam/OpenFileController.java
Patch:
@@ -55,7 +55,7 @@ private void doOpen(OpenFileRequest event) {
             try {
                 Desktop.getDesktop().open(event.getFile());
             } catch (IOException e) {
-                LOG.error("Unable to open '{}'", event.getFile().getAbsoluteFile());
+                LOG.error(String.format("Unable to open '%s'", event.getFile().getAbsoluteFile()), e);
             }
         }
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/ErrorsNotification.java
Patch:
@@ -48,6 +48,7 @@ public ErrorsNotification() {
         eventStudio().addAnnotatedListeners(this);
         fade = new FadeTransition(Duration.millis(200), this);
         fade.setAutoReverse(true);
+        setMouseTransparent(true);
     }
 
     @EventListener

File: pdfsam-gui/src/test/java/org/pdfsam/ui/dashboard/preference/PreferencePaneTest.java
Patch:
@@ -60,7 +60,7 @@ public class PreferencePaneTest {
     @Configuration
     @Lazy
     @ComponentScan(basePackages = { "org.pdfsam.ui.dashboard.preference" })
-    static class Config extends PreferenceConfig {
+    static class Config {
         @Bean
         public UserContext userContext() {
             when(userContext.getTheme()).thenReturn("sienna.css");

File: pdfsam-service/src/main/java/org/pdfsam/pdf/BookmarksLevelLoader.java
Patch:
@@ -18,6 +18,8 @@
  */
 package org.pdfsam.pdf;
 
+import javax.inject.Named;
+
 import org.pdfsam.module.RequiredPdfData;
 import org.sejda.impl.itext5.component.ITextOutlineHandler;
 
@@ -29,6 +31,7 @@
  * @author Andrea Vacondio
  *
  */
+@Named
 class BookmarksLevelLoader implements PdfLoader {
 
     public void accept(PdfReader reader, PdfDocumentDescriptor descriptor) {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableField.java
Patch:
@@ -60,7 +60,7 @@ public BrowsableField() {
         browseButton.setAlignment(Pos.CENTER);
         HBox.setHgrow(validableContainer, Priority.ALWAYS);
         textField.validProperty().addListener((o, oldValue, newValue) -> {
-            if ((newValue == ValidationState.INVALID)) {
+            if (newValue == ValidationState.INVALID) {
                 validableContainer.getStyleClass().addAll(Style.INVALID.css());
             } else {
                 validableContainer.getStyleClass().removeAll(Style.INVALID.css());

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableDirectoryField.java
Patch:
@@ -104,9 +104,7 @@ private void dragConsume(DragEvent e, Consumer<DragEvent> c) {
     }
 
     private Consumer<DragEvent> onDragOverConsumer() {
-        return (DragEvent e) -> {
-            e.acceptTransferModes(TransferMode.COPY_OR_MOVE);
-        };
+        return (DragEvent e) -> e.acceptTransferModes(TransferMode.COPY_OR_MOVE);
     }
 
     private Consumer<DragEvent> onDragDropped() {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableField.java
Patch:
@@ -66,9 +66,8 @@ public BrowsableField() {
                 validableContainer.getStyleClass().removeAll(Style.INVALID.css());
             }
         });
-        textField.focusedProperty().addListener((o, oldVal, newVal) -> {
-            validableContainer.pseudoClassStateChanged(SELECTED_PSEUDOCLASS_STATE, newVal);
-        });
+        textField.focusedProperty().addListener(
+                (o, oldVal, newVal) -> validableContainer.pseudoClassStateChanged(SELECTED_PSEUDOCLASS_STATE, newVal));
         getChildren().addAll(validableContainer, browseButton);
     }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableFileField.java
Patch:
@@ -132,9 +132,7 @@ private void dragConsume(DragEvent e, Consumer<DragEvent> c) {
     }
 
     private Consumer<DragEvent> onDragOverConsumer() {
-        return (DragEvent e) -> {
-            e.acceptTransferModes(TransferMode.COPY_OR_MOVE);
-        };
+        return (DragEvent e) -> e.acceptTransferModes(TransferMode.COPY_OR_MOVE);
     }
 
     private Consumer<DragEvent> onDragDropped() {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/multiple/StringColumn.java
Patch:
@@ -61,9 +61,8 @@ public Comparator<String> comparator() {
         public TableColumn<SelectionTableRowData, String> getTableColumn() {
             TableColumn<SelectionTableRowData, String> tableColumn = super.getTableColumn();
             tableColumn.setEditable(true);
-            tableColumn.setOnEditCommit(t -> {
-                t.getTableView().getItems().get(t.getTablePosition().getRow()).setPageSelection(t.getNewValue());
-            });
+            tableColumn.setOnEditCommit(t -> t.getTableView().getItems().get(t.getTablePosition().getRow())
+                    .setPageSelection(t.getNewValue()));
             return tableColumn;
         }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/Style.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.pdfsam.ui.support;
 
+
 /**
  * Defines css style classes
  * 

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/PdfsamConfig.java
Patch:
@@ -107,9 +107,8 @@ private MediaPlayer mediaPlayer(String name) throws URISyntaxException {
         MediaPlayer player = new MediaPlayer(new Media(this.getClass().getResource(name).toURI().toString()));
         player.setAutoPlay(false);
         player.setVolume(1);
-        player.setOnError(() -> {
-            LOG.error(DefaultI18nContext.getInstance().i18n("Error playing sounds"), player.getError());
-        });
+        player.setOnError(() -> LOG.error(DefaultI18nContext.getInstance().i18n("Error playing sounds"),
+                player.getError()));
         return player;
     }
 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/preference/PreferenceAppearencePane.java
Patch:
@@ -54,9 +54,8 @@ public PreferenceAppearencePane(@Named("localeCombo") PreferenceComboBox<LocaleK
         }
         localeCombo.setTooltip(new Tooltip(i18n.i18n("Set your preferred language (restart needed)")));
         localeCombo.setValue(new LocaleKeyValueItem(Locale.getDefault()));
-        localeCombo.valueProperty().addListener((observable, oldValue, newValue) -> {
-            eventStudio().broadcast(new SetLocaleEvent(newValue.getKey()));
-        });
+        localeCombo.valueProperty().addListener(
+                (observable, oldValue, newValue) -> eventStudio().broadcast(new SetLocaleEvent(newValue.getKey())));
         getChildren().addAll(new Label(i18n.i18n("Language:")), localeCombo);
 
         themeCombo.setTooltip(new Tooltip(i18n.i18n("Set your preferred theme (restart needed)")));

File: pdfsam-gui/src/main/java/org/pdfsam/ui/info/KeywordsTab.java
Patch:
@@ -79,9 +79,7 @@ public void changed(ObservableValue<? extends PdfDescriptorLoadingStatus> observ
             PdfDescriptorLoadingStatus oldValue, PdfDescriptorLoadingStatus newValue) {
         if (newValue == PdfDescriptorLoadingStatus.LOADED) {
             LOG.trace("Descriptor loaded, updating keywords tab");
-            Platform.runLater(() -> {
-                keywords.setText(current.getInformation(PdfMetadataKey.KEYWORDS.getKey()));
-            });
+            Platform.runLater(() -> keywords.setText(current.getInformation(PdfMetadataKey.KEYWORDS.getKey())));
         }
 
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/info/SummaryTab.java
Patch:
@@ -124,9 +124,7 @@ public void changed(ObservableValue<? extends PdfDescriptorLoadingStatus> observ
             PdfDescriptorLoadingStatus oldValue, PdfDescriptorLoadingStatus newValue) {
         if (newValue == PdfDescriptorLoadingStatus.LOADED) {
             LOG.trace("Descriptor loaded, updating summary tab");
-            Platform.runLater(() -> {
-                setPdfProperties();
-            });
+            Platform.runLater(() -> setPdfProperties());
         }
     }
 }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/log/LogPane.java
Patch:
@@ -55,6 +55,7 @@
 public class LogPane extends BorderPane {
 
     private LogListView logView;
+
     @Inject
     public LogPane(LogListView view) {
         this.logView = view;
@@ -75,7 +76,7 @@ public LogPane(LogListView view) {
 
             @Override
             protected boolean computeValue() {
-                return logView.getSelectionModel().getSelectedItems().size() <= 0;
+                return logView.getSelectionModel().getSelectedItems().isEmpty();
             }
         });
 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/log/TextAreaAppender.java
Patch:
@@ -61,8 +61,7 @@ public void init() {
         encoder.setContext(loggerContext);
         encoder.start();
         start();
-        Logger logbackLogger = loggerContext.getLogger(Logger.ROOT_LOGGER_NAME);
-        logbackLogger.addAppender(this);
+        loggerContext.getLogger(Logger.ROOT_LOGGER_NAME).addAppender(this);
     }
 
     @Override

File: pdfsam-gui/src/main/java/org/pdfsam/ui/notification/Notification.java
Patch:
@@ -70,9 +70,7 @@ class Notification extends BorderPane {
             fade.pause();
             setOpacity(1);
         });
-        setOnMouseExited(e -> {
-            fade.play();
-        });
+        setOnMouseExited(e -> fade.play());
         fade.setFromValue(1);
         fade.setToValue(0);
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/workarea/QuickbarModuleButtonsProvider.java
Patch:
@@ -45,9 +45,7 @@ class QuickbarModuleButtonsProvider {
     QuickbarModuleButtonsProvider(UsageService service, List<Module> modules) {
         this.service = service;
         this.modules = new ArrayList<>(modules);
-        this.modules.sort((a, b) -> {
-            return Integer.compare(a.descriptor().getPriority(), b.descriptor().getPriority());
-        });
+        this.modules.sort((a, b) -> Integer.compare(a.descriptor().getPriority(), b.descriptor().getPriority()));
     }
 
     public Set<ModuleButton> buttons() {

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/BookmarksLevelComboBox.java
Patch:
@@ -45,9 +45,7 @@ class BookmarksLevelComboBox extends ComboBox<String> implements
         validationSupport.setValidator(Validators.newIntegerString());
         setEditable(true);
         getSelectionModel().selectFirst();
-        valueProperty().addListener((o, oldVal, newVal) -> {
-            validate();
-        });
+        valueProperty().addListener((o, oldVal, newVal) -> validate());
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Set the bookmarks level to split at")));
         validationSupport.validationStateProperty().addListener((o) -> {
             if (validationSupport.validationStateProperty().get() == ValidationState.INVALID) {

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SizeComboBox.java
Patch:
@@ -52,9 +52,7 @@ class SizeComboBox extends ComboBox<String> implements TaskParametersBuildStep<S
         validationSupport.setValidator(Validators.newRegexMatchingString(REGEXP));
         setEditable(true);
         getSelectionModel().selectFirst();
-        valueProperty().addListener((o, oldVal, newVal) -> {
-            validate();
-        });
+        valueProperty().addListener((o, oldVal, newVal) -> validate());
         setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n(
                 "Set the size as number of bytes or specify KB or MB")));
         validationSupport.validationStateProperty().addListener((o) -> {

File: pdfsam-service/src/main/java/org/pdfsam/pdf/DefaultPdfLoader.java
Patch:
@@ -19,7 +19,7 @@
 package org.pdfsam.pdf;
 
 import java.text.DateFormat;
-import java.util.HashMap;
+import java.util.Map;
 import java.util.Optional;
 
 import javax.inject.Named;
@@ -45,7 +45,7 @@ class DefaultPdfLoader implements PdfLoader {
     public void accept(PdfReader reader, PdfDocumentDescriptor descriptor) {
         descriptor.setPages(reader.getNumberOfPages());
         descriptor.setVersion(new PdfVersionAdapter(Character.toString(reader.getPdfVersion())).getEnumValue());
-        HashMap<String, String> info = reader.getInfo();
+        Map<String, String> info = reader.getInfo();
         descriptor.setInformationDictionary(info);
         Optional.ofNullable(PdfDate.decode(info.get("CreationDate"))).map(FORMATTER::format)
                 .ifPresent(c -> descriptor.putInformation("FormattedCreationDate", c));

File: pdfsam-simple-split/src/main/java/org/pdfsam/split/SplitModule.java
Patch:
@@ -138,9 +138,9 @@ public BrowsableOutputDirectoryField destinationDirectoryField() {
         @Bean(name = MODULE_ID + "pane")
         public PdfDestinationPane destinationPane(
                 @Named(MODULE_ID + "field") BrowsableOutputDirectoryField outputField, UserContext userContext) {
-            PdfDestinationPane destinationPane = new PdfDestinationPane(outputField, MODULE_ID, userContext);
-            destinationPane.enableSameAsSourceItem();
-            return destinationPane;
+            PdfDestinationPane panel = new PdfDestinationPane(outputField, MODULE_ID, userContext);
+            panel.enableSameAsSourceItem();
+            return panel;
         }
     }
 }

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/SplitByBookmarksModule.java
Patch:
@@ -146,9 +146,9 @@ public BrowsableOutputDirectoryField destinationDirectoryField() {
         @Bean(name = MODULE_ID + "pane")
         public PdfDestinationPane destinationPane(
                 @Named(MODULE_ID + "field") BrowsableOutputDirectoryField outputField, UserContext userContext) {
-            PdfDestinationPane destinationPane = new PdfDestinationPane(outputField, MODULE_ID, userContext);
-            destinationPane.enableSameAsSourceItem();
-            return destinationPane;
+            PdfDestinationPane panel = new PdfDestinationPane(outputField, MODULE_ID, userContext);
+            panel.enableSameAsSourceItem();
+            return panel;
         }
     }
 }

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SplitBySizeModule.java
Patch:
@@ -136,9 +136,9 @@ public BrowsableOutputDirectoryField destinationDirectoryField() {
         @Bean(name = MODULE_ID + "pane")
         public PdfDestinationPane destinationPane(
                 @Named(MODULE_ID + "field") BrowsableOutputDirectoryField outputField, UserContext userContext) {
-            PdfDestinationPane destinationPane = new PdfDestinationPane(outputField, MODULE_ID, userContext);
-            destinationPane.enableSameAsSourceItem();
-            return destinationPane;
+            PdfDestinationPane panel = new PdfDestinationPane(outputField, MODULE_ID, userContext);
+            panel.enableSameAsSourceItem();
+            return panel;
         }
     }
 }

File: pdfsam-core/src/main/java/org/pdfsam/pdf/PdfDocumentDescriptor.java
Patch:
@@ -75,7 +75,7 @@ public String getInformation(String key) {
         return StringUtils.defaultString(metadata.get(key));
     }
 
-    public void setInformationDictionary(HashMap<String, String> info) {
+    public void setInformationDictionary(Map<String, String> info) {
         metadata.clear();
         metadata.putAll(info);
     }

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/BannerPaneTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 package org.pdfsam.ui.banner;
 
-import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.mock;
 import static org.sejda.eventstudio.StaticStudio.eventStudio;
 
 import java.io.IOException;
@@ -114,7 +114,7 @@ public MenuButton menuButton() {
 
         @Bean
         public AppContextMenu menu() {
-            return spy(new AppContextMenu());
+            return mock(AppContextMenu.class);
         }
 
         @Bean(name = "defaultDashboardItemId")

File: pdfsam-gui/src/test/java/org/pdfsam/ui/banner/MenuConfig.java
Patch:
@@ -42,7 +42,7 @@ public MenuButton menuButton() {
 
     @Bean
     public AppContextMenu menu() {
-        return spy(new AppContextMenu());
+        return spy(new AppContextMenu(workspaceMenu(), modulesMenu()));
     }
 
     @Bean

File: pdfsam-gui/src/test/java/org/pdfsam/ui/log/LogPaneTest.java
Patch:
@@ -60,7 +60,7 @@ static class Config {
         @Bean
         @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
         public LogPane pane() {
-            return new LogPane();
+            return new LogPane(view());
         }
 
         @Bean

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/SplitOptionsPane.java
Patch:
@@ -46,6 +46,8 @@ class SplitOptionsPane extends VBox implements TaskParametersBuildStep<SplitByGo
     SplitOptionsPane() {
         super(Style.DEFAULT_SPACING);
         getStyleClass().addAll(Style.CONTAINER.css());
+        levelCombo.setId("bookmarksLevel");
+        regexpField.setId("bookmarksRegexp");
         regexpField.setPromptText(DefaultI18nContext.getInstance().i18n("Regexp the bookmark has to match"));
         regexpField.setPrefWidth(300);
         getChildren().addAll(

File: pdfsam-gui/src/main/java/org/pdfsam/ui/workarea/WorkArea.java
Patch:
@@ -37,7 +37,6 @@
 import org.pdfsam.module.Module;
 import org.pdfsam.ui.event.SetActiveModuleRequest;
 import org.pdfsam.ui.event.SetTitleEvent;
-import org.pdfsam.ui.support.Style;
 import org.sejda.eventstudio.annotation.EventListener;
 
 /**
@@ -55,7 +54,6 @@ public class WorkArea extends BorderPane {
 
     @Inject
     public WorkArea(List<Module> modulesList, QuickbarWrokarea navigation) {
-        getStyleClass().addAll(Style.CONTAINER.css());
         Label emptyArea = new Label(DefaultI18nContext.getInstance().i18n("Please select a module"));
         emptyArea.getStyleClass().add("empty-notice");
         for (Module module : modulesList) {

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/ApplicationContextHolder.java
Patch:
@@ -32,7 +32,7 @@ public final class ApplicationContextHolder {
 
     private ApplicationContextHolder() {
         ctx = new AnnotationConfigApplicationContext();
-        ctx.setClassLoader(EnhancedClassloaderProvider.classLoader());
+        ctx.setClassLoader(EnhancedClassloaderProvider.classLoader(ctx.getClassLoader()));
         ctx.register(LoggerConfig.class);
         ctx.register(PdfsamConfig.class);
         ctx.getEnvironment().setActiveProfiles(ctx.getEnvironment().getProperty("pdfsam.package", "BASIC"));

File: pdfsam-core/src/test/java/org/pdfsam/support/validation/DirectoryValidatorTest.java
Patch:
@@ -47,6 +47,6 @@ public void testPositive() throws IOException {
     @Test
     public void testAllowBlank() {
         Assert.assertFalse(victim.isValid(""));
-        Assert.assertTrue(Validators.decorateAsValidBlankString(victim).isValid(""));
+        Assert.assertTrue(Validators.decorateAsValidEmptyString(victim).isValid(""));
     }
 }

File: pdfsam-core/src/test/java/org/pdfsam/support/validation/FileTypeValidatorTest.java
Patch:
@@ -74,7 +74,7 @@ public void existingPdfInsensitive() throws IOException {
     public void allowBlank() {
         Validator<String> victim = Validators.newExistingFileTypeString(FileType.HTML);
         Assert.assertFalse(victim.isValid(""));
-        Assert.assertTrue(Validators.decorateAsValidBlankString(victim).isValid(""));
+        Assert.assertTrue(Validators.decorateAsValidEmptyString(victim).isValid(""));
     }
 
     @Test

File: pdfsam-core/src/test/java/org/pdfsam/support/validation/FileValidatorTest.java
Patch:
@@ -47,7 +47,7 @@ public void testPositive() throws IOException {
     @Test
     public void testAllowBlank() {
         Assert.assertFalse(victim.isValid(""));
-        Assert.assertTrue(Validators.decorateAsValidBlankString(victim).isValid(""));
+        Assert.assertTrue(Validators.decorateAsValidEmptyString(victim).isValid(""));
     }
 
 }

File: pdfsam-core/src/test/java/org/pdfsam/support/validation/IntRangeStringValidatorTest.java
Patch:
@@ -44,6 +44,6 @@ public void testPositive() {
     @Test
     public void testAllowBlank() {
         Assert.assertFalse(victim.isValid(""));
-        Assert.assertTrue(Validators.decorateAsValidBlankString(victim).isValid(""));
+        Assert.assertTrue(Validators.decorateAsValidEmptyString(victim).isValid(""));
     }
 }

File: pdfsam-core/src/test/java/org/pdfsam/support/validation/IntegerStringValidatorTest.java
Patch:
@@ -43,6 +43,6 @@ public void testPositive() {
     @Test
     public void testAllowBlank() {
         Assert.assertFalse(victim.isValid(""));
-        Assert.assertTrue(Validators.decorateAsValidBlankString(victim).isValid(""));
+        Assert.assertTrue(Validators.decorateAsValidEmptyString(victim).isValid(""));
     }
 }

File: pdfsam-core/src/test/java/org/pdfsam/support/validation/RegexValidatorTest.java
Patch:
@@ -42,6 +42,6 @@ public void testPositive() {
     @Test
     public void testAllowBlank() {
         Assert.assertFalse(victim.isValid(""));
-        Assert.assertTrue(Validators.decorateAsValidBlankString(victim).isValid(""));
+        Assert.assertTrue(Validators.decorateAsValidEmptyString(victim).isValid(""));
     }
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableDirectoryField.java
Patch:
@@ -46,11 +46,11 @@ public class BrowsableDirectoryField extends BrowsableField {
 
     private BrowseEventHandler handler = new BrowseEventHandler();
 
-    public BrowsableDirectoryField(boolean allowBlankString) {
+    public BrowsableDirectoryField(boolean allowEmptyString) {
         setBrowseWindowTitle(DefaultI18nContext.getInstance().i18n("Select a directory"));
         Validator<String> validator = Validators.newExistingDirectoryString();
-        if (allowBlankString) {
-            validator = Validators.decorateAsValidBlankString(validator);
+        if (allowEmptyString) {
+            validator = Validators.decorateAsValidEmptyString(validator);
         }
         getTextField().setValidator(validator);
         getTextField().setErrorMessage(DefaultI18nContext.getInstance().i18n("Select an existing directory"));

File: pdfsam-gui/src/test/java/org/pdfsam/ui/info/KeywordsTabTest.java
Patch:
@@ -98,6 +98,7 @@ public void onLoad() throws Exception {
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADING);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADED);
+        Thread.sleep(1000);
         exists("test");
     }
 

File: pdfsam-gui/src/test/java/org/pdfsam/ui/info/SummaryTabTest.java
Patch:
@@ -103,6 +103,7 @@ public void onLoad() throws Exception {
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADING);
         descriptor.moveStatusTo(PdfDescriptorLoadingStatus.LOADED);
+        Thread.sleep(1000);
         assertInfoIsDisplayed(descriptor);
     }
 

File: pdfsam-service/src/main/java/org/pdfsam/pdf/DefaultPdfLoader.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.text.DateFormat;
 import java.util.HashMap;
+import java.util.Optional;
 
 import javax.inject.Named;
 
@@ -46,8 +47,8 @@ public void accept(PdfReader reader, PdfDocumentDescriptor descriptor) {
         descriptor.setVersion(new PdfVersionAdapter(Character.toString(reader.getPdfVersion())).getEnumValue());
         HashMap<String, String> info = reader.getInfo();
         descriptor.setInformationDictionary(info);
-        descriptor.putInformation("FormattedCreationDate",
-                FORMATTER.format(PdfDate.decode(info.get("CreationDate"))));
+        Optional.ofNullable(PdfDate.decode(info.get("CreationDate"))).map(FORMATTER::format)
+                .ifPresent(c -> descriptor.putInformation("FormattedCreationDate", c));
     }
 
     public RequiredPdfData key() {

File: pdfsam-service/src/test/java/org/pdfsam/TestCycles.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.task;
+package org.pdfsam;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: pdfsam-fx/src/test/java/org/pdfsam/ui/selection/single/SingleSelectionPaneTest.java
Patch:
@@ -129,7 +129,7 @@ public void openFolderMenuItem() throws Exception {
             @Override
             public void onEvent(OpenFileRequest event) {
                 super.onEvent(event);
-                assertEquals(victim.getPdfDocumentDescriptor().getFile().getParent(), event.getFile());
+                assertEquals(victim.getPdfDocumentDescriptor().getFile().getParentFile(), event.getFile());
             }
         };
         eventStudio().add(OpenFileRequest.class, listener);

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/BrowsableDirectoryFieldUITest.java
Patch:
@@ -28,7 +28,7 @@
 import javafx.scene.Parent;
 import javafx.scene.control.Label;
 import javafx.scene.input.KeyCode;
-import javafx.scene.layout.VBox;
+import javafx.scene.layout.HBox;
 
 import org.junit.After;
 import org.junit.Ignore;
@@ -56,7 +56,7 @@ protected Parent getRootNode() {
         victimNoBlank.getStyleClass().add("victim-no-blank");
         BrowsableDirectoryField victimBlank = new BrowsableDirectoryField(true);
         victimBlank.getStyleClass().add("victim-blank");
-        return new VBox(victimBlank, victimNoBlank);
+        return new HBox(victimBlank, victimNoBlank);
     }
 
     @After

File: pdfsam-fx/src/test/java/org/pdfsam/ui/io/BrowsableFileFieldUITest.java
Patch:
@@ -25,7 +25,7 @@
 
 import javafx.scene.Parent;
 import javafx.scene.input.KeyCode;
-import javafx.scene.layout.VBox;
+import javafx.scene.layout.HBox;
 
 import org.junit.After;
 import org.junit.Test;
@@ -51,7 +51,7 @@ protected Parent getRootNode() {
         BrowsableFileField victimNoBlank = new BrowsableFileField(FileType.PDF);
         victimNoBlank.enforceValidation(false, false);
         victimNoBlank.getStyleClass().add("victim-no-blank");
-        return new VBox(victimBlank, victimNoBlank);
+        return new HBox(victimBlank, victimNoBlank);
     }
 
     @After

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SizeComboBox.java
Patch:
@@ -47,7 +47,7 @@ class SizeComboBox extends ComboBox<String> implements TaskParametersBuildStep<S
     private final FXValidationSupport<String> validationSupport = new FXValidationSupport<>();
 
     SizeComboBox() {
-        getItems().addAll("500 KB", "1 MB", "3 MB", "5 MB", "10 MB");
+        getItems().addAll("500 KB", "1 MB", "2 MB", "3 MB", "4 MB", "5 MB", "10 MB");
 
         validationSupport.setValidator(Validators.newRegexMatchingString(REGEXP));
         setEditable(true);

File: pdfsam-alternate-mix/src/main/java/org/pdfsam/alternatemix/AlternateMixModule.java
Patch:
@@ -36,6 +36,7 @@
 import org.pdfsam.ui.io.BrowsablePdfOutputField;
 import org.pdfsam.ui.io.PdfDestinationPane;
 import org.pdfsam.ui.module.BaseTaskExecutionModule;
+import org.pdfsam.ui.support.Style;
 import org.pdfsam.ui.support.Views;
 import org.sejda.model.input.PdfFileSource;
 
@@ -91,7 +92,7 @@ public ModuleDescriptor descriptor() {
 
     @Override
     protected Pane getInnerPanel() {
-        VBox pane = new VBox(5);
+        VBox pane = new VBox(Style.DEFAULT_SPACING);
         pane.setAlignment(Pos.TOP_CENTER);
 
         pane.getChildren().addAll(firstDocument, secondDocument,

File: pdfsam-alternate-mix/src/main/java/org/pdfsam/alternatemix/AlternateMixOptionsPane.java
Patch:
@@ -46,7 +46,7 @@ class AlternateMixOptionsPane extends VBox implements TaskParametersBuildStep<Al
     private ValidableTextField secondStep = createValidableField();
 
     AlternateMixOptionsPane() {
-        super(5);
+        super(Style.DEFAULT_SPACING);
         this.reverseSecond.setSelected(true);
         getStyleClass().addAll(Style.CONTAINER.css());
         HBox firstStepContainer = new HBox(new Label(DefaultI18nContext.getInstance().i18n(

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/Style.java
Patch:
@@ -36,6 +36,7 @@ public enum Style {
     HCONTAINER("spaced-hcontainer"),
     MAIN_PANEL("main-scroll-panel");
 
+    public static final int DEFAULT_SPACING = 5;
     private String[] classes;
 
     private Style(String... classes) {

File: pdfsam-simple-split/src/main/java/org/pdfsam/split/SplitOptionsPane.java
Patch:
@@ -52,7 +52,7 @@ class SplitOptionsPane extends VBox implements SplitParametersBuilderCreator {
     private SplitByEveryRadioButton splitByEvery = new SplitByEveryRadioButton();
 
     SplitOptionsPane() {
-        super(5);
+        super(Style.DEFAULT_SPACING);
         RadioButtonDrivenTextFieldsPane grid = new RadioButtonDrivenTextFieldsPane(group);
         burst.setToggleGroup(group);
         burst.setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Explode the document into single pages")));

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/SplitOptionsPane.java
Patch:
@@ -44,7 +44,7 @@ class SplitOptionsPane extends VBox implements TaskParametersBuildStep<SplitByGo
     private TextField regexpField = new TextField();
 
     SplitOptionsPane() {
-        super(5);
+        super(Style.DEFAULT_SPACING);
         getStyleClass().addAll(Style.CONTAINER.css());
         regexpField.setPromptText(DefaultI18nContext.getInstance().i18n("Regexp the bookmark has to match"));
         regexpField.setPrefWidth(300);

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SplitBySizeModule.java
Patch:
@@ -40,6 +40,7 @@
 import org.pdfsam.ui.module.BaseTaskExecutionModule;
 import org.pdfsam.ui.prefix.PrefixPane;
 import org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane;
+import org.pdfsam.ui.support.Style;
 import org.pdfsam.ui.support.Views;
 import org.sejda.model.parameter.SplitBySizeParameters;
 import org.sejda.model.prefix.Prefix;
@@ -93,7 +94,7 @@ protected Builder<SplitBySizeParameters> getBuilder(Consumer<String> onError) {
 
     @Override
     protected Pane getInnerPanel() {
-        VBox pane = new VBox(5);
+        VBox pane = new VBox(Style.DEFAULT_SPACING);
         pane.setAlignment(Pos.TOP_CENTER);
 
         TitledPane prefixTitled = Views

File: pdfsam-core/src/test/java/org/pdfsam/context/DefaultUserContextTest.java
Patch:
@@ -44,7 +44,7 @@ public void isCheckUpdates() {
     @Test
     public void isUseSmartOutput() {
         DefaultUserContext.getInstance().setBooleanPreference(BooleanUserPreference.SMART_OUTPUT, true);
-        Assert.assertFalse(DefaultUserContext.getInstance().isUseSmartOutput());
+        Assert.assertTrue(DefaultUserContext.getInstance().isUseSmartOutput());
     }
 
     @Test

File: pdfsam-service/src/main/java/org/pdfsam/module/StatefulPreferencesUsageService.java
Patch:
@@ -74,7 +74,7 @@ public List<Module> getMostUsed() {
         List<ModuleUsage> used = modules.values().parallelStream().collect(toList());
         used.sort((a, b) -> {
             if (a.totalUsed == 0 && b.totalUsed == 0) {
-                return Integer.compare(b.module.descriptor().getPriority(), a.module.descriptor().getPriority());
+                return Integer.compare(a.module.descriptor().getPriority(), b.module.descriptor().getPriority());
             }
             return Long.compare(b.totalUsed, a.totalUsed);
         });

File: pdfsam-merge/src/main/java/org/pdfsam/merge/MergeSelectionPane.java
Patch:
@@ -54,11 +54,11 @@ public void apply(Optional<? extends MergeParameters> params, Consumer<String> o
         }
         try {
             params.ifPresent(p -> table().getItems().stream()
-                    .map(i -> new PdfMergeInput(i.toPdfFileSource(), i.toPageRangeSet())).forEach(p::addInput));
+                    .map(i -> new PdfMergeInput(i.toPdfFileSource(), i.toPageRangeSet())).forEach(i -> p.addInput(i)));
+
         } catch (ConversionException e) {
             LOG.error(e.getMessage());
             onError.accept(e.getMessage());
         }
     }
-
 }

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/SplitByBookmarksModule.java
Patch:
@@ -103,6 +103,8 @@ protected Pane getInnerPanel() {
                 .titledPane(DefaultI18nContext.getInstance().i18n("File names settings"), prefix);
         prefix.addMenuItemFor(Prefix.CURRENTPAGE);
         prefix.addMenuItemFor(Prefix.FILENUMBER);
+        prefix.addMenuItemFor(Prefix.BOOKMARK);
+        prefix.addMenuItemFor(Prefix.BOOKMARK_STRICT);
 
         pane.getChildren().addAll(selectionPane,
                 Views.titledPane(DefaultI18nContext.getInstance().i18n("Split settings"), splitOptions),

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/multiple/move/MoveType.java
Patch:
@@ -68,7 +68,7 @@ public SelectionAndFocus move(Integer[] selected, ObservableList<SelectionTableR
         public SelectionAndFocus move(Integer[] selected, ObservableList<SelectionTableRowData> items, int focused) {
             if (isSubselection(selected, items)) {
                 MultipleSelectionAndFocus newSelection = new MultipleSelectionAndFocus(focused);
-                Arrays.parallelSort(selected);
+                Arrays.parallelSort(selected, Collections.reverseOrder(Integer::compare));
                 if (selected[selected.length - 1] < items.size() - 1) {
                     Arrays.stream(selected).forEach((i) -> {
                         Collections.swap(items, i, i + 1);

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/multiple/move/MoveType.java
Patch:
@@ -86,7 +86,7 @@ public SelectionAndFocus move(Integer[] selected, ObservableList<SelectionTableR
             if (isSingleSelection(selected, items)) {
                 if (selected[0] < items.size() - 1) {
                     SelectionTableRowData item = items.remove(selected[0].intValue());
-                    items.add(items.size() - 1, item);
+                    items.add(items.size(), item);
                     return new SingleSelectionAndFocus(items.size() - 1);
                 }
             }

File: pdfsam-core/src/main/java/org/pdfsam/support/TaskParametersBuildStep.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.pdfsam.support;
 
+import java.util.Optional;
 import java.util.function.Consumer;
 
 import org.sejda.model.parameter.base.TaskParameters;
@@ -35,9 +36,9 @@ public interface TaskParametersBuildStep<T extends TaskParameters> {
      * Applies changes to the input parameters and calls the provided consumer in case of error.
      * 
      * @param params
-     *            parameters the builder will apply its changes to
+     *            parameters the builder will apply its changes to.
      * @param onError
      *            function to call in case of error where the error message is supplied
      */
-    void apply(T params, Consumer<String> onError);
+    void apply(Optional<? extends T> params, Consumer<String> onError);
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/prefix/PrefixPane.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.pdfsam.ui.prefix;
 
+import java.util.Optional;
 import java.util.function.Consumer;
 
 import javafx.geometry.Pos;
@@ -59,8 +60,7 @@ public final String getText() {
         return field.getText();
     }
 
-    public void apply(SinglePdfSourceMultipleOutputParameters params, Consumer<String> onError) {
-        params.setOutputPrefix(field.getText());
+    public void apply(Optional<? extends SinglePdfSourceMultipleOutputParameters> params, Consumer<String> onError) {
+        params.ifPresent(p -> p.setOutputPrefix(field.getText()));
     }
-
 }

File: pdfsam-merge/src/main/java/org/pdfsam/merge/MergeModule.java
Patch:
@@ -20,6 +20,7 @@
 
 import static org.pdfsam.module.ModuleDescriptorBuilder.builder;
 
+import java.util.Optional;
 import java.util.function.Consumer;
 
 import javafx.geometry.Pos;
@@ -78,12 +79,12 @@ public ModuleDescriptor descriptor() {
 
     @Override
     protected TaskParameters buildParameters(Consumer<String> onError) {
-        MergeParameters params = new MergeParameters();
+        Optional<MergeParameters> params = Optional.of(new MergeParameters());
         selectionPane.apply(params, onError);
         mergeOptions.apply(params, onError);
         destinationFileField.apply(params, onError);
         destinationPane.apply(params, onError);
-        return params;
+        return params.orElse(null);
     }
 
     @Override

File: pdfsam-simple-split/src/main/java/org/pdfsam/split/SplitOptionsPane.java
Patch:
@@ -74,7 +74,6 @@ class SplitOptionsPane extends VBox {
 
     AbstractSplitByPageParameters createParams(Consumer<String> onError) {
         return ((SplitParamsCreator<AbstractSplitByPageParameters>) group.getSelectedToggle()).createParams(onError);
-
     }
 
 }

File: pdfsam-simple-split/src/main/java/org/pdfsam/split/SplitParamsCreator.java
Patch:
@@ -30,5 +30,6 @@
  *            AbstractSplitByPageParameters created by this creator
  */
 interface SplitParamsCreator<T extends AbstractSplitByPageParameters> {
+
     T createParams(Consumer<String> onError);
 }

File: pdfsam-split-by-bookmarks/src/main/java/org/pdfsam/splitbybookmarks/SplitOptionsPane.java
Patch:
@@ -20,6 +20,7 @@
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 
+import java.util.Optional;
 import java.util.function.Consumer;
 
 import javafx.geometry.Pos;
@@ -72,9 +73,9 @@ private HBox createLine(Node... items) {
         return item;
     }
 
-    public void apply(SplitByGoToActionLevelParameters params, Consumer<String> onError) {
+    public void apply(Optional<? extends SplitByGoToActionLevelParameters> params, Consumer<String> onError) {
         if (isNotBlank(regexpField.getText())) {
-            params.setMatchingTitleRegEx(regexpField.getText());
+            params.ifPresent(p -> p.setMatchingTitleRegEx(regexpField.getText()));
         }
     }
 }

File: pdfsam-split-by-size/src/main/java/org/pdfsam/splitbysize/SplitOptionsPane.java
Patch:
@@ -49,5 +49,4 @@ SplitBySizeParameters createParams(Consumer<String> onError) {
         return combo.createParams(onError);
 
     }
-
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/prefix/PrefixField.java
Patch:
@@ -45,6 +45,7 @@ public PrefixField() {
         this.menu = new Menu(DefaultI18nContext.getInstance().i18n("Add prefix"));
         this.menu.getItems().addAll(new PrefixMenuItem(Prefix.TIMESTAMP), new PrefixMenuItem(Prefix.BASENAME));
         this.setContextMenu(new ContextMenu(this.menu));
+        setPrefWidth(300);
         installTooltip();
     }
 

File: pdfsam-service/src/test/java/org/pdfsam/pdf/ITextPdfLoadServiceTest.java
Patch:
@@ -50,8 +50,9 @@ public void setUp() throws IOException {
     public void load() {
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(testFile);
         List<PdfDocumentDescriptor> toLoad = new ArrayList<>();
-        assertEquals(PdfDescriptorLoadingStatus.REQUESTED, descriptor.loadedProperty().get());
+        assertEquals(PdfDescriptorLoadingStatus.INITIAL, descriptor.loadedProperty().get());
         toLoad.add(descriptor);
+        descriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);
         victim.load(toLoad);
         assertEquals(1, toLoad.size());
         PdfDocumentDescriptor item = toLoad.get(0);

File: pdfsam-core/src/test/java/org/pdfsam/pdf/PdfDocumentDescriptorTest.java
Patch:
@@ -42,7 +42,7 @@ public void getName() {
         PdfDocumentDescriptor victim = PdfDocumentDescriptor.newDescriptor(file, "pwd");
         assertNotNull(victim.getFileName());
         assertFalse(victim.isInvalid());
-        assertEquals(LoadingStatus.REQUESTED, victim.loadedProperty().get());
+        assertEquals(PdfDescriptorLoadingStatus.REQUESTED, victim.loadedProperty().get());
         verify(file).getName();
     }
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableField.java
Patch:
@@ -51,6 +51,7 @@ public BrowsableField() {
         setAlignment(Pos.CENTER_LEFT);
         validableContainer = new HBox(textField);
         validableContainer.getStyleClass().add("validable-container");
+        textField.getStyleClass().add("validable-container-field");
         browseButton = new Button(DefaultI18nContext.getInstance().i18n("Browse"));
         browseButton.getStyleClass().addAll(Style.BROWSE_BUTTON.css());
         browseButton.prefHeightProperty().bind(validableContainer.heightProperty());

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/PasswordFieldPopup.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.pdfsam.context.DefaultI18nContext;
 import org.pdfsam.module.ModuleOwned;
-import org.pdfsam.pdf.EncryptionStatus;
+import org.pdfsam.pdf.PdfDescriptorLoadingStatus;
 import org.pdfsam.pdf.PdfDocumentDescriptor;
 import org.pdfsam.pdf.PdfLoadRequestEvent;
 import org.pdfsam.ui.support.Style;
@@ -102,7 +102,7 @@ public PasswordFieldPopupContent() {
         public void requestLoad() {
             if (pdfDescriptor != null) {
                 pdfDescriptor.setPassword(passwordField.getText());
-                pdfDescriptor.setEncryptionStatus(EncryptionStatus.DECRYPTION_REQUESTED);
+                pdfDescriptor.moveStatusTo(PdfDescriptorLoadingStatus.REQUESTED);
                 PdfLoadRequestEvent loadEvent = new PdfLoadRequestEvent(getOwnerModule());
                 loadEvent.add(pdfDescriptor);
                 eventStudio().broadcast(loadEvent);

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/multiple/MultipleSelectionPane.java
Patch:
@@ -46,7 +46,7 @@ public MultipleSelectionPane(String ownerModule, SelectionTableColumn<?>... colu
         this.ownerModule = defaultString(ownerModule);
         setTop(new SelectionTableToolbar(ownerModule));
         table = new SelectionTable(ownerModule, new SelectionTableColumn<?>[] {
-                new EncryptionStatusColumn(this.ownerModule), FileColumn.NAME, LongColumn.SIZE, LongColumn.PAGES,
+                new LoadingStatusColumn(this.ownerModule), FileColumn.NAME, LongColumn.SIZE, LongColumn.PAGES,
                 LongColumn.LAST_MODIFIED, StringColumn.PAGE_SELECTION });
         setCenter(table);
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/info/KeywordsTab.java
Patch:
@@ -31,7 +31,7 @@
 import javax.inject.Named;
 
 import org.pdfsam.context.DefaultI18nContext;
-import org.pdfsam.pdf.LoadingStatus;
+import org.pdfsam.pdf.PdfDescriptorLoadingStatus;
 import org.pdfsam.ui.event.ShowPdfDescriptorRequest;
 import org.sejda.eventstudio.annotation.EventListener;
 import org.sejda.model.pdf.PdfMetadataKey;
@@ -44,7 +44,7 @@
  */
 @Named
 class KeywordsTab extends Tab {
-    private ChangeListener<LoadingStatus> loadedListener;
+    private ChangeListener<PdfDescriptorLoadingStatus> loadedListener;
     private Label keywords = new Label();
 
     KeywordsTab() {
@@ -69,7 +69,7 @@ void init() {
     @EventListener
     void requestShow(ShowPdfDescriptorRequest event) {
         loadedListener = (o, oldVal, newVal) -> {
-            if (newVal == LoadingStatus.LOADED) {
+            if (newVal == PdfDescriptorLoadingStatus.LOADED) {
                 Platform.runLater(() -> {
                     keywords.setText(event.getDescriptor().getInformation(PdfMetadataKey.KEYWORDS.getKey()));
                 });

File: pdfsam-merge/src/main/java/org/pdfsam/merge/MergeSelectionPane.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.function.Consumer;
 
 import org.pdfsam.context.DefaultI18nContext;
-import org.pdfsam.ui.selection.multiple.EncryptionStatusColumn;
+import org.pdfsam.ui.selection.multiple.LoadingStatusColumn;
 import org.pdfsam.ui.selection.multiple.FileColumn;
 import org.pdfsam.ui.selection.multiple.LongColumn;
 import org.pdfsam.ui.selection.multiple.MultipleSelectionPane;
@@ -45,7 +45,7 @@ public class MergeSelectionPane extends MultipleSelectionPane<MergeParameters> {
     private static final Logger LOG = LoggerFactory.getLogger(MergeSelectionPane.class);
 
     public MergeSelectionPane(String ownerModule) {
-        super(ownerModule, new SelectionTableColumn<?>[] { new EncryptionStatusColumn(ownerModule), FileColumn.NAME,
+        super(ownerModule, new SelectionTableColumn<?>[] { new LoadingStatusColumn(ownerModule), FileColumn.NAME,
                 LongColumn.SIZE, LongColumn.PAGES, LongColumn.LAST_MODIFIED, StringColumn.PAGE_SELECTION });
     }
 

File: pdfsam-service/src/test/java/org/pdfsam/pdf/ITextPdfLoadServiceTest.java
Patch:
@@ -50,13 +50,14 @@ public void setUp() throws IOException {
     public void load() {
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(testFile);
         List<PdfDocumentDescriptor> toLoad = new ArrayList<>();
+        assertEquals(PdfDescriptorLoadingStatus.REQUESTED, descriptor.loadedProperty().get());
         toLoad.add(descriptor);
         victim.load(toLoad);
         assertEquals(1, toLoad.size());
         PdfDocumentDescriptor item = toLoad.get(0);
         assertNotNull(item);
         assertEquals(2, item.pagesPropery().get());
-        assertEquals(EncryptionStatus.NOT_ENCRYPTED, item.encryptionStatusProperty().get());
+        assertEquals(PdfDescriptorLoadingStatus.LOADED, descriptor.loadedProperty().get());
         assertEquals("Me", item.getInformation(PdfMetadataKey.AUTHOR.getKey()));
         assertEquals("test", item.getInformation(PdfMetadataKey.KEYWORDS.getKey()));
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/ContentPane.java
Patch:
@@ -55,13 +55,13 @@ private void init() {
         eventStudio().broadcast(new SetActiveDashboardItemRequest(defaultDasboardItem));
     }
 
-    @EventListener
+    @EventListener(priority = Integer.MIN_VALUE)
     public void onSetActiveModule(SetActiveModuleRequest request) {
         dashboard.setVisible(false);
         modules.setVisible(true);
     }
 
-    @EventListener
+    @EventListener(priority = Integer.MIN_VALUE)
     public void onSetActiveDashboardItem(SetActiveDashboardItemRequest request) {
         dashboard.setVisible(true);
         modules.setVisible(false);

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/Dashboard.java
Patch:
@@ -76,7 +76,7 @@ private void init() {
         eventStudio().addAnnotatedListeners(this);
     }
 
-    @EventListener(priority = Integer.MIN_VALUE)
+    @EventListener
     public void onSetActiveDashboardItem(SetActiveDashboardItemRequest request) {
         DashboardContentPane requested = items.get(request.getActiveItemId());
         if (requested != null) {

File: pdfsam-gui/src/main/java/org/pdfsam/ui/workarea/QuickbarModuleButtons.java
Patch:
@@ -73,7 +73,7 @@ void init() {
     @EventListener
     public void onSetCurrentModuleRequest(SetActiveModuleRequest r) {
         if (r.getActiveModuleId().isPresent()) {
-            buttons.forEach((b) -> b.setSelected(b.moduleId().equals(r.getActiveModuleId())));
+            buttons.forEach((b) -> b.setSelected(b.moduleId().equals(r.getActiveModuleId().get())));
         }
     }
 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/workarea/Workarea.java
Patch:
@@ -75,7 +75,7 @@ private void init() {
         eventStudio().addAnnotatedListeners(this);
     }
 
-    @EventListener(priority = Integer.MIN_VALUE)
+    @EventListener
     public void onSetActiveModule(SetActiveModuleRequest request) {
         Module requested = modules.get(request.getActiveModuleId().orElse(EMPTY));
         if (requested != null) {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/ModuleFooterPane.java
Patch:
@@ -24,7 +24,6 @@
 import java.math.BigDecimal;
 
 import javafx.scene.control.Button;
-import javafx.scene.control.ContentDisplay;
 import javafx.scene.control.ProgressBar;
 import javafx.scene.control.ProgressIndicator;
 import javafx.scene.control.Tooltip;
@@ -70,8 +69,8 @@ class ModuleFooterPane extends HBox {
 
     public ModuleFooterPane() {
         this.getStyleClass().addAll(Style.CLOSE_FOOTER.css());
-        AwesomeDude.setIcon(failed, AwesomeIcon.TIMES_CIRCLE, "16px", ContentDisplay.GRAPHIC_ONLY);
-        failed.getStyleClass().addAll("pdfsam-toolbar-button", "task-status-button", "notification-error");
+        failed.setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.TIMES_CIRCLE));
+        failed.getStyleClass().addAll("pdfsam-footer-button", "pdfsam-footer-failed-button");
         failed.setVisible(false);
         failed.setOnAction(e -> eventStudio().broadcast(new ShowRequestEvent(), "LogStage"));
         failed.setTooltip(new Tooltip(DefaultI18nContext.getInstance().i18n("Task execution failed")));

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/OpenButton.java
Patch:
@@ -23,7 +23,6 @@
 import java.io.File;
 
 import javafx.scene.control.Button;
-import javafx.scene.control.ContentDisplay;
 import javafx.scene.control.Tooltip;
 
 import org.pdfsam.context.DefaultI18nContext;
@@ -47,8 +46,8 @@ class OpenButton extends Button implements TaskOutputDispatcher {
     private File destination;
 
     public OpenButton() {
-        getStyleClass().addAll("pdfsam-toolbar-button", "task-status-button");
-        AwesomeDude.setIcon(this, AwesomeIcon.FOLDER_OPEN, "16px", ContentDisplay.GRAPHIC_ONLY);
+        getStyleClass().add("pdfsam-footer-button");
+        setGraphic(AwesomeDude.createIconLabel(AwesomeIcon.FOLDER_OPEN));
         setOnAction(e -> {
             if (destination != null && destination.exists()) {
                 eventStudio().broadcast(new OpenFileRequestEvent(destination));

File: pdfsam-gui/src/main/java/org/pdfsam/ui/banner/BannerButton.java
Patch:
@@ -32,7 +32,7 @@
 class BannerButton extends Button {
     BannerButton(AwesomeIcon icon) {
         getStyleClass().addAll("pdfsam-toolbar-button");
-        Label labelIcon = AwesomeDude.createIconLabel(icon, "22.0");
+        Label labelIcon = AwesomeDude.createIconLabel(icon, "28.0");
         setGraphic(labelIcon);
     }
 }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/dashboard/modules/ModulesDashboardItem.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.pdfsam.context.DefaultI18nContext;
 import org.pdfsam.ui.dashboard.DashboardItem;
+import org.springframework.context.annotation.Bean;
 
 import de.jensd.fx.fontawesome.AwesomeDude;
 import de.jensd.fx.fontawesome.AwesomeIcon;
@@ -39,6 +40,7 @@ public class ModulesDashboardItem implements DashboardItem {
     @Inject
     private ModulesDashboardPane pane;
 
+    @Bean(name = "defaultDashboardItemId")
     public String id() {
         return "MODULES";
     }

File: pdfsam-merge/src/main/java/org/pdfsam/merge/MergeSelectionPane.java
Patch:
@@ -58,7 +58,7 @@ public void apply(MergeParameters params, Consumer<String> onError) {
             table().getItems().stream()
                     .forEach(i -> params.addInput(new PdfMergeInput(i.toPdfFileSource(), i.toPageRangeSet())));
         } catch (ConversionException e) {
-            LOG.error(DefaultI18nContext.getInstance().i18n("Invalid parameters"), e);
+            LOG.error(e.getMessage());
             onError.accept(e.getMessage());
         }
     }

File: pdfsam-service/src/main/java/org/pdfsam/task/DefaultExecutionService.java
Patch:
@@ -48,7 +48,7 @@ public void submit(String moduleId, TaskParameters params) {
             try {
                 service.execute(params);
             } catch (RuntimeException re) {
-                LOG.warn(DefaultI18nContext.getInstance().i18n("Unexpected error"), re);
+                LOG.error(DefaultI18nContext.getInstance().i18n("Unexpected error"), re);
             }
         });
     }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/EncryptionStatusColumn.java
Patch:
@@ -47,10 +47,10 @@
  * @author Andrea Vacondio
  *
  */
-class EncryptionStatusColumn implements SelectionTableColumn<EncryptionStatus>, ModuleOwned {
+public class EncryptionStatusColumn implements SelectionTableColumn<EncryptionStatus>, ModuleOwned {
     private String ownerModule = StringUtils.EMPTY;
 
-    EncryptionStatusColumn(String ownerModule) {
+    public EncryptionStatusColumn(String ownerModule) {
         this.ownerModule = defaultString(ownerModule);
     }
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/FileColumn.java
Patch:
@@ -36,7 +36,7 @@
  * @author Andrea Vacondio
  * 
  */
-enum FileColumn implements SelectionTableColumn<File> {
+public enum FileColumn implements SelectionTableColumn<File> {
 
     NAME {
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/LongColumn.java
Patch:
@@ -36,7 +36,7 @@
  * @author Andrea Vacondio
  * 
  */
-enum LongColumn implements SelectionTableColumn<Number> {
+public enum LongColumn implements SelectionTableColumn<Number> {
 
     SIZE {
         public String getColumnTitle() {

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/SelectionTableToolbar.java
Patch:
@@ -48,7 +48,7 @@
  * @author Andrea Vacondio
  * 
  */
-public class SelectionTableToolbar extends ToolBar implements ModuleOwned {
+class SelectionTableToolbar extends ToolBar implements ModuleOwned {
 
     private String ownerModule = StringUtils.EMPTY;
 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/StringColumn.java
Patch:
@@ -37,7 +37,7 @@
  * @author Andrea Vacondio
  * 
  */
-enum StringColumn implements SelectionTableColumn<String> {
+public enum StringColumn implements SelectionTableColumn<String> {
     PAGE_SELECTION {
         public String getColumnTitle() {
             return DefaultI18nContext.getInstance().i18n("Page ranges");

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/SetDestinationEvent.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU Affero General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.ui.event;
+package org.pdfsam.ui.support;
 
 import static org.pdfsam.support.RequireUtils.requireNotNull;
 

File: pdfsam-gui/src/main/java/org/pdfsam/ui/module/TestModule2.java
Patch:
@@ -19,6 +19,7 @@
 package org.pdfsam.ui.module;
 
 import java.io.IOException;
+import java.util.function.Consumer;
 
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Group;
@@ -48,7 +49,7 @@ public ModuleDescriptor descriptor() {
     }
 
     @Override
-    protected TaskParameters getParameters() {
+    protected TaskParameters buildParameters(Consumer<String> onError) {
         // TODO Auto-generated method stub
         return null;
     }

File: pdfsam-gui/src/main/java/org/pdfsam/ui/module/TestModule3.java
Patch:
@@ -19,6 +19,7 @@
 package org.pdfsam.ui.module;
 
 import java.io.IOException;
+import java.util.function.Consumer;
 
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Group;
@@ -48,7 +49,7 @@ public ModuleDescriptor descriptor() {
     }
 
     @Override
-    protected TaskParameters getParameters() {
+    protected TaskParameters buildParameters(Consumer<String> onError) {
         // TODO Auto-generated method stub
         return null;
     }

File: pdfsam-gui/src/main/java/org/pdfsam/update/AsyncUpdateChecker.java
Patch:
@@ -41,6 +41,7 @@
 @Named
 @Scope(BeanDefinition.SCOPE_PROTOTYPE)
 class AsyncUpdateChecker extends SwingWorker<String, Void> {
+    // TODO Swing???
     private static final Logger LOG = LoggerFactory.getLogger(AsyncUpdateChecker.class);
 
     @Inject

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/Style.java
Patch:
@@ -28,7 +28,7 @@ public enum Style {
     BUTTON("pdfsam-button"),
     BROWSE_BUTTON("pdfsam-button", "browse-button"),
     TITLED_PANE("titled-pane"),
-    WHITE_CONTAINER("default-container"),
+    DEAULT_CONTAINER("default-container"),
     CONTAINER("pdfsam-container"),
     INVALID("invalid"),
     VITEM("spaced-vitem"),

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/Views.java
Patch:
@@ -20,6 +20,7 @@
 
 import javafx.scene.Node;
 import javafx.scene.control.TitledPane;
+import javafx.scene.layout.Region;
 
 /**
  * General utility methods related to views
@@ -40,6 +41,7 @@ private Views() {
     public static TitledPane titledPane(String titleString, Node node) {
         TitledPane pane = new TitledPane(titleString, node);
         pane.getStyleClass().addAll(Style.TITLED_PANE.css());
+        pane.setMinHeight(Region.USE_PREF_SIZE);
         return pane;
     }
 }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableDirectoryField.java
Patch:
@@ -27,7 +27,6 @@
 
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
-import javafx.stage.DirectoryChooser;
 
 import org.pdfsam.context.DefaultI18nContext;
 import org.pdfsam.support.validation.Validators;
@@ -49,7 +48,7 @@ public BrowsableDirectoryField() {
     }
 
     /**
-     * {@link EventHandler} opening the {@link DirectoryChooser} and letting the user select the input directory populating the ValidableTextField.
+     * {@link EventHandler} opening the {@link javafx.stage.DirectoryChooser} and letting the user select the input directory populating the ValidableTextField.
      * 
      * @author Andrea Vacondio
      * 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/io/BrowsableFileField.java
Patch:
@@ -27,7 +27,6 @@
 
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
-import javafx.stage.FileChooser;
 
 import org.pdfsam.context.DefaultI18nContext;
 import org.pdfsam.support.io.FileType;
@@ -63,7 +62,7 @@ public void setFileType(FileType fileType) {
     }
 
     /**
-     * {@link EventHandler} opening the {@link FileChooser} and letting the user select the input file populating the ValidableTextField.
+     * {@link EventHandler} opening the {@link javafx.stage.FileChooser} and letting the user select the input file populating the ValidableTextField.
      * 
      * @author Andrea Vacondio
      * 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/move/SelectionAndFocus.java
Patch:
@@ -26,7 +26,7 @@
  *
  */
 public interface SelectionAndFocus {
-    public static final SelectionAndFocus NULL = new SelectionAndFocus() {
+    SelectionAndFocus NULL = new SelectionAndFocus() {
 
         public int[] getRows() {
             return new int[0];

File: pdfsam-gui/src/main/java/org/pdfsam/App.java
Patch:
@@ -76,8 +76,8 @@ public void start(Stage primaryStage) {
         primaryStage.show();
         eventStudio().add(new TitleController(primaryStage));
         requestCheckForUpdateIfNecessary();
-        STOPWATCH.stop();
         eventStudio().addAnnotatedListeners(this);
+        STOPWATCH.stop();
         LOG.info(DefaultI18nContext.getInstance().i18n("Started in {0}",
                 DurationFormatUtils.formatDurationWords(STOPWATCH.getTime(), true, true)));
     }

File: pdfsam-fx/src/main/java/org/pdfsam/ui/selection/LongColumn.java
Patch:
@@ -58,7 +58,7 @@ public Comparator<Number> comparator() {
         }
     },
     LAST_MODIFIED {
-        private FastDateFormat formatter = FastDateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);
+        private FastDateFormat formatter = FastDateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.MEDIUM);
 
         public String getColumnTitle() {
             return DefaultI18nContext.getInstance().i18n("Modified");

File: pdfsam-fx/src/main/java/org/pdfsam/ui/ModuleOwnedButton.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.pdfsam.module.ModuleOwned;
+import org.pdfsam.ui.support.Style;
 import org.sejda.eventstudio.annotation.EventStation;
 
 /**
@@ -36,6 +37,7 @@ public class ModuleOwnedButton extends Button implements ModuleOwned {
 
     public ModuleOwnedButton(String ownerModule) {
         this.ownerModule = defaultString(ownerModule);
+        getStyleClass().addAll(Style.BUTTON.css());
     }
 
     @EventStation

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/TestModule.java
Patch:
@@ -49,7 +49,7 @@ public class TestModule extends BaseTaskExecutionModule {
 
     @Override
     public ModuleDescriptor descriptor() {
-        return new ModuleDescriptor(ModuleCategory.MERGE, "Merge", "Merge pdf documents together");
+        return new ModuleDescriptor(ModuleCategory.MERGE, "Merge", "Merge pdf documents together", -1);
     }
 
     @Override

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/TestModule2.java
Patch:
@@ -44,7 +44,7 @@ public class TestModule2 extends BaseTaskExecutionModule {
 
     @Override
     public ModuleDescriptor descriptor() {
-        return new ModuleDescriptor(ModuleCategory.SPLIT, "Split", "Split documents on a predefined set of pages");
+        return new ModuleDescriptor(ModuleCategory.SPLIT, "Split", "Split documents on a predefined set of pages", 0);
     }
 
     @Override

File: pdfsam-fx/src/main/java/org/pdfsam/ui/module/TestModule3.java
Patch:
@@ -44,7 +44,7 @@ public class TestModule3 extends BaseTaskExecutionModule {
 
     @Override
     public ModuleDescriptor descriptor() {
-        return new ModuleDescriptor(ModuleCategory.SPLIT, "Simple Split", "Split pdf documents");
+        return new ModuleDescriptor(ModuleCategory.SPLIT, "Simple Split", "Split pdf documents", 1);
     }
 
     @Override
@@ -60,7 +60,6 @@ protected Pane getInnerPanel() {
         return pane;
     }
 
-
     @Override
     public String id() {
         return SIMPLE_SPLIT_MODULE_ID;

File: pdfsam-fx/src/main/java/org/pdfsam/ui/support/Style.java
Patch:
@@ -32,8 +32,7 @@ public enum Style {
     CONTAINER("pdfsam-container"),
     INVALID("invalid"),
     VITEM("spaced-vitem"),
-    MAIN_PANEL("main-scroll-panel"),
-    DROP_PLACEHOLDER("drag-drop-placeholder");
+    MAIN_PANEL("main-scroll-panel");
 
     private String[] classes;
 

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/PdfsamConfig.java
Patch:
@@ -39,6 +39,8 @@
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.core.io.Resource;
 
+import de.jensd.fx.fontawesome.AwesomeStyle;
+
 /**
  * IoC configuration
  * 
@@ -75,6 +77,7 @@ public List<String> styles() {
         styles.add(this.getClass().getResource("/css/defaults.css").toExternalForm());
         styles.add(this.getClass().getResource("/css/pdfsam.css").toExternalForm());
         styles.add(this.getClass().getResource("/css/menu.css").toExternalForm());
+        styles.add(this.getClass().getResource(AwesomeStyle.LIGHT.getStylePath()).toExternalForm());
         try {
             URL themeUrl = new ClassPathResource("/css/themes/" + DefaultUserContext.getInstance().getTheme()).getURL();
             styles.add(themeUrl.toExternalForm());

File: pdfsam-gui/src/main/java/org/pdfsam/gui/log/LogPane.java
Patch:
@@ -84,7 +84,6 @@ protected boolean computeValue() {
 
         MenuItem clearItem = new MenuItem(i18n.i18n("Clear"));
         clearItem.setOnAction(e -> logArea.clear());
-        clearItem.getStyleClass().add("ctx-menu-item");
         // disable if there's no text
         clearItem.disableProperty().bind(new BooleanBinding() {
             {
@@ -99,13 +98,11 @@ protected boolean computeValue() {
 
         MenuItem selectAllItem = new MenuItem(i18n.i18n("Select all"));
         selectAllItem.setOnAction(e -> logArea.selectAll());
-        selectAllItem.getStyleClass().add("ctx-menu-item");
         // disable if there's no text
         selectAllItem.disableProperty().bind(clearItem.disableProperty());
 
         MenuItem saveItem = new MenuItem(i18n.i18n("Save log"));
         saveItem.setOnAction(e -> saveLog());
-        saveItem.getStyleClass().add("ctx-menu-item");
         // disable if there's no text
         saveItem.disableProperty().bind(clearItem.disableProperty());
         SeparatorMenuItem separator = new SeparatorMenuItem();

File: pdfsam-gui/src/main/java/org/pdfsam/UncaughtExceptionLogger.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * {@link UncaughtExceptionHandler} that simply logs the exception and rethrows it
+ * {@link UncaughtExceptionHandler} that simply logs the exception
  * 
  * @author Andrea Vacondio
  * 

File: pdfsam-fx/src/main/java/org/pdfsam/ui/prefix/PrefixField.java
Patch:
@@ -78,7 +78,7 @@ public void addMenuItemFor(Prefix... prefixes) {
      * @author Andrea Vacondio
      * 
      */
-    private class PrefixMenuItem extends MenuItem {
+    private final class PrefixMenuItem extends MenuItem {
 
         private Prefix prefix;
 

File: pdfsam-core/src/main/java/org/pdfsam/gui/event/TaskExecutionModulesLoadedEvent.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.pdfsam.gui.BaseTaskExecutionModule;
+import org.pdfsam.gui.module.BaseTaskExecutionModule;
 
 /**
  * Event sent to notify consumers that the available modules have been found and loaded by the IoC container.

File: pdfsam-core/src/main/java/org/pdfsam/gui/module/BaseTaskExecutionModule.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.module;
 
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;

File: pdfsam-core/src/main/java/org/pdfsam/gui/module/Module.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.module;
 
 import javax.swing.JPanel;
 

File: pdfsam-core/src/main/java/org/pdfsam/gui/module/TestModule.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.module;
 
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;

File: pdfsam-core/src/main/java/org/pdfsam/gui/support/FlatBorder.java
Patch:
@@ -1,6 +1,6 @@
 /* 
  * This file is part of the PDF Split And Merge source code
- * Created on 13/giu/2013
+ * Created on 22/set/2013
  * Copyright 2013 by Andrea Vacondio (andrea.vacondio@gmail.com).
  *
  * This program is free software: you can redistribute it and/or modify
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.support;
 
 import java.awt.Color;
 import java.awt.Component;
@@ -81,4 +81,4 @@ public boolean isBorderOpaque() {
         return false;
     }
 
-}
+}
\ No newline at end of file

File: pdfsam-core/src/main/java/org/pdfsam/gui/support/SharedJFileChooser.java
Patch:
@@ -16,7 +16,7 @@
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.support;
 
 import java.io.File;
 

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/output/DestinationPanel.java
Patch:
@@ -23,7 +23,7 @@
 import javax.swing.JFileChooser;
 import javax.swing.JPanel;
 
-import org.pdfsam.gui.SharedJFileChooser;
+import org.pdfsam.gui.support.SharedJFileChooser;
 import org.pdfsam.gui.view.BaseBrowsableField;
 import org.pdfsam.gui.view.Views;
 import org.pdfsam.support.filter.FileFilterType;

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/selection/IntegerColumn.java
Patch:
@@ -59,4 +59,7 @@ public Class<Integer> getColumnClass() {
         return Integer.class;
     }
 
+    public int compare(SelectionTableRowData o1, SelectionTableRowData o2) {
+        return getValueFor(o1).compareTo(getValueFor(o2));
+    }
 }

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/selection/SelectionTableColumn.java
Patch:
@@ -18,6 +18,8 @@
  */
 package org.pdfsam.gui.view.selection;
 
+import java.util.Comparator;
+
 import javax.swing.table.TableCellRenderer;
 
 /**
@@ -27,7 +29,7 @@
  * @param <T>
  *            {@link Comparable} type of the column data
  */
-public interface SelectionTableColumn<T extends Comparable<T>> {
+public interface SelectionTableColumn<T> extends Comparator<SelectionTableRowData> {
 
     String getColumnName();
 

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/selection/SelectionTableToolbarButtons.java
Patch:
@@ -32,8 +32,8 @@
 import org.bushe.swing.event.annotation.AnnotationProcessor;
 import org.bushe.swing.event.annotation.EventSubscriber;
 import org.pdfsam.context.DefaultI18nContext;
-import org.pdfsam.gui.SharedJFileChooser;
 import org.pdfsam.gui.event.EventNamespace;
+import org.pdfsam.gui.support.SharedJFileChooser;
 import org.pdfsam.gui.view.AbstractActionWithNamespace;
 import org.pdfsam.gui.view.JButtonWithNamespace;
 import org.pdfsam.pdf.PdfDocumentDescriptor;

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/ApplicationContextHolder.java
Patch:
@@ -18,7 +18,6 @@
  */
 package org.pdfsam.configuration;
 
-import org.pdfsam.update.UpdateCheckerConfig;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 
 /**
@@ -32,7 +31,7 @@ public final class ApplicationContextHolder {
     private AnnotationConfigApplicationContext ctx;
 
     private ApplicationContextHolder() {
-        ctx = new AnnotationConfigApplicationContext(PdfsamConfig.class, UpdateCheckerConfig.class);
+        ctx = new AnnotationConfigApplicationContext(PdfsamConfig.class);
         ctx.registerShutdownHook();
     }
 

File: pdfsam-gui/src/main/java/org/pdfsam/gui/MainFrame.java
Patch:
@@ -30,6 +30,8 @@
 import org.pdfsam.gui.log.JLogPanel;
 import org.pdfsam.gui.menu.MainMenuBar;
 import org.pdfsam.gui.menu.MenuType;
+import org.pdfsam.gui.module.BaseTaskExecutionModule;
+import org.pdfsam.gui.module.Module;
 import org.pdfsam.gui.status.StatusPanel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: pdfsam-gui/src/main/java/org/pdfsam/gui/WelcomePanel.java
Patch:
@@ -21,6 +21,7 @@
 import javax.swing.JPanel;
 
 import org.pdfsam.context.DefaultI18nContext;
+import org.pdfsam.gui.module.Module;
 import org.pdfsam.module.ModuleCategory;
 import org.pdfsam.module.ModuleDescriptor;
 

File: pdfsam-gui/src/main/java/org/pdfsam/gui/menu/MainMenuBar.java
Patch:
@@ -32,10 +32,10 @@
 import org.bushe.swing.event.annotation.EventSubscriber;
 import org.pdfsam.configuration.ApplicationContextHolder;
 import org.pdfsam.context.DefaultI18nContext;
-import org.pdfsam.gui.BaseTaskExecutionModule;
-import org.pdfsam.gui.Module;
 import org.pdfsam.gui.about.AboutDialog;
 import org.pdfsam.gui.event.TaskExecutionModulesLoadedEvent;
+import org.pdfsam.gui.module.BaseTaskExecutionModule;
+import org.pdfsam.gui.module.Module;
 import org.pdfsam.gui.preference.PreferencesDialog;
 import org.pdfsam.gui.support.SwingUtils;
 import org.pdfsam.gui.workspace.LoadWorkspaceAction;

File: pdfsam-gui/src/main/java/org/pdfsam/gui/menu/SystemContentAction.java
Patch:
@@ -22,7 +22,7 @@
 
 import javax.swing.AbstractAction;
 
-import org.pdfsam.gui.Module;
+import org.pdfsam.gui.module.Module;
 
 import bibliothek.gui.dock.common.CControl;
 import bibliothek.gui.dock.common.SingleCDockable;

File: pdfsam-gui/src/main/java/org/pdfsam/gui/preference/PreferencesPanel.java
Patch:
@@ -30,8 +30,8 @@
 import org.pdfsam.context.DefaultUserContext;
 import org.pdfsam.context.IntUserPreference;
 import org.pdfsam.context.StringUserPreference;
-import org.pdfsam.gui.FlatBorder;
-import org.pdfsam.gui.SharedJFileChooser;
+import org.pdfsam.gui.support.FlatBorder;
+import org.pdfsam.gui.support.SharedJFileChooser;
 import org.pdfsam.gui.view.AbstractValidableTextField;
 import org.pdfsam.gui.view.Views;
 import org.pdfsam.support.filter.FileFilterType;

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/selection/SelectionPanel.java
Patch:
@@ -51,7 +51,7 @@ public SelectionPanel(EventNamespace namespace) {
         add(new SelectionTableToolbar(namespace), BorderLayout.PAGE_START);
 
         tableModel = new SelectionTableModel(namespace, new SelectionTableColumn<?>[] { FileColumn.NAME,
-                IntegerColumn.PAGES, FileColumn.SIZE, StringColumn.PAGE_SELECTION, FileColumn.LAST_MODIFIED });
+                IntegerColumn.PAGES, LongColumn.SIZE, StringColumn.PAGE_SELECTION, LongColumn.LAST_MODIFIED });
         selectionTable = new SelectionTable(tableModel, namespace);
 
         selectionTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

File: pdfsam-core/src/main/java/org/pdfsam/context/DefaultUserContext.java
Patch:
@@ -89,7 +89,7 @@ public boolean isHighQualityThumbnails() {
 
     @Override
     public String getLocale() {
-        return prefs.get(StringUserPreference.LOCALE.toString(), "en_GB");
+        return prefs.get(StringUserPreference.LOCALE.toString(), StringUtils.EMPTY);
     }
 
     @Override

File: pdfsam-core/src/main/java/org/pdfsam/support/StringKeyValueItem.java
Patch:
@@ -31,7 +31,7 @@
  * @author Andrea Vacondio
  * 
  */
-public class StringKeyValueItem {
+public class StringKeyValueItem implements KeyValueItem<String, String> {
 
     private String key;
     private String value;

File: pdfsam-gui/src/main/java/org/pdfsam/configuration/PdfsamProperties.java
Patch:
@@ -34,7 +34,7 @@
  */
 public final class PdfsamProperties {
 
-    private static final Logger LOG = LoggerFactory.getLogger(PdfsamConfig.class);
+    private static final Logger LOG = LoggerFactory.getLogger(PdfsamProperties.class);
 
     public static final String VERSION = PdfsamPropertiesLoaderHolder.LOADER.getVersion();
     public static final String PACKAGE = PdfsamPropertiesLoaderHolder.LOADER.getPackageType();

File: pdfsam-core/src/main/java/org/pdfsam/gui/event/TaskExecutionModulesLoadedEvent.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class TaskExecutionModulesLoadedEvent {
 
-    private List<BaseTaskExecutionModule> modules = new ArrayList<BaseTaskExecutionModule>();
+    private List<BaseTaskExecutionModule> modules = new ArrayList<>();
 
     public void addAll(Collection<BaseTaskExecutionModule> modules) {
         this.modules.addAll(modules);

File: pdfsam-core/src/main/java/org/pdfsam/gui/support/ToolTipBuilder.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class ToolTipBuilder {
 
-    private List<String> lines = new ArrayList<String>();
+    private List<String> lines = new ArrayList<>();
 
     /**
      * Adds the given line to the builder

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/PdfVersionConstrainedCheckbox.java
Patch:
@@ -48,7 +48,7 @@ public PdfVersionConstrainedCheckbox(PdfVersion constraint) {
         this.constraint = constraint;
         addItemListener(new ItemStateChangedNotifier());
         setToolTipText(DefaultI18nContext.getInstance().i18n("Pdf version required: {0}",
-                Double.toString(constraint.getVersionAsDouble())));
+                Double.toString(this.constraint.getVersionAsDouble())));
     }
 
     public void setEventNamespace(EventNamespace namespace) {

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/Views.java
Patch:
@@ -167,7 +167,7 @@ private static JPanel newButtonsPanel(List<JButton> buttons) {
      * @return a panel with right aligned buttons for the given actions
      */
     public static JPanel newButtonsPanel(AbstractAction... actions) {
-        List<JButton> buttons = new ArrayList<JButton>();
+        List<JButton> buttons = new ArrayList<>();
         for (AbstractAction current : actions) {
             buttons.add(new JButton(current));
         }

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/selection/ClearSelectionTableEvent.java
Patch:
@@ -29,6 +29,6 @@
  */
 public class ClearSelectionTableEvent extends BaseEvent {
     public ClearSelectionTableEvent(EventNamespace namespace) {
-        // just to force constructor
+        super(namespace);
     }
 }

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/selection/SelectionTableModel.java
Patch:
@@ -41,8 +41,8 @@
  */
 public class SelectionTableModel extends AbstractTableModel implements WithEventNamespace {
 
-    private List<SelectionTableRowData> data = new ArrayList<SelectionTableRowData>();
-    private List<SelectionTableColumn<?>> columns = new ArrayList<SelectionTableColumn<?>>();
+    private List<SelectionTableRowData> data = new ArrayList<>();
+    private List<SelectionTableColumn<?>> columns = new ArrayList<>();
     private EventNamespace eventNamespace;
 
     public SelectionTableModel(EventNamespace eventNamespace, SelectionTableColumn<?>... columns) {

File: pdfsam-core/src/main/java/org/pdfsam/pdf/BasePdfLoadEvent.java
Patch:
@@ -33,7 +33,7 @@
  */
 class BasePdfLoadEvent extends BaseEvent {
 
-    private List<PdfDocumentDescriptor> documents = new ArrayList<PdfDocumentDescriptor>();
+    private List<PdfDocumentDescriptor> documents = new ArrayList<>();
 
     public BasePdfLoadEvent(EventNamespace namespace) {
         super(namespace);

File: pdfsam-core/src/main/java/org/pdfsam/pdf/PdfDocumentDescriptor.java
Patch:
@@ -46,7 +46,7 @@ public final class PdfDocumentDescriptor {
     private String password;
     private File file;
     private String version;
-    private Map<PdfMetadataKey, String> metadata = new HashMap<PdfMetadataKey, String>();
+    private Map<PdfMetadataKey, String> metadata = new HashMap<>();
 
     private PdfDocumentDescriptor(File file, String password) {
         this.file = file;

File: pdfsam-core/src/test/java/org/pdfsam/TestCycles.java
Patch:
@@ -24,7 +24,7 @@ public class TestCycles {
     private static final Logger LOG = LoggerFactory.getLogger(TestCycles.class);
 
     private JDepend jdepend = new JDepend();
-    private Collection<? extends Object> packages = new ArrayList<Object>();
+    private Collection<? extends Object> packages = new ArrayList<>();
 
     @Before
     public void setUp() throws IOException {

File: pdfsam-core/src/test/java/org/pdfsam/gui/event/EventNamespaceTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.pdfsam.TestUtils;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 /**
@@ -64,7 +63,7 @@ public void testIsParentOf() {
     @Test
     public void testIsParentOfItself() {
         EventNamespace root = EventNamespace.newParentInstance("root");
-        assertFalse(root.isParentOf(root));
+        assertTrue(root.isParentOf(root));
     }
 
     @Test

File: pdfsam-core/src/test/java/org/pdfsam/support/LRUMapTest.java
Patch:
@@ -33,7 +33,7 @@ public class LRUMapTest {
 
     @Test
     public void testPut() {
-        Map<String, String> victim = new LRUMap<String, String>(2);
+        Map<String, String> victim = new LRUMap<>(2);
         victim.put("1", "A");
         victim.put("2", "B");
         assertTrue(victim.size() == 2);

File: pdfsam-gui/src/main/java/org/pdfsam/gui/log/TextPaneAppender.java
Patch:
@@ -48,7 +48,7 @@
 public class TextPaneAppender extends AppenderBase<ILoggingEvent> {
     private static final Map<Level, SimpleAttributeSet> ATTRIBUTES;
     static {
-        Map<Level, SimpleAttributeSet> attributesCache = new HashMap<Level, SimpleAttributeSet>();
+        Map<Level, SimpleAttributeSet> attributesCache = new HashMap<>();
         attributesCache.put(Level.ERROR, new SimpleAttributeSet());
         attributesCache.put(Level.WARN, new SimpleAttributeSet());
         ATTRIBUTES = Collections.unmodifiableMap(attributesCache);

File: pdfsam-gui/src/main/java/org/pdfsam/gui/preference/LocalesComboBox.java
Patch:
@@ -34,7 +34,7 @@
  * @author Andrea Vacondio
  * 
  */
-class LocalesComboBox extends JComboBox {
+class LocalesComboBox extends JComboBox<StringKeyValueItem> {
 
     public LocalesComboBox() {
         initItems();

File: pdfsam-gui/src/main/java/org/pdfsam/gui/preference/PreferencesPanel.java
Patch:
@@ -105,7 +105,7 @@ void onValidInput() {
                 .i18n("Size in px:"),
                 DefaultI18nContext.getInstance().i18n("Pixel size of the thumbnails (between 130px and 390px)"));
 
-        JPanel thumbCreator = Views.newLabeledComponentWhiteBackground(new JComboBox(), DefaultI18nContext
+        JPanel thumbCreator = Views.newLabeledComponentWhiteBackground(new JComboBox<String>(), DefaultI18nContext
                 .getInstance().i18n("Thumbnails creator:"),
                 DefaultI18nContext.getInstance().i18n("Library used to generate thumbnails"));
 

File: pdfsam-gui/src/main/java/org/pdfsam/gui/preference/ThemesComboBox.java
Patch:
@@ -35,7 +35,7 @@
  * @author Andrea Vacondio
  * 
  */
-class ThemesComboBox extends JComboBox {
+class ThemesComboBox extends JComboBox<StringKeyValueItem> {
 
     public ThemesComboBox() {
         initItems();

File: pdfsam-gui/src/test/java/org/pdfsam/TestCycles.java
Patch:
@@ -24,7 +24,7 @@ public class TestCycles {
     private static final Logger LOG = LoggerFactory.getLogger(TestCycles.class);
 
     private JDepend jdepend = new JDepend();
-    private Collection<? extends Object> packages = new ArrayList<Object>();
+    private Collection<? extends Object> packages = new ArrayList<>();
 
     @Before
     public void setUp() throws IOException {

File: pdfsam-gui/src/test/java/org/pdfsam/configuration/PdfsamPropertiesTest.java
Patch:
@@ -18,11 +18,9 @@
  */
 package org.pdfsam.configuration;
 
-import junit.framework.Assert;
-
 import org.apache.commons.lang3.StringUtils;
+import org.junit.Assert;
 import org.junit.Test;
-import org.pdfsam.configuration.PdfsamProperties;
 
 /**
  * @author Andrea Vacondio

File: pdfsam-service/src/main/java/org/pdfsam/pdf/ITextPdfLoadService.java
Patch:
@@ -50,7 +50,7 @@ public class ITextPdfLoadService implements PdfLoadService {
 
     public List<PdfDocumentDescriptor> load(List<PdfDocumentDescriptor> toLoad) {
         LOG.debug(DefaultI18nContext.getInstance().i18n("Loading documents"));
-        List<PdfDocumentDescriptor> loaded = new ArrayList<PdfDocumentDescriptor>(toLoad.size());
+        List<PdfDocumentDescriptor> loaded = new ArrayList<>(toLoad.size());
         for (PdfDocumentDescriptor current : toLoad) {
             PdfReader reader = null;
             try {

File: pdfsam-service/src/test/java/org/pdfsam/pdf/ITextPdfLoadServiceTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() throws IOException {
     @Test
     public void load() {
         PdfDocumentDescriptor descriptor = PdfDocumentDescriptor.newDescriptorNoPassword(testFile);
-        List<PdfDocumentDescriptor> toLoad = new ArrayList<PdfDocumentDescriptor>();
+        List<PdfDocumentDescriptor> toLoad = new ArrayList<>();
         toLoad.add(descriptor);
         List<PdfDocumentDescriptor> result = victim.load(toLoad);
         assertEquals(1, result.size());

File: pdfsam-service/src/test/java/org/pdfsam/task/TestCycles.java
Patch:
@@ -42,7 +42,7 @@ public class TestCycles {
     private static final Logger LOG = LoggerFactory.getLogger(TestCycles.class);
 
     private JDepend jdepend = new JDepend();
-    private Collection<? extends Object> packages = new ArrayList<Object>();
+    private Collection<? extends Object> packages = new ArrayList<>();
 
     @Before
     public void setUp() throws IOException {

File: pdfsam-core/src/main/java/org/pdfsam/gui/BaseTaskExecutionModule.java
Patch:
@@ -37,7 +37,7 @@
 import org.sejda.model.notification.event.TaskExecutionFailedEvent;
 import org.sejda.model.parameter.base.TaskParameters;
 
-import static org.pdfsam.gui.Components.GAP;
+import static org.pdfsam.gui.view.Views.GAP;
 
 /**
  * Abstract implementation of a pdfsam module providing common features to every module whose purpose is to execute a pdf manipulation task.
@@ -86,7 +86,6 @@ private void init() {
     private JPanel buttonPanel() {
         JPanel buttonPanel = new JPanel();
         buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, GAP, GAP));
-        buttonPanel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, buttonPanel.getBackground().darker()));
         buttonPanel.add(runButton);
         return buttonPanel;
     }

File: pdfsam-core/src/main/java/org/pdfsam/gui/event/OnApplicationStartedEvent.java
Patch:
@@ -12,7 +12,7 @@
  * if not, write to the Free Software Foundation, Inc., 
  *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.event;
 
 /**
  * Event published when the application startup is completed.

File: pdfsam-core/src/main/java/org/pdfsam/gui/event/OnTaskExecutionModulesLoadedEvent.java
Patch:
@@ -12,13 +12,15 @@
  * if not, write to the Free Software Foundation, Inc., 
  *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.event;
 
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
+import org.pdfsam.gui.BaseTaskExecutionModule;
+
 /**
  * Event sent to perform once the available modules are found and loaded by the IoC container.
  * 

File: pdfsam-core/src/main/java/org/pdfsam/gui/support/Dialogs.java
Patch:
@@ -12,7 +12,7 @@
  * if not, write to the Free Software Foundation, Inc., 
  *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.support;
 
 import java.awt.Component;
 

File: pdfsam-core/src/main/java/org/pdfsam/gui/support/SwingUtils.java
Patch:
@@ -12,7 +12,7 @@
  * if not, write to the Free Software Foundation, Inc., 
  *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
-package org.pdfsam.gui;
+package org.pdfsam.gui.support;
 
 import java.awt.Dimension;
 import java.awt.Toolkit;

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/BaseBrowsableField.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 import static javax.swing.GroupLayout.Alignment.TRAILING;
-import static org.pdfsam.gui.Components.GAP;
+import static org.pdfsam.gui.view.Views.GAP;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 

File: pdfsam-core/src/main/java/org/pdfsam/gui/view/GradientPanel.java
Patch:
@@ -41,14 +41,15 @@ public class GradientPanel extends JPanel {
     public GradientPanel(GradientOrientation orientation) {
         require(orientation != null, "Orientation cannot be null");
         this.orientation = orientation;
+        // setBorder(BorderFactory.createLineBorder(startColor, 1));
     }
 
     public GradientPanel(GradientOrientation orientation, Color startColor, Color endColor) {
         this(orientation);
         require(startColor != null && endColor != null, "Gradient colors cannot be null");
         this.startColor = startColor;
         this.endColor = endColor;
-
+        // setBorder(BorderFactory.createLineBorder(startColor, 1));
     }
 
     @Override

File: pdfsam-core/src/main/java/org/pdfsam/module/PdfsamModule.java
Patch:
@@ -29,6 +29,6 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-public @interface Module {
+public @interface PdfsamModule {
     // nothing
 }

File: pdfsam-gui/src/main/java/org/pdfsam/App.java
Patch:
@@ -27,11 +27,11 @@
 import org.pdfsam.context.DefaultI18nContext;
 import org.pdfsam.context.DefaultUserContext;
 import org.pdfsam.gui.MainFrame;
-import org.pdfsam.gui.OnTaskExecutionModulesLoadedEvent;
-import org.pdfsam.gui.SwingUtils;
 import org.pdfsam.gui.BaseTaskExecutionModule;
 import org.pdfsam.gui.WelcomePanel;
+import org.pdfsam.gui.event.OnTaskExecutionModulesLoadedEvent;
 import org.pdfsam.gui.menu.MenuType;
+import org.pdfsam.gui.support.SwingUtils;
 import org.pdfsam.sound.PlaySoundController;
 import org.pdfsam.update.UpdateCheckRequest;
 import org.pdfsam.update.UpdateController;

File: pdfsam-gui/src/main/java/org/pdfsam/AppConfig.java
Patch:
@@ -14,7 +14,7 @@
  */
 package org.pdfsam;
 
-import org.pdfsam.module.Module;
+import org.pdfsam.module.PdfsamModule;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.ComponentScan.Filter;
 import org.springframework.context.annotation.Configuration;
@@ -26,7 +26,7 @@
  * 
  */
 @Configuration
-@ComponentScan(basePackages = { "org.pdfsam.service", "org.pdfsam.module" }, includeFilters = @Filter(value = Module.class))
+@ComponentScan(basePackages = { "org.pdfsam.service", "org.pdfsam.module" }, includeFilters = @Filter(value = PdfsamModule.class))
 public class AppConfig {
     // nothing
 }

File: pdfsam-gui/src/main/java/org/pdfsam/gui/MainFrame.java
Patch:
@@ -23,6 +23,7 @@
 import org.bushe.swing.event.annotation.EventSubscriber;
 import org.pdfsam.Pdfsam;
 import org.pdfsam.context.DefaultI18nContext;
+import org.pdfsam.gui.event.OnTaskExecutionModulesLoadedEvent;
 import org.pdfsam.gui.log.JLogPanel;
 import org.pdfsam.gui.menu.MainMenuBar;
 import org.pdfsam.gui.menu.MenuType;

File: pdfsam-gui/src/main/java/org/pdfsam/gui/log/JTextLogPane.java
Patch:
@@ -25,8 +25,8 @@
 import org.bushe.swing.event.annotation.AnnotationProcessor;
 import org.bushe.swing.event.annotation.EventSubscriber;
 import org.pdfsam.App;
-import org.pdfsam.gui.Dialogs;
 import org.pdfsam.gui.SharedJFileChooser;
+import org.pdfsam.gui.support.Dialogs;
 import org.pdfsam.support.filter.FileFilterType;
 
 import static org.pdfsam.support.io.TextFileWriter.writeContent;

File: pdfsam-gui/src/main/java/org/pdfsam/gui/menu/MainMenuBar.java
Patch:
@@ -28,11 +28,11 @@
 import org.bushe.swing.event.annotation.EventSubscriber;
 import org.pdfsam.context.DefaultI18nContext;
 import org.pdfsam.gui.Module;
-import org.pdfsam.gui.OnTaskExecutionModulesLoadedEvent;
-import org.pdfsam.gui.SwingUtils;
 import org.pdfsam.gui.BaseTaskExecutionModule;
 import org.pdfsam.gui.about.AboutDialog;
+import org.pdfsam.gui.event.OnTaskExecutionModulesLoadedEvent;
 import org.pdfsam.gui.preference.PreferencesDialog;
+import org.pdfsam.gui.support.SwingUtils;
 import org.pdfsam.gui.workspace.LoadWorkspaceAction;
 import org.pdfsam.gui.workspace.SaveWorkspaceAction;
 import org.pdfsam.module.ModuleCategory;

File: pdfsam-gui/src/main/java/org/pdfsam/gui/preference/PreferencePanel.java
Patch:
@@ -27,7 +27,7 @@
 import javax.swing.JComponent;
 import javax.swing.JPanel;
 
-import static org.pdfsam.gui.Components.GAP;
+import static org.pdfsam.gui.view.Views.GAP;
 
 /**
  * Panel used in the preferences frame with some common layout setting

File: pdfsam-gui/src/main/java/org/pdfsam/gui/preference/BrowsableField.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.pdfsam.context.DefaultUserContext;
 import org.pdfsam.context.StringUserPreference;
-import org.pdfsam.gui.balloon.BalloonUtils;
 
 import static javax.swing.GroupLayout.Alignment.TRAILING;
 import static org.pdfsam.gui.Components.GAP;
@@ -64,8 +63,8 @@ abstract class BrowsableField extends JPanel {
     }
 
     void setBalloonTooltip(String tooltip) {
-        BalloonUtils.createBalloonFor(this, tooltip);
-        BalloonUtils.createBalloonFor(field, tooltip);
+        this.setToolTipText(tooltip);
+        field.setToolTipText(tooltip);
     }
 
     void setDefaultFieldValue(String defaultValue) {

File: pdfsam-core/src/main/java/org/pdfsam/sound/DefaultSoundPlayer.java
Patch:
@@ -36,7 +36,7 @@ public class DefaultSoundPlayer implements SoundPlayer {
 
     public void play(Sound sound) {
         try {
-            AudioInputStream aundioStream = AudioSystem.getAudioInputStream(this.getClass().getResourceAsStream(
+            AudioInputStream aundioStream = AudioSystem.getAudioInputStream(this.getClass().getResource(
                     sound.getSource()));
             DataLine.Info info = new DataLine.Info(Clip.class, aundioStream.getFormat());
             Clip clip = (Clip) AudioSystem.getLine(info);

