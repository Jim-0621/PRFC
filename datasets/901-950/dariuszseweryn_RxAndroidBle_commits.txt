File: rxandroidble/src/test/java/com/polidea/rxandroidble2/exceptions/BleScanExceptionTest.java
Patch:
@@ -12,6 +12,6 @@ public void toStringShouldContainMessage() {
         BleScanException out = new BleScanException(BleScanException.BLUETOOTH_DISABLED);
 
         // expect
-        assertEquals(out.toString(), "sscom.polidea.rxandroidble2.exceptions.BleScanException: Bluetooth disabled (code 1)");
+        assertEquals(out.toString(), "com.polidea.rxandroidble2.exceptions.BleScanException: Bluetooth disabled (code 1)");
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/ConnectionComponent.java
Patch:
@@ -21,6 +21,7 @@ private NamedBooleans() { }
     class NamedInts {
         static final String GATT_WRITE_MTU_OVERHEAD = "GATT_WRITE_MTU_OVERHEAD";
         static final String GATT_MTU_MINIMUM = "GATT_MTU_MINIMUM";
+        static final String GATT_MAX_ATTR_LENGTH = "GATT_MAX_ATTR_LENGTH";
         private NamedInts() { }
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/RxBleDeviceImpl.java
Patch:
@@ -89,7 +89,7 @@ public String getName() {
 
     private String getName(boolean placeholderIfNoPermission) {
         if (placeholderIfNoPermission && !checkerConnectPermission.isConnectRuntimePermissionGranted()) {
-            return "[NO SCAN_PERMISSION]";
+            return "[NO BLUETOOTH_CONNECT PERMISSION]";
         }
         return bluetoothDevice.getName();
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/SingleResponseOperation.java
Patch:
@@ -65,7 +65,8 @@ final protected void protectedRun(final ObservableEmitter<T> emitter, final Queu
     /**
      * A function that should return {@link Observable} derived from the passed {@link RxBleGattCallback}.
      * The returned {@link Observable} will be automatically unsubscribed after the first emission.
-     * The returned {@link Observable} is a subject to {@link Observable#timeout(long, TimeUnit, Scheduler, io.reactivex.ObservableSource)}
+     * The returned {@link Observable} is a subject to
+     * {@link Observable#timeout(long, TimeUnit, Scheduler, io.reactivex.ObservableSource)}
      * and by default it will throw {@link BleGattCallbackTimeoutException}. This behaviour can be overridden by overriding
      * {@link #timeoutFallbackProcedure(BluetoothGatt, RxBleGattCallback, Scheduler)}.
      *

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/QueueReleasingEmitterWrapper.java
Patch:
@@ -14,9 +14,11 @@
 
 /**
  * A convenience class to use in {@link QueueOperation} subclasses. It wraps the {@link Emitter}
- * and {@link QueueReleaseInterface} and makes sure that the {@link io.reactivex.disposables.Disposable} it was subscribed to will finish
+ * and {@link QueueReleaseInterface} and makes sure that the
+ * {@link io.reactivex.disposables.Disposable} it was subscribed to will finish
  * and call {@link QueueReleaseInterface#release()} in either {@link #onComplete()} or {@link #onError(Throwable)} in case of the wrapped
  * emitter being unsubscribed / canceled.
+ *
  * @param <T> parameter of the wrapped {@link Emitter}
  */
 public class QueueReleasingEmitterWrapper<T> implements Observer<T>, Cancellable {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/InternalToExternalScanResultConverter.java
Patch:
@@ -27,7 +27,8 @@ public ScanResult apply(RxBleInternalScanResult rxBleInternalScanResult) {
                 rxBleInternalScanResult.getRssi(),
                 rxBleInternalScanResult.getTimestampNanos(),
                 rxBleInternalScanResult.getScanCallbackType(),
-                rxBleInternalScanResult.getScanRecord()
+                rxBleInternalScanResult.getScanRecord(),
+                rxBleInternalScanResult.isConnectable()
         );
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/exceptions/BleGattException.java
Patch:
@@ -69,8 +69,8 @@ private static String createMessage(@Nullable BluetoothGatt gatt, int status, Bl
         }
 
         final String statusDescription = GattStatusParser.getGattCallbackStatusDescription(status);
-        final String link
-                = "https://cs.android.com/android/platform/superproject/+/master:packages/modules/Bluetooth/system/stack/include/gatt_api.h";
+        final String link =
+                "https://cs.android.com/android/platform/superproject/+/master:packages/modules/Bluetooth/system/stack/include/gatt_api.h";
         return String.format("GATT exception from %s, status %d (%s), type %s. (Look up status 0x%02x here %s)",
                 LoggerUtil.commonMacMessage(gatt), status, statusDescription, bleGattOperationType, status, link);
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/AndroidScanObjectsConverter.java
Patch:
@@ -67,8 +67,10 @@ private static android.bluetooth.le.ScanFilter toNative(ScanFilter scanFilter) {
         if (scanFilter.getServiceDataUuid() != null) {
             builder.setServiceData(scanFilter.getServiceDataUuid(), scanFilter.getServiceData(), scanFilter.getServiceDataMask());
         }
+        if (scanFilter.getDeviceAddress() != null) {
+            builder.setDeviceAddress(scanFilter.getDeviceAddress());
+        }
         return builder
-                .setDeviceAddress(scanFilter.getDeviceAddress())
                 .setDeviceName(scanFilter.getDeviceName())
                 .setManufacturerData(scanFilter.getManufacturerId(), scanFilter.getManufacturerData(), scanFilter.getManufacturerDataMask())
                 .setServiceUuid(scanFilter.getServiceUuid(), scanFilter.getServiceUuidMask())

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleClientMock.java
Patch:
@@ -395,7 +395,7 @@ public BackgroundScanner getBackgroundScanner() {
 
     @Override
     public Observable<State> observeStateChanges() {
-        return Observable.just(State.READY);
+        return Observable.never();
     }
 
     @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/UUIDUtil.java
Patch:
@@ -16,7 +16,7 @@
  * Internal helper class for extracting list of Service UUIDs from Advertisement data
  *
  * @link http://stackoverflow.com/questions/31668791/how-can-i-read-uuids-from-advertisement-data-ios-overflow-area-in-android
- * @deprecated use {@link com.polidea.rxandroidble2.internal.util.ScanRecordParser} instead.
+ * @deprecated use {@link com.polidea.rxandroidble2.helpers.AdvertisedServiceUUIDExtractor} instead.
  * This class may change in later releases.
  */
 @Deprecated

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleClientMock.java
Patch:
@@ -280,6 +280,7 @@ public Set<RxBleDevice> getBondedDevices() {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public Observable<RxBleScanResult> scanBleDevices(@Nullable UUID... filterServiceUUIDs) {
         return createScanOperation(filterServiceUUIDs);
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/DisconnectionRouter.java
Patch:
@@ -121,9 +121,9 @@ public Observable<BleException> asValueOnlyObservable() {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <T> Observable<T> asErrorOnlyObservable() {
         // [DS 11.03.2019] Not an elegant solution but it should decrease amount of allocations. Should not emit values â€”> safe to cast.
-        //noinspection unchecked
         return (Observable<T>) firstDisconnectionExceptionObs;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleGattCallback.java
Patch:
@@ -277,8 +277,8 @@ private static boolean propagateStatusError(Output<?> output, BleGattException e
         return true;
     }
 
+    @SuppressWarnings("unchecked")
     private <T> Observable<T> withDisconnectionHandling(Output<T> output) {
-        //noinspection unchecked
         return Observable.merge(
                 disconnectionRouter.<T>asErrorOnlyObservable(),
                 output.valueRelay,

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/CheckerLocationProvider.java
Patch:
@@ -22,6 +22,7 @@ public class CheckerLocationProvider {
         this.locationManager = locationManager;
     }
 
+    @SuppressWarnings("deprecation")
     public boolean isLocationProviderEnabled() {
         if (Build.VERSION.SDK_INT >= 19 /* Build.VERSION_CODES.KITKAT */) {
             try {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/ObservableUtil.java
Patch:
@@ -22,8 +22,8 @@ public static <T> Observable<T> justOnNext(T onNext) {
         return Observable.<T>never().startWith(onNext);
     }
 
+    @SuppressWarnings("unchecked")
     public static <T> ObservableTransformer<T, T> identityTransformer() {
-        //noinspection unchecked
         return (ObservableTransformer<T, T>) IDENTITY_TRANSFORMER;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/UUIDUtil.java
Patch:
@@ -31,6 +31,7 @@
  * This class may change in later releases.
  */
 @Deprecated
+@SuppressWarnings("deprecation")
 public class UUIDUtil {
 
     // The following data type values are assigned by Bluetooth SIG.

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -546,8 +546,8 @@ public SingleSource<BluetoothGattDescriptor> apply(RxBleDeviceServices rxBleDevi
                     return rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid);
                 }
             }).flatMapCompletable(new Function<BluetoothGattDescriptor, Completable>() {
-                        @Override
-                        public Completable apply(final BluetoothGattDescriptor descriptor) throws Exception {
+                @Override
+                public Completable apply(final BluetoothGattDescriptor descriptor) throws Exception {
                     return writeDescriptor(descriptor, data);
                 }
             });

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/Callbacks/RxBleCharacteristicReadCallback.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * An interface for a user callback for handling characteristic read requests
  */
-public interface RxBleCharacteristicReadCallback extends RxBleReadCallback<BluetoothGattCharacteristic> {
+public interface RxBleCharacteristicReadCallback {
 
     /**
      * Handles a read on a GATT characteristic
@@ -17,6 +17,5 @@ public interface RxBleCharacteristicReadCallback extends RxBleReadCallback<Bluet
      * @param result the result handler
      * @throws Exception on error
      */
-    @Override
     void handle(RxBleDeviceMock device, BluetoothGattCharacteristic characteristic, RxBleGattReadResultMock result) throws Exception;
 }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/Callbacks/RxBleCharacteristicWriteCallback.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * An interface for a user callback for handling characteristic write requests
  */
-public interface RxBleCharacteristicWriteCallback extends RxBleWriteCallback<BluetoothGattCharacteristic> {
+public interface RxBleCharacteristicWriteCallback {
 
     /**
      * Handles a write on a GATT characteristic
@@ -18,7 +18,6 @@ public interface RxBleCharacteristicWriteCallback extends RxBleWriteCallback<Blu
      * @param result the result handler
      * @throws Exception on error
      */
-    @Override
     void handle(RxBleDeviceMock device,
                 BluetoothGattCharacteristic characteristic,
                 byte[] data,

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/Callbacks/RxBleDescriptorReadCallback.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * An interface for a user callback for handling descriptor read requests
  */
-public interface RxBleDescriptorReadCallback extends RxBleReadCallback<BluetoothGattDescriptor> {
+public interface RxBleDescriptorReadCallback {
 
     /**
      * Handles a read on a GATT descriptor
@@ -17,6 +17,5 @@ public interface RxBleDescriptorReadCallback extends RxBleReadCallback<Bluetooth
      * @param result the result handler
      * @throws Exception on error
      */
-    @Override
     void handle(RxBleDeviceMock device, BluetoothGattDescriptor descriptor, RxBleGattReadResultMock result) throws Exception;
 }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/Callbacks/RxBleDescriptorWriteCallback.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * An interface for a user callback for handling descriptor write requests
  */
-public interface RxBleDescriptorWriteCallback extends RxBleWriteCallback<BluetoothGattDescriptor> {
+public interface RxBleDescriptorWriteCallback {
 
     /**
      * Handles a write on a GATT descriptor
@@ -18,6 +18,5 @@ public interface RxBleDescriptorWriteCallback extends RxBleWriteCallback<Bluetoo
      * @param result the result handler
      * @throws Exception on error
      */
-    @Override
     void handle(RxBleDeviceMock device, BluetoothGattDescriptor descriptor, byte[] data, RxBleGattWriteResultMock result) throws Exception;
 }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/Callbacks/RxBleReadCallback.java
Patch:
@@ -7,7 +7,8 @@
 
 /**
  * A generic interface for a user callback for handling read requests
- * @param <T> The type of attribute ({@link android.bluetooth.BluetoothGattCharacteristic} or {@link android.bluetooth.BluetoothGattDescriptor})
+ * @param <T> The type of attribute ({@link android.bluetooth.BluetoothGattCharacteristic} or
+ * {@link android.bluetooth.BluetoothGattDescriptor})
  */
 public interface RxBleReadCallback<T> {
     /**

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/Callbacks/RxBleWriteCallback.java
Patch:
@@ -8,7 +8,8 @@
 
 /**
  * A generic interface for a user callback for handling write requests
- * @param <T> The type of attribute ({@link android.bluetooth.BluetoothGattCharacteristic} or {@link android.bluetooth.BluetoothGattDescriptor})
+ * @param <T> The type of attribute ({@link android.bluetooth.BluetoothGattCharacteristic} or
+ * {@link android.bluetooth.BluetoothGattDescriptor})
  */
 public interface RxBleWriteCallback<T> {
     /**

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -412,7 +412,7 @@ public void accept(BluetoothGattDescriptor bluetoothGattDescriptor) throws Excep
                         bluetoothGattDescriptor.setValue(data);
                     }
                 })
-                .toCompletable();
+                .ignoreElement();
     }
 
     @Override

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleClientMock.java
Patch:
@@ -210,6 +210,7 @@ public Set<RxBleDevice> getBondedDevices() {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public Observable<RxBleScanResult> scanBleDevices(@Nullable UUID... filterServiceUUIDs) {
         return createScanOperation(filterServiceUUIDs);
     }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -131,6 +131,7 @@ public Single<RxBleDeviceServices> discoverServices(long timeout, @NonNull TimeU
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public Single<BluetoothGattCharacteristic> getCharacteristic(@NonNull final UUID characteristicUuid) {
         return discoverServices()
                 .flatMap(new Function<RxBleDeviceServices, SingleSource<? extends BluetoothGattCharacteristic>>() {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/DisconnectionRouter.java
Patch:
@@ -121,9 +121,9 @@ public Observable<BleException> asValueOnlyObservable() {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <T> Observable<T> asErrorOnlyObservable() {
         // [DS 11.03.2019] Not an elegant solution but it should decrease amount of allocations. Should not emit values â€”> safe to cast.
-        //noinspection unchecked
         return (Observable<T>) firstDisconnectionExceptionObs;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleGattCallback.java
Patch:
@@ -277,8 +277,8 @@ private static boolean propagateStatusError(Output<?> output, BleGattException e
         return true;
     }
 
+    @SuppressWarnings("unchecked")
     private <T> Observable<T> withDisconnectionHandling(Output<T> output) {
-        //noinspection unchecked
         return Observable.merge(
                 disconnectionRouter.<T>asErrorOnlyObservable(),
                 output.valueRelay,

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/CheckerLocationProvider.java
Patch:
@@ -22,6 +22,7 @@ public class CheckerLocationProvider {
         this.locationManager = locationManager;
     }
 
+    @SuppressWarnings("deprecation")
     public boolean isLocationProviderEnabled() {
         if (Build.VERSION.SDK_INT >= 19 /* Build.VERSION_CODES.KITKAT */) {
             try {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/ObservableUtil.java
Patch:
@@ -22,8 +22,8 @@ public static <T> Observable<T> justOnNext(T onNext) {
         return Observable.<T>never().startWith(onNext);
     }
 
+    @SuppressWarnings("unchecked")
     public static <T> ObservableTransformer<T, T> identityTransformer() {
-        //noinspection unchecked
         return (ObservableTransformer<T, T>) IDENTITY_TRANSFORMER;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/RxBleAdapterWrapper.java
Patch:
@@ -38,10 +38,12 @@ public boolean isBluetoothEnabled() {
         return bluetoothAdapter != null && bluetoothAdapter.isEnabled();
     }
 
+    @SuppressWarnings("deprecation")
     public boolean startLegacyLeScan(BluetoothAdapter.LeScanCallback leScanCallback) {
         return bluetoothAdapter.startLeScan(leScanCallback);
     }
 
+    @SuppressWarnings("deprecation")
     public void stopLegacyLeScan(BluetoothAdapter.LeScanCallback leScanCallback) {
         bluetoothAdapter.stopLeScan(leScanCallback);
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/UUIDUtil.java
Patch:
@@ -31,6 +31,7 @@
  * This class may change in later releases.
  */
 @Deprecated
+@SuppressWarnings("deprecation")
 public class UUIDUtil {
 
     // The following data type values are assigned by Bluetooth SIG.

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleClientMock.java
Patch:
@@ -405,7 +405,7 @@ public ScanResult apply(RxBleDeviceMock rxBleDeviceMock) {
                     @Override
                     public boolean test(ScanResult scanResult) {
                         for (ScanFilter filter : scanFilters) {
-                            if (!filter.matches(scanResult)) {
+                            if (!filter.matches((RxBleScanResultMock) scanResult)) {
                                 return false;
                             }
                         }
@@ -421,7 +421,7 @@ private RxBleScanResultMock createScanResult(RxBleDeviceMock rxBleDeviceMock) {
 
     @NonNull
     private static RxBleScanResultMock convertToPublicScanResult(RxBleDevice bleDevice, Integer rssi, ScanRecord scanRecord) {
-        return new RxBleScanResultMock (
+        return new RxBleScanResultMock(
                 bleDevice,
                 rssi,
                 System.currentTimeMillis() * 1000000,

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble2/mockrxandroidble/RxBleClientMock.java
Patch:
@@ -24,10 +24,7 @@
 import java.util.Set;
 import java.util.UUID;
 
-import io.reactivex.Completable;
 import io.reactivex.Observable;
-import io.reactivex.Single;
-import io.reactivex.functions.BiFunction;
 import io.reactivex.functions.Function;
 import io.reactivex.functions.Predicate;
 import io.reactivex.subjects.ReplaySubject;

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/logger/LoggerUtil.java
Patch:
@@ -19,7 +19,7 @@ private LoggerUtil() {
     private final static char[] HEX_ARRAY = "0123456789ABCDEF".toCharArray();
 
     public static String bytesToHex(byte[] bytes) {
-        if (bytes == null) return String.valueOf(null);
+        if (bytes == null) return "null";
 
         if (!RxBleLog.getShouldLogAttributeValues()) {
             return "[...]";

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/exceptions/BleScanException.java
Patch:
@@ -39,7 +39,8 @@ public class BleScanException extends BleException {
 
     /**
      * Scan did not start correctly because the user did not accept access to location services. On Android 6.0 and up you must ask the
-     * user about <b>ACCESS_COARSE_LOCATION</b> in runtime.
+     * user about <b>ACCESS_COARSE_LOCATION</b> or <b>ACCESS_FINE_LOCATION</b> in runtime. On Android 10.0 and above only
+     * <b>ACCESS_FINE_LOCATION</b> is accepted.
      */
     public static final int LOCATION_PERMISSION_MISSING = 3;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/LocationServicesStatusApi23.java
Patch:
@@ -28,7 +28,7 @@ public class LocationServicesStatusApi23 implements LocationServicesStatus {
     }
 
     public boolean isLocationPermissionOk() {
-        return checkerLocationPermission.isLocationPermissionGranted();
+        return checkerLocationPermission.areScanPermissionsOk();
     }
 
     public boolean isLocationProviderOk() {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleGattCallback.java
Patch:
@@ -184,7 +184,7 @@ public void onReliableWriteCompleted(BluetoothGatt gatt, int status) {
 
         @Override
         public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {
-            LoggerUtil.logCallback("onMtuChanged", gatt, status, rssi);
+            LoggerUtil.logCallback("onReadRemoteRssi", gatt, status, rssi);
             nativeCallbackDispatcher.notifyNativeReadRssiCallback(gatt, rssi, status);
             super.onReadRemoteRssi(gatt, rssi, status);
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/DisconnectionRouter.java
Patch:
@@ -123,6 +123,7 @@ public Observable<BleException> asValueOnlyObservable() {
     @Override
     public <T> Observable<T> asErrorOnlyObservable() {
         // [DS 11.03.2019] Not an elegant solution but it should decrease amount of allocations. Should not emit values so â€”> safe to cast.
+        //noinspection unchecked
         return (Observable<T>) firstDisconnectionExceptionObs;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/UUIDUtil.java
Patch:
@@ -126,7 +126,7 @@ public ScanRecord parseFromBytes(byte[] scanRecord) {
 
         int currentPos = 0;
         int advertiseFlag = -1;
-        List<ParcelUuid> serviceUuids = new ArrayList<ParcelUuid>();
+        List<ParcelUuid> serviceUuids = new ArrayList<>();
         String localName = null;
         int txPowerLevel = Integer.MIN_VALUE;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/RxBleDeviceImpl.java
Patch:
@@ -26,7 +26,7 @@ class RxBleDeviceImpl implements RxBleDevice {
     private final BluetoothDevice bluetoothDevice;
     private final Connector connector;
     private final BehaviorRelay<RxBleConnection.RxBleConnectionState> connectionStateRelay;
-    private AtomicBoolean isConnected = new AtomicBoolean(false);
+    private final AtomicBoolean isConnected = new AtomicBoolean(false);
 
     @Inject
     RxBleDeviceImpl(

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/RxBleLog.java
Patch:
@@ -40,7 +40,7 @@ public class RxBleLog {
     private static final Pattern ANONYMOUS_CLASS = Pattern.compile("\\$\\d+$");
     private static final ThreadLocal<String> NEXT_TAG = new ThreadLocal<>();
 
-    private static LogOptions.Logger logcatLogger = new LogOptions.Logger() {
+    private static final LogOptions.Logger LOGCAT_LOGGER = new LogOptions.Logger() {
         @Override
         public void log(final int level, final String tag, final String msg) {
             Log.println(level, tag, msg);
@@ -53,7 +53,7 @@ public void log(final int level, final String tag, final String msg) {
             LogConstants.NONE,
             false,
             true,
-            logcatLogger
+            LOGCAT_LOGGER
     );
 
     private RxBleLog() {
@@ -99,7 +99,7 @@ public interface Logger {
     @Deprecated
     public static void setLogger(@Nullable final Logger logger) {
         LogOptions.Logger loggerToSet = logger == null
-                ? logcatLogger
+                ? LOGCAT_LOGGER
                 : new LogOptions.Logger() {
             @Override
             public void log(int level, String tag, String msg) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/IllegalOperationChecker.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class IllegalOperationChecker {
 
-    private IllegalOperationHandler resultHandler;
+    private final IllegalOperationHandler resultHandler;
 
     @Inject
     public IllegalOperationChecker(IllegalOperationHandler resultHandler) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/IllegalOperationHandler.java
Patch:
@@ -12,7 +12,7 @@
  */
 public abstract class IllegalOperationHandler {
 
-    protected IllegalOperationMessageCreator messageCreator;
+    protected final IllegalOperationMessageCreator messageCreator;
 
     IllegalOperationHandler(IllegalOperationMessageCreator messageCreator) {
         this.messageCreator = messageCreator;

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/IllegalOperationMessageCreator.java
Patch:
@@ -12,7 +12,7 @@
 
 public class IllegalOperationMessageCreator {
 
-    private CharacteristicPropertiesParser propertiesParser;
+    private final CharacteristicPropertiesParser propertiesParser;
 
     @Inject
     public IllegalOperationMessageCreator(CharacteristicPropertiesParser propertiesParser) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleGattCallback.java
Patch:
@@ -67,7 +67,7 @@ public RxBleGattCallback(@Named(ClientComponent.NamedSchedulers.BLUETOOTH_CALLBA
         this.nativeCallbackDispatcher = nativeCallbackDispatcher;
     }
 
-    private BluetoothGattCallback bluetoothGattCallback = new BluetoothGattCallback() {
+    private final BluetoothGattCallback bluetoothGattCallback = new BluetoothGattCallback() {
 
         @Override
         public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/ServiceDiscoveryManager.java
Patch:
@@ -35,7 +35,7 @@ class ServiceDiscoveryManager {
     private final BluetoothGatt bluetoothGatt;
     private final OperationsProvider operationProvider;
     private Single<RxBleDeviceServices> deviceServicesObservable;
-    private Subject<TimeoutConfiguration> timeoutBehaviorSubject = BehaviorSubject.<TimeoutConfiguration>create().toSerialized();
+    private final Subject<TimeoutConfiguration> timeoutBehaviorSubject = BehaviorSubject.<TimeoutConfiguration>create().toSerialized();
     private boolean hasCachedResults = false;
 
     @Inject

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/DescriptorWriteOperation.java
Patch:
@@ -19,8 +19,8 @@
 
 public class DescriptorWriteOperation extends SingleResponseOperation<byte[]> {
 
-    private BluetoothGattDescriptor bluetoothGattDescriptor;
-    private byte[] data;
+    private final BluetoothGattDescriptor bluetoothGattDescriptor;
+    private final byte[] data;
     private final int bluetoothGattCharacteristicDefaultWriteType;
 
     DescriptorWriteOperation(RxBleGattCallback rxBleGattCallback,

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/ClientOperationQueueImpl.java
Patch:
@@ -23,7 +23,7 @@
 
 public class ClientOperationQueueImpl implements ClientOperationQueue {
 
-    private OperationPriorityFifoBlockingQueue queue = new OperationPriorityFifoBlockingQueue();
+    private final OperationPriorityFifoBlockingQueue queue = new OperationPriorityFifoBlockingQueue();
 
     @Inject
     public ClientOperationQueueImpl(@Named(ClientComponent.NamedSchedulers.BLUETOOTH_INTERACTION) final Scheduler callbackScheduler) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ConnectionPriorityChangeOperation.java
Patch:
@@ -58,7 +58,7 @@ private String connectionPriorityToString(int connectionPriority) {
                 return "CONNECTION_PRIORITY_BALANCED";
             case BluetoothGatt.CONNECTION_PRIORITY_HIGH:
             default:
-                return "CONNECTION_PRIORITY_BALANCED";
+                return "CONNECTION_PRIORITY_HIGH";
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/ConnectionSubscriptionWatcher.java
Patch:
@@ -2,7 +2,7 @@
 
 
 /**
- * Interface for all classes that should be called when the user subscribes/unsubscribes to
+ * Interface for all classes that should be called when the user subscribes to/disposes
  * {@link com.polidea.rxandroidble2.RxBleDevice#establishConnection(boolean)}
  *
  * The binding which injects the interface to a {@link ConnectorImpl} is in {@link ConnectionModule}
@@ -16,7 +16,7 @@ public interface ConnectionSubscriptionWatcher {
     void onConnectionSubscribed();
 
     /**
-     * Method to be called when the user unsubscribes to an individual
+     * Method to be called when the user disposes an individual
      * {@link com.polidea.rxandroidble2.RxBleDevice#establishConnection(boolean)}
      */
     void onConnectionUnsubscribed();

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/NativeCallbackDispatcher.java
Patch:
@@ -90,7 +90,7 @@ void notifyNativeReadCallback(BluetoothGatt gatt, BluetoothGattCharacteristic ch
         }
     }
 
-    void setNativeCallabackHidden(HiddenBluetoothGattCallback callbackHidden) {
+    void setNativeCallbackHidden(HiddenBluetoothGattCallback callbackHidden) {
         this.nativeCallbackHidden = callbackHidden;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleGattCallback.java
Patch:
@@ -290,7 +290,7 @@ public BluetoothGattCallback getBluetoothGattCallback() {
     }
 
     /**
-     * @return Observable that never emits onNexts.
+     * @return Observable that never emits onNext.
      * @throws BleDisconnectedException emitted in case of a disconnect that is a part of the normal flow
      * @throws BleGattException         emitted in case of connection was interrupted unexpectedly.
      */
@@ -371,7 +371,7 @@ public void setNativeCallback(BluetoothGattCallback callback) {
      * @param callbackHidden the object to be called
      */
     public void setHiddenNativeCallback(HiddenBluetoothGattCallback callbackHidden) {
-        nativeCallbackDispatcher.setNativeCallabackHidden(callbackHidden);
+        nativeCallbackDispatcher.setNativeCallbackHidden(callbackHidden);
     }
 
     private static class Output<T> {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/QueueReleasingEmitterWrapper.java
Patch:
@@ -14,9 +14,9 @@
 
 /**
  * A convenience class to use in {@link QueueOperation} subclasses. It wraps the {@link Emitter}
- * and {@link QueueReleaseInterface} and makes sure that the {@link rx.Subscription} it was subscribed to will finish and call
- * {@link QueueReleaseInterface#release()} in either {@link #onCompleted()} or {@link #onError(Throwable)} in case of the wrapped emitter
- * being unsubscribed / canceled.
+ * and {@link QueueReleaseInterface} and makes sure that the {@link io.reactivex.disposables.Disposable} it was subscribed to will finish
+ * and call {@link QueueReleaseInterface#release()} in either {@link #onComplete()} or {@link #onError(Throwable)} in case of the wrapped
+ * emitter being unsubscribed / canceled.
  * @param <T> parameter of the wrapped {@link Emitter}
  */
 public class QueueReleasingEmitterWrapper<T> implements Observer<T>, Cancellable {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/scan/ScanFilter.java
Patch:
@@ -158,20 +158,20 @@ public ScanFilter createFromParcel(Parcel in) {
                 }
             }
             if (in.readInt() == 1) {
-                ParcelUuid servcieDataUuid =
+                ParcelUuid serviceDataUuid =
                         in.readParcelable(ParcelUuid.class.getClassLoader());
                 if (in.readInt() == 1) {
                     int serviceDataLength = in.readInt();
                     byte[] serviceData = new byte[serviceDataLength];
                     in.readByteArray(serviceData);
                     if (in.readInt() == 0) {
-                        builder.setServiceData(servcieDataUuid, serviceData);
+                        builder.setServiceData(serviceDataUuid, serviceData);
                     } else {
                         int serviceDataMaskLength = in.readInt();
                         byte[] serviceDataMask = new byte[serviceDataMaskLength];
                         in.readByteArray(serviceDataMask);
                         builder.setServiceData(
-                                servcieDataUuid, serviceData, serviceDataMask);
+                                serviceDataUuid, serviceData, serviceDataMask);
                     }
                 }
             }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/scan/ScanSettings.java
Patch:
@@ -104,7 +104,7 @@ public class ScanSettings implements Parcelable, ExternalScanSettingsExtension {
 
     /**
      * Match as many advertisement per filter as hw could allow, depends on current
-     * capability and availibility of the resources in hw
+     * capability and availability of the resources in hw
      */
     public static final int MATCH_NUM_MAX_ADVERTISEMENT = 3;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/RxBleDeviceServices.java
Patch:
@@ -49,7 +49,7 @@ public Single<BluetoothGattService> getService(@NonNull final UUID serviceUuid)
                 .filter(new Predicate<BluetoothGattService>() {
 
                     @Override
-                    public boolean test(BluetoothGattService bluetoothGattService) throws Exception {
+                    public boolean test(BluetoothGattService bluetoothGattService) {
                         return bluetoothGattService.getUuid().equals(serviceUuid);
                     }
                 })
@@ -71,7 +71,7 @@ public boolean test(BluetoothGattService bluetoothGattService) throws Exception
     public Single<BluetoothGattCharacteristic> getCharacteristic(@NonNull final UUID characteristicUuid) {
         return Single.fromCallable(new Callable<BluetoothGattCharacteristic>() {
             @Override
-            public BluetoothGattCharacteristic call() throws Exception {
+            public BluetoothGattCharacteristic call() {
                 for (BluetoothGattService service : bluetoothGattServices) {
                     BluetoothGattCharacteristic characteristic = service.getCharacteristic(characteristicUuid);
                     if (characteristic != null) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/helpers/ByteArrayBatchObservable.java
Patch:
@@ -42,7 +42,7 @@ protected void subscribeActual(Subscriber<? super byte[]> subscriber) {
         Flowable.generate(new Consumer<Emitter<byte[]>>() {
 
             @Override
-            public void accept(Emitter<byte[]> emitter) throws Exception {
+            public void accept(Emitter<byte[]> emitter) {
                 int nextBatchSize = Math.min(byteBuffer.remaining(), maxBatchSize);
                 if (nextBatchSize == 0) {
                     emitter.onComplete();

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/RxBleDeviceImpl.java
Patch:
@@ -71,7 +71,7 @@ public Observable<RxBleConnection> establishConnection(final boolean autoConnect
     public Observable<RxBleConnection> establishConnection(final ConnectionSetup options) {
         return Observable.defer(new Callable<ObservableSource<RxBleConnection>>() {
             @Override
-            public ObservableSource<RxBleConnection> call() throws Exception {
+            public ObservableSource<RxBleConnection> call() {
                 if (isConnected.compareAndSet(false, true)) {
                     return connector.prepareConnection(options)
                             .doFinally(new Action() {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/SingleResponseOperation.java
Patch:
@@ -44,8 +44,7 @@ public SingleResponseOperation(BluetoothGatt bluetoothGatt,
     }
 
     @Override
-    final protected void protectedRun(final ObservableEmitter<T> emitter, final QueueReleaseInterface queueReleaseInterface)
-            throws Throwable {
+    final protected void protectedRun(final ObservableEmitter<T> emitter, final QueueReleaseInterface queueReleaseInterface) {
         final QueueReleasingEmitterWrapper<T> emitterWrapper = new QueueReleasingEmitterWrapper<>(emitter, queueReleaseInterface);
         getCallback(rxBleGattCallback)
                 .timeout(

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/ServiceDiscoveryManager.java
Patch:
@@ -54,7 +54,7 @@ Single<RxBleDeviceServices> getDiscoverServicesSingle(final long timeout, final
             return deviceServicesObservable.doOnSubscribe(
                     new Consumer<Disposable>() {
                         @Override
-                        public void accept(Disposable disposable) throws Exception {
+                        public void accept(Disposable disposable) {
                             timeoutBehaviorSubject.onNext(new TimeoutConfiguration(timeout, timeoutTimeUnit, Schedulers.computation()));
                         }
                     });
@@ -68,7 +68,7 @@ private void reset() {
                 .switchIfEmpty(getTimeoutConfiguration().flatMap(scheduleActualDiscoveryWithTimeout()))
                 .doOnSuccess(Functions.actionConsumer(new Action() {
                     @Override
-                    public void run() throws Exception {
+                    public void run() {
                         hasCachedResults = true;
                     }
                 }))

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ConnectOperation.java
Patch:
@@ -125,16 +125,15 @@ private Single<BluetoothGatt> getConnectedBluetoothGatt() {
         return Single.create(new SingleOnSubscribe<BluetoothGatt>() {
 
             @Override
-            public void subscribe(final SingleEmitter<BluetoothGatt> emitter) throws Exception {
+            public void subscribe(final SingleEmitter<BluetoothGatt> emitter) {
                 final DisposableSingleObserver<BluetoothGatt> disposableGattObserver = getBluetoothGattAndChangeStatusToConnected()
                         // when the connected state will be emitted bluetoothGattProvider should contain valid Gatt
                         .delaySubscription(
                                 rxBleGattCallback
                                         .getOnConnectionStateChange()
                                         .filter(new Predicate<RxBleConnection.RxBleConnectionState>() {
                                             @Override
-                                            public boolean test(RxBleConnection.RxBleConnectionState rxBleConnectionState)
-                                                    throws Exception {
+                                            public boolean test(RxBleConnection.RxBleConnectionState rxBleConnectionState) {
                                                 return rxBleConnectionState == CONNECTED;
                                             }
                                         })

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ScanOperation.java
Patch:
@@ -34,7 +34,7 @@ final protected void protectedRun(final ObservableEmitter<SCAN_RESULT_TYPE> emit
         try {
             emitter.setCancellable(new Cancellable() {
                 @Override
-                public void cancel() throws Exception {
+                public void cancel() {
                     RxBleLog.i("Scan operation is requested to stop.");
                     stopScan(rxBleAdapterWrapper, scanCallback);
                 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ServiceDiscoveryOperation.java
Patch:
@@ -42,7 +42,7 @@ protected Single<RxBleDeviceServices> getCallback(RxBleGattCallback rxBleGattCal
         return rxBleGattCallback.getOnServicesDiscovered().firstOrError()
                 .doOnSuccess(new Consumer<RxBleDeviceServices>() {
                     @Override
-                    public void accept(RxBleDeviceServices rxBleDeviceServices) throws Exception {
+                    public void accept(RxBleDeviceServices rxBleDeviceServices) {
                         bleServicesLogger.log(rxBleDeviceServices, bluetoothGatt.getDevice());
                     }
                 });
@@ -76,7 +76,7 @@ protected Single<RxBleDeviceServices> timeoutFallbackProcedure(
     ) {
         return Single.defer(new Callable<SingleSource<? extends RxBleDeviceServices>>() {
             @Override
-            public SingleSource<? extends RxBleDeviceServices> call() throws Exception {
+            public SingleSource<? extends RxBleDeviceServices> call() {
                 final List<BluetoothGattService> services = bluetoothGatt.getServices();
                 if (services.size() == 0) {
                     // if after the timeout services are empty we have no other option to declare a failed discovery
@@ -94,7 +94,7 @@ public SingleSource<? extends RxBleDeviceServices> call() throws Exception {
                                 public Single<RxBleDeviceServices> apply(Long delayedSeconds) {
                                     return Single.fromCallable(new Callable<RxBleDeviceServices>() {
                                         @Override
-                                        public RxBleDeviceServices call() throws Exception {
+                                        public RxBleDeviceServices call() {
                                             return new RxBleDeviceServices(bluetoothGatt.getServices());
                                         }
                                     });

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/ScanSettingsEmulator.java
Patch:
@@ -57,7 +57,7 @@ public Observable<RxBleInternalScanResult> apply(Observable<RxBleInternalScanRes
 
                     @Override
                     public ObservableSource<RxBleInternalScanResult>
-                    apply(final Observable<RxBleInternalScanResult> publishedObservable) throws Exception {
+                    apply(final Observable<RxBleInternalScanResult> publishedObservable) {
                         final Observable<Object> closeTenSecondsAfterMostRecentEmissionFunc = publishedObservable
                                 .switchMap(emitAfterTimerFunc);
                         return publishedObservable
@@ -112,7 +112,7 @@ public Observable<RxBleInternalScanResult> apply(final Observable<RxBleInternalS
                 return rxBleInternalScanResultObservable.take(windowInMillis, TimeUnit.MILLISECONDS, scheduler)
                         .repeatWhen(new Function<Observable<Object>, ObservableSource<?>>() {
                             @Override
-                            public ObservableSource<?> apply(Observable<Object> observable) throws Exception {
+                            public ObservableSource<?> apply(Observable<Object> observable) {
                                 return observable.delay(delayToNextWindow, TimeUnit.MILLISECONDS, scheduler
                                 );
                             }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/ClientOperationQueueImpl.java
Patch:
@@ -61,12 +61,12 @@ public void run() {
     public <T> Observable<T> queue(final Operation<T> operation) {
         return Observable.create(new ObservableOnSubscribe<T>() {
             @Override
-            public void subscribe(ObservableEmitter<T> tEmitter) throws Exception {
+            public void subscribe(ObservableEmitter<T> tEmitter) {
                 final FIFORunnableEntry entry = new FIFORunnableEntry<>(operation, tEmitter);
 
                 tEmitter.setDisposable(Disposables.fromAction(new Action() {
                     @Override
-                    public void run() throws Exception {
+                    public void run() {
                         if (queue.remove(entry)) {
                             logOperationRemoved(operation);
                         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/ConnectionOperationQueueImpl.java
Patch:
@@ -105,11 +105,11 @@ public synchronized <T> Observable<T> queue(final Operation<T> operation) {
 
         return Observable.create(new ObservableOnSubscribe<T>() {
             @Override
-            public void subscribe(ObservableEmitter<T> emitter) throws Exception {
+            public void subscribe(ObservableEmitter<T> emitter) {
                 final FIFORunnableEntry entry = new FIFORunnableEntry<>(operation, emitter);
                 emitter.setCancellable(new Cancellable() {
                     @Override
-                    public void cancel() throws Exception {
+                    public void cancel() {
                         if (queue.remove(entry)) {
                             logOperationRemoved(operation);
                         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/ByteAssociationUtil.java
Patch:
@@ -34,7 +34,7 @@ public byte[] apply(ByteAssociation<?> byteAssociation) {
     descriptorPredicate(final BluetoothGattDescriptor bluetoothGattDescriptor) {
         return new Predicate<ByteAssociation<BluetoothGattDescriptor>>() {
             @Override
-            public boolean test(ByteAssociation<BluetoothGattDescriptor> uuidPair) throws Exception {
+            public boolean test(ByteAssociation<BluetoothGattDescriptor> uuidPair) {
                 return uuidPair.first.equals(bluetoothGattDescriptor);
             }
         };

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/QueueReleasingEmitterWrapper.java
Patch:
@@ -56,7 +56,7 @@ public void onNext(T t) {
     }
 
     @Override
-    synchronized public void cancel() throws Exception {
+    synchronized public void cancel() {
         isEmitterCanceled.set(true);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/LegacyScanOperation.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Set;
 import java.util.UUID;
 
-import io.reactivex.Emitter;
+import io.reactivex.ObservableEmitter;
 
 public class LegacyScanOperation extends ScanOperation<RxBleInternalScanResultLegacy, BluetoothAdapter.LeScanCallback> {
 
@@ -38,7 +38,7 @@ public LegacyScanOperation(UUID[] filterServiceUUIDs, RxBleAdapterWrapper rxBleA
     }
 
     @Override
-    BluetoothAdapter.LeScanCallback createScanCallback(final Emitter<RxBleInternalScanResultLegacy> emitter) {
+    BluetoothAdapter.LeScanCallback createScanCallback(final ObservableEmitter<RxBleInternalScanResultLegacy> emitter) {
         return new BluetoothAdapter.LeScanCallback() {
             @Override
             public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ScanOperationApi18.java
Patch:
@@ -13,7 +13,7 @@
 import com.polidea.rxandroidble2.internal.scan.RxBleInternalScanResult;
 import com.polidea.rxandroidble2.internal.util.RxBleAdapterWrapper;
 
-import io.reactivex.Emitter;
+import io.reactivex.ObservableEmitter;
 
 public class ScanOperationApi18 extends ScanOperation<RxBleInternalScanResult, BluetoothAdapter.LeScanCallback> {
 
@@ -34,7 +34,7 @@ public ScanOperationApi18(
     }
 
     @Override
-    BluetoothAdapter.LeScanCallback createScanCallback(final Emitter<RxBleInternalScanResult> emitter) {
+    BluetoothAdapter.LeScanCallback createScanCallback(final ObservableEmitter<RxBleInternalScanResult> emitter) {
         return new BluetoothAdapter.LeScanCallback() {
             @Override
             public void onLeScan(BluetoothDevice device, int rssi, byte[] scanRecord) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ScanOperationApi21.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import io.reactivex.Emitter;
+import io.reactivex.ObservableEmitter;
 
 @RequiresApi(21 /* Build.VERSION_CODES.LOLLIPOP */)
 public class ScanOperationApi21 extends ScanOperation<RxBleInternalScanResult, ScanCallback> {
@@ -57,7 +57,7 @@ public ScanOperationApi21(
     }
 
     @Override
-    ScanCallback createScanCallback(final Emitter<RxBleInternalScanResult> emitter) {
+    ScanCallback createScanCallback(final ObservableEmitter<RxBleInternalScanResult> emitter) {
         return new ScanCallback() {
             @Override
             public void onScanResult(int callbackType, ScanResult result) {
@@ -90,7 +90,7 @@ public void onBatchScanResults(List<ScanResult> results) {
 
             @Override
             public void onScanFailed(int errorCode) {
-                emitter.onError(new BleScanException(errorCodeToBleErrorCode(errorCode)));
+                emitter.tryOnError(new BleScanException(errorCodeToBleErrorCode(errorCode)));
             }
         };
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/RxBleAdapterStateObservable.java
Patch:
@@ -67,13 +67,13 @@ public void onReceive(Context context, Intent intent) {
                         emitter.onNext(internalState);
                     }
                 };
+                context.registerReceiver(receiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
                 emitter.setCancellable(new Cancellable() {
                     @Override
                     public void cancel() {
                         context.unregisterReceiver(receiver);
                     }
                 });
-                context.registerReceiver(receiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
             }
         })
                 .subscribeOn(Schedulers.trampoline())

File: sample/src/main/java/com/polidea/rxandroidble2/sample/SampleApplication.java
Patch:
@@ -16,7 +16,7 @@ public class SampleApplication extends Application {
     private RxBleClient rxBleClient;
 
     /**
-     * In practise you will use some kind of dependency injection pattern.
+     * In practice you will use some kind of dependency injection pattern.
      */
     public static RxBleClient getRxBleClient(Context context) {
         SampleApplication application = (SampleApplication) context.getApplicationContext();

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/RxBleDevice.java
Patch:
@@ -91,9 +91,9 @@ public interface RxBleDevice {
      *                         the device is not in range after a 30-second timeout. If true, the connection will be pending indefinitely.
      *                         Unlike the native Android API, if set to true and the connection is lost there will NOT be any attempt to
      *                         reconnect unless explicitly resubscribed.
-     * @param operationTimeout Timeout configuration after which the operation will be considered as broken. Eventually the operation
-     *                         will be canceled and removed from queue. Keep in mind that it will cancel the library's operation
-     *                         only and may leave Android's BLE stack in an inconsistent state.
+     * @param operationTimeout Timeout configuration for operations scheduled using {@link RxBleConnection} emitted from this observable.
+     *                         Those operations will be considered broken after the specified timeout. Keep in mind that after the timeout
+     *                         those operations will be canceled and may leave Android's BLE stack in an inconsistent state.
      * @return Observable emitting the connection.
      * @throws BleDisconnectedException        emitted when the BLE link has been disconnected either when the connection
      *                                         was already established or was in pending connection state. This occurs when the

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/exceptions/BleDisconnectedException.java
Patch:
@@ -4,6 +4,7 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.RestrictTo;
 
+import com.polidea.rxandroidble2.internal.logger.LoggerUtil;
 import com.polidea.rxandroidble2.utils.GattStatusParser;
 
 /**
@@ -72,6 +73,7 @@ public BleDisconnectedException(@NonNull String bluetoothDeviceAddress, int stat
 
     private static String createMessage(@Nullable String bluetoothDeviceAddress, int status) {
         final String gattCallbackStatusDescription = GattStatusParser.getGattCallbackStatusDescription(status);
-        return "Disconnected from " + bluetoothDeviceAddress + " with status " + status + " (" + gattCallbackStatusDescription + ")";
+        return "Disconnected from " + LoggerUtil.commonMacMessage(bluetoothDeviceAddress) + " with status " + status + " ("
+                + gattCallbackStatusDescription + ")";
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/exceptions/BleGattException.java
Patch:
@@ -5,6 +5,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import com.polidea.rxandroidble2.internal.logger.LoggerUtil;
 import com.polidea.rxandroidble2.utils.GattStatusParser;
 
 /**
@@ -70,7 +71,7 @@ private static String createMessage(@Nullable BluetoothGatt gatt, int status, Bl
         final String statusDescription = GattStatusParser.getGattCallbackStatusDescription(status);
         final String link
                 = "https://android.googlesource.com/platform/external/bluetooth/bluedroid/+/android-5.1.0_r1/stack/include/gatt_api.h";
-        return String.format("GATT exception from MAC address %s, status %d (%s), type %s. (Look up status 0x%02x here %s)",
-                getMacAddress(gatt), status, statusDescription, bleGattOperationType, status, link);
+        return String.format("GATT exception from %s, status %d (%s), type %s. (Look up status 0x%02x here %s)",
+                LoggerUtil.commonMacMessage(gatt), status, statusDescription, bleGattOperationType, status, link);
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/DisconnectionRouter.java
Patch:
@@ -60,14 +60,14 @@ public BleException apply(Boolean isAdapterUsable) {
                 .subscribe(new Consumer<BleException>() {
                     @Override
                     public void accept(BleException exception) {
-                        RxBleLog.d("An exception received, indicating that the adapter has became unusable.");
+                        RxBleLog.v("An exception received, indicating that the adapter has became unusable.");
                         exceptionOccurred = exception;
                         notifySubscribersAboutException();
                     }
                 }, new Consumer<Throwable>() {
                     @Override
                     public void accept(Throwable throwable) {
-                        RxBleLog.w(throwable, "Failed to monitor adapter state.");
+                        RxBleLog.e(throwable, "Failed to monitor adapter state.");
                     }
                 });
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/IllegalOperationMessageCreator.java
Patch:
@@ -3,6 +3,7 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 
 import com.polidea.rxandroidble2.internal.BluetoothGattCharacteristicProperty;
+import com.polidea.rxandroidble2.internal.logger.LoggerUtil;
 import com.polidea.rxandroidble2.internal.util.CharacteristicPropertiesParser;
 
 import java.util.Locale;
@@ -24,7 +25,7 @@ public String createMismatchMessage(BluetoothGattCharacteristic characteristic,
         return String.format(
                 Locale.getDefault(),
                 "Characteristic %s supports properties: %s (%d) does not have any property matching %s (%d)",
-                characteristic.getUuid(),
+                LoggerUtil.getUuidToLog(characteristic.getUuid()),
                 propertiesParser.propertiesIntToString(characteristic.getProperties()),
                 characteristic.getProperties(),
                 propertiesParser.propertiesIntToString(neededProperties),

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/ThrowingIllegalOperationHandler.java
Patch:
@@ -3,7 +3,6 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 
 import com.polidea.rxandroidble2.internal.BleIllegalOperationException;
-import com.polidea.rxandroidble2.internal.RxBleLog;
 
 import bleshadow.javax.inject.Inject;
 
@@ -26,7 +25,6 @@ public ThrowingIllegalOperationHandler(IllegalOperationMessageCreator messageCre
     @Override
     public BleIllegalOperationException handleMismatchData(BluetoothGattCharacteristic characteristic, int neededProperties) {
         String message = messageCreator.createMismatchMessage(characteristic, neededProperties);
-        RxBleLog.e(message);
         return new BleIllegalOperationException(message,
                 characteristic.getUuid(),
                 characteristic.getProperties(),

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ScanOperation.java
Patch:
@@ -47,8 +47,8 @@ public void cancel() throws Exception {
                 emitter.tryOnError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
             }
         } catch (Throwable throwable) {
-            RxBleLog.e(throwable, "Error while calling the start scan function");
-            emitter.tryOnError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
+            RxBleLog.w(throwable, "Error while calling the start scan function");
+            emitter.tryOnError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START, throwable));
         } finally {
             queueReleaseInterface.release();
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/InternalScanResultCreator.java
Patch:
@@ -60,7 +60,7 @@ private static ScanCallbackType toScanCallbackType(int callbackType) {
             case ScanSettings.CALLBACK_TYPE_MATCH_LOST:
                 return CALLBACK_TYPE_MATCH_LOST;
             default:
-                RxBleLog.w("Unknown callback type %d -> check android.bluetooth.le.ScanSettings");
+                RxBleLog.w("Unknown callback type %d -> check android.bluetooth.le.ScanSettings", callbackType);
                 return CALLBACK_TYPE_UNKNOWN;
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/ScanSettingsEmulator.java
Patch:
@@ -76,7 +76,7 @@ ObservableTransformer<RxBleInternalScanResult, RxBleInternalScanResult> emulateS
             case ScanSettings.SCAN_MODE_BALANCED:
                 return scanModeBalancedTransformer();
             case ScanSettings.SCAN_MODE_OPPORTUNISTIC:
-                RxBleLog.d("Cannot emulate opportunistic scan mode since it is OS dependent - fallthrough to low power");
+                RxBleLog.w("Cannot emulate opportunistic scan mode since it is OS dependent - fallthrough to low power");
                 // fallthrough
             case ScanSettings.SCAN_MODE_LOW_POWER:
                 return scanModeLowPowerTransformer();

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/FIFORunnableEntry.java
Patch:
@@ -3,9 +3,9 @@
 
 import androidx.annotation.NonNull;
 
-import com.polidea.rxandroidble2.internal.RxBleLog;
 import com.polidea.rxandroidble2.internal.operations.Operation;
 
+import com.polidea.rxandroidble2.internal.logger.LoggerUtil;
 import java.util.concurrent.atomic.AtomicLong;
 
 import io.reactivex.ObservableEmitter;
@@ -37,7 +37,7 @@ public int compareTo(@NonNull FIFORunnableEntry other) {
     public void run(QueueSemaphore semaphore, Scheduler subscribeScheduler) {
 
         if (operationResultObserver.isDisposed()) {
-            RxBleLog.d("The operation was about to be run but the observer had been already disposed: " + operation);
+            LoggerUtil.logOperationSkippedBecauseDisposedWhenAboutToRun(operation);
             semaphore.release();
             return;
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/BleConnectionCompat.java
Patch:
@@ -81,7 +81,7 @@ public BluetoothGatt connectGatt(BluetoothDevice remoteDevice, boolean autoConne
                 | InvocationTargetException
                 | InstantiationException
                 | NoSuchFieldException exception) {
-            RxBleLog.w(exception, "Error during reflection");
+            RxBleLog.w(exception, "Error while trying to connect via reflection");
             return connectGattCompat(bluetoothGattCallback, remoteDevice, true);
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/CharacteristicPropertiesParser.java
Patch:
@@ -86,7 +86,7 @@ private String propertyToString(@BluetoothGattCharacteristicProperty int propert
         } else {
             // This case is unicorny and only left for my peace of mind. The property is matched against known dictionary before
             // being passed here, so it MUST match one of the values [MK]
-            RxBleLog.e("Unknown property specified");
+            RxBleLog.e("Unknown property specified (%d)", property);
             return "UNKNOWN (" + property + " -> check android.bluetooth.BluetoothGattCharacteristic)";
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/UUIDUtil.java
Patch:
@@ -6,6 +6,7 @@
 import androidx.annotation.RestrictTo;
 import android.util.SparseArray;
 
+import com.polidea.rxandroidble2.internal.logger.LoggerUtil;
 import com.polidea.rxandroidble2.internal.scan.ScanRecordImplCompat;
 import com.polidea.rxandroidble2.scan.ScanRecord;
 import com.polidea.rxandroidble2.internal.RxBleLog;
@@ -203,7 +204,7 @@ public ScanRecord parseFromBytes(byte[] scanRecord) {
             return new ScanRecordImplCompat(serviceUuids, manufacturerData, serviceData,
                     advertiseFlag, txPowerLevel, localName, scanRecord);
         } catch (Exception e) {
-            RxBleLog.e(e, "unable to parse scan record: " + Arrays.toString(scanRecord));
+            RxBleLog.e(e, "Unable to parse scan record: %s", LoggerUtil.bytesToHex(scanRecord));
             // As the record is invalid, ignore all the parsed results for this packet
             // and return an empty record with raw scanRecord bytes in results
             return new ScanRecordImplCompat(null, null, null, -1, Integer.MIN_VALUE, null, scanRecord);

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/scan/ScanResult.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import com.polidea.rxandroidble2.RxBleDevice;
+import com.polidea.rxandroidble2.internal.logger.LoggerUtil;
 
 public class ScanResult {
 
@@ -46,7 +47,7 @@ public String toString() {
                 + ", rssi=" + rssi
                 + ", timestampNanos=" + timestampNanos
                 + ", callbackType=" + callbackType
-                + ", scanRecord=" + scanRecord
+                + ", scanRecord=" + LoggerUtil.bytesToHex(scanRecord.getBytes())
                 + '}';
     }
 }

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example1_scanning/ScanActivity.java
Patch:
@@ -57,7 +57,7 @@ public void onScanToggleClick() {
         if (isScanning()) {
             scanDisposable.dispose();
         } else {
-            if (LocationPermission.checkLocationPermissionGranted(this)) {
+            if (LocationPermission.isLocationPermissionGranted(this)) {
                 scanBleDevices();
             } else {
                 hasClickedScan = true;

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example1a_background_scanning/BackgroundScanActivity.java
Patch:
@@ -41,7 +41,7 @@ public void onCreate(Bundle savedInstanceState) {
     @OnClick(R.id.scan_start_btn)
     public void onScanStartClick() {
         hasClickedScan = true;
-        if (LocationPermission.checkLocationPermissionGranted(this)) {
+        if (LocationPermission.isLocationPermissionGranted(this)) {
             scanBleDeviceInBackground();
         } else {
             LocationPermission.requestLocationPermission(this);

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/RxBleClientImpl.java
Patch:
@@ -119,7 +119,7 @@ public Observable<ScanResult> scanBleDevices(final ScanSettings scanSettings, fi
         return Observable.defer(new Callable<ObservableSource<? extends ScanResult>>() {
             @Override
             public Observable<ScanResult> call() {
-                scanPreconditionVerifier.verify();
+                scanPreconditionVerifier.verify(scanSettings.shouldCheckLocationProviderState());
                 final ScanSetup scanSetup = scanSetupBuilder.build(scanSettings, scanFilters);
                 final Operation<RxBleInternalScanResult> scanOperation = scanSetup.scanOperation;
                 return operationQueue.queue(scanOperation)
@@ -140,7 +140,7 @@ public Observable<RxBleScanResult> scanBleDevices(@Nullable final UUID... filter
         return Observable.defer(new Callable<ObservableSource<? extends RxBleScanResult>>() {
             @Override
             public ObservableSource<? extends RxBleScanResult> call() throws Exception {
-                scanPreconditionVerifier.verify();
+                scanPreconditionVerifier.verify(true);
                 return initializeScan(filterServiceUUIDs);
             }
         });

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/ScanPreconditionsVerifier.java
Patch:
@@ -5,5 +5,5 @@
 
 public interface ScanPreconditionsVerifier {
 
-    void verify() throws BleScanException;
+    void verify(boolean checkLocationProviderState) throws BleScanException;
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/ScanPreconditionsVerifierApi18.java
Patch:
@@ -21,14 +21,14 @@ public ScanPreconditionsVerifierApi18(RxBleAdapterWrapper rxBleAdapterWrapper, L
     }
 
     @Override
-    public void verify() {
+    public void verify(boolean checkLocationProviderState) {
         if (!rxBleAdapterWrapper.hasBluetoothAdapter()) {
             throw new BleScanException(BleScanException.BLUETOOTH_NOT_AVAILABLE);
         } else if (!rxBleAdapterWrapper.isBluetoothEnabled()) {
             throw new BleScanException(BleScanException.BLUETOOTH_DISABLED);
         } else if (!locationServicesStatus.isLocationPermissionOk()) {
             throw new BleScanException(BleScanException.LOCATION_PERMISSION_MISSING);
-        } else if (!locationServicesStatus.isLocationProviderOk()) {
+        } else if (checkLocationProviderState && !locationServicesStatus.isLocationProviderOk()) {
             throw new BleScanException(BleScanException.LOCATION_SERVICES_DISABLED);
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/scan/ScanPreconditionsVerifierApi24.java
Patch:
@@ -34,8 +34,8 @@ public ScanPreconditionsVerifierApi24(
     }
 
     @Override
-    public void verify() {
-        scanPreconditionVerifierApi18.verify();
+    public void verify(boolean checkLocationProviderState) {
+        scanPreconditionVerifierApi18.verify(checkLocationProviderState);
 
         /*
          * Android 7.0 (API 24) introduces an undocumented scan throttle for applications that try to scan more than 5 times during

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example2_connection/ConnectionExampleActivity.java
Patch:
@@ -73,6 +73,7 @@ protected void onCreate(Bundle savedInstanceState) {
         setTitle(getString(R.string.mac_address, macAddress));
         bleDevice = SampleApplication.getRxBleClient(this).getBleDevice(macAddress);
         // How to listen for connection state changes
+        // Note: it is meant for UI updates only â€” one should not observeConnectionStateChanges() with BLE connection logic
         stateDisposable = bleDevice.observeConnectionStateChanges()
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe(this::onConnectionStateChange);

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example7_long_write/LongWriteExampleActivity.java
Patch:
@@ -2,9 +2,9 @@
 
 import android.os.Bundle;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.util.Pair;
 
-import android.support.v7.app.AppCompatActivity;
 import com.polidea.rxandroidble2.RxBleClient;
 import com.polidea.rxandroidble2.RxBleConnection;
 import com.polidea.rxandroidble2.sample.SampleApplication;

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/DisconnectionRouter.java
Patch:
@@ -29,7 +29,6 @@
 @ConnectionScope
 class DisconnectionRouter implements DisconnectionRouterInput, DisconnectionRouterOutput {
 
-    private static final String TAG = "DisconnectionRouter";
     private final Queue<ObservableEmitter<BleException>> exceptionEmitters = new ConcurrentLinkedQueue<>();
     private BleException exceptionOccurred;
     private Disposable adapterMonitoringDisposable;
@@ -61,14 +60,14 @@ public BleException apply(Boolean isAdapterUsable) {
                 .subscribe(new Consumer<BleException>() {
                     @Override
                     public void accept(BleException exception) {
-                        RxBleLog.d(TAG, "An exception received, indicating that the adapter has became unusable.");
+                        RxBleLog.d("An exception received, indicating that the adapter has became unusable.");
                         exceptionOccurred = exception;
                         notifySubscribersAboutException();
                     }
                 }, new Consumer<Throwable>() {
                     @Override
                     public void accept(Throwable throwable) {
-                        RxBleLog.w(TAG, "Failed to monitor adapter state.", throwable);
+                        RxBleLog.w(throwable, "Failed to monitor adapter state.");
                     }
                 });
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/ConnectorImpl.java
Patch:
@@ -46,8 +46,8 @@ public ObservableSource<RxBleConnection> call() throws Exception {
 
                 final Set<ConnectionSubscriptionWatcher> connSubWatchers = connectionComponent.connectionSubscriptionWatchers();
                 return obtainRxBleConnection(connectionComponent)
-                        .delaySubscription(enqueueConnectOperation(connectionComponent))
                         .mergeWith(observeDisconnections(connectionComponent))
+                        .delaySubscription(enqueueConnectOperation(connectionComponent))
                         .doOnSubscribe(new Consumer<Disposable>() {
                             @Override
                             public void accept(Disposable disposable) throws Exception {

File: sample/src/main/java/com/polidea/rxandroidble2/sample/util/LocationPermission.java
Patch:
@@ -5,8 +5,8 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.pm.PackageManager;
-import android.support.v4.app.ActivityCompat;
-import android.support.v4.content.ContextCompat;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
 
 public class LocationPermission {
 

File: sample/src/main/java/com/polidea/rxandroidble2/sample/util/ScanExceptionHandler.java
Patch:
@@ -2,9 +2,9 @@
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.support.annotation.NonNull;
 import android.util.Log;
 import android.widget.Toast;
+import androidx.annotation.NonNull;
 import com.polidea.rxandroidble2.exceptions.BleScanException;
 import com.polidea.rxandroidble2.sample.R;
 import java.util.Date;

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/NotificationSetupMode.java
Patch:
@@ -2,7 +2,7 @@
 
 public enum NotificationSetupMode {
     /**
-     * Configures notifications according to the standard. First by enabling the notificaiton for a selected characteristic, then
+     * Configures notifications according to the standard. First by enabling the notification for a selected characteristic, then
      * setting up the descriptor to enable notifications.
      */
     DEFAULT,

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example5_rssi_periodic/RssiPeriodicExampleActivity.java
Patch:
@@ -42,10 +42,10 @@ public void onConnectToggleClick() {
         } else {
             connectionDisposable = bleDevice.establishConnection(false)
                     .compose(bindUntilEvent(PAUSE))
-                    .observeOn(AndroidSchedulers.mainThread())
                     .doFinally(this::clearSubscription)
                     .flatMap(rxBleConnection -> // Set desired interval.
                             Observable.interval(2, SECONDS).flatMapSingle(sequence -> rxBleConnection.readRssi()))
+                    .observeOn(AndroidSchedulers.mainThread())
                     .subscribe(this::updateRssi, this::onConnectionFailure);
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/QueueOperation.java
Patch:
@@ -36,13 +36,15 @@ public final Observable<T> run(final QueueReleaseInterface queueReleaseInterface
         return Observable.create(
                 new ObservableOnSubscribe<T>() {
                     @Override
-                    public void subscribe(ObservableEmitter<T> emitter) throws Exception {
+                    public void subscribe(ObservableEmitter<T> emitter) {
                         try {
                             protectedRun(emitter, queueReleaseInterface);
                         } catch (DeadObjectException deadObjectException) {
                             emitter.tryOnError(provideException(deadObjectException));
+                            RxBleLog.e(deadObjectException, "QueueOperation terminated with a DeadObjectException");
                         } catch (Throwable throwable) {
                             emitter.tryOnError(throwable);
+                            RxBleLog.e(throwable, "QueueOperation terminated with an unexpected exception");
                         }
                     }
                 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/SingleResponseOperation.java
Patch:
@@ -93,6 +93,7 @@ protected Single<T> timeoutFallbackProcedure(
 
     @Override
     protected BleException provideException(DeadObjectException deadObjectException) {
-        return new BleDisconnectedException(deadObjectException, bluetoothGatt.getDevice().getAddress());
+        return new BleDisconnectedException(deadObjectException, bluetoothGatt.getDevice().getAddress(),
+                BleDisconnectedException.UNKNOWN_STATUS);
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/DisconnectionRouter.java
Patch:
@@ -54,7 +54,7 @@ One of those events must happen eventually. Then the adapterStateObservable (whi
                 .map(new Function<Boolean, BleException>() {
                     @Override
                     public BleException apply(Boolean isAdapterUsable) {
-                        return new BleDisconnectedException(macAddress); // TODO: Introduce BleDisabledException?
+                        return BleDisconnectedException.adapterDisabled(macAddress);
                     }
                 })
                 .firstElement()

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleConnectionImpl.java
Patch:
@@ -354,7 +354,8 @@ public void run() {
 
             @Override
             protected BleException provideException(DeadObjectException deadObjectException) {
-                return new BleDisconnectedException(deadObjectException, bluetoothGatt.getDevice().getAddress());
+                return new BleDisconnectedException(deadObjectException, bluetoothGatt.getDevice().getAddress(),
+                        BleDisconnectedException.UNKNOWN_STATUS);
             }
 
             @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/RxBleGattCallback.java
Patch:
@@ -74,7 +74,7 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
             bluetoothGattProvider.updateBluetoothGatt(gatt);
 
             if (isDisconnectedOrDisconnecting(newState)) {
-                disconnectionRouter.onDisconnectedException(new BleDisconnectedException(gatt.getDevice().getAddress()));
+                disconnectionRouter.onDisconnectedException(new BleDisconnectedException(gatt.getDevice().getAddress(), status));
             } else if (status != BluetoothGatt.GATT_SUCCESS) {
                 disconnectionRouter.onGattConnectionStateException(
                         new BleGattException(gatt, status, BleGattOperationType.CONNECTION_STATE)

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/CharacteristicLongWriteOperation.java
Patch:
@@ -127,7 +127,8 @@ public void onComplete() {
 
     @Override
     protected BleException provideException(DeadObjectException deadObjectException) {
-        return new BleDisconnectedException(deadObjectException, bluetoothGatt.getDevice().getAddress());
+        return new BleDisconnectedException(deadObjectException, bluetoothGatt.getDevice().getAddress(),
+                BleDisconnectedException.UNKNOWN_STATUS);
     }
 
     @NonNull

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ConnectOperation.java
Patch:
@@ -176,6 +176,6 @@ public BluetoothGatt call() {
 
     @Override
     protected BleException provideException(DeadObjectException deadObjectException) {
-        return new BleDisconnectedException(deadObjectException, bluetoothDevice.getAddress());
+        return new BleDisconnectedException(deadObjectException, bluetoothDevice.getAddress(), BleDisconnectedException.UNKNOWN_STATUS);
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/DisconnectOperation.java
Patch:
@@ -168,6 +168,6 @@ public void run() {
 
     @Override
     protected BleException provideException(DeadObjectException deadObjectException) {
-        return new BleDisconnectedException(deadObjectException, macAddress);
+        return new BleDisconnectedException(deadObjectException, macAddress, BleDisconnectedException.UNKNOWN_STATUS);
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/ConnectionOperationQueueImpl.java
Patch:
@@ -156,6 +156,6 @@ public void onError(Throwable throwable) {
     public void onConnectionUnsubscribed() {
         disconnectionThrowableSubscription.dispose();
         disconnectionThrowableSubscription = null;
-        terminate(new BleDisconnectedException(deviceMacAddress));
+        terminate(new BleDisconnectedException(deviceMacAddress, BleDisconnectedException.UNKNOWN_STATUS));
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/LocationServicesOkObservableApi23.java
Patch:
@@ -43,13 +43,14 @@ public void onReceive(Context context, Intent intent) {
                 }
             }
         };
+
+        context.registerReceiver(broadcastReceiver, new IntentFilter(LocationManager.MODE_CHANGED_ACTION));
         observer.onSubscribe(Disposables.fromAction(new Action() {
             @Override
             public void run() throws Exception {
                 context.unregisterReceiver(broadcastReceiver);
             }
         }));
         observer.onNext(locationProviderOk);
-        context.registerReceiver(broadcastReceiver, new IntentFilter(LocationManager.MODE_CHANGED_ACTION));
     }
 }

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example1_scanning/ScanActivity.java
Patch:
@@ -137,6 +137,7 @@ public void onPause() {
 
     private void configureResultList() {
         recyclerView.setHasFixedSize(true);
+        recyclerView.setItemAnimator(null);
         LinearLayoutManager recyclerLayoutManager = new LinearLayoutManager(this);
         recyclerView.setLayoutManager(recyclerLayoutManager);
         resultsAdapter = new ScanResultsAdapter();

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/RxBleAdapterStateObservable.java
Patch:
@@ -63,7 +63,6 @@ public void onReceive(Context context, Intent intent) {
                 }
             }
         };
-        context.registerReceiver(receiver, createFilter());
         observer.onSubscribe(Disposables.fromAction(new Action() {
             @Override
             public void run() throws Exception {
@@ -74,6 +73,7 @@ public void run() throws Exception {
                 }
             }
         }));
+        context.registerReceiver(receiver, createFilter());
     }
 
     private static BleAdapterState mapToBleAdapterState(int state) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/helpers/LocationServicesOkObservable.java
Patch:
@@ -44,7 +44,7 @@ public static LocationServicesOkObservable createInstance(@NonNull final Context
     @Override
     protected void subscribeActual(final Observer<? super Boolean> observer) {
         final DisposableObserver<? super Boolean> disposableObserver = DisposableUtil.disposableObserver(observer);
-        locationServicesOkObsImpl.subscribeWith(disposableObserver);
         observer.onSubscribe(disposableObserver);
+        locationServicesOkObsImpl.subscribeWith(disposableObserver);
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/ClientStateObservable.java
Patch:
@@ -16,6 +16,7 @@
 import io.reactivex.Observer;
 import io.reactivex.Scheduler;
 import io.reactivex.Single;
+import io.reactivex.disposables.Disposables;
 import io.reactivex.functions.Function;
 import io.reactivex.functions.Predicate;
 
@@ -120,6 +121,7 @@ public RxBleClient.State apply(Boolean locationServicesOk) {
     @Override
     protected void subscribeActual(Observer<? super RxBleClient.State> observer) {
         if (!rxBleAdapterWrapper.hasBluetoothAdapter()) {
+            observer.onSubscribe(Disposables.empty());
             observer.onComplete();
             return;
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/LocationServicesOkObservableApi23.java
Patch:
@@ -32,7 +32,6 @@ public class LocationServicesOkObservableApi23 extends Observable<Boolean> {
     protected void subscribeActual(final Observer<? super Boolean> observer) {
         final boolean locationProviderOk = locationServicesStatus.isLocationProviderOk();
         final AtomicBoolean locationProviderOkAtomicBoolean = new AtomicBoolean(locationProviderOk);
-        observer.onNext(locationProviderOk);
         final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
             @Override
             public void onReceive(Context context, Intent intent) {
@@ -44,12 +43,13 @@ public void onReceive(Context context, Intent intent) {
                 }
             }
         };
-        context.registerReceiver(broadcastReceiver, new IntentFilter(LocationManager.MODE_CHANGED_ACTION));
         observer.onSubscribe(Disposables.fromAction(new Action() {
             @Override
             public void run() throws Exception {
                 context.unregisterReceiver(broadcastReceiver);
             }
         }));
+        observer.onNext(locationProviderOk);
+        context.registerReceiver(broadcastReceiver, new IntentFilter(LocationManager.MODE_CHANGED_ACTION));
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/QueueOperation.java
Patch:
@@ -40,9 +40,9 @@ public void subscribe(ObservableEmitter<T> emitter) throws Exception {
                         try {
                             protectedRun(emitter, queueReleaseInterface);
                         } catch (DeadObjectException deadObjectException) {
-                            emitter.onError(provideException(deadObjectException));
+                            emitter.tryOnError(provideException(deadObjectException));
                         } catch (Throwable throwable) {
-                            emitter.onError(throwable);
+                            emitter.tryOnError(throwable);
                         }
                     }
                 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/LongWriteOperationBuilderImpl.java
Patch:
@@ -3,7 +3,6 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 import android.support.annotation.NonNull;
 
-import com.polidea.rxandroidble.internal.connection.NoRetryStrategy;
 import com.polidea.rxandroidble2.RxBleConnection;
 import com.polidea.rxandroidble2.internal.operations.OperationsProvider;
 import com.polidea.rxandroidble2.internal.serialization.ConnectionOperationQueue;

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/MtuWatcher.java
Patch:
@@ -3,7 +3,6 @@
 
 import com.polidea.rxandroidble2.exceptions.BleGattException;
 import com.polidea.rxandroidble2.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble2.internal.RxBleLog;
 
 import bleshadow.javax.inject.Inject;
 import bleshadow.javax.inject.Named;
@@ -43,7 +42,7 @@ public void onConnectionSubscribed() {
         mtuObservable.subscribe(this, new Consumer<Throwable>() {
             @Override
             public void accept(Throwable throwable) throws Exception {
-                RxBleLog.d(throwable, "An error received when listening to MTU changes.");
+                // ignoring, this is expected when the connection is lost.
             }
         });
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/connection/NoRetryStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.polidea.rxandroidble.internal.connection;
+package com.polidea.rxandroidble2.internal.connection;
 
 import com.polidea.rxandroidble2.RxBleConnection;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/operations/ScanOperation.java
Patch:
@@ -44,11 +44,11 @@ public void cancel() throws Exception {
             boolean startLeScanStatus = startScan(rxBleAdapterWrapper, scanCallback);
 
             if (!startLeScanStatus) {
-                emitter.onError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
+                emitter.tryOnError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
             }
         } catch (Throwable throwable) {
             RxBleLog.e(throwable, "Error while calling the start scan function");
-            emitter.onError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
+            emitter.tryOnError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
         } finally {
             queueReleaseInterface.release();
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/ConnectionOperationQueueImpl.java
Patch:
@@ -89,7 +89,7 @@ public void run() {
     private synchronized void flushQueue() {
         while (!queue.isEmpty()) {
             final FIFORunnableEntry<?> entryToFinish = queue.takeNow();
-            entryToFinish.operationResultObserver.onError(disconnectionException);
+            entryToFinish.operationResultObserver.tryOnError(disconnectionException);
         }
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/serialization/FIFORunnableEntry.java
Patch:
@@ -62,7 +62,7 @@ public void onNext(T item) {
 
                         @Override
                         public void onError(Throwable e) {
-                            operationResultObserver.onError(e);
+                            operationResultObserver.tryOnError(e);
                         }
 
                         @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/internal/util/QueueReleasingEmitterWrapper.java
Patch:
@@ -23,7 +23,7 @@ public class QueueReleasingEmitterWrapper<T> implements Observer<T>, Cancellable
 
     private final AtomicBoolean isEmitterCanceled = new AtomicBoolean(false);
 
-    private final Emitter<T> emitter;
+    private final ObservableEmitter<T> emitter;
 
     private final QueueReleaseInterface queueReleaseInterface;
 
@@ -42,7 +42,7 @@ public void onComplete() {
     @Override
     public void onError(Throwable e) {
         queueReleaseInterface.release();
-        emitter.onError(e);
+        emitter.tryOnError(e);
     }
 
     @Override

File: sample/src/main/java/com/polidea/rxandroidble2/sample/example1_scanning/ScanActivity.java
Patch:
@@ -59,7 +59,7 @@ public void onScanToggleClick() {
                             .setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES)
                             .build(),
                     new ScanFilter.Builder()
-                            .setDeviceAddress("B4:99:4C:34:DC:8B")
+//                            .setDeviceAddress("B4:99:4C:34:DC:8B")
                             // add custom filters if needed
                             .build()
             )

File: rxandroidble/src/main/java/com/polidea/rxandroidble2/RxBleDevice.java
Patch:
@@ -6,6 +6,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.polidea.rxandroidble2.exceptions.BleAlreadyConnectedException;
 import com.polidea.rxandroidble2.exceptions.BleDisconnectedException;
 import com.polidea.rxandroidble2.exceptions.BleGattCallbackTimeoutException;
 import com.polidea.rxandroidble2.exceptions.BleGattException;
@@ -103,6 +104,8 @@ public interface RxBleDevice {
      *                                         the code proxied from the Android system.
      * @throws BleGattCallbackTimeoutException emitted when an internal timeout for connection has been reached. The operation will
      *                                         timeout in direct mode (autoConnect = false) after 35 seconds.
+     * @throws BleAlreadyConnectedException    Error emitted when the connection to a specified device is already established or is being
+     *                                         established. In order to share the connection, share #establishConnection emissions.
      */
     Observable<RxBleConnection> establishConnection(boolean autoConnect, @NonNull Timeout operationTimeout);
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProvider.java
Patch:
@@ -15,6 +15,7 @@ public interface OperationsProvider {
     CharacteristicLongWriteOperation provideLongWriteOperation(
             BluetoothGattCharacteristic bluetoothGattCharacteristic,
             RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy,
+            RxBleConnection.WriteOperationRetryStrategy writeOperationRetryStrategy,
             PayloadSizeLimitProvider maxBatchSizeProvider,
             byte[] bytes);
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProviderImpl.java
Patch:
@@ -53,6 +53,7 @@ public class OperationsProviderImpl implements OperationsProvider {
     public CharacteristicLongWriteOperation provideLongWriteOperation(
             BluetoothGattCharacteristic bluetoothGattCharacteristic,
             RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy,
+            RxBleConnection.WriteOperationRetryStrategy writeOperationRetryStrategy,
             PayloadSizeLimitProvider maxBatchSizeProvider,
             byte[] bytes) {
 
@@ -63,6 +64,7 @@ public CharacteristicLongWriteOperation provideLongWriteOperation(
                 bluetoothGattCharacteristic,
                 maxBatchSizeProvider,
                 writeOperationAckStrategy,
+                writeOperationRetryStrategy,
                 bytes);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/serialization/QueueSemaphore.java
Patch:
@@ -16,7 +16,7 @@ public synchronized void awaitRelease() throws InterruptedException {
             } catch (InterruptedException e) {
                 if (!isReleased.get()) {
                     RxBleLog.w(e, "Queue's awaitRelease() has been interrupted abruptly "
-                            + "while it wasn't released byte release() method.");
+                            + "while it wasn't released by the release() method.");
                 }
             }
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/Connector.java
Patch:
@@ -1,7 +1,7 @@
 package com.polidea.rxandroidble.internal.connection;
 
 
-import com.polidea.rxandroidble.internal.ConnectionSetup;
+import com.polidea.rxandroidble.ConnectionSetup;
 import com.polidea.rxandroidble.RxBleConnection;
 import rx.Observable;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/ConnectorImpl.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.polidea.rxandroidble.ClientComponent;
 import com.polidea.rxandroidble.RxBleConnection;
-import com.polidea.rxandroidble.internal.ConnectionSetup;
+import com.polidea.rxandroidble.ConnectionSetup;
 import com.polidea.rxandroidble.internal.serialization.ClientOperationQueue;
 
 import java.util.Set;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/CharacteristicReadOperation.java
Patch:
@@ -4,8 +4,8 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.DeviceModule;
 import com.polidea.rxandroidble.internal.SingleResponseOperation;
+import com.polidea.rxandroidble.internal.connection.ConnectionModule;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 
@@ -21,7 +21,7 @@ public class CharacteristicReadOperation extends SingleResponseOperation<byte[]>
     private final BluetoothGattCharacteristic bluetoothGattCharacteristic;
 
     CharacteristicReadOperation(RxBleGattCallback rxBleGattCallback, BluetoothGatt bluetoothGatt,
-                                @Named(DeviceModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
+                                @Named(ConnectionModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
                                 BluetoothGattCharacteristic bluetoothGattCharacteristic) {
         super(bluetoothGatt, rxBleGattCallback, BleGattOperationType.CHARACTERISTIC_READ, timeoutConfiguration);
         this.bluetoothGattCharacteristic = bluetoothGattCharacteristic;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/CharacteristicWriteOperation.java
Patch:
@@ -4,8 +4,8 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.DeviceModule;
 import com.polidea.rxandroidble.internal.SingleResponseOperation;
+import com.polidea.rxandroidble.internal.connection.ConnectionModule;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 
@@ -22,7 +22,7 @@ public class CharacteristicWriteOperation extends SingleResponseOperation<byte[]
     private final byte[] data;
 
     CharacteristicWriteOperation(RxBleGattCallback rxBleGattCallback, BluetoothGatt bluetoothGatt,
-                                 @Named(DeviceModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
+                                 @Named(ConnectionModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
                                  BluetoothGattCharacteristic bluetoothGattCharacteristic,
                                  byte[] data) {
         super(bluetoothGatt, rxBleGattCallback, BleGattOperationType.CHARACTERISTIC_WRITE, timeoutConfiguration);

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/DescriptorReadOperation.java
Patch:
@@ -4,8 +4,8 @@
 import android.bluetooth.BluetoothGattDescriptor;
 
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.DeviceModule;
 import com.polidea.rxandroidble.internal.SingleResponseOperation;
+import com.polidea.rxandroidble.internal.connection.ConnectionModule;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 
@@ -21,7 +21,7 @@ public class DescriptorReadOperation extends SingleResponseOperation<ByteAssocia
 
     @Inject
     DescriptorReadOperation(RxBleGattCallback rxBleGattCallback, BluetoothGatt bluetoothGatt,
-                            @Named(DeviceModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
+                            @Named(ConnectionModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
                             BluetoothGattDescriptor descriptor) {
         super(bluetoothGatt, rxBleGattCallback, BleGattOperationType.DESCRIPTOR_READ, timeoutConfiguration);
         bluetoothGattDescriptor = descriptor;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/DescriptorWriteOperation.java
Patch:
@@ -5,8 +5,8 @@
 import android.bluetooth.BluetoothGattDescriptor;
 
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.DeviceModule;
 import com.polidea.rxandroidble.internal.SingleResponseOperation;
+import com.polidea.rxandroidble.internal.connection.ConnectionModule;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 
@@ -23,7 +23,7 @@ public class DescriptorWriteOperation extends SingleResponseOperation<byte[]> {
 
     DescriptorWriteOperation(RxBleGattCallback rxBleGattCallback,
                              BluetoothGatt bluetoothGatt,
-                             @Named(DeviceModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
+                             @Named(ConnectionModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
                              int bluetoothGattCharacteristicDefaultWriteType,
                              BluetoothGattDescriptor bluetoothGattDescriptor,
                              byte[] data) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProviderImpl.java
Patch:
@@ -8,7 +8,7 @@
 
 import com.polidea.rxandroidble.ClientComponent;
 import com.polidea.rxandroidble.RxBleConnection;
-import com.polidea.rxandroidble.internal.DeviceModule;
+import com.polidea.rxandroidble.internal.connection.ConnectionModule;
 import com.polidea.rxandroidble.internal.connection.PayloadSizeLimitProvider;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 
@@ -33,7 +33,7 @@ public class OperationsProviderImpl implements OperationsProvider {
     OperationsProviderImpl(
             RxBleGattCallback rxBleGattCallback,
             BluetoothGatt bluetoothGatt,
-            @Named(DeviceModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
+            @Named(ConnectionModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration,
             @Named(ClientComponent.NamedSchedulers.BLUETOOTH_INTERACTION) Scheduler bluetoothInteractionScheduler,
             @Named(ClientComponent.NamedSchedulers.TIMEOUT) Scheduler timeoutScheduler,
             Provider<ReadRssiOperation> rssiReadOperationProvider) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/ReadRssiOperation.java
Patch:
@@ -3,8 +3,8 @@
 import android.bluetooth.BluetoothGatt;
 
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.DeviceModule;
 import com.polidea.rxandroidble.internal.SingleResponseOperation;
+import com.polidea.rxandroidble.internal.connection.ConnectionModule;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 
 import javax.inject.Inject;
@@ -16,7 +16,7 @@ public class ReadRssiOperation extends SingleResponseOperation<Integer> {
 
     @Inject
     ReadRssiOperation(RxBleGattCallback bleGattCallback, BluetoothGatt bluetoothGatt,
-                      @Named(DeviceModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration) {
+                      @Named(ConnectionModule.OPERATION_TIMEOUT) TimeoutConfiguration timeoutConfiguration) {
         super(bluetoothGatt, bleGattCallback, BleGattOperationType.READ_RSSI, timeoutConfiguration);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/serialization/ConnectionOperationQueue.java
Patch:
@@ -1,6 +1,6 @@
 package com.polidea.rxandroidble.internal.serialization;
 
-import com.polidea.rxandroidble.exceptions.BleDisconnectedException;
+import com.polidea.rxandroidble.exceptions.BleException;
 
 /**
  * {@inheritDoc}
@@ -11,5 +11,5 @@ public interface ConnectionOperationQueue extends ClientOperationQueue {
      * A method for terminating all operations that are still queued on the connection.
      * @param disconnectedException the exception to be passed to all queued operations subscribers
      */
-    void terminate(BleDisconnectedException disconnectedException);
+    void terminate(BleException disconnectedException);
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleGattCallback.java
Patch:
@@ -353,7 +353,7 @@ private static class Output<T> {
         }
 
         boolean hasObservers() {
-            return valueRelay.hasObservers() || valueRelay.hasObservers();
+            return valueRelay.hasObservers() || errorRelay.hasObservers();
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleGattException.java
Patch:
@@ -11,7 +11,7 @@
  * the <a href="https://android.googlesource.com/platform/external/bluetooth/bluedroid/+/android-5.1.0_r1/stack/include/gatt_api.h">
  * Android system</a>.
  *
- * @see com.polidea.rxandroidble.RxBleDevice#establishConnection(Context, boolean)
+ * @see com.polidea.rxandroidble.RxBleDevice#establishConnection(boolean)
  */
 public class BleGattException extends BleException {
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/BleIllegalOperationException.java
Patch:
@@ -2,8 +2,6 @@
 
 import android.support.annotation.RestrictTo;
 
-import com.polidea.rxandroidble.internal.BluetoothGattCharacteristicProperty;
-
 import java.util.UUID;
 
 /**

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleRadioOperationCustom.java
Patch:
@@ -9,7 +9,6 @@
 import rx.Observable;
 import rx.Observer;
 import rx.Scheduler;
-import rx.android.schedulers.AndroidSchedulers;
 
 /**
  * Represents a custom operation that will be enqueued for future execution within the client instance.
@@ -41,7 +40,6 @@ public interface RxBleRadioOperationCustom<T> {
      * @param bluetoothGatt     The Android API GATT instance
      * @param rxBleGattCallback The internal Rx ready bluetooth gatt callback to be notified of GATT operations
      * @param scheduler         The RxBleRadio scheduler used to asObservable operation
-     *                          (currently {@link AndroidSchedulers#mainThread()}
      * @throws Throwable Any exception that your custom operation might throw
      */
     @NonNull

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionImpl.java
Patch:
@@ -70,8 +70,9 @@ public RxBleConnectionImpl(
             DescriptorWriter descriptorWriter,
             OperationsProvider operationProvider,
             Provider<LongWriteOperationBuilder> longWriteOperationBuilderProvider,
-            @Named(ClientComponent.NamedSchedulers.RADIO_OPERATIONS) Scheduler callbackScheduler,
-            IllegalOperationChecker illegalOperationChecker) {
+            @Named(ClientComponent.NamedSchedulers.BLUETOOTH_INTERACTION) Scheduler callbackScheduler,
+            IllegalOperationChecker illegalOperationChecker
+    ) {
         this.rxBleRadio = rxBleRadio;
         this.gattCallback = gattCallback;
         this.bluetoothGatt = bluetoothGatt;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleGattCallback.java
Patch:
@@ -69,7 +69,7 @@ public Object call(Pair<BluetoothGatt, RxBleConnectionState> bluetoothGattRxBleC
             .autoConnect(0);
 
     @Inject
-    public RxBleGattCallback(@Named(ClientComponent.NamedSchedulers.GATT_CALLBACK) Scheduler callbackScheduler,
+    public RxBleGattCallback(@Named(ClientComponent.NamedSchedulers.BLUETOOTH_CALLBACKS) Scheduler callbackScheduler,
                              BluetoothGattProvider bluetoothGattProvider,
                              NativeCallbackDispatcher nativeCallbackDispatcher) {
         this.callbackScheduler = callbackScheduler;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/radio/RxBleRadioImpl.java
Patch:
@@ -19,7 +19,7 @@ public class RxBleRadioImpl implements RxBleRadio {
     private OperationPriorityFifoBlockingQueue queue = new OperationPriorityFifoBlockingQueue();
 
     @Inject
-    public RxBleRadioImpl(@Named(ClientComponent.NamedSchedulers.RADIO_OPERATIONS) final Scheduler callbackScheduler) {
+    public RxBleRadioImpl(@Named(ClientComponent.NamedSchedulers.BLUETOOTH_INTERACTION) final Scheduler callbackScheduler) {
         new Thread(new Runnable() {
             @Override
             public void run() {
@@ -73,6 +73,7 @@ public void cancel() throws Exception {
         }, Emitter.BackpressureMode.NONE);
     }
 
+    @RestrictTo(RestrictTo.Scope.SUBCLASSES)
     void log(String prefix, Operation rxBleRadioOperation) {
 
         if (RxBleLog.isAtLeast(RxBleLog.DEBUG)) {

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/advanced/AdvancedCharacteristicOperationExampleActivity.java
Patch:
@@ -5,6 +5,7 @@
 import android.support.annotation.StringRes;
 import android.support.design.widget.Snackbar;
 import android.util.Log;
+import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
 import butterknife.BindView;
@@ -176,7 +177,7 @@ private void handleEvent(PresenterEvent presenterEvent) {
         if (presenterEvent instanceof CompatibilityModeEvent) {
             final CompatibilityModeEvent compatibilityModeEvent = (CompatibilityModeEvent) presenterEvent;
             final boolean isCompatibility = compatibilityModeEvent.show;
-            compatOnlyWarningTextView.setEnabled(isCompatibility);
+            compatOnlyWarningTextView.setVisibility(isCompatibility ? View.VISIBLE : View.INVISIBLE);
             if (isCompatibility) {
                 /*
                 All characteristics that have PROPERTY_NOTIFY or PROPERTY_INDICATE should contain
@@ -217,7 +218,7 @@ private void handleEvent(PresenterEvent presenterEvent) {
         if (presenterEvent instanceof ErrorEvent) {
             final ErrorEvent errorEvent = (ErrorEvent) presenterEvent;
             final Throwable throwable = errorEvent.error;
-            String notificationText = "";
+            final String notificationText;
             switch (errorEvent.type) {
 
                 case READ:

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/advanced/Presenter.java
Patch:
@@ -59,9 +59,7 @@ static Observable<PresenterEvent> prepareActivityLogic(
                                                     : readClicks // else use the readClicks observable from the activity
                                                     // every click is requesting a read operation from the peripheral
                                                     .flatMap(ignoredClick -> connection.readCharacteristic(characteristic))
-                                                    .compose(transformToPresenterEvent(Type.READ)) // convenience method to wrap reads
-                                                    // if this observable will complete (i.e. error happens) then repeat from the click
-                                                    .compose(repeatAfterCompleted());
+                                                    .compose(transformToPresenterEvent(Type.READ)); // convenience method to wrap reads
 
                                     final Observable<PresenterEvent> writeObservable = // basically the same logic as in the reads
                                             !hasProperty(characteristic, BluetoothGattCharacteristic.PROPERTY_WRITE)

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleConnection.java
Patch:
@@ -68,6 +68,7 @@ public interface RxBleConnection {
             BluetoothGatt.CONNECTION_PRIORITY_HIGH})
     @interface ConnectionPriority { }
 
+    @Deprecated
     interface Connector {
 
         Observable<RxBleConnection> prepareConnection(boolean autoConnect);

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/ConnectionModule.java
Patch:
@@ -13,7 +13,7 @@
 import dagger.Provides;
 
 @Module
-abstract public class ConnectionModule {
+abstract class ConnectionModule {
 
     static final String GATT_WRITE_MTU_OVERHEAD = "GATT_WRITE_MTU_OVERHEAD";
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/ConnectorImpl.java
Patch:
@@ -23,7 +23,7 @@
 
 import static com.polidea.rxandroidble.internal.util.ObservableUtil.justOnNext;
 
-public class RxBleConnectionConnectorImpl implements RxBleConnection.Connector {
+public class ConnectorImpl implements Connector {
 
     private final BluetoothDevice bluetoothDevice;
     private final RxBleRadio rxBleRadio;
@@ -32,7 +32,7 @@ public class RxBleConnectionConnectorImpl implements RxBleConnection.Connector {
     private final ConnectionComponent.Builder connectionComponentBuilder;
 
     @Inject
-    public RxBleConnectionConnectorImpl(
+    public ConnectorImpl(
             BluetoothDevice bluetoothDevice,
             RxBleRadio rxBleRadio,
             RxBleAdapterWrapper rxBleAdapterWrapper,
@@ -100,6 +100,7 @@ public Observable<BluetoothGatt> call(BleAdapterState bleAdapterState) {
             }
         });
     }
+
     private Observable<BleAdapterState> adapterNotUsableObservable() {
         return adapterStateObservable
                 .filter(new Func1<BleAdapterState, Boolean>() {

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/advanced/Presenter.java
Patch:
@@ -170,10 +170,10 @@ static <T> Observable.Transformer<T, T> takeUntil(Observable<?> beforeEmission,
                         publishedObservable,
                         ((Observable<T>) beforeEmission.take(1).ignoreElements())
                 )
-                        .takeUntil(publishedObservable
+                        .takeUntil(((Observable<?>) publishedObservable
                                 .take(1)
                                 .toCompletable()
-                                .andThen(afterEmission)
+                                .andThen(afterEmission))
                         )
         );
     }

File: sample/src/main/java/com/polidea/rxandroidble/sample/example3_discovery/ServiceDiscoveryExampleActivity.java
Patch:
@@ -13,7 +13,6 @@
 import com.polidea.rxandroidble.sample.R;
 import com.polidea.rxandroidble.sample.SampleApplication;
 import com.polidea.rxandroidble.sample.example4_characteristic.CharacteristicOperationExampleActivity;
-import com.polidea.rxandroidble.sample.example4_characteristic.advanced.AdvancedCharacteristicOperationExampleActivity;
 import com.trello.rxlifecycle.components.support.RxAppCompatActivity;
 
 import butterknife.BindView;

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/advanced/AdvancedCharacteristicOperationExampleActivity.java
Patch:
@@ -40,6 +40,7 @@
  */
 public class AdvancedCharacteristicOperationExampleActivity extends RxAppCompatActivity {
 
+    private static final String TAG = AdvancedCharacteristicOperationExampleActivity.class.getSimpleName();
     public static final String EXTRA_CHARACTERISTIC_UUID = "extra_uuid";
     @BindView(R.id.connect)
     Button connectButton;
@@ -61,7 +62,6 @@ public class AdvancedCharacteristicOperationExampleActivity extends RxAppCompatA
     Button indicateButton;
     private Subscription activityFlowSubscription;
     private Observable<PresenterEvent> presenterEventObservable;
-    private final String TAG = getClass().getSimpleName();
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -209,6 +209,7 @@ private void handleEvent(PresenterEvent presenterEvent) {
                     showNotification("Notification: " + HexString.bytesToHex(resultEvent.result));
                     break;
                 case INDICATE:
+                default: // added because Checkstyle is complaining
                     showNotification("Indication: " + HexString.bytesToHex(resultEvent.result));
                     break;
             }
@@ -229,6 +230,7 @@ private void handleEvent(PresenterEvent presenterEvent) {
                     notificationText = "Notifications error: " + throwable;
                     break;
                 case INDICATE:
+                default: // added because Checkstyle is complaining
                     notificationText = "Indications error: " + throwable;
                     break;
             }

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/advanced/AdvancedCharacteristicOperationExampleActivity.java
Patch:
@@ -100,7 +100,7 @@ protected void onCreate(Bundle savedInstanceState) {
                         .retryWhen(errorNotificationHandler -> errorNotificationHandler),
                 sharedNotifyButtonClicks.compose(onSubscribeSetText(notifyButton, R.string.setup_notification)),
                 sharedNotifyButtonClicks.compose(onSubscribeSetText(notifyButton, R.string.setting_notification)),
-                sharedNotifyButtonClicks.compose(onSubscribeSetText(notifyButton, R.string.teardown_indication)),
+                sharedNotifyButtonClicks.compose(onSubscribeSetText(notifyButton, R.string.teardown_notification)),
                 sharedIndicateButtonClicks.compose(onSubscribeSetText(indicateButton, R.string.setup_indication)),
                 sharedIndicateButtonClicks.compose(onSubscribeSetText(indicateButton, R.string.setting_indication)),
                 sharedIndicateButtonClicks.compose(onSubscribeSetText(indicateButton, R.string.teardown_indication))

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationScan.java
Patch:
@@ -20,7 +20,7 @@ abstract public class RxBleRadioOperationScan<SCAN_RESULT_TYPE, SCAN_CALLBACK_TY
 
     private final RxBleAdapterWrapper rxBleAdapterWrapper;
 
-    protected RxBleRadioOperationScan(RxBleAdapterWrapper rxBleAdapterWrapper) {
+    RxBleRadioOperationScan(RxBleAdapterWrapper rxBleAdapterWrapper) {
         this.rxBleAdapterWrapper = rxBleAdapterWrapper;
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationScanApi21.java
Patch:
@@ -22,8 +22,6 @@
 @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
 public class RxBleRadioOperationScanApi21 extends RxBleRadioOperationScan<RxBleInternalScanResult, ScanCallback> {
 
-    @NonNull
-    private final RxBleAdapterWrapper rxBleAdapterWrapper;
     @NonNull
     private final InternalScanResultCreator internalScanResultCreator;
     @NonNull
@@ -49,7 +47,6 @@ public RxBleRadioOperationScanApi21(
         this.scanSettings = scanSettings;
         this.emulatedScanFilterMatcher = emulatedScanFilterMatcher;
         this.scanFilters = offloadedScanFilters;
-        this.rxBleAdapterWrapper = rxBleAdapterWrapper;
         this.androidScanObjectsConverter = androidScanObjectsConverter;
     }
 

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -64,7 +64,9 @@ public RxBleConnectionMock(RxBleDeviceServices rxBleDeviceServices,
     }
 
     @Override
-    public Completable requestConnectionPriority(int connectionPriority, long delay, @NonNull TimeUnit timeUnit) {
+    public Completable requestConnectionPriority(int connectionPriority,
+                                                 long delay,
+                                                 @NonNull TimeUnit timeUnit) {
         return Completable.complete();
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleDeviceServices.java
Patch:
@@ -16,7 +16,7 @@
 import rx.functions.Func1;
 
 /**
- * Service discovery result containing list of services and characteristics withing the services.
+ * Service discovery result containing list of services and characteristics within the services.
  */
 public class RxBleDeviceServices {
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleGattOperationType.java
Patch:
@@ -13,6 +13,7 @@ public class BleGattOperationType {
     public static final BleGattOperationType RELIABLE_WRITE_COMPLETED = new BleGattOperationType("RELIABLE_WRITE_COMPLETED");
     public static final BleGattOperationType READ_RSSI = new BleGattOperationType("READ_RSSI");
     public static final BleGattOperationType ON_MTU_CHANGED = new BleGattOperationType("ON_MTU_CHANGED");
+    public static final BleGattOperationType CONNECTION_PRIORITY_CHANGE = new BleGattOperationType("CONNECTION_PRIORITY_CHANGE");
     private final String description;
 
     private BleGattOperationType(String description) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleScanException.java
Patch:
@@ -91,8 +91,7 @@ public BleScanException(@Reason int reason, Throwable causeException) {
     /**
      * Returns the reason code of scan failure.
      *
-     * @return One of {@link #BLUETOOTH_CANNOT_START}, {@link #BLUETOOTH_DISABLED}, {@link #BLUETOOTH_NOT_AVAILABLE},
-     * {@link #LOCATION_PERMISSION_MISSING}, {@link #LOCATION_SERVICES_DISABLED}.
+     * @return One of the {@link Reason} codes.
      */
     @Reason
     public int getReason() {
@@ -129,6 +128,8 @@ private String reasonDescription() {
                 return "SCAN_FAILED_FEATURE_UNSUPPORTED";
             case SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES:
                 return "SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES";
+            case UNKNOWN_ERROR_CODE:
+                // fallthrough
             default:
                 return "UNKNOWN";
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/scan/RxBleInternalScanResultLegacy.java
Patch:
@@ -1,14 +1,14 @@
-package com.polidea.rxandroidble.internal;
+package com.polidea.rxandroidble.internal.scan;
 
 import android.bluetooth.BluetoothDevice;
 
-public class RxBleInternalScanResult {
+public class RxBleInternalScanResultLegacy {
 
     private final BluetoothDevice bluetoothDevice;
     private final int rssi;
     private final byte[] scanRecord;
 
-    public RxBleInternalScanResult(BluetoothDevice bleDevice, int rssi, byte[] scanRecords) {
+    public RxBleInternalScanResultLegacy(BluetoothDevice bleDevice, int rssi, byte[] scanRecords) {
         this.bluetoothDevice = bleDevice;
         this.rssi = rssi;
         this.scanRecord = scanRecords;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleRadioOperation.java
Patch:
@@ -94,8 +94,10 @@ protected final void onNext(T next) {
 
     /**
      * A convenience method for calling the Subscriber's onCompleted()
+     * Calling this method automatically releases the radio -> calls releaseRadio().
      */
     protected final void onCompleted() {
+        releaseRadio();
         replaySubject.onCompleted();
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicLongWrite.java
Patch:
@@ -93,7 +93,6 @@ protected void protectedRun() throws Throwable {
                             public void call() {
                                 onNext(bytesToWrite);
                                 onCompleted();
-                                releaseRadio();
                             }
                         },
                         new Action1<Throwable>() {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/PayloadSizeLimitProvider.java
Patch:
@@ -4,7 +4,7 @@
 import android.support.annotation.RestrictTo;
 
 @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
-public interface IntProvider {
+public interface PayloadSizeLimitProvider {
 
-    int getValue();
+    int getPayloadSizeLimit();
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProvider.java
Patch:
@@ -6,7 +6,7 @@
 import android.support.annotation.RequiresApi;
 
 import com.polidea.rxandroidble.RxBleConnection;
-import com.polidea.rxandroidble.internal.connection.IntProvider;
+import com.polidea.rxandroidble.internal.connection.PayloadSizeLimitProvider;
 
 import java.util.concurrent.TimeUnit;
 
@@ -15,7 +15,7 @@ public interface OperationsProvider {
     RxBleRadioOperationCharacteristicLongWrite provideLongWriteOperation(
             BluetoothGattCharacteristic bluetoothGattCharacteristic,
             RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy,
-            IntProvider maxBatchSizeProvider,
+            PayloadSizeLimitProvider maxBatchSizeProvider,
             byte[] bytes);
 
     @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProviderImpl.java
Patch:
@@ -9,7 +9,7 @@
 import com.polidea.rxandroidble.ClientComponent;
 import com.polidea.rxandroidble.RxBleConnection;
 import com.polidea.rxandroidble.internal.DeviceModule;
-import com.polidea.rxandroidble.internal.connection.IntProvider;
+import com.polidea.rxandroidble.internal.connection.PayloadSizeLimitProvider;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 
 import java.util.concurrent.TimeUnit;
@@ -49,7 +49,7 @@ public class OperationsProviderImpl implements OperationsProvider {
     public RxBleRadioOperationCharacteristicLongWrite provideLongWriteOperation(
             BluetoothGattCharacteristic bluetoothGattCharacteristic,
             RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy,
-            IntProvider maxBatchSizeProvider,
+            PayloadSizeLimitProvider maxBatchSizeProvider,
             byte[] bytes) {
 
         return new RxBleRadioOperationCharacteristicLongWrite(bluetoothGatt,

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleDeviceImpl.java
Patch:
@@ -30,7 +30,7 @@ class RxBleDeviceImpl implements RxBleDevice {
     private AtomicBoolean isConnected = new AtomicBoolean(false);
 
     @Inject
-    public RxBleDeviceImpl(BluetoothDevice bluetoothDevice, RxBleConnection.Connector connector) {
+    RxBleDeviceImpl(BluetoothDevice bluetoothDevice, RxBleConnection.Connector connector) {
         this.bluetoothDevice = bluetoothDevice;
         this.connector = connector;
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/cache/DeviceComponentWeakReference.java
Patch:
@@ -12,16 +12,16 @@ public interface Provider {
         DeviceComponentWeakReference provide(DeviceComponent rxBleDevice);
     }
 
-    public DeviceComponentWeakReference(DeviceComponent device) {
+    DeviceComponentWeakReference(DeviceComponent device) {
         super(device);
     }
 
     @SuppressWarnings("unused")
-    public DeviceComponentWeakReference(DeviceComponent r, ReferenceQueue<? super DeviceComponent> q) {
+    DeviceComponentWeakReference(DeviceComponent r, ReferenceQueue<? super DeviceComponent> q) {
         super(r, q);
     }
 
-    public boolean contains(Object object) {
+    boolean contains(Object object) {
         final DeviceComponent thisDevice = get();
         return object instanceof DeviceComponent
                 && thisDevice != null

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/radio/OperationPriorityFifoBlockingQueue.java
Patch:
@@ -40,12 +40,12 @@ private static class FIFOEntry implements Comparable<FIFOEntry> {
 
         final RxBleRadioOperation entry;
 
-        public FIFOEntry(RxBleRadioOperation entry) {
+        FIFOEntry(RxBleRadioOperation entry) {
             seqNum = SEQUENCE.getAndIncrement();
             this.entry = entry;
         }
 
-        public RxBleRadioOperation getEntry() {
+        RxBleRadioOperation getEntry() {
             return entry;
         }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProvider.java
Patch:
@@ -6,16 +6,16 @@
 import android.support.annotation.RequiresApi;
 
 import com.polidea.rxandroidble.RxBleConnection;
+import com.polidea.rxandroidble.internal.connection.IntProvider;
 
-import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 
 public interface OperationsProvider {
 
     RxBleRadioOperationCharacteristicLongWrite provideLongWriteOperation(
             BluetoothGattCharacteristic bluetoothGattCharacteristic,
             RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy,
-            Callable<Integer> maxBatchSizeCallable,
+            IntProvider maxBatchSizeProvider,
             byte[] bytes);
 
     @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/OperationsProviderImpl.java
Patch:
@@ -9,9 +9,9 @@
 import com.polidea.rxandroidble.ClientComponent;
 import com.polidea.rxandroidble.RxBleConnection;
 import com.polidea.rxandroidble.internal.DeviceModule;
+import com.polidea.rxandroidble.internal.connection.IntProvider;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 
-import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 
 import javax.inject.Inject;
@@ -49,15 +49,15 @@ public class OperationsProviderImpl implements OperationsProvider {
     public RxBleRadioOperationCharacteristicLongWrite provideLongWriteOperation(
             BluetoothGattCharacteristic bluetoothGattCharacteristic,
             RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy,
-            Callable<Integer> maxBatchSizeCallable,
+            IntProvider maxBatchSizeProvider,
             byte[] bytes) {
 
         return new RxBleRadioOperationCharacteristicLongWrite(bluetoothGatt,
                 rxBleGattCallback,
                 mainThreadScheduler,
                 timeoutConfiguration,
                 bluetoothGattCharacteristic,
-                maxBatchSizeCallable,
+                maxBatchSizeProvider,
                 writeOperationAckStrategy,
                 bytes);
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicLongWrite.java
Patch:
@@ -135,7 +135,7 @@ public void cancel() throws Exception {
                             }
                         });
 
-                        /**
+                        /*
                          * Since Android OS calls {@link android.bluetooth.BluetoothGattCallback} callbacks on arbitrary background
                          * threads - in case the {@link BluetoothGattCharacteristic} has
                          * a {@link BluetoothGattCharacteristic#WRITE_TYPE_NO_RESPONSE} set it is possible that

File: rxandroidble/src/main/java/com/polidea/rxandroidble/ClientComponent.java
Patch:
@@ -8,6 +8,7 @@
 import android.location.LocationManager;
 import android.os.Build;
 
+import android.support.annotation.Nullable;
 import com.polidea.rxandroidble.helpers.LocationServicesOkObservable;
 import com.polidea.rxandroidble.internal.DeviceComponent;
 import com.polidea.rxandroidble.internal.RxBleRadio;
@@ -77,7 +78,8 @@ BluetoothManager provideBluetoothManager() {
         }
 
         @Provides
-        BluetoothAdapter provideBlutetoothAdapter() {
+        @Nullable
+        BluetoothAdapter provideBluetoothAdapter() {
             return BluetoothAdapter.getDefaultAdapter();
         }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleLog.java
Patch:
@@ -3,6 +3,8 @@
 import android.support.annotation.IntDef;
 import android.util.Log;
 
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -12,6 +14,7 @@
 public class RxBleLog {
 
     @IntDef({VERBOSE, DEBUG, INFO, WARN, ERROR, NONE})
+    @Retention(RetentionPolicy.SOURCE)
     public @interface LogLevel {
 
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleClientImpl.java
Patch:
@@ -55,7 +55,6 @@ class RxBleClientImpl extends RxBleClient {
         this.rxBleDeviceProvider = rxBleDeviceProvider;
         this.executorService = executorService;
     }
-
     @Override
     protected void finalize() throws Throwable {
         super.finalize();

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleAdapterStateObservable.java
Patch:
@@ -7,6 +7,8 @@
 import android.content.IntentFilter;
 import android.support.annotation.NonNull;
 
+import javax.inject.Inject;
+
 import rx.Observable;
 import rx.Subscriber;
 import rx.functions.Action0;
@@ -38,6 +40,7 @@ public boolean isUsable() {
         }
     }
 
+    @Inject
     public RxBleAdapterStateObservable(@NonNull final Context context) {
         super(new OnSubscribe<BleAdapterState>() {
             @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleConnection.java
Patch:
@@ -3,7 +3,6 @@
 import android.bluetooth.BluetoothGatt;
 import android.bluetooth.BluetoothGattCharacteristic;
 import android.bluetooth.BluetoothGattDescriptor;
-import android.content.Context;
 import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.RequiresApi;
@@ -30,7 +29,7 @@ public interface RxBleConnection {
 
     interface Connector {
 
-        Observable<RxBleConnection> prepareConnection(Context context, boolean autoConnect);
+        Observable<RxBleConnection> prepareConnection(boolean autoConnect);
     }
 
     class RxBleConnectionState {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleRadio.java
Patch:
@@ -1,11 +1,8 @@
 package com.polidea.rxandroidble.internal;
 
 import rx.Observable;
-import rx.Scheduler;
 
 public interface RxBleRadio {
 
-    Scheduler scheduler();
-
     <T> Observable<T> queue(RxBleRadioOperation<T> rxBleRadioOperation);
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/BleConnectionCompat.java
Patch:
@@ -15,12 +15,15 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import javax.inject.Inject;
+
 import static android.bluetooth.BluetoothDevice.TRANSPORT_LE;
 
 public class BleConnectionCompat {
 
     private final Context context;
 
+    @Inject
     public BleConnectionCompat(Context context) {
         this.context = context;
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/CheckerLocationPermission.java
Patch:
@@ -6,10 +6,13 @@
 import android.content.pm.PackageManager;
 import android.os.Process;
 
+import javax.inject.Inject;
+
 public class CheckerLocationPermission {
 
     private final Context context;
 
+    @Inject
     public CheckerLocationPermission(Context context) {
         this.context = context;
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/CheckerLocationProvider.java
Patch:
@@ -3,10 +3,13 @@
 
 import android.location.LocationManager;
 
+import javax.inject.Inject;
+
 public class CheckerLocationProvider {
 
     private final LocationManager locationManager;
 
+    @Inject
     public CheckerLocationProvider(LocationManager locationManager) {
         this.locationManager = locationManager;
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/ObservableUtil.java
Patch:
@@ -5,6 +5,7 @@
 public class ObservableUtil {
 
     private ObservableUtil() {
+
     }
 
     public static <T> Observable<T> justOnNext(T onNext) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/RxBleAdapterWrapper.java
Patch:
@@ -6,10 +6,13 @@
 
 import java.util.Set;
 
+import javax.inject.Inject;
+
 public class RxBleAdapterWrapper {
 
     private final BluetoothAdapter bluetoothAdapter;
 
+    @Inject
     public RxBleAdapterWrapper(@Nullable BluetoothAdapter bluetoothAdapter) {
         this.bluetoothAdapter = bluetoothAdapter;
     }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleDeviceMock.java
Patch:
@@ -110,8 +110,7 @@ public String getMacAddress() {
 
     @Override
     public BluetoothDevice getBluetoothDevice() {
-        throw new UnsupportedOperationException("Mock does not support returning a "
-            + "BluetoothDevice.");
+        throw new UnsupportedOperationException("Mock does not support returning a BluetoothDevice.");
     }
 
     @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleRadio.java
Patch:
@@ -1,8 +1,11 @@
 package com.polidea.rxandroidble.internal;
 
 import rx.Observable;
+import rx.Scheduler;
 
 public interface RxBleRadio {
 
+    Scheduler scheduler();
+
     <T> Observable<T> queue(RxBleRadioOperation<T> rxBleRadioOperation);
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleRadioOperation.java
Patch:
@@ -50,7 +50,7 @@ public final void run() {
     }
 
     /**
-     * This method will be overriden in concrete operation implementations and
+     * This method will be overridden in concrete operation implementations and
      * will contain specific operation logic.
      */
     protected abstract void protectedRun() throws Throwable;

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -231,6 +231,8 @@ public Observable<? extends BluetoothGattCharacteristic> call(Boolean ignored) {
 
     @Override
     public Observable<byte[]> writeCharacteristic(@NonNull BluetoothGattCharacteristic bluetoothGattCharacteristic, @NonNull byte[] data) {
+        bluetoothGattCharacteristic.setValue(data);
+
         return Observable.just(data);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleGattCallback.java
Patch:
@@ -38,8 +38,7 @@ public interface Provider {
     private final PublishSubject<Pair<BluetoothGatt, RxBleConnectionState>> gattAndConnectionStatePublishSubject = PublishSubject.create();
     private final PublishSubject<RxBleDeviceServices> servicesDiscoveredPublishSubject = PublishSubject.create();
     private final PublishSubject<ByteAssociation<UUID>> readCharacteristicPublishSubject = PublishSubject.create();
-    private final SerializedSubject<ByteAssociation<UUID>, ByteAssociation<UUID>> writeCharacteristicPublishSubject
-            = PublishSubject.<ByteAssociation<UUID>>create().toSerialized();
+    private final PublishSubject<ByteAssociation<UUID>> writeCharacteristicPublishSubject = PublishSubject.create();
     private final SerializedSubject<CharacteristicChangedEvent, CharacteristicChangedEvent>
             changedCharacteristicPublishSubject = PublishSubject.<CharacteristicChangedEvent>create().toSerialized();
     private final PublishSubject<ByteAssociation<BluetoothGattDescriptor>> readDescriptorPublishSubject = PublishSubject.create();

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleGattCallback.java
Patch:
@@ -37,7 +37,8 @@ public interface Provider {
     private final PublishSubject<Pair<BluetoothGatt, RxBleConnectionState>> gattAndConnectionStatePublishSubject = PublishSubject.create();
     private final PublishSubject<RxBleDeviceServices> servicesDiscoveredPublishSubject = PublishSubject.create();
     private final PublishSubject<ByteAssociation<UUID>> readCharacteristicPublishSubject = PublishSubject.create();
-    private final PublishSubject<ByteAssociation<UUID>> writeCharacteristicPublishSubject = PublishSubject.create();
+    private final SerializedSubject<ByteAssociation<UUID>, ByteAssociation<UUID>> writeCharacteristicPublishSubject
+            = PublishSubject.<ByteAssociation<UUID>>create().toSerialized();
     private final SerializedSubject<ByteAssociation<Integer>, ByteAssociation<Integer>> changedCharacteristicPublishSubject
             = PublishSubject.<ByteAssociation<Integer>>create().toSerialized();
     private final PublishSubject<ByteAssociation<BluetoothGattDescriptor>> readDescriptorPublishSubject = PublishSubject.create();

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicLongWrite.java
Patch:
@@ -17,6 +17,7 @@
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 
+import com.polidea.rxandroidble.internal.util.OperatorDoAfterSubscribe;
 import java.nio.ByteBuffer;
 import java.util.UUID;
 import java.util.concurrent.Callable;
@@ -84,7 +85,7 @@ protected void protectedRun() throws Throwable {
         );
         final ByteBuffer byteBuffer = ByteBuffer.wrap(bytesToWrite);
         rxBleGattCallback.getOnCharacteristicWrite()
-                .doOnSubscribe(writeNextBatch(batchSize, byteBuffer))
+                .lift(new OperatorDoAfterSubscribe<ByteAssociation<UUID>>(writeNextBatch(batchSize, byteBuffer)))
                 .subscribeOn(mainThreadScheduler)
                 .observeOn(callbackScheduler)
                 .takeFirst(writeResponseForMatchingCharacteristic())

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicLongWrite.java
Patch:
@@ -47,7 +47,7 @@ public class RxBleRadioOperationCharacteristicLongWrite extends RxBleRadioOperat
     private final Scheduler mainThreadScheduler;
 
     private final Scheduler callbackScheduler;
-    
+
     private final Scheduler timeoutScheduler;
 
     public RxBleRadioOperationCharacteristicLongWrite(

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleConnection.java
Patch:
@@ -102,7 +102,7 @@ interface LongWriteOperationBuilder {
          * however you may delay them at your pace.
          *
          * @param writeOperationAckStrategy the function that acknowledges writing of the batch of bytes. It takes
-         *                                  an {@link Observable<Boolean>} that emits a null value each time the byte array batch
+         *                                  an {@link Observable<Boolean>} that emits a value each time the byte array batch
          *                                  has finished to write. {@link Boolean#TRUE} means that there are more items in the buffer,
          *                                  {@link Boolean#FALSE} otherwise. If you want to delay the next batch use provided observable
          *                                  and add some custom behavior (delay, waiting for a message from the device, etc.)

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -8,7 +8,7 @@
 import com.polidea.rxandroidble.RxBleConnection;
 import com.polidea.rxandroidble.RxBleDeviceServices;
 import com.polidea.rxandroidble.exceptions.BleConflictingNotificationAlreadySetException;
-import com.polidea.rxandroidble.internal.connection.ImmediateSerializedBatchActStrategy;
+import com.polidea.rxandroidble.internal.connection.ImmediateSerializedBatchAckStrategy;
 import com.polidea.rxandroidble.internal.util.ObservableUtil;
 
 import java.util.HashMap;
@@ -245,7 +245,7 @@ public LongWriteOperationBuilder createNewLongWriteBuilder() {
             private byte[] bytes;
 
             private WriteOperationAckStrategy writeOperationAckStrategy = // default
-                    new ImmediateSerializedBatchActStrategy();
+                    new ImmediateSerializedBatchAckStrategy();
 
             @Override
             public LongWriteOperationBuilder setBytes(byte[] bytes) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleSingleGattRadioOperation.java
Patch:
@@ -15,7 +15,7 @@
 import rx.Subscription;
 import rx.functions.Action0;
 
-public abstract class RxBleGattRadioOperation<T> extends RxBleRadioOperation<T> {
+public abstract class RxBleSingleGattRadioOperation<T> extends RxBleRadioOperation<T> {
 
     private final BluetoothGatt bluetoothGatt;
 
@@ -29,7 +29,7 @@ public abstract class RxBleGattRadioOperation<T> extends RxBleRadioOperation<T>
 
     private final Scheduler timeoutScheduler;
 
-    public RxBleGattRadioOperation(
+    public RxBleSingleGattRadioOperation(
             BluetoothGatt bluetoothGatt,
             RxBleGattCallback rxBleGattCallback,
             BleGattOperationType operationType,
@@ -58,7 +58,7 @@ final protected void protectedRun() throws Throwable {
                 .doOnCompleted(new Action0() {
                     @Override
                     public void call() {
-                        RxBleGattRadioOperation.this.releaseRadio();
+                        RxBleSingleGattRadioOperation.this.releaseRadio();
                     }
                 })
                 .subscribe(getSubscriber());

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/ImmediateSerializedBatchAckStrategy.java
Patch:
@@ -4,7 +4,7 @@
 
 import rx.Observable;
 
-public class ImmediateSerializedBatchActStrategy implements RxBleConnection.WriteOperationAckStrategy {
+public class ImmediateSerializedBatchAckStrategy implements RxBleConnection.WriteOperationAckStrategy {
 
     @Override
     public Observable<Boolean> call(Observable<Boolean> objectObservable) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/LongWriteOperationBuilderImpl.java
Patch:
@@ -26,7 +26,7 @@ final class LongWriteOperationBuilderImpl implements RxBleConnection.LongWriteOp
     private final RxBleRadio rxBleRadio;
 
     @NonNull
-    private RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy = new ImmediateSerializedBatchActStrategy();
+    private RxBleConnection.WriteOperationAckStrategy writeOperationAckStrategy = new ImmediateSerializedBatchAckStrategy();
 
     private byte[] bytes;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicRead.java
Patch:
@@ -3,7 +3,7 @@
 import android.bluetooth.BluetoothGatt;
 import android.bluetooth.BluetoothGattCharacteristic;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 import java.util.UUID;
@@ -12,7 +12,7 @@
 import rx.Scheduler;
 import rx.functions.Func1;
 
-public class RxBleRadioOperationCharacteristicRead extends RxBleGattRadioOperation<byte[]> {
+public class RxBleRadioOperationCharacteristicRead extends RxBleSingleGattRadioOperation<byte[]> {
 
     private final BluetoothGattCharacteristic bluetoothGattCharacteristic;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicWrite.java
Patch:
@@ -3,7 +3,7 @@
 import android.bluetooth.BluetoothGatt;
 import android.bluetooth.BluetoothGattCharacteristic;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 import java.util.UUID;
@@ -12,7 +12,7 @@
 import rx.Scheduler;
 import rx.functions.Func1;
 
-public class RxBleRadioOperationCharacteristicWrite extends RxBleGattRadioOperation<byte[]> {
+public class RxBleRadioOperationCharacteristicWrite extends RxBleSingleGattRadioOperation<byte[]> {
 
     private final BluetoothGattCharacteristic bluetoothGattCharacteristic;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorRead.java
Patch:
@@ -3,15 +3,15 @@
 import android.bluetooth.BluetoothGatt;
 import android.bluetooth.BluetoothGattDescriptor;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 import java.util.concurrent.TimeUnit;
 import rx.Observable;
 import rx.Scheduler;
 import rx.functions.Func1;
 
-public class RxBleRadioOperationDescriptorRead extends RxBleGattRadioOperation<ByteAssociation<BluetoothGattDescriptor>> {
+public class RxBleRadioOperationDescriptorRead extends RxBleSingleGattRadioOperation<ByteAssociation<BluetoothGattDescriptor>> {
 
     private final BluetoothGattDescriptor bluetoothGattDescriptor;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorWrite.java
Patch:
@@ -4,15 +4,15 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 import android.bluetooth.BluetoothGattDescriptor;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.ByteAssociation;
 import java.util.concurrent.TimeUnit;
 import rx.Observable;
 import rx.Scheduler;
 import rx.functions.Func1;
 
-public class RxBleRadioOperationDescriptorWrite extends RxBleGattRadioOperation<byte[]> {
+public class RxBleRadioOperationDescriptorWrite extends RxBleSingleGattRadioOperation<byte[]> {
 
     private final BluetoothGattDescriptor bluetoothGattDescriptor;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationMtuRequest.java
Patch:
@@ -4,14 +4,14 @@
 import android.os.Build;
 import android.support.annotation.RequiresApi;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import java.util.concurrent.TimeUnit;
 import rx.Observable;
 import rx.Scheduler;
 
 @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
-public class RxBleRadioOperationMtuRequest extends RxBleGattRadioOperation<Integer> {
+public class RxBleRadioOperationMtuRequest extends RxBleSingleGattRadioOperation<Integer> {
 
     private final int mtu;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -2,13 +2,13 @@
 
 import android.bluetooth.BluetoothGatt;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import java.util.concurrent.TimeUnit;
 import rx.Observable;
 import rx.Scheduler;
 
-public class RxBleRadioOperationReadRssi extends RxBleGattRadioOperation<Integer> {
+public class RxBleRadioOperationReadRssi extends RxBleSingleGattRadioOperation<Integer> {
 
     public RxBleRadioOperationReadRssi(RxBleGattCallback bleGattCallback, BluetoothGatt bluetoothGatt, Scheduler timeoutScheduler) {
         super(bluetoothGatt, bleGattCallback, BleGattOperationType.READ_RSSI, 30, TimeUnit.SECONDS, timeoutScheduler);

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationServicesDiscover.java
Patch:
@@ -6,7 +6,7 @@
 import com.polidea.rxandroidble.RxBleDeviceServices;
 import com.polidea.rxandroidble.exceptions.BleGattCallbackTimeoutException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattRadioOperation;
+import com.polidea.rxandroidble.internal.RxBleSingleGattRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import java.util.List;
 import java.util.concurrent.Callable;
@@ -17,7 +17,7 @@
 import rx.functions.Func0;
 import rx.functions.Func1;
 
-public class RxBleRadioOperationServicesDiscover extends RxBleGattRadioOperation<RxBleDeviceServices> {
+public class RxBleRadioOperationServicesDiscover extends RxBleSingleGattRadioOperation<RxBleDeviceServices> {
 
     public RxBleRadioOperationServicesDiscover(
             RxBleGattCallback rxBleGattCallback,

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionConnectorOperationsProvider.java
Patch:
@@ -40,6 +40,7 @@ public RxBleOperations provide(Context context,
                 autoConnect);
         final RxBleRadioOperationDisconnect operationDisconnect = new RxBleRadioOperationDisconnect(
                 gattCallback,
+                bluetoothDevice.getAddress(),
                 bluetoothGattAtomicReference,
                 (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE),
                 AndroidSchedulers.mainThread()

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationServicesDiscover.java
Patch:
@@ -5,6 +5,7 @@
 import android.support.annotation.NonNull;
 import com.polidea.rxandroidble.RxBleDeviceServices;
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
+import com.polidea.rxandroidble.exceptions.BleGattCallbackTimeoutException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
@@ -75,7 +76,7 @@ private Observable<RxBleDeviceServices> timeoutFallbackProcedure() {
             final List<BluetoothGattService> services = bluetoothGatt.getServices();
             if (services.size() == 0) {
                 // if after the timeout services are empty we have no other option to declare a failed discovery
-                return Observable.error(new TimeoutException());
+                return Observable.error(new BleGattCallbackTimeoutException(bluetoothGatt, BleGattOperationType.SERVICE_DISCOVERY));
             } else {
                 /*
                 it is observed that usually the Android OS is returning services, characteristics and descriptors in a short period of time

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleGattCallback.java
Patch:
@@ -143,7 +143,7 @@ public void onReliableWriteCompleted(BluetoothGatt gatt, int status) {
             bluetoothGattBehaviorSubject.onNext(gatt);
 
             if (!propagateStatusErrorIfGattErrorOccurred(gatt, status, BleGattOperationType.RELIABLE_WRITE_COMPLETED)) {
-                // TODO Implement reliable write
+                return; // TODO Implement reliable write
             }
         }
 

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleClientMock.java
Patch:
@@ -105,9 +105,9 @@ public DeviceBuilder addService(@NonNull UUID uuid, @NonNull List<BluetoothGattC
         }
 
         /**
-         * Create the {@link RxBleClientMock} instance using the configured values.
+         * Create the {@link RxBleDeviceMock} instance using the configured values.
          */
-        public RxBleDeviceMock build() {
+        public RxBleDevice build() {
             if (this.rssi == -1) throw new IllegalStateException("Rssi is required. DeviceBuilder#rssi should be called.");
             if (this.deviceMacAddress == null) throw new IllegalStateException("DeviceMacAddress required."
                     + " DeviceBuilder#deviceMacAddress should be called.");

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicRead.java
Patch:
@@ -39,7 +39,7 @@ protected void protectedRun() {
         final boolean success = bluetoothGatt.readCharacteristic(bluetoothGattCharacteristic);
         if (!success) {
             subscription.unsubscribe();
-            onError(new BleGattCannotStartException(BleGattOperationType.CHARACTERISTIC_READ));
+            onError(new BleGattCannotStartException(bluetoothGatt, BleGattOperationType.CHARACTERISTIC_READ));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicWrite.java
Patch:
@@ -43,7 +43,7 @@ protected void protectedRun() {
         final boolean success = bluetoothGatt.writeCharacteristic(bluetoothGattCharacteristic);
         if (!success) {
             subscription.unsubscribe();
-            onError(new BleGattCannotStartException(BleGattOperationType.CHARACTERISTIC_WRITE));
+            onError(new BleGattCannotStartException(bluetoothGatt, BleGattOperationType.CHARACTERISTIC_WRITE));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorRead.java
Patch:
@@ -39,7 +39,7 @@ protected void protectedRun() {
         final boolean success = bluetoothGatt.readDescriptor(bluetoothGattDescriptor);
         if (!success) {
             subscription.unsubscribe();
-            onError(new BleGattCannotStartException(BleGattOperationType.DESCRIPTOR_READ));
+            onError(new BleGattCannotStartException(bluetoothGatt, BleGattOperationType.DESCRIPTOR_READ));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorWrite.java
Patch:
@@ -74,7 +74,7 @@ protected void protectedRun() {
 
         if (!success) {
             subscription.unsubscribe();
-            onError(new BleGattCannotStartException(BleGattOperationType.DESCRIPTOR_WRITE));
+            onError(new BleGattCannotStartException(bluetoothGatt, BleGattOperationType.DESCRIPTOR_WRITE));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -32,7 +32,7 @@ protected void protectedRun() {
         final boolean success = bluetoothGatt.readRemoteRssi();
         if (!success) {
             subscription.unsubscribe();
-            onError(new BleGattCannotStartException(BleGattOperationType.READ_RSSI));
+            onError(new BleGattCannotStartException(bluetoothGatt, BleGattOperationType.READ_RSSI));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationServicesDiscover.java
Patch:
@@ -54,7 +54,7 @@ protected void protectedRun() {
         final boolean success = bluetoothGatt.discoverServices();
         if (!success) {
             subscription.unsubscribe();
-            onError(new BleGattCannotStartException(BleGattOperationType.SERVICE_DISCOVERY));
+            onError(new BleGattCannotStartException(bluetoothGatt, BleGattOperationType.SERVICE_DISCOVERY));
         }
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionConnectorOperationsProvider.java
Patch:
@@ -10,6 +10,7 @@
 import com.polidea.rxandroidble.internal.util.BleConnectionCompat;
 
 import java.util.concurrent.atomic.AtomicReference;
+import rx.android.schedulers.AndroidSchedulers;
 
 public class RxBleConnectionConnectorOperationsProvider {
 
@@ -37,7 +38,8 @@ public RxBleOperations provide(Context context,
         final RxBleRadioOperationDisconnect operationDisconnect = new RxBleRadioOperationDisconnect(
                 gattCallback,
                 bluetoothGattAtomicReference,
-                (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE)
+                (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE),
+                AndroidSchedulers.mainThread()
         );
         // getBluetoothGatt completed when the connection is unsubscribed
         operationConnect.getBluetoothGatt().subscribe(bluetoothGattAtomicReference::set, ignored -> {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationConnect.java
Patch:
@@ -25,7 +25,7 @@ public class RxBleRadioOperationConnect extends RxBleRadioOperation<BluetoothGat
     private final Runnable releaseRadioRunnable = () -> releaseRadio();
     private final Runnable emptyRunnable = () -> {
     };
-    private final BehaviorSubject<Boolean> isSubscribed = BehaviorSubject.create(false);
+    private final BehaviorSubject<Boolean> isSubscribed = BehaviorSubject.create();
     private final Observable<BluetoothGatt> operationConnectAsObservableWithSubscribersMonitoring = super.asObservable()
             .doOnSubscribe(() -> isSubscribed.onNext(true))
             .doOnUnsubscribe(() -> isSubscribed.onNext(false))
@@ -53,6 +53,7 @@ protected void protectedRun() {
                 // when there are no subscribers there is no point of continuing work -> next will be disconnect operation
                 .takeUntil(asObservableHasNoSubscribers().doOnNext(noSubscribers -> RxBleLog.d("No subscribers, finishing operation")))
                 .doOnCompleted(onConnectionEstablishedRunnable::run)
+                .doOnNext(ignored -> isSubscribed.onCompleted())
                 .subscribe(getSubscriber());
         onConnectCalledRunnable.run();
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/LocationServicesStatus.java
Patch:
@@ -33,7 +33,7 @@ public boolean isLocationProviderRequired() {
 
     @TargetApi(Build.VERSION_CODES.M)
     private boolean isPermissionGranted(String permission) {
-        return Build.VERSION.SDK_INT < Build.VERSION_CODES.M ||
-                context.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;
+        return Build.VERSION.SDK_INT < Build.VERSION_CODES.M
+                || context.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;
     }
 }

File: sample/src/main/java/com/polidea/rxandroidble/sample/example1_scanning/ScanActivity.java
Patch:
@@ -15,17 +15,17 @@
 import com.polidea.rxandroidble.sample.R;
 import com.polidea.rxandroidble.sample.SampleApplication;
 
-import butterknife.Bind;
+import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.OnClick;
 import rx.Subscription;
 import rx.android.schedulers.AndroidSchedulers;
 
 public class ScanActivity extends AppCompatActivity {
 
-    @Bind(R.id.scan_toggle_btn)
+    @BindView(R.id.scan_toggle_btn)
     Button scanToggleButton;
-    @Bind(R.id.scan_results)
+    @BindView(R.id.scan_results)
     RecyclerView recyclerView;
     private RxBleClient rxBleClient;
     private Subscription scanSubscription;

File: sample/src/main/java/com/polidea/rxandroidble/sample/example1_scanning/ScanResultsAdapter.java
Patch:
@@ -14,16 +14,16 @@
 import java.util.Comparator;
 import java.util.List;
 
-import butterknife.Bind;
+import butterknife.BindView;
 import butterknife.ButterKnife;
 
 class ScanResultsAdapter extends RecyclerView.Adapter<ScanResultsAdapter.ViewHolder> {
 
     static class ViewHolder extends RecyclerView.ViewHolder {
 
-        @Bind(android.R.id.text1)
+        @BindView(android.R.id.text1)
         public TextView line1;
-        @Bind(android.R.id.text2)
+        @BindView(android.R.id.text2)
         public TextView line2;
 
         public ViewHolder(View itemView) {

File: sample/src/main/java/com/polidea/rxandroidble/sample/example3_discovery/DiscoveryResultsAdapter.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.UUID;
 
-import butterknife.Bind;
+import butterknife.BindView;
 import butterknife.ButterKnife;
 
 class DiscoveryResultsAdapter extends RecyclerView.Adapter<DiscoveryResultsAdapter.ViewHolder> {
@@ -39,9 +39,9 @@ static class AdapterItem {
 
     static class ViewHolder extends RecyclerView.ViewHolder {
 
-        @Bind(android.R.id.text1)
+        @BindView(android.R.id.text1)
         public TextView line1;
-        @Bind(android.R.id.text2)
+        @BindView(android.R.id.text2)
         public TextView line2;
 
         public ViewHolder(View itemView) {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionImpl.java
Patch:
@@ -81,7 +81,6 @@ private Observable<Integer> privateRequestMtu(int mtu, long timeout, TimeUnit ti
         return newObservable;
     }
 
-
     @Override
     public Observable<RxBleDeviceServices> discoverServices() {
         return privateDiscoverServices(20, TimeUnit.SECONDS);

File: sample/src/main/java/com/polidea/rxandroidble/sample/example1_scanning/ScanActivity.java
Patch:
@@ -23,7 +23,6 @@
 
 public class ScanActivity extends AppCompatActivity {
 
-
     @BindView(R.id.scan_toggle_btn)
     Button scanToggleButton;
     @BindView(R.id.scan_results)

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationMtuRequest.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.bluetooth.BluetoothGatt;
 import android.os.Build;
-import android.support.annotation.NonNull;
 import android.support.annotation.RequiresApi;
 
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
@@ -11,9 +10,7 @@
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
 
-import rx.Observable;
 import rx.Scheduler;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/BleConnectionCompat.java
Patch:
@@ -39,7 +39,7 @@ public BluetoothGatt connectGatt(BluetoothDevice remoteDevice, boolean autoConne
          * issue: https://android.googlesource.com/platform/frameworks/base/+/d35167adcaa40cb54df8e392379dfdfe98bcdba2%5E%21/#F0
           */
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N || !autoConnect) {
-            return connectGattCompat(bluetoothGattCallback, remoteDevice, false);
+            return connectGattCompat(bluetoothGattCallback, remoteDevice, autoConnect);
         }
 
         /**

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionImpl.java
Patch:
@@ -124,8 +124,7 @@ private Observable<RxBleDeviceServices> privateDiscoverServices(long timeout, Ti
     }
 
     @Override
-    public Observable<BluetoothGattCharacteristic> getCharacteristic(
-            @NonNull UUID characteristicUuid) {
+    public Observable<BluetoothGattCharacteristic> getCharacteristic(@NonNull UUID characteristicUuid) {
         return discoverServices()
                 .flatMap(rxBleDeviceServices -> rxBleDeviceServices.getCharacteristic(characteristicUuid));
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleConnection.java
Patch:
@@ -300,7 +300,7 @@ public String toString() {
     /**
      * Performs GATT request MTU
      *
-     * Timeouts after specified amount of time.
+     * Timeouts after 10 seconds.
      *
      * @return Observable emitting result the MTU requested.
      * @throws BleGattCannotStartException with {@link BleGattOperationType#ON_MTU_CHANGED} type, when it wasn't possible to set

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionImpl.java
Patch:
@@ -63,7 +63,7 @@ public RxBleConnectionImpl(RxBleRadio rxBleRadio, RxBleGattCallback gattCallback
     @Override
     public Observable<Integer> requestMtu(int mtu) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
-            return privateRequestMtu(mtu, 20, TimeUnit.SECONDS);
+            return privateRequestMtu(mtu, 10, TimeUnit.SECONDS);
         else
             return Observable.error(new BleException("requestMtu is not supported with API lower than 21"));
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleScanException.java
Patch:
@@ -84,7 +84,8 @@ private String reasonDescription() {
                 return "LOCATION_PERMISSION_MISSING";
             case LOCATION_SERVICES_DISABLED:
                 return "LOCATION_SERVICES_DISABLED";
+            default:
+                return "UNKNOWN";
         }
-        return "UNKNOWN";
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationConnect.java
Patch:
@@ -25,7 +25,7 @@ public class RxBleRadioOperationConnect extends RxBleRadioOperation<BluetoothGat
     private final Runnable releaseRadioRunnable = () -> releaseRadio();
     private final Runnable emptyRunnable = () -> {
     };
-    private final BehaviorSubject<Boolean> isSubscribed = BehaviorSubject.create(false);
+    private final BehaviorSubject<Boolean> isSubscribed = BehaviorSubject.create();
     private final Observable<BluetoothGatt> operationConnectAsObservableWithSubscribersMonitoring = super.asObservable()
             .doOnSubscribe(() -> isSubscribed.onNext(true))
             .doOnUnsubscribe(() -> isSubscribed.onNext(false))
@@ -53,6 +53,7 @@ protected void protectedRun() {
                 // when there are no subscribers there is no point of continuing work -> next will be disconnect operation
                 .takeUntil(asObservableHasNoSubscribers().doOnNext(noSubscribers -> RxBleLog.d("No subscribers, finishing operation")))
                 .doOnCompleted(onConnectionEstablishedRunnable::run)
+                .doOnNext(ignored -> isSubscribed.onCompleted())
                 .subscribe(getSubscriber());
         onConnectCalledRunnable.run();
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionConnectorOperationsProvider.java
Patch:
@@ -10,6 +10,7 @@
 import com.polidea.rxandroidble.internal.util.BleConnectionCompat;
 
 import java.util.concurrent.atomic.AtomicReference;
+import rx.android.schedulers.AndroidSchedulers;
 
 public class RxBleConnectionConnectorOperationsProvider {
 
@@ -37,7 +38,8 @@ public RxBleOperations provide(Context context,
         final RxBleRadioOperationDisconnect operationDisconnect = new RxBleRadioOperationDisconnect(
                 gattCallback,
                 bluetoothGattAtomicReference,
-                (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE)
+                (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE),
+                AndroidSchedulers.mainThread()
         );
         // getBluetoothGatt completed when the connection is unsubscribed
         operationConnect.getBluetoothGatt().subscribe(bluetoothGattAtomicReference::set, ignored -> {

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/CharacteristicOperationExampleActivity.java
Patch:
@@ -115,10 +115,9 @@ public void onConnectToggleClick() {
         } else {
             connectionObservable.subscribe(rxBleConnection -> {
                 Log.d(getClass().getSimpleName(), "Hey, connection has been established!");
+                runOnUiThread(this::updateUI);
             }, this::onConnectionFailure);
         }
-
-        updateUI();
     }
 
     private boolean isConnected() {

File: sample/src/main/java/com/polidea/rxandroidble/sample/example4_characteristic/CharacteristicOperationExampleActivity.java
Patch:
@@ -115,10 +115,9 @@ public void onConnectToggleClick() {
         } else {
             connectionObservable.subscribe(rxBleConnection -> {
                 Log.d(getClass().getSimpleName(), "Hey, connection has been established!");
+                runOnUiThread(this::updateUI);
             }, this::onConnectionFailure);
         }
-
-        updateUI();
     }
 
     private boolean isConnected() {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleConnectionImpl.java
Patch:
@@ -113,7 +113,8 @@ private synchronized Observable<Observable<byte[]>> setupServerInitiatedCharacte
 
                 final HashMap<Integer, Observable<Observable<byte[]>>> conflictingServerInitiatedReadingMap =
                         withAck ? notificationObservableMap : indicationObservableMap;
-                final boolean conflictingNotificationIsAlreadySet = conflictingServerInitiatedReadingMap.containsKey(characteristicInstanceId);
+                final boolean conflictingNotificationIsAlreadySet =
+                        conflictingServerInitiatedReadingMap.containsKey(characteristicInstanceId);
 
                 if (conflictingNotificationIsAlreadySet) {
                     return Observable.error(new BleConflictingNotificationAlreadySetException(characteristic.getUuid(), !withAck));

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/util/LocationServicesStatus.java
Patch:
@@ -33,7 +33,7 @@ public boolean isLocationProviderRequired() {
 
     @TargetApi(Build.VERSION_CODES.M)
     private boolean isPermissionGranted(String permission) {
-        return Build.VERSION.SDK_INT < Build.VERSION_CODES.M ||
-                context.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;
+        return Build.VERSION.SDK_INT < Build.VERSION_CODES.M
+                || context.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationConnect.java
Patch:
@@ -4,7 +4,6 @@
 import android.bluetooth.BluetoothGatt;
 import android.support.annotation.NonNull;
 
-import com.polidea.rxandroidble.RxBleConnection;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.util.BleConnectionCompat;
@@ -81,7 +80,7 @@ private BluetoothGatt connect() {
     /**
      * Emits BluetoothGatt and completes after connection is established.
      *
-     * @return BluetoothGatt after connection reaches {@link RxBleConnection.RxBleConnectionState#CONNECTED} state.
+     * @return BluetoothGatt after connection reaches {@link com.polidea.rxandroidble.RxBleConnection.RxBleConnectionState#CONNECTED} state.
      * @throws com.polidea.rxandroidble.exceptions.BleDisconnectedException if connection was disconnected/failed before it was established.
      */
     @NonNull

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/connection/RxBleGattCallback.java
Patch:
@@ -30,7 +30,7 @@ public interface Provider {
         RxBleGattCallback provide();
     }
 
-    private final Scheduler callbackScheduler = Schedulers.newThread();
+    private final Scheduler callbackScheduler = Schedulers.computation();
     private final BehaviorSubject<Void> statusErrorSubject = BehaviorSubject.create();
     private final BehaviorSubject<BluetoothGatt> bluetoothGattBehaviorSubject = BehaviorSubject.create();
     private final PublishSubject<RxBleConnectionState> connectionStatePublishSubject = PublishSubject.create();

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleDeviceMock.java
Patch:
@@ -87,8 +87,8 @@ public String getMacAddress() {
 
     @Override
     public BluetoothDevice getBluetoothDevice() {
-        throw new UnsupportedOperationException("Mock does not support returning a " +
-                "BluetoothDevice.");
+        throw new UnsupportedOperationException("Mock does not support returning a "
+            + "BluetoothDevice.");
     }
 
     @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationScan.java
Patch:
@@ -59,7 +59,8 @@ protected void protectedRun() {
         }
     }
 
-    public synchronized void stop() { // synchronized keyword added to be sure that operation will be stopped no matter which thread will call it
+    // synchronized keyword added to be sure that operation will be stopped no matter which thread will call it
+    public synchronized void stop() {
         isStopped = true;
         if (isStarted) {
             // TODO: [PU] 29.01.2016 https://code.google.com/p/android/issues/detail?id=160503

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleConnection.java
Patch:
@@ -201,7 +201,8 @@ public String toString() {
      * @see #getCharacteristic(UUID) to obtain the characteristic.
      * @see #discoverServices() to obtain the characteristic.
      */
-    @Deprecated Observable<BluetoothGattCharacteristic> writeCharacteristic(@NonNull BluetoothGattCharacteristic bluetoothGattCharacteristic);
+    @Deprecated
+    Observable<BluetoothGattCharacteristic> writeCharacteristic(@NonNull BluetoothGattCharacteristic bluetoothGattCharacteristic);
 
     /**
      * Performs GATT write operation on a given characteristic.

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationScan.java
Patch:
@@ -55,9 +55,8 @@ protected void protectedRun() {
     }
 
     public synchronized void stop() { // synchronized keyword added to be sure that operation will be stopped no matter which thread will call it
-        boolean wasStopped = isStopped;
         isStopped = true;
-        if (isStarted && !wasStopped) {
+        if (isStarted) {
             // TODO: [PU] 29.01.2016 https://code.google.com/p/android/issues/detail?id=160503
             rxBleAdapterWrapper.stopLeScan(leScanCallback);
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/radio/OperationPriorityFifoBlockingQueue.java
Patch:
@@ -23,13 +23,13 @@ public boolean isEmpty() {
         return q.isEmpty();
     }
 
-    public void remove(RxBleRadioOperation rxBleRadioOperation) {
+    public boolean remove(RxBleRadioOperation rxBleRadioOperation) {
         for (FIFOEntry entry : q) {
             if (entry.getEntry() == rxBleRadioOperation) {
-                q.remove(entry);
-                return;
+                return q.remove(entry);
             }
         }
+        return false;
     }
 
     private static class FIFOEntry implements Comparable<FIFOEntry> {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleDeviceProvider.java
Patch:
@@ -46,7 +46,8 @@ public RxBleDevice getBleDevice(String macAddress) {
                             RxBleGattCallback::new,
                             new RxBleConnectionConnectorOperationsProvider(),
                             rxBleRadio,
-                            bleConnectionCompat)
+                            bleConnectionCompat,
+                            rxBleAdapterWrapper)
             );
             availableDevices.put(macAddress, newRxBleDevice);
             return newRxBleDevice;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicRead.java
Patch:
@@ -26,7 +26,7 @@ public RxBleRadioOperationCharacteristicRead(RxBleGattCallback rxBleGattCallback
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         //noinspection Convert2MethodRef
         final Subscription subscription = rxBleGattCallback
                 .getOnCharacteristicRead()

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicWrite.java
Patch:
@@ -26,7 +26,7 @@ public RxBleRadioOperationCharacteristicWrite(RxBleGattCallback rxBleGattCallbac
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         //noinspection Convert2MethodRef
         final Subscription subscription = rxBleGattCallback
                 .getOnCharacteristicWrite()

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationConnect.java
Patch:
@@ -47,7 +47,7 @@ public Observable<BluetoothGatt> asObservable() {
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         final Runnable onConnectionEstablishedRunnable = autoConnect ? emptyRunnable : releaseRadioRunnable;
         final Runnable onConnectCalledRunnable = autoConnect ? releaseRadioRunnable : emptyRunnable;
         // TODO: [PU] 22.03.2016 Is radio properly released in autoConnect in case of connection error?

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorRead.java
Patch:
@@ -27,7 +27,7 @@ public RxBleRadioOperationDescriptorRead(RxBleGattCallback rxBleGattCallback, Bl
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         //noinspection Convert2MethodRef
         final Subscription subscription = rxBleGattCallback
                 .getOnDescriptorRead()

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorWrite.java
Patch:
@@ -29,7 +29,7 @@ public RxBleRadioOperationDescriptorWrite(RxBleGattCallback rxBleGattCallback, B
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         //noinspection Convert2MethodRef
         final Subscription subscription = rxBleGattCallback
                 .getOnDescriptorWrite()

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDisconnect.java
Patch:
@@ -31,7 +31,7 @@ public RxBleRadioOperationDisconnect(RxBleGattCallback rxBleGattCallback, Atomic
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         //noinspection Convert2MethodRef
         just(bluetoothGattAtomicReference.get())
                 .filter(bluetoothGatt -> bluetoothGatt != null)

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -21,7 +21,7 @@ public RxBleRadioOperationReadRssi(RxBleGattCallback bleGattCallback, BluetoothG
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
         //noinspection Convert2MethodRef
         final Subscription subscription = bleGattCallback
                 .getOnRssiRead()

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationServicesDiscover.java
Patch:
@@ -23,7 +23,7 @@ public RxBleRadioOperationServicesDiscover(RxBleGattCallback rxBleGattCallback,
     }
 
     @Override
-    public void run() {
+    protected void protectedRun() {
 
         //noinspection Convert2MethodRef
         Observable.<RxBleDeviceServices>create(subscriber -> {

File: sample/src/main/java/com/polidea/rxandroidble/sample/SampleApplication.java
Patch:
@@ -21,7 +21,7 @@ public static RxBleClient getRxBleClient(Context context) {
     @Override
     public void onCreate() {
         super.onCreate();
-        rxBleClient = RxBleClient.getInstance(this);
+        rxBleClient = RxBleClient.create(this);
         RxBleClient.setLogLevel(RxBleLog.DEBUG);
     }
 }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleDeviceMock.java
Patch:
@@ -22,8 +22,8 @@
 
 class RxBleDeviceMock implements RxBleDevice {
 
-    private final RxBleConnection rxBleConnection;
-    private final BehaviorSubject<RxBleConnection.RxBleConnectionState> connectionStateBehaviorSubject = BehaviorSubject.create(
+    private RxBleConnection rxBleConnection;
+    private BehaviorSubject<RxBleConnection.RxBleConnectionState> connectionStateBehaviorSubject = BehaviorSubject.create(
             DISCONNECTED
     );
     private String name;
@@ -105,6 +105,5 @@ public Observable<RxBleConnection.RxBleConnectionState> observeConnectionStateCh
     @Override
     public String toString() {
         return "RxBleDeviceImpl{" + "bluetoothDevice=" + name + '(' + macAddress + ')' + '}';
-
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleClientImpl.java
Patch:
@@ -86,7 +86,7 @@ private boolean checkIfLocationAccessIsEnabledIfRequired() {
     }
 
     private boolean checkIfLocationPermissionIsGrantedIfRequired() {
-        return locationServicesStatus.isLocationProviderEnabled() && !locationServicesStatus.isLocationPermissionApproved();
+        return locationServicesStatus.isLocationProviderRequired() && !locationServicesStatus.isLocationPermissionApproved();
     }
 
     private <T> Observable<T> bluetoothAdapterOffExceptionObservable() {

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleGattCannotStartException.java
Patch:
@@ -3,6 +3,6 @@
 public class BleGattCannotStartException extends BleGattException {
 
     public BleGattCannotStartException(BleGattOperationType bleGattOperationType) {
-        super(UNKNOWN_STATUS, bleGattOperationType);
+        super(bleGattOperationType);
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleClient.java
Patch:
@@ -33,7 +33,8 @@ public static void setLogLevel(@RxBleLog.LogLevel int logLevel) {
     }
 
     /**
-     * Obtain instance of RxBleDevice for provided MAC address.
+     * Obtain instance of RxBleDevice for provided MAC address. This may be the same instance that was provided during scan operation but
+     * this in not guaranteed.
      *
      * @param macAddress Bluetooth LE device MAC address.
      * @return Handle for Bluetooth LE operations.
@@ -49,7 +50,7 @@ public static void setLogLevel(@RxBleLog.LogLevel int logLevel) {
      * the user to enable it if it's disabled.
      *
      * @param filterServiceUUIDs Filtering settings. Scan results are only filtered by exported services.
-     * @throws com.polidea.rxandroidble.exceptions.BleScanException in case of error starting the scan
+     * @throws com.polidea.rxandroidble.exceptions.BleScanException emits in case of error starting the scan
      */
     public abstract Observable<RxBleScanResult> scanBleDevices(@Nullable UUID[] filterServiceUUIDs);
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationScan.java
Patch:
@@ -38,7 +38,7 @@ public void run() {
             boolean startLeScanStatus = rxBleAdapterWrapper.startLeScan(leScanCallback);
 
             if (!startLeScanStatus) {
-                onError(new BleScanException(BleScanException.BLE_CANNOT_START));
+                onError(new BleScanException(BleScanException.BLUETOOTH_CANNOT_START));
             }
         } finally {
             releaseRadio();

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationConnect.java
Patch:
@@ -74,6 +74,7 @@ public void run() {
                 );
 
         bluetoothGattSubscription = rxBleGattCallback.getBluetoothGatt()
+                .doOnUnsubscribe(bluetoothGattBehaviorSubject::onCompleted)
                 .subscribe(
                         bluetoothGattBehaviorSubject::onNext,
                         ignored -> bluetoothGattBehaviorSubject.onCompleted(),

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicRead.java
Patch:
@@ -4,7 +4,7 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicWrite.java
Patch:
@@ -4,7 +4,7 @@
 import android.bluetooth.BluetoothGattCharacteristic;
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorRead.java
Patch:
@@ -5,7 +5,7 @@
 import android.support.v4.util.Pair;
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorWrite.java
Patch:
@@ -5,7 +5,7 @@
 import android.support.v4.util.Pair;
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDisconnect.java
Patch:
@@ -4,7 +4,7 @@
 import android.bluetooth.BluetoothManager;
 import android.bluetooth.BluetoothProfile;
 import com.polidea.rxandroidble.RxBleConnection;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 
 import java.util.concurrent.TimeUnit;

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -3,7 +3,7 @@
 import android.bluetooth.BluetoothGatt;
 import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationServicesDiscover.java
Patch:
@@ -4,9 +4,8 @@
 import com.polidea.rxandroidble.RxBleDeviceServices;
 import com.polidea.rxandroidble.exceptions.BleGattException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
-import com.polidea.rxandroidble.internal.RxBleGattCallback;
+import com.polidea.rxandroidble.internal.connection.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
-import java.util.concurrent.atomic.AtomicReference;
 import rx.Observable;
 import rx.Subscription;
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleClientImpl.java
Patch:
@@ -24,7 +24,7 @@
 
 import rx.Observable;
 
-class RxBleClientImpl implements RxBleClient {
+class RxBleClientImpl extends RxBleClient {
 
     private static RxBleClientImpl CLIENT_INSTANCE;
     private final BluetoothAdapter bluetoothAdapter;
@@ -34,7 +34,7 @@ class RxBleClientImpl implements RxBleClient {
     private final Map<Set<UUID>, Observable<RxBleScanResult>> queuedScanOperations = new HashMap<>();
     private final Context context;
 
-    static RxBleClientImpl getInstance(Context context) {
+    public static RxBleClientImpl getInstance(Context context) {
 
         if (CLIENT_INSTANCE == null) {
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleDeviceCache.java
Patch:
@@ -96,7 +96,7 @@ public boolean equals(Object o) {
         }
 
         public boolean isEmpty() {
-            return get() != null;
+            return get() == null;
         }
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleConnectionImpl.java
Patch:
@@ -60,7 +60,7 @@ public Observable<RxBleConnection> connect(Context context, boolean autoConnect)
                 bluetoothGattAtomicReference,
                 (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE)
         );
-        // TODO: [PU] 29.01.2016 Will crash if onError will be passed through the subject.
+
         operationConnect.getBluetoothGatt().subscribe(bluetoothGattAtomicReference::set);
         return rxBleRadio.queue(operationConnect)
                 .doOnError(throwable -> enqueueDisconnect(operationDisconnect))

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleScanException.java
Patch:
@@ -3,6 +3,7 @@
 public class BleScanException extends BleException {
 
     public static final int BLE_CANNOT_START = 0;
+    public static final int BLUETOOTH_DISABLED = 1;
 
     private final int cause;
 

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -48,7 +48,7 @@ public Observable<byte[]> readCharacteristic(UUID characteristicUuid) {
 
     @Override
     public Observable<byte[]> writeCharacteristic(UUID characteristicUuid, byte[] data) {
-        getCharacteristic(characteristicUuid).map(characteristic -> characteristic.setValue(data));
+        getCharacteristic(characteristicUuid).map(characteristic -> characteristic.setValue(data)).subscribe();
         return Observable.just(data);
     }
 
@@ -63,7 +63,7 @@ public Observable<byte[]> readDescriptor(UUID serviceUuid, UUID characteristicUu
     public Observable<byte[]> writeDescriptor(UUID serviceUuid, UUID characteristicUuid, UUID descriptorUuid, byte[] data) {
         discoverServices()
                 .flatMap(rxBleDeviceServices -> rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid))
-                .map(bluetoothGattDescriptor -> bluetoothGattDescriptor.setValue(data));
+                .map(bluetoothGattDescriptor -> bluetoothGattDescriptor.setValue(data)).subscribe();
         return Observable.just(data);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleDeviceImpl.java
Patch:
@@ -33,9 +33,10 @@ public Observable<RxBleConnection> establishConnection(Context context) {
             final Observable<RxBleConnection> newConnectionObservable =
                     new RxBleConnectionImpl(bluetoothDevice, rxBleRadio)
                             .connect(context)
+                            .doOnUnsubscribe(() -> connectionObservable.set(null)) //FIXME: [DS] 11.02.2016 Potential race condition when one subscriber would like to just after the previous one has unsubscribed
                             .replay()
-                            .refCount()
-                            .doOnUnsubscribe(() -> connectionObservable.set(null)); //FIXME: [DS] 11.02.2016 Potential race condition when one subscriber would like to just after the previous one has unsubscribed
+                            .refCount();
+
             connectionObservable.set(newConnectionObservable);
             return newConnectionObservable;
         }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleDeviceImpl.java
Patch:
@@ -33,9 +33,10 @@ public Observable<RxBleConnection> establishConnection(Context context) {
             final Observable<RxBleConnection> newConnectionObservable =
                     new RxBleConnectionImpl(bluetoothDevice, rxBleRadio)
                             .connect(context)
+                            .doOnUnsubscribe(() -> connectionObservable.set(null)) //FIXME: [DS] 11.02.2016 Potential race condition when one subscriber would like to just after the previous one has unsubscribed
                             .replay()
-                            .refCount()
-                            .doOnUnsubscribe(() -> connectionObservable.set(null)); //FIXME: [DS] 11.02.2016 Potential race condition when one subscriber would like to just after the previous one has unsubscribed
+                            .refCount();
+
             connectionObservable.set(newConnectionObservable);
             return newConnectionObservable;
         }

File: mockrxandroidble/src/main/java/com/polidea/rxandroidble/mockrxandroidble/RxBleConnectionMock.java
Patch:
@@ -48,7 +48,7 @@ public Observable<byte[]> readCharacteristic(UUID characteristicUuid) {
 
     @Override
     public Observable<byte[]> writeCharacteristic(UUID characteristicUuid, byte[] data) {
-        getCharacteristic(characteristicUuid).map(characteristic -> characteristic.setValue(data));
+        getCharacteristic(characteristicUuid).map(characteristic -> characteristic.setValue(data)).subscribe();
         return Observable.just(data);
     }
 
@@ -63,7 +63,7 @@ public Observable<byte[]> readDescriptor(UUID serviceUuid, UUID characteristicUu
     public Observable<byte[]> writeDescriptor(UUID serviceUuid, UUID characteristicUuid, UUID descriptorUuid, byte[] data) {
         discoverServices()
                 .flatMap(rxBleDeviceServices -> rxBleDeviceServices.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid))
-                .map(bluetoothGattDescriptor -> bluetoothGattDescriptor.setValue(data));
+                .map(bluetoothGattDescriptor -> bluetoothGattDescriptor.setValue(data)).subscribe();
         return Observable.just(data);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleRadioOperation.java
Patch:
@@ -24,7 +24,7 @@ public abstract class RxBleRadioOperation<T> implements Runnable, Comparable<RxB
      * to be run on the main thread in future. When appropriate the call to run() will be executed.
      * This operation is expected to call releaseRadio() at appropriate point after the run() was called.
      */
-    public final Observable<T> asObservable() {
+    public Observable<T> asObservable() {
         return publishSubject;
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicRead.java
Patch:
@@ -6,6 +6,7 @@
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
+import rx.Subscription;
 
 public class RxBleRadioOperationCharacteristicRead extends RxBleRadioOperation<byte[]> {
 
@@ -25,7 +26,7 @@ public RxBleRadioOperationCharacteristicRead(RxBleGattCallback rxBleGattCallback
     @Override
     public void run() {
         //noinspection Convert2MethodRef
-        rxBleGattCallback
+        final Subscription subscription = rxBleGattCallback
                 .getOnCharacteristicRead()
                 .filter(uuidPair -> uuidPair.first.equals(bluetoothGattCharacteristic.getUuid()))
                 .take(1)
@@ -35,6 +36,7 @@ public void run() {
 
         final boolean success = bluetoothGatt.readCharacteristic(bluetoothGattCharacteristic);
         if (!success) {
+            subscription.unsubscribe();
             onError(new BleGattCannotStartException(BleGattOperationType.CHARACTERISTIC_READ));
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationCharacteristicWrite.java
Patch:
@@ -6,6 +6,7 @@
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
+import rx.Subscription;
 
 public class RxBleRadioOperationCharacteristicWrite extends RxBleRadioOperation<byte[]> {
 
@@ -28,7 +29,7 @@ public RxBleRadioOperationCharacteristicWrite(RxBleGattCallback rxBleGattCallbac
     @Override
     public void run() {
         //noinspection Convert2MethodRef
-        rxBleGattCallback
+        final Subscription subscription = rxBleGattCallback
                 .getOnCharacteristicWrite()
                 .filter(uuidPair -> uuidPair.first.equals(bluetoothGattCharacteristic.getUuid()))
                 .take(1)
@@ -39,6 +40,7 @@ public void run() {
         bluetoothGattCharacteristic.setValue(data);
         final boolean success = bluetoothGatt.writeCharacteristic(bluetoothGattCharacteristic);
         if (!success) {
+            subscription.unsubscribe();
             onError(new BleGattCannotStartException(BleGattOperationType.CHARACTERISTIC_WRITE));
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorRead.java
Patch:
@@ -7,6 +7,7 @@
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
+import rx.Subscription;
 
 public class RxBleRadioOperationDescriptorRead extends RxBleRadioOperation<Pair<BluetoothGattDescriptor, byte[]>> {
 
@@ -26,7 +27,7 @@ public RxBleRadioOperationDescriptorRead(RxBleGattCallback rxBleGattCallback, Bl
     @Override
     public void run() {
         //noinspection Convert2MethodRef
-        rxBleGattCallback
+        final Subscription subscription = rxBleGattCallback
                 .getOnDescriptorRead()
                 .filter(uuidPair -> uuidPair.first.equals(bluetoothGattDescriptor))
                 .first()
@@ -35,6 +36,7 @@ public void run() {
 
         final boolean success = bluetoothGatt.readDescriptor(bluetoothGattDescriptor);
         if (!success) {
+            subscription.unsubscribe();
             onError(new BleGattCannotStartException(BleGattOperationType.DESCRIPTOR_READ));
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDescriptorWrite.java
Patch:
@@ -7,6 +7,7 @@
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
+import rx.Subscription;
 
 public class RxBleRadioOperationDescriptorWrite extends RxBleRadioOperation<Pair<BluetoothGattDescriptor, byte[]>> {
 
@@ -29,7 +30,7 @@ public RxBleRadioOperationDescriptorWrite(RxBleGattCallback rxBleGattCallback, B
     @Override
     public void run() {
         //noinspection Convert2MethodRef
-        rxBleGattCallback
+        final Subscription subscription = rxBleGattCallback
                 .getOnDescriptorWrite()
                 .filter(uuidPair -> uuidPair.first.equals(bluetoothGattDescriptor))
                 .first()
@@ -39,6 +40,7 @@ public void run() {
         bluetoothGattDescriptor.setValue(data);
         final boolean success = bluetoothGatt.writeDescriptor(bluetoothGattDescriptor);
         if (!success) {
+            subscription.unsubscribe();
             onError(new BleGattCannotStartException(BleGattOperationType.DESCRIPTOR_WRITE));
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -5,6 +5,7 @@
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
+import rx.Subscription;
 
 public class RxBleRadioOperationReadRssi extends RxBleRadioOperation<Integer> {
 
@@ -20,14 +21,15 @@ public RxBleRadioOperationReadRssi(RxBleGattCallback bleGattCallback, BluetoothG
     @Override
     public void run() {
         //noinspection Convert2MethodRef
-        bleGattCallback
+        final Subscription subscription = bleGattCallback
                 .getOnRssiRead()
                 .take(1)
                 .doOnCompleted(() -> releaseRadio())
                 .subscribe(getSubscriber());
         // TODO: [PU] 29.01.2016 Release radio on error as well?
         final boolean success = bluetoothGatt.readRemoteRssi();
         if (!success) {
+            subscription.unsubscribe();
             onError(new BleGattCannotStartException(BleGattOperationType.READ_RSSI));
         }
     }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/RxBleClientImpl.java
Patch:
@@ -23,9 +23,7 @@ public class RxBleClientImpl implements RxBleClient {
     public Observable<RxBleScanResult> scanBleDevices(@Nullable UUID[] filterServiceUUIDs) {
         final RxBleRadioOperationScan rxBleRadioOperationScan = new RxBleRadioOperationScan(filterServiceUUIDs, bluetoothAdapter,
                 rxBleRadio, uuidParser);
-        return rxBleRadioOperationScan
-                .asObservable()
-                .doOnSubscribe(() -> rxBleRadio.queue(rxBleRadioOperationScan))
+        return rxBleRadio.queue(rxBleRadioOperationScan)
                 .doOnUnsubscribe(rxBleRadioOperationScan::stop);
     }
 

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/RxBleRadio.java
Patch:
@@ -1,5 +1,7 @@
 package com.polidea.rxandroidble.internal;
 
+import rx.Observable;
+
 public interface RxBleRadio {
 
     class Action {
@@ -21,5 +23,5 @@ class Action {
         Action GATT_CLOSE = new Action();
     }
 
-    void queue(RxBleRadioOperation rxBleRadioOperation); // TODO: add dequeueing on unsubscribe?
+    <T> Observable<T> queue(RxBleRadioOperation<T> rxBleRadioOperation); // TODO: add dequeueing on unsubscribe?
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/exceptions/BleGattException.java
Patch:
@@ -26,7 +26,7 @@ public int getStatus() {
 
     @Override
     public String toString() {
-        return "BleGattException{" +
+        return getClass().getSimpleName() + '{' +
                 "status=" + status +
                 ", bleGattOperation=" + bleGattOperationType +
                 '}';

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -1,7 +1,7 @@
 package com.polidea.rxandroidble.internal.operations;
 
 import android.bluetooth.BluetoothGatt;
-import com.polidea.rxandroidble.exceptions.BleGattException;
+import com.polidea.rxandroidble.exceptions.BleGattCannotStartException;
 import com.polidea.rxandroidble.exceptions.BleGattOperationType;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
@@ -28,7 +28,7 @@ public void run() {
         // TODO: [PU] 29.01.2016 Release radio on error as well?
         final boolean success = bluetoothGatt.readRemoteRssi();
         if (!success) {
-            onError(new BleGattException(BleGattOperationType.READ_RSSI));
+            onError(new BleGattCannotStartException(BleGattOperationType.READ_RSSI));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -28,7 +28,7 @@ public void run() {
         // TODO: [PU] 29.01.2016 Release radio on error as well?
         final boolean success = bluetoothGatt.readRemoteRssi();
         if (!success) {
-            onError(new BleGattException(-1, BleGattOperationType.READ_RSSI));
+            onError(new BleGattException(BleGattOperationType.READ_RSSI));
         }
     }
 }

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationReadRssi.java
Patch:
@@ -19,10 +19,11 @@ public RxBleRadioOperationReadRssi(RxBleGattCallback bleGattCallback, BluetoothG
 
     @Override
     public void run() {
+        //noinspection Convert2MethodRef
         bleGattCallback
                 .getOnRssiRead()
                 .take(1)
-                .doOnNext(integer -> releaseRadio())
+                .doOnCompleted(() -> releaseRadio())
                 .subscribe(getSubscriber());
 
         final boolean success = bluetoothGatt.readRemoteRssi();

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationServicesDiscover.java
Patch:
@@ -1,7 +1,6 @@
 package com.polidea.rxandroidble.internal.operations;
 
 import android.bluetooth.BluetoothGatt;
-import android.util.Log;
 import com.polidea.rxandroidble.exceptions.BleScanException;
 import com.polidea.rxandroidble.internal.RxBleGattCallback;
 import com.polidea.rxandroidble.internal.RxBleRadioOperation;
@@ -18,7 +17,6 @@ public class RxBleRadioOperationServicesDiscover extends RxBleRadioOperation<Map
     public RxBleRadioOperationServicesDiscover(RxBleGattCallback rxBleGattCallback, BluetoothGatt bluetoothGatt) {
         this.rxBleGattCallback = rxBleGattCallback;
         this.bluetoothGatt = bluetoothGatt;
-        Log.d("xxx", "constructor " + bluetoothGatt);
     }
 
     @Override

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationConnect.java
Patch:
@@ -29,6 +29,7 @@ public RxBleRadioOperationConnect(Context context, BluetoothDevice bluetoothDevi
 
     @Override
     public void run() {
+        //noinspection Convert2MethodRef
         rxBleGattCallback
                 .getOnConnectionStateChange()
                 .filter(rxBleConnectionState -> rxBleConnectionState == RxBleConnection.RxBleConnectionState.CONNECTED)
@@ -37,8 +38,8 @@ public void run() {
                             onNext(rxBleConnection);
                             releaseRadio();
                         },
-                        this::onError,
-                        this::onCompleted
+                        (throwable) -> onError(throwable),
+                        () -> onCompleted()
                 );
 
         bluetoothGatt = bluetoothDevice.connectGatt(context, false, rxBleGattCallback.getBluetoothGattCallback());

File: rxandroidble/src/main/java/com/polidea/rxandroidble/internal/operations/RxBleRadioOperationDisconnect.java
Patch:
@@ -42,7 +42,7 @@ public void run() {
                             onNext(null);
                             releaseRadio();
                         },
-                        this::onError,
+                        throwable -> onError(throwable),
                         () -> onCompleted() // don't change to method reference - crash on with Retrolambda 3.2.4
                 );
 

