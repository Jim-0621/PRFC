File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/src/main/java/com/crossoverJie/seconds/kill/api/impl/StockServiceImpl.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.dubbo.config.annotation.Service;
 import com.alibaba.dubbo.rpc.RpcContext;
 import com.crossoverJie.seconds.kill.api.StockService;
-import com.crossoverJie.seconds.kill.constant.RedisKeysConstant;
+import com.crossoverJie.seconds.kill.api.constant.RedisKeysConstant;
 import com.crossoverJie.seconds.kill.pojo.Stock;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-WEB/src/main/java/com/crossoverJie/seconds/kill/controller/IndexController.java
Patch:
@@ -89,7 +89,7 @@ public String createOptimisticOrder(@PathVariable int sid) {
      * @param sid
      * @return
      */
-    @SpringControllerLimit
+    @SpringControllerLimit(errorCode = 200)
     @RequestMapping("/createOptimisticLimitOrder/{sid}")
     @ResponseBody
     public String createOptimisticLimitOrder(@PathVariable int sid) {

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-WEB/src/main/java/com/crossoverJie/seconds/kill/controller/IndexController.java
Patch:
@@ -107,7 +107,7 @@ public String createOptimisticLimitOrder(@PathVariable int sid) {
      * @param sid
      * @return
      */
-    @SpringControllerLimit(errorCode = 200)
+    @SpringControllerLimit
     @RequestMapping("/createOptimisticLimitOrderByRedis/{sid}")
     @ResponseBody
     public String createOptimisticLimitOrderByRedis(@PathVariable int sid) {

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-WEB/src/main/java/com/crossoverJie/seconds/kill/controller/IndexController.java
Patch:
@@ -107,7 +107,7 @@ public String createOptimisticLimitOrder(@PathVariable int sid) {
      * @param sid
      * @return
      */
-    @SpringControllerLimit
+    @SpringControllerLimit(errorCode = 200)
     @RequestMapping("/createOptimisticLimitOrderByRedis/{sid}")
     @ResponseBody
     public String createOptimisticLimitOrderByRedis(@PathVariable int sid) {

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/src/main/java/com/crossoverJie/seconds/kill/api/impl/StockServiceImpl.java
Patch:
@@ -51,9 +51,9 @@ private Integer getStockCount() {
         if (count == null) {
             Stock stock = stockService.getStockById(1);
             count = stock.getCount() ;
-            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_COUNT + 1, stock.getCount().intValue());
-            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_SALE + 1, stock.getSale().intValue());
-            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_VERSION + 1, stock.getVersion().intValue());
+            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_COUNT + 1, stock.getCount());
+            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_SALE + 1, stock.getSale());
+            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_VERSION + 1, stock.getVersion());
         }
 
         return count;

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/src/main/java/com/crossoverJie/seconds/kill/api/impl/StockServiceImpl.java
Patch:
@@ -51,9 +51,9 @@ private Integer getStockCount() {
         if (count == null) {
             Stock stock = stockService.getStockById(1);
             count = stock.getCount() ;
-            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_COUNT + 1, stock.getCount());
-            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_SALE + 1, stock.getSale());
-            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_VERSION + 1, stock.getVersion());
+            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_COUNT + 1, stock.getCount().intValue());
+            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_SALE + 1, stock.getSale().intValue());
+            redisTemplate.opsForValue().set(RedisKeysConstant.STOCK_VERSION + 1, stock.getVersion().intValue());
         }
 
         return count;

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/src/main/java/com/crossoverJie/seconds/kill/service/impl/OrderServiceImpl.java
Patch:
@@ -108,8 +108,8 @@ private void saleStockOptimisticByRedis(Stock stock) {
             throw new RuntimeException("并发更新库存失败") ;
         }
         //自增
-        redisTemplate.opsForValue().increment(RedisKeysConstant.STOCK_SALE + stock.getId(),1) ;
-        redisTemplate.opsForValue().increment(RedisKeysConstant.STOCK_VERSION + stock.getId(),1) ;
+        redisTemplate.opsForValue().increment(RedisKeysConstant.STOCK_SALE + stock.getId(),Integer.valueOf(1)) ;
+        redisTemplate.opsForValue().increment(RedisKeysConstant.STOCK_VERSION + stock.getId(),Integer.valueOf(1)) ;
     }
 
     private Stock checkStock(int sid) {

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-API/src/main/java/com/crossoverJie/seconds/kill/api/StockService.java
Patch:
@@ -12,7 +12,7 @@ public interface StockService {
     /**
      * 获取当前库存
      * @return
-     *  当前库存
+     * @throws Exception
      */
-    int getCurrentCount() throws Exception;
+    Integer getCurrentCount() throws Exception;
 }

File: SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/src/main/java/com/crossoverJie/seconds/kill/api/impl/StockServiceImpl.java
Patch:
@@ -34,8 +34,9 @@ public int getCurrentCount() {
         String remoteAddressString = RpcContext.getContext().getRemoteHostName();
         logger.info("request ={}",remoteAddressString);
 
-        int count = (int) redisTemplate.opsForValue().get("sid_1");
-        if (count == 0){
+        Object oCount = redisTemplate.opsForValue().get("sid_1");
+        int count =0 ;
+        if (oCount == null){
             Stock stock = stockService.getStockById(1);
             count = stock.getCount() ;
             redisTemplate.opsForValue().set("sid_1",count) ;

File: SSM-WEB/src/main/java/com/crossoverJie/service/ssmone/IUserServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Created by Administrator on 2016/6/22.
  */
-@Service("userService")
+@Service("iUserService")
 public class IUserServiceImpl implements IUserService {
     @Resource
     private IUserDao userDao;

File: SSM-WEB/src/main/java/com/crossoverJie/service/ssmone/IUserServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Created by Administrator on 2016/6/22.
  */
-@Service("userService")
+@Service("iUserService")
 public class IUserServiceImpl implements IUserService {
     @Resource
     private IUserDao userDao;

