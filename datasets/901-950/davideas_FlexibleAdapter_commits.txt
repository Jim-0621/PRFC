File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -131,7 +131,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setLoadingMoreAtStartUp(savedInstanceState == null) //To call only if the list is empty
                 //.setEndlessPageSize(3) //Endless is automatically disabled if newItems < 3
                 //.setEndlessTargetCount(15) //Endless is automatically disabled if totalItems >= 15
-                //.setEndlessScrollThreshold(1) //Default=1
+                .setEndlessScrollThreshold(20) //Default=1
                 .setEndlessScrollListener(this, mProgressItem)
                 .setTopEndless(false);
 
@@ -194,7 +194,7 @@ public void run() {
                 final List<AbstractFlexibleItem> newItems = new ArrayList<>();
 
                 // 1. Simulating success/failure with Random
-                int count = new Random().nextInt(7);
+                int count = new Random().nextInt(200);
                 int totalItemsOfType = mAdapter.getItemCountOfTypes(R.layout.recycler_simple_item);
                 for (int i = 1; i <= count; i++) {
                     newItems.add(DatabaseService.newSimpleItem(totalItemsOfType + i, null));
@@ -212,6 +212,7 @@ public void run() {
                 }
                 mAdapter.onLoadMoreComplete(newItems, (newItems.isEmpty() ? -1 : 3000L));
                 // - Retrieve the new page number after adding new items!
+                Log.d(TAG, "LastPosition=" + lastPosition);
                 Log.d(TAG, "EndlessCurrentPage=" + mAdapter.getEndlessCurrentPage());
                 Log.d(TAG, "EndlessPageSize=" + mAdapter.getEndlessPageSize());
                 Log.d(TAG, "EndlessTargetCount=" + mAdapter.getEndlessTargetCount());

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/FilterTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.concurrent.TimeUnit;
 
 import eu.davidea.flexibleadapter.items.AbstractFlexibleItem;
-import eu.davidea.samples.flexibleadapter.items.SimpleItem;
+import eu.davidea.samples.flexibleadapter.ui.items.SimpleItem;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
 
 import static org.junit.Assert.assertEquals;

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/UpdateDataSetTest.java
Patch:
@@ -15,7 +15,7 @@
 import eu.davidea.flexibleadapter.items.IFlexible;
 import eu.davidea.flexibleadapter.items.IHeader;
 import eu.davidea.flexibleadapter.utils.Log;
-import eu.davidea.samples.flexibleadapter.items.SimpleItem;
+import eu.davidea.samples.flexibleadapter.ui.items.SimpleItem;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
 
 import static org.junit.Assert.assertEquals;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -2060,8 +2060,6 @@ public void run() {
                     log.d("onLoadMore     invoked!");
                     mEndlessScrollListener.onLoadMore(getMainItemCount(), getEndlessCurrentPage());
                 }
-                // Reset the loading status
-                endlessLoading = false;
             }
         });
     }
@@ -2098,6 +2096,8 @@ public void onLoadMoreComplete(@Nullable List<T> newItems) {
      * <br>5.0.0-rc2 Added Top Endless
      */
     public void onLoadMoreComplete(@Nullable List<T> newItems, @IntRange(from = -1) long delay) {
+        // Reset the loading status
+        endlessLoading = false;
         // Calculate new items count
         int newItemsSize = newItems == null ? 0 : newItems.size();
         int totalItemCount = newItemsSize + getMainItemCount();

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/OverallAdapter.java
Patch:
@@ -51,8 +51,8 @@ public void showLayoutInfo(boolean scrollToPosition) {
                     R.string.columns,
                     String.valueOf(getFlexibleLayoutManager().getSpanCount()))
             );
-            addScrollableHeaderWithDelay(item, 500L, scrollToPosition);
-            removeScrollableHeaderWithDelay(item, 3000L);
+            addScrollableHeaderWithDelay(item, 300L, scrollToPosition);
+            removeScrollableHeaderWithDelay(item, 2000L);
         }
     }
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ExpandableHeaderItem.java
Patch:
@@ -183,6 +183,7 @@ protected boolean isViewCollapsibleOnClick() {
          * @return always true, if not overridden
          * @since 5.0.0-b1
          */
+        @Override
         protected boolean isViewCollapsibleOnLongClick() {
             return true;//default=true
         }

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentAsyncFilter.java
Patch:
@@ -147,11 +147,10 @@ private void initializeRecyclerView() {
         }
 
         // New empty views handling, to set after FastScroller
-        mAdapter.addListener(new EmptyViewHelper(mAdapter,
+        EmptyViewHelper.create(mAdapter,
                 getView().findViewById(R.id.empty_view),
                 getView().findViewById(R.id.filter_view),
-                (EmptyViewHelper.OnEmptyViewListener) getActivity()) // Optional!!
-        );
+                (EmptyViewHelper.OnEmptyViewListener) getActivity()); // Optional!!
 
         // Settings for FlipView
         FlipView.stopLayoutAnimation();

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentDataBinding.java
Patch:
@@ -103,7 +103,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        new EmptyViewHelper(mAdapter,
+        EmptyViewHelper.create(mAdapter,
                 getView().findViewById(R.id.empty_view),
                 getView().findViewById(R.id.filter_view));
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -86,7 +86,6 @@ protected void initializeFab() {
         mFab.setImageResource(R.drawable.ic_refresh_white_24dp);
     }
 
-    @SuppressWarnings({"ConstantConditions", "NullableProblems"})
     private void initializeRecyclerView(Bundle savedInstanceState) {
         // Initialize Adapter and RecyclerView
         // ExampleAdapter makes use of stableIds, I strongly suggest to implement 'item.hashCode()'
@@ -116,7 +115,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        new EmptyViewHelper(mAdapter,
+        EmptyViewHelper.create(mAdapter,
                 getView().findViewById(R.id.empty_view),
                 getView().findViewById(R.id.filter_view));
 
@@ -211,7 +210,7 @@ public void run() {
                 } else {
                     DatabaseService.getInstance().addAll(newItems);
                 }
-                mAdapter.onLoadMoreComplete(newItems, 3000L);
+                mAdapter.onLoadMoreComplete(newItems, (newItems.isEmpty() ? -1 : 3000L));
                 // - Retrieve the new page number after adding new items!
                 Log.d(TAG, "EndlessCurrentPage=" + mAdapter.getEndlessCurrentPage());
                 Log.d(TAG, "EndlessPageSize=" + mAdapter.getEndlessPageSize());

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableMultiLevel.java
Patch:
@@ -89,7 +89,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        new EmptyViewHelper(mAdapter,
+        EmptyViewHelper.create(mAdapter,
                 getView().findViewById(R.id.empty_view),
                 getView().findViewById(R.id.filter_view));
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -96,7 +96,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        new EmptyViewHelper(mAdapter,
+        EmptyViewHelper.create(mAdapter,
                 getView().findViewById(R.id.empty_view),
                 getView().findViewById(R.id.filter_view));
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentInstagramHeaders.java
Patch:
@@ -87,7 +87,7 @@ private void initializeRecyclerView() {
                 .withSectionGapOffset(24));
 
         // New empty views handling
-        new EmptyViewHelper(mAdapter, getView().findViewById(R.id.empty_view));
+        EmptyViewHelper.create(mAdapter, getView().findViewById(R.id.empty_view));
 
         mAdapter.setDisplayHeadersAtStartUp(true) //Show Headers at startUp!
                 .setStickyHeaders(true) //Make headers sticky

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1756,8 +1756,6 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
      */
     @Override
     public void onBindViewHolder(final RecyclerView.ViewHolder holder, int position, List payloads) {
-        String itemId = hasStableIds() ? " itemId=" + holder.getItemId() : "";
-        log.v("onViewBound    Holder=%s position=%s%s", getClassName(holder), position, itemId);
         if (!autoMap) {
             // If everything has been set properly, this should never happen ;-)
             throw new IllegalStateException("AutoMap is not active, this method cannot be called. You should implement the AutoMap properly.");
@@ -1810,7 +1808,6 @@ public void onViewRecycled(RecyclerView.ViewHolder holder) {
             holder.itemView.setVisibility(View.VISIBLE);
         }
         int position = holder.getAdapterPosition();
-        //log.v("onViewRecycled Holder=%s position=%s", getClassName(holder), position);
         T item = getItem(position);
         if (item != null) item.unbindViewHolder(this, holder, position);
     }

File: flexible-adapter-ui/src/main/java/eu/davidea/flexibleadapter/helpers/UndoHelper.java
Patch:
@@ -72,7 +72,7 @@ public class UndoHelper extends Snackbar.Callback implements FlexibleAdapter.OnD
     private boolean consecutive = false;
     private List<Integer> mPositions = null;
     private Object mPayload = null;
-    private FlexibleAdapter mAdapter;
+    private FlexibleAdapter<?> mAdapter;
     private OnActionListener mUndoListener;
     private Snackbar mSnackbar;
 
@@ -230,7 +230,7 @@ public void onDeleteConfirmed(int event) {
             Log.v("onActionConfirmed event=%s", event);
             mUndoListener.onActionConfirmed(mAction, event);
         }
-        mAdapter.emptyBin();
+        mAdapter.confirmDeletion();
         // Trigger manual dismiss event
         // Avoid circular calls!
         if (mSnackbar.isShown() && (mAction == Action.REMOVE && !mAdapter.isRestoreInTime())) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -68,7 +68,7 @@ public boolean isEmpty() {
      * The view is represented by a custom Item type to better represent any dynamic content.
      */
     public void showLayoutInfo(boolean scrollToPosition) {
-        if (!hasSearchText()) {
+        if (!hasFilter()) {
             final ScrollableLayoutItem item = new ScrollableLayoutItem("LAY-L");
             if (mRecyclerView.getLayoutManager() instanceof StaggeredGridLayoutManager) {
                 item.setId("LAY-S");
@@ -97,7 +97,7 @@ public void showLayoutInfo(boolean scrollToPosition) {
      * The view is represented by a custom Item type to better represent any dynamic content.
      */
     public void addUserLearnedSelection(boolean scrollToPosition) {
-        if (!DatabaseConfiguration.userLearnedSelection && !hasSearchText() && !(getItem(0) instanceof ScrollableULSItem)) {
+        if (!DatabaseConfiguration.userLearnedSelection && !hasFilter() && !(getItem(0) instanceof ScrollableULSItem)) {
             final ScrollableULSItem item = new ScrollableULSItem("ULS");
             item.setTitle(mRecyclerView.getContext().getString(R.string.uls_title));
             item.setSubtitle(mRecyclerView.getContext().getString(R.string.uls_subtitle));

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/OverallAdapter.java
Patch:
@@ -35,7 +35,7 @@ public OverallAdapter(Activity activity) {
      * The view is represented by a custom Item type to better represent any dynamic content.
      */
     public void showLayoutInfo(boolean scrollToPosition) {
-        if (!hasSearchText()) {
+        if (!hasFilter()) {
             //Define Example View
             final ScrollableLayoutItem item = new ScrollableLayoutItem("LAY-L");
             if (mRecyclerView.getLayoutManager() instanceof StaggeredGridLayoutManager) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -184,7 +184,7 @@ public void onLoadMore(int lastPosition, int currentPage) {
         // We don't want load more items when searching into the current Collection!
         // Alternatively, for a special filter, if we want load more items when filter is active, the
         // new items that arrive from remote, should be already filtered, before adding them to the Adapter!
-        if (mAdapter.hasSearchText()) {
+        if (mAdapter.hasFilter()) {
             mAdapter.onLoadMoreComplete(null);
             return;
         }

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1681,7 +1681,7 @@ private void unlinkHeaderFrom(T item, @Nullable Object payload) {
     public int getItemViewType(int position) {
         T item = getItem(position);
         if (item == null) {
-            log.e("Item for ViewType not found position=%s, total items=%s", position, getItemCount());
+            log.e("Item for ViewType not found! position=%s, items=%s", position, getItemCount());
             return 0;
         }
         // Map the view type if not done yet

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1681,6 +1681,7 @@ private void unlinkHeaderFrom(T item, @Nullable Object payload) {
     public int getItemViewType(int position) {
         T item = getItem(position);
         if (item == null) {
+            log.e("Item for ViewType not found position=%s, total items=%s", position, getItemCount());
             return 0;
         }
         // Map the view type if not done yet
@@ -4820,8 +4821,8 @@ public void onItemSwiped(int position, int direction) {
      * @param item the item to map
      * @since 5.0.0-b1
      */
-    private void mapViewTypeFrom(T item) {
-        if (item != null && !mTypeInstances.containsKey(item.getItemViewType())) {
+    private void mapViewTypeFrom(@NonNull T item) {
+        if (!mTypeInstances.containsKey(item.getItemViewType())) {
             mTypeInstances.put(item.getItemViewType(), item);
             log.i("Mapped viewType %s from %s", item.getItemViewType(), getClassName(item));
         }

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -174,7 +174,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         setContentView(R.layout.activity_main);
         if (BuildConfig.DEBUG) {
-            FlexibleAdapter.enableLogs(Level.VERBOSE);
+            FlexibleAdapter.enableLogs(Level.DEBUG);
         } else {
             FlexibleAdapter.enableLogs(Level.SUPPRESS);
         }

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1802,7 +1802,7 @@ public void onViewRecycled(RecyclerView.ViewHolder holder) {
 
 	/*------------------------*/
     /* ENDLESS SCROLL METHODS */
-	/*------------------------*/
+    /*------------------------*/
 
     /**
      * @return true if loading more will add items to the top, false to the bottom.
@@ -2094,7 +2094,7 @@ public void onLoadMoreComplete(@Nullable List<T> newItems, @IntRange(from = -1)
         }
         // Add any new items
         if (newItemsSize > 0) {
-            log.v("onLoadMore     performing adding %s new items on page=%s", newItemsSize, getEndlessCurrentPage());
+            log.d("onLoadMore     performing adding %s new items on page=%s", newItemsSize, getEndlessCurrentPage());
             progressPosition = mTopEndless ? mScrollableHeaders.size() : progressPosition;
             addItems(progressPosition, newItems);
         }

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/holders/HeaderHolder.java
Patch:
@@ -21,8 +21,9 @@
  * @author Davide Steduto
  * @since 19/10/2016
  */
-public class HeaderHolder extends AbstractHeaderItem<HeaderHolder.HeaderViewHolder>
-        implements IFilterable, IHolder<HeaderModel> {
+public class HeaderHolder
+        extends AbstractHeaderItem<HeaderHolder.HeaderViewHolder>
+        implements IFilterable<String>, IHolder<HeaderModel> {
 
     private HeaderModel model;
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/holders/ItemHolder.java
Patch:
@@ -29,7 +29,7 @@
  * @since 19/10/2016
  */
 public class ItemHolder extends AbstractSectionableItem<ItemHolder.ItemViewHolder, HeaderHolder>
-        implements IFilterable, IHolder<ItemModel> {
+        implements IFilterable<String>, IHolder<ItemModel> {
 
     private ItemModel model;
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ExpandableItem.java
Patch:
@@ -34,8 +34,9 @@
  * implemented methods around subItems list.
  */
 public class ExpandableItem extends AbstractItem<ExpandableItem.ParentViewHolder>
-        implements ISectionable<ExpandableItem.ParentViewHolder, HeaderItem>, IFilterable,
-        IExpandable<ExpandableItem.ParentViewHolder, SubItem> {
+        implements ISectionable<ExpandableItem.ParentViewHolder, HeaderItem>,
+        IExpandable<ExpandableItem.ParentViewHolder, SubItem>,
+        IFilterable<String> {
 
     /* The header of this item */
     HeaderItem header;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ExpandableLevel1Item.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class ExpandableLevel1Item
         extends AbstractItem<ExpandableItem.ParentViewHolder>
-        implements IExpandable<ExpandableItem.ParentViewHolder, SubItem>, IFilterable {
+        implements IExpandable<ExpandableItem.ParentViewHolder, SubItem>, IFilterable<String> {
 
     /* Flags for FlexibleAdapter */
     private boolean mExpanded = false;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/HeaderItem.java
Patch:
@@ -19,7 +19,9 @@
  * <p><b>Note:</b> THIS ITEM IS NOT A SCROLLABLE HEADER.</p>
  * A Section should not contain others Sections and headers are not Sectionable!
  */
-public class HeaderItem extends AbstractHeaderItem<HeaderItem.HeaderViewHolder> implements IFilterable {
+public class HeaderItem
+        extends AbstractHeaderItem<HeaderItem.HeaderViewHolder>
+        implements IFilterable<String> {
 
     private String id;
     private String title;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/SimpleItem.java
Patch:
@@ -32,7 +32,7 @@
  * implemented methods (getter and setters).
  */
 public class SimpleItem extends AbstractItem<SimpleItem.SimpleViewHolder>
-        implements ISectionable<SimpleItem.SimpleViewHolder, HeaderItem>, IFilterable, Serializable {
+        implements ISectionable<SimpleItem.SimpleViewHolder, HeaderItem>, IFilterable<String>, Serializable {
 
     /* The header of this item */
     HeaderItem header;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/SubItem.java
Patch:
@@ -23,7 +23,7 @@
  * {@link eu.davidea.flexibleadapter.items.AbstractFlexibleItem} to benefit of the already
  * implemented methods (getter and setters).
  */
-public class SubItem extends AbstractItem<SubItem.ChildViewHolder> implements IFilterable {
+public class SubItem extends AbstractItem<SubItem.ChildViewHolder> implements IFilterable<String> {
 
     /**
      * The header of this item

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentDataBinding.java
Patch:
@@ -103,9 +103,9 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        mAdapter.addListener(new EmptyViewHelper(mAdapter,
+        new EmptyViewHelper(mAdapter,
                 getView().findViewById(R.id.empty_view),
-                getView().findViewById(R.id.filter_view)));
+                getView().findViewById(R.id.filter_view));
 
         mAdapter.setLongPressDragEnabled(true)
                 .setHandleDragEnabled(true)

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -111,9 +111,9 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        mAdapter.addListener(new EmptyViewHelper(mAdapter,
+        new EmptyViewHelper(mAdapter,
                 getView().findViewById(R.id.empty_view),
-                getView().findViewById(R.id.filter_view)));
+                getView().findViewById(R.id.filter_view));
 
         mAdapter.setLongPressDragEnabled(true) //Enable long press to drag items
                 .setHandleDragEnabled(true) //Enable drag using handle view

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableMultiLevel.java
Patch:
@@ -89,9 +89,9 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        mAdapter.addListener(new EmptyViewHelper(mAdapter,
+        new EmptyViewHelper(mAdapter,
                 getView().findViewById(R.id.empty_view),
-                getView().findViewById(R.id.filter_view)));
+                getView().findViewById(R.id.filter_view));
 
         mAdapter.setLongPressDragEnabled(true) //Enable long press to drag items
                 .setHandleDragEnabled(true) //Enable handle drag

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -96,9 +96,9 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mAdapter.setFastScroller(fastScroller);
 
         // New empty views handling, to set after FastScroller
-        mAdapter.addListener(new EmptyViewHelper(mAdapter,
+        new EmptyViewHelper(mAdapter,
                 getView().findViewById(R.id.empty_view),
-                getView().findViewById(R.id.filter_view)));
+                getView().findViewById(R.id.filter_view));
 
         mAdapter.setLongPressDragEnabled(true) //Enable long press to drag items
                 .setHandleDragEnabled(true) //Enable handle drag

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentInstagramHeaders.java
Patch:
@@ -87,7 +87,7 @@ private void initializeRecyclerView() {
                 .withSectionGapOffset(24));
 
         // New empty views handling
-        mAdapter.addListener(new EmptyViewHelper(mAdapter, getView().findViewById(R.id.empty_view)));
+        new EmptyViewHelper(mAdapter, getView().findViewById(R.id.empty_view));
 
         mAdapter.setDisplayHeadersAtStartUp(true) //Show Headers at startUp!
                 .setStickyHeaders(true) //Make headers sticky

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -243,7 +243,7 @@ public FlexibleAdapter(@Nullable List<T> items, @Nullable Object listeners, bool
         mUndoPositions = new ArrayList<>();
 
         // Create listeners instances
-        addListener(listeners);
+        if (listeners != null) addListener(listeners);
 
         // Get notified when items are inserted or removed (it adjusts selected positions)
         registerAdapterDataObserver(new AdapterDataObserver());

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -259,7 +259,7 @@ public FlexibleAdapter(@Nullable List<T> items, @Nullable Object listeners, bool
      * @since 5.0.0-b6
      */
     @CallSuper
-    public FlexibleAdapter<T> addListener(@NonNull Object listener) {
+    public FlexibleAdapter<T> addListener(Object listener) {
         if (listener == null) {
             log.e("Invalid listener class: null");
             return this;
@@ -325,7 +325,7 @@ public FlexibleAdapter<T> addListener(@NonNull Object listener) {
      * @see #addListener(Object)
      * @since 5.0.0-rc3
      */
-    public final FlexibleAdapter<T> removeListener(@NonNull Object listener) {
+    public final FlexibleAdapter<T> removeListener(Object listener) {
         if (listener == null) {
             log.e("No listener class to remove!");
             return this;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentInstagramHeaders.java
Patch:
@@ -81,8 +81,9 @@ private void initializeRecyclerView() {
         // NOTE: Use default item animator 'canReuseUpdatedViewHolder()' will return true if
         // a Payload is provided. FlexibleAdapter is actually sending Payloads onItemChange.
         mRecyclerView.setItemAnimator(new DefaultItemAnimator());
-        // Custom divider item decorator with 24dpi as empty space between sections
-        mRecyclerView.addItemDecoration(new FlexibleItemDecoration(getActivity()).withDefaultDivider());
+        // 24dpi as empty space between sections (each post)
+        mRecyclerView.addItemDecoration(new FlexibleItemDecoration(getActivity())
+                .withSectionGapOffset(24));
 
         mAdapter.setDisplayHeadersAtStartUp(true) //Show Headers at startUp!
                 .setStickyHeaders(true) //Make headers sticky

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/InstagramItem.java
Patch:
@@ -29,6 +29,7 @@ public InstagramItem(String id, InstagramHeaderItem header) {
         super(header);
         this.id = id;
         this.header = header;
+        setSelectable(false);
     }
 
     @Override

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/services/DatabaseService.java
Patch:
@@ -360,8 +360,9 @@ public static ExpandableHeaderItem newExpandableSectionItem(int i) {
         for (int j = 1; j <= SUB_ITEMS; j++) {
             SubItem subItem = new SubItem(expandableItem.getId() + "-SB" + j);
             subItem.setTitle("Sub Item " + j);
-            //In this case the Header is the same parent: ExpandableHeaderItem instance
-            subItem.setHeader(expandableItem);
+            // NOTE: In case you want to retrieve the parent, you can implement ISectionable
+            // then, assign the Header: ExpandableHeaderItem instance.
+            //subItem.setHeader(expandableItem);
             expandableItem.addSubItem(subItem);
         }
         return expandableItem;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/ISectionable.java
Patch:
@@ -19,6 +19,7 @@
 
 /**
  * This interface represents an item in the section.
+ * <p>With this interface linking the header/parent is simplified.</p>
  *
  * @author Davide Steduto
  * @see IFlexible

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/FlexibleItemDecoration.java
Patch:
@@ -42,7 +42,6 @@
 import eu.davidea.flexibleadapter.items.IFlexible;
 import eu.davidea.flexibleadapter.items.ISectionable;
 import eu.davidea.flexibleadapter.utils.FlexibleUtils;
-import eu.davidea.flexibleadapter.utils.Log;
 
 /**
  * This item decorator implements identical drawing technique of {@code DividerItemDecorator}
@@ -612,7 +611,7 @@ private void applySectionGap(Rect outRect, RecyclerView.Adapter adapter, int pos
             // - Only ISectionable items can finish with a gap and only if next item is a IHeader item
             // - Important: the check must be done on the bottom of the section, otherwise the
             //   sticky header will jump!
-            Log.d("applySectionGap position=%s condition=%s", position, (position >= adapter.getItemCount() - mDividerOnLastItem));
+            //Log.v("applySectionGap position=%s condition=%s", position, (position >= adapter.getItemCount() - mDividerOnLastItem));
             if (item instanceof ISectionable &&
                     (flexibleAdapter.isHeader(flexibleAdapter.getItem(position + 1)) ||
                             position >= adapter.getItemCount() - mSectionGapOnLastItem)) {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -4717,6 +4717,8 @@ private void autoScrollWithDelay(final int position, final int subItemsCount) {
         // Must be delayed to give time at RecyclerView to recalculate positions after an automatic collapse
         new Handler(Looper.getMainLooper(), new Handler.Callback() {
             public boolean handleMessage(Message message) {
+                // #492 - NullPointerException when expanding item with auto-scroll
+                if (mRecyclerView == null) return false;
                 int firstVisibleItem = getFlexibleLayoutManager().findFirstCompletelyVisibleItemPosition();
                 int lastVisibleItem = getFlexibleLayoutManager().findLastCompletelyVisibleItemPosition();
                 int itemsToShow = position + subItemsCount - lastVisibleItem;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -810,9 +810,9 @@ public void onItemSwipe(final int position, int direction) {
     public void onUpdateEmptyView(int size) {
         Log.d("onUpdateEmptyView size=%s", size);
         // #454- Can't take fastScroller from Adapter, since this callback occurs before setting it
-        FastScroller fastScroller = findViewById(R.id.fast_scroller);
+        FastScroller fastScroller = (FastScroller) findViewById(R.id.fast_scroller);
         View emptyView = findViewById(R.id.empty_view);
-        TextView emptyText = findViewById(R.id.empty_text);
+        TextView emptyText = (TextView) findViewById(R.id.empty_text);
         if (emptyText != null)
             emptyText.setText(getString(R.string.no_items));
         if (size > 0) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/dialogs/BottomSheetSectionDialog.java
Patch:
@@ -144,12 +144,12 @@ public void onClick(View view) {
     public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
         ListView listView = (ListView) parent;
         if (listView.getTag().equals(R.id.select_item_type)) {
-            Button buttonList = mBottomSheetDialog.findViewById(R.id.select_item_type);
+            Button buttonList = (Button) mBottomSheetDialog.findViewById(R.id.select_item_type);
             buttonList.setText(listView.getItemAtPosition(position).toString());
             mItemType = position;
             mPopupItemType.dismiss();
         } else if (listView.getTag().equals(R.id.select_reference_button)) {
-            Button buttonList = mBottomSheetDialog.findViewById(R.id.select_reference_button);
+            Button buttonList = (Button) mBottomSheetDialog.findViewById(R.id.select_reference_button);
             buttonList.setText(listView.getItemAtPosition(position).toString());
             mReferencePosition = getListener().getReferenceList().indexOf(listView.getItemAtPosition(position));
             mPopupReference.dismiss();

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentInstagramHeaders.java
Patch:
@@ -70,7 +70,7 @@ private void initializeRecyclerView() {
         // Initialize Adapter and RecyclerView
         // true = it makes use of stableIds, I strongly suggest to implement 'item.hashCode()'
         FlexibleAdapter.useTag("InstagramHeadersAdapter");
-        mAdapter = new FlexibleAdapter<>(DatabaseService.getInstance().getDatabaseList(), getActivity(), true);
+        mAdapter = new FlexibleAdapter<>(null, getActivity(), true);
         mAdapter.addListener(getActivity())
                 .setAnimationOnScrolling(true)
                 .setAnimationOnReverseScrolling(true);
@@ -87,6 +87,7 @@ private void initializeRecyclerView() {
         mAdapter.setDisplayHeadersAtStartUp(true) //Show Headers at startUp!
                 .setStickyHeaders(true) //Make headers sticky
                 // Endless scroll with 1 item threshold
+                .setLoadingMoreAtStartUp(true)
                 .setEndlessScrollListener(this, new ProgressItem())
                 .setEndlessScrollThreshold(1); //Default=1
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractFlexibleItem.java
Patch:
@@ -167,7 +167,7 @@ public int getItemViewType() {
      * {@inheritDoc}
      */
     @Override
-    public abstract void bindViewHolder(FlexibleAdapter adapter, VH holder, int position, List payloads);
+    public abstract void bindViewHolder(FlexibleAdapter adapter, VH holder, int position, List<Object> payloads);
 
     /**
      * {@inheritDoc}

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IFlexible.java
Patch:
@@ -206,7 +206,7 @@ public interface IFlexible<VH extends RecyclerView.ViewHolder> {
      * @param position the current position
      * @param payloads a non-null list of merged payloads. Can be empty list if requires full update
      */
-    void bindViewHolder(FlexibleAdapter adapter, VH holder, int position, List payloads);
+    void bindViewHolder(FlexibleAdapter adapter, VH holder, int position, List<Object> payloads);
 
     /**
      * Called when a view created by this adapter has been recycled.

File: flexible-adapter/src/main/java/eu/davidea/viewholders/AnimatedViewHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015 Davide Steduto
+ * Copyright (C) 2016-2017 Davide Steduto
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flexible-adapter/src/main/java/eu/davidea/viewholders/ContentViewHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Davide Steduto
+ * Copyright 2016-2017 Davide Steduto
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flexible-adapter/src/main/java/eu/davidea/viewholders/FlexibleViewHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Davide Steduto
+ * Copyright 2016-2017 Davide Steduto
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/FlexibleItemDecoration.java
Patch:
@@ -272,7 +272,7 @@ protected void drawHorizontal(Canvas canvas, RecyclerView parent) {
      * @return {@code true} to draw the divider, {@code false} to skip the drawing
      */
     protected boolean shouldDrawDivider(RecyclerView.ViewHolder viewHolder) {
-        return mViewTypes == null || mViewTypes.contains(viewHolder.getItemViewType());
+        return mViewTypes == null || mViewTypes.isEmpty() || mViewTypes.contains(viewHolder.getItemViewType());
     }
 
 	/*==============================*/

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -3950,6 +3950,7 @@ protected boolean filterObject(T item, String constraint) {
      * Also restore headers visibility.
      */
     private void resetFilterFlags(List<T> items) {
+        if (items == null) return;
         IHeader sameHeader = null;
         // Reset flags for all items!
         for (int i = 0; i < items.size(); i++) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentSelectionModes.java
Patch:
@@ -90,7 +90,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
         mRecyclerView.setItemAnimator(new DefaultItemAnimator());
         // Divider item decorator with DrawOver enabled
         mRecyclerView.addItemDecoration(new FlexibleItemDecoration(getActivity())
-                .withDivider(R.drawable.divider)
+                .withDivider(R.drawable.divider, R.layout.recycler_simple_item)
                 .withDrawOver(true));
         mRecyclerView.postDelayed(new Runnable() {
             @Override
@@ -101,7 +101,7 @@ public void run() {
 
         // Add FastScroll to the RecyclerView, after the Adapter has been attached the RecyclerView!!!
         FastScroller fastScroller = getView().findViewById(R.id.fast_scroller);
-        fastScroller.setAutoHideEnabled(true);          //true is the default value!
+        fastScroller.setAutoHideEnabled(true);        //true is the default value!
         fastScroller.setAutoHideDelayInMillis(1000L); //1000ms is the default value!
         fastScroller.setMinimumScrollThreshold(70); //0 pixel is the default value! When > 0 it mimics the fling gesture
         fastScroller.addOnScrollStateChangeListener((MainActivity) getActivity());

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/ClearItemsTest.java
Patch:
@@ -89,7 +89,7 @@ public void testClearAllBut_WithoutScrollableItems() {
         assertEquals(35, mAdapter.getMainItemCount());
 
         // Clear all simple items, retains header items
-        mAdapter.clearAllBut(headerItem.getLayoutRes());
+        mAdapter.clearAllBut(headerItem.getItemViewType());
         assertEquals(5, mAdapter.getItemCount());
         assertEquals(5, mAdapter.getMainItemCount());
         assertTrue(mAdapter.getItem(0) instanceof HeaderItem);
@@ -108,7 +108,7 @@ public void testClearAllBut_WithScrollableItems() {
         assertEquals(35, mAdapter.getMainItemCount());
 
         // Clear all simple items, retains header items (...and scrollable items)
-        mAdapter.clearAllBut(headerItem.getLayoutRes());
+        mAdapter.clearAllBut(headerItem.getItemViewType());
         assertEquals(7, mAdapter.getItemCount());
         assertEquals(5, mAdapter.getMainItemCount());
         assertEquals(scrollableHeader, mAdapter.getItem(0));
@@ -122,7 +122,7 @@ public void testRemoveItemsOfType() {
         assertEquals(35, mAdapter.getItemCount());
 
         // Delete all items of type simple
-        mAdapter.removeItemsOfType(simpleItem.getLayoutRes());
+        mAdapter.removeItemsOfType(simpleItem.getItemViewType());
         assertEquals(5, mAdapter.getItemCount());
     }
 

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/RemoveItemsTest.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * @author Davide
- * @since 24/05/2017
+ * @since 29/08/2017
  */
 @RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class, sdk = 25)
@@ -38,8 +38,8 @@ public void testRemoveItems() {
         // Remember: Adapter is backed by a List object.
         for (int i = mAdapter.getItemCount(); i >= 7; i--) {
             AbstractFlexibleItem item = mAdapter.getItem(i);
-            // No necessary. but using getGlobalPositionOf asynchronously, it ensures the
-            // position of that item
+            // No necessary. but using getGlobalPositionOf() asynchronously,
+            // it ensures the position of that item
             mAdapter.removeItem(mAdapter.getGlobalPositionOf(item));
         }
         assertEquals(7, mAdapter.getItemCount());

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/utils/FlexibleUtils.java
Patch:
@@ -41,6 +41,7 @@
  * @author Davide Steduto
  * @since 27/01/2016 Created
  */
+@SuppressWarnings({"WeakerAccess", "unused", "ConstantConditions"})
 public final class FlexibleUtils {
 
 	public static final int INVALID_COLOR = -1;
@@ -101,8 +102,9 @@ public static String getModeName(@Mode int mode) {
 	 * @return the SimpleClassName of the provided object
 	 * @since 5.0.0-rc1
 	 */
+	@NonNull
 	public static String getClassName(@NonNull Object o) {
-		return o.getClass().getSimpleName();
+		return o == null ? "null" : o.getClass().getSimpleName();
 	}
 
 	/**

File: flexible-adapter/src/main/java/eu/davidea/viewholders/ExpandableViewHolder.java
Patch:
@@ -174,8 +174,8 @@ protected void collapseView(int position) {
 	public void onClick(View view) {
 		if (mAdapter.isEnabled(getFlexibleAdapterPosition()) && isViewExpandableOnClick()) {
 			toggleExpansion();
+			super.onClick(view);
 		}
-		super.onClick(view);
 	}
 
 	/**

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/UpdateDataSetTest.java
Patch:
@@ -12,6 +12,7 @@
 import eu.davidea.flexibleadapter.items.AbstractFlexibleItem;
 import eu.davidea.flexibleadapter.items.IFlexible;
 import eu.davidea.flexibleadapter.items.IHeader;
+import eu.davidea.flexibleadapter.utils.Log;
 import eu.davidea.samples.flexibleadapter.items.SimpleItem;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
 
@@ -33,7 +34,7 @@ public class UpdateDataSetTest {
 	public void setUp() throws Exception {
 		DatabaseService.getInstance().createHeadersSectionsDatabase(30, 5);
 		mInitialItems = DatabaseService.getInstance().getDatabaseList();
-		FlexibleAdapter.enableLogs(true);
+		FlexibleAdapter.enableLogs(Log.Level.VERBOSE);
 	}
 
 	@Test

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/FlexibleItemDecoration.java
Patch:
@@ -539,10 +539,10 @@ private boolean isLastRowOrColumn(int position, RecyclerView.Adapter adapter, in
 		int itemCount = adapter.getItemCount();
 		int nextPos = position < itemCount - 1 ? position + 1 : -1;
 		// First position on the next row
-		//int nextRowPos = position < itemCount - (spanCount/spanSize - spanIndex) ? position + (spanCount/spanSize - spanIndex) : -1;
+		int nextRowPos = position < itemCount - (spanCount/spanSize - spanIndex) ? position + (spanCount/spanSize - spanIndex) : -1;
 		// isLastRowOrColumn if one of the following condition is true
-		return position == itemCount - 1 || nextPos == -1 || itemType != adapter.getItemViewType(nextPos);// ||
-				//nextRowPos == -1 || itemType != adapter.getItemViewType(nextRowPos);
+		return position == itemCount - 1 || nextPos == -1 || itemType != adapter.getItemViewType(nextPos) ||
+				nextRowPos == -1 || itemType != adapter.getItemViewType(nextRowPos);
 	}
 
 	@SuppressWarnings("unchecked")

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -86,7 +86,7 @@ public void detachFromRecyclerView() {
 
 	private FrameLayout createContainer(int width, int height) {
 		FrameLayout frameLayout = new FrameLayout(mRecyclerView.getContext());
-		frameLayout.setLayoutParams(new ViewGroup.LayoutParams(width, height));
+		frameLayout.setLayoutParams(new ViewGroup.MarginLayoutParams(width, height));
 		return frameLayout;
 	}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -5552,10 +5552,8 @@ private void prepareItemsForUpdate(List<T> newItems) {
 				int itemCount = newItems.size();
 				if (position < itemCount) {
 					newItems.addAll(position + 1, subItems);
-					position += subItems.size();
 				} else {
 					newItems.addAll(subItems);
-					position = itemCount;
 				}
 			}
 			// Display headers too

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -96,7 +96,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mRecyclerView.setItemAnimator(new DefaultItemAnimator());
 		mRecyclerView.addItemDecoration(new FlexibleItemDecoration(getActivity())
 				//.addItemViewType(R.layout.recycler_header_item, 8, 100)
-				.addItemViewType(R.layout.recycler_simple_item, 8, 0)
+				.addItemViewType(R.layout.recycler_simple_item, 0, 8, 0, 8)
 				.withSectionGapOffset(24)
 				.withEdge(true));
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentOverall.java
Patch:
@@ -84,7 +84,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mRecyclerView.setAdapter(mAdapter);
 		mRecyclerView.setHasFixedSize(true); //Size of RV will not change
 		mItemDecoration = new FlexibleItemDecoration(getActivity())
-				.addItemViewType(R.layout.recycler_overall_item, 8, 8)
+				.addItemViewType(R.layout.recycler_overall_item, 8)
 				.withOffset(8)
 				.withEdge(true);
 		mRecyclerView.addItemDecoration(mItemDecoration);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentStaggeredLayout.java
Patch:
@@ -89,7 +89,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		// a Payload is provided. FlexibleAdapter is actually sending Payloads onItemChange.
 		mRecyclerView.setItemAnimator(new DefaultItemAnimator());
 		mRecyclerView.addItemDecoration(new FlexibleItemDecoration(getActivity())
-				.addItemViewType(R.layout.recycler_staggered_item, 8, 8)
+				.addItemViewType(R.layout.recycler_staggered_item, 8)
 				.withEdge(true));
 
 		// Experimenting NEW features (v5.0.0)

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -155,7 +155,7 @@ public void noMoreLoad(int newItemsSize) {
 	 * @param lastPosition the position of the last main item in the adapter
 	 * @param currentPage  the current page
 	 * @since 5.0.0-b6
-	 * <br/>5.0.0-rc1 added {@code lastPosition} and {@code currentPage} as parameters
+	 * <br>5.0.0-rc1 added {@code lastPosition} and {@code currentPage} as parameters
 	 */
 	@Override
 	public void onLoadMore(int lastPosition, int currentPage) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentInstagramHeaders.java
Patch:
@@ -122,7 +122,7 @@ public void noMoreLoad(int newItemsSize) {
 	 * @param lastPosition the position of the last main item in the adapter
 	 * @param currentPage  the current page
 	 * @since 5.0.0-b6
-	 * <br/>5.0.0-rc1 added {@code lastPosition} and {@code currentPage} as parameters
+	 * <br>5.0.0-rc1 added {@code lastPosition} and {@code currentPage} as parameters
 	 */
 	@Override
 	public void onLoadMore(int lastPosition, int currentPage) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/AnimatorSubItem.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * If you don't have many fields in common better to extend directly from
- * {@link eu.davidea.flexibleadapter.items.AbstractFlexibleItem} to benefit of the already
+ * {@link eu.davidea.flexibleadapter.items.AbstractSectionableItem} to benefit of the already
  * implemented methods (getter and setters).
  */
 public class AnimatorSubItem extends AbstractSectionableItem<AnimatorSubItem.ChildViewHolder, AnimatorExpandableItem> {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ExpandableLevel1Item.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * This is an experiment to evaluate how a Section with header can also be expanded/collapsed.
- * <p>Here, it still benefits of the common fields declared in AbstractModelItem.</p>
+ * <p>Here, it still benefits of the common fields declared in AbstractItem.</p>
  * It's important to note that, the ViewHolder must be specified in all &lt;diamond&gt; signature.
  */
 public class ExpandableLevel1Item

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/SimpleItem.java
Patch:
@@ -8,9 +8,7 @@
 import android.support.v7.widget.GridLayoutManager;
 import android.support.v7.widget.StaggeredGridLayoutManager;
 import android.support.v7.widget.helper.ItemTouchHelper;
-import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -29,7 +27,7 @@
 import eu.davidea.viewholders.FlexibleViewHolder;
 
 /**
- * You should extend directly from
+ * <b>Tip:</b> Consider to extend directly from
  * {@link eu.davidea.flexibleadapter.items.AbstractFlexibleItem} to benefit of the already
  * implemented methods (getter and setters).
  */

File: flexible-adapter-app/src/main/java/eu/davidea/utils/Utils.java
Patch:
@@ -54,7 +54,7 @@ public static DisplayMetrics getDisplayMetrics(Context context) {
 		return context.getResources().getDisplayMetrics();
 	}
 
-	public static float dpToPx(Context context, float dp) {
+	public static int dpToPx(Context context, float dp) {
 		return Math.round(dp * getDisplayMetrics(context).density);
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentDataBinding.java
Patch:
@@ -88,8 +88,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		// Initialize Adapter and RecyclerView
 		mAdapter = new BindingFlexibleAdapter<>(getActivity(), true);
 		// Experimenting NEW features (v5.0.0)
-		mAdapter.setNotifyChangeOfUnfilteredItems(true)//We have highlighted text while filtering, so let's enable this feature to be consistent with the active filter
-				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling);
+		mAdapter.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);
 		mRecyclerView.setLayoutManager(createNewLinearLayoutManager());
 		mRecyclerView.setAdapter(mAdapter);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -85,7 +85,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mAdapter.setAutoScrollOnExpand(true)
 				//.setAnimateToLimit(Integer.MAX_VALUE) //Use the default value
 				.setNotifyMoveOfFilteredItems(true) //When true, filtering on big list is very slow, not in this case!
-				.setNotifyChangeOfUnfilteredItems(true) //We have highlighted text while filtering, so let's enable this feature to be consistent with the active filter
+				.setNotifyChangeOfUnfilteredItems(true) //true by default
 				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling)
 				.setAnimationOnReverseScrolling(true);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableMultiLevel.java
Patch:
@@ -68,7 +68,6 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mAdapter = new ExampleAdapter(DatabaseService.getInstance().getDatabaseList(), getActivity());
 		// Experimenting NEW features (v5.0.0)
 		mAdapter.expandItemsAtStartUp()
-				.setNotifyChangeOfUnfilteredItems(true)
 				.setNotifyMoveOfFilteredItems(true)
 				.setAutoCollapseOnExpand(false)
 				.setMinCollapsibleLevel(1) //Auto-collapse only items with level >= 1 (avoid to collapse also sections!)

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -74,7 +74,6 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 				.setAutoScrollOnExpand(true)
 				.setAnimateToLimit(Integer.MAX_VALUE) //Size limit = MAX_VALUE will always animate the changes
 				.setNotifyMoveOfFilteredItems(true) //When true, filtering on big list is very slow!
-				.setNotifyChangeOfUnfilteredItems(true) //We have highlighted text while filtering, so let's enable this feature to be consistent with the active filter
 				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling)
 				.setAnimationOnReverseScrolling(true);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -84,8 +84,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		// ExampleAdapter makes use of stableIds, I strongly suggest to implement 'item.hashCode()'
 		mAdapter = new ExampleAdapter(DatabaseService.getInstance().getDatabaseList(), getActivity());
 		// Experimenting NEW features (v5.0.0)
-		mAdapter.setNotifyChangeOfUnfilteredItems(true) //We have highlighted text while filtering, so let's enable this feature to be consistent with the active filter
-				.setNotifyMoveOfFilteredItems(true)
+		mAdapter.setNotifyMoveOfFilteredItems(true)
 				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);
 		mRecyclerView.setAdapter(mAdapter);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentSelectionModes.java
Patch:
@@ -77,7 +77,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		// Initialize Adapter and RecyclerView
 		// ExampleAdapter makes use of stableIds, I strongly suggest to implement 'item.hashCode()'
 		mAdapter = new ExampleAdapter(items, getActivity());
-		mAdapter.setNotifyChangeOfUnfilteredItems(true) //This will rebind new item when refreshed
+		mAdapter.setNotifyChangeOfUnfilteredItems(true) //true is the default! This will rebind new item when refreshed
 				.setMode(SelectableAdapter.MODE_SINGLE);
 
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/UpdateDataSetTest.java
Patch:
@@ -35,7 +35,6 @@ public void setUp() throws Exception {
 	@Test
 	public void testUpdateDataSet_WithAnimation() throws Exception {
 		mAdapter = new FlexibleAdapter<>(mItems);
-		mAdapter.setNotifyChangeOfUnfilteredItems(true);
 		mAdapter.showAllHeaders();
 
 		List<AbstractFlexibleItem> initialItems = mAdapter.getCurrentItems();
@@ -49,7 +48,6 @@ public void testUpdateDataSet_WithAnimation() throws Exception {
 	@Test
 	public void testUpdateDataSet_WithNotifyDataSetChanged() throws Exception {
 		mAdapter = new FlexibleAdapter<>(mItems);
-		mAdapter.setNotifyChangeOfUnfilteredItems(true);
 		mAdapter.showAllHeaders();
 
 		List<AbstractFlexibleItem> initialItems = mAdapter.getCurrentItems();

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -325,7 +325,7 @@ public boolean onNavigationItemSelected(@NonNull MenuItem item) {
 		hideFabSilently();
 		CoordinatorLayout.LayoutParams layoutParams = (CoordinatorLayout.LayoutParams) mFab.getLayoutParams();
 		ScrollAwareFABBehavior fabBehavior = ((ScrollAwareFABBehavior) layoutParams.getBehavior());
-		fabBehavior.setEnabled(false);
+		//fabBehavior.setEnabled(false);
 
 		// Handle navigation view item clicks
 		int id = item.getItemId();
@@ -345,7 +345,8 @@ public boolean onNavigationItemSelected(@NonNull MenuItem item) {
 			mFragment = FragmentDataBinding.newInstance(2);
 		} else if (id == R.id.nav_headers_and_sections) {
 			mFragment = FragmentHeadersSections.newInstance(2);
-			fabBehavior.setEnabled(true);
+			showFab();
+			//fabBehavior.setEnabled(true);
 		} else if (id == R.id.nav_multi_level_expandable) {
 			mFragment = FragmentExpandableMultiLevel.newInstance(2);
 		} else if (id == R.id.nav_expandable_sections) {

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/FilterTest.java
Patch:
@@ -18,7 +18,7 @@
  * @since 18/10/2016
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 23)
+@Config(constants = BuildConfig.class, sdk = 25)
 public class FilterTest {
 
 	FlexibleAdapter<AbstractFlexibleItem> mAdapter;

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/HeadersSectionsTest.java
Patch:
@@ -21,7 +21,7 @@
  * @since 23/06/2016
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 23)
+@Config(constants = BuildConfig.class, sdk = 25)
 public class HeadersSectionsTest {
 
 	FlexibleAdapter<AbstractFlexibleItem> mAdapter;

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/UpdateDataSetTest.java
Patch:
@@ -20,7 +20,7 @@
  * @since 18/10/2016
  */
 @RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 23)
+@Config(constants = BuildConfig.class, sdk = 25)
 public class UpdateDataSetTest {
 
 	FlexibleAdapter<AbstractFlexibleItem> mAdapter;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -5503,7 +5503,7 @@ private void prepareItemsForUpdate(List<T> newItems) {
 				headersShown = true;
 			}
 			IHeader header = getHeaderOf(item);
-			if (header != null && header.equals(sameHeader) && !isExpandable((T) header)) {
+			if (header != null && !header.equals(sameHeader) && !isExpandable((T) header)) {
 				header.setHidden(false);
 				sameHeader = header;
 				newItems.add(position, (T) header);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/SelectableAdapter.java
Patch:
@@ -185,7 +185,7 @@ public IFlexibleLayoutManager getFlexibleLayoutManager() {
 			if (layoutManager instanceof IFlexibleLayoutManager) {
 				mFlexibleLayoutManager = (IFlexibleLayoutManager) layoutManager;
 			} else if (layoutManager != null) {
-				mFlexibleLayoutManager = new FlexibleLayoutManager(layoutManager);
+				mFlexibleLayoutManager = new FlexibleLayoutManager(mRecyclerView);
 			}
 		}
 		return this.mFlexibleLayoutManager;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/FlexibleItemDecoration.java
Patch:
@@ -177,7 +177,7 @@ public void getItemOffsets(Rect outRect, View view, RecyclerView recyclerView, R
 				offset += mSectionOffset;
 			}
 		}
-		if (FlexibleUtils.getOrientation(recyclerView.getLayoutManager()) == RecyclerView.VERTICAL) {
+		if (FlexibleUtils.getOrientation(recyclerView) == RecyclerView.VERTICAL) {
 			outRect.set(0, 0, 0, offset);
 		} else {
 			outRect.set(0, 0, offset, 0);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/ItemTouchHelperCallback.java
Patch:
@@ -263,7 +263,7 @@ public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder v
 		if (layoutManager instanceof GridLayoutManager || layoutManager instanceof StaggeredGridLayoutManager) {
 			dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;
 			swipeFlags = 0;
-		} else if (FlexibleUtils.getOrientation(layoutManager) == LinearLayoutManager.HORIZONTAL) {
+		} else if (FlexibleUtils.getOrientation(recyclerView) == LinearLayoutManager.HORIZONTAL) {
 			dragFlags = ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;
 			swipeFlags = mSwipeFlags > 0 ? mSwipeFlags : ItemTouchHelper.UP | ItemTouchHelper.DOWN;
 		} else {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1628,7 +1628,7 @@ private void showAllHeadersWithReset(boolean init) {
 			T item = mItems.get(position);
 			// Reset hidden status! Necessary after the filter and the update
 			IHeader header = getHeaderOf(item);
-			if (!header.equals(sameHeader) && header != null && !isExpandable((T) header)) {
+			if (header != null && !header.equals(sameHeader) && !isExpandable((T) header)) {
 				sameHeader = header;
 				header.setHidden(true);
 			}
@@ -4219,7 +4219,7 @@ private void resetFilterFlags(List<T> items) {
 			// Restore headers visibility
 			if (headersShown) {
 				IHeader header = getHeaderOf(item);
-				if (!header.equals(sameHeader) && header != null && !isExpandable((T) header)) {
+				if (header != null && !header.equals(sameHeader) && !isExpandable((T) header)) {
 					header.setHidden(false);
 					sameHeader = header;
 					items.add(i, (T) header);
@@ -5502,7 +5502,7 @@ private void prepareItemsForUpdate(List<T> newItems) {
 				headersShown = true;
 			}
 			IHeader header = getHeaderOf(item);
-			if (header.equals(sameHeader) && header != null && !isExpandable((T) header)) {
+			if (header != null && header.equals(sameHeader) && !isExpandable((T) header)) {
 				header.setHidden(false);
 				sameHeader = header;
 				newItems.add(position, (T) header);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1628,7 +1628,7 @@ private void showAllHeadersWithReset(boolean init) {
 			T item = mItems.get(position);
 			// Reset hidden status! Necessary after the filter and the update
 			IHeader header = getHeaderOf(item);
-			if (header != sameHeader && header != null && !isExpandable((T) header)) {
+			if (!header.equals(sameHeader) && header != null && !isExpandable((T) header)) {
 				sameHeader = header;
 				header.setHidden(true);
 			}
@@ -4219,7 +4219,7 @@ private void resetFilterFlags(List<T> items) {
 			// Restore headers visibility
 			if (headersShown) {
 				IHeader header = getHeaderOf(item);
-				if (header != sameHeader && header != null && !isExpandable((T) header)) {
+				if (!header.equals(sameHeader) && header != null && !isExpandable((T) header)) {
 					header.setHidden(false);
 					sameHeader = header;
 					items.add(i, (T) header);
@@ -5502,7 +5502,7 @@ private void prepareItemsForUpdate(List<T> newItems) {
 				headersShown = true;
 			}
 			IHeader header = getHeaderOf(item);
-			if (header != sameHeader && header != null && !isExpandable((T) header)) {
+			if (header.equals(sameHeader) && header != null && !isExpandable((T) header)) {
 				header.setHidden(false);
 				sameHeader = header;
 				newItems.add(position, (T) header);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -239,7 +239,7 @@ private void swapHeader(FlexibleViewHolder newHeader) {
 		onStickyHeaderChange(mHeaderPosition);
 	}
 
-	private void ensureHeaderParent() {
+	public void ensureHeaderParent() {
 		final View view = mStickyHeaderViewHolder.getContentView();
 		// #121 - Make sure the measured height (width for horizontal layout) is kept if
 		// WRAP_CONTENT has been set for the Header View

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -81,7 +81,7 @@ public void showLayoutInfo(boolean scrollToPosition) {
 			}
 			item.setSubtitle(mRecyclerView.getContext().getString(
 					R.string.columns,
-					String.valueOf(mFlexibleLayoutManager.getSpanCount()))
+					String.valueOf(getFlexibleLayoutManager().getSpanCount()))
 			);
 			// NOTE: If you have to change at runtime the LayoutManager AND add
 			// Scrollable Headers, consider to add them in post, using a delay >= 0

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/OverallAdapter.java
Patch:
@@ -49,7 +49,7 @@ public void showLayoutInfo(boolean scrollToPosition) {
 			}
 			item.setSubtitle(mRecyclerView.getContext().getString(
 					R.string.columns,
-					String.valueOf(mFlexibleLayoutManager.getSpanCount()))
+					String.valueOf(getFlexibleLayoutManager().getSpanCount()))
 			);
 			addScrollableHeaderWithDelay(item, 500L, scrollToPosition);
 			removeScrollableHeaderWithDelay(item, 3000L);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -88,8 +88,8 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 				.setNotifyMoveOfFilteredItems(true)
 				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);
-		mRecyclerView.setLayoutManager(createNewLinearLayoutManager());
 		mRecyclerView.setAdapter(mAdapter);
+		mRecyclerView.setLayoutManager(createNewLinearLayoutManager());
 		mRecyclerView.setHasFixedSize(true); //Size of RV will not change
 		// NOTE: Use default item animator 'canReuseUpdatedViewHolder()' will return true if
 		// a Payload is provided. FlexibleAdapter is actually sending Payloads onItemChange.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/SelectableAdapter.java
Patch:
@@ -78,8 +78,8 @@ public abstract class SelectableAdapter extends RecyclerView.Adapter
 	private Set<Integer> mSelectedPositions;
 	private Set<FlexibleViewHolder> mBoundViewHolders;
 	private int mMode;
+	private IFlexibleLayoutManager mFlexibleLayoutManager;
 	protected RecyclerView mRecyclerView;
-	protected IFlexibleLayoutManager mFlexibleLayoutManager;
 	protected FastScroller.Delegate mFastScrollerDelegate;
 
 	/**
@@ -181,8 +181,9 @@ public RecyclerView getRecyclerView() {
 
 	/**
 	 * Current instance of the wrapper class for LayoutManager suitable for FlexibleAdapter.
+	 * LayoutManager must be already initialized in the RecyclerView.
 	 *
-	 * return wrapper class for any non-conventional LayoutManagers.
+	 * return wrapper class for any non-conventional LayoutManagers or {@code null} if not initialized.
 	 * @since 5.0.0-rc2
 	 */
 	public IFlexibleLayoutManager getFlexibleLayoutManager() {

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/FilterTest.java
Patch:
@@ -35,10 +35,8 @@ public void testNoDelayFilter() throws Exception {
 		mAdapter = new FlexibleAdapter<>(mItems);
 		mAdapter.showAllHeaders();
 		mAdapter.setSearchText("1");
-		System.out.println(mAdapter.getItemCount());
 		mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList());
-		System.out.println(mAdapter.getItemCount());
-		assertEquals(16, mAdapter.getItemCount());
+		assertEquals(21, mAdapter.getItemCount());
 	}
 
 }
\ No newline at end of file

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -800,7 +800,6 @@ public final boolean isScrollableHeaderOrFooter(int position) {
 	 * @see #addScrollableHeaderWithDelay(IFlexible, long, boolean)
 	 * @since 5.0.0-rc1
 	 */
-	//TODO: Endless Top Scrolling
 	public final boolean addScrollableHeader(@NonNull T headerItem) {
 		if (DEBUG) Log.d(TAG, "Add scrollable header " + getClassName(headerItem));
 		if (!mScrollableHeaders.contains(headerItem)) {
@@ -5484,7 +5483,7 @@ private void prepareItemsForUpdate(List<T> newItems) {
 		// We use 1 cycle for expanding And display headers
 		// to optimize the operations of adding hidden items/subItems
 		while (position < newItems.size()) {
-			T item = getItem(position);
+			T item = newItems.get(position);
 			// Expand Expandable
 			if (isExpanded(item)) {
 				IExpandable expandable = (IExpandable) item;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentSelectionModes.java
Patch:
@@ -21,7 +21,6 @@
 import eu.davidea.samples.flexibleadapter.R;
 import eu.davidea.samples.flexibleadapter.items.ScrollableUseCaseItem;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
-import eu.davidea.utils.Utils;
 
 /**
  * A fragment representing a list of Items.
@@ -106,7 +105,7 @@ public void run() {
 		fastScroller.setAutoHideDelayInMillis(1000L);
 		fastScroller.addOnScrollStateChangeListener((MainActivity) getActivity());
 		// The color is already fetched by the FastScroller constructor, but you can change the color at runtime
-		fastScroller.setBubbleAndHandleColor(Utils.getColorAccent(getActivity()));
+		// fastScroller.setBubbleAndHandleColor(Utils.getColorAccent(getActivity()));
 		mAdapter.setFastScroller(fastScroller);
 
 		SwipeRefreshLayout swipeRefreshLayout = (SwipeRefreshLayout) getView().findViewById(R.id.swipeRefreshLayout);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -96,8 +96,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mRecyclerView.setItemAnimator(new DefaultItemAnimator());
 
 		// Add FastScroll to the RecyclerView, after the Adapter has been attached the RecyclerView!!!
-		mAdapter.setFastScroller((FastScroller) getView().findViewById(R.id.fast_scroller),
-				Utils.getColorAccent(getActivity()), (MainActivity) getActivity());
+		mAdapter.setFastScroller((FastScroller) getView().findViewById(R.id.fast_scroller));
 		mAdapter.setLongPressDragEnabled(true)
 				.setHandleDragEnabled(true)
 				.setSwipeEnabled(true)

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -285,9 +285,10 @@ private void resetHeader(FlexibleViewHolder header) {
 		view.setTranslationY(0);
 		if (!header.itemView.equals(view))
 			((ViewGroup) header.itemView).addView(view);
+		header.setIsRecyclable(true);
+		// #294 - Expandable header is not resized / redrawn on automatic configuration change when sticky headers are enabled
 		header.itemView.getLayoutParams().width = view.getLayoutParams().width;
 		header.itemView.getLayoutParams().height = view.getLayoutParams().height;
-		header.setIsRecyclable(true);
 	}
 
 	private void clearHeader() {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -285,6 +285,8 @@ private void resetHeader(FlexibleViewHolder header) {
 		view.setTranslationY(0);
 		if (!header.itemView.equals(view))
 			((ViewGroup) header.itemView).addView(view);
+		header.itemView.getLayoutParams().width = view.getLayoutParams().width;
+		header.itemView.getLayoutParams().height = view.getLayoutParams().height;
 		header.setIsRecyclable(true);
 	}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -2166,7 +2166,7 @@ public void onLoadMoreComplete(@Nullable List<T> newItems, @IntRange(from = -1)
 			if (DEBUG)
 				Log.v(TAG, "onLoadMore     enqueued removing progressItem (" + delay + "ms)");
 			mHandler.sendEmptyMessageDelayed(LOAD_MORE_COMPLETE, delay);
-		} else if (isEndlessScrollEnabled()) {
+		} else {
 			hideProgressItem();
 		}
 		// 5. Reset the loading status

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableMultiLevel.java
Patch:
@@ -53,7 +53,9 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createExpandableMultiLevelDatabase(50);
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createExpandableMultiLevelDatabase(50);
+		}
 		initializeRecyclerView(savedInstanceState);
 
 		// Settings for FlipView

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -55,7 +55,9 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createExpandableSectionsDatabase(100); //N. of sections
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createExpandableSectionsDatabase(100); //N. of sections
+		}
 		initializeRecyclerView(savedInstanceState);
 
 		// Settings for FlipView

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -67,7 +67,9 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createHeadersSectionsDatabase(400, 100);
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createHeadersSectionsDatabase(400, 100);
+		}
 		initializeRecyclerView(savedInstanceState);
 
 		// Restore FAB button and icon

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHolderSections.java
Patch:
@@ -47,7 +47,9 @@ public FragmentHolderSections() {
 	public void onActivityCreated(Bundle savedInstanceState) {
 		super.onActivityCreated(savedInstanceState);
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createHolderSectionsDatabase(50, 10);
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createHolderSectionsDatabase(50, 10);
+		}
 		initializeRecyclerView(savedInstanceState);
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentInstagramHeaders.java
Patch:
@@ -57,7 +57,9 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createInstagramHeadersDatabase(15);
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createInstagramHeadersDatabase(15);
+		}
 		initializeRecyclerView();
 
 		// Settings for FlipView

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentOverall.java
Patch:
@@ -53,7 +53,9 @@ public FragmentOverall() {
 	public void onActivityCreated(Bundle savedInstanceState) {
 		super.onActivityCreated(savedInstanceState);
 		// Create overall items and Initialize RecyclerView
-		DatabaseService.getInstance().createOverallDatabase(getActivity().getResources());
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createOverallDatabase(getActivity().getResources());
+		}
 		initializeRecyclerView(savedInstanceState);
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentSelectionModes.java
Patch:
@@ -61,7 +61,9 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createEndlessDatabase(200);
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createEndlessDatabase(200);
+		}
 		initializeRecyclerView(savedInstanceState);
 
 		// Settings for FlipView

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentStaggeredLayout.java
Patch:
@@ -58,7 +58,9 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		super.onActivityCreated(savedInstanceState);
 
 		// Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createStaggeredDatabase(getActivity());
+		if (savedInstanceState == null) {
+			DatabaseService.getInstance().createStaggeredDatabase(getActivity());
+		}
 		initializeRecyclerView(savedInstanceState);
 
 		// Restore FAB button and icon

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ExpandableHeaderItem.java
Patch:
@@ -115,7 +115,7 @@ public void bindViewHolder(FlexibleAdapter adapter, ExpandableHeaderViewHolder h
 		if (payloads.size() > 0) {
 			Log.d(this.getClass().getSimpleName(), "ExpandableHeaderItem Payload " + payloads + " - " + getTitle());
 		} else {
-			Log.d(this.getClass().getSimpleName(), "ExpandableHeaderItem " + getTitle());
+			Log.d(this.getClass().getSimpleName(), "ExpandableHeaderItem NoPayload - " + getTitle());
 			holder.mTitle.setText(getTitle());
 		}
 		setSubtitle(String.valueOf(adapter.getCurrentChildren(this).size()) +

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -2575,8 +2575,8 @@ private int expand(int position, boolean expandAll, boolean init, boolean notify
 			}
 
 			// Expand!
-			notifyItemRangeInserted(position + 1, subItemsCount);
 			if (notifyParent) notifyItemChanged(position, Payload.EXPANDED);
+			notifyItemRangeInserted(position + 1, subItemsCount);
 
 			// Show also the headers of the subItems
 			if (!init && headersShown) {
@@ -2701,8 +2701,8 @@ public int collapse(@IntRange(from = 0) int position, boolean notifyParent) {
 			expandable.setExpanded(false);
 
 			// Collapse!
-			notifyItemRangeRemoved(position + 1, subItemsCount);
 			if (notifyParent) notifyItemChanged(position, Payload.COLLAPSED);
+			notifyItemRangeRemoved(position + 1, subItemsCount);
 
 			// Hide also the headers of the subItems
 			if (headersShown && !isHeader(item)) {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -2576,8 +2576,8 @@ private int expand(int position, boolean expandAll, boolean init, boolean notify
 			}
 
 			// Expand!
-			if (notifyParent) notifyItemChanged(position, Payload.EXPANDED);
 			notifyItemRangeInserted(position + 1, subItemsCount);
+			if (notifyParent) notifyItemChanged(position, Payload.EXPANDED);
 
 			// Show also the headers of the subItems
 			if (!init && headersShown) {
@@ -2704,8 +2704,8 @@ public int collapse(@IntRange(from = 0) int position, boolean notifyParent) {
 			expandable.setExpanded(false);
 
 			// Collapse!
-			if (notifyParent) notifyItemChanged(position, Payload.COLLAPSED);
 			notifyItemRangeRemoved(position + 1, subItemsCount);
+			if (notifyParent) notifyItemChanged(position, Payload.COLLAPSED);
 
 			// Hide also the headers of the subItems
 			if (headersShown && !isHeader(item)) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ExpandableHeaderItem.java
Patch:
@@ -113,8 +113,9 @@ public ExpandableHeaderViewHolder createViewHolder(FlexibleAdapter adapter, Layo
 	@Override
 	public void bindViewHolder(FlexibleAdapter adapter, ExpandableHeaderViewHolder holder, int position, List payloads) {
 		if (payloads.size() > 0) {
-			Log.d(this.getClass().getSimpleName(), "ExpandableHeaderItem Payload " + payloads);
+			Log.d(this.getClass().getSimpleName(), "ExpandableHeaderItem Payload " + payloads + " - " + getTitle());
 		} else {
+			Log.d(this.getClass().getSimpleName(), "ExpandableHeaderItem " + getTitle());
 			holder.mTitle.setText(getTitle());
 		}
 		setSubtitle(String.valueOf(adapter.getCurrentChildren(this).size()) +

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1783,6 +1783,9 @@ private boolean isHeaderShared(IHeader header, int positionStart, int itemCount)
 	@Override
 	public int getItemViewType(int position) {
 		T item = getItem(position);
+		if (item == null) {
+			return 0;
+		}
 		// Map the view type if not done yet
 		mapViewTypeFrom(item);
 		autoMap = true;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -906,7 +906,7 @@ public final void removeAllScrollableFooters() {
 		if (mScrollableFooters.size() > 0) {
 			if (DEBUG) Log.d(TAG, "Remove all scrollable footers");
 			mItems.removeAll(mScrollableFooters);
-			notifyItemRangeRemoved(getItemCount() - 1 - mScrollableHeaders.size(), mScrollableFooters.size());
+			notifyItemRangeRemoved(getItemCount() - mScrollableFooters.size(), mScrollableFooters.size());
 			mScrollableFooters.clear();
 		}
 	}

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -92,8 +92,9 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 				Utils.getColorAccent(getActivity()), (MainActivity) getActivity());
 		// Experimenting NEW features (v5.0.0)
 		mAdapter.setLongPressDragEnabled(true) //Enable long press to drag items
-				.setHandleDragEnabled(true); //Enable handle drag
-				//.setDisplayHeadersAtStartUp(true); //Show Headers at startUp: (not necessary if Headers are also Expandable)
+				.setHandleDragEnabled(true) //Enable handle drag
+				//.setDisplayHeadersAtStartUp(true); //Show Headers at startUp: (not necessary if Headers are also Expandable AND expanded at startup)
+				.setStickyHeaders(true);
 
 		SwipeRefreshLayout swipeRefreshLayout = (SwipeRefreshLayout) getView().findViewById(R.id.swipeRefreshLayout);
 		swipeRefreshLayout.setEnabled(true);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -12,6 +12,7 @@
 
 import eu.davidea.flexibleadapter.FlexibleAdapter;
 import eu.davidea.flexibleadapter.items.AbstractFlexibleItem;
+import eu.davidea.flexibleadapter.utils.Utils;
 import eu.davidea.samples.flexibleadapter.items.ScrollableExpandableItem;
 import eu.davidea.samples.flexibleadapter.items.ScrollableFooterItem;
 import eu.davidea.samples.flexibleadapter.items.ScrollableLayoutItem;
@@ -87,7 +88,7 @@ public void showLayoutInfo() {
 			}
 			item.setSubtitle(mRecyclerView.getContext().getString(
 					R.string.columns,
-					String.valueOf(getSpanCount(mRecyclerView.getLayoutManager())))
+					String.valueOf(Utils.getSpanCount(mRecyclerView.getLayoutManager())))
 			);
 			addScrollableHeader(item);
 			removeScrollableHeaderWithDelay(item, 4000L);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/OverallAdapter.java
Patch:
@@ -59,7 +59,7 @@ public void showLayoutInfo(boolean scrollToPosition) {
 			}
 			item.setSubtitle(mRecyclerView.getContext().getString(
 					R.string.columns,
-					String.valueOf(getSpanCount(mRecyclerView.getLayoutManager())))
+					String.valueOf(eu.davidea.flexibleadapter.utils.Utils.getSpanCount(mRecyclerView.getLayoutManager())))
 			);
 			addScrollableHeaderWithDelay(item, 500L, scrollToPosition);
 			removeScrollableHeaderWithDelay(item, 2000L);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -66,7 +66,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		// Create New Database and Initialize RecyclerView
-		if (DatabaseService.getInstance().getDatabaseList().size() == 0) {
+		if (savedInstanceState == null) {
 			DatabaseService.getInstance().createEndlessDatabase(0); //N. of items
 		}
 		initializeRecyclerView();
@@ -207,7 +207,7 @@ public void run() {
 							Toast.LENGTH_SHORT).show();
 				}
 			}
-		}, 5000L);
+		}, 4000L);
 	}
 
 	@Override

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHolderSections.java
Patch:
@@ -74,7 +74,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		swipeRefreshLayout.setEnabled(true);
 		mListener.onFragmentChange(swipeRefreshLayout, mRecyclerView, SelectableAdapter.MODE_IDLE);
 
-		//Add sample HeaderView items on the top (not belongs to the library)
+		//Add 1 Scrollable Header
 		mAdapter.addUserLearnedSelection(savedInstanceState == null);
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentStaggeredLayout.java
Patch:
@@ -95,7 +95,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		swipeRefreshLayout.setEnabled(true);
 		mListener.onFragmentChange(swipeRefreshLayout, mRecyclerView, SelectableAdapter.MODE_IDLE);
 
-		//Add sample HeaderView items on the top (not belongs to the library)
+		//Add 1 Scrollable Header
 		mAdapter.showLayoutInfo();
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/items/ScrollableULSItem.java
Patch:
@@ -69,7 +69,7 @@ class ULSViewHolder extends FlexibleViewHolder {
 		TextView mSubtitle;
 		ImageView mDismissIcon;
 
-		public ULSViewHolder(View view, FlexibleAdapter adapter) {
+		ULSViewHolder(View view, FlexibleAdapter adapter) {
 			super(view, adapter);
 			mTitle = (TextView) view.findViewById(R.id.title);
 			mSubtitle = (TextView) view.findViewById(R.id.subtitle);
@@ -82,7 +82,7 @@ public void onClick(View v) {
 					//Don't need anymore to set permanent for Scrollable Headers and Footers
 					//mAdapter.setPermanentDelete(true);
 					//noinspection unchecked
-					mAdapter.removeScrollableFooter(ScrollableULSItem.this);
+					mAdapter.removeScrollableHeader(ScrollableULSItem.this);
 					//mAdapter.setPermanentDelete(false);
 				}
 			});

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/services/DatabaseService.java
Patch:
@@ -55,7 +55,7 @@ public class DatabaseService {
 	private Map<StaggeredItemStatus, StaggeredHeaderItem> headers;
 
 
-	DatabaseService() {
+	private DatabaseService() {
 	}
 
 	public static DatabaseService getInstance() {
@@ -81,6 +81,8 @@ public DatabaseType getDatabaseType() {
 	 * List of CardView as entry list, showing the functionality of the library.
 	 * It also shows how adapter animation can be configured.
 	 */
+	//TODO: Review the description of all examples
+	//TODO: Add ScrollableUseCaseItem header for each database
 	public void createOverallDatabase(Resources resources) {
 		databaseType = DatabaseType.OVERALL;
 		mItems.clear();

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/AnimatorAdapter.java
Patch:
@@ -52,6 +52,7 @@
  * @see SelectableAdapter
  * @since 10/01/2016 Created
  * <br/>30/01/2016 Class now extends {@link SelectableAdapter}
+ * <br/>13/09/2016 {@link #animateView(RecyclerView.ViewHolder, int)} is now automatically called
  */
 @SuppressWarnings({"unused", "WeakerAccess"})
 public abstract class AnimatorAdapter extends SelectableAdapter {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentDataBindingHeadersSections.java
Patch:
@@ -29,8 +29,8 @@
 import eu.davidea.samples.flexibleadapter.R;
 import eu.davidea.samples.flexibleadapter.databinding.FragmentDatabindingRecyclerViewBinding;
 import eu.davidea.samples.flexibleadapter.dialogs.OnParameterSelectedListener;
-import eu.davidea.samples.flexibleadapter.models.ExpandableHeaderItem;
-import eu.davidea.samples.flexibleadapter.models.HeaderItem;
+import eu.davidea.samples.flexibleadapter.items.ExpandableHeaderItem;
+import eu.davidea.samples.flexibleadapter.items.HeaderItem;
 import eu.davidea.samples.flexibleadapter.services.DatabaseConfiguration;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
 import eu.davidea.utils.Utils;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IFlexible.java
Patch:
@@ -92,6 +92,7 @@ public interface IFlexible<VH extends RecyclerView.ViewHolder> {
 	/*-------------------*/
 	/* TOUCHABLE METHODS */
 	/*-------------------*/
+	//TODO: All these methods could be deprecated in favour of the same methods in FlexibleViewHolder
 
 	boolean isDraggable();
 

File: flexible-adapter/src/main/java/eu/davidea/viewholders/AnimatedViewHolder.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Interface for {@code itemView} addition/removal animation.
  * <p>Used by {@link FlexibleItemAnimator} when notify events occur. If any of these methods
- * are implemented, the ItemAnimator extending FlexibleItemAnimator is skipped in favour this
+ * are implemented, the ItemAnimator extending FlexibleItemAnimator is skipped in favour of this
  * ViewHolder implementation.</p>
  *
  * @author Davide Steduto
@@ -38,7 +38,7 @@ public interface AnimatedViewHolder {
 	 * {@link FlexibleItemAnimator#preAnimateAddImpl(RecyclerView.ViewHolder)} which will be ignored.
 	 * <p>Default value is {@code false}.</p>
 	 *
-	 * @return {@code true} to confirm the execution of {@link #animateAddImpl(ViewPropertyAnimatorListener, int)},
+	 * @return {@code true} to confirm the execution of {@link #animateAddImpl(ViewPropertyAnimatorListener, long, int)},
 	 * of this class, {@code false} to use generic animation for all types of View.
 	 * @since 5.0.0-b8
 	 */

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -304,7 +304,6 @@ public boolean onNavigationItemSelected(MenuItem item) {
 			mFragment = FragmentExpandableSections.newInstance(3);
 		} else if (id == R.id.nav_staggered) {
 			mFragment = FragmentStaggeredLayout.newInstance(2);
-			fabBehavior.setEnabled(true);
 		} else if (id == R.id.nav_about) {
 			MessageDialogFragment.newInstance(
 					R.drawable.ic_info_grey600_24dp,
@@ -392,7 +391,7 @@ private void showFab() {
 				mFragment instanceof FragmentAsyncFilter) {
 			ViewCompat.animate(mFab)
 					.scaleX(1f).scaleY(1f)
-					.alpha(1f).setDuration(100)
+					.alpha(1f).setDuration(200)
 					.setStartDelay(300L)
 					.start();
 		}

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/AbstractFragment.java
Patch:
@@ -15,6 +15,7 @@
 
 import eu.davidea.flexibleadapter.common.SmoothScrollGridLayoutManager;
 import eu.davidea.flexibleadapter.common.SmoothScrollLinearLayoutManager;
+import eu.davidea.flexibleadapter.common.SmoothScrollStaggeredLayoutManager;
 import eu.davidea.samples.flexibleadapter.R;
 
 /**
@@ -100,7 +101,7 @@ protected GridLayoutManager createNewGridLayoutManager() {
 	}
 
 	protected StaggeredGridLayoutManager createNewStaggeredGridLayoutManager() {
-		return new StaggeredGridLayoutManager(mColumnCount, StaggeredGridLayoutManager.VERTICAL);
+		return new SmoothScrollStaggeredLayoutManager(getActivity(), mColumnCount);
 	}
 
 	public void performFabAction() {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/SmoothScrollGridLayoutManager.java
Patch:
@@ -21,6 +21,7 @@
 
 /**
  * Optimized implementation of GridLayoutManager to SmoothScroll to a Top position.
+ *
  * @since 5.0.0-b6
  */
 public class SmoothScrollGridLayoutManager extends GridLayoutManager {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/SmoothScrollLinearLayoutManager.java
Patch:
@@ -21,6 +21,7 @@
 
 /**
  * Optimized implementation of LinearLayoutManager to SmoothScroll to a Top position.
+ *
  * @since 5.0.0-b1
  */
 public class SmoothScrollLinearLayoutManager extends LinearLayoutManager {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/SmoothScrollStaggeredLayoutManager.java
Patch:
@@ -21,6 +21,7 @@
 
 /**
  * Optimized implementation of StaggeredGridLayoutManager to SmoothScroll to a Top position.
+ *
  * @since 5.0.0-b8
  */
 public class SmoothScrollStaggeredLayoutManager extends StaggeredGridLayoutManager {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/utils/Utils.java
Patch:
@@ -62,7 +62,7 @@ public static boolean hasJellyBean() {
 	}
 
 	/**
-	 * Sets a spannable text with the accent color (if available) into the passed TextView.
+	 * Sets a spannable text with the accent color (if available) into the provided TextView.
 	 * <p>Internally calls {@link #fetchAccentColor(Context, int)}.</p>
 	 *
 	 * @param context      context
@@ -72,6 +72,7 @@ public static boolean hasJellyBean() {
 	 * @param defColor     the default color in case accentColor is not found
 	 * @see #fetchAccentColor(Context, int)
 	 */
+	//TODO: Deprecate defColor?
 	public static void highlightText(@NonNull Context context, @NonNull TextView textView,
 									 String originalText, String constraint, @ColorInt int defColor) {
 		if (originalText == null) originalText = "";
@@ -104,6 +105,7 @@ public static void resetAccentColor() {
 	 * @param context  context
 	 * @param defColor value to return if the accentColor cannot be found
 	 */
+	//TODO: Deprecate defColor and use R.attr.colorAccent?
 	@TargetApi(VERSION_CODES.LOLLIPOP)
 	public static int fetchAccentColor(Context context, @ColorInt int defColor) {
 		if (colorAccent == INVALID_COLOR) {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -16,7 +16,6 @@
 
 import eu.davidea.fastscroller.FastScroller;
 import eu.davidea.flexibleadapter.SelectableAdapter;
-import eu.davidea.flexibleadapter.common.DividerItemDecoration;
 import eu.davidea.flexibleadapter.common.SmoothScrollGridLayoutManager;
 import eu.davidea.flexibleadapter.items.IHeader;
 import eu.davidea.flexibleadapter.items.ISectionable;
@@ -103,7 +102,7 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 			}
 		});
 		//mRecyclerView.setItemAnimator(new SlideInRightAnimator());
-		mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), -1, 32));//-1 for no divider! 32dp for gap between sections
+		//mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), -1, 32));//-1 for no divider! 32dp for gap between sections
 
 		//Add FastScroll to the RecyclerView, after the Adapter has been attached the RecyclerView!!!
 		mAdapter.setFastScroller((FastScroller) getActivity().findViewById(R.id.fast_scroller),

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/HeaderItem.java
Patch:
@@ -88,7 +88,7 @@ public HeaderViewHolder createViewHolder(FlexibleAdapter adapter, LayoutInflater
 	@SuppressWarnings("unchecked")
 	public void bindViewHolder(FlexibleAdapter adapter, HeaderViewHolder holder, int position, List payloads) {
 		if (payloads.size() > 0) {
-			Log.i(this.getClass().getSimpleName(), "HeaderItem Payload " + payloads);
+			Log.i(this.getClass().getSimpleName(), "HeaderItem " + id + " Payload " + payloads);
 		} else {
 			holder.mTitle.setText(getTitle());
 		}

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/SimpleItem.java
Patch:
@@ -77,9 +77,9 @@ public void bindViewHolder(final FlexibleAdapter adapter, ParentViewHolder holde
 		if (adapter.isExpandable(this)) {
 			setSubtitle(adapter.getCurrentChildren((IExpandable) this).size() + " subItems");
 		} else {
-			setSubtitle("Subtitle " + getId());
+			setSubtitle(getId());
 		}
-		setSubtitle(getSubtitle() + (getHeader() != null ? " - Header: " + getHeader().getId() : ""));
+		setSubtitle(getSubtitle() + (getHeader() != null ? " - " + getHeader().getId() : ""));
 
 		Context context = holder.itemView.getContext();
 		int defColorAccent = context.getResources().getColor(R.color.colorAccent_light);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentEndlessScrolling.java
Patch:
@@ -26,6 +26,7 @@
 import eu.davidea.samples.flexibleadapter.MainActivity;
 import eu.davidea.samples.flexibleadapter.R;
 import eu.davidea.samples.flexibleadapter.models.ProgressItem;
+import eu.davidea.samples.flexibleadapter.services.DatabaseConfiguration;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
 import eu.davidea.utils.Utils;
 
@@ -80,7 +81,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 				//.setAnimateToLimit(Integer.MAX_VALUE)//Use the default value
 				.setNotifyMoveOfFilteredItems(true)//When true, filtering on big list is very slow, not in this case!
 				.setNotifyChangeOfUnfilteredItems(true)//We have highlighted text while filtering, so let's enable this feature to be consistent with the active filter
-				.setAnimationOnScrolling(true)
+				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling)
 				.setAnimationOnReverseScrolling(true);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);
 		mRecyclerView.setLayoutManager(createNewLinearLayoutManager());
@@ -177,7 +178,7 @@ public void run() {
 						"Simulated: No more items to load :-(");
 				Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
 			}
-		}, 3000);
+		}, 2500);
 	}
 
 	@Override

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -18,6 +18,7 @@
 import eu.davidea.samples.flexibleadapter.ExampleAdapter;
 import eu.davidea.samples.flexibleadapter.MainActivity;
 import eu.davidea.samples.flexibleadapter.R;
+import eu.davidea.samples.flexibleadapter.services.DatabaseConfiguration;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
 import eu.davidea.utils.Utils;
 
@@ -72,7 +73,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 				.setNotifyMoveOfFilteredItems(false)//When true, filtering on big list is very slow!
 				.setNotifyChangeOfUnfilteredItems(true)//We have highlighted text while filtering, so let's enable this feature to be consistent with the active filter
 				.setRemoveOrphanHeaders(false)
-				.setAnimationOnScrolling(true)
+				.setAnimationOnScrolling(DatabaseConfiguration.animateOnScrolling)
 				.setAnimationOnReverseScrolling(true);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);
 		mRecyclerView.setLayoutManager(createNewLinearLayoutManager());

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/HeaderItem.java
Patch:
@@ -96,6 +96,8 @@ public void bindViewHolder(FlexibleAdapter adapter, HeaderViewHolder holder, int
 		String subTitle = (sectionableList.isEmpty() ? "Empty section" :
 				sectionableList.size() + " section items");
 		holder.mSubtitle.setText(subTitle);
+
+		adapter.animateView(holder.itemView, position, adapter.isSelected(position));
 	}
 
 	@Override

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/services/DatabaseConfiguration.java
Patch:
@@ -23,6 +23,7 @@ public class DatabaseConfiguration {
 	public static int animateToLimit = maxSize;//start with maxSize
 	public static boolean notifyChange = true;
 	public static boolean notifyMove = false;
+	public static boolean animateOnScrolling = true;
 	public static boolean animateOnUpdate = true;
 
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentOverall.java
Patch:
@@ -74,7 +74,9 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mRecyclerView.postDelayed(new Runnable() {
 			@Override
 			public void run() {
-				Snackbar.make(getView(), "Long press drag is enabled", Snackbar.LENGTH_SHORT).show();
+				if (getView() != null) {//Fix NPE when closing app before the execution of Runnable
+					Snackbar.make(getView(), "Long press drag is enabled", Snackbar.LENGTH_SHORT).show();
+				}
 			}
 		}, 1500L);
 

File: flexible-adapter-app/src/test/java/eu/davidea/flexibleadapter/HeadersSectionsTest.java
Patch:
@@ -18,7 +18,7 @@
  * @since 23/06/2016
  */
 @RunWith(RobolectricGradleTestRunner.class)
-@Config(constants = BuildConfig.class)
+@Config(constants = BuildConfig.class, sdk = 23)
 public class HeadersSectionsTest {
 
 	FlexibleAdapter<AbstractFlexibleItem> mAdapter;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -16,6 +16,7 @@
 
 import eu.davidea.fastscroller.FastScroller;
 import eu.davidea.flexibleadapter.SelectableAdapter;
+import eu.davidea.flexibleadapter.common.DividerItemDecoration;
 import eu.davidea.flexibleadapter.common.SmoothScrollGridLayoutManager;
 import eu.davidea.flexibleadapter.items.IHeader;
 import eu.davidea.flexibleadapter.items.ISectionable;
@@ -102,7 +103,7 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 			}
 		});
 		//mRecyclerView.setItemAnimator(new SlideInRightAnimator());
-		//mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), R.drawable.divider));
+		mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), -1, 32));//-1 for no divider! 32dp for gap between sections
 
 		//Add FastScroll to the RecyclerView, after the Adapter has been attached the RecyclerView!!!
 		mAdapter.setFastScroller((FastScroller) getActivity().findViewById(R.id.fast_scroller),

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/DividerItemDecoration.java
Patch:
@@ -44,12 +44,13 @@ public DividerItemDecoration(Context context) {
 	 *
 	 * @since 5.0.0-b4
 	 */
-	public DividerItemDecoration(Context context, int resId) {
+	public DividerItemDecoration(@NonNull Context context, @DrawableRes int resId) {
 		this(context, resId, 0);
 	}
 
 	/**
 	 * Custom divider with gap between sections (in dpi).
+	 * Passing a negative divider will only use the gap value for sections.
 	 *
 	 * @since 5.0.0-b6
 	 */
@@ -128,7 +129,7 @@ public void setSectionGapWidth(@IntRange(from = 0) int gap) {
 	@SuppressWarnings({"ConstantConditions", "unchecked", "SuspiciousNameCombination"})
 	@Override
 	public void getItemOffsets(Rect outRect, View view, RecyclerView recyclerView, RecyclerView.State state) {
-		int offset = mDivider.getIntrinsicHeight();
+		int offset = (mDivider != null ? mDivider.getIntrinsicHeight() : 0);
 		if (mSectionOffset > 0 && recyclerView.getAdapter() instanceof FlexibleAdapter) {
 			FlexibleAdapter flexibleAdapter = (FlexibleAdapter) recyclerView.getAdapter();
 			int position = recyclerView.getChildAdapterPosition(view);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -155,7 +155,7 @@ public void onPrepareOptionsMenu(Menu menu) {
 		if (headersSticky != null) {
 			if (mAdapter.areHeadersShown()) {
 				headersSticky.setVisible(true);
-				headersSticky.setTitle(mAdapter.areHeadersSticky() ? R.string.scroll_headers : R.string.sticky_headers);
+				headersSticky.setChecked(mAdapter.areHeadersSticky());
 			} else {
 				headersSticky.setVisible(false);
 			}

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -231,10 +231,10 @@ public void onPrepareOptionsMenu(Menu menu) {
 		MenuItem headersSticky = menu.findItem(R.id.action_sticky_headers);
 		if (headersSticky != null) {
 			if (mAdapter.areHeadersShown()) {
-				headersSticky.setVisible(true);
-				headersSticky.setTitle(mAdapter.areHeadersSticky() ? R.string.scroll_headers : R.string.sticky_headers);
+				headersSticky.setEnabled(true);
+				headersSticky.setChecked(mAdapter.areHeadersSticky());
 			} else {
-				headersSticky.setVisible(false);
+				headersSticky.setEnabled(false);
 			}
 		}
 	}

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentAsyncFilter.java
Patch:
@@ -118,7 +118,7 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 	@Override
 	public void performFabAction() {
 		if (mSize < 0) {
-			DatabaseService.getInstance().createConfigurationDatabase();
+			DatabaseService.getInstance().createConfigurationDatabase(getResources());
 			mAdapter = new FlexibleAdapter<>(DatabaseService.getInstance().getDatabaseList(), getActivity());
 			FloatingActionButton fab = (FloatingActionButton) getActivity().findViewById(R.id.fab);
 			fab.setImageResource(R.drawable.fab_add);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -66,6 +66,7 @@
 import eu.davidea.samples.flexibleadapter.models.StaggeredItem;
 import eu.davidea.samples.flexibleadapter.models.SubItem;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
+import eu.davidea.samples.flexibleadapter.services.DatabaseType;
 import eu.davidea.utils.ScrollAwareFABBehavior;
 import eu.davidea.utils.Utils;
 
@@ -873,7 +874,7 @@ public void onBackPressed() {
 			return;
 		}
 		//Return to Overall View
-		if (DatabaseService.getInstance().getDatabaseType() != 0) {
+		if (DatabaseService.getInstance().getDatabaseType() != DatabaseType.OVERALL) {
 			MenuItem menuItem = mNavigationView.getMenu().findItem(R.id.nav_overall);
 			onNavigationItemSelected(menuItem);
 			return;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/ExpandableLevel0Item.java
Patch:
@@ -17,6 +17,7 @@
 import eu.davidea.samples.flexibleadapter.R;
 import eu.davidea.samples.flexibleadapter.models.ExpandableLevel0Item.L0ViewHolder;
 import eu.davidea.samples.flexibleadapter.services.DatabaseService;
+import eu.davidea.samples.flexibleadapter.services.DatabaseType;
 import eu.davidea.viewholders.ExpandableViewHolder;
 
 /**
@@ -132,7 +133,8 @@ public L0ViewHolder(View view, FlexibleAdapter adapter) {
 			mTitle = (TextView) view.findViewById(R.id.title);
 			mSubtitle = (TextView) view.findViewById(R.id.subtitle);
 			this.mHandleView = (ImageView) view.findViewById(R.id.row_handle);
-			if (adapter.isHandleDragEnabled() && DatabaseService.getInstance().getDatabaseType() == 2) {
+			if (adapter.isHandleDragEnabled() &&
+					DatabaseService.getInstance().getDatabaseType() == DatabaseType.EXPANDABLE_SECTIONS) {
 				this.mHandleView.setVisibility(View.VISIBLE);
 				setDragHandleView(mHandleView);
 			} else {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -3040,8 +3040,8 @@ public void run() {
 
 		//Call listener to update EmptyView
 		if (mUpdateListener != null &&
-				(initialCount == 0 && getItemCount() > 0) ||
-				(initialCount > 0 && getItemCount() == 0))
+				((initialCount == 0 && getItemCount() > 0) ||
+				(initialCount > 0 && getItemCount() == 0)) )
 			mUpdateListener.onUpdateEmptyView(getItemCount());
 	}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/AnimatorAdapter.java
Patch:
@@ -84,7 +84,7 @@ private enum AnimatorEnum {
 	 */
 	private EnumSet<AnimatorEnum> animatorsUsed = EnumSet.noneOf(AnimatorEnum.class);
 
-	private boolean isReverseEnabled = false, shouldAnimate = true,
+	private boolean isReverseEnabled = false, shouldAnimate = false,
 			onlyEntryAnimation = false, isFastScroll = false, animateFromObserver = false;
 
 	private long mInitialDelay = 0L,

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -53,7 +53,6 @@ public void updateDataSet(List<AbstractFlexibleItem> items, boolean animate) {
 
 		//Add example view
 		showLayoutInfo(true);
-		addUserLearnedSelection(true);
 	}
 
 	/*

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/AnimatorAdapter.java
Patch:
@@ -52,6 +52,7 @@
  * @since 10/01/2016 Created
  * <br/>30/01/2016 Class now extends {@link SelectableAdapter}
  */
+@SuppressWarnings("unused")
 public abstract class AnimatorAdapter extends SelectableAdapter {
 
 	protected static final String TAG = AnimatorAdapter.class.getSimpleName();
@@ -283,7 +284,7 @@ public void onFastScrollerStateChange(boolean scrolling) {
 	 * @since 5.0.0-b1
 	 */
 	public List<Animator> getAnimators(View itemView, int position, boolean isSelected) {
-		return new ArrayList<Animator>();
+		return new ArrayList<>();
 	}
 
 	/**

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/services/DatabaseService.java
Patch:
@@ -152,9 +152,9 @@ public void createExpandableMultiLevelDatabase(int size) {
 	public void createHeadersSectionsDatabase(int size) {
 		databaseType = 4;
 		HeaderItem header = null;
-		mItems.clear();
+		mItems.clear(); int lastHeaderId = 0;
 		for (int i = 0; i < size; i++) {
-			header = i % (size / HEADERS) == 0 ? newHeader(i * HEADERS / size + 1) : header;
+			header = i % Math.round(size / HEADERS) == 0 ? newHeader(++lastHeaderId) : header;
 			mItems.add(newSimpleItem(i + 1, header));
 		}
 	}

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -104,7 +104,7 @@ public void addUserLearnedSelection(boolean scrollToPosition) {
 	}
 
 	@Override
-	public synchronized void filterItems(@NonNull List<AbstractFlexibleItem> unfilteredItems) {
+	public void filterItems(@NonNull List<AbstractFlexibleItem> unfilteredItems) {
 		super.filterItems(unfilteredItems);
 		addUserLearnedSelection(false);
 		showLayoutInfo(false);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -410,7 +410,7 @@ public boolean onQueryTextChange(String newText) {
 			mAdapter.setSearchText(newText);
 			//Fill and Filter mItems with your custom list and automatically animate the changes
 			//Watch out! The original list must be a copy
-			mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(), 0L);
+			mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(), 200L);
 		}
 		//Disable SwipeRefresh if search is active!!
 		mSwipeRefreshLayout.setEnabled(!mAdapter.hasSearchText());

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -54,7 +54,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
 		FlipView.resetLayoutAnimationDelay(true, 1000L);
 
 		//Create New Database and Initialize RecyclerView
-		DatabaseService.getInstance().createExpandableSectionsDatabase(100);
+		DatabaseService.getInstance().createExpandableSectionsDatabase(1000);
 		initializeRecyclerView(savedInstanceState);
 
 		//Settings for FlipView

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/ActionModeHelper.java
Patch:
@@ -65,7 +65,7 @@ public ActionModeHelper(@NonNull FlexibleAdapter adapter, @MenuRes int cabMenu)
 	 *
 	 * @param adapter the FlexibleAdapter instance
 	 * @param cabMenu the menu resourceId
-	 * @param callback the custom {@link ActionMode.Callback}
+	 * @param callback the custom {@link android.support.v7.view.ActionMode.Callback}
 	 * @see #ActionModeHelper(FlexibleAdapter, int)
 	 * @since 5.0.0-b6
 	 */

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractFlexibleItem.java
Patch:
@@ -27,7 +27,7 @@
  * Generic implementation of {@link IFlexible} interface with most useful methods to manage
  * selection and view holder methods.
  *
- * @param <VH> {@link RecyclerView.ViewHolder}
+ * @param <VH> {@link android.support.v7.widget.RecyclerView.ViewHolder}
  * @author Davide Steduto
  * @since 20/01/2016 Created
  */

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractSectionableItem.java
Patch:
@@ -21,7 +21,7 @@
  * Generic implementation of {@link ISectionable} interface for items that hold a header item.
   * <p>This abstract class extends {@link AbstractFlexibleItem}.</p>
  *
- * @param <VH> {@link RecyclerView.ViewHolder}
+ * @param <VH> {@link android.support.v7.widget.RecyclerView.ViewHolder}
  * @param <H>  The header item of type {@link IHeader}
  * @author Davide Steduto
  * @since 20/01/2016 Created

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/LayoutItem.java
Patch:
@@ -66,7 +66,7 @@ public void bindViewHolder(FlexibleAdapter adapter, ExampleViewHolder holder, in
 	/**
 	 * Used for UserLearnsSelection.
 	 */
-	static class ExampleViewHolder extends FlexibleViewHolder {
+	public static class ExampleViewHolder extends FlexibleViewHolder {
 
 		public TextView mTitle;
 		public TextView mSubtitle;

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -405,12 +405,12 @@ private void showFab() {
 
 	@Override
 	public boolean onQueryTextChange(String newText) {
-		if (!mAdapter.hasSearchText() || mAdapter.hasNewSearchText(newText)) {
+		if (mAdapter.hasNewSearchText(newText)) {
 			Log.d(TAG, "onQueryTextChange newText: " + newText);
 			mAdapter.setSearchText(newText);
 			//Fill and Filter mItems with your custom list and automatically animate the changes
 			//Watch out! The original list must be a copy
-			mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(), 450L);
+			mAdapter.filterItems(DatabaseService.getInstance().getDatabaseList(), 0L);
 		}
 		//Disable SwipeRefresh if search is active!!
 		mSwipeRefreshLayout.setEnabled(!mAdapter.hasSearchText());

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -111,6 +111,9 @@ private void initStickyHeadersHolder() {
 		//Initialize Holder Layout and show sticky header if exists already
 		mStickyHolderLayout = mAdapter.getStickySectionHeadersHolder();
 		if (mStickyHolderLayout != null) {
+			if (mStickyHolderLayout.getLayoutParams() == null) {
+				throw new IllegalStateException("The ViewGroup provided, doesn't have LayoutParams correctly set, please initialize the ViewGroup accordingly");
+			}
 			mStickyHolderLayout.setClipToPadding(false);
 			mStickyHolderLayout.setAlpha(0);
 			updateOrClearHeader(false);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentOverall.java
Patch:
@@ -66,7 +66,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mAdapter.setAnimationDelay(150L);
 		mRecyclerView = (RecyclerView) getView().findViewById(R.id.recycler_view);
 		mRecyclerView.setItemViewCacheSize(0);//Setting ViewCache to 0 (default=2) will animate items better while scrolling down+up with LinearLayout
-		mRecyclerView.setLayoutManager(createNewGridLayoutManager());
+		mRecyclerView.setLayoutManager(createNewStaggeredGridLayoutManager());
 		mRecyclerView.setAdapter(mAdapter);
 		mRecyclerView.setHasFixedSize(true);//Size of RV will not change
 		//mRecyclerView.setItemAnimator(new SlideInRightAnimator());

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/StaggeredItem.java
Patch:
@@ -118,10 +118,10 @@ public ViewHolder createViewHolder(FlexibleAdapter adapter, LayoutInflater infla
 	public void bindViewHolder(final FlexibleAdapter adapter, final ViewHolder holder, int position, List payloads) {
 		Context context = holder.itemTextView.getContext();
 
-		//Table Id
+		//Item Id
 		holder.itemTextView.setText(toString());
 
-		//Table Status
+		//Item Status
 		holder.statusTextView.setText(status.getResId());
 		DrawableUtils.setBackground(holder.itemView,
 				DrawableUtils.getSelectableBackgroundCompat(

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -3064,7 +3064,7 @@ public void moveItem(int fromPosition, int toPosition, @Nullable Object payload)
 	}
 
 	/**
-	 * Swaps the elements of list list at indices fromPosition and toPosition and notify the change.
+	 * Swaps the elements of list at indices fromPosition and toPosition and notify the change.
 	 * <p>Selection of swiped elements is automatically updated.</p>
 	 *
 	 * @param fromPosition previous position of the item.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IFlexible.java
Patch:
@@ -114,7 +114,6 @@ public interface IFlexible<VH extends RecyclerView.ViewHolder> {
 	 * on GitHub.
 	 *
 	 * @return Layout identifier
-	 * @throws IllegalStateException if called but not implemented
 	 */
 	@LayoutRes
 	int getLayoutRes();
@@ -129,8 +128,7 @@ public interface IFlexible<VH extends RecyclerView.ViewHolder> {
 	 * @param inflater the {@link LayoutInflater} for the itemView
 	 * @param parent   the ViewGroup into which the new View will be added after it is bound
 	 *                 to an adapter position
-	 * @return a new ViewHolder that holds a View of the given view typeù
-	 * @throws IllegalStateException if called but not implemented
+	 * @return a new ViewHolder that holds a View of the given view type
 	 */
 	VH createViewHolder(FlexibleAdapter adapter, LayoutInflater inflater, ViewGroup parent);
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/AbstractModelItem.java
Patch:
@@ -1,18 +1,17 @@
 package eu.davidea.samples.flexibleadapter.models;
 
-import android.support.v7.widget.RecyclerView;
-
 import java.io.Serializable;
 
 import eu.davidea.flexibleadapter.items.AbstractFlexibleItem;
+import eu.davidea.viewholders.FlexibleViewHolder;
 
 /**
  * This class will benefit of the already implemented methods (getter and setters) in
  * {@link eu.davidea.flexibleadapter.items.AbstractFlexibleItem}.
  *
  * It is used as Base item for all example models.
  */
-public abstract class AbstractModelItem<VH extends RecyclerView.ViewHolder>
+public abstract class AbstractModelItem<VH extends FlexibleViewHolder>
 		extends AbstractFlexibleItem<VH>
 		implements Serializable {
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IHeader.java
Patch:
@@ -15,7 +15,7 @@
  */
 package eu.davidea.flexibleadapter.items;
 
-import android.support.v7.widget.RecyclerView;
+import eu.davidea.viewholders.FlexibleViewHolder;
 
 /**
  * Wrapper empty interface to identify if the current item is a header.
@@ -27,7 +27,8 @@
  * @see IHolder
  * @see ISectionable
  * @since 15/02/2016 Created
+ * <br/>18/06/2016 Changed signature with FlexibleViewHolder
  */
-public interface IHeader<VH extends RecyclerView.ViewHolder> extends IFlexible<VH> {
+public interface IHeader<VH extends FlexibleViewHolder> extends IFlexible<VH> {
 
 }
\ No newline at end of file

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -674,7 +674,7 @@ public List<IHeader> getHeaderItems() {
 		return headers;
 	}
 
-	public boolean isHeader(@NonNull T item) {
+	public boolean isHeader(T item) {
 		return item != null && item instanceof IHeader;
 	}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -109,9 +109,9 @@ public void onAnimationRepeat(Animator animation) {
 		}
 	}
 
-	public int getCurrentStickyHeaderPosition() {
-		return mHeaderPosition;
-	}
+//	public int getCurrentStickyHeaderPosition() {
+//		return mHeaderPosition;
+//	}
 
 	private void initStickyHeadersHolder() {
 		//Initialize Holder Layout and show sticky header if exists already

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/StickyHeaderHelper.java
Patch:
@@ -26,7 +26,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewParent;
-import android.widget.FrameLayout;
 
 import eu.davidea.flexibleadapter.FlexibleAdapter;
 import eu.davidea.flexibleadapter.FlexibleAdapter.OnStickyHeaderChangeListener;
@@ -220,7 +219,7 @@ private void swapHeader(FlexibleViewHolder newHeader) {
 
 	private void ensureHeaderParent() {
 		final View view = mStickyHeaderViewHolder.getContentView();
-		FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mStickyHolderLayout.getLayoutParams();
+		ViewGroup.LayoutParams params = mStickyHolderLayout.getLayoutParams();
 		params.width = view.getMeasuredWidth();
 		params.height = view.getMeasuredHeight();
 		removeViewFromParent(view);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -29,6 +29,8 @@ public class ExampleAdapter extends FlexibleAdapter<AbstractFlexibleItem> {
 	public static final int CHILD_VIEW_TYPE = 0;
 	public static final int EXAMPLE_VIEW_TYPE = 1;
 
+	private AbstractFlexibleItem mUseCaseItem;
+
 	public ExampleAdapter(Activity activity) {
 		super(DatabaseService.getInstance().getDatabaseList(), activity);
 
@@ -72,7 +74,7 @@ public void showLayoutInfo(boolean scrollToPosition) {
 			}
 			item.setSubtitle(mRecyclerView.getContext().getString(R.string.columns, getSpanCount(mRecyclerView.getLayoutManager())));
 			addItemWithDelay((getItem(0) instanceof ULSItem ? 1 : 0), item, 100L, (!(getItem(0) instanceof ULSItem) && scrollToPosition));
-			removeItemWithDelay(item, 2000L, true);
+			removeItemWithDelay(item, 2000L, true, true);
 		}
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -329,9 +329,10 @@ public boolean onPrepareOptionsMenu(Menu menu) {
 			} else {
 				//Necessary after the restoreInstanceState
 				menu.findItem(R.id.action_search).expandActionView();//must be called first
-				//mSearchView.setIconified(false);//this is not necessary
+				//This restores the text, must be after the expandActionView()
+				mSearchView.setQuery(mAdapter.getSearchText(), false);//submit = false!!!
 				mSearchView.clearFocus();//Optionally the keyboard can be closed
-				mSearchView.setQuery(mAdapter.getSearchText(), false);//This restores the text, must be after the expandActionView
+				//mSearchView.setIconified(false);//This is not necessary
 			}
 		}
 		return super.onPrepareOptionsMenu(menu);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/OverallAdapter.java
Patch:
@@ -48,8 +48,8 @@ public void showLayoutInfo(boolean scrollToPosition) {
 				item.setTitle(mRecyclerView.getContext().getString(R.string.linear_layout));
 			}
 			item.setSubtitle(mRecyclerView.getContext().getString(R.string.columns, getSpanCount(mRecyclerView.getLayoutManager())));
-			addItemWithDelay(0, item, 100L, scrollToPosition);
-			removeItemWithDelay(item, 2000L, true);
+			addItemWithDelay(0, item, 300L, scrollToPosition);
+			removeItemWithDelay(item, 2000L, true, true);
 		}
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/AbstractFragment.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.os.Bundle;
+import android.support.annotation.CallSuper;
 import android.support.v4.app.Fragment;
 import android.support.v7.widget.GridLayoutManager;
 import android.support.v7.widget.LinearLayoutManager;
@@ -102,6 +103,7 @@ public void addItem() {
 		//default implementation does nothing
 	}
 
+	@CallSuper
 	public void showNewLayoutInfo(final MenuItem item) {
 		item.setEnabled(false);
 		mRecyclerView.postDelayed(new Runnable() {

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -100,7 +100,6 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 		mListener.onFragmentChange(swipeRefreshLayout, mRecyclerView, SelectableAdapter.MODE_IDLE);
 
 		//Add sample HeaderView items on the top (not belongs to the library)
-		mAdapter.addUserLearnedSelection(savedInstanceState == null);
 		mAdapter.showLayoutInfo(savedInstanceState == null);
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/fragments/FragmentSelectionModes.java
Patch:
@@ -130,6 +130,7 @@ public void run() {
 		mListener.onFragmentChange(swipeRefreshLayout, mRecyclerView, SelectableAdapter.MODE_SINGLE);
 
 		//Add sample HeaderView items on the top (not belongs to the library)
+		mAdapter.addUserLearnedSelection(savedInstanceState == null);
 		mAdapter.showLayoutInfo(savedInstanceState == null);
 	}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/utils/Utils.java
Patch:
@@ -60,7 +60,7 @@ public static boolean hasLollipop() {
 	public static void highlightText(Context context, TextView textView,
 									 String originalText, String constraint, int defColor) {
 		Spannable spanText = Spannable.Factory.getInstance().newSpannable(originalText);
-		int i = originalText.toLowerCase(Locale.getDefault()).indexOf(constraint);
+		int i = originalText.toLowerCase(Locale.getDefault()).indexOf(constraint.toLowerCase(Locale.getDefault()));
 		if (i != -1) {
 			spanText.setSpan(new ForegroundColorSpan(fetchAccentColor(context, defColor)), i,
 					i + constraint.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/ExpandableLevel1Item.java
Patch:
@@ -31,6 +31,8 @@ public class ExpandableLevel1Item
 
 	public ExpandableLevel1Item(String id) {
 		super(id);
+		setDraggable(true);
+		setSwipeable(true);
 	}
 
 	@Override

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -41,8 +41,8 @@ public ExampleAdapter(Activity activity) {
 	}
 
 	@Override
-	public void updateDataSet(List<AbstractFlexibleItem> items) {
-		super.updateDataSet(items);
+	public void updateDataSet(List<AbstractFlexibleItem> items, boolean animate) {
+		super.updateDataSet(items, animate);
 		//Overwrite the list and fully notify the change
 		//Watch out! The original list must a copy
 		//TODO: We may create calls like removeAll, addAll or refreshList in order to animate changes

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -201,7 +201,8 @@ private void initializeSwipeToRefresh() {
 		mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
 			@Override
 			public void onRefresh() {
-				mAdapter.updateDataSet(DatabaseService.getInstance().getDatabaseList());
+				//Passing true as parameter we always animate the changes between the old and the new data set
+				mAdapter.updateDataSet(DatabaseService.getInstance().getDatabaseList(), true);
 				mSwipeRefreshLayout.setEnabled(false);
 				mRefreshHandler.sendEmptyMessageDelayed(0, 1000L);
 				mActionModeHelper.destroyActionModeIfCan();

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -2762,7 +2762,8 @@ public void moveItem(int fromPosition, int toPosition, boolean notifyChange) {
 		if (expanded) collapse(toPosition);
 		//Move item!
 		mItems.remove(fromPosition);
-		mItems.add(toPosition, item);
+		if (toPosition < getItemCount()) mItems.add(toPosition, item);
+		else mItems.add(item);
 		notifyItemMoved(fromPosition, toPosition);
 		if (notifyChange) notifyItemChanged(toPosition, true);
 		//Eventually display the new Header

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/MainActivity.java
Patch:
@@ -491,7 +491,8 @@ public boolean onItemClick(int position) {
 			return false;
 		}
 
-		if (mActionModeHelper != null && position != RecyclerView.NO_POSITION) {
+		//TODO: Add method for ActionModeHelper to know if ActionMode is active or use MODE_MULTI?
+		if (mAdapter.getMode() == SelectableAdapter.MODE_MULTI && mActionModeHelper != null) {
 			return mActionModeHelper.onClick(position);
 		} else {
 			//Notify the active callbacks (ie. the activity, if the fragment is attached to one)

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1326,8 +1326,7 @@ private int expand(int position, boolean expandAll) {
 
 		int subItemsCount = 0;
 		if (!expandable.isExpanded() && hasSubItems(expandable)
-				&& (!parentSelected || expandable.getExpansionLevel() <= selectedLevel)
-				&& (mStickyHeaderHelper == null || !mStickyHeaderHelper.hasStickyHeaderTranslated(position))) {
+				&& (!parentSelected || expandable.getExpansionLevel() <= selectedLevel)) {
 
 			//Collapse others expandable if configured so
 			//Skipped when expanding all is requested

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/UndoHelper.java
Patch:
@@ -51,7 +51,7 @@ public class UndoHelper extends Snackbar.Callback {
 	public static final int ACTION_UPDATE = 1;
 
 	/**
-	 * @hide
+	 * Annotation interface for Undo actions.
 	 */
 	@IntDef({ACTION_REMOVE, ACTION_UPDATE})
 	@Retention(RetentionPolicy.SOURCE)

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/services/InstagramRandomData.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Random;
 
 /**
- * @author Davide Stexuto
+ * @author Davide Steduto
  * @since 29/04/2016
  */
 public class InstagramRandomData {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/EndlessRecyclerViewScrollListener.java
Patch:
@@ -12,7 +12,7 @@
  * http://stackoverflow.com/questions/26543131/how-to-implement-endless-list-with-recyclerview/26561717#26561717
  * https://github.com/dominicthomas/FlikrGridRecyclerView/blob/master/app/src/main/java/com/android/domji84/mcgridview/adapters/GridItemAdapter.java
  */
-public abstract class EndlessRecyclerViewScrollListener extends RecyclerView.OnScrollListener {
+abstract class EndlessRecyclerViewScrollListener extends RecyclerView.OnScrollListener {
 
 	// The minimum amount of items to have below your current scroll position
 	// before loading more.

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/HeaderItem.java
Patch:
@@ -31,6 +31,7 @@ public class HeaderItem extends AbstractHeaderItem<HeaderItem.HeaderViewHolder>
 	public HeaderItem(String id) {
 		super();
 		this.id = id;
+		setDraggable(true);
 	}
 
 	@Override

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/SimpleItem.java
Patch:
@@ -38,10 +38,12 @@ public class SimpleItem extends AbstractModelItem<SimpleItem.ParentViewHolder>
 
 	public SimpleItem(String id) {
 		super(id);
+		setDraggable(true);
+		setSwipeable(true);
 	}
 
 	public SimpleItem(String id, HeaderItem header) {
-		super(id);
+		this(id);
 		this.header = header;
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/samples/flexibleadapter/models/SubItem.java
Patch:
@@ -33,6 +33,7 @@ public class SubItem extends AbstractModelItem<SubItem.ChildViewHolder>
 
 	public SubItem(String id) {
 		super(id);
+		setDraggable(true);
 	}
 
 	@Override

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -3031,7 +3031,7 @@ public void onRestoreInstanceState(Bundle savedInstanceState) {
 			mOldSearchText = savedInstanceState.getString(EXTRA_SEARCH_OLD);
 			//Restore headers shown status
 			headersShown = savedInstanceState.getBoolean(EXTRA_HEADERS);
-			if (headersShown) showAllHeaders();
+			if (!headersShown) hideAllHeaders();
 		}
 	}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -737,7 +737,7 @@ private List<ISectionable> getSectionItems(@NonNull IHeader header, boolean unti
 		List<ISectionable> sectionItems = new ArrayList<ISectionable>();
 		int startPosition = getGlobalPositionOf(header);
 		T item = getItem(++startPosition);
-		while (hasSameHeader(item, header) || (untilNextHeader && !isHeader(item))) {
+		while (item != null && (hasSameHeader(item, header) || (untilNextHeader && !isHeader(item)))) {
 			sectionItems.add((ISectionable) item);
 			item = getItem(++startPosition);
 		}

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/fragments/FragmentHeadersSections.java
Patch:
@@ -87,6 +87,8 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 		mAdapter.setFastScroller((FastScroller) getActivity().findViewById(R.id.fast_scroller),
 				Utils.getColorAccent(getActivity()), (MainActivity) getActivity());
 		mAdapter.setLongPressDragEnabled(true);
+		mAdapter.setSwipeEnabled(true);
+		mAdapter.setUnlinkAllItemsOnRemoveHeaders(true);
 		mAdapter.setDisplayHeadersAtStartUp(true);//Show Headers at startUp!
 		mAdapter.enableStickyHeaders();
 		//Add sample item on the top (HeaderView) (not belongs to the library)

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/fragments/FragmentExpandableMultiLevel.java
Patch:
@@ -124,7 +124,7 @@ public int getSpanSize(int position) {
 	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
 		super.onCreateOptionsMenu(menu, inflater);
 		Log.v(TAG, "onCreateOptionsMenu called!");
-		inflater.inflate(R.menu.menu_sections, menu);
+		inflater.inflate(R.menu.menu_expandable, menu);
 		mListener.initSearchView(menu);
 		//TODO: Implement Filterable in the item interfaces
 	}

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/services/DatabaseService.java
Patch:
@@ -200,8 +200,8 @@ private ExpandableHeaderItem newExpandableSectionItem(int i) {
 	 */
 	private ExpandableLevel0Item newExpandableLevelItem(int i) {
 		//ExpandableLevel0Item is an expandable with Level=0
-		ExpandableLevel0Item expandableItem = new ExpandableLevel0Item("EH" + i);
-		expandableItem.setTitle("Expandable Header Two-Levels " + i);
+		ExpandableLevel0Item expandableItem = new ExpandableLevel0Item("EI" + i);
+		expandableItem.setTitle("Expandable Two-Levels " + i);
 		for (int j = 1; j <= SUB_ITEMS; j++) {
 			//ExpandableLevel1Item is an expandable as well with Level=1
 			ExpandableLevel1Item expSubItem = new ExpandableLevel1Item(expandableItem.getId() + "-EL" + j);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1692,10 +1692,10 @@ public void addSection(@NonNull IHeader header) {
 	public void addSection(@NonNull IHeader header, @Nullable IHeader refHeader) {
 		int position = 0;
 		if (refHeader != null) {
-			int headerPosition = getGlobalPositionOf(refHeader);
+			position = getGlobalPositionOf(refHeader) + 1;
 			List<ISectionable> refSectionItems = getSectionItems(refHeader);
 			if (!refSectionItems.isEmpty()) {
-				position = headerPosition + refSectionItems.size() + 1;
+				position += refSectionItems.size();
 			}
 		}
 		header.setHidden(false);

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/fragments/FragmentExpandableSections.java
Patch:
@@ -85,7 +85,7 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 		//mRecyclerView.setItemAnimator(new SlideInRightAnimator());
 		mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),
 				R.drawable.divider,
-				Utils.dpToPx(getActivity(), 24f)));
+				Utils.dpToPx(getActivity(), 0f)));//Increase to add gap between sections (Works only with LinearLayout!)
 
 		//Add FastScroll to the RecyclerView, after the Adapter has been attached the RecyclerView!!!
 		mAdapter.setFastScroller((FastScroller) getActivity().findViewById(R.id.fast_scroller),

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/services/DatabaseService.java
Patch:
@@ -28,7 +28,7 @@
 public class DatabaseService {
 
 	private static DatabaseService mInstance;
-	private static final int ITEMS = 90, SUB_ITEMS = 3, HEADERS = 30;
+	private static final int ITEMS = 90, SUB_ITEMS = 6, HEADERS = 30;
 	private static AtomicInteger atomicInteger = new AtomicInteger(0);
 
 	//TODO FOR YOU: Use userLearnedSelection from settings

File: flexible-adapter/src/main/java/eu/davidea/fastscroller/FastScroller.java
Patch:
@@ -130,6 +130,7 @@ private void notifyScrollStateChange(boolean scrolling) {
 	 * @param handleResId Drawable resource for the Handle
 	 */
 	public void setViewsToUse(@LayoutRes int layoutResId, @IdRes int bubbleResId, @IdRes int handleResId) {
+		if (bubble != null) return;//Already inflated
 		LayoutInflater inflater = LayoutInflater.from(getContext());
 		inflater.inflate(layoutResId, this, true);
 		bubble = (TextView) findViewById(bubbleResId);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAnimatorAdapter.java
Patch:
@@ -345,7 +345,7 @@ private long calculateAnimationDelay2(int position) {
 		if (mMaxChildViews < mRecyclerView.getChildCount())
 			mMaxChildViews = mRecyclerView.getChildCount();
 
-		if (numberOfItemsOnScreen < numberOfAnimatedItems || //Normal Forward scrolling after max itemOnScreen is reached
+		if (numberOfItemsOnScreen == 0 || numberOfItemsOnScreen < numberOfAnimatedItems || //Normal Forward scrolling after max itemOnScreen is reached
 				(firstVisiblePosition > 1 && firstVisiblePosition <= mMaxChildViews) || //Reverse scrolling
 				(position > mMaxChildViews && firstVisiblePosition == -1 && mRecyclerView.getChildCount() == 0)) { //Reverse scrolling and click on FastScroller
 			delay = mStepDelay;

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -440,7 +440,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
 				item.setIcon(R.drawable.ic_view_grid_white_24dp);
 				item.setTitle(R.string.grid_layout);
 			} else {
-				GridLayoutManager gridLayoutManager = new GridLayoutManager(this, 2);
+				GridLayoutManager gridLayoutManager = new GridLayoutManager(this, 3);
 				gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
 					@Override
 					public int getSpanSize(int position) {
@@ -450,7 +450,7 @@ public int getSpanSize(int position) {
 							case R.layout.recycler_uls_row:
 							case R.layout.recycler_header_row:
 							case R.layout.recycler_expandable_row:
-								return 2;
+								return 3;
 							default:
 								return 1;
 						}

File: flexible-adapter-app/src/main/java/eu/davidea/examples/models/ExpandableLevel0Item.java
Patch:
@@ -137,7 +137,7 @@ protected boolean isViewExpandableOnClick() {
 
 	@Override
 	public String toString() {
-		return "ExpandableHeaderItem[" + super.toString() + "//SubItems" + mSubItems + "]";
+		return "ExpandableLevel-0[" + super.toString() + "//SubItems" + mSubItems + "]";
 	}
 
 }
\ No newline at end of file

File: flexible-adapter-app/src/main/java/eu/davidea/examples/models/ExpandableLevel1Item.java
Patch:
@@ -168,7 +168,7 @@ protected boolean isViewExpandableOnClick() {
 
 	@Override
 	public String toString() {
-		return "ExpandableHeaderItem[" + super.toString() + "//SubItems" + mSubItems + "]";
+		return "ExpandableLevel-1[" + super.toString() + "//SubItems" + mSubItems + "]";
 	}
 
 }
\ No newline at end of file

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/ItemTouchHelperCallback.java
Patch:
@@ -172,6 +172,7 @@ public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder v
 			final int swipeFlags = 0;
 			return makeMovementFlags(dragFlags, swipeFlags);
 		} else {
+			//TODO: Handle horizontal layout
 			final int dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;
 			final int swipeFlags = mSwipeFlags;
 			return makeMovementFlags(dragFlags, swipeFlags);

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -241,7 +241,6 @@ private void initializeDrawer() {
 		appVersion.setText(getString(R.string.about_version,
 				Utils.getVersionName(this),
 				Utils.getVersionCode(this)));
-
 	}
 
 	private void initializeFab() {

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/DatabaseService.java
Patch:
@@ -117,10 +117,10 @@ public static ExpandableItem newExpandableItem(int i, HeaderItem header) {
 	 */
 	private ExpandableHeaderItem newExpandableSectionItem(int i) {
 		ExpandableHeaderItem expandableItem = new ExpandableHeaderItem("E" + i);
-		expandableItem.setTitle("Expandable Header Item " + i);
+		expandableItem.setTitle("Expandable Header " + i);
 		for (int j = 1; j <= SUB_ITEMS; j++) {
 			SubItem subItem = new SubItem(expandableItem.getId() + "S" + j);
-			subItem.setTitle("Sub Item " + j + " in expandable section header");
+			subItem.setTitle("Sub Item " + j + " in expandable section");
 			//In this case the Header is the same parent: ExpandableHeaderItem instance
 			subItem.setHeader(expandableItem);
 			expandableItem.addSubItem(subItem);

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/FragmentOverall.java
Patch:
@@ -90,7 +90,7 @@ private void initializeRecyclerView(Bundle savedInstanceState) {
 		mRecyclerView.setItemAnimator(new DefaultItemAnimator() {
 			@Override
 			public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
-				//NOTE: This allows to receive Payload objects on notifyItemChanged called by the Adapter!!!
+				//NOTE: This allows to receive Payload objects when notifyItemChanged is called by the Adapter!!!
 				return true;
 			}
 		});

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractHeaderItem.java
Patch:
@@ -29,6 +29,9 @@ public abstract class AbstractHeaderItem<VH extends RecyclerView.ViewHolder>
 		extends AbstractFlexibleItem<VH>
 		implements IHeader<VH> {
 
+	/**
+	 * By default, header is hidden and not selectable
+	 */
 	public AbstractHeaderItem() {
 		setHidden(true);
 		setSelectable(false);

File: flexible-adapter-app/src/main/java/eu/davidea/examples/anim/BaseItemAnimator.java
Patch:
@@ -113,7 +113,7 @@ public void runPendingAnimations() {
 		mPendingRemovals.clear();
 		// Next, move stuff
 		if (movesPending) {
-			final ArrayList<MoveInfo> moves = new ArrayList<MoveInfo>();
+			final ArrayList<MoveInfo> moves = new ArrayList<>();
 			moves.addAll(mPendingMoves);
 			mMovesList.add(moves);
 			mPendingMoves.clear();
@@ -137,7 +137,7 @@ public void run() {
 		}
 		// Next, change stuff, to run in parallel with move animations
 		if (changesPending) {
-			final ArrayList<ChangeInfo> changes = new ArrayList<ChangeInfo>();
+			final ArrayList<ChangeInfo> changes = new ArrayList<>();
 			changes.addAll(mPendingChanges);
 			mChangesList.add(changes);
 			mPendingChanges.clear();
@@ -160,7 +160,7 @@ public void run() {
 		}
 		// Next, add stuff
 		if (additionsPending) {
-			final ArrayList<ViewHolder> additions = new ArrayList<ViewHolder>();
+			final ArrayList<ViewHolder> additions = new ArrayList<>();
 			additions.addAll(mPendingAdditions);
 			mAdditionsList.add(additions);
 			mPendingAdditions.clear();

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/SelectableAdapter.java
Patch:
@@ -239,7 +239,7 @@ public void selectAll(Integer... viewTypes) {
 		int positionStart = 0, itemCount = 0;
 		for (int i = 0; i < getItemCount(); i++) {
 			if (isSelectable(i) &&
-					(viewTypesToSelect.size() == 0 || viewTypesToSelect.contains(getItemViewType(i)))) {
+					(viewTypesToSelect.isEmpty() || viewTypesToSelect.contains(getItemViewType(i)))) {
 				mSelectedPositions.add(i);
 				itemCount++;
 			} else {

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -261,7 +261,7 @@ public List<Animator> getAnimators(View itemView, int position, boolean isSelect
 	public String onCreateBubbleText(int position) {
 		if (!DatabaseService.userLearnedSelection && position == 0) {//This 'if' is for my example only
 			//TODO FOR YOU: This is the normal line you should use: Usually it's the first letter
-			return ""+position;
+			return Integer.toString(position);
 		}
 		return super.onCreateBubbleText(position);
 	}

File: flexible-adapter/src/main/java/eu/davidea/fastscroller/FastScroller.java
Patch:
@@ -240,7 +240,7 @@ else if (handle.getY() + handle.getHeight() >= height - TRACK_SNAP_RANGE)
 		}
 	}
 
-	private int getValueInRange(int min, int max, int value) {
+	private static int getValueInRange(int min, int max, int value) {
 		int minimum = Math.max(min, value);
 		return Math.min(minimum, max);
 	}

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractFlexibleItem.java
Patch:
@@ -33,6 +33,8 @@
 public abstract class AbstractFlexibleItem<VH extends RecyclerView.ViewHolder>
 		implements IFlexible<VH> {
 
+	private static final String MAPPING_ILLEGAL_STATE = "If you want FlexibleAdapter creates and binds ViewHolder for you, you must override and implement the method ";
+
 	/* Item flags recognized by the FlexibleAdapter */
 	protected boolean mEnabled = true, mHidden = false,
 			mSelectable = true, mSelected = false,
@@ -124,8 +126,6 @@ public void setSwipeable(boolean swipeable) {
 	/* VIEW HOLDER METHODS */
 	/*---------------------*/
 
-	private static final String MAPPING_ILLEGAL_STATE = "If you want FlexibleAdapter creates and binds ViewHolder for you, you must override and implement the method ";
-
 //	/**
 //	 * Wrapper of {#getLayoutRes()}.
 //	 * <p>It DOESN'T belongs to the {@link IFlexible} interface!!</p>

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/utils/Utils.java
Patch:
@@ -30,7 +30,7 @@
 
 public final class Utils {
 
-	public static int INVALID_COLOR = -1;
+	public static final int INVALID_COLOR = -1;
 	private static int colorAccent = INVALID_COLOR;
 
 	/**
@@ -69,7 +69,7 @@ public static void setHighlightText(Context context, TextView textView, String o
 	}
 
 	/**
-	 * Reset the internal accent color to {@value INVALID_COLOR}, to give the possibility
+	 * Reset the internal accent color to {@link #INVALID_COLOR}, to give the possibility
 	 * to re-fetch it at runtime, since once it is fetched it cannot be changed.
 	 */
 	public static void resetAccentColor() {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Davide Steduto
+ * Copyright 2015-2016 Davide Steduto
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAnimatorAdapter.java
Patch:
@@ -48,7 +48,7 @@
  * @author Davide Steduto
  * @see FlexibleAdapter
  * @see SelectableAdapter
- * @since 10/01/2016
+ * @since 10/01/2016 Created
  * <br/>30/01/2016 Class now extends {@link SelectableAdapter}
  */
 public abstract class FlexibleAnimatorAdapter extends SelectableAdapter {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/SelectableAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Davide Steduto
+ * Copyright 2015-2016 Davide Steduto
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/ItemTouchHelperCallback.java
Patch:
@@ -32,7 +32,7 @@
  * and swipe actions. Drag and Swipe events are started depending by its configuration.
  *
  * @author Davide Steduto
- * @since 23/01/2016
+ * @since 23/01/2016 Created
  */
 public class ItemTouchHelperCallback extends Callback {
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractSectionableItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Davide Steduto
+ * Copyright 2015-2016 Davide Steduto
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IHeader.java
Patch:
@@ -21,7 +21,7 @@
  * Wrapper empty interface to identify if the current item is a header.
  *
  * @author Davide Steduto
- * @since 15/02/2016
+ * @since 15/02/2016 Created
  */
 public interface IHeader<VH extends RecyclerView.ViewHolder> extends IFlexible<VH> {
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/ISectionable.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * @author Davide Steduto
- * @since 07/02/2016
+ * @since 07/02/2016 Created
  */
 public interface ISectionable<VH extends RecyclerView.ViewHolder, T extends IHeader>
 		extends IFlexible<VH> {

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -1351,7 +1351,7 @@ public boolean addItems(@IntRange(from = 0) int position, @NonNull List<T> items
 		//Show the headers of these items if all headers are already visible
 		if (headersShown) {
 			for (T item : items)
-				showHeaderOf(position++, item);
+				showHeaderOf(position, item);
 		}
 
 		//Call listener to update EmptyView

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -378,7 +378,7 @@ public int getItemCountOfTypes(Integer... viewTypes) {
 	public int getItemCountOfTypesUntil(@IntRange(from = 0) int position, Integer... viewTypes) {
 		List<Integer> viewTypeList = Arrays.asList(viewTypes);
 		int count = 0;
-		for (int i = 0; i < position; i++) {
+		for (int i = 0; i <= position; i++) {
 			//Privilege faster counting if autoMap is active
 			if ((autoMap && viewTypeList.contains(mItems.get(i).getLayoutRes())) ||
 					viewTypeList.contains(getItemViewType(i)))

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -130,7 +130,7 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 		//Experimenting NEW features
 		mAdapter.setLongPressDragEnabled(true);//Enable long press to drag items
 		mAdapter.setSwipeEnabled(true);//Enable swipe items
-		mAdapter.showAllHeaders();//Show Headers at startUp!
+		mAdapter.setDisplayHeadersAtStartUp(true);//Show Headers at startUp!
 		//Add sample item on the top (not part of library)
 		mAdapter.addUserLearnedSelection(savedInstanceState == null);
 
@@ -144,8 +144,8 @@ public void onClick(View v) {
 				for (int position = 0; position <= mAdapter.getItemCountOfTypes(R.layout.recycler_expandable_row) + 1; position++) {
 					//Every 3 positions I want to create an expandable
 					AbstractExampleItem item = (position % 3 == 0 ?
-							DatabaseService.newExpandableItem(position, false) :
-							DatabaseService.newSimpleItem(position, false));
+							DatabaseService.newExpandableItem(position, null) :
+							DatabaseService.newSimpleItem(position, null));
 					//Add only if we don't have it
 					if (!DatabaseService.getInstance().getListById().contains(item)) {
 						DatabaseService.getInstance().addItem(position, item);//This is the original list

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -736,9 +736,9 @@ private void logOrphanHeaders() {
 
 	private String extractTitleFrom(AbstractFlexibleItem abstractItem) {
 		if (abstractItem instanceof AbstractExampleItem) {
-			SimpleItem simpleItem = (SimpleItem) abstractItem;
-			String title = simpleItem.getTitle();
-			if (simpleItem instanceof ExpandableItem) {
+			AbstractExampleItem exampleItem = (AbstractExampleItem) abstractItem;
+			String title = exampleItem.getTitle();
+			if (exampleItem instanceof ExpandableItem) {
 				ExpandableItem expandableItem = (ExpandableItem) abstractItem;
 				if (expandableItem.getSubItems() != null) {
 					title += "(+" + expandableItem.getSubItems().size() + ")";

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -542,10 +542,11 @@ public void disableStickyHeaders() {
 	private void setStickyHeaders(boolean headersSticky, int maxCachedHeaders) {
 		//Add or Remove the sticky headers decoration
 		if (headersShown && headersSticky) {
-			this.headersSticky = headersSticky;
+			this.headersSticky = true;
 			stickyHeaderDecoration = new StickyHeaderDecoration(this, maxCachedHeaders);
 			mRecyclerView.addItemDecoration(stickyHeaderDecoration);
 		} else if (stickyHeaderDecoration != null){
+			this.headersSticky = false;
 			stickyHeaderDecoration.clearHeadersCache();
 			mRecyclerView.removeItemDecoration(stickyHeaderDecoration);
 			stickyHeaderDecoration = null;

File: flexible-adapter-app/src/main/java/eu/davidea/examples/models/HeaderItem.java
Patch:
@@ -102,8 +102,7 @@ public HeaderViewHolder(View view, FlexibleAdapter adapter) {
 	@Override
 	public String toString() {
 		return "HeaderItem[id=" + id +
-				", title=" + title +
-				", sticky=" + isSticky() + "]";
+				", title=" + title + "]";
 	}
 
 }
\ No newline at end of file

File: flexible-adapter-app/src/main/java/eu/davidea/utils/Utils.java
Patch:
@@ -48,7 +48,7 @@ public static DisplayMetrics getDisplayMetrics(Context context) {
 		return context.getResources().getDisplayMetrics();
 	}
 
-	public static int dpToPx(Context context, float dp) {
+	public static float dpToPx(Context context, float dp) {
 		final float scale = context.getResources().getDisplayMetrics().density;
 		return Math.round(dp * scale);
 	}

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAnimatorAdapter.java
Patch:
@@ -243,9 +243,7 @@ public final void animateView(final View itemView, int position, boolean isSelec
 			ViewCompat.setAlpha(itemView, 0);
 			if (!animatorsUsed.contains(AnimatorEnum.ALPHA))
 				addAlphaAnimator(animators, itemView, 0f);
-
-			if (DEBUG)
-				Log.v(TAG, "Start Animation on position " + position + " Animators=" + animatorsUsed);
+			//Clear animators since the new item might have different animations
 			animatorsUsed.clear();
 
 			//Execute the animations all together
@@ -258,6 +256,8 @@ public final void animateView(final View itemView, int position, boolean isSelec
 			set.setDuration(mDuration);
 			set.addListener(new HelperAnimatorListener(itemView.hashCode()));
 			set.start();
+			if (DEBUG)
+				Log.v(TAG, "Started Animation on position " + position + " animatorsUsed=" + animatorsUsed);
 			mAnimators.put(itemView.hashCode(), set);
 		}
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/common/SmoothScrollLinearLayoutManager.java
Patch:
@@ -1,4 +1,4 @@
-package eu.davidea.flexibleadapter;
+package eu.davidea.flexibleadapter.common;
 
 import android.content.Context;
 import android.graphics.PointF;

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -425,9 +425,9 @@ public boolean onItemClick(int position) {
 				if (position != mActivatedPosition) setActivatedPosition(position);
 				AbstractFlexibleItem abstractItem = mAdapter.getItem(position);
 				assert abstractItem != null;
-				String title = extractTitleFrom(abstractItem);
-				if (!title.isEmpty()) {
+				if (!(abstractItem instanceof ExpandableItem) && !(abstractItem instanceof IHeader)) {
 					//TODO FOR YOU: call your custom Action, for example mCallback.onItemSelected(item.getId());
+					String title = extractTitleFrom(abstractItem);
 					EditItemDialog.newInstance(title, position).show(getFragmentManager(), EditItemDialog.TAG);
 				}
 			}
@@ -457,7 +457,7 @@ public void onItemMove(int fromPosition, int toPosition) {
 		if (fromItem instanceof ISectionable || toItem instanceof ISectionable) {
 			return;
 		}
-		//FIXME: this doesn't work yet with subItems.....
+		//FIXME: this doesn't work with all types of items (of course)..... we need to implement some custom logic
 //		DatabaseService.getInstance().swapItem(
 //				DatabaseService.getInstance().getListById().indexOf(fromItem),
 //				DatabaseService.getInstance().getListById().indexOf(toItem));

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -950,7 +950,7 @@ public boolean handleMessage(Message message) {
 	public int expandAll() {
 		int expanded = 0;
 		//More efficient if we expand from First expandable position
-		for (int i = 0; i < mItems.size() - 1; i++) {
+		for (int i = 0; i < mItems.size(); i++) {
 			if (expand(i, true) > 0) expanded++;
 		}
 		return expanded;

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/DatabaseService.java
Patch:
@@ -53,6 +53,7 @@ public static ExpandableItem newExpandableItem(int i) {
 		ExpandableItem expandableItem = new ExpandableItem("E" + (++i));
 		//Let's initially expand the first father with subElements
 //		expandableItem.setInitiallyExpanded(i == 2);
+//		expandableItem.setSelectable(false);
 		expandableItem.setTitle("Expandable Item " + i);
 		//Add subItems every N elements
 		//SubItems are not expandable by default, but thy might be if extends/implements IExpandable
@@ -69,7 +70,6 @@ public List<ISectionable> buildHeaders() {
 		for (int i = 0; i < (ITEMS/HEADERS); i++) {
 			HeaderItem header = new HeaderItem("H" + i, mItems.get(i * HEADERS), false, false);
 			header.setTitle("Header " + (i + 1));
-			header.setSubtitle("Attached to " + mItems.get(i * HEADERS).getTitle());
 			header.setHidden(true);
 			headers.add(header);
 		}

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -55,7 +55,8 @@ public void addUserLearnedSelection(boolean scrollToPosition) {
 		if (!DatabaseService.userLearnedSelection && !hasSearchText() && !(getItem(0) instanceof ULSItem)) {
 			//Define Example View
 			final ULSItem item = new ULSItem("ULS");
-			item.setEnabled(false);
+			item.setEnabled(false);//TODO: check for set enabled, now not implemented yet
+			item.setSelectable(false);
 			item.setTitle(mContext.getString(R.string.uls_title));
 			item.setSubtitle(mContext.getString(R.string.uls_subtitle));
 			addItemWithDelay(0, item, 1700L, scrollToPosition);
@@ -70,7 +71,7 @@ public synchronized void filterItems(@NonNull List<AbstractExampleItem> unfilter
 
 	@Override
 	public void selectAll(Integer... viewTypes) {
-		super.selectAll(CHILD_VIEW_TYPE);
+		super.selectAll();
 	}
 
 	/**

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/ISectionable.java
Patch:
@@ -15,4 +15,6 @@ public interface ISectionable<VH extends RecyclerView.ViewHolder, T extends IFle
 
 	T getAttachedItem();
 
+	void setAttachedItem(T attachedItem);
+
 }
\ No newline at end of file

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -130,7 +130,7 @@ public boolean canReuseUpdatedViewHolder(RecyclerView.ViewHolder viewHolder) {
 		mAdapter.setSwipeEnabled(true);
 
 		//Experimental, set some headers!
-		mAdapter.setHeaders(DatabaseService.buildHeaders());
+		mAdapter.setHeaders(DatabaseService.getInstance().buildHeaders());
 
 		//FAB
 		mFab = (FloatingActionButton) findViewById(R.id.fab);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAnimatorAdapter.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.List;
 
 /**
- * This class is responsible to animate items when RecyclerView is firstly loaded. Bounded items
- * are animated initially and also when user starts to scroll the list.
+ * This class is responsible to animate items. Bounded items are animated initially and also
+ * when user starts to scroll the list.
  * <p>Animations can be customized for each items applying different logic based on item position
  * and beyond.</p>
  * This class is extended by {@link FlexibleAdapter}.

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/SelectableAdapter.java
Patch:
@@ -20,7 +20,8 @@
 
 /**
  * This class provides a set of standard methods to handle the selection on the items of an Adapter.
- * <p>Also </p>
+ * <p>Also it manages the FastScroller.</p>
+ * This class is extended by {@link FlexibleAnimatorAdapter}.
  *
  * @author Davide Steduto
  * @see FlexibleAdapter

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IExpandable.java
Patch:
@@ -5,8 +5,7 @@
 /**
  * Interface to manage expanding operations on items with
  * {@link eu.davidea.flexibleadapter.FlexibleAdapter}.
- * <br/>Most of these methods are called in the Adapter.
- * <p>Implements this interface or use {@link AbstractExpandableItem}.</p>
+  * <p>Implements this interface or use {@link AbstractExpandableItem}.</p>
  *
  * @author Davide Steduto
  * @since 17/01/2016 Created

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAnimatorAdapter.java
Patch:
@@ -37,7 +37,7 @@
  * @since 10/01/2016
  * <br/>30/01/2016 Class now extends {@link SelectableAdapter}
  */
-public abstract class FlexibleAnimatorAdapter<VH extends RecyclerView.ViewHolder> extends SelectableAdapter<VH> {
+public abstract class FlexibleAnimatorAdapter extends SelectableAdapter {
 
 	protected static final String TAG = FlexibleAnimatorAdapter.class.getSimpleName();
 
@@ -220,7 +220,7 @@ private void cancelExistingAnimation(@NonNull final View itemView) {
 	/**
 	 * Animates the view based on the custom animator list built with {@link #getAnimators(View, int, boolean)}.
 	 */
-	protected final void animateView(final View itemView, int position, boolean isSelected) {
+	public final void animateView(final View itemView, int position, boolean isSelected) {
 		//FIXME: first completed visible item on rotation gets high delay
 
 //		if (DEBUG)

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleExpandableAdapter.java
Patch:
@@ -89,7 +89,7 @@ protected void expandInitialItems() {
 		//Set initially expanded
 		for (int position = 0; position < mItems.size(); position++) {
 			T item = getItem(position);
-			if (item != null && item.isExpanded() && item.getSubItemsCount() > 0) {
+			if (item != null && item.isExpanded()) {
 				if (DEBUG) Log.v(TAG, "Initially expand item on position " + position);
 				List<S> subItems = getCurrentChildren(item);
 				mItems.addAll(position + 1, subItems);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/SelectableAdapter.java
Patch:
@@ -29,7 +29,7 @@
  * <br/>27/01/2016 Improved Selection, SelectAll, FastScroller
  */
 @SuppressWarnings({"unused", "Convert2Diamond", "unchecked"})
-public abstract class SelectableAdapter<VH extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<VH>
+public abstract class SelectableAdapter extends RecyclerView.Adapter
 		implements FastScroller.BubbleTextCreator, FastScroller.ScrollStateChangeListener {
 
 	private static final String TAG = SelectableAdapter.class.getSimpleName();
@@ -155,7 +155,7 @@ public boolean isSelected(int position) {
 	 * <li>In <i>onClick</i> event, enable the Activated/Selected State of the ItemView of the
 	 * ViewHolder <u>after</u> the listener consumed the event:
 	 * <i>itemView.setActivated(mAdapter.isSelected(getAdapterPosition()));</i></li>
-	 * <li>In <i>onBindViewHolder</i>, adjust the selection status:
+	 * <li>In <i>bindViewHolder</i>, adjust the selection status:
 	 * <i>holder.itemView.setActivated(isSelected(position));</i></li>
 	 * <li>If <i>invalidate</i> is set true, {@link #notifyItemChanged} is called and
 	 * {@link #onBindViewHolder} will be automatically called afterwards overriding any animation

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IExpandable.java
Patch:
@@ -27,6 +27,4 @@ public interface IExpandable<T extends IFlexibleItem> {
 
 	List<T> getSubItems();
 
-	int getSubItemsCount();
-
 }
\ No newline at end of file

File: flexible-adapter/src/main/java/eu/davidea/viewholders/FlexibleViewHolder.java
Patch:
@@ -147,7 +147,7 @@ protected final void setDragHandleView(@NonNull View view) {
 	 * (to activate the ActionMode) or during a Drag (to show that we enabled the Drag).
 	 * </p>
 	 * If you do this, it's not necessary to invalidate the row (with notifyItemChanged):
-	 * In this way <i>onBindViewHolder</i> is NOT called and inner Views can animate without
+	 * In this way <i>bindViewHolder</i> is NOT called and inner Views can animate without
 	 * interruption, so you can see the animation running still having the selection activated.
 	 */
 	@CallSuper

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -344,7 +344,7 @@ public ParentViewHolder(View view, ExampleAdapter adapter) {
 				@Override
 				public void onClick(View v) {
 					mAdapter.mItemLongClickListener.onItemLongClick(getAdapterPosition());
-					Toast.makeText(mContext, "ImageClick on " + mTitle.getText(), Toast.LENGTH_SHORT).show();
+					Toast.makeText(mContext, "ImageClick on " + mTitle.getText() + " position " + getAdapterPosition(), Toast.LENGTH_SHORT).show();
 					toggleActivation();
 				}
 			});
@@ -354,13 +354,13 @@ public void onClick(View v) {
 
 		@Override
 		public void onClick(View view) {
-			Toast.makeText(mContext, "Click on " + mTitle.getText(), Toast.LENGTH_SHORT).show();
+			Toast.makeText(mContext, "Click on " + mTitle.getText() + " position " + getAdapterPosition(), Toast.LENGTH_SHORT).show();
 			super.onClick(view);
 		}
 
 		@Override
 		public boolean onLongClick(View view) {
-			Toast.makeText(mContext, "LongClick on " + mTitle.getText(), Toast.LENGTH_SHORT).show();
+			Toast.makeText(mContext, "LongClick on " + mTitle.getText() + " position " + getAdapterPosition(), Toast.LENGTH_SHORT).show();
 			return super.onLongClick(view);
 		}
 

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/DatabaseService.java
Patch:
@@ -11,7 +11,7 @@
 public class DatabaseService {
 
 	private static DatabaseService mInstance;
-	private static final int ITEMS = 100;
+	private static final int ITEMS = 100, SUB_ITEMS = 8;
 	public static boolean userLearnedSelection = false;
 
 	private List<Item> mItems = new ArrayList<Item>();
@@ -47,7 +47,7 @@ public static Item newExampleItem(int i) {
 		//subItems are not expandable by default
 		if (i % 3 == 0) {
 			item.setTitle("Expandable Item " + i);
-			for (int j = 1; j <= 5; j++) {
+			for (int j = 1; j <= SUB_ITEMS; j++) {
 				Item subItem = new Item();
 				subItem.setId(i+"s"+j);
 				subItem.setTitle("Sub Item " + j);

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractExpandableItem.java
Patch:
@@ -153,7 +153,7 @@ public boolean contains(T item) {
 	@Override
 	public boolean removeSubItem(T item) {
 		int position = mSubItems.indexOf(item);
-		if (mSubItems != null && position > 0) {
+		if (mSubItems != null && position >= 0) {
 			mRemovedItems.put(position, item);
 			return mSubItems.remove(item);
 		}

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/DatabaseService.java
Patch:
@@ -11,7 +11,7 @@
 public class DatabaseService {
 
 	private static DatabaseService mInstance;
-	private static final int ITEMS = 1000;
+	private static final int ITEMS = 100;
 	public static boolean userLearnedSelection = false;
 
 	private List<Item> mItems = new ArrayList<Item>();

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/ExampleAdapter.java
Patch:
@@ -32,6 +32,7 @@ public class ExampleAdapter extends FlexibleExpandableAdapter<ExpandableViewHold
 	private static final String TAG = ExampleAdapter.class.getSimpleName();
 
 	private Context mContext;
+	public static final int CHILD_VIEW_TYPE = 0;
 	public static final int EXAMPLE_VIEW_TYPE = 1;
 
 	private LayoutInflater mInflater;
@@ -107,7 +108,7 @@ public void setMode(int mode) {
 	@Override
 	public void selectAll(Integer... viewTypes) {
 		mSelectAll = true;
-		super.selectAll();
+		super.selectAll(CHILD_VIEW_TYPE);
 	}
 
 	@Override

File: flexible-adapter-app/src/main/java/eu/davidea/utils/Utils.java
Patch:
@@ -132,7 +132,7 @@ public static int getVersionCode(Context context) {
 	@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 	public static int getColorAccent(Context context) {
 		if (colorAccent < 0) {
-			int accentAttr = Utils.hasLollipop() ? android.R.attr.colorAccent : R.attr.colorAccent;
+			int accentAttr = eu.davidea.flexibleadapter.utils.Utils.hasLollipop() ? android.R.attr.colorAccent : R.attr.colorAccent;
 			TypedArray androidAttr = context.getTheme().obtainStyledAttributes(new int[] { accentAttr });
 			colorAccent = androidAttr.getColor(0, 0xFF009688); //Default: material_deep_teal_500
 			androidAttr.recycle();

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/FlexibleAdapter.java
Patch:
@@ -719,9 +719,10 @@ public boolean isLongPressDragEnabled() {
 
 	/**
 	 * Enabled by default.
-	 * <p>It is sufficient to call {@link FlexibleViewHolder#setDragHandleView(View)}.</p>
+	 * <p>To use, it is sufficient to set the HandleView by calling
+	 * {@link FlexibleViewHolder#setDragHandleView(View)}.</p>
 	 *
-	 * @return true if LongPressDragEnabled is disabled, false otherwise
+	 * @return true by default
 	 */
 	public boolean isHandleDragEnabled() {
 		return true;

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/ItemTouchHelperCallback.java
Patch:
@@ -11,7 +11,7 @@
 
 /**
  * This class is an implementation of {@link ItemTouchHelper.Callback} that enables drag & drop
- * and swipe-to-dismiss. Drag and Swipe events are started depending by it's configuration.
+ * and swipe actions. Drag and Swipe events are started depending by its configuration.
  *
  * @author Davide Steduto
  * @since 23/01/2016

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/helpers/ItemTouchHelperCallback.java
Patch:
@@ -215,7 +215,6 @@ public void onChildDrawOver(Canvas c, RecyclerView recyclerView, RecyclerView.Vi
 	 * Internal Interface for Adapter to listen for a move or swipe dismissal event
 	 * from a {@link ItemTouchHelperCallback}.
 	 *
-	 * @author Davide Steduto
 	 * @since 23/01/2016
 	 */
 	public interface AdapterCallback {
@@ -263,7 +262,6 @@ public interface AdapterCallback {
 	 * <p>Generally the final action should be handled by the listeners
 	 * {@link FlexibleAdapter.OnItemMoveListener} and {@link FlexibleAdapter.OnItemSwipeListener}.</p>
 	 *
-	 * @author Davide Steduto
 	 * @since 23/01/2016
 	 */
 	public interface ViewHolderCallback {

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/Item.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.io.Serializable;
 
-import eu.davidea.flexibleadapter.item.AbstractExpandableItem;
-import eu.davidea.viewholder.ExpandableViewHolder;
+import eu.davidea.flexibleadapter.items.AbstractExpandableItem;
+import eu.davidea.viewholders.ExpandableViewHolder;
 
 public class Item extends AbstractExpandableItem<Item, ExpandableViewHolder> implements Serializable {
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/AbstractFlexibleItem.java
Patch:
@@ -1,4 +1,4 @@
-package eu.davidea.flexibleadapter.item;
+package eu.davidea.flexibleadapter.items;
 
 /**
  * Generic implementation of {@link IFlexibleItem} interface with most useful methods to manage

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IExpandableItem.java
Patch:
@@ -1,4 +1,4 @@
-package eu.davidea.flexibleadapter.item;
+package eu.davidea.flexibleadapter.items;
 
 import java.util.List;
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/items/IFlexibleItem.java
Patch:
@@ -1,4 +1,4 @@
-package eu.davidea.flexibleadapter.item;
+package eu.davidea.flexibleadapter.items;
 
 /**
  * Basic Interface to manage Item operations like selection

File: flexible-adapter/src/main/java/eu/davidea/viewholders/ExpandableViewHolder.java
Patch:
@@ -1,4 +1,4 @@
-package eu.davidea.viewholder;
+package eu.davidea.viewholders;
 
 import android.view.View;
 

File: flexible-adapter/src/main/java/eu/davidea/viewholders/FlexibleViewHolder.java
Patch:
@@ -1,4 +1,4 @@
-package eu.davidea.viewholder;
+package eu.davidea.viewholders;
 
 import android.support.v7.widget.RecyclerView;
 import android.view.View;

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -407,7 +407,7 @@ public void onListItemLongClick(int position) {
 	 * @param position Position of the item to toggle the selection state
 	 */
 	private void toggleSelection(int position) {
-		mAdapter.toggleSelection(position, false);
+		mAdapter.toggleSelection(position);
 
 		int count = mAdapter.getSelectedItemCount();
 

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/Item.java
Patch:
@@ -51,7 +51,6 @@ public String toString() {
 		return "Item[" +
 				"id=" + id +
 				", title=" + title +
-				", subtitle=" + subtitle +
 				super.toString() + ']';
 	}
 

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -29,6 +29,7 @@
 import android.widget.Toast;
 
 import eu.davidea.common.SimpleDividerItemDecoration;
+import eu.davidea.examples.anim.SlideInRightAnimator;
 import eu.davidea.fastscroller.FastScroller;
 import eu.davidea.flexibleadapter.FlexibleAdapter;
 import eu.davidea.flexibleadapter.SmoothScrollLinearLayoutManager;
@@ -101,7 +102,7 @@ protected void onCreate(Bundle savedInstanceState) {
 		mRecyclerView.setLayoutManager(new SmoothScrollLinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));
 		mRecyclerView.setAdapter(mAdapter);
 		mRecyclerView.setHasFixedSize(true); //Size of views will not change as the data changes
-		//mRecyclerView.setItemAnimator(new SlideInRightAnimator());
+		mRecyclerView.setItemAnimator(new SlideInRightAnimator());
 		mRecyclerView.addItemDecoration(new SimpleDividerItemDecoration(
 				ResourcesCompat.getDrawable(getResources(), R.drawable.divider, null)));
 

File: flexible-adapter/src/main/java/eu/davidea/flexibleadapter/item/IExpandableItem.java
Patch:
@@ -52,6 +52,4 @@ public interface IExpandableItem<T> extends IFlexibleItem<T> {
 
 	boolean removeSubItem(int position);
 
-	int getPositionOfSubItem(T item);
-
 }
\ No newline at end of file

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/DatabaseService.java
Patch:
@@ -34,7 +34,7 @@ private void init() {
 
 	public static Item newExampleItem(int i) {
 		Item item = new Item();
-		item.setId(++i);
+		item.setId(""+(++i));
 		item.setTitle("Item " + i);
 
 		//All parent items are expandable
@@ -48,7 +48,7 @@ public static Item newExampleItem(int i) {
 			item.setTitle("Expandable Item " + i);
 			for (int j = 1; j <= 5; j++) {
 				Item subItem = new Item();
-				subItem.setId(i * j * (-1));
+				subItem.setId(i+"s"+j);
 				subItem.setTitle("Sub Item " + j);
 				subItem.setParent(item);
 				item.addSubItem(subItem);

File: flexible-adapter-app/src/main/java/eu/davidea/examples/flexibleadapter/MainActivity.java
Patch:
@@ -29,7 +29,6 @@
 import android.widget.Toast;
 
 import eu.davidea.common.SimpleDividerItemDecoration;
-import eu.davidea.examples.anim.SlideInRightAnimator;
 import eu.davidea.fastscroller.FastScroller;
 import eu.davidea.flexibleadapter.FlexibleAdapter;
 import eu.davidea.flexibleadapter.SmoothScrollLinearLayoutManager;
@@ -96,11 +95,12 @@ protected void onCreate(Bundle savedInstanceState) {
 		FlexibleAdapter.enableLogs(true);
 		mAdapter = new ExampleAdapter(this, "example parameter for List1");
 		mAdapter.setAnimateOnReverseScrolling(true);
+		mAdapter.setAnimationEnabled(false);
 		mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);
 		mRecyclerView.setLayoutManager(new SmoothScrollLinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));
 		mRecyclerView.setAdapter(mAdapter);
 		mRecyclerView.setHasFixedSize(true); //Size of views will not change as the data changes
-		mRecyclerView.setItemAnimator(new SlideInRightAnimator());
+		//mRecyclerView.setItemAnimator(new SlideInRightAnimator());
 		mRecyclerView.addItemDecoration(new SimpleDividerItemDecoration(
 				ResourcesCompat.getDrawable(getResources(), R.drawable.divider, null)));
 
@@ -376,6 +376,7 @@ public boolean onListItemClick(int position) {
 			if (mAdapter.getItemCount() > 0) {
 				if (position != mActivatedPosition) setActivatedPosition(position);
 				Item item = mAdapter.getItem(position);
+				Log.d(TAG, "onListItemClick on position=" + position + " " + item);
 				if (!item.hasSubItems()) {
 					//TODO FOR YOU: call your custom Callback, for example mCallback.onItemSelected(item.getId());
 					EditItemDialog.newInstance(item, position).show(getFragmentManager(), EditItemDialog.TAG);

File: flexibleAdapter/src/main/java/eu/davidea/flexibleadapter/MainActivity.java
Patch:
@@ -352,10 +352,10 @@ public void onListItemLongClick(int position) {
 	}
 
 	/**
-	 * Toggle the selection state of an item.
-	 *
+	 * Toggle the selection state of an item.<br/><br/>
 	 * If the item was the last one in the selection and is unselected, the selection is stopped.
 	 * Note that the selection must already be started (actionMode must not be null).
+	 *
 	 * @param position Position of the item to toggle the selection state
 	 */
 	private void toggleSelection(int position) {

File: flexibleAdapter/src/main/java/eu/davidea/anim/FlipDownItemAnimator.java
Patch:
@@ -1,11 +1,11 @@
-package com.twotoasters.anim;
+package eu.davidea.anim;
 
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.ViewPropertyAnimatorCompat;
 import android.view.animation.AccelerateInterpolator;
 import android.view.animation.BounceInterpolator;
 
-import com.twotoasters.android.support.v7.widget.RecyclerView.ViewHolder;
+import android.support.v7.widget.RecyclerView.ViewHolder;
 
 public class FlipDownItemAnimator extends PendingItemAnimator {
 

File: flexibleAdapter/src/main/java/eu/davidea/anim/GarageDoorItemAnimator.java
Patch:
@@ -1,9 +1,9 @@
-package com.twotoasters.anim;
+package eu.davidea.anim;
 
 import android.support.v4.view.ViewCompat;
 import android.support.v4.view.ViewPropertyAnimatorCompat;
 
-import com.twotoasters.android.support.v7.widget.RecyclerView.ViewHolder;
+import android.support.v7.widget.RecyclerView.ViewHolder;
 
 public class GarageDoorItemAnimator extends PendingItemAnimator {
 

