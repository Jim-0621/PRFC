File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/fabric8/Fabric8UserAgentDefaultConfigurationTests.java
Patch:
@@ -37,7 +37,7 @@ class Fabric8UserAgentDefaultConfigurationTests {
 	@Test
 	void testUserAgent() {
 		String userAgent = client.getConfiguration().getUserAgent();
-		assertThat(userAgent).isEqualTo("fabric8-kubernetes-client/6.13.4");
+		assertThat(userAgent).isEqualTo("fabric8-kubernetes-client/6.13.5");
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/fabric8/Fabric8UserAgentDefaultConfigurationTests.java
Patch:
@@ -37,7 +37,7 @@ class Fabric8UserAgentDefaultConfigurationTests {
 	@Test
 	void testUserAgent() {
 		String userAgent = client.getConfiguration().getUserAgent();
-		assertThat(userAgent).isEqualTo("fabric8-kubernetes-client/6.13.4");
+		assertThat(userAgent).isEqualTo("fabric8-kubernetes-client/6.13.5");
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/Fabric8LeaderInitiatorTest.java
Patch:
@@ -60,6 +60,7 @@ void beforeEach() {
 	@AfterEach
 	void afterEach() {
 		leaderInitiator.stop();
+		Mockito.reset(mockFabric8LeadershipController, mockFabric8LeaderRecordWatcher, mockFabric8PodReadinessWatcher);
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/Fabric8ConfigMapMountMountPollingBootstrapIT.java
Patch:
@@ -44,7 +44,7 @@
 /**
  * @author wind57
  */
-class BootstrapEnabledPollingReloadConfigMapMountIT {
+class Fabric8ConfigMapMountMountPollingBootstrapIT {
 
 	private static final String IMAGE_NAME = "spring-cloud-kubernetes-fabric8-client-reload";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/Fabric8ConfigMapMountPollingReloadIT.java
Patch:
@@ -44,7 +44,7 @@
 /**
  * @author wind57
  */
-class ConfigMapMountPollingReloadDelegateIT {
+class Fabric8ConfigMapMountPollingReloadIT {
 
 	private static final String IMAGE_NAME = "spring-cloud-kubernetes-fabric8-client-reload";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/Fabric8EventReloadSecretConfigDataIT.java
Patch:
@@ -52,7 +52,7 @@
 		"logging.level.org.springframework.cloud.kubernetes.fabric8.config.reload=debug",
 		"spring.cloud.kubernetes.client.namespace=default" })
 @ActiveProfiles("with-secret")
-class Fabric8EventReloadSecretIT extends Fabric8EventReloadBase {
+class Fabric8EventReloadSecretConfigDataIT extends Fabric8EventReloadBase {
 
 	private static final String NAMESPACE = "default";
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload_it/PollingReloadConfigMapTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -115,8 +114,6 @@ static void after() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload_it/PollingReloadSecretTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -117,8 +116,6 @@ static void after() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload_it/PollingReloadConfigMapTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -91,8 +90,6 @@ static void beforeAll() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 		// we fail while reading 'configMapOne'

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload_it/PollingReloadSecretTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -94,8 +93,6 @@ static void beforeAll() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 		// we fail while reading 'secretOne'

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-kafka-configmap-reload-multiple-apps/kafka-configmap-test-app/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/multiple/apps/ConfigurationWatcherMultipleAppsIT.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.k3s.K3sContainer;
 import reactor.netty.http.client.HttpClient;
@@ -100,7 +99,6 @@ void afterEach() {
 		configWatcher(Phase.DELETE);
 	}
 
-	@Disabled
 	@Test
 	void testRefresh() {
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-rabbitmq-secret-reload-multiple-apps/rabbitmq-secret-test-app/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/multiple/apps/ConfigurationWatcherMultipleAppIT.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.k3s.K3sContainer;
 import reactor.netty.http.client.HttpClient;
@@ -99,7 +98,6 @@ void after() {
 		configWatcher(Phase.DELETE);
 	}
 
-	@Disabled
 	@Test
 	void testRefresh() {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload_it/PollingReloadConfigMapTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -115,8 +114,6 @@ static void after() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload_it/PollingReloadSecretTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -117,8 +116,6 @@ static void after() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload_it/PollingReloadConfigMapTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -91,8 +90,6 @@ static void beforeAll() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 		// we fail while reading 'configMapOne'

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload_it/PollingReloadSecretTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIfEnvironmentVariable;
 import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
@@ -94,8 +93,6 @@ static void beforeAll() {
 	 *     - second polling cycle reads sources from k8s and finds a change
 	 * </pre>
 	 */
-	@DisabledIfEnvironmentVariable(named = "JENKINS_HOME", matches = "^(?=\\s*\\S).*$",
-			disabledReason = "failing on jenkins")
 	@Test
 	void test(CapturedOutput output) {
 		// we fail while reading 'secretOne'

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-kafka-configmap-reload-multiple-apps/kafka-configmap-test-app/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/multiple/apps/ConfigurationWatcherMultipleAppsIT.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.k3s.K3sContainer;
 import reactor.netty.http.client.HttpClient;
@@ -100,7 +99,6 @@ void afterEach() {
 		configWatcher(Phase.DELETE);
 	}
 
-	@Disabled
 	@Test
 	void testRefresh() {
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-rabbitmq-secret-reload-multiple-apps/rabbitmq-secret-test-app/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/multiple/apps/ConfigurationWatcherMultipleAppIT.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.k3s.K3sContainer;
 import reactor.netty.http.client.HttpClient;
@@ -99,7 +98,6 @@ void after() {
 		configWatcher(Phase.DELETE);
 	}
 
-	@Disabled
 	@Test
 	void testRefresh() {
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/ConfigMapMountPollingReloadDelegateIT.java
Patch:
@@ -113,6 +113,8 @@ void test() {
 		configMap.setData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=as-mount-changed"));
 		client.configMaps().inNamespace("default").resource(configMap).createOrReplace();
 
+		Commons.waitForLogStatement("Detected change in config maps/secrets, reload will be triggered", K3S, IMAGE_NAME);
+
 		await().atMost(Duration.ofSeconds(120))
 			.pollInterval(Duration.ofSeconds(1))
 			.until(() -> webClient.method(HttpMethod.GET)

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/discovery/Fabric8DiscoveryAllServicesIT.java
Patch:
@@ -49,10 +49,10 @@ static void beforeAllInNested() {
 
 	private void externalNameServices(Phase phase) {
 		if (phase == Phase.CREATE) {
-			util.createAndWait(NAMESPACE, null, null, externalServiceName, null, true);
+			util.createAndWait(NAMESPACE, null, null, externalServiceName, true);
 		}
 		else {
-			util.deleteAndWait(NAMESPACE, null, externalServiceName, null);
+			util.deleteAndWait(NAMESPACE, null, externalServiceName);
 		}
 	}
 

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/FixedPortsK3sContainer.java
Patch:
@@ -37,7 +37,7 @@ final class FixedPortsK3sContainer extends K3sContainer {
 	/**
 	 * Test containers exposed ports.
 	 */
-	private static final int[] EXPOSED_PORTS = new int[] { 80, 6443, 8080, 8888, 9092 };
+	private static final int[] EXPOSED_PORTS = new int[] { 80, 6443, 8080, 8888, 9092, 32321 };
 
 	/**
 	 * Rancher version to use for test-containers.

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/FixedPortsK3sContainer.java
Patch:
@@ -48,7 +48,7 @@ final class FixedPortsK3sContainer extends K3sContainer {
 	 * Command to use when starting rancher. Without "server" option, traefik is not
 	 * installed
 	 */
-	private static final String RANCHER_COMMAND = "server";
+	private static final String RANCHER_COMMAND = "server --disable=metric-server";
 
 	static final K3sContainer CONTAINER = new FixedPortsK3sContainer(DockerImageName.parse(RANCHER_VERSION))
 		.configureFixedPorts()

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/ConfigReloadUtil.java
Patch:
@@ -71,7 +71,7 @@ public static boolean reload(PropertySourceLocator locator, ConfigurableEnvironm
 
 		boolean changed = changed(sourceFromK8s, existingSources);
 		if (changed) {
-			LOG.info("Detected change in config maps/secrets, reload will ne triggered");
+			LOG.info("Detected change in config maps/secrets, reload will be triggered");
 			return true;
 		}
 		else {

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/LabeledSourceData.java
Patch:
@@ -79,7 +79,7 @@ public final SourceData compute(Map<String, String> labels, ConfigUtils.Prefix p
 			}
 		}
 		catch (Exception e) {
-			LOG.warn("failure in reading labeled sources");
+			LOG.warn("Failure in reading labeled sources");
 			onException(failFast, e);
 			data = new MultipleSourcesContainer(data.names(), Map.of(ERROR_PROPERTY, "true"));
 		}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/NamedSourceData.java
Patch:
@@ -71,7 +71,7 @@ public final SourceData compute(String sourceName, ConfigUtils.Prefix prefix, St
 
 		}
 		catch (Exception e) {
-			LOG.warn("failure in reading named sources");
+			LOG.warn("Failure in reading named sources");
 			onException(failFast, e);
 			data = new MultipleSourcesContainer(data.names(), Map.of(ERROR_PROPERTY, "true"));
 		}

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigUtils.java
Patch:
@@ -147,7 +147,7 @@ private static List<StrippedSourceContainer> strippedConfigMaps(CoreV1Api coreV1
 	private static List<StrippedSourceContainer> strippedSecrets(CoreV1Api coreV1Api, String namespace) {
 		List<StrippedSourceContainer> strippedSecrets = KubernetesClientSecretsCache.byNamespace(coreV1Api, namespace);
 		if (strippedSecrets.isEmpty()) {
-			LOG.debug("No configmaps in namespace '" + namespace + "'");
+			LOG.debug("No secrets in namespace '" + namespace + "'");
 		}
 		return strippedSecrets;
 	}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/LabeledSourceData.java
Patch:
@@ -45,8 +45,7 @@ public final SourceData compute(Map<String, String> labels, ConfigUtils.Prefix p
 			data = dataSupplier(labels, profiles);
 
 			// need this check because when there is no data, the name of the property
-			// source
-			// is using provided labels,
+			// source is using provided labels,
 			// unlike when the data is present: when we use secret names
 			if (data.names().isEmpty()) {
 				String names = labels.keySet()

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SourceData.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.cloud.kubernetes.commons.config;
 
-import java.util.Collections;
 import java.util.Map;
 
 /**
@@ -25,10 +24,10 @@
  *
  * @author wind57
  */
-public final record SourceData(String sourceName, Map<String, Object> sourceData) {
+public record SourceData(String sourceName, Map<String, Object> sourceData) {
 
 	public static SourceData emptyRecord(String sourceName) {
-		return new SourceData(sourceName, Collections.emptyMap());
+		return new SourceData(sourceName, Map.of());
 	}
 
 }

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SourceDataEntriesProcessor.java
Patch:
@@ -48,7 +48,7 @@ public class SourceDataEntriesProcessor extends MapPropertySource {
 
 	private static final Log LOG = LogFactory.getLog(SourceDataEntriesProcessor.class);
 
-	private static Predicate<String> ENDS_IN_EXTENSION = x -> x.endsWith(".yml") || x.endsWith(".yaml")
+	private static final Predicate<String> ENDS_IN_EXTENSION = x -> x.endsWith(".yml") || x.endsWith(".yaml")
 			|| x.endsWith(".properties");
 
 	public SourceDataEntriesProcessor(SourceData sourceData) {

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
@@ -120,7 +121,7 @@ private void addPropertySourcesFromPaths(Environment environment, CompositePrope
 		}).toList().forEach(p -> {
 			try {
 				String content = new String(Files.readAllBytes(p)).trim();
-				String filename = p.toAbsolutePath().toString().toLowerCase();
+				String filename = p.toAbsolutePath().toString().toLowerCase(Locale.ROOT);
 				if (filename.endsWith(".properties")) {
 					addPropertySourceIfNeeded(c -> PROPERTIES_TO_MAP.apply(KEY_VALUE_TO_PROPERTIES.apply(c)), content,
 							filename, composite);

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SecretsPropertySourceLocator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Objects;
 import java.util.Set;
 import java.util.function.BiConsumer;
@@ -177,7 +178,7 @@ private SecretsPropertySource property(Path filePath) {
 
 			try {
 				String content = new String(Files.readAllBytes(filePath)).trim();
-				String sourceName = fileName.toLowerCase();
+				String sourceName = fileName.toLowerCase(Locale.ROOT);
 				SourceData sourceData = new SourceData(sourceName, Collections.singletonMap(fileName, content));
 				return new SecretsPropertySource(sourceData);
 			}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedHashSet;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
@@ -120,7 +121,7 @@ private void addPropertySourcesFromPaths(Environment environment, CompositePrope
 		}).toList().forEach(p -> {
 			try {
 				String content = new String(Files.readAllBytes(p)).trim();
-				String filename = p.toAbsolutePath().toString().toLowerCase();
+				String filename = p.toAbsolutePath().toString().toLowerCase(Locale.ROOT);
 				if (filename.endsWith(".properties")) {
 					addPropertySourceIfNeeded(c -> PROPERTIES_TO_MAP.apply(KEY_VALUE_TO_PROPERTIES.apply(c)), content,
 							filename, composite);

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SecretsPropertySourceLocator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Objects;
 import java.util.Set;
 import java.util.function.BiConsumer;
@@ -177,7 +178,7 @@ private SecretsPropertySource property(Path filePath) {
 
 			try {
 				String content = new String(Files.readAllBytes(filePath)).trim();
-				String sourceName = fileName.toLowerCase();
+				String sourceName = fileName.toLowerCase(Locale.ROOT);
 				SourceData sourceData = new SourceData(sourceName, Collections.singletonMap(fileName, content));
 				return new SecretsPropertySource(sourceData);
 			}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/retry/secrets_enabled/BootstrapSecretsRetryEnabledTests.java
Patch:
@@ -43,7 +43,7 @@ static void setup() {
 	private Fabric8SecretsPropertySourceLocator propertySourceLocator;
 
 	@BeforeEach
-	public void beforeEach() {
+	void beforeEach() {
 		psl = propertySourceLocator;
 		verifiablePsl = propertySourceLocator;
 	}

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/fabric8/Fabric8UserAgentDefaultConfigurationTests.java
Patch:
@@ -37,7 +37,7 @@ class Fabric8UserAgentDefaultConfigurationTests {
 	@Test
 	void testUserAgent() {
 		String userAgent = client.getConfiguration().getUserAgent();
-		assertThat(userAgent).isEqualTo("fabric8-kubernetes-client/6.9.2");
+		assertThat(userAgent).isEqualTo("fabric8-kubernetes-client/6.13.4");
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocatorTests.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.ConfigMapConfigProperties;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.commons.config.NamespaceResolutionFailedException;
 import org.springframework.cloud.kubernetes.commons.config.RetryProperties;
 import org.springframework.core.env.PropertySource;
@@ -62,7 +63,7 @@ class KubernetesClientConfigMapPropertySourceLocatorTests {
 				.withNamespace("default")
 				.withResourceVersion("1")
 				.build())
-			.addToData("application.properties",
+			.addToData(Constants.APPLICATION_PROPERTIES,
 					"spring.cloud.kubernetes.configuration.watcher.refreshDelay=0\n"
 							+ "logging.level.org.springframework.cloud.kubernetes=TRACE")
 			.build());

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceTests.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.cloud.kubernetes.commons.config.ConfigUtils;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.commons.config.NamedConfigMapNormalizedSource;
 import org.springframework.cloud.kubernetes.commons.config.NormalizedSource;
 import org.springframework.mock.env.MockEnvironment;
@@ -59,7 +60,7 @@ class KubernetesClientConfigMapPropertySourceTests {
 				.withNamespace("default")
 				.withResourceVersion("1")
 				.build())
-			.addToData("application.properties",
+			.addToData(Constants.APPLICATION_PROPERTIES,
 					"spring.cloud.kubernetes.configuration.watcher.refreshDelay=0\n"
 							+ "logging.level.org.springframework.cloud.kubernetes=TRACE")
 			.build());
@@ -70,7 +71,7 @@ class KubernetesClientConfigMapPropertySourceTests {
 				.withNamespace("default")
 				.withResourceVersion("1")
 				.build())
-			.addToData("application.yaml", "dummy:\n  property:\n    string2: \"a\"\n    int2: 1\n    bool2: true\n")
+			.addToData(Constants.APPLICATION_YAML, "dummy:\n  property:\n    string2: \"a\"\n    int2: 1\n    bool2: true\n")
 			.build());
 
 	private static WireMockServer wireMockServer;

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/config/ConfigUtilsTests.java
Patch:
@@ -179,10 +179,10 @@ void testWithPrefixSortedName() {
 	void testMerge() {
 
 		StrippedSourceContainer configMapOne = new StrippedSourceContainer(Map.of(), "configmap-one",
-				Map.of("application.yaml", "propA: A\npropB: B"));
+				Map.of(Constants.APPLICATION_YAML, "propA: A\npropB: B"));
 
 		StrippedSourceContainer configMapOneK8s = new StrippedSourceContainer(Map.of(), "configmap-one-kubernetes",
-				Map.of("application.yaml", "propA: AA\npropC: C"));
+				Map.of(Constants.APPLICATION_YAML, "propA: AA\npropC: C"));
 
 		LinkedHashSet<String> sourceNames = Stream.of("configmap-one", "configmap-one-kubernetes")
 			.collect(Collectors.toCollection(LinkedHashSet::new));

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/config/SourceDataEntriesProcessorTests.java
Patch:
@@ -106,7 +106,7 @@ void twoEntriesOneIsYamlButNotTaken() {
 	void twoEntriesBothTaken() {
 
 		Map.Entry<String, String> one = Map.entry("one", "1");
-		Map.Entry<String, String> application = Map.entry("application.yaml", "color: \n blue");
+		Map.Entry<String, String> application = Map.entry(Constants.APPLICATION_YAML, "color: \n blue");
 		Map<String, String> map = Map.ofEntries(one, application);
 
 		Map<String, Object> result = SourceDataEntriesProcessor.processAllEntries(map, new MockEnvironment());
@@ -127,7 +127,7 @@ void twoEntriesBothTaken() {
 	void threeEntriesAllTaken() {
 
 		Map.Entry<String, String> one = Map.entry("one", "1");
-		Map.Entry<String, String> application = Map.entry("application.properties", "color=blue");
+		Map.Entry<String, String> application = Map.entry(Constants.APPLICATION_PROPERTIES, "color=blue");
 		Map.Entry<String, String> applicationDev = Map.entry("application-dev.properties", "fit=sport");
 		Map<String, String> map = Map.ofEntries(one, application, applicationDev);
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/test/java/org/springframework/cloud/kubernetes/configserver/KubernetesPropertySourceSupplierTests.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.cloud.config.environment.Environment;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.eq;
@@ -180,7 +181,7 @@ private static V1ConfigMap buildConfigMap(String name, String namespace) {
 		return new V1ConfigMapBuilder()
 			.withMetadata(
 					new V1ObjectMetaBuilder().withName(name).withNamespace(namespace).withResourceVersion("1").build())
-			.addToData("application.yaml", "dummy:\n  property:\n    string: \"" + name + "\"\n")
+			.addToData(Constants.APPLICATION_YAML, "dummy:\n  property:\n    string: \"" + name + "\"\n")
 			.build();
 	}
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/config_map_with_active_profile_no_profile/ConfigMapsWithProfilesNoActiveProfile.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.fabric8.config.TestApplication;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
@@ -54,7 +55,7 @@ static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
-		data.put("application.yml", readResourceFile("application-with-profiles.yaml"));
+		data.put(Constants.APPLICATION_YML, readResourceFile("application-with-profiles.yaml"));
 		mockClient.configMaps()
 			.inNamespace("test")
 			.resource(new ConfigMapBuilder().withNewMetadata()

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/config_map_with_profile_expression/ConfigMapsWithProfileExpression.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.fabric8.config.ConfigMapTestUtil;
 import org.springframework.cloud.kubernetes.fabric8.config.TestApplication;
 import org.springframework.test.context.ActiveProfiles;
@@ -55,7 +56,7 @@ static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
-		data.put("application.yml", ConfigMapTestUtil.readResourceFile("application-with-profiles.yaml"));
+		data.put(Constants.APPLICATION_YML, ConfigMapTestUtil.readResourceFile("application-with-profiles.yaml"));
 		mockClient.configMaps()
 			.inNamespace("test")
 			.resource(new ConfigMapBuilder().withNewMetadata()

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/config_map_with_profiles/ConfigMapsWithProfiles.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.fabric8.config.ConfigMapTestUtil;
 import org.springframework.cloud.kubernetes.fabric8.config.TestApplication;
 import org.springframework.test.context.ActiveProfiles;
@@ -58,7 +59,7 @@ static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
-		data.put("application.yml", ConfigMapTestUtil.readResourceFile("application-with-profiles.yaml"));
+		data.put(Constants.APPLICATION_YML, ConfigMapTestUtil.readResourceFile("application-with-profiles.yaml"));
 		mockClient.configMaps()
 			.inNamespace("test")
 			.resource(new ConfigMapBuilder().withNewMetadata()

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/config_maps_with_active_profiles/ConfigMapsWithActiveProfilesName.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.fabric8.config.TestApplication;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.web.reactive.server.WebTestClient;
@@ -59,7 +60,7 @@ public static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
-		data.put("application.yml", readResourceFile("application-with-profiles.yaml"));
+		data.put(Constants.APPLICATION_YML, readResourceFile("application-with-profiles.yaml"));
 		mockClient.configMaps()
 			.inNamespace("test")
 			.resource(new ConfigMapBuilder().withNewMetadata()
@@ -70,7 +71,7 @@ public static void setUpBeforeClass(KubernetesClient mockClient) {
 			.create();
 
 		HashMap<String, String> dataWithName = new HashMap<>();
-		dataWithName.put("application.yml", readResourceFile("application-with-active-profiles-name.yaml"));
+		dataWithName.put(Constants.APPLICATION_YML, readResourceFile("application-with-active-profiles-name.yaml"));
 		mockClient.configMaps()
 			.inNamespace("test")
 			.resource(new ConfigMapBuilder().withNewMetadata()

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/config_maps_without_profiles/ConfigMapsWithoutProfiles.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.fabric8.config.ConfigMapTestUtil;
 import org.springframework.cloud.kubernetes.fabric8.config.TestApplication;
 import org.springframework.test.context.ActiveProfiles;
@@ -52,7 +53,7 @@ static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
-		data.put("application.yml", ConfigMapTestUtil.readResourceFile("application-without-profiles.yaml"));
+		data.put(Constants.APPLICATION_YML, ConfigMapTestUtil.readResourceFile("application-without-profiles.yaml"));
 		mockClient.configMaps()
 			.inNamespace("test")
 			.resource(new ConfigMapBuilder().withNewMetadata()

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/BootstrapEnabledPollingReloadConfigMapMountDelegate.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.cloud.kubernetes.integration.tests.commons.fabric8_client.Util;
 import org.springframework.http.HttpMethod;
@@ -71,7 +72,7 @@ static void testPollingReloadConfigMapWithBootstrap(KubernetesClient client, Uti
 		// our polling will detect that and restart the app
 		InputStream configMapStream = util.inputStream("configmap.yaml");
 		ConfigMap configMap = Serialization.unmarshal(configMapStream, ConfigMap.class);
-		configMap.setData(Map.of("application.properties", "from.properties.key=as-mount-changed"));
+		configMap.setData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=as-mount-changed"));
 		client.configMaps().inNamespace("default").resource(configMap).createOrReplace();
 
 		await().timeout(Duration.ofSeconds(360))

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/ConfigMapMountPollingReloadDelegate.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.cloud.kubernetes.integration.tests.commons.fabric8_client.Util;
 import org.springframework.http.HttpMethod;
@@ -75,7 +76,7 @@ static void testConfigMapMountPollingReload(KubernetesClient client, Util util,
 		// our polling will detect that and restart the app
 		InputStream configMapStream = util.inputStream("configmap.yaml");
 		ConfigMap configMap = Serialization.unmarshal(configMapStream, ConfigMap.class);
-		configMap.setData(Map.of("application.properties", "from.properties.key=as-mount-changed"));
+		configMap.setData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=as-mount-changed"));
 		client.configMaps().inNamespace("default").resource(configMap).createOrReplace();
 
 		await().timeout(Duration.ofSeconds(360))

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/client/reload/SecretsEventsReloadDelegate.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.http.HttpMethod;
 import org.springframework.web.reactive.function.client.WebClient;
@@ -68,7 +69,7 @@ static void testSecretReload(KubernetesClient client, K3sContainer container, St
 				.withNamespace("default")
 				.withName("event-reload")
 				.build())
-			.withData(Map.of("application.properties",
+			.withData(Map.of(Constants.APPLICATION_PROPERTIES,
 					Base64.getEncoder().encodeToString("from.secret.properties.key=secret-initial".getBytes())))
 			.build();
 		client.secrets().inNamespace("default").resource(secret).createOrReplace();
@@ -89,7 +90,7 @@ static void testSecretReload(KubernetesClient client, K3sContainer container, St
 		// change data
 		secret = new SecretBuilder()
 			.withMetadata(new ObjectMetaBuilder().withNamespace("default").withName("event-reload").build())
-			.withData(Map.of("application.properties",
+			.withData(Map.of(Constants.APPLICATION_PROPERTIES,
 					Base64.getEncoder().encodeToString("from.secret.properties.key=secret-initial-changed".getBytes())))
 			.build();
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-reload/src/test/java/org/springframework/cloud/kubernetes/k8s/client/reload/configmap/BootstrapEnabledPollingReloadConfigMapMountDelegate.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.cloud.kubernetes.integration.tests.commons.native_client.Util;
 import org.springframework.http.HttpMethod;
@@ -80,7 +81,7 @@ static void testBootstrapEnabledPollingReloadConfigMapMount(String deploymentNam
 		// replace data in configmap and wait for k8s to pick it up
 		// our polling will detect that and restart the app
 		V1ConfigMap configMap = (V1ConfigMap) util.yaml("configmap-mount.yaml");
-		configMap.setData(Map.of("application.properties", "from.properties.key=as-mount-changed"));
+		configMap.setData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=as-mount-changed"));
 		new CoreV1Api().replaceNamespacedConfigMap("poll-reload-as-mount", NAMESPACE, configMap, null, null, null,
 				null);
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-reload/src/test/java/org/springframework/cloud/kubernetes/k8s/client/reload/configmap/PollingReloadConfigMapMountDelegate.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.cloud.kubernetes.integration.tests.commons.native_client.Util;
 import org.springframework.http.HttpMethod;
@@ -82,7 +83,7 @@ static void testPollingReloadConfigMapMount(String deploymentName, K3sContainer
 		// replace data in configmap and wait for k8s to pick it up
 		// our polling will detect that and restart the app
 		V1ConfigMap configMap = (V1ConfigMap) util.yaml("configmap-mount.yaml");
-		configMap.setData(Map.of("application.properties", "from.properties.key=as-mount-changed"));
+		configMap.setData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=as-mount-changed"));
 		new CoreV1Api().replaceNamespacedConfigMap("poll-reload-as-mount", "default", configMap, null, null, null,
 				null);
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-reload/src/test/java/org/springframework/cloud/kubernetes/k8s/client/reload/secret/DataChangesInSecretsReloadDelegate.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.http.HttpMethod;
 import org.springframework.web.reactive.function.client.WebClient;
@@ -71,7 +72,7 @@ static void testDataChangesInSecretsReload(K3sContainer k3sContainer, String dep
 				.withNamespace(NAMESPACE)
 				.withName("event-reload")
 				.build())
-			.withData(Map.of("application.properties", "from.properties.key=initial".getBytes()))
+			.withData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=initial".getBytes()))
 			.build();
 
 		replaceSecret(secret, "event-reload");
@@ -96,7 +97,7 @@ static void testDataChangesInSecretsReload(K3sContainer k3sContainer, String dep
 				.withNamespace(NAMESPACE)
 				.withName("event-reload")
 				.build())
-			.withData(Map.of("application.properties", "from.properties.key=change-initial".getBytes()))
+			.withData(Map.of(Constants.APPLICATION_PROPERTIES, "from.properties.key=change-initial".getBytes()))
 			.build();
 
 		replaceSecret(secret, "event-reload");

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-k8s-client-reload/src/test/java/org/springframework/cloud/kubernetes/k8s/client/reload/secret/K8sClientSecretsReloadIT.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.jupiter.api.Test;
 import org.testcontainers.k3s.K3sContainer;
 
+import org.springframework.cloud.kubernetes.commons.config.Constants;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Phase;
 import org.springframework.cloud.kubernetes.integration.tests.commons.native_client.Util;
@@ -121,7 +122,7 @@ void testSecretEventReload() throws Exception {
 
 		V1Secret v1Secret = (V1Secret) util.yaml("secret.yaml");
 		Map<String, byte[]> secretData = v1Secret.getData();
-		secretData.replace("application.properties", "from.properties.key: after-change".getBytes());
+		secretData.replace(Constants.APPLICATION_PROPERTIES, "from.properties.key: after-change".getBytes());
 		v1Secret.setData(secretData);
 		coreV1Api.replaceNamespacedSecret("event-reload", NAMESPACE, v1Secret, null, null, null, null);
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsTest.java
Patch:
@@ -46,7 +46,7 @@ void afterEach() {
 	}
 
 	@Test
-	public void testConfigMapList() {
+	void testConfigMapList() {
 		mockClient.configMaps()
 			.inNamespace("ns1")
 			.resource(new ConfigMapBuilder().withNewMetadata().withName("empty").endMetadata().build())

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/HealthIndicatorTest.java
Patch:
@@ -25,11 +25,10 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.web.server.LocalManagementPort;
-import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = TestApplication.class,
 		properties = { "spring.main.cloud-platform=KUBERNETES", "management.endpoint.health.show-details=always" })
 @EnableKubernetesMockClient(crud = true, https = false)
 class HealthIndicatorTest {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MissingActuatorTest.java
Patch:
@@ -35,14 +35,14 @@
 
 @ExtendWith({ SpringExtension.class, OutputCaptureExtension.class })
 @ClassPathExclusions({ "spring-boot-actuator-autoconfigure-*.jar", "spring-boot-starter-actuator-*.jar" })
-public class MissingActuatorTest {
+class MissingActuatorTest {
 
 	private static ConfigurableApplicationContext getApplicationContext(String... properties) {
 		return new SpringApplicationBuilder(Config.class).web(WebApplicationType.NONE).properties(properties).run();
 	}
 
 	@Test
-	public void unknownClassProtected(CapturedOutput capturedOutput) {
+	void unknownClassProtected(CapturedOutput capturedOutput) {
 		try (ConfigurableApplicationContext context = getApplicationContext("debug=true",
 				"spring.cloud.kubernetes.client.namespace=default")) {
 			String output = capturedOutput.toString();

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/bootstrap/kubernetes_disabled/KubernetesDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.bootstrap;
+package org.springframework.cloud.kubernetes.fabric8.config.bootstrap.kubernetes_disabled;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/bootstrap/kubernetes_disabled_secrets_enabled/KubernetesEnabledSecretsDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.bootstrap;
+package org.springframework.cloud.kubernetes.fabric8.config.bootstrap.kubernetes_disabled_secrets_enabled;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/bootstrap/kubernetes_enabled/KubernetesEnabled.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/bootstrap/kubernetes_enabled_config_disabled/KubernetesEnabledConfigDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.bootstrap;
+package org.springframework.cloud.kubernetes.fabric8.config.bootstrap.kubernetes_enabled_config_disabled;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/bootstrap/kubernetes_enabled_explicitly/KubernetesEnabledExplicitly.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.bootstrap;
+package org.springframework.cloud.kubernetes.fabric8.config.bootstrap.kubernetes_enabled_explicitly;
 
 import org.junit.jupiter.api.Test;
 
@@ -28,7 +28,7 @@
 /**
  * @author wind57
  */
-abstract class KubernetesEnabledOnPurpose {
+abstract class KubernetesEnabledExplicitly {
 
 	@Autowired
 	private ConfigurableApplicationContext context;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/bootstrap/kubernetes_secrets_enabled_config_disabled/KubernetesEnabledSecretsAndConfigDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.bootstrap;
+package org.springframework.cloud.kubernetes.fabric8.config.bootstrap.kubernetes_secrets_enabled_config_disabled;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example/App.java
Patch:
@@ -25,7 +25,7 @@
  */
 @EnableConfigurationProperties(GreetingProperties.class)
 @SpringBootApplication
-public class App {
+class App {
 
 	public static void main(String[] args) {
 		SpringApplication.run(App.class, args);

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/labeled_config_map_with_prefix/LabeledConfigMapWithPrefixApp.java
Patch:
@@ -26,7 +26,7 @@
 
 @SpringBootApplication
 @EnableConfigurationProperties({ One.class, Two.class, Three.class, Four.class })
-public class LabeledConfigMapWithPrefixApp {
+class LabeledConfigMapWithPrefixApp {
 
 	public static void main(String[] args) {
 		SpringApplication.run(LabeledConfigMapWithPrefixApp.class, args);

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload/ConfigReloadAutoConfigurationTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigurationChangeDetector;
 import org.springframework.cloud.kubernetes.commons.config.reload.PollingConfigMapChangeDetector;
 import org.springframework.cloud.kubernetes.commons.config.reload.PollingSecretsChangeDetector;
-import org.springframework.cloud.kubernetes.fabric8.config.KubernetesConfigTestBase;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/EventBasedConfigurationChangeDetectorTests.java
Patch:
@@ -45,7 +45,7 @@
  */
 class EventBasedConfigurationChangeDetectorTests {
 
-	@SuppressWarnings({ "unchecked", "raw" })
+	@SuppressWarnings({ "unchecked", "rawtypes" })
 	@Test
 	void verifyConfigChangesAccountsForBootstrapPropertySources() {
 		MockEnvironment env = new MockEnvironment();

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/HttpRefreshTrigger.java
Patch:
@@ -24,7 +24,6 @@
 import reactor.core.publisher.Mono;
 
 import org.springframework.cloud.client.ServiceInstance;
-import org.springframework.cloud.kubernetes.client.config.reload.KubernetesClientEventBasedSecretsChangeDetector;
 import org.springframework.cloud.kubernetes.client.discovery.reactive.KubernetesInformerReactiveDiscoveryClient;
 import org.springframework.core.log.LogAccessor;
 import org.springframework.http.ResponseEntity;
@@ -37,8 +36,7 @@
  */
 final class HttpRefreshTrigger implements RefreshTrigger {
 
-	private static final LogAccessor LOG = new LogAccessor(
-			LogFactory.getLog(KubernetesClientEventBasedSecretsChangeDetector.class));
+	private static final LogAccessor LOG = new LogAccessor(LogFactory.getLog(HttpRefreshTrigger.class));
 
 	private final KubernetesInformerReactiveDiscoveryClient kubernetesReactiveDiscoveryClient;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/LeaderProperties.java
Patch:
@@ -106,7 +106,7 @@ public void setNamespace(String namespace) {
 	}
 
 	public String getNamespace(String defaultValue) {
-		if (!StringUtils.hasText(defaultValue)) {
+		if (!StringUtils.hasText(namespace)) {
 			return defaultValue;
 		}
 

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/Images.java
Patch:
@@ -42,7 +42,7 @@ public final class Images {
 
 	private static final String ISTIO_PROXY_V2_TAR = ISTIO_PROXY_V2.replace('/', '-') + ":" + istioVersion();
 
-	private static final String ISTIO_PILOT = "istio/istioctl";
+	private static final String ISTIO_PILOT = "istio/pilot";
 
 	private static final String ISTIO_PILOT_TAR = ISTIO_PILOT.replace('/', '-') + ":" + istioVersion();
 

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/Commons.java
Patch:
@@ -38,7 +38,6 @@
 import org.testcontainers.containers.Container;
 import org.testcontainers.k3s.K3sContainer;
 import org.testcontainers.utility.DockerImageName;
-import org.testcontainers.utility.MountableFile;
 
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.util.ReflectionUtils;
@@ -93,8 +92,6 @@ private Commons() {
 
 	private static final K3sContainer CONTAINER = new FixedPortsK3sContainer(DockerImageName.parse(Commons.RANCHER))
 			.configureFixedPorts(EXPOSED_PORTS).withFileSystemBind(TEMP_FOLDER, TEMP_FOLDER)
-			.withCopyFileToContainer(MountableFile.forClasspathResource(LOCAL_ISTIO_BIN_PATH + "/istioctl", 0744),
-					"/tmp/istioctl")
 			.withCommand(Commons.RANCHER_COMMAND).withReuse(true);
 
 	public static K3sContainer container() {

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientAutoConfiguration.java
Patch:
@@ -73,7 +73,7 @@ public KubernetesNamespaceProvider kubernetesNamespaceProvider(Environment envir
 	@ConditionalOnMissingBean
 	public KubernetesClientPodUtils kubernetesPodUtils(CoreV1Api client,
 			KubernetesNamespaceProvider kubernetesNamespaceProvider) {
-		return new KubernetesClientPodUtils(client, kubernetesNamespaceProvider.getNamespace());
+		return new KubernetesClientPodUtils(client, kubernetesNamespaceProvider.getNamespace(), true);
 	}
 
 }

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientHealthIndicator.java
Patch:
@@ -41,7 +41,7 @@ public KubernetesClientHealthIndicator(PodUtils<V1Pod> utils) {
 
 	@Override
 	protected Map<String, Object> getDetails() {
-		V1Pod current = this.utils.currentPod().get();
+		V1Pod current = utils.currentPod().get();
 		if (current != null) {
 			Map<String, Object> details = CollectionUtils.newHashMap(8);
 			details.put(INSIDE, true);

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientInfoContributor.java
Patch:
@@ -41,7 +41,7 @@ public KubernetesClientInfoContributor(PodUtils<V1Pod> utils) {
 
 	@Override
 	public Map<String, Object> getDetails() {
-		V1Pod current = this.utils.currentPod().get();
+		V1Pod current = utils.currentPod().get();
 		if (current != null) {
 			Map<String, Object> details = CollectionUtils.newHashMap(7);
 			details.put(INSIDE, true);

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/profile/KubernetesClientProfileEnvironmentPostProcessor.java
Patch:
@@ -33,7 +33,8 @@ public class KubernetesClientProfileEnvironmentPostProcessor extends AbstractKub
 	@Override
 	protected boolean isInsideKubernetes(Environment environment) {
 		CoreV1Api api = new CoreV1Api();
-		KubernetesClientPodUtils utils = new KubernetesClientPodUtils(api, environment.getProperty(NAMESPACE_PROPERTY));
+		KubernetesClientPodUtils utils = new KubernetesClientPodUtils(api, environment.getProperty(NAMESPACE_PROPERTY),
+				false);
 		return environment.containsProperty(ENV_SERVICE_HOST) || utils.isInsideKubernetes();
 	}
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/discovery/KubernetesDiscoveryClientHealthIndicatorInitializer.java
Patch:
@@ -48,7 +48,7 @@ private void postConstruct() {
 		InstanceRegisteredEvent<RegisteredEventSource> instanceRegisteredEvent = new InstanceRegisteredEvent<>(
 				new RegisteredEventSource("kubernetes", podUtils.isInsideKubernetes(), podUtils.currentPod().get()),
 				null);
-		this.applicationEventPublisher.publishEvent(instanceRegisteredEvent);
+		applicationEventPublisher.publishEvent(instanceRegisteredEvent);
 	}
 
 	/**

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/discovery/ConditionalOnKubernetesCatalogWatcherEnabled.java
Patch:
@@ -37,6 +37,8 @@
 @Documented
 @Inherited
 @ConditionalOnDiscoveryEnabled
+@ConditionalOnKubernetesDiscoveryEnabled
+@ConditionalOnBlockingOrReactiveDiscoveryEnabled
 @ConditionalOnKubernetesCatalogEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public @interface ConditionalOnKubernetesCatalogWatcherEnabled {

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesClientInformerSelectiveNamespacesAutoConfiguration.java
Patch:
@@ -67,10 +67,8 @@ public class KubernetesClientInformerSelectiveNamespacesAutoConfiguration {
 			LogFactory.getLog(KubernetesClientInformerSelectiveNamespacesAutoConfiguration.class));
 
 	// we rely on the order of namespaces to enable listers, as such provide a bean of
-	// namespaces
-	// as a list, instead of the incoming Set.
+	// namespaces as a list, instead of the incoming Set.
 	@Bean
-	@ConditionalOnMissingBean
 	public List<String> selectiveNamespaces(KubernetesDiscoveryProperties properties) {
 		List<String> selectiveNamespaces = properties.namespaces().stream().sorted().toList();
 		LOG.debug(() -> "using selective namespaces : " + selectiveNamespaces);

File: spring-cloud-kubernetes-client-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/client/loadbalancer/KubernetesClientServicesListSupplier.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * @author Ryan Baxter
  */
-public class KubernetesClientServicesListSupplier extends KubernetesServicesListSupplier {
+public class KubernetesClientServicesListSupplier extends KubernetesServicesListSupplier<V1Service> {
 
 	private static final Log LOG = LogFactory.getLog(KubernetesClientServicesListSupplier.class);
 
@@ -47,7 +47,8 @@ public class KubernetesClientServicesListSupplier extends KubernetesServicesList
 
 	private KubernetesNamespaceProvider kubernetesNamespaceProvider;
 
-	public KubernetesClientServicesListSupplier(Environment environment, KubernetesServiceInstanceMapper mapper,
+	public KubernetesClientServicesListSupplier(Environment environment,
+			KubernetesServiceInstanceMapper<V1Service> mapper,
 			KubernetesDiscoveryProperties discoveryProperties, CoreV1Api coreV1Api,
 			KubernetesNamespaceProvider kubernetesNamespaceProvider) {
 		super(environment, mapper, discoveryProperties);

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/loadbalancer/KubernetesServicesListSupplier.java
Patch:
@@ -32,15 +32,15 @@
  *
  * @author Piotr Minkowski
  */
-public abstract class KubernetesServicesListSupplier implements ServiceInstanceListSupplier {
+public abstract class KubernetesServicesListSupplier<T> implements ServiceInstanceListSupplier {
 
 	protected final Environment environment;
 
 	protected final KubernetesDiscoveryProperties discoveryProperties;
 
-	protected final KubernetesServiceInstanceMapper mapper;
+	protected final KubernetesServiceInstanceMapper<T> mapper;
 
-	public KubernetesServicesListSupplier(Environment environment, KubernetesServiceInstanceMapper mapper,
+	public KubernetesServicesListSupplier(Environment environment, KubernetesServiceInstanceMapper<T> mapper,
 			KubernetesDiscoveryProperties discoveryProperties) {
 		this.environment = environment;
 		this.discoveryProperties = discoveryProperties;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/Fabric8ServicesListSupplier.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Piotr Minkowski
  */
-public class Fabric8ServicesListSupplier extends KubernetesServicesListSupplier {
+public class Fabric8ServicesListSupplier extends KubernetesServicesListSupplier<Service> {
 
 	private final KubernetesClient kubernetesClient;
 

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServiceListSupplierTests.java
Patch:
@@ -77,7 +77,7 @@ void testPositiveMatch() {
 		when(this.serviceOperation.inNamespace("test")).thenReturn(namespaceOperation);
 		when(this.namespaceOperation.withName("test-service")).thenReturn(this.serviceResource);
 		when(this.serviceResource.get()).thenReturn(buildService("test-service", 8080));
-		KubernetesServicesListSupplier supplier = new Fabric8ServicesListSupplier(environment, client, mapper,
+		KubernetesServicesListSupplier<Service> supplier = new Fabric8ServicesListSupplier(environment, client, mapper,
 				KubernetesDiscoveryProperties.DEFAULT);
 		List<ServiceInstance> instances = supplier.get().blockFirst();
 		assert instances != null;
@@ -98,7 +98,7 @@ void testPositiveMatchAllNamespaces() {
 		KubernetesDiscoveryProperties discoveryProperties = new KubernetesDiscoveryProperties(true, true, Set.of(),
 				true, 60, false, null, Set.of(), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0,
 				false);
-		KubernetesServicesListSupplier supplier = new Fabric8ServicesListSupplier(environment, client, mapper,
+		KubernetesServicesListSupplier<Service> supplier = new Fabric8ServicesListSupplier(environment, client, mapper,
 				discoveryProperties);
 		List<ServiceInstance> instances = supplier.get().blockFirst();
 		assert instances != null;

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8BootstrapConfiguration.java
Patch:
@@ -46,11 +46,11 @@
  * @author Ioannis Canellos
  */
 @Configuration(proxyBeanMethods = false)
-@Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
-@ConditionalOnClass({ ConfigMap.class, Secret.class })
-@AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnBootstrapEnabled
+@ConditionalOnClass({ ConfigMap.class, Secret.class })
+@Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
+@AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 public class Fabric8BootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/secrets_property_source/ConfigDataFabric8SecretsPropertySourceTest.java
Patch:
@@ -19,14 +19,11 @@
 import io.fabric8.kubernetes.client.KubernetesClient;
 import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.test.context.TestPropertySource;
-import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-@ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.config.import=kubernetes:" })
 @TestPropertySource("classpath:/application-secrets.properties")

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_prefix/LabeledConfigMapWithPrefixConfigDataTests.java
Patch:
@@ -29,7 +29,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledConfigMapWithPrefixConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledConfigMapWithPrefixConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_prefix/LabeledConfigMapWithPrefixTests.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 /**
- * Stud data is in
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledConfigMapWithPrefixConfigurationStub}
+ * Stub data is in
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledConfigMapWithPrefixConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_profile/LabeledConfigMapWithProfileConfigDataTests.java
Patch:
@@ -30,7 +30,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledConfigMapWithProfileConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledConfigMapWithProfileConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_profile/LabeledConfigMapWithProfileTests.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 /**
- * Stud data is in
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledConfigMapWithProfileConfigurationStub}
+ * Stub data is in
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledConfigMapWithProfileConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_secret_with_prefix/LabeledSecretWithPrefixConfigDataTests.java
Patch:
@@ -29,7 +29,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledSecretWithPrefixConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledSecretWithPrefixConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_secret_with_prefix/LabeledSecretWithPrefixTests.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledSecretWithPrefixConfigurationStub;
+import org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledSecretWithPrefixConfigurationStub;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 /**

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_secret_with_profile/LabeledSecretWithProfileConfigDataTests.java
Patch:
@@ -30,7 +30,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledSecretWithProfileConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledSecretWithProfileConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_secret_with_profile/LabeledSecretWithProfileTests.java
Patch:
@@ -39,7 +39,7 @@
 
 /**
  * Stubs for this test are in
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.LabeledSecretWithProfileConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.LabeledSecretWithProfileConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_prefix/NamedConfigMapWithPrefixConfigDataTests.java
Patch:
@@ -29,7 +29,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedConfigMapWithPrefixConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedConfigMapWithPrefixConfigurationStub.stubData;
 
 /**
  * @author Ryan Baxter

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_prefix/NamedConfigMapWithPrefixTests.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedConfigMapWithPrefixConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedConfigMapWithPrefixConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_profile/NamedConfigMapWithProfileApp.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedConfigMapWithProfileConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedConfigMapWithProfileConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_profile/NamedConfigMapWithProfileConfigDataTests.java
Patch:
@@ -30,7 +30,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedConfigMapWithProfileConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedConfigMapWithProfileConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_profile/NamedConfigMapWithProfileTests.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedConfigMapWithProfileConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedConfigMapWithProfileConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_prefix/NamedSecretWithPrefixConfigDataTests.java
Patch:
@@ -29,7 +29,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedSecretWithPrefixConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedSecretWithPrefixConfigurationStub.stubData;
 
 /**
  * @author Ryan Baxter

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_prefix/NamedSecretWithPrefixTests.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedSecretWithPrefixConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedSecretWithPrefixConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_profile/NamedSecretWithProfileConfigDataTests.java
Patch:
@@ -30,7 +30,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedSecretWithProfileConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedSecretWithProfileConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_profile/NamedSecretWithProfileTests.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedSecretWithProfileConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.NamedSecretWithProfileConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/single_source_multiple_files/SingleSourceMultipleFilesConfigDataTests.java
Patch:
@@ -30,7 +30,7 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SingleSourceMultipleFilesConfigurationStub.stubData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SingleSourceMultipleFilesConfigurationStub.stubData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/single_source_multiple_files/SingleSourceMultipleFilesTests.java
Patch:
@@ -29,7 +29,7 @@
  * @author wind57
  *
  * Stub for this test is here :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SingleSourceMultipleFilesConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SingleSourceMultipleFilesConfigurationStub}
  *
  * issue: https://github.com/spring-cloud/spring-cloud-kubernetes/issues/640
  *

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/sources_order/ConfigDataRetryableSourcesOrderTests.java
Patch:
@@ -32,12 +32,12 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SourcesOrderConfigurationStub.stubConfigMapData;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SourcesOrderConfigurationStub.stubSecretsData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SourcesOrderConfigurationStub.stubConfigMapData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SourcesOrderConfigurationStub.stubSecretsData;
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SourcesOrderConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SourcesOrderConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/sources_order/ConfigDataSourcesOrderTests.java
Patch:
@@ -29,8 +29,8 @@
 
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
 import static org.mockito.Mockito.mockStatic;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SourcesOrderConfigurationStub.stubConfigMapData;
-import static org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SourcesOrderConfigurationStub.stubSecretsData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SourcesOrderConfigurationStub.stubConfigMapData;
+import static org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SourcesOrderConfigurationStub.stubSecretsData;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/sources_order/SourcesOrderTests.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * The stub data for this test is in :
- * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.SourcesOrderConfigurationStub}
+ * {@link org.springframework.cloud.kubernetes.client.config.bootstrap.stubs.SourcesOrderConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/LabeledConfigMapWithPrefixConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Collections;
 import java.util.Map;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/LabeledConfigMapWithProfileConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Collections;
 import java.util.Map;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/LabeledSecretWithPrefixConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Collections;
 import java.util.Map;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/LabeledSecretWithProfileConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/NamedConfigMapWithPrefixConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Arrays;
 import java.util.Collections;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/NamedConfigMapWithProfileConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Arrays;
 import java.util.Collections;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/NamedSecretWithPrefixConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Arrays;
 import java.util.Collections;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/NamedSecretWithProfileConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.Arrays;
 import java.util.Collections;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/SingleSourceMultipleFilesConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap/stubs/SourcesOrderConfigurationStub.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap.stubs;
+package org.springframework.cloud.kubernetes.client.config.bootstrap.stubs;
 
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesClientBootstrapConfigurationInsideK8s.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesClientBootstrapConfigurationNotInsideK8s.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesEnabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesEnabledConfigDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesEnabledOnPurpose.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesEnabledSecretsAndConfigDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/bootstrap_configurations/KubernetesEnabledSecretsDisabled.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.boostrap_configuration;
+package org.springframework.cloud.kubernetes.client.config.bootstrap_configurations;
 
 import org.junit.jupiter.api.Test;
 

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatch.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.core.log.LogAccessor;
 import org.springframework.scheduling.annotation.Scheduled;
 
+import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.CATALOG_WATCH_PROPERTY_WITH_DEFAULT_VALUE;
 import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.DISCOVERY_GROUP;
 import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.DISCOVERY_VERSION;
 import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.ENDPOINT_SLICE;
@@ -67,7 +68,7 @@ public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
 		this.publisher = publisher;
 	}
 
-	@Scheduled(fixedDelayString = "${spring.cloud.kubernetes.discovery.catalogServicesWatchDelay:30000}")
+	@Scheduled(fixedDelayString = "${" + CATALOG_WATCH_PROPERTY_WITH_DEFAULT_VALUE + "}")
 	void catalogServicesWatch() {
 		try {
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-discoveryserver/src/main/java/org/springframework/cloud/kubernetes/discoveryserver/DiscoveryServerApplication.java
Patch:
@@ -18,11 +18,13 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
+import org.springframework.scheduling.annotation.EnableScheduling;
 
 /**
  * @author Ryan Baxter
  */
 @SpringBootApplication
+@EnableScheduling
 public class DiscoveryServerApplication {
 
 	public static void main(String[] args) {

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/ConfigServerBootstrapper.java
Patch:
@@ -79,7 +79,7 @@ private KubernetesConfigServerInstanceProvider getInstanceProvider(Binder binder
 					.orElseGet(() -> KubernetesDiscoveryProperties.DEFAULT);
 			KubernetesDiscoveryClientBlockingAutoConfiguration autoConfiguration = new KubernetesDiscoveryClientBlockingAutoConfiguration();
 			DiscoveryClient discoveryClient = autoConfiguration
-					.kubernetesDiscoveryClient(autoConfiguration.restTemplate(), kubernetesDiscoveryProperties);
+					.kubernetesDiscoveryClient(autoConfiguration.restTemplateBuilder(), kubernetesDiscoveryProperties);
 			return discoveryClient::getInstances;
 		}
 

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesReactiveDiscoveryClient.java
Patch:
@@ -40,14 +40,14 @@ public KubernetesReactiveDiscoveryClient(WebClient.Builder webClientBuilder,
 		if (!StringUtils.hasText(properties.getDiscoveryServerUrl())) {
 			throw new DiscoveryServerUrlInvalidException();
 		}
-		this.webClient = webClientBuilder.baseUrl(properties.getDiscoveryServerUrl()).build();
+		webClient = webClientBuilder.baseUrl(properties.getDiscoveryServerUrl()).build();
 	}
 
 	KubernetesReactiveDiscoveryClient(WebClient.Builder webClientBuilder, KubernetesDiscoveryProperties properties) {
 		if (!StringUtils.hasText(properties.discoveryServerUrl())) {
 			throw new DiscoveryServerUrlInvalidException();
 		}
-		this.webClient = webClientBuilder.baseUrl(properties.discoveryServerUrl()).build();
+		webClient = webClientBuilder.baseUrl(properties.discoveryServerUrl()).build();
 	}
 
 	@Override

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogWatch.java
Patch:
@@ -35,6 +35,7 @@
 import org.springframework.core.log.LogAccessor;
 import org.springframework.scheduling.annotation.Scheduled;
 
+import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.CATALOG_WATCH_PROPERTY_WITH_DEFAULT_VALUE;
 import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.DISCOVERY_GROUP;
 import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.DISCOVERY_VERSION;
 import static org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryConstants.ENDPOINT_SLICE;
@@ -66,7 +67,7 @@ public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
 		this.publisher = publisher;
 	}
 
-	@Scheduled(fixedDelayString = "${spring.cloud.kubernetes.discovery.catalogServicesWatchDelay:30000}")
+	@Scheduled(fixedDelayString = "${" + CATALOG_WATCH_PROPERTY_WITH_DEFAULT_VALUE + "}")
 	public void catalogServicesWatch() {
 		try {
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-discoveryserver/src/main/java/org/springframework/cloud/kubernetes/discoveryserver/DiscoveryServerApplication.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframewok.cloud.kubernetes.discoveryserver;
+package org.springframework.cloud.kubernetes.discoveryserver;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-discoveryserver/src/main/java/org/springframework/cloud/kubernetes/discoveryserver/DiscoveryServerController.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframewok.cloud.kubernetes.discoveryserver;
+package org.springframework.cloud.kubernetes.discoveryserver;
 
 import java.util.List;
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-discoveryserver/src/main/test/java/org/springframewok/cloud/kubernetes/discoveryserver/DiscoveryServerControllerTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframewok.cloud.kubernetes.discoveryserver;
+package org.springframework.cloud.kubernetes.discoveryserver;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-discoveryserver/src/main/test/java/org/springframewok/cloud/kubernetes/discoveryserver/DiscoveryServerIntegrationTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframewok.cloud.kubernetes.discoveryserver;
+package org.springframework.cloud.kubernetes.discoveryserver;
 
 import java.util.Collections;
 import java.util.HashMap;

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientBlockingAutoConfiguration.java
Patch:
@@ -21,10 +21,10 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.web.client.RestTemplateBuilder;
+import org.springframework.cloud.client.ConditionalOnBlockingDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled;
 import org.springframework.cloud.client.discovery.event.InstanceRegisteredEvent;
@@ -42,21 +42,20 @@
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnKubernetesDiscoveryEnabled
+@ConditionalOnBlockingDiscoveryEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @EnableConfigurationProperties({ DiscoveryClientHealthIndicatorProperties.class,
 		KubernetesDiscoveryClientProperties.class })
 class KubernetesDiscoveryClientBlockingAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnMissingClass("org.springframework.web.reactive.function.client.WebClient")
 	RestTemplate restTemplate() {
 		return new RestTemplateBuilder().build();
 	}
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnMissingClass("org.springframework.web.reactive.function.client.WebClient")
 	KubernetesDiscoveryClient kubernetesDiscoveryClient(RestTemplate restTemplate,
 			KubernetesDiscoveryClientProperties properties) {
 		return new KubernetesDiscoveryClient(restTemplate, properties);

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapsCache.java
Patch:
@@ -56,7 +56,8 @@ static List<StrippedSourceContainer> byNamespace(CoreV1Api coreV1Api, String nam
 			try {
 				b[0] = true;
 				return strippedConfigMaps(coreV1Api
-						.listNamespacedConfigMap(namespace, null, null, null, null, null, null, null, null, null, null)
+						.listNamespacedConfigMap(namespace, null, null, null,
+							null, null, null, null, null, null, null, null)
 						.getItems());
 			}
 			catch (ApiException apiException) {

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsCache.java
Patch:
@@ -58,7 +58,8 @@ static List<StrippedSourceContainer> byNamespace(CoreV1Api coreV1Api, String nam
 			try {
 				b[0] = true;
 				return strippedSecrets(coreV1Api
-						.listNamespacedSecret(namespace, null, null, null, null, null, null, null, null, null, null)
+						.listNamespacedSecret(namespace, null, null, null, null,
+							null, null, null, null, null, null, null)
 						.getItems());
 			}
 			catch (ApiException apiException) {

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedConfigMapChangeDetector.java
Patch:
@@ -125,7 +125,7 @@ void inform() {
 			factories.add(factory);
 			informer = factory.sharedIndexInformerFor(
 					(CallGeneratorParams params) -> coreV1Api.listNamespacedConfigMapCall(namespace, null, null, null,
-							null, filter[0], null, params.resourceVersion, null, params.timeoutSeconds, params.watch,
+							null, filter[0], null, params.resourceVersion, null, null, params.timeoutSeconds, params.watch,
 							null),
 					V1ConfigMap.class, V1ConfigMapList.class);
 

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedSecretsChangeDetector.java
Patch:
@@ -128,7 +128,7 @@ void inform() {
 			factories.add(factory);
 			informer = factory.sharedIndexInformerFor(
 					(CallGeneratorParams params) -> coreV1Api.listNamespacedSecretCall(namespace, null, null, null,
-							null, filter[0], null, params.resourceVersion, null, params.timeoutSeconds, params.watch,
+							null, filter[0], null, params.resourceVersion, null, null,  params.timeoutSeconds, params.watch,
 							null),
 					V1Secret.class, V1SecretList.class);
 

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesEndpointSlicesCatalogWatch.java
Patch:
@@ -81,7 +81,7 @@ else if (!context.properties().namespaces().isEmpty()) {
 	private List<V1EndpointSlice> endpointSlices(DiscoveryV1Api api, Map<String, String> labels) {
 		try {
 			return api.listEndpointSliceForAllNamespaces(null, null, null, labelSelector(labels), null, null, null,
-					null, null, null).getItems();
+					null, null, null, null).getItems();
 		}
 		catch (ApiException e) {
 			LOG.warn(e, () -> "can not list endpoint slices in all namespaces");
@@ -93,7 +93,7 @@ private List<V1EndpointSlice> namespacedEndpointSlices(DiscoveryV1Api api, Strin
 			Map<String, String> labels) {
 		try {
 			return api.listNamespacedEndpointSlice(namespace, null, null, null, null, labelSelector(labels), null, null,
-					null, null, null).getItems();
+					null, null, null, null).getItems();
 		}
 		catch (ApiException e) {
 			LOG.warn(e, () -> "can not list endpoint slices in namespace " + namespace);

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesEndpointsCatalogWatch.java
Patch:
@@ -91,7 +91,7 @@ else if (!context.properties().namespaces().isEmpty()) {
 	private List<V1Endpoints> endpoints(CoreV1Api client, Map<String, String> labels) {
 		try {
 			return client.listEndpointsForAllNamespaces(null, null, null, labelSelector(labels), null, null, null, null,
-					null, null).getItems();
+					null, null, null).getItems();
 		}
 		catch (ApiException e) {
 			LOG.warn(e, () -> "can not list endpoints in all namespaces");
@@ -102,7 +102,7 @@ private List<V1Endpoints> endpoints(CoreV1Api client, Map<String, String> labels
 	private List<V1Endpoints> namespacedEndpoints(CoreV1Api client, String namespace, Map<String, String> labels) {
 		try {
 			return client.listNamespacedEndpoints(namespace, null, null, null, null, labelSelector(labels), null, null,
-					null, null, null).getItems();
+					null, null, null, null).getItems();
 		}
 		catch (ApiException e) {
 			LOG.warn(e, () -> "can not list endpoints in namespace " + namespace);

File: spring-cloud-kubernetes-client-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/client/loadbalancer/KubernetesClientServicesListSupplier.java
Patch:
@@ -68,11 +68,12 @@ public Flux<List<ServiceInstance>> get() {
 		try {
 			if (discoveryProperties.allNamespaces()) {
 				services = coreV1Api.listServiceForAllNamespaces(null, null, "metadata.name=" + this.getServiceId(),
-						null, null, null, null, null, null, null).getItems();
+						null, null, null, null, null, null, null, null).getItems();
 			}
 			else {
 				services = coreV1Api.listNamespacedService(getNamespace(), null, null, null,
-						"metadata.name=" + this.getServiceId(), null, null, null, null, null, null).getItems();
+						"metadata.name=" + this.getServiceId(), null, null, null,
+					null, null, null, null).getItems();
 			}
 			services.forEach(service -> result.add(mapper.map(service)));
 		}

File: spring-cloud-kubernetes-client-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/KubernetesClientLoadBalancerServiceModeTests.java
Patch:
@@ -98,7 +98,7 @@ public CoreV1Api coreV1Api() {
 			try {
 				when(coreV1Api.listNamespacedService(eq("default"), eq(null), eq(null), eq(null),
 						eq("metadata.name=servicea-wiremock"), eq(null), eq(null), eq(null), eq(null), eq(null),
-						eq(null))).thenReturn(SERVICE_LIST);
+						eq(null), eq(null))).thenReturn(SERVICE_LIST);
 			}
 			catch (ApiException e) {
 				e.printStackTrace();

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.boot.web.client.RestTemplateBuilder;
@@ -34,6 +33,7 @@
 import org.springframework.cloud.client.discovery.event.InstanceRegisteredEvent;
 import org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties;
 import org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryClientHealthIndicator;
+import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesDiscoveryEnabled;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.annotation.Bean;
@@ -47,7 +47,7 @@
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
-@ConditionalOnProperty(value = "spring.cloud.kubernetes.discovery.enabled", matchIfMissing = true)
+@ConditionalOnKubernetesDiscoveryEnabled
 @EnableConfigurationProperties({ DiscoveryClientHealthIndicatorProperties.class,
 		KubernetesDiscoveryClientProperties.class })
 public class KubernetesDiscoveryClientAutoConfiguration {

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-istio-it/src/test/java/org/springframework/cloud/kubernetes/fabric8/istio/Fabric8IstioIT.java
Patch:
@@ -91,6 +91,7 @@ static void beforeAll() throws Exception {
 
 	@AfterAll
 	static void afterAll() throws Exception {
+		util.deleteNamespace("istio-system");
 		Commons.cleanUp(IMAGE_NAME, K3S);
 		Commons.systemPrune();
 	}

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/tests/commons/junit_extension/DisabledTestsCondition.java
Patch:
@@ -37,9 +37,11 @@
  */
 public class DisabledTestsCondition implements ExecutionCondition {
 
+	private static final boolean SKIP_RUNNING_TESTS = "true".equals(System.getProperty("spring.cloud.k8s.skip.tests"));
+
 	@Override
 	public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext extensionContext) {
-		if ("true".equals(System.getProperty("spring.cloud.k8s.skip.tests"))) {
+		if (SKIP_RUNNING_TESTS) {
 			System.out.println(
 					"\nspring.cloud.k8s.test.to.run -> " + extensionContext.getRequiredTestClass().getName() + " \n");
 			return ConditionEvaluationResult.disabled("");

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientUtils.java
Patch:
@@ -75,10 +75,10 @@ static boolean matchesServiceLabels(V1Service service, KubernetesDiscoveryProper
 			return false;
 		}
 
-		LOG.debug(() -> "Service labels from properties : " + properties.serviceLabels());
-		LOG.debug(() -> "Service labels from service : " + service.getMetadata().getLabels());
+		LOG.debug(() -> "Service labels from properties : " + propertiesServiceLabels);
+		LOG.debug(() -> "Service labels from service : " + serviceLabels);
 
-		return serviceLabels.keySet().containsAll(propertiesServiceLabels.keySet());
+		return serviceLabels.entrySet().containsAll(propertiesServiceLabels.entrySet());
 
 	}
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-config-it/src/test/java/org/springframework/cloud/kubernetes/client/config/it/ConfigMapAndSecretIT.java
Patch:
@@ -84,6 +84,7 @@ static void setup() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(K8S_CONFIG_CLIENT_IT_SERVICE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@AfterEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-configmap-event-reload-multiple-apps/spring-cloud-kubernetes-client-configuration-watcher-configmap-test-app/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/multiple/apps/ConfigurationWatcherMultipleAppsIT.java
Patch:
@@ -86,6 +86,7 @@ static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, K3S);
 		Commons.cleanUp(CONFIG_WATCHER_APP_A_IMAGE, K3S);
 		Commons.cleanUp(CONFIG_WATCHER_APP_B_IMAGE, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-configmap-event-reload/src/test/java/org/springframework/cloud/kubernetes/client/configmap/event/reload/ConfigMapEventReloadIT.java
Patch:
@@ -86,6 +86,7 @@ static void afterAll() throws Exception {
 		util.deleteNamespace("left");
 		util.deleteNamespace("right");
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-configmap-event-reload/src/test/java/org/springframework/cloud/kubernetes/client/configmap/event/reload/DataChangesInConfigMapReloadIT.java
Patch:
@@ -83,6 +83,7 @@ static void beforeAll() throws Exception {
 	static void afterAll() throws Exception {
 		util.deleteNamespace(LEFT_NAMESPACE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-configmap-polling-reload/src/test/java/org/springframework/cloud/kubernetes/client/configmap/polling/reload/BootstrapEnabledPollingReloadConfigMapMountIT.java
Patch:
@@ -78,6 +78,7 @@ static void beforeAll() throws Exception {
 	static void after() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-configmap-polling-reload/src/test/java/org/springframework/cloud/kubernetes/client/configmap/polling/reload/PollingReloadConfigMapMountIT.java
Patch:
@@ -78,6 +78,7 @@ static void beforeAll() throws Exception {
 	static void after() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-discovery-it/src/test/java/org/springframework/cloud/kubernetes/client/discovery/it/KubernetesClientDiscoveryClientIT.java
Patch:
@@ -90,6 +90,7 @@ static void beforeAll() throws Exception {
 	static void afterAll() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-discovery-it/src/test/java/org/springframework/cloud/kubernetes/client/discovery/it/KubernetesClientDiscoverySelectiveNamespacesIT.java
Patch:
@@ -102,6 +102,7 @@ static void afterAll() throws Exception {
 		util.deleteNamespace(NAMESPACE_A);
 		util.deleteNamespace(NAMESPACE_B);
 		manifests(Phase.DELETE);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-loadbalancer-it/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/it/LoadBalancerIT.java
Patch:
@@ -70,6 +70,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_LOADBALANCER_APP_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-reactive-discoveryclient-it/src/test/java/org/springframework/cloud/kubernetes/client/reactive/discovery/it/ReactiveDiscoveryClientIT.java
Patch:
@@ -73,6 +73,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_REACTIVE_DISCOVERY_APP_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-secrets-event-reload-multiple-apps/spring-cloud-kubernetes-client-configuration-watcher-secrets-test-app/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/multiple/apps/ConfigurationWatcherMultipleAppIT.java
Patch:
@@ -85,6 +85,7 @@ static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, K3S);
 		Commons.cleanUp(CONFIG_WATCHER_APP_A_IMAGE, K3S);
 		Commons.cleanUp(CONFIG_WATCHER_APP_B_IMAGE, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-secrets-event-reload/src/test/java/org/springframework/cloud/kubernetes/client/secrets/event/reload/DataChangesInSecretsReloadIT.java
Patch:
@@ -79,6 +79,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-secrets-event-reload/src/test/java/org/springframework/cloud/kubernetes/client/secrets/event/reload/SecretsEventReloadIT.java
Patch:
@@ -76,6 +76,7 @@ static void setup() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshIT.java
Patch:
@@ -73,6 +73,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshKafkaIT.java
Patch:
@@ -76,6 +76,7 @@ static void beforeAll() throws Exception {
 	static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, K3S);
 		Commons.cleanUp(CONFIG_WATCHER_IT_IMAGE, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshMultipleNamespacesIT.java
Patch:
@@ -81,6 +81,7 @@ static void afterAll() throws Exception {
 		util.deleteNamespace(LEFT_NAMESPACE);
 		util.deleteNamespace(RIGHT_NAMESPACE);
 		Commons.cleanUp(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshRabbitMQIT.java
Patch:
@@ -76,6 +76,7 @@ static void beforeAll() throws Exception {
 	static void afterAll() throws Exception {
 		Commons.cleanUp(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, K3S);
 		Commons.cleanUp(CONFIG_WATCHER_IT_IMAGE, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-core-k8s-client-it/src/test/java/org/springframework/cloud/kubernetes/core/k8s/it/ActuatorEndpointIT.java
Patch:
@@ -68,6 +68,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() {
 		coreK8sClientIt(Phase.DELETE);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-discoveryclient-it/src/test/java/org/springframework/cloud/kubernetes/discoveryclient/it/DiscoveryClientFilterNamespaceIT.java
Patch:
@@ -100,6 +100,7 @@ static void afterAll() throws Exception {
 		discoveryServer(Phase.DELETE);
 		util.deleteNamespace(NAMESPACE_LEFT);
 		util.deleteNamespace(NAMESPACE_RIGHT);
+		Commons.systemPrune();
 	}
 
 	@AfterEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-discoveryclient-it/src/test/java/org/springframework/cloud/kubernetes/discoveryclient/it/DiscoveryClientIT.java
Patch:
@@ -80,6 +80,7 @@ static void afterAll() throws Exception {
 
 		discoveryServer(Phase.DELETE);
 		discoveryIt(Phase.DELETE);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-catalog-watcher/src/test/java/org/springframework/cloud/kubernetes/fabric8/catalog/watch/Fabric8CatalogWatchWithNamespacesIT.java
Patch:
@@ -95,6 +95,7 @@ void beforeEach() {
 	static void afterAll() {
 		util.deleteNamespace(NAMESPACE_A);
 		util.deleteNamespace(NAMESPACE_B);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap-event-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/event/reload/ConfigMapEventReloadIT.java
Patch:
@@ -87,6 +87,7 @@ static void afterAll() throws Exception {
 		util.deleteNamespace("left");
 		util.deleteNamespace("right");
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap-event-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/event/reload/DataChangesInConfigMapReloadIT.java
Patch:
@@ -83,6 +83,7 @@ static void beforeAll() throws Exception {
 	static void afterAll() throws Exception {
 		util.deleteNamespace(LEFT_NAMESPACE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap-polling-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/polling/reload/BootstrapEnabledPollingReloadConfigMapMountIT.java
Patch:
@@ -76,6 +76,7 @@ static void beforeAll() throws Exception {
 	static void after() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap-polling-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/polling/reload/ConfigMapPollingReloadIT.java
Patch:
@@ -80,6 +80,7 @@ static void beforeAll() throws Exception {
 	static void after() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap-polling-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/polling/reload/PollingReloadConfigMapMountIT.java
Patch:
@@ -79,6 +79,7 @@ static void beforeAll() throws Exception {
 	static void after() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/Fabric8ConfigMapIT.java
Patch:
@@ -70,6 +70,7 @@ static void beforeAll() throws Exception {
 	static void afterAll() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery-with-bootstrap/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/bootstrap/Fabric8DiscoveryBootstrapIT.java
Patch:
@@ -80,6 +80,7 @@ static void after() throws Exception {
 		util.wiremock(NAMESPACE, "/wiremock", Phase.DELETE);
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/Fabric8DiscoveryClientHealthIT.java
Patch:
@@ -82,6 +82,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void after() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/Fabric8DiscoveryIT.java
Patch:
@@ -82,6 +82,7 @@ static void after() throws Exception {
 		util.wiremock(NAMESPACE, "/wiremock", Phase.DELETE);
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/Fabric8DiscoveryNamespaceFilterIT.java
Patch:
@@ -90,6 +90,7 @@ static void after() throws Exception {
 		util.deleteNamespace(NAMESPACE_LEFT);
 		util.deleteNamespace(NAMESPACE_RIGHT);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/Fabric8DiscoveryPodMetadataIT.java
Patch:
@@ -82,6 +82,7 @@ static void after() throws Exception {
 		util.busybox(NAMESPACE, Phase.DELETE);
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/it/Fabric8ClientLoadbalancerIT.java
Patch:
@@ -76,6 +76,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@BeforeEach

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-secrets-event-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/secrets/event/reload/DataChangesInSecretsReloadIT.java
Patch:
@@ -81,6 +81,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void after() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	/**

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-secrets-event-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/secrets/event/reload/SecretsEventsReloadIT.java
Patch:
@@ -80,6 +80,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void after() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-simple-core/src/test/java/org/springframework/cloud/kubernetes/fabric8/core/SimpleCoreIT.java
Patch:
@@ -72,6 +72,7 @@ static void beforeAll() throws Exception {
 	static void after() throws Exception {
 		manifests(Phase.DELETE);
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-istio-it/src/test/java/org/springframework/cloud/kubernetes/fabric8/istio/Fabric8IstioIT.java
Patch:
@@ -100,6 +100,7 @@ static void beforeAll() throws Exception {
 	@AfterAll
 	static void afterAll() throws Exception {
 		Commons.cleanUp(IMAGE_NAME, K3S);
+		Commons.systemPrune();
 	}
 
 	@AfterAll

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/KubernetesCommonsAutoConfigurationTests.java
Patch:
@@ -34,7 +34,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE,
 		classes = KubernetesCommonsAutoConfigurationTests.App.class,
 		properties = { "spring.cloud.kubernetes.client.password=mypassword",
-				"spring.cloud.kubernetes.client.proxy-password=myproxypassword" })
+				"spring.cloud.kubernetes.client.proxy-password=myproxypassword", "spring.cloud.config.enabled=false" })
 public class KubernetesCommonsAutoConfigurationTests {
 
 	@Autowired

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/boostrap/stubs/SourcesOrderConfigurationStub.java
Patch:
@@ -64,7 +64,7 @@ public ApiClient apiClient(WireMockServer wireMockServer) {
 		return apiClient;
 	}
 
-	private void stubConfigMapData() {
+	public static void stubConfigMapData() {
 
 		Map<String, String> configMapData = new HashMap<>();
 		configMapData.put("my.key", "from-configmap");
@@ -82,7 +82,7 @@ private void stubConfigMapData() {
 				.willReturn(WireMock.aResponse().withStatus(200).withBody(new JSON().serialize(allConfigMaps))));
 	}
 
-	private void stubSecretsData() {
+	public static void stubSecretsData() {
 
 		Map<String, byte[]> secretData = new HashMap<>();
 		secretData.put("my.key", "from-secret".getBytes(StandardCharsets.UTF_8));

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/config/KubernetesConfigDataLoaderTests.java
Patch:
@@ -137,8 +137,8 @@ void testBothRegistered() throws IOException {
 		ConfigData configData = loader.load(CONTEXT, EMPTY_RESOURCE);
 		Assertions.assertNotNull(configData);
 		Assertions.assertEquals(2, configData.getPropertySources().size());
-		Assertions.assertEquals("k8s-config-map", configData.getPropertySources().get(0).getName());
-		Assertions.assertEquals("k8s-secrets", configData.getPropertySources().get(1).getName());
+		Assertions.assertEquals("k8s-secrets", configData.getPropertySources().get(0).getName());
+		Assertions.assertEquals("k8s-config-map", configData.getPropertySources().get(1).getName());
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.cloud.kubernetes.commons.config.ConfigMapConfigProperties;
 import org.springframework.cloud.kubernetes.commons.config.ConfigMapPropertySourceLocator;
 import org.springframework.cloud.kubernetes.commons.config.NamespaceResolutionFailedException;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.util.StringUtils;
@@ -31,6 +32,7 @@
  * @author Ryan Baxter
  * @author Isik Erhan
  */
+@Order(0)
 public class KubernetesClientConfigMapPropertySourceLocator extends ConfigMapPropertySourceLocator {
 
 	private final CoreV1Api coreV1Api;

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceLocator.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.cloud.kubernetes.commons.config.NamespaceResolutionFailedException;
 import org.springframework.cloud.kubernetes.commons.config.SecretsConfigProperties;
 import org.springframework.cloud.kubernetes.commons.config.SecretsPropertySourceLocator;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.util.StringUtils;
@@ -33,6 +34,7 @@
  * @author Ryan Baxter
  * @author Isik Erhan
  */
+@Order(1)
 public class KubernetesClientSecretsPropertySourceLocator extends SecretsPropertySourceLocator {
 
 	private final CoreV1Api coreV1Api;

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/RetryableKubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.ConfigMapConfigProperties;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.PropertySource;
 import org.springframework.retry.annotation.Retryable;
@@ -31,6 +32,7 @@
  *
  * @author Ryan Baxter
  */
+@Order(0)
 class RetryableKubernetesClientConfigMapPropertySourceLocator extends KubernetesClientConfigMapPropertySourceLocator {
 
 	RetryableKubernetesClientConfigMapPropertySourceLocator(CoreV1Api coreV1Api, ConfigMapConfigProperties properties,

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/RetryableKubernetesClientSecretsPropertySourceLocator.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.SecretsConfigProperties;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.PropertySource;
 import org.springframework.retry.annotation.Retryable;
@@ -31,6 +32,7 @@
  *
  * @author Ryan Baxter
  */
+@Order(1)
 class RetryableKubernetesClientSecretsPropertySourceLocator extends KubernetesClientSecretsPropertySourceLocator {
 
 	RetryableKubernetesClientSecretsPropertySourceLocator(CoreV1Api coreV1Api,

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/RetryableFabric8ConfigMapPropertySourceLocator.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @author Ryan Baxter
  */
-@Order(1)
+@Order(0)
 class RetryableFabric8ConfigMapPropertySourceLocator extends Fabric8ConfigMapPropertySourceLocator {
 
 	RetryableFabric8ConfigMapPropertySourceLocator(KubernetesClient client, ConfigMapConfigProperties properties,

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/RetryableFabric8SecretsPropertySourceLocator.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.SecretsConfigProperties;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.PropertySource;
 import org.springframework.retry.annotation.Retryable;
@@ -31,6 +32,7 @@
  *
  * @author Ryan Baxter
  */
+@Order(1)
 class RetryableFabric8SecretsPropertySourceLocator extends Fabric8SecretsPropertySourceLocator {
 
 	RetryableFabric8SecretsPropertySourceLocator(KubernetesClient client, SecretsConfigProperties properties,

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -99,6 +99,7 @@ public Collection<PropertySource<?>> locateCollection(Environment environment) {
 
 	private void addPropertySourcesFromPaths(Environment environment, CompositePropertySource composite) {
 		Set<String> uniquePaths = new LinkedHashSet<>(properties.paths());
+		LOG.debug("paths property sources : " + uniquePaths);
 		uniquePaths.stream().map(Paths::get).filter(p -> {
 			boolean exists = Files.exists(p);
 			if (!exists) {
@@ -139,7 +140,8 @@ private void addPropertySourceIfNeeded(Function<String, Map<String, Object>> con
 			LOG.warn("Property source: " + name + "will be ignored because no properties could be found");
 		}
 		else {
-			composite.addFirstPropertySource(new MapPropertySource(name, map));
+			LOG.debug("will add file-based property source : " + name);
+			composite.addFirstPropertySource(new MountConfigMapPropertySource(name, map));
 		}
 	}
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/MountConfigMapPropertySource.java
Patch:
@@ -20,6 +20,9 @@
 
 import org.springframework.core.env.MapPropertySource;
 
+/**
+ * @author wind57
+ */
 public final class MountConfigMapPropertySource extends MapPropertySource {
 
 	public MountConfigMapPropertySource(String name, Map<String, Object> source) {

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -97,6 +97,7 @@ private MapPropertySource getMapPropertySourceForSingleConfigMap(ConfigurableEnv
 
 	private void addPropertySourcesFromPaths(Environment environment, CompositePropertySource composite) {
 		Set<String> uniquePaths = new LinkedHashSet<>(properties.getPaths());
+		LOG.debug("paths property sources : " + uniquePaths);
 		uniquePaths.stream().map(Paths::get).filter(p -> {
 			boolean exists = Files.exists(p);
 			if (!exists) {
@@ -137,7 +138,8 @@ private void addPropertySourceIfNeeded(Function<String, Map<String, Object>> con
 			LOG.warn("Property source: " + name + "will be ignored because no properties could be found");
 		}
 		else {
-			composite.addFirstPropertySource(new MapPropertySource(name, map));
+			LOG.debug("will add file-based property source : " + name);
+			composite.addFirstPropertySource(new MountConfigMapPropertySource(name, map));
 		}
 	}
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/ConfigReloadUtil.java
Patch:
@@ -52,11 +52,11 @@ public static boolean reload(String target, String eventSourceType, PropertySour
 
 		boolean changed = changed(sourceFromK8s, existingSources);
 		if (changed) {
-			LOG.info("Detected change in config maps");
+			LOG.info("Detected change in config maps/secrets");
 			return true;
 		}
 		else {
-			LOG.debug("No change detected in config maps, reload will not happen");
+			LOG.debug("No change detected in config maps/secrets, reload will not happen");
 		}
 
 		return false;

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshRabbitMQIT.java
Patch:
@@ -104,7 +104,7 @@ void testRefresh() {
 		WebClient serviceClient = builder.baseUrl("http://localhost:80/it").build();
 
 		Boolean[] value = new Boolean[1];
-		await().pollInterval(Duration.ofSeconds(3)).atMost(Duration.ofSeconds(90)).until(() -> {
+		await().pollInterval(Duration.ofSeconds(3)).atMost(Duration.ofSeconds(180)).until(() -> {
 			value[0] = serviceClient.method(HttpMethod.GET).retrieve().bodyToMono(Boolean.class).retryWhen(retrySpec())
 					.block();
 			return value[0];

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-configmap-event-reload/src/test/java/org/springframework/cloud/kubernetes/client/configmap/event/reload/ConfigMapEventReloadIT.java
Patch:
@@ -301,7 +301,8 @@ private static void manifests(String deploymentRoot, Phase phase, boolean secret
 							.orElse(List.of()));
 
 			if (secretsDisabled) {
-				V1EnvVar secretsDisabledEnvVar = new V1EnvVar().name("SPRING_CLOUD_KUBERNETES_SECRETS_ENABLED").value("FALSE");
+				V1EnvVar secretsDisabledEnvVar = new V1EnvVar().name("SPRING_CLOUD_KUBERNETES_SECRETS_ENABLED")
+						.value("FALSE");
 				envVars.add(secretsDisabledEnvVar);
 				deployment.getSpec().getTemplate().getSpec().getContainers().get(0).setEnv(envVars);
 			}

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/reactive/KubernetesReactiveDiscoveryClient.java
Patch:
@@ -45,7 +45,7 @@ public KubernetesReactiveDiscoveryClient(KubernetesClient client, KubernetesDisc
 
 	@Override
 	public String description() {
-		return "Kubernetes Reactive Discovery Client";
+		return "Fabric8 Kubernetes Reactive Discovery Client";
 	}
 
 	@Override

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/reactive/KubernetesReactiveDiscoveryClientTests.java
Patch:
@@ -76,7 +76,7 @@ void afterEach() {
 	void verifyDefaults() {
 		ReactiveDiscoveryClient client = new KubernetesReactiveDiscoveryClient(kubernetesClient,
 				KubernetesDiscoveryProperties.DEFAULT, KubernetesClient::services);
-		assertThat(client.description()).isEqualTo("Kubernetes Reactive Discovery Client");
+		assertThat(client.description()).isEqualTo("Fabric8 Kubernetes Reactive Discovery Client");
 		assertThat(client.getOrder()).isEqualTo(ReactiveDiscoveryClient.DEFAULT_ORDER);
 	}
 

File: spring-cloud-kubernetes-client-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/KubernetesClientLoadBalancerServiceModeTests.java
Patch:
@@ -30,6 +30,7 @@
 import io.kubernetes.client.util.ClientBuilder;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -128,6 +129,7 @@ public KubernetesInformerDiscoveryClient kubernetesInformerDiscoveryClient() {
 			// Mock this so the real implementation does not try to connect to the K8S API
 			// Server
 			KubernetesInformerDiscoveryClient client = mock(KubernetesInformerDiscoveryClient.class);
+			Mockito.when(client.getOrder()).thenReturn(0);
 			return client;
 		}
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/discovery/KubernetesDiscoveryClientHealthIndicatorInitializer.java
Patch:
@@ -45,9 +45,10 @@ public KubernetesDiscoveryClientHealthIndicatorInitializer(PodUtils<?> podUtils,
 	@PostConstruct
 	private void postConstruct() {
 		LOG.debug(() -> "publishing InstanceRegisteredEvent");
-		this.applicationEventPublisher.publishEvent(new InstanceRegisteredEvent<>(
+		InstanceRegisteredEvent<RegisteredEventSource> instanceRegisteredEvent = new InstanceRegisteredEvent<>(
 				new RegisteredEventSource("kubernetes", podUtils.isInsideKubernetes(), podUtils.currentPod().get()),
-				null));
+				null);
+		this.applicationEventPublisher.publishEvent(instanceRegisteredEvent);
 	}
 
 	/**

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/native_client/Util.java
Patch:
@@ -132,6 +132,9 @@ public void createAndWait(String namespace, String name, V1Deployment deployment
 			}
 		}
 		catch (Exception e) {
+			if (e instanceof ApiException apiException) {
+				System.out.println(apiException.getResponseBody());
+			}
 			e.printStackTrace();
 			throw new RuntimeException(e);
 		}

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/main/java/org/springframework/cloud/kubernetes/configserver/KubernetesEnvironmentRepository.java
Patch:
@@ -64,10 +64,10 @@ public Environment findOne(String application, String profile, String label, boo
 		try {
 			StandardEnvironment springEnv = new StandardEnvironment();
 			springEnv.setActiveProfiles(profiles);
-			addApplicationConfiguration(environment, springEnv, "application");
 			if (!"application".equalsIgnoreCase(application)) {
 				addApplicationConfiguration(environment, springEnv, application);
 			}
+			addApplicationConfiguration(environment, springEnv, "application");
 			return environment;
 		}
 		catch (Exception e) {

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-discovery-it/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesClientDiscoveryClientIT.java
Patch:
@@ -119,7 +119,8 @@ void testSimple() {
 		Assertions.assertEquals(serviceInstance.getServiceId(), "spring-cloud-kubernetes-client-discovery-it");
 		Assertions.assertNotNull(serviceInstance.getHost());
 		Assertions.assertEquals(serviceInstance.getMetadata(),
-				Map.of("http", "8080", "app", "spring-cloud-kubernetes-client-discovery-it"));
+				Map.of("app", "spring-cloud-kubernetes-client-discovery-it", "custom-spring-k8s", "spring-k8s",
+					"http", "8080", "k8s_namespace", "default", "type", "ClusterIP"));
 		Assertions.assertEquals(serviceInstance.getPort(), 8080);
 		Assertions.assertEquals(serviceInstance.getNamespace(), "default");
 

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/Fabric8EndpointsCatalogWatch.java
Patch:
@@ -41,7 +41,7 @@ final class Fabric8EndpointsCatalogWatch
 	@Override
 	public List<EndpointNameAndNamespace> apply(Fabric8CatalogWatchContext context) {
 		List<Endpoints> endpoints = endpoints(context.properties(), context.kubernetesClient(),
-				context.namespaceProvider(), "catalog-watcher", null);
+				context.namespaceProvider(), "catalog-watcher", null, x -> true);
 
 		/**
 		 * <pre>

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClient.java
Patch:
@@ -131,7 +131,7 @@ public List<ServiceInstance> getInstances(String serviceId) {
 	}
 
 	public List<Endpoints> getEndPointsList(String serviceId) {
-		return endpoints(properties, client, namespaceProvider, "fabric8-discovery", serviceId);
+		return endpoints(properties, client, namespaceProvider, "fabric8-discovery", serviceId, adapter.filter());
 	}
 
 	private List<ServiceInstance> getNamespaceServiceInstances(EndpointSubsetNS es, String serviceId) {

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/Fabric8DiscoveryNamespaceFilterIT.java
Patch:
@@ -137,6 +137,8 @@ private static void manifests(Phase phase) {
 			util.createAndWait(NAMESPACE, null, deployment, service, ingress, true);
 		}
 		else {
+			client.rbac().clusterRoleBindings().resource(client.rbac().clusterRoleBindings().load(getAdminRole()).get())
+					.delete();
 			util.deleteAndWait(NAMESPACE, deployment, service, ingress);
 		}
 

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServiceListSupplierTests.java
Patch:
@@ -68,7 +68,7 @@ class KubernetesServiceListSupplierTests {
 	@Test
 	void testPositiveMatch() {
 		when(environment.getProperty("loadbalancer.client.name")).thenReturn("test-service");
-		when(mapper.map(any(Service.class))).thenReturn(new KubernetesServiceInstance("", "", "", 0, null, false));
+		when(mapper.map(any(Service.class))).thenReturn(new KubernetesServiceInstance("", "", "", 8080, null, false));
 		when(this.client.getNamespace()).thenReturn("test");
 		when(this.client.services()).thenReturn(this.serviceOperation);
 		when(this.serviceOperation.inNamespace("test")).thenReturn(namespaceOperation);
@@ -84,7 +84,7 @@ void testPositiveMatch() {
 	@Test
 	void testPositiveMatchAllNamespaces() {
 		when(environment.getProperty("loadbalancer.client.name")).thenReturn("test-service");
-		when(mapper.map(any(Service.class))).thenReturn(new KubernetesServiceInstance("", "", "", 0, null, false));
+		when(mapper.map(any(Service.class))).thenReturn(new KubernetesServiceInstance("", "", "", 8080, null, false));
 		when(this.client.services()).thenReturn(this.serviceOperation);
 		when(this.serviceOperation.inAnyNamespace()).thenReturn(this.multiDeletable);
 		when(this.multiDeletable.withField("metadata.name", "test-service")).thenReturn(this.multiDeletable);

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClient.java
Patch:
@@ -162,13 +162,13 @@ private List<ServiceInstance> getNamespaceServiceInstances(EndpointSubsetNS es,
 
 	@Override
 	public List<String> getServices() {
-		return adapter.apply(client).stream().map(s -> s.getMetadata().getName()).toList();
+		return adapter.apply(client).stream().map(s -> s.getMetadata().getName()).distinct().toList();
 	}
 
 	@Deprecated(forRemoval = true)
 	public List<String> getServices(Predicate<Service> filter) {
 		return new Fabric8DiscoveryServicesAdapter(kubernetesClientServicesFunction, properties, filter).apply(client)
-				.stream().map(s -> s.getMetadata().getName()).toList();
+				.stream().map(s -> s.getMetadata().getName()).distinct().toList();
 	}
 
 	@Override

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClientTests.java
Patch:
@@ -497,10 +497,8 @@ void testGetServicesWithExternalNameService() {
 
 		KubernetesDiscoveryClient discoveryClient = new KubernetesDiscoveryClient(client, properties, null, null, null);
 		List<String> result = discoveryClient.getServices();
-		Assertions.assertEquals(result.size(), 2);
-		// this looks weird at the moment, but there is an issue that will fix this
+		Assertions.assertEquals(result.size(), 1);
 		Assertions.assertEquals(result.get(0), "blue-service");
-		Assertions.assertEquals(result.get(1), "blue-service");
 	}
 
 	@Test

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-reactive-discoveryclient-it/src/test/java/org/springframework/cloud/kubernetes/client/reactive/discovery/it/ReactiveDiscoveryClientIT.java
Patch:
@@ -49,9 +49,9 @@
  */
 class ReactiveDiscoveryClientIT {
 
-	private static final String HEALTH_URL = "localhost:80/reactive-discovery-it/actuator/health";
+	private static final String HEALTH_URL = "http://localhost:80/reactive-discovery-it/actuator/health";
 
-	private static final String SERVICES_URL = "localhost:80/reactive-discovery-it/services";
+	private static final String SERVICES_URL = "http://localhost:80/reactive-discovery-it/services";
 
 	private static final String SPRING_CLOUD_K8S_REACTIVE_DISCOVERY_APP_NAME = "spring-cloud-kubernetes-client-reactive-discoveryclient-it";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-secrets-event-reload/src/test/java/org/springframework/cloud/kubernetes/client/secrets/event/reload/SecretsEventReloadIT.java
Patch:
@@ -48,7 +48,7 @@
  */
 class SecretsEventReloadIT {
 
-	private static final String PROPERTY_URL = "localhost:80/key";
+	private static final String PROPERTY_URL = "http://localhost:80/key";
 
 	private static final String IMAGE_NAME = "spring-cloud-kubernetes-client-secrets-event-reload";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-config-it/src/test/java/org/springframework/cloud/kubernetes/client/config/it/ConfigMapAndSecretIT.java
Patch:
@@ -55,9 +55,9 @@
  */
 class ConfigMapAndSecretIT {
 
-	private static final String PROPERTY_URL = "localhost:80/myProperty";
+	private static final String PROPERTY_URL = "http://localhost:80/myProperty";
 
-	private static final String SECRET_URL = "localhost:80/mySecret";
+	private static final String SECRET_URL = "http://localhost:80/mySecret";
 
 	private static final String K8S_CONFIG_CLIENT_IT_SERVICE_NAME = "spring-cloud-kubernetes-client-config-it";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-loadbalancer-it/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/it/LoadBalancerIT.java
Patch:
@@ -48,7 +48,7 @@
  */
 class LoadBalancerIT {
 
-	private static final String SERVICE_URL = "localhost:80/loadbalancer-it/service";
+	private static final String SERVICE_URL = "http://localhost:80/loadbalancer-it/service";
 
 	private static final String SPRING_CLOUD_K8S_LOADBALANCER_APP_NAME = "spring-cloud-kubernetes-client-loadbalancer-it";
 

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClient.java
Patch:
@@ -104,7 +104,7 @@ public List<ServiceInstance> getInstances(String serviceId) {
 		Objects.requireNonNull(serviceId);
 
 		List<EndpointSubsetNS> subsetsNS = getEndPointsList(serviceId).stream()
-				.map(x -> subsetsFromEndpoints(x, () -> client.getNamespace())).toList();
+				.map(KubernetesDiscoveryClientUtils::subsetsFromEndpoints).toList();
 
 		List<ServiceInstance> instances = new ArrayList<>();
 		if (!subsetsNS.isEmpty()) {
@@ -131,7 +131,7 @@ public List<Endpoints> getEndPointsList(String serviceId) {
 	private List<Endpoints> findEndPointsFilteredByNamespaces(String serviceId) {
 		List<Endpoints> endpoints = new ArrayList<>();
 		for (String ns : properties.namespaces()) {
-			endpoints.addAll(getClient().endpoints().inNamespace(ns).withField("metadata.name", serviceId)
+			endpoints.addAll(client.endpoints().inNamespace(ns).withField("metadata.name", serviceId)
 					.withLabels(properties.serviceLabels()).list().getItems());
 		}
 		return endpoints;

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClientAutoConfiguration.java
Patch:
@@ -41,6 +41,7 @@
 import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryClientHealthIndicatorInitializer;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -25,10 +25,10 @@
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesCatalogEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.Environment;

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClientAutoConfiguration.java
Patch:
@@ -40,11 +40,11 @@
 import org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.KubernetesClientPodUtils;
 import org.springframework.cloud.kubernetes.client.discovery.CatalogSharedInformerFactory;
-import org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.discovery.SpringCloudKubernetesInformerFactoryProcessor;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.Environment;

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClientAutoConfigurationApplicationContextTests.java
Patch:
@@ -30,6 +30,7 @@
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryClientHealthIndicatorInitializer;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.integration.tests.commons.Commons;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchAutoConfigurationApplicationContextTests.java
Patch:
@@ -21,9 +21,9 @@
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.discovery.KubernetesInformerDiscoveryClient;
 import org.springframework.cloud.kubernetes.client.discovery.reactive.KubernetesInformerReactiveDiscoveryClient;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -87,8 +87,8 @@ void disableBlockingAndReactive() {
 	}
 
 	/**
-	 * both blocking and reactive configs are disabled, should not influence catalog
-	 * watcher in any way.
+	 * spring.cloud.kubernetes.discovery.enabled is false, but does not influence catalog
+	 * watcher.
 	 */
 	@Test
 	void disableKubernetesDiscovery() {

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClientAutoConfigurationApplicationContextTests.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.cloud.commons.util.UtilAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.discovery.CatalogSharedInformerFactory;
-import org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.discovery.SpringCloudKubernetesInformerFactoryProcessor;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/discovery/KubernetesDiscoveryPropertiesAutoConfiguration.java
Patch:
@@ -14,10 +14,9 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.discovery;
+package org.springframework.cloud.kubernetes.commons.discovery;
 
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 
 /**
  * @author wind57

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesCatalogEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.fabric8.Fabric8AutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -40,7 +41,7 @@
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnKubernetesCatalogEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
-@AutoConfigureAfter({ Fabric8AutoConfiguration.class })
+@AutoConfigureAfter({ Fabric8AutoConfiguration.class, KubernetesDiscoveryPropertiesAutoConfiguration.class })
 public class KubernetesCatalogWatchAutoConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogServicesWatchConfigurationTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.cloud.kubernetes.commons.PodUtils;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -81,8 +82,8 @@ private void setup(String... env) {
 		envList.add("spring.cloud.config.enabled=false");
 		this.context = new SpringApplicationBuilder(PropertyPlaceholderAutoConfiguration.class,
 				KubernetesClientTestConfiguration.class, KubernetesCatalogWatchAutoConfiguration.class,
-				KubernetesDiscoveryClientAutoConfiguration.class).web(WebApplicationType.NONE)
-						.properties(envList.toArray(new String[0])).run();
+				KubernetesDiscoveryClientAutoConfiguration.class, KubernetesDiscoveryPropertiesAutoConfiguration.class)
+						.web(WebApplicationType.NONE).properties(envList.toArray(new String[0])).run();
 	}
 
 	@Configuration(proxyBeanMethods = false)

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/reactive/KubernetesReactiveDiscoveryClientAutoConfigurationTests.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryClientHealthIndicator;
 import org.springframework.cloud.commons.util.UtilAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
+import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.fabric8.Fabric8AutoConfiguration;
 import org.springframework.cloud.kubernetes.fabric8.discovery.KubernetesDiscoveryClientAutoConfiguration;
 
@@ -40,7 +41,8 @@ class KubernetesReactiveDiscoveryClientAutoConfigurationTests {
 			.withConfiguration(AutoConfigurations.of(UtilAutoConfiguration.class,
 					ReactiveCommonsClientAutoConfiguration.class, KubernetesCommonsAutoConfiguration.class,
 					Fabric8AutoConfiguration.class, KubernetesDiscoveryClientAutoConfiguration.class,
-					KubernetesReactiveDiscoveryClientAutoConfiguration.class));
+					KubernetesReactiveDiscoveryClientAutoConfiguration.class,
+					KubernetesDiscoveryPropertiesAutoConfiguration.class));
 
 	@Test
 	void shouldWorkWithDefaults() {

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty("spring.cloud.config.discovery.enabled")
-@Import({ KubernetesClientAutoConfiguration.class, KubernetesDiscoveryClientAutoConfiguration.class })
+@Import({ KubernetesClientAutoConfiguration.class, KubernetesInformerDiscoveryClientAutoConfiguration.class })
 public class KubernetesDiscoveryClientConfigClientBootstrapConfiguration {
 
 }

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/SpringCloudKubernetesInformerFactoryProcessor.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * @author Ryan Baxter
  */
-class SpringCloudKubernetesInformerFactoryProcessor extends KubernetesInformerFactoryProcessor {
+public class SpringCloudKubernetesInformerFactoryProcessor extends KubernetesInformerFactoryProcessor {
 
 	private static final Logger log = LoggerFactory.getLogger(SpringCloudKubernetesInformerFactoryProcessor.class);
 
@@ -58,7 +58,7 @@ class SpringCloudKubernetesInformerFactoryProcessor extends KubernetesInformerFa
 	private final KubernetesNamespaceProvider kubernetesNamespaceProvider;
 
 	@Autowired
-	SpringCloudKubernetesInformerFactoryProcessor(KubernetesNamespaceProvider kubernetesNamespaceProvider,
+	public SpringCloudKubernetesInformerFactoryProcessor(KubernetesNamespaceProvider kubernetesNamespaceProvider,
 			ApiClient apiClient, SharedInformerFactory sharedInformerFactory, boolean allNamespaces) {
 		super();
 		this.apiClient = apiClient;

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
+import org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryPropertiesAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesCatalogEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
@@ -39,13 +40,13 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
+@ConditionalOnKubernetesCatalogEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
-@AutoConfigureAfter({ KubernetesClientAutoConfiguration.class })
+@AutoConfigureAfter({ KubernetesClientAutoConfiguration.class, KubernetesDiscoveryPropertiesAutoConfiguration.class })
 class KubernetesCatalogWatchAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnKubernetesCatalogEnabled
 	KubernetesCatalogWatch kubernetesCatalogWatch(CoreV1Api coreV1Api, ApiClient apiClient,
 			KubernetesDiscoveryProperties properties, Environment environment) {
 		return new KubernetesCatalogWatch(coreV1Api, apiClient, properties,

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClient.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class KubernetesInformerReactiveDiscoveryClient implements ReactiveDiscoveryClient {
 
-	private KubernetesInformerDiscoveryClient kubernetesDiscoveryClient;
+	private final KubernetesInformerDiscoveryClient kubernetesDiscoveryClient;
 
 	public KubernetesInformerReactiveDiscoveryClient(KubernetesNamespaceProvider kubernetesNamespaceProvider,
 			SharedInformerFactory sharedInformerFactory, Lister<V1Service> serviceLister,

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -50,7 +50,7 @@
 
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty("spring.cloud.config.discovery.enabled")
-@Import({ KubernetesClientAutoConfiguration.class, KubernetesDiscoveryClientAutoConfiguration.class })
+@Import({ KubernetesClientAutoConfiguration.class, KubernetesInformerDiscoveryClientAutoConfiguration.class })
 public class KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests {
 
 	private AnnotationConfigApplicationContext context;
@@ -83,13 +83,13 @@ private void setup(String... env) {
 		TestPropertyValues.of(env).applyTo(parent);
 		parent.register(UtilAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class,
 				EnvironmentKnobbler.class, KubernetesCommonsAutoConfiguration.class,
-				KubernetesClientAutoConfiguration.class, KubernetesDiscoveryClientAutoConfiguration.class,
+				KubernetesClientAutoConfiguration.class, KubernetesInformerDiscoveryClientAutoConfiguration.class,
 				DiscoveryClientConfigServiceBootstrapConfiguration.class, ConfigClientProperties.class);
 		parent.refresh();
 		this.context = new AnnotationConfigApplicationContext();
 		this.context.setParent(parent);
 		this.context.register(PropertyPlaceholderAutoConfiguration.class, KubernetesCommonsAutoConfiguration.class,
-				KubernetesDiscoveryClientAutoConfiguration.class);
+				KubernetesInformerDiscoveryClientAutoConfiguration.class);
 		this.context.refresh();
 	}
 

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -38,13 +38,13 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
+@ConditionalOnKubernetesCatalogEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureAfter({ Fabric8AutoConfiguration.class })
 public class KubernetesCatalogWatchAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnKubernetesCatalogEnabled
 	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client,
 			KubernetesDiscoveryProperties properties, Environment environment) {
 		return new KubernetesCatalogWatch(client, properties, new KubernetesNamespaceProvider(environment));

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshIT.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.time.Duration;
 
-import com.github.tomakehurst.wiremock.client.VerificationException;
 import com.github.tomakehurst.wiremock.client.WireMock;
 import io.kubernetes.client.openapi.models.V1ConfigMap;
 import io.kubernetes.client.openapi.models.V1ConfigMapBuilder;
@@ -93,7 +92,7 @@ void after() {
 	@Test
 	void testActuatorRefresh() {
 		WireMock.configureFor(WIREMOCK_HOST, WIREMOCK_PORT, WIREMOCK_PATH);
-		await().timeout(Duration.ofSeconds(60)).ignoreException(VerificationException.class)
+		await().timeout(Duration.ofSeconds(60))
 				.until(() -> WireMock
 						.stubFor(WireMock.post(WireMock.urlEqualTo("/actuator/refresh"))
 								.willReturn(WireMock.aResponse().withBody("{}").withStatus(200)))

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/KubernetesConfigTestBase.java
Patch:
@@ -46,9 +46,9 @@ protected ConfigurableApplicationContext getContext() {
 	protected void setup(Class<?> mockClientConfiguration, String... env) {
 		String[] properties = Stream.concat(Arrays.stream(commonProperties), Arrays.stream(env)).toArray(String[]::new);
 		context = new SpringApplicationBuilder(PropertyPlaceholderAutoConfiguration.class, mockClientConfiguration,
-				BootstrapConfiguration.class, Fabric8ConfigReloadAutoConfiguration.class, ConfigReloadPropertiesAutoConfiguration.class,
-				RefreshAutoConfiguration.class).web(WebApplicationType.NONE)
-						.properties(properties).run();
+				BootstrapConfiguration.class, Fabric8ConfigReloadAutoConfiguration.class,
+				ConfigReloadPropertiesAutoConfiguration.class, RefreshAutoConfiguration.class)
+						.web(WebApplicationType.NONE).properties(properties).run();
 	}
 
 	@AfterEach

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
 	}
 
 	@Scheduled(fixedDelayString = "${spring.cloud.kubernetes.discovery.catalogServicesWatchDelay:30000}")
-	public void catalogServicesWatch() {
+	void catalogServicesWatch() {
 		try {
 
 			List<EndpointNameAndNamespace> currentState = stateGenerator.apply(context);

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,12 +41,12 @@
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureAfter({ KubernetesClientAutoConfiguration.class })
-public class KubernetesCatalogWatchAutoConfiguration {
+class KubernetesCatalogWatchAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnKubernetesCatalogEnabled
-	public KubernetesCatalogWatch kubernetesCatalogWatch(CoreV1Api coreV1Api, ApiClient apiClient,
+	KubernetesCatalogWatch kubernetesCatalogWatch(CoreV1Api coreV1Api, ApiClient apiClient,
 			KubernetesDiscoveryProperties properties, Environment environment) {
 		return new KubernetesCatalogWatch(coreV1Api, apiClient, properties,
 				new KubernetesNamespaceProvider(environment));

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2022 the original author or authors.
+ * Copyright 2012-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesEndpointSlicesCatalogWatch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2022 the original author or authors.
+ * Copyright 2012-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesEndpointsCatalogWatch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2022 the original author or authors.
+ * Copyright 2012-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchContextTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchEndpointSlicesTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesCatalogWatchEndpointsTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesClientCatalogWatchEndpointSlicesSupportTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/catalog/KubernetesEndpointsAndEndpointSlicesTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2022 the original author or authors.
+ * Copyright 2013-2023 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigDataLocationResolver.java
Patch:
@@ -63,7 +63,7 @@ protected void registerBeans(ConfigDataLocationResolverContext resolverContext,
 					coreV1Api, configMapProperties, namespaceProvider);
 			if (isRetryEnabledForConfigMap(configMapProperties)) {
 				configMapPropertySourceLocator = new ConfigDataRetryableConfigMapPropertySourceLocator(
-						configMapPropertySourceLocator, configMapProperties);
+						configMapPropertySourceLocator, configMapProperties, new KubernetesClientConfigMapsCache());
 			}
 
 			registerSingle(bootstrapContext, ConfigMapPropertySourceLocator.class, configMapPropertySourceLocator,
@@ -75,7 +75,7 @@ protected void registerBeans(ConfigDataLocationResolverContext resolverContext,
 					coreV1Api, namespaceProvider, secretsProperties);
 			if (isRetryEnabledForSecrets(secretsProperties)) {
 				secretsPropertySourceLocator = new ConfigDataRetryableSecretsPropertySourceLocator(
-						secretsPropertySourceLocator, secretsProperties);
+						secretsPropertySourceLocator, secretsProperties, new KubernetesClientSecretsCache());
 			}
 
 			registerSingle(bootstrapContext, SecretsPropertySourceLocator.class, secretsPropertySourceLocator,

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -39,7 +39,7 @@ public class KubernetesClientConfigMapPropertySourceLocator extends ConfigMapPro
 
 	public KubernetesClientConfigMapPropertySourceLocator(CoreV1Api coreV1Api, ConfigMapConfigProperties properties,
 			KubernetesNamespaceProvider kubernetesNamespaceProvider) {
-		super(properties);
+		super(properties, new KubernetesClientConfigMapsCache());
 		this.coreV1Api = coreV1Api;
 		this.kubernetesNamespaceProvider = kubernetesNamespaceProvider;
 	}

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceLocator.java
Patch:
@@ -39,7 +39,7 @@ public class KubernetesClientSecretsPropertySourceLocator extends SecretsPropert
 
 	public KubernetesClientSecretsPropertySourceLocator(CoreV1Api coreV1Api,
 			KubernetesNamespaceProvider kubernetesNamespaceProvider, SecretsConfigProperties secretsConfigProperties) {
-		super(secretsConfigProperties);
+		super(secretsConfigProperties, new KubernetesClientSecretsCache());
 		this.coreV1Api = coreV1Api;
 		this.kubernetesNamespaceProvider = kubernetesNamespaceProvider;
 	}

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceTests.java
Patch:
@@ -93,6 +93,7 @@ public static void after() {
 	@AfterEach
 	public void afterEach() {
 		WireMock.reset();
+		new KubernetesClientConfigMapsCache().discardAll();
 	}
 
 	@Test

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceTests.java
Patch:
@@ -112,6 +112,7 @@ static void after() {
 	@AfterEach
 	void afterEach() {
 		WireMock.reset();
+		new KubernetesClientSecretsCache().discardAll();
 	}
 
 	@Test

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigDataLocationResolver.java
Patch:
@@ -63,7 +63,7 @@ protected void registerBeans(ConfigDataLocationResolverContext resolverContext,
 					kubernetesClient, configMapProperties, namespaceProvider);
 			if (isRetryEnabledForConfigMap(configMapProperties)) {
 				configMapPropertySourceLocator = new ConfigDataRetryableConfigMapPropertySourceLocator(
-						configMapPropertySourceLocator, configMapProperties);
+						configMapPropertySourceLocator, configMapProperties, new Fabric8ConfigMapsCache());
 			}
 
 			registerSingle(bootstrapContext, ConfigMapPropertySourceLocator.class, configMapPropertySourceLocator,
@@ -75,7 +75,7 @@ protected void registerBeans(ConfigDataLocationResolverContext resolverContext,
 					kubernetesClient, secretsProperties, namespaceProvider);
 			if (isRetryEnabledForSecrets(secretsProperties)) {
 				secretsPropertySourceLocator = new ConfigDataRetryableSecretsPropertySourceLocator(
-						secretsPropertySourceLocator, secretsProperties);
+						secretsPropertySourceLocator, secretsProperties, new Fabric8SecretsCache());
 			}
 
 			registerSingle(bootstrapContext, SecretsPropertySourceLocator.class, secretsPropertySourceLocator,

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceLocator.java
Patch:
@@ -45,7 +45,7 @@ public class Fabric8ConfigMapPropertySourceLocator extends ConfigMapPropertySour
 
 	Fabric8ConfigMapPropertySourceLocator(KubernetesClient client, ConfigMapConfigProperties properties,
 			KubernetesNamespaceProvider provider) {
-		super(properties);
+		super(properties, new Fabric8ConfigMapsCache());
 		this.client = client;
 		this.provider = provider;
 	}

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySourceLocator.java
Patch:
@@ -45,7 +45,7 @@ public class Fabric8SecretsPropertySourceLocator extends SecretsPropertySourceLo
 
 	Fabric8SecretsPropertySourceLocator(KubernetesClient client, SecretsConfigProperties properties,
 			KubernetesNamespaceProvider provider) {
-		super(properties);
+		super(properties, new Fabric8SecretsCache());
 		this.client = client;
 		this.provider = provider;
 	}

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/Fabric8EndpointSliceV1CatalogWatch.java
Patch:
@@ -48,12 +48,12 @@ public List<EndpointNameAndNamespace> apply(Fabric8CatalogWatchContext context)
 		KubernetesClient client = context.kubernetesClient();
 
 		if (context.properties().allNamespaces()) {
-			LOG.debug(() -> "discovering endpoints in all namespaces");
+			LOG.debug(() -> "discovering endpoint slices in all namespaces");
 			endpointSlices = client.discovery().v1().endpointSlices().inAnyNamespace()
 					.withLabels(context.properties().serviceLabels()).list().getItems();
 		}
 		else if (!context.properties().namespaces().isEmpty()) {
-			LOG.debug(() -> "discovering endpoints in " + context.properties().namespaces());
+			LOG.debug(() -> "discovering endpoint slices in " + context.properties().namespaces());
 			List<EndpointSlice> inner = new ArrayList<>(context.properties().namespaces().size());
 			context.properties().namespaces()
 					.forEach(namespace -> inner.addAll(endpointSlices(context, namespace, client)));
@@ -62,7 +62,7 @@ else if (!context.properties().namespaces().isEmpty()) {
 		else {
 			String namespace = Fabric8Utils.getApplicationNamespace(context.kubernetesClient(), null, "catalog-watcher",
 					context.namespaceProvider());
-			LOG.debug(() -> "discovering endpoints in namespace : " + namespace);
+			LOG.debug(() -> "discovering endpoint slices in namespace : " + namespace);
 			endpointSlices = endpointSlices(context, namespace, client);
 		}
 

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -21,10 +21,10 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
+import org.springframework.cloud.kubernetes.commons.discovery.ConditionalOnKubernetesCatalogEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.kubernetes.fabric8.Fabric8AutoConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -44,8 +44,7 @@ public class KubernetesCatalogWatchAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnProperty(name = "spring.cloud.kubernetes.discovery.catalog-services-watch.enabled",
-			matchIfMissing = true)
+	@ConditionalOnKubernetesCatalogEnabled
 	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client,
 			KubernetesDiscoveryProperties properties, Environment environment) {
 		return new KubernetesCatalogWatch(client, properties, new KubernetesNamespaceProvider(environment));

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-catalog-watcher/src/test/java/org/springframework/cloud/kubernetes/fabric8/catalog/watch/Fabric8CatalogWatchIT.java
Patch:
@@ -52,7 +52,7 @@
 /**
  * @author wind57
  */
-class CatalogWatchIT {
+class Fabric8CatalogWatchIT {
 
 	private static final String APP_NAME = "spring-cloud-kubernetes-fabric8-client-catalog-watcher";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-catalog-watcher/src/test/java/org/springframework/cloud/kubernetes/fabric8/catalog/watch/Fabric8CatalogWatchWithNamespacesIT.java
Patch:
@@ -57,7 +57,7 @@
 /**
  * @author wind57
  */
-class CatalogWatchWithNamespacesIT {
+class Fabric8CatalogWatchWithNamespacesIT {
 
 	private static final String APP_NAME = "spring-cloud-kubernetes-fabric8-client-catalog-watcher";
 

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 
-import static org.springframework.cloud.kubernetes.client.config.KubernetesClientConfigUtils.getApplicationNamespace;
+import static org.springframework.cloud.kubernetes.client.KubernetesClientUtils.getApplicationNamespace;
 
 /**
  * @author Ryan Baxter

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceLocator.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 
-import static org.springframework.cloud.kubernetes.client.config.KubernetesClientConfigUtils.getApplicationNamespace;
+import static org.springframework.cloud.kubernetes.client.KubernetesClientUtils.getApplicationNamespace;
 
 /**
  * @author Ryan Baxter

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_prefix/LabeledConfigMapWithPrefixBootstrapTests.java
Patch:
@@ -25,7 +25,7 @@
 		classes = LabeledConfigMapWithPrefixApp.class,
 		properties = { "spring.cloud.bootstrap.name=labeled-configmap-with-prefix",
 				"labeled.config.map.with.prefix.stub=true", "spring.main.cloud-platform=KUBERNETES",
-				"spring.cloud.bootstrap.enabled=true", "spring.cloud.kubernetes.client.namespace=spring-k8s" })
+				"spring.cloud.bootstrap.enabled=true" })
 class LabeledConfigMapWithPrefixBootstrapTests extends LabeledConfigMapWithPrefixTests {
 
 }

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_profile/NamedSecretWithProfileBootstrapTests.java
Patch:
@@ -25,8 +25,7 @@
 @ActiveProfiles("k8s")
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = NamedSecretWithLabelApp.class,
 		properties = { "spring.cloud.bootstrap.name=named-secret-with-profile", "named.secret.with.profile.stub=true",
-				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true",
-				"spring.cloud.kubernetes.client.namespace=spring-k8s" })
+				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true" })
 class NamedSecretWithProfileBootstrapTests extends NamedSecretWithProfileTests {
 
 }

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/configmap_retry/BootstrapConfigFailFastEnabledButRetryDisabled.java
Patch:
@@ -22,9 +22,9 @@
  * @author Isik Erhan
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE,
-		properties = { "spring.cloud.kubernetes.client.namespace=default",
-				"spring.cloud.kubernetes.config.fail-fast=true", "spring.cloud.kubernetes.config.retry.enabled=false",
-				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true" },
+		properties = { "spring.cloud.kubernetes.config.fail-fast=true",
+				"spring.cloud.kubernetes.config.retry.enabled=false", "spring.main.cloud-platform=KUBERNETES",
+				"spring.cloud.bootstrap.enabled=true" },
 		classes = App.class)
 class BootstrapConfigFailFastEnabledButRetryDisabled extends ConfigFailFastEnabledButRetryDisabled {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/configmap_retry/BootstrapConfigRetryEnabled.java
Patch:
@@ -22,9 +22,9 @@
  * @author Isik Erhan
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE,
-		properties = { "spring.cloud.kubernetes.client.namespace=default",
-				"spring.cloud.kubernetes.config.fail-fast=true", "spring.cloud.kubernetes.config.retry.max-attempts=5",
-				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true" },
+		properties = { "spring.cloud.kubernetes.config.fail-fast=true",
+				"spring.cloud.kubernetes.config.retry.max-attempts=5", "spring.main.cloud-platform=KUBERNETES",
+				"spring.cloud.bootstrap.enabled=true" },
 		classes = App.class)
 class BootstrapConfigRetryEnabled extends ConfigRetryEnabled {
 

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigContext.java
Patch:
@@ -27,6 +27,6 @@
  *
  * @author wind57
  */
-final record Fabric8ConfigContext(KubernetesClient client, NormalizedSource normalizedSource, String namespace,
+record Fabric8ConfigContext(KubernetesClient client, NormalizedSource normalizedSource, String namespace,
 		Environment environment) {
 }

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClientTests.java
Patch:
@@ -101,7 +101,7 @@ public void testDiscoveryGetInstanceAllNamespaceShouldWork() {
 		Lister<V1Endpoints> endpointsLister = setupEndpointsLister(testEndpoints1);
 
 		KubernetesDiscoveryProperties kubernetesDiscoveryProperties = new KubernetesDiscoveryProperties(true, true,
-				true, 60, false, null, Set.of(), null, null, null, 0);
+				Set.of(), true, 60, false, null, Set.of(), null, null, null, 0);
 
 		KubernetesInformerReactiveDiscoveryClient discoveryClient = new KubernetesInformerReactiveDiscoveryClient(
 				new KubernetesNamespaceProvider(new MockEnvironment()), sharedInformerFactory, serviceLister,
@@ -120,7 +120,7 @@ public void testDiscoveryGetInstanceOneNamespaceShouldWork() {
 		Lister<V1Endpoints> endpointsLister = setupEndpointsLister(testEndpoints1);
 
 		KubernetesDiscoveryProperties kubernetesDiscoveryProperties = new KubernetesDiscoveryProperties(true, false,
-				true, 60, false, null, Set.of(), null, null, null, 0);
+				Set.of(), true, 60, false, null, Set.of(), null, null, null, 0);
 
 		KubernetesNamespaceProvider kubernetesNamespaceProvider = mock(KubernetesNamespaceProvider.class);
 		when(kubernetesNamespaceProvider.getNamespace()).thenReturn("namespace1");

File: spring-cloud-kubernetes-client-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/KubernetesClientServicesListSupplierTests.java
Patch:
@@ -146,7 +146,8 @@ void getListAllNamespaces() {
 		KubernetesNamespaceProvider kubernetesNamespaceProvider = mock(KubernetesNamespaceProvider.class);
 		when(kubernetesNamespaceProvider.getNamespace()).thenReturn("default");
 		KubernetesDiscoveryProperties kubernetesDiscoveryProperties = new KubernetesDiscoveryProperties(true, true,
-				true, 60, false, null, Set.of(), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
+				Set.of(), true, 60, false, null, Set.of(), Map.of(), null,
+				KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
 		CoreV1Api coreV1Api = new CoreV1Api();
 		KubernetesClientServiceInstanceMapper mapper = new KubernetesClientServiceInstanceMapper(
 				new KubernetesLoadBalancerProperties(), kubernetesDiscoveryProperties);

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/ServicePortSecureResolverTest.java
Patch:
@@ -50,8 +50,9 @@ class ServicePortSecureResolverTest {
 
 	@Test
 	void testPortNumbersOnly() {
-		KubernetesDiscoveryProperties properties = new KubernetesDiscoveryProperties(true, true, true, 60, false, null,
-				Set.of(443, 8443, 12345), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
+		KubernetesDiscoveryProperties properties = new KubernetesDiscoveryProperties(true, true, Set.of(), true, 60,
+				false, null, Set.of(443, 8443, 12345), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT,
+				0);
 
 		ServicePortSecureResolver secureResolver = new ServicePortSecureResolver(properties);
 

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/reactive/KubernetesReactiveDiscoveryClientTests.java
Patch:
@@ -301,8 +301,8 @@ public void shouldReturnFluxOfServicesAcrossAllNamespaces(
 						}).endMetadata().build())
 				.once();
 
-		KubernetesDiscoveryProperties properties = new KubernetesDiscoveryProperties(true, true, true, 60, false, null,
-				Set.of(), Map.of(), "https_tcp", Metadata.DEFAULT, 0);
+		KubernetesDiscoveryProperties properties = new KubernetesDiscoveryProperties(true, true, Set.of(), true, 60,
+				false, null, Set.of(), Map.of(), "https_tcp", Metadata.DEFAULT, 0);
 		ReactiveDiscoveryClient client = new KubernetesReactiveDiscoveryClient(kubernetesClient, properties,
 				KubernetesClient::services);
 		Flux<ServiceInstance> instances = client.getInstances("existing-service");

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/Fabric8ServiceInstanceMapperTests.java
Patch:
@@ -78,8 +78,8 @@ void testMapperSecure() {
 	@Test
 	void testMapperSecureNullLabelsAndAnnotations() {
 		KubernetesLoadBalancerProperties properties = new KubernetesLoadBalancerProperties();
-		KubernetesDiscoveryProperties discoveryProperties = new KubernetesDiscoveryProperties(true, true, true, 60,
-				false, null, Set.of(), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
+		KubernetesDiscoveryProperties discoveryProperties = new KubernetesDiscoveryProperties(true, true, Set.of(),
+				true, 60, false, null, Set.of(), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
 		List<ServicePort> ports = new ArrayList<>();
 		ports.add(new ServicePortBuilder().withPort(443).build());
 		Service service = buildService("test", "abc", ports, null, null);

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServiceListSupplierTests.java
Patch:
@@ -95,8 +95,8 @@ void testPositiveMatchAllNamespaces() {
 		ServiceList serviceList = new ServiceList();
 		serviceList.getItems().add(buildService("test-service", 8080));
 		when(this.multiDeletable.list()).thenReturn(serviceList);
-		KubernetesDiscoveryProperties discoveryProperties = new KubernetesDiscoveryProperties(true, true, true, 60,
-				false, null, Set.of(), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
+		KubernetesDiscoveryProperties discoveryProperties = new KubernetesDiscoveryProperties(true, true, Set.of(),
+				true, 60, false, null, Set.of(), Map.of(), null, KubernetesDiscoveryProperties.Metadata.DEFAULT, 0);
 		KubernetesServicesListSupplier supplier = new Fabric8ServicesListSupplier(environment, client, mapper,
 				discoveryProperties);
 		List<ServiceInstance> instances = supplier.get().blockFirst();

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-catalog-watcher/src/test/java/org/springframework/cloud/kubernetes/fabric8/catalog/watch/CatalogWatchIT.java
Patch:
@@ -59,7 +59,7 @@ class CatalogWatchIT {
 	private static final String NAMESPACE = "default";
 
 	private static final K3sContainer K3S = Commons.container()
-		.withLogConsumer(new Slf4jLogConsumer(LoggerFactory.getLogger(CatalogWatchIT.class)));
+			.withLogConsumer(new Slf4jLogConsumer(LoggerFactory.getLogger(CatalogWatchIT.class)));
 
 	private static KubernetesClient client;
 

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceLocator.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 
-import static org.springframework.cloud.kubernetes.fabric8.config.Fabric8ConfigUtils.getApplicationNamespace;
+import static org.springframework.cloud.kubernetes.fabric8.Fabric8Utils.getApplicationNamespace;
 
 /**
  * A {@link PropertySourceLocator} that uses config maps.

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySourceLocator.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.MapPropertySource;
 
-import static org.springframework.cloud.kubernetes.fabric8.config.Fabric8ConfigUtils.getApplicationNamespace;
+import static org.springframework.cloud.kubernetes.fabric8.Fabric8Utils.getApplicationNamespace;
 
 /**
  * Kubernetes {@link PropertySourceLocator} for secrets.

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigUtils.java
Patch:
@@ -118,7 +118,7 @@ static Map<String, String> getConfigMapData(KubernetesClient client, String name
 		ConfigMap configMap = client.configMaps().inNamespace(namespace).withName(name).get();
 
 		if (configMap == null) {
-			LOG.warn("config-map with name : '" + name + "' not present in namespace : '" + namespace + "'");
+			LOG.debug("config-map with name : '" + name + "' not present in namespace : '" + namespace + "'");
 			return Collections.emptyMap();
 		}
 

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClientTests.java
Patch:
@@ -113,7 +113,7 @@ public void testServiceWithUnsetPortNames() {
 		Lister<V1Endpoints> endpointsLister = setupEndpointsLister(testEndpointWithUnsetPortName);
 
 		when(kubernetesDiscoveryProperties.isAllNamespaces()).thenReturn(true);
-		when(kubernetesDiscoveryProperties.getMetadata()).thenReturn(new KubernetesDiscoveryProperties.Metadata());
+		when(kubernetesDiscoveryProperties.getMetadata()).thenReturn(KubernetesDiscoveryProperties.Metadata.DEFAULT);
 
 		KubernetesInformerDiscoveryClient discoveryClient = new KubernetesInformerDiscoveryClient("",
 				sharedInformerFactory, serviceLister, endpointsLister, null, null, kubernetesDiscoveryProperties);

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/discovery/KubernetesDiscoveryPropertiesMetadataTests.java
Patch:
@@ -32,7 +32,7 @@ class KubernetesDiscoveryPropertiesMetadataTests {
 
 	@Test
 	void testDefaultConstructor() {
-		Metadata m = new Metadata();
+		Metadata m = Metadata.DEFAULT;
 		assertThat(m.addLabels()).isTrue();
 		assertThat(m.labelsPrefix()).isNull();
 		assertThat(m.addAnnotations()).isTrue();

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/reload/EventBasedConfigMapChangeDetector.java
Patch:
@@ -89,7 +89,7 @@ public void eventReceived(Watcher.Action action, ConfigMap configMap) {
 
 					@Override
 					public void onClose(WatcherException exception) {
-						log.warn("ConfigMaps watch closed", exception);
+						log.debug("ConfigMaps watch closed", exception);
 						Optional.ofNullable(exception).map(e -> {
 							log.debug("Exception received during watch", e);
 							return exception.asClientException();

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/reload/EventBasedSecretsChangeDetector.java
Patch:
@@ -90,7 +90,7 @@ public void eventReceived(Action action, Secret secret) {
 
 					@Override
 					public void onClose(WatcherException exception) {
-						log.warn("Secrects watch closed", exception);
+						log.debug("Secrects watch closed", exception);
 						Optional.ofNullable(exception).map(e -> {
 							log.debug("Exception received during watch", e);
 							return exception.asClientException();

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedConfigMapWatcherChangeDetector.java
Patch:
@@ -47,8 +47,8 @@ final class BusEventBasedConfigMapWatcherChangeDetector extends ConfigMapWatcher
 	}
 
 	@Override
-	public Mono<Void> triggerRefresh(KubernetesObject configMap) {
-		return busRefreshTrigger.triggerRefresh(configMap);
+	public Mono<Void> triggerRefresh(KubernetesObject configMap, String appName) {
+		return busRefreshTrigger.triggerRefresh(configMap, appName);
 	}
 
 }

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedSecretsWatcherChangeDetector.java
Patch:
@@ -47,8 +47,8 @@ final class BusEventBasedSecretsWatcherChangeDetector extends SecretsWatcherChan
 	}
 
 	@Override
-	public Mono<Void> triggerRefresh(KubernetesObject secret) {
-		return busRefreshTrigger.triggerRefresh(secret);
+	public Mono<Void> triggerRefresh(KubernetesObject secret, String appName) {
+		return busRefreshTrigger.triggerRefresh(secret, appName);
 	}
 
 }

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/BusRefreshTrigger.java
Patch:
@@ -40,9 +40,9 @@ final class BusRefreshTrigger implements RefreshTrigger {
 	}
 
 	@Override
-	public Mono<Void> triggerRefresh(KubernetesObject configMap) {
+	public Mono<Void> triggerRefresh(KubernetesObject configMap, String appName) {
 		applicationEventPublisher.publishEvent(new RefreshRemoteApplicationEvent(configMap, busId,
-				new PathDestinationFactory().getDestination(configMap.getMetadata().getName())));
+				new PathDestinationFactory().getDestination(appName)));
 		return Mono.empty();
 	}
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/HttpBasedConfigMapWatchChangeDetector.java
Patch:
@@ -48,8 +48,8 @@ final class HttpBasedConfigMapWatchChangeDetector extends ConfigMapWatcherChange
 	}
 
 	@Override
-	public Mono<Void> triggerRefresh(KubernetesObject configMap) {
-		return httpRefreshTrigger.triggerRefresh(configMap);
+	public Mono<Void> triggerRefresh(KubernetesObject configMap, String appName) {
+		return httpRefreshTrigger.triggerRefresh(configMap, appName);
 	}
 
 }

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/HttpBasedSecretsWatchChangeDetector.java
Patch:
@@ -48,8 +48,8 @@ final class HttpBasedSecretsWatchChangeDetector extends SecretsWatcherChangeDete
 	}
 
 	@Override
-	public Mono<Void> triggerRefresh(KubernetesObject secret) {
-		return httpRefreshTrigger.triggerRefresh(secret);
+	public Mono<Void> triggerRefresh(KubernetesObject secret, String appName) {
+		return httpRefreshTrigger.triggerRefresh(secret, appName);
 	}
 
 }

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedConfigMapWatcherChangeDetectorTests.java
Patch:
@@ -90,7 +90,7 @@ void triggerRefreshWithConfigMap() {
 		objectMeta.setName("foo");
 		V1ConfigMap configMap = new V1ConfigMap();
 		configMap.setMetadata(objectMeta);
-		changeDetector.triggerRefresh(configMap);
+		changeDetector.triggerRefresh(configMap, configMap.getMetadata().getName());
 		ArgumentCaptor<RefreshRemoteApplicationEvent> argumentCaptor = ArgumentCaptor
 				.forClass(RefreshRemoteApplicationEvent.class);
 		verify(applicationEventPublisher).publishEvent(argumentCaptor.capture());

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedSecretsWatcherChangeDetectorTests.java
Patch:
@@ -90,7 +90,7 @@ void triggerRefreshWithSecret() {
 		objectMeta.setName("foo");
 		V1Secret secret = new V1Secret();
 		secret.setMetadata(objectMeta);
-		changeDetector.triggerRefresh(secret);
+		changeDetector.triggerRefresh(secret, secret.getMetadata().getName());
 		ArgumentCaptor<RefreshRemoteApplicationEvent> argumentCaptor = ArgumentCaptor
 				.forClass(RefreshRemoteApplicationEvent.class);
 		verify(applicationEventPublisher).publishEvent(argumentCaptor.capture());

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/HttpBasedSecretsWatchChangeDetectorTests.java
Patch:
@@ -125,7 +125,7 @@ void triggerSecretRefresh() {
 		WireMock.configureFor("localhost", WIRE_MOCK_SERVER.port());
 		WireMock.stubFor(WireMock.post(WireMock.urlEqualTo("/actuator/refresh"))
 				.willReturn(WireMock.aResponse().withStatus(200)));
-		StepVerifier.create(changeDetector.triggerRefresh(secret)).verifyComplete();
+		StepVerifier.create(changeDetector.triggerRefresh(secret, secret.getMetadata().getName())).verifyComplete();
 		WireMock.verify(WireMock.postRequestedFor(WireMock.urlEqualTo("/actuator/refresh")));
 	}
 
@@ -140,7 +140,7 @@ void triggerSecretRefreshWithPropertiesBasedActuatorPath() {
 		WireMock.configureFor("localhost", WIRE_MOCK_SERVER.port());
 		WireMock.stubFor(WireMock.post(WireMock.urlEqualTo("/my/custom/actuator/refresh"))
 				.willReturn(WireMock.aResponse().withStatus(200)));
-		StepVerifier.create(changeDetector.triggerRefresh(secret)).verifyComplete();
+		StepVerifier.create(changeDetector.triggerRefresh(secret, secret.getMetadata().getName())).verifyComplete();
 		WireMock.verify(WireMock.postRequestedFor(WireMock.urlEqualTo("/my/custom/actuator/refresh")));
 	}
 
@@ -166,7 +166,7 @@ void triggerSecretRefreshWithAnnotationActuatorPath() {
 		secret.setMetadata(objectMeta);
 		WireMock.stubFor(WireMock.post(WireMock.urlEqualTo("/my/custom/actuator/refresh"))
 				.willReturn(WireMock.aResponse().withStatus(200)));
-		StepVerifier.create(changeDetector.triggerRefresh(secret)).verifyComplete();
+		StepVerifier.create(changeDetector.triggerRefresh(secret, secret.getMetadata().getName())).verifyComplete();
 		WireMock.verify(WireMock.postRequestedFor(WireMock.urlEqualTo("/my/custom/actuator/refresh")));
 	}
 

File: spring-cloud-kubernetes-client-autoconfig/src/test/java/org/springframework/cloud/kubernetes/client/ActuatorEnabledHealthTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.cloud.kubernetes.client;
 
-import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -46,8 +45,8 @@ class ActuatorEnabledHealthTest {
 	@Test
 	void healthEndpointShouldContainKubernetes() {
 		this.webClient.get().uri("http://localhost:{port}/actuator/health", this.port)
-				.accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody(String.class)
-				.value(Matchers.containsString("kubernetes"));
+				.accept(MediaType.APPLICATION_JSON).exchange().expectStatus().isOk().expectBody()
+				.jsonPath("components.kubernetes").exists();
 
 		Assertions.assertNotNull(registry.getContributor("kubernetes"),
 				"reactive kubernetes contributor must be present when 'management.health.kubernetes.enabled=true'");

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/fabric8/Fabric8UserAgentPropertiesConfigurationTests.java
Patch:
@@ -30,7 +30,7 @@
  */
 @SpringBootTest(classes = App.class, properties = { "spring.cloud.kubernetes.client.userAgent=non-default",
 		"spring.main.cloud-platform=KUBERNETES" })
-class Fabric8UserAgentPropertiesConfiguration {
+class Fabric8UserAgentPropertiesConfigurationTests {
 
 	@Autowired
 	private KubernetesClient client;

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedConfigMapChangeDetector.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Set;
 
+import io.kubernetes.client.common.KubernetesObject;
 import io.kubernetes.client.informer.ResourceEventHandler;
 import io.kubernetes.client.informer.SharedIndexInformer;
 import io.kubernetes.client.informer.SharedInformerFactory;
@@ -145,7 +146,7 @@ void shutdown() {
 		factory.stopAllRegisteredInformers();
 	}
 
-	protected void onEvent(V1ConfigMap configMap) {
+	protected void onEvent(KubernetesObject configMap) {
 		boolean reload = ConfigReloadUtil.reload("config-map", configMap.toString(), propertySourceLocator, environment,
 				KubernetesClientConfigMapPropertySource.class);
 		if (reload) {

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedSecretsChangeDetector.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Set;
 
+import io.kubernetes.client.common.KubernetesObject;
 import io.kubernetes.client.informer.ResourceEventHandler;
 import io.kubernetes.client.informer.SharedIndexInformer;
 import io.kubernetes.client.informer.SharedInformerFactory;
@@ -144,7 +145,7 @@ void shutdown() {
 		factory.stopAllRegisteredInformers();
 	}
 
-	protected void onEvent(V1Secret secret) {
+	protected void onEvent(KubernetesObject secret) {
 		boolean reload = ConfigReloadUtil.reload("secrets", secret.toString(), propertySourceLocator, environment,
 				KubernetesClientSecretsPropertySource.class);
 		if (reload) {

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/ConfigurationUpdateStrategy.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Nicola Ferraro
  */
-public final record ConfigurationUpdateStrategy(String name, Runnable reloadProcedure) {
+public record ConfigurationUpdateStrategy(String name, Runnable reloadProcedure) {
 
 	public ConfigurationUpdateStrategy(String name, Runnable reloadProcedure) {
 		this.name = Objects.requireNonNull(name, "name cannot be null");

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedConfigMapWatcherChangeDetectorTests.java
Patch:
@@ -80,8 +80,8 @@ void setup() {
 		busProperties = new BusProperties();
 		changeDetector = new BusEventBasedConfigMapWatcherChangeDetector(coreV1Api, mockEnvironment,
 				configReloadProperties, UPDATE_STRATEGY, configMapPropertySourceLocator,
-				new KubernetesNamespaceProvider(mockEnvironment), busProperties,
-				configurationWatcherConfigurationProperties, threadPoolTaskExecutor, applicationEventPublisher);
+				new KubernetesNamespaceProvider(mockEnvironment), configurationWatcherConfigurationProperties,
+				threadPoolTaskExecutor, new BusRefreshTrigger(applicationEventPublisher, busProperties.getId()));
 	}
 
 	@Test

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedSecretsWatcherChangeDetectorTests.java
Patch:
@@ -80,8 +80,8 @@ void setup() {
 		busProperties = new BusProperties();
 		changeDetector = new BusEventBasedSecretsWatcherChangeDetector(coreV1Api, mockEnvironment,
 				configReloadProperties, UPDATE_STRATEGY, secretsPropertySourceLocator,
-				new KubernetesNamespaceProvider(mockEnvironment), busProperties,
-				configurationWatcherConfigurationProperties, threadPoolTaskExecutor, applicationEventPublisher);
+				new KubernetesNamespaceProvider(mockEnvironment), configurationWatcherConfigurationProperties,
+				threadPoolTaskExecutor, new BusRefreshTrigger(applicationEventPublisher, busProperties.getId()));
 	}
 
 	@Test

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/HttpBasedSecretsWatchChangeDetectorTests.java
Patch:
@@ -98,8 +98,8 @@ void setup() {
 		WebClient webClient = WebClient.builder().build();
 		changeDetector = new HttpBasedSecretsWatchChangeDetector(coreV1Api, mockEnvironment, configReloadProperties,
 				updateStrategy, secretsPropertySourceLocator, new KubernetesNamespaceProvider(mockEnvironment),
-				configurationWatcherConfigurationProperties, threadPoolTaskExecutor, webClient,
-				reactiveDiscoveryClient);
+				configurationWatcherConfigurationProperties, threadPoolTaskExecutor, new HttpRefreshTrigger(
+						reactiveDiscoveryClient, configurationWatcherConfigurationProperties, webClient));
 	}
 
 	@BeforeAll
@@ -148,7 +148,7 @@ void triggerSecretRefreshWithPropertiesBasedActuatorPath() {
 	void triggerSecretRefreshWithAnnotationActuatorPath() {
 		WireMock.configureFor("localhost", WIRE_MOCK_SERVER.port());
 		Map<String, String> metadata = new HashMap<>();
-		metadata.put(HttpBasedConfigMapWatchChangeDetector.ANNOTATION_KEY,
+		metadata.put(ConfigurationWatcherConfigurationProperties.ANNOTATION_KEY,
 				"http://:" + WIRE_MOCK_SERVER.port() + "/my/custom/actuator");
 		V1EndpointAddress fooEndpointAddress = new V1EndpointAddress();
 		fooEndpointAddress.setIp("127.0.0.1");

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/ConfigMapWatcherChangeDetector.java
Patch:
@@ -79,7 +79,7 @@ protected void onEvent(V1ConfigMap configMap) {
 		else {
 			if (log.isDebugEnabled()) {
 				log.debug("Not publishing event. ConfigMap " + configMap.getMetadata().getName()
-						+ " does not contain the label " + k8SConfigurationProperties.getConfigLabel());
+						+ " does not contain the label " + ConfigurationWatcherConfigurationProperties.CONFIG_LABEL);
 			}
 		}
 	}
@@ -88,8 +88,8 @@ protected boolean isSpringCloudKubernetesConfig(V1ConfigMap configMap) {
 		if (configMap.getMetadata() == null || configMap.getMetadata().getLabels() == null) {
 			return false;
 		}
-		return Boolean.parseBoolean(
-				configMap.getMetadata().getLabels().getOrDefault(k8SConfigurationProperties.getConfigLabel(), "false"));
+		return Boolean.parseBoolean(configMap.getMetadata().getLabels()
+				.getOrDefault(ConfigurationWatcherConfigurationProperties.CONFIG_LABEL, "false"));
 	}
 
 	protected abstract Mono<Void> triggerRefresh(V1ConfigMap configMap);

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/SecretsWatcherChangeDetector.java
Patch:
@@ -62,8 +62,8 @@ protected boolean isSpringCloudKubernetesSecret(V1Secret secret) {
 		if (secret.getMetadata() == null || secret.getMetadata().getLabels() == null) {
 			return false;
 		}
-		return Boolean.parseBoolean(
-				secret.getMetadata().getLabels().getOrDefault(k8SConfigurationProperties.getSecretLabel(), "false"));
+		return Boolean.parseBoolean(secret.getMetadata().getLabels()
+				.getOrDefault(ConfigurationWatcherConfigurationProperties.SECRET_LABEL, "false"));
 	}
 
 	protected abstract Mono<Void> triggerRefresh(V1Secret secret);
@@ -88,7 +88,7 @@ protected void onEvent(V1Secret secret) {
 		else {
 			if (log.isDebugEnabled()) {
 				log.debug("Not publishing event. Secret " + secret.getMetadata().getName()
-						+ " does not contain the label " + k8SConfigurationProperties.getSecretLabel());
+						+ " does not contain the label " + ConfigurationWatcherConfigurationProperties.SECRET_LABEL);
 			}
 		}
 	}

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/NamedConfigMapContextToSourceDataProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.cloud.kubernetes.client.config;
 
-import java.util.Set;
+import java.util.LinkedHashSet;
 import java.util.function.Supplier;
 
 import org.springframework.cloud.kubernetes.commons.config.MultipleSourcesContainer;
@@ -43,7 +43,7 @@ public KubernetesClientContextToSourceData get() {
 
 			return new NamedSourceData() {
 				@Override
-				public MultipleSourcesContainer dataSupplier(Set<String> sourceNames) {
+				public MultipleSourcesContainer dataSupplier(LinkedHashSet<String> sourceNames) {
 					return KubernetesClientConfigUtils.configMapsDataByName(context.client(), context.namespace(),
 							sourceNames, context.environment());
 				}

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/NamedSecretContextToSourceDataProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.cloud.kubernetes.client.config;
 
-import java.util.Set;
+import java.util.LinkedHashSet;
 import java.util.function.Supplier;
 
 import org.springframework.cloud.kubernetes.commons.config.MultipleSourcesContainer;
@@ -42,7 +42,7 @@ public KubernetesClientContextToSourceData get() {
 
 			return new NamedSourceData() {
 				@Override
-				public MultipleSourcesContainer dataSupplier(Set<String> sourceNames) {
+				public MultipleSourcesContainer dataSupplier(LinkedHashSet<String> sourceNames) {
 					return KubernetesClientConfigUtils.secretsDataByName(context.client(), context.namespace(),
 							sourceNames, context.environment());
 				}

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_profile/controller/LabeledConfigMapWithProfileController.java
Patch:
@@ -40,7 +40,7 @@ public String blue() {
 
 	@GetMapping("/labeled-configmap/profile/green")
 	public String green() {
-		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven();
+		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven() + "#" + green.getEight();
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_secret_with_profile/controller/LabeledSecretWithProfileController.java
Patch:
@@ -40,7 +40,7 @@ public String blue() {
 
 	@GetMapping("/labeled-secret/profile/green")
 	public String green() {
-		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven();
+		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven() + "#" + green.getEight();
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigUtils.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.springframework.cloud.kubernetes.fabric8.config;
 
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -161,7 +162,7 @@ static MultipleSourcesContainer configMapsDataByLabels(KubernetesClient client,
 	 * </pre>
 	 */
 	static MultipleSourcesContainer secretsDataByName(KubernetesClient client, String namespace,
-			Set<String> sourceNames, Environment environment) {
+			LinkedHashSet<String> sourceNames, Environment environment) {
 		List<Secret> secrets = secretsSearch(client, namespace);
 		if (ConfigUtils.noSources(secrets, namespace)) {
 			return MultipleSourcesContainer.empty();
@@ -181,7 +182,7 @@ static MultipleSourcesContainer secretsDataByName(KubernetesClient client, Strin
 	 * </pre>
 	 */
 	static MultipleSourcesContainer configMapsDataByName(KubernetesClient client, String namespace,
-			Set<String> sourceNames, Environment environment) {
+			LinkedHashSet<String> sourceNames, Environment environment) {
 		List<ConfigMap> configMaps = configMapsSearch(client, namespace);
 		if (ConfigUtils.noSources(configMaps, namespace)) {
 			return MultipleSourcesContainer.empty();

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/NamedConfigMapContextToSourceDataProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.cloud.kubernetes.fabric8.config;
 
-import java.util.Set;
+import java.util.LinkedHashSet;
 import java.util.function.Supplier;
 
 import org.springframework.cloud.kubernetes.commons.config.MultipleSourcesContainer;
@@ -50,7 +50,7 @@ public Fabric8ContextToSourceData get() {
 
 			return new NamedSourceData() {
 				@Override
-				public MultipleSourcesContainer dataSupplier(Set<String> sourceNames) {
+				public MultipleSourcesContainer dataSupplier(LinkedHashSet<String> sourceNames) {
 					return Fabric8ConfigUtils.configMapsDataByName(context.client(), context.namespace(), sourceNames,
 							context.environment());
 				}

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/NamedSecretContextToSourceDataProvider.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.cloud.kubernetes.fabric8.config;
 
-import java.util.Set;
+import java.util.LinkedHashSet;
 import java.util.function.Supplier;
 
 import org.springframework.cloud.kubernetes.commons.config.MultipleSourcesContainer;
@@ -41,7 +41,7 @@ public Fabric8ContextToSourceData get() {
 
 			return new NamedSourceData() {
 				@Override
-				public MultipleSourcesContainer dataSupplier(Set<String> sourceNames) {
+				public MultipleSourcesContainer dataSupplier(LinkedHashSet<String> sourceNames) {
 					return Fabric8ConfigUtils.secretsDataByName(context.client(), context.namespace(), sourceNames,
 							context.environment());
 				}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/labeled_config_map_with_profile/controller/LabeledConfigMapWithProfileController.java
Patch:
@@ -40,7 +40,7 @@ public String blue() {
 
 	@GetMapping("/labeled-configmap/profile/green")
 	public String green() {
-		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven();
+		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven() + "#" + green.getEight();
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/labeled_secret_with_profile/controller/LabeledSecretWithProfileController.java
Patch:
@@ -40,7 +40,7 @@ public String blue() {
 
 	@GetMapping("/labeled-secret/profile/green")
 	public String green() {
-		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven();
+		return green.getTwo() + "#" + green.getSix() + "#" + green.getSeven() + "#" + green.getEight();
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/named_config_map_with_profile/NamedConfigMapWithProfileTests.java
Patch:
@@ -48,6 +48,9 @@ static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
+		// the fact that property names are the same, also tests that we evaluate config
+		// map
+		// properties in order: first non-profile ones and then profile based one
 		Map<String, String> one = Collections.singletonMap("one.property", "one");
 		Map<String, String> oneFromKubernetesProfile = Collections.singletonMap("one.property", "one-from-k8s");
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/named_secret_with_profile/NamedSecretWithProfileTests.java
Patch:
@@ -50,6 +50,9 @@ static void setUpBeforeClass(KubernetesClient mockClient) {
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
 		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
+		// both "secret-one" and "secret-one-k8s" have the same property "one.property",
+		// but since non-profile based sources are used before profile based sources,
+		// properties from secret "secret-one-k8s" must be visible in our tests.
 		Map<String, String> one = Collections.singletonMap("one.property",
 				Base64.getEncoder().encodeToString("one".getBytes(StandardCharsets.UTF_8)));
 		Map<String, String> oneFromKubernetesProfile = Collections.singletonMap("one.property",

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshIT.java
Patch:
@@ -132,7 +132,7 @@ void testActuatorRefresh() throws Exception {
 		api.createNamespacedConfigMap(NAMESPACE, configMap, null, null, null);
 
 		// Wait a bit before we verify
-		await().atMost(Duration.ofMillis(3400))
+		await().atMost(Duration.ofSeconds(30))
 				.until(() -> !findAll(postRequestedFor(urlEqualTo("/actuator/refresh"))).isEmpty());
 
 		verify(postRequestedFor(urlEqualTo("/actuator/refresh")));

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshKafkaIT.java
Patch:
@@ -152,7 +152,7 @@ void testRefresh() throws Exception {
 		WebClient serviceClient = builder.baseUrl("http://localhost:80/it").build();
 
 		Boolean[] value = new Boolean[1];
-		await().pollInterval(Duration.ofSeconds(3)).atMost(Duration.ofSeconds(90)).until(() -> {
+		await().pollInterval(Duration.ofSeconds(3)).atMost(Duration.ofSeconds(240)).until(() -> {
 			value[0] = serviceClient.method(HttpMethod.GET).retrieve().bodyToMono(Boolean.class).retryWhen(retrySpec())
 					.block();
 			return value[0];
@@ -285,7 +285,7 @@ private WebClient.Builder builder() {
 	}
 
 	private RetryBackoffSpec retrySpec() {
-		return Retry.fixedDelay(15, Duration.ofSeconds(1)).filter(Objects::nonNull);
+		return Retry.fixedDelay(240, Duration.ofSeconds(1)).filter(Objects::nonNull);
 	}
 
 }

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-configmap-polling-reload/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/polling/reload/ConfigMapPollingReloadIT.java
Patch:
@@ -185,7 +185,7 @@ private WebClient.Builder builder() {
 	}
 
 	private RetryBackoffSpec retrySpec() {
-		return Retry.fixedDelay(15, Duration.ofSeconds(1)).filter(Objects::nonNull);
+		return Retry.fixedDelay(60, Duration.ofSeconds(1)).filter(Objects::nonNull);
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfiguration.java
Patch:
@@ -19,6 +19,8 @@
 import io.kubernetes.client.openapi.apis.CoreV1Api;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
@@ -39,6 +41,7 @@
 @Configuration(proxyBeanMethods = false)
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class KubernetesClientBootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientRetryBootstrapConfiguration.java
Patch:
@@ -20,6 +20,8 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
@@ -41,6 +43,7 @@
 @AutoConfigureBefore(KubernetesClientBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })
 @ConditionalOnKubernetesConfigOrSecretsRetryEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class KubernetesClientRetryBootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleConfigMapsTests.java
Patch:
@@ -38,7 +38,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = ExampleApp.class,
-		properties = { "spring.cloud.bootstrap.name=multiplecms" })
+		properties = { "spring.cloud.bootstrap.name=multiplecms", "spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 abstract class MultipleConfigMapsTests {

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedConfigMapChangeDetectorTests.java
Patch:
@@ -161,7 +161,7 @@ void watch() {
 		KubernetesClientEventBasedConfigMapChangeDetector changeDetector = new KubernetesClientEventBasedConfigMapChangeDetector(
 				coreV1Api, environment, new ConfigReloadProperties(), strategy, locator, kubernetesNamespaceProvider);
 
-		Thread controllerThread = new Thread(changeDetector::watch);
+		Thread controllerThread = new Thread(changeDetector::inform);
 		controllerThread.setDaemon(true);
 		controllerThread.start();
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedSecretsChangeDetectorTests.java
Patch:
@@ -158,7 +158,7 @@ void watch() {
 		KubernetesClientEventBasedSecretsChangeDetector changeDetector = new KubernetesClientEventBasedSecretsChangeDetector(
 				coreV1Api, environment, properties, strategy, locator, kubernetesNamespaceProvider);
 
-		Thread controllerThread = new Thread(changeDetector::watch);
+		Thread controllerThread = new Thread(changeDetector::inform);
 		controllerThread.setDaemon(true);
 		controllerThread.start();
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/ConfigMapWatcherChangeDetector.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.logging.LogFactory;
 import reactor.core.publisher.Mono;
 
+import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigurationUpdateStrategy;
 import org.springframework.cloud.kubernetes.fabric8.config.Fabric8ConfigMapPropertySourceLocator;
@@ -50,7 +51,8 @@ public ConfigMapWatcherChangeDetector(AbstractEnvironment environment, ConfigRel
 			Fabric8ConfigMapPropertySourceLocator fabric8ConfigMapPropertySourceLocator,
 			ConfigurationWatcherConfigurationProperties k8SConfigurationProperties,
 			ThreadPoolTaskExecutor threadPoolTaskExecutor) {
-		super(environment, properties, kubernetesClient, strategy, fabric8ConfigMapPropertySourceLocator);
+		super(environment, properties, kubernetesClient, strategy, fabric8ConfigMapPropertySourceLocator,
+				new KubernetesNamespaceProvider(environment));
 		this.executorService = Executors.newScheduledThreadPool(k8SConfigurationProperties.getThreadPoolSize(),
 				threadPoolTaskExecutor);
 		this.k8SConfigurationProperties = k8SConfigurationProperties;

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/main/java/org/springframework/cloud/kubernetes/configuration/watcher/SecretsWatcherChangeDetector.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.logging.LogFactory;
 import reactor.core.publisher.Mono;
 
+import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigurationUpdateStrategy;
 import org.springframework.cloud.kubernetes.fabric8.config.Fabric8SecretsPropertySourceLocator;
@@ -50,7 +51,8 @@ public SecretsWatcherChangeDetector(AbstractEnvironment environment, ConfigReloa
 			Fabric8SecretsPropertySourceLocator fabric8SecretsPropertySourceLocator,
 			ConfigurationWatcherConfigurationProperties k8SConfigurationProperties,
 			ThreadPoolTaskExecutor threadPoolTaskExecutor) {
-		super(environment, properties, kubernetesClient, strategy, fabric8SecretsPropertySourceLocator);
+		super(environment, properties, kubernetesClient, strategy, fabric8SecretsPropertySourceLocator,
+				new KubernetesNamespaceProvider(environment));
 		this.executorService = Executors.newScheduledThreadPool(k8SConfigurationProperties.getThreadPoolSize(),
 				threadPoolTaskExecutor);
 		this.k8SConfigurationProperties = k8SConfigurationProperties;

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedConfigMapWatcherChangeDetectorTests.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.springframework.cloud.kubernetes.configuration.watcher;
 
+import java.util.Set;
+
 import io.fabric8.kubernetes.api.model.ConfigMap;
 import io.fabric8.kubernetes.api.model.ObjectMeta;
 import io.fabric8.kubernetes.client.KubernetesClient;
@@ -70,6 +72,7 @@ class BusEventBasedConfigMapWatcherChangeDetectorTests {
 	void setup() {
 		MockEnvironment mockEnvironment = new MockEnvironment();
 		ConfigReloadProperties configReloadProperties = new ConfigReloadProperties();
+		configReloadProperties.setNamespaces(Set.of("default"));
 		ConfigurationWatcherConfigurationProperties configurationWatcherConfigurationProperties = new ConfigurationWatcherConfigurationProperties();
 		busProperties = new BusProperties();
 		changeDetector = new BusEventBasedConfigMapWatcherChangeDetector(mockEnvironment, configReloadProperties,

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedSecretsWatcherChangeDetectorTests.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.springframework.cloud.kubernetes.configuration.watcher;
 
+import java.util.Set;
+
 import io.fabric8.kubernetes.api.model.ObjectMeta;
 import io.fabric8.kubernetes.api.model.Secret;
 import io.fabric8.kubernetes.client.KubernetesClient;
@@ -70,6 +72,7 @@ class BusEventBasedSecretsWatcherChangeDetectorTests {
 	void setup() {
 		MockEnvironment mockEnvironment = new MockEnvironment();
 		ConfigReloadProperties configReloadProperties = new ConfigReloadProperties();
+		configReloadProperties.setNamespaces(Set.of("default"));
 		ConfigurationWatcherConfigurationProperties configurationWatcherConfigurationProperties = new ConfigurationWatcherConfigurationProperties();
 		busProperties = new BusProperties();
 		changeDetector = new BusEventBasedSecretsWatcherChangeDetector(mockEnvironment, configReloadProperties, client,

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/reload/Fabric8ConfigReloadAutoConfiguration.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.cloud.commons.util.TaskSchedulerWrapper;
 import org.springframework.cloud.context.refresh.ContextRefresher;
 import org.springframework.cloud.context.restart.RestartEndpoint;
+import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.ConditionalOnKubernetesAndConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
@@ -121,7 +122,7 @@ public ConfigurationChangeDetector configMapPropertyChangeEventWatcher(ConfigRel
 			AbstractEnvironment environment, KubernetesClient kubernetesClient) {
 
 		return new Fabric8EventBasedConfigMapChangeDetector(environment, properties, kubernetesClient, strategy,
-				fabric8ConfigMapPropertySourceLocator);
+				fabric8ConfigMapPropertySourceLocator, new KubernetesNamespaceProvider(environment));
 	}
 
 	/**
@@ -140,7 +141,7 @@ public ConfigurationChangeDetector secretsPropertyChangeEventWatcher(ConfigReloa
 			KubernetesClient kubernetesClient) {
 
 		return new Fabric8EventBasedSecretsChangeDetector(environment, properties, kubernetesClient, strategy,
-				fabric8SecretsPropertySourceLocator);
+				fabric8SecretsPropertySourceLocator, new KubernetesNamespaceProvider(environment));
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/EventBasedConfigurationChangeDetectorTests.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.cloud.bootstrap.config.BootstrapPropertySource;
+import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.NamedConfigMapNormalizedSource;
 import org.springframework.cloud.kubernetes.commons.config.NormalizedSource;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
@@ -79,7 +80,8 @@ void verifyConfigChangesAccountsForBootstrapPropertySources() {
 		});
 		Fabric8ConfigMapPropertySourceLocator configMapLocator = mock(Fabric8ConfigMapPropertySourceLocator.class);
 		Fabric8EventBasedConfigMapChangeDetector detector = new Fabric8EventBasedConfigMapChangeDetector(env,
-				configReloadProperties, k8sClient, configurationUpdateStrategy, configMapLocator);
+				configReloadProperties, k8sClient, configurationUpdateStrategy, configMapLocator,
+				new KubernetesNamespaceProvider(new MockEnvironment()));
 		List<Fabric8ConfigMapPropertySource> sources = detector
 				.findPropertySources(Fabric8ConfigMapPropertySource.class);
 		assertThat(sources.size()).isEqualTo(1);

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-secrets-event-reload/src/main/java/org/springframework/cloud/kubernetes/client/secrets/event/reload/SecretsProperties.java
Patch:
@@ -30,8 +30,8 @@ public String getKey() {
 		return key;
 	}
 
-	public void setKey(String key1) {
-		this.key = key1;
+	public void setKey(String key) {
+		this.key = key;
 	}
 
 }

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-secrets-event-reload/src/main/java/org/springframework/cloud/kubernetes/fabric8/secrets/event/reload/SecretsProperties.java
Patch:
@@ -30,8 +30,8 @@ public String getKey() {
 		return key;
 	}
 
-	public void setKey(String key1) {
-		this.key = key1;
+	public void setKey(String key) {
+		this.key = key;
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfiguration.java
Patch:
@@ -19,8 +19,6 @@
 import io.kubernetes.client.openapi.apis.CoreV1Api;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
-import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
@@ -43,7 +41,6 @@
 @ConditionalOnKubernetesEnabled
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })
-@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class KubernetesClientBootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientRetryBootstrapConfiguration.java
Patch:
@@ -20,8 +20,6 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
-import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
@@ -44,7 +42,6 @@
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @AutoConfigureBefore(KubernetesClientBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })
-@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesConfigOrSecretsRetryEnabled
 public class KubernetesClientRetryBootstrapConfiguration {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapIncludeProfileSpecificSourcesTests.java
Patch:
@@ -40,7 +40,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
 		classes = IncludeProfileSpecificSourcesApp.class,
 		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources",
-				"include.profile.specific.sources=true", "spring.main.cloud-platform=KUBERNETES" })
+				"include.profile.specific.sources=true" })
 @AutoConfigureWebTestClient
 @ActiveProfiles("dev")
 class KubernetesClientConfigMapIncludeProfileSpecificSourcesTests {

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapNameAsPrefixTests.java
Patch:
@@ -37,8 +37,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WithPrefixApp.class,
-		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix", "config.map.name.as.prefix.stub=true",
-				"spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix", "config.map.name.as.prefix.stub=true" })
 @AutoConfigureWebTestClient
 public class KubernetesClientConfigMapNameAsPrefixTests {
 

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8BootstrapConfiguration.java
Patch:
@@ -22,8 +22,6 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
-import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
@@ -50,7 +48,6 @@
 @Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
 @ConditionalOnClass({ ConfigMap.class, Secret.class })
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
-@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class Fabric8BootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8RetryBootstrapConfiguration.java
Patch:
@@ -23,8 +23,6 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
-import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
@@ -48,7 +46,6 @@
 @Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
 @ConditionalOnClass({ ConfigMap.class, Secret.class })
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
-@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesConfigOrSecretsRetryEnabled
 public class Fabric8RetryBootstrapConfiguration {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapWithIncludeProfileSpecificSourcesTests.java
Patch:
@@ -42,8 +42,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
 		classes = IncludeProfileSpecificSourcesApp.class,
-		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources",
-				"spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 @ActiveProfiles("dev")

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapWithPrefixTests.java
Patch:
@@ -40,8 +40,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WithPrefixApp.class,
-		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix",
-				"spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix"})
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 class ConfigMapWithPrefixTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsFromFilePathsTests.java
Patch:
@@ -42,8 +42,7 @@
 				"spring.cloud.kubernetes.config.enableApi=false",
 				"spring.cloud.kubernetes.config.paths=" + ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_FULL_PATH + ","
 						+ ConfigMapsFromFilePathsTests.SECOND_FILE_NAME_FULL_PATH + ","
-						+ ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_DUPLICATED_FULL_PATH,
-				"spring.main.cloud-platform=KUBERNETES" })
+						+ ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_DUPLICATED_FULL_PATH })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsFromFilePathsTests {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsMixedTests.java
Patch:
@@ -43,8 +43,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=" + ConfigMapsMixedTests.APPLICATION_NAME,
 				"spring.cloud.kubernetes.config.enableApi=true",
-				"spring.cloud.kubernetes.config.paths=" + ConfigMapsMixedTests.FILE_NAME_FULL_PATH,
-				"spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.config.paths=" + ConfigMapsMixedTests.FILE_NAME_FULL_PATH })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsMixedTests {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsTests.java
Patch:
@@ -41,8 +41,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "spring.application.name=configmap-example", "spring.cloud.kubernetes.reload.enabled=false",
-				"spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.application.name=configmap-example", "spring.cloud.kubernetes.reload.enabled=false"})
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithActiveProfilesNameTests.java
Patch:
@@ -43,7 +43,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-with-active-profile-name-example",
-				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfileExpressionTests.java
Patch:
@@ -41,7 +41,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-with-profile-example",
-				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles({ "production", "us-east" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfilesNoActiveProfileTests.java
Patch:
@@ -41,7 +41,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-with-profile-no-active-profiles-example",
-				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.reload.enabled=false" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsWithProfilesNoActiveProfileTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfilesTests.java
Patch:
@@ -40,7 +40,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-with-profile-example",
-				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithoutProfilesTests.java
Patch:
@@ -37,7 +37,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-without-profile-example",
-				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/CoreTest.java
Patch:
@@ -39,7 +39,7 @@
 @SpringBootTest(classes = TestApplication.class,
 		properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
 				"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
-				"spring.cloud.kubernetes.secrets.enableApi=true", "spring.main.cloud-platform=KUBERNETES" })
+				"spring.cloud.kubernetes.secrets.enableApi=true" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class CoreTest {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySourceTest.java
Patch:
@@ -39,8 +39,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = "spring.main.cloud-platform=KUBERNETES")
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class)
 @TestPropertySource("classpath:/application-secrets.properties")
 @EnableKubernetesMockClient(crud = true, https = false)
 class Fabric8SecretsPropertySourceTest {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleConfigMapsTests.java
Patch:
@@ -39,7 +39,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = ExampleApp.class,
-		properties = { "spring.cloud.bootstrap.name=multiplecms", "spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.cloud.bootstrap.name=multiplecms" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class MultipleConfigMapsTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleSecretsTests.java
Patch:
@@ -41,7 +41,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = MultiSecretsApp.class,
-		properties = { "spring.cloud.bootstrap.name=multiple-secrets", "spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.cloud.bootstrap.name=multiple-secrets" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class MultipleSecretsTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload/ConfigReloadAutoConfigurationTest.java
Patch:
@@ -99,7 +99,7 @@ public void kubernetesConfigReloadWhenKubernetesDisabled() {
 	public void kubernetesReloadEnabled() {
 		setup(KubernetesClientTestConfiguration.class, "spring.cloud.kubernetes.enabled=true",
 				"spring.cloud.kubernetes.config.enabled=true", "spring.cloud.kubernetes.secrets.enabled=true",
-				"spring.cloud.kubernetes.reload.enabled=true", "spring.main.cloud-platform=KUBERNETES");
+				"spring.cloud.kubernetes.reload.enabled=true");
 		assertThat(this.getContext().containsBean("configMapPropertySourceLocator")).isTrue();
 		assertThat(this.getContext().containsBean("secretsPropertySourceLocator")).isTrue();
 		assertThat(this.getContext().containsBean("configMapPropertyChangeEventWatcher")).isTrue();
@@ -110,7 +110,7 @@ public void kubernetesReloadEnabled() {
 	public void kubernetesReloadEnabledButSecretDisabled() {
 		setup(KubernetesClientTestConfiguration.class, "spring.cloud.kubernetes.enabled=true",
 				"spring.cloud.kubernetes.config.enabled=true", "spring.cloud.kubernetes.secrets.enabled=false",
-				"spring.cloud.kubernetes.reload.enabled=true", "spring.main.cloud-platform=KUBERNETES");
+				"spring.cloud.kubernetes.reload.enabled=true");
 		assertThat(this.getContext().containsBean("configMapPropertySourceLocator")).isTrue();
 		assertThat(this.getContext().containsBean("secretsPropertySourceLocator")).isFalse();
 		assertThat(this.getContext().containsBean("configMapPropertyChangeEventWatcher")).isTrue();

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/secrets_with_labels/SecretsWithLabelsTests.java
Patch:
@@ -37,8 +37,7 @@
  * @author wind57
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = SecretsWithLabelsApp.class,
-		properties = { "spring.cloud.bootstrap.name=secret-with-labels-config",
-				"spring.main.cloud-platform=KUBERNETES" })
+		properties = { "spring.cloud.bootstrap.name=secret-with-labels-config"})
 @EnableKubernetesMockClient(crud = true, https = false)
 class SecretsWithLabelsTests {
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/LeadershipController.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.integration.leader.Candidate;
 import org.springframework.integration.leader.Context;
 import org.springframework.integration.leader.event.LeaderEventPublisher;
+import org.springframework.util.StringUtils;
 
 /**
  * @author Ryan Baxter
@@ -84,7 +85,7 @@ protected Leader extractLeader(Map<String, String> data) {
 
 		String leaderKey = getLeaderKey();
 		String leaderId = data.get(leaderKey);
-		if (leaderId == null) {
+		if (!StringUtils.hasText(leaderId)) {
 			return null;
 		}
 

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderInitiatorTest.java
Patch:
@@ -83,7 +83,9 @@ public void shouldStart() throws InterruptedException {
 		assertThat(this.leaderInitiator.isRunning()).isTrue();
 		verify(this.mockFabric8LeaderRecordWatcher).start();
 		verify(this.mockFabric8PodReadinessWatcher).start();
-		Thread.sleep(10);
+
+		// TODO this tests needs to be reviewed not to use sleep
+		Thread.sleep(1000);
 		verify(this.mockFabric8LeadershipController, atLeastOnce()).update();
 	}
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshKafkaIT.java
Patch:
@@ -72,8 +72,6 @@ class ActuatorRefreshKafkaIT {
 
 	private static final String ZOOKEEPER_DEPLOYMENT = "zookeeper";
 
-	private static final String KAFKA_IMAGE = "wurstmeister/kafka";
-
 	private static CoreV1Api api;
 
 	private static AppsV1Api appsApi;

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/Commons.java
Patch:
@@ -48,7 +48,7 @@ private Commons() {
 	public static final String RANCHER = "rancher/k3s:v1.21.10-k3s1";
 
 	/**
-	 * Command to use when starting rancher. Without "server" option, traefik si not
+	 * Command to use when starting rancher. Without "server" option, traefik is not
 	 * installed
 	 */
 	public static final String RANCHER_COMMAND = "server";

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/Fabric8Utils.java
Patch:
@@ -67,7 +67,7 @@ private static boolean isDeploymentReady(KubernetesClient client, String deploym
 		Deployment deployment = client.apps().deployments().inNamespace(namespace).withName(deploymentName).get();
 
 		Integer availableReplicas = deployment.getStatus().getAvailableReplicas();
-		LOG.info("Available replicas for " + deploymentName + ": " + availableReplicas);
+		LOG.info("Available replicas for " + deploymentName + ": " + ((availableReplicas == null) ? 0 : 1));
 		return availableReplicas != null && availableReplicas >= 1;
 	}
 

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/K8SUtils.java
Patch:
@@ -376,7 +376,7 @@ public static String getImageFromDeployment(Deployment deployment) {
 
 	private void innerDeployWiremock(String namespace, boolean rootPath, K3sContainer container) throws Exception {
 		V1Deployment deployment = getWiremockDeployment();
-		String[] image = getImageFromDeployment(deployment).split(":");
+		String[] image = getImageFromDeployment(deployment).split(":", 2);
 		Commons.pullImage(image[0], image[1], container);
 		Commons.loadImage(image[0], image[1], "wiremock", container);
 		appsApi.createNamespacedDeployment(namespace, getWiremockDeployment(), null, null, null);

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/configmap/Fabric8DiscoveryIT.java
Patch:
@@ -157,6 +157,9 @@ private static void deployMockManifests() {
 		try {
 
 			Deployment deployment = client.apps().deployments().load(getMockDeployment()).get();
+			String[] image = K8SUtils.getImageFromDeployment(deployment).split(":");
+			Commons.pullImage(image[0], image[1], K3S);
+			Commons.loadImage(image[0], image[1], "wiremock", K3S);
 			client.apps().deployments().inNamespace(NAMESPACE).create(deployment);
 			mockDeploymentName = deployment.getMetadata().getName();
 			mockDeploymentImage = deployment.getSpec().getTemplate().getSpec().getContainers().get(0).getImage();

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-fabric8-client-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/it/Fabric8ClientLoadbalancerIT.java
Patch:
@@ -215,6 +215,9 @@ private static void deployMockManifests() {
 		try {
 
 			Deployment deployment = client.apps().deployments().load(getMockDeployment()).get();
+			String[] image = K8SUtils.getImageFromDeployment(deployment).split(":");
+			Commons.pullImage(image[0], image[1], K3S);
+			Commons.loadImage(image[0], image[1], "wiremock", K3S);
 			client.apps().deployments().inNamespace(NAMESPACE).create(deployment);
 			mockDeploymentName = deployment.getMetadata().getName();
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocatorTests.java
Patch:
@@ -183,7 +183,7 @@ public void locateShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 				configMapConfigProperties, new KubernetesNamespaceProvider(new MockEnvironment()));
 
 		assertThatThrownBy(() -> locator.locate(new MockEnvironment())).isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap(s) in namespace 'default'");
+				.hasMessage("Internal Server Error");
 	}
 
 	@Test

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceTests.java
Patch:
@@ -182,8 +182,7 @@ public void constructorShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 				new MockEnvironment());
 
 		assertThatThrownBy(() -> new KubernetesClientConfigMapPropertySource(context))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap(s) in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 		verify(getRequestedFor(urlEqualTo("/api/v1/namespaces/default/configmaps")));
 	}
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceLocatorTests.java
Patch:
@@ -174,7 +174,7 @@ void locateShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 				new KubernetesNamespaceProvider(new MockEnvironment()), secretsConfigProperties);
 
 		assertThatThrownBy(() -> locator.locate(new MockEnvironment())).isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read Secret with name 'db-secret' in namespace 'default'");
+				.hasMessage("Internal Server Error");
 	}
 
 	@Test

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_prefix/properties/One.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.applications.include_profile_specific_sources.properties;
+package org.springframework.cloud.kubernetes.client.config.applications.labeled_config_map_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/labeled_config_map_with_prefix/properties/Two.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.applications.include_profile_specific_sources.properties;
+package org.springframework.cloud.kubernetes.client.config.applications.labeled_config_map_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_prefix/NamedConfigMapWithPrefixBootstrapTests.java
Patch:
@@ -22,7 +22,7 @@
  * @author Ryan Baxter
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = NamedConfigMapWithPrefixApp.class,
-		properties = { "spring.cloud.bootstrap.name=named-config-map-with-prefix",
+		properties = { "spring.cloud.bootstrap.name=named-configmap-with-prefix",
 				"named.config.map.with.prefix.stub=true", "spring.main.cloud-platform=KUBERNETES",
 				"spring.cloud.bootstrap.enabled=true", "spring.cloud.kubernetes.client.namespace=spring-k8s" })
 class NamedConfigMapWithPrefixBootstrapTests extends NamedConfigMapWithPrefixTests {

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_prefix/NamedConfigMapWithPrefixConfigDataTests.java
Patch:
@@ -36,7 +36,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = NamedConfigMapWithPrefixApp.class,
 		properties = { "spring.cloud.application.name=named-configmap-with-prefix",
 				"named.config.map.with.prefix.stub=true", "spring.main.cloud-platform=KUBERNETES",
-				"spring.config.import=kubernetes:,classpath:./named-config-map-with-prefix.yaml" })
+				"spring.config.import=kubernetes:,classpath:./named-configmap-with-prefix.yaml" })
 class NamedConfigMapWithPrefixConfigDataTests extends NamedConfigMapWithPrefixTests {
 
 	private static MockedStatic<KubernetesClientUtils> clientUtilsMock;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_prefix/NamedConfigMapWithPrefixTests.java
Patch:
@@ -26,7 +26,8 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 /**
- * The stub data for this test is in : ConfigMapNameAsPrefixConfigurationStub
+ * The stub data for this test is in :
+ * {@link org.springframework.cloud.kubernetes.client.config.boostrap.stubs.NamedConfigMapWithPrefixConfigurationStub}
  *
  * @author wind57
  */

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_profile/properties/Three.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.applications.include_profile_specific_sources.properties;
+package org.springframework.cloud.kubernetes.client.config.applications.named_config_map_with_profile.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-@ConfigurationProperties("three")
+@ConfigurationProperties("configmap-three")
 public class Three {
 
 	private String property;

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/boostrap/stubs/NamedSecretWithPrefixConfigurationStub.java
Patch:
@@ -59,7 +59,6 @@ public WireMockServer wireMock() {
 	public ApiClient apiClient(WireMockServer wireMockServer) {
 		ApiClient apiClient = new ClientBuilder().setBasePath("http://localhost:" + wireMockServer.port()).build();
 		io.kubernetes.client.openapi.Configuration.setDefaultApiClient(apiClient);
-		apiClient.setDebugging(true);
 		stubData();
 		return apiClient;
 	}

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/configmap_retry/ConfigFailFastEnabledButRetryDisabled.java
Patch:
@@ -98,8 +98,7 @@ void locateShouldFailWithoutRetrying() {
 
 		assertThat(context.containsBean("kubernetesConfigRetryInterceptor")).isFalse();
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap(s) in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 
 		// verify that propertySourceLocator.locate is called only once
 		verify(propertySourceLocator, times(1)).locate(any());

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/configmap_retry/ConfigRetryDisabledButSecretsRetryEnabled.java
Patch:
@@ -110,8 +110,7 @@ void locateShouldFailWithoutRetrying() {
 		// TODO not in bootstrap
 		// assertThat(context.containsBean("kubernetesConfigRetryInterceptor")).isTrue();
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap(s) in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 
 		// verify that propertySourceLocator.locate is called only once
 		verify(propertySourceLocator, times(1)).locate(any());

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/configmap_retry/ConfigRetryEnabled.java
Patch:
@@ -159,8 +159,7 @@ void locateShouldRetryAndFail() {
 		stubFor(get(API).willReturn(aResponse().withStatus(500).withBody("Internal Server Error")));
 
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap(s) in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 
 		// verify the request was retried 5 times
 		WireMock.verify(5, getRequestedFor(urlEqualTo(API)));

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/secrets_retry/SecretsFailFastEnabledButRetryDisabled.java
Patch:
@@ -110,8 +110,7 @@ void locateShouldFailWithoutRetrying() {
 
 		assertThat(context.containsBean("kubernetesSecretsRetryInterceptor")).isFalse();
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read Secret with name 'my-secret' in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 
 		// verify that propertySourceLocator.locate is called only once
 		verify(propertySourceLocator, times(1)).locate(any());

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/secrets_retry/SecretsRetryDisabledButConfigRetryEnabled.java
Patch:
@@ -118,8 +118,7 @@ void locateShouldFailWithoutRetrying() {
 		// TODO not in bootstrap
 		// assertThat(context.containsBean("kubernetesSecretsRetryInterceptor")).isTrue();
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read Secret with name 'my-secret' in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 
 		// verify that propertySourceLocator.locate is called only once
 		verify(propertySourceLocator, times(1)).locate(any());

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/secrets_retry/SecretsRetryEnabled.java
Patch:
@@ -167,8 +167,7 @@ void locateShouldRetryAndFail() {
 		stubFor(get(API).willReturn(aResponse().withStatus(500).withBody("Internal Server Error")));
 
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
-				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read Secret with name 'my-secret' in namespace 'default'");
+				.isInstanceOf(IllegalStateException.class).hasMessage("Internal Server Error");
 
 		// verify retried 5 times until failure
 		WireMock.verify(5, getRequestedFor(urlEqualTo(API)));

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigDataRetryableConfigMapPropertySourceLocator.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class ConfigDataRetryableConfigMapPropertySourceLocator extends ConfigMapPropertySourceLocator {
 
-	private RetryTemplate retryTemplate;
+	private final RetryTemplate retryTemplate;
 
 	private ConfigMapPropertySourceLocator configMapPropertySourceLocator;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/NormalizedSource.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author wind57
  */
-public sealed abstract class NormalizedSource permits NamedSecretNormalizedSource,LabeledSecretNormalizedSource,NamedConfigMapNormalizedSource {
+public sealed abstract class NormalizedSource permits NamedSecretNormalizedSource,LabeledSecretNormalizedSource,NamedConfigMapNormalizedSource,LabeledConfigMapNormalizedSource {
 
 	private final String namespace;
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/main/java/org/springframework/cloud/kubernetes/configserver/KubernetesConfigServerAutoConfiguration.java
Patch:
@@ -96,7 +96,7 @@ public KubernetesPropertySourceSupplier secretsPropertySourceSupplier(Kubernetes
 			List<MapPropertySource> propertySources = new ArrayList<>();
 
 			namespaces.forEach(space -> {
-				NormalizedSource source = new NamedSecretNormalizedSource(applicationName, space, false);
+				NormalizedSource source = new NamedSecretNormalizedSource(applicationName, space, false, false);
 				KubernetesClientConfigContext context = new KubernetesClientConfigContext(coreApi, source, space,
 						springEnv);
 				propertySources.add(new KubernetesClientSecretsPropertySource(context));

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/BoostrapFabric8SecretsPropertySourceTest.java
Patch:
@@ -19,14 +19,11 @@
 import io.fabric8.kubernetes.client.KubernetesClient;
 import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient;
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.extension.ExtendWith;
 
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.test.context.TestPropertySource;
-import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-@ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true" })
 @TestPropertySource("classpath:/application-secrets.properties")

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceLocatorTests.java
Patch:
@@ -52,7 +52,7 @@ class Fabric8ConfigMapPropertySourceLocatorTests {
 	void locateShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 		String name = "my-config";
 		String namespace = "default";
-		String path = String.format("/api/v1/namespaces/%s/configmaps/%s", namespace, name);
+		String path = String.format("/api/v1/namespaces/%s/configmaps", namespace);
 
 		mockServer.expect().withPath(path).andReturn(500, "Internal Server Error").once();
 
@@ -65,7 +65,7 @@ void locateShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 				configMapConfigProperties, new KubernetesNamespaceProvider(new MockEnvironment()));
 
 		assertThatThrownBy(() -> locator.locate(new MockEnvironment())).isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap with name '" + name + "' in namespace '" + namespace + "'");
+				.hasMessageContaining("api/v1/namespaces/default/configmaps. Message: Internal Server Error.");
 	}
 
 	@Test

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceTests.java
Patch:
@@ -50,13 +50,13 @@ class Fabric8ConfigMapPropertySourceTests {
 	void constructorShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 		final String name = "my-config";
 		final String namespace = "default";
-		final String path = String.format("/api/v1/namespaces/%s/configmaps/%s", namespace, name);
+		final String path = String.format("/api/v1/namespaces/%s/configmaps", namespace);
 
 		mockServer.expect().withPath(path).andReturn(500, "Internal Server Error").once();
 		NormalizedSource source = new NamedConfigMapNormalizedSource(name, namespace, true, DEFAULT, true);
 		Fabric8ConfigContext context = new Fabric8ConfigContext(mockClient, source, "default", new MockEnvironment());
 		assertThatThrownBy(() -> new Fabric8ConfigMapPropertySource(context)).isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap with name '" + name + "' in namespace '" + namespace + "'");
+				.hasMessageContaining("v1/namespaces/default/configmaps. Message: Internal Server Error.");
 	}
 
 	@Test

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/labeled_config_map_with_prefix/properties/One.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.include_profile_specific_sources.properties;
+package org.springframework.cloud.kubernetes.fabric8.config.labeled_config_map_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/labeled_config_map_with_prefix/properties/Two.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.include_profile_specific_sources.properties;
+package org.springframework.cloud.kubernetes.fabric8.config.labeled_config_map_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/labeled_secret_with_prefix/LabeledSecretWithPrefixConfigDataTests.java
Patch:
@@ -26,7 +26,7 @@
  * @author wind57
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = LabeledSecretWithPrefixApp.class,
-		properties = { "spring.application.name=named-secret-with-prefix", "spring.main.cloud-platform=KUBERNETES",
+		properties = { "spring.application.name=labeled-secret-with-prefix", "spring.main.cloud-platform=KUBERNETES",
 				"spring.config.import=kubernetes:,classpath:./labeled-secret-with-prefix.yaml" })
 @EnableKubernetesMockClient(crud = true, https = false)
 class LabeledSecretWithPrefixConfigDataTests extends LabeledSecretWithPrefixTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/locator_retry/ConfigFailFastEnabledButRetryDisabled.java
Patch:
@@ -75,7 +75,7 @@ void locateShouldFailWithoutRetrying() {
 		assertThat(context.containsBean("kubernetesConfigRetryInterceptor")).isFalse();
 		assertThatThrownBy(() -> propertySourceLocator.locate(new MockEnvironment()))
 				.isInstanceOf(IllegalStateException.class)
-				.hasMessage("Unable to read ConfigMap with name 'application' in namespace 'default'");
+				.hasMessageContaining("api/v1/namespaces/default/configmaps. Message: Not Found.");
 
 		// verify that propertySourceLocator.locate is called only once
 		verify(propertySourceLocator, times(1)).locate(any());

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/named_secret_with_profile/properties/Three.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.include_profile_specific_sources.properties;
+package org.springframework.cloud.kubernetes.fabric8.config.named_secret_with_profile.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-@ConfigurationProperties("three")
+@ConfigurationProperties(prefix = "secret-three")
 public class Three {
 
 	private String property;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/retry/BootstrapSecretsFailFastEnabledButRetryDisabled.java
Patch:
@@ -34,7 +34,8 @@
 		properties = { "spring.cloud.kubernetes.client.namespace=default",
 				"spring.cloud.kubernetes.secrets.fail-fast=true", "spring.cloud.kubernetes.secrets.retry.enabled=false",
 				"spring.cloud.kubernetes.secrets.name=my-secret", "spring.cloud.kubernetes.secrets.enable-api=true",
-				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true" },
+				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true",
+				"spring.cloud.kubernetes.config.enabled=false" },
 		classes = Application.class)
 @EnableKubernetesMockClient
 class BootstrapSecretsFailFastEnabledButRetryDisabled extends SecretsFailFastEnabledButRetryDisabled {
@@ -52,7 +53,7 @@ static void setup() {
 	private Fabric8SecretsPropertySourceLocator propertySourceLocator;
 
 	@BeforeEach
-	public void beforeEach() {
+	void beforeEach() {
 		psl = propertySourceLocator;
 		verifiablePsl = propertySourceLocator;
 	}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/retry/BootstrapSecretsRetryDisabledButConfigRetryEnabled.java
Patch:
@@ -56,7 +56,7 @@ static void setup() {
 	private Fabric8SecretsPropertySourceLocator propertySourceLocator;
 
 	@BeforeEach
-	public void beforeEach() {
+	void beforeEach() {
 		psl = propertySourceLocator;
 		verifiablePsl = propertySourceLocator;
 	}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/retry/ConfigDataSecretsFailFastEnabledButRetryDisabled.java
Patch:
@@ -36,7 +36,8 @@
 		properties = { "spring.cloud.kubernetes.client.namespace=default",
 				"spring.cloud.kubernetes.secrets.fail-fast=true", "spring.cloud.kubernetes.secrets.retry.enabled=false",
 				"spring.cloud.kubernetes.secrets.name=my-secret", "spring.cloud.kubernetes.secrets.enable-api=true",
-				"spring.main.cloud-platform=KUBERNETES", "spring.config.import=kubernetes:" },
+				"spring.main.cloud-platform=KUBERNETES", "spring.config.import=kubernetes:",
+				"spring.cloud.kubernetes.config.enabled=false" },
 		classes = Application.class)
 @EnableKubernetesMockClient
 class ConfigDataSecretsFailFastEnabledButRetryDisabled extends SecretsFailFastEnabledButRetryDisabled {
@@ -54,7 +55,7 @@ static void setup() {
 	private Fabric8SecretsPropertySourceLocator propertySourceLocator;
 
 	@BeforeEach
-	public void beforeEach() {
+	void beforeEach() {
 		psl = spy(propertySourceLocator);
 		verifiablePsl = psl;
 	}

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -55,6 +55,7 @@ public static class Servlet {
 
 		@Bean
 		@ConditionalOnMissingClass("org.springframework.web.reactive.function.client.WebClient")
+		@ConditionalOnMissingBean(RestTemplate.class)
 		public RestTemplate restTemplate() {
 			return new RestTemplateBuilder().build();
 		}

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceTests.java
Patch:
@@ -119,7 +119,7 @@ void secretsTest() {
 		CoreV1Api api = new CoreV1Api();
 		stubFor(get(API).willReturn(aResponse().withStatus(200).withBody(new JSON().serialize(SECRET_LIST))));
 
-		NormalizedSource source = new NamedSecretNormalizedSource("db-secret", "default", false, "");
+		NormalizedSource source = new NamedSecretNormalizedSource("db-secret", "default", false);
 		KubernetesClientConfigContext context = new KubernetesClientConfigContext(api, source, "default",
 				new MockEnvironment());
 
@@ -151,7 +151,7 @@ void constructorShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 		CoreV1Api api = new CoreV1Api();
 		stubFor(get(API).willReturn(aResponse().withStatus(500).withBody("Internal Server Error")));
 
-		NormalizedSource source = new NamedSecretNormalizedSource("secret", "default", true, "");
+		NormalizedSource source = new NamedSecretNormalizedSource("secret", "default", true);
 		KubernetesClientConfigContext context = new KubernetesClientConfigContext(api, source, "default",
 				new MockEnvironment());
 
@@ -166,7 +166,7 @@ void constructorShouldNotThrowExceptionOnFailureWhenFailFastIsDisabled() {
 		CoreV1Api api = new CoreV1Api();
 		stubFor(get(API).willReturn(aResponse().withStatus(500).withBody("Internal Server Error")));
 
-		NormalizedSource source = new NamedSecretNormalizedSource("secret", "db-secret", false, "");
+		NormalizedSource source = new NamedSecretNormalizedSource("secret", "db-secret", false);
 		KubernetesClientConfigContext context = new KubernetesClientConfigContext(api, source, "default",
 				new MockEnvironment());
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_prefix/NamedSecretWithPrefixBootstrapTests.java
Patch:
@@ -23,7 +23,8 @@
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = NamedSecretWithPrefixApp.class,
 		properties = { "spring.cloud.bootstrap.name=named-secret-with-prefix", "named.secret.with.prefix.stub=true",
-				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true" })
+				"spring.main.cloud-platform=KUBERNETES", "spring.cloud.bootstrap.enabled=true",
+				"spring.cloud.kubernetes.client.namespace=spring-k8s" })
 class NamedSecretWithPrefixBootstrapTests extends NamedSecretWithPrefixTests {
 
 }

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_prefix/NamedSecretWithPrefixConfigDataTests.java
Patch:
@@ -36,7 +36,8 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = NamedSecretWithPrefixApp.class,
 		properties = { "spring.cloud.application.name=named-secret-with-prefix", "named.secret.with.prefix.stub=true",
 				"spring.main.cloud-platform=KUBERNETES",
-				"spring.config.import=kubernetes:,classpath:./named-secret-with-prefix.yaml" })
+				"spring.config.import=kubernetes:,classpath:./named-secret-with-prefix.yaml",
+				"spring.cloud.kubernetes.client.namespace=spring-k8s" })
 class NamedSecretWithPrefixConfigDataTests extends NamedSecretWithPrefixTests {
 
 	private static MockedStatic<KubernetesClientUtils> clientUtilsMock;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapConfigProperties.java
Patch:
@@ -93,7 +93,7 @@ public List<NormalizedSource> determineSources(Environment environment) {
 			}
 			String name = getApplicationName(environment, this.name, "Config Map");
 			return Collections.singletonList(
-					new NamedConfigMapNormalizedSource(name, namespace, failFast, "", includeProfileSpecificSources));
+					new NamedConfigMapNormalizedSource(name, namespace, failFast, includeProfileSpecificSources));
 		}
 
 		return sources.stream()
@@ -185,8 +185,8 @@ private NormalizedSource normalize(String defaultName, String defaultNamespace,
 				boolean defaultIncludeProfileSpecificSources, boolean failFast) {
 			String normalizedName = StringUtils.hasLength(this.name) ? this.name : defaultName;
 			String normalizedNamespace = StringUtils.hasLength(this.namespace) ? this.namespace : defaultNamespace;
-			String prefix = ConfigUtils.findPrefix(this.explicitPrefix, useNameAsPrefix, defaultUseNameAsPrefix,
-					normalizedName);
+			ConfigUtils.Prefix prefix = ConfigUtils.findPrefix(this.explicitPrefix, useNameAsPrefix,
+					defaultUseNameAsPrefix, normalizedName);
 			boolean includeProfileSpecificSources = ConfigUtils.includeProfileSpecificSources(
 					defaultIncludeProfileSpecificSources, this.includeProfileSpecificSources);
 			return new NamedConfigMapNormalizedSource(normalizedName, normalizedNamespace, failFast, prefix,

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/main/java/org/springframework/cloud/kubernetes/configserver/KubernetesConfigServerAutoConfiguration.java
Patch:
@@ -77,7 +77,7 @@ public KubernetesPropertySourceSupplier configMapPropertySourceSupplier(
 			namespaces.forEach(space -> {
 
 				NamedConfigMapNormalizedSource source = new NamedConfigMapNormalizedSource(applicationName, space,
-						false, "", true);
+						false, true);
 				KubernetesClientConfigContext context = new KubernetesClientConfigContext(coreApi, source, space,
 						springEnv);
 
@@ -96,7 +96,7 @@ public KubernetesPropertySourceSupplier secretsPropertySourceSupplier(Kubernetes
 			List<MapPropertySource> propertySources = new ArrayList<>();
 
 			namespaces.forEach(space -> {
-				NormalizedSource source = new NamedSecretNormalizedSource(applicationName, space, false, "");
+				NormalizedSource source = new NamedSecretNormalizedSource(applicationName, space, false);
 				KubernetesClientConfigContext context = new KubernetesClientConfigContext(coreApi, source, space,
 						springEnv);
 				propertySources.add(new KubernetesClientSecretsPropertySource(context));

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/test/java/org/springframework/cloud/kubernetes/configserver/KubernetesEnvironmentRepositoryTests.java
Patch:
@@ -101,12 +101,12 @@ public static void before() {
 		kubernetesPropertySourceSuppliers.add((coreApi, applicationName, namespace, springEnv) -> {
 			List<MapPropertySource> propertySources = new ArrayList<>();
 
-			NormalizedSource defaultSource = new NamedConfigMapNormalizedSource(applicationName, "default", false, "",
+			NormalizedSource defaultSource = new NamedConfigMapNormalizedSource(applicationName, "default", false,
 					true);
 			KubernetesClientConfigContext defaultContext = new KubernetesClientConfigContext(coreApi, defaultSource,
 					"default", springEnv);
 
-			NormalizedSource devSource = new NamedConfigMapNormalizedSource(applicationName, "dev", false, "", true);
+			NormalizedSource devSource = new NamedConfigMapNormalizedSource(applicationName, "dev", false, true);
 			KubernetesClientConfigContext devContext = new KubernetesClientConfigContext(coreApi, devSource, "dev",
 					springEnv);
 
@@ -117,7 +117,7 @@ public static void before() {
 		kubernetesPropertySourceSuppliers.add((coreApi, applicationName, namespace, springEnv) -> {
 			List<MapPropertySource> propertySources = new ArrayList<>();
 
-			NormalizedSource source = new NamedSecretNormalizedSource(applicationName, "default", false, "");
+			NormalizedSource source = new NamedSecretNormalizedSource(applicationName, "default", false);
 			KubernetesClientConfigContext context = new KubernetesClientConfigContext(coreApi, source, "default",
 					springEnv);
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/EventBasedConfigurationChangeDetectorTests.java
Patch:
@@ -64,7 +64,7 @@ public void verifyConfigChangesAccountsForBootstrapPropertySources() {
 		when(mixedOperation.inNamespace("default")).thenReturn(mixedOperation);
 		when(k8sClient.getNamespace()).thenReturn("default");
 
-		NormalizedSource source = new NamedConfigMapNormalizedSource("myconfigmap", "default", true, "", false);
+		NormalizedSource source = new NamedConfigMapNormalizedSource("myconfigmap", "default", true, false);
 		Fabric8ConfigContext context = new Fabric8ConfigContext(k8sClient, source, "default", new MockEnvironment());
 		Fabric8ConfigMapPropertySource fabric8ConfigMapPropertySource = new Fabric8ConfigMapPropertySource(context);
 		env.getPropertySources().addFirst(new BootstrapPropertySource<>(fabric8ConfigMapPropertySource));

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySourceMockTests.java
Patch:
@@ -49,7 +49,7 @@ void namedStrategyShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 		final String namespace = "default";
 		final String path = String.format("/api/v1/namespaces/%s/secrets/%s", namespace, name);
 
-		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, true, "");
+		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, true);
 		Fabric8ConfigContext context = new Fabric8ConfigContext(client, named, "default", new MockEnvironment());
 
 		mockServer.expect().withPath(path).andReturn(500, "Internal Server Error").once();
@@ -77,7 +77,7 @@ void namedStrategyShouldNotThrowExceptionOnFailureWhenFailFastIsDisabled() {
 		final String namespace = "default";
 		final String path = String.format("/api/v1/namespaces/%s/secrets/%s", namespace, name);
 
-		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, false, "");
+		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, false);
 		Fabric8ConfigContext context = new Fabric8ConfigContext(client, named, "default", new MockEnvironment());
 
 		mockServer.expect().withPath(path).andReturn(500, "Internal Server Error").once();

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySource.java
Patch:
@@ -52,8 +52,7 @@ private static SourceData getSourceData(KubernetesClientConfigContext context) {
 	// we need to pass various functions because the code we are interested in
 	// is protected in ConfigMapPropertySource, and must stay that way.
 	private static KubernetesClientContextToSourceData namedConfigMap() {
-		return NamedConfigMapContextToSourceDataProvider.of(ConfigMapPropertySource::processAllEntries,
-				ConfigMapPropertySource::getSourceName, ConfigMapPropertySource::withPrefix).get();
+		return NamedConfigMapContextToSourceDataProvider.of(ConfigMapPropertySource::processAllEntries).get();
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySource.java
Patch:
@@ -52,11 +52,11 @@ private static SourceData getSourceData(KubernetesClientConfigContext context) {
 	}
 
 	private static KubernetesClientContextToSourceData namedSecret() {
-		return NamedSecretContextToSourceDataProvider.of(SecretsPropertySource::getSourceName).get();
+		return new NamedSecretContextToSourceDataProvider().get();
 	}
 
 	private static KubernetesClientContextToSourceData labeledSecret() {
-		return LabeledSecretContextToSourceDataProvider.of(SecretsPropertySource::getSourceName).get();
+		return new LabeledSecretContextToSourceDataProvider().get();
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceTests.java
Patch:
@@ -119,7 +119,7 @@ void secretsTest() {
 		CoreV1Api api = new CoreV1Api();
 		stubFor(get(API).willReturn(aResponse().withStatus(200).withBody(new JSON().serialize(SECRET_LIST))));
 
-		NormalizedSource source = new NamedSecretNormalizedSource("db-secret", "default", false);
+		NormalizedSource source = new NamedSecretNormalizedSource("db-secret", "default", false, "");
 		KubernetesClientConfigContext context = new KubernetesClientConfigContext(api, source, "default",
 				new MockEnvironment());
 
@@ -151,7 +151,7 @@ void constructorShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 		CoreV1Api api = new CoreV1Api();
 		stubFor(get(API).willReturn(aResponse().withStatus(500).withBody("Internal Server Error")));
 
-		NormalizedSource source = new NamedSecretNormalizedSource("secret", "default", true);
+		NormalizedSource source = new NamedSecretNormalizedSource("secret", "default", true, "");
 		KubernetesClientConfigContext context = new KubernetesClientConfigContext(api, source, "default",
 				new MockEnvironment());
 
@@ -166,7 +166,7 @@ void constructorShouldNotThrowExceptionOnFailureWhenFailFastIsDisabled() {
 		CoreV1Api api = new CoreV1Api();
 		stubFor(get(API).willReturn(aResponse().withStatus(500).withBody("Internal Server Error")));
 
-		NormalizedSource source = new NamedSecretNormalizedSource("secret", "db-secret", false);
+		NormalizedSource source = new NamedSecretNormalizedSource("secret", "db-secret", false, "");
 		KubernetesClientConfigContext context = new KubernetesClientConfigContext(api, source, "default",
 				new MockEnvironment());
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_config_map_with_prefix/properties/Three.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.applications.config_map_name_as_prefix.properties;
+package org.springframework.cloud.kubernetes.client.config.applications.named_config_map_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_prefix/properties/One.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.applications.config_map_name_as_prefix.properties;
+package org.springframework.cloud.kubernetes.client.config.applications.named_secret_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/applications/named_secret_with_prefix/properties/Two.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.client.config.applications.config_map_name_as_prefix.properties;
+package org.springframework.cloud.kubernetes.client.config.applications.named_secret_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/boostrap/stubs/NamedConfigMapWithPrefixConfigurationStub.java
Patch:
@@ -44,8 +44,8 @@
  */
 @Order(0)
 @Configuration
-@ConditionalOnProperty("config.map.name.as.prefix.stub")
-public class ConfigMapNameAsPrefixConfigurationStub {
+@ConditionalOnProperty("named.config.map.with.prefix.stub")
+public class NamedConfigMapWithPrefixConfigurationStub {
 
 	@Bean
 	public WireMockServer wireMock() {

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/AbstractConfigProperties.java
Patch:
@@ -30,7 +30,7 @@ public abstract class AbstractConfigProperties {
 
 	protected String namespace;
 
-	// use config map name to prefix properties
+	// use config map or secret name to prefix properties
 	protected boolean useNameAsPrefix;
 
 	// use profile name to append config map name

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -67,7 +67,7 @@ public PropertySource<?> locate(Environment environment) {
 
 			CompositePropertySource composite = new CompositePropertySource("composite-configmap");
 			if (this.properties.isEnableApi()) {
-				Set<NormalizedSource> sources = new LinkedHashSet<>(this.properties.determineSources());
+				Set<NormalizedSource> sources = new LinkedHashSet<>(this.properties.determineSources(environment));
 				LOG.debug("Config Map normalized sources : " + sources);
 				sources.forEach(s -> composite.addFirstPropertySource(getMapPropertySourceForSingleConfigMap(env, s)));
 			}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/LabeledSecretNormalizedSource.java
Patch:
@@ -48,7 +48,7 @@ public NormalizedSourceType type() {
 
 	@Override
 	public String target() {
-		return "Secret";
+		return "secret";
 	}
 
 	@Override

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/NamedConfigMapNormalizedSource.java
Patch:
@@ -51,7 +51,7 @@ public NormalizedSourceType type() {
 
 	@Override
 	public String target() {
-		return "Config Map";
+		return "configmap";
 	}
 
 	@Override

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/PrefixContext.java
Patch:
@@ -20,10 +20,11 @@
 import java.util.Set;
 
 /**
- * A holder for data needed to compute prefix based properties, in case of a config map.
+ * A holder for data needed to compute prefix based properties, in case of a secret or
+ * config map.
  *
  * @author wind57
  */
-public final record ConfigMapPrefixContext(Map<String, Object> data, String prefix, String namespace,
+public final record PrefixContext(Map<String, Object> data, String prefix, String namespace,
 		Set<String> propertySourceNames) {
 }

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/config/LabeledSecretNormalizedSourceTests.java
Patch:
@@ -53,7 +53,7 @@ void testImmutableGetLabels() {
 	@Test
 	void testTarget() {
 		LabeledSecretNormalizedSource source = new LabeledSecretNormalizedSource("namespace", labels, false);
-		Assertions.assertEquals(source.target(), "Secret");
+		Assertions.assertEquals(source.target(), "secret");
 	}
 
 	@Test

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/config/NamedConfigMapNormalizedSourceTests.java
Patch:
@@ -46,7 +46,7 @@ void testType() {
 	void testTarget() {
 		NamedConfigMapNormalizedSource one = new NamedConfigMapNormalizedSource("name", "namespace", false, "prefix",
 				true);
-		Assertions.assertEquals(one.target(), "Config Map");
+		Assertions.assertEquals(one.target(), "configmap");
 	}
 
 	@Test

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/main/java/org/springframework/cloud/kubernetes/configserver/KubernetesConfigServerAutoConfiguration.java
Patch:
@@ -96,7 +96,7 @@ public KubernetesPropertySourceSupplier secretsPropertySourceSupplier(Kubernetes
 			List<MapPropertySource> propertySources = new ArrayList<>();
 
 			namespaces.forEach(space -> {
-				NormalizedSource source = new NamedSecretNormalizedSource(applicationName, space, false);
+				NormalizedSource source = new NamedSecretNormalizedSource(applicationName, space, false, "");
 				KubernetesClientConfigContext context = new KubernetesClientConfigContext(coreApi, source, space,
 						springEnv);
 				propertySources.add(new KubernetesClientSecretsPropertySource(context));

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/test/java/org/springframework/cloud/kubernetes/configserver/ConfigServerIntegrationTest.java
Patch:
@@ -72,7 +72,7 @@ public void enabled() {
 		assertThat(env.getPropertySources().size()).isEqualTo(2);
 		assertThat(env.getPropertySources().get(0).getName().equals("configmap.test-cm.default")).isTrue();
 		assertThat(env.getPropertySources().get(0).getSource().get("app.name")).isEqualTo("test");
-		assertThat(env.getPropertySources().get(1).getName().equals("secrets.test-cm.default")).isTrue();
+		assertThat(env.getPropertySources().get(1).getName().equals("secret.test-cm.default")).isTrue();
 		assertThat(env.getPropertySources().get(1).getSource().get("password")).isEqualTo("p455w0rd");
 		assertThat(env.getPropertySources().get(1).getSource().get("username")).isEqualTo("user");
 	}

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySource.java
Patch:
@@ -57,8 +57,7 @@ private static SourceData getSourceData(Fabric8ConfigContext context) {
 	// we need to pass various functions because the code we are interested in
 	// is protected in ConfigMapPropertySource, and must stay that way.
 	private static Fabric8ContextToSourceData namedConfigMap() {
-		return NamedConfigMapContextToSourceDataProvider.of(ConfigMapPropertySource::processAllEntries,
-				ConfigMapPropertySource::getSourceName, ConfigMapPropertySource::withPrefix).get();
+		return NamedConfigMapContextToSourceDataProvider.of(ConfigMapPropertySource::processAllEntries).get();
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySource.java
Patch:
@@ -51,11 +51,11 @@ private static SourceData getSourceData(Fabric8ConfigContext context) {
 	}
 
 	private static Fabric8ContextToSourceData namedSecret() {
-		return NamedSecretContextToSourceDataProvider.of(SecretsPropertySource::getSourceName).get();
+		return new NamedSecretContextToSourceDataProvider().get();
 	}
 
 	private static Fabric8ContextToSourceData labeledSecret() {
-		return LabeledSecretContextToSourceDataProvider.of(SecretsPropertySource::getSourceName).get();
+		return new LabeledSecretContextToSourceDataProvider().get();
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySourceMockTests.java
Patch:
@@ -49,7 +49,7 @@ void namedStrategyShouldThrowExceptionOnFailureWhenFailFastIsEnabled() {
 		final String namespace = "default";
 		final String path = String.format("/api/v1/namespaces/%s/secrets/%s", namespace, name);
 
-		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, true);
+		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, true, "");
 		Fabric8ConfigContext context = new Fabric8ConfigContext(client, named, "default", new MockEnvironment());
 
 		mockServer.expect().withPath(path).andReturn(500, "Internal Server Error").once();
@@ -77,7 +77,7 @@ void namedStrategyShouldNotThrowExceptionOnFailureWhenFailFastIsDisabled() {
 		final String namespace = "default";
 		final String path = String.format("/api/v1/namespaces/%s/secrets/%s", namespace, name);
 
-		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, false);
+		NamedSecretNormalizedSource named = new NamedSecretNormalizedSource(name, namespace, false, "");
 		Fabric8ConfigContext context = new Fabric8ConfigContext(client, named, "default", new MockEnvironment());
 
 		mockServer.expect().withPath(path).andReturn(500, "Internal Server Error").once();

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/named_config_map_with_prefix/properties/Three.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.with_prefix.properties;
+package org.springframework.cloud.kubernetes.fabric8.config.named_config_map_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/named_secret_with_prefix/properties/One.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.with_prefix.properties;
+package org.springframework.cloud.kubernetes.fabric8.config.named_secret_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/named_secret_with_prefix/properties/Two.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.config.with_prefix.properties;
+package org.springframework.cloud.kubernetes.fabric8.config.named_secret_with_prefix.properties;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8BootstrapConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
@@ -35,6 +34,7 @@
 import org.springframework.cloud.kubernetes.commons.config.KubernetesBootstrapConfiguration;
 import org.springframework.cloud.kubernetes.commons.config.SecretsConfigProperties;
 import org.springframework.cloud.kubernetes.fabric8.Fabric8AutoConfiguration;
+import org.springframework.cloud.util.ConditionalOnBootstrapEnabled;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
@@ -50,7 +50,7 @@
 @ConditionalOnClass({ ConfigMap.class, Secret.class })
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
-@ConditionalOnProperty(value = "spring.cloud.bootstrap.enabled", havingValue = "true")
+@ConditionalOnBootstrapEnabled
 public class Fabric8BootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8RetryBootstrapConfiguration.java
Patch:
@@ -24,7 +24,6 @@
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
@@ -35,6 +34,7 @@
 import org.springframework.cloud.kubernetes.commons.config.KubernetesBootstrapConfiguration;
 import org.springframework.cloud.kubernetes.commons.config.SecretsConfigProperties;
 import org.springframework.cloud.kubernetes.fabric8.Fabric8AutoConfiguration;
+import org.springframework.cloud.util.ConditionalOnBootstrapEnabled;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
@@ -49,7 +49,7 @@
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesConfigOrSecretsRetryEnabled
-@ConditionalOnProperty(value = "spring.cloud.bootstrap.enabled", havingValue = "true")
+@ConditionalOnBootstrapEnabled
 public class Fabric8RetryBootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/BusEventBasedConfigMapWatcherChangeDetectorTests.java
Patch:
@@ -62,15 +62,13 @@ public class BusEventBasedConfigMapWatcherChangeDetectorTests {
 
 	private BusEventBasedConfigMapWatcherChangeDetector changeDetector;
 
-	private ConfigurationWatcherConfigurationProperties configurationWatcherConfigurationProperties;
-
 	private BusProperties busProperties;
 
 	@Before
 	public void setup() {
 		MockEnvironment mockEnvironment = new MockEnvironment();
 		ConfigReloadProperties configReloadProperties = new ConfigReloadProperties();
-		configurationWatcherConfigurationProperties = new ConfigurationWatcherConfigurationProperties();
+		ConfigurationWatcherConfigurationProperties configurationWatcherConfigurationProperties = new ConfigurationWatcherConfigurationProperties();
 		busProperties = new BusProperties();
 		changeDetector = new BusEventBasedConfigMapWatcherChangeDetector(mockEnvironment, configReloadProperties,
 				client, updateStrategy, fabric8ConfigMapPropertySourceLocator, busProperties,

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshRabbitMQIT.java
Patch:
@@ -122,7 +122,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) {
 				() -> rest.getForEntity("http://localhost:80/it", String.class).getStatusCode().is2xxSuccessful());
 
 		// Wait a bit before we verify
-		await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(90)).until(() -> {
+		await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(120)).until(() -> {
 			Boolean value = rest.getForObject("http://localhost:80/it", Boolean.class);
 			log.info("Returned " + value + " from http://localhost:80/it");
 			return value;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/PropertySourceUtils.java
Patch:
@@ -19,6 +19,8 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.UncheckedIOException;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.Properties;
 import java.util.function.BinaryOperator;
@@ -96,7 +98,7 @@ else if (springProfiles != null) {
 				}
 				return ABSTAIN;
 			});
-			yamlFactory.setResources(new ByteArrayResource(s.getBytes()));
+			yamlFactory.setResources(new ByteArrayResource(s.getBytes(StandardCharsets.UTF_8)));
 			return yamlFactory.getObject();
 		};
 	}

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientRetryBootstrapConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.ConditionalOnKubernetesConfigOrSecretsRetryEnabled;
@@ -40,7 +39,6 @@
  * @author Ryan Baxter
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @AutoConfigureBefore(KubernetesClientBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/RetryableKubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -31,7 +31,8 @@
  *
  * @author Ryan Baxter
  */
-class RetryableKubernetesClientConfigMapPropertySourceLocator extends KubernetesClientConfigMapPropertySourceLocator {
+public class RetryableKubernetesClientConfigMapPropertySourceLocator
+		extends KubernetesClientConfigMapPropertySourceLocator {
 
 	RetryableKubernetesClientConfigMapPropertySourceLocator(CoreV1Api coreV1Api, ConfigMapConfigProperties properties,
 			KubernetesNamespaceProvider kubernetesNamespaceProvider) {

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/RetryableKubernetesClientSecretsPropertySourceLocator.java
Patch:
@@ -31,7 +31,8 @@
  *
  * @author Ryan Baxter
  */
-class RetryableKubernetesClientSecretsPropertySourceLocator extends KubernetesClientSecretsPropertySourceLocator {
+public class RetryableKubernetesClientSecretsPropertySourceLocator
+		extends KubernetesClientSecretsPropertySourceLocator {
 
 	RetryableKubernetesClientSecretsPropertySourceLocator(CoreV1Api coreV1Api,
 			KubernetesNamespaceProvider kubernetesNamespaceProvider, SecretsConfigProperties secretsConfigProperties) {

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/configmap_retry/ConfigRetryEnabled.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.cloud.kubernetes.client.KubernetesClientUtils;
-import org.springframework.cloud.kubernetes.client.config.KubernetesClientConfigMapPropertySourceLocator;
+import org.springframework.cloud.kubernetes.client.config.RetryableKubernetesClientConfigMapPropertySourceLocator;
 import org.springframework.core.env.PropertySource;
 import org.springframework.mock.env.MockEnvironment;
 
@@ -98,7 +98,7 @@ void afterEach() {
 	}
 
 	@SpyBean
-	private KubernetesClientConfigMapPropertySourceLocator propertySourceLocator;
+	private RetryableKubernetesClientConfigMapPropertySourceLocator propertySourceLocator;
 
 	@Test
 	void locateShouldNotRetryWhenThereIsNoFailure() {

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/secrets_retry/SecretsRetryEnabled.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.cloud.kubernetes.client.KubernetesClientUtils;
-import org.springframework.cloud.kubernetes.client.config.KubernetesClientSecretsPropertySourceLocator;
+import org.springframework.cloud.kubernetes.client.config.RetryableKubernetesClientSecretsPropertySourceLocator;
 import org.springframework.core.env.PropertySource;
 import org.springframework.mock.env.MockEnvironment;
 
@@ -98,7 +98,7 @@ void afterEach() {
 	}
 
 	@SpyBean
-	private KubernetesClientSecretsPropertySourceLocator propertySourceLocator;
+	private RetryableKubernetesClientSecretsPropertySourceLocator propertySourceLocator;
 
 	@Test
 	void locateShouldNotRetryWhenThereIsNoFailure() {

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8RetryBootstrapConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.cloud.CloudPlatform;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.ConditionalOnKubernetesConfigOrSecretsRetryEnabled;
@@ -43,7 +42,6 @@
  * @author Ryan Baxter
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
 @AutoConfigureBefore(Fabric8BootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
 @ConditionalOnClass({ ConfigMap.class, Secret.class })

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedConfigMapChangeDetector.java
Patch:
@@ -49,9 +49,9 @@ public class KubernetesClientEventBasedConfigMapChangeDetector extends Configura
 
 	private CoreV1Api coreV1Api = null;
 
-	private KubernetesClientConfigMapPropertySourceLocator propertySourceLocator;
+	private final KubernetesClientConfigMapPropertySourceLocator propertySourceLocator;
 
-	private SharedInformerFactory factory;
+	private final SharedInformerFactory factory;
 
 	private KubernetesClientProperties kubernetesClientProperties;
 

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedSecretsChangeDetector.java
Patch:
@@ -48,9 +48,9 @@ public class KubernetesClientEventBasedSecretsChangeDetector extends Configurati
 
 	private CoreV1Api coreV1Api;
 
-	private KubernetesClientSecretsPropertySourceLocator propertySourceLocator;
+	private final KubernetesClientSecretsPropertySourceLocator propertySourceLocator;
 
-	private SharedInformerFactory factory;
+	private final SharedInformerFactory factory;
 
 	private KubernetesClientProperties kubernetesClientProperties;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.core.env.PropertySource;
-import org.springframework.retry.annotation.Retryable;
 
 import static org.springframework.cloud.kubernetes.commons.config.ConfigUtils.getApplicationName;
 import static org.springframework.cloud.kubernetes.commons.config.PropertySourceUtils.KEY_VALUE_TO_PROPERTIES;
@@ -65,7 +64,6 @@ protected abstract MapPropertySource getMapPropertySource(String applicationName
 			String configurationTarget, ConfigurableEnvironment environment);
 
 	@Override
-	@Retryable(interceptor = "kubernetesConfigRetryInterceptor")
 	public PropertySource<?> locate(Environment environment) {
 		if (environment instanceof ConfigurableEnvironment) {
 			ConfigurableEnvironment env = (ConfigurableEnvironment) environment;
@@ -85,7 +83,6 @@ public PropertySource<?> locate(Environment environment) {
 	}
 
 	@Override
-	@Retryable(interceptor = "kubernetesConfigRetryInterceptor")
 	public Collection<PropertySource<?>> locateCollection(Environment environment) {
 		return PropertySourceLocator.super.locateCollection(environment);
 	}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SecretsPropertySourceLocator.java
Patch:
@@ -43,7 +43,6 @@
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.core.env.PropertySource;
-import org.springframework.retry.annotation.Retryable;
 
 /**
  * Kubernetes {@link PropertySourceLocator} for secrets.
@@ -64,7 +63,6 @@ public SecretsPropertySourceLocator(SecretsConfigProperties properties) {
 	}
 
 	@Override
-	@Retryable(interceptor = "kubernetesSecretsRetryInterceptor")
 	public PropertySource<?> locate(Environment environment) {
 		if (environment instanceof ConfigurableEnvironment) {
 			ConfigurableEnvironment env = (ConfigurableEnvironment) environment;
@@ -86,7 +84,6 @@ public PropertySource<?> locate(Environment environment) {
 	}
 
 	@Override
-	@Retryable(interceptor = "kubernetesSecretsRetryInterceptor")
 	public Collection<PropertySource<?>> locateCollection(Environment environment) {
 		return PropertySourceLocator.super.locateCollection(environment);
 	}

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientActuatorConfiguration.java
Patch:
@@ -22,7 +22,8 @@
 import org.springframework.boot.actuate.autoconfigure.info.ConditionalOnEnabledInfoContributor;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.PodUtils;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -32,7 +33,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnClass(HealthIndicator.class)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class KubernetesClientActuatorConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientAutoConfiguration.java
Patch:
@@ -20,8 +20,9 @@
 import io.kubernetes.client.openapi.apis.CoreV1Api;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.KubernetesClientProperties;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
@@ -35,7 +36,7 @@
  * @author Ryan Baxter
  */
 @Configuration
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureAfter(KubernetesCommonsAutoConfiguration.class)
 public class KubernetesClientAutoConfiguration {
 

File: spring-cloud-kubernetes-client-autoconfig/src/test/java/org/springframework/cloud/kubernetes/client/KubernetesClientHealthIndicatorInsideTests.java
Patch:
@@ -28,7 +28,8 @@
 /**
  * @author wind57
  */
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
+		properties = "spring.main.cloud-platform=KUBERNETES")
 public class KubernetesClientHealthIndicatorInsideTests {
 
 	@Autowired

File: spring-cloud-kubernetes-client-autoconfig/src/test/java/org/springframework/cloud/kubernetes/client/KubernetesClientInfoContributorInsideTests.java
Patch:
@@ -28,7 +28,8 @@
 /**
  * @author wind57
  */
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
+		properties = "spring.main.cloud-platform=KUBERNETES")
 public class KubernetesClientInfoContributorInsideTests {
 
 	@Autowired

File: spring-cloud-kubernetes-client-autoconfig/src/test/java/org/springframework/cloud/kubernetes/client/profile/KubernetesClientProfileEnvironmentPostProcessorTests.java
Patch:
@@ -31,7 +31,8 @@
 /**
  * @author Thomas Vitale
  */
-@SpringBootTest(properties = { ENV_SERVICE_HOST + "=10.0.0.1", ENV_SERVICE_PORT + "=80" }, classes = { App.class })
+@SpringBootTest(properties = { ENV_SERVICE_HOST + "=10.0.0.1", ENV_SERVICE_PORT + "=80",
+		"spring.main.cloud-platform=KUBERNETES" }, classes = { App.class })
 class KubernetesClientProfileEnvironmentPostProcessorTests {
 
 	@Autowired

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfiguration.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
@@ -38,7 +37,6 @@
  * @author Ryan Baxter
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })
 @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfigurationTests.java
Patch:
@@ -37,8 +37,7 @@ static class Application {
 	}
 
 	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class,
-			properties = { "spring.cloud.kubernetes.enabled=false", "kubernetes.informer.enabled=false",
-					"kubernetes.manifests.enabled=false" })
+			properties = { "kubernetes.informer.enabled=false", "kubernetes.manifests.enabled=false" })
 	@Nested
 	class KubernetesDisabled {
 
@@ -158,7 +157,7 @@ public void bothPresent() {
 	// tests that @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES) has the desired
 	// effect, meaning when it is disabled, no property source bean is present
 	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class,
-			properties = { "kubernetes.informer.enabled=false" })
+			properties = { "kubernetes.manifests.enabled=false" })
 	@Nested
 	class KubernetesClientBootstrapConfigurationNotInsideK8s {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientConfigReloadAutoConfigurationTest.java
Patch:
@@ -113,7 +113,7 @@ public void beforeEach() {
 
 	@Test
 	public void kubernetesWatchersWhenKubernetesDisabled() throws Exception {
-		setup("spring.cloud.kubernetes.enabled=false");
+		setup();
 		assertThat(context.containsBean("configMapPropertySourceLocator")).isFalse();
 		assertThat(context.containsBean("secretsPropertySourceLocator")).isFalse();
 		assertThat(context.containsBean("configMapPropertyChangePollingWatcher")).isFalse();

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -33,15 +33,16 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.client.CommonsClientAutoConfiguration;
 import org.springframework.cloud.client.ConditionalOnBlockingDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled;
 import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.PodUtils;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryClientHealthIndicatorInitializer;
@@ -53,7 +54,7 @@
 
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnKubernetesDiscoveryEnabled
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureBefore({ SimpleDiscoveryClientAutoConfiguration.class, CommonsClientAutoConfiguration.class,
 		// So that CatalogSharedInformerFactory can be processed in prior to the default
 		// factory

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClientAutoConfiguration.java
Patch:
@@ -30,7 +30,9 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled;
 import org.springframework.cloud.client.ConditionalOnReactiveDiscoveryEnabled;
@@ -43,7 +45,6 @@
 import org.springframework.cloud.kubernetes.client.KubernetesClientPodUtils;
 import org.springframework.cloud.kubernetes.client.discovery.ConditionalOnKubernetesDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.client.discovery.KubernetesDiscoveryClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 import org.springframework.context.annotation.Bean;
@@ -56,7 +57,7 @@
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnReactiveDiscoveryEnabled
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesDiscoveryEnabled
 @AutoConfigureBefore({ SimpleReactiveDiscoveryClientAutoConfiguration.class,
 		ReactiveCommonsClientAutoConfiguration.class })

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientAutoConfigurationTests.java
Patch:
@@ -48,8 +48,9 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
-		properties = { "spring.cloud.kubernetes.discovery.cacheLoadingTimeoutSeconds=5",
-				"spring.cloud.config.enabled=false", "spring.cloud.kubernetes.discovery.waitCacheReady=false" })
+		properties = { "spring.main.cloud-platform=KUBERNETES",
+				"spring.cloud.kubernetes.discovery.cacheLoadingTimeoutSeconds=5", "spring.cloud.config.enabled=false",
+				"spring.cloud.kubernetes.discovery.waitCacheReady=false" })
 public class KubernetesDiscoveryClientAutoConfigurationTests {
 
 	@Autowired(required = false)

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -68,8 +68,8 @@ public void close() {
 	@Test
 	public void onWhenRequested() throws Exception {
 		setup("server.port=7000", "spring.cloud.config.discovery.enabled=true",
-				"spring.cloud.kubernetes.discovery.enabled:true", "spring.cloud.kubernetes.enabled:true",
-				"spring.application.name:test", "spring.cloud.config.discovery.service-id:configserver");
+				"spring.cloud.kubernetes.discovery.enabled:true", "spring.application.name:test",
+				"spring.cloud.config.discovery.service-id:configserver");
 		assertEquals(1, this.context.getParent().getBeanNamesForType(DiscoveryClient.class).length);
 
 		DiscoveryClient client = this.context.getParent().getBean(DiscoveryClient.class);

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClientAutoConfigurationTests.java
Patch:
@@ -51,9 +51,9 @@
  */
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
-		properties = { "spring.cloud.kubernetes.discovery.cacheLoadingTimeoutSeconds=5",
-				"spring.cloud.config.enabled=false", "spring.cloud.kubernetes.discovery.waitCacheReady=false",
-				"spring.main.web-application-type=reactive" })
+		properties = { "spring.main.cloud-platform=KUBERNETES",
+				"spring.cloud.kubernetes.discovery.cacheLoadingTimeoutSeconds=5", "spring.cloud.config.enabled=false",
+				"spring.cloud.kubernetes.discovery.waitCacheReady=false", "spring.main.web-application-type=reactive" })
 public class KubernetesInformerReactiveDiscoveryClientAutoConfigurationTests {
 
 	@Autowired(required = false)

File: spring-cloud-kubernetes-client-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/client/loadbalancer/KubernetesClientLoadBalancerAutoConfiguration.java
Patch:
@@ -16,9 +16,10 @@
 
 package org.springframework.cloud.kubernetes.client.loadbalancer;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.kubernetes.commons.loadbalancer.KubernetesLoadBalancerProperties;
 import org.springframework.cloud.loadbalancer.annotation.LoadBalancerClients;
@@ -30,7 +31,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties(KubernetesLoadBalancerProperties.class)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.loadbalancer.enabled", matchIfMissing = true)
 @LoadBalancerClients(defaultConfiguration = KubernetesClientLoadBalancerClientConfiguration.class)
 public class KubernetesClientLoadBalancerAutoConfiguration {

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/KubernetesCommonsAutoConfiguration.java
Patch:
@@ -16,14 +16,16 @@
 
 package org.springframework.cloud.kubernetes.commons;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * @author Ryan Baxter
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @EnableConfigurationProperties(KubernetesClientProperties.class)
 public class KubernetesCommonsAutoConfiguration {
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConditionalOnKubernetesConfigRetryEnabled.java
Patch:
@@ -23,9 +23,10 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 
 /**
  * {@link org.springframework.context.annotation.Conditional @Conditional} that only
@@ -38,7 +39,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesConfigEnabled
 @ConditionalOnKubernetesConfigFailFastEnabled
 @ConditionalOnProperty(prefix = ConfigMapConfigProperties.PREFIX + ".retry", name = "enabled", havingValue = "true",

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConditionalOnKubernetesSecretsRetryEnabled.java
Patch:
@@ -23,8 +23,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
 
 /**
@@ -38,7 +39,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesSecretsEnabled
 @ConditionalOnKubernetesSecretsFailFastEnabled
 @ConditionalOnProperty(prefix = SecretsConfigProperties.PREFIX + ".retry", name = "enabled", havingValue = "true",

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/KubernetesBootstrapConfiguration.java
Patch:
@@ -20,8 +20,9 @@
 
 import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
@@ -36,7 +37,7 @@
  * @author Isik Erhan
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @EnableConfigurationProperties({ ConfigMapConfigProperties.class, SecretsConfigProperties.class })
 public class KubernetesBootstrapConfiguration {
 

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/KubernetesCommonsAutoConfigurationTests.java
Patch:
@@ -33,7 +33,7 @@
 @ExtendWith(MockitoExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE,
 		classes = KubernetesCommonsAutoConfigurationTests.App.class,
-		properties = { "spring.cloud.kubernetes.client.password=mypassword",
+		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.cloud.kubernetes.client.password=mypassword",
 				"spring.cloud.kubernetes.client.proxy-password=myproxypassword" })
 public class KubernetesCommonsAutoConfigurationTests {
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/main/java/org/springframework/cloud/kubernetes/configserver/KubernetesConfigServerAutoConfiguration.java
Patch:
@@ -24,15 +24,16 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.config.server.config.ConfigServerAutoConfiguration;
 import org.springframework.cloud.config.server.environment.EnvironmentRepository;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.config.KubernetesClientConfigMapPropertySource;
 import org.springframework.cloud.kubernetes.client.config.KubernetesClientSecretsPropertySource;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.context.annotation.Bean;
@@ -48,7 +49,7 @@
 @Configuration
 @AutoConfigureAfter({ KubernetesClientAutoConfiguration.class })
 @AutoConfigureBefore({ ConfigServerAutoConfiguration.class })
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @EnableConfigurationProperties(KubernetesConfigServerProperties.class)
 public class KubernetesConfigServerAutoConfiguration {
 

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/test/java/org/springframework/cloud/kubernetes/configserver/ConfigServerIntegrationTest.java
Patch:
@@ -43,8 +43,8 @@
  * @author Ryan Baxter
  */
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
-		properties = { "spring.cloud.kubernetes.client.namespace=default", "spring.profiles.include=kubernetes",
-				"spring.cloud.kubernetes.secrets.enableApi=true", "debug=true" },
+		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.cloud.kubernetes.client.namespace=default",
+				"spring.profiles.include=kubernetes", "spring.cloud.kubernetes.secrets.enableApi=true", "debug=true" },
 		classes = { KubernetesConfigServerApplication.class })
 public class ConfigServerIntegrationTest {
 

File: spring-cloud-kubernetes-fabric8-autoconfig/src/main/java/org/springframework/cloud/kubernetes/fabric8/Fabric8ActuatorConfiguration.java
Patch:
@@ -22,7 +22,8 @@
 import org.springframework.boot.actuate.autoconfigure.info.ConditionalOnEnabledInfoContributor;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.PodUtils;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -32,7 +33,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnClass(HealthIndicator.class)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class Fabric8ActuatorConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-autoconfig/src/main/java/org/springframework/cloud/kubernetes/fabric8/Fabric8AutoConfiguration.java
Patch:
@@ -26,8 +26,9 @@
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.KubernetesClientProperties;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -41,7 +42,7 @@
  * @author Tim Ysewyn
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureAfter(KubernetesCommonsAutoConfiguration.class)
 public class Fabric8AutoConfiguration {
 

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/Fabric8AutoConfigurationTests.java
Patch:
@@ -38,7 +38,7 @@
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "spring.cloud.kubernetes.client.password=mypassword",
+		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.cloud.kubernetes.client.password=mypassword",
 				"spring.cloud.kubernetes.client.proxy-password=myproxypassword" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class Fabric8AutoConfigurationTests {

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/Fabric8InsideInfoContributorTest.java
Patch:
@@ -47,8 +47,8 @@
  */
 @Import(Fabric8InsideInfoContributorTest.InfoContributorTestConfig.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "management.endpoints.web.exposure.include=info", "management.endpoint.info.show-details=always",
-				"management.info.kubernetes.enabled=true" })
+		properties = { "spring.main.cloud-platform=KUBERNETES", "management.endpoints.web.exposure.include=info",
+				"management.endpoint.info.show-details=always", "management.info.kubernetes.enabled=true" })
 public class Fabric8InsideInfoContributorTest {
 
 	@Autowired

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/Fabric8NotInsideHealthIndicatorTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "management.endpoint.health.show-details=always" })
+		properties = { "spring.main.cloud-platform=KUBERNETES", "management.endpoint.health.show-details=always" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class Fabric8NotInsideHealthIndicatorTest {
 

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/Fabric8NotInsideInfoContributorTest.java
Patch:
@@ -34,8 +34,8 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "management.endpoints.web.exposure.include=info", "management.endpoint.info.show-details=always",
-				"management.info.kubernetes.enabled=true" })
+		properties = { "spring.main.cloud-platform=KUBERNETES", "management.endpoints.web.exposure.include=info",
+				"management.endpoint.info.show-details=always", "management.info.kubernetes.enabled=true" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class Fabric8NotInsideInfoContributorTest {
 

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/fabric8/Fabric8ClientUserAgentEnvPropertyTests.java
Patch:
@@ -33,7 +33,7 @@
  *
  * test "User-Agent" functionality via system properties
  */
-@SpringBootTest(classes = App.class)
+@SpringBootTest(classes = App.class, properties = "spring.main.cloud-platform=KUBERNETES")
 class Fabric8ClientUserAgentEnvPropertyTests {
 
 	@Autowired

File: spring-cloud-kubernetes-fabric8-autoconfig/src/test/java/org/springframework/cloud/kubernetes/fabric8/profile/Fabric8ProfileEnvironmentPostProcessorTests.java
Patch:
@@ -33,8 +33,8 @@ class Fabric8ProfileEnvironmentPostProcessorTests {
 	@Test
 	void whenKubernetesEnvironmentAndNoApiAccessThenProfileEnabled() {
 		ConfigurableApplicationContext context = new SpringApplicationBuilder(App.class)
-				.web(org.springframework.boot.WebApplicationType.NONE).properties("KUBERNETES_SERVICE_HOST=10.0.0.1")
-				.run();
+				.web(org.springframework.boot.WebApplicationType.NONE)
+				.properties("KUBERNETES_SERVICE_HOST=10.0.0.1", "spring.main.cloud-platform=KUBERNETES").run();
 
 		assertThat(context.getEnvironment().getActiveProfiles()).contains(KUBERNETES_PROFILE);
 	}

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8BootstrapConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
@@ -44,7 +43,6 @@
  * @author Ioannis Canellos
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
 @Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
 @ConditionalOnClass({ ConfigMap.class, Secret.class })
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/reload/ConfigReloadDefaultAutoConfiguration.java
Patch:
@@ -22,8 +22,10 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.commons.util.TaskSchedulerWrapper;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
@@ -48,7 +50,7 @@
  * @author Kris Iyer
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnMissingBean(ConfigReloadAutoConfiguration.class)
 @EnableConfigurationProperties(ConfigReloadProperties.class)
 public class ConfigReloadDefaultAutoConfiguration {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/CoreTestClientViaSystemProperties.java
Patch:
@@ -30,9 +30,9 @@
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = TestApplication.class,
-		properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
-				"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
-				"spring.cloud.kubernetes.secrets.enableApi=true" })
+		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.application.name=testapp",
+				"spring.cloud.kubernetes.client.namespace=testns", "spring.cloud.kubernetes.client.trustCerts=true",
+				"spring.cloud.kubernetes.config.namespace=testns", "spring.cloud.kubernetes.secrets.enableApi=true" })
 public class CoreTestClientViaSystemProperties {
 
 	@Autowired

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ActuatorTests.java
Patch:
@@ -66,9 +66,9 @@ public void healthEndpointShouldContainKubernetes() {
 
 	@Nested
 	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class, properties = {
-			"management.health.kubernetes.enabled=true", "management.endpoint.health.show-details=always",
-			"management.endpoint.health.show-components=always", "management.endpoints.web.exposure.include=health",
-			"spring.cloud.kubernetes.client.namespace=default" })
+			"spring.main.cloud-platform=KUBERNETES", "management.health.kubernetes.enabled=true",
+			"management.endpoint.health.show-details=always", "management.endpoint.health.show-components=always",
+			"management.endpoints.web.exposure.include=health", "spring.cloud.kubernetes.client.namespace=default" })
 	public class EnabledHealthTest {
 
 		@Autowired

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8BootstrapConfigurationTests.java
Patch:
@@ -30,8 +30,7 @@
  */
 public class Fabric8BootstrapConfigurationTests {
 
-	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class,
-			properties = "spring.cloud.kubernetes.enabled=false")
+	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class)
 	@Nested
 	class KubernetesDisabled {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/HealthIndicatorTest.java
Patch:
@@ -35,7 +35,7 @@
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "management.endpoint.health.show-details=always" })
+		properties = { "spring.main.cloud-platform=KUBERNETES", "management.endpoint.health.show-details=always" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class HealthIndicatorTest {
 

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -19,8 +19,10 @@
 import io.fabric8.kubernetes.client.KubernetesClient;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.kubernetes.fabric8.Fabric8AutoConfiguration;
@@ -34,7 +36,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
-@ConditionalOnProperty(name = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureAfter({ Fabric8AutoConfiguration.class })
 public class KubernetesCatalogWatchAutoConfiguration {
 

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -22,13 +22,14 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.CommonsClientAutoConfiguration;
 import org.springframework.cloud.client.ConditionalOnBlockingDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled;
 import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.PodUtils;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryClientHealthIndicatorInitializer;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
@@ -45,7 +46,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @AutoConfigureBefore({ SimpleDiscoveryClientAutoConfiguration.class, CommonsClientAutoConfiguration.class })
 @AutoConfigureAfter({ Fabric8AutoConfiguration.class })
 public class KubernetesDiscoveryClientAutoConfiguration {

File: spring-cloud-kubernetes-fabric8-discovery/src/main/java/org/springframework/cloud/kubernetes/fabric8/discovery/reactive/KubernetesReactiveDiscoveryClientAutoConfiguration.java
Patch:
@@ -21,7 +21,9 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled;
 import org.springframework.cloud.client.ConditionalOnReactiveDiscoveryEnabled;
@@ -30,7 +32,6 @@
 import org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties;
 import org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryClientHealthIndicator;
 import org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.kubernetes.fabric8.discovery.ConditionalOnKubernetesDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.fabric8.discovery.KubernetesClientServicesFunction;
@@ -46,7 +47,7 @@
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnReactiveDiscoveryEnabled
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnKubernetesDiscoveryEnabled
 @AutoConfigureBefore({ SimpleReactiveDiscoveryClientAutoConfiguration.class,
 		ReactiveCommonsClientAutoConfiguration.class })

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesCatalogServicesWatchConfigurationTest.java
Patch:
@@ -60,7 +60,7 @@ public void kubernetesCatalogWatchDisabled() throws Exception {
 
 	@Test
 	public void kubernetesCatalogWatchWhenKubernetesDisabled() throws Exception {
-		setup("spring.cloud.kubernetes.enabled=false");
+		setup();
 		assertThat(this.context.containsBean("kubernetesCatalogWatch")).isFalse();
 	}
 
@@ -72,7 +72,7 @@ public void kubernetesCatalogWatchWhenServiceDiscoveryDisabled() throws Exceptio
 
 	@Test
 	public void kubernetesCatalogWatchDefaultEnabled() throws Exception {
-		setup();
+		setup("spring.main.cloud-platform=KUBERNETES");
 		assertThat(this.context.containsBean("kubernetesCatalogWatch")).isTrue();
 	}
 

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClientAutoConfigurationPropertiesTests.java
Patch:
@@ -60,7 +60,7 @@ public void kubernetesDiscoveryDisabled() throws Exception {
 
 	@Test
 	public void kubernetesDiscoveryWhenKubernetesDisabled() throws Exception {
-		setup("spring.cloud.kubernetes.enabled=false");
+		setup();
 		assertThat(this.context.getBeanNamesForType(KubernetesDiscoveryClient.class)).isEmpty();
 	}
 
@@ -72,7 +72,7 @@ public void kubernetesDiscoveryWhenDiscoveryDisabled() throws Exception {
 
 	@Test
 	public void kubernetesDiscoveryDefaultEnabled() throws Exception {
-		setup("spring.cloud.kubernetes.enabled=true");
+		setup("spring.main.cloud-platform=KUBERNETES");
 		assertThat(this.context.getBeanNamesForType(KubernetesDiscoveryClient.class)).hasSize(1);
 	}
 

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClientAutoConfigurationTests.java
Patch:
@@ -30,7 +30,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = "spring.cloud.config.enabled=false")
+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT,
+		properties = { "spring.main.cloud-platform=KUBERNETES", "spring.cloud.config.enabled=false" })
 public class KubernetesDiscoveryClientAutoConfigurationTests {
 
 	@Autowired(required = false)

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -60,8 +60,8 @@ public void close() {
 	@Test
 	public void onWhenRequested() throws Exception {
 		setup("server.port=7000", "spring.cloud.config.discovery.enabled=true",
-				"spring.cloud.kubernetes.discovery.enabled:true", "spring.cloud.kubernetes.enabled:true",
-				"spring.application.name:test", "spring.cloud.config.discovery.service-id:configserver");
+				"spring.cloud.kubernetes.discovery.enabled:true", "spring.application.name:test",
+				"spring.cloud.config.discovery.service-id:configserver");
 		assertEquals(1, this.context.getParent().getBeanNamesForType(DiscoveryClient.class).length);
 		DiscoveryClient client = this.context.getParent().getBean(DiscoveryClient.class);
 		verify(client, atLeast(2)).getInstances("configserver");

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/IstioAutoConfiguration.java
Patch:
@@ -20,9 +20,10 @@
 import me.snowdrop.istio.client.DefaultIstioClient;
 import me.snowdrop.istio.client.IstioClient;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
@@ -33,7 +34,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.cloud.istio.enabled", matchIfMissing = true)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class IstioAutoConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/Fabric8LoadBalancerAutoConfiguration.java
Patch:
@@ -16,9 +16,10 @@
 
 package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.kubernetes.commons.loadbalancer.KubernetesLoadBalancerProperties;
 import org.springframework.cloud.loadbalancer.annotation.LoadBalancerClients;
@@ -32,7 +33,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties(KubernetesLoadBalancerProperties.class)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.loadbalancer.enabled", matchIfMissing = true)
 @LoadBalancerClients(defaultConfiguration = Fabric8LoadBalancerClientConfiguration.class)
 public class Fabric8LoadBalancerAutoConfiguration {

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/LoadBalancerAllNamespacesTests.java
Patch:
@@ -36,7 +36,8 @@
 import org.springframework.web.client.RestTemplate;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
-@TestPropertySource(properties = "spring.cloud.kubernetes.discovery.all-namespaces=true")
+@TestPropertySource(properties = { "spring.main.cloud-platform=KUBERNETES",
+		"spring.cloud.kubernetes.discovery.all-namespaces=true" })
 @EnableKubernetesMockClient(crud = true, https = false)
 class LoadBalancerAllNamespacesTests {
 

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/LoadBalancerTests.java
Patch:
@@ -32,7 +32,8 @@
 import org.springframework.boot.web.server.LocalServerPort;
 import org.springframework.web.client.RestTemplate;
 
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
+		properties = "spring.main.cloud-platform=KUBERNETES")
 @EnableKubernetesMockClient(crud = true, https = false)
 class LoadBalancerTests {
 

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/LoadBalancerWithServiceTests.java
Patch:
@@ -43,8 +43,8 @@
 import static org.mockito.Mockito.when;
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
-@TestPropertySource(properties = { "spring.cloud.kubernetes.loadbalancer.mode=SERVICE",
-		"spring.cloud.kubernetes.loadbalancer.enabled=true" })
+@TestPropertySource(properties = { "spring.main.cloud-platform=KUBERNETES",
+		"spring.cloud.kubernetes.loadbalancer.mode=SERVICE", "spring.cloud.kubernetes.loadbalancer.enabled=true" })
 @EnableKubernetesMockClient(crud = true, https = false)
 class LoadBalancerWithServiceTests {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceTests.java
Patch:
@@ -61,8 +61,6 @@ class KubernetesClientSecretsPropertySourceTests {
 					.withNamespace("default").build())
 			.addToData("password", "p455w0rd".getBytes()).addToData("username", "user".getBytes()).build()).build();
 
-	private static final String LIST_API = "/api/v1/secrets";
-
 	private static final String LIST_API_WITH_LABEL = "/api/v1/namespaces/default/secrets?labelSelector=spring.cloud.kubernetes.secret%3Dtrue";
 
 	private static final String LIST_BODY = "{\n" + "\t\"kind\": \"SecretList\",\n" + "\t\"apiVersion\": \"v1\",\n"
@@ -104,6 +102,7 @@ static void setup() {
 
 	@AfterAll
 	static void after() {
+		WireMock.shutdownServer();
 		wireMockServer.stop();
 	}
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigUtilsTests.java
Patch:
@@ -42,13 +42,13 @@ public class Fabric8ConfigUtilsTests {
 
 	@Test
 	public void testGetApplicationNamespaceNotPresent() {
-		String result = Fabric8ConfigUtils.getApplicationNamespace(client, "", "target");
+		String result = Fabric8ConfigUtils.getApplicationNamespace(client, "", "target", null);
 		assertThat(result).isEqualTo("test");
 	}
 
 	@Test
 	public void testGetApplicationNamespacePresent() {
-		String result = Fabric8ConfigUtils.getApplicationNamespace(client, "namespace", "target");
+		String result = Fabric8ConfigUtils.getApplicationNamespace(client, "namespace", "target", null);
 		assertThat(result).isEqualTo("namespace");
 	}
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload/EventBasedConfigurationChangeDetectorTests.java
Patch:
@@ -64,7 +64,7 @@ public void verifyConfigChangesAccountsForBootstrapPropertySources() {
 		when(k8sClient.getNamespace()).thenReturn("default");
 
 		Fabric8ConfigMapPropertySource fabric8ConfigMapPropertySource = new Fabric8ConfigMapPropertySource(k8sClient,
-				"myconfigmap");
+				"myconfigmap", "default", new MockEnvironment(), "", true, false);
 		env.getPropertySources().addFirst(new BootstrapPropertySource<>(fabric8ConfigMapPropertySource));
 
 		ConfigurationUpdateStrategy configurationUpdateStrategy = mock(ConfigurationUpdateStrategy.class);

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySource.java
Patch:
@@ -59,7 +59,7 @@ public KubernetesClientConfigMapPropertySource(CoreV1Api coreV1Api, String name,
 	private static Map<String, Object> getData(CoreV1Api coreV1Api, String name, String namespace,
 			Environment environment, String prefix, boolean includeProfileSpecificSources, boolean failFast) {
 
-		LOG.info("Loading ConfigMap with name '" + name + "' in namespace '" + namespace + "'");
+		LOG.debug("Loading ConfigMap with name '" + name + "' in namespace '" + namespace + "'");
 		try {
 			Set<String> names = new HashSet<>();
 			names.add(name);

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySource.java
Patch:
@@ -51,7 +51,7 @@ private static Map<String, Object> getSourceData(CoreV1Api api, String name, Str
 			Map<String, String> labels, boolean failFast) {
 		Map<String, Object> result = new HashMap<>();
 
-		LOG.info("Loading Secret with name '" + name + "' or with labels [" + labels + "] in namespace '" + namespace
+		LOG.debug("Loading Secret with name '" + name + "' or with labels [" + labels + "] in namespace '" + namespace
 				+ "'");
 		try {
 			if (StringUtils.hasText(name)) {

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySource.java
Patch:
@@ -74,7 +74,7 @@ public Fabric8ConfigMapPropertySource(KubernetesClient client, String name, Stri
 	private static Map<String, Object> getData(KubernetesClient client, String name, String namespace,
 			Environment environment, String prefix, boolean includeProfileSpecificSources, boolean failFast) {
 
-		LOG.info("Loading ConfigMap with name '" + name + "' in namespace '" + namespace + "'");
+		LOG.debug("Loading ConfigMap with name '" + name + "' in namespace '" + namespace + "'");
 		try {
 			Map<String, String> data = getConfigMapData(client, namespace, name);
 			Map<String, Object> result = new HashMap<>(processAllEntries(data, environment));

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySource.java
Patch:
@@ -49,7 +49,7 @@ private static Map<String, Object> getSourceData(KubernetesClient client, String
 			Map<String, String> labels, boolean failFast) {
 		Map<String, Object> result = new HashMap<>();
 
-		LOG.info("Loading Secret with name '" + name + "' or with labels [" + labels + "] in namespace '" + namespace
+		LOG.debug("Loading Secret with name '" + name + "' or with labels [" + labels + "] in namespace '" + namespace
 				+ "'");
 		try {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfigurationTests.java
Patch:
@@ -124,7 +124,7 @@ void secretsOnlyPresent() {
 	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class,
 			properties = { "spring.cloud.kubernetes.secrets.enabled=false",
 					"spring.cloud.kubernetes.config.enabled=false", "kubernetes.informer.enabled=false" })
-	@Neste
+	@Nested
 	class KubernetesEnabledSecretsAndConfigDisabled {
 
 		@Autowired

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientConfigReloadAutoConfigurationTest.java
Patch:
@@ -207,15 +207,14 @@ KubernetesClientProperties kubernetesClientProperties() {
 			return properties;
 		}
 
-		@ConditionalOnMissingBean(ApiClient.class)
 		@Bean
 		ApiClient apiClient() {
 			ApiClient apiClient = new ClientBuilder().setBasePath(wireMockServer.baseUrl()).build();
 			apiClient.setDebugging(true);
+			apiClient.setReadTimeout(0);
 			return apiClient;
 		}
 
-		@ConditionalOnMissingBean(CoreV1Api.class)
 		@Bean
 		CoreV1Api coreApi(ApiClient apiClient) {
 			return new CoreV1Api(apiClient);

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/CoreTestClientViaSystemProperties.java
Patch:
@@ -30,9 +30,9 @@
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = TestApplication.class,
-	properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
-		"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
-		"spring.cloud.kubernetes.secrets.enableApi=true" })
+		properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
+				"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
+				"spring.cloud.kubernetes.secrets.enableApi=true" })
 public class CoreTestClientViaSystemProperties {
 
 	@Autowired

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfigurationTests.java
Patch:
@@ -122,7 +122,7 @@ void secretsOnlyPresent() {
 
 	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class,
 			properties = { "spring.cloud.kubernetes.secrets.enabled=false",
-					"spring.cloud.kubernetes.config.enabled=false" })
+					"spring.cloud.kubernetes.config.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
 	@Nested
 	class KubernetesEnabledSecretsAndConfigDisabled {
 
@@ -157,7 +157,8 @@ public void bothPresent() {
 
 	// tests that @ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES) has the desired
 	// effect, meaning when it is disabled, no property source bean is present
-	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class)
+	@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class,
+			properties = { "kubernetes.informer.enabled=false" })
 	@Nested
 	class KubernetesClientBootstrapConfigurationNotInsideK8s {
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientSecretsPropertySourceLocatorTests.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.cloud.kubernetes.commons.KubernetesClientProperties;
+import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.config.NamespaceResolutionFailedException;
 import org.springframework.cloud.kubernetes.commons.config.SecretsConfigProperties;
 import org.springframework.core.env.PropertySource;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/CoreTestClientViaSystemProperties.java
Patch:
@@ -30,9 +30,9 @@
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(classes = TestApplication.class,
-	properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
-		"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
-		"spring.cloud.kubernetes.secrets.enableApi=true" })
+		properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
+				"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
+				"spring.cloud.kubernetes.secrets.enableApi=true" })
 public class CoreTestClientViaSystemProperties {
 
 	@Autowired

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientBootstrapConfiguration.java
Patch:
@@ -19,6 +19,8 @@
 import io.kubernetes.client.openapi.apis.CoreV1Api;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
@@ -39,6 +41,7 @@
 @ConditionalOnKubernetesEnabled
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
 @Import({ KubernetesCommonsAutoConfiguration.class, KubernetesClientAutoConfiguration.class })
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class KubernetesClientBootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapIncludeProfileSpecificSourcesTests.java
Patch:
@@ -40,7 +40,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
 		classes = IncludeProfileSpecificSourcesApp.class,
 		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources",
-				"include.profile.specific.sources=true" })
+				"include.profile.specific.sources=true", "spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @ActiveProfiles("dev")
 class KubernetesClientConfigMapIncludeProfileSpecificSourcesTests {

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapNameAsPrefixTests.java
Patch:
@@ -37,7 +37,8 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WithPrefixApp.class,
-		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix", "config.map.name.as.prefix.stub=true" })
+		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix", "config.map.name.as.prefix.stub=true",
+				"spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 public class KubernetesClientConfigMapNameAsPrefixTests {
 

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8BootstrapConfiguration.java
Patch:
@@ -22,6 +22,8 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnCloudPlatform;
+import org.springframework.boot.cloud.CloudPlatform;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesSecretsEnabled;
@@ -46,6 +48,7 @@
 @Import({ KubernetesCommonsAutoConfiguration.class, Fabric8AutoConfiguration.class })
 @ConditionalOnClass({ ConfigMap.class, Secret.class })
 @AutoConfigureAfter(KubernetesBootstrapConfiguration.class)
+@ConditionalOnCloudPlatform(CloudPlatform.KUBERNETES)
 public class Fabric8BootstrapConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapWithIncludeProfileSpecificSourcesTests.java
Patch:
@@ -41,7 +41,8 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
 		classes = IncludeProfileSpecificSourcesApp.class,
-		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources" })
+		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources",
+				"spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 @ActiveProfiles("dev")

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapWithPrefixTests.java
Patch:
@@ -39,7 +39,8 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = WithPrefixApp.class,
-		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix" })
+		properties = { "spring.cloud.bootstrap.name=config-map-name-as-prefix",
+				"spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 class ConfigMapWithPrefixTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsFromFilePathsTests.java
Patch:
@@ -42,7 +42,8 @@
 				"spring.cloud.kubernetes.config.enableApi=false",
 				"spring.cloud.kubernetes.config.paths=" + ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_FULL_PATH + ","
 						+ ConfigMapsFromFilePathsTests.SECOND_FILE_NAME_FULL_PATH + ","
-						+ ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_DUPLICATED_FULL_PATH })
+						+ ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_DUPLICATED_FULL_PATH,
+				"spring.main.cloud-platform=KUBERNETES" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsFromFilePathsTests {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsMixedTests.java
Patch:
@@ -43,7 +43,8 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=" + ConfigMapsMixedTests.APPLICATION_NAME,
 				"spring.cloud.kubernetes.config.enableApi=true",
-				"spring.cloud.kubernetes.config.paths=" + ConfigMapsMixedTests.FILE_NAME_FULL_PATH })
+				"spring.cloud.kubernetes.config.paths=" + ConfigMapsMixedTests.FILE_NAME_FULL_PATH,
+				"spring.main.cloud-platform=KUBERNETES" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsMixedTests {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsTests.java
Patch:
@@ -40,7 +40,8 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
-		properties = { "spring.application.name=configmap-example", "spring.cloud.kubernetes.reload.enabled=false" })
+		properties = { "spring.application.name=configmap-example", "spring.cloud.kubernetes.reload.enabled=false",
+				"spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithActiveProfilesNameTests.java
Patch:
@@ -42,7 +42,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-with-active-profile-name-example",
-				"spring.cloud.kubernetes.reload.enabled=false" })
+				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfileExpressionTests.java
Patch:
@@ -38,8 +38,9 @@
  */
 
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class, properties = {
-		"spring.application.name=configmap-with-profile-example", "spring.cloud.kubernetes.reload.enabled=false" })
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
+		properties = { "spring.application.name=configmap-with-profile-example",
+				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
 @ActiveProfiles({ "production", "us-east" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfilesNoActiveProfileTests.java
Patch:
@@ -40,7 +40,7 @@
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
 		properties = { "spring.application.name=configmap-with-profile-no-active-profiles-example",
-				"spring.cloud.kubernetes.reload.enabled=false" })
+				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class ConfigMapsWithProfilesNoActiveProfileTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfilesTests.java
Patch:
@@ -37,8 +37,9 @@
  * @author Charles Moulliard
  */
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class, properties = {
-		"spring.application.name=configmap-with-profile-example", "spring.cloud.kubernetes.reload.enabled=false" })
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
+		properties = { "spring.application.name=configmap-with-profile-example",
+				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithoutProfilesTests.java
Patch:
@@ -34,8 +34,9 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class, properties = {
-		"spring.application.name=configmap-without-profile-example", "spring.cloud.kubernetes.reload.enabled=false" })
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = App.class,
+		properties = { "spring.application.name=configmap-without-profile-example",
+				"spring.cloud.kubernetes.reload.enabled=false", "spring.main.cloud-platform=KUBERNETES" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/CoreTest.java
Patch:
@@ -37,7 +37,7 @@
 @SpringBootTest(classes = TestApplication.class,
 		properties = { "spring.application.name=testapp", "spring.cloud.kubernetes.client.namespace=testns",
 				"spring.cloud.kubernetes.client.trustCerts=true", "spring.cloud.kubernetes.config.namespace=testns",
-				"spring.cloud.kubernetes.secrets.enableApi=true" })
+				"spring.cloud.kubernetes.secrets.enableApi=true", "spring.main.cloud-platform=KUBERNETES" })
 @EnableKubernetesMockClient(crud = true, https = false)
 public class CoreTest {
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleConfigMapsTests.java
Patch:
@@ -38,7 +38,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = ExampleApp.class,
-		properties = { "spring.cloud.bootstrap.name=multiplecms" })
+		properties = { "spring.cloud.bootstrap.name=multiplecms", "spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class MultipleConfigMapsTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleSecretsTests.java
Patch:
@@ -41,7 +41,7 @@
  */
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = MultiSecretsApp.class,
-		properties = { "spring.cloud.bootstrap.name=multiple-secrets" })
+		properties = { "spring.cloud.bootstrap.name=multiple-secrets", "spring.main.cloud-platform=KUBERNETES" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)
 public class MultipleSecretsTests {

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/reload/ConfigReloadAutoConfigurationTest.java
Patch:
@@ -99,7 +99,7 @@ public void kubernetesConfigReloadWhenKubernetesDisabled() {
 	public void kubernetesReloadEnabled() {
 		setup(KubernetesClientTestConfiguration.class, "spring.cloud.kubernetes.enabled=true",
 				"spring.cloud.kubernetes.config.enabled=true", "spring.cloud.kubernetes.secrets.enabled=true",
-				"spring.cloud.kubernetes.reload.enabled=true");
+				"spring.cloud.kubernetes.reload.enabled=true", "spring.main.cloud-platform=KUBERNETES");
 		assertThat(this.getContext().containsBean("configMapPropertySourceLocator")).isTrue();
 		assertThat(this.getContext().containsBean("secretsPropertySourceLocator")).isTrue();
 		assertThat(this.getContext().containsBean("configMapPropertyChangeEventWatcher")).isTrue();
@@ -110,7 +110,7 @@ public void kubernetesReloadEnabled() {
 	public void kubernetesReloadEnabledButSecretDisabled() {
 		setup(KubernetesClientTestConfiguration.class, "spring.cloud.kubernetes.enabled=true",
 				"spring.cloud.kubernetes.config.enabled=true", "spring.cloud.kubernetes.secrets.enabled=false",
-				"spring.cloud.kubernetes.reload.enabled=true");
+				"spring.cloud.kubernetes.reload.enabled=true", "spring.main.cloud-platform=KUBERNETES");
 		assertThat(this.getContext().containsBean("configMapPropertySourceLocator")).isTrue();
 		assertThat(this.getContext().containsBean("secretsPropertySourceLocator")).isFalse();
 		assertThat(this.getContext().containsBean("configMapPropertyChangeEventWatcher")).isTrue();

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configserver/src/main/java/org/springframework/cloud/kubernetes/configserver/KubernetesConfigServerAutoConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public EnvironmentRepository kubernetesEnvironmentRepository(CoreV1Api coreV1Api
 	public KubernetesPropertySourceSupplier configMapPropertySourceSupplier(
 			KubernetesConfigServerProperties properties) {
 		return (coreApi, applicationName, namespace, springEnv) -> {
-			List<String> namespaces = namespaceSplitter(properties.getSecretsNamespaces(), namespace);
+			List<String> namespaces = namespaceSplitter(properties.getConfigMapNamespaces(), namespace);
 			List<MapPropertySource> propertySources = new ArrayList<>();
 			namespaces.forEach(space -> propertySources.add(new KubernetesClientConfigMapPropertySource(coreApi,
 					applicationName, space, springEnv, "", true, false)));

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -41,6 +41,7 @@
 import org.springframework.cloud.client.ConditionalOnDiscoveryHealthIndicatorEnabled;
 import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;
 import org.springframework.cloud.kubernetes.client.KubernetesClientAutoConfiguration;
+import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesNamespaceProvider;
 import org.springframework.cloud.kubernetes.commons.PodUtils;
 import org.springframework.cloud.kubernetes.commons.discovery.KubernetesDiscoveryClientHealthIndicatorInitializer;
@@ -52,6 +53,7 @@
 
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnKubernetesDiscoveryEnabled
+@ConditionalOnKubernetesEnabled
 @AutoConfigureBefore({ SimpleDiscoveryClientAutoConfiguration.class, CommonsClientAutoConfiguration.class,
 		// So that CatalogSharedInformerFactory can be processed in prior to the default
 		// factory

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/AbstractConfigProperties.java
Patch:
@@ -76,4 +76,5 @@ public boolean isIncludeProfileSpecificSources() {
 	public void setIncludeProfileSpecificSources(boolean includeProfileSpecificSources) {
 		this.includeProfileSpecificSources = includeProfileSpecificSources;
 	}
+
 }

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigUtils.java
Patch:
@@ -92,7 +92,7 @@ public static String findPrefix(String explicitPrefix, Boolean useNameAsPrefix,
 	 * @return useProfileNameAsPrefix to be used in normalized sources
 	 */
 	public static boolean includeProfileSpecificSources(boolean defaultIncludeProfileSpecificSources,
-		Boolean includeProfileSpecificSources) {
+			Boolean includeProfileSpecificSources) {
 		if (includeProfileSpecificSources != null) {
 			return includeProfileSpecificSources;
 		}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapWithIncludeProfileSpecificSourcesTests.java
Patch:
@@ -39,7 +39,8 @@
  * @author wind57
  */
 @ExtendWith(SpringExtension.class)
-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = IncludeProfileSpecificSourcesApp.class,
+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
+		classes = IncludeProfileSpecificSourcesApp.class,
 		properties = { "spring.cloud.bootstrap.name=include-profile-specific-sources" })
 @AutoConfigureWebTestClient
 @EnableKubernetesMockClient(crud = true, https = false)

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -88,7 +88,7 @@ else if (kubernetesClientProperties != null) {
 		}
 
 		return new KubernetesClientConfigMapPropertySource(coreV1Api, name, namespace, environment,
-				normalizedSource.getPrefix());
+				normalizedSource.getPrefix(), normalizedSource.isIncludeProfileSpecificSources());
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceLocator.java
Patch:
@@ -69,7 +69,7 @@ protected MapPropertySource getMapPropertySource(String applicationName, Normali
 		String namespace = getApplicationNamespace(this.client, normalizedSource.getNamespace(), configurationTarget,
 				provider);
 		return new Fabric8ConfigMapPropertySource(this.client, applicationName, namespace, environment,
-				normalizedSource.getPrefix());
+				normalizedSource.getPrefix(), normalizedSource.isIncludeProfileSpecificSources());
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/with_prefix/controller/Controller.java
Patch:
@@ -37,17 +37,17 @@ public Controller(One one, Two two, Three three) {
 		this.three = three;
 	}
 
-	@GetMapping("/one")
+	@GetMapping("/prefix/one")
 	public String one() {
 		return one.getProperty();
 	}
 
-	@GetMapping("/two")
+	@GetMapping("/prefix/two")
 	public String two() {
 		return two.getProperty();
 	}
 
-	@GetMapping("/three")
+	@GetMapping("/prefix/three")
 	public String three() {
 		return three.getProperty();
 	}

File: spring-cloud-kubernetes-commons/src/test/java/org/springframework/cloud/kubernetes/commons/KubernetesNamespaceProviderTests.java
Patch:
@@ -56,7 +56,7 @@ public void getNamespace() {
 		environment.setProperty(NAMESPACE_PROPERTY, "mynamespace");
 		KubernetesNamespaceProvider p1 = new KubernetesNamespaceProvider(environment);
 		assertThat(p1.getNamespace()).isEqualTo("mynamespace");
-		paths.verify(times(0), () -> Paths.get(PATH));
+		paths.verify(() -> Paths.get(PATH), times(0));
 
 	}
 

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientAutoConfiguration.java
Patch:
@@ -42,7 +42,6 @@ public class KubernetesClientAutoConfiguration {
 	@ConditionalOnMissingBean
 	public ApiClient apiClient() {
 		ApiClient apiClient = kubernetesApiClient();
-		io.kubernetes.client.openapi.Configuration.setDefaultApiClient(apiClient);
 		return apiClient;
 	}
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapConfigProperties.java
Patch:
@@ -85,8 +85,7 @@ public List<NormalizedSource> determineSources() {
 			return Collections.singletonList(new NormalizedSource(name, namespace, ""));
 		}
 
-		return sources.stream().map(s -> s.normalize(name, namespace, useNameAsPrefix))
-				.collect(Collectors.toList());
+		return sources.stream().map(s -> s.normalize(name, namespace, useNameAsPrefix)).collect(Collectors.toList());
 	}
 
 	@Override
@@ -176,7 +175,8 @@ public NormalizedSource normalize(String defaultName, String defaultNamespace) {
 		public NormalizedSource normalize(String defaultName, String defaultNamespace, boolean defaultUseNameAsPrefix) {
 			String normalizedName = StringUtils.hasLength(this.name) ? this.name : defaultName;
 			String normalizedNamespace = StringUtils.hasLength(this.namespace) ? this.namespace : defaultNamespace;
-			String prefix = ConfigUtils.findPrefix(this.explicitPrefix, useNameAsPrefix, defaultUseNameAsPrefix, normalizedName);
+			String prefix = ConfigUtils.findPrefix(this.explicitPrefix, useNameAsPrefix, defaultUseNameAsPrefix,
+					normalizedName);
 			return new NormalizedSource(normalizedName, normalizedNamespace, prefix);
 		}
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SecretsConfigProperties.java
Patch:
@@ -204,7 +204,7 @@ public boolean equals(Object o) {
 			}
 			SecretsConfigProperties.NormalizedSource other = (SecretsConfigProperties.NormalizedSource) o;
 			return Objects.equals(this.name, other.name) && Objects.equals(this.namespace, other.namespace)
-				&& Objects.equals(this.labels, other.labels);
+					&& Objects.equals(this.labels, other.labels);
 		}
 
 		@Override

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceLocator.java
Patch:
@@ -66,9 +66,9 @@ public Fabric8ConfigMapPropertySourceLocator(KubernetesClient client, ConfigMapC
 	@Override
 	protected MapPropertySource getMapPropertySource(String applicationName, NormalizedSource normalizedSource,
 			String configurationTarget, ConfigurableEnvironment environment) {
-		String configMapName = getApplicationNamespace(this.client, normalizedSource.getNamespace(),
-				configurationTarget, provider);
-		return new Fabric8ConfigMapPropertySource(this.client, applicationName, configMapName, environment,
+		String namespace = getApplicationNamespace(this.client, normalizedSource.getNamespace(), configurationTarget,
+				provider);
+		return new Fabric8ConfigMapPropertySource(this.client, applicationName, namespace, environment,
 				normalizedSource.getPrefix());
 	}
 

File: spring-cloud-kubernetes-client-config/src/test/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientEventBasedSecretsChangeDetectorTests.java
Patch:
@@ -137,7 +137,8 @@ void watch() {
 		KubernetesMockEnvironment environment = new KubernetesMockEnvironment(
 				mock(KubernetesClientSecretsPropertySource.class)).withProperty("db-password", "p455w0rd");
 		KubernetesClientSecretsPropertySourceLocator locator = mock(KubernetesClientSecretsPropertySourceLocator.class);
-		when(locator.locate(environment)).thenAnswer(ignoreMe -> new MockPropertySource().withProperty("db-password", "p455w0rd2"));
+		when(locator.locate(environment))
+				.thenAnswer(ignoreMe -> new MockPropertySource().withProperty("db-password", "p455w0rd2"));
 		ConfigReloadProperties properties = new ConfigReloadProperties();
 		properties.setMonitoringSecrets(true);
 		KubernetesNamespaceProvider kubernetesNamespaceProvider = mock(KubernetesNamespaceProvider.class);

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8SecretsPropertySource.java
Patch:
@@ -60,12 +60,12 @@ private static Map<String, Object> getSourceData(KubernetesClient client, String
 			}
 
 			client.secrets().inNamespace(namespaceToUse).withLabels(labels).list().getItems()
-				.forEach(s -> putDataFromSecret(s, result, namespaceToUse));
+					.forEach(s -> putDataFromSecret(s, result, namespaceToUse));
 
 		}
 		catch (Exception e) {
-			LOG.warn("Can't read secret with name: [" + name + "] or labels [" + labels + "] in namespace: [" + namespaceToUse
-					+ "] (cause: " + e.getMessage() + "). Ignoring");
+			LOG.warn("Can't read secret with name: [" + name + "] or labels [" + labels + "] in namespace: ["
+					+ namespaceToUse + "] (cause: " + e.getMessage() + "). Ignoring");
 		}
 
 		return result;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapWithPrefixTests.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import io.fabric8.kubernetes.api.model.ConfigMapBuilder;
 import io.fabric8.kubernetes.client.Config;
 import io.fabric8.kubernetes.client.KubernetesClient;
 import io.fabric8.kubernetes.client.server.mock.EnableKubernetesMockClient;
@@ -76,8 +77,8 @@ public static void setUpBeforeClass() {
 
 	private static void createConfigmap(KubernetesClient client, String name, Map<String, String> data) {
 
-		client.configMaps().inNamespace("spring-k8s").createNew().withNewMetadata().withName(name).endMetadata()
-				.addToData(data).done();
+		client.configMaps().inNamespace("spring-k8s").create(new ConfigMapBuilder().withNewMetadata().withName(name).endMetadata()
+			.addToData(data).build());
 	}
 
 	/**

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -59,7 +59,7 @@ protected MapPropertySource getMapPropertySource(String name,
 		String fallbackNamespace = kubernetesNamespaceProvider != null ? kubernetesNamespaceProvider.getNamespace()
 				: kubernetesClientProperties.getNamespace();
 		return new KubernetesClientConfigMapPropertySource(coreV1Api, name,
-				getNamespace(normalizedSource, fallbackNamespace), environment);
+				getNamespace(normalizedSource, fallbackNamespace), environment, normalizedSource.getPrefix());
 	}
 
 }

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigMapPropertySourceLocator.java
Patch:
@@ -49,7 +49,8 @@ protected MapPropertySource getMapPropertySource(String applicationName, Normali
 			String configurationTarget, ConfigurableEnvironment environment) {
 		String namespaceName = getApplicationNamespace(this.client, normalizedSource.getNamespace(),
 				configurationTarget);
-		return new Fabric8ConfigMapPropertySource(this.client, applicationName, namespaceName, environment);
+		return new Fabric8ConfigMapPropertySource(this.client, applicationName, namespaceName, environment,
+				normalizedSource.getPrefix());
 	}
 
 }

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/KubernetesClientConfigMapPropertySourceLocator.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class KubernetesClientConfigMapPropertySourceLocator extends ConfigMapPropertySourceLocator {
 
-	private CoreV1Api coreV1Api;
+	private final CoreV1Api coreV1Api;
 
 	private KubernetesClientProperties kubernetesClientProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleConfigMapsTests.java
Patch:
@@ -85,7 +85,7 @@ private static void createConfigmap(KubernetesClient client, String configMapNam
 				.addToData(data).done();
 	}
 
-	// the last confimap defined in 'multiplecms.yml' has the highest priority, so
+	// the last configmap defined in 'multiplecms.yml' has the highest priority, so
 	// the common property defined in all configmaps is taken from the last one defined
 	@Test
 	public void testCommonMessage() {

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesServicesServerList.java
Patch:
@@ -76,7 +76,7 @@ public List<Server> getUpdatedListOfServers() {
 			}
 			else {
 				for (ServicePort servicePort : service.getSpec().getPorts()) {
-					if (Utils.isNotNullOrEmpty(this.getPortName())
+					if (Utils.isNullOrEmpty(this.getPortName())
 							|| this.getPortName().endsWith(servicePort.getName())) {
 						result.add(new Server(concatServiceFQDN(service),
 								servicePort.getPort()));

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/IstioBootstrapConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2019 the original author or authors.
+ * Copyright 2013-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/IstioClientProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2019 the original author or authors.
+ * Copyright 2013-2021 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/Fabric8ConfigUtils.java
Patch:
@@ -36,7 +36,7 @@ private Fabric8ConfigUtils() {
 
 	public static String getApplicationNamespace(KubernetesClient client, String configNamespace,
 			String configurationTarget) {
-		if (StringUtils.isEmpty(configNamespace)) {
+		if (!StringUtils.hasLength(configNamespace)) {
 			LOG.debug(configurationTarget + " namespace has not been set, taking it from client (ns="
 					+ client.getNamespace() + ")");
 			configNamespace = client.getNamespace();

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClient.java
Patch:
@@ -130,7 +130,7 @@ public List<ServiceInstance> getInstances(String serviceId) {
 			}
 			V1EndpointPort port = subset.getPorts() != null && subset.getPorts().size() == 1 ? subset.getPorts().get(0)
 					: subset.getPorts().stream()
-							.filter(p -> this.properties.getPrimaryPortName().equalsIgnoreCase(p.getName())).findFirst()
+							.filter(p -> p.getName().equalsIgnoreCase(this.properties.getPrimaryPortName())).findFirst()
 							.orElseThrow(IllegalStateException::new);
 			List<V1EndpointAddress> addresses = subset.getAddresses();
 			if (this.properties.isIncludeNotReadyAddresses()

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClientTests.java
Patch:
@@ -106,7 +106,7 @@ public void testDiscoveryGetInstanceAllNamespaceShouldWork() {
 		assertThat(discoveryClient.getInstances("test-svc-1"))
 				.containsOnly(new KubernetesServiceInstance("", "test-svc-1", "2.2.2.2", 8080, new HashMap<>(), false));
 
-		verify(kubernetesDiscoveryProperties, times(1)).isAllNamespaces();
+		verify(kubernetesDiscoveryProperties, times(2)).isAllNamespaces();
 	}
 
 	@Test
@@ -121,7 +121,7 @@ public void testDiscoveryGetInstanceOneNamespaceShouldWork() {
 
 		assertThat(discoveryClient.getInstances("test-svc-1"))
 				.containsOnly(new KubernetesServiceInstance("", "test-svc-1", "2.2.2.2", 8080, new HashMap<>(), false));
-		verify(kubernetesDiscoveryProperties, times(2)).isAllNamespaces();
+		verify(kubernetesDiscoveryProperties, times(1)).isAllNamespaces();
 	}
 
 	private Lister<V1Service> setupServiceLister(V1Service... services) {

File: spring-cloud-kubernetes-client-discovery/src/test/java/org/springframework/cloud/kubernetes/client/discovery/reactive/KubernetesInformerReactiveDiscoveryClientTests.java
Patch:
@@ -118,7 +118,7 @@ public void testDiscoveryGetInstanceAllNamespaceShouldWork() {
 				.expectNext(new KubernetesServiceInstance("", "test-svc-1", "2.2.2.2", 8080, new HashMap<>(), false))
 				.expectComplete().verify();
 
-		verify(kubernetesDiscoveryProperties, times(1)).isAllNamespaces();
+		verify(kubernetesDiscoveryProperties, times(2)).isAllNamespaces();
 	}
 
 	@Test
@@ -137,7 +137,7 @@ public void testDiscoveryGetInstanceOneNamespaceShouldWork() {
 				.expectNext(new KubernetesServiceInstance("", "test-svc-1", "2.2.2.2", 8080, new HashMap<>(), false))
 				.expectComplete().verify();
 
-		verify(kubernetesDiscoveryProperties, times(2)).isAllNamespaces();
+		verify(kubernetesDiscoveryProperties, times(1)).isAllNamespaces();
 	}
 
 	private Lister<V1Service> setupServiceLister(V1Service... services) {

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClient.java
Patch:
@@ -119,7 +119,7 @@ public List<ServiceInstance> getInstances(String serviceId) {
 
 		V1Endpoints ep = this.endpointsLister.namespace(service.getMetadata().getNamespace())
 				.get(service.getMetadata().getName());
-		if (ep == null) {
+		if (ep == null || ep.getSubsets() == null) {
 			// no available endpoints in the cluster
 			return new ArrayList<>();
 		}

File: spring-cloud-kubernetes-client-discovery/src/main/java/org/springframework/cloud/kubernetes/client/discovery/KubernetesInformerDiscoveryClient.java
Patch:
@@ -83,7 +83,7 @@ public String description() {
 	public List<ServiceInstance> getInstances(String serviceId) {
 		Assert.notNull(serviceId, "[Assertion failed] - the object argument must not be null");
 
-		if (StringUtils.hasText(namespace) && !properties.isAllNamespaces()) {
+		if (!StringUtils.hasText(namespace) && !properties.isAllNamespaces()) {
 			log.warn("Namespace is null or empty, this may cause issues looking up services");
 		}
 

File: spring-cloud-kubernetes-fabric8-discovery/src/test/java/org/springframework/cloud/kubernetes/fabric8/discovery/KubernetesDiscoveryClientFilterMetadataTest.java
Patch:
@@ -69,7 +69,7 @@ public class KubernetesDiscoveryClientFilterMetadataTest {
 	private KubernetesDiscoveryProperties properties;
 
 	@Mock
-	private DefaultIsServicePortSecureResolver isServicePortSecureResolver;
+	private ServicePortSecureResolver isServicePortSecureResolver;
 
 	@Mock
 	private KubernetesDiscoveryProperties.Metadata metadata;

File: spring-cloud-kubernetes-fabric8-autoconfig/src/main/java/org/springframework/cloud/kubernetes/fabric8/Fabric8AutoConfiguration.java
Patch:
@@ -77,6 +77,7 @@ public Config kubernetesClientConfig(KubernetesClientProperties kubernetesClient
 				.withUsername(or(kubernetesClientProperties.getUsername(), base.getUsername()))
 				.withPassword(or(kubernetesClientProperties.getPassword(), base.getPassword()))
 
+				.withOauthToken(or(kubernetesClientProperties.getOauthToken(), base.getOauthToken()))
 				.withCaCertFile(or(kubernetesClientProperties.getCaCertFile(), base.getCaCertFile()))
 				.withCaCertData(or(kubernetesClientProperties.getCaCertData(), base.getCaCertData()))
 

File: spring-cloud-kubernetes-fabric8-autoconfig/src/main/java/org/springframework/cloud/kubernetes/fabric8/Fabric8AutoConfiguration.java
Patch:
@@ -77,6 +77,7 @@ public Config kubernetesClientConfig(KubernetesClientProperties kubernetesClient
 				.withUsername(or(kubernetesClientProperties.getUsername(), base.getUsername()))
 				.withPassword(or(kubernetesClientProperties.getPassword(), base.getPassword()))
 
+				.withOauthToken(or(kubernetesClientProperties.getOauthToken(), base.getOauthToken()))
 				.withCaCertFile(or(kubernetesClientProperties.getCaCertFile(), base.getCaCertFile()))
 				.withCaCertData(or(kubernetesClientProperties.getCaCertData(), base.getCaCertData()))
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshRabbitMQIT.java
Patch:
@@ -123,7 +123,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 		// Sometimes the NGINX ingress takes a bit to catch up and realize the service is
 		// available and we get a 503, we just need to wait a bit
 		await().timeout(Duration.ofSeconds(60))
-			.until(() -> rest.getForEntity("http://localhost:80/it", Object.class).getStatusCode().is2xxSuccessful());
+			.until(() -> rest.getForEntity("http://localhost:80/it", String.class).getStatusCode().is2xxSuccessful());
 
 		// Wait a bit before we verify
 		await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(90)).until(() -> {

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshRabbitMQIT.java
Patch:
@@ -123,7 +123,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 		// Sometimes the NGINX ingress takes a bit to catch up and realize the service is
 		// available and we get a 503, we just need to wait a bit
 		await().timeout(Duration.ofSeconds(60))
-			.until(() -> rest.getForEntity("http://localhost:80/it", Boolean.class).getStatusCode().is2xxSuccessful());
+			.until(() -> rest.getForEntity("http://localhost:80/it", Object.class).getStatusCode().is2xxSuccessful());
 
 		// Wait a bit before we verify
 		await().pollInterval(Duration.ofSeconds(1)).atMost(Duration.ofSeconds(90)).until(() -> {

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshIT.java
Patch:
@@ -58,7 +58,7 @@ public class ActuatorRefreshIT {
 
 	private static final String IMAGE = "spring-cloud-kubernetes-configuration-watcher";
 
-	private static final String IMAGE_TAG = "2.0.0-SNAPSHOT";
+	private static final String IMAGE_TAG = "2.0.1-SNAPSHOT";
 
 	private static final String LOCAL_REPO = "docker.io/springcloud";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshKafkaIT.java
Patch:
@@ -59,7 +59,7 @@ public class ActuatorRefreshKafkaIT {
 
 	private static final String CONFIG_WATCHER_IT_IMAGE = "spring-cloud-kubernetes-configuration-watcher-it";
 
-	private static final String IMAGE_TAG = "2.0.0-SNAPSHOT";
+	private static final String IMAGE_TAG = "2.0.1-SNAPSHOT";
 
 	private static final String LOCAL_REPO = "docker.io/springcloud";
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-config-it/src/test/java/org/springframework/cloud/kubernetes/client/config/it/ConfigMapAndSecretIT.java
Patch:
@@ -88,7 +88,7 @@ public static void setup() throws Exception {
 	@After
 	public void after() throws Exception {
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
-				"metadata.name=" + K8S_CONFIG_CLIENT_IT_NAME, null, null, null, null, null, null, null, null);
+				"metadata.name=" + K8S_CONFIG_CLIENT_IT_NAME, null, null, null, null, null, null, null, null, null);
 		api.deleteNamespacedService(K8S_CONFIG_CLIENT_IT_SERVICE_NAME, NAMESPACE, null, null, null, null, null, null);
 		networkingApi.deleteNamespacedIngress("it-ingress", NAMESPACE, null, null, null, null, null, null);
 		api.deleteNamespacedConfigMap(APP_NAME, NAMESPACE, null, null, null, null, null, null);

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-loadbalancer-it/src/test/java/org/springframework/cloud/kubernetes/client/loadbalancer/it/LoadBalancerIT.java
Patch:
@@ -119,7 +119,7 @@ public void testLoadBalancerPodMode() throws Exception {
 
 	private void cleanup() throws ApiException {
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
-			"metadata.name=" + SPRING_CLOUD_K8S_LOADBALANCER_DEPLOYMENT_NAME, null, null, null, null, null, null,
+			"metadata.name=" + SPRING_CLOUD_K8S_LOADBALANCER_DEPLOYMENT_NAME, null, null, null, null, null, null, null,
 			null, null);
 		api.deleteNamespacedService(SPRING_CLOUD_K8S_LOADBALANCER_APP_NAME, NAMESPACE, null, null, null, null, null,
 			null);
@@ -159,7 +159,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 	@After
 	public void after() throws Exception {
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
-			"metadata.name=" + WIREMOCK_DEPLOYMENT_NAME, null, null, null, null, null, null, null, null);
+			"metadata.name=" + WIREMOCK_DEPLOYMENT_NAME, null, null, null, null, null, null, null, null, null);
 
 		api.deleteNamespacedService(WIREMOCK_APP_NAME, NAMESPACE, null, null, null, null, null, null);
 		networkingApi.deleteNamespacedIngress("wiremock-ingress", NAMESPACE, null, null, null, null, null, null);

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-reactive-discovery-client-it/src/test/java/org/springframework/cloud/kubernetes/client/reactive/discovery/it/ReactiveDiscoveryClientIT.java
Patch:
@@ -112,7 +112,7 @@ public void testReactiveDiscoveryClient() throws Exception {
 	private void cleanup() throws ApiException {
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
 			"metadata.name=" + SPRING_CLOUD_K8S_REACTIVE_DISCOVERY_DEPLOYMENT_NAME, null, null, null, null, null,
-			null, null, null);
+			null, null, null, null);
 		api.deleteNamespacedService(SPRING_CLOUD_K8S_REACTIVE_DISCOVERY_APP_NAME, NAMESPACE, null, null, null, null,
 			null, null);
 		networkingApi.deleteNamespacedIngress("it-ingress", NAMESPACE, null, null, null, null, null, null);
@@ -150,7 +150,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 	@After
 	public void after() throws Exception {
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
-			"metadata.name=" + WIREMOCK_DEPLOYMENT_NAME, null, null, null, null, null, null, null, null);
+			"metadata.name=" + WIREMOCK_DEPLOYMENT_NAME, null, null, null, null, null, null, null, null, null);
 
 		api.deleteNamespacedService(WIREMOCK_APP_NAME, NAMESPACE, null, null, null, null, null, null);
 		networkingApi.deleteNamespacedIngress("wiremock-ingress", NAMESPACE, null, null, null, null, null, null);

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshIT.java
Patch:
@@ -141,10 +141,10 @@ public void after() throws Exception {
 
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
 				"metadata.name=" + SPRING_CLOUD_K8S_CONFIG_WATCHER_DEPLOYMENT_NAME, null, null, null, null, null, null,
-				null, null);
+				null, null, null);
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
 				"metadata.name=" + CONFIG_WATCHER_WIREMOCK_DEPLOYMENT_NAME, null, null, null, null, null, null, null,
-				null);
+				null, null);
 		api.deleteNamespacedService(SPRING_CLOUD_K8S_CONFIG_WATCHER_APP_NAME, NAMESPACE, null, null, null, null, null,
 				null);
 		api.deleteNamespacedService(CONFIG_WATCHER_WIREMOCK_APP_NAME, NAMESPACE, null, null, null, null, null, null);

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-core-k8s-client-it/src/test/java/org/springframework/cloud/kubernetes/core/k8s/it/ActuatorEndpointIT.java
Patch:
@@ -192,7 +192,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 	@AfterClass
 	public static void after() throws Exception {
 		appsApi.deleteCollectionNamespacedDeployment(NAMESPACE, null, null, null,
-				"metadata.name=" + K8S_CONFIG_CLIENT_IT_NAME, null, null, null, null, null, null, null, null);
+				"metadata.name=" + K8S_CONFIG_CLIENT_IT_NAME, null, null, null, null, null, null, null, null, null);
 		api.deleteNamespacedService(K8S_CONFIG_CLIENT_IT_SERVICE_NAME, NAMESPACE, null, null, null, null, null, null);
 		networkingApi.deleteNamespacedIngress("it-ingress", NAMESPACE, null, null, null, null, null, null);
 	}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/Leader.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.leader;
+package org.springframework.cloud.kubernetes.commons.leader;
 
 import java.util.Objects;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/LeaderContext.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.leader;
+package org.springframework.cloud.kubernetes.commons.leader;
 
 import org.springframework.integration.leader.Candidate;
 import org.springframework.integration.leader.Context;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/LeaderInfoContributor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.leader;
+package org.springframework.cloud.kubernetes.commons.leader;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/LeaderInitiator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.leader;
+package org.springframework.cloud.kubernetes.commons.leader;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/leader/LeaderProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.leader;
+package org.springframework.cloud.kubernetes.commons.leader;
 
 import java.time.Duration;
 

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/Fabric8LeaderAutoConfigurationTests.java
Patch:
@@ -34,7 +34,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {
 		// Make sure test passes without Kubernetes cluster
 		"spring.cloud.kubernetes.leader.autoStartup=false" })
-public class LeaderAutoConfigurationTests {
+public class Fabric8LeaderAutoConfigurationTests {
 
 	@Value("${local.server.port}")
 	private int port;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+import org.springframework.cloud.kubernetes.commons.leader.Leader;
 import org.springframework.integration.leader.Candidate;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/loadbalancer/KubernetesLoadBalancerMode.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
+package org.springframework.cloud.kubernetes.commons.loadbalancer;
 
 /**
  * Kubernetes load balancer mode enum.

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/loadbalancer/KubernetesLoadBalancerProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
+package org.springframework.cloud.kubernetes.commons.loadbalancer;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/IstioAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.istio;
+package org.springframework.cloud.kubernetes.fabric8.istio;
 
 import io.fabric8.kubernetes.client.Config;
 import me.snowdrop.istio.client.DefaultIstioClient;

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/IstioBootstrapConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.istio;
+package org.springframework.cloud.kubernetes.fabric8.istio;
 
 import java.util.Arrays;
 
@@ -26,7 +26,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.cloud.kubernetes.istio.utils.MeshUtils;
+import org.springframework.cloud.kubernetes.fabric8.istio.utils.MeshUtils;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.env.ConfigurableEnvironment;

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/IstioClientProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.istio;
+package org.springframework.cloud.kubernetes.fabric8.istio;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;

File: spring-cloud-kubernetes-fabric8-istio/src/main/java/org/springframework/cloud/kubernetes/fabric8/istio/utils/MeshUtils.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.istio.utils;
+package org.springframework.cloud.kubernetes.fabric8.istio.utils;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.boot.web.client.RestTemplateBuilder;
-import org.springframework.cloud.kubernetes.istio.IstioClientProperties;
+import org.springframework.cloud.kubernetes.fabric8.istio.IstioClientProperties;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.client.RestTemplate;
 

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/Leader.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.util.Objects;
 

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.net.Inet4Address;
 import java.net.UnknownHostException;

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderContext.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import org.springframework.integration.leader.Candidate;
 import org.springframework.integration.leader.Context;

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderInfoContributor.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderInitiator.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.time.Duration;
 

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderRecordWatcher.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import io.fabric8.kubernetes.api.model.ConfigMap;
 import io.fabric8.kubernetes.client.KubernetesClient;

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/LeadershipController.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.util.Collections;
 import java.util.Map;

File: spring-cloud-kubernetes-fabric8-leader/src/main/java/org/springframework/cloud/kubernetes/fabric8/leader/PodReadinessWatcher.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import io.fabric8.kubernetes.api.model.DoneablePod;
 import io.fabric8.kubernetes.api.model.Pod;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderAutoConfigurationTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderContextTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.util.Optional;
 

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderInfoContributorTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.util.Map;
 import java.util.Optional;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderInitiatorTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import java.time.Duration;
 

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderRecordWatcherTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import io.fabric8.kubernetes.api.model.ConfigMap;
 import io.fabric8.kubernetes.api.model.ConfigMapList;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeaderTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/LeadershipControllerTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.junit.jupiter.api.BeforeEach;

File: spring-cloud-kubernetes-fabric8-leader/src/test/java/org/springframework/cloud/kubernetes/fabric8/leader/PodReadinessWatcherTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.leader;
+package org.springframework.cloud.kubernetes.fabric8.leader;
 
 import io.fabric8.kubernetes.api.model.DoneablePod;
 import io.fabric8.kubernetes.api.model.Pod;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesLoadBalancerAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesLoadBalancerClientConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesLoadBalancerMode.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 /**
  * Kubernetes load balancer mode enum.

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesLoadBalancerProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServiceInstanceMapper.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import java.util.HashMap;
 import java.util.List;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServicesListSupplier.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import java.util.ArrayList;
 import java.util.List;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesLoadBalancerAutoConfigurationTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServiceInstanceMapperTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: spring-cloud-kubernetes-fabric8-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/KubernetesServiceListSupplierTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import java.util.List;
 

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/main/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/SimpleLoadBalancerApp.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/LoadBalancerAllNamespacesTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import io.fabric8.kubernetes.api.model.ServicePortBuilder;
 import io.fabric8.kubernetes.api.model.ServiceSpecBuilder;

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/LoadBalancerTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import io.fabric8.kubernetes.api.model.ServicePortBuilder;
 import io.fabric8.kubernetes.api.model.ServiceSpecBuilder;

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/fabric8/loadbalancer/LoadBalancerWithServiceTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.loadbalancer;
+package org.springframework.cloud.kubernetes.fabric8.loadbalancer;
 
 import java.util.HashMap;
 

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/KubernetesClientUtils.java
Patch:
@@ -48,9 +48,9 @@ public static ApiClient kubernetesApiClient() throws IOException {
 				ApiClient apiClient = ClientBuilder.standard().build();
 				return apiClient;
 			}
-			catch (IOException e1) {
+			catch (Exception e1) {
 				LOG.warn("Could not create a Kubernetes ApiClient from either a cluster or standard environment", e1);
-				throw e1;
+				return new ClientBuilder().build();
 			}
 		}
 	}

File: spring-cloud-kubernetes-client-config/src/main/java/org/springframework/cloud/kubernetes/client/config/reload/KubernetesClientConfigReloadAutoConfiguration.java
Patch:
@@ -33,8 +33,8 @@
 import org.springframework.cloud.kubernetes.client.config.KubernetesClientConfigMapPropertySourceLocator;
 import org.springframework.cloud.kubernetes.client.config.KubernetesClientSecretsPropertySource;
 import org.springframework.cloud.kubernetes.client.config.KubernetesClientSecretsPropertySourceLocator;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.commons.KubernetesClientProperties;
+import org.springframework.cloud.kubernetes.commons.config.ConditionalOnKubernetesAndConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadAutoConfiguration;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigurationChangeDetector;
@@ -54,7 +54,7 @@
  * @author Ryan Baxter
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnKubernetesAndConfigEnabled
 @ConditionalOnClass(EndpointAutoConfiguration.class)
 @AutoConfigureAfter({ InfoEndpointAutoConfiguration.class, RefreshEndpointAutoConfiguration.class,
 		RefreshAutoConfiguration.class, ConfigReloadAutoConfiguration.class })

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration;
 import org.springframework.cloud.context.refresh.ContextRefresher;
 import org.springframework.cloud.context.restart.RestartEndpoint;
-import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
+import org.springframework.cloud.kubernetes.commons.config.ConditionalOnKubernetesAndConfigEnabled;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -39,7 +39,7 @@
  * @author Ryan Baxter
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnKubernetesEnabled
+@ConditionalOnKubernetesAndConfigEnabled
 @ConditionalOnClass(EndpointAutoConfiguration.class)
 @AutoConfigureAfter({ InfoEndpointAutoConfiguration.class, RefreshEndpointAutoConfiguration.class,
 		RefreshAutoConfiguration.class })

File: spring-cloud-kubernetes-fabric8-config/src/main/java/org/springframework/cloud/kubernetes/fabric8/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration;
 import org.springframework.cloud.context.refresh.ContextRefresher;
 import org.springframework.cloud.context.restart.RestartEndpoint;
+import org.springframework.cloud.kubernetes.commons.config.ConditionalOnKubernetesAndConfigEnabled;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigurationChangeDetector;
 import org.springframework.cloud.kubernetes.commons.config.reload.ConfigurationUpdateStrategy;
@@ -60,7 +61,7 @@
  * @author Kris Iyer
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
+@ConditionalOnKubernetesAndConfigEnabled
 @ConditionalOnClass(EndpointAutoConfiguration.class)
 @AutoConfigureAfter({ InfoEndpointAutoConfiguration.class, RefreshEndpointAutoConfiguration.class,
 		RefreshAutoConfiguration.class })

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -51,7 +51,8 @@
  * @author Nicolla Ferraro
  */
 @Configuration(proxyBeanMethods = false)
-@ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
+@ConditionalOnProperty(value = { "spring.cloud.kubernetes.config.enabled",
+		"spring.cloud.kubernetes.enabled" }, matchIfMissing = true)
 @ConditionalOnClass(EndpointAutoConfiguration.class)
 @AutoConfigureAfter({ InfoEndpointAutoConfiguration.class,
 		RefreshEndpointAutoConfiguration.class, RefreshAutoConfiguration.class })

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/PodUtils.java
Patch:
@@ -29,7 +29,7 @@ public interface PodUtils {
 
 	/**
 	 * @return A supplier of the currentPod {@link Pod}. The supplier will hold the
-	 * currentPod {@Pod} if inside Kubernetes or false, otherwise.
+	 * currentPod {@link Pod} if inside Kubernetes or false, otherwise.
 	 */
 	Supplier<Pod> currentPod();
 

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-client-config-it/src/test/java/org/springframework/cloud/kubernetes/client/config/it/ConfigMapAndSecretIT.java
Patch:
@@ -163,7 +163,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 		data.replace("application.yaml", data.get("application.yaml").replace("from-config-map", "from-unit-test"));
 		configMap.data(data);
 		api.replaceNamespacedConfigMap(APP_NAME, NAMESPACE, configMap, null, null, null);
-		await().timeout(Duration.ofSeconds(15))
+		await().timeout(Duration.ofSeconds(60))
 				.until(() -> rest.getForObject(MYPROPERTY_URL, String.class).equals("from-unit-test"));
 		myProperty = rest.getForObject(MYPROPERTY_URL, String.class);
 		assertThat(myProperty).isEqualTo("from-unit-test");
@@ -173,7 +173,7 @@ public void handleError(ClientHttpResponse clientHttpResponse) throws IOExceptio
 		secretData.replace("my.config.mySecret", "p455w1rd".getBytes());
 		secret.setData(secretData);
 		api.replaceNamespacedSecret(APP_NAME, NAMESPACE, secret, null, null, null);
-		await().timeout(Duration.ofSeconds(15))
+		await().timeout(Duration.ofSeconds(60))
 				.until(() -> rest.getForObject(MYSECRET_URL, String.class).equals("p455w1rd"));
 		mySecret = rest.getForObject(MYSECRET_URL, String.class);
 		assertThat(mySecret).isEqualTo("p455w1rd");

File: spring-cloud-kubernetes-integration-tests/spring-cloud-kubernetes-configuration-watcher-it/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/ActuatorRefreshRabbitMQIT.java
Patch:
@@ -221,7 +221,7 @@ private V1ConfigMap getConfigWatcherConfigMap() throws Exception {
 
 	private V1Deployment getConfigWatcherDeployment() throws Exception {
 		V1Deployment deployment = (V1Deployment) k8SUtils
-				.readYamlFromClasspath("spring-cloud-kubernetes-configuration-watcher-bus-deployment.yaml");
+				.readYamlFromClasspath("spring-cloud-kubernetes-configuration-watcher-bus-amqp-deployment.yaml");
 		return deployment;
 	}
 
@@ -232,7 +232,7 @@ private V1Service getItAppService() throws Exception {
 	}
 
 	private V1Deployment getItDeployment() throws Exception {
-		String urlString = "spring-cloud-kubernetes-configuration-watcher-it-deployment.yaml";
+		String urlString = "spring-cloud-kubernetes-configuration-watcher-it-bus-amqp-deployment.yaml";
 		V1Deployment deployment = (V1Deployment) k8SUtils.readYamlFromClasspath(urlString);
 		return deployment;
 	}

File: spring-cloud-kubernetes-test-support/src/main/java/org/springframework/cloud/kubernetes/integration/tests/commons/K8SUtils.java
Patch:
@@ -116,7 +116,7 @@ public V1Deployment createDeployment(String name, Map<String, String> selectorMa
 	}
 
 	public void waitForEndpointReady(String name, String namespace) throws Exception {
-		await().pollInterval(Duration.ofSeconds(1)).atMost(90, TimeUnit.SECONDS)
+		await().pollInterval(Duration.ofSeconds(1)).atMost(600, TimeUnit.SECONDS)
 				.until(() -> isEndpointReady(name, namespace));
 	}
 
@@ -131,7 +131,7 @@ public boolean isEndpointReady(String name, String namespace) throws ApiExceptio
 	}
 
 	public void waitForReplicationController(String name, String namespace) {
-		await().pollInterval(Duration.ofSeconds(1)).atMost(90, TimeUnit.SECONDS)
+		await().pollInterval(Duration.ofSeconds(1)).atMost(600, TimeUnit.SECONDS)
 				.until(() -> isReplicationControllerReady(name, namespace));
 	}
 
@@ -150,7 +150,7 @@ public boolean isReplicationControllerReady(String name, String namespace) throw
 	}
 
 	public void waitForDeployment(String deploymentName, String namespace) {
-		await().pollInterval(Duration.ofSeconds(1)).atMost(90, TimeUnit.SECONDS)
+		await().pollInterval(Duration.ofSeconds(1)).atMost(600, TimeUnit.SECONDS)
 				.until(() -> isDeployentReady(deploymentName, namespace));
 	}
 

File: spring-cloud-kubernetes-client-autoconfig/src/main/java/org/springframework/cloud/kubernetes/client/profile/KubernetesClientProfileEnvironmentPostProcessor.java
Patch:
@@ -22,19 +22,19 @@
 import org.springframework.cloud.kubernetes.commons.profile.AbstractKubernetesProfileEnvironmentPostProcessor;
 import org.springframework.core.env.Environment;
 
+import static io.kubernetes.client.util.Config.ENV_SERVICE_HOST;
+
 /**
  * @author Ryan Baxter
  * @author Thomas Vitale
  */
 public class KubernetesClientProfileEnvironmentPostProcessor extends AbstractKubernetesProfileEnvironmentPostProcessor {
 
-	protected static final String KUBERNETES_SERVICE_ENV_VAR = "KUBERNETES_SERVICE_HOST";
-
 	@Override
 	protected boolean isInsideKubernetes(Environment environment) {
 		CoreV1Api api = new CoreV1Api();
 		KubernetesClientPodUtils utils = new KubernetesClientPodUtils(api, environment.getProperty(NAMESPACE_PROPERTY));
-		return environment.containsProperty(KUBERNETES_SERVICE_ENV_VAR) || utils.isInsideKubernetes();
+		return environment.containsProperty(ENV_SERVICE_HOST) || utils.isInsideKubernetes();
 	}
 
 }

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/AbstractConfigProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.commons.config;
 
 /**
  * Abstraction over configuration properties.

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/ConfigMapConfigProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.commons.config;
 
 import java.util.Collections;
 import java.util.List;
@@ -137,7 +137,7 @@ public NormalizedSource normalize(String defaultName, String defaultNamespace) {
 
 	}
 
-	static class NormalizedSource {
+	public static class NormalizedSource {
 
 		private final String name;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/SecretsConfigProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.commons.config;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -169,7 +169,7 @@ public SecretsConfigProperties.NormalizedSource normalize(String defaultName, St
 
 	}
 
-	static class NormalizedSource {
+	public static class NormalizedSource {
 
 		private final String name;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/ConfigReloadProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.reload;
+package org.springframework.cloud.kubernetes.commons.config.reload;
 
 import java.time.Duration;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/ConfigurationUpdateStrategy.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.reload;
+package org.springframework.cloud.kubernetes.commons.config.reload;
 
 import java.util.Objects;
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/condition/EventReloadDetectionMode.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.reload.condition;
+package org.springframework.cloud.kubernetes.commons.config.reload.condition;
 
-import org.springframework.cloud.kubernetes.config.reload.ConfigReloadProperties.ReloadDetectionMode;
+import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.env.Environment;
@@ -38,7 +38,7 @@ public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)
 		}
 		else {
 			if (environment.getProperty("spring.cloud.kubernetes.reload.mode")
-					.equalsIgnoreCase(ReloadDetectionMode.EVENT.name())) {
+					.equalsIgnoreCase(ConfigReloadProperties.ReloadDetectionMode.EVENT.name())) {
 				return true;
 			}
 		}

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/config/reload/condition/PollingReloadDetectionMode.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.reload.condition;
+package org.springframework.cloud.kubernetes.commons.config.reload.condition;
 
-import org.springframework.cloud.kubernetes.config.reload.ConfigReloadProperties.ReloadDetectionMode;
+import org.springframework.cloud.kubernetes.commons.config.reload.ConfigReloadProperties;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
 import org.springframework.core.env.Environment;
@@ -38,7 +38,7 @@ public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)
 		}
 		else {
 			if (environment.getProperty("spring.cloud.kubernetes.reload.mode")
-					.equalsIgnoreCase(ReloadDetectionMode.POLLING.name())) {
+					.equalsIgnoreCase(ConfigReloadProperties.ReloadDetectionMode.POLLING.name())) {
 				return true;
 			}
 		}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapTestUtil.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.io.IOException;
 import java.nio.file.Files;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.util.HashMap;
 
@@ -31,7 +31,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.cloud.kubernetes.config.example.App;
+import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithActiveProfilesNameTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.util.HashMap;
 
@@ -30,13 +30,13 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.cloud.kubernetes.config.example.App;
+import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;
-import static org.springframework.cloud.kubernetes.config.ConfigMapTestUtil.readResourceFile;
+import static org.springframework.cloud.kubernetes.fabric8.config.ConfigMapTestUtil.readResourceFile;
 
 /**
  * @author Ali Shahbour

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/ConfigMapsWithProfilesNoActiveProfileTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.util.HashMap;
 
@@ -30,11 +30,11 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.cloud.kubernetes.config.example.App;
+import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
-import static org.springframework.cloud.kubernetes.config.ConfigMapTestUtil.readResourceFile;
+import static org.springframework.cloud.kubernetes.fabric8.config.ConfigMapTestUtil.readResourceFile;
 
 /**
  * @author Charles Moulliard

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/CoreTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.util.HashMap;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/HealthIndicatorTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import io.fabric8.kubernetes.client.Config;
 import io.fabric8.kubernetes.client.KubernetesClient;
@@ -27,7 +27,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.cloud.kubernetes.config.example.App;
+import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.http.MediaType;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/KubernetesConfigConfigurationTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.junit.After;
@@ -23,7 +23,7 @@
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;
-import org.springframework.cloud.kubernetes.config.reload.ConfigReloadAutoConfiguration;
+import org.springframework.cloud.kubernetes.fabric8.config.reload.ConfigReloadAutoConfiguration;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -124,7 +124,7 @@ public void kubernetesReloadEnabledButSecretAndConfigDisabled() throws Exception
 
 	private void setup(String... env) {
 		this.context = new SpringApplicationBuilder(PropertyPlaceholderAutoConfiguration.class,
-				KubernetesClientTestConfiguration.class, BootstrapConfiguration.class,
+				KubernetesClientTestConfiguration.class, Fabric8BootstrapConfiguration.class,
 				ConfigReloadAutoConfiguration.class, RefreshAutoConfiguration.class)
 						.web(org.springframework.boot.WebApplicationType.NONE).properties(env).run();
 	}

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MissingActuatorTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import org.junit.Rule;
 import org.junit.Test;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleConfigMapsTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -31,7 +31,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.cloud.kubernetes.config.example2.ExampleApp;
+import org.springframework.cloud.kubernetes.fabric8.config.example2.ExampleApp;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/MultipleSecretsTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import java.util.Base64;
 import java.util.HashMap;
@@ -33,7 +33,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.cloud.kubernetes.config.example3.MultiSecretsApp;
+import org.springframework.cloud.kubernetes.fabric8.config.example3.MultiSecretsApp;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.reactive.server.WebTestClient;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/TestApplication.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.fabric8.config;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example/App.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example;
+package org.springframework.cloud.kubernetes.fabric8.config.example;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example/GreetingController.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example;
+package org.springframework.cloud.kubernetes.fabric8.config.example;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.RequestMapping;

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example/GreetingProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example;
+package org.springframework.cloud.kubernetes.fabric8.config.example;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example/ResponseMessage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example;
+package org.springframework.cloud.kubernetes.fabric8.config.example;
 
 /**
  * @author Charles Moulliard

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example2/ExampleApp.java
Patch:
@@ -14,11 +14,12 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example2;
+package org.springframework.cloud.kubernetes.fabric8.config.example2;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.cloud.kubernetes.fabric8.config.example.App;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -27,7 +28,7 @@
 public class ExampleApp {
 
 	public static void main(String[] args) {
-		SpringApplication.run(org.springframework.cloud.kubernetes.config.example.App.class, args);
+		SpringApplication.run(App.class, args);
 	}
 
 	@RestController

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example2/ExampleAppProps.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example2;
+package org.springframework.cloud.kubernetes.fabric8.config.example2;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example3/MultiSecretsApp.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example3;
+package org.springframework.cloud.kubernetes.fabric8.config.example3;
 
 /**
  * @author Haytham Mohamed

File: spring-cloud-kubernetes-fabric8-config/src/test/java/org/springframework/cloud/kubernetes/fabric8/config/example3/MultiSecretsProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes.config.example3;
+package org.springframework.cloud.kubernetes.fabric8.config.example3;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-fabric8-autoconfig/src/main/java/org/springframework/cloud/kubernetes/fabric8/profile/Fabric8ProfileEnvironmentPostProcessor.java
Patch:
@@ -24,11 +24,13 @@
 
 public class Fabric8ProfileEnvironmentPostProcessor extends AbstractKubernetesProfileEnvironmentPostProcessor {
 
+	protected static final String KUBERNETES_SERVICE_ENV_VAR = "KUBERNETES_SERVICE_HOST";
+
 	@Override
 	protected boolean isInsideKubernetes(Environment environment) {
 		try (DefaultKubernetesClient client = new DefaultKubernetesClient()) {
 			final Fabric8PodUtils podUtils = new Fabric8PodUtils(client);
-			return podUtils.isInsideKubernetes();
+			return environment.containsProperty(KUBERNETES_SERVICE_ENV_VAR) || podUtils.isInsideKubernetes();
 		}
 	}
 

File: spring-cloud-kubernetes-loadbalancer/src/main/java/org/springframework/cloud/kubernetes/loadbalancer/KubernetesLoadBalancerAutoConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.loadbalancer.annotation.LoadBalancerClients;
 import org.springframework.context.annotation.Bean;
@@ -30,6 +31,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties(KubernetesLoadBalancerProperties.class)
+@ConditionalOnKubernetesEnabled
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.loadbalancer.enabled", matchIfMissing = true)
 @LoadBalancerClients(defaultConfiguration = KubernetesLoadBalancerClientConfiguration.class)
 public class KubernetesLoadBalancerAutoConfiguration {

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.logging.LogFactory;
 
 import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
+import org.springframework.boot.actuate.autoconfigure.info.ConditionalOnEnabledInfoContributor;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -166,6 +167,7 @@ public KubernetesHealthIndicator kubernetesHealthIndicator(PodUtils podUtils) {
 		}
 
 		@Bean
+		@ConditionalOnEnabledInfoContributor("kubernetes")
 		public KubernetesInfoContributor kubernetesInfoContributor(PodUtils podUtils) {
 			return new KubernetesInfoContributor(podUtils);
 		}

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -89,6 +89,7 @@ public Config kubernetesClientConfig(KubernetesClientProperties kubernetesClient
 				.withUsername(or(kubernetesClientProperties.getUsername(), base.getUsername()))
 				.withPassword(or(kubernetesClientProperties.getPassword(), base.getPassword()))
 
+				.withOauthToken(or(kubernetesClientProperties.getOauthToken(), base.getOauthToken()))
 				.withCaCertFile(or(kubernetesClientProperties.getCaCertFile(), base.getCaCertFile()))
 				.withCaCertData(or(kubernetesClientProperties.getCaCertData(), base.getCaCertData()))
 

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/ConditionalOnKubernetesEnabled.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019-2019 the original author or authors.
+ * Copyright 2019-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes;
+package org.springframework.cloud.kubernetes.commons;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: spring-cloud-kubernetes-commons/src/main/java/org/springframework/cloud/kubernetes/commons/KubernetesClientProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013-2019 the original author or authors.
+ * Copyright 2013-2020 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.cloud.kubernetes;
+package org.springframework.cloud.kubernetes.commons;
 
 import java.time.Duration;
 

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/BootstrapConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.kubernetes.KubernetesAutoConfiguration;
+import org.springframework.cloud.kubernetes.commons.KubernetesCommonsAutoConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
@@ -40,7 +41,7 @@
 public class BootstrapConfiguration {
 
 	@Configuration(proxyBeanMethods = false)
-	@Import(KubernetesAutoConfiguration.class)
+	@Import({ KubernetesCommonsAutoConfiguration.class, KubernetesAutoConfiguration.class })
 	@EnableConfigurationProperties({ ConfigMapConfigProperties.class, SecretsConfigProperties.class })
 	protected static class KubernetesPropertySourceConfiguration {
 

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/KubernetesAutoConfigurationTests.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.kubernetes.commons.KubernetesClientProperties;
 import org.springframework.cloud.kubernetes.example.App;
 import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.test.context.junit4.SpringRunner;
@@ -64,6 +65,7 @@ public void beansAreCreated() {
 		assertThat(context.getBeanNamesForType(StandardPodUtils.class)).hasSize(1);
 		assertThat(context.getBeanNamesForType(KubernetesHealthIndicator.class)).hasSize(1);
 		assertThat(context.getBeanNamesForType(KubernetesInfoContributor.class)).hasSize(1);
+		assertThat(context.getBeanNamesForType(KubernetesClientProperties.class)).hasSize(1);
 
 		Config config = context.getBean(Config.class);
 		assertThat(config.getPassword()).isEqualTo("mypassword");

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -25,8 +25,8 @@
 import org.springframework.cloud.client.ConditionalOnBlockingDiscoveryEnabled;
 import org.springframework.cloud.client.ConditionalOnDiscoveryEnabled;
 import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.KubernetesAutoConfiguration;
+import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.registry.KubernetesRegistration;
 import org.springframework.cloud.kubernetes.registry.KubernetesServiceRegistry;
 import org.springframework.context.annotation.Bean;

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/reactive/KubernetesReactiveDiscoveryClientAutoConfiguration.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties;
 import org.springframework.cloud.client.discovery.health.reactive.ReactiveDiscoveryClientHealthIndicator;
 import org.springframework.cloud.client.discovery.simple.reactive.SimpleReactiveDiscoveryClientAutoConfiguration;
-import org.springframework.cloud.kubernetes.ConditionalOnKubernetesEnabled;
+import org.springframework.cloud.kubernetes.commons.ConditionalOnKubernetesEnabled;
 import org.springframework.cloud.kubernetes.discovery.ConditionalOnKubernetesDiscoveryEnabled;
 import org.springframework.cloud.kubernetes.discovery.KubernetesClientServicesFunction;
 import org.springframework.cloud.kubernetes.discovery.KubernetesDiscoveryClientAutoConfiguration;

File: spring-cloud-kubernetes-examples/kubernetes-loadbalancer-example/name-service/src/main/java/org/springframework/cloud/kubernetes/examples/NameController.java
Patch:
@@ -51,9 +51,9 @@ public String ribbonPing() {
 	 */
 	@GetMapping("/name")
 	public Mono<String> getName(
-		@RequestParam(value = "delay", defaultValue = "0") int delayValue) {
+			@RequestParam(value = "delay", defaultValue = "0") int delayValue) {
 		LOG.info(String.format("Returning a name '%s' with a delay '%d'", hostName,
-			delayValue));
+				delayValue));
 		delay(delayValue);
 		return Mono.just(hostName);
 	}

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -130,7 +130,7 @@ public Config kubernetesClientConfig(
 						base.getHttpsProxy()))
 				.withProxyUsername(or(kubernetesClientProperties.getProxyUsername(),
 						base.getProxyUsername()))
-				.withPassword(or(kubernetesClientProperties.getProxyPassword(),
+				.withProxyPassword(or(kubernetesClientProperties.getProxyPassword(),
 						base.getProxyPassword()))
 				.withNoProxy(
 						or(kubernetesClientProperties.getNoProxy(), base.getNoProxy()))

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/LoadBalancerAllNamespacesTests.java
Patch:
@@ -34,7 +34,7 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 @TestPropertySource(properties = "spring.cloud.kubernetes.discovery.all-namespaces=true")
 @EnableKubernetesMockClient(crud = true)
-public class LoadBalancerAllNamespacesTests {
+class LoadBalancerAllNamespacesTests {
 
 	@Autowired
 	RestTemplate restTemplate;

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/LoadBalancerTests.java
Patch:
@@ -32,7 +32,7 @@
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 @EnableKubernetesMockClient(crud = true)
-public class LoadBalancerTests {
+class LoadBalancerTests {
 
 	@Autowired
 	RestTemplate restTemplate;

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/LoadBalancerWithServiceTests.java
Patch:
@@ -45,7 +45,7 @@
 @TestPropertySource(properties = { "spring.cloud.kubernetes.loadbalancer.mode=SERVICE",
 		"spring.cloud.kubernetes.loadbalancer.enabled=true" })
 @ExtendWith(HoverflyExtension.class)
-public class LoadBalancerWithServiceTests {
+class LoadBalancerWithServiceTests {
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(LoadBalancerWithServiceTests.class);
 

File: spring-cloud-kubernetes-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/KubernetesServiceInstanceMapperTests.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.cloud.kubernetes.discovery.KubernetesDiscoveryProperties;
 import org.springframework.cloud.kubernetes.discovery.KubernetesServiceInstance;
 
-public class KubernetesServiceInstanceMapperTests {
+class KubernetesServiceInstanceMapperTests {
 
 	@Test
 	public void testMapperSimple() {

File: spring-cloud-kubernetes-loadbalancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/KubernetesServiceListSupplierTests.java
Patch:
@@ -44,7 +44,7 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
-public class KubernetesServiceListSupplierTests {
+class KubernetesServiceListSupplierTests {
 
 	@Mock
 	Environment environment;

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/LoadBalancerAllNamespacesTests.java
Patch:
@@ -45,7 +45,7 @@ public class LoadBalancerAllNamespacesTests {
 	static KubernetesClient client;
 
 	@BeforeAll
-	public static void setup() {
+	static void setup() {
 		System.setProperty(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY,
 				client.getConfiguration().getMasterUrl());
 		System.setProperty(Config.KUBERNETES_TRUST_CERT_SYSTEM_PROPERTY, "true");
@@ -57,7 +57,7 @@ public static void setup() {
 	}
 
 	@Test
-	public void testLoadBalancerDifferentNamespace() {
+	void testLoadBalancerDifferentNamespace() {
 		createTestData("service-b", "b");
 		String response = restTemplate.getForObject("http://service-b/greeting",
 				String.class);

File: spring-cloud-kubernetes-integration-tests/load-balancer/src/test/java/org/springframework/cloud/kubernetes/loadbalancer/LoadBalancerTests.java
Patch:
@@ -43,7 +43,7 @@ public class LoadBalancerTests {
 	static KubernetesClient client;
 
 	@BeforeAll
-	public static void setup() {
+	static void setup() {
 		System.setProperty(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY,
 				client.getConfiguration().getMasterUrl());
 		System.setProperty(Config.KUBERNETES_TRUST_CERT_SYSTEM_PROPERTY, "true");
@@ -55,7 +55,7 @@ public static void setup() {
 	}
 
 	@Test
-	public void testLoadBalancerSameNamespace() {
+	void testLoadBalancerSameNamespace() {
 		createTestData("service-a", "test");
 		String response = restTemplate.getForObject("http://service-a/greeting",
 				String.class);
@@ -64,7 +64,7 @@ public void testLoadBalancerSameNamespace() {
 	}
 
 	@Test
-	public void testLoadBalancerDifferentNamespace() {
+	void testLoadBalancerDifferentNamespace() {
 		createTestData("service-b", "b");
 		Assertions.assertThrows(IllegalStateException.class, () -> restTemplate
 				.getForObject("http://service-b/greeting", String.class));

File: spring-cloud-kubernetes-controllers/spring-cloud-kubernetes-configuration-watcher/src/test/java/org/springframework/cloud/kubernetes/configuration/watcher/HttpBasedConfigurationWatchChangeDetectorTests.java
Patch:
@@ -99,7 +99,7 @@ public void setup() {
 		fooEndpointPort.setPort(wireMockRule.port());
 		List<ServiceInstance> instances = new ArrayList<>();
 		KubernetesServiceInstance fooServiceInstance = new KubernetesServiceInstance(
-				"foo", "foo", fooEndpointAddress, fooEndpointPort, new HashMap<>(),
+				"foo", "foo", fooEndpointAddress.getIp(), fooEndpointPort.getPort(), new HashMap<>(),
 				false);
 		instances.add(fooServiceInstance);
 		when(reactiveDiscoveryClient.getInstances(eq("foo")))
@@ -185,7 +185,7 @@ public void triggerConfigMapRefreshWithAnnotationActuatorPath() {
 		fooEndpointPort.setPort(wireMockRule.port());
 		List<ServiceInstance> instances = new ArrayList<>();
 		KubernetesServiceInstance fooServiceInstance = new KubernetesServiceInstance(
-				"foo", "foo", fooEndpointAddress, fooEndpointPort, metadata, false);
+				"foo", "foo", fooEndpointAddress.getIp(), fooEndpointPort.getPort(), metadata, false);
 		instances.add(fooServiceInstance);
 		when(reactiveDiscoveryClient.getInstances(eq("foo")))
 				.thenReturn(Flux.fromIterable(instances));
@@ -211,7 +211,7 @@ public void triggerSecretRefreshWithAnnotationActuatorPath() {
 		fooEndpointPort.setPort(wireMockRule.port());
 		List<ServiceInstance> instances = new ArrayList<>();
 		KubernetesServiceInstance fooServiceInstance = new KubernetesServiceInstance(
-				"foo", "foo", fooEndpointAddress, fooEndpointPort, metadata, false);
+				"foo", "foo", fooEndpointAddress.getIp(), fooEndpointPort.getPort(), metadata, false);
 		instances.add(fooServiceInstance);
 		when(reactiveDiscoveryClient.getInstances(eq("foo")))
 				.thenReturn(Flux.fromIterable(instances));

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonFallbackTest.java
Patch:
@@ -100,7 +100,7 @@ public static Endpoints newEndpoint(String name, String namespace,
 				.addNewAddress()
 					.withIp(mockServer.getHostName())
 				.endAddress()
-				.addNewPort("http", "http_tcp",mockServer.getPort(), "http")
+				.addNewPort("http", "http_tcp", mockServer.getPort(), "http")
 				.endSubset()
 			.build();
 		// @formatter:on

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/KubernetesConfigTestBase.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.cloud.kubernetes.config;
 
 import io.fabric8.kubernetes.client.KubernetesClient;

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2019 the original author or authors.
+ * Copyright 2013-2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.cloud.kubernetes.config.reload;
 
 import java.util.HashMap;

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonFallbackTest.java
Patch:
@@ -100,7 +100,7 @@ public static Endpoints newEndpoint(String name, String namespace,
 				.addNewAddress()
 					.withIp(mockServer.getHostName())
 				.endAddress()
-				.addNewPort("http", "http_tcp",mockServer.getPort(), "http")
+				.addNewPort("http", "http_tcp", mockServer.getPort(), "http")
 				.endSubset()
 			.build();
 		// @formatter:on

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/PodUtils.java
Patch:
@@ -29,7 +29,7 @@ public interface PodUtils {
 
 	/**
 	 * @return A supplier of the currentPod {@link Pod}. The supplier will hold the
-	 * currentPod {@Pod} if inside Kubernetes or false, otherwise.
+	 * currentPod {@link Pod} if inside Kubernetes or false, otherwise.
 	 */
 	Supplier<Pod> currentPod();
 

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -42,8 +42,9 @@ public class KubernetesCatalogWatchAutoConfiguration {
 	@ConditionalOnProperty(
 			name = "spring.cloud.kubernetes.discovery.catalog-services-watch.enabled",
 			matchIfMissing = true)
-	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client) {
-		return new KubernetesCatalogWatch(client);
+	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client,
+			KubernetesDiscoveryProperties properties) {
+		return new KubernetesCatalogWatch(client, properties);
 	}
 
 }

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -42,8 +42,9 @@ public class KubernetesCatalogWatchAutoConfiguration {
 	@ConditionalOnProperty(
 			name = "spring.cloud.kubernetes.discovery.catalog-services-watch.enabled",
 			matchIfMissing = true)
-	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client) {
-		return new KubernetesCatalogWatch(client);
+	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client,
+			KubernetesDiscoveryProperties properties) {
+		return new KubernetesCatalogWatch(client, properties);
 	}
 
 }

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigurationChangeDetector.java
Patch:
@@ -99,7 +99,7 @@ protected boolean changed(List<? extends MapPropertySource> l1,
 			List<? extends MapPropertySource> l2) {
 
 		if (l1.size() != l2.size()) {
-			this.log.warn("The current number of Confimap PropertySources does not match "
+			this.log.warn("The current number of ConfigMap PropertySources does not match "
 					+ "the ones loaded from the Kubernetes - No reload will take place");
 			return false;
 		}

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -42,8 +42,9 @@ public class KubernetesCatalogWatchAutoConfiguration {
 	@ConditionalOnProperty(
 			name = "spring.cloud.kubernetes.discovery.catalog-services-watch.enabled",
 			matchIfMissing = true)
-	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client) {
-		return new KubernetesCatalogWatch(client);
+	public KubernetesCatalogWatch kubernetesCatalogWatch(KubernetesClient client,
+			KubernetesDiscoveryProperties properties) {
+		return new KubernetesCatalogWatch(client, properties);
 	}
 
 }

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatchTest.java
Patch:
@@ -57,6 +57,9 @@ public class KubernetesCatalogWatchTest {
 	@Mock
 	private KubernetesClient kubernetesClient;
 
+	@Mock
+	private KubernetesDiscoveryProperties kubernetesDiscoveryProperties;
+
 	@Mock
 	private ApplicationEventPublisher applicationEventPublisher;
 

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -47,6 +47,7 @@
  * A {@link PropertySourceLocator} that uses config maps.
  *
  * @author Ioannis Canellos
+ * @author Michael Moudatsos
  */
 @Order(0)
 public class ConfigMapPropertySourceLocator implements PropertySourceLocator {
@@ -133,7 +134,7 @@ else if (filename.endsWith(".yml") || filename.endsWith(".yaml")) {
 	}
 
 	private void addPropertySourceIfNeeded(
-			Function<String, Map<String, String>> contentToMapFunction, String content,
+			Function<String, Map<String, Object>> contentToMapFunction, String content,
 			String name, CompositePropertySource composite) {
 
 		Map<String, Object> map = new HashMap<>();

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/profile/KubernetesProfileEnvironmentPostProcessor.java
Patch:
@@ -43,9 +43,9 @@ public class KubernetesProfileEnvironmentPostProcessor
 	public void postProcessEnvironment(ConfigurableEnvironment environment,
 			SpringApplication application) {
 
-		final String enabledStr = environment
-				.getProperty("spring.cloud.kubernetes.enabled", "true");
-		if ("false".equals(enabledStr.toLowerCase())) {
+		final boolean kubernetesEnabled = environment
+				.getProperty("spring.cloud.kubernetes.enabled", Boolean.class, true);
+		if (!kubernetesEnabled) {
 			return;
 		}
 

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesServiceInstanceTests.java
Patch:
@@ -37,7 +37,7 @@ private KubernetesServiceInstance assertServiceInstance(boolean secure) {
 		EndpointPort port = new EndpointPort();
 		port.setPort(8080);
 		KubernetesServiceInstance instance = new KubernetesServiceInstance("123",
-			"myservice", address, port, Collections.emptyMap(), secure);
+				"myservice", address, port, Collections.emptyMap(), secure);
 
 		assertThat(instance.getInstanceId()).isEqualTo("123");
 		assertThat(instance.getServiceId()).isEqualTo("myservice");

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/BootstrapConfiguration.java
Patch:
@@ -34,12 +34,12 @@
  *
  * @author Ioannis Canellos
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
 @ConditionalOnClass({ ConfigMap.class, Secret.class })
 public class BootstrapConfiguration {
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	@Import(KubernetesAutoConfiguration.class)
 	@EnableConfigurationProperties({ ConfigMapConfigProperties.class,
 			SecretsConfigProperties.class })

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @author Nicolla Ferraro
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
 @ConditionalOnClass(EndpointAutoConfiguration.class)
 @AutoConfigureAfter({ InfoEndpointAutoConfiguration.class,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/KubernetesConfigConfigurationTest.java
Patch:
@@ -73,7 +73,7 @@ private void setup(String... env) {
 						.properties(env).run();
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	static class KubernetesClientTestConfiguration {
 
 		@Bean

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/MissingActuatorTest.java
Patch:
@@ -58,7 +58,7 @@ public void unknownClassProtected() {
 		}
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	@EnableAutoConfiguration
 	static class Config {
 

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -40,7 +40,7 @@
  * @author Eddú Meléndez
  * @author Tim Ysewyn
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnKubernetesEnabled
 @EnableConfigurationProperties(KubernetesClientProperties.class)
 public class KubernetesAutoConfiguration {
@@ -155,7 +155,7 @@ public StandardPodUtils kubernetesPodUtils(KubernetesClient client) {
 		return new StandardPodUtils(client);
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	@ConditionalOnClass(HealthIndicator.class)
 	protected static class KubernetesActuatorConfiguration {
 

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatchAutoConfiguration.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @author Tim Ysewyn
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnProperty(name = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
 @AutoConfigureAfter({ KubernetesAutoConfiguration.class })

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -38,7 +38,7 @@
  * @author Mauricio Salatino
  * @author Tim Ysewyn
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnKubernetesEnabled
 @AutoConfigureBefore({ SimpleDiscoveryClientAutoConfiguration.class,
@@ -92,7 +92,7 @@ public KubernetesDiscoveryProperties getKubernetesDiscoveryProperties() {
 		return new KubernetesDiscoveryProperties();
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	@ConditionalOnBlockingDiscoveryEnabled
 	@ConditionalOnKubernetesDiscoveryEnabled
 	public static class KubernetesDiscoveryClientConfiguration {

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfiguration.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author Zhanwei Wang
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty("spring.cloud.config.discovery.enabled")
 @Import({ KubernetesAutoConfiguration.class,
 		KubernetesDiscoveryClientAutoConfiguration.class })

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/reactive/KubernetesReactiveDiscoveryClientAutoConfiguration.java
Patch:
@@ -43,7 +43,7 @@
  *
  * @author Tim Ysewyn
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnDiscoveryEnabled
 @ConditionalOnReactiveDiscoveryEnabled
 @ConditionalOnKubernetesEnabled

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogServicesWatchConfigurationTest.java
Patch:
@@ -78,7 +78,7 @@ private void setup(String... env) {
 						.web(WebApplicationType.NONE).properties(env).run();
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	static class KubernetesClientTestConfiguration {
 
 		@Bean

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfigurationPropertiesTests.java
Patch:
@@ -82,7 +82,7 @@ private void setup(String... env) {
 						.properties(env).run();
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	static class KubernetesClientTestConfiguration {
 
 		@Bean

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -89,7 +89,7 @@ private void setup(String... env) {
 		this.context.refresh();
 	}
 
-	@Configuration
+	@Configuration(proxyBeanMethods = false)
 	protected static class EnvironmentKnobbler {
 
 		@Bean

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/DummyConfig.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConfigurationProperties(prefix = "dummy")
 public class DummyConfig {
 

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/MyConfig.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
 
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConfigurationProperties(prefix = "bean")
 public class MyConfig {
 

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/IstioAutoConfiguration.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author Mauricio Salatino
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.cloud.istio.enabled", matchIfMissing = true)
 public class IstioAutoConfiguration {
 

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/IstioBootstrapConfiguration.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author Mauricio Salatino
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.cloud.istio.enabled", matchIfMissing = true)
 @EnableConfigurationProperties(IstioClientProperties.class)
 public class IstioBootstrapConfiguration {

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/IstioClientProperties.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Mauricio Salatino
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConfigurationProperties("spring.cloud.istio.client")
 public class IstioClientProperties {
 

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderAutoConfiguration.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * @author Gytis Trikleris
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties(LeaderProperties.class)
 @ConditionalOnBean(KubernetesClient.class)
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.leader.enabled",

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesRibbonClientConfiguration.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author Ioannis Canellos
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties(KubernetesRibbonProperties.class)
 public class KubernetesRibbonClientConfiguration {
 

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/RibbonKubernetesAutoConfiguration.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author Ioannis Canellos
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
 @ConditionalOnBean(SpringClientFactory.class)
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.ribbon.enabled",

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientTest.java
Patch:
@@ -183,7 +183,7 @@ public void getInstancesShouldBeAbleToHandleEndpointsSingleAddressAndMultiplePor
 						.addNewPort("http", 80, "TCP").endSubset().build())
 				.once();
 
-		mockServer.expect().get().withPath("/api/v1/services/endpoint")
+		mockServer.expect().get().withPath("/api/v1/namespaces/test/services/endpoint")
 				.andReturn(200, new ServiceBuilder().withNewMetadata()
 						.withName("endpoint").withLabels(new HashMap<String, String>() {
 							{
@@ -215,7 +215,7 @@ public void getInstancesShouldBeAbleToHandleEndpointsMultipleAddresses() {
 						.endAddress().addNewPort("https", 443, "TCP").endSubset().build())
 				.once();
 
-		mockServer.expect().get().withPath("/api/v1/services/endpoint")
+		mockServer.expect().get().withPath("/api/v1/namespaces/test/services/endpoint")
 				.andReturn(200, new ServiceBuilder().withNewMetadata()
 						.withName("endpoint").withLabels(new HashMap<String, String>() {
 							{

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -37,6 +38,7 @@
  * Auto configuration for Kubernetes.
  *
  * @author Ioannis Canellos
+ * @author Eddú Meléndez
  */
 @Configuration
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
@@ -158,6 +160,7 @@ public StandardPodUtils kubernetesPodUtils(KubernetesClient client) {
 	protected static class KubernetesActuatorConfiguration {
 
 		@Bean
+		@ConditionalOnEnabledHealthIndicator("kubernetes")
 		public KubernetesHealthIndicator kubernetesHealthIndicator(PodUtils podUtils) {
 			return new KubernetesHealthIndicator(podUtils);
 		}

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsFromFilePathsTests.java
Patch:
@@ -85,6 +85,7 @@ public static void setUpBeforeClass() throws IOException {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		Files.createDirectories(Paths.get(FILES_ROOT_PATH));
 		createFileWithContent(FIRST_FILE_NAME_FULL_PATH,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsMixedTests.java
Patch:
@@ -77,6 +77,7 @@ public static void setUpBeforeClass() throws IOException {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		Files.createDirectories(Paths.get(FILES_ROOT_PATH));
 		ConfigMapTestUtil.createFileWithContent(FILE_NAME_FULL_PATH,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsTests.java
Patch:
@@ -72,6 +72,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
 		data.put("bean.greeting", "Hello ConfigMap, %s!");

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithActiveProfilesNameTests.java
Patch:
@@ -75,6 +75,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
 		data.put("application.yml", readResourceFile("application-with-profiles.yaml"));

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfileExpressionTests.java
Patch:
@@ -69,6 +69,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
 		data.put("application.yml", readResourceFile("application-with-profiles.yaml"));

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfilesNoActiveProfileTests.java
Patch:
@@ -70,6 +70,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
 		data.put("application.yml", readResourceFile("application-with-profiles.yaml"));

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfilesTests.java
Patch:
@@ -74,6 +74,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
 		data.put("application.yml", readResourceFile("application-with-profiles.yaml"));

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithoutProfilesTests.java
Patch:
@@ -68,6 +68,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		HashMap<String, String> data = new HashMap<>();
 		data.put("application.yml",

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/CoreTest.java
Patch:
@@ -88,6 +88,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYKUBECONFIG_SYSTEM_PROPERTY, "false");
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 	}
 
 	@Test

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/HealthIndicatorTest.java
Patch:
@@ -63,6 +63,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 	}
 
 	@Test

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/MultipleConfigMapsTests.java
Patch:
@@ -65,6 +65,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		createConfigmap(server, "s1", "defnamespace", new HashMap<String, String>() {
 			{

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/MultipleSecretsTests.java
Patch:
@@ -76,6 +76,7 @@ public static void setUpBeforeClass() {
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY,
 				DEFAULT_NAMESPACE);
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		Map<String, String> metadata1 = new HashMap() {
 			{

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/SecretsPropertySourceTest.java
Patch:
@@ -69,6 +69,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, NAMESPACE);
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		Secret secret = new SecretBuilder().withNewMetadata()
 				.withLabels(singletonMap("foo", "bar")).endMetadata()

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/HealthIndicatorTest.java
Patch:
@@ -63,6 +63,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 	}
 
 	@Test

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/InfoContributorTest.java
Patch:
@@ -62,6 +62,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 	}
 
 	@Test

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientTest.java
Patch:
@@ -57,6 +57,7 @@ public void setup() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYKUBECONFIG_SYSTEM_PROPERTY, "false");
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 	}
 
 	@Test

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonFallbackTest.java
Patch:
@@ -82,6 +82,7 @@ public static void setUpBefore() throws Exception {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYKUBECONFIG_SYSTEM_PROPERTY, "false");
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		mockEndpoint = new DefaultMockServer(false);
 		mockEndpoint.start();

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonTest.java
Patch:
@@ -75,6 +75,7 @@ public static void setUpBefore() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYKUBECONFIG_SYSTEM_PROPERTY, "false");
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		// Configured
 		server.expect().get().withPath("/api/v1/namespaces/testns/endpoints/testapp")

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonWithServiceModeTest.java
Patch:
@@ -83,6 +83,7 @@ public static void setUpBefore() {
 		System.setProperty(Config.KUBERNETES_AUTH_TRYKUBECONFIG_SYSTEM_PROPERTY, "false");
 		System.setProperty(Config.KUBERNETES_AUTH_TRYSERVICEACCOUNT_SYSTEM_PROPERTY,
 				"false");
+		System.setProperty(Config.KUBERNETES_HTTP2_DISABLE, "true");
 
 		// Configured
 		server.expect().get().withPath("/api/v1/namespaces/testns/services/testapp")

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/profile/KubernetesProfileEnvironmentPostProcessor.java
Patch:
@@ -43,8 +43,8 @@ public class KubernetesProfileEnvironmentPostProcessor
 	public void postProcessEnvironment(ConfigurableEnvironment environment,
 			SpringApplication application) {
 
-		final String enabledStr = environment.getProperty("spring.cloud.kubernetes.enabled", "false");
-		if ("true".equals(enabledStr.toLowerCase())) {
+		final String enabledStr = environment.getProperty("spring.cloud.kubernetes.enabled", "true");
+		if ("false".equals(enabledStr.toLowerCase())) {
 			return;
 		}
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsFromFilePathsTests.java
Patch:
@@ -44,10 +44,10 @@
 		properties = { "spring.application.name=configmap-path-example",
 				"spring.cloud.kubernetes.config.enableApi=false",
 				"spring.cloud.kubernetes.config.paths="
-						+ ConfigMapsFromFilePathsSpringBootTest.FIRST_FILE_NAME_FULL_PATH
+						+ ConfigMapsFromFilePathsTests.FIRST_FILE_NAME_FULL_PATH
 						+ ","
-						+ ConfigMapsFromFilePathsSpringBootTest.SECOND_FILE_NAME_FULL_PATH })
-public class ConfigMapsFromFilePathsSpringBootTest {
+						+ ConfigMapsFromFilePathsTests.SECOND_FILE_NAME_FULL_PATH })
+public class ConfigMapsFromFilePathsTests {
 
 	protected static final String FILES_ROOT_PATH = "/tmp/scktests";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsMixedTests.java
Patch:
@@ -45,11 +45,11 @@
 		classes = App.class,
 		properties = {
 				"spring.application.name="
-						+ ConfigMapsMixedSpringBootTest.APPLICATION_NAME,
+						+ ConfigMapsMixedTests.APPLICATION_NAME,
 				"spring.cloud.kubernetes.config.enableApi=true",
 				"spring.cloud.kubernetes.config.paths="
-						+ ConfigMapsMixedSpringBootTest.FILE_NAME_FULL_PATH })
-public class ConfigMapsMixedSpringBootTest {
+						+ ConfigMapsMixedTests.FILE_NAME_FULL_PATH })
+public class ConfigMapsMixedTests {
 
 	protected static final String FILES_ROOT_PATH = "/tmp/scktests";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsTests.java
Patch:
@@ -45,7 +45,7 @@
 		classes = App.class, properties = { "spring.application.name=configmap-example",
 				"spring.cloud.kubernetes.reload.enabled=false" })
 @AutoConfigureWebTestClient
-public class ConfigMapsSpringBootTest {
+public class ConfigMapsTests {
 
 	private static final String APPLICATION_NAME = "configmap-example";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithActiveProfilesNameTests.java
Patch:
@@ -47,7 +47,7 @@
 		"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
-public class ConfigMapsWithActiveProfilesNameSpringBootTest {
+public class ConfigMapsWithActiveProfilesNameTests {
 
 	private static final String APPLICATION_NAME = "configmap-with-active-profile-name-example";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfileExpressionTests.java
Patch:
@@ -47,7 +47,7 @@
 				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles({ "production", "us-east" })
 @AutoConfigureWebTestClient
-public class ConfigMapsWithProfileExpressionSpringBootTest {
+public class ConfigMapsWithProfileExpressionTests {
 
 	@ClassRule
 	public static KubernetesServer server = new KubernetesServer();

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfilesNoActiveProfileTests.java
Patch:
@@ -46,7 +46,7 @@
 				"spring.application.name=configmap-with-profile-no-active-profiles-example",
 				"spring.cloud.kubernetes.reload.enabled=false" })
 @AutoConfigureWebTestClient
-public class ConfigMapsWithProfilesNoActiveProfileSpringBootTest {
+public class ConfigMapsWithProfilesNoActiveProfileTests {
 
 	private static final String APPLICATION_NAME = "configmap-with-profile-no-active-profiles-example";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfilesTests.java
Patch:
@@ -47,7 +47,7 @@
 				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
-public class ConfigMapsWithProfilesSpringBootTest {
+public class ConfigMapsWithProfilesTests {
 
 	private static final String APPLICATION_NAME = "configmap-with-profile-example";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithoutProfilesTests.java
Patch:
@@ -44,7 +44,7 @@
 				"spring.cloud.kubernetes.reload.enabled=false" })
 @ActiveProfiles("development")
 @AutoConfigureWebTestClient
-public class ConfigMapsWithoutProfilesSpringBootTest {
+public class ConfigMapsWithoutProfilesTests {
 
 	private static final String APPLICATION_NAME = "configmap-without-profile-example";
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/MultipleConfigMapsTests.java
Patch:
@@ -43,7 +43,7 @@
 		classes = ExampleApp.class,
 		properties = { "spring.cloud.bootstrap.name=multiplecms" })
 @AutoConfigureWebTestClient
-public class MultipleConfigMapsSpringBootTest {
+public class MultipleConfigMapsTests {
 
 	@ClassRule
 	public static KubernetesServer server = new KubernetesServer();

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderAutoConfiguration.java
Patch:
@@ -41,7 +41,8 @@
 @Configuration
 @EnableConfigurationProperties(LeaderProperties.class)
 @ConditionalOnBean(KubernetesClient.class)
-@ConditionalOnProperty(value = "spring.cloud.kubernetes.leader.enabled", matchIfMissing = true)
+@ConditionalOnProperty(value = "spring.cloud.kubernetes.leader.enabled",
+		matchIfMissing = true)
 public class LeaderAutoConfiguration {
 
 	@Bean

File: spring-cloud-kubernetes-integration-tests/discovery/tests/src/test/java/org/springframework/cloud/kubernetes/it/ServicesIT.java
Patch:
@@ -41,7 +41,7 @@ public class ServicesIT {
 	@Test
 	public void testServicesEndpoint() {
 		given().baseUri(String.format("%s://%s:%d", PROTOCOL, HOST, PORT)).get("services")
-				.then().statusCode(200).body(new StringContains("service-a") {
+				.then().statusCode(200).body(new StringContains(false, "service-a") {
 					@Override
 					protected boolean evalSubstringOf(String s) {
 						return s.contains("service-a") && s.contains("service-b");

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsTest.java
Patch:
@@ -61,7 +61,7 @@ public void testConfigMapGet() {
 		KubernetesClient client = this.server.getClient();
 		ConfigMapList configMapList = client.configMaps().inNamespace("ns2").list();
 		assertThat(configMapList).isNotNull();
-		assertThat(configMapList.getAdditionalProperties().size()).isEqualTo(1);
+		assertThat(configMapList.getAdditionalProperties()).containsKey("data");
 		@SuppressWarnings("unchecked")
 		Map<String, String> data = (Map<String, String>) configMapList
 				.getAdditionalProperties().get("data");

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsTest.java
Patch:
@@ -61,7 +61,7 @@ public void testConfigMapGet() {
 		KubernetesClient client = this.server.getClient();
 		ConfigMapList configMapList = client.configMaps().inNamespace("ns2").list();
 		assertThat(configMapList).isNotNull();
-		assertThat(configMapList.getAdditionalProperties().size()).isEqualTo(1);
+		assertThat(configMapList.getAdditionalProperties()).containsKey("data");
 		@SuppressWarnings("unchecked")
 		Map<String, String> data = (Map<String, String>) configMapList
 				.getAdditionalProperties().get("data");

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/registry/KubernetesAutoServiceRegistration.java
Patch:
@@ -37,7 +37,7 @@
  * @author Mauricio Salatino
  */
 @Deprecated
-//TODO Remove this class in 2.x as it is not used or necessary in Kubernetes
+// TODO Remove this class in 2.x as it is not used or necessary in Kubernetes
 public class KubernetesAutoServiceRegistration
 		implements AutoServiceRegistration, SmartLifecycle, Ordered {
 

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -69,7 +69,7 @@ public void onWhenRequested() throws Exception {
 		verify(client, atLeast(2)).getInstances("configserver");
 		ConfigClientProperties locator = this.context
 				.getBean(ConfigClientProperties.class);
-		assertEquals("https://fake:8888/", locator.getUri()[0]);
+		assertEquals("http://fake:8888/", locator.getUri()[0]);
 	}
 
 	private void setup(String... env) {

File: .mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -8,7 +8,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 
-  http://www.apache.org/licenses/LICENSE-2.0
+  https://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/AbstractConfigProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/BootstrapConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapConfigProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySource.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/Constants.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/KubernetesPropertySource.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/PropertySourceUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/SecretsConfigProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/SecretsPropertySource.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/SecretsPropertySourceLocator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigurationChangeDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigurationUpdateStrategy.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/EventBasedConfigurationChangeDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/PollingConfigurationChangeDetector.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapTestUtil.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsFromFilePathsSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsMixedSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfileExpressionSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfilesNoActiveProfileSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithProfilesSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsWithoutProfilesSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/CoreTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/HealthIndicatorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/KubernetesConfigConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/MissingActuatorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/MultipleConfigMapsSpringBootTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/SecretsPropertySourceTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/TestApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example/App.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example/GreetingController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example/GreetingProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example/ResponseMessage.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example2/ExampleApp.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example2/ExampleAppProps.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesClientProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesHealthIndicator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesInfoContributor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/LazilyInstantiate.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/PodUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/StandardPodUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/profile/KubernetesProfileEnvironmentPostProcessor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/HealthIndicatorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/InfoContributorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/LazilyInstantiateTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/StandardPodUtilsTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-core/src/test/java/org/springframework/cloud/kubernetes/example/App.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/DefaultIsServicePortSecureResolver.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatch.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesClientServicesFunction.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClient.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesServiceInstance.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/registry/KubernetesAutoServiceRegistration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/registry/KubernetesRegistration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/registry/KubernetesServiceRegistry.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/DefaultIsServicePortSecureResolverTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogServicesWatchConfigurationTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatchTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfigurationPropertiesTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfigurationTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientFilterMetadataTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientFilterTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/greeting-service/src/main/java/org/springframework/cloud/kubernetes/examples/GreetingController.java
Patch:
@@ -5,7 +5,7 @@
  *   you may not use this file except in compliance with the License.
  *   You may obtain a copy of the License at
  *
- *           http://www.apache.org/licenses/LICENSE-2.0
+ *           https://www.apache.org/licenses/LICENSE-2.0
  *
  *   Unless required by applicable law or agreed to in writing, software
  *   distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/greeting-service/src/main/java/org/springframework/cloud/kubernetes/examples/GreetingServiceApplication.java
Patch:
@@ -5,7 +5,7 @@
  *   you may not use this file except in compliance with the License.
  *   You may obtain a copy of the License at
  *
- *           http://www.apache.org/licenses/LICENSE-2.0
+ *           https://www.apache.org/licenses/LICENSE-2.0
  *
  *   Unless required by applicable law or agreed to in writing, software
  *   distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/greeting-service/src/main/java/org/springframework/cloud/kubernetes/examples/NameService.java
Patch:
@@ -5,7 +5,7 @@
  *   you may not use this file except in compliance with the License.
  *   You may obtain a copy of the License at
  *
- *           http://www.apache.org/licenses/LICENSE-2.0
+ *           https://www.apache.org/licenses/LICENSE-2.0
  *
  *   Unless required by applicable law or agreed to in writing, software
  *   distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/greeting-service/src/main/java/org/springframework/cloud/kubernetes/examples/RibbonConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  *   you may not use this file except in compliance with the License.
  *   You may obtain a copy of the License at
  *
- *           http://www.apache.org/licenses/LICENSE-2.0
+ *           https://www.apache.org/licenses/LICENSE-2.0
  *
  *   Unless required by applicable law or agreed to in writing, software
  *   distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/name-service/src/main/java/org/springframework/cloud/kubernetes/examples/NameController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ * https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/name-service/src/main/java/org/springframework/cloud/kubernetes/examples/NameServiceApplication.java
Patch:
@@ -5,7 +5,7 @@
  *   you may not use this file except in compliance with the License.
  *   You may obtain a copy of the License at
  *
- *           http://www.apache.org/licenses/LICENSE-2.0
+ *           https://www.apache.org/licenses/LICENSE-2.0
  *
  *   Unless required by applicable law or agreed to in writing, software
  *   distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-hello-world-example/src/main/java/org/springframework/cloud/kubernetes/examples/App.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-hello-world-example/src/main/java/org/springframework/cloud/kubernetes/examples/HelloController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-hello-world-example/src/test/java/org/springframework/cloud/kubernetes/examples/ApplicationTestIT.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-leader-election-example/src/main/java/org/springframework/cloud/kubernetes/examples/App.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-leader-election-example/src/main/java/org/springframework/cloud/kubernetes/examples/LeaderController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-leader-election-example/src/test/java/org/springframework/cloud/kubernetes/examples/LeaderControllerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/App.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/DummyConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/MyBean.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/MyConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-zipkin-example/src/main/java/org/springframework/cloud/kubernetes/examples/TraceController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *         http://www.apache.org/licenses/LICENSE-2.0
+ *         https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-examples/kubernetes-zipkin-example/src/main/java/org/springframework/cloud/kubernetes/examples/ZipkinApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *         http://www.apache.org/licenses/LICENSE-2.0
+ *         https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/discovery/discovery-client/src/main/java/org/springframework/cloud/kubernetes/it/DiscoveryClientApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/discovery/discovery-service-a/src/main/java/org/springframework/cloud/kubernetes/it/SimpleSpringBootApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/discovery/discovery-service-b/src/main/java/org/springframework/cloud/kubernetes/it/SimpleSpringBootApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/discovery/tests/src/test/java/org/springframework/cloud/kubernetes/it/ServicesIT.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/istio/src/main/java/org/springframework/cloud/kubernetes/it/IstioApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/istio/src/test/java/org/springframework/cloud/kubernetes/it/ProfilesIT.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/simple-configmap/src/main/java/org/springframework/cloud/kubernetes/it/DummyConfig.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/simple-configmap/src/main/java/org/springframework/cloud/kubernetes/it/SimpleConfigMapApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/simple-configmap/src/test/java/org/springframework/cloud/kubernetes/it/GreetingIT.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/simple-core/src/main/java/org/springframework/cloud/kubernetes/it/SimpleCoreApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-integration-tests/simple-core/src/test/java/org/springframework/cloud/kubernetes/it/GreetingAndHealthIT.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/IstioAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/IstioBootstrapConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/IstioClientProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-istio/src/main/java/org/springframework/cloud/kubernetes/istio/utils/MeshUtils.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/Leader.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderContext.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderInfoContributor.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderInitiator.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderProperties.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeaderRecordWatcher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeadershipController.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/PodReadinessWatcher.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeaderAutoConfigurationTests.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeaderContextTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeaderInfoContributorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeaderInitiatorTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeaderRecordWatcherTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeaderTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/LeadershipControllerTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-leader/src/test/java/org/springframework/cloud/kubernetes/leader/PodReadinessWatcherTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesConfigKey.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesRibbonClientConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesServerList.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/RibbonKubernetesAutoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/Types.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/KubernetesConfigKeyTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonFallbackTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/RibbonTest.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/TestApplication.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfigClientBootstrapConfigurationTests.java
Patch:
@@ -69,7 +69,7 @@ public void onWhenRequested() throws Exception {
 		verify(client, atLeast(2)).getInstances("configserver");
 		ConfigClientProperties locator = this.context
 				.getBean(ConfigClientProperties.class);
-		assertEquals("http://fake:8888/", locator.getUri()[0]);
+		assertEquals("https://fake:8888/", locator.getUri()[0]);
 	}
 
 	private void setup(String... env) {

File: spring-cloud-kubernetes-examples/kubernetes-circuitbreaker-ribbon-example/greeting-service/src/main/java/org/springframework/cloud/kubernetes/examples/NameService.java
Patch:
@@ -40,7 +40,7 @@ public NameService(RestTemplate restTemplate) {
 			@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "1000") })
 	public String getName(int delay) {
 		return this.restTemplate.getForObject(
-				String.format("http://name-service/name?delay=%d", delay), String.class);
+				String.format("https://name-service/name?delay=%d", delay), String.class);
 	}
 
 	private String getFallbackName(int delay) {

File: spring-cloud-kubernetes-integration-tests/discovery/tests/src/test/java/org/springframework/cloud/kubernetes/it/ServicesIT.java
Patch:
@@ -37,7 +37,7 @@ public class ServicesIT {
 
 	@Test
 	public void testServicesEndpoint() {
-		given().baseUri(String.format("http://%s:%d", HOST, PORT)).get("services").then()
+		given().baseUri(String.format("https://%s:%d", HOST, PORT)).get("services").then()
 				.statusCode(200).body(new StringContains("service-a") {
 					@Override
 					protected boolean evalSubstringOf(String s) {
@@ -48,7 +48,7 @@ protected boolean evalSubstringOf(String s) {
 
 	@Test
 	public void testInstancesEndpoint() {
-		given().baseUri(String.format("http://%s:%d", HOST, PORT))
+		given().baseUri(String.format("https://%s:%d", HOST, PORT))
 				.get("services/discovery-service-a/instances").then().statusCode(200)
 				.body("instanceId", hasSize(1))
 				.body("serviceId", hasItems("discovery-service-a"));

File: spring-cloud-kubernetes-integration-tests/istio/src/test/java/org/springframework/cloud/kubernetes/it/ProfilesIT.java
Patch:
@@ -35,7 +35,7 @@ public class ProfilesIT {
 
 	@Test
 	public void testProfileEndpoint() {
-		given().baseUri(String.format("http://%s:%d", HOST, PORT)).get("profiles").then()
+		given().baseUri(String.format("https://%s:%d", HOST, PORT)).get("profiles").then()
 				.statusCode(200).body(new StringContains("istio"));
 	}
 

File: spring-cloud-kubernetes-integration-tests/simple-configmap/src/test/java/org/springframework/cloud/kubernetes/it/GreetingIT.java
Patch:
@@ -39,7 +39,7 @@ public class GreetingIT {
 
 	@Test
 	public void firstTestThatTheDefaultMessageIsReturned() {
-		given().baseUri(String.format("http://%s:%d", HOST, PORT)).get("greeting").then()
+		given().baseUri(String.format("https://%s:%d", HOST, PORT)).get("greeting").then()
 				.statusCode(200).body("message", is("This is a dummy message"));
 	}
 
@@ -48,7 +48,7 @@ public void firstTestThatTheDefaultMessageIsReturned() {
 	public void thenApplyAConfigMapAndEnsureThatTheMessageIsUpdated() {
 		waitForApplicationToReload();
 
-		given().baseUri(String.format("http://%s:%d", HOST, PORT)).get("greeting").then()
+		given().baseUri(String.format("https://%s:%d", HOST, PORT)).get("greeting").then()
 				.statusCode(200)
 				.body("message", is("Hello from Spring Cloud Kubernetes!"));
 	}

File: spring-cloud-kubernetes-integration-tests/simple-core/src/test/java/org/springframework/cloud/kubernetes/it/GreetingAndHealthIT.java
Patch:
@@ -35,13 +35,13 @@ public class GreetingAndHealthIT {
 
 	@Test
 	public void testGreetingEndpoint() {
-		given().baseUri(String.format("http://%s:%d", HOST, PORT)).get("greeting").then()
+		given().baseUri(String.format("https://%s:%d", HOST, PORT)).get("greeting").then()
 				.statusCode(200).body("message", is("Hello from k8s"));
 	}
 
 	@Test
 	public void testHealthEndpoint() {
-		given().baseUri(String.format("http://%s:%d", HOST, PORT))
+		given().baseUri(String.format("https://%s:%d", HOST, PORT))
 				.contentType("application/json").get("actuator/health").then()
 				.statusCode(200).body("details.kubernetes.details.inside", is(true));
 	}

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySource.java
Patch:
@@ -62,7 +62,8 @@ public ConfigMapPropertySource(KubernetesClient client, String name, String name
 		this(client, name, null, createEnvironmentWithActiveProfiles(profiles));
 	}
 
-	private static Environment createEnvironmentWithActiveProfiles(String[] activeProfiles) {
+	private static Environment createEnvironmentWithActiveProfiles(
+			String[] activeProfiles) {
 		StandardEnvironment environment = new StandardEnvironment();
 		environment.setActiveProfiles(activeProfiles);
 		return environment;

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -120,9 +120,9 @@ private void addPropertySourcesFromPaths(Environment environment,
 							content, filename, composite);
 				}
 				else if (filename.endsWith(".yml") || filename.endsWith(".yaml")) {
-					addPropertySourceIfNeeded(c -> PROPERTIES_TO_MAP
-							.apply(yamlParserGenerator(environment)
-									.apply(c)),
+					addPropertySourceIfNeeded(
+							c -> PROPERTIES_TO_MAP
+									.apply(yamlParserGenerator(environment).apply(c)),
 							content, filename, composite);
 				}
 			}

File: spring-cloud-kubernetes-integration-tests/simple-core/src/test/java/org/springframework/cloud/kubernetes/it/GreetingAndHealthIT.java
Patch:
@@ -36,7 +36,7 @@ public class GreetingAndHealthIT {
 	@Test
 	public void testGreetingEndpoint() {
 		given().baseUri(String.format("http://%s:%d", HOST, PORT)).get("greeting").then()
-				.statusCode(200).body("message", is("Hello Spring Boot"));
+				.statusCode(200).body("message", is("Hello from k8s"));
 	}
 
 	@Test

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/registry/KubernetesAutoServiceRegistration.java
Patch:
@@ -36,6 +36,8 @@
  *
  * @author Mauricio Salatino
  */
+@Deprecated
+//TODO Remove this class in 2.x as it is not used or necessary in Kubernetes
 public class KubernetesAutoServiceRegistration
 		implements AutoServiceRegistration, SmartLifecycle, Ordered {
 

File: spring-cloud-kubernetes-ribbon/src/test/java/org/springframework/cloud/kubernetes/ribbon/TestApplication.java
Patch:
@@ -18,15 +18,13 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.SpringBootConfiguration;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.cloud.client.loadbalancer.LoadBalanced;
 import org.springframework.context.annotation.Bean;
 import org.springframework.web.client.RestTemplate;
 
 /**
  * @author Charles Moulliard
  */
-@EnableAutoConfiguration
 @SpringBootConfiguration
 public class TestApplication {
 

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientFilterMetadataTest.java
Patch:
@@ -58,6 +58,9 @@ public class KubernetesDiscoveryClientFilterMetadataTest {
 	@Mock
 	private KubernetesDiscoveryProperties properties;
 
+	@Mock
+	private DefaultIsServicePortSecureResolver isServicePortSecureResolver;
+
 	@Mock
 	private KubernetesDiscoveryProperties.Metadata metadata;
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/example/ResponseMessage.java
Patch:
@@ -20,15 +20,15 @@
 /**
  * @author Charles Moulliard
  */
-public class Greeting {
+public class ResponseMessage {
 
 	private final String content;
 
-	public Greeting() {
+	public ResponseMessage() {
 		this.content = null;
 	}
 
-	public Greeting(String content) {
+	public ResponseMessage(String content) {
 		this.content = content;
 	}
 

File: spring-cloud-kubernetes-leader/src/main/java/org/springframework/cloud/kubernetes/leader/LeadershipController.java
Patch:
@@ -68,7 +68,7 @@ public LeadershipController(Candidate candidate, LeaderProperties leaderProperti
 	}
 
 	public Optional<Leader> getLocalLeader() {
-		return Optional.of(localLeader);
+		return Optional.ofNullable(localLeader);
 	}
 
 	public synchronized void update() {

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryProperties.java
Patch:
@@ -19,11 +19,10 @@
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties;
 import org.springframework.core.style.ToStringCreator;
 
 @ConfigurationProperties("spring.cloud.kubernetes.discovery")
-public class KubernetesDiscoveryProperties extends AutoServiceRegistrationProperties {
+public class KubernetesDiscoveryProperties {
 
 	/** If Kubernetes Discovery is enabled. */
 	private boolean enabled = true;

File: spring-cloud-kubernetes-discovery/src/test/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientFilterTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
-public class KubernetesDiscoveryClientTest {
+public class KubernetesDiscoveryClientFilterTest {
 
 	@Mock
 	private KubernetesClient kubernetesClient;

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/BootstrapConfiguration.java
Patch:
@@ -39,18 +39,19 @@ public class BootstrapConfiguration {
 	@Import(KubernetesAutoConfiguration.class)
 	@EnableConfigurationProperties({ ConfigMapConfigProperties.class,
 			SecretsConfigProperties.class })
-	@ConditionalOnProperty(name = "spring.cloud.kubernetes.config.enabled", matchIfMissing = true)
 	protected static class KubernetesPropertySourceConfiguration {
 		@Autowired
 		private KubernetesClient client;
 
 		@Bean
+		@ConditionalOnProperty(name = "spring.cloud.kubernetes.config.enabled", matchIfMissing = true)
 		public ConfigMapPropertySourceLocator configMapPropertySourceLocator(
 				ConfigMapConfigProperties properties) {
 			return new ConfigMapPropertySourceLocator(client, properties);
 		}
 
 		@Bean
+		@ConditionalOnProperty(name = "spring.cloud.kubernetes.secrets.enabled", matchIfMissing = true)
 		public SecretsPropertySourceLocator secretsPropertySourceLocator(
 				SecretsConfigProperties properties) {
 			return new SecretsPropertySourceLocator(client, properties);

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/KubernetesConfigConfigurationTest.java
Patch:
@@ -37,12 +37,12 @@ public void kubernetesWhenKubernetesDisabled() throws Exception {
 
 	@Test
 	public void kubernetesWhenKubernetesConfigDisabled() throws Exception {
-		setup("spring.cloud.kubernetes.config.enabled=false");
+		setup("spring.cloud.kubernetes.config.enabled=false",
+			"spring.cloud.kubernetes.secrets.enabled=false");
 		assertFalse(context.containsBean("configMapPropertySourceLocator"));
 		assertFalse(context.containsBean("secretsPropertySourceLocator"));
 	}
 
-
 	@Test
 	public void kubernetesDefaultEnabled() throws Exception {
 		setup("spring.cloud.kubernetes.enabled=true");

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import io.fabric8.kubernetes.client.KubernetesClient;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration;
 import org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -43,6 +44,7 @@
  */
 @Configuration
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
+@ConditionalOnClass(EndpointAutoConfiguration.class)
 @AutoConfigureAfter({ InfoEndpointAutoConfiguration.class,
 		RefreshEndpointAutoConfiguration.class, RefreshAutoConfiguration.class })
 @EnableConfigurationProperties(ConfigReloadProperties.class)

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientAutoConfiguration.java
Patch:
@@ -28,9 +28,11 @@
 import org.springframework.context.annotation.Primary;
 
 @Configuration
+@ConditionalOnProperty(name="spring.cloud.kubernetes.enabled", matchIfMissing = true)
 public class KubernetesDiscoveryClientAutoConfiguration {
 
 	@Bean
+	@ConditionalOnProperty(name = "spring.cloud.kubernetes.discovery.enabled",matchIfMissing = true)
 	public DiscoveryClient discoveryClient(KubernetesClient client,
 										   KubernetesDiscoveryProperties properties) {
 		return new KubernetesDiscoveryClient(client, properties);

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -112,7 +112,6 @@ public StandardPodUtils kubernetesPodUtils(KubernetesClient client) {
 	@ConditionalOnClass(HealthIndicator.class)
 	protected static class KubernetesActuatorConfiguration {
 		@Bean
-		@ConditionalOnMissingBean
 		public KubernetesHealthIndicator kubernetesHealthIndicator(PodUtils podUtils) {
 			return new KubernetesHealthIndicator(podUtils);
 		}

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesCatalogWatch.java
Patch:
@@ -66,7 +66,9 @@ public void catalogServicesWatch() {
 			List<Endpoints> endpoints = kubernetesClient.endpoints().list().getItems();
 			List<String> endpointsPodNames =
 				endpoints.stream()
-					.flatMap(endpoint -> endpoint.getSubsets().stream())
+					.map(Endpoints::getSubsets)
+					.filter(Objects::nonNull)
+					.flatMap(Collection::stream)
 					.map(EndpointSubset::getAddresses)
 					.filter(Objects::nonNull)
 					.flatMap(Collection::stream)

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsSpringBootTest.java
Patch:
@@ -76,7 +76,7 @@ public static void setUpBeforeClass() {
 		System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY, "test");
 
 		HashMap<String,String> data = new HashMap<>();
-		data.put("bean.message","Hello ConfigMap, %s!");
+		data.put("bean.greeting","Hello ConfigMap, %s!");
 		server.expect().withPath("/api/v1/namespaces/test/configmaps/" + APPLICATION_NAME).andReturn(200, new ConfigMapBuilder()
 			.withNewMetadata().withName(APPLICATION_NAME).endMetadata()
 			.addToData(data)
@@ -108,7 +108,7 @@ public void testGreetingEndpoint() {
 	public void testConfigMap() {
 		ConfigMap configmap = mockClient.configMaps().inNamespace("test").withName(APPLICATION_NAME).get();
 		HashMap<String,String> keys = (HashMap<String, String>) configmap.getData();
-		assertEquals(keys.get("bean.message"),"Hello ConfigMap, %s!");
+		assertEquals(keys.get("bean.greeting"),"Hello ConfigMap, %s!");
 	}
 
 }

File: spring-cloud-kubernetes-lock/src/test/java/org/springframework/cloud/kubernetes/lock/ConfigMapLockRepositoryIT.java
Patch:
@@ -7,7 +7,7 @@
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.arquillian.cube.kubernetes.api.Session;
 import org.arquillian.cube.kubernetes.impl.requirement.RequiresKubernetes;
-import org.jboss.arquillian.junit.Arquillian;
+import org.arquillian.cube.requirement.ArquillianConditionalRunner;
 import org.jboss.arquillian.test.api.ArquillianResource;
 import org.junit.After;
 import org.junit.Before;
@@ -18,7 +18,7 @@
 import static org.springframework.cloud.kubernetes.lock.ConfigMapLockRepository.EXPIRATION_KEY;
 import static org.springframework.cloud.kubernetes.lock.ConfigMapLockRepository.HOLDER_KEY;
 
-@RunWith(Arquillian.class)
+@RunWith(ArquillianConditionalRunner.class)
 @RequiresKubernetes
 public class ConfigMapLockRepositoryIT {
 

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySource.java
Patch:
@@ -122,7 +122,7 @@ private static Map<String, Object> asObjectMap(Map<String, String> source) {
 	private static Function<String, Properties> yamlParserGenerator(final String[] profiles) {
 		return s -> {
 			YamlPropertiesFactoryBean yamlFactory = new YamlPropertiesFactoryBean();
-			if (profiles != null) {
+			if ((profiles != null) && (profiles.length > 0)){
 				yamlFactory.setDocumentMatchers(
 					(DocumentMatcher) properties ->
 						(asList(profiles).contains(properties.getProperty("spring.profiles")) ?

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/profile/KubernetesProfileApplicationListener.java
Patch:
@@ -58,7 +58,7 @@ void addKubernetesProfile(ConfigurableEnvironment environment) {
             }
         } else {
             if (LOG.isDebugEnabled()) {
-                LOG.warn("Not running inside kubernetes. Skipping 'kuberntes' profile activation.");
+                LOG.warn("Not running inside kubernetes. Skipping 'kubernetes' profile activation.");
             }
         }
     }

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/profile/KubernetesProfileApplicationListener.java
Patch:
@@ -58,7 +58,7 @@ void addKubernetesProfile(ConfigurableEnvironment environment) {
             }
         } else {
             if (LOG.isDebugEnabled()) {
-                LOG.warn("Not running inside kubernetes. Skipping 'kuberntes' profile activation.");
+                LOG.warn("Not running inside kubernetes. Skipping 'kubernetes' profile activation.");
             }
         }
     }

File: spring-cloud-kubernetes-archaius/src/main/java/org/springframework/cloud/kubernetes/archaius/ArchaiusConfigMapSourceConfiguration.java
Patch:
@@ -82,7 +82,7 @@ public void start() {
         }
         watch = StringUtils.isEmpty(namespace)
                 ? client.configMaps().withName(name).watch(watcher)
-                : client.configMaps().inNamespace(namespace).withName(namespace).watch(watcher);
+                : client.configMaps().inNamespace(namespace).withName(name).watch(watcher);
         started.set(true);
     }
 

File: spring-cloud-kubernetes-config/src/test/java/org/springframework/cloud/kubernetes/config/ConfigMapsSpringBootTest.java
Patch:
@@ -47,7 +47,8 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
                 classes = App.class,
 				properties = { "spring.application.name=configmap-example",
-	           "spring.cloud.kubernetes.reload.enabled=false"})
+	           "spring.cloud.kubernetes.reload.enabled=false"}
+	           )
 public class ConfigMapsSpringBootTest {
 
 	@ClassRule

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -41,7 +41,7 @@ public class KubernetesAutoConfiguration {
     @Bean
     @ConditionalOnMissingBean(Config.class)
     public Config kubernetesClientConfig(KubernetesClientProperties kubernetesClientProperties) {
-        Config base = new Config();
+        Config base = Config.autoConfigure(null);
         Config properties = new ConfigBuilder(base)
                 //Only set values that have been explicitly specified
                 .withMasterUrl(or(kubernetesClientProperties.getMasterUrl(), base.getMasterUrl()))

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/org/springframework/cloud/kubernetes/examples/App.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
 
 /**

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 @EnableConfigurationProperties(KubernetesClientProperties.class)
 public class KubernetesAutoConfiguration {
 
-    private static final Log LOG = LogFactory.getLog(KubernetesClientProperties.class);
+    private static final Log LOG = LogFactory.getLog(KubernetesAutoConfiguration.class);
 
     @Bean
     @ConditionalOnMissingBean(Config.class)

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 @EnableConfigurationProperties(KubernetesClientProperties.class)
 public class KubernetesAutoConfiguration {
 
-    private static final Log LOG = LogFactory.getLog(KubernetesClientProperties.class);
+    private static final Log LOG = LogFactory.getLog(KubernetesAutoConfiguration.class);
 
     @Bean
     @ConditionalOnMissingBean(Config.class)

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigUtils.java
Patch:
@@ -12,7 +12,7 @@
 
 public class ConfigUtils {
 
-    private static final Log LOG = LogFactory.getLog(SecretsPropertySource.class);
+	private static final Log LOG = LogFactory.getLog(ConfigUtils.class);
 
     public static <C extends AbstractConfigProperties> String getApplicationName(Environment env, C config) {
         String name = config.getName();

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigUtils.java
Patch:
@@ -12,7 +12,7 @@
 
 public class ConfigUtils {
 
-    private static final Log LOG = LogFactory.getLog(SecretsPropertySource.class);
+	private static final Log LOG = LogFactory.getLog(ConfigUtils.class);
 
     public static <C extends AbstractConfigProperties> String getApplicationName(Environment env, C config) {
         String name = config.getName();

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -41,7 +41,7 @@ public MapPropertySource locate(Environment environment) {
             ConfigurableEnvironment env = (ConfigurableEnvironment) environment;
             String name = getApplicationName(environment, properties);
             String namespace = getApplicationNamespace(client, env, properties);
-            return new ConfigMapPropertySource(client, name, namespace);
+            return new ConfigMapPropertySource(client, name, namespace, env.getActiveProfiles());
         }
         return null;
     }

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -41,7 +41,7 @@ public MapPropertySource locate(Environment environment) {
             ConfigurableEnvironment env = (ConfigurableEnvironment) environment;
             String name = getApplicationName(environment, properties);
             String namespace = getApplicationNamespace(client, env, properties);
-            return new ConfigMapopertySource(client, name, namespace, env.getActiveProfiles());
+            return new ConfigMapPropertySource(client, name, namespace, env.getActiveProfiles());
         }
         return null;
     }

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesConfigKey.java
Patch:
@@ -26,7 +26,6 @@
 
 import org.springframework.util.Assert;
 
-import com.google.common.reflect.TypeToken;
 import com.netflix.client.config.IClientConfigKey;
 
 public abstract class KubernetesConfigKey<T> implements IClientConfigKey<T> {
@@ -93,7 +92,7 @@ protected KubernetesConfigKey(String configKey) {
         Assert.isTrue(superclass instanceof ParameterizedType,
                 superclass + " isn't parameterized");
         Type runtimeType = ((ParameterizedType) superclass).getActualTypeArguments()[0];
-        type = (Class<T>) TypeToken.of(runtimeType).getRawType();
+        type = (Class<T>) Types.rawType(runtimeType);
     }
 
     @Override

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package org.springframework.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.config.reload;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.springframework.cloud.kubernetes.config.ConfigMapPropertySourceLocator;

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigReloadProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package org.springframework.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.config.reload;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigurationChangeDetector.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package org.springframework.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.config.reload;
 
 import java.util.LinkedList;
 import java.util.List;

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/ConfigurationUpdateStrategy.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package org.springframework.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.config.reload;
 
 import java.util.Objects;
 

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/EventBasedConfigurationChangeDetector.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package org.springframework.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.config.reload;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-cloud-kubernetes-config/src/main/java/org/springframework/cloud/kubernetes/config/reload/PollingConfigurationChangeDetector.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package org.springframework.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.config.reload;
 
 import javax.annotation.PostConstruct;
 

File: spring-cloud-kubernetes-archaius/src/main/java/org/springframework/cloud/kubernetes/archaius/ArchaiusConfigMapSource.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.archaius;
+package org.springframework.cloud.kubernetes.archaius;
 
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;

File: spring-cloud-kubernetes-archaius/src/main/java/org/springframework/cloud/kubernetes/archaius/ArchaiusConfigMapSourceConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.archaius;
+package org.springframework.cloud.kubernetes.archaius;
 
 import com.google.common.base.Strings;
 import com.netflix.config.WatchedConfigurationSource;

File: spring-cloud-kubernetes-archaius/src/main/java/org/springframework/cloud/kubernetes/archaius/ArchaiusConfigMapSourceRegistar.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.archaius;
+package org.springframework.cloud.kubernetes.archaius;
 
 import com.netflix.config.DynamicWatchedConfiguration;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;
@@ -88,4 +88,4 @@ private void registerSourceConfiguration(BeanDefinitionRegistry registry, Object
         dynamicWatchedConfigBuilder.addConstructorArgReference(configMapSourceConfigName);
         registry.registerBeanDefinition(dynamicWatchedConfigName, dynamicWatchedConfigBuilder.getBeanDefinition());
     }
-}
\ No newline at end of file
+}

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesAutoConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes;
+package org.springframework.cloud.kubernetes;
 
 import io.fabric8.kubernetes.client.Config;
 import io.fabric8.kubernetes.client.ConfigBuilder;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesClientProperties.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes;
+package org.springframework.cloud.kubernetes;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/KubernetesHealthIndicator.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes;
+package org.springframework.cloud.kubernetes;
 
 import io.fabric8.kubernetes.api.model.Pod;
 import io.fabric8.kubernetes.client.KubernetesClient;
@@ -52,4 +52,4 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {
             builder.down(e);
         }
     }
-}
\ No newline at end of file
+}

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/LazilyInstantiate.java
Patch:
@@ -14,7 +14,7 @@
  *     limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes;
+package org.springframework.cloud.kubernetes;
 
 
 import java.util.function.Supplier;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/PodUtils.java
Patch:
@@ -14,7 +14,7 @@
  *     limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes;
+package org.springframework.cloud.kubernetes;
 
 import io.fabric8.kubernetes.api.model.Pod;
 

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/StandardPodUtils.java
Patch:
@@ -14,7 +14,7 @@
  *     limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes;
+package org.springframework.cloud.kubernetes;
 
 import io.fabric8.kubernetes.api.model.Pod;
 import io.fabric8.kubernetes.client.Config;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/AbstractConfigProperties.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 
 public abstract class AbstractConfigProperties {

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/BootstrapConfiguration.java
Patch:
@@ -15,12 +15,12 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import io.fabric8.kubernetes.api.model.ConfigMap;
 import io.fabric8.kubernetes.api.model.Secret;
 import io.fabric8.kubernetes.client.KubernetesClient;
-import io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration;
+import org.springframework.cloud.kubernetes.KubernetesAutoConfiguration;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapConfigProperties.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySource.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -15,15 +15,15 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.springframework.cloud.bootstrap.config.PropertySourceLocator;
 import org.springframework.core.annotation.Order;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.MapPropertySource;
-import static io.fabric8.spring.cloud.kubernetes.config.ConfigUtils.*;
+import static org.springframework.cloud.kubernetes.config.ConfigUtils.*;
 
 @Order(0)
 public class ConfigMapPropertySourceLocator implements PropertySourceLocator {

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/ConfigUtils.java
Patch:
@@ -1,4 +1,4 @@
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/Constants.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 final class Constants {
     static final String SPRING_APPLICATION_NAME = "spring.application.name";

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/SecretsConfigProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import java.util.HashMap;
 import java.util.LinkedList;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/SecretsPropertySource.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -32,7 +32,7 @@
 import org.springframework.core.env.MapPropertySource;
 import org.springframework.util.StringUtils;
 
-import static io.fabric8.spring.cloud.kubernetes.config.ConfigUtils.*;
+import static org.springframework.cloud.kubernetes.config.ConfigUtils.*;
 
 public class SecretsPropertySource extends MapPropertySource {
     private static final Logger LOGGER = LoggerFactory.getLogger(SecretsPropertySource.class);

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/config/SecretsPropertySourceLocator.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.config;
+package org.springframework.cloud.kubernetes.config;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.springframework.cloud.bootstrap.config.PropertySourceLocator;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/profile/KubernetesProfileApplicationListener.java
Patch:
@@ -14,10 +14,10 @@
  *     limitations under the License.
  */
 
-package io.fabric8.spring.cloud.kubernetes.profile;
+package org.springframework.cloud.kubernetes.profile;
 
 import io.fabric8.kubernetes.api.model.Pod;
-import io.fabric8.spring.cloud.kubernetes.PodUtils;
+import org.springframework.cloud.kubernetes.PodUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/reload/ConfigReloadAutoConfiguration.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.reload;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
-import io.fabric8.spring.cloud.kubernetes.config.ConfigMapPropertySourceLocator;
-import io.fabric8.spring.cloud.kubernetes.config.SecretsPropertySourceLocator;
+import org.springframework.cloud.kubernetes.config.ConfigMapPropertySourceLocator;
+import org.springframework.cloud.kubernetes.config.SecretsPropertySourceLocator;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/reload/ConfigReloadProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.reload;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/reload/ConfigurationChangeDetector.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.reload;
 
 import java.util.LinkedList;
 import java.util.List;

File: spring-cloud-kubernetes-core/src/main/java/org/springframework/cloud/kubernetes/reload/ConfigurationUpdateStrategy.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.reload;
+package org.springframework.cloud.kubernetes.reload;
 
 import java.util.Objects;
 

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClient.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.discovery;
+package org.springframework.cloud.kubernetes.discovery;
 
 import io.fabric8.kubernetes.api.model.Endpoints;
 import io.fabric8.kubernetes.client.KubernetesClient;

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryClientConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.discovery;
+package org.springframework.cloud.kubernetes.discovery;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryLifecycle.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.discovery;
+package org.springframework.cloud.kubernetes.discovery;
 
 import io.fabric8.kubernetes.client.KubernetesClient;
 import org.springframework.cloud.client.discovery.AbstractDiscoveryLifecycle;

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesDiscoveryProperties.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.discovery;
+package org.springframework.cloud.kubernetes.discovery;
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.context.properties.ConfigurationProperties;

File: spring-cloud-kubernetes-discovery/src/main/java/org/springframework/cloud/kubernetes/discovery/KubernetesServiceInstance.java
Patch:
@@ -14,7 +14,7 @@
  *   limitations under the License.
  */
 
-package io.fabric8.spring.cloud.discovery;
+package org.springframework.cloud.kubernetes.discovery;
 
 import io.fabric8.kubernetes.api.model.EndpointAddress;
 import io.fabric8.kubernetes.api.model.EndpointPort;

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/io/fabric8/spring/cloud/kubernetes/examples/App.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.examples;
+package org.springframework.cloud.kubernetes.examples;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/io/fabric8/spring/cloud/kubernetes/examples/MyBean.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.examples;
+package org.springframework.cloud.kubernetes.examples;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.scheduling.annotation.Scheduled;

File: spring-cloud-kubernetes-examples/kubernetes-reload-example/src/main/java/io/fabric8/spring/cloud/kubernetes/examples/MyConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  *
  */
-package io.fabric8.spring.cloud.kubernetes.examples;
+package org.springframework.cloud.kubernetes.examples;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;

File: spring-cloud-kubernetes-hystrix/src/main/java/org/springframework/cloud/kubernetes/hystrix/HystrixFilterAutoConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.hystrix;
+package org.springframework.cloud.kubernetes.hystrix;
 
 import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: spring-cloud-kubernetes-hystrix/src/main/java/org/springframework/cloud/kubernetes/hystrix/HystrixRequestContextServletFilter.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.hystrix;
+package org.springframework.cloud.kubernetes.hystrix;
 
 import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;
 import org.springframework.web.filter.OncePerRequestFilter;
@@ -38,4 +38,4 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
         }
     }
 
-}
\ No newline at end of file
+}

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesConfigKey.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.ribbon;
+package org.springframework.cloud.kubernetes.ribbon;
 
 import com.google.common.reflect.TypeToken;
 import com.netflix.client.config.IClientConfigKey;

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesRibbonClientConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.ribbon;
+package org.springframework.cloud.kubernetes.ribbon;
 
 import com.netflix.client.config.IClientConfig;
 import com.netflix.loadbalancer.ServerList;

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/KubernetesServerList.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.ribbon;
+package org.springframework.cloud.kubernetes.ribbon;
 
 import com.netflix.client.config.IClientConfig;
 import com.netflix.loadbalancer.AbstractServerList;

File: spring-cloud-kubernetes-ribbon/src/main/java/org/springframework/cloud/kubernetes/ribbon/RibbonKubernetesAutoConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.ribbon;
+package org.springframework.cloud.kubernetes.ribbon;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;

File: spring-cloud-kubernetes-zipkin/src/main/java/org/springframework/cloud/kubernetes/zipkin/KubernetesZipkinDiscoveryProperties.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.zipkin;
+package org.springframework.cloud.kubernetes.zipkin;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-cloud-kubernetes-zipkin/src/main/java/org/springframework/cloud/kubernetes/zipkin/ZipkinKubernetesAutoConfiguration.java
Patch:
@@ -15,12 +15,12 @@
  *
  */
 
-package io.fabric8.spring.cloud.kubernetes.zipkin;
+package org.springframework.cloud.kubernetes.zipkin;
 
 import io.fabric8.kubernetes.api.model.Endpoints;
 import io.fabric8.kubernetes.client.KubernetesClient;
 import io.fabric8.kubernetes.client.utils.Utils;
-import io.fabric8.spring.cloud.discovery.KubernetesServiceInstance;
+import org.springframework.cloud.kubernetes.discovery.KubernetesServiceInstance;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;

File: spring-cloud-kubernetes-zipkin/src/main/java/io/fabric8/spring/cloud/kubernetes/zipkin/ZipkinKubernetesAutoConfiguration.java
Patch:
@@ -72,7 +72,7 @@ private static List<ServiceInstance> getInstances(KubernetesClient client, Strin
                 .orElse(new Endpoints())
                 .getSubsets()
                 .stream()
-                .map(s -> new KubernetesServiceInstance(name, s.getPorts().iterator().next().getName(), s, false))
+                .flatMap(s -> s.getAddresses().stream().map(a -> (ServiceInstance) new KubernetesServiceInstance(name, a ,s.getPorts().stream().findFirst().orElseThrow(IllegalStateException::new), false)))
                 .collect(Collectors.toList());
     }
 

File: spring-cloud-kubernetes-discovery/src/main/java/io/fabric8/spring/cloud/discovery/KubernetesDiscoveryLifecycle.java
Patch:
@@ -39,11 +39,10 @@ public void start() {
         if (!isEnabled()) {
             return;
         }
-        if (!isRunning()) {
+        if (running.compareAndSet(false, true)) {
             register();
             getContext().publishEvent(new InstanceRegisteredEvent<>(this,
                     getConfiguration()));
-            running.compareAndSet(false, true);
         }
     }
 

File: spring-cloud-kubernetes-core/src/main/java/io/fabric8/spring/cloud/kubernetes/config/ConfigMapBootstrapConfiguration.java
Patch:
@@ -17,9 +17,11 @@
 
 package io.fabric8.spring.cloud.kubernetes.config;
 
+import io.fabric8.kubernetes.api.model.ConfigMap;
 import io.fabric8.kubernetes.client.KubernetesClient;
 import io.fabric8.spring.cloud.kubernetes.KubernetesAutoConfiguration;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
@@ -28,6 +30,7 @@
 
 @Configuration
 @ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
+@ConditionalOnClass(ConfigMap.class)
 public class ConfigMapBootstrapConfiguration {
 
     @Configuration

File: spring-cloud-kubernetes-core/src/main/java/io/fabric8/spring/cloud/kubernetes/config/ConfigMapPropertySourceLocator.java
Patch:
@@ -28,6 +28,7 @@
 public class ConfigMapPropertySourceLocator implements PropertySourceLocator {
 
     private static final String SPRING_APPLICATION_NAME = "spring.application.name";
+    private static final String FALLBACK_APPLICATION_NAME = "application";
 
     private final KubernetesClient client;
     private final ConfigMapConfigProperties properties;
@@ -41,7 +42,7 @@ public ConfigMapPropertySourceLocator(KubernetesClient client, ConfigMapConfigPr
     public PropertySource<?> locate(Environment environment) {
         if (environment instanceof ConfigurableEnvironment) {
             ConfigurableEnvironment env = (ConfigurableEnvironment) environment;
-            String appName = env.getProperty(SPRING_APPLICATION_NAME);
+            String appName = env.getProperty(SPRING_APPLICATION_NAME, FALLBACK_APPLICATION_NAME);
             String name = properties.getName() == null || properties.getName().isEmpty() ? appName : properties.getName();
             String namespace = properties.getNamespace();
             return new ConfigMapPropertySource(client, name, namespace);

File: spring-cloud-kubernetes-zipkin/src/main/java/io/fabric8/spring/cloud/kubernetes/zipkin/KubernetesZipkinDiscoveryProperties.java
Patch:
@@ -23,7 +23,7 @@
 public class KubernetesZipkinDiscoveryProperties {
 
     private boolean enabled = true;
-    private String serviceName = "zipkin-query-api";
+    private String serviceName = "zipkin-query";
 
 
     public boolean isEnabled() {

File: spring-cloud-kubernetes-discovery/src/main/java/io/fabric8/spring/cloud/discovery/KubernetesDiscoveryProperties.java
Patch:
@@ -16,12 +16,15 @@
 
 package io.fabric8.spring.cloud.discovery;
 
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 @ConfigurationProperties("spring.cloud.kubernetes.discovery")
 public class KubernetesDiscoveryProperties {
 
     private boolean enabled = true;
+
+    @Value("${spring.application.name:unknown}")
     private String serviceName = "unknown";
 
     public boolean isEnabled() {

File: spring-cloud-kubernetes-discovery/src/main/java/io/fabric8/spring/cloud/discovery/KubernetesDiscoveryClientConfiguration.java
Patch:
@@ -31,11 +31,12 @@ public class KubernetesDiscoveryClientConfiguration {
     @Bean
     @ConditionalOnMissingBean
     public KubernetesDiscoveryClient kubernetesDiscoveryClient(KubernetesClient client, KubernetesDiscoveryProperties properties) {
-        return new KubernetesDiscoveryClient(client, properties.getServiceName());
+        return new KubernetesDiscoveryClient(client, properties);
     }
 
     @Bean
     public KubernetesDiscoveryLifecycle kubernetesDiscoveryLifecycle(KubernetesClient client, KubernetesDiscoveryProperties properties) {
         return new KubernetesDiscoveryLifecycle(client, properties);
+
     }
 }

File: spring-cloud-kubernetes-discovery/src/main/java/io/fabric8/spring/cloud/discovery/KubernetesDiscoveryProperties.java
Patch:
@@ -22,8 +22,7 @@
 public class KubernetesDiscoveryProperties {
 
     private boolean enabled = true;
-    private String serviceName;
-
+    private String serviceName = "unknown";
 
     public boolean isEnabled() {
         return enabled;

File: spring-cloud-kubernetes-discovery/src/main/java/io/fabric8/spring/cloud/discovery/KubernetesDiscoveryClient.java
Patch:
@@ -30,9 +30,6 @@ public class KubernetesDiscoveryClient implements DiscoveryClient {
     private KubernetesClient client;
     private String localServiceId;
 
-    public KubernetesDiscoveryClient() {
-    }
-
     public KubernetesDiscoveryClient(KubernetesClient client, String localServiceId) {
         this.client = client;
         this.localServiceId = localServiceId;

File: spring-cloud-kubernetes-discovery/src/main/java/io/fabric8/spring/cloud/discovery/KubernetesDiscoveryClientConfiguration.java
Patch:
@@ -23,8 +23,8 @@
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
-@ConditionalOnProperty(value = "spring.cloud.kubernetes.enabled", matchIfMissing = true)
-public class KubernetesDiscoveryAutoConfiguration {
+@ConditionalOnProperty(value = "spring.cloud.kubernetes.discovery.enabled", matchIfMissing = true)
+public class KubernetesDiscoveryClientConfiguration {
 
     @Bean
     public KubernetesDiscoveryProperties kubernetesDiscoveryProperties() {

File: spring-cloud-kubernetes-core/src/main/java/io/fabric8/spring/cloud/kubernetes/KubernetesHealthIndicator.java
Patch:
@@ -28,6 +28,7 @@ public class KubernetesHealthIndicator extends AbstractHealthIndicator {
 
     public KubernetesHealthIndicator(KubernetesClient client, PodUtils utils) {
         this.client = client;
+        this.utils = utils;
     }
 
     @Override

