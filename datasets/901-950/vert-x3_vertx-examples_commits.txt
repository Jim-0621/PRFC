File: jpms-examples/src/test/java/module-info.java
Patch:
@@ -3,6 +3,7 @@
   requires jpms.examples;
   requires org.junit.jupiter.api;
   requires testcontainers;
+  requires io.vertx.core;
   requires io.vertx.client.sql.pg;
   requires io.vertx.client.sql;
 

File: unit-examples/src/test/java/io/vertx/example/unit/test/MyJUnitTest.java
Patch:
@@ -57,7 +57,7 @@ public void test1(TestContext context) {
   public void test2(TestContext context) {
     // Deploy and undeploy a verticle
     vertx.deployVerticle(SomeVerticle.class.getName())
-      .compose(deploymentID -> vertx.deployVerticle(deploymentID))
+      .compose(deploymentID -> vertx.undeploy(deploymentID))
       .onComplete(context.asyncAssertSuccess());
   }
 }

File: cassandra-examples/src/main/java/io/vertx/example/cassandra/streaming/StreamingExample.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.cassandra.cassandra.streaming;
+package io.vertx.example.cassandra.streaming;
 
 import io.vertx.cassandra.CassandraClient;
 import io.vertx.cassandra.CassandraClientOptions;
@@ -18,7 +18,7 @@ public static void main(String[] args) {
 
   @Override
   public void start() {
-    CassandraClient client = CassandraClient.createShared(vertx, new CassandraClientOptions().setPort(9042));
+    CassandraClient client = CassandraClient.createShared(vertx, new CassandraClientOptions());
     client.queryStream("SELECT * from system_schema.tables  WHERE keyspace_name = 'system_schema' ", cassandraRowStreamAsyncResult -> {
       if (cassandraRowStreamAsyncResult.succeeded()) {
         System.out.println("Tables in system_schema: ");

File: junit5-examples/src/test/java/hello/SampleVerticleTest.java
Patch:
@@ -18,12 +18,12 @@
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;
+import io.vertx.core.file.FileSystemOptions;
 import io.vertx.ext.web.client.WebClient;
 import io.vertx.ext.web.codec.BodyCodec;
 import io.vertx.junit5.Checkpoint;
 import io.vertx.junit5.VertxExtension;
 import io.vertx.junit5.VertxTestContext;
-import org.assertj.core.api.Assertions;
 import org.junit.jupiter.api.*;
 import org.junit.jupiter.api.extension.ExtendWith;
 
@@ -91,7 +91,7 @@ void prepare() {
       vertx = Vertx.vertx(new VertxOptions()
         .setMaxEventLoopExecuteTime(1000)
         .setPreferNativeTransport(true)
-        .setFileResolverCachingEnabled(true));
+        .setFileSystemOptions(new FileSystemOptions().setFileCachingEnabled(true)));
     }
 
     @Test

File: service-discovery-examples/src/main/java/io/vertx/example/service/discovery/ServiceDiscoveryVerticle.java
Patch:
@@ -73,10 +73,9 @@ public void start() {
           HttpClient client = reference.get();
           System.out.println("Consuming \"" + record2.getName() + "\"");
 
-          client.getNow("/api", response -> {
+          client.get("/api", ar2 -> {
             //release the service
             reference.release();
-
           });
         }
       }

File: web-graphql-examples/src/main/java/io/vertx/example/web/graphql/SubscriptionServer.java
Patch:
@@ -17,6 +17,7 @@
 import org.reactivestreams.Publisher;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
@@ -38,7 +39,7 @@ public void start() {
     router.route("/graphql").handler(ApolloWSHandler.create(createGraphQL()));
 
     HttpServerOptions httpServerOptions = new HttpServerOptions()
-      .setWebsocketSubProtocols("graphql-ws");
+      .setWebSocketSubProtocols(Collections.singletonList("graphql-ws"));
     vertx.createHttpServer(httpServerOptions)
       .requestHandler(router)
       .listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/eventbus/pingpong/PingPong.java
Patch:
@@ -1,8 +1,8 @@
 package io.vertx.example.reactivex.eventbus.pingpong;
 
+import io.vertx.example.util.Runner;
 import io.vertx.reactivex.core.AbstractVerticle;
 import io.vertx.reactivex.core.eventbus.EventBus;
-import io.vertx.example.util.Runner;
 
 public class PingPong extends AbstractVerticle {
 
@@ -27,7 +27,7 @@ public void start() throws Exception {
 
         // Send a message every second
         vertx.setPeriodic(1000, v -> {
-            eb.rxSend(ADDRESS, "PING")
+          eb.rxRequest(ADDRESS, "PING")
                     .subscribe(reply -> {
                         System.out.println("Received reply " + reply.body());
                     });

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/eventbus/zipreplies/Sender.java
Patch:
@@ -1,10 +1,10 @@
 package io.vertx.example.reactivex.eventbus.zipreplies;
 
+import io.reactivex.Single;
 import io.vertx.example.util.Runner;
 import io.vertx.reactivex.core.AbstractVerticle;
 import io.vertx.reactivex.core.eventbus.EventBus;
 import io.vertx.reactivex.core.eventbus.Message;
-import io.reactivex.Single;
 
 /*
  * @author <a href="mailto:julien@julienviet.com">Julien Viet</a>
@@ -24,8 +24,8 @@ public void start() throws Exception {
     vertx.setPeriodic(1000, v -> {
 
       // Send two messages expecting replies
-      Single<Message<Integer>> reply1 = eb.<Integer>rxSend("heatsensor1", "ping");
-      Single<Message<Integer>> reply2 = eb.<Integer>rxSend("heatsensor2", "ping");
+      Single<Message<Integer>> reply1 = eb.<Integer>rxRequest("heatsensor1", "ping");
+      Single<Message<Integer>> reply2 = eb.<Integer>rxRequest("heatsensor2", "ping");
 
       // Zip responses to receive both at the same time
       Single<int[]> reply = reply1.zipWith(reply2, (msg1, msg2) -> new int[]{msg1.body(), msg2.body()});

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/net/greeter/Client.java
Patch:
@@ -53,7 +53,8 @@ public void start() throws Exception {
         // Now send some data
         Stream.of("John", "Joe", "Lisa", "Bill").forEach(name -> {
           System.out.println("Net client sending: " + name);
-          socket.write(name).write("\n");
+          socket.write(name);
+          socket.write("\n");
         });
 
       } else {

File: rxjava-1-examples/src/main/java/io/vertx/example/rxjava/eventbus/zipreplies/Sender.java
Patch:
@@ -24,8 +24,8 @@ public void start() throws Exception {
     vertx.setPeriodic(1000, v -> {
 
       // Send two messages expecting replies
-      Single<Message<Integer>> reply1 = eb.<Integer>rxSend("heatsensor1", "ping");
-      Single<Message<Integer>> reply2 = eb.<Integer>rxSend("heatsensor2", "ping");
+      Single<Message<Integer>> reply1 = eb.<Integer>rxRequest("heatsensor1", "ping");
+      Single<Message<Integer>> reply2 = eb.<Integer>rxRequest("heatsensor2", "ping");
 
       // Zip responses to receive both at the same time
       Single<int[]> reply = reply1.zipWith(reply2, (msg1, msg2) -> new int[]{msg1.body(), msg2.body()});

File: core-examples/src/main/java/io/vertx/example/core/eventbus/pointtopoint/Sender.java
Patch:
@@ -22,7 +22,7 @@ public void start() throws Exception {
 
     vertx.setPeriodic(1000, v -> {
 
-      eb.send("ping-address", "ping!", reply -> {
+      eb.request("ping-address", "ping!", reply -> {
         if (reply.succeeded()) {
           System.out.println("Received reply " + reply.result().body());
         } else {

File: core-examples/src/main/java/io/vertx/example/core/eventbus/ssl/Sender.java
Patch:
@@ -31,9 +31,9 @@ public void start() throws Exception {
 
     vertx.setPeriodic(1000, v -> {
 
-      eb.send("ping-address", "ping!", reply -> {
-        if (reply.succeeded()) {
-          System.out.println("Received reply " + reply.result().body());
+      eb.request("ping-address", "ping!", ar -> {
+        if (ar.succeeded()) {
+          System.out.println("Received reply " + ar.result().body());
         } else {
           System.out.println("No reply");
         }

File: core-examples/src/main/java/io/vertx/example/core/http/proxy/Proxy.java
Patch:
@@ -21,7 +21,8 @@ public void start() throws Exception {
     HttpClient client = vertx.createHttpClient(new HttpClientOptions());
     vertx.createHttpServer().requestHandler(req -> {
       System.out.println("Proxying request: " + req.uri());
-      HttpClientRequest c_req = client.request(req.method(), 8282, "localhost", req.uri(), c_res -> {
+      HttpClientRequest c_req = client.request(req.method(), 8282, "localhost", req.uri());
+      c_req.onSuccess(c_res -> {
         System.out.println("Proxying response: " + c_res.statusCode());
         req.response().setChunked(true);
         req.response().setStatusCode(c_res.statusCode());

File: core-examples/src/main/java/io/vertx/example/core/http/upload/Client.java
Patch:
@@ -7,6 +7,7 @@
 import io.vertx.core.file.OpenOptions;
 import io.vertx.core.http.HttpClientOptions;
 import io.vertx.core.http.HttpClientRequest;
+import io.vertx.core.http.HttpMethod;
 import io.vertx.core.streams.Pump;
 import io.vertx.example.util.Runner;
 
@@ -22,7 +23,8 @@ public static void main(String[] args) {
 
   @Override
   public void start() throws Exception {
-    HttpClientRequest req = vertx.createHttpClient(new HttpClientOptions()).put(8080, "localhost", "/someurl", resp -> {
+    HttpClientRequest req = vertx.createHttpClient(new HttpClientOptions()).request(HttpMethod.PUT, 8080, "localhost", "/someurl");
+    req.onSuccess(resp -> {
       System.out.println("Response " + resp.statusCode());
     });
     String filename = "upload.txt";

File: core-examples/src/main/java/io/vertx/example/core/http/websockets/Client.java
Patch:
@@ -19,12 +19,12 @@ public static void main(String[] args) {
   public void start() throws Exception {
     HttpClient client = vertx.createHttpClient();
 
-    client.websocket(8080, "localhost", "/some-uri", websocket -> {
-      websocket.handler(data -> {
+    client.webSocket(8080, "localhost", "/some-uri").onSuccess(webSocket -> {
+      webSocket.handler(data -> {
         System.out.println("Received data " + data.toString("ISO-8859-1"));
         client.close();
       });
-      websocket.writeBinaryMessage(Buffer.buffer("Hello world"));
+      webSocket.writeBinaryMessage(Buffer.buffer("Hello world"));
     });
   }
 }

File: core-examples/src/main/java/io/vertx/example/core/net/greeter/Client.java
Patch:
@@ -54,7 +54,8 @@ public void start() throws Exception {
         // Now send some data
         Stream.of("John", "Joe", "Lisa", "Bill").forEach(name -> {
           System.out.println("Net client sending: " + name);
-          socket.write(name).write("\n");
+          socket.write(name);
+          socket.write("\n");
         });
 
       } else {

File: spring-examples/springboot-example/src/main/java/io/vertx/example/Application.java
Patch:
@@ -5,8 +5,9 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.event.ApplicationReadyEvent;
+import org.springframework.context.event.EventListener;
 
-import javax.annotation.PostConstruct;
 
 @SpringBootApplication
 public class Application {
@@ -21,7 +22,7 @@ public static void main(String[] args) {
     SpringApplication.run(Application.class, args);
   }
 
-  @PostConstruct
+  @EventListener(ApplicationReadyEvent.class)
   public void deployVerticle() {
     Vertx.vertx().deployVerticle(staticServer);
   }

File: core-examples/src/main/java/io/vertx/example/core/http/websockets/Server.java
Patch:
@@ -15,7 +15,7 @@ public static void main(String[] args) {
 
   @Override
   public void start() throws Exception {
-    vertx.createHttpServer().websocketHandler(ws -> ws.handler(ws::writeBinaryMessage)).requestHandler(req -> {
+    vertx.createHttpServer().webSocketHandler(ws -> ws.handler(ws::writeBinaryMessage)).requestHandler(req -> {
       if (req.uri().equals("/")) req.response().sendFile("ws.html");
     }).listen(8080);
   }

File: kafka-examples/src/main/java/io/vertx/example/kafka/dashboard/DashboardVerticle.java
Patch:
@@ -22,7 +22,7 @@ public void start() throws Exception {
     // The event bus bridge handler
     BridgeOptions options = new BridgeOptions();
     options.setOutboundPermitted(Collections.singletonList(new PermittedOptions().setAddress("dashboard")));
-    router.mountSubRouter("/eventbus/*", SockJSHandler.create(vertx).bridge(options));
+    router.mountSubRouter("/eventbus", SockJSHandler.create(vertx).bridge(options));
 
     // The web server handler
     router.route().handler(StaticHandler.create().setCachingEnabled(false));

File: metrics-examples/src/main/java/io/vertx/example/metrics/dashboard/Dashboard.java
Patch:
@@ -53,7 +53,7 @@ public void start() {
                 setAddress("metrics")
         );
 
-    router.mountSubRouter("/eventbus/*", SockJSHandler.create(vertx).bridge(options));
+    router.mountSubRouter("/eventbus", SockJSHandler.create(vertx).bridge(options));
 
     // Serve the static resources
     router.route().handler(StaticHandler.create());

File: service-proxy-examples/service-provider/src/main/java/io/vertx/examples/service/ProcessorServiceVerticle.java
Patch:
@@ -45,7 +45,7 @@ public void start() throws Exception {
         .addOutboundPermitted(new PermittedOptions().setAddress("vertx.processor"));
 
     // Create the event bus bridge and add it to the router.
-    router.mountSubRouter("/eventbus/*", SockJSHandler.create(vertx).bridge(opts));
+    router.mountSubRouter("/eventbus", SockJSHandler.create(vertx).bridge(opts));
     router.route().handler(StaticHandler.create());
 
     //

File: service-proxy-examples/sockjs-proxies/src/main/java/io/vertx/example/web/proxies/Server.java
Patch:
@@ -34,7 +34,7 @@ public void start() throws Exception {
 
     BridgeOptions options = new BridgeOptions().addInboundPermitted(new PermittedOptions().setAddress("proxy.example"));
 
-    router.mountSubRouter("/eventbus/*", SockJSHandler.create(vertx).bridge(options));
+    router.mountSubRouter("/eventbus", SockJSHandler.create(vertx).bridge(options));
 
     // Serve the static resources
     router.route().handler(StaticHandler.create());

File: grpc-examples/src/main/java/io/vertx/example/grpc/empty/Client.java
Patch:
@@ -37,7 +37,7 @@ public void start() throws Exception {
       if (ar.succeeded()) {
         System.out.println("Got the server response.");
       } else {
-        System.out.println("Coult not reach server " + ar.cause().getMessage());
+        System.out.println("Could not reach server " + ar.cause().getMessage());
       }
     });
   }

File: grpc-examples/src/main/java/io/vertx/example/grpc/empty/Client.java
Patch:
@@ -37,7 +37,7 @@ public void start() throws Exception {
       if (ar.succeeded()) {
         System.out.println("Got the server response.");
       } else {
-        System.out.println("Coult not reach server " + ar.cause().getMessage());
+        System.out.println("Could not reach server " + ar.cause().getMessage());
       }
     });
   }

File: web-examples/src/main/java/io/vertx/example/web/chat/Server.java
Patch:
@@ -39,7 +39,8 @@ public void start() throws Exception {
       .addOutboundPermitted(new PermittedOptions().setAddress("chat.to.client"));
 
     // Create the event bus bridge and add it to the router.
-    SockJSHandler ebHandler = SockJSHandler.create(vertx).bridge(opts);
+    SockJSHandler ebHandler = SockJSHandler.create(vertx);
+    ebHandler.bridge(opts);
     router.route("/eventbus/*").handler(ebHandler);
 
     // Create a router endpoint for the static content.

File: web-examples/src/main/java/io/vertx/example/web/react/Server.java
Patch:
@@ -29,7 +29,8 @@ public void start() throws Exception {
             .addOutboundPermitted(new PermittedOptions().setAddress("chat.message"));
 
     // Create the event bus bridge and add it to the router.
-    SockJSHandler ebHandler = SockJSHandler.create(vertx).bridge(opts);
+    SockJSHandler ebHandler = SockJSHandler.create(vertx);
+    ebHandler.bridge(opts);
     router.route("/eventbus/*").handler(ebHandler);
 
     // Create a router endpoint for the static content.

File: web-examples/src/main/java/io/vertx/example/web/vertxbus/amd/Server.java
Patch:
@@ -37,7 +37,8 @@ public void start() throws Exception {
       .addOutboundPermitted(new PermittedOptions().setAddress("feed"));
 
     // Create the event bus bridge and add it to the router.
-    SockJSHandler ebHandler = SockJSHandler.create(vertx).bridge(opts);
+    SockJSHandler ebHandler = SockJSHandler.create(vertx);
+    ebHandler.bridge(opts);
     router.route("/eventbus/*").handler(ebHandler);
 
     // Create a router endpoint for the static content.

File: web-examples/src/main/java/io/vertx/example/web/vertxbus/commonjs/Server.java
Patch:
@@ -37,7 +37,8 @@ public void start() throws Exception {
         .addOutboundPermitted(new PermittedOptions().setAddress("feed"));
 
     // Create the event bus bridge and add it to the router.
-    SockJSHandler ebHandler = SockJSHandler.create(vertx).bridge(opts);
+    SockJSHandler ebHandler = SockJSHandler.create(vertx);
+    ebHandler.bridge(opts);
     router.route("/eventbus/*").handler(ebHandler);
 
     // Create a router endpoint for the static content.

File: web-examples/src/main/java/io/vertx/example/web/vertxbus/node/Server.java
Patch:
@@ -35,7 +35,8 @@ public void start() throws Exception {
         .addOutboundPermitted(new PermittedOptions().setAddress("feed"));
 
     // Create the event bus bridge and add it to the router.
-    SockJSHandler ebHandler = SockJSHandler.create(vertx).bridge(opts);
+    SockJSHandler ebHandler = SockJSHandler.create(vertx);
+    ebHandler.bridge(opts);
     router.route("/eventbus/*").handler(ebHandler);
 
     // Start the web server and tell it to use the router to handle requests.

File: service-proxy-examples/service-provider/src/main/java/io/vertx/examples/service/ProcessorServiceVerticle.java
Patch:
@@ -4,6 +4,7 @@
 import io.vertx.core.eventbus.MessageConsumer;
 import io.vertx.core.http.HttpServer;
 import io.vertx.core.json.JsonObject;
+import io.vertx.examples.service.impl.ProcessorServiceImpl;
 import io.vertx.examples.service.utils.Runner;
 import io.vertx.ext.bridge.PermittedOptions;
 import io.vertx.ext.web.Router;
@@ -30,7 +31,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     // Create the client object
-    service = new ProcessorServiceImpl();
+    ProcessorService service = new ProcessorServiceImpl();
     // Register the handler
     new ServiceBinder(vertx)
       .setAddress("vertx.processor")

File: web-api-service-example/src/main/java/io/vertx/examples/webapiservice/services/TransactionsManagerService.java
Patch:
@@ -3,7 +3,7 @@
 import io.vertx.core.AsyncResult;
 import io.vertx.core.Handler;
 import io.vertx.examples.webapiservice.models.Transaction;
-import io.vertx.examples.webapiservice.services.impl.TransactionPersistence;
+import io.vertx.examples.webapiservice.persistence.TransactionPersistence;
 import io.vertx.examples.webapiservice.services.impl.TransactionsManagerServiceImpl;
 import io.vertx.ext.web.api.OperationRequest;
 import io.vertx.ext.web.api.OperationResponse;

File: web-api-service-example/src/main/java/io/vertx/examples/webapiservice/services/impl/TransactionsManagerServiceImpl.java
Patch:
@@ -5,6 +5,7 @@
 import io.vertx.core.Handler;
 import io.vertx.core.json.JsonArray;
 import io.vertx.examples.webapiservice.models.Transaction;
+import io.vertx.examples.webapiservice.persistence.TransactionPersistence;
 import io.vertx.examples.webapiservice.services.TransactionsManagerService;
 import io.vertx.ext.web.api.OperationRequest;
 import io.vertx.ext.web.api.OperationResponse;

File: core-examples/src/main/java/io/vertx/example/core/net/stream/Server.java
Patch:
@@ -20,7 +20,7 @@ public void start() throws Exception {
       // Create batch read stream
       BatchReadStream readStream = new BatchReadStream(socket);
 
-      // Pause reading data (before pumping)
+      // Pause reading data
       readStream.pause();
 
       // Create batch write stream

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/database/mongo/Client.java
Patch:
@@ -1,6 +1,6 @@
 package io.vertx.example.reactivex.database.mongo;
 
-import io.reactivex.Observable;
+import io.reactivex.Flowable;
 import io.vertx.core.json.JsonObject;
 import io.vertx.example.util.Runner;
 import io.vertx.reactivex.core.AbstractVerticle;
@@ -43,7 +43,7 @@ public void start() throws Exception {
 
   private void insertAndFind() {
     // Documents to insert
-    Observable<JsonObject> documents = Observable.just(
+    Flowable<JsonObject> documents = Flowable.just(
       new JsonObject().put("username", "temporalfox").put("firstname", "Julien").put("password", "bilto"),
       new JsonObject().put("username", "purplefox").put("firstname", "Tim").put("password", "wibble")
     );
@@ -52,7 +52,7 @@ private void insertAndFind() {
       .rxCreateCollection("users")
       .andThen(
         // After collection is created we insert each document
-        documents.flatMap(doc -> mongo.rxInsert("users", doc).toObservable())
+        documents.flatMap(doc -> mongo.rxInsert("users", doc).toFlowable())
       )
       .doOnNext(id -> {
         System.out.println("Inserted document " + id);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/eventbus/pingpong/PingPong.java
Patch:
@@ -19,7 +19,7 @@ public void start() throws Exception {
         EventBus eb = vertx.eventBus();
 
         eb.consumer(ADDRESS)
-                .toObservable()
+                .toFlowable()
                 .subscribe(message -> {
                     System.out.println("Received " + message.body());
                     message.reply("PONG");

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/eventbus/pubsub/Receiver.java
Patch:
@@ -20,9 +20,9 @@ public void start() throws Exception {
 
     EventBus eb = vertx.eventBus();
 
-    eb.consumer("news-feed").
-        toObservable().
-        subscribe(message -> System.out.println("Received news: " + message.body()));
+    eb.consumer("news-feed")
+      .toFlowable()
+      .subscribe(message -> System.out.println("Received news: " + message.body()));
 
     System.out.println("Ready!");
   }

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/eventbus/zipreplies/Receiver.java
Patch:
@@ -24,13 +24,13 @@ public void start() throws Exception {
     EventBus eb = vertx.eventBus();
 
     eb.consumer("heatsensor1").
-        toObservable().
+        toFlowable().
         subscribe(message -> {
           message.reply(9 + random1.nextInt(5));
         });
 
     eb.consumer("heatsensor2").
-        toObservable().
+      toFlowable().
         subscribe(message -> {
           message.reply(10 + random1.nextInt(3));
         });

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/client/reduce/Server.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>");
     });
     server.listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/client/simple/Client.java
Patch:
@@ -20,14 +20,14 @@ public static void main(String[] args) {
   public void start() throws Exception {
     HttpClient client = vertx.createHttpClient();
     HttpClientRequest req = client.request(HttpMethod.GET, 8080, "localhost", "/");
-    req.toObservable().
+    req.toFlowable().
 
-        // Status code check and -> Observable<Buffer>
+        // Status code check and -> Flowable<Buffer>
         flatMap(resp -> {
           if (resp.statusCode() != 200) {
             throw new RuntimeException("Wrong status code " + resp.statusCode());
           }
-          return resp.toObservable();
+          return resp.toFlowable();
         }).
 
         subscribe(data -> System.out.println("Server content " + data.toString("UTF-8")));

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/client/simple/Server.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>");
     });
     server.listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/client/unmarshalling/Client.java
Patch:
@@ -28,8 +28,8 @@ static class Data {
   public void start() throws Exception {
     HttpClient client = vertx.createHttpClient();
     HttpClientRequest req = client.request(HttpMethod.GET, 8080, "localhost", "/");
-    req.toObservable().
-      flatMap(HttpClientResponse::toObservable)
+    req.toFlowable().
+      flatMap(HttpClientResponse::toFlowable)
       .map(buffer -> buffer.toJsonObject().mapTo(Data.class))
       .subscribe(
         data -> System.out.println("Got response " + data.message));

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/client/unmarshalling/Server.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "application/json").end("{\"message\":\"Hello World\"}");
     });
     server.listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/client/zip/Server.java
Patch:
@@ -18,7 +18,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "application/json").end(new JsonObject().put("time", System.currentTimeMillis()).toString());
     });
     server.listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/http/server/echo/Server.java
Patch:
@@ -18,14 +18,14 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       HttpServerResponse resp = req.response();
       String contentType = req.getHeader("Content-Type");
       if (contentType != null) {
         resp.putHeader("Content-Type", contentType);
       }
       resp.setChunked(true);
-      req.toObservable().subscribe(
+      req.toFlowable().subscribe(
           resp::write,
           err -> {},
           resp::end

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/scheduler/blocking/Scheduled.java
Patch:
@@ -1,9 +1,9 @@
 package io.vertx.example.reactivex.scheduler.blocking;
 
+import io.reactivex.Flowable;
+import io.reactivex.Scheduler;
 import io.vertx.example.util.Runner;
 import io.vertx.reactivex.core.AbstractVerticle;
-import io.reactivex.Observable;
-import io.reactivex.Scheduler;
 
 /*
  * @author <a href="mailto:julien@julienviet.com">Julien Viet</a>
@@ -30,7 +30,7 @@ private String blockingLoad(String id) {
   @Override
   public void start() throws Exception {
 
-    Observable<String> o = Observable.just("someID1", "someID2", "someID3", "someID4");
+    Flowable<String> o = Flowable.just("someID1", "someID2", "someID3", "someID4");
 
     // This scheduler can execute blocking actions
     Scheduler scheduler = io.vertx.reactivex.core.RxHelper.blockingScheduler(vertx);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/scheduler/interval/Periodic.java
Patch:
@@ -1,9 +1,9 @@
 package io.vertx.example.reactivex.scheduler.interval;
 
+import io.reactivex.Flowable;
+import io.reactivex.Scheduler;
 import io.vertx.example.util.Runner;
 import io.vertx.reactivex.core.AbstractVerticle;
-import io.reactivex.Observable;
-import io.reactivex.Scheduler;
 
 import java.util.concurrent.TimeUnit;
 
@@ -24,7 +24,7 @@ public void start() throws Exception {
     Scheduler scheduler = io.vertx.reactivex.core.RxHelper.scheduler(vertx);
 
     // Create a periodic event stream using Vertx scheduler
-    Observable<Long> o = Observable.interval(1000, TimeUnit.MILLISECONDS, scheduler);
+    Flowable<Long> o = Flowable.interval(1000, TimeUnit.MILLISECONDS, scheduler);
 
     o.subscribe(item -> {
       System.out.println("Got item " + item + " on thread " + Thread.currentThread().getName());

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/web/client/simple/Server.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>");
     });
     server.listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/web/client/unmarshalling/Server.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "application/json").end("{\"message\":\"Hello World\"}");
     });
     server.listen(8080);

File: rxjava-2-examples/src/main/java/io/vertx/example/reactivex/web/client/zip/Server.java
Patch:
@@ -18,7 +18,7 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
     HttpServer server = vertx.createHttpServer();
-    server.requestStream().toObservable().subscribe(req -> {
+    server.requestStream().toFlowable().subscribe(req -> {
       req.response().putHeader("content-type", "application/json").end(new JsonObject().put("time", System.currentTimeMillis()).toString());
     });
     server.listen(8080);

File: core-examples/src/main/java/io/vertx/example/core/http/simple/Server.java
Patch:
@@ -17,6 +17,6 @@ public static void main(String[] args) {
   public void start() throws Exception {
     vertx.createHttpServer().requestHandler(req -> {
       req.response().putHeader("content-type", "text/html").end("<html><body><h1>Hello from vert.x!</h1></body></html>");
-    }).listen(8081);
+    }).listen(8080);
   }
 }

File: osgi-examples/src/test/java/io/vertx/example/osgi/it/VertxServiceIT.java
Patch:
@@ -46,8 +46,6 @@ public class VertxServiceIT {
   @Configuration
   public Option[] config() {
     return options(
-      // TODO hack
-      mavenBundle("org.jetbrains.kotlin", "kotlin-osgi-bundle").versionAsInProject(),
       mavenBundle("io.vertx", "vertx-core").versionAsInProject(),
 
       mavenBundle("io.netty", "netty-common").versionAsInProject(),

File: web-client-examples/src/main/java/io/vertx/example/webclient/response/jsonobject/Server.java
Patch:
@@ -21,7 +21,7 @@ public void start() throws Exception {
       req.response()
         .putHeader("Content/type", "application/json")
         .end(new JsonObject()
-          .put("firstName", "Date")
+          .put("firstName", "Dale")
           .put("lastName", "Cooper")
           .put("male", true)
           .encode()

File: web-client-examples/src/main/java/io/vertx/example/webclient/response/jsonpojo/Server.java
Patch:
@@ -27,7 +27,7 @@ public void start() throws Exception {
       req.response()
         .putHeader("Content/type", "application/json")
         .end(new JsonObject()
-          .put("firstName", "Date")
+          .put("firstName", "Dale")
           .put("lastName", "Cooper")
           .put("male", true)
           .encode()

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/formurlencoded/Server.java
Patch:
@@ -23,6 +23,8 @@ public void start() throws Exception {
         System.out.println("firstName: " + req.getFormAttribute("firstName"));
         System.out.println("lastName: " + req.getFormAttribute("lastName"));
         System.out.println("male: " + req.getFormAttribute("male"));
+
+        req.response().end();
       });
 
     }).listen(8080, listenResult -> {

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/helloworld/Server.java
Patch:
@@ -19,7 +19,7 @@ public void start() throws Exception {
     vertx.createHttpServer().requestHandler(req -> {
 
       req.bodyHandler(buff -> {
-        System.out.println("Receiving user " + buff + " from client ");
+        System.out.println("Receiving user " + buff.toString() + " from client ");
         req.response().end();
       });
 

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/jsonobject/Client.java
Patch:
@@ -23,7 +23,7 @@ public void start() throws Exception {
     WebClient client = WebClient.create(vertx);
 
     JsonObject user = new JsonObject()
-      .put("firstName", "Date")
+      .put("firstName", "Dale")
       .put("lastName", "Cooper")
       .put("male", true);
 

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/multipartform/Server.java
Patch:
@@ -23,6 +23,8 @@ public void start() throws Exception {
         System.out.println("firstName: " + req.getFormAttribute("firstName"));
         System.out.println("lastName: " + req.getFormAttribute("lastName"));
         System.out.println("male: " + req.getFormAttribute("male"));
+
+        req.response().end();
       });
 
     }).listen(8080, listenResult -> {

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/stream/Server.java
Patch:
@@ -19,7 +19,7 @@ public void start() throws Exception {
     vertx.createHttpServer().requestHandler(req -> {
 
       req.bodyHandler(buff -> {
-        System.out.println("Receiving user " + buff + " from client ");
+        System.out.println("Receiving user " + buff.toString() + " from client ");
         req.response().end();
       });
 

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/jsonobject/Client.java
Patch:
@@ -23,7 +23,7 @@ public void start() throws Exception {
     WebClient client = WebClient.create(vertx);
 
     JsonObject user = new JsonObject()
-      .put("firstName", "Date")
+      .put("firstName", "Dale")
       .put("lastName", "Cooper")
       .put("male", true);
 

File: web-client-examples/src/main/java/io/vertx/example/webclient/response/jsonobject/Server.java
Patch:
@@ -21,7 +21,7 @@ public void start() throws Exception {
       req.response()
         .putHeader("Content/type", "application/json")
         .end(new JsonObject()
-          .put("firstName", "Date")
+          .put("firstName", "Dale")
           .put("lastName", "Cooper")
           .put("male", true)
           .encode()

File: web-client-examples/src/main/java/io/vertx/example/webclient/response/jsonpojo/Server.java
Patch:
@@ -27,7 +27,7 @@ public void start() throws Exception {
       req.response()
         .putHeader("Content/type", "application/json")
         .end(new JsonObject()
-          .put("firstName", "Date")
+          .put("firstName", "Dale")
           .put("lastName", "Cooper")
           .put("male", true)
           .encode()

File: web-client-examples/src/main/java/io/vertx/example/webclient/send/formurlencoded/Server.java
Patch:
@@ -23,6 +23,8 @@ public void start() throws Exception {
         System.out.println("firstName: " + req.getFormAttribute("firstName"));
         System.out.println("lastName: " + req.getFormAttribute("lastName"));
         System.out.println("male: " + req.getFormAttribute("male"));
+
+        req.response().end();
       });
 
     }).listen(8080, listenResult -> {

File: mqtt-server-examples/src/main/java/io/vertx/example/mqtt/server/app/App.java
Patch:
@@ -55,7 +55,7 @@ public void start() throws Exception {
             " QoS = " + endpoint.will().willQos() + " isRetain = " + endpoint.will().isWillRetain() + "]");
         }
 
-        System.out.println("[keep alive timeout = " + endpoint.keepAliveTimeoutSeconds() + "]");
+        System.out.println("[keep alive timeout = " + endpoint.keepAliveTimeSeconds() + "]");
 
         // accept connection from the remote client
         endpoint.accept(false);

File: maven-service-factory-examples/maven-service-factory-api/src/main/java/io/vertx/examples/MyDeployingVerticle.java
Patch:
@@ -13,7 +13,7 @@ public class MyDeployingVerticle extends AbstractVerticle {
   public void start(Future<Void> future) throws Exception {
     // The `my-verticle` is deployed using the following convention:
     // `maven:` + groupId + `:` + artifactId + `:` + version + `::` + verticle name
-    vertx.deployVerticle("maven:io.vertx:maven-service-factory-verticle:3.3.3::my-verticle",
+    vertx.deployVerticle("maven:io.vertx:maven-service-factory-verticle:3.4.0-SNAPSHOT::my-verticle",
         ar -> {
           if (ar.succeeded()) {
             future.complete();

File: spring-examples/springboot-example/src/main/java/io/vertx/example/Application.java
Patch:
@@ -4,7 +4,6 @@
 import io.vertx.core.Vertx;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 import javax.annotation.PostConstruct;
@@ -18,7 +17,7 @@ public class Application {
   public static void main(String[] args) {
 
     // This is basically the same example as the web-examples static site example but it's booted using
-    // SpringBoot, not Vert.x
+    // Spring Boot, not Vert.x
     SpringApplication.run(Application.class, args);
   }
 

File: osgi-examples/src/main/java/io/vertx/example/osgi/VertxWebApplication.java
Patch:
@@ -71,7 +71,7 @@ private void handleGetProduct(RoutingContext routingContext) {
       if (product == null) {
         sendError(404, response);
       } else {
-        response.putHeader("content-type", "application/json").end(product.encodePrettily());
+        response.putHeader("content-type", "application/json").end(product.encode());
       }
     }
   }

File: resteasy-examples/src/main/java/io/vertx/examples/resteasy/asyncresponse/Server.java
Patch:
@@ -20,7 +20,8 @@ public void start() throws Exception {
     // Start the front end server using the Jax-RS controller
     vertx.createHttpServer()
         .requestHandler(new VertxRequestHandler(vertx, deployment))
-        .listen(8080);
-    System.out.println("started");
+        .listen(8080, ar -> {
+          System.out.println("Server started on port "+ ar.result().actualPort());
+        });
   }
 }

File: resteasy-examples/src/main/java/io/vertx/examples/resteasy/helloworld/Server.java
Patch:
@@ -27,8 +27,8 @@ public void start() throws Exception {
     vertx.createHttpServer()
         .requestHandler(new VertxRequestHandler(vertx, deployment))
         .listen(8080, ar -> {
-          System.out.println(ar.succeeded());
+          System.out.println("Server started on port "+ ar.result().actualPort());
         });
-    System.out.println("started");
+
   }
 }

File: osgi-examples/src/main/java/io/vertx/example/osgi/VertxHttpClientVerticle.java
Patch:
@@ -1,6 +1,7 @@
 package io.vertx.example.osgi;
 
 import io.vertx.core.AbstractVerticle;
+import io.vertx.core.http.HttpClient;
 import org.apache.felix.ipojo.annotations.Component;
 import org.apache.felix.ipojo.annotations.Instantiate;
 import org.apache.felix.ipojo.annotations.Provides;
@@ -20,7 +21,8 @@ public class VertxHttpClientVerticle extends AbstractVerticle {
 
   @Override
   public void start() throws Exception {
-    getVertx().createHttpClient().getNow("perdu.com", "/", response -> {
+    HttpClient client = vertx.createHttpClient();
+    client.getNow("perdu.com", "/", response -> {
       response.bodyHandler(buffer -> LOGGER.info(buffer.toString("UTF-8")));
     });
   }

File: maven-service-factory-examples/maven-service-factory-api/src/main/java/io/vertx/examples/MyDeployingVerticle.java
Patch:
@@ -13,7 +13,7 @@ public class MyDeployingVerticle extends AbstractVerticle {
   public void start(Future<Void> future) throws Exception {
     // The `my-verticle` is deployed using the following convention:
     // `maven:` + groupId + `:` + artifactId + `:` + version + `::` + verticle name
-    vertx.deployVerticle("maven:io.vertx:maven-service-factory-verticle:3.3.0::my-verticle",
+    vertx.deployVerticle("maven:io.vertx:maven-service-factory-verticle:3.3.0.CR1::my-verticle",
         ar -> {
           if (ar.succeeded()) {
             future.complete();

File: maven-service-factory-examples/maven-service-factory-api/src/main/java/io/vertx/examples/MyDeployingVerticle.java
Patch:
@@ -13,7 +13,7 @@ public class MyDeployingVerticle extends AbstractVerticle {
   public void start(Future<Void> future) throws Exception {
     // The `my-verticle` is deployed using the following convention:
     // `maven:` + groupId + `:` + artifactId + `:` + version + `::` + verticle name
-    vertx.deployVerticle("maven:io.vertx:maven-service-factory-verticle:3.3.0.CR1::my-verticle",
+    vertx.deployVerticle("maven:io.vertx:maven-service-factory-verticle:3.3.0::my-verticle",
         ar -> {
           if (ar.succeeded()) {
             future.complete();

File: amqp-bridge-examples/src/main/java/io/vertx/example/amqp/Receiver.java
Patch:
@@ -15,8 +15,8 @@
 */
 package io.vertx.example.amqp;
 
-import io.vertx.amqp.bridge.AmqpBridge;
-import io.vertx.amqp.bridge.AmqpConstants;
+import io.vertx.amqpbridge.AmqpBridge;
+import io.vertx.amqpbridge.AmqpConstants;
 import io.vertx.core.AbstractVerticle;
 import io.vertx.core.eventbus.MessageConsumer;
 import io.vertx.core.json.JsonObject;

File: amqp-bridge-examples/src/main/java/io/vertx/example/amqp/Sender.java
Patch:
@@ -15,8 +15,8 @@
 */
 package io.vertx.example.amqp;
 
-import io.vertx.amqp.bridge.AmqpBridge;
-import io.vertx.amqp.bridge.AmqpConstants;
+import io.vertx.amqpbridge.AmqpBridge;
+import io.vertx.amqpbridge.AmqpConstants;
 import io.vertx.core.AbstractVerticle;
 import io.vertx.core.eventbus.MessageProducer;
 import io.vertx.core.json.JsonObject;

File: web-examples/src/main/java/io/vertx/example/web/templating/freemarker/Server.java
Patch:
@@ -25,13 +25,13 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
 
-    // In order to use a template we first need to create an engine
-    final FreeMarkerTemplateEngine engine = FreeMarkerTemplateEngine.create();
-
     // To simplify the development of the web components we use a Router to route all HTTP requests
     // to organize our code in a reusable way.
     final Router router = Router.router(vertx);
 
+    // In order to use a template we first need to create an engine
+    final FreeMarkerTemplateEngine engine = FreeMarkerTemplateEngine.create();
+
     // Entry point to the application, this will render a custom template.
     router.get().handler(ctx -> {
       // we define a hardcoded title for our application

File: web-examples/src/main/java/io/vertx/example/web/templating/handlebars/Server.java
Patch:
@@ -26,13 +26,13 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
 
-    // In order to use a template we first need to create an engine
-    final HandlebarsTemplateEngine engine = HandlebarsTemplateEngine.create();
-
     // To simplify the development of the web components we use a Router to route all HTTP requests
     // to organize our code in a reusable way.
     final Router router = Router.router(vertx);
 
+    // In order to use a template we first need to create an engine
+    final HandlebarsTemplateEngine engine = HandlebarsTemplateEngine.create();
+
     // Entry point to the application, this will render a custom template.
     router.get().handler(ctx -> {
       // we define a hardcoded title for our application

File: web-examples/src/main/java/io/vertx/example/web/templating/jade/Server.java
Patch:
@@ -26,13 +26,13 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
 
-    // In order to use a template we first need to create an engine
-    final JadeTemplateEngine engine = JadeTemplateEngine.create();
-
     // To simplify the development of the web components we use a Router to route all HTTP requests
     // to organize our code in a reusable way.
     final Router router = Router.router(vertx);
 
+    // In order to use a template we first need to create an engine
+    final JadeTemplateEngine engine = JadeTemplateEngine.create();
+
     // Entry point to the application, this will render a custom template.
     router.get().handler(ctx -> {
       // we define a hardcoded title for our application

File: web-examples/src/main/java/io/vertx/example/web/templating/pebble/Server.java
Patch:
@@ -25,13 +25,13 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
 
-    // In order to use a template we first need to create an engine
-    final PebbleTemplateEngine engine = PebbleTemplateEngine.create();
-
     // To simplify the development of the web components we use a Router to route all HTTP requests
     // to organize our code in a reusable way.
     final Router router = Router.router(vertx);
 
+    // In order to use a template we first need to create an engine
+    final PebbleTemplateEngine engine = PebbleTemplateEngine.create();
+
     // Entry point to the application, this will render a custom template.
     router.get().handler(ctx -> {
       // we define a hardcoded title for our application

File: web-examples/src/main/java/io/vertx/example/web/templating/thymeleaf/Server.java
Patch:
@@ -26,13 +26,13 @@ public static void main(String[] args) {
   @Override
   public void start() throws Exception {
 
-    // In order to use a JADE template we first need to create an engine
-    final ThymeleafTemplateEngine engine = ThymeleafTemplateEngine.create();
-
     // To simplify the development of the web components we use a Router to route all HTTP requests
     // to organize our code in a reusable way.
     final Router router = Router.router(vertx);
 
+    // In order to use a Thymeleaf template we first need to create an engine
+    final ThymeleafTemplateEngine engine = ThymeleafTemplateEngine.create();
+
     // Entry point to the application, this will render a custom JADE template.
     router.get().handler(ctx -> {
       // we define a hardcoded title for our application

File: jgroups-examples/src/main/java/io/vertx/example/jgroups/ConsumerApp.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.ignite;
+package io.vertx.example.jgroups;
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;

File: jgroups-examples/src/main/java/io/vertx/example/jgroups/NetworkUtils.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.ignite;
+package io.vertx.example.jgroups;
 
 import java.net.Inet4Address;
 import java.net.UnknownHostException;

File: jgroups-examples/src/main/java/io/vertx/example/jgroups/ProducerApp.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.ignite;
+package io.vertx.example.jgroups;
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;

File: mail-examples/src/main/java/io/vertx/example/mail/MailImages.java
Patch:
@@ -1,7 +1,6 @@
 package io.vertx.example.mail;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 import io.vertx.core.AbstractVerticle;
@@ -38,7 +37,7 @@ public void start() {
 
     List<MailAttachment> list=new ArrayList<>();
     MailAttachment attachment = new MailAttachment();
-    attachment.setData(vertx.fileSystem().readFileBlocking("logo-white-big.png"));
+    attachment.setData(vertx.fileSystem().readFileBlocking("../../../../../../../logo-white-big.png"));
     attachment.setContentType("image/png");
     attachment.setName("logo-white-big.png");
     attachment.setDisposition("inline");

File: osgi-examples/src/main/java/io/vertx/example/osgi/VertxActivator.java
Patch:
@@ -23,9 +23,8 @@ public void start(BundleContext context) throws Exception {
     Vertx vertx = Vertx.vertx();
     vertxRegistration = context.registerService(Vertx.class, vertx, null);
     LOGGER.info("Vert.x service registered");
-    vertxRegistration = context.registerService(Vertx.class, vertx, null);
-    LOGGER.info("Vert.x Event Bus service registered");
     ebRegistration = context.registerService(EventBus.class, vertx.eventBus(), null);
+    LOGGER.info("Vert.x Event Bus service registered");
   }
 
   @Override

File: ignite-examples/src/main/java/io/vertx/example/ignite/ConsumerApp.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.jgroups;
+package io.vertx.example.ignite;
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;

File: ignite-examples/src/main/java/io/vertx/example/ignite/NetworkUtils.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.jgroups;
+package io.vertx.example.ignite;
 
 import java.net.Inet4Address;
 import java.net.UnknownHostException;

File: ignite-examples/src/main/java/io/vertx/example/ignite/ProducerApp.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.jgroups;
+package io.vertx.example.ignite;
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;

File: jgroups-examples/src/main/java/io/vertx/example/ignite/ConsumerApp.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.jgroups;
+package io.vertx.example.ignite;
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;

File: jgroups-examples/src/main/java/io/vertx/example/ignite/NetworkUtils.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.jgroups;
+package io.vertx.example.ignite;
 
 import java.net.Inet4Address;
 import java.net.UnknownHostException;

File: jgroups-examples/src/main/java/io/vertx/example/ignite/ProducerApp.java
Patch:
@@ -1,4 +1,4 @@
-package io.vertx.example.jgroups;
+package io.vertx.example.ignite;
 
 import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;

File: spring-examples/spring-example/src/main/java/io/vertx/examples/spring/context/ExampleSpringConfiguration.java
Patch:
@@ -62,7 +62,6 @@ public LocalContainerEntityManagerFactoryBean entityManagerFactory(final DataSou
     jpaProperties.put("hibernate.hbm2ddl.auto", env.getProperty("hibernate.hbm2ddl.auto"));
     jpaProperties.put("hibernate.show_sql", env.getProperty("hibernate.show_sql"));
     factory.setJpaProperties(jpaProperties);
-    factory.afterPropertiesSet();
     return factory;
   }
 

File: service-proxy-examples/service-provider/src/main/generated/io/vertx/examples/service/ProcessorServiceVertxProxyHandler.java
Patch:
@@ -136,8 +136,7 @@ private <T> Handler<AsyncResult<T>> createHandler(Message msg) {
       if (res.failed()) {
         msg.fail(-1, res.cause().getMessage());
       } else {
-        msg.reply(res.result());
-      }
+        if (res.result() != null  && res.result().getClass().isEnum()) {          msg.reply(((Enum) res.result()).name());        } else {          msg.reply(res.result());        }      }
     };
   }
 

File: shell-examples/src/main/java/io/vertx/example/shell/echokeyboard/EchoKeyboardCommand.java
Patch:
@@ -31,7 +31,7 @@ public void start() throws Exception {
         processHandler(process -> {
 
           // Echo
-          process.setStdin(keys -> {
+          process.stdinHandler(keys -> {
             process.write(keys.replace('\r', '\n'));
           });
 

File: shell-examples/src/main/java/io/vertx/example/shell/termcast/ScreenCaster.java
Patch:
@@ -20,7 +20,7 @@ public ScreenCaster(Vertx vertx, Robot robot, Term term) {
     this.vertx = vertx;
     this.robot = robot;
     this.term = term;
-    term.setStdin(keys -> {
+    term.stdinHandler(keys -> {
       // Ctrl-C or Ctrl-D
       if (keys.contains("\u0003") || keys.contains("\u0004")) {
         interrupted = true;
@@ -73,7 +73,7 @@ private void broadcast() {
         }
       }
     }
-    term.stdout().write(sb.toString());
+    term.write(sb.toString());
     vertx.setTimer(100, v -> broadcast());
   }
 }

File: service-proxy-examples/service-provider/src/main/generated/io/vertx/examples/service/ProcessorServiceVertxProxyHandler.java
Patch:
@@ -136,7 +136,8 @@ private <T> Handler<AsyncResult<T>> createHandler(Message msg) {
       if (res.failed()) {
         msg.fail(-1, res.cause().getMessage());
       } else {
-        if (res.result() != null  && res.result().getClass().isEnum()) {          msg.reply(((Enum) res.result()).name());        } else {          msg.reply(res.result());        }      }
+        msg.reply(res.result());
+      }
     };
   }
 

File: shell-examples/src/main/java/io/vertx/example/shell/echokeyboard/EchoKeyboardCommand.java
Patch:
@@ -45,7 +45,7 @@ public void start() throws Exception {
     ShellService service = ShellService.create(vertx, new ShellServiceOptions().setTelnetOptions(
         new TelnetTermOptions().setHost("localhost").setPort(3000)
     ));
-    CommandRegistry.get(vertx).registerCommand(starwars);
+    CommandRegistry.getShared(vertx).registerCommand(starwars);
     service.start(ar -> {
       if (!ar.succeeded()) {
         ar.cause().printStackTrace();

File: shell-examples/src/main/java/io/vertx/example/shell/helloworld/HelloWorldCommand.java
Patch:
@@ -31,7 +31,7 @@ public void start() throws Exception {
     ShellService service = ShellService.create(vertx, new ShellServiceOptions().setTelnetOptions(
         new TelnetTermOptions().setHost("localhost").setPort(3000)
     ));
-    CommandRegistry.get(vertx).registerCommand(helloWorld);
+    CommandRegistry.getShared(vertx).registerCommand(helloWorld);
     service.start(ar -> {
       if (!ar.succeeded()) {
         ar.cause().printStackTrace();

File: shell-examples/src/main/java/io/vertx/example/shell/starwars/StarwarsCommand.java
Patch:
@@ -60,7 +60,7 @@ public void start() throws Exception {
     ShellService service = ShellService.create(vertx, new ShellServiceOptions().setTelnetOptions(
         new TelnetTermOptions().setHost("localhost").setPort(3000)
     ));
-    CommandRegistry.get(vertx).registerCommand(starwars);
+    CommandRegistry.getShared(vertx).registerCommand(starwars);
     service.start(ar -> {
       if (!ar.succeeded()) {
         ar.cause().printStackTrace();

File: shell-examples/src/main/java/io/vertx/example/shell/top/TopCommand.java
Patch:
@@ -74,7 +74,7 @@ public void start() throws Exception {
     ShellService service = ShellService.create(vertx, new ShellServiceOptions().setTelnetOptions(
         new TelnetTermOptions().setHost("localhost").setPort(3000)
     ));
-    CommandRegistry.get(vertx).registerCommand(starwars);
+    CommandRegistry.getShared(vertx).registerCommand(starwars);
     service.start(ar -> {
       if (!ar.succeeded()) {
         ar.cause().printStackTrace();

File: shell-examples/src/main/java/io/vertx/example/shell/wget/WgetCommand.java
Patch:
@@ -72,7 +72,7 @@ public void start() throws Exception {
     ShellService service = ShellService.create(vertx, new ShellServiceOptions().setTelnetOptions(
         new TelnetTermOptions().setHost("localhost").setPort(3000)
     ));
-    CommandRegistry.get(vertx).registerCommand(helloWorld);
+    CommandRegistry.getShared(vertx).registerCommand(helloWorld);
     service.start(ar -> {
       if (!ar.succeeded()) {
         ar.cause().printStackTrace();

File: metrics-examples/src/main/java/io/vertx/example/metrics/dashboard/Dashboard.java
Patch:
@@ -19,7 +19,6 @@
 import io.vertx.core.AbstractVerticle;
 import io.vertx.core.http.HttpServer;
 import io.vertx.core.json.JsonObject;
-import io.vertx.example.util.ExampleRunner;
 import io.vertx.example.util.Runner;
 import io.vertx.ext.dropwizard.MetricsService;
 import io.vertx.ext.web.Router;
@@ -36,7 +35,7 @@
 public class Dashboard extends AbstractVerticle {
   // Convenience method so you can run it in your IDE
   public static void main(String[] args) {
-    ExampleRunner.runJavaExample("metrics-examples/src/main/java/", Dashboard.class, Runner.DROPWIZARD_OPTIONS);
+    Runner.runExample(Dashboard.class);
   }
 
   @Override

File: shell-examples/src/main/java/io/vertx/example/shell/helloworld/HelloWorldCommand.java
Patch:
@@ -5,6 +5,7 @@
 import io.vertx.ext.shell.ShellService;
 import io.vertx.ext.shell.ShellServiceOptions;
 import io.vertx.ext.shell.command.Command;
+import io.vertx.ext.shell.command.CommandProcess;
 import io.vertx.ext.shell.net.TelnetOptions;
 
 /*
@@ -22,7 +23,8 @@ public void start() throws Exception {
 
     Command helloWorld = Command.builder("hello-world").
         processHandler(process -> {
-          process.write("hello world\n").end();
+          process.write("hello world\n");
+          process.end();
         }).build();
 
     ShellService service = ShellService.create(vertx, new ShellServiceOptions().setTelnetOptions(

File: core-examples/src/main/java/io/vertx/example/core/ha/Server.java
Patch:
@@ -1,6 +1,8 @@
 package io.vertx.example.core.ha;
 
 import io.vertx.core.AbstractVerticle;
+import io.vertx.core.Launcher;
+import io.vertx.core.Vertx;
 import io.vertx.core.VertxOptions;
 import io.vertx.example.util.ExampleRunner;
 import io.vertx.example.util.Runner;
@@ -17,8 +19,7 @@ public class Server extends AbstractVerticle {
 
   // Convenience method so you can run it in your IDE
   public static void main(String[] args) {
-    ExampleRunner.runJavaExample("core-examples/src/main/java",
-        Server.class, new VertxOptions().setHAEnabled(true));
+    Launcher.main(new String[] { "run", Server.class.getName(), "-ha"});
   }
 
   @Override

File: mongo-examples/src/main/java/io/vertx/examples/mongo/MongoClientVerticle.java
Patch:
@@ -20,7 +20,7 @@ public void start() throws Exception {
 
         MongoClient mongoClient = MongoClient.createShared(vertx, mongoconfig);
 
-        JsonObject product1 = new JsonObject().put("itemId", "12345").put("name", "Cooler").put("price", 100.0);
+        JsonObject product1 = new JsonObject().put("itemId", "12345").put("name", "Cooler").put("price", "100.0");
 
         mongoClient.save("products", product1, id -> {
             System.out.println("Inserted id: " + id.result());

File: maven-verticle/src/main/java/io/vertx/example/HelloWorldVerticle.java
Patch:
@@ -7,7 +7,9 @@ public class HelloWorldVerticle extends AbstractVerticle {
   @Override
   public void start() {
     // Create an HTTP server which simply returns "Hello World!" to each request.
-    vertx.createHttpServer().requestHandler(req -> req.response().end("Hello World!")).listen(8080);
+    // If a configuration is set it get the specified name
+    String name = config().getString("name", "World");
+    vertx.createHttpServer().requestHandler(req -> req.response().end("Hello " + name + "!")).listen(8080);
   }
 }
 

File: service-proxy-examples/service-provider/src/main/java/io/vertx/examples/service/ProcessorServiceVerticle.java
Patch:
@@ -15,8 +15,8 @@ public void start() throws Exception {
     // Create the client object
     service = new ProcessorServiceImpl();
     // Register the handler
-    new ProcessorServiceVertxProxyHandler(vertx, service, "vertx.processor")
-        .registerHandler();
+    new ProcessorServiceVertxProxyHandler(vertx, service)
+        .registerHandler("vertx.processor");
   }
 
 }

File: service-proxy-examples/service-provider/src/main/java/io/vertx/examples/service/ProcessorServiceVerticle.java
Patch:
@@ -15,8 +15,8 @@ public void start() throws Exception {
     // Create the client object
     service = new ProcessorServiceImpl();
     // Register the handler
-    new ProcessorServiceVertxProxyHandler(vertx, service, "vertx.processor")
-        .registerHandler();
+    new ProcessorServiceVertxProxyHandler(vertx, service)
+        .registerHandler("vertx.processor");
   }
 
 }

File: web-examples/src/main/java/io/vertx/example/web/upload/Server.java
Patch:
@@ -1,7 +1,6 @@
 package io.vertx.example.web.upload;
 
 import io.vertx.core.AbstractVerticle;
-import io.vertx.core.http.HttpHeaders;
 import io.vertx.example.util.Runner;
 import io.vertx.ext.web.FileUpload;
 import io.vertx.ext.web.Router;
@@ -41,7 +40,7 @@ public void start() throws Exception {
 
     // handle the form
     router.post("/form").handler(ctx -> {
-      ctx.response().putHeader(HttpHeaders.CONTENT_TYPE, "text/plain");
+      ctx.response().putHeader("Content-Type", "text/plain");
 
       ctx.response().setChunked(true);
 

File: unit-examples/src/test/java/io/vertx/example/unit/test/MyJUnitTest.java
Patch:
@@ -43,9 +43,9 @@ public void test1(TestContext context) {
     Async async = context.async();
     client.getNow(8080, "localhost", "/", resp -> {
       resp.bodyHandler(body -> {
-          context.assertEquals("foo", body.toString());
-          client.close();
-          async.complete();
+        context.assertEquals("foo", body.toString());
+        client.close();
+        async.complete();
       });
     });
   }

File: rx-examples/src/main/java/io/vertx/example/rxjava/database/mongo/Client.java
Patch:
@@ -24,7 +24,7 @@ public void start() throws Exception {
         .put("db_name", "my_DB");
 
     // Deploy an embedded mongo database so we can test against that
-    vertx.deployVerticle("service:io.vertx.mongo-embedded-db", db -> {
+    vertx.deployVerticle("service:io.vertx.vertx-mongo-embedded-db", db -> {
       if (db.succeeded()) {
 
         // Create the client

File: metrics-examples/src/main/java/io/vertx/example/metrics/dashboard/Dashboard.java
Patch:
@@ -29,7 +29,6 @@
 import io.vertx.ext.dropwizard.DropwizardMetricsOptions;
 import io.vertx.ext.dropwizard.MetricsService;
 
-import java.util.Map;
 import java.util.Random;
 
 /**
@@ -69,8 +68,8 @@ public void start() {
 
     // Send a metrics events every second
     vertx.setPeriodic(1000, t -> {
-      Map metrics = service.getMetricsSnapshot(vertx.eventBus());
-      vertx.eventBus().publish("metrics", new JsonObject(metrics));
+      JsonObject metrics = service.getMetricsSnapshot(vertx.eventBus());
+      vertx.eventBus().publish("metrics", metrics);
     });
 
     // Send some messages

File: core-examples/src/main/java/io/vertx/example/core/eventbus/pubsub/Sender.java
Patch:
@@ -1,7 +1,7 @@
 package io.vertx.example.core.eventbus.pubsub;
 
-import io.vertx.rxjava.core.AbstractVerticle;
-import io.vertx.rxjava.core.eventbus.EventBus;
+import io.vertx.core.AbstractVerticle;
+import io.vertx.core.eventbus.EventBus;
 import io.vertx.example.util.Runner;
 
 /*

File: core-examples/src/main/java/io/vertx/example/core/eventbus/pubsub/Sender.java
Patch:
@@ -1,7 +1,7 @@
 package io.vertx.example.core.eventbus.pubsub;
 
-import io.vertx.core.AbstractVerticle;
-import io.vertx.core.eventbus.EventBus;
+import io.vertx.rxjava.core.AbstractVerticle;
+import io.vertx.rxjava.core.eventbus.EventBus;
 import io.vertx.example.util.Runner;
 
 /*

