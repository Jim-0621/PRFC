File: src/problems/hard/FreqStack.java
Patch:
@@ -13,7 +13,7 @@ public class FreqStack {
 
     public FreqStack() {
         q = new PriorityQueue<>();
-        Map<Integer, Pair> map = new HashMap<>();
+        map = new HashMap<>();
     }
 
     public void push(int x) {

File: src/amazon/First.java
Patch:
@@ -6,6 +6,6 @@
 public class First {
 
     public static void main(String[] args) {
-
+        System.out.println("hello");
     }
 }

File: src/algo/graph/BellmanFord.java
Patch:
@@ -12,10 +12,10 @@
  * Created by sherxon on 1/7/17.
  */
 /**
-* This Bellman Ford shortest path algorithm. It works with negative edges and and if there negative cycle
+* This Bellman Ford shortest path algorithm. It works with negative edges and if there negative cycle
  * the algorithm reports. Time complexity is O(V*E) if E is V^2 , we can say that O(V^3).
  * This is slower than Dijkstra shortest path algorithm which works for only non-negative edges in O(VLogV)
- * with fibonacci heap.
+ * with Fibonacci heap.
 * */
 public class BellmanFord {
     WeightedGraph graph;

File: src/algo/graph/Dijsktra.java
Patch:
@@ -14,7 +14,7 @@
 /**
 * This is the algorithm to find shortest Path in weighted and non-negative edged graph. Graph can be directed
 * or undirected. This is not optimized version as shortestPath() method searches vertex with minimal weight
-* every time. To optimize fibonacci heap can be used. This algorithm finds shortest path from source vertex
+* every time. To optimize Fibonacci heap can be used. This algorithm finds shortest path from source vertex
 * to all other reachable vertexes. Time complexity is O(VE)
 * */
 public class Dijsktra {

File: src/algo/numerals/FermatPrimality.java
Patch:
@@ -15,7 +15,7 @@
  * the value n is called a Fermat liar because it incorrectly implies that p is prime.
  * If np–1 Mod p ≠ 1, n is called a Fermat witness because it proves that p is
  * not prime
- * We can use many test to remove fermats lier. For example, if p passes the test 10 times, there is a 1/210 ≈ 0.00098 probability
+ * We can use many test to remove Fermat liar. For example, if p passes the test 10 times, there is a 1/210 ≈ 0.00098 probability
  * that p is not prime
  */
 public class FermatPrimality {

File: src/algo/string/Trie.java
Patch:
@@ -5,7 +5,7 @@
  */
 
 /**
- * This is prefix truee, which consumes alot memory but very fast.
+ * This is prefix tree, which consumes a lot memory but very fast.
  */
 public class Trie {
 
@@ -75,7 +75,7 @@ public TrieNode(char c) {
 
 
 /*
-This is recursive, one-class aproach, but it has small bug that I could not find it in 2 hours.
+This is recursive, one-class approach, but it has small bug that I could not find it in 2 hours.
 public class Trie {
 
     int[] a= new int[26];

File: src/interviewquestions/easy/DeleteNodeSingleLinkedList.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class DeleteNodeSingleLinkedList {
     /**
-     * Case: We have only list node which is not last element. To remove this node, we can chnage its value
+     * Case: We have only list node which is not last element. To remove this node, we can change its value
      * and set pointer to next of next.
      */
     public void deleteNode(ListNode x) {

File: src/interviewquestions/easy/ImplementstrSt.java
Patch:
@@ -6,7 +6,7 @@
 public class ImplementstrSt {
     /**
      * There are two solutions for this problem. One is using RabinKarp Algorithm and the second one is using
-     * Java's index of algorithm i.e searching starting point of needle from haystack and comparing neeedle.
+     * Java's index of algorithm i.e. searching starting point of needle from haystack and comparing needle.
      * Time complexity in both algorithms is average O(n+m) and in the worst case O(mn);
      */
 

File: src/interviewquestions/easy/RansomNote.java
Patch:
@@ -14,7 +14,7 @@
 public class RansomNote {
 
     /**
-     * The idea is to create an array with length of 26 (english letters) and store each frequency of each letter.
+     * The idea is to create an array with length of 26 (English letters) and store each frequency of each letter.
      * and remove ransom note letters from array. if certain character count in array is 0, that means ransom note has a
      * character that is not included on magazine.
      */

File: src/interviewquestions/hard/PostOrderTraversalTree.java
Patch:
@@ -53,6 +53,6 @@ void postOrderIt(TreeNode root, List<Integer> list){
 
 2.3. push the right child of popped item to stack.
 
-reverse the ouput.
+reverse the output.
 
 * */

File: src/interviewquestions/medium/Searcha2DMatrixII.java
Patch:
@@ -23,9 +23,9 @@ boolean searchMatrix(int[][] a, int target) {
 
     /**
      * We start search the matrix from top right corner, initialize the current position to top right corner,
-     * if the target is greater than the value in current position, then the target can not be in entire row
+     * if the target is greater than the value in current position, then the target cannot be in entire row
      * of current position because the row is sorted, if the target is less than the value in current position,
-     * then the target can not in the entire column because the column is sorted too. We can rule out one row or
+     * then the target cannot be in the entire column because the column is sorted too. We can rule out one row or
      * one column each time,
      * so the time complexity is O(m+n).
      */

File: src/timus/GenealogicalTree.java
Patch:
@@ -58,10 +58,10 @@ public void addVertex(Integer v){
             V newV= new V(v);
             vertices.putIfAbsent(v, newV);
         }
-        public void addEdge(Integer from, Integer to, int weigth){
+        public void addEdge(Integer from, Integer to, int weight){
             V fromV=vertices.get(from);
             V toV=vertices.get(to);
-            E e= new E(fromV, toV, weigth);
+            E e= new E(fromV, toV, weight);
             fromV.edges.add(e); // directed graph
         }
 

File: src/timus/SegmentTree.java
Patch:
@@ -8,8 +8,8 @@
 public class SegmentTree {
     public static void main(String[] args) {
         int[] a=new int[]{-1, 2, 4, 0};
-        int treeSize=a.length*2-1;// if power of two, just multiply by two and substract one
-        // else find nextpower of two and multiple by 2 and sabstruct one;
+        int treeSize=a.length*2-1;// if power of two, just multiply by two and subtract one
+        // else find next power of two and multiple by 2 and subtract one;
         int[] tree= new int[treeSize];
         for (int i = 0; i < treeSize; i++) {
             tree[i]=Integer.MAX_VALUE; // to build min segment tree

File: src/ds/LinkedList.java
Patch:
@@ -24,7 +24,7 @@ public void add(E element) {
     }
 
     public E get(int index) {
-        if (index >= size && index < 0) // check boundaries
+        if (index >= size || index < 0) // check boundaries
             throw new NoSuchElementException();
 
         // find element at given index

File: src/interviewquestions/easy/ContainsDuplicate.java
Patch:
@@ -14,7 +14,7 @@ public class ContainsDuplicate {
     public boolean containsDuplicate(int[] nums) {
         Set<Integer> set = new HashSet<>();
         for (int i : nums) {
-            if (!set.add(-2 * i)) return true;
+            if (!set.add(i)) return true;
         }
         return false;
     }

File: src/ds/LinkedList.java
Patch:
@@ -24,7 +24,7 @@ public void add(E element) {
     }
 
     public E get(int index) {
-        if (index >= size && index < 0) // check boundaries
+        if (index >= size || index < 0) // check boundaries
             throw new NoSuchElementException();
 
         // find element at given index

File: src/algo/graph/BellmanFord.java
Patch:
@@ -12,10 +12,10 @@
  * Created by sherxon on 1/7/17.
  */
 /**
-* This Bellman Ford shortest path algorithm. It works with negative edges and and if there negative cycle
+* This Bellman Ford shortest path algorithm. It works with negative edges and if there negative cycle
  * the algorithm reports. Time complexity is O(V*E) if E is V^2 , we can say that O(V^3).
  * This is slower than Dijkstra shortest path algorithm which works for only non-negative edges in O(VLogV)
- * with fibonacci heap.
+ * with Fibonacci heap.
 * */
 public class BellmanFord {
     WeightedGraph graph;

File: src/algo/graph/Dijsktra.java
Patch:
@@ -14,7 +14,7 @@
 /**
 * This is the algorithm to find shortest Path in weighted and non-negative edged graph. Graph can be directed
 * or undirected. This is not optimized version as shortestPath() method searches vertex with minimal weight
-* every time. To optimize fibonacci heap can be used. This algorithm finds shortest path from source vertex
+* every time. To optimize Fibonacci heap can be used. This algorithm finds shortest path from source vertex
 * to all other reachable vertexes. Time complexity is O(VE)
 * */
 public class Dijsktra {

File: src/algo/numerals/FermatPrimality.java
Patch:
@@ -15,7 +15,7 @@
  * the value n is called a Fermat liar because it incorrectly implies that p is prime.
  * If np–1 Mod p ≠ 1, n is called a Fermat witness because it proves that p is
  * not prime
- * We can use many test to remove fermats lier. For example, if p passes the test 10 times, there is a 1/210 ≈ 0.00098 probability
+ * We can use many test to remove Fermat liar. For example, if p passes the test 10 times, there is a 1/210 ≈ 0.00098 probability
  * that p is not prime
  */
 public class FermatPrimality {

File: src/algo/string/Trie.java
Patch:
@@ -5,7 +5,7 @@
  */
 
 /**
- * This is prefix truee, which consumes alot memory but very fast.
+ * This is prefix tree, which consumes a lot memory but very fast.
  */
 public class Trie {
 
@@ -75,7 +75,7 @@ public TrieNode(char c) {
 
 
 /*
-This is recursive, one-class aproach, but it has small bug that I could not find it in 2 hours.
+This is recursive, one-class approach, but it has small bug that I could not find it in 2 hours.
 public class Trie {
 
     int[] a= new int[26];

File: src/interviewquestions/easy/DeleteNodeSingleLinkedList.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class DeleteNodeSingleLinkedList {
     /**
-     * Case: We have only list node which is not last element. To remove this node, we can chnage its value
+     * Case: We have only list node which is not last element. To remove this node, we can change its value
      * and set pointer to next of next.
      */
     public void deleteNode(ListNode x) {

File: src/interviewquestions/easy/ImplementstrSt.java
Patch:
@@ -6,7 +6,7 @@
 public class ImplementstrSt {
     /**
      * There are two solutions for this problem. One is using RabinKarp Algorithm and the second one is using
-     * Java's index of algorithm i.e searching starting point of needle from haystack and comparing neeedle.
+     * Java's index of algorithm i.e. searching starting point of needle from haystack and comparing needle.
      * Time complexity in both algorithms is average O(n+m) and in the worst case O(mn);
      */
 

File: src/interviewquestions/easy/RansomNote.java
Patch:
@@ -14,7 +14,7 @@
 public class RansomNote {
 
     /**
-     * The idea is to create an array with length of 26 (english letters) and store each frequency of each letter.
+     * The idea is to create an array with length of 26 (English letters) and store each frequency of each letter.
      * and remove ransom note letters from array. if certain character count in array is 0, that means ransom note has a
      * character that is not included on magazine.
      */

File: src/interviewquestions/hard/PostOrderTraversalTree.java
Patch:
@@ -53,6 +53,6 @@ void postOrderIt(TreeNode root, List<Integer> list){
 
 2.3. push the right child of popped item to stack.
 
-reverse the ouput.
+reverse the output.
 
 * */

File: src/interviewquestions/medium/Searcha2DMatrixII.java
Patch:
@@ -23,9 +23,9 @@ boolean searchMatrix(int[][] a, int target) {
 
     /**
      * We start search the matrix from top right corner, initialize the current position to top right corner,
-     * if the target is greater than the value in current position, then the target can not be in entire row
+     * if the target is greater than the value in current position, then the target cannot be in entire row
      * of current position because the row is sorted, if the target is less than the value in current position,
-     * then the target can not in the entire column because the column is sorted too. We can rule out one row or
+     * then the target cannot be in the entire column because the column is sorted too. We can rule out one row or
      * one column each time,
      * so the time complexity is O(m+n).
      */

File: src/timus/GenealogicalTree.java
Patch:
@@ -58,10 +58,10 @@ public void addVertex(Integer v){
             V newV= new V(v);
             vertices.putIfAbsent(v, newV);
         }
-        public void addEdge(Integer from, Integer to, int weigth){
+        public void addEdge(Integer from, Integer to, int weight){
             V fromV=vertices.get(from);
             V toV=vertices.get(to);
-            E e= new E(fromV, toV, weigth);
+            E e= new E(fromV, toV, weight);
             fromV.edges.add(e); // directed graph
         }
 

File: src/timus/SegmentTree.java
Patch:
@@ -8,8 +8,8 @@
 public class SegmentTree {
     public static void main(String[] args) {
         int[] a=new int[]{-1, 2, 4, 0};
-        int treeSize=a.length*2-1;// if power of two, just multiply by two and substract one
-        // else find nextpower of two and multiple by 2 and sabstruct one;
+        int treeSize=a.length*2-1;// if power of two, just multiply by two and subtract one
+        // else find next power of two and multiple by 2 and subtract one;
         int[] tree= new int[treeSize];
         for (int i = 0; i < treeSize; i++) {
             tree[i]=Integer.MAX_VALUE; // to build min segment tree

File: src/algo/graph/TopologicalSorting.java
Patch:
@@ -19,20 +19,22 @@ public TopologicalSorting(Graph<T, Number> graph) {
     }
 
     // this works with DAG Only
-    // first we will choose any vertex who who does not have incoming edges (sources)
+    // first we will choose any vertex who that does not have incoming edges (sources)
     // sources can be found easier if incoming edge count is recorded in each vertex
     List<T> topSort(){
         Stack<T> stack=new Stack<>();//stack is also good option
         Set<Vertex<T>> sources=new HashSet<>();
         for (Vertex<T> vertex : graph.getVertices())
             sources.add(vertex);
+
         for (Vertex<T> vertex : graph.getVertices())
             for (Vertex<T> tVertex : vertex.getNeighbors())
                 sources.remove(tVertex);
 
         for (Vertex<T> source : sources)
             if(!source.isVisited())
                 dfs(source, stack);
+
         return stack;
     }
 

File: src/ds/graph/UndirectedGraph.java
Patch:
@@ -37,6 +37,7 @@ public void addEdge(V v1, V v2, E weight) {
         Vertex<V> from=vertexMap.get(v1);
         Vertex<V> to=vertexMap.get(v2);
         if (from == to) return;
+        if (from.getNeighbors().contains(to) || to.getNeighbors().contains(from)) return;
         from.addNeighbor(to);
         to.addNeighbor(from);
         edges.add(new Edge<>(weight, from, to));

