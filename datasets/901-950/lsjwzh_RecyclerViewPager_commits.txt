File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPagerAdapter.java
Patch:
@@ -18,7 +18,8 @@ public class RecyclerViewPagerAdapter<VH extends RecyclerView.ViewHolder> extend
     public RecyclerViewPagerAdapter(RecyclerViewPager viewPager, RecyclerView.Adapter<VH> adapter) {
         mAdapter = adapter;
         mViewPager = viewPager;
-        setHasStableIds(mAdapter.hasStableIds());
+        if (mAdapter != null)
+            setHasStableIds(mAdapter.hasStableIds());
     }
 
     @Override

File: app/src/main/java/com/lsjwzh/widget/recyclerviewpagerdeomo/MainActivity.java
Patch:
@@ -19,6 +19,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.DividerItemDecoration;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
@@ -42,6 +43,8 @@ protected void onCreate(Bundle savedInstanceState) {
         mDemoRecyclerView = (RecyclerView) findViewById(R.id.demo_list);
         mDemoRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager
                 .VERTICAL, false));
+        mDemoRecyclerView.addItemDecoration(new DividerItemDecoration(this, LinearLayoutManager
+                .VERTICAL));
         mDemoListAdapter = new DemoListAdapter();
         mDemoRecyclerView.setAdapter(mDemoListAdapter);
         mDemoListAdapter.add(new DemoItem("Single Fling Pager(like official ViewPager)") {

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -174,6 +174,7 @@ public void smoothScrollToPosition(int position) {
         if (DEBUG) {
             Log.d("@", "smoothScrollToPosition:" + position);
         }
+        mPositionBeforeScroll = getCurrentPosition();
         mSmoothScrollTargetPosition = position;
         if (getLayoutManager() != null && getLayoutManager() instanceof LinearLayoutManager) {
             // exclude item decoration

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -174,6 +174,7 @@ public void smoothScrollToPosition(int position) {
         if (DEBUG) {
             Log.d("@", "smoothScrollToPosition:" + position);
         }
+        mPositionBeforeScroll = getCurrentPosition();
         mSmoothScrollTargetPosition = position;
         if (getLayoutManager() != null && getLayoutManager() instanceof LinearLayoutManager) {
             // exclude item decoration

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -383,7 +383,7 @@ protected void adjustPositionY(int velocityY) {
 
     @Override
     public boolean dispatchTouchEvent(MotionEvent ev) {
-        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
+        if (ev.getAction() == MotionEvent.ACTION_DOWN && getLayoutManager() != null) {
             mPositionOnTouchDown = getLayoutManager().canScrollHorizontally()
                     ? ViewUtils.getCenterXChildPosition(this)
                     : ViewUtils.getCenterYChildPosition(this);

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -383,7 +383,7 @@ protected void adjustPositionY(int velocityY) {
 
     @Override
     public boolean dispatchTouchEvent(MotionEvent ev) {
-        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
+        if (ev.getAction() == MotionEvent.ACTION_DOWN && getLayoutManager() != null) {
             mPositionOnTouchDown = getLayoutManager().canScrollHorizontally()
                     ? ViewUtils.getCenterXChildPosition(this)
                     : ViewUtils.getCenterYChildPosition(this);

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPagerAdapter.java
Patch:
@@ -44,9 +44,9 @@ public void onBindViewHolder(VH holder, int position) {
         final View itemView = holder.itemView;
         ViewGroup.LayoutParams lp = itemView.getLayoutParams() == null ? new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT) : itemView.getLayoutParams();
         if (mViewPager.getLayoutManager().canScrollHorizontally()) {
-            lp.width = mViewPager.getWidth() - mViewPager.getPaddingLeft() - mViewPager.getPaddingRight();
+            lp.width = mViewPager.getMeasuredWidth() - mViewPager.getPaddingLeft() - mViewPager.getPaddingRight();
         } else {
-            lp.height = mViewPager.getHeight() - mViewPager.getPaddingTop() - mViewPager.getPaddingBottom();
+            lp.height = mViewPager.getMeasuredHeight() - mViewPager.getPaddingTop() - mViewPager.getPaddingBottom();
         }
         itemView.setLayoutParams(lp);
     }

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -56,6 +56,7 @@ public RecyclerViewPager(Context context, AttributeSet attrs) {
     public RecyclerViewPager(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         initAttrs(context, attrs, defStyle);
+		setNestedScrollingEnabled(false);
     }
 
     private void initAttrs(Context context, AttributeSet attrs, int defStyle) {

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -56,6 +56,7 @@ public RecyclerViewPager(Context context, AttributeSet attrs) {
     public RecyclerViewPager(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         initAttrs(context, attrs, defStyle);
+		setNestedScrollingEnabled(false);
     }
 
     private void initAttrs(Context context, AttributeSet attrs, int defStyle) {

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -104,7 +104,7 @@ protected void onRestoreInstanceState(Parcelable state) {
             fAnchorOffset.setAccessible(true);
             if (fAnchorOffset.getInt(layoutState) > 0) {
                 fAnchorPosition.set(layoutState, fAnchorPosition.getInt(layoutState) - 1);
-            } else {
+            } else if(fAnchorOffset.getInt(layoutState) < 0){
                 fAnchorPosition.set(layoutState, fAnchorPosition.getInt(layoutState) + 1);
             }
             fAnchorOffset.setInt(layoutState, 0);

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -335,6 +335,7 @@ public void onScrollStateChanged(int state) {
                         }
                     }
                 }
+                mPositionBeforeScroll = mSmoothScrollTargetPosition;
             }
             // reset
             mMaxLeftWhenDragging = Integer.MIN_VALUE;

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/FragmentStatePagerAdapter.java
Patch:
@@ -53,7 +53,7 @@ public abstract class FragmentStatePagerAdapter extends RecyclerView.Adapter<Fra
 
         @Override
         public int genId(Set<Integer> idContainer) {
-            return mRandom.nextInt();
+            return Math.abs(mRandom.nextInt());
         }
     };
 

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java
Patch:
@@ -18,8 +18,7 @@
  * @author Green
  */
 public class RecyclerViewPager extends RecyclerView {
-    // ToDo remove this before release
-    public static final boolean DEBUG = true;
+    public static final boolean DEBUG = BuildConfig.DEBUG;
 
     private RecyclerViewPagerAdapter<?> mViewPagerAdapter;
     private OnScrollListener mOnScrollListener;

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPagerAdapter.java
Patch:
@@ -43,12 +43,13 @@ public void unregisterAdapterDataObserver(RecyclerView.AdapterDataObserver obser
     public void onBindViewHolder(VH holder, int position) {
         mAdapter.onBindViewHolder(holder, position);
         final View itemView = holder.itemView;
-        ViewGroup.MarginLayoutParams lp = (ViewGroup.MarginLayoutParams) itemView.getLayoutParams();
+        ViewGroup.LayoutParams lp = itemView.getLayoutParams() == null ? new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT) : itemView.getLayoutParams();
         if (mViewPager.getLayoutManager().canScrollHorizontally()) {
             lp.width = mViewPager.getWidth() - mViewPager.getPaddingLeft() - mViewPager.getPaddingRight();
         } else {
             lp.height = mViewPager.getHeight() - mViewPager.getPaddingTop() - mViewPager.getPaddingBottom();
         }
+        itemView.setLayoutParams(lp);
     }
 
     @Override

File: lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPagerAdapter.java
Patch:
@@ -21,6 +21,7 @@ public class RecyclerViewPagerAdapter<VH extends RecyclerViewEx.ViewHolder> exte
     public RecyclerViewPagerAdapter(RecyclerViewPager viewPager, RecyclerViewEx.Adapter<VH> adapter) {
         mAdapter = adapter;
         mViewPager = viewPager;
+        setHasStableIds(mAdapter.hasStableIds());
     }
 
     @Override

File: app/src/main/java/com/lsjwzh/widget/recyclerviewpagerdeomo/LayoutAdapter.java
Patch:
@@ -92,6 +92,7 @@ public void onBindViewHolder(SimpleViewHolder holder, int position) {
             }
         }else {
             ((ViewGroup.MarginLayoutParams) itemView.getLayoutParams()).leftMargin = 0;
+            ((ViewGroup.MarginLayoutParams) itemView.getLayoutParams()).rightMargin = 0;
         }
     }
 

File: lib/src/main/java/android/support/v7/widget/RecyclerViewEx.java
Patch:
@@ -1240,17 +1240,18 @@ void adjustPosition(int spanX){
                 int xEnd = xStart+child.getWidth();
                 if(spanX>0) {
                     if (xEnd >= lvLocationOnScreen[0] + getWidth() / 4
-                            &&xStart<lvLocationOnScreen[0]+getWidth()/4) {
+                            &&xStart<=lvLocationOnScreen[0]+getWidth()/4) {
                         smoothScrollToPosition(getChildPosition(child));
                         return;
                     }
                 }else {
-                    if(xStart<lvLocationOnScreen[0] + getWidth() * 3 / 4&&xEnd >= lvLocationOnScreen[0] + getWidth() * 3 / 4){
+                    if(xStart<=lvLocationOnScreen[0] + getWidth() * 3 / 4&&xEnd >= lvLocationOnScreen[0] + getWidth() * 3 / 4){
                         smoothScrollToPosition(getChildPosition(child));
                         return;
                     }
                 }
             }
+            smoothScrollToPosition(getCenterXChildPosition());
         }else {
             setScrollState(SCROLL_STATE_IDLE);
         }

