File: src/net/majorkernelpanic/streaming/mp4/MP4Parser.java
Patch:
@@ -36,7 +36,7 @@ public class MP4Parser {
 
 	private static final String TAG = "MP4Parser";
 
-	private HashMap<String, Long> mBoxes = new HashMap<String, Long>();
+	private HashMap<String, Long> mBoxes = new HashMap<>();
 	private final RandomAccessFile mFile;
 	private long mPos = 0;
 

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -582,7 +582,7 @@ static class Response {
 
 
 		public int status;
-		public HashMap<String,String> headers = new HashMap<String,String>();
+		public HashMap<String,String> headers = new HashMap<>();
 
 		/** Parse the method, URI & headers of a RTSP request */
 		public static Response parseResponse(BufferedReader input) throws IOException, IllegalStateException, SocketException {

File: src/net/majorkernelpanic/streaming/rtsp/RtspServer.java
Patch:
@@ -86,12 +86,12 @@ public class RtspServer extends Service {
 	protected SharedPreferences mSharedPreferences;
 	protected boolean mEnabled = true;	
 	protected int mPort = DEFAULT_RTSP_PORT;
-	protected WeakHashMap<Session,Object> mSessions = new WeakHashMap<Session,Object>(2);
+	protected WeakHashMap<Session,Object> mSessions = new WeakHashMap<>(2);
 	
 	private RequestListener mListenerThread;
 	private final IBinder mBinder = new LocalBinder();
 	private boolean mRestart = false;
-	private final LinkedList<CallbackListener> mListeners = new LinkedList<CallbackListener>();
+	private final LinkedList<CallbackListener> mListeners = new LinkedList<>();
 
     /** Credentials for Basic Auth */
     private String mUsername;
@@ -621,7 +621,7 @@ static class Request {
 
 		public String method;
 		public String uri;
-		public HashMap<String,String> headers = new HashMap<String,String>();
+		public HashMap<String,String> headers = new HashMap<>();
 
 		/** Parse the method, uri & headers of a RTSP request */
 		public static Request parseRequest(BufferedReader input) throws IOException, IllegalStateException, SocketException {

File: src/net/majorkernelpanic/streaming/video/CodecManager.java
Patch:
@@ -62,8 +62,8 @@ static class Codecs {
 	 */
 	static class Selector {
 
-		private static HashMap<String,SparseArray<ArrayList<String>>> sHardwareCodecs = new HashMap<String, SparseArray<ArrayList<String>>>();
-		private static HashMap<String,SparseArray<ArrayList<String>>> sSoftwareCodecs = new HashMap<String, SparseArray<ArrayList<String>>>();
+		private static HashMap<String,SparseArray<ArrayList<String>>> sHardwareCodecs = new HashMap<>();
+		private static HashMap<String,SparseArray<ArrayList<String>>> sSoftwareCodecs = new HashMap<>();
 
 		/**
 		 * Determines the most appropriate encoder to compress the video from the Camera

File: src/net/majorkernelpanic/streaming/video/VideoStream.java
Patch:
@@ -156,7 +156,7 @@ public synchronized void setSurfaceView(SurfaceView view) {
 		if (mSurfaceHolderCallback != null && mSurfaceView != null && mSurfaceView.getHolder() != null) {
 			mSurfaceView.getHolder().removeCallback(mSurfaceHolderCallback);
 		}
-		if (mSurfaceView.getHolder() != null) {
+		if (mSurfaceView != null && mSurfaceView.getHolder() != null) {
 			mSurfaceHolderCallback = new Callback() {
 				@Override
 				public void surfaceDestroyed(SurfaceHolder holder) {

File: src/net/majorkernelpanic/streaming/audio/AudioQuality.java
Patch:
@@ -46,7 +46,7 @@ public AudioQuality(int samplingRate, int bitRate) {
 
 	public boolean equals(AudioQuality quality) {
 		if (quality==null) return false;
-		return (quality.samplingRate == this.samplingRate 				&
+		return (quality.samplingRate == this.samplingRate     &&
 				quality.bitRate == this.bitRate);
 	}
 

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -678,7 +678,7 @@ private long searchSPSandPPS() {
 			elapsed = timestamp() - now;
 		}
 
-		check(mPPS != null & mSPS != null, "Could not determine the SPS & PPS.");
+		check(mPPS != null && mSPS != null, "Could not determine the SPS & PPS.");
 		mB64PPS = Base64.encodeToString(mPPS, 0, mPPS.length, Base64.NO_WRAP);
 		mB64SPS = Base64.encodeToString(mSPS, 0, mSPS.length, Base64.NO_WRAP);
 

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -214,7 +214,7 @@ public void setTransportMode(int mode) {
 	}
 	
 	public boolean isStreaming() {
-		return mState==STATE_STARTED|mState==STATE_STARTING;
+		return mState==STATE_STARTED||mState==STATE_STARTING;
 	}
 
 	/**

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -72,9 +72,9 @@ public VideoQuality(int resX, int resY, int framerate, int bitrate) {
 
 	public boolean equals(VideoQuality quality) {
 		if (quality==null) return false;
-		return (quality.resX == this.resX 			&
-				quality.resY == this.resY 			&
-				quality.framerate == this.framerate	&
+		return (quality.resX == this.resX 			&&
+				quality.resY == this.resY 			&&
+				quality.framerate == this.framerate	&&
 				quality.bitrate == this.bitrate);
 	}
 

File: src/net/majorkernelpanic/streaming/rtsp/RtspServer.java
Patch:
@@ -121,7 +121,7 @@ public interface CallbackListener {
 	 */
 	public void addCallbackListener(CallbackListener listener) {
 		synchronized (mListeners) {
-			if (mListeners.size() > 0) {
+			if (!mListeners.isEmpty()) {
 				for (CallbackListener cl : mListeners) {
 					if (cl == listener) return;
 				}
@@ -285,7 +285,7 @@ public IBinder onBind(Intent intent) {
 
 	protected void postMessage(int id) {
 		synchronized (mListeners) {
-			if (mListeners.size() > 0) {
+			if (!mListeners.isEmpty()) {
 				for (CallbackListener cl : mListeners) {
 					cl.onMessage(this, id);
 				}
@@ -295,7 +295,7 @@ protected void postMessage(int id) {
 	
 	protected void postError(Exception exception, int id) {
 		synchronized (mListeners) {
-			if (mListeners.size() > 0) {
+			if (!mListeners.isEmpty()) {
 				for (CallbackListener cl : mListeners) {
 					cl.onError(this, exception, id);
 				}

File: src/net/majorkernelpanic/streaming/rtsp/RtspServer.java
Patch:
@@ -121,7 +121,7 @@ public interface CallbackListener {
 	 */
 	public void addCallbackListener(CallbackListener listener) {
 		synchronized (mListeners) {
-			if (mListeners.size() > 0) {
+			if (!mListeners.isEmpty()) {
 				for (CallbackListener cl : mListeners) {
 					if (cl == listener) return;
 				}
@@ -285,7 +285,7 @@ public IBinder onBind(Intent intent) {
 
 	protected void postMessage(int id) {
 		synchronized (mListeners) {
-			if (mListeners.size() > 0) {
+			if (!mListeners.isEmpty()) {
 				for (CallbackListener cl : mListeners) {
 					cl.onMessage(this, id);
 				}
@@ -295,7 +295,7 @@ protected void postMessage(int id) {
 	
 	protected void postError(Exception exception, int id) {
 		synchronized (mListeners) {
-			if (mListeners.size() > 0) {
+			if (!mListeners.isEmpty()) {
 				for (CallbackListener cl : mListeners) {
 					cl.onError(this, exception, id);
 				}

File: src/net/majorkernelpanic/streaming/video/VideoStream.java
Patch:
@@ -156,7 +156,7 @@ public synchronized void setSurfaceView(SurfaceView view) {
 		if (mSurfaceHolderCallback != null && mSurfaceView != null && mSurfaceView.getHolder() != null) {
 			mSurfaceView.getHolder().removeCallback(mSurfaceHolderCallback);
 		}
-		if (mSurfaceView.getHolder() != null) {
+		if (mSurfaceView != null && mSurfaceView.getHolder() != null) {
 			mSurfaceHolderCallback = new Callback() {
 				@Override
 				public void surfaceDestroyed(SurfaceHolder holder) {

File: src/net/majorkernelpanic/streaming/audio/AudioQuality.java
Patch:
@@ -46,7 +46,7 @@ public AudioQuality(int samplingRate, int bitRate) {
 
 	public boolean equals(AudioQuality quality) {
 		if (quality==null) return false;
-		return (quality.samplingRate == this.samplingRate 				&
+		return (quality.samplingRate == this.samplingRate     &&
 				quality.bitRate == this.bitRate);
 	}
 

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -680,7 +680,7 @@ private long searchSPSandPPS() {
 			elapsed = timestamp() - now;
 		}
 
-		check(mPPS != null & mSPS != null, "Could not determine the SPS & PPS.");
+		check(mPPS != null && mSPS != null, "Could not determine the SPS & PPS.");
 		mB64PPS = Base64.encodeToString(mPPS, 0, mPPS.length, Base64.NO_WRAP);
 		mB64SPS = Base64.encodeToString(mSPS, 0, mSPS.length, Base64.NO_WRAP);
 

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -214,7 +214,7 @@ public void setTransportMode(int mode) {
 	}
 	
 	public boolean isStreaming() {
-		return mState==STATE_STARTED|mState==STATE_STARTING;
+		return mState==STATE_STARTED||mState==STATE_STARTING;
 	}
 
 	/**

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -72,9 +72,9 @@ public VideoQuality(int resX, int resY, int framerate, int bitrate) {
 
 	public boolean equals(VideoQuality quality) {
 		if (quality==null) return false;
-		return (quality.resX == this.resX 			&
-				quality.resY == this.resY 			&
-				quality.framerate == this.framerate	&
+		return (quality.resX == this.resX 			&&
+				quality.resY == this.resY 			&&
+				quality.framerate == this.framerate	&&
 				quality.bitrate == this.bitrate);
 	}
 

File: src/net/majorkernelpanic/streaming/mp4/MP4Parser.java
Patch:
@@ -39,7 +39,7 @@ public class MP4Parser {
 
 	private static final String TAG = "MP4Parser";
 
-	private HashMap<String, Long> mBoxes = new HashMap<String, Long>();
+	private HashMap<String, Long> mBoxes = new HashMap<>();
 	private final RandomAccessFile mFile;
 	private long mPos = 0;
 

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -585,7 +585,7 @@ static class Response {
 
 
 		public int status;
-		public HashMap<String,String> headers = new HashMap<String,String>();
+		public HashMap<String,String> headers = new HashMap<>();
 
 		/** Parse the method, URI & headers of a RTSP request */
 		public static Response parseResponse(BufferedReader input) throws IOException, IllegalStateException, SocketException {

File: src/net/majorkernelpanic/streaming/rtsp/RtspServer.java
Patch:
@@ -89,12 +89,12 @@ public class RtspServer extends Service {
 	protected SharedPreferences mSharedPreferences;
 	protected boolean mEnabled = true;	
 	protected int mPort = DEFAULT_RTSP_PORT;
-	protected WeakHashMap<Session,Object> mSessions = new WeakHashMap<Session,Object>(2);
+	protected WeakHashMap<Session,Object> mSessions = new WeakHashMap<>(2);
 	
 	private RequestListener mListenerThread;
 	private final IBinder mBinder = new LocalBinder();
 	private boolean mRestart = false;
-	private final LinkedList<CallbackListener> mListeners = new LinkedList<CallbackListener>();
+	private final LinkedList<CallbackListener> mListeners = new LinkedList<>();
 
     /** Credentials for Basic Auth */
     private String mUsername;
@@ -624,7 +624,7 @@ static class Request {
 
 		public String method;
 		public String uri;
-		public HashMap<String,String> headers = new HashMap<String,String>();
+		public HashMap<String,String> headers = new HashMap<>();
 
 		/** Parse the method, uri & headers of a RTSP request */
 		public static Request parseRequest(BufferedReader input) throws IOException, IllegalStateException, SocketException {

File: src/net/majorkernelpanic/streaming/video/CodecManager.java
Patch:
@@ -65,8 +65,8 @@ static class Codecs {
 	 */
 	static class Selector {
 
-		private static HashMap<String,SparseArray<ArrayList<String>>> sHardwareCodecs = new HashMap<String, SparseArray<ArrayList<String>>>();
-		private static HashMap<String,SparseArray<ArrayList<String>>> sSoftwareCodecs = new HashMap<String, SparseArray<ArrayList<String>>>();
+		private static HashMap<String,SparseArray<ArrayList<String>>> sHardwareCodecs = new HashMap<>();
+		private static HashMap<String,SparseArray<ArrayList<String>>> sSoftwareCodecs = new HashMap<>();
 
 		/**
 		 * Determines the most appropriate encoder to compress the video from the Camera

File: src/net/majorkernelpanic/streaming/video/VideoStream.java
Patch:
@@ -455,8 +455,8 @@ public void onPreviewFrame(byte[] data, Camera camera) {
 					int bufferIndex = mMediaCodec.dequeueInputBuffer(500000);
 					if (bufferIndex>=0) {
 						inputBuffers[bufferIndex].clear();
-						if (data == null) Log.d(TAG,"ERRORRR");
-						convertor.convert(data, inputBuffers[bufferIndex]);
+						if (data == null) Log.e(TAG,"Symptom of the \"Callback buffer was to small\" problem...");
+						else convertor.convert(data, inputBuffers[bufferIndex]);
 						mMediaCodec.queueInputBuffer(bufferIndex, 0, inputBuffers[bufferIndex].position(), now, 0);
 					} else {
 						Log.e(TAG,"No buffer available !");

File: src/net/majorkernelpanic/streaming/audio/AACStream.java
Patch:
@@ -173,7 +173,7 @@ public synchronized void configure() throws IllegalStateException, IOException {
 
 			mProfile = 2; // AAC LC
 			mChannel = 1;
-			mConfig = mProfile<<11 | mSamplingRateIndex<<7 | mChannel<<3;
+			mConfig = (mProfile & 0x1F) << 11 | (mSamplingRateIndex & 0x0F) << 7 | (mChannel & 0x0F) << 3;
 
 			mSessionDescription = "m=audio "+String.valueOf(getDestinationPorts()[0])+" RTP/AVP 96\r\n" +
 					"a=rtpmap:96 mpeg4-generic/"+mQuality.samplingRate+"\r\n"+
@@ -354,7 +354,7 @@ private void testADTS() throws IllegalStateException, IOException {
 		mQuality.samplingRate = AUDIO_SAMPLING_RATES[mSamplingRateIndex];
 
 		// 5 bits for the object type / 4 bits for the sampling rate / 4 bits for the channel / padding
-		mConfig = mProfile<<11 | mSamplingRateIndex<<7 | mChannel<<3;
+		mConfig = (mProfile & 0x1F) << 11 | (mSamplingRateIndex & 0x0F) << 7 | (mChannel & 0x0F) << 3;
 
 		Log.i(TAG,"MPEG VERSION: " + ( (buffer[0]&0x08) >> 3 ) );
 		Log.i(TAG,"PROTECTION: " + (buffer[0]&0x01) );

File: src/net/majorkernelpanic/streaming/hw/NV21Convertor.java
Patch:
@@ -23,6 +23,7 @@
 import java.nio.ByteBuffer;
 
 import android.media.MediaCodecInfo;
+import android.util.Log;
 
 /**
  * Converts from NV21 to YUV420 semi planar or planar.
@@ -106,7 +107,8 @@ public boolean getUVPanesReversed() {
 	
 	public void convert(byte[] data, ByteBuffer buffer) {
 		byte[] result = convert(data);
-		buffer.put(result, 0, result.length);
+		int min = buffer.capacity() < data.length?buffer.capacity() : data.length;
+		buffer.put(result, 0, min);
 	}
 	
 	public byte[] convert(byte[] data) {

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -341,12 +341,12 @@ private void sendRequestAnnounce() throws IllegalStateException, SocketException
 			String hash2 = computeMd5Hash("ANNOUNCE"+":"+uri);
 			String hash3 = computeMd5Hash(hash1+":"+m.group(2)+":"+hash2);
 
-			mAuthorization = "Digest username=\""+mParameters.username+"\",realm=\""+realm+"\",nonce=\""+nonce+"\",uri=\""+uri+"\",response=\""+hash3+"\"\r\n";
+			mAuthorization = "Digest username=\""+mParameters.username+"\",realm=\""+realm+"\",nonce=\""+nonce+"\",uri=\""+uri+"\",response=\""+hash3+"\"";
 
 			request = "ANNOUNCE rtsp://"+mParameters.host+":"+mParameters.port+mParameters.path+" RTSP/1.0\r\n" +
 					"CSeq: " + (++mCSeq) + "\r\n" +
 					"Content-Length: " + body.length() + "\r\n" +
-					"Authorization: " + mAuthorization +
+					"Authorization: " + mAuthorization + "\r\n" +
 					"Session: " + mSessionID + "\r\n" +
 					"Content-Type: application/sdp \r\n\r\n" +
 					body;
@@ -398,7 +398,7 @@ private void sendRequestSetup() throws IllegalStateException, SocketException, I
 	 */
 	private void sendRequestRecord() throws IllegalStateException, SocketException, IOException {
 		String request = "RECORD rtsp://"+mParameters.host+":"+mParameters.port+mParameters.path+" RTSP/1.0\r\n" +
-				"Range: npt=0.000-" +
+				"Range: npt=0.000-\r\n" +
 				addHeaders();
 		Log.i(TAG,request.substring(0, request.indexOf("\r\n")));
 		mOutputStream.write(request.getBytes("UTF-8"));

File: src/net/majorkernelpanic/streaming/gl/SurfaceView.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.util.concurrent.Semaphore;
 
-import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.SurfaceTexture;
 import android.graphics.SurfaceTexture.OnFrameAvailableListener;
@@ -31,7 +30,6 @@
 import android.view.Surface;
 import android.view.SurfaceHolder;
 
-@SuppressLint("NewApi")
 public class SurfaceView extends android.view.SurfaceView implements Runnable, OnFrameAvailableListener, SurfaceHolder.Callback {
 
 	public final static String TAG = "GLSurfaceView";

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -45,9 +45,9 @@
  * Feeding the encoder with a surface is not tested here.
  * Some bugs you may have encountered:<br />
  * <ul>
- * <il>U and V panes reversed</il>
- * <il>Some padding is needed after the Y pane</il>
- * <il>stride!=width or slice-height!=height</il>
+ * <li>U and V panes reversed</li>
+ * <li>Some padding is needed after the Y pane</li>
+ * <li>stride!=width or slice-height!=height</li>
  * </ul>
  */
 @SuppressLint("NewApi")

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -62,13 +62,13 @@ public class EncoderDebugger {
 	 * If this is set to false the test will be run only once and the result 
 	 * will be saved in the shared preferences. 
 	 */
-	private static final boolean DEBUG = true;
+	private static final boolean DEBUG = false;
 	
 	/** Set this to true to see more logs. */
-	private static final boolean VERBOSE = true;
+	private static final boolean VERBOSE = false;
 
 	/** Will be incremented every time this test is modified. */
-	private static final int VERSION = 2;
+	private static final int VERSION = 3;
 
 	/** Bitrate that will be used with the encoder. */
 	private final static int BITRATE = 1000000;

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -130,8 +130,8 @@ public static int[] determineMaximumSupportedFramerate(Camera.Parameters paramet
 		List<int[]> supportedFpsRanges = parameters.getSupportedPreviewFpsRange();
 		for (Iterator<int[]> it = supportedFpsRanges.iterator(); it.hasNext();) {
 			int[] interval = it.next();
-			supportedFpsRangesStr += interval[0]+"-"+interval[1]+"fps"+(it.hasNext()?", ":"");
-			if (interval[1]/1000>maxFps[1]) {
+			supportedFpsRangesStr += interval[0]/1000+"-"+interval[1]/1000+"fps"+(it.hasNext()?", ":"");
+			if (interval[1]>maxFps[1] || (interval[0]>maxFps[0] && interval[1]==maxFps[1])) {
 				maxFps = interval; 
 			}
 		}

File: src/net/majorkernelpanic/streaming/Session.java
Patch:
@@ -288,7 +288,7 @@ public void setPreviewOrientation(int orientation) {
 	 * @param audioQuality Quality of the stream
 	 */
 	public void setAudioQuality(AudioQuality quality) {
-		if (mVideoStream != null) {
+		if (mAudioStream != null) {
 			mAudioStream.setAudioQuality(quality);
 		}
 	}

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -83,7 +83,7 @@ public VideoQuality clone() {
 	}
 
 	public static VideoQuality parseQuality(String str) {
-		VideoQuality quality = new VideoQuality(0,0,0,0);
+		VideoQuality quality = DEFAULT_VIDEO_QUALITY.clone();
 		if (str != null) {
 			String[] config = str.split("-");
 			try {

File: src/net/majorkernelpanic/streaming/Stream.java
Patch:
@@ -29,7 +29,8 @@
 public interface Stream {
 
 	/**
-	 * Configures the stream.
+	 * Configures the stream. You need to call this before calling {@link #getSessionDescription()} 
+	 * to apply your configuration of the stream.
 	 */
 	public void configure() throws IllegalStateException, IOException;
 	

File: src/net/majorkernelpanic/streaming/rtsp/UriParser.java
Patch:
@@ -102,14 +102,14 @@ else if (param.getName().equalsIgnoreCase("multicast")) {
 							if (!addr.isMulticastAddress()) {
 								throw new IllegalStateException("Invalid multicast address !");
 							}
-							builder.setDestination(addr);
+							builder.setDestination(param.getValue());
 						} catch (UnknownHostException e) {
 							throw new IllegalStateException("Invalid multicast address !");
 						}
 					}
 					else {
 						// Default multicast address
-						builder.setDestination(InetAddress.getByName("228.5.6.7"));
+						builder.setDestination("228.5.6.7");
 					}
 				}
 
@@ -118,7 +118,7 @@ else if (param.getName().equalsIgnoreCase("unicast")) {
 					if (param.getValue()!=null) {
 						try {
 							InetAddress addr = InetAddress.getByName(param.getValue());
-							builder.setDestination(addr);
+							builder.setDestination(param.getValue());
 						} catch (UnknownHostException e) {
 							throw new IllegalStateException("Invalid destination address !");
 						}

File: src/net/majorkernelpanic/streaming/audio/AACStream.java
Patch:
@@ -139,7 +139,7 @@ public synchronized void configure() throws IllegalStateException, IOException {
 		// If he did, we force a reasonable one: 16 kHz
 		if (i>12) mQuality.samplingRate = 16000;
 
-		if (mMode != mRequestedMode) {
+		if (mMode != mRequestedMode || mPacketizer==null) {
 			mMode = mRequestedMode;
 			if (mMode == MODE_MEDIARECORDER_API) {
 				mPacketizer = new AACADTSPacketizer();

File: src/net/majorkernelpanic/streaming/Stream.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/audio/AACStream.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -118,7 +118,7 @@ public void setPreferences(SharedPreferences prefs) {
 
 	@Override
 	public synchronized void start() throws IllegalStateException, IOException {
-		checkConfigured();
+		configure();
 		if (!mStreaming) {
 			super.start();
 		}

File: src/net/majorkernelpanic/streaming/audio/AudioQuality.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/gl/SurfaceManager.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/gl/TextureManager.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/mp4/MP4Config.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/mp4/MP4Parser.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -17,6 +17,7 @@
  * along with this source code; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
+
 package net.majorkernelpanic.streaming.mp4;
 import java.io.File;
 import java.io.FileNotFoundException;

File: src/net/majorkernelpanic/streaming/rtcp/SenderReport.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtp/AACADTSPacketizer.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtp/AACLATMPacketizer.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtp/AMRNBPacketizer.java
Patch:
@@ -1,8 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
- * With the help of Havlena Petr, havlenapetr@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtp/H263Packetizer.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtp/H264Packetizer.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtp/MediaCodecInputStream.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -23,7 +23,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteBuffer;
-import java.util.concurrent.Semaphore;
 
 import android.annotation.SuppressLint;
 import android.media.MediaCodec;

File: src/net/majorkernelpanic/streaming/rtp/RtpSocket.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/rtsp/RtspServer.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -415,7 +415,7 @@ public void run() {
 			if (streaming && !isStreaming()) {
 				postMessage(MESSAGE_STREAMING_STOPPED);
 			}
-			mSession.flush();
+			mSession.release();
 
 			try {
 				mClient.close();

File: src/net/majorkernelpanic/streaming/rtsp/UriParser.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/video/H263Stream.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -61,7 +61,7 @@ public H263Stream(int cameraId) {
 	 * Starts the stream.
 	 */
 	public synchronized void start() throws IllegalStateException, IOException {
-		checkConfigured();
+		configure();
 		if (!mStreaming) {
 			super.start();
 		}

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2014 GUIGUI Simon, fyhertz@gmail.com
  * 
- * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
+ * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
  * 
  * Spydroid is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -62,7 +62,7 @@ public class EncoderDebugger {
 	 * If this is set to false the test will be run only once and the result 
 	 * will be saved in the shared preferences. 
 	 */
-	private static final boolean DEBUG = true;
+	private static final boolean DEBUG = false;
 	
 	/** Set this to true to see more logs. */
 	private static final boolean VERBOSE = false;
@@ -298,8 +298,9 @@ private boolean checkTestNeeded() {
 			if (Build.VERSION.SDK_INT>lastSdk || VERSION>lastVersion) {
 				return true;
 			}
+		} else {
+			return true;
 		}
-
 		return false;
 	}
 

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -62,7 +62,7 @@ public class EncoderDebugger {
 	 * If this is set to false the test will be run only once and the result 
 	 * will be saved in the shared preferences. 
 	 */
-	private static final boolean DEBUG = false;
+	private static final boolean DEBUG = true;
 	
 	/** Set this to true to see more logs. */
 	private static final boolean VERBOSE = false;

File: src/net/majorkernelpanic/streaming/video/H264Stream.java
Patch:
@@ -168,10 +168,10 @@ private MP4Config testMediaRecorderAPI() throws RuntimeException, IOException {
 			mMediaRecorder.setCamera(mCamera);
 			mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
 			mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
-			mMediaRecorder.setMaxDuration(1000);
+			mMediaRecorder.setMaxDuration(10000);
 			//mMediaRecorder.setMaxFileSize(Integer.MAX_VALUE);
 			mMediaRecorder.setVideoEncoder(mVideoEncoder);
-			mMediaRecorder.setPreviewDisplay(mSurfaceView.getHolder().getSurface());
+			//mMediaRecorder.setPreviewDisplay(mSurfaceView.getHolder().getSurface());
 			mMediaRecorder.setVideoSize(mQuality.resX,mQuality.resY);
 			mMediaRecorder.setVideoFrameRate(mQuality.framerate);
 			mMediaRecorder.setVideoEncodingBitRate(mQuality.bitrate);

File: src/net/majorkernelpanic/streaming/gl/TextureManager.java
Patch:
@@ -90,8 +90,8 @@ public void drawFrame() {
 		checkGlError("onDrawFrame start");
 		mSurfaceTexture.getTransformMatrix(mSTMatrix);
 
-		GLES20.glClearColor(0.0f, 1.0f, 0.0f, 1.0f);
-		GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
+		//GLES20.glClearColor(0.0f, 1.0f, 0.0f, 1.0f);
+		//GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
 
 		GLES20.glUseProgram(mProgram);
 		checkGlError("glUseProgram");

File: src/net/majorkernelpanic/streaming/hw/EncoderDebugger.java
Patch:
@@ -167,8 +167,8 @@ private void debug() {
 			mNV21.setColorPanesReversed(mPreferences.getBoolean(PREF_PREFIX+resolution+"reversed", false));
 			mEncoderName = mPreferences.getString(PREF_PREFIX+resolution+"encoderName", "");
 			mEncoderColorFormat = mPreferences.getInt(PREF_PREFIX+resolution+"colorFormat", 0);
-			mB64PPS = mPreferences.getString(PREF_PREFIX+resolution+"sps", "");
-			mB64SPS = mPreferences.getString(PREF_PREFIX+resolution+"pps", "");
+			mB64PPS = mPreferences.getString(PREF_PREFIX+resolution+"pps", "");
+			mB64SPS = mPreferences.getString(PREF_PREFIX+resolution+"sps", "");
 
 			return;
 		}

File: src/net/majorkernelpanic/streaming/video/H264Stream.java
Patch:
@@ -97,7 +97,7 @@ public synchronized void start() throws IllegalStateException, IOException {
 
 	// Should not be called by the UI thread
 	private MP4Config testH264() throws IllegalStateException, IOException {
-		if ((mMode&MODE_MEDIACODEC_API)!=0) return testMediaCodecAPI();
+		if (mMode != MODE_MEDIARECORDER_API) return testMediaCodecAPI();
 		else return testMediaRecorderAPI();
 	}
 

File: src/net/majorkernelpanic/streaming/video/VideoStream.java
Patch:
@@ -478,6 +478,7 @@ protected void encodeWithMediaCodecMethod1() throws RuntimeException, IOExceptio
 			ByteBuffer[] inputBuffers = mMediaCodec.getInputBuffers();
 			@Override
 			public void onPreviewFrame(byte[] data, Camera camera) {
+				oldnow = now;
 				now = System.nanoTime()/1000;
 				if (i++>3) {
 					i = 0;
@@ -495,7 +496,6 @@ public void onPreviewFrame(byte[] data, Camera camera) {
 				} finally {
 					mCamera.addCallbackBuffer(data);
 				}				
-				oldnow = now;
 			}
 		};
 

File: src/net/majorkernelpanic/streaming/rtsp/UriParser.java
Patch:
@@ -198,11 +198,11 @@ else if (param.getName().equalsIgnoreCase("aac")) {
 		Session session = builder.build();
 		
 		if (videoApi>0 && session.getVideoTrack() != null) {
-			session.getVideoTrack().setMode(videoApi);
+			session.getVideoTrack().setStreamingMethod(videoApi);
 		}
 		
 		if (audioApi>0 && session.getAudioTrack() != null) {
-			session.getAudioTrack().setMode(audioApi);
+			session.getAudioTrack().setStreamingMethod(audioApi);
 		}
 		
 		return session;

File: src/net/majorkernelpanic/streaming/video/H263Stream.java
Patch:
@@ -43,7 +43,7 @@ public class H263Stream extends VideoStream {
 	public H263Stream() throws IOException {
 		this(CameraInfo.CAMERA_FACING_BACK);
 		// TODO: Implement H.263 streaming with the MediaCodec API and remove this line.
-		setMode(MODE_MEDIARECORDER_API);
+		setStreamingMethod(MODE_MEDIARECORDER_API);
 	}	
 		
 	/**

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -36,7 +36,7 @@ public class VideoQuality {
 	public final static String TAG = "VideoQuality";
 	
 	/** Default video stream quality. */
-	public final static VideoQuality DEFAULT_VIDEO_QUALITY = new VideoQuality(640,480,15,500000);
+	public final static VideoQuality DEFAULT_VIDEO_QUALITY = new VideoQuality(176,144,20,500000);
 
 	/**	Represents a quality for a video stream. */ 
 	public VideoQuality() {}

File: src/net/majorkernelpanic/streaming/audio/AACStream.java
Patch:
@@ -211,7 +211,7 @@ public void run() {
 	/** Stops the stream. */
 	public synchronized void stop() {
 		if (mStreaming) {
-			if (mMode == MODE_MEDIACODEC_API) {
+			if ((mMode&MODE_MEDIACODEC_API)!=0) {
 				Log.d(TAG, "Interrupting threads...");
 				mThread.interrupt();
 				mAudioRecord.stop();

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -139,7 +139,7 @@ public synchronized void startStream(int retries) throws RuntimeException, Illeg
 		mBufferedReader = new BufferedReader(new InputStreamReader(mSocket.getInputStream()));
 		mOutputStream = mSocket.getOutputStream();
 		mSession.setDestination(InetAddress.getByName(mHost));
-
+		
 		sendRequestAnnounce();
 		sendRequestSetup();
 		sendRequestRecord();
@@ -301,8 +301,7 @@ private String addHeaders() {
 		return "CSeq: " + (++mCSeq) + "\r\n" +
 				"Content-Length: 0\r\n" +
 				"Session: " + mSessionID + "\r\n" +
-				(mAuthorization != null ? "Authorization: " + mAuthorization + "\r\n":"") + 
-				"\r\n";
+				(mAuthorization != null ? "Authorization: " + mAuthorization + "\r\n":"");
 	}	
 
 	final protected static char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

File: src/net/majorkernelpanic/streaming/video/H263Stream.java
Patch:
@@ -42,6 +42,8 @@ public class H263Stream extends VideoStream {
 	 */
 	public H263Stream() throws IOException {
 		this(CameraInfo.CAMERA_FACING_BACK);
+		// TODO: Implement H.263 streaming with the MediaCodec API and remove this line.
+		setMode(MODE_MEDIARECORDER_API);
 	}	
 		
 	/**

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(VideoQuality quality) {
 	}
 
 	public VideoQuality clone() {
-		return new VideoQuality(resX,resY,framerate,bitrate);
+		return new VideoQuality(resX,resY,framerate,bitrate,orientation);
 	}
 
 	public static VideoQuality parseQuality(String str) {

File: src/net/majorkernelpanic/streaming/video/VideoQuality.java
Patch:
@@ -78,7 +78,7 @@ public boolean equals(VideoQuality quality) {
 	}
 
 	public VideoQuality clone() {
-		return new VideoQuality(resX,resY,framerate,bitrate);
+		return new VideoQuality(resX,resY,framerate,bitrate,orientation);
 	}
 
 	public static VideoQuality parseQuality(String str) {

File: src/net/majorkernelpanic/streaming/audio/AACStream.java
Patch:
@@ -211,7 +211,7 @@ public void run() {
 	/** Stops the stream. */
 	public synchronized void stop() {
 		if (mStreaming) {
-			if (mMode == MODE_MEDIACODEC_API) {
+			if ((mMode&MODE_MEDIACODEC_API)!=0) {
 				Log.d(TAG, "Interrupting threads...");
 				mThread.interrupt();
 				mAudioRecord.stop();

File: src/net/majorkernelpanic/streaming/rtsp/RtspClient.java
Patch:
@@ -301,8 +301,7 @@ private String addHeaders() {
 		return "CSeq: " + (++mCSeq) + "\r\n" +
 				"Content-Length: 0\r\n" +
 				"Session: " + mSessionID + "\r\n" +
-				(mAuthorization != null ? "Authorization: " + mAuthorization + "\r\n":"") + 
-				"\r\n";
+				(mAuthorization != null ? "Authorization: " + mAuthorization + "\r\n":"");
 	}	
 
 	final protected static char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

File: src/net/majorkernelpanic/streaming/video/H263Stream.java
Patch:
@@ -42,6 +42,8 @@ public class H263Stream extends VideoStream {
 	 */
 	public H263Stream() throws IOException {
 		this(CameraInfo.CAMERA_FACING_BACK);
+		// TODO: Implement H.263 streaming with the MediaCodec API and remove this line.
+		setMode(MODE_MEDIARECORDER_API);
 	}	
 		
 	/**

File: src/net/majorkernelpanic/streaming/video/VideoStream.java
Patch:
@@ -76,7 +76,6 @@ public VideoStream(int camera) {
 		setCamera(camera);
 		// TODO: Remove this when encoding with the MediaCodec API is ready
 		setMode(MODE_MEDIARECORDER_API);
-		Log.e(TAG,"MODE: "+mMode);		
 	}
 
 	/**

File: src/net/majorkernelpanic/streaming/mp4/MP4Parser.java
Patch:
@@ -100,9 +100,9 @@ private void parse(String path, long len) throws IOException {
 
 				ByteBuffer byteBuffer = ByteBuffer.wrap(buffer,0,4);
 				newlen = byteBuffer.getInt()-8;
-				
-				// a) 1061109559+8 correspond to "????" in ASCII the HTC Desire S seems to write that sometimes, maybe other phones do
-				// b) wide atom would produce a newlen == 0, and we shouldn't throw an exception because of that 
+
+				// 1061109559+8 correspond to "????" in ASCII the HTC Desire S seems to write that sometimes, maybe other phones do
+				// "wide" atom would produce a newlen == 0, and we shouldn't throw an exception because of that
 				if (newlen < 0 || newlen == 1061109559) throw new IOException();
 				name = new String(buffer,4,4);
 				Log.d(TAG,"Atom -> name: "+name+" newlen: "+newlen+" pos: "+pos);

File: src/net/majorkernelpanic/streaming/rtp/AbstractPacketizer.java
Patch:
@@ -130,7 +130,7 @@ protected static class Statistics {
 		private long elapsed = 0;
 		private long start = 0;
 		private long duration = 0;
-		private long period = 6000000000L;
+		private long period = 10000000000L;
 		private boolean initoffset = false;
 		
 		public Statistics() {}
@@ -163,7 +163,7 @@ public void push(long value) {
 				value += (now - start) - duration;
 				//Log.d(TAG, "sum1: "+duration/1000000+" sum2: "+(now-start)/1000000+" drift: "+((now-start)-duration)/1000000+" v: "+value/1000000);
 			}
-			if (c<20) {
+			if (c<5) {
 				// We ignore the first 20 measured values because they may not be accurate
 				c++;
 				m = value;

File: src/net/majorkernelpanic/streaming/rtsp/UriParser.java
Patch:
@@ -43,12 +43,15 @@
 import org.apache.http.client.utils.URLEncodedUtils;
 
 import android.hardware.Camera.CameraInfo;
+import android.util.Log;
 
 /**
  * This class parses URIs received by the RTSP server and configures a Session accordingly.
  */
 public class UriParser {
 
+	public final static String TAG = "UriParser";
+	
 	/**
 	 * Configures a Session according to the given URI.
 	 * Here are some examples of URIs that can be used to configure a Session:

File: src/net/majorkernelpanic/streaming/MediaStream.java
Patch:
@@ -182,7 +182,7 @@ public boolean isStreaming() {
 
 	/** Starts the stream. */
 	public synchronized void start() throws IllegalStateException, IOException {
-
+		Log.d(TAG, "start");
 		if (mPacketizer==null)
 			throw new IllegalStateException("setPacketizer() should be called before start().");
 

File: src/net/majorkernelpanic/streaming/video/H264Stream.java
Patch:
@@ -150,7 +150,7 @@ public void onInfo(MediaRecorder mr, int what, int extra) {
 				} else if (what==MediaRecorder.MEDIA_RECORDER_INFO_UNKNOWN) {
 					Log.d(TAG,"MediaRecorder: INFO_UNKNOWN");
 				} else {
-					Log.d(TAG,"WTF ?");
+					Log.d(TAG,"WTF ?. what: "+what);
 				}
 				mLock.release();
 			}

File: src/net/majorkernelpanic/streaming/MediaStream.java
Patch:
@@ -182,7 +182,7 @@ public boolean isStreaming() {
 
 	/** Starts the stream. */
 	public synchronized void start() throws IllegalStateException, IOException {
-
+		Log.d(TAG, "start");
 		if (mPacketizer==null)
 			throw new IllegalStateException("setPacketizer() should be called before start().");
 

File: src/net/majorkernelpanic/streaming/video/H264Stream.java
Patch:
@@ -150,7 +150,7 @@ public void onInfo(MediaRecorder mr, int what, int extra) {
 				} else if (what==MediaRecorder.MEDIA_RECORDER_INFO_UNKNOWN) {
 					Log.d(TAG,"MediaRecorder: INFO_UNKNOWN");
 				} else {
-					Log.d(TAG,"WTF ?");
+					Log.d(TAG,"WTF ?. what: "+what);
 				}
 				mLock.release();
 			}

File: src/net/majorkernelpanic/streaming/rtp/AACADTSPacketizer.java
Patch:
@@ -97,8 +97,6 @@ public void run() {
 					if ( (is.read()&0xFF) == 0xFF ) {
 						header[1] = (byte) is.read();
 						if ( (header[1]&0xF0) == 0xF0) break;
-					} else {
-						Log.e(TAG,"SYNC");
 					}
 				}
 

File: src/net/majorkernelpanic/streaming/rtp/RtpSocket.java
Patch:
@@ -253,7 +253,7 @@ private void setLong(byte[] buffer, long n, int begin, int end) {
 	}
 	
 	/** Computes the proper rate at which packets are sent. */
-	public static class Statistics {
+	protected static class Statistics {
 
 		public final static String TAG = "Statistics";
 		

File: src/net/majorkernelpanic/streaming/audio/AMRNBStream.java
Patch:
@@ -49,7 +49,7 @@ public AMRNBStream() throws IOException {
 		}
 		
 		setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
-		setAudioSamplingRate(8000);
+		setAudioSamplingRate(mQuality.samplingRate);
 		
 	}
 

File: src/net/majorkernelpanic/streaming/rtp/H263Packetizer.java
Patch:
@@ -43,7 +43,7 @@ public class H263Packetizer extends AbstractPacketizer implements Runnable {
 
 	public H263Packetizer() throws IOException {
 		super();
-		socket.setClockFrequency(90);
+		socket.setClockFrequency(90000);
 	}
 
 	public void start() throws IOException {

File: src/net/majorkernelpanic/streaming/rtp/H264Packetizer.java
Patch:
@@ -47,7 +47,7 @@ public class H264Packetizer extends AbstractPacketizer implements Runnable {
 
 	public H264Packetizer() throws IOException {
 		super();
-		socket.setClockFrequency(90);
+		socket.setClockFrequency(90000);
 	}
 
 	public void start() throws IOException {

File: src/net/majorkernelpanic/streaming/Session.java
Patch:
@@ -102,7 +102,7 @@ public VideoStream getVideoTrack() {
 	/** 
 	 * Reference to the context is needed to aquire a MulticastLock. 
 	 * If the Session has a multicast destination is address such a lock will be aquired.
-	 * @param A reference to the application context 
+	 * @param context reference to the application context 
 	 **/
 	public void setContext(Context context) {
 		mContext = context;

File: src/net/majorkernelpanic/streaming/audio/AACStream.java
Patch:
@@ -35,9 +35,8 @@
 
 /**
  * A class for streaming AAC from the microphone of an android device using RTP.
- * Call {@link #setDestinationAddress(java.net.InetAddress)}, {@link #prepare()} & {@link #start()} and that's it !
+ * Call {@link #setDestinationAddress(java.net.InetAddress)} & {@link #start()} and that's it !
  * Call {@link #stop()} to stop the stream.
- * Do not forget to call {@link #release()} when you're done. 
  */
 public class AACStream extends AudioStream {
 
@@ -111,7 +110,7 @@ private static boolean AACStreamingSupported() {
 	}
 
 	/**
-	 * Some data (the actual sampling rate) needs to be stored once {@link #generateSessionDescription()} is called.
+	 * Some data (the actual sampling rate used by the phone and the AAC profile) needs to be stored once {@link #generateSessionDescription()} is called.
 	 * @param prefs The SharedPreferences that will be used to store the sampling rate 
 	 */
 	public void setPreferences(SharedPreferences prefs) {

File: src/net/majorkernelpanic/streaming/audio/AMRNBStream.java
Patch:
@@ -28,9 +28,8 @@
 
 /**
  * A class for streaming AMR-NB from the microphone of an android device using RTP.
- * Call {@link #setDestinationAddress(java.net.InetAddress)}, {@link #prepare()} & {@link #start()} and that's it !
+ * Call {@link #setDestinationAddress(java.net.InetAddress)} & {@link #start()} and that's it !
  * Call {@link #stop()} to stop the stream.
- * Do not forget to call {@link #release()} when you're done.
  */
 public class AMRNBStream extends AudioStream {
 

File: src/net/majorkernelpanic/streaming/rtp/RtpSocket.java
Patch:
@@ -155,7 +155,7 @@ public int getLocalPort() {
 
 	/** 
 	 * Returns an available buffer from the FIFO, it can then directly be modified. 
-	 * Call {@link commitBuffer(int)} to send it over the network. 
+	 * Call {@link #commitBuffer(int)} to send it over the network. 
 	 * @throws InterruptedException 
 	 **/
 	public byte[] requestBuffer() throws InterruptedException {

File: src/net/majorkernelpanic/streaming/video/H263Stream.java
Patch:
@@ -30,9 +30,8 @@
  * A class for streaming H.263 from the camera of an android device using RTP.
  * Call {@link #setDestinationAddress(java.net.InetAddress)}, {@link #setDestinationPorts(int)}, 
  * {@link #setVideoSize(int, int)}, {@link #setVideoFramerate(int)} and {@link #setVideoEncodingBitrate(int)} and you're good to go.
- * You can then call {@link #prepare()} & {@link #start()}.
+ * You can then call {@link #start()}.
  * Call {@link #stop()} to stop the stream.
- * Finally, do not forget to call {@link #release()} when you're done.
  */
 public class H263Stream extends VideoStream {
 

File: src/net/majorkernelpanic/streaming/video/H264Stream.java
Patch:
@@ -38,9 +38,8 @@
  * A class for streaming H.264 from the camera of an android device using RTP. 
  * Call {@link #setDestinationAddress(java.net.InetAddress)}, {@link #setDestinationPorts(int)}, 
  * {@link #setVideoSize(int, int)}, {@link #setVideoFramerate(int)} and {@link #setVideoEncodingBitrate(int)} and you're good to go.
- * You can then call {@link #prepare()} & {@link #start()}.
+ * You can then call {@link #start()}.
  * Call {@link #stop()} to stop the stream.
- * Finally, do not forget to call {@link #release()} when you're done.
  */
 public class H264Stream extends VideoStream {
 

File: src/net/majorkernelpanic/streaming/mp4/MP4Config.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011 GUIGUI Simon, fyhertz@gmail.com
+ * Copyright (C) 2011-2013 GUIGUI Simon, fyhertz@gmail.com
  * 
  * This file is part of Spydroid (http://code.google.com/p/spydroid-ipcamera/)
  * 
@@ -30,7 +30,7 @@ public class MP4Config {
 	private MP4Parser mp4Parser;
 	private String mProfilLevel, mPPS, mSPS;
 
-	public MP4Config(String profil, String pps, String sps) {
+	public MP4Config(String profil, String sps, String pps) {
 		mProfilLevel = profil; 
 		mPPS = pps; 
 		mSPS = sps;

File: src/net/majorkernelpanic/streaming/misc/RtspServer.java
Patch:
@@ -42,6 +42,8 @@
  * For each connected client, a Session is instantiated.
  * The Session will start or stop streams according to what the client wants.
  * 
+ * Will soon be converted to an Android Service !
+ * 
  */
 public class RtspServer {
 	

File: src/net/majorkernelpanic/http/ModifiedHttpContext.java
Patch:
@@ -5,12 +5,12 @@
 import org.apache.http.protocol.BasicHttpContext;
 
 /**
- * Little modification of BasicHttpContext to add access to the Socket
+ * Little modification of BasicHttpContext to add access to the underlying tcp socket
  */
 public class ModifiedHttpContext extends BasicHttpContext {
 
 	private Socket socket;
-	
+
 	public ModifiedHttpContext(Socket socket) {
 		super(null);
 		this.socket = socket;
@@ -19,5 +19,5 @@ public ModifiedHttpContext(Socket socket) {
 	public Socket getSocket() {
 		return socket;
 	}
-	
+
 }

File: src/net/majorkernelpanic/spydroid/SpydroidApplication.java
Patch:
@@ -39,7 +39,7 @@
 @ReportsCrashes(formKey = "dGhWbUlacEV6X0hlS2xqcmhyYzNrWlE6MQ", customReportContent = { APP_VERSION_NAME, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, STACK_TRACE, USER_APP_START_DATE, USER_CRASH_DATE, LOGCAT, DEVICE_FEATURES, SHARED_PREFERENCES })
 public class SpydroidApplication extends android.app.Application {
 	
-	public final static boolean DONATE_VERSION = true;
+	public final static boolean DONATE_VERSION = false;
 	
 	private static Context context;
 	

File: src/net/majorkernelpanic/streaming/misc/UriParser.java
Patch:
@@ -166,6 +166,7 @@ else if (param.getName().equals("testnewapi")) {
 			// The default behavior is to only add one video track
 			if (session.getTrackCount()==0) {
 				session.addVideoTrack();
+				session.addAudioTrack();
 			}
 			
 		} 

