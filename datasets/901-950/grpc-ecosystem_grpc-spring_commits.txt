File: tests/src/test/java/net/devh/boot/grpc/test/config/BaseAutoConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.context.annotation.Configuration;
 
 import net.devh.boot.grpc.client.autoconfigure.GrpcClientAutoConfiguration;
+import net.devh.boot.grpc.client.autoconfigure.GrpcClientDefaultRequestTimeoutAutoConfiguration;
 import net.devh.boot.grpc.common.autoconfigure.GrpcCommonCodecAutoConfiguration;
 import net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration;
 import net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration;
@@ -28,7 +29,7 @@
 @Configuration
 @ImportAutoConfiguration({GrpcCommonCodecAutoConfiguration.class, GrpcServerAutoConfiguration.class,
         GrpcServerFactoryAutoConfiguration.class, GrpcServerSecurityAutoConfiguration.class,
-        GrpcClientAutoConfiguration.class})
+        GrpcClientAutoConfiguration.class, GrpcClientDefaultRequestTimeoutAutoConfiguration.class})
 public class BaseAutoConfiguration {
 
 }

File: tests/src/test/java/net/devh/boot/grpc/test/config/BaseAutoConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.context.annotation.Configuration;
 
 import net.devh.boot.grpc.client.autoconfigure.GrpcClientAutoConfiguration;
-import net.devh.boot.grpc.client.autoconfigure.GrpcClientTimeoutAutoConfiguration;
+import net.devh.boot.grpc.client.autoconfigure.GrpcClientDefaultRequestTimeoutAutoConfiguration;
 import net.devh.boot.grpc.common.autoconfigure.GrpcCommonCodecAutoConfiguration;
 import net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration;
 import net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration;
@@ -29,7 +29,7 @@
 @Configuration
 @ImportAutoConfiguration({GrpcCommonCodecAutoConfiguration.class, GrpcServerAutoConfiguration.class,
         GrpcServerFactoryAutoConfiguration.class, GrpcServerSecurityAutoConfiguration.class,
-        GrpcClientAutoConfiguration.class, GrpcClientTimeoutAutoConfiguration.class})
+        GrpcClientAutoConfiguration.class, GrpcClientDefaultRequestTimeoutAutoConfiguration.class})
 public class BaseAutoConfiguration {
 
 }

File: grpc-server-spring-boot-starter/src/test/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceDefaultAutoConfigurationTest.java
Patch:
@@ -36,8 +36,7 @@
 @ImportAutoConfiguration({
         GrpcServerAutoConfiguration.class,
         GrpcServerFactoryAutoConfiguration.class,
-        GrpcHealthServiceAutoConfiguration.class
-})
+        GrpcHealthServiceAutoConfiguration.class})
 @DirtiesContext
 class GrpcHealthServiceDefaultAutoConfigurationTest {
 

File: grpc-server-spring-boot-starter/src/test/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceFalseAutoConfigurationTest.java
Patch:
@@ -34,8 +34,7 @@
 @ImportAutoConfiguration({
         GrpcServerAutoConfiguration.class,
         GrpcServerFactoryAutoConfiguration.class,
-        GrpcHealthServiceAutoConfiguration.class
-})
+        GrpcHealthServiceAutoConfiguration.class})
 @DirtiesContext
 class GrpcHealthServiceFalseAutoConfigurationTest extends GrpcHealthServiceDefaultAutoConfigurationTest {
 

File: grpc-server-spring-boot-starter/src/test/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceTrueAutoConfigurationTest.java
Patch:
@@ -25,8 +25,7 @@
 @ImportAutoConfiguration({
         GrpcServerAutoConfiguration.class,
         GrpcServerFactoryAutoConfiguration.class,
-        GrpcHealthServiceAutoConfiguration.class
-})
+        GrpcHealthServiceAutoConfiguration.class})
 @DirtiesContext
 class GrpcHealthServiceTrueAutoConfigurationTest extends GrpcHealthServiceDefaultAutoConfigurationTest {
 }

File: grpc-server-spring-boot-starter/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceAutoConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 
 package net.devh.boot.grpc.server.autoconfigure;
 
-import net.devh.boot.grpc.server.health.ActuatorGrpcHealth;
 import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration;
 import org.springframework.boot.actuate.health.HealthEndpoint;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
@@ -30,6 +29,7 @@
 
 import io.grpc.BindableService;
 import io.grpc.protobuf.services.HealthStatusManager;
+import net.devh.boot.grpc.server.health.ActuatorGrpcHealth;
 import net.devh.boot.grpc.server.service.GrpcService;
 
 /**
@@ -57,7 +57,8 @@ HealthStatusManager healthStatusManager() {
 
     @Bean
     @GrpcService
-    @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-type", havingValue = "GRPC", matchIfMissing = true)
+    @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-type", havingValue = "GRPC",
+            matchIfMissing = true)
     BindableService grpcHealthService(final HealthStatusManager healthStatusManager) {
         return healthStatusManager.getHealthService();
     }

File: grpc-server-spring-boot-starter/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceAutoConfiguration.java
Patch:
@@ -57,14 +57,14 @@ HealthStatusManager healthStatusManager() {
 
     @Bean
     @GrpcService
-    @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-type", havingValue = "grpc", matchIfMissing = true)
+    @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-type", havingValue = "GRPC", matchIfMissing = true)
     BindableService grpcHealthService(final HealthStatusManager healthStatusManager) {
         return healthStatusManager.getHealthService();
     }
 
     @Bean
     @GrpcService
-    @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-type", havingValue = "actuator")
+    @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-type", havingValue = "ACTUATOR")
     @ConditionalOnBean(HealthEndpoint.class)
     BindableService grpcHealthServiceActuator(final HealthEndpoint healthStatusManager) {
         return new ActuatorGrpcHealth(healthStatusManager);

File: grpc-server-spring-boot-starter/src/test/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceTrueActuatorConfigurationTest.java
Patch:
@@ -42,7 +42,7 @@
         GrpcHealthServiceTrueActuatorConfigurationTest.TestConfig.class
 },
         properties = {
-                "grpc.server.health-service-type=actuator",
+                "grpc.server.health-service-type=ACTUATOR",
         })
 @ImportAutoConfiguration({
         GrpcServerAutoConfiguration.class,

File: grpc-client-spring-boot-starter/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java
Patch:
@@ -501,6 +501,9 @@ public void copyDefaultsFrom(final GrpcChannelProperties config) {
         if (this.maxInboundMessageSize == null) {
             this.maxInboundMessageSize = config.maxInboundMessageSize;
         }
+        if (this.maxInboundMetadataSize == null) {
+            this.maxInboundMetadataSize = config.maxInboundMetadataSize;
+        }
         if (this.negotiationType == null) {
             this.negotiationType = config.negotiationType;
         }

File: grpc-client-spring-boot-starter/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java
Patch:
@@ -501,6 +501,9 @@ public void copyDefaultsFrom(final GrpcChannelProperties config) {
         if (this.maxInboundMessageSize == null) {
             this.maxInboundMessageSize = config.maxInboundMessageSize;
         }
+        if (this.maxInboundMetadataSize == null) {
+            this.maxInboundMetadataSize = config.maxInboundMetadataSize;
+        }
         if (this.negotiationType == null) {
             this.negotiationType = config.negotiationType;
         }

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/util/Constants.java
Patch:
@@ -28,7 +28,7 @@ public final class Constants {
 
 
     /**
-     * A constant that defines the instrumentation_source metric tag value
+     * A constant that defines the library name that can be used as metric tags
      */
     public static final String LIBRARY_NAME = "grpc-spring";
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClient.java
Patch:
@@ -65,7 +65,7 @@
  *
  * @see GrpcClientBean Add as bean to the {@link ApplicationContext}.
  */
-@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClient.java
Patch:
@@ -65,7 +65,7 @@
  *
  * @see GrpcClientBean Add as bean to the {@link ApplicationContext}.
  */
-@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
+@Target({ElementType.ANNOTATION_TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Inherited

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java
Patch:
@@ -105,7 +105,7 @@ public class GrpcServerProperties {
      * shutdown). If set to a negative value, the server waits forever. If set to {@code 0} the server will force
      * shutdown immediately. Defaults to {@code 30s}.
      *
-     * @param gracefullShutdownTimeout The time to wait for a graceful shutdown.
+     * @param shutdownGracePeriod The time to wait for a graceful shutdown.
      * @return The time to wait for a graceful shutdown.
      */
     @DurationUnit(ChronoUnit.SECONDS)

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientMetricAutoConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.annotation.Order;
@@ -40,6 +41,7 @@
 @AutoConfigureAfter(CompositeMeterRegistryAutoConfiguration.class)
 @AutoConfigureBefore(GrpcClientAutoConfiguration.class)
 @ConditionalOnBean(MeterRegistry.class)
+@ConditionalOnClass(MetricCollectingClientInterceptor.class)
 public class GrpcClientMetricAutoConfiguration {
 
     /**

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerMetricAutoConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -58,6 +59,7 @@
 @AutoConfigureAfter(CompositeMeterRegistryAutoConfiguration.class)
 @AutoConfigureBefore(GrpcServerAutoConfiguration.class)
 @ConditionalOnBean(MeterRegistry.class)
+@ConditionalOnClass(MetricCollectingServerInterceptor.class)
 public class GrpcServerMetricAutoConfiguration {
 
     @GrpcGlobalServerInterceptor

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientMetricAutoConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.annotation.Order;
@@ -40,6 +41,7 @@
 @AutoConfigureAfter(CompositeMeterRegistryAutoConfiguration.class)
 @AutoConfigureBefore(GrpcClientAutoConfiguration.class)
 @ConditionalOnBean(MeterRegistry.class)
+@ConditionalOnClass(MetricCollectingClientInterceptor.class)
 public class GrpcClientMetricAutoConfiguration {
 
     /**

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerMetricAutoConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -58,6 +59,7 @@
 @AutoConfigureAfter(CompositeMeterRegistryAutoConfiguration.class)
 @AutoConfigureBefore(GrpcServerAutoConfiguration.class)
 @ConditionalOnBean(MeterRegistry.class)
+@ConditionalOnClass(MetricCollectingServerInterceptor.class)
 public class GrpcServerMetricAutoConfiguration {
 
     @GrpcGlobalServerInterceptor

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -288,12 +288,12 @@ private void connectOnStartup(final String name, final ManagedChannel channel, f
         boolean connected;
         try {
             log.debug("Waiting for connection to channel {}", name);
-            connected = !readyLatch.await(timeout.toMillis(), TimeUnit.MILLISECONDS);
+            connected = readyLatch.await(timeout.toMillis(), TimeUnit.MILLISECONDS);
         } catch (final InterruptedException e) {
             Thread.currentThread().interrupt();
             connected = false;
         }
-        if (connected) {
+        if (!connected) {
             throw new IllegalStateException("Can't connect to channel " + name);
         }
         log.info("Successfully connected to channel {}", name);

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/scope/GrpcRequestScope.java
Patch:
@@ -118,7 +118,8 @@ private ScopedBeansContainer getCurrentScopeContainer() {
         ScopedBeansContainer scopedBeansContainer = GRPC_REQUEST_KEY.get();
         if (scopedBeansContainer == null) {
             throw new IllegalStateException(
-                    "Trying to access grpcRequest-Scope, but it was not started for this thread.");
+                    "Trying to access grpcRequest-Scope, but it was not assigned to this execution context.\n"
+                            + "There is either no active grpc request or you didn't transfer the correct GrpcContext to this async execution context.");
         }
         return scopedBeansContainer;
     }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/scope/GrpcRequestScope.java
Patch:
@@ -118,7 +118,8 @@ private ScopedBeansContainer getCurrentScopeContainer() {
         ScopedBeansContainer scopedBeansContainer = GRPC_REQUEST_KEY.get();
         if (scopedBeansContainer == null) {
             throw new IllegalStateException(
-                    "Trying to access grpcRequest-Scope, but it was not started for this thread.");
+                    "Trying to access grpcRequest-Scope, but it was not assigned to this execution context.\n"
+                            + "There is either no active grpc request or you didn't transfer the correct GrpcContext to this async execution context.");
         }
         return scopedBeansContainer;
     }

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/security/KeyStoreUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2022 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
@@ -51,8 +51,9 @@ public final class KeyStoreUtils {
      */
     public static final String FORMAT_FALLBACK = KeyStore.getDefaultType();
     private static final Map<String, String> FORMAT_MAPPING = ImmutableMap.<String, String>builder()
-            .put("jks", FORMAT_FALLBACK)
+            .put("jks", "JKS")
             .put("p12", "PKCS12")
+            .put("pfx", "PKCS12")
             .build();
 
     /**

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfSignedMutualP12KeystoreSetupTest.java
Patch:
@@ -45,10 +45,10 @@
 })
 @SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
-public class SelfSignedMutualKeystoreSetupTest extends AbstractSimpleServerClientTest {
+public class SelfSignedMutualP12KeystoreSetupTest extends AbstractSimpleServerClientTest {
 
-    public SelfSignedMutualKeystoreSetupTest() {
-        log.info("--- SelfSignedMutualKeystoreSetupTest ---");
+    public SelfSignedMutualP12KeystoreSetupTest() {
+        log.info("--- SelfSignedMutualP12KeystoreSetupTest ---");
     }
 
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2022 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
@@ -58,7 +58,7 @@
  * @param <T> The type of builder used by this channel factory.
  *
  * @author Michael (yidongnan@gmail.com)
- * @author Daniel Theuke (daniel.theuke@heuboe.de)
+ * @author Daniel Theuke (daniel.theuke@aequitas-software.de)
  * @since 5/17/16
  */
 @Slf4j
@@ -83,7 +83,7 @@ public abstract class AbstractChannelFactory<T extends ManagedChannelBuilder<T>>
      * @param globalClientInterceptorRegistry The interceptor registry to use.
      * @param channelConfigurers The channel configurers to use. Can be empty.
      */
-    public AbstractChannelFactory(final GrpcChannelsProperties properties,
+    protected AbstractChannelFactory(final GrpcChannelsProperties properties,
             final GlobalClientInterceptorRegistry globalClientInterceptorRegistry,
             final List<GrpcChannelConfigurer> channelConfigurers) {
         this.properties = requireNonNull(properties, "properties");

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/security/KeyStoreUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2022 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
@@ -51,8 +51,9 @@ public final class KeyStoreUtils {
      */
     public static final String FORMAT_FALLBACK = KeyStore.getDefaultType();
     private static final Map<String, String> FORMAT_MAPPING = ImmutableMap.<String, String>builder()
-            .put("jks", FORMAT_FALLBACK)
+            .put("jks", "JKS")
             .put("p12", "PKCS12")
+            .put("pfx", "PKCS12")
             .build();
 
     /**

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfSignedMutualP12KeystoreSetupTest.java
Patch:
@@ -45,10 +45,10 @@
 })
 @SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
-public class SelfSignedMutualKeystoreSetupTest extends AbstractSimpleServerClientTest {
+public class SelfSignedMutualP12KeystoreSetupTest extends AbstractSimpleServerClientTest {
 
-    public SelfSignedMutualKeystoreSetupTest() {
-        log.info("--- SelfSignedMutualKeystoreSetupTest ---");
+    public SelfSignedMutualP12KeystoreSetupTest() {
+        log.info("--- SelfSignedMutualP12KeystoreSetupTest ---");
     }
 
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2022 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
@@ -58,7 +58,7 @@
  * @param <T> The type of builder used by this channel factory.
  *
  * @author Michael (yidongnan@gmail.com)
- * @author Daniel Theuke (daniel.theuke@heuboe.de)
+ * @author Daniel Theuke (daniel.theuke@aequitas-software.de)
  * @since 5/17/16
  */
 @Slf4j
@@ -83,7 +83,7 @@ public abstract class AbstractChannelFactory<T extends ManagedChannelBuilder<T>>
      * @param globalClientInterceptorRegistry The interceptor registry to use.
      * @param channelConfigurers The channel configurers to use. Can be empty.
      */
-    public AbstractChannelFactory(final GrpcChannelsProperties properties,
+    protected AbstractChannelFactory(final GrpcChannelsProperties properties,
             final GlobalClientInterceptorRegistry globalClientInterceptorRegistry,
             final List<GrpcChannelConfigurer> channelConfigurers) {
         this.properties = requireNonNull(properties, "properties");

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/InProcessOrAlternativeChannelFactory.java
Patch:
@@ -76,9 +76,12 @@ public InProcessOrAlternativeChannelFactory(final GrpcChannelsProperties propert
     public Channel createChannel(final String name, final List<ClientInterceptor> interceptors,
             boolean sortInterceptors) {
         final URI address = this.properties.getChannel(name).getAddress();
+        final String defaultScheme = this.properties.getDefaultScheme();
         if (address != null && IN_PROCESS_SCHEME.equals(address.getScheme())) {
             return this.inProcessChannelFactory.createChannel(address.getSchemeSpecificPart(), interceptors,
                     sortInterceptors);
+        } else if (address == null && defaultScheme != null && defaultScheme.startsWith(IN_PROCESS_SCHEME)) {
+            return this.inProcessChannelFactory.createChannel(name, interceptors, sortInterceptors);
         }
         return this.alternativeChannelFactory.createChannel(name, interceptors, sortInterceptors);
     }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/InProcessOrAlternativeChannelFactory.java
Patch:
@@ -80,7 +80,7 @@ public Channel createChannel(final String name, final List<ClientInterceptor> in
         if (address != null && IN_PROCESS_SCHEME.equals(address.getScheme())) {
             return this.inProcessChannelFactory.createChannel(address.getSchemeSpecificPart(), interceptors,
                     sortInterceptors);
-        } else if (defaultScheme != null && defaultScheme.startsWith(IN_PROCESS_SCHEME)) {
+        } else if (address == null && defaultScheme != null && defaultScheme.startsWith(IN_PROCESS_SCHEME)) {
             return this.inProcessChannelFactory.createChannel(name, interceptors, sortInterceptors);
         }
         return this.alternativeChannelFactory.createChannel(name, interceptors, sortInterceptors);

File: tests/src/test/java/net/devh/boot/grpc/test/setup/InProcessDefaultSchemeConnectionTest.java
Patch:
@@ -36,7 +36,7 @@
  *
  */
 @SpringBootTest(properties = {
-        "grpc.server.port=0",
+        "grpc.server.port=-1",
         "grpc.server.in-process-name=test",
         "grpc.client.GLOBAL.negotiationType=PLAINTEXT",
         "grpc.default-scheme=in-process:",

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientHealthAutoConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 package net.devh.boot.grpc.client.autoconfigure;
 
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.health.Health;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
@@ -37,6 +38,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @AutoConfigureAfter(GrpcClientAutoConfiguration.class)
+@ConditionalOnEnabledHealthIndicator("grpcChannel")
 @ConditionalOnClass(name = "org.springframework.boot.actuate.health.HealthIndicator")
 public class GrpcClientHealthAutoConfiguration {
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/InProcessOrAlternativeChannelFactory.java
Patch:
@@ -76,9 +76,12 @@ public InProcessOrAlternativeChannelFactory(final GrpcChannelsProperties propert
     public Channel createChannel(final String name, final List<ClientInterceptor> interceptors,
             boolean sortInterceptors) {
         final URI address = this.properties.getChannel(name).getAddress();
+        final String defaultScheme = this.properties.getDefaultScheme();
         if (address != null && IN_PROCESS_SCHEME.equals(address.getScheme())) {
             return this.inProcessChannelFactory.createChannel(address.getSchemeSpecificPart(), interceptors,
                     sortInterceptors);
+        } else if (defaultScheme != null && defaultScheme.startsWith(IN_PROCESS_SCHEME)) {
+            return this.inProcessChannelFactory.createChannel(name, interceptors, sortInterceptors);
         }
         return this.alternativeChannelFactory.createChannel(name, interceptors, sortInterceptors);
     }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientHealthAutoConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 
 package net.devh.boot.grpc.client.autoconfigure;
 
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.health.Health;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
@@ -37,6 +38,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @AutoConfigureAfter(GrpcClientAutoConfiguration.class)
+@ConditionalOnEnabledHealthIndicator("grpcChannel")
 @ConditionalOnClass(name = "org.springframework.boot.actuate.health.HealthIndicator")
 public class GrpcClientHealthAutoConfiguration {
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/NettyChannelFactory.java
Patch:
@@ -77,7 +77,7 @@ protected NettyChannelBuilder newChannelBuilder(final String name) {
         if (address == null) {
             String defaultScheme = getDefaultScheme();
             if (defaultScheme != null) {
-                address = URI.create(defaultScheme + ":///" + name);
+                address = URI.create(defaultScheme + name);
             } else {
                 address = URI.create(name);
             }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/ShadedNettyChannelFactory.java
Patch:
@@ -76,7 +76,7 @@ protected NettyChannelBuilder newChannelBuilder(final String name) {
         if (address == null) {
             String defaultScheme = getDefaultScheme();
             if (defaultScheme != null) {
-                address = URI.create(defaultScheme + ":///" + name);
+                address = URI.create(defaultScheme + name);
             } else {
                 address = URI.create(name);
             }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerFactoryAutoConfiguration.java
Patch:
@@ -152,10 +152,11 @@ public GrpcServerLifecycle nettyGrpcServerLifecycle(
     @Bean
     public InProcessGrpcServerFactory inProcessGrpcServerFactory(
             final GrpcServerProperties properties,
-            final GrpcServiceDiscoverer serviceDiscoverer) {
+            final GrpcServiceDiscoverer serviceDiscoverer,
+            final List<GrpcServerConfigurer> serverConfigurers) {
 
         log.info("'grpc.server.in-process-name' is set: Creating InProcessGrpcServerFactory");
-        final InProcessGrpcServerFactory factory = new InProcessGrpcServerFactory(properties);
+        final InProcessGrpcServerFactory factory = new InProcessGrpcServerFactory(properties, serverConfigurers);
         for (final GrpcServiceDefinition service : serviceDiscoverer.findGrpcServices()) {
             factory.addService(service);
         }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerFactoryAutoConfiguration.java
Patch:
@@ -152,10 +152,11 @@ public GrpcServerLifecycle nettyGrpcServerLifecycle(
     @Bean
     public InProcessGrpcServerFactory inProcessGrpcServerFactory(
             final GrpcServerProperties properties,
-            final GrpcServiceDiscoverer serviceDiscoverer) {
+            final GrpcServiceDiscoverer serviceDiscoverer,
+            final List<GrpcServerConfigurer> serverConfigurers) {
 
         log.info("'grpc.server.in-process-name' is set: Creating InProcessGrpcServerFactory");
-        final InProcessGrpcServerFactory factory = new InProcessGrpcServerFactory(properties);
+        final InProcessGrpcServerFactory factory = new InProcessGrpcServerFactory(properties, serverConfigurers);
         for (final GrpcServiceDefinition service : serviceDiscoverer.findGrpcServices()) {
             factory.addService(service);
         }

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/metric/MetricConstants.java
Patch:
@@ -61,11 +61,11 @@ public final class MetricConstants {
     /**
      * The metrics tag key that belongs to the type of the called method.
      */
-    public static final String TAG_METHOD_TYPE = "methodType";
+    public static final String TAG_METHOD_TYPE = "method.type";
     /**
      * The metrics tag key that belongs to the result status code.
      */
-    public static final String TAG_STATUS_CODE = "statusCode";
+    public static final String TAG_STATUS_CODE = "status.code";
 
     private MetricConstants() {}
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/security/CallCredentialsHelper.java
Patch:
@@ -192,7 +192,7 @@ public static CallCredentials bearerAuth(final String token) {
      * @see #authorizationHeader(Supplier)
      */
     public static CallCredentials bearerAuth(final Supplier<String> tokenSource) {
-        return authorizationHeader(() -> BEARER_AUTH_PREFIX + tokenSource);
+        return authorizationHeader(() -> BEARER_AUTH_PREFIX + tokenSource.get());
     }
 
     /**

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/event/GrpcServerShutdownEvent.java
Patch:
@@ -27,15 +27,15 @@
  *
  * @see Server#shutdown()
  * @see Server#isShutdown()
- * 
+ *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 public class GrpcServerShutdownEvent extends GrpcServerLifecycleEvent {
 
     private static final long serialVersionUID = 1L;
 
     /**
-     * Creates a new GrpcServerStoppingEvent.
+     * Creates a new GrpcServerShutdownEvent.
      *
      * @param lifecyle The lifecycle that caused this event.
      * @param clock The clock used to determine the timestamp.
@@ -50,7 +50,7 @@ public GrpcServerShutdownEvent(
     }
 
     /**
-     * Creates a new GrpcServerStartedEvent.
+     * Creates a new GrpcServerShutdownEvent.
      *
      * @param lifecyle The lifecycle that caused this event.
      * @param server The server related to this event.

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/event/GrpcServerStartedEvent.java
Patch:
@@ -28,7 +28,7 @@
  * This event will be fired after the server has been started.
  *
  * @see Server#start()
- * 
+ *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 public class GrpcServerStartedEvent extends GrpcServerLifecycleEvent {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/event/GrpcServerTerminatedEvent.java
Patch:
@@ -26,15 +26,15 @@
  * This event will be fired after the server completed to shutdown. The server will no longer process requests.
  *
  * @see Server#isTerminated()
- * 
+ *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 public class GrpcServerTerminatedEvent extends GrpcServerLifecycleEvent {
 
     private static final long serialVersionUID = 1L;
 
     /**
-     * Creates a new GrpcServerStoppingEvent.
+     * Creates a new GrpcServerTerminatedEvent.
      *
      * @param lifecyle The lifecycle that caused this event.
      * @param clock The clock used to determine the timestamp.
@@ -49,7 +49,7 @@ public GrpcServerTerminatedEvent(
     }
 
     /**
-     * Creates a new GrpcServerStartedEvent.
+     * Creates a new GrpcServerTerminatedEvent.
      *
      * @param lifecyle The lifecycle that caused this event.
      * @param server The server related to this event.

File: grpc-server-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/server/serverfactory/GrpcServerLifecycleTest.java
Patch:
@@ -94,9 +94,9 @@ void testGracefulShutdown() {
         // And we give it 5s to shutdown
         final GrpcServerLifecycle lifecycle =
                 new GrpcServerLifecycle(this.factory, ofMillis(5000), this.eventPublisher);
-        verify(this.eventPublisher).publishEvent(ArgumentMatchers.any(GrpcServerStartedEvent.class));
 
         lifecycle.start();
+        verify(this.eventPublisher).publishEvent(ArgumentMatchers.any(GrpcServerStartedEvent.class));
 
         assertFalse(server.isShutdown());
         assertFalse(server.isTerminated());

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/nameresolver/SelfNameResolverFactory.java
Patch:
@@ -50,7 +50,7 @@ public SelfNameResolverFactory(final GrpcServerProperties properties) {
 
     @Override
     public NameResolver newNameResolver(final URI targetUri, final Args args) {
-        if (SELF_SCHEME.equals(targetUri.getScheme()) || targetUri.toString().equals(SELF_SCHEME)) {
+        if (SELF_SCHEME.equals(targetUri.getScheme())) {
             return new SelfNameResolver(this.properties, args);
         }
         return null;

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfNameResolverConnectionTest.java
Patch:
@@ -48,10 +48,10 @@ public class SelfNameResolverConnectionTest {
 
     private static final Empty EMPTY = Empty.getDefaultInstance();
 
-    @GrpcClient("self")
+    @GrpcClient("self:self")
     private TestServiceBlockingStub selfStub;
 
-    @GrpcClient("other")
+    @GrpcClient("self:other")
     private TestServiceBlockingStub otherStub;
 
     /**

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClient.java
Patch:
@@ -27,6 +27,7 @@
 import javax.inject.Inject;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationContext;
 
 import io.grpc.CallCredentials;
 import io.grpc.CallOptions;
@@ -39,7 +40,7 @@
 
 /**
  * An annotation for fields of type {@link Channel} or subclasses of {@link AbstractStub}/gRPC client services. Also
- * works for annotated methods that only take a single parameter of the same types. Annotated fields/methods will be
+ * works for annotated methods that only take a single parameter of these types. Annotated fields/methods will be
  * automatically populated/invoked by Spring.
  *
  * <p>
@@ -59,8 +60,7 @@
  * interceptors and applied using {@link ClientInterceptors#interceptForward(Channel, ClientInterceptor...)}.
  * </p>
  *
- * @author Michael (yidongnan@gmail.com)
- * @since 2016/12/7
+ * @see GrpcClientBean Add as bean to the {@link ApplicationContext}.
  */
 @Target({ElementType.FIELD, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -117,8 +117,9 @@ public Object postProcessBeforeInitialization(final Object bean, final String be
                         beanFactory.registerSingleton(beanNameToCreate, beanValue);
                     } catch (final Exception e) {
                         throw new BeanCreationException(
-                                "Could not create and register grpc client bean: {} from class {}", beanNameToCreate,
-                                clazz.getSimpleName(), e);
+                                "Could not create and register grpc client bean " + beanNameToCreate + " from class " +
+                                        clazz.getSimpleName(),
+                                e);
                     }
                 }
             }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java
Patch:
@@ -69,7 +69,7 @@ public class GrpcServerProperties {
     /**
      * A constant that defines, the prefix of a Unix domain socket address.
      */
-    public static final String DOMAIN_SOCKET_ADDRESS_PREFIX = "unix://";
+    public static final String DOMAIN_SOCKET_ADDRESS_PREFIX = "unix:";
 
     /**
      * Bind address for the server. Defaults to {@link #ANY_IP_ADDRESS "*"}. Alternatively you can restrict this to

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/NettyGrpcServerFactory.java
Patch:
@@ -65,8 +65,8 @@ protected NettyServerBuilder newServerBuilder() {
         final String address = getAddress();
         final int port = getPort();
         if (address.startsWith(GrpcServerProperties.DOMAIN_SOCKET_ADDRESS_PREFIX)) {
-            return NettyServerBuilder
-                    .forAddress(new DomainSocketAddress(address.substring(GrpcServerProperties.DOMAIN_SOCKET_ADDRESS_PREFIX.length())))
+            String path = address.substring(GrpcServerProperties.DOMAIN_SOCKET_ADDRESS_PREFIX.length());
+            return NettyServerBuilder.forAddress(new DomainSocketAddress(path))
                     .channelType(EpollServerDomainSocketChannel.class)
                     .bossEventLoopGroup(new EpollEventLoopGroup(1))
                     .workerEventLoopGroup(new EpollEventLoopGroup());

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/ShadedNettyGrpcServerFactory.java
Patch:
@@ -66,8 +66,8 @@ protected NettyServerBuilder newServerBuilder() {
         final String address = getAddress();
         final int port = getPort();
         if (address.startsWith(GrpcServerProperties.DOMAIN_SOCKET_ADDRESS_PREFIX)) {
-            return NettyServerBuilder
-                    .forAddress(new DomainSocketAddress(address.substring(GrpcServerProperties.DOMAIN_SOCKET_ADDRESS_PREFIX.length())))
+            final String path = address.substring(GrpcServerProperties.DOMAIN_SOCKET_ADDRESS_PREFIX.length());
+            return NettyServerBuilder.forAddress(new DomainSocketAddress(path))
                     .channelType(EpollServerDomainSocketChannel.class)
                     .bossEventLoopGroup(new EpollEventLoopGroup(1))
                     .workerEventLoopGroup(new EpollEventLoopGroup());

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/AbstractGrpcServerFactory.java
Patch:
@@ -130,15 +130,15 @@ protected void configureKeepAlive(final T builder) {
     protected void configureConnectionLimits(final T builder) {
         if (this.properties.getMaxConnectionIdle() != null) {
             throw new IllegalStateException(
-                "MaxConnectionIdle is set but this implementation does not support maxConnectionIdle!");
+                    "MaxConnectionIdle is set but this implementation does not support maxConnectionIdle!");
         }
         if (this.properties.getMaxConnectionAge() != null) {
             throw new IllegalStateException(
-                "MaxConnectionAge is set but this implementation does not support maxConnectionAge!");
+                    "MaxConnectionAge is set but this implementation does not support maxConnectionAge!");
         }
         if (this.properties.getMaxConnectionAgeGrace() != null) {
             throw new IllegalStateException(
-                "MaxConnectionAgeGrace is set but this implementation does not support maxConnectionAgeGrace!");
+                    "MaxConnectionAgeGrace is set but this implementation does not support maxConnectionAgeGrace!");
         }
     }
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java
Patch:
@@ -113,7 +113,7 @@ public class GrpcServerProperties {
     private boolean enableKeepAlive = false;
 
     /**
-     * The default delay before we send a keepAlives. Defaults to {@code 60s}. Default unit {@link ChronoUnit#SECONDS
+     * The default delay before we send a keepAlives. Defaults to {@code 2h}. Default unit {@link ChronoUnit#SECONDS
      * SECONDS}.
      *
      * @see #setEnableKeepAlive(boolean)
@@ -123,7 +123,7 @@ public class GrpcServerProperties {
      * @return The default delay before sending keepAlives.
      */
     @DurationUnit(ChronoUnit.SECONDS)
-    private Duration keepAliveTime = Duration.of(60, ChronoUnit.SECONDS);
+    private Duration keepAliveTime = Duration.of(2, ChronoUnit.HOURS);
 
     /**
      * The default timeout for a keepAlives ping request. Defaults to {@code 20s}. Default unit

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java
Patch:
@@ -113,7 +113,7 @@ public class GrpcServerProperties {
     private boolean enableKeepAlive = false;
 
     /**
-     * The default delay before we send a keepAlives. Defaults to {@code 60s}. Default unit {@link ChronoUnit#SECONDS
+     * The default delay before we send a keepAlives. Defaults to {@code 2h}. Default unit {@link ChronoUnit#SECONDS
      * SECONDS}.
      *
      * @see #setEnableKeepAlive(boolean)
@@ -123,7 +123,7 @@ public class GrpcServerProperties {
      * @return The default delay before sending keepAlives.
      */
     @DurationUnit(ChronoUnit.SECONDS)
-    private Duration keepAliveTime = Duration.of(60, ChronoUnit.SECONDS);
+    private Duration keepAliveTime = Duration.of(2, ChronoUnit.HOURS);
 
     /**
      * The default timeout for a keepAlives ping request. Defaults to {@code 20s}. Default unit

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/CloudClientApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/CloudServerApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/GrpcServerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2021 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceAutoConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.context.annotation.Configuration;
 
 import io.grpc.BindableService;
-import io.grpc.protobuf.services.ProtoReflectionService;
 import io.grpc.services.HealthStatusManager;
 import net.devh.boot.grpc.server.service.GrpcService;
 
@@ -35,7 +34,7 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 @Configuration
-@ConditionalOnClass(ProtoReflectionService.class)
+@ConditionalOnClass(HealthStatusManager.class)
 @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-enabled", matchIfMissing = true)
 @AutoConfigureBefore(GrpcServerFactoryAutoConfiguration.class)
 public class GrpcHealthServiceAutoConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcHealthServiceAutoConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.context.annotation.Configuration;
 
 import io.grpc.BindableService;
-import io.grpc.protobuf.services.ProtoReflectionService;
 import io.grpc.services.HealthStatusManager;
 import net.devh.boot.grpc.server.service.GrpcService;
 
@@ -35,7 +34,7 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 @Configuration
-@ConditionalOnClass(ProtoReflectionService.class)
+@ConditionalOnClass(HealthStatusManager.class)
 @ConditionalOnProperty(prefix = "grpc.server", name = "health-service-enabled", matchIfMissing = true)
 @AutoConfigureBefore(GrpcServerFactoryAutoConfiguration.class)
 public class GrpcHealthServiceAutoConfiguration {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientHealthAutoConfiguration.java
Patch:
@@ -55,7 +55,7 @@ public HealthIndicator grpcChannelHealthIndicator(final GrpcChannelFactory facto
             final ImmutableMap<String, ConnectivityState> states = ImmutableMap.copyOf(factory.getConnectivityState());
             final Health.Builder health;
             if (states.containsValue(ConnectivityState.TRANSIENT_FAILURE)) {
-                health = Health.down();
+                health = Health.outOfService();
             } else {
                 health = Health.up();
             }

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -21,15 +21,14 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
-import io.grpc.ClientInterceptor;
 import net.devh.boot.grpc.client.interceptor.GrpcGlobalClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @GrpcGlobalClientInterceptor
-    ClientInterceptor logClientInterceptor() {
+    LogGrpcInterceptor logClientInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/GlobalInterceptorConfiguration.java
Patch:
@@ -19,14 +19,13 @@
 
 import org.springframework.context.annotation.Configuration;
 
-import io.grpc.ServerInterceptor;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 
 @Configuration(proxyBeanMethods = false)
 public class GlobalInterceptorConfiguration {
 
     @GrpcGlobalServerInterceptor
-    ServerInterceptor logServerInterceptor() {
+    LogGrpcInterceptor logServerInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -21,15 +21,14 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
-import io.grpc.ClientInterceptor;
 import net.devh.boot.grpc.client.interceptor.GrpcGlobalClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @GrpcGlobalClientInterceptor
-    ClientInterceptor logClientInterceptor() {
+    LogGrpcInterceptor logClientInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/GlobalInterceptorConfiguration.java
Patch:
@@ -19,14 +19,13 @@
 
 import org.springframework.context.annotation.Configuration;
 
-import io.grpc.ServerInterceptor;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 
 @Configuration(proxyBeanMethods = false)
 public class GlobalInterceptorConfiguration {
 
     @GrpcGlobalServerInterceptor
-    ServerInterceptor logServerInterceptor() {
+    LogGrpcInterceptor logServerInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -180,7 +180,7 @@ protected List<ClientInterceptor> interceptorsFromAnnotation(final GrpcClient an
         final List<ClientInterceptor> list = Lists.newArrayList();
         for (final Class<? extends ClientInterceptor> interceptorClass : annotation.interceptors()) {
             final ClientInterceptor clientInterceptor;
-            if (this.applicationContext.getBeanNamesForType(ClientInterceptor.class).length > 0) {
+            if (this.applicationContext.getBeanNamesForType(interceptorClass).length > 0) {
                 clientInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {

File: grpc-client-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessorTest.java
Patch:
@@ -141,7 +141,7 @@ public static class Interceptor1 implements ClientInterceptor {
         public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
                 final MethodDescriptor<ReqT, RespT> method,
                 final CallOptions callOptions, final Channel next) {
-            return next.newCall(null, callOptions);
+            return next.newCall(method, callOptions);
         }
 
     }
@@ -152,7 +152,7 @@ public static class Interceptor2 implements ClientInterceptor {
         public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
                 final MethodDescriptor<ReqT, RespT> method,
                 final CallOptions callOptions, final Channel next) {
-            return next.newCall(null, callOptions);
+            return next.newCall(method, callOptions);
         }
 
     }

File: grpc-client-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessorTest.java
Patch:
@@ -125,7 +125,7 @@ public String[] interceptorNames() {
         assertThat(beans).hasSize(1).doesNotContain(this.interceptor1);
     }
 
-    private static class TestConfig {
+    static class TestConfig {
 
         @Bean
         Interceptor1 interceptor1() {

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -21,15 +21,14 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
-import io.grpc.ClientInterceptor;
 import net.devh.boot.grpc.client.interceptor.GrpcGlobalClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @GrpcGlobalClientInterceptor
-    ClientInterceptor logClientInterceptor() {
+    LogGrpcInterceptor logClientInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/GlobalInterceptorConfiguration.java
Patch:
@@ -19,14 +19,13 @@
 
 import org.springframework.context.annotation.Configuration;
 
-import io.grpc.ServerInterceptor;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 
 @Configuration(proxyBeanMethods = false)
 public class GlobalInterceptorConfiguration {
 
     @GrpcGlobalServerInterceptor
-    ServerInterceptor logServerInterceptor() {
+    LogGrpcInterceptor logServerInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -21,15 +21,14 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
-import io.grpc.ClientInterceptor;
 import net.devh.boot.grpc.client.interceptor.GrpcGlobalClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @GrpcGlobalClientInterceptor
-    ClientInterceptor logClientInterceptor() {
+    LogGrpcInterceptor logClientInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/GlobalInterceptorConfiguration.java
Patch:
@@ -19,14 +19,13 @@
 
 import org.springframework.context.annotation.Configuration;
 
-import io.grpc.ServerInterceptor;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 
 @Configuration(proxyBeanMethods = false)
 public class GlobalInterceptorConfiguration {
 
     @GrpcGlobalServerInterceptor
-    ServerInterceptor logServerInterceptor() {
+    LogGrpcInterceptor logServerInterceptor() {
         return new LogGrpcInterceptor();
     }
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -180,7 +180,7 @@ protected List<ClientInterceptor> interceptorsFromAnnotation(final GrpcClient an
         final List<ClientInterceptor> list = Lists.newArrayList();
         for (final Class<? extends ClientInterceptor> interceptorClass : annotation.interceptors()) {
             final ClientInterceptor clientInterceptor;
-            if (this.applicationContext.getBeanNamesForType(ClientInterceptor.class).length > 0) {
+            if (this.applicationContext.getBeanNamesForType(interceptorClass).length > 0) {
                 clientInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientHealthAutoConfiguration.java
Patch:
@@ -55,7 +55,7 @@ public HealthIndicator grpcChannelHealthIndicator(final GrpcChannelFactory facto
             final ImmutableMap<String, ConnectivityState> states = ImmutableMap.copyOf(factory.getConnectivityState());
             final Health.Builder health;
             if (states.containsValue(ConnectivityState.TRANSIENT_FAILURE)) {
-                health = Health.down();
+                health = Health.outOfService();
             } else {
                 health = Health.up();
             }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/advice/GrpcAdviceIsPresentCondition.java
Patch:
@@ -42,7 +42,7 @@ public ConfigurationPhase getConfigurationPhase() {
     public boolean matches(final ConditionContext context, final AnnotatedTypeMetadata metadata) {
         final ConfigurableListableBeanFactory safeBeanFactory =
                 requireNonNull(context.getBeanFactory(), "ConfigurableListableBeanFactory is null");
-        return !safeBeanFactory.getBeansWithAnnotation(GrpcAdvice.class).isEmpty();
+        return safeBeanFactory.getBeanNamesForAnnotation(GrpcAdvice.class).length != 0;
     }
 
 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/advice/GrpcAdviceIsPresentCondition.java
Patch:
@@ -42,7 +42,7 @@ public ConfigurationPhase getConfigurationPhase() {
     public boolean matches(final ConditionContext context, final AnnotatedTypeMetadata metadata) {
         final ConfigurableListableBeanFactory safeBeanFactory =
                 requireNonNull(context.getBeanFactory(), "ConfigurableListableBeanFactory is null");
-        return !safeBeanFactory.getBeansWithAnnotation(GrpcAdvice.class).isEmpty();
+        return safeBeanFactory.getBeanNamesForAnnotation(GrpcAdvice.class).length != 0;
     }
 
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java
Patch:
@@ -406,7 +406,7 @@ public Duration getImmediateConnectTimeout() {
      * If set to a positive duration instructs the client to connect to the gRPC endpoint when the GRPC stub is created.
      * As a result the application startup will be slightly slower due to connection process being executed
      * synchronously up to the maximum to connection timeout. If the connection fails, the stub will fail to create with
-     * an exception which in turn causes the application context startup to fail. Defaults to false.
+     * an exception which in turn causes the application context startup to fail. Defaults to {@code 0}.
      *
      * @param immediateConnectTimeout Connection timeout at application startup.
      */

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -345,7 +345,7 @@ public synchronized void close() {
         final int channelCount = this.channels.size();
         this.channels.clear();
         this.channelStates.clear();
-        log.debug("GrpcCannelFactory closed (including {} channels)", channelCount);
+        log.debug("GrpcChannelFactory closed (including {} channels)", channelCount);
     }
 
     private static class ShutdownRecord {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcAdviceAutoConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 package net.devh.boot.grpc.server.autoconfigure;
 
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
-import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
@@ -37,16 +36,17 @@
 /**
  * The auto configuration that will create necessary beans to provide a proper exception handling via annotations
  * {@link GrpcAdvice @GrpcAdvice} and {@link GrpcExceptionHandler @GrpcExceptionHandler}.
+ *
  * <p>
  * Exception handling via global server interceptors {@link GrpcGlobalServerInterceptor @GrpcGlobalServerInterceptor}.
+ * </p>
  *
  * @author Andjelko Perisic (andjelko.perisic@gmail.com)
  * @see GrpcAdvice
  * @see GrpcExceptionHandler
  * @see GrpcAdviceExceptionInterceptor
  */
 @Configuration(proxyBeanMethods = false)
-@EnableConfigurationProperties
 @Conditional(GrpcAdviceIsPresentCondition.class)
 @AutoConfigureBefore(GrpcServerFactoryAutoConfiguration.class)
 public class GrpcAdviceAutoConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataConsulConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public void init() {
         if (consulRegistration != null) {
             final int port = grpcProperties.getPort();
             List<String> tags = consulRegistration.getService().getTags();
-            tags = tags==null ? new ArrayList<>() : tags;
+            tags = tags == null ? new ArrayList<>() : tags;
             if (GrpcUtils.INTER_PROCESS_DISABLE != port) {
                 tags.add(GrpcUtils.CLOUD_DISCOVERY_METADATA_PORT + "=" + port);
                 consulRegistration.getService().setTags(tags);

File: examples/cloud-grpc-client-consul/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientService.java
Patch:
@@ -17,13 +17,14 @@
 
 package net.devh.boot.grpc.examples.cloud.client;
 
+import org.springframework.stereotype.Service;
+
 import io.grpc.StatusRuntimeException;
 import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.client.inject.GrpcClient;
 import net.devh.boot.grpc.examples.lib.HelloReply;
 import net.devh.boot.grpc.examples.lib.HelloRequest;
 import net.devh.boot.grpc.examples.lib.SimpleGrpc.SimpleBlockingStub;
-import org.springframework.stereotype.Service;
 
 /**
  * @author zhaochunlin (946599275@qq.com)

File: examples/cloud-grpc-client-zookeeper/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientService.java
Patch:
@@ -17,13 +17,14 @@
 
 package net.devh.boot.grpc.examples.cloud.client;
 
+import org.springframework.stereotype.Service;
+
 import io.grpc.StatusRuntimeException;
 import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.client.inject.GrpcClient;
 import net.devh.boot.grpc.examples.lib.HelloReply;
 import net.devh.boot.grpc.examples.lib.HelloRequest;
 import net.devh.boot.grpc.examples.lib.SimpleGrpc.SimpleBlockingStub;
-import org.springframework.stereotype.Service;
 
 /**
  * @author zhaochunlin (946599275@qq.com)

File: examples/cloud-grpc-client-consul/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientController.java
Patch:
@@ -23,8 +23,8 @@
 import org.springframework.web.bind.annotation.RestController;
 
 /**
- * @author Michael (yidongnan@gmail.com)
- * @since 2016/12/4
+ * @author zhaochunlin (946599275@qq.com)
+ * @since 2021/1/9
  */
 @RestController
 public class GrpcClientController {

File: examples/cloud-grpc-client-consul/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientService.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.stereotype.Service;
 
 /**
- * @author Michael (yidongnan@gmail.com)
- * @since 2016/11/8
+ * @author zhaochunlin (946599275@qq.com)
+ * @since 2021/1/9
  */
 @Service
 @Slf4j

File: examples/cloud-grpc-server-consul/src/main/java/net/devh/boot/grpc/examples/cloud/server/GrpcServerService.java
Patch:
@@ -24,10 +24,9 @@
 import net.devh.boot.grpc.server.service.GrpcService;
 
 /**
- * @author Michael (yidongnan@gmail.com)
- * @since 2016/11/8
+ * @author zhaochunlin (946599275@qq.com)
+ * @since 2021/1/9
  */
-
 @GrpcService
 public class GrpcServerService extends SimpleGrpc.SimpleImplBase {
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataConsulConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Objects;
 
 import javax.annotation.PostConstruct;
 
@@ -52,10 +51,10 @@ public class GrpcMetadataConsulConfiguration {
     @PostConstruct
     public void init() {
         if (consulRegistration != null) {
-            final String port = String.valueOf(grpcProperties.getPort());
+            final int port = grpcProperties.getPort();
             List<String> tags = consulRegistration.getService().getTags();
             tags = tags==null ? new ArrayList<>() : tags;
-            if (!GrpcUtils.INTER_PROCESS_DISABLE.equals(port)) {
+            if (GrpcUtils.INTER_PROCESS_DISABLE != port) {
                 tags.add(GrpcUtils.CLOUD_DISCOVERY_METADATA_PORT + "=" + port);
                 consulRegistration.getService().setTags(tags);
             }

File: tests/src/test/java/net/devh/boot/grpc/test/config/AwaitableServerClientCallConfiguration.java
Patch:
@@ -73,7 +73,7 @@ public <ReqT, RespT> Listener<ReqT> interceptCall(
                     return next.startCall(call, headers);
                 } else {
                     final CountDownLatch thatCounter = serverCounter;
-                    return next.startCall(new SimpleForwardingServerCall<>(call) {
+                    return next.startCall(new SimpleForwardingServerCall<ReqT, RespT>(call) {
 
                         @Override
                         public void close(final Status status, final Metadata trailers) {
@@ -108,11 +108,11 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(
                     return next.newCall(method, callOptions);
                 } else {
                     final CountDownLatch thatCounter = clientCounter;
-                    return new SimpleForwardingClientCall<>(next.newCall(method, callOptions)) {
+                    return new SimpleForwardingClientCall<ReqT, RespT>(next.newCall(method, callOptions)) {
 
                         @Override
                         public void start(final Listener<RespT> responseListener, final Metadata headers) {
-                            super.start(new SimpleForwardingClientCallListener<>(responseListener) {
+                            super.start(new SimpleForwardingClientCallListener<RespT>(responseListener) {
 
                                 @Override
                                 public void onClose(final Status status, final Metadata trailers) {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/NameResolverRegistration.java
Patch:
@@ -58,9 +58,9 @@ public void register(NameResolverRegistry registry) {
         for (NameResolverProvider provider : this.providers) {
             try {
                 registry.register(provider);
-                log.info("{} is available -> Added to the NameResolverRegistry", provider);
+                log.debug("{} is available -> Added to the NameResolverRegistry", provider);
             } catch (IllegalArgumentException e) {
-                log.info("{} is not available -> Not added to the NameResolverRegistry", provider);
+                log.debug("{} is not available -> Not added to the NameResolverRegistry", provider);
             }
         }
     }
@@ -70,7 +70,7 @@ public void destroy() {
         for (NameResolverRegistry registry : this.registries) {
             for (NameResolverProvider provider : this.providers) {
                 registry.deregister(provider);
-                log.info("{} was removed from the NameResolverRegistry", provider);
+                log.debug("{} was removed from the NameResolverRegistry", provider);
             }
         }
         this.registries.clear();

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/NameResolverRegistration.java
Patch:
@@ -58,9 +58,9 @@ public void register(NameResolverRegistry registry) {
         for (NameResolverProvider provider : this.providers) {
             try {
                 registry.register(provider);
-                log.info("{} is available -> Added to the NameResolverRegistry", provider);
+                log.debug("{} is available -> Added to the NameResolverRegistry", provider);
             } catch (IllegalArgumentException e) {
-                log.info("{} is not available -> Not added to the NameResolverRegistry", provider);
+                log.debug("{} is not available -> Not added to the NameResolverRegistry", provider);
             }
         }
     }
@@ -70,7 +70,7 @@ public void destroy() {
         for (NameResolverRegistry registry : this.registries) {
             for (NameResolverProvider provider : this.providers) {
                 registry.deregister(provider);
-                log.info("{} was removed from the NameResolverRegistry", provider);
+                log.debug("{} was removed from the NameResolverRegistry", provider);
             }
         }
         this.registries.clear();

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/GrpcService.java
Patch:
@@ -23,6 +23,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.context.annotation.Bean;
 import org.springframework.stereotype.Service;
 
 import io.grpc.BindableService;
@@ -40,12 +41,12 @@
  * </p>
  *
  * @author Michael (yidongnan@gmail.com)
- * @since 5/17/16
  */
-@Target(ElementType.TYPE)
+@Target({ElementType.TYPE, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Service
+@Bean
 public @interface GrpcService {
 
     /**

File: tests/src/test/java/net/devh/boot/grpc/test/setup/AbstractSimpleServerClientTest.java
Patch:
@@ -61,7 +61,7 @@ public abstract class AbstractSimpleServerClientTest {
     protected TestServiceFutureStub testServiceFutureStub;
 
     @PostConstruct
-    public void init() {
+    protected void init() {
         // Test injection
         assertNotNull(this.channel, "channel");
         assertNotNull(this.testServiceBlockingStub, "testServiceBlockingStub");
@@ -77,7 +77,7 @@ public void init() {
      */
     @Test
     @DirtiesContext
-    public void testSuccessfulCall() throws InterruptedException, ExecutionException {
+    void testSuccessfulCall() throws InterruptedException, ExecutionException {
         log.info("--- Starting tests with successful call ---");
         assertEquals("1.2.3",
                 TestServiceGrpc.newBlockingStub(this.channel).normal(Empty.getDefaultInstance()).getVersion());
@@ -95,7 +95,7 @@ public void testSuccessfulCall() throws InterruptedException, ExecutionException
      */
     @Test
     @DirtiesContext
-    public void testFailingCall() {
+    void testFailingCall() {
         log.info("--- Starting tests with failing call ---");
         assertThrowsStatus(UNIMPLEMENTED,
                 () -> TestServiceGrpc.newBlockingStub(this.channel).unimplemented(Empty.getDefaultInstance()));

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -43,6 +43,7 @@
 import io.grpc.stub.AbstractStub;
 import net.devh.boot.grpc.client.channelfactory.GrpcChannelFactory;
 import net.devh.boot.grpc.client.nameresolver.NameResolverRegistration;
+import net.devh.boot.grpc.client.stubfactory.FallbackStubFactory;
 import net.devh.boot.grpc.client.stubfactory.StubFactory;
 
 /**
@@ -259,6 +260,7 @@ private AbstractStub<?> createStub(final Class<? extends AbstractStub<?>> stubCl
     private List<StubFactory> getStubFactories() {
         if (this.stubFactories == null) {
             this.stubFactories = new ArrayList<>(this.applicationContext.getBeansOfType(StubFactory.class).values());
+            this.stubFactories.add(new FallbackStubFactory());
         }
         return this.stubFactories;
     }

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -17,18 +17,18 @@
 
 package net.devh.boot.grpc.examples.cloud.client;
 
-import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
 import io.grpc.ClientInterceptor;
+import net.devh.boot.grpc.client.interceptor.GrpcGlobalClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
-    @Bean
+    @GrpcGlobalClientInterceptor
     ClientInterceptor logClientInterceptor() {
         return new LogGrpcInterceptor();
     }

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -17,18 +17,18 @@
 
 package net.devh.boot.grpc.examples.local.client;
 
-import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
 import io.grpc.ClientInterceptor;
+import net.devh.boot.grpc.client.interceptor.GrpcGlobalClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
-    @Bean
+    @GrpcGlobalClientInterceptor
     ClientInterceptor logClientInterceptor() {
         return new LogGrpcInterceptor();
     }

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -22,15 +22,15 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
-import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorConfigurer;
+import io.grpc.ClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @Bean
-    public GlobalClientInterceptorConfigurer globalInterceptorConfigurerAdapter() {
-        return registry -> registry.addClientInterceptors(new LogGrpcInterceptor());
+    ClientInterceptor logClientInterceptor() {
+        return new LogGrpcInterceptor();
     }
 
 }

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -22,15 +22,15 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 
-import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorConfigurer;
+import io.grpc.ClientInterceptor;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
 @Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @Bean
-    public GlobalClientInterceptorConfigurer globalInterceptorConfigurerAdapter() {
-        return registry -> registry.addClientInterceptors(new LogGrpcInterceptor());
+    ClientInterceptor logClientInterceptor() {
+        return new LogGrpcInterceptor();
     }
 
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/GrpcGlobalClientInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.context.annotation.Bean;
 import org.springframework.stereotype.Component;
 
 import io.grpc.ClientInterceptor;
@@ -32,9 +33,10 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Target(ElementType.TYPE)
+@Target({ElementType.TYPE, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Component
+@Bean
 public @interface GrpcGlobalClientInterceptor {
 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/GrpcGlobalServerInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.springframework.context.annotation.Bean;
 import org.springframework.stereotype.Component;
 
 import io.grpc.ServerInterceptor;
@@ -32,9 +33,10 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Target(ElementType.TYPE)
+@Target({ElementType.TYPE, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
 @Component
+@Bean
 public @interface GrpcGlobalServerInterceptor {
 }

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorConfigurer;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
-@Configuration
+@Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @Bean

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/GlobalInterceptorConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorConfigurer;
 
-@Configuration
+@Configuration(proxyBeanMethods = false)
 public class GlobalInterceptorConfiguration {
 
     @Bean

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorConfigurer;
 
 @Order(Ordered.LOWEST_PRECEDENCE)
-@Configuration
+@Configuration(proxyBeanMethods = false)
 public class GlobalClientInterceptorConfiguration {
 
     @Bean

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/GlobalInterceptorConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorConfigurer;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorRegistry;
 
-@Configuration
+@Configuration(proxyBeanMethods = false)
 public class GlobalInterceptorConfiguration {
 
     @Bean

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityConfiguration.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @author Gregor Eeckels (gregor.eeckels@gmail.com)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 public class SecurityConfiguration {
 
     // This token will usually be created by a login endpoint (e.g. from Keycloak).

File: examples/security-grpc-bearerAuth-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityConfiguration.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author Gregor Eeckels (gregor.eeckels@gmail.com)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 // proxyTargetClass is required, if you use annotation driven security!
 // However, you will receive a warning that GrpcServerService#bindService() method is final.
 // You cannot avoid that warning (without massive amount of work), but it is safe to ignore it.

File: examples/security-grpc-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityConfiguration.java
Patch:
@@ -32,7 +32,7 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  * @see CallCredentialsHelper
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 public class SecurityConfiguration {
 
     @Value("${auth.username}")

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityConfiguration.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 // proxyTargetClass is required, if you use annotation driven security!
 // However, you will receive a warning that GrpcServerService#bindService() method is final.
 // You cannot avoid that warning (without massive amount of work), but it is safe to ignore it.

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientAutoConfiguration.java
Patch:
@@ -57,7 +57,7 @@
  * @author Michael (yidongnan@gmail.com)
  * @since 5/17/16
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
 @AutoConfigureAfter(name = "org.springframework.cloud.client.CommonsClientAutoConfiguration",
         value = GrpcCommonCodecAutoConfiguration.class)

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientHealthAutoConfiguration.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @AutoConfigureAfter(GrpcClientAutoConfiguration.class)
 @ConditionalOnClass(name = "org.springframework.boot.actuate.health.HealthIndicator")
 public class GrpcClientHealthAutoConfiguration {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientMetricAutoConfiguration.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @AutoConfigureAfter(CompositeMeterRegistryAutoConfiguration.class)
 @AutoConfigureBefore(GrpcClientAutoConfiguration.class)
 @ConditionalOnBean(MeterRegistry.class)

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientSecurityAutoConfiguration.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @AutoConfigureBefore(GrpcClientAutoConfiguration.class)
 public class GrpcClientSecurityAutoConfiguration {
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientTraceAutoConfiguration.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.sleuth.grpc.enabled", matchIfMissing = true)
 @AutoConfigureAfter(GrpcCommonTraceAutoConfiguration.class)
 @ConditionalOnBean(GrpcTracing.class)

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcDiscoveryClientAutoConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 
 import net.devh.boot.grpc.client.nameresolver.DiscoveryClientResolverFactory;
 
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnBean(DiscoveryClient.class)
 public class GrpcDiscoveryClientAutoConfiguration {
 

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonCodecAutoConfiguration.java
Patch:
@@ -37,7 +37,7 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 @Slf4j
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnClass(Codec.class)
 public class GrpcCommonCodecAutoConfiguration {
 

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonTraceAutoConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import brave.Tracing;
 import brave.grpc.GrpcTracing;
 
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.sleuth.grpc.enabled", matchIfMissing = true)
 @AutoConfigureAfter(TraceAutoConfiguration.class)
 @ConditionalOnClass(value = {Tracing.class, GrpcTracing.class})

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataConsulConfiguration.java
Patch:
@@ -36,7 +36,7 @@
  * @author Michael (yidongnan@gmail.com)
  * @since 5/17/16
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
 @ConditionalOnClass({ConsulDiscoveryProperties.class, ConsulClient.class, GrpcServerProperties.class})
 public class GrpcMetadataConsulConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataEurekaConfiguration.java
Patch:
@@ -37,7 +37,7 @@
  * @author Michael (yidongnan@gmail.com)
  * @since 5/17/16
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
 @ConditionalOnClass({EurekaInstanceConfigBean.class, EurekaClient.class})
 public class GrpcMetadataEurekaConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataNacosConfiguration.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Michael (yidongnan@gmail.com)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
 @ConditionalOnClass({NacosDiscoveryProperties.class, NacosNamingService.class})
 public class GrpcMetadataNacosConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerAutoConfiguration.java
Patch:
@@ -51,7 +51,7 @@
  * @author Michael (yidongnan@gmail.com)
  * @since 5/17/16
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
 @ConditionalOnClass(Server.class)
 @AutoConfigureAfter(GrpcCommonCodecAutoConfiguration.class)

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerFactoryAutoConfiguration.java
Patch:
@@ -45,7 +45,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnMissingBean({GrpcServerFactory.class, GrpcServerLifecycle.class})
 @AutoConfigureAfter(GrpcServerAutoConfiguration.class)
 public class GrpcServerFactoryAutoConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerMetricAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 @Slf4j
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @AutoConfigureAfter(CompositeMeterRegistryAutoConfiguration.class)
 @AutoConfigureBefore(GrpcServerAutoConfiguration.class)
 @ConditionalOnBean(MeterRegistry.class)

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerSecurityAutoConfiguration.java
Patch:
@@ -59,7 +59,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnBean(AuthenticationManager.class)
 @AutoConfigureAfter(WebSecurityEnablerConfiguration.class)
 public class GrpcServerSecurityAutoConfiguration {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerTraceAutoConfiguration.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Configuration
+@Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(value = "spring.sleuth.grpc.enabled", matchIfMissing = true)
 @AutoConfigureAfter(GrpcCommonTraceAutoConfiguration.class)
 @ConditionalOnBean(GrpcTracing.class)

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java
Patch:
@@ -321,7 +321,7 @@ public void setMaxInboundMessageSize(final DataSize maxInboundMessageSize) {
         }
     }
 
-    public void setmaxInboundMetadataSize(final DataSize maxInboundMetadataSize) {
+    public void setMaxInboundMetadataSize(final DataSize maxInboundMetadataSize) {
         if (maxInboundMetadataSize == null || maxInboundMetadataSize.toBytes() >= 0) {
             this.maxInboundMetadataSize = maxInboundMetadataSize;
         } else if (maxInboundMetadataSize.toBytes() == -1) {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -230,8 +230,8 @@ protected <T> T valueForMember(final String name, final Member injectionTarget,
     /**
      * Creates a stub instance for the specified stub type using the resolved {@link StubFactory}.
      * 
-     * @param stubClass
-     * @param channel
+     * @param stubClass The stub class that needs to be created.
+     * @param channel The gRPC channel associated with the created stub, passed as a parameter to the stub factory.
      * @throws BeanInstantiationException If the stub couldn't be created, either because the type isn't supported or
      *         because of a failure in creation.
      * @return A newly created gRPC stub.

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/stubfactory/StubFactory.java
Patch:
@@ -39,7 +39,7 @@ public interface StubFactory {
      *
      * @throws BeanInstantiationException If the stub couldn't be created.
      */
-    AbstractStub<?> createStub(final Class<? extends AbstractStub<?>> stubType, final Channel channel);
+    AbstractStub<?> createStub(Class<? extends AbstractStub<?>> stubType, Channel channel);
 
     /**
      * Used to resolve a factory that matches the particular stub type.

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonCodecAutoConfiguration.java
Patch:
@@ -70,7 +70,7 @@ public DecompressorRegistry defaultDecompressorRegistry(final GrpcCodecDiscovere
         log.debug("Found GrpcCodecDiscoverer -> Creating custom DecompressorRegistry");
         DecompressorRegistry registry = DecompressorRegistry.getDefaultInstance();
         for (final GrpcCodecDefinition definition : codecDiscoverer.findGrpcCodecs()) {
-            if (definition.getCodecType().isForCompression()) {
+            if (definition.getCodecType().isForDecompression()) {
                 final Codec codec = definition.getCodec();
                 final boolean isAdvertised = definition.isAdvertised();
                 log.debug("Registering {} decompressor: '{}' ({})",

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonCodecAutoConfiguration.java
Patch:
@@ -70,7 +70,7 @@ public DecompressorRegistry defaultDecompressorRegistry(final GrpcCodecDiscovere
         log.debug("Found GrpcCodecDiscoverer -> Creating custom DecompressorRegistry");
         DecompressorRegistry registry = DecompressorRegistry.getDefaultInstance();
         for (final GrpcCodecDefinition definition : codecDiscoverer.findGrpcCodecs()) {
-            if (definition.getCodecType().isForCompression()) {
+            if (definition.getCodecType().isForDecompression()) {
                 final Codec codec = definition.getCodec();
                 final boolean isAdvertised = definition.isAdvertised();
                 log.debug("Registering {} decompressor: '{}' ({})",

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcDiscoveryClientAutoConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 
 package net.devh.boot.grpc.client.autoconfigure;
 
-import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.cloud.client.discovery.DiscoveryClient;
@@ -29,7 +28,6 @@
 
 @Configuration
 @ConditionalOnBean(DiscoveryClient.class)
-@AutoConfigureBefore(GrpcClientAutoConfiguration.class)
 public class GrpcDiscoveryClientAutoConfiguration {
 
     @ConditionalOnMissingBean

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -46,6 +46,7 @@
 import io.grpc.stub.AbstractFutureStub;
 import io.grpc.stub.AbstractStub;
 import net.devh.boot.grpc.client.channelfactory.GrpcChannelFactory;
+import net.devh.boot.grpc.client.nameresolver.NameResolverRegistration;
 
 /**
  * This {@link BeanPostProcessor} searches for fields and methods in beans that are annotated with {@link GrpcClient}
@@ -140,6 +141,8 @@ protected <T> T processInjectionPoint(final Member injectionTarget, final Class<
      */
     private GrpcChannelFactory getChannelFactory() {
         if (this.channelFactory == null) {
+            // Ensure that the NameResolverProviders have been registered
+            this.applicationContext.getBean(NameResolverRegistration.class);
             final GrpcChannelFactory factory = this.applicationContext.getBean(GrpcChannelFactory.class);
             this.channelFactory = factory;
             return factory;

File: examples/cloud-eureka-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/EurekaServerApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/CloudGrpcClientApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/GrpcClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-client/src/main/java/net/devh/boot/grpc/examples/cloud/client/LogGrpcInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/CloudGrpcServerApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/GlobalInterceptorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/GrpcServerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/cloud-grpc-server/src/main/java/net/devh/boot/grpc/examples/cloud/server/LogGrpcInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GlobalClientInterceptorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GrpcClientController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/GrpcClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/LocalGrpcClientApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-client/src/main/java/net/devh/boot/grpc/examples/local/client/LogGrpcInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/GlobalInterceptorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/GrpcServerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/LocalGrpcServerApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/local-grpc-server/src/main/java/net/devh/boot/grpc/examples/local/server/LogGrpcInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/GrpcClientController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/GrpcClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityBearerGrpcClientApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-server/src/main/java/net/devh/boot/grpc/examples/security/server/GrpcServerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-server/src/main/java/net/devh/boot/grpc/examples/security/server/KeyCloakGrantedAuthoritiesConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityBearerGrpcServerApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-bearerAuth-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-client/src/main/java/net/devh/boot/grpc/examples/security/client/GrpcClientController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-client/src/main/java/net/devh/boot/grpc/examples/security/client/GrpcClientService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityGrpcClientApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/GrpcServerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityGrpcServerApplication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientHealthAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientMetricAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientSecurityAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientTraceAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcDiscoveryClientAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/GrpcChannelConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/GrpcChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/InProcessChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/InProcessOrAlternativeChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/NettyChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/ShadedNettyChannelFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelsProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/NegotiationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/StubTransformer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/AnnotationGlobalClientInterceptorConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/GlobalClientInterceptorConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/GlobalClientInterceptorRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/GrpcGlobalClientInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/OrderedClientInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/metric/MetricCollectingClientCall.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/metric/MetricCollectingClientCallListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/metric/MetricCollectingClientInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/ConfigMappedNameResolverFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/NameResolverRegistration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/StaticNameResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/StaticNameResolverProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/security/CallCredentialsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/client/config/GrpcChannelPropertiesConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/client/config/GrpcChannelPropertiesGivenUnitTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/client/config/GrpcChannelPropertiesGlobalTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-client-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/client/config/GrpcChannelPropertiesNoUnitTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonCodecAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonTraceAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/codec/AnnotationGrpcCodecDiscoverer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/codec/CodecType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/codec/GrpcCodec.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/codec/GrpcCodecDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/codec/GrpcCodecDiscoverer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/metric/AbstractMetricCollectingInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/metric/MetricConstants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/metric/MetricUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/security/SecurityConstants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/util/GrpcUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/util/InterceptorOrder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataConsulConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataEurekaConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataNacosConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerFactoryAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerMetricAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerSecurityAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerTraceAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/cloud/ConsulGrpcRegistrationCustomizer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/condition/ConditionalOnInterprocessServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/ClientAuth.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/config/GrpcServerProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/AnnotationGlobalServerInterceptorConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/GlobalServerInterceptorConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/GlobalServerInterceptorRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/GrpcGlobalServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/OrderedServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/metric/MetricCollectingServerCall.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/metric/MetricCollectingServerCallListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/metric/MetricCollectingServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/nameresolver/SelfNameResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/nameresolver/SelfNameResolverFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/scope/GrpcRequestScope.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/AnonymousAuthenticationReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/BasicGrpcAuthenticationReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/BearerAuthenticationReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/CompositeGrpcAuthenticationReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/GrpcAuthenticationReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/SSLContextGrpcAuthenticationReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/X509CertificateAuthentication.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/X509CertificateAuthenticationProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/AbstractGrpcSecurityMetadataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/AccessPredicate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/AccessPredicateConfigAttribute.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/AccessPredicateVoter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/AccessPredicates.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/GrpcSecurityMetadataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/ManualGrpcSecurityMetadataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/interceptors/AbstractAuthenticatingServerCallListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/interceptors/AuthenticatingServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/interceptors/AuthorizationCheckingServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/interceptors/DefaultAuthenticatingServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/interceptors/ExceptionTranslatingServerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/AbstractGrpcServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/GrpcServerConfigurer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/GrpcServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/GrpcServerLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/InProcessGrpcServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/NettyGrpcServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/ShadedNettyGrpcServerFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/AnnotationGrpcServiceDiscoverer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/GrpcService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/GrpcServiceDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/GrpcServiceDiscoverer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/server/config/GrpcServerPropertiesConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/server/config/GrpcServerPropertiesGivenUnitTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/test/java/net/devh/boot/grpc/server/config/GrpcServerPropertiesNoUnitTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/codec/AbstractCodecTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/codec/BeanCodecTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/codec/CustomCodecTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/codec/GzipCodecTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/codec/IdentityCodecTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/AnnotatedSecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/BaseAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/InProcessConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/ManualSecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/MetricConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/OrderedClientInterceptorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/OrderedServerInterceptorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/ScopedServiceConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/ServiceConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/WithBasicAuthSecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/config/WithCertificateSecurityConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/inject/GrpcClientInjectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/DefaultServerInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/OrderedClientInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/OrderedServerInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricCollectingClientInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricCollectingInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricCollectingServerInterceptorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricCustomAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricFullAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/metric/MetricTestHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/scope/GrpcRequestScopeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/AbstractSecurityTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/AbstractSecurityWithBasicAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/AnnotatedSecurityWithBasicAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/AnnotatedSecurityWithCertificateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/ConcurrentSecurityTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/LegacyAnnotatedSecurityWithCertificateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/LegacyManualSecurityWithCertificateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/ManualSecurityWithBasicAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/security/ManualSecurityWithCertificateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/server/ScopedTestServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/server/TestServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/AbstractBrokenServerClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/AbstractSimpleServerClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/BrokenClientSelfSignedMutualSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/BrokenServerSelfSignedMutualSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/CustomCiphersAndProtocolsSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/InProcessSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/InterAndInProcessSetup2Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/InterAndInProcessSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/NameResolverConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/NameResolverIPv4ConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/NameResolverIPv6ConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/OnlyInProcessServerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/PlaintextSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfNameResolverConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfSignedMutualSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfSignedServerSetupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/util/DynamicTestCollection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/util/EnableOnIPv6.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/util/FutureAssertions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/util/GrpcAssertions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/util/RequireIPv6Condition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: tests/src/test/java/net/devh/boot/grpc/test/util/TriConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016-2019 Michael Zhang <yidongnan@gmail.com>
+ * Copyright (c) 2016-2020 Michael Zhang <yidongnan@gmail.com>
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
  * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/interceptors/ExceptionTranslatingServerInterceptor.java
Patch:
@@ -21,14 +21,14 @@
 import org.springframework.security.access.AccessDeniedException;
 import org.springframework.security.core.AuthenticationException;
 
-import lombok.extern.slf4j.Slf4j;
 import io.grpc.ForwardingServerCallListener.SimpleForwardingServerCallListener;
 import io.grpc.Metadata;
 import io.grpc.ServerCall;
 import io.grpc.ServerCall.Listener;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
 import io.grpc.Status;
+import·lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.common.util.InterceptorOrder;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/DiscoveryClientResolverFactory.java
Patch:
@@ -36,7 +36,7 @@
 import io.grpc.internal.GrpcUtil;
 
 /**
- * A name resolver factory that will create an {@link DiscoveryClientNameResolver} based on the target uri.
+ * A name resolver factory that will create a {@link DiscoveryClientNameResolver} based on the target uri.
  *
  * @author Michael (yidongnan@gmail.com)
  * @since 5/17/16

File: tests/src/test/java/net/devh/boot/grpc/test/setup/CustomCiphersAndProtocolsSetupTest.java
Patch:
@@ -41,6 +41,7 @@
         "grpc.server.security.ciphers=TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES256-GCM-SHA384",
         "grpc.server.security.protocols=TLSv1.3:TLSv1.2",
 
+        "grpc.client.GLOBAL.address=localhost:9090",
         "grpc.client.GLOBAL.security.authorityOverride=localhost",
         "grpc.client.GLOBAL.security.trustCertCollection=file:src/test/resources/certificates/trusted-servers-collection",
         "grpc.client.GLOBAL.negotiationType=TLS",

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfSignedMutualSetupTest.java
Patch:
@@ -37,6 +37,8 @@
         "grpc.server.security.privateKey=file:src/test/resources/certificates/server.key",
         "grpc.server.security.trustCertCollection=file:src/test/resources/certificates/trusted-clients-collection",
         "grpc.server.security.clientAuth=REQUIRE",
+
+        "grpc.client.test.address=localhost:9090",
         "grpc.client.test.security.authorityOverride=localhost",
         "grpc.client.test.security.trustCertCollection=file:src/test/resources/certificates/trusted-servers-collection",
         "grpc.client.test.security.clientAuthEnabled=true",

File: tests/src/test/java/net/devh/boot/grpc/test/setup/SelfSignedServerSetupTest.java
Patch:
@@ -35,6 +35,7 @@
         "grpc.server.security.enabled=true",
         "grpc.server.security.certificateChain=file:src/test/resources/certificates/server.crt",
         "grpc.server.security.privateKey=file:src/test/resources/certificates/server.key",
+        "grpc.client.test.address=localhost:9090",
         "grpc.client.test.security.authorityOverride=localhost",
         "grpc.client.test.security.trustCertCollection=file:src/test/resources/certificates/trusted-servers-collection"
 })

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/metric/MetricConstants.java
Patch:
@@ -59,7 +59,7 @@ public final class MetricConstants {
      */
     public static final String TAG_METHOD_NAME = "method";
     /**
-     * The metrics tag key that belongs to the called method type.
+     * The metrics tag key that belongs to the type of the called method.
      */
     public static final String TAG_METHOD_TYPE = "methodType";
     /**

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/NettyChannelFactory.java
Patch:
@@ -94,8 +94,9 @@ protected void configureSecurity(final NettyChannelBuilder builder, final String
             final SslContextBuilder sslContextBuilder = GrpcSslContexts.forClient();
 
             if (security.isClientAuthEnabled()) {
-                final Resource certificateChain = requireNonNull(security.getCertificateChain(), "certificateChain");
-                final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey");
+                final Resource certificateChain =
+                        requireNonNull(security.getCertificateChain(), "certificateChain not configured");
+                final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey not configured");
                 try (InputStream certificateChainStream = certificateChain.getInputStream();
                         InputStream privateKeyStream = privateKey.getInputStream()) {
                     sslContextBuilder.keyManager(certificateChainStream, privateKeyStream,

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/ShadedNettyChannelFactory.java
Patch:
@@ -92,8 +92,9 @@ protected void configureSecurity(final NettyChannelBuilder builder, final String
             final SslContextBuilder sslContextBuilder = GrpcSslContexts.forClient();
 
             if (security.isClientAuthEnabled()) {
-                final Resource certificateChain = requireNonNull(security.getCertificateChain(), "certificateChain");
-                final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey");
+                final Resource certificateChain =
+                        requireNonNull(security.getCertificateChain(), "certificateChain not configured");
+                final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey not configured");
                 try (InputStream certificateChainStream = certificateChain.getInputStream();
                         InputStream privateKeyStream = privateKey.getInputStream()) {
                     sslContextBuilder.keyManager(certificateChainStream, privateKeyStream,

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/NettyGrpcServerFactory.java
Patch:
@@ -84,8 +84,9 @@ protected void configureKeepAlive(final NettyServerBuilder builder) {
     protected void configureSecurity(final NettyServerBuilder builder) {
         final Security security = this.properties.getSecurity();
         if (security.isEnabled()) {
-            final Resource certificateChain = requireNonNull(security.getCertificateChain(), "certificateChain");
-            final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey");
+            final Resource certificateChain =
+                    requireNonNull(security.getCertificateChain(), "certificateChain not configured");
+            final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey not configured");
             SslContextBuilder sslContextBuilder;
             try (InputStream certificateChainStream = certificateChain.getInputStream();
                     InputStream privateKeyStream = privateKey.getInputStream()) {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/ShadedNettyGrpcServerFactory.java
Patch:
@@ -85,8 +85,9 @@ protected void configureKeepAlive(final NettyServerBuilder builder) {
     protected void configureSecurity(final NettyServerBuilder builder) {
         final Security security = this.properties.getSecurity();
         if (security.isEnabled()) {
-            final Resource certificateChain = requireNonNull(security.getCertificateChain(), "certificateChain");
-            final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey");
+            final Resource certificateChain =
+                    requireNonNull(security.getCertificateChain(), "certificateChain not configured");
+            final Resource privateKey = requireNonNull(security.getPrivateKey(), "privateKey not configured");
             SslContextBuilder sslContextBuilder;
             try (InputStream certificateChainStream = certificateChain.getInputStream();
                     InputStream privateKeyStream = privateKey.getInputStream()) {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/DiscoveryClientResolverFactory.java
Patch:
@@ -81,7 +81,7 @@ public NameResolver newNameResolver(final URI targetUri, final io.grpc.NameResol
             }
             final DiscoveryClientNameResolver discoveryClientNameResolver =
                     new DiscoveryClientNameResolver(serviceName.substring(1), this.client,
-                            GrpcUtil.TIMER_SERVICE, GrpcUtil.SHARED_CHANNEL_EXECUTOR);
+                            GrpcUtil.SHARED_CHANNEL_EXECUTOR);
             this.discoveryClientNameResolvers.add(discoveryClientNameResolver);
             return discoveryClientNameResolver;
         }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataEurekaConfiguration.java
Patch:
@@ -28,6 +28,7 @@
 import com.netflix.appinfo.EurekaInstanceConfig;
 import com.netflix.discovery.EurekaClient;
 
+import net.devh.boot.grpc.common.util.GrpcUtils;
 import net.devh.boot.grpc.server.config.GrpcServerProperties;
 
 /**
@@ -54,7 +55,7 @@ public void init() {
         }
         final int port = this.grpcProperties.getPort();
         if (port != -1) {
-            this.instance.getMetadataMap().put("gRPC.port", Integer.toString(port));
+            this.instance.getMetadataMap().put(GrpcUtils.CLOUD_DISCOVERY_METADATA_PORT, Integer.toString(port));
         }
     }
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcMetadataNacosConfiguration.java
Patch:
@@ -28,6 +28,7 @@
 
 import com.alibaba.nacos.client.naming.NacosNamingService;
 
+import net.devh.boot.grpc.common.util.GrpcUtils;
 import net.devh.boot.grpc.server.config.GrpcServerProperties;
 
 /**
@@ -53,7 +54,7 @@ public void init() {
         }
         final int port = this.grpcProperties.getPort();
         if (port != -1) {
-            this.nacosRegistration.getMetadata().put("gRPC.port", Integer.toString(port));
+            this.nacosRegistration.getMetadata().put(GrpcUtils.CLOUD_DISCOVERY_METADATA_PORT, Integer.toString(port));
         }
     }
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/cloud/ConsulGrpcRegistrationCustomizer.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.cloud.consul.serviceregistry.ConsulRegistration;
 import org.springframework.cloud.consul.serviceregistry.ConsulRegistrationCustomizer;
 
+import net.devh.boot.grpc.common.util.GrpcUtils;
 import net.devh.boot.grpc.server.config.GrpcServerProperties;
 
 /**
@@ -53,7 +54,7 @@ public void customize(final ConsulRegistration registration) {
         }
         final int port = this.grpcServerProperties.getPort();
         if (port != -1) {
-            tags.add("gRPC.port=" + port);
+            tags.add(GrpcUtils.CLOUD_DISCOVERY_METADATA_PORT + "=" + port);
             registration.getService().setTags(tags);
         }
     }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/DiscoveryClientNameResolver.java
Patch:
@@ -189,7 +189,7 @@ private List<ServiceInstance> resolveInternal() {
             }
             log.info("Ready to update server list for {}", DiscoveryClientNameResolver.this.name);
             final List<EquivalentAddressGroup> targets = Lists.newArrayList();
-            for (final ServiceInstance instance : this.savedInstanceList) {
+            for (final ServiceInstance instance : newInstanceList) {
                 final Integer port = getGRPCPort(instance);
                 if (port != null) {
                     log.info("Found gRPC server {} {}:{}", DiscoveryClientNameResolver.this.name, instance.getHost(),

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/DiscoveryClientResolverFactory.java
Patch:
@@ -81,7 +81,7 @@ public NameResolver newNameResolver(final URI targetUri, final io.grpc.NameResol
             }
             final DiscoveryClientNameResolver discoveryClientNameResolver =
                     new DiscoveryClientNameResolver(serviceName.substring(1), this.client,
-                            GrpcUtil.TIMER_SERVICE, GrpcUtil.SHARED_CHANNEL_EXECUTOR);
+                            GrpcUtil.SHARED_CHANNEL_EXECUTOR);
             this.discoveryClientNameResolvers.add(discoveryClientNameResolver);
             return discoveryClientNameResolver;
         }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerFactoryAutoConfiguration.java
Patch:
@@ -125,7 +125,7 @@ public GrpcServerLifecycle nettyGrpcServerLifecycle(final NettyGrpcServerFactory
      * @param serviceDiscoverer The discoverer used to identify the services that should be served.
      * @return The shadedNettyGrpcServerFactory bean.
      */
-    @ConditionalOnProperty(prefix = "grpc.server", name = "inProcessName")
+    @ConditionalOnProperty(prefix = "grpc.server", name = "in-process-name")
     @Bean
     public InProcessGrpcServerFactory inProcessGrpcServerFactory(final GrpcServerProperties properties,
             final GrpcServiceDiscoverer serviceDiscoverer) {

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerSecurityAutoConfiguration.java
Patch:
@@ -84,8 +84,8 @@ public ExceptionTranslatingServerInterceptor exceptionTranslatingServerIntercept
      * @return The authenticatingServerInterceptor bean.
      */
     @Bean
-    @ConditionalOnMissingBean
-    public AuthenticatingServerInterceptor authenticatingServerInterceptor(
+    @ConditionalOnMissingBean(AuthenticatingServerInterceptor.class)
+    public DefaultAuthenticatingServerInterceptor authenticatingServerInterceptor(
             final AuthenticationManager authenticationManager,
             final GrpcAuthenticationReader authenticationReader) {
         return new DefaultAuthenticatingServerInterceptor(authenticationManager, authenticationReader);

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerSecurityAutoConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import net.devh.boot.grpc.server.security.check.GrpcSecurityMetadataSource;
 import net.devh.boot.grpc.server.security.interceptors.AuthenticatingServerInterceptor;
 import net.devh.boot.grpc.server.security.interceptors.AuthorizationCheckingServerInterceptor;
+import net.devh.boot.grpc.server.security.interceptors.DefaultAuthenticatingServerInterceptor;
 import net.devh.boot.grpc.server.security.interceptors.ExceptionTranslatingServerInterceptor;
 
 /**
@@ -87,7 +88,7 @@ public ExceptionTranslatingServerInterceptor exceptionTranslatingServerIntercept
     public AuthenticatingServerInterceptor authenticatingServerInterceptor(
             final AuthenticationManager authenticationManager,
             final GrpcAuthenticationReader authenticationReader) {
-        return new AuthenticatingServerInterceptor(authenticationManager, authenticationReader);
+        return new DefaultAuthenticatingServerInterceptor(authenticationManager, authenticationReader);
     }
 
     /**

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -104,7 +104,7 @@ public Channel createChannel(final String name, final List<ClientInterceptor> cu
         if (sortInterceptors) {
             this.globalClientInterceptorRegistry.sortInterceptors(interceptors);
         }
-        return ClientInterceptors.intercept(channel, interceptors);
+        return ClientInterceptors.interceptForward(channel, interceptors);
     }
 
     /**

File: tests/src/test/java/net/devh/boot/grpc/test/CustomCiphersAndProtocolsSetupTest.java
Patch:
@@ -78,7 +78,7 @@ class CustomCiphersAndProtocolsSetupTest extends AbstractSimpleServerClientTest
     private TestServiceGrpc.TestServiceBlockingStub tlsNoSharedProtocolsStub;
 
     /**
-     * Tests behaviour with TLSv1.1 and shared protocols. Test should succeed, as the server supports TLSv1.1.
+     * Tests behaviour with TLSv1.1 and shared protocols. Test should fail, as the server does not support TLSv1.1.
      */
     @Test
     public void testTlsV11Stub() {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/NettyChannelFactory.java
Patch:
@@ -20,7 +20,6 @@
 import static java.util.Objects.requireNonNull;
 
 import java.io.File;
-import java.util.Arrays;
 import java.util.List;
 
 import javax.net.ssl.SSLException;

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/ShadedNettyChannelFactory.java
Patch:
@@ -20,7 +20,6 @@
 import static java.util.Objects.requireNonNull;
 
 import java.io.File;
-import java.util.Arrays;
 import java.util.List;
 
 import javax.net.ssl.SSLException;

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java
Patch:
@@ -613,10 +613,10 @@ public void copyDefaultsFrom(final Security config) {
             if (this.authorityOverride == null) {
                 this.authorityOverride = config.authorityOverride;
             }
-            if(this.ciphers == null) {
+            if (this.ciphers == null) {
                 this.ciphers = config.ciphers;
             }
-            if(this.protocols == null) {
+            if (this.protocols == null) {
                 this.protocols = config.protocols;
             }
         }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/NettyGrpcServerFactory.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.File;
 import java.net.InetSocketAddress;
-import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/ShadedNettyGrpcServerFactory.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.File;
 import java.net.InetSocketAddress;
-import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/InProcessGrpcServerFactory.java
Patch:
@@ -84,7 +84,7 @@ protected InProcessServerBuilder newServerBuilder() {
 
     @Override
     public String getAddress() {
-        return "inProcess:" + this.name;
+        return "in-process:" + this.name;
     }
 
     @Override

File: tests/src/test/java/net/devh/boot/grpc/test/InterAndInProcessSetupTest.java
Patch:
@@ -59,7 +59,7 @@
         "grpc.server.inProcessName=test",
         "grpc.server.port=9191",
         "grpc.client.GLOBAL.negotiationType=PLAINTEXT",
-        "grpc.client.inProcess.address=inProcess:test",
+        "grpc.client.inProcess.address=in-process:test",
         "grpc.client.interProcess.address=static://localhost:9191"})
 @EnableConfigurationProperties(GrpcServerProperties.class)
 @SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerFactoryAutoConfiguration.java
Patch:
@@ -142,7 +142,7 @@ public InProcessGrpcServerFactory inProcessGrpcServerFactory(final GrpcServerPro
      */
     @ConditionalOnBean(InProcessGrpcServerFactory.class)
     @Bean
-    public GrpcServerLifecycle inProcessgrpcServerLifecycle(final InProcessGrpcServerFactory factory) {
+    public GrpcServerLifecycle inProcessGrpcServerLifecycle(final InProcessGrpcServerFactory factory) {
         return new GrpcServerLifecycle(factory);
     }
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/NettyChannelFactory.java
Patch:
@@ -103,13 +103,13 @@ protected void configureSecurity(final NettyChannelBuilder builder, final String
                 sslContextBuilder.trustManager(trustCertCollectionFile);
             }
 
-            if(security.getCiphers() != null && !security.getCiphers().isEmpty()) {
+            if (security.getCiphers() != null && !security.getCiphers().isEmpty()) {
                 // splits the cipher list at colons, commas or spaces
                 String[] extractedCiphers = security.getCiphers().split("[:, ]");
                 sslContextBuilder.ciphers(Arrays.asList(extractedCiphers));
             }
 
-            if(security.getProtocols() != null && !security.getProtocols().isEmpty()) {
+            if (security.getProtocols() != null && !security.getProtocols().isEmpty()) {
                 // splits the protocol list at colons, commas or spaces
                 String[] extractedProtocols = security.getProtocols().split("[:, ]");
                 sslContextBuilder.protocols(extractedProtocols);

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/ShadedNettyChannelFactory.java
Patch:
@@ -101,13 +101,13 @@ protected void configureSecurity(final NettyChannelBuilder builder, final String
                 sslContextBuilder.trustManager(trustCertCollectionFile);
             }
 
-            if(security.getCiphers() != null && !security.getCiphers().isEmpty()) {
+            if (security.getCiphers() != null && !security.getCiphers().isEmpty()) {
                 // splits the cipher list at colons, commas or spaces
                 String[] extractedCiphers = security.getCiphers().split("[:, ]");
                 sslContextBuilder.ciphers(Arrays.asList(extractedCiphers));
             }
 
-            if(security.getProtocols() != null && !security.getProtocols().isEmpty()) {
+            if (security.getProtocols() != null && !security.getProtocols().isEmpty()) {
                 // splits the protocol list at colons, commas or spaces
                 String[] extractedProtocols = security.getProtocols().split("[:, ]");
                 sslContextBuilder.protocols(extractedProtocols);

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/NettyGrpcServerFactory.java
Patch:
@@ -94,13 +94,13 @@ protected void configureSecurity(final NettyServerBuilder builder) {
                 }
             }
 
-            if(security.getCiphers() != null && !security.getCiphers().isEmpty()) {
+            if (security.getCiphers() != null && !security.getCiphers().isEmpty()) {
                 // splits the cipher list at colons, commas or spaces
                 String[] extractedCiphers = security.getCiphers().split("[:, ]");
                 sslContextBuilder.ciphers(Arrays.asList(extractedCiphers));
             }
 
-            if(security.getProtocols() != null && !security.getProtocols().isEmpty()) {
+            if (security.getProtocols() != null && !security.getProtocols().isEmpty()) {
                 // splits the protocol list at colons, commas or spaces
                 String[] extractedProtocols = security.getProtocols().split("[:, ]");
                 sslContextBuilder.protocols(extractedProtocols);

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/ShadedNettyGrpcServerFactory.java
Patch:
@@ -95,13 +95,13 @@ protected void configureSecurity(final NettyServerBuilder builder) {
                 }
             }
 
-            if(security.getCiphers() != null && !security.getCiphers().isEmpty()) {
+            if (security.getCiphers() != null && !security.getCiphers().isEmpty()) {
                 // splits the cipher list at colons, commas or spaces
                 String[] extractedCiphers = security.getCiphers().split("[:, ]");
                 sslContextBuilder.ciphers(Arrays.asList(extractedCiphers));
             }
 
-            if(security.getProtocols() != null && !security.getProtocols().isEmpty()) {
+            if (security.getProtocols() != null && !security.getProtocols().isEmpty()) {
                 // splits the protocol list at colons, commas or spaces
                 String[] extractedProtocols = security.getProtocols().split("[:, ]");
                 sslContextBuilder.protocols(extractedProtocols);

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/AbstractChannelFactory.java
Patch:
@@ -143,8 +143,8 @@ protected final GrpcChannelProperties getPropertiesFor(final String name) {
     }
 
     /**
-     * Configures the given netty channel builder. This method can be overwritten to add features that are not yet
-     * supported by this library.
+     * Configures the given channel builder. This method can be overwritten to add features that are not yet supported
+     * by this library.
      *
      * @param builder The channel builder to configure.
      * @param name The name of the client to configure.

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelsProperties.java
Patch:
@@ -45,7 +45,7 @@ public class GrpcChannelsProperties {
      */
     public static final String GLOBAL_PROPERTIES_KEY = "GLOBAL";
 
-    private final Map<String, GrpcChannelProperties> client = new ConcurrentHashMap<>();;
+    private final Map<String, GrpcChannelProperties> client = new ConcurrentHashMap<>();
 
     /**
      * Gets the configuration mapping for each client.

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/interceptor/GlobalClientInterceptorConfigurer.java
Patch:
@@ -24,6 +24,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
+@FunctionalInterface
 public interface GlobalClientInterceptorConfigurer {
 
     /**

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/interceptor/GlobalServerInterceptorConfigurer.java
Patch:
@@ -24,6 +24,7 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
+@FunctionalInterface
 public interface GlobalServerInterceptorConfigurer {
 
     /**

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/check/ManualGrpcSecurityMetadataSource.java
Patch:
@@ -136,7 +136,7 @@ public ManualGrpcSecurityMetadataSource setDefault(final AccessPredicate predica
      * @param predicate The predicate to wrap.
      * @return The newly created list with the given predicate.
      */
-    protected Collection<ConfigAttribute> wrap(final AccessPredicate predicate) {
+    private Collection<ConfigAttribute> wrap(final AccessPredicate predicate) {
         requireNonNull(predicate, "predicate");
         if (predicate == AccessPredicates.PERMIT_ALL) {
             return of(); // Empty collection => public invocation

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/GrpcServiceDiscoverer.java
Patch:
@@ -28,6 +28,7 @@
  * @author Michael (yidongnan@gmail.com)
  * @since 5/17/16
  */
+@FunctionalInterface
 public interface GrpcServiceDiscoverer {
 
     /**

File: tests/src/test/java/net/devh/boot/grpc/test/config/OrderedServerInterceptorConfiguration.java
Patch:
@@ -27,12 +27,11 @@
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 
 @Configuration
-@Slf4j
 public class OrderedServerInterceptorConfiguration {
+
     @GrpcGlobalServerInterceptor
     @Priority(30)
     public class SecondPriorityAnnotatedInterceptor implements ServerInterceptor {
@@ -92,4 +91,5 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, Re
             return next.startCall(call, headers);
         }
     }
+
 }

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/OrderedClientInterceptorTest.java
Patch:
@@ -29,12 +29,10 @@
 import com.google.common.collect.Iterators;
 
 import io.grpc.ClientInterceptor;
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.client.autoconfigure.GrpcClientAutoConfiguration;
 import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorRegistry;
 import net.devh.boot.grpc.test.config.OrderedClientInterceptorConfiguration;
 
-@Slf4j
 @SpringBootTest
 @SpringJUnitConfig(classes = {OrderedClientInterceptorConfiguration.class, GrpcClientAutoConfiguration.class})
 @DirtiesContext
@@ -70,7 +68,8 @@ public void testOrderingByOrderedInterface() {
         Assert.assertTrue(firstInterceptorIndex < secondInterceptorIndex);
     }
 
-    private int findIndexOfClass(List<ClientInterceptor> interceptors, Class clazz) {
+    private int findIndexOfClass(List<ClientInterceptor> interceptors, Class<?> clazz) {
         return Iterators.indexOf(interceptors.iterator(), clazz::isInstance);
     }
+
 }

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/OrderedServerInterceptorTest.java
Patch:
@@ -29,12 +29,10 @@
 import com.google.common.collect.Iterators;
 
 import io.grpc.ServerInterceptor;
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorRegistry;
 import net.devh.boot.grpc.test.config.OrderedServerInterceptorConfiguration;
 
-@Slf4j
 @SpringBootTest
 @SpringJUnitConfig(classes = {OrderedServerInterceptorConfiguration.class, GrpcServerAutoConfiguration.class})
 @DirtiesContext
@@ -70,7 +68,8 @@ public void testOrderingByOrderedInterface() {
         Assert.assertTrue(firstInterceptorIndex < secondInterceptorIndex);
     }
 
-    private int findIndexOfClass(List<ServerInterceptor> interceptors, Class clazz) {
+    private int findIndexOfClass(List<ServerInterceptor> interceptors, Class<?> clazz) {
         return Iterators.indexOf(interceptors.iterator(), clazz::isInstance);
     }
+
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientAutoConfiguration.java
Patch:
@@ -64,7 +64,7 @@
 public class GrpcClientAutoConfiguration {
 
     @Bean
-    public GrpcClientBeanPostProcessor grpcClientBeanPostProcessor(final ApplicationContext applicationContext) {
+    public static GrpcClientBeanPostProcessor grpcClientBeanPostProcessor(final ApplicationContext applicationContext) {
         return new GrpcClientBeanPostProcessor(applicationContext);
     }
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientAutoConfiguration.java
Patch:
@@ -64,7 +64,7 @@
 public class GrpcClientAutoConfiguration {
 
     @Bean
-    public GrpcClientBeanPostProcessor grpcClientBeanPostProcessor(final ApplicationContext applicationContext) {
+    public static GrpcClientBeanPostProcessor grpcClientBeanPostProcessor(final ApplicationContext applicationContext) {
         return new GrpcClientBeanPostProcessor(applicationContext);
     }
 

File: tests/src/test/java/net/devh/boot/grpc/test/config/OrderedServerInterceptorConfiguration.java
Patch:
@@ -27,12 +27,11 @@
 import io.grpc.ServerCall;
 import io.grpc.ServerCallHandler;
 import io.grpc.ServerInterceptor;
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.server.interceptor.GrpcGlobalServerInterceptor;
 
 @Configuration
-@Slf4j
 public class OrderedServerInterceptorConfiguration {
+
     @GrpcGlobalServerInterceptor
     @Priority(30)
     public class SecondPriorityAnnotatedInterceptor implements ServerInterceptor {
@@ -92,4 +91,5 @@ public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, Re
             return next.startCall(call, headers);
         }
     }
+
 }

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/OrderedClientInterceptorTest.java
Patch:
@@ -29,12 +29,10 @@
 import com.google.common.collect.Iterators;
 
 import io.grpc.ClientInterceptor;
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.client.autoconfigure.GrpcClientAutoConfiguration;
 import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorRegistry;
 import net.devh.boot.grpc.test.config.OrderedClientInterceptorConfiguration;
 
-@Slf4j
 @SpringBootTest
 @SpringJUnitConfig(classes = {OrderedClientInterceptorConfiguration.class, GrpcClientAutoConfiguration.class})
 @DirtiesContext
@@ -70,7 +68,8 @@ public void testOrderingByOrderedInterface() {
         Assert.assertTrue(firstInterceptorIndex < secondInterceptorIndex);
     }
 
-    private int findIndexOfClass(List<ClientInterceptor> interceptors, Class clazz) {
+    private int findIndexOfClass(List<ClientInterceptor> interceptors, Class<?> clazz) {
         return Iterators.indexOf(interceptors.iterator(), clazz::isInstance);
     }
+
 }

File: tests/src/test/java/net/devh/boot/grpc/test/interceptor/OrderedServerInterceptorTest.java
Patch:
@@ -29,12 +29,10 @@
 import com.google.common.collect.Iterators;
 
 import io.grpc.ServerInterceptor;
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorRegistry;
 import net.devh.boot.grpc.test.config.OrderedServerInterceptorConfiguration;
 
-@Slf4j
 @SpringBootTest
 @SpringJUnitConfig(classes = {OrderedServerInterceptorConfiguration.class, GrpcServerAutoConfiguration.class})
 @DirtiesContext
@@ -70,7 +68,8 @@ public void testOrderingByOrderedInterface() {
         Assert.assertTrue(firstInterceptorIndex < secondInterceptorIndex);
     }
 
-    private int findIndexOfClass(List<ServerInterceptor> interceptors, Class clazz) {
+    private int findIndexOfClass(List<ServerInterceptor> interceptors, Class<?> clazz) {
         return Iterators.indexOf(interceptors.iterator(), clazz::isInstance);
     }
+
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientAutoConfiguration.java
Patch:
@@ -64,7 +64,7 @@
 public class GrpcClientAutoConfiguration {
 
     @Bean
-    public GrpcClientBeanPostProcessor grpcClientBeanPostProcessor(final ApplicationContext applicationContext) {
+    public static GrpcClientBeanPostProcessor grpcClientBeanPostProcessor(final ApplicationContext applicationContext) {
         return new GrpcClientBeanPostProcessor(applicationContext);
     }
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/autoconfigure/GrpcServerSecurityAutoConfiguration.java
Patch:
@@ -26,7 +26,6 @@
 import org.springframework.security.access.AccessDecisionManager;
 import org.springframework.security.authentication.AuthenticationManager;
 
-import lombok.extern.slf4j.Slf4j;
 import net.devh.boot.grpc.server.security.authentication.GrpcAuthenticationReader;
 import net.devh.boot.grpc.server.security.check.GrpcSecurityMetadataSource;
 import net.devh.boot.grpc.server.security.interceptors.AuthenticatingServerInterceptor;
@@ -57,7 +56,6 @@
  *
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
-@Slf4j
 @Configuration
 @ConditionalOnBean(AuthenticationManager.class)
 @AutoConfigureAfter(WebSecurityEnablerConfiguration.class)
@@ -69,7 +67,6 @@ public class GrpcServerSecurityAutoConfiguration {
     public AuthorizationCheckingServerInterceptor authorizationCheckingServerInterceptor(
             final AccessDecisionManager accessDecisionManager,
             final GrpcSecurityMetadataSource securityMetadataSource) {
-        log.warn("Create AuthorizationCheckingServerInterceptor");
         return new AuthorizationCheckingServerInterceptor(accessDecisionManager, securityMetadataSource);
     }
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/NegotiationType.java
Patch:
@@ -19,7 +19,10 @@
 
 /**
  * Identifies the negotiation used for starting up HTTP/2.
+ *
+ * @see io.grpc.netty.shaded.io.grpc.netty.NegotiationType NegotiationType
  */
+// This class needs to be duplicated to avoid direct dependencies to either of the grpc-netty (shaded) libraries.
 public enum NegotiationType {
 
     /**

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelsProperties.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
@@ -46,7 +45,6 @@ public class GrpcChannelsProperties {
      */
     public static final String GLOBAL_PROPERTIES_KEY = "GLOBAL";
 
-    @NestedConfigurationProperty
     private final Map<String, GrpcChannelProperties> client = new ConcurrentHashMap<>();;
 
     /**

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/NegotiationType.java
Patch:
@@ -19,7 +19,10 @@
 
 /**
  * Identifies the negotiation used for starting up HTTP/2.
+ *
+ * @see io.grpc.netty.shaded.io.grpc.netty.NegotiationType NegotiationType
  */
+// This class needs to be duplicated to avoid direct dependencies to either of the grpc-netty (shaded) libraries.
 public enum NegotiationType {
 
     /**

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonTraceAutoConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.sleuth.autoconfig.TraceAutoConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -34,6 +35,7 @@
 public class GrpcCommonTraceAutoConfiguration {
 
     @Bean
+    @ConditionalOnMissingBean
     public GrpcTracing grpcTracing(final Tracing tracing) {
         return GrpcTracing.create(tracing);
     }

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/autoconfigure/GrpcCommonTraceAutoConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.sleuth.autoconfig.TraceAutoConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -34,6 +35,7 @@
 public class GrpcCommonTraceAutoConfiguration {
 
     @Bean
+    @ConditionalOnMissingBean
     public GrpcTracing grpcTracing(final Tracing tracing) {
         return GrpcTracing.create(tracing);
     }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/nameresolver/DiscoveryClientNameResolver.java
Patch:
@@ -148,7 +148,7 @@ public void run() {
                     savedListener.onAddresses(equivalentAddressGroups, Attributes.EMPTY);
                 } else {
                     savedListener.onError(Status.UNAVAILABLE
-                            .withCause(new RuntimeException("UNAVAILABLE: NameResolver returned an empty list")));
+                            .withDescription("No servers found for " + name));
                 }
             } finally {
                 synchronized (DiscoveryClientNameResolver.this) {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/config/GrpcChannelProperties.java
Patch:
@@ -20,7 +20,6 @@
 import java.net.URI;
 import java.util.List;
 
-import io.grpc.NameResolver;
 import io.grpc.internal.GrpcUtil;
 import lombok.Data;
 
@@ -37,7 +36,7 @@ public class GrpcChannelProperties {
 
     /**
      * The target uri in the format: {@code schema:[//[authority]][/path]}. If nothing is configured then the
-     * {@link NameResolver.Factory} will decide on the default.
+     * {@link io.grpc.NameResolver.Factory} will decide on the default.
      *
      * <p>
      * <b>Examples</b>

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/security/SecurityConstants.java
Patch:
@@ -39,7 +39,7 @@ public final class SecurityConstants {
      * username and password are {@link StandardCharsets#UTF_8 UTF_8} encoded before being turned into a base64 string.
      */
     public static final String BASIC_AUTH_PREFIX = "Basic ";
-    public static final String BEARER_AUTH_PREFIX = "bearer ";
+    public static final String BEARER_AUTH_PREFIX = "Bearer ";
 
 
     private SecurityConstants() {}

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/BearerAuthenticationReader.java
Patch:
@@ -35,7 +35,7 @@
 @Slf4j
 public class BearerAuthenticationReader implements GrpcAuthenticationReader {
 
-    private static final String PREFIX = BEARER_AUTH_PREFIX;
+    private static final String PREFIX = BEARER_AUTH_PREFIX.toLowerCase();
     private static final int PREFIX_LENGTH = PREFIX.length();
 
     @Override

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/SecurityConfiguration.java
Patch:
@@ -34,6 +34,7 @@ public class SecurityConfiguration {
     private String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIx" +
             "MjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjM5MDk" +
             "wfQ.FHg7gTSQKoUdIJ6PqtoC_tuqCmXhBZvknvl8hftD1l0";
+
     @Bean
     // Create credentials bearer Token
     CallCredentials grpcCredentials() {

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/security/AuthenticatingClientInterceptors.java
Patch:
@@ -143,6 +143,7 @@ public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(final MethodDescripto
      * @param token the bearer token
      * @return The newly created basic auth interceptor.
      */
+    @Deprecated
     public static ClientInterceptor bearerAuth(final String token) {
         final Metadata extraHeaders = new Metadata();
         extraHeaders.put(AUTHORIZATION_HEADER, "Bearer " + token);

File: grpc-common-spring-boot/src/main/java/net/devh/boot/grpc/common/security/SecurityConstants.java
Patch:
@@ -39,6 +39,8 @@ public final class SecurityConstants {
      * username and password are {@link StandardCharsets#UTF_8 UTF_8} encoded before being turned into a base64 string.
      */
     public static final String BASIC_AUTH_PREFIX = "Basic ";
+    public static final String BEARER_AUTH_PREFIX = "Bearer ";
+
 
     private SecurityConstants() {}
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcClientAutoConfiguration.java
Patch:
@@ -52,6 +52,7 @@
 import net.devh.boot.grpc.client.nameresolver.CompositeNameResolverFactory;
 import net.devh.boot.grpc.client.nameresolver.ConfigMappedNameResolverFactory;
 import net.devh.boot.grpc.client.nameresolver.NameResolverConstants;
+import net.devh.boot.grpc.client.nameresolver.StaticNameResolverProvider;
 import net.devh.boot.grpc.common.autoconfigure.GrpcCommonCodecAutoConfiguration;
 import net.devh.boot.grpc.common.autoconfigure.GrpcCommonTraceAutoConfiguration;
 
@@ -122,7 +123,8 @@ public LoadBalancer.Factory grpcLoadBalancerFactory() {
     @Lazy // Not needed for InProcessChannelFactories
     @Bean
     public NameResolver.Factory grpcNameResolverFactory(final GrpcChannelsProperties channelProperties) {
-        return new ConfigMappedNameResolverFactory(channelProperties, NameResolverProvider.asFactory());
+        return new ConfigMappedNameResolverFactory(channelProperties, NameResolverProvider.asFactory(),
+                StaticNameResolverProvider.STATIC_DEFAULT_URI_MAPPER);
     }
 
     @ConditionalOnBean(CompressorRegistry.class)

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/autoconfigure/GrpcDiscoveryClientAutoConfiguration.java
Patch:
@@ -51,7 +51,8 @@ NameResolver.Factory grpcNameResolverProviderWithDiscovery(final GrpcChannelsPro
                 .add(NameResolverProvider.asFactory())
                 .build();
         return new ConfigMappedNameResolverFactory(channelProperties,
-                new CompositeNameResolverFactory(DiscoveryClientResolverFactory.DISCOVERY_SCHEME, factories));
+                new CompositeNameResolverFactory(DiscoveryClientResolverFactory.DISCOVERY_SCHEME, factories),
+                DiscoveryClientResolverFactory.DISCOVERY_DEFAULT_URI_MAPPER);
     }
 
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/GrpcChannelFactory.java
Patch:
@@ -67,4 +67,7 @@ default Channel createChannel(final String name) {
      */
     Channel createChannel(String name, List<ClientInterceptor> interceptors);
 
+    @Override
+    void close();
+
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -169,7 +169,7 @@ protected List<ClientInterceptor> interceptorsFromAnnotation(final GrpcClient an
                 clientInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {
-                    clientInterceptor = interceptorClass.newInstance();
+                    clientInterceptor = interceptorClass.getConstructor().newInstance();
                 } catch (final Exception e) {
                     throw new BeanCreationException("Failed to create interceptor instance", e);
                 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/AnonymousAuthenticationReader.java
Patch:
@@ -62,8 +62,8 @@ public AnonymousAuthenticationReader(final String key) {
     public AnonymousAuthenticationReader(final String key, final Object principal,
             final Collection<? extends GrantedAuthority> authorities) {
         this.key = requireNonNull(key, "key");
-        this.principal = requireNonNull(principal, "principal");;
-        this.authorities = requireNonNull(authorities, "authorities");;
+        this.principal = requireNonNull(principal, "principal");
+        this.authorities = requireNonNull(authorities, "authorities");
     }
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/GrpcServerLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public void stop(final Runnable callback) {
 
     @Override
     public boolean isRunning() {
-        return this.server == null ? false : !this.server.isShutdown();
+        return this.server != null && !this.server.isShutdown();
     }
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/AnnotationGrpcServiceDiscoverer.java
Patch:
@@ -80,7 +80,7 @@ private ServerServiceDefinition bindInterceptors(final ServerServiceDefinition s
                 serverInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {
-                    serverInterceptor = interceptorClass.newInstance();
+                    serverInterceptor = interceptorClass.getConstructor().newInstance();
                 } catch (final Exception e) {
                     throw new BeanCreationException("Failed to create interceptor instance", e);
                 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/GrpcChannelFactory.java
Patch:
@@ -67,4 +67,7 @@ default Channel createChannel(final String name) {
      */
     Channel createChannel(String name, List<ClientInterceptor> interceptors);
 
+    @Override
+    void close();
+
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -149,7 +149,7 @@ protected List<ClientInterceptor> interceptorsFromAnnotation(final GrpcClient an
                 clientInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {
-                    clientInterceptor = interceptorClass.newInstance();
+                    clientInterceptor = interceptorClass.getConstructor().newInstance();
                 } catch (final Exception e) {
                     throw new BeanCreationException("Failed to create interceptor instance", e);
                 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/AnonymousAuthenticationReader.java
Patch:
@@ -62,8 +62,8 @@ public AnonymousAuthenticationReader(final String key) {
     public AnonymousAuthenticationReader(final String key, final Object principal,
             final Collection<? extends GrantedAuthority> authorities) {
         this.key = requireNonNull(key, "key");
-        this.principal = requireNonNull(principal, "principal");;
-        this.authorities = requireNonNull(authorities, "authorities");;
+        this.principal = requireNonNull(principal, "principal");
+        this.authorities = requireNonNull(authorities, "authorities");
     }
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/GrpcServerLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public void stop(final Runnable callback) {
 
     @Override
     public boolean isRunning() {
-        return this.server == null ? false : !this.server.isShutdown();
+        return this.server != null && !this.server.isShutdown();
     }
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/AnnotationGrpcServiceDiscoverer.java
Patch:
@@ -80,7 +80,7 @@ private ServerServiceDefinition bindInterceptors(final ServerServiceDefinition s
                 serverInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {
-                    serverInterceptor = interceptorClass.newInstance();
+                    serverInterceptor = interceptorClass.getConstructor().newInstance();
                 } catch (final Exception e) {
                     throw new BeanCreationException("Failed to create interceptor instance", e);
                 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/BasicGrpcAuthenticationReader.java
Patch:
@@ -18,6 +18,8 @@
 package net.devh.boot.grpc.server.security.authentication;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
+import static net.devh.boot.grpc.common.security.SecurityConstants.AUTHORIZATION_HEADER;
+import static net.devh.boot.grpc.common.security.SecurityConstants.BASIC_AUTH_PREFIX;
 
 import java.util.Base64;
 
@@ -38,7 +40,7 @@
 @Slf4j
 public class BasicGrpcAuthenticationReader implements GrpcAuthenticationReader {
 
-    private static final String PREFIX = "basic ";
+    private static final String PREFIX = BASIC_AUTH_PREFIX.toLowerCase();
     private static final int PREFIX_LENGTH = PREFIX.length();
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/AnonymousAuthenticationReader.java
Patch:
@@ -62,8 +62,8 @@ public AnonymousAuthenticationReader(final String key) {
     public AnonymousAuthenticationReader(final String key, final Object principal,
             final Collection<? extends GrantedAuthority> authorities) {
         this.key = requireNonNull(key, "key");
-        this.principal = requireNonNull(principal, "principal");;
-        this.authorities = requireNonNull(authorities, "authorities");;
+        this.principal = requireNonNull(principal, "principal");
+        this.authorities = requireNonNull(authorities, "authorities");
     }
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/serverfactory/GrpcServerLifecycle.java
Patch:
@@ -65,7 +65,7 @@ public void stop(final Runnable callback) {
 
     @Override
     public boolean isRunning() {
-        return this.server == null ? false : !this.server.isShutdown();
+        return this.server != null && !this.server.isShutdown();
     }
 
     @Override

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/channelfactory/GrpcChannelFactory.java
Patch:
@@ -67,4 +67,7 @@ default Channel createChannel(final String name) {
      */
     Channel createChannel(String name, List<ClientInterceptor> interceptors);
 
+    @Override
+    void close();
+
 }

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/client/inject/GrpcClientBeanPostProcessor.java
Patch:
@@ -149,7 +149,7 @@ protected List<ClientInterceptor> interceptorsFromAnnotation(final GrpcClient an
                 clientInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {
-                    clientInterceptor = interceptorClass.newInstance();
+                    clientInterceptor = interceptorClass.getConstructor().newInstance();
                 } catch (final Exception e) {
                     throw new BeanCreationException("Failed to create interceptor instance", e);
                 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/service/AnnotationGrpcServiceDiscoverer.java
Patch:
@@ -80,7 +80,7 @@ private ServerServiceDefinition bindInterceptors(final ServerServiceDefinition s
                 serverInterceptor = this.applicationContext.getBean(interceptorClass);
             } else {
                 try {
-                    serverInterceptor = interceptorClass.newInstance();
+                    serverInterceptor = interceptorClass.getConstructor().newInstance();
                 } catch (final Exception e) {
                     throw new BeanCreationException("Failed to create interceptor instance", e);
                 }

File: examples/security-grpc-bearerAuth-client/src/main/java/net/devh/boot/grpc/examples/security/client/GrpcClientController.java
Patch:
@@ -21,7 +21,6 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 /**

File: tests/src/test/java/net/devh/boot/grpc/test/config/ManualSecurityConfiguration.java
Patch:
@@ -49,7 +49,7 @@ GrpcSecurityMetadataSource grpcSecurityMetadataSource() {
         source.set(TestServiceGrpc.getSecureDrainMethod(), AccessPredicate.hasRole("ROLE_CLIENT1"));
         source.set(TestServiceGrpc.getSecureSupplyMethod(), AccessPredicate.hasRole("ROLE_CLIENT1"));
         source.set(TestServiceGrpc.getSecureBidiMethod(), AccessPredicate.hasRole("ROLE_CLIENT1"));
-        source.setDefault(AccessPredicate.permitAll());
+        source.setDefault(null); // Public
         return source;
     }
 

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/boot/grpc/server/security/authentication/BearerAuthenticationReader.java
Patch:
@@ -19,11 +19,11 @@
 
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
 
 import io.grpc.Metadata;
 import io.grpc.ServerCall;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;
 
 /**
  * Reads {@link PreAuthenticatedAuthenticationToken bearer token} from the request.

File: tests/src/test/java/net/devh/boot/grpc/test/config/WithBasicAuthSecurityConfiguration.java
Patch:
@@ -99,7 +99,8 @@ GrpcAuthenticationReader authenticationReader() {
     }
 
     @Bean // For testing only
-    GrpcServerFactory testServerFactory(final GrpcServerProperties properties, GrpcServiceDiscoverer serviceDiscoverer) {
+    GrpcServerFactory testServerFactory(final GrpcServerProperties properties,
+            GrpcServiceDiscoverer serviceDiscoverer) {
         InProcessGrpcServerFactory factory = new InProcessGrpcServerFactory("test", properties);
         for (final GrpcServiceDefinition service : serviceDiscoverer.findGrpcServices()) {
             factory.addService(service);

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/GrpcServerService.java
Patch:
@@ -15,7 +15,7 @@
  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.devh.boot.grpc.examples.cloud.server;
+package net.devh.boot.grpc.examples.security.server;
 
 import org.springframework.security.access.annotation.Secured;
 

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.devh.boot.grpc.examples.cloud.server;
+package net.devh.boot.grpc.examples.security.server;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: examples/security-grpc-server/src/main/java/net/devh/boot/grpc/examples/security/server/SecurityGrpcServerApplication.java
Patch:
@@ -15,7 +15,7 @@
  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.devh.boot.grpc.examples.cloud.server;
+package net.devh.boot.grpc.examples.security.server;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: tests/src/test/java/net/devh/boot/grpc/test/BrokenClientSelfSignedMutualSetupTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 
 import lombok.extern.slf4j.Slf4j;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -41,7 +42,7 @@
         "grpc.client.test.security.clientAuthEnabled=false", // <-- client auth not enabled
         "grpc.client.test.security.certificateChainPath=src/test/resources/certificates/client1.crt",
         "grpc.client.test.security.privateKeyPath=src/test/resources/certificates/client1.key"})
-@SpringJUnitConfig(classes = ServiceConfiguration.class)
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class BrokenClientSelfSignedMutualSetupTest extends AbstractBrokenServerClientTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/BrokenServerSelfSignedMutualSetupTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 
 import lombok.extern.slf4j.Slf4j;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -41,7 +42,7 @@
         "grpc.client.test.security.clientAuthEnabled=true",
         "grpc.client.test.security.certificateChainPath=src/test/resources/certificates/client1.crt",
         "grpc.client.test.security.privateKeyPath=src/test/resources/certificates/client1.key"})
-@SpringJUnitConfig(classes = ServiceConfiguration.class)
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class BrokenServerSelfSignedMutualSetupTest extends AbstractBrokenServerClientTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/InProcessSetupTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 
 import lombok.extern.slf4j.Slf4j;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.InProcessConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
@@ -32,7 +33,7 @@
  */
 @Slf4j
 @SpringBootTest
-@SpringJUnitConfig(classes = {InProcessConfiguration.class, ServiceConfiguration.class})
+@SpringJUnitConfig(classes = {InProcessConfiguration.class, ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class InProcessSetupTest extends AbstractSimpleServerClientTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/PlaintextSetupTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 
 import lombok.extern.slf4j.Slf4j;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -31,7 +32,7 @@
  */
 @Slf4j
 @SpringBootTest(properties = "grpc.client.test.negotiationType=PLAINTEXT")
-@SpringJUnitConfig(classes = ServiceConfiguration.class)
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class PlaintextSetupTest extends AbstractSimpleServerClientTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/SelfSignedMutualSetupTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 
 import lombok.extern.slf4j.Slf4j;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -41,7 +42,7 @@
         "grpc.client.test.security.clientAuthEnabled=true",
         "grpc.client.test.security.certificateChainPath=src/test/resources/certificates/client1.crt",
         "grpc.client.test.security.privateKeyPath=src/test/resources/certificates/client1.key"})
-@SpringJUnitConfig(classes = ServiceConfiguration.class)
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class SelfSignedMutualSetupTest extends AbstractSimpleServerClientTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/SelfSignedServerSetupTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
 
 import lombok.extern.slf4j.Slf4j;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -37,7 +38,7 @@
         "grpc.client.test.security.authorityOverride=localhost",
         "grpc.client.test.security.trustCertCollectionPath=src/test/resources/certificates/trusted-servers-collection"
 })
-@SpringJUnitConfig(classes = ServiceConfiguration.class)
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class SelfSignedServerSetupTest extends AbstractSimpleServerClientTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/codec/BeanCodecTest.java
Patch:
@@ -33,10 +33,12 @@
 import net.devh.boot.grpc.client.interceptor.GlobalClientInterceptorConfigurer;
 import net.devh.boot.grpc.common.codec.GrpcCodec;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorConfigurer;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 @SpringBootTest(properties = "grpc.client.test.negotiationType=PLAINTEXT")
-@SpringJUnitConfig(classes = {BeanCodecTest.CustomConfiguration.class, ServiceConfiguration.class})
+@SpringJUnitConfig(
+        classes = {BeanCodecTest.CustomConfiguration.class, ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class BeanCodecTest extends AbstractCodecTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/codec/CustomCodecTest.java
Patch:
@@ -36,10 +36,12 @@
 import net.devh.boot.grpc.common.codec.GrpcCodecDefinition;
 import net.devh.boot.grpc.common.codec.GrpcCodecDiscoverer;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorConfigurer;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 @SpringBootTest(properties = "grpc.client.test.negotiationType=PLAINTEXT")
-@SpringJUnitConfig(classes = {CustomCodecTest.CustomConfiguration.class, ServiceConfiguration.class})
+@SpringJUnitConfig(
+        classes = {CustomCodecTest.CustomConfiguration.class, ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class CustomCodecTest extends AbstractCodecTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/codec/GzipCodecTest.java
Patch:
@@ -29,6 +29,7 @@
 import net.devh.boot.grpc.common.codec.GrpcCodecDefinition;
 import net.devh.boot.grpc.common.codec.GrpcCodecDiscoverer;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorConfigurer;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -38,7 +39,7 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 @SpringBootTest(properties = "grpc.client.test.negotiationType=PLAINTEXT")
-@SpringJUnitConfig(classes = ServiceConfiguration.class)
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class})
 @DirtiesContext
 public class GzipCodecTest extends AbstractCodecTest {
 

File: tests/src/test/java/net/devh/boot/grpc/test/codec/IdentityCodecTest.java
Patch:
@@ -29,6 +29,7 @@
 import net.devh.boot.grpc.common.codec.GrpcCodecDefinition;
 import net.devh.boot.grpc.common.codec.GrpcCodecDiscoverer;
 import net.devh.boot.grpc.server.interceptor.GlobalServerInterceptorConfigurer;
+import net.devh.boot.grpc.test.config.BaseAutoConfiguration;
 import net.devh.boot.grpc.test.config.ServiceConfiguration;
 
 /**
@@ -38,7 +39,8 @@
  * @author Daniel Theuke (daniel.theuke@heuboe.de)
  */
 @SpringBootTest(properties = "grpc.client.test.negotiationType=PLAINTEXT")
-@SpringJUnitConfig(classes = {ServiceConfiguration.class, IdentityCodecTest.CustomConfiguration.class})
+@SpringJUnitConfig(classes = {ServiceConfiguration.class, BaseAutoConfiguration.class,
+        IdentityCodecTest.CustomConfiguration.class})
 @DirtiesContext
 public class IdentityCodecTest extends AbstractCodecTest {
 

File: tests/src/test/java/net/devh/test/grpc/security/AbstractSecurityTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
 
 import org.junit.jupiter.api.Test;
 import org.springframework.test.annotation.DirtiesContext;
@@ -124,11 +125,11 @@ public void testSecuredCall() throws InterruptedException, ExecutionException {
 
             final StreamRecorder<SomeType> streamRecorder = StreamRecorder.create();
             this.brokenTestServiceStub.secure(Empty.getDefaultInstance(), streamRecorder);
-            assertFutureThrowsStatus(PERMISSION_DENIED, streamRecorder.firstValue());
+            assertFutureThrowsStatus(PERMISSION_DENIED, streamRecorder.firstValue(), 5, TimeUnit.SECONDS);
             assertThrowsStatus(PERMISSION_DENIED,
                     () -> this.brokenTestServiceBlockingStub.secure(Empty.getDefaultInstance()));
             assertFutureThrowsStatus(PERMISSION_DENIED,
-                    this.brokenTestServiceFutureStub.secure(Empty.getDefaultInstance()));
+                    this.brokenTestServiceFutureStub.secure(Empty.getDefaultInstance()), 5, TimeUnit.SECONDS);
         }
         log.info("--- Test completed ---");
     }

File: tests/src/test/java/net/devh/test/grpc/server/TestServiceImpl.java
Patch:
@@ -50,7 +50,7 @@ public void unimplemented(final Empty request, final StreamObserver<SomeType> re
     @Override
     @Secured("ROLE_CLIENT1")
     public void secure(final Empty request, final StreamObserver<SomeType> responseObserver) {
-        log.debug("secure: {}", SecurityContextHolder.getContext().getAuthentication().getName());
+        log.debug("secure: {}", SecurityContextHolder.getContext().getAuthentication());
         final SomeType version = SomeType.newBuilder().setVersion("1.2.3").build();
         responseObserver.onNext(version);
         responseObserver.onCompleted();

File: tests/src/test/java/net/devh/test/grpc/util/FutureAssertions.java
Patch:
@@ -29,9 +29,9 @@ public final class FutureAssertions {
 
     @SuppressWarnings("unchecked")
     public static <T extends Exception> T assertFutureThrows(final Class<T> expectedType,
-            final ListenableFuture<?> future) {
+            final ListenableFuture<?> future, int timeout, TimeUnit timeoutUnit) {
         final Throwable cause =
-                assertThrows(ExecutionException.class, () -> future.get(5, TimeUnit.SECONDS)).getCause();
+                assertThrows(ExecutionException.class, () -> future.get(timeout, timeoutUnit)).getCause();
         final Class<? extends Throwable> causeClass = cause.getClass();
         assertTrue(expectedType.isAssignableFrom(causeClass), "The cause was of type: " + causeClass.getName()
                 + ", but it was expected to be a subclass of " + expectedType.getName());

File: tests/src/test/java/net/devh/test/grpc/server/TestServiceImpl.java
Patch:
@@ -50,7 +50,7 @@ public void unimplemented(final Empty request, final StreamObserver<SomeType> re
     @Override
     @Secured("ROLE_CLIENT1")
     public void secure(final Empty request, final StreamObserver<SomeType> responseObserver) {
-        log.debug("secure: {}", SecurityContextHolder.getContext().getAuthentication().getName());
+        log.debug("secure: {}", SecurityContextHolder.getContext().getAuthentication());
         final SomeType version = SomeType.newBuilder().setVersion("1.2.3").build();
         responseObserver.onNext(version);
         responseObserver.onCompleted();

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/GrpcClient.java
Patch:
@@ -45,8 +45,9 @@
      *
      * <p>
      * <b>Note:</b> This value might also be used to check the common / alternative names in server
-     * certificate, you can overwrite this value with the {@link Security#setAuthorityOverride(String)
+     * certificate, you can overwrite this value with the {@link Security
      * security.authorityOverride} property.
+     * </p>
      *
      * @return The name of the grpc client.
      */

File: examples/cloud-grpc-server/src/main/java/net/devh/examples/grpc/cloud/GrpcServerService.java
Patch:
@@ -14,7 +14,7 @@
  * Date: 2016/11/8
  */
 
-@GrpcService(SimpleGrpc.class)
+@GrpcService
 public class GrpcServerService extends SimpleGrpc.SimpleImplBase {
 
     @Override

File: examples/local-grpc-server/src/main/java/net/devh/examples/grpc/local/GrpcServerService.java
Patch:
@@ -14,7 +14,7 @@
  * Date: 2016/11/8
  */
 
-@GrpcService(SimpleGrpc.class)
+@GrpcService
 public class GrpcServerService extends SimpleGrpc.SimpleImplBase {
 
     @Override

File: examples/cloud-grpc-server/src/main/java/net/devh/examples/grpc/cloud/GrpcServerService.java
Patch:
@@ -14,7 +14,7 @@
  * Date: 2016/11/8
  */
 
-@GrpcService(SimpleGrpc.class)
+@GrpcService
 public class GrpcServerService extends SimpleGrpc.SimpleImplBase {
 
     @Override

File: examples/local-grpc-server/src/main/java/net/devh/examples/grpc/local/GrpcServerService.java
Patch:
@@ -14,7 +14,7 @@
  * Date: 2016/11/8
  */
 
-@GrpcService(SimpleGrpc.class)
+@GrpcService
 public class GrpcServerService extends SimpleGrpc.SimpleImplBase {
 
     @Override

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/server/GrpcServerFactory.java
Patch:
@@ -7,7 +7,7 @@
  * A factory that can be used to create grpc servers.
  *
  * @author Michael (yidongnan@gmail.com)
- * @sice 5/17/16
+ * @since 5/17/16
  */
 public interface GrpcServerFactory {
 

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/DiscoveryClientNameResolver.java
Patch:
@@ -69,7 +69,6 @@ public final String getServiceAuthority() {
     public final synchronized void start(Listener listener) {
         Preconditions.checkState(this.listener == null, "already started");
         timerService = SharedResourceHolder.get(timerServiceResource);
-        this.listener = listener;
         executor = SharedResourceHolder.get(executorResource);
         this.listener = Preconditions.checkNotNull(listener, "listener");
         resolve();

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/GrpcChannelProperties.java
Patch:
@@ -65,5 +65,5 @@ public class GrpcChannelProperties {
 
     private boolean fullStreamDecompression = false;
 
-    private NegotiationType negotiationType = NegotiationType.TLS;
+    private NegotiationType negotiationType = NegotiationType.PLAINTEXT;
 }

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/server/NettyGrpcServerFactory.java
Patch:
@@ -54,7 +54,7 @@ public Server createServer() {
             builder.useTransportSecurity(certificateChain, certificate);
         }
         if(properties.getMaxMessageSize() > 0) {
-        	builder.maxMessageSize(properties.getMaxMessageSize());
+        	builder.maxInboundMessageSize(properties.getMaxMessageSize());
         }
 
         return builder.build();

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/GrpcClientAutoConfiguration.java
Patch:
@@ -69,7 +69,7 @@ public GrpcChannelFactory discoveryClientChannelFactory(GrpcChannelsProperties c
 
     @Configuration
     @ConditionalOnProperty(value = "spring.sleuth.scheduled.enabled", matchIfMissing = true)
-    @ConditionalOnBean(value = {Tracing.class, GrpcTracing.class})
+    @ConditionalOnClass(value = {Tracing.class, GrpcTracing.class})
     protected static class TraceClientAutoConfiguration {
 
         @Bean

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/server/GrpcServerAutoConfiguration.java
Patch:
@@ -70,7 +70,7 @@ public GrpcServerLifecycle grpcServerLifecycle(GrpcServerFactory factory) {
     @Configuration
     @ConditionalOnProperty(value = "spring.sleuth.scheduled.enabled", matchIfMissing = true)
     @AutoConfigureAfter({ TraceAutoConfiguration.class })
-    @ConditionalOnBean(value = {Tracing.class, GrpcTracing.class})
+    @ConditionalOnClass(value = {Tracing.class, GrpcTracing.class})
     protected static class TraceServerAutoConfiguration {
 
         @Bean

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/GrpcClientAutoConfiguration.java
Patch:
@@ -69,7 +69,7 @@ public GrpcChannelFactory discoveryClientChannelFactory(GrpcChannelsProperties c
 
     @Configuration
     @ConditionalOnProperty(value = "spring.sleuth.scheduled.enabled", matchIfMissing = true)
-    @ConditionalOnClass(Tracing.class)
+    @ConditionalOnBean(value = {Tracing.class, GrpcTracing.class})
     protected static class TraceClientAutoConfiguration {
 
         @Bean

File: grpc-server-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/server/GrpcServerAutoConfiguration.java
Patch:
@@ -70,7 +70,7 @@ public GrpcServerLifecycle grpcServerLifecycle(GrpcServerFactory factory) {
     @Configuration
     @ConditionalOnProperty(value = "spring.sleuth.scheduled.enabled", matchIfMissing = true)
     @AutoConfigureAfter({ TraceAutoConfiguration.class })
-    @ConditionalOnBean(Tracing.class)
+    @ConditionalOnBean(value = {Tracing.class, GrpcTracing.class})
     protected static class TraceServerAutoConfiguration {
 
         @Bean

File: grpc-client-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/DiscoveryClientNameResolver.java
Patch:
@@ -116,8 +116,8 @@ public void run() {
                     List<EquivalentAddressGroup> equivalentAddressGroups = Lists.newArrayList();
                     for (ServiceInstance serviceInstance : serviceInstanceList) {
                         Map<String, String> metadata = serviceInstance.getMetadata();
-                        if (metadata.get("gRPC") != null) {
-                            Integer port = Integer.valueOf(metadata.get("gRPC"));
+                        if (metadata.get("gRPC.port") != null) {
+                            Integer port = Integer.valueOf(metadata.get("gRPC.port"));
                             log.info("Found gRPC server {} {}:{}", name, serviceInstance.getHost(), port);
                             EquivalentAddressGroup addressGroup = new EquivalentAddressGroup(new InetSocketAddress(serviceInstance.getHost(), port), Attributes.EMPTY);
                             equivalentAddressGroups.add(addressGroup);

File: examples/cloud-grpc-client/src/main/java/net/devh/examples/grpc/cloud/CloudGrpcClientApplication.java
Patch:
@@ -13,9 +13,9 @@
 @EnableEurekaClient
 @EnableDiscoveryClient
 @SpringBootApplication
-public class GrpcClientApplication {
+public class CloudGrpcClientApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(GrpcClientApplication.class, args);
+        SpringApplication.run(CloudGrpcClientApplication.class, args);
     }
 }

File: examples/cloud-grpc-server/src/main/java/net/devh/examples/grpc/cloud/CloudGrpcServerApplication.java
Patch:
@@ -13,9 +13,9 @@
 @EnableEurekaClient
 @EnableDiscoveryClient
 @SpringBootApplication
-public class GrpcServerApplication {
+public class CloudGrpcServerApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(GrpcServerApplication.class, args);
+        SpringApplication.run(CloudGrpcServerApplication.class, args);
     }
 }

File: examples/cloud-zipkin-server/src/main/java/net/devh/examples/zipkin/ZipkinApplication.java
Patch:
@@ -3,15 +3,12 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
-import zipkin.server.EnableZipkinServer;
-
 /**
  * User: Michael
  * Email: yidongnan@gmail.com
  * Date: 17-5-14
  */
 @SpringBootApplication
-@EnableZipkinServer
 public class ZipkinApplication {
 
     public static void main(String[] args) {

File: examples/local-grpc-client/src/main/java/net/devh/examples/grpc/local/LocalGrpcClientApplication.java
Patch:
@@ -9,9 +9,9 @@
  * Date: 2016/11/8
  */
 @SpringBootApplication
-public class GrpcClientApplication {
+public class LocalGrpcClientApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(GrpcClientApplication.class, args);
+        SpringApplication.run(LocalGrpcClientApplication.class, args);
     }
 }

File: examples/local-grpc-server/src/main/java/net/devh/examples/grpc/local/LocalGrpcServerApplication.java
Patch:
@@ -9,9 +9,9 @@
  * Date: 2016/11/8
  */
 @SpringBootApplication
-public class GrpcServerApplication {
+public class LocalGrpcServerApplication {
 
     public static void main(String[] args) {
-        SpringApplication.run(GrpcServerApplication.class, args);
+        SpringApplication.run(LocalGrpcServerApplication.class, args);
     }
 }

File: grpc-spring-boot-autoconfigure/src/main/java/net/devh/springboot/autoconfigure/grpc/client/DiscoveryClientNameResolver.java
Patch:
@@ -128,9 +128,8 @@ public void run() {
                         }
                         serversList.add(servers);
                     }
-                    savedListener.onUpdate(serversList, Attributes.EMPTY);
                 }
-
+                savedListener.onUpdate(serversList, Attributes.EMPTY);
             } finally {
                 synchronized (DiscoveryClientNameResolver.this) {
                     resolving = false;

