File: ttl-core/src/main/java/com/alibaba/ttl3/internal/util/ConcurrentReferenceHashMap.java
Patch:
@@ -73,7 +73,9 @@
  * @author Juergen Hoeller
  */
 @SuppressWarnings("ALL")
-@SuppressFBWarnings("ALL")
+// Is there a class annotation in FindBugs to ignore all warning in a file
+// https://stackoverflow.com/questions/13398685
+@SuppressFBWarnings
 class ConcurrentReferenceHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
 
     private static final int DEFAULT_INITIAL_CAPACITY = 16;

File: ttl-agent/src/main/java/com/alibaba/ttl3/agent/TtlAgent.java
Patch:
@@ -138,12 +138,12 @@
  * </blockquote>
  * <p>
  * More info about {@code Boot-Class-Path} see
- * <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>.
+ * <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>.
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see Instrumentation
- * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
- * @see <a href="https://docs.oracle.com/javase/10/docs/specs/jar/jar.html#jar-manifest">JAR File Specification - JAR Manifest</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/specs/jar/jar.html#jar-manifest">JAR File Specification - JAR Manifest</a>
  * @see <a href="https://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html">Working with Manifest Files - The Java™ Tutorials</a>
  * @see com.alibaba.ttl3.TransmittableThreadLocal
  * @see java.util.concurrent.ThreadPoolExecutor

File: ttl-agent/src/main/java/com/alibaba/ttl3/agent/TtlTransformer.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see ClassFileTransformer
- * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
  */
 public class TtlTransformer implements ClassFileTransformer {
     private static final Logger logger = Logger.getLogger(TtlTransformer.class);

File: ttl-agent/src/main/java/com/alibaba/ttl3/agent/package-info.java
Patch:
@@ -3,6 +3,6 @@
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see com.alibaba.ttl3.agent.TtlAgent
- * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
  */
 package com.alibaba.ttl3.agent;

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -137,12 +137,12 @@
  * </blockquote>
  * <p>
  * More info about {@code Boot-Class-Path} see
- * <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>.
+ * <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>.
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see Instrumentation
- * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
- * @see <a href="https://docs.oracle.com/javase/10/docs/specs/jar/jar.html#jar-manifest">JAR File Specification - JAR Manifest</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/specs/jar/jar.html#jar-manifest">JAR File Specification - JAR Manifest</a>
  * @see <a href="https://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html">Working with Manifest Files - The Java™ Tutorials</a>
  * @see com.alibaba.ttl.TransmittableThreadLocal
  * @see java.util.concurrent.ThreadPoolExecutor

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/agent/TtlTransformer.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see ClassFileTransformer
- * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
  * @since 0.9.0
  */
 public class TtlTransformer implements ClassFileTransformer {

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/agent/package-info.java
Patch:
@@ -3,6 +3,6 @@
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see com.alibaba.ttl.threadpool.agent.TtlAgent
- * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
+ * @see <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.instrument/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
  */
 package com.alibaba.ttl.threadpool.agent;

File: ttl-agent/src/main/java/com/alibaba/ttl3/agent/TtlAgent.java
Patch:
@@ -8,6 +8,7 @@
 import com.alibaba.ttl3.agent.transformlet.internal.TimerTaskTtlTransformlet;
 import com.alibaba.ttl3.executor.TtlExecutors;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import java.lang.instrument.ClassFileTransformer;
 import java.lang.instrument.Instrumentation;
@@ -365,6 +366,7 @@ static List<String> getOptionStringListValues(@NonNull String key) {
     }
 
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlAgent() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-agent/src/main/java/com/alibaba/ttl3/agent/TtlAgentHelper.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import java.util.*;
 
@@ -126,6 +127,7 @@ static List<String> splitListStringToStringList(@Nullable String listString) {
     }
 
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlAgentHelper() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-agent/src/main/java/com/alibaba/ttl3/agent/transformlet/helper/TtlTransformletHelper.java
Patch:
@@ -7,6 +7,7 @@
 import com.alibaba.ttl3.spi.TtlEnhanced;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import javassist.*;
 
 import java.lang.reflect.Modifier;
@@ -206,6 +207,7 @@ public static boolean isClassAtPackageJavaUtil(@NonNull String className) {
         return isClassAtPackage(className, "java.util");
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlTransformletHelper() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-core/src/main/java/com/alibaba/ttl3/TtlWrappers.java
Patch:
@@ -7,6 +7,7 @@
 import com.alibaba.ttl3.spi.TtlWrapper;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jetbrains.annotations.Contract;
 
 import java.util.concurrent.Callable;
@@ -310,6 +311,7 @@ public String toString() {
         }
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlWrappers() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-core/src/main/java/com/alibaba/ttl3/executor/TtlExecutors.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.ttl3.spi.TtlWrapper;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jetbrains.annotations.Contract;
 
 import java.util.Comparator;
@@ -330,6 +331,7 @@ public static Comparator<Runnable> unwrapTtlRunnableUnwrapComparator(@Nullable C
         return ((TtlUnwrapComparator<Runnable>) comparator).unwrap();
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlExecutors() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-core/src/main/java/com/alibaba/ttl3/transmitter/ThreadLocalTransmitRegistry.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.ttl3.TransmittableThreadLocal;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -199,6 +200,7 @@ public void restore(@NonNull HashMap<ThreadLocal<Object>, Object> backup) {
         TransmitteeRegistry.registerTransmittee(threadLocalTransmittee);
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private ThreadLocalTransmitRegistry() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-core/src/main/java/com/alibaba/ttl3/transmitter/TransmitteeRegistry.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.ttl3.TransmittableThreadLocal;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**
  * Transmittee(aka {@code ThreadLocal}) Integration,
@@ -50,6 +51,7 @@ public static <C, B> boolean unregisterTransmittee(@NonNull Transmittee<C, B> tr
         return Transmitter.compositeCrrTransmit.unregisterCrrTransmit(transmittee);
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TransmitteeRegistry() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-core/src/main/java/com/alibaba/ttl3/transmitter/Transmitter.java
Patch:
@@ -269,6 +269,7 @@ public static boolean unregisterCallback(@NonNull CrrTransmitCallback callback)
         return compositeCallback.unregisterCallback(callback);
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private Transmitter() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/TransmittableThreadLocal.java
Patch:
@@ -1083,6 +1083,7 @@ public static <T> boolean unregisterThreadLocal(@NonNull ThreadLocal<T> threadLo
 
         private static final TtlCopier<Object> shadowCopier = parentValue -> parentValue;
 
+        @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
         private Transmitter() {
             throw new InstantiationError("Must not instantiate this class");
         }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/TtlUnwrap.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.ttl.spi.TtlWrapper;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jetbrains.annotations.Contract;
 
 /**
@@ -64,6 +65,7 @@ public static <T> boolean isWrapper(@Nullable T obj) {
         return obj instanceof TtlWrapper;
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlUnwrap() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/TtlWrappers.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.ttl.spi.TtlWrapper;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jetbrains.annotations.Contract;
 
 import java.util.function.*;
@@ -433,6 +434,7 @@ public String toString() {
     }
 
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlWrappers() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.ttl.threadpool.agent.TtlAgent;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jetbrains.annotations.Contract;
 
 import java.util.Comparator;
@@ -297,6 +298,7 @@ public static Comparator<Runnable> unwrap(@Nullable Comparator<Runnable> compara
         return ((TtlUnwrapComparator<Runnable>) comparator).unwrap();
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlExecutors() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/TtlForkJoinPoolHelper.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.jetbrains.annotations.Contract;
 
 import java.util.concurrent.ForkJoinPool;
@@ -83,6 +84,7 @@ public static ForkJoinWorkerThreadFactory unwrap(@Nullable ForkJoinWorkerThreadF
         return ((DisableInheritableForkJoinWorkerThreadFactory) threadFactory).unwrap();
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlForkJoinPoolHelper() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -7,6 +7,7 @@
 import com.alibaba.ttl.threadpool.agent.transformlet.internal.TimerTaskTtlTransformlet;
 import com.alibaba.ttl.threadpool.agent.transformlet.internal.PriorityBlockingQueueTtlTransformlet;
 import edu.umd.cs.findbugs.annotations.NonNull;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import java.lang.instrument.ClassFileTransformer;
 import java.lang.instrument.Instrumentation;
@@ -376,6 +377,7 @@ static List<String> getOptionStringListValues(@NonNull String key) {
     }
 
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlAgent() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgentHelper.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import java.util.*;
 
@@ -127,6 +128,7 @@ static List<String> splitListStringToStringList(@Nullable String listString) {
     }
 
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlAgentHelper() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/agent/transformlet/helper/TtlTransformletHelper.java
Patch:
@@ -7,6 +7,7 @@
 import com.alibaba.ttl.threadpool.agent.transformlet.TtlTransformlet;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import javassist.*;
 
 import java.lang.reflect.Modifier;
@@ -207,6 +208,7 @@ public static boolean isClassAtPackageJavaUtil(@NonNull String className) {
         return isClassAtPackage(className, "java.util");
     }
 
+    @SuppressFBWarnings("CT_CONSTRUCTOR_THROW")
     private TtlTransformletHelper() {
         throw new InstantiationError("Must not instantiate this class");
     }

File: ttl-core/src/main/java/com/alibaba/ttl3/transmitter/Transmitter.java
Patch:
@@ -255,7 +255,7 @@ public static <R> R runCallableWithClear(@NonNull Callable<R> bizLogic) throws E
      * @return true if the input callback is not registered
      * @see #unregisterCallback(CrrTransmitCallback)
      */
-    public boolean registerCallback(@NonNull CrrTransmitCallback callback) {
+    public static boolean registerCallback(@NonNull CrrTransmitCallback callback) {
         return compositeCallback.registerCallback(callback);
     }
 
@@ -265,7 +265,7 @@ public boolean registerCallback(@NonNull CrrTransmitCallback callback) {
      * @return true if the input callback is registered
      * @see #registerCallback(CrrTransmitCallback)
      */
-    public boolean unregisterCallback(@NonNull CrrTransmitCallback callback) {
+    public static boolean unregisterCallback(@NonNull CrrTransmitCallback callback) {
         return compositeCallback.unregisterCallback(callback);
     }
 

File: ttl-core/src/main/java/com/alibaba/ttl3/TtlCallable.java
Patch:
@@ -136,7 +136,7 @@ public static <T> TtlCallable<T> get(@Nullable Callable<T> callable, boolean rel
     @Nullable
     @Contract(value = "null, _, _ -> null; !null, _, _ -> !null", pure = true)
     public static <T> TtlCallable<T> get(@Nullable Callable<T> callable, boolean releaseTtlValueReferenceAfterCall, boolean idempotent) {
-        if (null == callable) return null;
+        if (callable == null) return null;
 
         if (callable instanceof TtlEnhanced) {
             // avoid redundant decoration, and ensure idempotency
@@ -179,7 +179,7 @@ public static <T> List<TtlCallable<T>> gets(@Nullable Collection<? extends Calla
      */
     @NonNull
     public static <T> List<TtlCallable<T>> gets(@Nullable Collection<? extends Callable<T>> tasks, boolean releaseTtlValueReferenceAfterCall, boolean idempotent) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<TtlCallable<T>> copy = new ArrayList<>();
         for (Callable<T> task : tasks) {
@@ -218,7 +218,7 @@ public static <T> Callable<T> unwrap(@Nullable Callable<T> callable) {
      */
     @NonNull
     public static <T> List<Callable<T>> unwraps(@Nullable Collection<? extends Callable<T>> tasks) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<Callable<T>> copy = new ArrayList<>();
         for (Callable<T> task : tasks) {

File: ttl-core/src/main/java/com/alibaba/ttl3/TtlRunnable.java
Patch:
@@ -129,7 +129,7 @@ public static TtlRunnable get(@Nullable Runnable runnable, boolean releaseTtlVal
     @Nullable
     @Contract(value = "null, _, _ -> null; !null, _, _ -> !null", pure = true)
     public static TtlRunnable get(@Nullable Runnable runnable, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == runnable) return null;
+        if (runnable == null) return null;
 
         if (runnable instanceof TtlEnhanced) {
             // avoid redundant decoration, and ensure idempotency
@@ -177,7 +177,7 @@ public static List<TtlRunnable> gets(@Nullable Collection<? extends Runnable> ta
      */
     @NonNull
     public static List<TtlRunnable> gets(@Nullable Collection<? extends Runnable> tasks, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<TtlRunnable> copy = new ArrayList<>();
         for (Runnable task : tasks) {
@@ -216,7 +216,7 @@ public static Runnable unwrap(@Nullable Runnable runnable) {
      */
     @NonNull
     public static List<Runnable> unwraps(@Nullable Collection<? extends Runnable> tasks) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<Runnable> copy = new ArrayList<>();
         for (Runnable task : tasks) {

File: ttl-core/src/main/java/com/alibaba/ttl3/TtlTimerTask.java
Patch:
@@ -136,7 +136,7 @@ public static TtlTimerTask get(@Nullable TimerTask timerTask, boolean releaseTtl
     @Nullable
     @Contract(value = "null, _, _ -> null; !null, _, _ -> !null", pure = true)
     public static TtlTimerTask get(@Nullable TimerTask timerTask, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == timerTask) return null;
+        if (timerTask == null) return null;
 
         if (timerTask instanceof TtlEnhanced) {
             // avoid redundant decoration, and ensure idempotency

File: ttl-core/src/main/java/com/alibaba/ttl3/executor/TtlExecutors.java
Patch:
@@ -62,7 +62,7 @@ public final class TtlExecutors {
     @Nullable
     @Contract(value = "null -> null; !null -> !null", pure = true)
     public static Executor getTtlExecutor(@Nullable Executor executor) {
-        if (TtlAgentStatus.getInstance().isTtlAgentLoaded() || null == executor || executor instanceof TtlEnhanced) {
+        if (TtlAgentStatus.getInstance().isTtlAgentLoaded() || executor == null || executor instanceof TtlEnhanced) {
             return executor;
         }
         return new ExecutorTtlWrapper(executor, true);

File: ttl-integrations/vertx3-ttl-integration/src/main/java/com/alibaba/ttl/integration/vertx3/TtlVertxHandler.java
Patch:
@@ -142,7 +142,7 @@ public static <T> TtlVertxHandler<T> get(@Nullable Handler<T> handler, boolean r
      */
     @Nullable
     public static <T> TtlVertxHandler<T> get(@Nullable Handler<T> handler, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == handler) {
+        if (handler == null) {
             return null;
         }
 
@@ -195,7 +195,7 @@ public static <T> List<TtlVertxHandler<T>> gets(@Nullable Collection<? extends H
      */
     @NonNull
     public static <T> List<TtlVertxHandler<T>> gets(@Nullable Collection<? extends Handler<T>> tasks, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == tasks) {
+        if (tasks == null) {
             return Collections.emptyList();
         }
 
@@ -238,7 +238,7 @@ public static <T> Handler<T> unwrap(@Nullable Handler<T> handler) {
      */
     @NonNull
     public static <T> List<Handler<T>> unwraps(@Nullable Collection<? extends Handler<T>> tasks) {
-        if (null == tasks) {
+        if (tasks == null) {
             return Collections.emptyList();
         }
 

File: ttl-integrations/vertx4-ttl-integration/src/main/java/com/alibaba/ttl/integration/vertx4/TtlVertxHandler.java
Patch:
@@ -142,7 +142,7 @@ public static <T> TtlVertxHandler<T> get(@Nullable Handler<T> handler, boolean r
      */
     @Nullable
     public static <T> TtlVertxHandler<T> get(@Nullable Handler<T> handler, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == handler) {
+        if (handler == null) {
             return null;
         }
 
@@ -195,7 +195,7 @@ public static <T> List<TtlVertxHandler<T>> gets(@Nullable Collection<? extends H
      */
     @NonNull
     public static <T> List<TtlVertxHandler<T>> gets(@Nullable Collection<? extends Handler<T>> tasks, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == tasks) {
+        if (tasks == null) {
             return Collections.emptyList();
         }
 
@@ -238,7 +238,7 @@ public static <T> Handler<T> unwrap(@Nullable Handler<T> handler) {
      */
     @NonNull
     public static <T> List<Handler<T>> unwraps(@Nullable Collection<? extends Handler<T>> tasks) {
-        if (null == tasks) {
+        if (tasks == null) {
             return Collections.emptyList();
         }
 

File: ttl2-compatible/src/main/java/com/alibaba/ttl/TtlCallable.java
Patch:
@@ -151,7 +151,7 @@ public static <T> TtlCallable<T> get(@Nullable Callable<T> callable, boolean rel
     @Nullable
     @Contract(value = "null, _, _ -> null; !null, _, _ -> !null", pure = true)
     public static <T> TtlCallable<T> get(@Nullable Callable<T> callable, boolean releaseTtlValueReferenceAfterCall, boolean idempotent) {
-        if (null == callable) return null;
+        if (callable == null) return null;
 
         if (callable instanceof TtlEnhanced) {
             // avoid redundant decoration, and ensure idempotency
@@ -194,7 +194,7 @@ public static <T> List<TtlCallable<T>> gets(@Nullable Collection<? extends Calla
      */
     @NonNull
     public static <T> List<TtlCallable<T>> gets(@Nullable Collection<? extends Callable<T>> tasks, boolean releaseTtlValueReferenceAfterCall, boolean idempotent) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<TtlCallable<T>> copy = new ArrayList<>();
         for (Callable<T> task : tasks) {
@@ -235,7 +235,7 @@ public static <T> Callable<T> unwrap(@Nullable Callable<T> callable) {
      */
     @NonNull
     public static <T> List<Callable<T>> unwraps(@Nullable Collection<? extends Callable<T>> tasks) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<Callable<T>> copy = new ArrayList<>();
         for (Callable<T> task : tasks) {

File: ttl2-compatible/src/main/java/com/alibaba/ttl/TtlRunnable.java
Patch:
@@ -144,7 +144,7 @@ public static TtlRunnable get(@Nullable Runnable runnable, boolean releaseTtlVal
     @Nullable
     @Contract(value = "null, _, _ -> null; !null, _, _ -> !null", pure = true)
     public static TtlRunnable get(@Nullable Runnable runnable, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == runnable) return null;
+        if (runnable == null) return null;
 
         if (runnable instanceof TtlEnhanced) {
             // avoid redundant decoration, and ensure idempotency
@@ -192,7 +192,7 @@ public static List<TtlRunnable> gets(@Nullable Collection<? extends Runnable> ta
      */
     @NonNull
     public static List<TtlRunnable> gets(@Nullable Collection<? extends Runnable> tasks, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<TtlRunnable> copy = new ArrayList<>();
         for (Runnable task : tasks) {
@@ -233,7 +233,7 @@ public static Runnable unwrap(@Nullable Runnable runnable) {
      */
     @NonNull
     public static List<Runnable> unwraps(@Nullable Collection<? extends Runnable> tasks) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<Runnable> copy = new ArrayList<>();
         for (Runnable task : tasks) {

File: ttl2-compatible/src/main/java/com/alibaba/ttl/TtlTimerTask.java
Patch:
@@ -147,7 +147,7 @@ public static TtlTimerTask get(@Nullable TimerTask timerTask, boolean releaseTtl
     @Nullable
     @Contract(value = "null, _, _ -> null; !null, _, _ -> !null", pure = true)
     public static TtlTimerTask get(@Nullable TimerTask timerTask, boolean releaseTtlValueReferenceAfterRun, boolean idempotent) {
-        if (null == timerTask) return null;
+        if (timerTask == null) return null;
 
         if (timerTask instanceof TtlEnhanced) {
             // avoid redundant decoration, and ensure idempotency
@@ -185,7 +185,7 @@ public static TimerTask unwrap(@Nullable TimerTask timerTask) {
      */
     @NonNull
     public static List<TimerTask> unwraps(@Nullable Collection<? extends TimerTask> tasks) {
-        if (null == tasks) return Collections.emptyList();
+        if (tasks == null) return Collections.emptyList();
 
         List<TimerTask> copy = new ArrayList<>();
         for (TimerTask task : tasks) {

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/ComparableComparator.java
Patch:
@@ -120,7 +120,7 @@ public int hashCode() {
     }
 
     /**
-     * Returns {@code true} iff <i>that</i> Object is is a {@link Comparator Comparator}
+     * Returns {@code true} iff <i>that</i> Object is a {@link Comparator Comparator}
      * whose ordering is known to be equivalent to mine.
      * <p>
      * This implementation returns {@code true} iff

File: ttl2-compatible/src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java
Patch:
@@ -63,7 +63,7 @@ public final class TtlExecutors {
     @Nullable
     @Contract(value = "null -> null; !null -> !null", pure = true)
     public static Executor getTtlExecutor(@Nullable Executor executor) {
-        if (TtlAgent.isTtlAgentLoaded() || null == executor || executor instanceof TtlEnhanced) {
+        if (TtlAgent.isTtlAgentLoaded() || executor == null || executor instanceof TtlEnhanced) {
             return executor;
         }
         return new ExecutorTtlWrapper(executor, true);

File: src/main/java/com/alibaba/ttl/TransmittableThreadLocal.java
Patch:
@@ -2,6 +2,7 @@
 
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import javax.annotation.ParametersAreNonnullByDefault;
 import java.util.HashMap;
@@ -698,6 +699,7 @@ public static <R> R runSupplierWithClear(@NonNull Supplier<R> bizLogic) {
          * @see #restore(Object)
          * @since 2.3.1
          */
+        @SuppressFBWarnings("THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION")
         public static <R> R runCallableWithCaptured(@NonNull Object captured, @NonNull Callable<R> bizLogic) throws Exception {
             final Object backup = replay(captured);
             try {
@@ -718,6 +720,7 @@ public static <R> R runCallableWithCaptured(@NonNull Object captured, @NonNull C
          * @see #restore(Object)
          * @since 2.9.0
          */
+        @SuppressFBWarnings("THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION")
         public static <R> R runCallableWithClear(@NonNull Callable<R> bizLogic) throws Exception {
             final Object backup = clear();
             try {

File: src/main/java/com/alibaba/ttl/TtlCallable.java
Patch:
@@ -6,6 +6,7 @@
 import com.alibaba.ttl.spi.TtlWrapper;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -51,6 +52,7 @@ private TtlCallable(@NonNull Callable<V> callable, boolean releaseTtlValueRefere
      * wrap method {@link Callable#call()}.
      */
     @Override
+    @SuppressFBWarnings("THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION")
     public V call() throws Exception {
         final Object captured = capturedRef.get();
         if (captured == null || releaseTtlValueReferenceAfterCall && !capturedRef.compareAndSet(captured, null)) {

File: src/main/java/com/alibaba/ttl/threadpool/agent/transformlet/helper/AbstractExecutorTtlTransformlet.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Modifier;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -50,7 +51,7 @@ public abstract class AbstractExecutorTtlTransformlet implements TtlTransformlet
      * @param executorClassNames the executor class names to be transformed
      */
     public AbstractExecutorTtlTransformlet(Set<String> executorClassNames, boolean disableInheritableForThreadPool) {
-        this.executorClassNames = executorClassNames;
+        this.executorClassNames = Collections.unmodifiableSet(executorClassNames);
         this.disableInheritableForThreadPool = disableInheritableForThreadPool;
 
         paramTypeNameToDecorateMethodClass.put(RUNNABLE_CLASS_NAME, TTL_RUNNABLE_CLASS_NAME);

File: ttl-integrations/ttl-vertx/src/main/java/com/alibaba/ttl/agent/extension_transformlet/vertx/transformlet/VertxFutureTtlTransformlet.java
Patch:
@@ -78,6 +78,6 @@ private void updateSetHandlerMethodsOfFutureClass_decorateToTtlWrapperAndSetAuto
     }
 
     private boolean checkMethodNeedToBeDecorated(int modifiers) {
-        return Modifier.isPublic(modifiers) || !Modifier.isStatic(modifiers) || !Modifier.isAbstract(modifiers);
+        return Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers) && !Modifier.isAbstract(modifiers);
     }
 }

File: src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.ttl.TransmittableThreadLocal;
 import com.alibaba.ttl.spi.TtlEnhanced;
+import com.alibaba.ttl.spi.TtlWrapper;
 import com.alibaba.ttl.threadpool.agent.TtlAgent;
 import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
@@ -129,7 +130,7 @@ public static ScheduledExecutorService getTtlScheduledExecutorService(@Nullable
      * @since 2.8.0
      */
     public static <T extends Executor> boolean isTtlWrapper(@Nullable T executor) {
-        return executor instanceof TtlEnhanced;
+        return executor instanceof TtlWrapper;
     }
 
     /**

File: src/main/java/com/alibaba/ttl/threadpool/agent/logging/Logger.java
Patch:
@@ -13,7 +13,6 @@
  * @since 2.6.0
  */
 public abstract class Logger {
-    public static final String TTL_AGENT_LOGGER_KEY = "ttl.agent.logger";
     public static final String STDOUT = "STDOUT";
     public static final String STDERR = "STDERR";
 

File: src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java
Patch:
@@ -3,6 +3,7 @@
 import com.alibaba.ttl.TransmittableThreadLocal;
 import com.alibaba.ttl.spi.TtlEnhanced;
 import com.alibaba.ttl.threadpool.agent.TtlAgent;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 
 import java.util.concurrent.*;
@@ -176,7 +177,7 @@ public static ThreadFactory getDisableInheritableThreadFactory(@Nullable ThreadF
      * @see #getDisableInheritableThreadFactory(ThreadFactory)
      * @since 2.10.0
      */
-    @Nullable
+    @NonNull
     public static ThreadFactory getDefaultDisableInheritableThreadFactory() {
         return getDisableInheritableThreadFactory(Executors.defaultThreadFactory());
     }

File: src/main/java/com/alibaba/ttl/threadpool/TtlForkJoinPoolHelper.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.ttl.threadpool;
 
+import edu.umd.cs.findbugs.annotations.NonNull;
 import edu.umd.cs.findbugs.annotations.Nullable;
 
 import java.util.concurrent.ForkJoinPool;
@@ -41,7 +42,7 @@ public static ForkJoinWorkerThreadFactory getDisableInheritableForkJoinWorkerThr
      * @see #getDisableInheritableForkJoinWorkerThreadFactory(ForkJoinWorkerThreadFactory)
      * @since 2.10.1
      */
-    @Nullable
+    @NonNull
     public static ForkJoinWorkerThreadFactory getDefaultDisableInheritableForkJoinWorkerThreadFactory() {
         return getDisableInheritableForkJoinWorkerThreadFactory(ForkJoinPool.defaultForkJoinWorkerThreadFactory);
     }

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -146,7 +146,7 @@ public static void premain(final String agentArgs, @NonNull final Instrumentatio
             ttlAgentLoaded = true;
         } catch (Exception e) {
             String msg = "Fail to load TtlAgent , cause: " + e.toString();
-            logger.log(Level.SEVERE, msg, e);
+            logger.error(msg, e);
             throw new IllegalStateException(msg, e);
         }
     }

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlTransformer.java
Patch:
@@ -60,7 +60,7 @@ public final byte[] transform(@Nullable final ClassLoader loader, @Nullable fina
             }
         } catch (Throwable t) {
             String msg = "Fail to transform class " + classFile + ", cause: " + t.toString();
-            logger.log(Level.SEVERE, msg, t);
+            logger.error(msg, t);
             throw new IllegalStateException(msg, t);
         }
 

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/transformlet/impl/TtlForkJoinTransformlet.java
Patch:
@@ -57,16 +57,16 @@ private void updateForkJoinTaskClass(@NonNull final CtClass clazz) throws Cannot
         logger.info("add new field " + capturedFieldName + " to class " + className);
 
         final CtMethod doExecMethod = clazz.getDeclaredMethod("doExec", new CtClass[0]);
-        final String doExec_renamed_method_rename = renamedMethodNameByTtl(doExecMethod);
+        final String doExec_renamed_method_name = renamedMethodNameByTtl(doExecMethod);
 
         final String beforeCode = "if (this instanceof " + TtlEnhanced.class.getName() + ") {\n" + // if the class is already TTL enhanced(eg: com.alibaba.ttl.TtlRecursiveTask)
-                "    return " + doExec_renamed_method_rename + "($$);\n" +                         // return directly/do nothing
+                "    return " + doExec_renamed_method_name + "($$);\n" +                           // return directly/do nothing
                 "}\n" +
                 "Object backup = com.alibaba.ttl.TransmittableThreadLocal.Transmitter.replay(" + capturedFieldName + ");";
 
         final String finallyCode = "com.alibaba.ttl.TransmittableThreadLocal.Transmitter.restore(backup);";
 
-        doTryFinallyForMethod(doExecMethod, doExec_renamed_method_rename, beforeCode, finallyCode);
+        doTryFinallyForMethod(doExecMethod, doExec_renamed_method_name, beforeCode, finallyCode);
     }
 
     private void updateConstructorDisableInheritable(@NonNull final CtClass clazz) throws NotFoundException, CannotCompileException {

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -107,8 +107,8 @@ public final class TtlAgent {
      * <p>
      * Configuration example:
      * <ul>
-     * <li>{@code -javaagent:/path/to/transmittable-thread-local-2.x.x.jar=ttl.agent.enable.timer.task:true}</li>
      * <li>{@code -javaagent:/path/to/transmittable-thread-local-2.x.x.jar=ttl.agent.enable.timer.task:false}</li>
+     * <li>{@code -javaagent:/path/to/transmittable-thread-local-2.x.x.jar=ttl.agent.enable.timer.task:true}</li>
      * </ul>
      *
      * <h3>Multi key configuration example</h3>

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -103,7 +103,7 @@ public final class TtlAgent {
      * <p>
      * When no configuration for this key, default is <b>enabled</b>.<br>
      * <b><i>Note</i></b>: Since version {@code 2.11.2} the default value is {@code true}(enable TimerTask class decoration);
-     * Before version `2.11.1` default value is {@code false}.
+     * Before version {@code 2.11.1} default value is {@code false}.
      * <p>
      * Configuration example:
      * <ul>

File: src/main/java/com/alibaba/ttl/threadpool/TtlForkJoinPoolHelper.java
Patch:
@@ -65,7 +65,7 @@ public static boolean isDisableInheritableForkJoinWorkerThreadFactory(@Nullable
     public static ForkJoinWorkerThreadFactory unwrap(@Nullable ForkJoinWorkerThreadFactory threadFactory) {
         if (!isDisableInheritableForkJoinWorkerThreadFactory(threadFactory)) return threadFactory;
 
-        return ((DisableInheritableForkJoinWorkerThreadFactoryWrapper) threadFactory).unwrap();
+        return ((DisableInheritableForkJoinWorkerThreadFactory) threadFactory).unwrap();
     }
 
     private TtlForkJoinPoolHelper() {

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -102,7 +102,8 @@ public final class TtlAgent {
      * Since version {@code 2.7.0}.
      * <p>
      * When no configuration for this key, default is <b>enabled</b>.<br>
-     * <b><i>Note</i></b>: The default value is changed to {@code true} since version {@code 2.12.0}.
+     * <b><i>Note</i></b>: Since version {@code 2.11.2} the default value is {@code true}(enable TimerTask class decoration);
+     * Before version `2.11.1` default value is {@code false}.
      * <p>
      * Configuration example:
      * <ul>

File: src/main/java/com/alibaba/ttl/spi/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * TTL {@code Transformlet} SPI
+ * TTL SPI
  *
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see com.alibaba.ttl.spi.TtlEnhanced

File: src/main/java/com/alibaba/ttl/spi/TtlAttachments.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.ttl.spi;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
 
 /**
  * The TTL attachments for TTL tasks, eg: {@link com.alibaba.ttl.TtlRunnable}, {@link com.alibaba.ttl.TtlCallable}.
@@ -16,15 +16,15 @@ public interface TtlAttachments extends TtlEnhanced {
      * @param value attachment value
      * @since 2.11.0
      */
-    void setTtlAttachment(@Nonnull String key, Object value);
+    void setTtlAttachment(@NonNull String key, Object value);
 
     /**
      * get the TTL attachment for TTL tasks
      *
      * @param key attachment key
      * @since 2.11.0
      */
-    <T> T getTtlAttachment(@Nonnull String key);
+    <T> T getTtlAttachment(@NonNull String key);
 
     /**
      * The attachment key of TTL task, weather this task is a auto wrapper task.

File: src/main/java/com/alibaba/ttl/threadpool/DisableInheritableForkJoinWorkerThreadFactory.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.ttl.threadpool;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
+
 import java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory;
 
 /**
@@ -13,6 +14,6 @@ public interface DisableInheritableForkJoinWorkerThreadFactory extends ForkJoinW
     /**
      * Unwrap {@link DisableInheritableThreadFactory} to the original/underneath one.
      */
-    @Nonnull
+    @NonNull
     ForkJoinWorkerThreadFactory unwrap();
 }

File: src/main/java/com/alibaba/ttl/threadpool/DisableInheritableThreadFactory.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.ttl.threadpool;
 
-import javax.annotation.Nonnull;
+import edu.umd.cs.findbugs.annotations.NonNull;
+
 import java.util.concurrent.ThreadFactory;
 
 /**
@@ -14,6 +15,6 @@ public interface DisableInheritableThreadFactory extends ThreadFactory {
     /**
      * Unwrap {@link DisableInheritableThreadFactory} to the original/underneath one.
      */
-    @Nonnull
+    @NonNull
     ThreadFactory unwrap();
 }

File: src/main/java/com/alibaba/ttl/threadpool/TtlExecutors.java
Patch:
@@ -3,8 +3,8 @@
 import com.alibaba.ttl.TransmittableThreadLocal;
 import com.alibaba.ttl.spi.TtlEnhanced;
 import com.alibaba.ttl.threadpool.agent.TtlAgent;
+import edu.umd.cs.findbugs.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.util.concurrent.*;
 
 /**

File: src/main/java/com/alibaba/ttl/threadpool/TtlForkJoinPoolHelper.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.ttl.threadpool;
 
-import javax.annotation.Nullable;
+import edu.umd.cs.findbugs.annotations.Nullable;
+
 import java.util.concurrent.ForkJoinPool;
 import java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory;
 

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/transformlet/JavassistTransformlet.java
Patch:
@@ -1,9 +1,9 @@
 package com.alibaba.ttl.threadpool.agent.internal.transformlet;
 
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javassist.CannotCompileException;
 import javassist.NotFoundException;
 
-import javax.annotation.Nonnull;
 import java.io.IOException;
 
 /**
@@ -13,5 +13,5 @@
  * @since 2.5.1
  */
 public interface JavassistTransformlet {
-    void doTransform(@Nonnull ClassInfo classInfo) throws IOException, NotFoundException, CannotCompileException;
+    void doTransform(@NonNull ClassInfo classInfo) throws IOException, NotFoundException, CannotCompileException;
 }

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/transformlet/impl/TtlTimerTaskTransformlet.java
Patch:
@@ -3,9 +3,9 @@
 import com.alibaba.ttl.threadpool.agent.internal.logging.Logger;
 import com.alibaba.ttl.threadpool.agent.internal.transformlet.ClassInfo;
 import com.alibaba.ttl.threadpool.agent.internal.transformlet.JavassistTransformlet;
+import edu.umd.cs.findbugs.annotations.NonNull;
 import javassist.*;
 
-import javax.annotation.Nonnull;
 import java.io.IOException;
 
 import static com.alibaba.ttl.threadpool.agent.internal.transformlet.impl.Utils.doTryFinallyForMethod;
@@ -26,7 +26,7 @@ public class TtlTimerTaskTransformlet implements JavassistTransformlet {
     private static final String RUN_METHOD_NAME = "run";
 
     @Override
-    public void doTransform(@Nonnull final ClassInfo classInfo) throws IOException, NotFoundException, CannotCompileException {
+    public void doTransform(@NonNull final ClassInfo classInfo) throws IOException, NotFoundException, CannotCompileException {
         if (TIMER_TASK_CLASS_NAME.equals(classInfo.getClassName())) return; // No need transform TimerTask class
 
         final CtClass clazz = classInfo.getCtClass();
@@ -52,7 +52,7 @@ public void doTransform(@Nonnull final ClassInfo classInfo) throws IOException,
     /**
      * @see Utils#doCaptureWhenNotTtlEnhanced(java.lang.Object)
      */
-    private void updateTimerTaskClass(@Nonnull final CtClass clazz) throws CannotCompileException, NotFoundException {
+    private void updateTimerTaskClass(@NonNull final CtClass clazz) throws CannotCompileException, NotFoundException {
         final String className = clazz.getName();
 
         // add new field

File: src/main/java/com/alibaba/ttl/TransmittableThreadLocal.java
Patch:
@@ -180,7 +180,7 @@ private static void doExecuteCallback(boolean isBefore) {
      */
     static void dump(@Nullable String title) {
         if (title != null && title.length() > 0) {
-            System.out.printf("Start TransmittableThreadLocal[%s] Dump...\n", title);
+            System.out.printf("Start TransmittableThreadLocal[%s] Dump...%n", title);
         } else {
             System.out.println("Start TransmittableThreadLocal Dump...");
         }

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/transformlet/impl/TtlExecutorTransformlet.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.ttl.threadpool.agent.internal.logging.Logger;
 import com.alibaba.ttl.threadpool.agent.internal.transformlet.ClassInfo;
 import com.alibaba.ttl.threadpool.agent.internal.transformlet.JavassistTransformlet;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import javassist.*;
 
 import javax.annotation.Nonnull;
@@ -86,6 +87,7 @@ public void doTransform(@Nonnull final ClassInfo classInfo) throws IOException,
      * @see com.alibaba.ttl.TtlCallable#get(Callable, boolean, boolean)
      * @see com.alibaba.ttl.threadpool.agent.internal.transformlet.impl.Utils#setAutoWrapperAttachment(Object)
      */
+    @SuppressFBWarnings("VA_FORMAT_STRING_USES_NEWLINE") // [ERROR] Format string should use %n rather than \n
     private void updateSubmitMethodsOfExecutorClass_decorateToTtlWrapperAndSetAutoWrapperAttachment(@Nonnull final CtMethod method) throws NotFoundException, CannotCompileException {
         final int modifiers = method.getModifiers();
         if (!Modifier.isPublic(modifiers) || Modifier.isStatic(modifiers)) return;

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/transformlet/impl/TtlForkJoinTransformlet.java
Patch:
@@ -47,6 +47,9 @@ public byte[] doTransform(String className, byte[] classFileBuffer, ClassLoader
         return null;
     }
 
+    /**
+     * @see Utils#doCaptureWhenNotTtlEnhanced(java.lang.Object)
+     */
     private void updateForkJoinTaskClass(final CtClass clazz) throws CannotCompileException, NotFoundException {
         final String className = clazz.getName();
 

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/transformlet/impl/TtlTimerTaskTransformlet.java
Patch:
@@ -47,6 +47,9 @@ public byte[] doTransform(String className, byte[] classFileBuffer, ClassLoader
         return clazz.toBytecode();
     }
 
+    /**
+     * @see Utils#doCaptureWhenNotTtlEnhanced(java.lang.Object)
+     */
     private void updateTimerTaskClass(final CtClass clazz) throws CannotCompileException, NotFoundException {
         final String className = clazz.getName();
 

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlAgent.java
Patch:
@@ -45,7 +45,7 @@
  * @author Jerry Lee (oldratlee at gmail dot com)
  * @see Instrumentation
  * @see <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/instrument/package-summary.html">The mechanism for instrumentation</a>
- * @see <a href="https://docs.oracle.com/javase/10/docs/technotes/guides/jar/jar.html#JAR_Manifest">JAR File Specification - JAR Manifest</a>
+ * @see <a href="https://docs.oracle.com/javase/10/docs/specs/jar/jar.html#jar-manifest">JAR File Specification - JAR Manifest</a>
  * @see <a href="https://docs.oracle.com/javase/tutorial/deployment/jar/manifestindex.html">Working with Manifest Files - The Java™ TutorialsHide</a>
  * @since 0.9.0
  */

File: src/main/java/com/alibaba/ttl/threadpool/agent/internal/logging/Logger.java
Patch:
@@ -61,7 +61,7 @@ private static class StdErrorLogger extends Logger {
         public void log(Level level, String msg, Throwable thrown) {
             if (level == Level.SEVERE) {
                 final String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
-                System.err.printf("%s %s [%s] %s: %s%n", time, Thread.currentThread().getName(), logClass.getSimpleName(), level, msg);
+                System.err.printf("%s %s [%s] %s: %s%n", time, level, Thread.currentThread().getName(), logClass.getSimpleName(), msg);
                 if (thrown != null) thrown.printStackTrace();
             }
         }
@@ -75,7 +75,7 @@ private static class StdOutLogger extends Logger {
         @Override
         public void log(Level level, String msg, Throwable thrown) {
             final String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
-            System.out.printf("%s %s [%s] %s: %s%n", time, Thread.currentThread().getName(), logClass.getSimpleName(), level, msg);
+            System.out.printf("%s %s [%s] %s: %s%n", time, level, Thread.currentThread().getName(), logClass.getSimpleName(), msg);
             if (thrown != null) thrown.printStackTrace(System.out);
         }
     }

File: src/main/java/com/alibaba/ttl/threadpool/agent/transformlet/TtlExecutorTransformlet.java
Patch:
@@ -10,7 +10,7 @@
 import java.lang.reflect.Modifier;
 import java.util.HashSet;
 import java.util.Set;
-import java.util.logging.Logger;
+import com.alibaba.ttl.threadpool.agent.internal.logging.Logger;
 
 import static com.alibaba.ttl.threadpool.agent.transformlet.Utils.signatureOfMethod;
 
@@ -27,7 +27,7 @@
  * @since 2.5.1
  */
 public class TtlExecutorTransformlet implements JavassistTransformlet {
-    private static final Logger logger = Logger.getLogger(TtlExecutorTransformlet.class.getName());
+    private static final Logger logger = Logger.getLogger(TtlExecutorTransformlet.class);
 
     private static final String TTL_RUNNABLE_CLASS_NAME = "com.alibaba.ttl.TtlRunnable";
     private static final String TTL_CALLABLE_CLASS_NAME = "com.alibaba.ttl.TtlCallable";

File: src/main/java/com/alibaba/ttl/threadpool/agent/transformlet/TtlForkJoinTransformlet.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Modifier;
-import java.util.logging.Logger;
+import com.alibaba.ttl.threadpool.agent.internal.logging.Logger;
 
 import static com.alibaba.ttl.threadpool.agent.transformlet.Utils.signatureOfMethod;
 
@@ -19,7 +19,7 @@
  * @since 2.5.1
  */
 public class TtlForkJoinTransformlet implements JavassistTransformlet {
-    private static final Logger logger = Logger.getLogger(TtlForkJoinTransformlet.class.getName());
+    private static final Logger logger = Logger.getLogger(TtlForkJoinTransformlet.class);
     private static final String FORK_JOIN_TASK_CLASS_NAME = "java.util.concurrent.ForkJoinTask";
     private static final String TTL_RECURSIVE_ACTION_CLASS_NAME = "com.alibaba.ttl.TtlRecursiveAction";
     private static final String TTL_RECURSIVE_TASK_CLASS_NAME = "com.alibaba.ttl.TtlRecursiveTask";

File: src/test/java/com/alibaba/demo/agent/YourXxxAgent.java
Patch:
@@ -11,7 +11,7 @@
 public final class YourXxxAgent {
     private static final Logger logger = Logger.getLogger(YourXxxAgent.class.getName());
 
-    public static void premain(String agentArgs, Instrumentation inst) {
+    public static void premain(String agentArgs, Instrumentation inst) throws Exception {
         TtlAgent.premain(agentArgs, inst); // add TTL Transformer
 
         // add your Transformer

File: src/main/java/com/alibaba/ttl/TtlTimerTask.java
Patch:
@@ -109,6 +109,6 @@ public static TtlTimerTask get(TimerTask timerTask, boolean releaseTtlValueRefer
                 throw new IllegalStateException("Already TtlTimerTask!");
             }
         }
-        return new TtlTimerTask(timerTask, false);
+        return new TtlTimerTask(timerTask, releaseTtlValueReferenceAfterRun);
     }
 }

File: src/main/java/com/alibaba/ttl/threadpool/agent/TtlTransformer.java
Patch:
@@ -96,7 +96,9 @@ private static String toClassName(String classFile) {
 
     private static CtClass getCtClass(byte[] classFileBuffer, ClassLoader classLoader) throws IOException {
         ClassPool classPool = new ClassPool(true);
-        if (null != classLoader) {
+        if (classLoader == null) {
+            classPool.appendClassPath(new LoaderClassPath(ClassLoader.getSystemClassLoader()));
+        } else {
             classPool.appendClassPath(new LoaderClassPath(classLoader));
         }
 

File: src/main/java/com/alibaba/ttl/TransmittableThreadLocal.java
Patch:
@@ -91,8 +91,8 @@ T copyValue() {
         return copy(get());
     }
 
-    static ThreadLocal<Map<TransmittableThreadLocal<?>, ?>> holder =
-            new ThreadLocal<Map<TransmittableThreadLocal<?>, ?>>() {
+    static InheritableThreadLocal<Map<TransmittableThreadLocal<?>, ?>> holder =
+            new InheritableThreadLocal<Map<TransmittableThreadLocal<?>, ?>>() {
                 @Override
                 protected Map<TransmittableThreadLocal<?>, ?> initialValue() {
                     return new WeakHashMap<TransmittableThreadLocal<?>, Object>();

File: src/test/java/com/alibaba/ttl/Utils.java
Patch:
@@ -86,7 +86,7 @@ public static <T> Map<String, Object> copied(ConcurrentMap<String, Transmittable
         return copiedContent;
     }
 
-    public static void assertttlInstances(Map<String, Object> copied, String... asserts) {
+    public static void assertTtlInstances(Map<String, Object> copied, String... asserts) {
         if (asserts.length % 2 != 0) {
             throw new IllegalStateException("should even count!");
         }

File: src/test/java/com/alibaba/ttl/demo/distributed_tracer/DistributedTracerUseDemo.java
Patch:
@@ -61,9 +61,9 @@ protected DtTransferInfo childValue(DtTransferInfo parentValue) {
         */
 
         @Override
-        protected DtTransferInfo copy(DtTransferInfo parentValue) {
+        protected void beforeExecute() {
+            super.beforeExecute();
             increaseSpanIdRefCounter();
-            return super.childValue(parentValue);
         }
 
         @Override

File: src/test/java/com/alibaba/ttl/Utils.java
Patch:
@@ -65,7 +65,7 @@ public static <T> void print(ConcurrentMap<String, TransmittableThreadLocal<T>>
         for (Map.Entry<String, TransmittableThreadLocal<T>> entry : ttlInstances.entrySet()) {
             String key = entry.getKey();
             T value = entry.getValue().get();
-            System.out.printf("Key %s, value: %s\n", key, value);
+            System.out.printf("Key %s, value: %s%n", key, value);
         }
     }
 

File: src/test/java/com/alibaba/ttl/demo/distributed_tracer/DistributedTracerUseDemo_WeakReferenceInsteadOfRefCounter.java
Patch:
@@ -58,7 +58,7 @@ public String toString() {
         // Output GC operation
         @Override
         protected void finalize() throws Throwable {
-            System.out.printf("DEBUG: gc DtTransferInfo traceId %s in thread %s: %s\n",
+            System.out.printf("DEBUG: gc DtTransferInfo traceId %s in thread %s: %s%n",
                     traceId, Thread.currentThread().getName(), this);
             super.finalize();
         }
@@ -119,7 +119,7 @@ static void rpcInvokeIn() {
         ////////////////////////////////////////////////
         // DistributedTracer Framework Code
         ////////////////////////////////////////////////
-        System.out.printf("Finished Rpc call %s with span %s.\n", traceId, leafSpanIdInfo);
+        System.out.printf("Finished Rpc call %s with span %s.%n", traceId, leafSpanIdInfo);
 
         // release context in ThreadLocal, avoid to be hold by thread, GC friendly.
         transferInfo.remove();
@@ -171,6 +171,6 @@ static void invokeServerWithRpc(String server) {
 
         // Do Rpc
         // ...
-        System.out.printf("Do Rpc invocation to server %s with %s\n", server, rpcContext);
+        System.out.printf("Do Rpc invocation to server %s with %s%n", server, rpcContext);
     }
 }

File: src/test/java/com/alibaba/ttl/perf/memoryleak/NoMemoryLeak_ThreadLocal_NoRemove.java
Patch:
@@ -13,7 +13,7 @@ public static void main(String[] args) throws Exception {
             threadLocal.set(Utils.getRandomString());
 
             if (counter % 1000 == 0)
-                System.out.printf("%05dK\n", counter / 1000);
+                System.out.printf("%05dK%n", counter / 1000);
             counter++;
         }
     }

File: src/test/java/com/alibaba/ttl/perf/memoryleak/NoMemoryLeak_TransmittableThreadLocal_NoRemove.java
Patch:
@@ -14,7 +14,7 @@ public static void main(String[] args) throws Exception {
             threadLocal.set(Utils.getRandomString());
 
             if (counter % 1000 == 0)
-                System.out.printf("%05dK\n", counter / 1000);
+                System.out.printf("%05dK%n", counter / 1000);
             counter++;
         }
     }

File: src/main/java/com/alibaba/mtc/MtContextCallable.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map;
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.Collections;
 
 /**
  * {@link MtContextCallable} decorate {@link Callable}, so as to get {@link MtContextThreadLocal}
@@ -128,7 +129,7 @@ public static <T> List<MtContextCallable<T>> gets(Collection<? extends Callable<
      */
     public static <T> List<MtContextCallable<T>> gets(Collection<? extends Callable<T>> tasks, boolean releaseMtContextAfterCall) {
         if (null == tasks) {
-            return null;
+            return Collections.emptyList();
         }
         List<MtContextCallable<T>> copy = new ArrayList<MtContextCallable<T>>();
         for (Callable<T> task : tasks) {
@@ -147,7 +148,7 @@ public static <T> List<MtContextCallable<T>> gets(Collection<? extends Callable<
      */
     public static <T> List<MtContextCallable<T>> gets(Collection<? extends Callable<T>> tasks, boolean releaseMtContextAfterCall, boolean idempotent) {
         if (null == tasks) {
-            return null;
+            return Collections.emptyList();
         }
         List<MtContextCallable<T>> copy = new ArrayList<MtContextCallable<T>>();
         for (Callable<T> task : tasks) {

File: src/main/java/com/alibaba/mtc/MtContextRunnable.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.Collections;
 
 /**
  * {@link MtContextRunnable} decorate {@link Runnable}, so as to get {@link MtContextThreadLocal}
@@ -132,7 +133,7 @@ public static List<MtContextRunnable> gets(Collection<? extends Runnable> tasks)
      */
     public static List<MtContextRunnable> gets(Collection<? extends Runnable> tasks, boolean releaseMtContextAfterRun) {
         if (null == tasks) {
-            return null;
+            return Collections.emptyList();
         }
         List<MtContextRunnable> copy = new ArrayList<MtContextRunnable>();
         for (Runnable task : tasks) {
@@ -153,7 +154,7 @@ public static List<MtContextRunnable> gets(Collection<? extends Runnable> tasks,
      */
     public static List<MtContextRunnable> gets(Collection<? extends Runnable> tasks, boolean releaseMtContextAfterRun, boolean idempotent) {
         if (null == tasks) {
-            return null;
+            return Collections.emptyList();
         }
         List<MtContextRunnable> copy = new ArrayList<MtContextRunnable>();
         for (Runnable task : tasks) {

File: src/main/java/com/alibaba/mtc/threadpool/agent/MtContextTransformer.java
Patch:
@@ -37,6 +37,7 @@ public class MtContextTransformer implements ClassFileTransformer {
     private static final String SCHEDULER_CLASS_FILE = "java.util.concurrent.ScheduledThreadPoolExecutor".replace('.', '/');
 
     private static final String TIMER_TASK_CLASS_FILE = "java.util.TimerTask".replace('.', '/');
+    private static final byte[] EMPTY_BYTE_ARRAY = {};
 
     private static String toClassName(String classFile) {
         return classFile.replace('/', '.');
@@ -65,7 +66,7 @@ public byte[] transform(ClassLoader loader, String classFile, Class<?> classBein
                     if (TIMER_TASK_CLASS_FILE.equals(name)) {
                         logger.info("Transforming class " + className);
                         // FIXME add code here
-                        return null;
+                        return EMPTY_BYTE_ARRAY;
                     }
                 }
             }
@@ -74,7 +75,7 @@ public byte[] transform(ClassLoader loader, String classFile, Class<?> classBein
             logger.severe(msg);
             throw new IllegalStateException(msg, t);
         }
-        return null;
+        return EMPTY_BYTE_ARRAY;
     }
 
     private CtClass getCtClass(byte[] classFileBuffer, ClassLoader classLoader) throws IOException {

File: src/test/java/com/alibaba/mtc/MtContextCallableTest.java
Patch:
@@ -106,7 +106,7 @@ public void test_MtContextCallable_withExecutorService() throws Exception {
     }
 
     @Test
-    public void test_testRemove() throws Exception {
+    public void test_removeSameAsNotSet() throws Exception {
         ConcurrentMap<String, MtContextThreadLocal<String>> mtContexts = createTestMtContexts();
         mtContexts.get(PARENT_UNMODIFIED_IN_CHILD).remove();
 

File: src/test/java/com/alibaba/mtc/testmodel/DeepCopyFooMtContextThreadLocal.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * @author Jerry Lee (oldratlee at gmail dot com)
  */
-public class FooMtContextThreadLocal extends MtContextThreadLocal<FooPojo> {
+public class DeepCopyFooMtContextThreadLocal extends MtContextThreadLocal<FooPojo> {
     @Override
     protected FooPojo copy(FooPojo parentValue) {
         if (parentValue == null) return null;

File: src/test/java/com/alibaba/mtc/testmodel/FooTask.java
Patch:
@@ -28,7 +28,7 @@ public void run() {
             System.out.println();
 
             // Add new
-            MtContextThreadLocal<FooPojo> child = new FooMtContextThreadLocal();
+            MtContextThreadLocal<FooPojo> child = new DeepCopyFooMtContextThreadLocal();
             child.set(new FooPojo(Utils.CHILD  + value, 3));
             mtContexts.put(Utils.CHILD + value, child);
 

File: src/test/java/com/alibaba/mtc/MtContextCallableTest.java
Patch:
@@ -65,16 +65,14 @@ public void test_MtContextCallable_inSameThread() throws Exception {
         assertMtContext(call.copied,
                 PARENT_UNMODIFIED_IN_CHILD, PARENT_UNMODIFIED_IN_CHILD,
                 PARENT_MODIFIED_IN_CHILD + 1, PARENT_MODIFIED_IN_CHILD,
-                PARENT_AFTER_CREATE_MTC_TASK, PARENT_AFTER_CREATE_MTC_TASK, // same thread, parent is available from task!
                 CHILD + 1, CHILD + 1
         );
 
         // child do not effect parent
         assertMtContext(copied(mtContexts),
                 PARENT_UNMODIFIED_IN_CHILD, PARENT_UNMODIFIED_IN_CHILD,
                 PARENT_MODIFIED_IN_CHILD, PARENT_MODIFIED_IN_CHILD, // restored after call!
-                PARENT_AFTER_CREATE_MTC_TASK, PARENT_AFTER_CREATE_MTC_TASK,
-                CHILD + 1, CHILD + 1 // same thread, task set is available from parent
+                PARENT_AFTER_CREATE_MTC_TASK, PARENT_AFTER_CREATE_MTC_TASK
         );
     }
 

File: src/test/java/com/alibaba/mtc/MtContextRunnableTest.java
Patch:
@@ -68,16 +68,14 @@ public void test_MtContextRunnable_inSameThread() throws Exception {
         assertMtContext(task.copied,
                 PARENT_UNMODIFIED_IN_CHILD, PARENT_UNMODIFIED_IN_CHILD,
                 PARENT_MODIFIED_IN_CHILD + "1", PARENT_MODIFIED_IN_CHILD,
-                PARENT_AFTER_CREATE_MTC_TASK, PARENT_AFTER_CREATE_MTC_TASK, // same thread, parent is available from task
                 CHILD + "1", CHILD + "1"
         );
 
         // child do not effect parent
         assertMtContext(copied(mtContexts),
                 PARENT_UNMODIFIED_IN_CHILD, PARENT_UNMODIFIED_IN_CHILD,
                 PARENT_MODIFIED_IN_CHILD, PARENT_MODIFIED_IN_CHILD, // restored after call!
-                PARENT_AFTER_CREATE_MTC_TASK, PARENT_AFTER_CREATE_MTC_TASK,
-                CHILD + "1", CHILD + "1" // same thread, task set is available from parent
+                PARENT_AFTER_CREATE_MTC_TASK, PARENT_AFTER_CREATE_MTC_TASK
         );
     }
 

File: src/main/java/com/alibaba/mtc/threadpool/agent/MtContextTransformer.java
Patch:
@@ -115,11 +115,11 @@ static void updateMethod(CtClass clazz, CtMethod method) throws NotFoundExceptio
         for (int i = 0; i < parameterTypes.length; i++) {
             CtClass paraType = parameterTypes[i];
             if (RUNNABLE_CLASS_NAME.equals(paraType.getName())) {
-                String code = String.format("$%d = %s.get($%d);", i + 1, MT_CONTEXT_RUNNABLE_CLASS_NAME, i + 1);
+                String code = String.format("$%d = %s.get($%d, false, true);", i + 1, MT_CONTEXT_RUNNABLE_CLASS_NAME, i + 1);
                 logger.info("insert code before method " + method + " of class " + method.getDeclaringClass().getName() + ": " + code);
                 insertCode.append(code);
             } else if (CALLABLE_CLASS_NAME.equals(paraType.getName())) {
-                String code = String.format("$%d = %s.get($%d);", i + 1, MT_CONTEXT_CALLABLE_CLASS_NAME, i + 1);
+                String code = String.format("$%d = %s.get($%d, false, true);", i + 1, MT_CONTEXT_CALLABLE_CLASS_NAME, i + 1);
                 logger.info("insert code before method " + method + " of class " + method.getDeclaringClass().getName() + ": " + code);
                 insertCode.append(code);
             }

File: src/test/java/com/alibaba/mtc/MtContextCallableTest.java
Patch:
@@ -206,12 +206,12 @@ public void test_get_nullInput() throws Exception {
 
     @Test
     public void test_gets() throws Exception {
-        Call call1 = new Call("1", null);
-        Call call2 = new Call("1", null);
+        Callable<String> call1 = new Call("1", null);
+        Callable<String> call2 = new Call("1", null);
         Callable<String> call3 = new Call("1", null);
 
         List<MtContextCallable<String>> callList = MtContextCallable.gets(
-                Arrays.<Callable<String>>asList(call1, call2, null, call3));
+                Arrays.asList(call1, call2, null, call3));
 
         assertEquals(4, callList.size());
         assertThat(callList.get(0), instanceOf(MtContextCallable.class));

File: src/main/java/com/alibaba/mtc/MtContextCallable.java
Patch:
@@ -84,7 +84,7 @@ public static <T> MtContextCallable<T> get(Callable<T> callable, boolean release
         }
 
         if (callable instanceof MtContextCallable) { // avoid redundant decoration, and ensure idempotency
-            return (MtContextCallable<T>) callable;
+            throw new IllegalStateException("Already MtContextCallable!");
         }
         return new MtContextCallable<T>(callable, releaseMtContextAfterCall);
     }

File: src/main/java/com/alibaba/mtc/MtContextRunnable.java
Patch:
@@ -80,7 +80,7 @@ public static MtContextRunnable get(Runnable runnable, boolean releaseMtContextA
         }
 
         if (runnable instanceof MtContextRunnable) { // avoid redundant decoration, and ensure idempotency
-            return (MtContextRunnable) runnable;
+            throw new IllegalStateException("Already MtContextRunnable!");
         }
         return new MtContextRunnable(runnable, releaseMtContextAfterRun);
     }

File: src/main/java/com/alibaba/mtc/MtContextTimerTask.java
Patch:
@@ -67,7 +67,7 @@ public static MtContextTimerTask get(TimerTask timerTask) {
         }
 
         if (timerTask instanceof MtContextTimerTask) { // avoid redundant decoration, and ensure idempotency
-            return (MtContextTimerTask) timerTask;
+            throw new IllegalStateException("Already MtContextTimerTask!");
         }
         return new MtContextTimerTask(timerTask);
     }

File: src/main/java/com/alibaba/mtc/MtContextCallable.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
- * {@link MtContextCallable} decorate {@link Callable}, so as to get @{@link MtContextThreadLocal}
+ * {@link MtContextCallable} decorate {@link Callable}, so as to get {@link MtContextThreadLocal}
  * and transmit it to the time of {@link Callable} execution, needed when use {@link Callable} to thread pool.
  * <p/>
  * Use factory method {@link #get(Callable)} to get decorated instance.

File: src/main/java/com/alibaba/mtc/MtContextRunnable.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
- * {@link MtContextRunnable} decorate {@link Runnable}, so as to get @{@link MtContextThreadLocal}
+ * {@link MtContextRunnable} decorate {@link Runnable}, so as to get {@link MtContextThreadLocal}
  * and transmit it to the time of {@link Runnable} execution, needed when use {@link Runnable} to thread pool.
  * <p/>
  * Use factory method {@link #get(Runnable)} to create instance.

File: src/main/java/com/alibaba/mtc/MtContextCallable.java
Patch:
@@ -67,7 +67,7 @@ public static <T> MtContextCallable<T> get(Callable<T> callable) {
     /**
      * wrapper input {@link Callable} Collection to {@link MtContextCallable} Collection.
      */
-    public static <T, C extends Collection<? extends Callable<T>>> List<MtContextCallable<T>> gets(C tasks) {
+    public static <T> List<MtContextCallable<T>> gets(Collection<? extends Callable<T>> tasks) {
         if (null == tasks) {
             return null;
         }

File: src/main/java/com/alibaba/mtc/MtContextRunnable.java
Patch:
@@ -68,7 +68,7 @@ public static MtContextRunnable get(Runnable runnable) {
     /**
      * wrapper input {@link Runnable} Collection to {@link MtContextRunnable} Collection.
      */
-    public static <C extends Collection<? extends Runnable>> List<MtContextRunnable> gets(C tasks) {
+    public static List<MtContextRunnable> gets(Collection<? extends Runnable> tasks) {
         if (null == tasks) {
             return null;
         }

File: src/test/java/com/alibaba/mtc/MtContextCallableTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Callable;
@@ -168,7 +169,7 @@ public void test_gets() throws Exception {
         Call call2 = new Call("1", null);
         Callable<String> call3 = MtContextCallable.get(call1);
 
-        List<MtContextCallable<String>> callList = MtContextCallable.gets(Arrays.<Callable>asList(call1, call2, null, call3));
+        List<MtContextCallable<String>> callList = MtContextCallable.gets(Arrays.<Callable<String>>asList(call1, call2, null, call3));
 
         assertThat(callList.get(0), instanceOf(MtContextCallable.class));
         assertThat(callList.get(1), instanceOf(MtContextCallable.class));

File: src/main/java/com/alibaba/mtc/MtContextCallable.java
Patch:
@@ -67,7 +67,7 @@ public static <T> MtContextCallable<T> get(Callable<T> callable) {
     /**
      * wrapper input {@link Callable} Collection to {@link MtContextCallable} Collection.
      */
-    public static <T> List<MtContextCallable<T>> gets(Collection<? extends Callable<T>> tasks) {
+    public static <T, C extends Collection<? extends Callable<T>>> List<MtContextCallable<T>> gets(C tasks) {
         if (null == tasks) {
             return null;
         }

File: src/main/java/com/alibaba/mtc/MtContextRunnable.java
Patch:
@@ -68,7 +68,7 @@ public static MtContextRunnable get(Runnable runnable) {
     /**
      * wrapper input {@link Runnable} Collection to {@link MtContextRunnable} Collection.
      */
-    public static List<MtContextRunnable> gets(Collection<? extends Runnable> tasks) {
+    public static <C extends Collection<? extends Runnable>> List<MtContextRunnable> gets(C tasks) {
         if (null == tasks) {
             return null;
         }

File: src/main/java/com/oldratlee/mtc/threadpool/agent/MtContextTransformer.java
Patch:
@@ -86,11 +86,11 @@ static void updateMethod(CtMethod method) throws NotFoundException, CannotCompil
             CtClass paraType = parameterTypes[i];
             if (RUNNABLE_CLASS_NAME.equals(paraType.getName())) {
                 String code = String.format("$%d = %s.get($%d);", i + 1, MTCONTEXT_RUNNABLE_CLASS_NAME, i + 1);
-                logger.debug("insert code before method {}: ", method.toString() ,code);
+                logger.debug("insert code before method {}: {}", method.toString() ,code);
                 insertCode.append(code);
             } else if (CALLABLE_CLASS_NAME.equals(paraType.getName())) {
                 String code = String.format("$%d = %s.get($%d);", i + 1, MTCONTEXT_CALLABLE_CLASS_NAME, i + 1);
-                logger.debug("insert code before method {}: ", method.toString() ,code);
+                logger.debug("insert code before method {}: {}", method.toString() ,code);
                 insertCode.append(code);
             }
         }

File: src/main/java/com/oldratlee/mtc/threadpool/ExecutorServiceMtcWrapper.java
Patch:
@@ -74,16 +74,16 @@ public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) th
 
     @Override
     public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException {
-        return invokeAll(MtContextCallable.gets(tasks), timeout, unit);
+        return executorService.invokeAll(MtContextCallable.gets(tasks), timeout, unit);
     }
 
     @Override
     public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException {
-        return invokeAny(MtContextCallable.gets(tasks));
+        return executorService.invokeAny(MtContextCallable.gets(tasks));
     }
 
     @Override
     public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
-        return invokeAny(MtContextCallable.gets(tasks), timeout, unit);
+        return executorService.invokeAny(MtContextCallable.gets(tasks), timeout, unit);
     }
 }

