File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerRouter.java
Patch:
@@ -149,7 +149,9 @@ public static Asset getAssetStream(AssetManager am, String asset) {
         }
     }
 
-    static Hashtable<String, String> mContentTypes = new Hashtable<String, String>();
+    static Hashtable<String, String> mContentTypes = new Hashtable<>();
+
+    static
     {
         mContentTypes.put("js", "application/javascript");
         mContentTypes.put("json", "application/json");

File: AndroidAsync/src/com/koushikdutta/async/stream/FileDataSink.java
Patch:
@@ -21,6 +21,7 @@ public FileDataSink(AsyncServer server, File file) {
     public OutputStream getOutputStream() throws IOException {
         OutputStream ret = super.getOutputStream();
         if (ret == null) {
+            file.getParentFile().mkdirs();
             ret = new FileOutputStream(file);
             setOutputStream(ret);
         }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -192,6 +192,9 @@ protected void onEnd() {
 
                 @Override
                 public void onCompleted(Exception e) {
+                    if (isSwitchingProtocols(res))
+                        return;
+
                     requestComplete = true;
                     super.onCompleted(e);
                     // no http pipelining, gc trashing if the socket dies

File: AndroidAsync/src/com/koushikdutta/async/http/Multimap.java
Patch:
@@ -97,9 +97,9 @@ public static Multimap parse(String value, String delimiter, String assigner, bo
             String v = null;
             if (pair.length > 1)
                 v = pair[1];
-            if (unquote && v != null && v.endsWith("\"") && v.startsWith("\""))
+            if (v != null && unquote && v.endsWith("\"") && v.startsWith("\""))
                 v = v.substring(1, v.length() - 1);
-            if (decoder != null) {
+            if (v != null && decoder != null) {
                 key = decoder.decode(key);
                 v = decoder.decode(v);
             }

File: AndroidAsync/test/src/com/koushikdutta/async/test/WebSocketTests.java
Patch:
@@ -53,7 +53,7 @@ public void onStringAvailable(String s) {
     public void testWebSocket() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
-        AsyncHttpClient.getDefaultInstance().websocket("http://localhost:5000/ws", null, new WebSocketConnectCallback() {
+        AsyncHttpClient.getDefaultInstance().websocket("http://localhost:5000/ws", (String)null, new WebSocketConnectCallback() {
             @Override
             public void onCompleted(Exception ex, WebSocket webSocket) {
                 webSocket.send("hello");

File: AndroidAsync/src/com/koushikdutta/async/ChannelWrapper.java
Patch:
@@ -1,6 +1,7 @@
 package com.koushikdutta.async;
 
 import java.io.IOException;
+import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ReadableByteChannel;
@@ -46,5 +47,6 @@ public void close() throws IOException {
     }
     
     public abstract int getLocalPort();
+    public abstract InetAddress getLocalAddress();
     public abstract Object getSocket();
 }

File: AndroidAsync/src/com/koushikdutta/async/stream/ByteBufferListInputStream.java
Patch:
@@ -18,7 +18,7 @@ public ByteBufferListInputStream(ByteBufferList bb) {
     public int read() throws IOException {
         if (bb.remaining() <= 0)
             return -1;
-        return bb.get();
+        return (int)bb.get() & 0x000000ff;
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/future/SimpleCancellable.java
Patch:
@@ -22,8 +22,7 @@ public boolean setComplete() {
                 return false;
             if (complete) {
                 // don't allow a Cancellable to complete twice...
-                assert false;
-                return true;
+                return false;
             }
             complete = true;
             parent = null;

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -80,11 +80,12 @@ public void onCompleted(Exception ex) {
                 }
                 try {
                     mParameters = Multimap.parseUrlEncoded(data.readString());
-                    completed.onCompleted(null);
                 }
                 catch (Exception e) {
                     completed.onCompleted(e);
+                    return;
                 }
+                completed.onCompleted(null);
             }
         });
     }

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -374,7 +374,7 @@ public String peekString() {
     // not doing toString as this is really nasty in the debugger...
     public String peekString(Charset charset) {
         if (charset == null)
-            charset = Charsets.US_ASCII;
+            charset = Charsets.UTF_8;
         StringBuilder builder = new StringBuilder();
         for (ByteBuffer bb: mBuffers) {
             byte[] bytes;

File: AndroidAsync/src/com/koushikdutta/async/future/FailCallback.java
Patch:
@@ -1,12 +1,11 @@
 package com.koushikdutta.async.future;
 
-public interface FailCallback<T> {
+public interface FailCallback {
     /**
      * Callback that is invoked when a future completes with an error.
      * The error should be rethrown, or a new value should be returned.
      * @param e
-     * @return
      * @throws Exception
      */
-    T fail(Exception e) throws Exception;
+    void fail(Exception e) throws Exception;
 }

File: AndroidAsync/src/com/koushikdutta/async/future/FailRecoverCallback.java
Patch:
@@ -1,6 +1,6 @@
 package com.koushikdutta.async.future;
 
-public interface FailFutureCallback<T> {
+public interface FailRecoverCallback<T> {
     /**
      * Callback that is invoked when a future completes with an error.
      * The error should be rethrown, or a new future value should be returned.

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -196,7 +196,7 @@ public Cancellable getSocket(final GetSocketData data) {
             Future<AsyncSocket> current = new SimpleFuture<>(new Exception("empty ip address list"));
             ArrayDeque<InetAddress> addresses = new ArrayDeque<>(Arrays.asList(from));
 
-            current = current.fail(e -> {
+            current = current.failRecover(e -> {
                 if (addresses.isEmpty())
                     throw e;
 

File: AndroidAsync/src/com/koushikdutta/async/future/HandlerFuture.java
Patch:
@@ -17,7 +17,7 @@ public HandlerFuture() {
     }
 
     @Override
-    public SimpleFuture<T> setCallback(final FutureCallback<T> callback) {
+    public void setCallback(final FutureCallback<T> callback) {
         FutureCallback<T> wrapped = new FutureCallback<T>() {
             @Override
             public void onCompleted(final Exception e, final T result) {
@@ -34,6 +34,6 @@ public void run() {
                 });
             }
         };
-        return super.setCallback(wrapped);
+        super.setCallback(wrapped);
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/ChannelWrapper.java
Patch:
@@ -1,7 +1,6 @@
 package com.koushikdutta.async;
 
 import java.io.IOException;
-import java.net.Socket;
 import java.nio.ByteBuffer;
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ReadableByteChannel;

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerRouter.java
Patch:
@@ -314,7 +314,7 @@ public RouteMatch route(String method, String path) {
         }
     }
 
-    Callback callback = new Callback();
+    private Callback callback = new Callback();
 
     public HttpServerRequestCallback getCallback() {
         return callback;

File: AndroidAsync/src/com/koushikdutta/async/http/Headers.java
Patch:
@@ -18,7 +18,9 @@ public Headers() {
     }
 
     public Headers(Map<String, List<String>> mm) {
-        map.putAll(mm);
+        for (String key: mm.keySet()) {
+            addAll(key, mm.get(key));
+        }
     }
 
     final Multimap map = new Multimap() {

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -369,7 +369,7 @@ public String peekString() {
     // not doing toString as this is really nasty in the debugger...
     public String peekString(Charset charset) {
         if (charset == null)
-            charset = Charsets.US_ASCII;
+            charset = Charsets.UTF_8;
         StringBuilder builder = new StringBuilder();
         for (ByteBuffer bb: mBuffers) {
             byte[] bytes;

File: AndroidAsync/src/com/koushikdutta/async/http/Protocol.java
Patch:
@@ -1,6 +1,7 @@
 package com.koushikdutta.async.http;
 
 import java.util.Hashtable;
+import java.util.Locale;
 
 /**
  * Protocols that OkHttp implements for <a
@@ -87,7 +88,7 @@ public boolean needsSpdyConnection() {
     public static Protocol get(String protocol) {
         if (protocol == null)
             return null;
-        return protocols.get(protocol.toLowerCase());
+        return protocols.get(protocol.toLowerCase(Locale.US));
     }
 
     /**

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseHeaders.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
@@ -160,7 +161,7 @@ public ResponseHeaders(Uri uri, RawHeaders headers) {
                     varyFields = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
                 }
                 for (String varyField : value.split(",")) {
-                    varyFields.add(varyField.trim().toLowerCase());
+                    varyFields.add(varyField.trim().toLowerCase(Locale.US));
                 }
             } else if ("Content-Encoding".equalsIgnoreCase(fieldName)) {
                 contentEncoding = value;

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.List;
+import java.util.Locale;
 
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLEngine;
@@ -279,7 +280,7 @@ private void newSocket(GetSocketData data, final AsyncSpdyConnection connection,
             if (SpdyTransport.isProhibitedHeader(connection.protocol, key))
                 continue;
             for (String value: mm.get(key)) {
-                headers.add(new Header(key.toLowerCase(), value));
+                headers.add(new Header(key.toLowerCase(Locale.US), value));
             }
         }
 
@@ -439,4 +440,4 @@ public void onRequestSent(OnRequestSentData data) {
         if (data.request.getBody() != null)
             data.response.sink().end();
     }
-}
\ No newline at end of file
+}

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyTransport.java
Patch:
@@ -20,6 +20,7 @@
 import com.koushikdutta.async.http.Protocol;
 
 import java.util.List;
+import java.util.Locale;
 
 
 final class SpdyTransport {
@@ -45,9 +46,9 @@ final class SpdyTransport {
   /** When true, this header should not be emitted or consumed. */
   static boolean isProhibitedHeader(Protocol protocol, String name) {
     if (protocol == Protocol.SPDY_3) {
-      return SPDY_3_PROHIBITED_HEADERS.contains(name.toLowerCase());
+      return SPDY_3_PROHIBITED_HEADERS.contains(name.toLowerCase(Locale.US));
     } else if (protocol == Protocol.HTTP_2) {
-      return HTTP_2_PROHIBITED_HEADERS.contains(name.toLowerCase());
+      return HTTP_2_PROHIBITED_HEADERS.contains(name.toLowerCase(Locale.US));
     } else {
       throw new AssertionError(protocol);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/Protocol.java
Patch:
@@ -1,6 +1,7 @@
 package com.koushikdutta.async.http;
 
 import java.util.Hashtable;
+import java.util.Locale;
 
 /**
  * Protocols that OkHttp implements for <a
@@ -87,7 +88,7 @@ public boolean needsSpdyConnection() {
     public static Protocol get(String protocol) {
         if (protocol == null)
             return null;
-        return protocols.get(protocol.toLowerCase());
+        return protocols.get(protocol.toLowerCase(Locale.US));
     }
 
     /**

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseHeaders.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
@@ -160,7 +161,7 @@ public ResponseHeaders(Uri uri, RawHeaders headers) {
                     varyFields = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
                 }
                 for (String varyField : value.split(",")) {
-                    varyFields.add(varyField.trim().toLowerCase());
+                    varyFields.add(varyField.trim().toLowerCase(Locale.US));
                 }
             } else if ("Content-Encoding".equalsIgnoreCase(fieldName)) {
                 contentEncoding = value;

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.List;
+import java.util.Locale;
 
 import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLEngine;
@@ -279,7 +280,7 @@ private void newSocket(GetSocketData data, final AsyncSpdyConnection connection,
             if (SpdyTransport.isProhibitedHeader(connection.protocol, key))
                 continue;
             for (String value: mm.get(key)) {
-                headers.add(new Header(key.toLowerCase(), value));
+                headers.add(new Header(key.toLowerCase(Locale.US), value));
             }
         }
 
@@ -439,4 +440,4 @@ public void onRequestSent(OnRequestSentData data) {
         if (data.request.getBody() != null)
             data.response.sink().end();
     }
-}
\ No newline at end of file
+}

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyTransport.java
Patch:
@@ -20,6 +20,7 @@
 import com.koushikdutta.async.http.Protocol;
 
 import java.util.List;
+import java.util.Locale;
 
 
 final class SpdyTransport {
@@ -45,9 +46,9 @@ final class SpdyTransport {
   /** When true, this header should not be emitted or consumed. */
   static boolean isProhibitedHeader(Protocol protocol, String name) {
     if (protocol == Protocol.SPDY_3) {
-      return SPDY_3_PROHIBITED_HEADERS.contains(name.toLowerCase());
+      return SPDY_3_PROHIBITED_HEADERS.contains(name.toLowerCase(Locale.US));
     } else if (protocol == Protocol.HTTP_2) {
-      return HTTP_2_PROHIBITED_HEADERS.contains(name.toLowerCase());
+      return HTTP_2_PROHIBITED_HEADERS.contains(name.toLowerCase(Locale.US));
     } else {
       throw new AssertionError(protocol);
     }

File: AndroidAsync/src/com/koushikdutta/async/dns/Dns.java
Patch:
@@ -103,11 +103,11 @@ public static Future<DnsResponse> lookup(AsyncServer server, String host, final
             }
             else {
 //                System.out.println("multicast dns...");
-                dgram = AsyncServer.getDefault().openDatagram(new InetSocketAddress(5353), true);
+                dgram = AsyncServer.getDefault().openDatagram(new InetSocketAddress(0), true);
                 Field field = DatagramSocket.class.getDeclaredField("impl");
                 field.setAccessible(true);
                 Object impl = field.get(dgram.getSocket());
-                Method method = impl.getClass().getMethod("join", InetAddress.class);
+                Method method = impl.getClass().getDeclaredMethod("join", InetAddress.class);
                 method.setAccessible(true);
                 method.invoke(impl, InetAddress.getByName("224.0.0.251"));
                 ((DatagramSocket)dgram.getSocket()).setBroadcast(true);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -675,7 +675,8 @@ public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                 }
                 WebSocket ws = WebSocketImpl.finishHandshake(req.getHeaders(), response);
                 if (ws == null) {
-                    if (!ret.setComplete(new WebSocketHandshakeException("Unable to complete websocket handshake")))
+                    ex = new WebSocketHandshakeException("Unable to complete websocket handshake");
+                    if (!ret.setComplete(ex))
                         return;
                 }
                 else {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -688,7 +688,8 @@ public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                 }
                 WebSocket ws = WebSocketImpl.finishHandshake(req.getHeaders(), response);
                 if (ws == null) {
-                    if (!ret.setComplete(new WebSocketHandshakeException("Unable to complete websocket handshake")))
+                    ex = new WebSocketHandshakeException("Unable to complete websocket handshake");
+                    if (!ret.setComplete(ex))
                         return;
                 }
                 else {

File: AndroidAsync/src/com/koushikdutta/async/http/BasicNameValuePair.java
Patch:
@@ -33,8 +33,6 @@
 
 import android.text.TextUtils;
 
-import org.apache.http.NameValuePair;
-
 /**
  * A simple class encapsulating an attribute/value pair.
  * <p>

File: AndroidAsync/src/com/koushikdutta/async/http/Multimap.java
Patch:
@@ -2,8 +2,6 @@
 
 import android.net.Uri;
 
-import org.apache.http.NameValuePair;
-
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Iterator;

File: AndroidAsync/src/com/koushikdutta/async/http/body/FilePart.java
Patch:
@@ -1,8 +1,7 @@
 package com.koushikdutta.async.http.body;
 
 import com.koushikdutta.async.http.BasicNameValuePair;
-
-import org.apache.http.NameValuePair;
+import com.koushikdutta.async.http.NameValuePair;
 
 import java.io.File;
 import java.io.FileInputStream;

File: AndroidAsync/src/com/koushikdutta/async/http/body/Part.java
Patch:
@@ -4,8 +4,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.http.Headers;
 import com.koushikdutta.async.http.Multimap;
-
-import org.apache.http.NameValuePair;
+import com.koushikdutta.async.http.NameValuePair;
 
 import java.io.File;
 import java.util.List;

File: AndroidAsync/src/com/koushikdutta/async/http/body/StreamPart.java
Patch:
@@ -4,10 +4,9 @@
 import java.io.InputStream;
 import java.util.List;
 
-import org.apache.http.NameValuePair;
-
 import com.koushikdutta.async.DataSink;
 import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.http.NameValuePair;
 
 public abstract class StreamPart extends Part {
     public StreamPart(String name, long length, List<NameValuePair> contentDisposition) {

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -8,10 +8,9 @@
 import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.NameValuePair;
 import com.koushikdutta.async.util.Charsets;
 
-import org.apache.http.NameValuePair;
-
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 import java.util.List;

File: AndroidAsync/src/com/koushikdutta/async/http/NameValuePair.java
Patch:
@@ -29,7 +29,7 @@
  *
  */
 
-package org.apache.http;
+package com.koushikdutta.async.http;
 
 /**
  * A simple class encapsulating an attribute/value pair.

File: AndroidAsync/src/com/koushikdutta/async/http/body/FilePart.java
Patch:
@@ -18,7 +18,7 @@ public FilePart(String name, final File file) {
             }
         });
 
-//        getRawHeaders().setString("Content-Type", "application/xml");
+//        getRawHeaders().set("Content-Type", "application/xml");
 
         this.file = file;
     }

File: AndroidAsync/src/com/koushikdutta/async/http/BasicNameValuePair.java
Patch:
@@ -33,8 +33,6 @@
 
 import android.text.TextUtils;
 
-import org.apache.http.NameValuePair;
-
 /**
  * A simple class encapsulating an attribute/value pair.
  * <p>

File: AndroidAsync/src/com/koushikdutta/async/http/Multimap.java
Patch:
@@ -2,8 +2,6 @@
 
 import android.net.Uri;
 
-import org.apache.http.NameValuePair;
-
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Iterator;

File: AndroidAsync/src/com/koushikdutta/async/http/NameValuePair.java
Patch:
@@ -29,7 +29,7 @@
  *
  */
 
-package org.apache.http;
+package com.koushikdutta.async.http;
 
 /**
  * A simple class encapsulating an attribute/value pair.

File: AndroidAsync/src/com/koushikdutta/async/http/body/FilePart.java
Patch:
@@ -1,8 +1,7 @@
 package com.koushikdutta.async.http.body;
 
 import com.koushikdutta.async.http.BasicNameValuePair;
-
-import org.apache.http.NameValuePair;
+import com.koushikdutta.async.http.NameValuePair;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -19,7 +18,7 @@ public FilePart(String name, final File file) {
             }
         });
 
-//        getRawHeaders().set("Content-Type", "application/xml");
+//        getRawHeaders().setString("Content-Type", "application/xml");
 
         this.file = file;
     }

File: AndroidAsync/src/com/koushikdutta/async/http/body/Part.java
Patch:
@@ -4,8 +4,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.http.Headers;
 import com.koushikdutta.async.http.Multimap;
-
-import org.apache.http.NameValuePair;
+import com.koushikdutta.async.http.NameValuePair;
 
 import java.io.File;
 import java.util.List;

File: AndroidAsync/src/com/koushikdutta/async/http/body/StreamPart.java
Patch:
@@ -4,10 +4,9 @@
 import java.io.InputStream;
 import java.util.List;
 
-import org.apache.http.NameValuePair;
-
 import com.koushikdutta.async.DataSink;
 import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.http.NameValuePair;
 
 public abstract class StreamPart extends Part {
     public StreamPart(String name, long length, List<NameValuePair> contentDisposition) {

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -8,10 +8,9 @@
 import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.NameValuePair;
 import com.koushikdutta.async.util.Charsets;
 
-import org.apache.http.NameValuePair;
-
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 import java.util.List;

File: AndroidAsync/src/com/koushikdutta/async/http/NameValuePair.java
Patch:
@@ -29,7 +29,7 @@
  *
  */
 
-package org.apache.http;
+package com.koushikdutta.async.http;
 
 /**
  * A simple class encapsulating an attribute/value pair.

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -94,7 +94,6 @@ private void configure(SSLEngine engine, GetSocketData data, String host, int po
         if (sslParameters != null) {
             try {
                 byte[] protocols = concatLengthPrefixed(
-                Protocol.HTTP_1_1,
                 Protocol.SPDY_3
                 );
 
@@ -207,7 +206,7 @@ public void onHandshakeCompleted(Exception e, AsyncSSLSocket socket) {
                     }
                     protoString = new String(proto);
                     Protocol p = Protocol.get(protoString);
-                    if (p == null) {
+                    if (p == null || !p.needsSpdyConnection()) {
                         invokeConnect(key, callback, null, socket);
                         noSpdy(key);
                         return;

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -58,7 +58,7 @@ public interface HandshakeCallback {
             // https://groups.google.com/forum/?fromgroups=#!topic/netty/UCfqPPk5O4s
             // certs that use this extension will throw in Cipher.java.
             // fallback is to use a custom SSLContext, and hack around the x509 extension.
-            if (Build.VERSION.SDK_INT <= 15)
+            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
                 throw new Exception();
             defaultSSLContext = SSLContext.getInstance("Default");
         }

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseCacheMiddleware.java
Patch:
@@ -104,7 +104,7 @@ public Cancellable getSocket(final GetSocketData data) {
             return null;
         }
 
-        String key = cache.toKeyString(data.request.getUri());
+        String key = FileCache.toKeyString(data.request.getUri());
         FileInputStream[] snapshot = null;
         long contentLength;
         Entry entry;
@@ -267,7 +267,7 @@ public void onBodyDecoder(OnBodyDataOnRequestSentData data) {
             return;
         }
 
-        String key = cache.toKeyString(data.request.getUri());
+        String key = FileCache.toKeyString(data.request.getUri());
         RawHeaders varyHeaders = requestHeaders.getHeaders().getAll(networkResponse.getVaryFields());
         Entry entry = new Entry(data.request.getUri(), varyHeaders, data.request, networkResponse.getHeaders());
         BodyCacher cacher = new BodyCacher();

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseCacheMiddleware.java
Patch:
@@ -104,7 +104,7 @@ public Cancellable getSocket(final GetSocketData data) {
             return null;
         }
 
-        String key = FileCache.toKeyString(data.request.getUri());
+        String key = cache.toKeyString(data.request.getUri());
         FileInputStream[] snapshot = null;
         long contentLength;
         Entry entry;
@@ -267,7 +267,7 @@ public void onBodyDecoder(OnBodyDataOnRequestSentData data) {
             return;
         }
 
-        String key = FileCache.toKeyString(data.request.getUri());
+        String key = cache.toKeyString(data.request.getUri());
         RawHeaders varyHeaders = requestHeaders.getHeaders().getAll(networkResponse.getVaryFields());
         Entry entry = new Entry(data.request.getUri(), varyHeaders, data.request, networkResponse.getHeaders());
         BodyCacher cacher = new BodyCacher();

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseCacheMiddleware.java
Patch:
@@ -104,7 +104,7 @@ public Cancellable getSocket(final GetSocketData data) {
             return null;
         }
 
-        String key = FileCache.toKeyString(data.request.getUri());
+        String key = cache.toKeyString(data.request.getUri());
         FileInputStream[] snapshot = null;
         long contentLength;
         Entry entry;
@@ -267,7 +267,7 @@ public void onBodyDecoder(OnBodyDataOnRequestSentData data) {
             return;
         }
 
-        String key = FileCache.toKeyString(data.request.getUri());
+        String key = cache.toKeyString(data.request.getUri());
         RawHeaders varyHeaders = requestHeaders.getHeaders().getAll(networkResponse.getVaryFields());
         Entry entry = new Entry(data.request.getUri(), varyHeaders, data.request, networkResponse.getHeaders());
         BodyCacher cacher = new BodyCacher();

File: AndroidAsync/src/com/koushikdutta/async/parser/AsyncParser.java
Patch:
@@ -5,11 +5,13 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
 
+import java.lang.reflect.Type;
+
 /**
  * Created by koush on 5/27/13.
  */
 public interface AsyncParser<T> {
     Future<T> parse(DataEmitter emitter);
     void write(DataSink sink, T value, CompletedCallback completed);
-    Class<T> getType();
+    Type getType();
 }

File: AndroidAsync/src/com/koushikdutta/async/parser/AsyncParserBase.java
Patch:
@@ -1,13 +1,14 @@
 package com.koushikdutta.async.parser;
 
 import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
 
 /**
  * Created by koush on 3/6/15.
  */
 public abstract class AsyncParserBase<T> implements AsyncParser<T> {
     @Override
-    public Class<T> getType() {
-        return (Class<T>)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0];
+    public Type getType() {
+        return ((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0];
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/parser/AsyncParser.java
Patch:
@@ -11,4 +11,5 @@
 public interface AsyncParser<T> {
     Future<T> parse(DataEmitter emitter);
     void write(DataSink sink, T value, CompletedCallback completed);
+    Class<T> getType();
 }

File: AndroidAsync/src/com/koushikdutta/async/parser/ByteBufferListParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class ByteBufferListParser implements AsyncParser<ByteBufferList> {
+public class ByteBufferListParser extends AsyncParserBase<ByteBufferList> {
     @Override
     public Future<ByteBufferList> parse(final DataEmitter emitter) {
         final ByteBufferList bb = new ByteBufferList();

File: AndroidAsync/src/com/koushikdutta/async/parser/DocumentParser.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Created by koush on 8/3/13.
  */
-public class DocumentParser implements AsyncParser<Document> {
+public class DocumentParser extends AsyncParserBase<Document> {
     @Override
     public Future<Document> parse(DataEmitter emitter) {
         return new ByteBufferListParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/JSONArrayParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class JSONArrayParser implements AsyncParser<JSONArray> {
+public class JSONArrayParser extends AsyncParserBase<JSONArray> {
     @Override
     public Future<JSONArray> parse(DataEmitter emitter) {
         return new StringParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/JSONObjectParser.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class JSONObjectParser implements AsyncParser<JSONObject> {
+public class JSONObjectParser extends AsyncParserBase<JSONObject> {
     @Override
     public Future<JSONObject> parse(DataEmitter emitter) {
         return new StringParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/StringParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class StringParser implements AsyncParser<String> {
+public class StringParser extends AsyncParserBase<String> {
     Charset forcedCharset;
 
     public StringParser() {

File: AndroidAsync/src/com/koushikdutta/async/parser/AsyncParser.java
Patch:
@@ -11,5 +11,4 @@
 public interface AsyncParser<T> {
     Future<T> parse(DataEmitter emitter);
     void write(DataSink sink, T value, CompletedCallback completed);
-    Class<T> getType();
 }

File: AndroidAsync/src/com/koushikdutta/async/parser/ByteBufferListParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class ByteBufferListParser extends AsyncParserBase<ByteBufferList> {
+public class ByteBufferListParser implements AsyncParser<ByteBufferList> {
     @Override
     public Future<ByteBufferList> parse(final DataEmitter emitter) {
         final ByteBufferList bb = new ByteBufferList();

File: AndroidAsync/src/com/koushikdutta/async/parser/DocumentParser.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Created by koush on 8/3/13.
  */
-public class DocumentParser extends AsyncParserBase<Document> {
+public class DocumentParser implements AsyncParser<Document> {
     @Override
     public Future<Document> parse(DataEmitter emitter) {
         return new ByteBufferListParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/JSONArrayParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class JSONArrayParser extends AsyncParserBase<JSONArray> {
+public class JSONArrayParser implements AsyncParser<JSONArray> {
     @Override
     public Future<JSONArray> parse(DataEmitter emitter) {
         return new StringParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/JSONObjectParser.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class JSONObjectParser extends AsyncParserBase<JSONObject> {
+public class JSONObjectParser implements AsyncParser<JSONObject> {
     @Override
     public Future<JSONObject> parse(DataEmitter emitter) {
         return new StringParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/StringParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class StringParser extends AsyncParserBase<String> {
+public class StringParser implements AsyncParser<String> {
     Charset forcedCharset;
 
     public StringParser() {

File: AndroidAsync/src/com/koushikdutta/async/parser/AsyncParser.java
Patch:
@@ -11,4 +11,5 @@
 public interface AsyncParser<T> {
     Future<T> parse(DataEmitter emitter);
     void write(DataSink sink, T value, CompletedCallback completed);
+    Class<T> getType();
 }

File: AndroidAsync/src/com/koushikdutta/async/parser/ByteBufferListParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class ByteBufferListParser implements AsyncParser<ByteBufferList> {
+public class ByteBufferListParser extends AsyncParserBase<ByteBufferList> {
     @Override
     public Future<ByteBufferList> parse(final DataEmitter emitter) {
         final ByteBufferList bb = new ByteBufferList();

File: AndroidAsync/src/com/koushikdutta/async/parser/DocumentParser.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Created by koush on 8/3/13.
  */
-public class DocumentParser implements AsyncParser<Document> {
+public class DocumentParser extends AsyncParserBase<Document> {
     @Override
     public Future<Document> parse(DataEmitter emitter) {
         return new ByteBufferListParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/JSONArrayParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class JSONArrayParser implements AsyncParser<JSONArray> {
+public class JSONArrayParser extends AsyncParserBase<JSONArray> {
     @Override
     public Future<JSONArray> parse(DataEmitter emitter) {
         return new StringParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/JSONObjectParser.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class JSONObjectParser implements AsyncParser<JSONObject> {
+public class JSONObjectParser extends AsyncParserBase<JSONObject> {
     @Override
     public Future<JSONObject> parse(DataEmitter emitter) {
         return new StringParser().parse(emitter)

File: AndroidAsync/src/com/koushikdutta/async/parser/StringParser.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * Created by koush on 5/27/13.
  */
-public class StringParser implements AsyncParser<String> {
+public class StringParser extends AsyncParserBase<String> {
     Charset forcedCharset;
 
     public StringParser() {

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -177,7 +177,7 @@ private void noSpdy(String key) {
 
     private void invokeConnect(String key, final ConnectCallback callback, Exception e, AsyncSSLSocket socket) {
         SpdyConnectionWaiter waiter = connections.get(key);
-        if (waiter != null && waiter.originalCancellable.setComplete())
+        if (waiter == null || waiter.originalCancellable.setComplete())
             callback.onConnectCompleted(e, socket);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -177,7 +177,7 @@ private void noSpdy(String key) {
 
     private void invokeConnect(String key, final ConnectCallback callback, Exception e, AsyncSSLSocket socket) {
         SpdyConnectionWaiter waiter = connections.get(key);
-        if (waiter.originalCancellable.setComplete())
+        if (waiter != null && waiter.originalCancellable.setComplete())
             callback.onConnectCompleted(e, socket);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/body/MultipartFormDataBody.java
Patch:
@@ -184,7 +184,7 @@ public String getContentType() {
         if (getBoundary() == null) {
             setBoundary("----------------------------" + UUID.randomUUID().toString().replace("-", ""));
         }
-        return CONTENT_TYPE + "; boundary=" + getBoundary();
+        return contentType + "; boundary=" + getBoundary();
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -198,7 +198,7 @@ else if (proxyHost != null) {
             @Override
             protected void error(Exception e) {
                 super.error(e);
-                data.connectCallback.onConnectCompleted(e, null);
+                wrapCallback(data, uri, port, false, data.connectCallback).onConnectCompleted(e, null);
             }
 
             @Override
@@ -210,7 +210,7 @@ public void onCompleted(Exception ex) {
                         if (lastException == null)
                             lastException = new ConnectionFailedException("Unable to connect to remote address");
                         if (setComplete(lastException)) {
-                            data.connectCallback.onConnectCompleted(lastException, null);
+                            wrapCallback(data, uri, port, false, data.connectCallback).onConnectCompleted(lastException, null);
                         }
                     }
                 });

File: AndroidAsync/src/com/koushikdutta/async/http/body/FileBody.java
Patch:
@@ -12,8 +12,10 @@
  * Created by koush on 10/14/13.
  */
 public class FileBody implements AsyncHttpRequestBody<File> {
+    public static final String CONTENT_TYPE = "application/binary";
+
     File file;
-    String contentType = "application/binary";
+    String contentType = CONTENT_TYPE;
 
     public FileBody(File file) {
         this.file = file;

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -279,6 +279,8 @@ private void maybeCleanupConnectionInfo(String lookup) {
             if (idleSocketHolder.idleTime + idleTimeoutMs > System.currentTimeMillis())
                 break;
             info.sockets.pop();
+            // remove the callback, prevent reentrancy.
+            socket.setClosedCallback(null);
             socket.close();
         }
         if (info.openCount == 0 && info.queue.isEmpty() && info.sockets.isEmpty())

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -370,7 +370,8 @@ protected void transform(List<Header> result) throws Exception {
                 String status = headers.remove(Header.RESPONSE_STATUS.utf8());
                 String[] statusParts = status.split(" ", 2);
                 data.response.code(Integer.parseInt(statusParts[0]));
-                data.response.message(statusParts[1]);
+                if (statusParts.length == 2)
+                    data.response.message(statusParts[1]);
                 data.response.protocol(headers.remove(Header.VERSION.utf8()));
                 data.response.headers(headers);
                 setComplete(headers);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSSLSocketMiddleware.java
Patch:
@@ -68,7 +68,7 @@ protected SSLEngine createConfiguredSSLEngine(GetSocketData data, String host, i
         return sslEngine;
     }
 
-    protected AsyncSSLSocketWrapper.HandshakeCallback createHandshakeCallback(GetSocketData data, final ConnectCallback callback) {
+    protected AsyncSSLSocketWrapper.HandshakeCallback createHandshakeCallback(final GetSocketData data, final ConnectCallback callback) {
         return new AsyncSSLSocketWrapper.HandshakeCallback() {
             @Override
             public void onHandshakeCompleted(Exception e, AsyncSSLSocket socket) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -213,15 +213,17 @@ public void onCompleted(Exception ex) {
                 });
 
                 for (final InetAddress address: result) {
+                    final String inetSockAddress = String.format("%s:%s", address, port);
                     keepTrying.add(new ContinuationCallback() {
                         @Override
                         public void onContinue(Continuation continuation, final CompletedCallback next) throws Exception {
+                            data.request.logv("attempting connection to " + inetSockAddress);
                             mClient.getServer().connectSocket(new InetSocketAddress(address, port),
                                 wrapCallback(data, uri, port, false, new ConnectCallback() {
                                 @Override
                                 public void onConnectCompleted(Exception ex, AsyncSocket socket) {
                                     if (isDone()) {
-                                        lastException = new Exception("internal error during connect");
+                                        lastException = new Exception("internal error during connect to " + inetSockAddress);
                                         next.onCompleted(null);
                                         return;
                                     }

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -186,6 +186,7 @@ public void onHandshakeCompleted(Exception e, AsyncSSLSocket socket) {
 
                     connections.put(data.request.getUri().getHost(), connection);
 
+                    data.request.logv("using new spdy connection for host: " + data.request.getUri().getHost());
                     newSocket(data, connection, callback);
                 }
                 catch (Exception ex) {
@@ -198,7 +199,6 @@ public void onHandshakeCompleted(Exception e, AsyncSSLSocket socket) {
 
     private void newSocket(GetSocketData data, final AsyncSpdyConnection connection, final ConnectCallback callback) {
         final AsyncHttpRequest request = data.request;
-        request.logv("using spdy connection");
 
         data.protocol = connection.protocol.toString();
 
@@ -272,6 +272,7 @@ public Cancellable getSocket(GetSocketData data) {
             return super.getSocket(data);
         }
 
+        data.request.logv("using existing spdy connection for host: " + data.request.getUri().getHost());
         newSocket(data, conn, data.connectCallback);
 
         SimpleCancellable ret = new SimpleCancellable();

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -73,9 +73,9 @@ public AsyncHttpClient(AsyncServer server) {
         insertMiddleware(socketMiddleware = new AsyncSocketMiddleware(this));
         insertMiddleware(sslSocketMiddleware = new SpdyMiddleware(this));
         insertMiddleware(httpTransportMiddleware = new HttpTransportMiddleware());
-        sslSocketMiddleware.addEngineConfigurator(new SSLEngineSNIConfigurator());
     }
 
+
     @SuppressLint("NewApi")
     private static void setupAndroidProxy(AsyncHttpRequest request) {
         // using a explicit proxy?

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -361,11 +361,11 @@ public void run() {
                     ckey.attach(cancel);
                     socket.connect(address);
                 }
-                catch (IOException e) {
+                catch (Throwable e) {
                     if (ckey != null)
                         ckey.cancel();
                     StreamUtility.closeQuietly(socket);
-                    cancel.setComplete(e);
+                    cancel.setComplete(new RuntimeException(e));
                 }
             }
         });

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -361,11 +361,11 @@ public void run() {
                     ckey.attach(cancel);
                     socket.connect(address);
                 }
-                catch (IOException e) {
+                catch (Throwable e) {
                     if (ckey != null)
                         ckey.cancel();
                     StreamUtility.closeQuietly(socket);
-                    cancel.setComplete(e);
+                    cancel.setComplete(new RuntimeException(e));
                 }
             }
         });

File: AndroidAsync/src/com/koushikdutta/async/http/WebSocketImpl.java
Patch:
@@ -39,7 +39,7 @@ private static String SHA1(String text) {
             MessageDigest md = MessageDigest.getInstance("SHA-1");
             md.update(text.getBytes("iso-8859-1"), 0, text.length());
             byte[] sha1hash = md.digest();
-            return Base64.encodeToString(sha1hash, 0);
+            return Base64.encodeToString(sha1hash, Base64.NO_WRAP);
         }
         catch (Exception ex) {
             return null;

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -229,7 +229,7 @@ else if (res.getStatus() == Status.BUFFER_UNDERFLOW) {
     public void onDataAvailable() {
         Util.emitAllData(this, pending);
 
-        if (mEnded && !pending.hasRemaining())
+        if (mEnded && !pending.hasRemaining() && mEndCallback != null)
             mEndCallback.onCompleted(mEndException);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -229,7 +229,7 @@ else if (res.getStatus() == Status.BUFFER_UNDERFLOW) {
     public void onDataAvailable() {
         Util.emitAllData(this, pending);
 
-        if (mEnded && !pending.hasRemaining())
+        if (mEnded && !pending.hasRemaining() && mEndCallback != null)
             mEndCallback.onCompleted(mEndException);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -626,7 +626,7 @@ private static void run(final AsyncServer server, final SelectorWrapper selector
                 runLoop(server, selector, queue);
             }
             catch (AsyncSelectorException e) {
-                Log.e(LOGTAG, "Selector exception", e);
+                Log.i(LOGTAG, "Selector exception, shutting down", e);
                 try {
                     // StreamUtility.closeQuiety is throwing ArrayStoreException?
                     selector.getSelector().close();

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -598,7 +598,7 @@ public void run() {
                 runLoop(this, selector, queue);
             }
             catch (AsyncSelectorException e) {
-                Log.e(LOGTAG, "Selector exception", e);
+                Log.i(LOGTAG, "Selector closed", e);
                 try {
                     // StreamUtility.closeQuiety is throwing ArrayStoreException?
                     selector.getSelector().close();

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -598,7 +598,7 @@ public void run() {
                 runLoop(this, selector, queue);
             }
             catch (AsyncSelectorException e) {
-                Log.e(LOGTAG, "Selector exception", e);
+                Log.i(LOGTAG, "Selector closed", e);
                 try {
                     // StreamUtility.closeQuiety is throwing ArrayStoreException?
                     selector.getSelector().close();

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/SocketIOConnection.java
Patch:
@@ -104,7 +104,7 @@ void reconnect(final DependentCancellable child) {
 
         request.logi("Reconnecting socket.io");
 
-        Cancellable connecting = httpClient.executeString(request, null)
+        connecting = httpClient.executeString(request, null)
         .then(new TransformFuture<SocketIOTransport, String>() {
             @Override
             protected void transform(String result) throws Exception {

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -59,7 +59,7 @@ public void write(AsyncHttpRequest request, final DataSink response, final Compl
     public static final String CONTENT_TYPE = "application/x-www-form-urlencoded";
     @Override
     public String getContentType() {
-        return CONTENT_TYPE + "; charset=utf8";
+        return CONTENT_TYPE + "; charset=utf-8";
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -206,13 +206,13 @@ public void send(String string) {
         responseCode(200);
         String contentType = mRawHeaders.get("Content-Type");
         if (contentType == null)
-            contentType = "text/html; charset=utf8";
+            contentType = "text/html; charset=utf-8";
         send(contentType, string);
     }
 
     @Override
     public void send(JSONObject json) {
-        send("application/json; charset=utf8", json.toString());
+        send("application/json; charset=utf-8", json.toString());
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -59,7 +59,7 @@ public void write(AsyncHttpRequest request, final DataSink response, final Compl
     public static final String CONTENT_TYPE = "application/x-www-form-urlencoded";
     @Override
     public String getContentType() {
-        return CONTENT_TYPE + "; charset=utf8";
+        return CONTENT_TYPE + "; charset=utf-8";
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -206,13 +206,13 @@ public void send(String string) {
         responseCode(200);
         String contentType = mRawHeaders.get("Content-Type");
         if (contentType == null)
-            contentType = "text/html; charset=utf8";
+            contentType = "text/html; charset=utf-8";
         send(contentType, string);
     }
 
     @Override
     public void send(JSONObject json) {
-        send("application/json; charset=utf8", json.toString());
+        send("application/json; charset=utf-8", json.toString());
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -420,6 +420,7 @@ public AsyncSocket detachSocket() {
         // set up the system default proxy and connect
         setupAndroidProxy(request);
 
+        final Exception unsupportedURI;
         synchronized (mMiddleware) {
             for (AsyncHttpClientMiddleware middleware: mMiddleware) {
                 Cancellable socketCancellable = middleware.getSocket(data);
@@ -429,8 +430,9 @@ public AsyncSocket detachSocket() {
                     return;
                 }
             }
+            unsupportedURI = new IllegalArgumentException("invalid uri="+uri+" middlewares="+mMiddleware);
         }
-        reportConnectedCompleted(cancel, new IllegalArgumentException("invalid uri"), null, request, callback);
+        reportConnectedCompleted(cancel, unsupportedURI, null, request, callback);
     }
 
     public static abstract class RequestCallbackBase<T> implements RequestCallback<T> {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -420,6 +420,7 @@ public AsyncSocket detachSocket() {
         // set up the system default proxy and connect
         setupAndroidProxy(request);
 
+        final Exception unsupportedURI;
         synchronized (mMiddleware) {
             for (AsyncHttpClientMiddleware middleware: mMiddleware) {
                 Cancellable socketCancellable = middleware.getSocket(data);
@@ -429,8 +430,9 @@ public AsyncSocket detachSocket() {
                     return;
                 }
             }
+            unsupportedURI = new IllegalArgumentException("invalid uri="+uri+" middlewares="+mMiddleware);
         }
-        reportConnectedCompleted(cancel, new IllegalArgumentException("invalid uri"), null, request, callback);
+        reportConnectedCompleted(cancel, unsupportedURI, null, request, callback);
     }
 
     public static abstract class RequestCallbackBase<T> implements RequestCallback<T> {

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -415,7 +415,6 @@ public void write(ByteBufferList bb) {
         while ((remaining != bb.remaining() || (res != null && res.getHandshakeStatus() == HandshakeStatus.NEED_WRAP)) && mSink.remaining() == 0);
         ByteBufferList.reclaim(mWriteTmp);
         mWrapping = false;
-        ByteBufferList.reclaim(writeBuf);
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/AsyncNetworkSocket.java
Patch:
@@ -174,6 +174,9 @@ int onReadable() {
                 pending.add(b);
                 Util.emitAllData(this, pending);
             }
+            else {
+                ByteBufferList.reclaim(b);
+            }
 
             if (closed) {
                 reportEndPending(null);

File: AndroidAsync/src/com/koushikdutta/async/http/ResponseCacheMiddleware.java
Patch:
@@ -416,10 +416,12 @@ void spewInternal() {
                 FileInputStream din = cacheResponse.getBody();
                 int read = din.read(buffer.array(), buffer.arrayOffset(), buffer.capacity());
                 if (read == -1) {
+                    ByteBufferList.reclaim(buffer);
                     allowEnd = true;
                     report(null);
                     return;
                 }
+                allocator.track(read);
                 buffer.limit(read);
                 pending.add(buffer);
             }

File: AndroidAsync/src/com/koushikdutta/async/AsyncNetworkSocket.java
Patch:
@@ -142,6 +142,9 @@ int onReadable() {
                 pending.add(b);
                 Util.emitAllData(this, pending);
             }
+            else {
+                ByteBufferList.reclaim(b);
+            }
 
             if (closed) {
                 reportEndPending(null);

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseCacheMiddleware.java
Patch:
@@ -431,10 +431,12 @@ void spewInternal() {
                 FileInputStream din = cacheResponse.getBody();
                 int read = din.read(buffer.array(), buffer.arrayOffset(), buffer.capacity());
                 if (read == -1) {
+                    ByteBufferList.reclaim(buffer);
                     allowEnd = true;
                     report(null);
                     return;
                 }
+                allocator.track(read);
                 buffer.limit(read);
                 pending.add(buffer);
             }

File: AndroidAsync/src/com/koushikdutta/async/http/WebSocketImpl.java
Patch:
@@ -235,7 +235,7 @@ public void send(String string) {
 
     @Override
     public void ping(String string) {
-        mSink.write(ByteBuffer.wrap(mParser.pingFrame(string)));
+        mSink.write(new ByteBufferList(ByteBuffer.wrap(mParser.pingFrame(string))));
     }
 
     private StringCallback mStringCallback;

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -8,6 +8,7 @@
 import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.util.Charsets;
 
 import org.apache.http.NameValuePair;
 
@@ -42,7 +43,7 @@ private void buildData() {
                 b.append('=');
                 b.append(URLEncoder.encode(pair.getValue(), "UTF-8"));
             }
-            mBodyBytes = b.toString().getBytes("ISO-8859-1");
+            mBodyBytes = b.toString().getBytes("UTF-8");
         }
         catch (UnsupportedEncodingException e) {
         }
@@ -58,7 +59,7 @@ public void write(AsyncHttpRequest request, final DataSink response, final Compl
     public static final String CONTENT_TYPE = "application/x-www-form-urlencoded";
     @Override
     public String getContentType() {
-        return CONTENT_TYPE;
+        return CONTENT_TYPE + "; charset=utf8";
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -8,6 +8,7 @@
 import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.util.Charsets;
 
 import org.apache.http.NameValuePair;
 
@@ -42,7 +43,7 @@ private void buildData() {
                 b.append('=');
                 b.append(URLEncoder.encode(pair.getValue(), "UTF-8"));
             }
-            mBodyBytes = b.toString().getBytes("ISO-8859-1");
+            mBodyBytes = b.toString().getBytes("UTF-8");
         }
         catch (UnsupportedEncodingException e) {
             throw new AssertionError(e);
@@ -59,7 +60,7 @@ public void write(AsyncHttpRequest request, final DataSink response, final Compl
     public static final String CONTENT_TYPE = "application/x-www-form-urlencoded";
     @Override
     public String getContentType() {
-        return CONTENT_TYPE;
+        return CONTENT_TYPE + "; charset=utf8";
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -411,7 +411,7 @@ private void report(Exception e) {
         final HandshakeCallback hs = handshakeCallback;
         if (hs != null) {
             handshakeCallback = null;
-            mSocket.setDataCallback(new NullDataCallback());
+            mSocket.setDataCallback(new DataCallback.NullDataCallback());
             mSocket.end();
             mSocket.close();
             hs.onHandshakeCompleted(e, null);

File: AndroidAsync/src/com/koushikdutta/async/http/body/MultipartFormDataBody.java
Patch:
@@ -5,7 +5,6 @@
 import com.koushikdutta.async.DataSink;
 import com.koushikdutta.async.LineEmitter;
 import com.koushikdutta.async.LineEmitter.StringCallback;
-import com.koushikdutta.async.NullDataCallback;
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.ContinuationCallback;
 import com.koushikdutta.async.callback.DataCallback;

File: AndroidAsync/src/com/koushikdutta/async/http/filter/GZIPInputFilter.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.DataEmitter;
-import com.koushikdutta.async.NullDataCallback;
 import com.koushikdutta.async.PushParser;
 import com.koushikdutta.async.PushParser.ParseCallback;
 import com.koushikdutta.async.callback.DataCallback;

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -13,7 +13,6 @@
 import com.koushikdutta.async.AsyncSocket;
 import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.DataEmitter;
-import com.koushikdutta.async.NullDataCallback;
 import com.koushikdutta.async.Util;
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.ListenCallback;

File: AndroidAsync/src/com/koushikdutta/async/http/server/UnknownRequestBody.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.koushikdutta.async.DataEmitter;
 import com.koushikdutta.async.DataSink;
-import com.koushikdutta.async.NullDataCallback;
 import com.koushikdutta.async.Util;
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.DataCallback;
@@ -64,6 +63,6 @@ public DataEmitter getEmitter() {
     public void parse(DataEmitter emitter, CompletedCallback completed) {
         this.emitter = emitter;
         emitter.setEndCallback(completed);
-        emitter.setDataCallback(new NullDataCallback());
+        emitter.setDataCallback(new DataCallback.NullDataCallback());
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/transport/WebSocketTransport.java
Patch:
@@ -1,8 +1,8 @@
 package com.koushikdutta.async.http.socketio.transport;
 
 import com.koushikdutta.async.AsyncServer;
-import com.koushikdutta.async.NullDataCallback;
 import com.koushikdutta.async.callback.CompletedCallback;
+import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.http.WebSocket;
 
 public class WebSocketTransport implements SocketIOTransport {
@@ -12,7 +12,7 @@ public class WebSocketTransport implements SocketIOTransport {
     public WebSocketTransport(WebSocket webSocket) {
         this.webSocket = webSocket;
 
-        this.webSocket.setDataCallback(new NullDataCallback());
+        this.webSocket.setDataCallback(new DataCallback.NullDataCallback());
     }
 
     @Override

File: AndroidAsync/test/src/com/koushikdutta/async/test/ByteUtilTests.java
Patch:
@@ -2,10 +2,10 @@
 
 import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.FilteredDataEmitter;
-import com.koushikdutta.async.NullDataCallback;
 import com.koushikdutta.async.PushParser;
 import com.koushikdutta.async.TapCallback;
 import com.koushikdutta.async.Util;
+import com.koushikdutta.async.callback.DataCallback;
 
 import junit.framework.TestCase;
 
@@ -23,7 +23,7 @@ public boolean isPaused() {
             }
         };
         new PushParser(mock)
-            .until((byte)0, new NullDataCallback())
+            .until((byte)0, new DataCallback.NullDataCallback())
             .readInt(new PushParser.ParseCallback<Integer>() {
                 public void parsed(Integer arg) {
                     valRead = arg;
@@ -43,7 +43,7 @@ public boolean isPaused() {
             }
         };
         new PushParser(mock)
-                .until((byte)0, new NullDataCallback())
+                .until((byte)0, new DataCallback.NullDataCallback())
                 .readInt()
                 .tap(new TapCallback() {
                     public void parsed(int arg) {

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -727,6 +727,9 @@ private static void runLoop(final AsyncServer server, final SelectorWrapper sele
                 }
             }
         }
+        catch (NullPointerException e) {
+            throw new AsyncSelectorException(e);
+        }
         catch (IOException e) {
             throw new AsyncSelectorException(e);
         }

File: AndroidAsync/src/com/koushikdutta/async/http/cache/ResponseHeaders.java
Patch:
@@ -160,7 +160,7 @@ public ResponseHeaders(Uri uri, RawHeaders headers) {
                     varyFields = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
                 }
                 for (String varyField : value.split(",")) {
-                    varyFields.add(varyField.trim());
+                    varyFields.add(varyField.trim().toLowerCase());
                 }
             } else if ("Content-Encoding".equalsIgnoreCase(fieldName)) {
                 contentEncoding = value;

File: AndroidAsync/test/src/com/koushikdutta/async/test/MultipartTests.java
Patch:
@@ -1,6 +1,7 @@
 package com.koushikdutta.async.test;
 
 import android.os.Environment;
+import android.test.AndroidTestCase;
 
 import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.ByteBufferList;
@@ -26,7 +27,7 @@
 import java.io.FileOutputStream;
 import java.util.concurrent.TimeUnit;
 
-public class MultipartTests extends TestCase {
+public class MultipartTests extends AndroidTestCase {
     AsyncHttpServer httpServer;
 
     @Override
@@ -81,7 +82,7 @@ protected void tearDown() throws Exception {
     }
 
     public void testUpload() throws Exception {
-        File dummy = new File(Environment.getExternalStorageDirectory(), "AndroidAsync/dummy.txt");
+        File dummy = getContext().getFileStreamPath("dummy.txt");
         final String FIELD_VAL = "bar";
         dummy.getParentFile().mkdirs();
         FileOutputStream fout = new FileOutputStream(dummy);

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -727,6 +727,9 @@ private static void runLoop(final AsyncServer server, final SelectorWrapper sele
                 }
             }
         }
+        catch (NullPointerException e) {
+            throw new AsyncSelectorException(e);
+        }
         catch (IOException e) {
             throw new AsyncSelectorException(e);
         }

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -130,7 +130,7 @@ public void run() {
                     selector.wakeupOnce();
                 }
                 catch (Exception e) {
-                    Log.i(LOGTAG, "Selector shit the bed.");
+                    Log.i(LOGTAG, "Selector Exception? L Preview?");
                 }
             }
         });

File: AndroidAsync/src/com/koushikdutta/async/DataEmitterBase.java
Patch:
@@ -8,9 +8,6 @@
  */
 public abstract class DataEmitterBase implements DataEmitter {
     private boolean ended;
-    protected void resetEnded() {
-        ended = false;
-    }
     protected void report(Exception e) {
         if (ended)
             return;

File: AndroidAsync/src/com/koushikdutta/async/FilteredDataEmitter.java
Patch:
@@ -5,7 +5,7 @@
 import com.koushikdutta.async.wrapper.DataEmitterWrapper;
 
 public class FilteredDataEmitter extends DataEmitterBase implements DataEmitter, DataCallback, DataEmitterWrapper, DataTrackingEmitter {
-    DataEmitter mEmitter;
+    private DataEmitter mEmitter;
     @Override
     public DataEmitter getDataEmitter() {
         return mEmitter;
@@ -41,8 +41,8 @@ public void setDataTracker(DataTracker tracker) {
         this.tracker = tracker;
     }
 
-    DataTracker tracker;
-    int totalRead;
+    private DataTracker tracker;
+    private int totalRead;
     @Override
     public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
         if (bb != null)

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -131,7 +131,6 @@ public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
         sink.setWriteableCallback(new WritableCallback() {
             @Override
             public void onWriteable() {
-                dataCallback.onDataAvailable(emitter, new ByteBufferList());
                 emitter.resume();
             }
         });

File: AndroidAsync/src/com/koushikdutta/async/http/cache/RawHeaders.java
Patch:
@@ -44,7 +44,7 @@
  * <p>This class trims whitespace from values. It never returns values with
  * leading or trailing whitespace.
  */
-public final class RawHeaders {
+final class RawHeaders {
     private static final Comparator<String> FIELD_NAME_COMPARATOR = new Comparator<String>() {
         @Override public int compare(String a, String b) {
             if (a == b) {

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ContentLengthFilter.java
Patch:
@@ -12,7 +12,7 @@ public ContentLengthFilter(long contentLength) {
     @Override
     protected void report(Exception e) {
         if (e == null && totalRead != contentLength)
-            e = new PrematureDataEndException("End of data reached before content length was read");
+            e = new PrematureDataEndException("End of data reached before content length was read: " + totalRead + "/" + contentLength + " Paused: " + isPaused());
         super.report(e);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerRequest.java
Patch:
@@ -2,14 +2,14 @@
 
 import com.koushikdutta.async.AsyncSocket;
 import com.koushikdutta.async.DataEmitter;
+import com.koushikdutta.async.http.Headers;
 import com.koushikdutta.async.http.Multimap;
 import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
-import com.koushikdutta.async.http.cache.RawHeaders;
 
 import java.util.regex.Matcher;
 
 public interface AsyncHttpServerRequest extends DataEmitter {
-    public RawHeaders getHeaders();
+    public Headers getHeaders();
     public Matcher getMatcher();
     public AsyncHttpRequestBody getBody();
     public AsyncSocket getSocket();

File: AndroidAsync/src/com/koushikdutta/async/http/spdy/SpdyMiddleware.java
Patch:
@@ -8,7 +8,7 @@
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.AsyncSSLEngineConfigurator;
 import com.koushikdutta.async.http.AsyncSSLSocketMiddleware;
-import com.koushikdutta.async.http.spdy.okhttp.Protocol;
+import com.koushikdutta.async.http.Protocol;
 import com.koushikdutta.async.util.Charsets;
 
 import java.lang.reflect.Field;

File: AndroidAsync/test/src/com/koushikdutta/async/test/Issue59.java
Patch:
@@ -29,7 +29,7 @@ public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerRespo
                     // setting this to empty is a hacky way of telling the framework not to use
                     // transfer-encoding. It will get removed.
                     response.getHeaders().set("Transfer-Encoding", "");
-                    response.responseCode(200);
+                    response.code(200);
                     Util.writeAll(response, "foobarbeepboop".getBytes(), new CompletedCallback() {
                         @Override
                         public void onCompleted(Exception ex) {

File: AndroidAsync/test/src/com/koushikdutta/async/test/OkHttpTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.http.spdy.okhttp.Handshake;
-import com.koushikdutta.async.http.spdy.okhttp.Protocol;
+import com.koushikdutta.async.http.Protocol;
 import com.koushikdutta.async.util.Charsets;
 
 import org.conscrypt.OpenSSLProvider;

File: AndroidAsync/test/src/com/koushikdutta/async/test/WebSocketTests.java
Patch:
@@ -4,9 +4,9 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.AsyncHttpClient.WebSocketConnectCallback;
+import com.koushikdutta.async.http.Headers;
 import com.koushikdutta.async.http.WebSocket;
 import com.koushikdutta.async.http.WebSocket.StringCallback;
-import com.koushikdutta.async.http.cache.RawHeaders;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServer.WebSocketRequestCallback;
 
@@ -34,7 +34,7 @@ public void onCompleted(Exception ex) {
     
         httpServer.websocket("/ws", new WebSocketRequestCallback() {
             @Override
-            public void onConnected(final WebSocket webSocket, RawHeaders headers) {
+            public void onConnected(final WebSocket webSocket, Headers headers) {
                 webSocket.setStringCallback(new StringCallback() {
                     @Override
                     public void onStringAvailable(String s) {

File: AndroidAsync/src/com/koushikdutta/async/BufferedDataEmitter.java
Patch:
@@ -32,7 +32,7 @@ public void onDataAvailable() {
         if (mDataCallback != null && !mPaused && mBuffers.remaining() > 0)
             mDataCallback.onDataAvailable(this, mBuffers);
         
-        if (mEnded && mBuffers.remaining() == 0)
+        if (mEnded && mBuffers.remaining() == 0 && mEndCallback != null)
             mEndCallback.onCompleted(mEndException);
     }
     

File: AndroidAsync/src/com/koushikdutta/async/BufferedDataEmitter.java
Patch:
@@ -32,7 +32,7 @@ public void onDataAvailable() {
         if (mDataCallback != null && !mPaused && mBuffers.remaining() > 0)
             mDataCallback.onDataAvailable(this, mBuffers);
         
-        if (mEnded && mBuffers.remaining() == 0)
+        if (mEnded && mBuffers.remaining() == 0 && mEndCallback != null)
             mEndCallback.onCompleted(mEndException);
     }
     

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocket.java
Patch:
@@ -2,6 +2,9 @@
 
 import java.security.cert.X509Certificate;
 
+import javax.net.ssl.SSLEngine;
+
 public interface AsyncSSLSocket extends AsyncSocket {
     public X509Certificate[] getPeerCertificates();
+    public SSLEngine getSSLEngine();
 }

File: AndroidAsync/src/com/koushikdutta/async/ZipDataSink.java
Patch:
@@ -50,7 +50,7 @@ public ByteBufferList filter(ByteBufferList bb) {
             if (bb != null) {
                 while (bb.size() > 0) {
                     ByteBuffer b = bb.remove();
-                    zop.write(b.array(), b.arrayOffset() + b.position(), b.remaining());
+                    ByteBufferList.writeOutputStream(zop, b);
                     ByteBufferList.reclaim(b);
                 }
             }

File: AndroidAsync/src/com/koushikdutta/async/util/Allocator.java
Patch:
@@ -40,8 +40,9 @@ public int getMinAlloc() {
         return minAlloc;
     }
 
-    public void setMinAlloc(int minAlloc ) {
+    public Allocator setMinAlloc(int minAlloc ) {
         this.minAlloc = minAlloc;
+        return this;
     }
 }
 

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -278,6 +278,7 @@ public void setDataEmitter(DataEmitter emitter) {
                             newReq.LOGTAG = request.LOGTAG;
                             newReq.proxyHost = request.proxyHost;
                             newReq.proxyPort = request.proxyPort;
+                            newReq.useAndroidProxy = request.useAndroidProxy;
                             copyHeader(request, newReq, "User-Agent");
                             copyHeader(request, newReq, "Range");
                             request.logi("Redirecting");

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -99,9 +99,9 @@ public void onCompleted(Exception error) {
             }
         }
     };
-    
+
     protected abstract void onHeadersReceived();
-    
+
     StringCallback mHeaderCallback = new StringCallback() {
         private RawHeaders mRawHeaders = new RawHeaders();
         @Override

File: AndroidAsync/src/com/koushikdutta/async/http/HttpUtil.java
Patch:
@@ -35,7 +35,7 @@ public static AsyncHttpRequestBody getBody(DataEmitter emitter, CompletedCallbac
                     return new StringBody();
                 }
                 if (MultipartFormDataBody.CONTENT_TYPE.equals(ct)) {
-                    return new MultipartFormDataBody(contentType, values);
+                    return new MultipartFormDataBody(values);
                 }
             }
         }

File: AndroidAsync/src/com/koushikdutta/async/http/ResponseCacheMiddleware.java
Patch:
@@ -219,6 +219,7 @@ public void onBodyDecoder(OnBodyData data) {
         if (cacheData != null) {
             if (cacheData.cachedResponseHeaders.validate(data.headers)) {
                 data.request.logi("Serving response from conditional cache");
+                data.headers.getHeaders().removeAll("Content-Length");
                 data.headers = cacheData.cachedResponseHeaders.combine(data.headers);
                 data.headers.getHeaders().setStatusLine(cacheData.cachedResponseHeaders.getHeaders().getStatusLine());
 

File: AndroidAsync/src/com/koushikdutta/async/http/body/Part.java
Patch:
@@ -24,8 +24,8 @@ public String getName() {
         return mContentDisposition.getString("name");
     }
     
-    private int length = -1;
-    public Part(String name, int length, List<NameValuePair> contentDisposition) {
+    private long length = -1;
+    public Part(String name, long length, List<NameValuePair> contentDisposition) {
         this.length = length;
         mHeaders = new RawHeaders();
         StringBuilder builder = new StringBuilder(String.format("form-data; name=\"%s\"", name));
@@ -61,7 +61,7 @@ public boolean isFile() {
         return mContentDisposition.containsKey("filename");
     }
     
-    public int length() {
+    public long length() {
         return length;
     }
     

File: AndroidAsync/src/com/koushikdutta/async/http/body/StreamPart.java
Patch:
@@ -10,7 +10,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 
 public abstract class StreamPart extends Part {
-    public StreamPart(String name, int length, List<NameValuePair> contentDisposition) {
+    public StreamPart(String name, long length, List<NameValuePair> contentDisposition) {
         super(name, length, contentDisposition);
     }
     

File: AndroidAsync/src/com/koushikdutta/async/http/filter/InflaterInputFilter.java
Patch:
@@ -14,6 +14,7 @@ public class InflaterInputFilter extends FilteredDataEmitter {
 
     @Override
     protected void report(Exception e) {
+        mInflater.end();
         if (e != null && mInflater.getRemaining() > 0) {
             e = new DataRemainingException("data still remaining in inflater", e);
         }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -223,7 +223,7 @@ public void listenSecure(final int port, final SSLContext sslContext) {
         AsyncServer.getDefault().listen(null, port, new ListenCallback() {
             @Override
             public void onAccepted(AsyncSocket socket) {
-                AsyncSSLSocketWrapper sslSocket = new AsyncSSLSocketWrapper(socket, null, port, sslContext, null, null, false);
+                AsyncSSLSocketWrapper sslSocket = new AsyncSSLSocketWrapper(socket, null, port, sslContext, null, null, false, null);
                 mListenCallback.onAccepted(sslSocket);
             }
 

File: AndroidAsync/src/com/koushikdutta/async/http/HybiParser.java
Patch:
@@ -432,7 +432,7 @@ private void emitFrame() throws IOException {
             }
 
         } else if (opcode == OP_CLOSE) {
-            int    code   = (payload.length >= 2) ? 256 * payload[0] + payload[1] : 0;
+            int    code   = (payload.length >= 2) ? 256 * (payload[0] & 0xFF) + (payload[1] & 0xFF) : 0;
             String reason = (payload.length >  2) ? encode(slice(payload, 2))     : null;
 //            Log.d(TAG, "Got close op! " + code + " " + reason);
             onDisconnect(code, reason);
@@ -509,4 +509,4 @@ private static long byteArrayToLong(byte[] b, int offset, int length) {
         return value;
     }
 
-}
\ No newline at end of file
+}

File: AndroidAsync/src/com/koushikdutta/async/http/HybiParser.java
Patch:
@@ -432,7 +432,7 @@ private void emitFrame() throws IOException {
             }
 
         } else if (opcode == OP_CLOSE) {
-            int    code   = (payload.length >= 2) ? 256 * payload[0] + payload[1] : 0;
+            int    code   = (payload.length >= 2) ? 256 * (payload[0] & 0xFF) + (payload[1] & 0xFF) : 0;
             String reason = (payload.length >  2) ? encode(slice(payload, 2))     : null;
 //            Log.d(TAG, "Got close op! " + code + " " + reason);
             onDisconnect(code, reason);
@@ -509,4 +509,4 @@ private static long byteArrayToLong(byte[] b, int offset, int length) {
         return value;
     }
 
-}
\ No newline at end of file
+}

File: AndroidAsync/src/com/koushikdutta/async/PushParser.java
Patch:
@@ -360,7 +360,6 @@ static Method getTap(TapCallback callback) {
                     "}\n";
 
         //null != "AndroidAsync: tap callback could not be found. Proguard? Use this in your proguard config:\n" + fail;
-        assert false;
-        return null;
+        throw new AssertionError(fail);
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSSLSocketMiddleware.java
Patch:
@@ -95,8 +95,8 @@ public void onStringAvailable(String s) {
                                 socket.setEndCallback(new CompletedCallback() {
                                     @Override
                                     public void onCompleted(Exception ex) {
-                                        if (!socket.isOpen())
-                                            ex = new IOException("socket closed before proxy connect response", ex);
+                                        if (!socket.isOpen() && ex == null)
+                                            ex = new IOException("socket closed before proxy connect response");
                                         callback.onConnectCompleted(ex, socket);
                                     }
                                 });

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSSLSocketMiddleware.java
Patch:
@@ -95,7 +95,7 @@ public void onStringAvailable(String s) {
                                     @Override
                                     public void onCompleted(Exception ex) {
                                         if (!socket.isOpen())
-                                            ex = new IOException("socket closed before proxy connect response");
+                                            ex = new IOException("socket closed before proxy connect response", ex);
                                         callback.onConnectCompleted(ex, socket);
                                     }
                                 });

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -109,6 +109,7 @@ public boolean cancel() {
 
     private void reportConnectedCompleted(FutureAsyncHttpResponse cancel, Exception ex, AsyncHttpResponseImpl response, AsyncHttpRequest request, final HttpConnectCallback callback) {
         assert callback != null;
+        mServer.removeAllCallbacks(cancel.scheduled);
         boolean complete;
         if (ex != null) {
             request.loge("Connection error", ex);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -535,7 +535,7 @@ public void onCompleted(Exception ex) {
         return ret;
     }
 
-    private <T> SimpleFuture<T> execute(AsyncHttpRequest req, final AsyncParser<T> parser, final RequestCallback<T> callback) {
+    public <T> SimpleFuture<T> execute(AsyncHttpRequest req, final AsyncParser<T> parser, final RequestCallback<T> callback) {
         final FutureAsyncHttpResponse cancel = new FutureAsyncHttpResponse();
         final SimpleFuture<T> ret = new SimpleFuture<T>();
         execute(req, 0, cancel, new HttpConnectCallback() {

File: AndroidAsyncSample/src/com/koushikdutta/async/sample/MainActivity.java
Patch:
@@ -24,6 +24,7 @@
 import android.widget.Toast;
 
 import com.koushikdutta.async.http.AsyncHttpClient;
+import com.koushikdutta.async.http.AsyncHttpGet;
 import com.koushikdutta.async.http.AsyncHttpPost;
 import com.koushikdutta.async.http.AsyncHttpResponse;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
@@ -88,7 +89,7 @@ public boolean onMenuItemClick(MenuItem item) {
     }
 
     private void getFile(final ImageView iv, String url, final String filename) {
-        AsyncHttpClient.getDefaultInstance().get(url, filename, new AsyncHttpClient.FileCallback() {
+        AsyncHttpClient.getDefaultInstance().executeFile(new AsyncHttpGet(url), filename, new AsyncHttpClient.FileCallback() {
             @Override
             public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                 if (e != null) {
@@ -118,7 +119,7 @@ private void getChartFile() {
         try {
             AsyncHttpPost post = new AsyncHttpPost("http://chart.googleapis.com/chart");
             post.setBody(writer);
-            AsyncHttpClient.getDefaultInstance().execute(post, filename, new AsyncHttpClient.FileCallback() {
+            AsyncHttpClient.getDefaultInstance().executeFile(post, filename, new AsyncHttpClient.FileCallback() {
                 @Override
                 public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                     if (e != null) {

File: AndroidAsyncTest/src/com/koushikdutta/async/test/DnsTests.java
Patch:
@@ -19,6 +19,7 @@
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.MulticastSocket;
+import java.net.UnknownHostException;
 import java.nio.channels.DatagramChannel;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
@@ -82,11 +83,11 @@ public void testNoDomain() throws Exception {
             server.connectSocket("www.clockworkmod-notfound.com", 8080, new ConnectCallback() {
                 @Override
                 public void onConnectCompleted(Exception ex, AsyncSocket socket) {
-                    assertNotNull(ex);
+                    assertTrue(ex instanceof UnknownHostException);
                     semaphore.release();
                 }
             });
-            semaphore.tryAcquire(10000, TimeUnit.MILLISECONDS);
+            assertTrue(semaphore.tryAcquire(5000, TimeUnit.MILLISECONDS));
         }
         finally {
             server.stop();

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -154,7 +154,7 @@ private static long getTimeoutRemaining(AsyncHttpRequest request) {
     private static void copyHeader(AsyncHttpRequest from, AsyncHttpRequest to, String header) {
         String value = from.getHeaders().getHeaders().get(header);
         if (!TextUtils.isEmpty(value))
-            to.getHeaders().getHeaders().set("User-Agent", value);
+            to.getHeaders().getHeaders().set(header, value);
     }
 
     private void executeAffinity(final AsyncHttpRequest request, final int redirectCount, final FutureAsyncHttpResponse cancel, final HttpConnectCallback callback) {

File: AndroidAsyncTest/src/com/koushikdutta/async/test/CacheTests.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.http.AsyncHttpClient;
+import com.koushikdutta.async.http.AsyncHttpGet;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
 import com.koushikdutta.async.http.libcore.DiskLruCache;
 import com.koushikdutta.async.http.libcore.HttpDate;
@@ -39,9 +40,9 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
             // clear the old cache
             cache.clear();
 
-            client.getString("http://localhost:5555/uname/43434").get();
+            client.executeString(new AsyncHttpGet("http://localhost:5555/uname/43434"), null).get();
 
-            client.getString("http://localhost:5555/uname/43434").get();
+            client.executeString(new AsyncHttpGet("http://localhost:5555/uname/43434"), null).get();
 
 
             assertEquals(cache.getCacheHitCount(), 1);

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpServerTests.java
Patch:
@@ -93,15 +93,15 @@ public void testJSONObject() throws Exception {
         JSONObjectBody body = new JSONObjectBody(json);
         AsyncHttpPost post = new AsyncHttpPost("http://localhost:5000/echo");
         post.setBody(body);
-        json = AsyncHttpClient.getDefaultInstance().executeJSONObject(post).get();
+        json = AsyncHttpClient.getDefaultInstance().executeJSONObject(post, null).get();
         assertEquals(json.getString("foo"), "bar");
     }
 
     public void testString() throws Exception {
         StringBody body = new StringBody("bar");
         AsyncHttpPost post = new AsyncHttpPost("http://localhost:5000/echo");
         post.setBody(body);
-        JSONObject json = AsyncHttpClient.getDefaultInstance().executeJSONObject(post).get();
+        JSONObject json = AsyncHttpClient.getDefaultInstance().executeJSONObject(post, null).get();
         assertEquals(json.getString("foo"), "bar");
     }
 

File: AndroidAsyncTest/src/com/koushikdutta/async/test/Issue59.java
Patch:
@@ -46,7 +46,7 @@ public void onCompleted(Exception ex) {
             get.getHeaders().getHeaders().removeAll("Connection");
             get.getHeaders().getHeaders().removeAll("Accept-Encoding");
 
-            assertEquals("foobarbeepboop", AsyncHttpClient.getDefaultInstance().executeString(get).get(1000, TimeUnit.MILLISECONDS));
+            assertEquals("foobarbeepboop", AsyncHttpClient.getDefaultInstance().executeString(get, null).get(1000, TimeUnit.MILLISECONDS));
         }
         finally {
             httpServer.stop();

File: AndroidAsyncTest/src/com/koushikdutta/async/test/MultipartTests.java
Patch:
@@ -99,7 +99,7 @@ public void testUpload() throws Exception {
         body.addStringPart("baz", FIELD_VAL);
         post.setBody(body);
 
-        Future<String> ret = AsyncHttpClient.getDefaultInstance().execute(post, new StringCallback() {
+        Future<String> ret = AsyncHttpClient.getDefaultInstance().executeString(post, new StringCallback() {
             @Override
             public void onCompleted(Exception e, AsyncHttpResponse source, String result) {
             }

File: AndroidAsyncTest/src/com/koushikdutta/async/test/RedirectTests.java
Patch:
@@ -66,19 +66,19 @@ protected void tearDown() throws Exception {
 
     public void testRelativeRedirect() throws Exception {
         String ret = AsyncHttpClient.getDefaultInstance()
-        .executeString(new AsyncHttpGet("http://localhost:6003/foo/bar"))
+        .executeString(new AsyncHttpGet("http://localhost:6003/foo/bar"), null)
         .get();
 
         assertEquals(ret, "SUCCESS!");
 
         ret = AsyncHttpClient.getDefaultInstance()
-        .executeString(new AsyncHttpGet("http://localhost:6003/foo"))
+        .executeString(new AsyncHttpGet("http://localhost:6003/foo"), null)
         .get();
 
         assertEquals(ret, "BORAT!");
 
         ret = AsyncHttpClient.getDefaultInstance()
-        .executeString(new AsyncHttpGet("http://localhost:6003/foo/poo"))
+        .executeString(new AsyncHttpGet("http://localhost:6003/foo/poo"), null)
         .get();
 
         assertEquals(ret, "SWEET!");

File: AndroidAsyncTest/src/com/koushikdutta/async/test/SSLTests.java
Patch:
@@ -3,6 +3,7 @@
 import android.test.AndroidTestCase;
 
 import com.koushikdutta.async.http.AsyncHttpClient;
+import com.koushikdutta.async.http.AsyncHttpGet;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
@@ -47,6 +48,6 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
 
         AsyncHttpClient.getDefaultInstance().getSSLSocketMiddleware().setSSLContext(sslContext);
         AsyncHttpClient.getDefaultInstance().getSSLSocketMiddleware().setTrustManagers(tmf.getTrustManagers());
-        AsyncHttpClient.getDefaultInstance().getString("https://localhost:8888/").get();
+        AsyncHttpClient.getDefaultInstance().executeString(new AsyncHttpGet("https://localhost:8888/"), null).get();
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/SocketIOConnection.java
Patch:
@@ -140,7 +140,7 @@ public void onCompleted(Exception e, WebSocket result) {
                     final String sessionUrl = Uri.parse(request.getUri().toString()).buildUpon()
                             .appendPath("xhr-polling").appendPath(session)
                             .build().toString();
-                    XHRPollingTransport xhrPolling = new XHRPollingTransport(sessionUrl);
+                    XHRPollingTransport xhrPolling = new XHRPollingTransport(httpClient, sessionUrl);
                     transport.setComplete(xhrPolling);
                 } else {
                     throw new SocketIOException("transport not supported");

File: AndroidAsyncTest/src/com/koushikdutta/async/test/SocketIOTests.java
Patch:
@@ -173,7 +173,7 @@ public void onString(String string, Acknowledge acknowledge) {
                             @Override
                             public void run() {
                                 // this will trigger a reconnect
-                                client.getWebSocket().close();
+                                client.getTransport().disconnect();
                             }
                         }, 200);
                     }

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/SocketIOClient.java
Patch:
@@ -7,7 +7,7 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.http.AsyncHttpClient;
-import com.koushikdutta.async.http.WebSocket;
+import com.koushikdutta.async.http.socketio.transport.SocketIOTransport;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -199,7 +199,7 @@ public void reconnect() {
         connection.reconnect(null);
     }
 
-    public WebSocket getWebSocket() {
-        return connection.webSocket;
+    public SocketIOTransport getTransport() {
+        return connection.transport;
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -95,7 +95,7 @@ void initFirstWrite() {
         if (mContentLength < 0) {
             String contentLength = mRawHeaders.get("Content-Length");
             if (!TextUtils.isEmpty(contentLength))
-                mContentLength = Integer.valueOf(contentLength);
+                mContentLength = Long.valueOf(contentLength);
         }
         if (mContentLength < 0 && canUseChunked) {
             mRawHeaders.set("Transfer-Encoding", "Chunked");

File: AndroidAsync/src/com/koushikdutta/async/http/HttpUtil.java
Patch:
@@ -62,14 +62,14 @@ public void run() {
     }
     
     public static DataEmitter getBodyDecoder(DataEmitter emitter, RawHeaders headers, boolean server) {
-        int _contentLength;
+        long _contentLength;
         try {
-            _contentLength = Integer.parseInt(headers.get("Content-Length"));
+            _contentLength = Long.parseLong(headers.get("Content-Length"));
         }
         catch (Exception ex) {
             _contentLength = -1;
         }
-        final int contentLength = _contentLength;
+        final long contentLength = _contentLength;
         if (-1 != contentLength) {
             if (contentLength < 0) {
                 EndEmitter ender = EndEmitter.create(emitter.getServer(), new BodyDecoderException("not using chunked encoding, and no content-length found."));

File: AndroidAsync/src/com/koushikdutta/async/TapCallback.java
Patch:
@@ -1,5 +1,6 @@
 package com.koushikdutta.async;
 
 
-public class TapCallback {
+public interface TapCallback<T> {
+    public void tap(T data);
 }

File: AndroidAsync/src/com/koushikdutta/async/http/body/MultipartFormDataBody.java
Patch:
@@ -170,7 +170,7 @@ public void onContinue(Continuation continuation, CompletedCallback next) throws
         c.add(new ContinuationCallback() {
             @Override
             public void onContinue(Continuation continuation, CompletedCallback next) throws Exception {
-                byte[] bytes = (getBoundaryEnd() + "\r\n").getBytes();
+                byte[] bytes = (getBoundaryEnd()).getBytes();
                 com.koushikdutta.async.Util.writeAll(sink, bytes, next);
                 written += bytes.length;
                 
@@ -207,7 +207,7 @@ public int length() {
                 return -1;
             length += part.length() + part.getRawHeaders().toHeaderString().getBytes().length + "\r\n".length();
         }
-        length += (getBoundaryEnd() + "\r\n").getBytes().length;
+        length += (getBoundaryEnd()).getBytes().length;
         return totalToWrite = length;
     }
     

File: AndroidAsync/src/com/koushikdutta/async/http/body/MultipartFormDataBody.java
Patch:
@@ -207,7 +207,7 @@ public int length() {
                 return -1;
             length += part.length() + part.getRawHeaders().toHeaderString().getBytes().length + "\r\n".length();
         }
-        length += (getBoundaryEnd() + "\r\n").getBytes().length;
+        length += (getBoundaryEnd()).getBytes().length;
         return totalToWrite = length;
     }
     

File: AndroidAsync/src/com/koushikdutta/async/dns/Dns.java
Patch:
@@ -145,7 +145,7 @@ else if (type == 16) {
                 }
             }
             catch (Exception e) {
-                e.printStackTrace();
+//                e.printStackTrace();
             }
         }
 
@@ -164,7 +164,7 @@ else if (type == 16) {
                 bb.get(new byte[length]);
             }
             catch (Exception e) {
-                e.printStackTrace();
+//                e.printStackTrace();
             }
         }
 
@@ -190,7 +190,7 @@ else if (type == 16) {
                 }
             }
             catch (Exception e) {
-                e.printStackTrace();
+//                e.printStackTrace();
             }
         }
 

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -16,7 +16,6 @@
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.URI;
-import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Hashtable;
 

File: AndroidAsync/src/com/koushikdutta/async/http/body/UrlEncodedFormBody.java
Patch:
@@ -76,7 +76,7 @@ public void onCompleted(Exception ex) {
                     return;
                 }
                 try {
-                    mParameters = Multimap.parseQuery(data.readString());
+                    mParameters = Multimap.parseUrlEncoded(data.readString());
                     completed.onCompleted(null);
                 }
                 catch (Exception e) {

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -50,7 +50,7 @@ public static void pump(final InputStream is, final DataSink ds, final Completed
         pump(is, Integer.MAX_VALUE, ds, callback);
     }
 
-    public static void pump(final InputStream is, final int max, final DataSink ds, final CompletedCallback callback) {
+    public static void pump(final InputStream is, final long max, final DataSink ds, final CompletedCallback callback) {
         final CompletedCallback wrapper = new CompletedCallback() {
             boolean reported;
             @Override
@@ -88,8 +88,8 @@ public void onWriteable() {
                             ByteBufferList.reclaim(pending);
                             pending = ByteBufferList.obtain(Math.min(Math.max(mToAlloc, 2 << 11), maxAlloc));
 
-                            int toRead = Math.min(max - totalRead, pending.capacity());
-                            int read = is.read(pending.array(), 0, toRead);
+                            long toRead = Math.min(max - totalRead, pending.capacity());
+                            int read = is.read(pending.array(), 0, (int)toRead);
                             if (read == -1 || totalRead == max) {
                                 cleanup();
                                 wrapper.onCompleted(null);

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponse.java
Patch:
@@ -16,7 +16,7 @@ public interface AsyncHttpServerResponse extends DataSink, CompletedCallback {
     public void send(String string);
     public void send(JSONObject json);
     public void sendFile(File file);
-    public void sendStream(InputStream inputStream, int totalLength);
+    public void sendStream(InputStream inputStream, long totalLength);
     public void responseCode(int code);
     public ResponseHeaders getHeaders();
     public void writeHead();

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpClientTests.java
Patch:
@@ -37,7 +37,6 @@ public class HttpClientTests extends TestCase {
     
     public HttpClientTests() {
         super();
-        server.setAutostart(true);
         client = new AsyncHttpClient(server);
     }
 

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpClientTests.java
Patch:
@@ -180,7 +180,7 @@ public void testInsecureGithubRandomDataWithFuture() throws Exception {
     public void testInsecureGithubRandomDataWithFutureCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
         final Md5 md5 = Md5.createInstance();
-        client.executeByteBufferList(new AsyncHttpGet(githubInsecure).setHandler(null), null).setCallback(new FutureCallback<ByteBufferList>() {
+        client.executeByteBufferList(new AsyncHttpGet(githubInsecure), null).setCallback(new FutureCallback<ByteBufferList>() {
             @Override
             public void onCompleted(Exception e, ByteBufferList bb) {
                 md5.update(bb);
@@ -198,7 +198,7 @@ public void testGithubHelloWithFuture() throws Exception {
 
     public void testGithubHelloWithFutureCallback() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
-        client.executeString(new AsyncHttpGet("https://" + githubPath + "hello.txt").setHandler(null))
+        client.executeString(new AsyncHttpGet("https://" + githubPath + "hello.txt"))
         .setCallback(new FutureCallback<String>() {
             @Override
             public void onCompleted(Exception e, String result) {

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/Streams.java
Patch:
@@ -4,6 +4,8 @@
 import java.io.Reader;
 import java.io.StringWriter;
 
+import com.koushikdutta.async.util.StreamUtility;
+
 /** From libcore.io.Streams */
 class Streams {
     static String readFully(Reader reader) throws IOException {
@@ -16,7 +18,7 @@ static String readFully(Reader reader) throws IOException {
             }
             return writer.toString();
         } finally {
-            reader.close();
+            StreamUtility.closeQuietly(reader);
         }
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -30,7 +30,7 @@ public AsyncSocketMiddleware(AsyncHttpClient client, String scheme, int port) {
     }
     
     public int getSchemePort(URI uri) {
-        if (!uri.getScheme().equals(scheme))
+        if (uri.getScheme() == null || !uri.getScheme().equals(scheme))
             return -1;
         if (uri.getPort() == -1) {
             return port;

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -395,7 +395,7 @@ public void run() {
                 try {
                     final InetAddress[] result = InetAddress.getAllByName(host);
                     if (result == null || result.length == 0)
-                        throw new Exception("no addresses for host");
+                        throw new HostnameResolutionException("no addresses for host");
                     post(new Runnable() {
                         @Override
                         public void run() {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -152,7 +152,7 @@ private static long getTimeoutRemaining(AsyncHttpRequest request) {
     private void executeAffinity(final AsyncHttpRequest request, final int redirectCount, final FutureAsyncHttpResponse cancel, final HttpConnectCallback callback) {
         assert mServer.isAffinityThread();
         if (redirectCount > 15) {
-            reportConnectedCompleted(cancel, new Exception("too many redirects"), null, request, callback);
+            reportConnectedCompleted(cancel, new RedirectLimitExceededException("too many redirects"), null, request, callback);
             return;
         }
         final URI uri = request.getUri();
@@ -677,7 +677,7 @@ public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                 }
                 WebSocket ws = WebSocketImpl.finishHandshake(req.getHeaders().getHeaders(), response);
                 if (ws == null) {
-                    if (!ret.setComplete(new Exception("Unable to complete websocket handshake")))
+                    if (!ret.setComplete(new WebSocketHandshakeException("Unable to complete websocket handshake")))
                         return;
                 }
                 else {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -92,7 +92,7 @@ protected void onRequestCompleted(Exception ex) {
         @Override
         public void onCompleted(Exception error) {
             if (error != null && !mCompleted) {
-                report(new Exception("connection closed before response completed."));
+                report(new ConnectionClosedException("connection closed before response completed."));
             }
             else {
                 report(error);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -213,7 +213,7 @@ protected void transform(final InetAddress[] result) throws Exception {
                     public void onCompleted(Exception ex) {
                         // if it completed, that means that the connection failed
                         if (lastException == null)
-                            lastException = new Exception("Unable to connect to remote address");
+                            lastException = new ConnectionFailedException("Unable to connect to remote address");
                         setComplete(lastException);
                     }
                 });

File: AndroidAsync/src/com/koushikdutta/async/http/HttpUtil.java
Patch:
@@ -72,7 +72,7 @@ public static DataEmitter getBodyDecoder(DataEmitter emitter, RawHeaders headers
         final int contentLength = _contentLength;
         if (-1 != contentLength) {
             if (contentLength < 0) {
-                EndEmitter ender = EndEmitter.create(emitter.getServer(), new Exception("not using chunked encoding, and no content-length found."));
+                EndEmitter ender = EndEmitter.create(emitter.getServer(), new BodyDecoderException("not using chunked encoding, and no content-length found."));
                 ender.setDataEmitter(emitter);
                 emitter = ender;
                 return emitter;

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ChunkedInputFilter.java
Patch:
@@ -22,7 +22,7 @@ private static enum State {
     
     private boolean checkByte(char b, char value) {
         if (b != value) {
-            report(new Exception(value + " was expeceted, got " + (char)b));
+            report(new ChunkedDataException(value + " was expected, got " + (char)b));
             return false;
         }
         return true;
@@ -39,7 +39,7 @@ private boolean checkCR(char b) {
     @Override
     protected void report(Exception e) {
         if (e == null && mState != State.COMPLETE)
-            e = new Exception("chunked input ended before final chunk");
+            e = new ChunkedDataException("chunked input ended before final chunk");
         super.report(e);
     }
 
@@ -62,7 +62,7 @@ else if (c >= '0' && c <= '9')
                         else if (c >= 'A' && c <= 'F')
                             mChunkLength += (c - 'A' + 10);
                         else {
-                            report(new Exception("invalid chunk length: " + c));
+                            report(new ChunkedDataException("invalid chunk length: " + c));
                             return;
                         }
                     }

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ContentLengthFilter.java
Patch:
@@ -12,7 +12,7 @@ public ContentLengthFilter(int contentLength) {
     @Override
     protected void report(Exception e) {
         if (e == null && totalRead != contentLength)
-            e = new Exception("End of data reached before content length was read");
+            e = new PrematureDataEndException("End of data reached before content length was read");
         super.report(e);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/filter/InflaterInputFilter.java
Patch:
@@ -15,7 +15,7 @@ public class InflaterInputFilter extends FilteredDataEmitter {
     @Override
     protected void report(Exception e) {
         if (e != null && mInflater.getRemaining() > 0) {
-            e = new Exception("data still remaining in inflater", e);
+            e = new DataRemainingException("data still remaining in inflater", e);
         }
         super.report(e);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -227,7 +227,7 @@ public void sendStream(InputStream inputStream, int totalLength) {
             parts = parts[1].split("-");
             try {
                 if (parts.length > 2)
-                    throw new Exception();
+                    throw new MalformedRangeException();
                 if (!TextUtils.isEmpty(parts[0]))
                     start = Integer.parseInt(parts[0]);
                 if (parts.length == 2 && !TextUtils.isEmpty(parts[1]))
@@ -246,7 +246,7 @@ public void sendStream(InputStream inputStream, int totalLength) {
         }
         try {
             if (start != inputStream.skip(start))
-                throw new Exception("skip failed to skip requested amount");
+                throw new StreamSkipException("skip failed to skip requested amount");
             mContentLength = end - start + 1;
             mRawHeaders.set("Content-Length", "" + mContentLength);
             mRawHeaders.set("Accept-Ranges", "bytes");

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/SocketIOConnection.java
Patch:
@@ -121,7 +121,7 @@ protected void transform(String result) throws Exception {
                 String[] transports = transportsLine.split(",");
                 HashSet<String> set = new HashSet<String>(Arrays.asList(transports));
                 if (!set.contains("websocket"))
-                    throw new Exception("websocket not supported");
+                    throw new SocketIOException("websocket not supported");
 
                 final String sessionUrl = request.getUri().toString() + "websocket/" + session + "/";
 
@@ -399,7 +399,7 @@ public void onStringAvailable(String message) {
                             // noop
                             break;
                         default:
-                            throw new Exception("unknown code");
+                            throw new SocketIOException("unknown code");
                     }
                 }
                 catch (Exception ex) {

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -395,7 +395,7 @@ public void run() {
                 try {
                     final InetAddress[] result = InetAddress.getAllByName(host);
                     if (result == null || result.length == 0)
-                        throw new Exception("no addresses for host");
+                        throw new HostnameResolutionException("no addresses for host");
                     post(new Runnable() {
                         @Override
                         public void run() {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -152,7 +152,7 @@ private static long getTimeoutRemaining(AsyncHttpRequest request) {
     private void executeAffinity(final AsyncHttpRequest request, final int redirectCount, final FutureAsyncHttpResponse cancel, final HttpConnectCallback callback) {
         assert mServer.isAffinityThread();
         if (redirectCount > 15) {
-            reportConnectedCompleted(cancel, new Exception("too many redirects"), null, request, callback);
+            reportConnectedCompleted(cancel, new RedirectLimitExceededException("too many redirects"), null, request, callback);
             return;
         }
         final URI uri = request.getUri();
@@ -677,7 +677,7 @@ public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                 }
                 WebSocket ws = WebSocketImpl.finishHandshake(req.getHeaders().getHeaders(), response);
                 if (ws == null) {
-                    if (!ret.setComplete(new Exception("Unable to complete websocket handshake")))
+                    if (!ret.setComplete(new WebSocketHandshakeException("Unable to complete websocket handshake")))
                         return;
                 }
                 else {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -92,7 +92,7 @@ protected void onRequestCompleted(Exception ex) {
         @Override
         public void onCompleted(Exception error) {
             if (error != null && !mCompleted) {
-                report(new Exception("connection closed before response completed."));
+                report(new ConnectionClosedException("connection closed before response completed."));
             }
             else {
                 report(error);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -213,7 +213,7 @@ protected void transform(final InetAddress[] result) throws Exception {
                     public void onCompleted(Exception ex) {
                         // if it completed, that means that the connection failed
                         if (lastException == null)
-                            lastException = new Exception("Unable to connect to remote address");
+                            lastException = new ConnectionFailedException("Unable to connect to remote address");
                         setComplete(lastException);
                     }
                 });

File: AndroidAsync/src/com/koushikdutta/async/http/HttpUtil.java
Patch:
@@ -72,7 +72,7 @@ public static DataEmitter getBodyDecoder(DataEmitter emitter, RawHeaders headers
         final int contentLength = _contentLength;
         if (-1 != contentLength) {
             if (contentLength < 0) {
-                EndEmitter ender = EndEmitter.create(emitter.getServer(), new Exception("not using chunked encoding, and no content-length found."));
+                EndEmitter ender = EndEmitter.create(emitter.getServer(), new BodyDecoderException("not using chunked encoding, and no content-length found."));
                 ender.setDataEmitter(emitter);
                 emitter = ender;
                 return emitter;

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ChunkedInputFilter.java
Patch:
@@ -22,7 +22,7 @@ private static enum State {
     
     private boolean checkByte(char b, char value) {
         if (b != value) {
-            report(new Exception(value + " was expeceted, got " + (char)b));
+            report(new ChunkedDataException(value + " was expected, got " + (char)b));
             return false;
         }
         return true;
@@ -39,7 +39,7 @@ private boolean checkCR(char b) {
     @Override
     protected void report(Exception e) {
         if (e == null && mState != State.COMPLETE)
-            e = new Exception("chunked input ended before final chunk");
+            e = new ChunkedDataException("chunked input ended before final chunk");
         super.report(e);
     }
 
@@ -62,7 +62,7 @@ else if (c >= '0' && c <= '9')
                         else if (c >= 'A' && c <= 'F')
                             mChunkLength += (c - 'A' + 10);
                         else {
-                            report(new Exception("invalid chunk length: " + c));
+                            report(new ChunkedDataException("invalid chunk length: " + c));
                             return;
                         }
                     }

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ContentLengthFilter.java
Patch:
@@ -12,7 +12,7 @@ public ContentLengthFilter(int contentLength) {
     @Override
     protected void report(Exception e) {
         if (e == null && totalRead != contentLength)
-            e = new Exception("End of data reached before content length was read");
+            e = new PrematureDataEndException("End of data reached before content length was read");
         super.report(e);
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/filter/InflaterInputFilter.java
Patch:
@@ -15,7 +15,7 @@ public class InflaterInputFilter extends FilteredDataEmitter {
     @Override
     protected void report(Exception e) {
         if (e != null && mInflater.getRemaining() > 0) {
-            e = new Exception("data still remaining in inflater", e);
+            e = new DataRemainingException("data still remaining in inflater", e);
         }
         super.report(e);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -227,7 +227,7 @@ public void sendStream(InputStream inputStream, int totalLength) {
             parts = parts[1].split("-");
             try {
                 if (parts.length > 2)
-                    throw new Exception();
+                    throw new MalformedRangeException();
                 if (!TextUtils.isEmpty(parts[0]))
                     start = Integer.parseInt(parts[0]);
                 if (parts.length == 2 && !TextUtils.isEmpty(parts[1]))
@@ -246,7 +246,7 @@ public void sendStream(InputStream inputStream, int totalLength) {
         }
         try {
             if (start != inputStream.skip(start))
-                throw new Exception("skip failed to skip requested amount");
+                throw new StreamSkipException("skip failed to skip requested amount");
             mContentLength = end - start + 1;
             mRawHeaders.set("Content-Length", "" + mContentLength);
             mRawHeaders.set("Accept-Ranges", "bytes");

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/SocketIOConnection.java
Patch:
@@ -121,7 +121,7 @@ protected void transform(String result) throws Exception {
                 String[] transports = transportsLine.split(",");
                 HashSet<String> set = new HashSet<String>(Arrays.asList(transports));
                 if (!set.contains("websocket"))
-                    throw new Exception("websocket not supported");
+                    throw new SocketIOException("websocket not supported");
 
                 final String sessionUrl = request.getUri().toString() + "websocket/" + session + "/";
 
@@ -399,7 +399,7 @@ public void onStringAvailable(String message) {
                             // noop
                             break;
                         default:
-                            throw new Exception("unknown code");
+                            throw new SocketIOException("unknown code");
                     }
                 }
                 catch (Exception ex) {

File: AndroidAsync/src/com/koushikdutta/async/AsyncNetworkSocket.java
Patch:
@@ -45,7 +45,7 @@ ChannelWrapper getChannel() {
     }
     
     public void onDataWritable() {
-        assert mWriteableHandler != null;
+//        assert mWriteableHandler != null;
         if (mWriteableHandler != null)
             mWriteableHandler.onWriteable();
     }
@@ -295,6 +295,7 @@ public void run() {
         
         if (mPaused)
             return;
+
         mPaused = true;
         try {
             mKey.interestOps(~SelectionKey.OP_READ & mKey.interestOps());

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -154,7 +154,6 @@ public void get(ByteBufferList into, int length) {
                 mBuffers.addFirst(b);
                 assert subset.capacity() >= need;
                 assert subset.position() == 0;
-                assert into.remaining() == length;
                 break;
             }
             else {
@@ -187,7 +186,7 @@ public ByteBuffer getAll() {
 
     private ByteBuffer read(int count) {
         if (remaining() < count)
-            throw new IllegalArgumentException("count");
+            throw new IllegalArgumentException("count : " + remaining() + "/" + count);
 
         ByteBuffer first = mBuffers.peek();
         while (first != null && !first.hasRemaining()) {
@@ -421,7 +420,6 @@ public static void reclaim(ByteBuffer b) {
 
     public static ByteBuffer obtain(int size) {
         if (size <= maxItem) {
-            assert Thread.currentThread() != Looper.getMainLooper().getThread();
             PriorityQueue<ByteBuffer> r = getReclaimed();
             if (r != null) {
                 synchronized (LOCK) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -116,7 +116,7 @@ private void reportConnectedCompleted(FutureAsyncHttpResponse cancel, Exception
         }
         if (complete) {
             callback.onConnectCompleted(ex, response);
-            assert ex != null || response.getSocket() == null || response.getDataCallback() != null;
+            assert ex != null || response.getSocket() == null || response.getDataCallback() != null || response.isPaused();
             return;
         }
 
@@ -191,6 +191,7 @@ public void run() {
         data.connectCallback = new ConnectCallback() {
             @Override
             public void onConnectCompleted(Exception ex, AsyncSocket socket) {
+                request.logv("socket connected");
                 if (cancel.isCancelled()) {
                     if (socket != null)
                         socket.close();
@@ -221,6 +222,7 @@ public void onConnectCompleted(Exception ex, AsyncSocket socket) {
                 final AsyncHttpResponseImpl ret = new AsyncHttpResponseImpl(request) {
                     @Override
                     protected void onRequestCompleted(Exception ex) {
+                        request.logv("request completed");
                         if (cancel.isCancelled())
                             return;
                         // 5) after request is sent, set a header timeout

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpClientTests.java
Patch:
@@ -271,7 +271,7 @@ public void onProgress(AsyncHttpResponse response, int downloaded, int total) {
         .setCallback(new FutureCallback<File>() {
             @Override
             public void onCompleted(Exception e, File result) {
-                fail();
+                assertTrue(e instanceof CancellationException);
             }
         });
 

File: AndroidAsync/src/com/koushikdutta/async/parser/DocumentParser.java
Patch:
@@ -7,8 +7,6 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.TransformFuture;
 import com.koushikdutta.async.http.body.DocumentBody;
-import com.koushikdutta.async.parser.AsyncParser;
-import com.koushikdutta.async.parser.ByteBufferListParser;
 import com.koushikdutta.async.stream.ByteBufferListInputStream;
 
 import org.w3c.dom.Document;

File: AndroidAsync/src/com/koushikdutta/async/http/body/FilePart.java
Patch:
@@ -17,9 +17,9 @@ public FilePart(String name, final File file) {
                 add(new BasicNameValuePair("filename", file.getName()));
             }
         });
-        
+
 //        getRawHeaders().set("Content-Type", "application/xml");
-        
+
         this.file = file;
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/body/FilePart.java
Patch:
@@ -17,9 +17,9 @@ public FilePart(String name, final File file) {
                 add(new BasicNameValuePair("filename", file.getName()));
             }
         });
-        
+
 //        getRawHeaders().set("Content-Type", "application/xml");
-        
+
         this.file = file;
     }
 

File: AndroidAsyncTest/src/com/koushikdutta/async/test/FutureTests.java
Patch:
@@ -423,6 +423,7 @@ public void onCompleted(Exception e, String result) {
         });
         assertNotNull(future.getCallback());
         future.cancel();
+        semaphore.tryAcquire(1000, TimeUnit.MILLISECONDS);
         assertNull(future.getCallback());
     }
 }

File: AndroidAsyncTest/src/com/koushikdutta/async/test/FutureTests.java
Patch:
@@ -412,11 +412,13 @@ public void onCompleted(Exception e, String result) {
     }
 
     public void testCancelCallbackCleared() throws Exception {
+        final Semaphore semaphore = new Semaphore(0);
         SimpleFuture<String> future = new SimpleFuture<String>();
         future.setCallback(new FutureCallback<String>() {
             @Override
             public void onCompleted(Exception e, String result) {
-                fail();
+                assertTrue(e instanceof CancellationException);
+                semaphore.release();
             }
         });
         assertNotNull(future.getCallback());

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -706,7 +706,7 @@ private static void runLoop(final AsyncServer server, final Selector selector, f
 
         if (needsSelect) {
             if (wait == QUEUE_EMPTY)
-                wait = 100;
+                wait = 5;
             // nothing to select immediately but there so let's block and wait.
             selector.select(wait);
         }

File: AndroidAsync/src/com/koushikdutta/async/PushParser.java
Patch:
@@ -1,5 +1,7 @@
 package com.koushikdutta.async;
 
+import android.util.Log;
+
 import com.koushikdutta.async.callback.DataCallback;
 
 import java.lang.reflect.Method;
@@ -242,7 +244,7 @@ else if (waiting instanceof BufferWaiter || waiting instanceof StringWaiter) {
                 }
                 catch (Exception ex) {
                     assert false;
-                    ex.printStackTrace();
+                    Log.e("PushParser", "error during parse", ex);
                 }
             }
         };

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -260,7 +260,7 @@ public void setDataEmitter(DataEmitter emitter) {
 
                                 redirect = URI.create(builder.toString());
                             }
-                            AsyncHttpRequest newReq = new AsyncHttpRequest(redirect, request.getMethod());
+                            AsyncHttpRequest newReq = new AsyncHttpRequest(redirect, AsyncHttpGet.METHOD);
                             newReq.executionTime = request.executionTime;
                             newReq.logLevel = request.logLevel;
                             newReq.LOGTAG = request.LOGTAG;

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -194,7 +194,9 @@ public void onWriteable() {
         wc.onWriteable();
     }
     public static void writeAll(DataSink sink, byte[] bytes, CompletedCallback callback) {
-        ByteBuffer bb = ByteBuffer.wrap(bytes);
+        ByteBuffer bb = ByteBufferList.obtain(bytes.length);
+        bb.put(bytes);
+        bb.flip();
         ByteBufferList bbl = new ByteBufferList();
         bbl.add(bb);
         writeAll(sink, bbl, callback);

File: AndroidAsync/src/com/koushikdutta/async/http/ResponseCacheMiddleware.java
Patch:
@@ -178,6 +178,7 @@ void spewInternal() {
                 assert buffer.position() == 0;
                 DataInputStream din = new DataInputStream(cacheResponse.getBody());
                 din.readFully(buffer.array(), buffer.arrayOffset(), (int)contentLength);
+                buffer.limit((int)contentLength);
                 pending.add(buffer);
                 com.koushikdutta.async.Util.emitAllData(CachedSocket.this, pending);
                 assert din.read() == -1;
@@ -486,6 +487,7 @@ void spewInternal() {
                 assert buffer.position() == 0;
                 DataInputStream din = new DataInputStream(cacheResponse.getBody());
                 din.readFully(buffer.array(), buffer.arrayOffset(), (int)contentLength);
+                buffer.limit((int)contentLength);
                 pending.add(buffer);
                 com.koushikdutta.async.Util.emitAllData(this, pending);
                 assert din.read() == -1;

File: AndroidAsync/src/com/koushikdutta/async/AsyncNetworkSocket.java
Patch:
@@ -46,7 +46,8 @@ ChannelWrapper getChannel() {
     
     public void onDataWritable() {
         assert mWriteableHandler != null;
-        mWriteableHandler.onWriteable();
+        if (mWriteableHandler != null)
+            mWriteableHandler.onWriteable();
     }
     
     private ChannelWrapper mChannel;

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -379,9 +379,10 @@ private static boolean reclaimedContains(ByteBuffer b) {
     }
 
     public static void reclaim(ByteBuffer b) {
-        if (b == null || b.arrayOffset() != 0 || b.array().length != b.capacity()) {
+        if (b == null || b.isDirect())
+            return;
+        if (b.arrayOffset() != 0 || b.array().length != b.capacity())
             return;
-        }
         if (b.capacity() < 8192)
             return;
         if (b.capacity() > MAX_ITEM_SIZE)

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -351,13 +351,13 @@ public static String getContentType(String path) {
         return "text/plain";
     }
 
-    public void directory(Context _context, String regex, final String assetPath) {
-        final Context context = _context.getApplicationContext();
+    public void directory(Context context, String regex, final String assetPath) {
+        final Context _context = context.getApplicationContext();
         addAction("GET", regex, new HttpServerRequestCallback() {
             @Override
             public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
                 String path = request.getMatcher().replaceAll("");
-                InputStream is = getAssetStream(context, assetPath + path);
+                InputStream is = getAssetStream(_context, assetPath + path);
                 if (is == null) {
                     response.responseCode(404);
                     response.end();

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -239,7 +239,7 @@ private ByteBuffer read(int count) {
                 }
             }
             mBuffers.addFirst(ret);
-            return ret;
+            return ret.order(order);
         }
 
         ret = obtain(count);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -40,7 +40,7 @@ void setSocket(AsyncSocket exchange) {
         if (mWriter != null) {
             if (mRequest.getHeaders().getContentType() == null)
                 mRequest.getHeaders().setContentType(mWriter.getContentType());
-            if (mWriter.length() != -1) {
+            if (mWriter.length() > 0) {
                 mRequest.getHeaders().setContentLength(mWriter.length());
                 mSink = mSocket;
             }

File: AndroidAsync/src/com/koushikdutta/async/http/body/StreamBody.java
Patch:
@@ -10,7 +10,7 @@
 
 public class StreamBody implements AsyncHttpRequestBody<InputStream> {
     InputStream stream;
-	int length;
+    int length;
     String contentType;
 
     public StreamBody(InputStream stream, int length, String contentType) {
@@ -37,7 +37,7 @@ public String getContentType() {
 
     @Override
     public boolean readFullyOnRequest() {
-        return false;
+        throw new AssertionError("not implemented");
     }
 
     @Override

File: AndroidAsyncSample/src/com/koushikdutta/async/sample/MainActivity.java
Patch:
@@ -27,7 +27,7 @@
 import com.koushikdutta.async.http.AsyncHttpPost;
 import com.koushikdutta.async.http.AsyncHttpResponse;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
-import com.koushikdutta.async.http.UrlEncodedFormBody;
+import com.koushikdutta.async.http.body.UrlEncodedFormBody;
 
 public class MainActivity extends Activity {
     static ResponseCacheMiddleware cacher; 

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -238,7 +238,8 @@ public void setDataEmitter(DataEmitter emitter) {
                         super.setDataEmitter(data.bodyEmitter);
 
                         RawHeaders headers = mHeaders.getHeaders();
-                        if ((headers.getResponseCode() == HttpURLConnection.HTTP_MOVED_PERM || headers.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP) && request.getFollowRedirect()) {
+                        int responseCode = headers.getResponseCode();
+                        if ((responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == 307) && request.getFollowRedirect()) {
                             URI redirect = URI.create(headers.get("Location"));
                             if (redirect == null || redirect.getScheme() == null) {
                                 redirect = URI.create(uri.toString().substring(0, uri.toString().length() - uri.getPath().length()) + headers.get("Location"));

File: AndroidAsync/src/com/koushikdutta/async/http/filter/InflaterInputFilter.java
Patch:
@@ -15,7 +15,7 @@ public class InflaterInputFilter extends FilteredDataEmitter {
     @Override
     protected void report(Exception e) {
         if (e != null && mInflater.getRemaining() > 0) {
-            e = new IOException("data still remaining in inflater", e);
+            e = new Exception("data still remaining in inflater", e);
         }
         super.report(e);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -255,7 +255,7 @@ public void setDataEmitter(DataEmitter emitter) {
                             return;
                         }
 
-                        request.logv("Final (post cache response) headers: " + mHeaders.getHeaders().toHeaderString());
+                        request.logv("Final (post cache response) headers:\n" + mHeaders.getHeaders().toHeaderString());
 
                         // at this point the headers are done being modified
                         reportConnectedCompleted(cancel, null, this, request, callback);
@@ -271,7 +271,7 @@ protected void onHeadersReceived() {
                                 mServer.removeAllCallbacks(cancel.scheduled);
 
                             // allow the middleware to massage the headers before the body is decoded
-                            request.logv("Received headers: " + mHeaders.getHeaders().toHeaderString());
+                            request.logv("Received headers:\n" + mHeaders.getHeaders().toHeaderString());
 
                             data.headers = mHeaders;
                             synchronized (mMiddleware) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -38,7 +38,8 @@ void setSocket(AsyncSocket exchange) {
 
         mWriter = mRequest.getBody();
         if (mWriter != null) {
-            mRequest.getHeaders().setContentType(mWriter.getContentType());
+            if (mRequest.getHeaders().getContentType() == null)
+                mRequest.getHeaders().setContentType(mWriter.getContentType());
             if (mWriter.length() != -1) {
                 mRequest.getHeaders().setContentLength(mWriter.length());
                 mSink = mSocket;
@@ -61,7 +62,7 @@ public void onCompleted(Exception ex) {
         });
 
         String rs = mRequest.getRequestString();
-        mRequest.logv(rs);
+        mRequest.logv("\n" + rs);
         com.koushikdutta.async.Util.writeAll(exchange, rs.getBytes(), new CompletedCallback() {
             @Override
             public void onCompleted(Exception ex) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -267,15 +267,15 @@ public void onRequestComplete(final OnRequestCompleteData data) {
         idleSocket(data.socket);
 
         if (data.exception != null || !data.socket.isOpen()) {
+            data.request.logv("closing out socket (exception)");
             data.socket.close();
             return;
         }
-        String kas = data.headers.getConnection();
-        if (kas == null || !"keep-alive".toLowerCase().equals(kas.toLowerCase())) {
+        if (!HttpUtil.isKeepAlive(data.headers.getHeaders())) {
+            data.request.logv("closing out socket (not keep alive)");
             data.socket.close();
             return;
         }
-
         data.request.logd("Recycling keep-alive socket");
         recycleSocket(data.socket, data.request);
     }

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpServerTests.java
Patch:
@@ -48,6 +48,7 @@ public void onCompleted(Exception ex) {
         httpServer.get("/hello", new HttpServerRequestCallback() {
             @Override
             public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
+                assertNotNull(request.getHeaders().getHost());
                 response.send("hello");
             }
         });
@@ -56,6 +57,7 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
             @Override
             public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
                 try {
+                    assertNotNull(request.getHeaders().getHost());
                     JSONObject json = new JSONObject();
                     if (request.getBody() instanceof UrlEncodedFormBody) {
                         UrlEncodedFormBody body = (UrlEncodedFormBody)request.getBody();

File: AndroidAsyncTest/src/com/koushikdutta/async/test/Issue59.java
Patch:
@@ -26,6 +26,8 @@ public void testIssue() throws Exception {
             httpServer.get("/", new HttpServerRequestCallback() {
                 @Override
                 public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                    // setting this to empty is a hacky way of telling the framework not to use
+                    // transfer-encoding. It will get removed.
                     response.getHeaders().getHeaders().set("Transfer-Encoding", "");
                     response.responseCode(200);
                     Util.writeAll(response, "foobarbeepboop".getBytes(), new CompletedCallback() {

File: AndroidAsync/src/com/koushikdutta/async/PushParser.java
Patch:
@@ -172,6 +172,8 @@ else if (waiting instanceof UntilWaiter) {
                                 if (!different) {
                                     bb.addFirst(b);
                                     bb.get(cb, index);
+                                    // eat the one we're waiting on
+                                    bb.get();
                                     break;
                                 }
                                 else {

File: AndroidAsync/src/com/koushikdutta/async/http/HttpUtil.java
Patch:
@@ -38,7 +38,7 @@ public static AsyncHttpRequestBody getBody(DataEmitter emitter, CompletedCallbac
         return new UnknownRequestBody(contentType);
     }
     
-    private static class EndEmitter extends FilteredDataEmitter {
+    static class EndEmitter extends FilteredDataEmitter {
         private EndEmitter() {
         }
         

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -272,7 +272,7 @@ public void trim() {
     
     public void add(ByteBuffer b) {
         if (b.remaining() <= 0) {
-            System.out.println("reclaiming remaining: " + b.remaining());
+//            System.out.println("reclaiming remaining: " + b.remaining());
             reclaim(b);
             return;
         }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -105,6 +105,7 @@ public void onCompleted(Exception ex) {
                     res = new AsyncHttpServerResponseImpl(socket, this) {
                         @Override
                         protected void onEnd() {
+                            super.onEnd();
                             mSocket.setEndCallback(null);
                             responseComplete = true;
                             // reuse the socket for a subsequent request.

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -227,7 +227,7 @@ else if (start != 0)
             Util.pump(fin, end - start, this, new CompletedCallback() {
                 @Override
                 public void onCompleted(Exception ex) {
-                    end();
+                    onEnd();
                 }
             });
         }

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -61,6 +61,7 @@ private void cleanup() {
                 ds.setClosedCallback(null);
                 ds.setWriteableCallback(null);
                 ByteBufferList.reclaim(pending);
+                pending = null;
                 try {
                     is.close();
                 }

File: AndroidAsync/src/com/koushikdutta/async/http/HybiParser.java
Patch:
@@ -162,6 +162,7 @@ public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
     DataCallback mStage4 = new DataCallback() {
         @Override
         public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
+            assert bb.remaining() == mLength;
             mPayload = new byte[mLength];
             bb.get(mPayload);
             try {

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/SocketIORequest.java
Patch:
@@ -25,7 +25,7 @@ public SocketIORequest(String uri, String endpoint) {
     }
 
     public SocketIORequest(String uri, String endpoint, String query) {
-        super(Uri.parse(uri).buildUpon().encodedPath("/socket.io/1/").build().toString());
+        super(Uri.parse(uri + (query == null ? "" : "?" + query)).buildUpon().encodedPath("/socket.io/1/").build().toString());
         this.endpoint = endpoint;
         this.query = query;
     }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -236,7 +236,7 @@ private void recycleSocket(final AsyncSocket socket, AsyncHttpRequest request) {
             socket.setClosedCallback(new CompletedCallback() {
                 @Override
                 public void onCompleted(Exception ex) {
-                    synchronized (this) {
+                    synchronized (AsyncSocketMiddleware.this) {
                         ss.remove(socket);
                     }
                     socket.setClosedCallback(null);

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -128,7 +128,7 @@ public void send(String contentType, String string) {
             mContentLength = bytes.length;
             mRawHeaders.set("Content-Length", Integer.toString(bytes.length));
             mRawHeaders.set("Content-Type", contentType);
-            
+
             writeHead();
             mSink.write(ByteBuffer.wrap(string.getBytes()));
             onEnd();
@@ -150,12 +150,12 @@ protected void report(Exception e) {
     @Override
     public void send(String string) {
         responseCode(200);
-        send("text/html", string);
+        send("text/html; charset=utf8", string);
     }
 
     @Override
     public void send(JSONObject json) {
-        send("application/json", json.toString());
+        send("application/json; charset=utf8", json.toString());
     }
     
     public void sendFile(File file) {

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -128,7 +128,7 @@ public void send(String contentType, String string) {
             mContentLength = bytes.length;
             mRawHeaders.set("Content-Length", Integer.toString(bytes.length));
             mRawHeaders.set("Content-Type", contentType);
-            
+
             writeHead();
             mSink.write(ByteBuffer.wrap(string.getBytes()));
             onEnd();
@@ -150,12 +150,12 @@ protected void report(Exception e) {
     @Override
     public void send(String string) {
         responseCode(200);
-        send("text/html", string);
+        send("text/html; charset=utf8", string);
     }
 
     @Override
     public void send(JSONObject json) {
-        send("application/json", json.toString());
+        send("application/json; charset=utf8", json.toString());
     }
     
     public void sendFile(File file) {

File: AndroidAsync/src/com/koushikdutta/async/AsyncDatagramSocket.java
Patch:
@@ -1,10 +1,7 @@
 package com.koushikdutta.async;
 
-import android.util.Log;
-
 import java.io.IOException;
 import java.net.InetSocketAddress;
-import java.net.SocketAddress;
 import java.nio.ByteBuffer;
 
 public class AsyncDatagramSocket extends AsyncNetworkSocket {

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -329,6 +329,7 @@ public String readString() {
             builder.append(new String(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining()));
             reclaim(bb);
         }
+        remaining = 0;
         return builder.toString();
     }
 

File: AndroidAsync/src/com/koushikdutta/async/ChannelWrapper.java
Patch:
@@ -47,4 +47,5 @@ public void close() throws IOException {
     }
     
     public abstract int getLocalPort();
+    public abstract Object getSocket();
 }

File: AndroidAsync/src/com/koushikdutta/async/ArrayDeque.java
Patch:
@@ -798,7 +798,7 @@ public ArrayDeque<E> clone() {
         try {
             @SuppressWarnings("unchecked")
             ArrayDeque<E> result = (ArrayDeque<E>) super.clone();
-            result.elements = Arrays.copyOf(elements, elements.length);
+            System.arraycopy(elements, 0, result.elements, 0, elements.length);
             return result;
 
         } catch (CloneNotSupportedException e) {

File: AndroidAsync/src/com/koushikdutta/async/ArrayDeque.java
Patch:
@@ -798,7 +798,7 @@ public ArrayDeque<E> clone() {
         try {
             @SuppressWarnings("unchecked")
             ArrayDeque<E> result = (ArrayDeque<E>) super.clone();
-            result.elements = Arrays.copyOf(elements, elements.length);
+            System.arraycopy(elements, 0, result.elements, 0, elements.length);
             return result;
 
         } catch (CloneNotSupportedException e) {

File: AndroidAsync/src/com/koushikdutta/async/http/JSONObjectBody.java
Patch:
@@ -38,7 +38,7 @@ public void write(AsyncHttpRequest request, DataSink sink, final CompletedCallba
 
     @Override
     public String getContentType() {
-        return "application/json";
+        return CONTENT_TYPE;
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
Patch:
@@ -101,7 +101,8 @@ public AsyncHttpRequest(URI uri, String method, RawHeaders headers) {
         mHeaders = new RequestHeaders(uri, mRawHeaders);
         mRawHeaders.setStatusLine(getRequestLine().toString());
         mHeaders.setHost(uri.getHost());
-        mHeaders.setUserAgent(getDefaultUserAgent());
+        if (mHeaders.getUserAgent() == null)
+            mHeaders.setUserAgent(getDefaultUserAgent());
         mHeaders.setAcceptEncoding("gzip, deflate");
         mHeaders.setConnection("keep-alive");
         mHeaders.getHeaders().set("Accept", "*/*");

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSSLSocketMiddleware.java
Patch:
@@ -39,7 +39,8 @@ protected ConnectCallback wrapCallback(final ConnectCallback callback, final URI
             public void onConnectCompleted(Exception ex, AsyncSocket socket) {
                 if (ex == null) {
                     callback.onConnectCompleted(ex, new AsyncSSLSocketWrapper(socket, uri.getHost(), port, sslContext, trustManagers, hostnameVerifier, true));
-                } else {
+                }
+                else {
                     callback.onConnectCompleted(ex, socket);
                 }
             }

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/EventCallback.java
Patch:
@@ -3,5 +3,5 @@
 import org.json.JSONArray;
 
 public interface EventCallback {
-    public void onEvent(JSONArray argument);
+    public void onEvent(JSONArray argument, Acknowledge acknowledge);
 }
\ No newline at end of file

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/JSONCallback.java
Patch:
@@ -3,6 +3,6 @@
 import org.json.JSONObject;
 
 public interface JSONCallback {
-    public void onJSON(JSONObject json);
+    public void onJSON(JSONObject json, Acknowledge acknowledge);
 }
     

File: AndroidAsync/src/com/koushikdutta/async/http/socketio/StringCallback.java
Patch:
@@ -1,5 +1,5 @@
 package com.koushikdutta.async.http.socketio;
 
 public interface StringCallback {
-    public void onString(String string);
+    public void onString(String string, Acknowledge acknowledge);
 }
\ No newline at end of file

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -176,6 +176,8 @@ public ByteBufferList get(int length) {
     }
 
     public ByteBuffer getAll() {
+        if (remaining() == 0)
+            return EMPTY_BYTEBUFFER;
         read(remaining());
         return remove();
     }

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -43,8 +43,10 @@ public void addAll(ByteBuffer... bb) {
     public byte[] getAllByteArray() {
         // fast path to return the contents of the first and only byte buffer,
         // if that's what we're looking for. avoids allocation.
-        if (mBuffers.size() == 1 && mBuffers.peek().capacity() == remaining())
+        if (mBuffers.size() == 1 && mBuffers.peek().capacity() == remaining()) {
+            remaining = 0;
             return mBuffers.remove().array();
+        }
 
         byte[] ret = new byte[remaining()];
         get(ret);

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -82,7 +82,7 @@ public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
                             remaining = -1;
                         }
                         else if (res.getStatus() == Status.BUFFER_UNDERFLOW) {
-                            bb.add(0, b);
+                            bb.addFirst(b);
                             if (bb.size() <= 1) {
                                 break;
                             }
@@ -91,7 +91,7 @@ else if (res.getStatus() == Status.BUFFER_UNDERFLOW) {
                         }
                         handleResult(res);
                         if (b.remaining() == remaining) {
-                            bb.add(0, b);
+                            bb.addFirst(b);
                             break;
                         }
                     }

File: AndroidAsync/src/com/koushikdutta/async/ChannelWrapper.java
Patch:
@@ -5,11 +5,12 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ReadableByteChannel;
+import java.nio.channels.ScatteringByteChannel;
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.spi.AbstractSelectableChannel;
 
-abstract class ChannelWrapper implements ReadableByteChannel {
+abstract class ChannelWrapper implements ReadableByteChannel, ScatteringByteChannel {
     private AbstractSelectableChannel mChannel;
     ChannelWrapper(AbstractSelectableChannel channel) throws IOException {
         channel.configureBlocking(false);

File: AndroidAsync/src/com/koushikdutta/async/PushParser.java
Patch:
@@ -170,7 +170,7 @@ else if (waiting instanceof UntilWaiter) {
                                 }
                                 b.reset();
                                 if (!different) {
-                                    bb.add(0, b);
+                                    bb.addFirst(b);
                                     bb.get(cb, index);
                                     break;
                                 }

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ChunkedOutputFilter.java
Patch:
@@ -14,7 +14,7 @@ public ChunkedOutputFilter(DataSink sink) {
     @Override
     public ByteBufferList filter(ByteBufferList bb) {
         String chunkLen = Integer.toString(bb.remaining(), 16) + "\r\n";
-        bb.add(0, ByteBuffer.wrap(chunkLen.getBytes()));
+        bb.addFirst(ByteBuffer.wrap(chunkLen.getBytes()));
         bb.add(ByteBuffer.wrap("\r\n".getBytes()));
         return bb;
     }

File: AndroidAsync/src/com/koushikdutta/async/http/server/BoundaryEmitter.java
Patch:
@@ -67,7 +67,7 @@ public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
         // at the beginning of the buffer and process it too.
         if (state > 0) {
             ByteBuffer b = ByteBuffer.wrap(boundary, 0, state).duplicate();
-            bb.add(0, b);
+            bb.addFirst(b);
             state = 0;
         }
         

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -192,7 +192,6 @@ private ByteBuffer read(int count) {
         }
         else {
             // reallocate the count into a single buffer, and return it
-            System.out.println("allocating!");
             byte[] bytes = new byte[count];
             int offset = 0;
             ByteBuffer bb = null;

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -51,7 +51,7 @@ public void onCompleted(Exception ex) {
         LineEmitter liner = new LineEmitter();
         exchange.setDataCallback(liner);
         liner.setLineCallback(mHeaderCallback);
-        
+
         mSocket.setEndCallback(mReporter);
         mSocket.setClosedCallback(new CompletedCallback() {
             @Override

File: AndroidAsync/src/com/koushikdutta/async/http/ResponseCacheMiddleware.java
Patch:
@@ -329,6 +329,9 @@ public Cancellable getSocket(final GetSocketData data) {
             cacheHitCount++;
             data.request.logi("Response retrieved from cache");
             final CachedSocket socket = entry.isHttps() ? new CachedSSLSocket((EntrySecureCacheResponse)candidate) : new CachedSocket((EntryCacheResponse)candidate);
+            rawResponseHeaders.removeAll("Content-Encoding");
+            rawResponseHeaders.removeAll("Transfer-Encoding");
+            rawResponseHeaders.set("Content-Length", String.valueOf(snapshot.getLength(ENTRY_BODY)));
             socket.pending.add(ByteBuffer.wrap(rawResponseHeaders.toHeaderString().getBytes()));
 
             client.getServer().post(new Runnable() {

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpClientTests.java
Patch:
@@ -234,7 +234,7 @@ public void onConnect(AsyncHttpResponse response) {
             assertTrue(e.getCause() instanceof CancellationException);
         }
     }
-    
+
     public void testCache() throws Exception {
         ResponseCacheMiddleware cache = ResponseCacheMiddleware.addCache(client, new File(Environment.getExternalStorageDirectory(), "AndroidAsyncTest"), 1024 * 1024 * 10);
         try {

File: AndroidAsync/src/com/koushikdutta/async/AsyncSSLSocketWrapper.java
Patch:
@@ -141,7 +141,8 @@ public void checkClientTrusted(java.security.cert.X509Certificate[] certs, Strin
 
                     public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                         for (X509Certificate cert : certs) {
-                            cert.getCriticalExtensionOIDs().remove("2.5.29.15");
+                            if (cert != null && cert.getCriticalExtensionOIDs() != null)
+                                cert.getCriticalExtensionOIDs().remove("2.5.29.15");
                         }
                     }
                 } };

File: AndroidAsyncTest/src/com/koushikdutta/async/test/SSLTests.java
Patch:
@@ -53,4 +53,5 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
         AsyncHttpClient.getDefaultInstance().getSSLSocketMiddleware().setTrustManagers(tmf.getTrustManagers());
         AsyncHttpClient.getDefaultInstance().getString("https://localhost:8888/").get();
     }
+
 }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClientMiddleware.java
Patch:
@@ -13,6 +13,7 @@ public static class GetSocketData {
         public Bundle state = new Bundle();
         public AsyncHttpRequest request;
         public ConnectCallback connectCallback;
+        public Cancellable socketCancellable;
     }
     
     public static class OnSocketData extends GetSocketData {

File: AndroidAsync/src/com/koushikdutta/async/DataTrackingEmitter.java
Patch:
@@ -10,4 +10,5 @@ public interface DataTracker {
     void setDataTracker(DataTracker tracker);
     DataTracker getDataTracker();
     int getBytesRead();
+    void setDataEmitter(DataEmitter emitter);
 }

File: AndroidAsync/src/com/koushikdutta/async/FilteredDataEmitter.java
Patch:
@@ -11,6 +11,7 @@ public DataEmitter getDataEmitter() {
         return mEmitter;
     }
 
+    @Override
     public void setDataEmitter(DataEmitter emitter) {
         if (mEmitter != null) {
             mEmitter.setDataCallback(null);

File: AndroidAsync/src/com/koushikdutta/async/http/server/BoundaryEmitter.java
Patch:
@@ -58,7 +58,6 @@ protected void onBoundaryEnd() {
     int state = 2;
     @Override
     public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
-        Log.d("BOUNDARY", "" + state);
 //        System.out.println(bb.getString());
 //        System.out.println("chunk: " + bb.remaining());
         
@@ -150,7 +149,8 @@ else if (state == -4) {
         }
 
         if (last < buf.length) {
-            System.out.println("amount left at boundary: " + (buf.length - last));
+//            System.out.println("amount left at boundary: " + (buf.length - last));
+//            System.out.println("State: " + state);
 //            System.out.println(state);
             int keep = Math.max(state, 0);
             ByteBuffer b = ByteBuffer.wrap(buf, last, buf.length - last - keep);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -556,7 +556,7 @@ public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
                         return;
                 }
                 if (callback != null)
-                    callback.onCompleted(ex, null);
+                    callback.onCompleted(ex, ws);
             }
         });
 

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -43,18 +43,18 @@ public AsyncHttpClient(AsyncServer server) {
         insertMiddleware(new AsyncSSLSocketMiddleware(this));
     }
 
-    public Future<AsyncHttpResponse>execute(final AsyncHttpRequest request) {
+    public Future<AsyncHttpResponse> execute(final AsyncHttpRequest request) {
         return execute(request, (HttpConnectCallback)null);
     }
 
-    public Future<AsyncHttpResponse>execute(final AsyncHttpRequest request, final HttpConnectCallback callback) {
+    public Future<AsyncHttpResponse> execute(final AsyncHttpRequest request, final HttpConnectCallback callback) {
         FutureAsyncHttpResponse ret;
         execute(request, 0, ret = new FutureAsyncHttpResponse(), callback);
         return ret;
     }
 
     private static final String LOGTAG = "AsyncHttp";
-    private static class FutureAsyncHttpResponse extends SimpleFuture<AsyncHttpResponse> {
+    public static class FutureAsyncHttpResponse extends SimpleFuture<AsyncHttpResponse> {
         public AsyncSocket socket;
 
         @Override

File: AndroidAsync/src/com/koushikdutta/async/future/DependentCancellable.java
Patch:
@@ -2,5 +2,5 @@
 
 public interface DependentCancellable extends Cancellable {
     public Cancellable getParent();
-    public void setParent(Cancellable parent);
+    public DependentCancellable setParent(Cancellable parent);
 }

File: AndroidAsync/src/com/koushikdutta/async/future/SimpleCancelable.java
Patch:
@@ -38,8 +38,9 @@ public Cancellable getParent() {
     }
     
     @Override
-    public void setParent(Cancellable parent) {
+    public SimpleCancelable setParent(Cancellable parent) {
         this.parent = parent;
+        return this;
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequestBody.java
Patch:
@@ -2,9 +2,10 @@
 
 import com.koushikdutta.async.callback.DataCallback;
 
-public interface AsyncHttpRequestBody extends DataCallback {
+public interface AsyncHttpRequestBody<T> extends DataCallback {
     public void write(AsyncHttpRequest request, AsyncHttpResponse sink);
     public String getContentType();
     public boolean readFullyOnRequest();
     public int length();
+    public T getBody();
 }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpRequestBodyBase.java
Patch:
@@ -5,7 +5,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.AsyncHttpResponse;
 
-public class AsyncHttpRequestBodyBase extends FilteredDataEmitter implements AsyncHttpRequestBody {
+public abstract class AsyncHttpRequestBodyBase<T> extends FilteredDataEmitter implements AsyncHttpRequestBody<T> {
     public AsyncHttpRequestBodyBase(String contentType) {
         mContentType = contentType;
     }

File: AndroidAsyncTest/src/com/koushikdutta/async/test/HttpClientTests.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
+import android.util.Log;
 import com.koushikdutta.async.future.FutureCallback;
 import junit.framework.Assert;
 import junit.framework.TestCase;
@@ -79,6 +80,7 @@ public void testGithubRandomData() throws Exception {
         client.execute(github, new HttpConnectCallback() {
             @Override
             public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {
+                assertNull(ex);
                 // make sure gzip decoding works, as that is generally what github sends.
                 Assert.assertEquals("gzip", response.getHeaders().getContentEncoding());
                 response.setDataCallback(new DataCallback() {

File: AndroidAsync/src/com/koushikdutta/async/PushParser.java
Patch:
@@ -239,6 +239,7 @@ else if (waiting instanceof BufferWaiter || waiting instanceof StringWaiter) {
                     method.invoke(callback, args);
                 }
                 catch (Exception ex) {
+                    assert false;
                     ex.printStackTrace();
                 }
             }

File: AndroidAsync/src/com/koushikdutta/async/http/SocketIOClient.java
Patch:
@@ -390,7 +390,7 @@ public void run() {
                         final String dataString = parts[3];
                         JSONObject data = new JSONObject(dataString);
                         final String event = data.getString("name");
-                        final JSONArray args = data.getJSONArray("args");
+                        final JSONArray args = data.optJSONArray("args");
 
                         // ack
                         if(!"".equals(messageId)) {

File: AndroidAsync/src/com/koushikdutta/async/AsyncNetworkSocket.java
Patch:
@@ -7,6 +7,7 @@
 import java.nio.channels.SocketChannel;
 
 import junit.framework.Assert;
+import android.util.Log;
 
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.DataCallback;

File: AndroidAsync/src/com/koushikdutta/async/http/server/BoundaryEmitter.java
Patch:
@@ -124,7 +124,7 @@ else if (state == -2) {
             else if (state == -3) {
                 if (buf[i] == '\r') {
                     state = -4;
-                    ByteBuffer b = ByteBuffer.wrap(buf, last, i - last - boundary.length - 6);
+                    ByteBuffer b = ByteBuffer.wrap(buf, last, i - last - boundary.length - 2);
                     ByteBufferList list = new ByteBufferList();
                     list.add(b);
                     super.onDataAvailable(this, list);

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -129,6 +129,9 @@ else if (requestComplete) {
 
                 @Override
                 public void onCompleted(Exception e) {
+                    // if the protocol was switched off http, ignore this request/response.
+                    if (res.getHeaders().getHeaders().getResponseCode() == 101)
+                        return;
                     requestComplete = true;
                     super.onCompleted(e);
                     mSocket.setDataCallback(null);

File: AndroidAsync/src/com/koushikdutta/async/AsyncNetworkSocket.java
Patch:
@@ -8,8 +8,6 @@
 
 import junit.framework.Assert;
 
-import android.util.Log;
-
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.callback.WritableCallback;
@@ -152,7 +150,6 @@ int onReadable() {
                 b.limit(b.position());
                 b.position(0);
                 ByteBufferList list = new ByteBufferList(b);
-                Log.d("ASYNC", list.peekString());
                 Util.emitAllData(this, list);
                 if (b.remaining() != 0) {
                     Assert.assertTrue(pending == null);

File: AndroidAsync/src/com/koushikdutta/async/callback/RequestCallback.java
Patch:
@@ -3,5 +3,6 @@
 import com.koushikdutta.async.http.AsyncHttpResponse;
 
 public interface RequestCallback<T> extends ResultCallback<AsyncHttpResponse, T> {
+    public void onConnect(AsyncHttpResponse response);
     public void onProgress(AsyncHttpResponse response, int downloaded, int total);
 }

File: AndroidAsyncTest/src/com/koushikdutta/async/test/SocketIOTests.java
Patch:
@@ -24,7 +24,7 @@ public void testEchoServer() throws Exception {
         final TriggerFuture trigger = new TriggerFuture();
 
         
-        SocketIOClient.connect(AsyncHttpClient.getDefaultInstance(), "http://koush.com:8080", new SocketIOConnectCallback() {
+        SocketIOClient.connect(AsyncHttpClient.getDefaultInstance(), "http://192.168.1.2:3000", new SocketIOConnectCallback() {
             @Override
             public void onConnectCompleted(Exception ex, SocketIOClient client) {
                 assertNull(ex);
@@ -38,7 +38,7 @@ public void onString(String string) {
             }
         });
 
-        assertTrue(trigger.get(TIMEOUT, TimeUnit.MILLISECONDS));
+        assertTrue(trigger.get(TIMEOUT * 10, TimeUnit.MILLISECONDS));
     }
 
 }

File: AndroidAsyncTest/src/com/koushikdutta/async/test/SocketIOTests.java
Patch:
@@ -24,7 +24,7 @@ public void testEchoServer() throws Exception {
         final TriggerFuture trigger = new TriggerFuture();
 
         
-        SocketIOClient.connect(AsyncHttpClient.getDefaultInstance(), "http://192.168.10.75:3000", new SocketIOConnectCallback() {
+        SocketIOClient.connect(AsyncHttpClient.getDefaultInstance(), "http://koush.com:8080", new SocketIOConnectCallback() {
             @Override
             public void onConnectCompleted(Exception ex, SocketIOClient client) {
                 assertNull(ex);

File: AndroidAsyncTest/src/com/koushikdutta/async/test/WebSocketTests.java
Patch:
@@ -81,7 +81,7 @@ public void onStringAvailable(String s) {
             }
         });
 
-        assertTrue(semaphore.tryAcquire(TIMEOUT * 10, TimeUnit.MILLISECONDS));
+        assertTrue(semaphore.tryAcquire(TIMEOUT, TimeUnit.MILLISECONDS));
     }
 
     @Override

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerRequestImpl.java
Patch:
@@ -58,6 +58,7 @@ else if (!"\r".equals(s)){
                     DataEmitter emitter = Util.getBodyDecoder(mSocket, mRawHeaders, true, mReporter);
                     emitter.setEndCallback(mReporter);
                     mBody = Util.getBody(emitter, mReporter, mRawHeaders);
+                    mHeaders = new RequestHeaders(null, mRawHeaders);
                     onHeadersReceived();
                 }
             }
@@ -84,7 +85,7 @@ public AsyncSocket getSocket() {
         return mSocket;
     }
 
-    private RequestHeaders mHeaders = new RequestHeaders(null, mRawHeaders);
+    private RequestHeaders mHeaders;
     @Override
     public RequestHeaders getHeaders() {
         return mHeaders;

File: AndroidAsync/src/com/koushikdutta/async/DataWrapperSocket.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.WritableCallback;
+import com.koushikdutta.async.wrapper.AsyncSocketWrapper;
 
 public class DataWrapperSocket extends FilteredDataEmitter implements AsyncSocketWrapper {
     private AsyncSocket mSocket;

File: AndroidAsync/src/com/koushikdutta/async/FilteredDataEmitter.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.DataCallback;
+import com.koushikdutta.async.wrapper.DataEmitterWrapper;
 
 public class FilteredDataEmitter implements DataEmitter, DataCallback, DataEmitterWrapper {
     DataEmitter mEmitter;

File: AndroidAsync/src/com/koushikdutta/async/PushParser.java
Patch:
@@ -1,9 +1,6 @@
 package com.koushikdutta.async;
 
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
 import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Hashtable;

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -11,6 +11,8 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.DataCallback;
 import com.koushikdutta.async.callback.WritableCallback;
+import com.koushikdutta.async.wrapper.AsyncSocketWrapper;
+import com.koushikdutta.async.wrapper.DataEmitterWrapper;
 
 public class Util {
     public static void emitAllData(DataEmitter emitter, ByteBufferList list) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSSLSocketMiddleware.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.net.URI;
 
-import com.koushikdutta.async.AsyncSSLSocket;
+import com.koushikdutta.async.AsyncSSLSocketWrapper;
 import com.koushikdutta.async.AsyncSocket;
 import com.koushikdutta.async.callback.ConnectCallback;
 
@@ -17,7 +17,7 @@ protected ConnectCallback wrapCallback(final ConnectCallback callback, final URI
             @Override
             public void onConnectCompleted(Exception ex, AsyncSocket socket) {
                 if (ex == null) {
-                    callback.onConnectCompleted(ex, new AsyncSSLSocket(socket, uri.getHost(), port));
+                    callback.onConnectCompleted(ex, new AsyncSSLSocketWrapper(socket, uri.getHost(), port));
                 }
                 else {
                     callback.onConnectCompleted(ex, socket);

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncSocketMiddleware.java
Patch:
@@ -64,7 +64,7 @@ public Cancelable getSocket(final GetSocketData data) {
                         mClient.getServer().post(new Runnable() {
                             @Override
                             public void run() {
-                                Log.i("AsyncHttpSocket", "Reusing socket.");
+//                                Log.i("AsyncHttpSocket", "Reusing keep-alive socket");
                                 data.connectCallback.onConnectCompleted(null, socket);
                             }
                         });
@@ -95,7 +95,7 @@ public void onRequestComplete(final OnRequestCompleteData data) {
             return;
         }
         
-        Log.i("AsynchttpSocket", "recycling");
+//        Log.i("AsynchttpSocket", "Recycling keep-alive socket");
         
         final URI uri = data.request.getUri();
         final int port = getSchemePort(data.request.getUri());

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/Arrays.java
Patch:
@@ -1,4 +1,4 @@
-package com.koushikdutta.async.util.cache;
+package com.koushikdutta.async.http.libcore;
 
 import java.lang.reflect.Array;
 

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/Charsets.java
Patch:
@@ -1,4 +1,4 @@
-package com.koushikdutta.async.util.cache;
+package com.koushikdutta.async.http.libcore;
 
 import java.nio.charset.Charset;
 

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/DiskLruCache.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.koushikdutta.async.util.cache;
+package com.koushikdutta.async.http.libcore;
 
 import java.io.BufferedWriter;
 import java.io.Closeable;

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/IOUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.koushikdutta.async.util.cache;
+package com.koushikdutta.async.http.libcore;
 
 import java.io.Closeable;
 import java.io.File;

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/Streams.java
Patch:
@@ -1,4 +1,4 @@
-package com.koushikdutta.async.util.cache;
+package com.koushikdutta.async.http.libcore;
 
 import java.io.IOException;
 import java.io.Reader;

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/StrictLineReader.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.koushikdutta.async.util.cache;
+package com.koushikdutta.async.http.libcore;
 
 import java.io.ByteArrayOutputStream;
 import java.io.Closeable;

File: AndroidAsync/src/com/koushikdutta/async/wrapper/AsyncSocketWrapper.java
Patch:
@@ -1,4 +1,6 @@
-package com.koushikdutta.async;
+package com.koushikdutta.async.wrapper;
+
+import com.koushikdutta.async.AsyncSocket;
 
 public interface AsyncSocketWrapper extends AsyncSocket, DataEmitterWrapper {
     public AsyncSocket getSocket();

File: AndroidAsync/src/com/koushikdutta/async/wrapper/DataEmitterWrapper.java
Patch:
@@ -1,4 +1,6 @@
-package com.koushikdutta.async;
+package com.koushikdutta.async.wrapper;
+
+import com.koushikdutta.async.DataEmitter;
 
 public interface DataEmitterWrapper extends DataEmitter {
     public DataEmitter getDataEmitter();

File: AndroidAsync/src/com/koushikdutta/async/DataWrapperSocket.java
Patch:
@@ -5,7 +5,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.WritableCallback;
 
-public class DataWrapperSocket extends FilteredDataEmitter implements WrapperSocket {
+public class DataWrapperSocket extends FilteredDataEmitter implements AsyncSocketWrapper {
     private AsyncSocket mSocket;
     public void setSocket(AsyncSocket socket) {
         mSocket = socket;

File: AndroidAsync/src/com/koushikdutta/async/http/libcore/ResponseSource.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.koushikdutta.async.http.libcore;
 
-enum ResponseSource {
+public enum ResponseSource {
 
     /**
      * Return the response from the cache immediately.

File: AndroidAsyncSample/src/com/koushikdutta/async/sample/MainActivity.java
Patch:
@@ -54,7 +54,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
     }
     
     private void getFile(final ImageView iv, String url, final String filename) {
-        AsyncHttpClient.getDefault().get(url, filename, new AsyncHttpClient.FileCallback() {
+        AsyncHttpClient.getDefaultInstance().get(url, filename, new AsyncHttpClient.FileCallback() {
             @Override
             public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                 if (e != null) {
@@ -85,7 +85,7 @@ private void getChartFile() {
         try {
             AsyncHttpPost post = new AsyncHttpPost("http://chart.googleapis.com/chart");
             post.setBody(writer);
-            AsyncHttpClient.getDefault().execute(post, filename, new AsyncHttpClient.FileCallback() {
+            AsyncHttpClient.getDefaultInstance().execute(post, filename, new AsyncHttpClient.FileCallback() {
                 @Override
                 public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                     if (e != null) {

File: AndroidAsyncSample/src/com/koushikdutta/async/sample/MainActivity.java
Patch:
@@ -54,7 +54,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
     }
     
     private void getFile(final ImageView iv, String url, final String filename) {
-        AsyncHttpClient.get(url, filename, new AsyncHttpClient.FileCallback() {
+        AsyncHttpClient.getDefault().get(url, filename, new AsyncHttpClient.FileCallback() {
             @Override
             public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                 if (e != null) {
@@ -85,7 +85,7 @@ private void getChartFile() {
         try {
             AsyncHttpPost post = new AsyncHttpPost("http://chart.googleapis.com/chart");
             post.setBody(writer);
-            AsyncHttpClient.execute(post, filename, new AsyncHttpClient.FileCallback() {
+            AsyncHttpClient.getDefault().execute(post, filename, new AsyncHttpClient.FileCallback() {
                 @Override
                 public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                     if (e != null) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -226,7 +226,7 @@ public boolean isReusedSocket() {
 
         HashSet<AsyncSocket> sockets = mSockets.get(lookup);
         if (sockets != null) {
-            synchronized (sockets) {
+//            synchronized (sockets) {
                 for (final AsyncSocket socket: sockets) {
                     if (socket.isOpen()) {
                         sockets.remove(socket);
@@ -242,7 +242,7 @@ public void run() {
                         return;
                     }
                 }
-            }
+//            }
         }
         server.connectSocket(uri.getHost(), port, socketConnected);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -6,7 +6,6 @@
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.nio.ByteBuffer;
 import java.util.HashSet;
 import java.util.Hashtable;
@@ -17,6 +16,7 @@
 
 import android.os.Handler;
 import android.os.Looper;
+import android.util.Log;
 
 import com.koushikdutta.async.AsyncSSLException;
 import com.koushikdutta.async.AsyncSSLSocket;
@@ -234,6 +234,7 @@ public boolean isReusedSocket() {
                         server.post(new Runnable() {
                             @Override
                             public void run() {
+                                Log.i("Async", "Reusing socket.");
                                 socketConnected.reused = true;
                                 socketConnected.onConnectCompleted(null, socket);
                             }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpPost.java
Patch:
@@ -6,8 +6,8 @@
 public class AsyncHttpPost extends AsyncHttpRequest {
     public static final String METHOD = "POST";
     
-    public AsyncHttpPost(String uri) throws URISyntaxException {
-        this(new URI(uri));
+    public AsyncHttpPost(String uri) {
+        this(URI.create(uri));
     }
 
     public AsyncHttpPost(URI uri) {

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -98,7 +98,7 @@ public void onCompleted(Exception ex) {
                             }
                         }
                     }
-                    res = new AsyncHttpServerResponseImpl(socket) {
+                    res = new AsyncHttpServerResponseImpl(socket, this) {
                         @Override
                         protected void onEnd() {
                             responseComplete = true;

File: AndroidAsync/src/com/koushikdutta/async/Continuation.java
Patch:
@@ -38,7 +38,9 @@ public Continuation(CompletedCallback callback, Runnable cancelCallback) {
         wrapper = new CompletedCallback() {
             @Override
             public void onCompleted(Exception ex) {
-                Assert.assertTrue(waiting);
+                // called twice?
+                if (!waiting)
+                    return;
                 waiting = false;
                 if (ex == null) {
                     next();

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
Patch:
@@ -2,8 +2,6 @@
 
 import java.net.URI;
 
-import javax.net.ssl.SSLPeerUnverifiedException;
-
 import junit.framework.Assert;
 
 import com.koushikdutta.async.AsyncSSLException;
@@ -40,7 +38,7 @@ public AsyncHttpRequest(URI uri, String method) {
         mHeaders.setHost(uri.getHost());
         mHeaders.setUserAgent(getDefaultUserAgent());
         mHeaders.setAcceptEncoding("gzip, deflate");
-        mHeaders.getHeaders().set("Connection", "close");
+        mHeaders.getHeaders().set("Connection", "keep-alive");
         mHeaders.getHeaders().set("Accept", "*/*");
     }
 

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -99,7 +99,7 @@ else if (!"\r".equals(s)){
                     // socket may get detached after headers (websocket)
                     if (mSocket == null)
                         return;
-                    DataCallback callback = Util.getBodyDecoder(AsyncHttpResponseImpl.this, mRawHeaders, mReporter);
+                    DataCallback callback = Util.getBodyDecoder(AsyncHttpResponseImpl.this, mRawHeaders, false, mReporter);
                     mSocket.setDataCallback(callback);
                 }
             }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerRequestImpl.java
Patch:
@@ -67,7 +67,7 @@ else if (!"\r".equals(s)){
                 }
                 else {
                     mBody = Util.getBody(mRawHeaders);
-                    DataCallback callback = Util.getBodyDecoder(mBody, mRawHeaders, mReporter);
+                    DataCallback callback = Util.getBodyDecoder(mBody, mRawHeaders, true, mReporter);
                     mSocket.setDataCallback(callback);
                     onHeadersReceived();
                 }

File: AndroidAsync/src/com/koushikdutta/async/AsyncSocketImpl.java
Patch:
@@ -213,7 +213,7 @@ public void setClosedCallback(CompletedCallback handler) {
     }
 
     @Override
-    public CompletedCallback getCloseHandler() {
+    public CompletedCallback getClosedCallback() {
         return mClosedHander;
     }
 

File: AndroidAsync/src/com/koushikdutta/async/BufferedDataSink.java
Patch:
@@ -103,7 +103,7 @@ public void setClosedCallback(CompletedCallback handler) {
     }
 
     @Override
-    public CompletedCallback getCloseHandler() {
-        return mDataSink.getCloseHandler();
+    public CompletedCallback getClosedCallback() {
+        return mDataSink.getClosedCallback();
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/DataSink.java
Patch:
@@ -14,5 +14,5 @@ public interface DataSink {
     public boolean isOpen();
     public void close();
     public void setClosedCallback(CompletedCallback handler);
-    public CompletedCallback getCloseHandler();
+    public CompletedCallback getClosedCallback();
 }

File: AndroidAsync/src/com/koushikdutta/async/FilteredDataSink.java
Patch:
@@ -123,7 +123,7 @@ public void setClosedCallback(CompletedCallback handler) {
     }
 
     @Override
-    public CompletedCallback getCloseHandler() {
-        return mSink.getCloseHandler();
+    public CompletedCallback getClosedCallback() {
+        return mSink.getClosedCallback();
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/ZipDataSink.java
Patch:
@@ -26,7 +26,7 @@ public void closeEntry() throws IOException {
     }
     
     protected void report(Exception e) {
-        CompletedCallback closed = getCloseHandler();
+        CompletedCallback closed = getClosedCallback();
         if (closed != null)
             closed.onCompleted(e);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
Patch:
@@ -36,7 +36,9 @@ public AsyncHttpRequest(URI uri, String method) {
         mRawHeaders.setStatusLine(getRequestLine());
         mHeaders.setHost(uri.getHost());
         mHeaders.setUserAgent(getDefaultUserAgent());
-        mHeaders.setAcceptEncoding("gzip");
+        mHeaders.setAcceptEncoding("gzip, deflate");
+        mHeaders.getHeaders().set("Connection", "close");
+        mHeaders.getHeaders().set("Accept", "*/*");
     }
 
     public URI getUri() {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -212,7 +212,7 @@ public void setClosedCallback(CompletedCallback handler) {
     }
 
     @Override
-    public CompletedCallback getCloseHandler() {
-        return mSink.getCloseHandler();
+    public CompletedCallback getClosedCallback() {
+        return mSink.getClosedCallback();
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -37,7 +37,7 @@ public ResponseHeaders getHeaders() {
         mSocket = socket;
         mSink = new BufferedDataSink(socket);
 
-        mRawHeaders.set("Connection", "keep-alive");
+        mRawHeaders.set("Connection", "Keep-Alive");
     }
     
     @Override
@@ -211,7 +211,7 @@ public void setClosedCallback(CompletedCallback handler) {
     }
 
     @Override
-    public CompletedCallback getCloseHandler() {
-        return mSink.getCloseHandler();
+    public CompletedCallback getClosedCallback() {
+        return mSink.getClosedCallback();
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -148,7 +148,7 @@ public String getPath() {
                 public Map<String, String> getQuery() {
                     String[] parts = fullPath.split("\\?", 2);
                     if (parts.length < 2)
-                        new Hashtable<String, String>();
+                        return new Hashtable<String, String>();
                     return UrlEncodedFormBody.parse(parts[1]);
                 }
             };

File: AndroidAsync/src/com/koushikdutta/async/http/HybiParser.java
Patch:
@@ -222,7 +222,7 @@ private void parseOpcode(byte data) throws ProtocolError {
             throw new ProtocolError("Bad opcode");
         }
 
-        if (FRAGMENTED_OPCODES.contains(mOpcode) && !mFinal) {
+        if (!FRAGMENTED_OPCODES.contains(mOpcode) && !mFinal) {
             throw new ProtocolError("Expected non-final packet");
         }
 

File: AndroidAsync/src/com/koushikdutta/async/http/HybiParser.java
Patch:
@@ -139,6 +139,7 @@ public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
         @Override
         public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
             byte[] bytes = new byte[mLengthSize];
+            bb.get(bytes);
             try {
                 parseExtendedLength(bytes);
             }
@@ -381,9 +382,7 @@ private void emitFrame() throws IOException {
     protected abstract void onDisconnect(int code, String reason);
     protected abstract void report(Exception ex);
 
-    protected void sendFrame(byte[] frame) {
-        Assert.fail();
-    }
+    protected abstract void sendFrame(byte[] frame);
 
     private void reset() {
         mMode = 0;

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -200,11 +200,11 @@ public void addAction(String action, String regex, HttpServerRequestCallback cal
         }
     }
 
-    public static interface WebSocketCallback {
+    public static interface WebSocketRequestCallback {
         public void onConnected(WebSocket webSocket, RequestHeaders headers);
     }
 
-    public void websocket(String regex, final WebSocketCallback callback) {
+    public void websocket(String regex, final WebSocketRequestCallback callback) {
         get(regex, new HttpServerRequestCallback() {
             @Override
             public void onRequest(final AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerRequestImpl.java
Patch:
@@ -67,7 +67,6 @@ else if (!"\r".equals(s)){
                 }
                 else {
                     mBody = Util.getBody(mRawHeaders);
-                    System.out.println(mBody.getClass());
                     DataCallback callback = Util.getBodyDecoder(mBody, mRawHeaders, mReporter);
                     mSocket.setDataCallback(callback);
                     onHeadersReceived();

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponseImpl.java
Patch:
@@ -36,6 +36,8 @@ public ResponseHeaders getHeaders() {
     AsyncHttpServerResponseImpl(AsyncSocket socket) {
         mSocket = socket;
         mSink = new BufferedDataSink(socket);
+
+        mRawHeaders.set("Connection", "keep-alive");
     }
     
     @Override

File: AndroidAsync/src/com/koushikdutta/async/AsyncSocket.java
Patch:
@@ -1,7 +1,7 @@
 package com.koushikdutta.async;
 
 
-public interface AsyncSocket extends DataExchange, CloseableData, CompletedEmitter {
+public interface AsyncSocket extends DataEmitter, DataSink, CloseableData, CompletedEmitter {
     public boolean isConnected();
     public void pause();
     public void resume();

File: AndroidAsync/src/com/koushikdutta/async/BufferedDataSink.java
Patch:
@@ -46,7 +46,9 @@ public void write(ByteBuffer bb) {
     public void write(ByteBufferList bb) {
         if (mPendingWrites == null)
             mDataSink.write(bb);
-        
+        else
+            Assert.assertTrue(mPendingWrites.remaining() <= mMaxBuffer);
+
         if (bb.remaining() > 0) {
             int toRead = Math.min(bb.remaining(), mMaxBuffer);
             if (toRead > 0) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponse.java
Patch:
@@ -1,11 +1,12 @@
 package com.koushikdutta.async.http;
 
-import com.koushikdutta.async.DataExchange;
 import com.koushikdutta.async.CompletedEmitter;
+import com.koushikdutta.async.DataEmitter;
+import com.koushikdutta.async.DataSink;
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.http.libcore.ResponseHeaders;
 
-public interface AsyncHttpResponse extends DataExchange, CompletedEmitter {
+public interface AsyncHttpResponse extends DataEmitter, DataSink, CompletedEmitter {
     public void setCompletedCallback(CompletedCallback handler);
     public CompletedCallback getCompletedCallback();
     public ResponseHeaders getHeaders();

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -7,7 +7,6 @@
 import com.koushikdutta.async.AsyncSocket;
 import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.DataEmitter;
-import com.koushikdutta.async.DataExchange;
 import com.koushikdutta.async.FilteredDataCallback;
 import com.koushikdutta.async.LineEmitter;
 import com.koushikdutta.async.LineEmitter.StringCallback;
@@ -27,7 +26,7 @@ RawHeaders getRawHeaders() {
     }
 
     private AsyncHttpRequestBody mWriter;
-    void setSocket(AsyncSocket socket, DataExchange exchange) {
+    void setSocket(AsyncSocket socket, AsyncSocket exchange) {
         mSocket = socket;
         mExchange = exchange;
 
@@ -107,7 +106,7 @@ protected void report(Exception e) {
     
     private AsyncSocket mSocket;
     private AsyncHttpRequest mRequest;
-    private DataExchange mExchange;
+    private AsyncSocket mExchange;
     private ResponseHeaders mHeaders;
     public AsyncHttpResponseImpl(AsyncHttpRequest request) {
         mRequest = request;

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -25,7 +25,7 @@ public static void emitAllData(DataEmitter emitter, ByteBufferList list) {
             }
         }
         if (!(list.remaining() == 0 || (socket != null && socket.isPaused()))) {
-            System.out.println("Data: " + list.getString());
+            System.out.println("Data: " + list.peekString());
             System.out.println("handler: " + handler);
             Assert.fail();
         }

File: AndroidAsync/src/com/koushikdutta/async/http/UrlEncodedFormBody.java
Patch:
@@ -61,7 +61,7 @@ public void onDataAvailable(DataEmitter emitter, ByteBufferList bb) {
     public void onCompleted(Exception ex) {
         ArrayList<NameValuePair> params;
         mParameters = params = new ArrayList<NameValuePair>();
-        String[] pairs = data.getString().split("&");
+        String[] pairs = data.peekString().split("&");
         for (String p : pairs) {
             String[] pair = p.split("=", 2);
             if (pair.length == 0)

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -178,7 +178,8 @@ public void spewString() {
         }
     }
 
-    public String debug() {
+    // not doing toString as this is really nasty in the debugger...
+    public String getString() {
         StringBuilder builder = new StringBuilder();
         for (ByteBuffer bb: this) {
             builder.append(new String(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining()));

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequestBody.java
Patch:
@@ -6,4 +6,5 @@
 public interface AsyncHttpRequestBody extends DataCallback, CompletedCallback {
     public void write(AsyncHttpRequest request, AsyncHttpResponse sink);
     public String getContentType();
+    public boolean readFullyOnRequest();
 }

File: AndroidAsync/src/com/koushikdutta/async/http/filter/ChunkedInputFilter.java
Patch:
@@ -8,7 +8,7 @@
 import com.koushikdutta.async.Util;
 import com.koushikdutta.async.callback.CompletedCallback;
 
-public abstract class ChunkedInputFilter extends FilteredDataCallback implements CompletedCallback {
+public class ChunkedInputFilter extends FilteredDataCallback {
     private int mChunkLength = 0;
     private int mChunkLengthRemaining = 0;
     private State mState = State.CHUNK_LEN;
@@ -99,14 +99,14 @@ else if (c >= 'A' && c <= 'F')
                     }
                     else {
                         mState = State.COMPLETE;
-                        onCompleted(null);
+                        report(null);
                     }
                     mChunkLength = 0;
                     break;
                 case COMPLETE:
                     Exception fail = new Exception("Continued receiving data after chunk complete");
                     report(fail);
-                    onCompleted(fail);
+                    report(fail);
                     return;
                 }
             }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponse.java
Patch:
@@ -16,4 +16,5 @@ public interface AsyncHttpServerResponse extends DataSink {
     public void responseCode(int code);
     public ResponseHeaders getHeaders();
     public void writeHead();
+    public void setContentType(String contentType);
 }

File: AndroidAsync/src/com/koushikdutta/async/callback/RequestCallback.java
Patch:
@@ -4,4 +4,5 @@
 
 public interface RequestCallback<T> {
     public void onCompleted(Exception e, AsyncHttpResponse response, T result);
+    public void onProgress(AsyncHttpResponse response, int downloaded, int total);
 }

File: AndroidAsync/src/com/koushikdutta/async/http/filter/GZIPInputFilter.java
Patch:
@@ -1,6 +1,5 @@
 package com.koushikdutta.async.http.filter;
 
-import java.io.EOFException;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -40,6 +39,7 @@ public static int unsignedToBytes(byte b) {
     
     DataEmitterReader mHeaderParser;
     @Override
+    @SuppressWarnings("unused")
     public void onDataAvailable(final DataEmitter emitter, ByteBufferList bb) {
         if (mNeedsHeader) {
             final PushParser parser = new PushParser(emitter);
@@ -84,7 +84,7 @@ public void tap(byte[] buf) {
 
                     next();
                 }
-                public void next() {
+                private void next() {
                     PushParser parser = new PushParser(emitter);
                     DataCallback summer = new DataCallback() {
                         @Override

File: AndroidAsync/gen/com/koushikdutta/async/R.java
Patch:
@@ -14,7 +14,4 @@ public static final class drawable {
         public static int ic_action_search=0x7f020000;
         public static int ic_launcher=0x7f020001;
     }
-    public static final class string {
-        public static int name=0x7f030000;
-    }
 }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -170,7 +170,7 @@ public void get(String regex, HttpServerRequestCallback callback) {
         addAction("GET", regex, callback);
     }
     
-    InputStream getAssetStream(final Context context, String asset) {
+    public static InputStream getAssetStream(final Context context, String asset) {
         String apkPath = context.getPackageResourcePath();
         String assetPath = "assets/" + asset;
         try {

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponse.java
Patch:
@@ -1,5 +1,7 @@
 package com.koushikdutta.async.http.server;
 
+import java.io.File;
+
 import org.json.JSONObject;
 
 import com.koushikdutta.async.DataSink;
@@ -10,6 +12,7 @@ public interface AsyncHttpServerResponse extends DataSink {
     public void send(String contentType, String string);
     public void send(String string);
     public void send(JSONObject json);
+    public void sendFile(File file);
     public void responseCode(int code);
     public ResponseHeaders getHeaders();
     public void writeHead();

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -75,6 +75,7 @@ else if (uri.getScheme().equals("https"))
             }
         }
         final String lookup = uri.getScheme() + "//" + uri.getHost() + ":" + port;
+        final int finalPort = port;
 
         final InternalConnectCallback socketConnected = new InternalConnectCallback() {
             @Override
@@ -143,7 +144,7 @@ public void onClosed() {
                 if (exchange == null) {
                     exchange = socket;
                     if (request.getUri().getScheme().equals("https")) {
-                        SSLDataExchange ssl = new SSLDataExchange(socket);
+                        SSLDataExchange ssl = new SSLDataExchange(socket, uri.getHost(), finalPort);
                         exchange = ssl;
                         socket.setDataCallback(ssl);
                     }

File: AndroidAsyncSample/gen/com/koushikdutta/async/sample/BuildConfig.java
Patch:
@@ -2,5 +2,5 @@
 package com.koushikdutta.async.sample;
 
 public final class BuildConfig {
-    public final static boolean DEBUG = false;
+    public final static boolean DEBUG = true;
 }
\ No newline at end of file

File: AndroidAsyncSample/src/com/koushikdutta/async/sample/MainActivity.java
Patch:
@@ -20,7 +20,7 @@ public class MainActivity extends Activity {
     ImageView rommanager;
     ImageView tether;
     ImageView desksms;
-    
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServer.java
Patch:
@@ -96,7 +96,7 @@ public void onListening(AsyncServerSocket socket) {
             }
         });
     }
-    
+
     private void report(Exception ex) {
         if (mExceptionCallback != null)
             mExceptionCallback.onException(ex);
@@ -194,6 +194,7 @@ InputStream getAssetStream(final Context context, String asset) {
         mContentTypes.put("png", "image/png");
         mContentTypes.put("jpg", "image/jpeg");
         mContentTypes.put("html", "text/html");
+        mContentTypes.put("css", "text/css");
     }
     
     static String getContentType(String path) {

File: AndroidAsync/gen/com/koushikdutta/async/BuildConfig.java
Patch:
@@ -2,5 +2,5 @@
 package com.koushikdutta.async;
 
 public final class BuildConfig {
-    public final static boolean DEBUG = true;
+    public final static boolean DEBUG = false;
 }
\ No newline at end of file

File: AndroidAsync/gen/com/koushikdutta/async/R.java
Patch:
@@ -11,10 +11,10 @@ public final class R {
     public static final class attr {
     }
     public static final class drawable {
-        public static final int ic_action_search=0x7f020000;
-        public static final int ic_launcher=0x7f020001;
+        public static int ic_action_search=0x7f020000;
+        public static int ic_launcher=0x7f020001;
     }
     public static final class string {
-        public static final int name=0x7f030000;
+        public static int name=0x7f030000;
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/Util.java
Patch:
@@ -5,6 +5,7 @@
 import java.nio.ByteBuffer;
 
 import junit.framework.Assert;
+import android.util.Log;
 
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.callback.DataCallback;
@@ -69,6 +70,7 @@ public void onWriteable() {
                         ds.write(pending);
                     }
                     while (remaining != pending.remaining());
+                    Log.i("Util", "waiting");
                 }
                 catch (Exception e) {
                     close();

File: AndroidAsync/src/com/koushikdutta/async/callback/ListenCallback.java
Patch:
@@ -1,9 +1,11 @@
 package com.koushikdutta.async.callback;
 
+import com.koushikdutta.async.AsyncServerSocket;
 import com.koushikdutta.async.AsyncSocket;
 import com.koushikdutta.async.ExceptionCallback;
 
 
 public interface ListenCallback extends ExceptionCallback {
     public void onAccepted(AsyncSocket handler);
+    public void onListening(AsyncServerSocket socket);
 }

File: AndroidAsync/src/com/koushikdutta/async/http/server/AsyncHttpServerResponse.java
Patch:
@@ -7,6 +7,7 @@
 
 public interface AsyncHttpServerResponse extends DataSink {
     public void end();
+    public void send(String contentType, String string);
     public void send(String string);
     public void send(JSONObject json);
     public void responseCode(int code);

File: AndroidAsyncSample/gen/com/koushikdutta/async/sample/BuildConfig.java
Patch:
@@ -2,5 +2,5 @@
 package com.koushikdutta.async.sample;
 
 public final class BuildConfig {
-    public final static boolean DEBUG = true;
+    public final static boolean DEBUG = false;
 }
\ No newline at end of file

File: AndroidAsync/src/com/koushikdutta/async/BufferedDataSink.java
Patch:
@@ -40,7 +40,7 @@ public void write(ByteBuffer bb) {
             mDataSink.write(bb);
             if (bb.remaining() > 0) {
                 mPendingWrites = new ByteBufferList();
-                mPendingWrites.add(bb);
+                mPendingWrites.add(ByteBuffer.wrap(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining()));
                 bb.position(0);
                 bb.limit(0);
             }

File: AndroidAsync/gen/com/koushikdutta/async/R.java
Patch:
@@ -11,10 +11,10 @@ public final class R {
     public static final class attr {
     }
     public static final class drawable {
-        public static final int ic_action_search=0x7f020000;
-        public static final int ic_launcher=0x7f020001;
+        public static int ic_action_search=0x7f020000;
+        public static int ic_launcher=0x7f020001;
     }
     public static final class string {
-        public static final int name=0x7f030000;
+        public static int name=0x7f030000;
     }
 }

File: AndroidAsync/src/com/koushikdutta/async/ByteBufferList.java
Patch:
@@ -87,6 +87,9 @@ public ByteBufferList get(int length) {
 
     public ByteBuffer read(int count) {
         Assert.assertTrue(count <= remaining());
+        if (count == 0) {
+            return ByteBuffer.wrap(new byte[0]);
+        }
         
         ByteBuffer first = mBuffers.peek();
         while (first.position() == first.limit()) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -98,7 +98,6 @@ protected void onHeadersReceived() {
                             }
                             
                             String kas = headers.get("Connection");
-                            // wip
                             if (kas != null && "keep-alive".toLowerCase().equals(kas.toLowerCase()))
                                 keepalive = true;
                         }
@@ -161,7 +160,6 @@ public void onClosed() {
                 for (final SocketExchange se: sockets) {
                     final AsyncSocket socket = se.socket;
                     if (socket.isConnected()) {
-                        System.out.println("reuing socket");
                         sockets.remove(se);
                         socket.setClosedCallback(null);
                         server.post(new Runnable() {
@@ -317,7 +315,7 @@ public void onCompleted(Exception ex) {
     }
     
     private static void download(AsyncHttpRequest req, final ResultPairCallback callback, final ResultConvert convert) {
-        final Handler handler = new Handler();
+        final Handler handler = Looper.myLooper() == null ? null : new Handler();
         connect(req, new HttpConnectCallback() {
             ByteBufferList buffer = new ByteBufferList();
             @Override

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpRequest.java
Patch:
@@ -14,7 +14,7 @@ public String getRequestLine() {
         if (path.length() == 0)
             path = "/";
         String query = getUri().getQuery();
-        if (query.length() != 0)
+        if (query != null && query.length() != 0)
             path += "?" + getUri().getQuery();
         return String.format("%s %s HTTP/1.1", mMethod, path);
     }

File: AndroidAsync/src/com/koushikdutta/async/http/server/WebSocketImpl.java
Patch:
@@ -40,8 +40,8 @@ public WebSocketImpl(AsyncHttpServerRequestImpl request, AsyncHttpServerResponse
         response.getHeaders().getHeaders().set("Upgrade", "WebSocket");
         response.getHeaders().getHeaders().set("Connection", "Upgrade");
         response.getHeaders().getHeaders().set("Sec-WebSocket-Accept", sha1);
-        if (origin != null)
-            response.getHeaders().getHeaders().set("Access-Control-Allow-Origin", "http://" + origin);
+//        if (origin != null)
+//            response.getHeaders().getHeaders().set("Access-Control-Allow-Origin", "http://" + origin);
         response.writeHead();
         
         mParser = new HybiParser(request) {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpResponseImpl.java
Patch:
@@ -141,7 +141,6 @@ protected void report(Exception e) {
         onCompleted(e);
     }
     
-    private boolean hasParsedStatusLine = false;
     private BufferedDataSink mWriter;
     private AsyncSocket mSocket;
     private AsyncHttpRequest mRequest;

File: AndroidAsync/src/com/koushikdutta/test/TestActivity.java
Patch:
@@ -192,7 +192,7 @@ public void run() {
             for (int i = 0; i < 5; i++) {
                 AsyncHttpClient.download("http://builder.clockworkmod.com", new StringCallback() {
                     @Override
-                    public void onCompleted(Exception e, String result) {
+                    public void onCompleted(Exception e, AsyncHttpResponse response, String result) {
                         if (e != null) {
                             e.printStackTrace();
                         }

File: AndroidAsyncSample/src/com/koushikdutta/async/sample/MainActivity.java
Patch:
@@ -14,6 +14,7 @@
 import android.widget.ImageView;
 
 import com.koushikdutta.async.http.AsyncHttpClient;
+import com.koushikdutta.async.http.AsyncHttpResponse;
 
 public class MainActivity extends Activity {
     ImageView rommanager;
@@ -47,7 +48,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
     private void downloadFile(final ImageView iv, String url, final String filename) {
         AsyncHttpClient.download(url, filename, new AsyncHttpClient.FileCallback() {
             @Override
-            public void onCompleted(Exception e, File result) {
+            public void onCompleted(Exception e, AsyncHttpResponse response, File result) {
                 if (e != null) {
                     e.printStackTrace();
                     return;

File: AndroidAsync/src/com/koushikdutta/async/AsyncServer.java
Patch:
@@ -117,7 +117,7 @@ public void listen(InetAddress host, int port, final ListenCallback handler) thr
         final ServerSocketChannelWrapper wrapper = new ServerSocketChannelWrapper(server);
         InetSocketAddress isa = new InetSocketAddress(host, port);
         server.socket().bind(isa);
-        run(new Runnable() {
+        post(new Runnable() {
             @Override
             public void run() {
                 try {

File: AndroidAsync/src/com/koushikdutta/async/http/AsyncHttpClient.java
Patch:
@@ -54,7 +54,7 @@ public static void connect(final AsyncServer server, final AsyncHttpRequest requ
         connect(server, request, callback, 0);
     }
 
-    public static void connect(final AsyncServer server, final AsyncHttpRequest request, final HttpConnectCallback callback, int redirectCount) {
+    private static void connect(final AsyncServer server, final AsyncHttpRequest request, final HttpConnectCallback callback, int redirectCount) {
         if (redirectCount > 5) {
             callback.onConnectCompleted(new Exception("too many redirects"), null);
             return;

