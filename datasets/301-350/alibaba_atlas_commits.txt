File: atlas-core/src/main/java/android/taobao/atlas/bridge/BridgeApplicationDelegate.java
Patch:
@@ -226,7 +226,6 @@
 import android.taobao.atlas.runtime.RuntimeVariables;
 import android.taobao.atlas.runtime.WindowSessionProxy;
 import android.taobao.atlas.runtime.newcomponent.AdditionalActivityManagerProxy;
-import android.taobao.atlas.util.AtlasCrashManager;
 import android.taobao.atlas.util.SoLoader;
 import android.taobao.atlas.util.log.IAlarmer;
 import android.taobao.atlas.util.log.IMonitor;

File: atlas-core/src/main/java/android/taobao/atlas/startup/AtlasBridgeApplication.java
Patch:
@@ -293,7 +293,7 @@ protected void attachBaseContext(Context base) {
             }
             KernalVersionManager.instance().init();
             if(!KernalBundle.checkLoadKernalDebugPatch(this)){
-                if(KernalBundle.hasKernalPatch()) {
+                if(KernalBundle.hasKernalPatch() && Build.VERSION.SDK_INT < 28) {
                     //has patch ? true -> must load successed
                     hasKernalPatched = KernalBundle.checkloadKernalBundle(this, KernalConstants.PROCESS);
                     if (!hasKernalPatched) {

File: atlas-core/src/main/java/android/taobao/atlas/startup/AtlasBridgeApplication.java
Patch:
@@ -289,7 +289,7 @@ protected void attachBaseContext(Context base) {
             }
             KernalVersionManager.instance().init();
             if(!KernalBundle.checkLoadKernalDebugPatch(this)){
-                if(KernalBundle.hasKernalPatch()) {
+                if(KernalBundle.hasKernalPatch()&& Build.VERSION.SDK_INT < 28) {
                     //has patch ? true -> must load successed
                     hasKernalPatched = KernalBundle.checkloadKernalBundle(this, KernalConstants.PROCESS);
                     if (!hasKernalPatched) {

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -228,9 +228,6 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.os.Build;
-import android.taobao.atlas.framework.Atlas;
-import android.taobao.atlas.framework.FrameworkProperties;
-import android.taobao.atlas.startup.AtlasBridgeApplication;
 import android.taobao.atlas.startup.KernalVersionManager;
 import android.taobao.atlas.startup.NClassLoader;
 import android.text.TextUtils;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasFixStackFramesTransform.java
Patch:
@@ -185,9 +185,6 @@ public void transform(TransformInvocation transformInvocation) throws TransformE
         try {
             for (TransformInput input : transformInvocation.getInputs()) {
                 for (JarInput jarInput : input.getJarInputs()) {
-                    if (input.getJarInputs().size()!= BuildAtlasEnvTask.verifySize){
-                        throw new IOException("miss dependency in first transform!");
-                    }
                     boolean flag = inMainDex(jarInput);
                     File output =
                             outputProvider.getContentLocation(

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -338,8 +338,7 @@ public static boolean checkLoadKernalDebugPatch(Application application) {
 
                     File internalDebugBundleDir = new File(new File(application.getFilesDir(), "debug_storage"), KERNAL_BUNDLE_NAME);
                     internalDebugBundleDir.mkdirs();
-                    DexFile patchDexFile = (DexFile) KernalConstants.dexBooster.loadDex(KernalConstants.baseContext, patchFile.getAbsolutePath(),
-                            new File(internalDebugBundleDir, "patch.dex").getAbsolutePath(), 0, true);
+                    DexFile patchDexFile = (DexFile) DexFile.loadDex(patchFile.getAbsolutePath(),new File(internalDebugBundleDir, "patch.dex").getAbsolutePath(), 0);
                     if (bundle.needReplaceClassLoader(application)) {
                         NClassLoader loader = new NClassLoader(".", KernalBundle.class.getClassLoader().getParent());
                         try {

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalConstants.java
Patch:
@@ -209,7 +209,6 @@
 package android.taobao.atlas.startup.patch;
 
 import android.content.Context;
-import android.taobao.atlas.startup.DexLoadBooster;
 
 /**
  * Created by guanjie on 2017/1/19.
@@ -224,7 +223,6 @@ public class KernalConstants {
     public static  long LASTUPDATETIME;
     public static  Context baseContext;
     public static  String  RAW_APPLICATION_NAME;
-    public static DexLoadBooster dexBooster;
 
     public static final String ATLAS_MONITOR = "Atlas_monitor";
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/incremental/TBConstructorRedirection.java
Patch:
@@ -66,7 +66,7 @@ protected void doRedirect(GeneratorAdapter mv, int change) {
         ByteCodeUtils.newVariableArray(mv, constructor.variables.subList(0, constructor.localsAtLoadThis));
         mv.arrayStore(Type.getType(Object.class));
 
-        mv.invokeInterface(TBIncrementalVisitor.ALI_CHANGE_TYPE, Method.getMethod("Object access$dispatch(String, Object[])"));
+        mv.invokeInterface(TBIncrementalVisitor.ALI_CHANGE_TYPE, Method.getMethod("Object ipc$dispatch(String, Object[])"));
         mv.visitTypeInsn(Opcodes.CHECKCAST, "[Ljava/lang/Object;");
         //// At this point, init$args has been called and the result Object is on the stack.
         //// The value of that Object is Object[] with exactly n + 2 elements.
@@ -101,7 +101,7 @@ protected void doRedirect(GeneratorAdapter mv, int change) {
         mv.visitVarInsn(Opcodes.ALOAD, 0);
         mv.arrayStore(Type.getType(Object.class));
 
-        mv.invokeInterface(TBIncrementalVisitor.ALI_CHANGE_TYPE, Method.getMethod("Object access$dispatch(String, Object[])"));
+        mv.invokeInterface(TBIncrementalVisitor.ALI_CHANGE_TYPE, Method.getMethod("Object ipc$dispatch(String, Object[])"));
         mv.pop();
     }
 }

File: atlas-demo/AtlasDemo/firstbundle/src/main/java/com/taobao/firstbundle/fragment/MyItemRecyclerViewAdapter.java
Patch:
@@ -5,8 +5,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
-
-
 import com.taobao.firstbundle.R;
 
 import java.util.List;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -380,7 +380,7 @@ public void accept(ApplicationVariant applicationVariant) {
 
                                                               mtlTaskContextList.add(new MtlTaskContext(MergeAssetAwbsConfigAction.class, null));
 
-                                                              if (null != androidExtension.getDataBinding() && androidExtension.getDataBinding().isEnabled()) {
+                                                              if (null != androidExtension.getDataBinding() && androidExtension.getDataBinding().isEnabled() && !appVariantContext.getAtlasExtension().getTBuildConfig().getAllBundlesToMdex()) {
 
 //                                                                  mtlTaskContextList.add(
 //                                                                          new MtlTaskContext(AwbDataBindingProcessLayoutTask.ConfigAction.class, null));
@@ -430,7 +430,7 @@ public void execute(Task task) {
                                                               mtlTaskContextList.add(new MtlTaskContext(JavacAwbsTask.ConfigAction.class, null));
 
 
-                                                              if (null != androidExtension.getDataBinding() && androidExtension.getDataBinding().isEnabled()) {
+                                                              if (null != androidExtension.getDataBinding() && androidExtension.getDataBinding().isEnabled() && !appVariantContext.getAtlasExtension().getTBuildConfig().getAllBundlesToMdex()) {
                                                                   mtlTaskContextList.add(new MtlTaskContext(AwbDataBindingRenameTask.ConfigAction.class, null));
                                                               }
 
@@ -515,7 +515,7 @@ public Collection<File> get() {
                                                               transformReplacer.disableCache();
 
 
-                                                              if (variantScope.getGlobalScope().getExtension().getDataBinding().isEnabled()) {
+                                                              if (variantScope.getGlobalScope().getExtension().getDataBinding().isEnabled() && !appVariantContext.getAtlasExtension().getTBuildConfig().getAllBundlesToMdex()) {
                                                                   transformReplacer.replaceDataBindingMergeArtifactsTransform();
                                                               }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingExportBuildInfoTask.java
Patch:
@@ -263,7 +263,7 @@ public void run() throws ExecutionException, InterruptedException {
 
         for (final AwbBundle awbBundle : atlasDependencyTree.getAwbBundles()) {
 
-            if (!appVariantContext.getAtlasExtension().getTBuildConfig().getDataBindingBundles().contains(awbBundle.getPackageName())){
+            if (!appVariantContext.getAtlasExtension().getTBuildConfig().getDataBindingBundles().contains(awbBundle.getPackageName())|| awbBundle.isMBundle){
                 continue;
             }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingMergeArtifactsTask.java
Patch:
@@ -271,7 +271,7 @@ void createAwbPackages() throws ExecutionException, InterruptedException {
 
         for (final AwbBundle awbBundle : atlasDependencyTree.getAwbBundles()) {
 
-            if (!appVariantContext.getAtlasExtension().getTBuildConfig().getDataBindingBundles().contains(awbBundle.getPackageName())){
+            if (!appVariantContext.getAtlasExtension().getTBuildConfig().getDataBindingBundles().contains(awbBundle.getPackageName()) || awbBundle.isMBundle){
                 continue;
             }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingProcessLayoutTask.java
Patch:
@@ -252,7 +252,7 @@ public void run() throws ExecutionException, InterruptedException {
 
         for (final AwbBundle awbBundle : atlasDependencyTree.getAwbBundles()) {
 
-            if (!appVariantContext.getAtlasExtension().getTBuildConfig().getDataBindingBundles().contains(awbBundle.getPackageName())){
+            if (!appVariantContext.getAtlasExtension().getTBuildConfig().getDataBindingBundles().contains(awbBundle.getPackageName()) || awbBundle.isMBundle){
                 continue;
             }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingRenameTask.java
Patch:
@@ -269,7 +269,7 @@ void createAwbPackages() throws ExecutionException, InterruptedException {
                 continue;
             }
 
-            if (!awbBundle.isDataBindEnabled()) {
+            if (!awbBundle.isDataBindEnabled()|| awbBundle.isMBundle) {
                 continue;
             }
             workerExecutor.execute(new Callable() {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasDataBindingMergeArtifactsTransform.java
Patch:
@@ -89,7 +89,7 @@ private void incrementalUpdate(@NonNull Collection<TransformInput> inputs) {
 
         inputs.forEach(input -> input.getDirectoryInputs().stream().filter((Predicate<DirectoryInput>) input1 -> {
              File file = input1.getFile().getParentFile();
-            if (AtlasBuildContext.atlasMainDexHelperMap.get(variantContext.getVariantName()).getMainManifestFiles().containsKey(file.getAbsolutePath())){
+            if (AtlasBuildContext.atlasMainDexHelperMap.get(variantContext.getVariantName()).getMainManifestFiles().containsKey(file.getAbsolutePath()) || variantContext.getAtlasExtension().getTBuildConfig().getAllBundlesToMdex()){
                 return false;
             }
             return true;
@@ -147,7 +147,7 @@ private void fullCopy(Collection<TransformInput> inputs) throws IOException {
                 if (!dataBindingDir.exists()) {
                     continue;
                 }
-                if (!AtlasBuildContext.atlasMainDexHelperMap.get(variantContext.getVariantName()).getMainManifestFiles().containsKey(dataBindingDir.getParentFile().getAbsolutePath())){
+                if (!AtlasBuildContext.atlasMainDexHelperMap.get(variantContext.getVariantName()).getMainManifestFiles().containsKey(dataBindingDir.getParentFile().getAbsolutePath())&&!variantContext.getAtlasExtension().getTBuildConfig().getAllBundlesToMdex()){
                     continue;
                 }
 

File: atlas-core/src/main/java/android/taobao/atlas/framework/Atlas.java
Patch:
@@ -255,6 +255,8 @@ public class Atlas {
     public static String sAPKSource ;
     public static boolean Downgrade_H5 = false;
     public static boolean isDebug;
+
+
     public static Set<String> sDisableBundle = null;
 
     private Atlas(){
@@ -413,6 +415,7 @@ public void installBundle(final String location, final File file) throws BundleE
         }
     }
 
+
     @Deprecated
     public void uninstallBundle(final String location) throws BundleException {
         Bundle bundle = Framework.getBundle(location);

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -233,7 +233,6 @@
 import android.taobao.atlas.startup.AtlasBridgeApplication;
 import android.taobao.atlas.startup.KernalVersionManager;
 import android.taobao.atlas.startup.NClassLoader;
-import android.taobao.atlas.startup.patch.releaser.PatchDexProfile;
 import android.text.TextUtils;
 import android.util.Log;
 import android.widget.Toast;

File: atlas-update/src/main/java/com/taobao/atlas/update/util/PatchMerger.java
Patch:
@@ -44,7 +44,7 @@ public class PatchMerger {
     private static String MAIN_DEX = "com.taobao.maindex";
     private boolean lowDisk = false;
     static {
-        supportMerge = true;
+        supportMerge = Build.VERSION.SDK_INT < 21;
     }
 
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/visitor/ModifyClassVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.taobao.android.builder.insant.visitor;
 
 import com.taobao.android.builder.insant.TaobaoInstantRunTransform;
-import com.taobao.android.builder.insant.incremental.TBIncrementalVisitor;
+import com.android.build.gradle.internal.incremental.TBIncrementalVisitor;
 import org.objectweb.asm.*;
 
 /**

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/visitor/ModifyFieldVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.taobao.android.builder.insant.visitor;
 
 import com.taobao.android.builder.insant.TaobaoInstantRunTransform;
-import com.taobao.android.builder.insant.incremental.TBIncrementalVisitor;
+import com.android.build.gradle.internal.incremental.TBIncrementalVisitor;
 import org.objectweb.asm.AnnotationVisitor;
 import org.objectweb.asm.FieldVisitor;
 import org.objectweb.asm.TypePath;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/visitor/ModifyMethodVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.taobao.android.builder.insant.visitor;
 
 import com.taobao.android.builder.insant.TaobaoInstantRunTransform;
-import com.taobao.android.builder.insant.incremental.TBIncrementalVisitor;
+import com.android.build.gradle.internal.incremental.TBIncrementalVisitor;
 import org.objectweb.asm.AnnotationVisitor;
 import org.objectweb.asm.MethodVisitor;
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/DelegateProguardTransform.java
Patch:
@@ -140,6 +140,8 @@ public void transform(TransformInvocation transformInvocation) throws TransformE
             applyBundleProguardConfigration(appVariantContext);
         }
 
+        proGuardTransform.setConfigurationFiles(appVariantContext.getScope().getGlobalScope().getProject().files(defaultProguardFiles));
+
         //apply mapping
         applyMapping(appVariantContext);
 
@@ -240,7 +242,6 @@ public File applyBundleInOutConfigration(final AppVariantContext appVariantConte
                 variantScope.getVariantConfiguration().getFullName());
 
         if (dependencyTree.getAwbBundles().size() > 0) {
-
             BaseVariantOutput vod = (BaseVariantOutput) appVariantContext.getVariantOutputData().iterator().next();
             AppVariantOutputContext appVariantOutputContext = appVariantContext.getAppVariantOutputContext(ApkDataUtils.get(vod));
             File awbObfuscatedDir = new File(globalScope.getIntermediatesDir(),
@@ -256,7 +257,6 @@ public File applyBundleInOutConfigration(final AppVariantContext appVariantConte
             }
 
             defaultProguardFiles.add(awbInOutConfig);
-            proGuardTransform.setConfigurationFiles(appVariantContext.getScope().getGlobalScope().getProject().files(defaultProguardFiles));
 
         }
 
@@ -311,7 +311,7 @@ public void applyBundleProguardConfigration(final AppVariantContext appVariantCo
                 }
             }
         }
-        proGuardTransform.setConfigurationFiles(appVariantContext.getScope().getGlobalScope().getProject().files(proguardFiles));
+        defaultProguardFiles.addAll(proguardFiles);
 
     }
 }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/incremental/TBIncrementalVisitor.java
Patch:
@@ -156,6 +156,7 @@ protected String getCommonSuperClass(final String type1, final String type2) {
 
         if (!hasOtherMethod) {
             if (visitorBuilder.getOutputType() == OutputType.INSTRUMENT) {
+                Files.createParentDirs(outputFile);
                 Files.write(classBytes, outputFile);
                 return outputFile;
             } else {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/DexMergeTransformCallable.java
Patch:
@@ -68,7 +68,7 @@ public Void call() throws Exception {
                         new DxContext(
                                 processOutput.getStandardOutput(), processOutput.getErrorOutput());
                 merger = DexArchiveMerger.createDxDexMerger(dxContext,forkJoinPool);
-                ReflectUtils.updateField(merger,"mergingStrategy",new AtlasDexArchiveMerger.AtlasDexMergingStrategy());
+                ReflectUtils.updateField(merger,"mergingStrategy",new AtlasDexArchiveMerger.AtlasDexRefMergingStrategy());
 //                merger = new DexArchiveMergerHook(dxContext,new AtlasDexArchiveMerger.AtlasDexRefMergingStrategy(),forkJoinPool);
                 break;
             case D8:

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/TaobaoInstantRunTransform.java
Patch:
@@ -490,7 +490,7 @@ protected Void transformToClasses3Format(File inputDir, File inputFile, File out
                         IncrementalChangeVisitor.VISITOR_BUILDER,
                         LOGGER,
                         null,
-                        false, variantContext.getAtlasExtension().getTBuildConfig().isPatchConstructors());
+                        false, variantContext.getAtlasExtension().getTBuildConfig().isPatchConstructors(),variantContext.getAtlasExtension().getTBuildConfig().isPatchAndroidSubClazz());
 
         // if the visitor returned null, that means the class cannot be hot swapped or more likely
         // that it was disabled for InstantRun, we don't add it to our collection of generated
@@ -549,7 +549,7 @@ protected Void transformToClasses2Format(
                         errorType -> {
                             errors.add(errorType.name() + ":" + path);
                         },
-                        variantContext.getAtlasExtension().getTBuildConfig().isInjectSerialVersionUID(), variantContext.getAtlasExtension().getTBuildConfig().isPatchConstructors());
+                        variantContext.getAtlasExtension().getTBuildConfig().isInjectSerialVersionUID(), variantContext.getAtlasExtension().getTBuildConfig().isPatchConstructors(),variantContext.getAtlasExtension().getTBuildConfig().isPatchAndroidSubClazz());
                 if (file.length() == inputFile.length()) {
                     errors.add("NO INJECT:" + path);
                 }else {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/DexMergeTransformCallable.java
Patch:
@@ -68,6 +68,7 @@ public Void call() throws Exception {
                         new DxContext(
                                 processOutput.getStandardOutput(), processOutput.getErrorOutput());
                 merger = DexArchiveMerger.createDxDexMerger(dxContext,forkJoinPool);
+                ReflectUtils.updateField(merger,"mergingStrategy",new AtlasDexArchiveMerger.AtlasDexMergingStrategy());
 //                merger = new DexArchiveMergerHook(dxContext,new AtlasDexArchiveMerger.AtlasDexRefMergingStrategy(),forkJoinPool);
                 break;
             case D8:

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/TaobaoInstantRunTransform.java
Patch:
@@ -498,6 +498,7 @@ protected Void transformToClasses2Format(
                         try {
                             Files.createParentDirs(outputFile);
                             Files.copy(inputFile, outputFile);
+                            errors.add("NO INJECT:" + path);
                             return null;
                         } catch (IOException e1) {
                             e1.printStackTrace();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/hook/dex/AtlasDexArchiveMerger.java
Patch:
@@ -277,6 +277,7 @@ private boolean tryAddFields(@NonNull Dex dexFile) {
 
             // find how many references are shared, and deduct from the total count
             int shared = Sets.intersection(fieldsEvaluated, fieldRefs).size();
+
             if (fieldRefs.size() + fieldsEvaluated.size() - shared >MAX_NUMBER_OF_IDS_IN_DEX ) {
                 return false;
             } else {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/BuildAtlasEnvTask.java
Patch:
@@ -712,9 +712,6 @@ private static Spec<ComponentIdentifier> getComponentFilter(
 
     private boolean isMBundle(AppVariantContext appVariantContext, AwbBundle awbBundle){
 
-        if (awbBundle.getResolvedCoordinates().getArtifactId().equals("custom-detail-android")){
-            return false;
-        }
 
         if (appVariantContext.getAtlasExtension().getTBuildConfig().getOutOfApkBundles().contains(awbBundle.getResolvedCoordinates().getArtifactId())){
             return false;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/manifest/ManifestFileUtils.java
Patch:
@@ -314,7 +314,6 @@ public static Result postProcessManifests(File mainManifest, Map<String, File> l
             removeProvider(document);
         }
         if (isInstantRun) {
-//            removeProcess(document);
             singleProcess(document);
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -572,6 +572,7 @@ public void convertByteCode(Collection<File> inputs,
             List<File> outputs = new ArrayList<>();
 
                 for (File input : inputs) {
+                    logger.warning("Dex input File:%s",input.getAbsolutePath());
 
                     final File dexDir = getDexOutputDir(input, tmpDir, outputs);
                     dexDir.mkdirs();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/incremental/TBIncrementalSupportVisitor.java
Patch:
@@ -515,8 +515,8 @@ void visitCase(String canonicalName) {
 
             @Override
             void visitDefault() {
-                mv.visitInsn(Opcodes.RETURN);
-//                writeMissingMessageWithHash(mv, visitedClassName);
+//                mv.visitInsn(Opcodes.RETURN);
+                writeMissingMessageWithHash(mv, visitedClassName);
             }
 
             @Override

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/visitor/ModifyMethodVisitor.java
Patch:
@@ -23,7 +23,6 @@ public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
         if (desc.equals(TBIncrementalVisitor.MODIFY_METHOD.getDescriptor()) && visible) {
             patchPolicy[0] = TaobaoInstantRunTransform.PatchPolicy.MODIFY;
         }else if (desc.equals(TBIncrementalVisitor.ADD_METHOD.getDescriptor()) && visible){
-
             throw new RuntimeException("add method is not support!");
         }
         return super.visitAnnotation(desc, visible);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/insant/TaobaoExtractJarsTransform.java
Patch:
@@ -225,6 +225,9 @@ private static void extractJar(
             @NonNull File outJarFolder,
             @NonNull File jarFile,
             boolean extractCode) throws IOException {
+        if (!jarFile.exists()){
+            return;
+        }
         mkdirs(outJarFolder);
         HashSet<String> lowerCaseNames = new HashSet<>();
         boolean foundCaseInsensitiveIssue = false;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AwbDexsMerger.java
Patch:
@@ -94,7 +94,6 @@ public void merge(TransformInvocation transformInvocation) {
     }
 
     public void merge(AwbBundle awbBundle){
-
         File file = variantOutputContext.getVariantContext().getAwbDexAchiveOutput(awbBundle);
         List<File> awbDexFiles = new ArrayList<>();
         awbDexFiles.addAll(org.apache.commons.io.FileUtils.listFiles(file, new String[]{"jar", "dex"}, true));

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/hook/dex/AtlasD8Creator.java
Patch:
@@ -139,6 +139,8 @@ public void create(AwbBundle awbBundle){
                     e.printStackTrace();
                 } catch (ExecutionException e) {
                     e.printStackTrace();
+                } catch (Exception e) {
+                    e.printStackTrace();
                 }
 
             }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasMergeJavaResourcesTransform.java
Patch:
@@ -121,6 +121,7 @@ public AtlasMergeJavaResourcesTransform(AppVariantOutputContext appVariantOutput
     }
 
     private void processAtlasNativeSo(String path) {
+        appVariantOutputContext.getVariantContext().getProject().getLogger().info("processAtlasNativeSo soFile path:" + path);
         Set<String> removedNativeSos = appVariantOutputContext.getVariantContext().getAtlasExtension().getTBuildConfig().getOutOfApkNativeSos();
         if (removedNativeSos.size() > 0) {
             if (removedNativeSos.contains(path)) {
@@ -598,7 +599,7 @@ private ImmutableList<IncrementalFileMergerInput> filter(
         }
 
 
-        paths.parallelStream().forEach(s -> processAtlasNativeSo(s));
+        paths.parallelStream().forEach(s ->  processAtlasNativeSo(s));
 
 
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -714,9 +714,10 @@ public void preDexLibrary(@NonNull File inputFile,
             }
         } else {
             //R Too much, you need to start multi-dex
-            multiDex = true;
         }
 
+        multiDex = false;
+
         dexFile.delete();
 
         //todo  Set the dexOptions
@@ -725,6 +726,7 @@ public void preDexLibrary(@NonNull File inputFile,
         if (!multiDex) {
             defaultDexOptions.setJavaMaxHeapSize("500m");
             defaultDexOptions.setDexInProcess(true);
+            defaultDexOptions.getAdditionalParameters().remove("--multi-dex");
         }
 
         sLogger.info("[mtldex] pre dex for {} {}",

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/api/AppVariantOutputContext.java
Patch:
@@ -559,7 +559,7 @@ public  File updateAwbDexFile(JarInput jarInput, File output) {
                 awbTransform.getInputLibraries().add(output);
                 return currentFile;
             }else {
-               Iterator<File>iterator = awbTransform.getInputLibraries().iterator();
+               Iterator<File>iterator = awbTransform.getInputLibraries().listIterator();
                while (iterator.hasNext()){
                    File file = iterator.next();
                    if (file.equals(jarInput.getFile())){

File: atlas-update/src/main/java/com/taobao/atlas/update/util/PatchInstaller.java
Patch:
@@ -49,6 +49,7 @@ public void install() throws BundleException {
             if(bundlePair.second.reset){
                 if (!updateInfo.dexPatch) {
                     upgradeVersions.add("-1");
+                    bundleFilePathList.add(new File("reset"));
                 } else {
                     dexPatchVersions.add(Long.valueOf(-1));
                     bundleFilePathList.add(new File("reset"));

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -401,7 +401,7 @@ public KernalBundle(final File updateDir, final File dexPatchDir, String version
     public static void patchNativeLib(Context base) {
         try {
             File dir = new File(base.getFilesDir(), String.format("nativeLib-%s", base.getPackageManager().getPackageInfo(base.getPackageName(), 0).versionName));
-            ClassLoader loader = Atlas.class.getClassLoader();
+            ClassLoader loader = KernalBundle.class.getClassLoader();
             Field pathListField = findField(loader, "pathList");
             Object dexPathList = pathListField.get(loader);
             patchLibrary(dexPathList, dir);

File: atlas-core/src/main/java/android/taobao/atlas/framework/MbundleArchive.java
Patch:
@@ -3,6 +3,7 @@
 import android.taobao.atlas.framework.bundlestorage.BundleArchive;
 import android.taobao.atlas.framework.bundlestorage.BundleArchiveRevision;
 import android.taobao.atlas.hack.Hack;
+import android.taobao.atlas.runtime.RuntimeVariables;
 
 import java.io.File;
 import java.io.IOException;
@@ -67,11 +68,11 @@ public BundleArchiveRevision getCurrentRevision() {
 
     @Override
     public File getArchiveFile() {
-        return null;
+        return new File(RuntimeVariables.sApkPath);
     }
 
     @Override
     public File getBundleDir() {
-        return null;
+        return new File(RuntimeVariables.sApkPath).getParentFile();
     }
 }

File: atlas-core/src/main/java/android/taobao/atlas/util/log/impl/AtlasMonitor.java
Patch:
@@ -228,6 +228,7 @@ public class AtlasMonitor {
     public static final String WALKROUND_GETLAYOUT = "walkround_getlayout";
     public static final String VALIDATE_CLASSES = "validate_classes";
     public static final String INSTALL = "install";
+    public static final String LOCK_EXCLUSIVE_FAIL = "lock_exclusive_fail";
 
     public static final String INSTRUMENTATION_HOOK_CLASS_NOT_FOUND_EXCEPTION
         = "instrumentation_hook_class_not_found_exception";

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleClassLoader.java
Patch:
@@ -325,7 +325,6 @@ public boolean validateClasses() {
                 RuntimeVariables.delegateClassLoader.installMbundle(bundleName);
                 continue;
 
-
             }
             if (dependencyBundle == null || dependencyBundle.getArchive() == null || !dependencyBundle.getArchive()
                 .isDexOpted()) {

File: atlas-core/src/main/java/android/taobao/atlas/runtime/BundleLifecycleHandler.java
Patch:
@@ -309,10 +309,10 @@ private void started(Bundle bundle){
             String appClassName = info.getApplicationName();
             if (StringUtils.isNotEmpty(appClassName)) {
                 try {
-                    Log.e("BundleLifeCycle","start "+appClassName);
+                    Log.e("BundleLifeCycle","start "+appClassName +"@"+Thread.currentThread().toString());
                     Application app = newApplication(appClassName, b.getClassLoader());
                     app.onCreate();
-                    Log.e("BundleLifeCycle","start finish"+appClassName);
+                    Log.e("BundleLifeCycle","start finish"+appClassName+"@"+Thread.currentThread().toString());
                     ((BundleImpl) bundle).setActive();
                 }catch(ApplicationInitException e){
                     if(b.getArchive()!=null && b.getArchive().isDexOpted()){

File: atlas-core/src/main/java/android/taobao/atlas/runtime/DelegateClassLoader.java
Patch:
@@ -282,7 +282,7 @@ public void installMbundleWithDependency(String location) throws ClassNotFoundEx
     public void installMbundle(String location) {
         try {
             BundleLock.WriteLock(location);
-            if (Atlas.getInstance().getBundle(location) == null) {
+                if (Atlas.getInstance().getBundle(location) == null) {
                 BundleImpl bundle = new MbundleImpl(location);
                 bundle.start();
             }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/BuildAtlasEnvTask.java
Patch:
@@ -380,7 +380,7 @@ private void fillAwbJar(String name, String moudleName, AwbBundle awbBundle) {
     private void fillAwbManifest(String name, String moudleName, AwbBundle awbBundle) {
 
     }
-B
+
     private void fillAwbAndroidRes(String name, String moudleName, AwbBundle awbBundle) {
         ResolvedArtifactResult id = null;
         if ((id = allAndroidRes.get(name)) == null) {

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleInstaller.java
Patch:
@@ -582,7 +582,7 @@ public synchronized Void call() throws Exception {
                 for (int x = 0; x < mLocation.length; x++) {
                     if (AtlasBundleInfoManager.instance().isMbundle(mLocation[x])){
                         if (Framework.getBundle(mLocation[x]) == null) {
-                            Framework.bundles.put(mLocation[x], new MbundleImpl(mLocation[x]));
+                            RuntimeVariables.delegateClassLoader.installMbundle(mLocation[x]);
                         }
                         continue;
                     }
@@ -637,7 +637,7 @@ public synchronized Void call() throws Exception {
                     for (String bundleName : bundlesForInstall) {
                         if (AtlasBundleInfoManager.instance().isMbundle(bundleName)){
                             if (Framework.getBundle(bundleName) == null){
-                                Framework.bundles.put(bundleName,new MbundleImpl(bundleName));
+                                RuntimeVariables.delegateClassLoader.installMbundle(bundleName);
                             }
                             continue;
                         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/BuildAtlasEnvTask.java
Patch:
@@ -380,7 +380,7 @@ private void fillAwbJar(String name, String moudleName, AwbBundle awbBundle) {
     private void fillAwbManifest(String name, String moudleName, AwbBundle awbBundle) {
 
     }
-
+B
     private void fillAwbAndroidRes(String name, String moudleName, AwbBundle awbBundle) {
         ResolvedArtifactResult id = null;
         if ((id = allAndroidRes.get(name)) == null) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/bundle/MergeAwbResource.java
Patch:
@@ -171,7 +171,7 @@ public String getBuildToolsVersion() {
 
     @Override
     protected boolean isIncremental() {
-        return true;
+        return false;
     }
 
     @OutputDirectory

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleImpl.java
Patch:
@@ -518,6 +518,9 @@ public boolean checkResources(){
 
         List<String> dependencies = AtlasBundleInfoManager.instance().getBundleInfo(location).getTotalDependency();
         for(String bundleName : dependencies){
+            if (AtlasBundleInfoManager.instance().isMbundle(bundleName)){
+                continue;
+            }
             BundleImpl dependencyBundle = (BundleImpl)Atlas.getInstance().getBundle(bundleName);
             if(dependencyBundle==null || dependencyBundle.getArchive()==null ||
                     !DelegateResources.checkAsset(dependencyBundle.getArchive().getArchiveFile().getAbsolutePath())){

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchTask.java
Patch:
@@ -442,8 +442,6 @@ private void resignBaseApk(String baseApkVersion, ApkFileList apkFileList) throw
         }
     }
 
-//    @OutputDirectory
-
     public File getOutPatchFolder() {
         return outPatchFolder;
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/DexMergeTransformCallable.java
Patch:
@@ -67,7 +67,8 @@ public Void call() throws Exception {
                         new DxContext(
                                 processOutput.getStandardOutput(), processOutput.getErrorOutput());
                 merger = DexArchiveMerger.createDxDexMerger(dxContext, forkJoinPool);
-                ReflectUtils.updateField(merger,"mergingStrategy",new AtlasDexArchiveMerger.AtlasDexMergingStrategy());
+                ReflectUtils.updateField(merger,"mergingStrategy",new AtlasDexArchiveMerger.AtlasDexRefMergingStrategy());
+                System.out.println("update mergingStrategy to atlas AtlasDexRefMergingStrategy");
                 break;
             case D8:
                 int d8MinSdkVersion = minSdkVersion;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/AtlasPlugin.java
Patch:
@@ -262,7 +262,7 @@ public void apply(Project project) {
 
             }
 
-            Plugin plugin = project.getPlugins().findPlugin("kotlin-android");
+            Plugin plugin = project.getPlugins()ManifestHelper.java.findPlugin("kotlin-android");
             if (plugin != null) {
                 project.getDependencies().add("compile", "org.jetbrains.kotlin:kotlin-stdlib:1.2.41");
             }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchTask.java
Patch:
@@ -442,7 +442,8 @@ private void resignBaseApk(String baseApkVersion, ApkFileList apkFileList) throw
         }
     }
 
-    @OutputDirectory
+//    @OutputDirectory
+
     public File getOutPatchFolder() {
         return outPatchFolder;
     }

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleImpl.java
Patch:
@@ -365,7 +365,7 @@ private synchronized void resolveBundle() throws BundleException {
             if(dependencies!=null) {
                 for (String str : dependencies) {
                     BundleImpl impl = (BundleImpl) Atlas.getInstance().getBundle(str);
-                    if (impl != null) {
+                    if (impl != null && !AtlasBundleInfoManager.instance().isMbundle(str)) {
                         nativeLibDir += ":";
                         File dependencyLibDir = new File(impl.getArchive().getCurrentRevision().mappingInternalDirectory(), "lib");
                         nativeLibDir += dependencyLibDir;

File: atlas-core/src/main/java/android/taobao/atlas/runtime/DelegateClassLoader.java
Patch:
@@ -254,6 +254,9 @@ public Class<?> loadClass(String className) throws ClassNotFoundException {
         if (AtlasBundleInfoManager.instance().isMbundle(location)) {
             List<String> bundles = AtlasBundleInfoManager.instance().getBundleInfo(location).getDependency();
             for (String bundle : bundles) {
+                if (bundle == null || AtlasBundleInfoManager.instance().getBundleInfo(bundle) == null){
+                    continue;
+                }
                 if (!AtlasBundleInfoManager.instance().getBundleInfo(bundle).isMBundle()){
                     throw new ClassNotFoundException(location+" Mbundle can not dependent bundleImpl "+bundle);
                 }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AwbDexsMerger.java
Patch:
@@ -116,7 +116,7 @@ public void merge(AwbBundle awbBundle){
                 e.printStackTrace();
             }
         }
-        if (variantOutputContext.getVariantContext().getAtlasExtension().getTBuildConfig().getMergeBundlesDex() && !awbBundle.isRemote){
+        if (variantOutputContext.getVariantContext().getAtlasExtension().getTBuildConfig().getMergeBundlesDex() && !awbBundle.isRemote && awbBundle.isMBundle){
             allDexsArchives.addAll(Arrays.asList(mergeDexs));
             return;
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/BundleInfoUtils.java
Patch:
@@ -294,7 +294,6 @@ private static void update(AwbBundle awbBundle,
         }
 
 
-
         bundleInfo.setIsInternal(!awbBundle.isRemote);
         bundleInfo.setVersion(baseVersion + "@" + awbBundle.getResolvedCoordinates().getVersion());
         bundleInfo.setPkgName(awbBundle.getPackageName());

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleImpl.java
Patch:
@@ -342,7 +342,7 @@ public  class BundleImpl implements Bundle {
 
     public BundleImpl(String location) {
         this.location = location;
-        this.state = INSTALLED;
+        this.state = RESOLVED;
 
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/BuildAtlasEnvTask.java
Patch:
@@ -606,7 +606,7 @@ private static Spec<ComponentIdentifier> getComponentFilter(
 
     private boolean isMBundle(AppVariantContext appVariantContext,AwbBundle awbBundle){
 
-        if (appVariantContext.getAtlasExtension().getTBuildConfig().getOutOfApkBundles().contains(awbBundle.getPackageName())){
+        if (appVariantContext.getAtlasExtension().getTBuildConfig().getOutOfApkBundles().contains(awbBundle.getResolvedCoordinates().getArtifactId())){
             return false;
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AwbDexsMerger.java
Patch:
@@ -116,7 +116,7 @@ public void merge(AwbBundle awbBundle){
                 e.printStackTrace();
             }
         }
-        if (variantOutputContext.getVariantContext().getAtlasExtension().getTBuildConfig().getMergeBundlesDex()){
+        if (variantOutputContext.getVariantContext().getAtlasExtension().getTBuildConfig().getMergeBundlesDex() && !awbBundle.isRemote){
             allDexsArchives.addAll(Arrays.asList(mergeDexs));
             return;
         }

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -310,14 +310,14 @@ public static boolean checkLoadKernalDebugPatch(Application application) {
                 if (patchFile.exists()) {
                     loadKernalPatch = true;
                     KernalBundle bundle = new KernalBundle();
-                    DexFile dexFile = (DexFile) KernalConstants.dexBooster.loadDex(KernalConstants.baseContext, KernalConstants.baseContext.getApplicationInfo().sourceDir,
-                            new File(patchFile.getParent(), "base.dex").getAbsolutePath(), 0, true);
+                    //DexFile dexFile = (DexFile) KernalConstants.dexBooster.loadDex(KernalConstants.baseContext, KernalConstants.baseContext.getApplicationInfo().sourceDir,
+                    //        new File(patchFile.getParent(), "base.dex").getAbsolutePath(), 0, true);
 
                     File internalDebugBundleDir = new File(new File(application.getFilesDir(), "debug_storage"), KERNAL_BUNDLE_NAME);
                     internalDebugBundleDir.mkdirs();
                     DexFile patchDexFile = (DexFile) KernalConstants.dexBooster.loadDex(KernalConstants.baseContext, patchFile.getAbsolutePath(),
                             new File(internalDebugBundleDir, "patch.dex").getAbsolutePath(), 0, true);
-                    bundle.installKernalBundle(KernalConstants.baseContext.getClassLoader(), patchFile, new DexFile[]{patchDexFile, dexFile}, null,
+                    bundle.installKernalBundle(KernalConstants.baseContext.getClassLoader(), patchFile, new DexFile[]{patchDexFile/*, dexFile*/}, null,
                             true /*(app_info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0*/);
                     if (bundle.needReplaceClassLoader(application)) {
                         NClassLoader loader = new NClassLoader(".", KernalBundle.class.getClassLoader().getParent());

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/releaser/BundleReleaser.java
Patch:
@@ -220,6 +220,7 @@
 import android.taobao.atlas.startup.patch.KernalConstants;
 import android.taobao.atlas.startup.DexFileCompat;
 import android.util.Log;
+import com.taobao.android.runtime.AndroidRuntime;
 import dalvik.system.DexFile;
 import java.io.File;
 import java.io.FileFilter;
@@ -470,7 +471,7 @@ private DexFile dexoptInternal(File validDex){
         String optimizedPath = optimizedPathFor(validDex, dexOptDir());
         try {
             if(!externalStorage) {
-                dexFile = DexFile.loadDex(validDex.getPath(), optimizedPath, 0);
+                dexFile = /*DexFile*/AndroidRuntime.getInstance().loadDex(validDex.getPath(), optimizedPath, 0, null);
                 if(!new File(optimizedPath).exists()){
                     Log.e(TAG,"odex not exist");
                 }

File: atlas-core/src/main/java/android/taobao/atlas/remote/fragment/RemoteFragment.java
Patch:
@@ -155,6 +155,7 @@ public void onAttach(Context context) {
             Field mOriginalHost = getClass().getSuperclass().getDeclaredField("mHost");
             mOriginalHost.setAccessible(true);
             mHost.set(targetFragment,getFragmentHostCallback((FragmentHostCallback) mOriginalHost.get(this)));
+            mHost.set(this, getFragmentHostCallback((FragmentHostCallback) mOriginalHost.get(this)));
             Field mFragmentManager = AndroidHack.findField(targetFragment,"mFragmentManager");
             mFragmentManager.set(targetFragment,getFragmentManager());
             Field mCalled = AndroidHack.findField(targetFragment,"mCalled");

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -407,7 +407,7 @@ private PatchInfo processBundlePatch(PatchInfo hisPatchInfo, List<BundlePatch> b
                     break;
                 case MERGE:
                     File hisBundleFolder = new File(hisTPatchUnzipFolder, bundleName);
-                    File hisBundle = new File(hisTPatchUnzipFolder, "lib" + bundlePatch.pkgName.replace(".", "_") + ".so"));
+                    File hisBundle = new File(hisTPatchUnzipFolder, "lib" + bundlePatch.pkgName.replace(".", "_") + ".so");
 
                     if (!hisTPatchFile.exists()) {
                         if (StringUtils.isBlank(hisPatchInfo.getDownloadUrl()) && new File(TPatchTool.hisTpatchFolder,

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/BuildAtlasEnvTask.java
Patch:
@@ -238,6 +238,9 @@ void generate() {
             Field field1 = MergeSourceSetFolders.class.getDeclaredField("libraries");
             field1.setAccessible(true);
             field1.set(mergeSourceSetFolders, new MainArtifactsCollection((ArtifactCollection) field1.get(mergeSourceSetFolders), getProject()));
+
+            AtlasBuildContext.atlasMainDexHelper.getMainSoFiles().put(appVariantContext.getScope().getMergeNativeLibsOutputDir().getAbsolutePath(),true);
+
         } catch (Exception e) {
 
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AtlasMultiDexListTransform.java
Patch:
@@ -85,7 +85,7 @@ public Collection<SecondaryFile> getSecondaryFiles() {
 
     @Override
     public boolean isIncremental() {
-        return true;
+        return false;
     }
 
     public void transform(@NonNull TransformInvocation transformInvocation)

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/TBuildConfig.java
Patch:
@@ -289,7 +289,7 @@ public void setGroup(String group) {
     private Boolean preProcessManifest = true;
 
     @Config(title = "Use a custom aapt", message = "If atlas is turned on, it must be true", order = 8, advance = true, group = "atlas")
-    private Boolean useCustomAapt = false;
+    private Boolean useCustomAapt = true;
 
     @Config(title = "aaptThe output R is constant", message = "The recommended value is set to false, You can reduce the amount of patch packages that are dynamically deployed", order = 9, advance = true,
         group = "atlas")

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/PackageAwbsTask.java
Patch:
@@ -334,7 +334,7 @@ void createAwbPackages() throws ExecutionException, InterruptedException, IOExce
 
                     //PACKAGE APP:
                     File resourceFile = null;
-                   if (!appVariantContext.getScope().useResourceShrinker()) {
+                   if (appVariantContext.getScope().useResourceShrinker()) {
                        resourceFile = appVariantOutputContext.getAwbCompressResourcePackageOutputFile(awbBundle);
 
                    }else {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/domain/Input.java
Patch:
@@ -219,6 +219,7 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
+import com.android.build.api.transform.JarInput;
 import com.android.build.gradle.internal.api.AwbTransform;
 import com.taobao.android.builder.tools.MD5Util;
 import org.apache.commons.io.FileUtils;
@@ -256,6 +257,8 @@ public class Input {
 
     public File proguardOutputDir;
 
+    public Map<File,File>maindexFileTransform = new HashMap<>();
+
     public List<AwbTransform> getAwbBundles() {
         return awbBundles;
     }

File: atlas-update/src/main/java/com/taobao/atlas/dexmerge/MergeExcutorServices.java
Patch:
@@ -1,6 +1,7 @@
 package com.taobao.atlas.dexmerge;
 
 import android.os.RemoteException;
+import android.util.Log;
 import com.taobao.atlas.dex.Dex;
 import com.taobao.atlas.dexmerge.dx.merge.CollisionPolicy;
 import com.taobao.atlas.dexmerge.dx.merge.DexMerger;
@@ -94,9 +95,8 @@ public void onError(Throwable e) {
 
             @Override
             public void onComplete() {
-                if (bundleEntryGroup.size() != list.size()){
-                    onError(new RuntimeException("parse bundleEntryGroup failed!"));
-                }
+                Log.e("MergeExcutorServices","merge bundle size:"+bundleEntryGroup.size());
+
             }
 
             @Override

File: atlas-core/src/main/java/com/alibaba/patch/PatchUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.patch.utils;
+package com.alibaba.patch;
 
 
 public class PatchUtils {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tools/TPatchTool.java
Patch:
@@ -1094,14 +1094,14 @@ public Boolean call() throws Exception {
                         processBundleFiles(soFile, baseSoFile, patchTmpDir);
 
                     } else if (isFileModify(soFile, baseSoFile)) {
-                        destFile = new File(destFile.getParentFile(),destFile.getName()+".patch");
                         if (destFile.exists()){
                             FileUtils.deleteQuietly(destFile);
                         }
                         if (!baseSoFile.exists()||!((TpatchInput) input).diffNativeSo) {
                             //新增
                             FileUtils.copyFile(soFile, destFile);
                         }else {
+                            destFile = new File(destFile.getParentFile(),destFile.getName()+".patch");
                             SoDiffUtils.diffSo(patchTmpDir,baseSoFile,soFile,destFile);
                             soFileDefs.add(new SoFileDef(baseSoFile,soFile,destFile));
 
@@ -1222,6 +1222,7 @@ protected File getLastPatchFile(String baseApkVersion,
     }
 
     public static void main(String[]args) throws IOException {
+        TPatchTool.class.getProtectionDomain().getCodeSource().getLocation();
         File workingDir = new File("/Users/lilong/Downloads/patch-7.7.4.67686@7.7.3");
         File oldFile = new File("/Users/lilong/Documents/main_builder/aa/lib/armeabi/libalinnkit-v7a.so");
         File newFile = new File("/Users/lilong/Downloads/patch-7.7.4.67686@7.7.3/libcom_taobao_maindex/lib/armeabi/libalinnkit-v7a.so");

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -504,7 +504,7 @@ private void copyDiffFiles(File fullLibFile, File curBundleFolder, File hisBundl
         }
     }
 
-    private void genHisSoPatch(FileDef hisFileDef, File destFile) {
+    private void genHisSoPatch(FileDef hisFileDef, File destFile) throws IOException {
         if (TPatchTool.soFileDefs.size() > 0) {
             for (SoFileDef soFileDef : TPatchTool.soFileDefs) {
                 if (soFileDef.patchFile.getName().equals(hisFileDef.file.getName())) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/prepare/PreparePackageIdsTask.java
Patch:
@@ -271,7 +271,7 @@ void generate() throws IOException {
 
             File customPackageIDFile = new File(awbBundle.getAndroidLibrary().getFolder(), "customPackageID.txt");
             String packageId = getCustomPackageId(customPackageIDFile);
-            if (StringUtils.isNotEmpty(packageId) && StringUtils.isNumeric(packageId)) {
+            if (StringUtils.isNotEmpty(packageId)) {
                 autoConfigMap.put(key, packageId);
             } else {
                 autoConfigMap.put(key, "");

File: atlas-core/src/main/java/android/taobao/atlas/runtime/ActivityThreadHook.java
Patch:
@@ -274,6 +274,8 @@ public boolean handleMessage(Message msg) {
             ensureLoadedApk();
             if(msg.what == 100){
                 ActivityBridge.processActivityIntentIfNeed(msg.obj);
+            }else if (msg.what == 112){
+                ActivityBridge.handleNewIntent(msg.obj);
             }
 //            if(msg.what==113){
 //                handleReceiver(msg);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tools/DexPatchTool.java
Patch:
@@ -128,6 +128,7 @@ public Boolean call() throws Exception {
         }
         PatchInfo curPatchInfo = createBasePatchInfo(patchFile);
 
+
         Profiler.release();
         
 

File: atlas-core/src/main/java/android/taobao/atlas/startup/NClassLoader.java
Patch:
@@ -239,8 +239,8 @@ public static void replacePathClassLoader(Context base,ClassLoader original,NCla
         pathListField.setAccessible(true);
         Object originPathListObject = pathListField.get(original);
 //
-//        Field definingContextField = findField(originPathListObject, "definingContext");
-//        definingContextField.set(originPathListObject, loader);
+        Field definingContextField = findField(originPathListObject, "definingContext");
+        definingContextField.set(originPathListObject, loader);
 //
         Field loadPathList = findField(loader, "pathList");
         //just use PathClassloader's pathList

File: atlas-core/src/main/java/android/taobao/atlas/runtime/ActivityThreadHook.java
Patch:
@@ -274,6 +274,8 @@ public boolean handleMessage(Message msg) {
             ensureLoadedApk();
             if(msg.what == 100){
                 ActivityBridge.processActivityIntentIfNeed(msg.obj);
+            }else if (msg.what == 112){
+                ActivityBridge.handleNewIntent(msg.obj);
             }
 //            if(msg.what==113){
 //                handleReceiver(msg);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tools/DexPatchTool.java
Patch:
@@ -128,6 +128,7 @@ public Boolean call() throws Exception {
         }
         PatchInfo curPatchInfo = createBasePatchInfo(patchFile);
 
+
         Profiler.release();
         
 

File: atlas-core/src/main/java/android/taobao/atlas/runtime/ActivityThreadHook.java
Patch:
@@ -258,6 +258,8 @@ public boolean handleMessage(Message msg) {
             ensureLoadedApk();
             if(msg.what == 100){
                 ActivityBridge.processActivityIntentIfNeed(msg.obj);
+            }else if (msg.what == 112){
+                ActivityBridge.handleNewIntent(msg.obj);
             }
 //            if(msg.what==113){
 //                handleReceiver(msg);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/AwbApkPackageTask.java
Patch:
@@ -117,13 +117,13 @@ public AwbApkPackageTask(FileCollection resourceFiles, VariantContext variantCon
 
     }
 
-    public static File getAwbPackageOutputFile(AppVariantContext variantContext, String awbOutputName) {
+    public File getAwbPackageOutputFile(AppVariantContext variantContext, String awbOutputName) {
         Set<String> libSoNames = variantContext.getAtlasExtension().getTBuildConfig().getKeepInLibSoNames();
 
         File file = null;
         if (libSoNames.isEmpty() || libSoNames.contains(awbOutputName)) {
-            file = new File(variantContext.getAwbApkOutputDir(), "lib/armeabi" + File.separator + awbOutputName);
-            file.getParentFile().mkdirs();
+            //直接移动到主apk的lib下
+            file = new File(packagingScope.getJniFolders().getSingleFile(), "lib/armeabi" + File.separator + awbOutputName);
         } else {
             file = new File(variantContext.getVariantData().mergeAssetsTask.getOutputDir(), awbOutputName);
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/AwbApkPackageTask.java
Patch:
@@ -227,8 +227,8 @@ public File splitFullAction(@NonNull ApkData apkData, @Nullable File processedRe
         File file;
         String outputFileName = outputFile.getName();
         file = getAwbPackageOutputFile(appVariantOutputContext.getVariantContext(), outputFileName);
-        FileUtils.copyFileToDirectory(outputFile, file);
-        return new File(file, outputFileName);
+        FileUtils.copyFileToDirectory(outputFile, file.getParentFile());
+        return new File(file.getParentFile(), outputFileName);
     }
 
     private void doTask(

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/BundleProguarder.java
Patch:
@@ -427,7 +427,7 @@ public static void doProguard(AppVariantContext appVariantContext, Input input)
             configuration.printConfiguration = input.printConfiguration;
         }
 
-        configuration.printSeeds = input.printSeeds;
+        configuration.printSeeds = null;
         configuration.printUsage = input.printUsage;
         configuration.printMapping = input.printMapping;
 

File: atlas-core/src/main/java/android/taobao/atlas/bundleInfo/AtlasBundleInfoManager.java
Patch:
@@ -424,6 +424,8 @@ public BundleListing.BundleInfo getBundleInfo(String name){
             return info;
         }
 
+        Log.w(TAG, "Could not find info for: " + name);
+        
         return null;
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/ProcessAwbAndroidResources.java
Patch:
@@ -478,7 +478,7 @@ private void addAaptOptions(AaptGeneration aaptGeneration) {
                     options.add("--type-id-offset");
                     options.add(split[1]);
                 } else {
-
+                    // TODO: 2018/3/5 AAPT_V2 type-id-offset
                 }
 
             }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/manager/MtlTaskInjector.java
Patch:
@@ -327,12 +327,12 @@ protected List<Task> findTask(Class<Task> clazz, String variantName) {
             }
             if (task instanceof DefaultAndroidTask) {
 
-                if (variantName.equals(((DefaultAndroidTask)task).getVariantName().toLowerCase())) {
+                if (variantName.toLowerCase().equals(((DefaultAndroidTask)task).getVariantName().toLowerCase())) {
                     taskList.add(task);
                 }
             } else {
                 String name = task.getName();
-                if (name.toLowerCase().contains(variantName)) {
+                if (name.toLowerCase().contains(variantName.toLowerCase())) {
                     taskList.add(task);
                 }
             }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/BuildAtlasEnvTask.java
Patch:
@@ -241,7 +241,7 @@ void generate() {
         FileCollection fileCollection = processAndroidResources.getSymbolListsWithPackageNames();
         Set<String>filesNames = new HashSet<>();
         for (String fileName:AtlasBuildContext.atlasMainDexHelper.getMainManifestFiles().keySet()){
-            filesNames.add(fileName.substring(fileName.lastIndexOf("/")+1));
+            filesNames.add(fileName.substring(fileName.lastIndexOf(File.separatorChar)+1));
         }
         FileCollection updateFileCollection = fileCollection.filter(element -> filesNames.contains(element.getParentFile().getParentFile().getName()));
         ReflectUtils.updateField(processAndroidResources,"symbolListsWithPackageNames",updateFileCollection);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MainArtifactsCollection.java
Patch:
@@ -15,14 +15,14 @@
  * @create 2017-12-06 下午11:02
  */
 
-public class MainDexArtifactCollection implements ArtifactCollection {
+public class MainArtifactsCollection implements ArtifactCollection {
 
     private Set<ResolvedArtifactResult>fullArtifacts = new HashSet<>();
     private Project project;
 
     Set<ResolvedArtifactResult>mainDexs;
 
-    public MainDexArtifactCollection(ArtifactCollection fullArtifacts, Project project) {
+    public MainArtifactsCollection(ArtifactCollection fullArtifacts, Project project) {
         this.fullArtifacts = fullArtifacts.getArtifacts();
         this.project = project;
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasConfigurationHelper.java
Patch:
@@ -527,8 +527,10 @@ public void configDependencies() {
 
         VariantManager variantManager = getVariantManager();
 
-        variantManager.getVariantScopes().stream().forEach(variantScope -> atlasDependencyManager.resolveDependencies(variantScope.getVariantDependencies()));
+        if (variantManager!=null) {
 
+            variantManager.getVariantScopes().stream().forEach(variantScope -> atlasDependencyManager.resolveDependencies(variantScope.getVariantDependencies()));
+        }
     }
 
     public VariantManager getVariantManager() {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -318,7 +318,6 @@ public void runTask() {
                                                           @Override
                                                           public void accept(ApplicationVariant applicationVariant) {
 
-
                                                               AppVariantContext appVariantContext = AtlasBuildContext.sBuilderAdapter.appVariantContextFactory
                                                                       .getAppVariantContext(project, applicationVariant);
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasFixStackFramesTransform.java
Patch:
@@ -211,7 +211,7 @@ public void transform(TransformInvocation transformInvocation) throws TransformE
                                 processJar(jarInput.getFile(), output, transformInvocation);
                             }
                         }else {
-                            throw new TransformException(jarInput.getFile().getAbsolutePath() +"is not in maindex and awb libraries in AtlasFixStackFramesTransform!");
+                            logger.warning(jarInput.getFile().getAbsolutePath() +"is not in maindex and awb libraries in AtlasFixStackFramesTransform!");
                         }
                     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AtlasDexArchiveBuilderTransform.java
Patch:
@@ -263,6 +263,7 @@ private boolean validJar(JarInput jarInput) {
 
     private boolean inMainDex(JarInput jarInput) {
         if (jarInput.getFile().getName().equals("desugar_try_with_resources.jar")){
+            logger.info("add desugar_try_with_resources.jar to maindex");
             AtlasBuildContext.atlasMainDexHelper.getMainDexFiles().add(new BuildAtlasEnvTask.FileIdentity(jarInput.getFile().getName(),jarInput.getFile(),false,false));
         }
         return AtlasBuildContext.atlasMainDexHelper.inMainDex(jarInput);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tools/TpatchDexTool.java
Patch:
@@ -37,7 +37,7 @@ public void setExculdeClasses(Set<String> classes) {
     }
 
     public static void main(String []args){
-        TpatchDexTool tpatchDexTool = new TpatchDexTool(new File("/Users/lilong/Downloads/taobao-android-debug1/lib/armeabi/libcom_taobao_taolive/classes.dex"),new File("/Users/lilong/Downloads/patch-7.4.5.62173@7.4.2.48/libcom_taobao_taolive/classes.dex"),21,false);
+        TpatchDexTool tpatchDexTool = new TpatchDexTool(new File("/Users/lilong/Downloads/taobao-android-release/classes.dex"),new File("/Users/lilong/Downloads/taobao-android-release0/classes.dex"),21,false);
         File outDex = new File("/Users/lilong/Downloads/taobao-android-debug1/lib/armeabi/libcom_taobao_taolive/patch.dex");
         try {
             tpatchDexTool.createPatchDex(outDex);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasProguardTransform.java
Patch:
@@ -279,8 +279,6 @@ public Set<ContentType> getOutputTypes() {
     public AtlasProguardTransform(AppVariantContext appVariantContext, BaseVariantOutputData baseVariantOutputData) {
         super(appVariantContext.getScope(), false);
         this.appVariantContext = appVariantContext;
-        defaultProguardFiles.addAll(
-            appVariantContext.getVariantConfiguration().getProguardFiles(false, new ArrayList<>()));
 
         this.buildConfig = appVariantContext.getAtlasExtension().getTBuildConfig();
     }
@@ -291,6 +289,8 @@ public AtlasProguardTransform(VariantScope variantScope, boolean asJar) {
 
     @Override
     public void transform(TransformInvocation invocation) throws TransformException {
+        defaultProguardFiles.addAll(
+                appVariantContext.getVariantConfiguration().getProguardFiles(true, new ArrayList<>()));
         List<AwbBundle> awbBundles= AtlasBuildContext.androidDependencyTrees.get(
                 appVariantContext.getScope().getVariantConfiguration().getFullName()).getAwbBundles();
         if(awbBundles!=null && awbBundles.size()>0){

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/AtlasProguardHelper.java
Patch:
@@ -289,7 +289,7 @@ public static void doBundleProguard(final AppVariantContext appVariantContext, L
 
         //Get the basic proguard configuration
         List<File> defaultProguardFiles = new ArrayList<>(
-            appVariantContext.getVariantConfiguration().getProguardFiles(false, new ArrayList<>()));
+            appVariantContext.getVariantConfiguration().getProguardFiles(true, new ArrayList<>()));
         Collections.sort(defaultProguardFiles);
 
         BaseVariantOutputData vod = appVariantContext.getVariantData().getOutputs().get(0);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/manifest/PostProcessManifestAction.java
Patch:
@@ -280,7 +280,7 @@ public void execute(Task task) {
 
             File proxySrcDir = appVariantContext.getAtlasProxySourceDir();
             if (AtlasProxy.genProxyJavaSource(proxySrcDir, result)) {
-                appVariantContext.getVariantData().javacTask.source(proxySrcDir);
+//                appVariantContext.getVariantData().javacTask.source(proxySrcDir);
             }
 
             File file = variantScope

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/AwbJavaCompileConfigAction.java
Patch:
@@ -389,7 +389,7 @@ public void execute(AwbAndroidJavaCompile javacTask) {
                 String key = arg.getKey();
                 String value = arg.getValue();
 
-                if ("android.databinding.modulePackage".equals(key)) {
+                if ("android.databindiDng.modulePackage".equals(key)) {
                     value = awbBundle.getPackageName() + "._bundleapp_";
                 } else if ("android.databinding.artifactType".equals(key)) {
                     //value = "LIBRARY";

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/AwbApkPackageTask.java
Patch:
@@ -108,6 +108,9 @@ public AwbApkPackageTask(FileCollection resourceFiles, VariantContext variantCon
     }
 
     public File doFullTaskAction() throws IOException {
+        if (supportAbis == null){
+            supportAbis = ImmutableSet.of();
+        }
         ApkData apkData = appVariantOutputContext.getScope().getOutputScope().getApkDatas().get(0);
         if (dexFolders.getSingleFile().exists() && awbBundle.getMergedManifest().exists()) {
             File[] dexFile = dexFolders.getSingleFile().listFiles((dir, name) -> name.equals("classes.dex"));

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/TransformReplacer.java
Patch:
@@ -212,9 +212,10 @@ public void replaceProguardTransform() {
 
             AtlasProguardTransform newTransform = new AtlasProguardTransform(variantContext);
 
+            newTransform.oldTransform = (ProGuardTransform) transformTask.getTransform();
+
             ReflectUtils.updateField(transformTask, "transform",
                     newTransform);
-            newTransform.oldTransform = (ProGuardTransform) transformTask.getTransform();
 //
         }
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasProguardTransform.java
Patch:
@@ -515,6 +515,8 @@ protected void inputJar(
             super.inputJar(classPath, file, filter);
         } else if (AtlasBuildContext.atlasMainDexHelper.inMainDex(file)){
             super.inputJar(classPath, file, filter);
+        }else if (appVariantContext.getScope().getGlobalScope().getAndroidBuilder().getBootClasspath(true).contains(file)){
+            super.inputJar(classPath, file, filter);
         }
     }
 }

File: atlas-core/src/main/java/android/databinding/AtlasDataBindingUtil.java
Patch:
@@ -33,6 +33,7 @@
 import java.lang.reflect.Method;
 import java.util.HashMap;
 import java.util.List;
+import java.io.File;
 
 /**
  * Utility class to create {@link ViewDataBinding} from layouts.
@@ -366,7 +367,7 @@ private static Object getDataBinderMapper(Application application, Resources res
             String assetsPath = (String)AssetManager.class.getMethod("getCookieName", new Class[] { Integer.TYPE }).invoke(resource.getAssets(), new Object[] { Integer.valueOf(cookie) });
             if (assetsPath.endsWith(".zip"))
             {
-                bundleLocation = substringBetween(assetsPath, "/storage/", "/version.");
+                bundleLocation = substringBetween(assetsPath,"/storage/","/");
                 className = String.format("%s.%s", new Object[] { bundleLocation, "DataBinderMapper" });
             }
             else if (assetsPath.endsWith(".so"))

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasFeatureTaskManager.java
Patch:
@@ -101,7 +101,7 @@ public void runTask() {
             invokeHandle(libVariantContext.getScope());
 
             List<MtlTaskContext> featureTaskList = new ArrayList<>();
-            featureTaskList.add(new MtlTaskContext(PrePareFeatureTask.ConfigAction.class,null);
+            featureTaskList.add(new MtlTaskContext(PrePareFeatureTask.ConfigAction.class,null));
             featureTaskList.add(new MtlTaskContext(libVariantContext.getVariantData().preBuildTask));
 
             TBuildType tBuildType = libVariantContext.getBuildType();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -438,7 +438,7 @@ public void processAwbResources(Aapt aapt,AaptPackageConfig.Builder aaptConfigBu
                     SymbolUtils.loadDependenciesSymbolTables(
                             aaptConfig.getLibrarySymbolTableFiles(), mainPackageName);
 
-            boolean finalIds = false;
+            boolean finalIds = true;
             if (aaptConfig.getVariantType() == VariantType.LIBRARY) {
                 finalIds = false;
             }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/differ/dex/DexDiffer.java
Patch:
@@ -519,6 +519,9 @@ public DexDiffInfo doDiff() throws IOException, PatchException {
             if (!tpatch&&exludeClasses.contains(newClassDef.getType())){
                 continue;
             }
+            if (!tpatch && (className.endsWith(".R")||className.contains(".R$"))){
+                continue;
+            }
             DexBackedClassDef baseClassDef = baseClassDefMap.get(className);
             if (lastBundleClassMap.containsKey(newClassDef.getType())&&tpatch){
                 System.out.println("overide class:"+className);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/FastMultiDexer.java
Patch:
@@ -224,7 +224,6 @@
 import com.taobao.android.builder.extension.MultiDexConfig;
 import com.taobao.android.builder.tools.multidex.dex.DexGroup;
 import com.taobao.android.builder.tools.multidex.mutli.JarRefactor;
-import org.gradle.api.GradleException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -269,9 +268,9 @@ public boolean isFastMultiDexEnabled() {
     }
 
     @Override
-    public Collection<File> repackageJarList(Collection<File> files, File mainDexListFile) throws IOException {
+    public Collection<File> repackageJarList(Collection<File> files, File mainDexListFile, boolean release) throws IOException {
 
-        return new JarRefactor(appVariantContext, multiDexConfig).repackageJarList(files,mainDexListFile);
+        return new JarRefactor(appVariantContext, multiDexConfig).repackageJarList(files,mainDexListFile,release);
 
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -224,6 +224,7 @@
 import com.android.build.gradle.internal.pipeline.TransformTask;
 import com.android.build.gradle.internal.scope.GlobalScope;
 import com.android.build.gradle.internal.scope.VariantScope;
+import com.android.build.gradle.internal.tasks.ExtractProguardFiles;
 import com.android.build.gradle.internal.transforms.DexTransform;
 import com.android.build.gradle.internal.transforms.MultiDexTransform;
 import com.android.build.gradle.internal.transforms.ProGuardTransform;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasProguardTransform.java
Patch:
@@ -428,8 +428,10 @@ private void doMainBundleProguard(TransformInvocation invocation) throws Excepti
 
         File outFile = invocation.getOutputProvider().getContentLocation("main", getOutputTypes(), getScopes(),
                 Format.JAR);
+
         outFile.delete();
-        input.proguardOutputDir = outFile.getParentFile();
+        input.proguardOutputDir = invocation.getOutputProvider().getContentLocation("main", getOutputTypes(), getScopes(),
+                Format.DIRECTORY);
         input.printMapping = (File) ReflectUtils.getField(oldTransform, "printMapping");
         input.dump = (File) ReflectUtils.getField(oldTransform, "dump");
         input.printSeeds = (File) ReflectUtils.getField(oldTransform, "printSeeds");

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/dex/DexMerger.java
Patch:
@@ -356,7 +356,7 @@ private void addDexByRule(List<DexGroup> dexDtos) {
         dexDtos.add(0, fistDto);
         for (File file : fileList) {
             if (file.getParentFile().getName().startsWith(FASTMAINDEX_JAR)) {
-                logger.warn("add %s to first dex!",file.getAbsolutePath());
+                logger.warn(String.format("add %s to first dex!",file.getAbsolutePath()));
                 Dex dex = jarDexMap.get(file);
                 fistDto.addDex(dex);
                 dexList.remove(dex);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/dex/DexMerger.java
Patch:
@@ -355,7 +355,8 @@ private void addDexByRule(List<DexGroup> dexDtos) {
         fistDto.firstDex = (true);
         dexDtos.add(0, fistDto);
         for (File file : fileList) {
-            if (file.getParentFile().getName().equals(FASTMAINDEX_JAR)) {
+            if (file.getParentFile().getName().startsWith(FASTMAINDEX_JAR)) {
+                logger.warn("add %s to first dex!",file.getAbsolutePath());
                 Dex dex = jarDexMap.get(file);
                 fistDto.addDex(dex);
                 dexList.remove(dex);

File: atlas-core/src/main/java/android/taobao/atlas/startup/AtlasBridgeApplication.java
Patch:
@@ -479,7 +479,6 @@ public  boolean isUpdated(Context context){
                 }
             }catch(Throwable e){
 //                throw new RuntimeException(e);
-                return false;
             }finally {
                 if(in!=null){
                     try {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/mutli/JarRefactor.java
Patch:
@@ -249,8 +249,9 @@ public Collection<File> repackageJarList(Collection<File> files, File mainDexLis
 
 
         List<String> mainDexList = new MainDexLister(appVariantContext, multiDexConfig).getMainDexList(files,mainDexListFile);
+        return null;
 
-        return generateFirstDexJar(mainDexList,files);
+//        return generateFirstDexJar(mainDexList,files);
 
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/pipeline/AtlasIncrementalFileMergeTransformUtils.java
Patch:
@@ -377,7 +377,7 @@ public static ImmutableList<IncrementalFileMergerInput> toNonIncrementalInput(
 
         for (DirectoryInput dirInput : transformInput.getDirectoryInputs()) {
             if (awbTransform == null) {
-                if (!AtlasBuildContext.atlasMainDexHelper.getMainResFiles().containsKey(dirInput.getFile().getAbsolutePath())) {
+                if (!AtlasBuildContext.atlasMainDexHelper.getMainSoFiles().containsKey(dirInput.getFile().getAbsolutePath())) {
                     continue;
                 }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/AtlasMainDexHelper.java
Patch:
@@ -80,7 +80,7 @@ public void updateMainDexFile(File oldFile,File newFile){
     }
 
     public void updateMainDexFile(JarInput oldFile,File newFile){
-        
+
         for (BuildAtlasEnvTask.FileIdentity id:mainDexJar){
             if (id.file.equals(oldFile.getFile())){
                 id.file = newFile;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/awo/utils/AwoInstaller.java
Patch:
@@ -406,7 +406,8 @@ private static void notifyApppatching(AndroidBuilder androidBuilder, String patc
         //        List<String> startCmd = Arrays.asList("shell", "am", "start", packageNameForPatch + "/" +
         // launcherActivityForPatch);
         List<String> patchCmd = Arrays.asList("shell", "am", "broadcast", "-a", "com.taobao.atlas.intent.PATCH_APP",
-                                              "-e", "pkg", patchPkg);
+                                              "-e", "pkg", patchPkg, "-n",
+                                              patchPkg + "/com.taobao.atlas.update.AwoPatchReceiver");
         try {
             executor.executeCommand(androidBuilder.getSdkInfo().getAdb().getAbsolutePath(), patchCmd, false);
         } catch (Exception e) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/awo/utils/AwoInstaller.java
Patch:
@@ -406,7 +406,8 @@ private static void notifyApppatching(AndroidBuilder androidBuilder, String patc
         //        List<String> startCmd = Arrays.asList("shell", "am", "start", packageNameForPatch + "/" +
         // launcherActivityForPatch);
         List<String> patchCmd = Arrays.asList("shell", "am", "broadcast", "-a", "com.taobao.atlas.intent.PATCH_APP",
-                                              "-e", "pkg", patchPkg);
+                                              "-e", "pkg", patchPkg, "-n",
+                                              patchPkg + "/com.taobao.atlas.update.AwoPatchReceiver");
         try {
             executor.executeCommand(androidBuilder.getSdkInfo().getAdb().getAbsolutePath(), patchCmd, false);
         } catch (Exception e) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AtlasDexArchiveBuilderTransform.java
Patch:
@@ -178,7 +178,7 @@ public void transform(@NonNull TransformInvocation transformInvocation)
             throws IOException {
 
         AtlasIntermediateStreamHelper atlasIntermediateStreamHelper = new AtlasIntermediateStreamHelper(transformTask);
-        atlasIntermediateStreamHelper.replaceProvider();
+        atlasIntermediateStreamHelper.replaceProvider(transformInvocation);
         AtlasBuildContext.status = AtlasBuildContext.STATUS.DEXARCHIVE;
         dexCache = (DexCache) CacheFactory.get(variantContext.getProject(),CACHE_ID,CACHE_VERSION,this,transformInvocation,DexCache.class);
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -417,13 +417,13 @@ public void processAwbResources(Aapt aapt,AaptPackageConfig.Builder aaptConfigBu
                 }
 
                 //why do this?
-//                writeLines(mergedSymbolFile, FileUtils.readLines(mainRTxt), true);
+                writeLines(mergedSymbolFile, FileUtils.readLines(mainRTxt), true);
             } catch (IOException e) {
                 throw new RuntimeException("Could not load file ", e);
             }
             SymbolTable mainSymbols =
                     mainRTxt.isFile()
-                            ? SymbolIo.readFromAapt(mainRTxt, mainPackageName)
+                            ? SymbolIo.readFromAapt(mergedSymbolFile, mainPackageName)
                             : SymbolTable.builder().tablePackage(mainPackageName).build();
 
             // For each dependency, load its symbol file.

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasConfigurationHelper.java
Patch:
@@ -485,15 +485,15 @@ public void registAtlasStreams() {
         dependencyHandler.registerTransform(
                 reg ->{
                     reg.getFrom().attribute(ARTIFACT_FORMAT,explodedAwbType);
-                    reg.getTo().attribute(ARTIFACT_FORMAT,AtlasAndroidArtifacts.AtlasArtifactType.LIBS.getType());
+                    reg.getTo().attribute(ARTIFACT_FORMAT,AtlasAndroidArtifacts.TYPE_LIBS);
                     reg.artifactTransform(LoadSolibFromLibsTransform.class);
                 }
         );
 
         dependencyHandler.registerTransform(
                 reg ->{
-                    reg.getFrom().attribute(ARTIFACT_FORMAT,AtlasAndroidArtifacts.ArtifactType.EXPLODED_AAR.getType());
-                    reg.getTo().attribute(ARTIFACT_FORMAT,AtlasAndroidArtifacts.AtlasArtifactType.LIBS.getType());
+                    reg.getFrom().attribute(ARTIFACT_FORMAT, AtlasAndroidArtifacts.AtlasArtifactType.EXPLODED_AAR.getType());
+                    reg.getTo().attribute(ARTIFACT_FORMAT,AtlasAndroidArtifacts.TYPE_LIBS);
                     reg.artifactTransform(LoadSolibFromLibsTransform.class);
                 }
         );

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/UpdateDependenciesTask.java
Patch:
@@ -224,6 +224,9 @@ void generate() {
         }
         FileCollection updateFileCollection = fileCollection.filter(element -> filesNames.contains(element.getParentFile().getParentFile().getName()));
         ReflectUtils.updateField(processAndroidResources,"symbolListsWithPackageNames",updateFileCollection);
+        appVariantContext.processResAwbsTask.mainDexSymbolFileCollection = updateFileCollection;
+
+
 
 
         try {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/PackageAwbsTask.java
Patch:
@@ -287,9 +287,6 @@ void createAwbPackages() throws ExecutionException, InterruptedException, IOExce
 
 
         for (final AwbBundle awbBundle : atlasDependencyTree.getAwbBundles()) {
-            if (awbBundle.getName().contains("wangxin")){
-                continue;
-            }
             runnables.add(() -> {
 
                 try {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasMergeJavaResourcesTransform.java
Patch:
@@ -429,8 +429,8 @@ public Void call() throws Exception {
                         IncrementalFileMergerOutput baseOutput;
                         if (mergedType == QualifiedContent.DefaultContentType.RESOURCES) {
                             File outputLocation = new File(appVariantOutputContext.getAwbJavaResFolder(awbTransform.getAwbBundle()),"res.jar");
-                            if (!outputLocation.getParentFile().exists()) {
-                                outputLocation.mkdirs();
+                            if (!appVariantOutputContext.getAwbJavaResFolder(awbTransform.getAwbBundle()).exists()) {
+                                appVariantOutputContext.getAwbJavaResFolder(awbTransform.getAwbBundle()).mkdirs();
                             }
                             createEmptyZipFile(outputLocation);
                             baseOutput =
@@ -515,7 +515,6 @@ private ImmutableList<IncrementalFileMergerInput> filter(
     }
 
     private void createEmptyZipFile(File outputLocation) throws IOException {
-
         ZipOutputStream zipOutputStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(outputLocation)));
         zipOutputStream.close();
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/TransformReplacer.java
Patch:
@@ -252,6 +252,7 @@ public void replaceMergeJavaResourcesTransform(AppVariantContext appVariantConte
         for (TransformTask transformTask:baseTransforms){
             MergeJavaResourcesTransform transform = (MergeJavaResourcesTransform) transformTask.getTransform();
             PackagingOptions packagingOptions = (PackagingOptions) ReflectUtils.getField(transform,"packagingOptions");
+            packagingOptions.exclude("**.aidl");
             Set<? super QualifiedContent.Scope> mergeScopes = (Set<? super QualifiedContent.Scope>) ReflectUtils.getField(transform,"mergeScopes");
             Set<QualifiedContent.ContentType> mergedType = (Set<QualifiedContent.ContentType>) ReflectUtils.getField(transform,"mergedType");
             String name = (String) ReflectUtils.getField(transform,"name");

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/dex/AtlasDexMergerTransform.java
Patch:
@@ -133,9 +133,6 @@ public void transform(TransformInvocation transformInvocation) throws TransformE
                 Map.Entry<AwbBundle,Multimap> entry =(Map.Entry<AwbBundle,Multimap> )iterator.next();
                 Multimap<QualifiedContent,File> multimap = entry.getValue();
                 AwbBundle awbBundle = entry.getKey();
-                if (awbBundle.getName().contains("wangxin")){
-                    continue;
-                }
                 File outPutFolder = appVariantOutputContext.getAwbDexOutput(awbBundle.getName());
                 List<File>inputs = new ArrayList<>();
                 for (QualifiedContent qualifiedContent : multimap.asMap().keySet()){

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/GenerateAtlasSourceTask.java
Patch:
@@ -317,7 +317,7 @@ void generate() {
         if (StringUtils.isNotEmpty(injectParam.blackDialogActivity)) {
             lines.add("public static String blackDialogActivity = \"" + injectParam.blackDialogActivity + "\";");
         }
-            lines.add("public static boolean autoStart = \"" + injectParam.autoStart + "\";");
+            lines.add("public static String autoStart = \"" + injectParam.autoStart + "\";");
 
         if (StringUtils.isNotEmpty(injectParam.preLaunch)) {
             lines.add("public static String preLaunch = \"" + injectParam.preLaunch + "\";");

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/mutli/JarRefactor.java
Patch:
@@ -237,7 +237,7 @@ public class JarRefactor {
     private MultiDexConfig multiDexConfig;
     private boolean splitJar = false;
 
-    private static final int MAX_CLASSES = 1000;
+    public static final int MAX_CLASSES = 1000;
 
     public JarRefactor(AppVariantContext appVariantContext,
                        MultiDexConfig multiDexConfig) {
@@ -324,7 +324,7 @@ public Collection<File> repackageJarList(Collection<File> files) throws IOExcept
             if (pathList.isEmpty()) {
                 FileUtils.copyFile(jar, outJar);
             }
-            if (!appVariantContext.getAtlasExtension().getTBuildConfig().isFastProguard() && outJar.getName().equals("main.jar")){
+            if (!appVariantContext.getAtlasExtension().getTBuildConfig().isFastProguard() && files.size() == 1){
                 splitMainJar(result,outJar,1);
             }
         }

File: atlas-core/src/main/java/android/taobao/atlas/remote/IRemote.java
Patch:
@@ -1,8 +1,11 @@
 package android.taobao.atlas.remote;
 
+
 /**
  * Created by guanjie on 2017/10/24.
  */
 
 public interface IRemote extends IRemoteTransactor{
+    IRemoteContext remoteContext = null;
+    RemoteActivityManager.EmbeddedActivity realHost = null;
 }

File: atlas-core/src/main/java/android/taobao/atlas/remote/fragment/RemoteFragment.java
Patch:
@@ -20,6 +20,7 @@
 import android.taobao.atlas.remote.IRemoteContext;
 import android.taobao.atlas.remote.IRemoteTransactor;
 import android.taobao.atlas.remote.RemoteActivityManager;
+import android.taobao.atlas.remote.Util;
 import android.taobao.atlas.runtime.BundleUtil;
 import android.text.TextUtils;
 import android.util.AttributeSet;
@@ -48,6 +49,8 @@ public static RemoteFragment createRemoteFragment(Activity activity, String key,
         final BundleListing.BundleInfo bi = AtlasBundleInfoManager.instance().getBundleInfo(bundleName);
         String fragmentClazzName = bi.remoteFragments.get(key);
         remoteFragment.targetFragment = (Fragment)remoteFragment.remoteActivity.getClassLoader().loadClass(fragmentClazzName).newInstance();
+        Util.findFieldFromInterface(remoteFragment.targetFragment, "remoteContext").set(remoteFragment.targetFragment,remoteFragment);
+        Util.findFieldFromInterface(remoteFragment.targetFragment,"realHost").set(remoteFragment.targetFragment,remoteFragment.remoteActivity);
         if(!(remoteFragment.targetFragment instanceof IRemote)){
             throw new RuntimeException("Fragment for remote use must implements IRemote");
         }

File: atlas-core/src/main/java/android/taobao/atlas/remote/RemoteActivityManager.java
Patch:
@@ -120,7 +120,7 @@ public EmbeddedActivityRecord startEmbeddedActivity(String bundleName) throws Ex
         intent.putExtra("bundleName",bundleName);
         ActivityInfo info = intent.resolveActivityInfo(mParent.getPackageManager(), PackageManager.GET_ACTIVITIES);
         activityRecord.activity = (EmbeddedActivity) ActivityThread_startActivityNow.invoke(AndroidHack.getActivityThread(),
-                mParent, activityRecord.id, intent, info, activityRecord.activity, null, null);
+                mParent, activityRecord.id, intent, info, activityRecord, null, null);
         activityRecord.activityInfo = info;
         return activityRecord;
     }

File: atlas-core/src/main/java/android/taobao/atlas/runtime/newcomponent/activity/ActivityBridge.java
Patch:
@@ -8,9 +8,9 @@
 import android.taobao.atlas.runtime.ActivityTaskMgr;
 import android.taobao.atlas.runtime.InstrumentationHook;
 import android.taobao.atlas.runtime.RuntimeVariables;
+import android.taobao.atlas.runtime.newcomponent.AdditionalActivityManagerProxy;
 import android.taobao.atlas.runtime.newcomponent.AdditionalPackageManager;
 import android.taobao.atlas.runtime.newcomponent.BridgeUtil;
-import android.taobao.atlas.runtime.newcomponent.service.ServiceBridge;
 import android.taobao.atlas.util.StringUtils;
 
 import java.lang.ref.WeakReference;
@@ -32,7 +32,7 @@ public static Instrumentation.ActivityResult execStartActivity(Intent intent, fi
                 handleActivityStack(infos.get(0).activityInfo,wrappIntent);
                 return startActivityRunnable.execStartActivity(wrappIntent);
             }else{
-                ServiceBridge.handleActivityStack(wrappIntent,infos.get(0).activityInfo,new OnIntentPreparedObserver(){
+                AdditionalActivityManagerProxy.handleActivityStack(wrappIntent,infos.get(0).activityInfo,new OnIntentPreparedObserver(){
                     @Override
                     public void onPrepared(final Intent intent) {
                         startActivityRunnable.execStartActivity(intent);

File: atlas-core/src/main/java/android/taobao/atlas/runtime/newcomponent/receiver/ReceiverBridge.java
Patch:
@@ -9,8 +9,8 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.taobao.atlas.runtime.RuntimeVariables;
+import android.taobao.atlas.runtime.newcomponent.AdditionalActivityManagerProxy;
 import android.taobao.atlas.runtime.newcomponent.AdditionalPackageManager;
-import android.taobao.atlas.runtime.newcomponent.service.ServiceBridge;
 
 import java.util.List;
 
@@ -61,7 +61,7 @@ public void onReceive(Context context, Intent intent) {
                         postOnReceived(intent,info.activityInfo);
                     }else{
                        // remote process
-                        ServiceBridge.notifyonReceived(intent,info.activityInfo);
+                        AdditionalActivityManagerProxy.notifyonReceived(intent,info.activityInfo);
                     }
                 }
             }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/DependencyManager.java
Patch:
@@ -318,14 +318,14 @@ public DependencyManager(
 
     public void addDependenciesToPrepareTask(
             @NonNull TaskFactory tasks,
-            @NonNull BaseVariantData<? extends BaseVariantOutputData> variantData,
+            @NonNull BaseVariantData variantData,
             @NonNull AndroidTask<PrepareDependenciesTask> prepareDependenciesTask) {
         VariantDependencies variantDeps = variantData.getVariantDependency();
 
-        final AndroidTask<DefaultTask> preBuildTask = variantData.getScope().getPreBuildTask();
+        final AndroidTask<? extends DefaultTask> preBuildTask = variantData.getScope().getPreBuildTask();
 
         final ImmutableList<AndroidDependency> compileLibraries = variantDeps
-                .getCompileDependencies().getAllAndroidDependencies();
+                .().getAllAndroidDependencies();
         final ImmutableList<AndroidDependency> packageLibraries = variantDeps
                 .getPackageDependencies().getAllAndroidDependencies();
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasBaseTaskManager.java
Patch:
@@ -214,6 +214,7 @@
 import com.android.build.gradle.internal.LoggerWrapper;
 import com.android.build.gradle.internal.TaskContainerAdaptor;
 import com.android.build.gradle.internal.scope.AndroidTaskRegistry;
+import com.android.build.gradle.options.ProjectOptions;
 import com.android.builder.core.AtlasBuilder;
 import com.android.utils.ILogger;
 import com.taobao.android.builder.extension.AtlasExtension;
@@ -251,8 +252,8 @@ public AtlasBaseTaskManager(AtlasBuilder androidBuilder, T androidExtension, Pro
         this.project = project;
         this.tasks = new TaskContainerAdaptor(project.getTasks());
         this.atlasExtension = atlasExtension;
-        this.extraModelInfo = new ExtraModelInfo(project);
         this.logger = new LoggerWrapper(Logging.getLogger(AtlasBaseTaskManager.class));
+        this.extraModelInfo = new ExtraModelInfo(new ProjectOptions(project), Logging.getLogger(AtlasBaseTaskManager.class));
 
         //this.dependencyManager = new DependencyManager(androidExtension, project, atlasExtension);
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/incremental/AwoInstallTask.java
Patch:
@@ -221,6 +221,7 @@
 import com.android.build.gradle.internal.tasks.BaseTask;
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.android.builder.signing.SigningException;
+import com.android.ide.common.build.ApkData;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AtlasDependencyTree;
 import com.taobao.android.builder.extension.AtlasExtension;
@@ -293,8 +294,8 @@ public static class ConfigAction extends MtlBaseTaskAction<AwoInstallTask> {
 
         private final AtlasExtension atlasExtension;
 
-        public ConfigAction(AppVariantContext appVariantContext, BaseVariantOutputData baseVariantOutputData) {
-            super(appVariantContext, baseVariantOutputData);
+        public ConfigAction(AppVariantContext appVariantContext, ApkData apkData) {
+            super(appVariantContext, apkData);
             this.appVariantContext = appVariantContext;
             this.atlasExtension = this.appVariantContext.getAtlasExtension();
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/PatchConfig.java
Patch:
@@ -265,7 +265,7 @@ public Set<String> getExcludeClasses() {
         if (excludeClasses.size() > 0){
             return excludeClasses;
         }else {
-            return Sets.newHashSet("Landroid/taobao/atlas/framework/FrameworkProperties;","Landroid/taobao/atlas/bundleInfo/AtlasBundleInfoGenerator;","Lc8/As;");
+            return Sets.newHashSet("Landroid/taobao/atlas/framework/FrameworkProperties;","Landroid/taobao/atlas/bundleInfo/AtlasBundleInfoGenerator;");
         }
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/manager/MtlParallelTask.java
Patch:
@@ -209,16 +209,16 @@
 
 package com.taobao.android.builder.tasks.manager;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.android.build.gradle.internal.tasks.BaseTask;
 import com.taobao.android.builder.tools.concurrent.ExecutorServicesHelper;
 import org.apache.commons.lang3.StringUtils;
 import org.gradle.api.DefaultTask;
 import org.gradle.api.GradleException;
 import org.gradle.api.tasks.TaskAction;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /**
  * Created by wuzhong on 2016/10/13.
  */

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/command/dexer/Main.java
Patch:
@@ -884,6 +884,7 @@ private  byte[] writeDex(DexFile outputDex) {
                 DxConsole.err.println("\ntrouble writing output: " +
                                    ex.getMessage());
             }
+            ex.printStackTrace();
             return null;
         }
         return outArray;

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tools/TPatchTool.java
Patch:
@@ -667,7 +667,7 @@ public PatchInfo createBasePatchInfo(File file) {
                 patchBundleInfo.setVersion(artifactBundleInfo.getVersion());
                 patchBundleInfo.setPatchType(bundleTypes.get(artifactBundleInfo.getPkgName()) == null? 0:bundleTypes.get(artifactBundleInfo.getPkgName()));
                 patchBundleInfo.setName(artifactBundleInfo.getPkgName());
-                if (!modifyBundles.contains(artifactBundleInfo.getPkgName())){
+                if (!modifyBundles.contains(artifactBundleInfo.getPkgName().replace("_","."))){
                     patchBundleInfo.setInherit(true);
                 }
                 patchBundleInfo.setApplicationName(artifactBundleInfo.getApplicationName());
@@ -676,7 +676,7 @@ public PatchInfo createBasePatchInfo(File file) {
                 patchBundleInfo.setDependency(artifactBundleInfo.getDependency());
                 patchBundleInfo.setBaseVersion(artifactBundleInfo.getBaseVersion());
                 patchInfo.getBundles().add(patchBundleInfo);
-            } else if (modifyBundles.contains(artifactBundleInfo.getPkgName())) {
+            } else if (modifyBundles.contains(artifactBundleInfo.getPkgName().replace("_","."))) {
                 PatchBundleInfo patchBundleInfo = new PatchBundleInfo();
                 patchBundleInfo.setNewBundle(false);
                 patchBundleInfo.setMainBundle(false);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/PatchConfig.java
Patch:
@@ -265,7 +265,7 @@ public Set<String> getExcludeClasses() {
         if (excludeClasses.size() > 0){
             return excludeClasses;
         }else {
-            return Sets.newHashSet("Landroid/taobao/atlas/framework/FrameworkProperties;","Landroid/taobao/atlas/bundleInfo/AtlasBundleInfoGenerator;");
+            return Sets.newHashSet("Landroid/taobao/atlas/framework/FrameworkProperties;","Landroid/taobao/atlas/bundleInfo/AtlasBundleInfoGenerator;","Lc8/As;");
         }
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/cf/direct/DirectClassFile.java
Patch:
@@ -69,7 +69,7 @@ public class DirectClassFile implements ClassFile {
      *
      * Note: if you change this, please change "java.class.version" in System.java.
      */
-    private static final int CLASS_FILE_MAX_MAJOR_VERSION = 51;
+    private static final int CLASS_FILE_MAX_MAJOR_VERSION = 52;
 
     /** maximum {@code .class} file minor version */
     private static final int CLASS_FILE_MAX_MINOR_VERSION = 0;

File: atlas-core/src/main/java/android/taobao/atlas/remote/RemoteActivityManager.java
Patch:
@@ -130,6 +130,8 @@ public void onParentActivityDestroyed(){
             Activity activity = entry.getValue().activity;
             activity.finish();
         }
+        mActivityRecords.clear();
+        sActivityManager.remove(mParent);
     }
 
     private class EmbeddedActivityRecord extends Binder {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/dex/DexMerger.java
Patch:
@@ -268,9 +268,7 @@ public DexMerger(MultiDexConfig multiDexConfig, Map<File, Dex> fileDexMap) {
     }
 
     public List<DexGroup> group() {
-
         List<DexGroup> dexGroupList = new ArrayList<>();
-
         addDexByRule(dexGroupList);
 
         addDexLimited(dexGroupList, true);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dex/FieldId.java
Patch:
@@ -63,6 +63,6 @@ public void writeTo(Dex.Section out) {
         if (dex == null) {
             return declaringClassIndex + " " + typeIndex + " " + nameIndex;
         }
-        return dex.typeNames().get(typeIndex) + "." + dex.strings().get(nameIndex);
+        return dex.typeNames().get(declaringClassIndex)+"."+dex.typeNames().get(typeIndex) + "." + dex.strings().get(nameIndex);
     }
 }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/object/PatchBundleInfo.java
Patch:
@@ -431,14 +431,14 @@ public class PatchBundleInfo {
     private String baseVersion;
 
     public int getBuildPatchType() {
-        return buildPatchType;
+        return patchType;
     }
 
     public void setBuildPatchType(int buildPatchType) {
-        this.buildPatchType = buildPatchType;
+        this.patchType = buildPatchType;
     }
 
-    private int buildPatchType = 0;
+    private int patchType = 0;
 
     public boolean isInherit() {
         return inherit;

File: atlas-core/src/main/java/android/taobao/atlas/remote/fragment/RemoteFragment.java
Patch:
@@ -43,14 +43,14 @@ public class RemoteFragment extends Fragment implements IRemoteContext,IRemoteTr
 
     public static RemoteFragment createRemoteFragment(Activity activity, String key,String bundleName) throws Exception{
         RemoteFragment remoteFragment = new RemoteFragment();
+        remoteFragment.targetBundleName = bundleName;
         remoteFragment.remoteActivity = RemoteActivityManager.obtain(activity).getRemoteHost(remoteFragment);
         final BundleListing.BundleInfo bi = AtlasBundleInfoManager.instance().getBundleInfo(bundleName);
         String fragmentClazzName = bi.remoteFragments.get(key);
         remoteFragment.targetFragment = (Fragment)remoteFragment.remoteActivity.getClassLoader().loadClass(fragmentClazzName).newInstance();
         if(!(remoteFragment.targetFragment instanceof IRemote)){
             throw new RuntimeException("Fragment for remote use must implements IRemote");
         }
-        remoteFragment.targetBundleName = bundleName;
         return remoteFragment;
     }
 

File: atlas-core/src/main/java/android/taobao/atlas/remote/transactor/RemoteTransactor.java
Patch:
@@ -18,14 +18,14 @@ public class RemoteTransactor implements IRemoteContext,IRemoteTransactor{
 
     public static RemoteTransactor crateRemoteTransactor(Activity activity,String key,String bundleName) throws Exception{
         RemoteTransactor remoteTransactor = new RemoteTransactor();
+        remoteTransactor.targetBundleName = bundleName;
         if(activity!=null) {
             remoteTransactor.remoteActivity = RemoteActivityManager.obtain(activity).getRemoteHost(remoteTransactor);
         }
         final BundleListing.BundleInfo bi = AtlasBundleInfoManager.instance().getBundleInfo(bundleName);
         String viewClassName = bi.remoteTransactors.get(key);
         Class transactorClass = Atlas.getInstance().getBundleClassLoader(bundleName).loadClass(viewClassName);
         remoteTransactor.targetTransactor = (IRemote)transactorClass.newInstance();
-        remoteTransactor.targetBundleName = bundleName;
         return remoteTransactor;
     }
 

File: atlas-core/src/main/java/android/taobao/atlas/remote/view/RemoteView.java
Patch:
@@ -22,14 +22,14 @@ public class RemoteView extends FrameLayout implements IRemoteTransactor,IRemote
 
     public static RemoteView createRemoteView(Activity activity,String remoteViewKey,String bundleName) throws Exception{
         RemoteView remoteView = new RemoteView(activity);
+        remoteView.targetBundleName = bundleName;
         remoteView.remoteActivity = RemoteActivityManager.obtain(activity).getRemoteHost(remoteView);
         final BundleListing.BundleInfo bi = AtlasBundleInfoManager.instance().getBundleInfo(bundleName);
         String viewClassName = bi.remoteViews.get(remoteViewKey);
         Class viewClass = remoteView.remoteActivity.getClassLoader().loadClass(viewClassName);
         Constructor cons = viewClass.getDeclaredConstructor(Context.class);
         cons.setAccessible(true);
         remoteView.targetView = (IRemote) cons.newInstance(remoteView.remoteActivity);
-        remoteView.targetBundleName = bundleName;
         remoteView.addView((View)remoteView.targetView);
         return remoteView;
     }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tools/HotPatchTool.java
Patch:
@@ -57,6 +57,7 @@ public File createBundleDexPatch(File newApkUnzipFolder,
                     DEFAULT_API_LEVEL,
                     null,
                     mainDex);
+            dexTool.setExculdeClasses(((HotPatchInput)input).excludeClasses);
             dexTool.setPatchClassList(hotClassList);
             DexDiffInfo dexDiffInfo = dexTool.createPatchDex(dexDiffFile);
             if (dexDiffFile.exists()) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/DexPatchDiffTask.java
Patch:
@@ -58,6 +58,9 @@ public Boolean call() throws Exception {
                             outDex.getParentFile().mkdirs();
                         }
                         DexDiffInfo dexDiffInfo = tPatchDexTool.createPatchDex(outDex);
+                        for (String className:dexDiffInfo.getClassDiffInfoMap().keySet()){
+                            System.out.println("modify class:"+className);
+                        }
 
                     } catch (IOException e) {
                         e.printStackTrace();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchTask.java
Patch:
@@ -356,6 +356,8 @@ private BaseInput createInput(ApkBO apkBO, ApkBO newApkBO, boolean retainMainBun
             if (tpatchInput instanceof HotPatchInput){
                 ((HotPatchInput) tpatchInput).hotClassListFile = patchContext.hotClassListFile;
                 ((HotPatchInput) tpatchInput).patchType = PatchType.HOTFIX;
+                ((HotPatchInput)tpatchInput).excludeClasses = patchContext.excludeClasses;
+
             }else {
                 tpatchInput.patchType = PatchType.DEXPATCH;
                 ((DexPatchInput)tpatchInput).excludeClasses = patchContext.excludeClasses;

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -341,7 +341,7 @@ private Framework() {
      */
     static void startup(boolean updated) throws BundleException {
         AtlasBundleInfoManager.instance().getBundleInfo();
-        AtlasHotPatchManager.getInstance();
+//        AtlasHotPatchManager.getInstance();
         notifyFrameworkListeners(0 /* STARTING */, null, null);
         notifyFrameworkListeners(FrameworkEvent.STARTED, null, null);
     }

File: atlas-core/src/main/java/android/taobao/atlas/remote/view/RemoteView.java
Patch:
@@ -11,6 +11,7 @@
 import android.taobao.atlas.remote.IRemoteDelegator;
 import android.taobao.atlas.remote.IRemoteTransactor;
 import android.taobao.atlas.remote.RemoteActivityManager;
+import android.taobao.atlas.remote.transactor.RemoteTransactor;
 import android.taobao.atlas.runtime.BundleUtil;
 import android.text.TextUtils;
 import android.view.View;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchTask.java
Patch:
@@ -363,6 +363,7 @@ private BaseInput createInput(ApkBO apkBO, ApkBO newApkBO, boolean retainMainBun
         }else {
             tpatchInput.patchType = PatchType.TPATCH;
             tpatchInput.createHisPatch = true;
+            tpatchInput.bundleWhiteList = appVariantContext.bundleListCfg;
             tpatchInput.createAll = StringUtils.isEmpty(patchContext.tpatchHistoryUrl);
             tpatchInput.LAST_PATCH_URL = patchContext.LAST_PATCH_URL;
             tpatchInput.hisPatchUrl = patchContext.tpatchHistoryUrl;

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/apatch/ApkPatch.java
Patch:
@@ -325,8 +325,9 @@ public File doPatch() throws PatchException {
             if (null != diffFile && null != diffJsonFile) {
                 info.writeToFile(name, diffFile, diffJsonFile);
             }
+
             //生成dex
-            classes = SmaliDiffUtils.buildCode(dexFile, info);
+            classes = SmaliDiffUtils.buildCode(smaliDir,dexFile, info);
             if (null == classes || classes.size() <= 0) {
                 return null;
             }

File: atlas-core/src/main/java/android/taobao/atlas/runtime/DelegateResources.java
Patch:
@@ -426,7 +426,6 @@ private static void updateResources(Resources res,String assetPath,int assertTyp
         if(sResourcesFetcher==null){
             sResourcesFetcher = new ResourceIdFetcher();
         }
-        sResourcesFetcher.addAssetForGetIdentifier(assetPath);
     }
 
     private static ResourcesProcessor getResourceProcessor(){

File: atlas-core/src/main/java/android/taobao/atlas/startup/DexLoadBooster.java
Patch:
@@ -249,6 +249,7 @@ public void init(Context context) {
         if (!AndroidRuntime.getInstance().isEnabled()) {
             return;
         }
+        Log.e("AndroidRuntime",Dex2OatService.class.toString());
         DalvikPatch.patchIfPossible();
     }
 

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleImpl.java
Patch:
@@ -307,11 +307,11 @@ public final class BundleImpl implements Bundle {
                     this.archive = new BundleArchive(location, bundleDir, bcontext.bundle_tag, dexPatchVersion);
                 }catch(Throwable e){
                     bundleDir = bcontext.bundleDir;
-                    this.archive = new BundleArchive(location, bundleDir, bcontext.bundle_tag, -1);
+                    this.archive = new BundleArchive(location, bundleDir, bcontext.bundle_tag, -1l);
                 }
             }else {
                 bundleDir = bcontext.bundleDir;
-                this.archive = new BundleArchive(location, bundleDir, bcontext.bundle_tag,-1);
+                this.archive = new BundleArchive(location, bundleDir, bcontext.bundle_tag,-1l);
             }
         } catch (Exception e) {
             e.printStackTrace();

File: atlas-core/src/main/java/android/taobao/atlas/startup/AtlasBridgeApplication.java
Patch:
@@ -387,8 +387,9 @@ private boolean isApplicationNormalCreate(Context base) {
         }
 
         if (nativeLibDir == null || !new File(nativeLibDir).exists()) {
-            checkShowErrorNotification("InvalidLibPath");
-            return false;
+            Log.e("AtlasBridgeApplication","can not find nativeLibDir : "+nativeLibDir);
+ //           checkShowErrorNotification("InvalidLibPath");
+//            return false;
         }
 
         int pid = android.os.Process.myPid();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/multidex/dex/DexMerger.java
Patch:
@@ -311,7 +311,7 @@ public void run() {
             throw new GradleException(e.getMessage(), e);
         }
 
-        if (!dexList.isEmpty()) {
+        if (!dexList.isEmpty() && mergedList.length > multiDexConfig.getDexCount() ) {
             mergeSmallDexs(outDexFolder, mergedList);
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/BundleProguarder.java
Patch:
@@ -253,7 +253,7 @@
  */
 public class BundleProguarder {
 
-    public static final String CACHE_TYPE = "proguard-bundles-0.11";
+    public static final String CACHE_TYPE = "proguard-bundles-0.12";
 
     private static Logger logger = LoggerFactory.getLogger(BundleProguarder.class);
     private static FileLogger fileLogger = FileLogger.getInstance("proguard");

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/DiffDependenciesTask.java
Patch:
@@ -167,6 +167,7 @@ private Set<ArtifactBundleInfo> getArtifactBundleInfo(List<BasicBundleInfo> bund
                 awbBundleInfo.setApplicationName(bundleInfo.getApplicationName());
                 awbBundleInfo.setArtifactId(awbBundle.getResolvedCoordinates().getArtifactId());
                 awbBundleInfo.setName(bundleInfo.getName());
+
                 for (BasicBundleInfo key : bundleInfos) {
                     if (key.getPkgName().equals(awbBundle.getPackageName())) {
                         awbBundleInfo.setSrcUnitTag(key.getUnique_tag());

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -403,7 +403,7 @@ public void patchKernalDex(Application application) throws Exception {
             }
             //临时处理方案，需要替换为dexopt时传入classsLoader以兼容8.0
             patchWithApk = dexPatch &&
-                    (TextUtils.isEmpty(KernalVersionManager.instance().currentVersionName()) || !KernalVersionManager.instance().currentVersionName().equals(KernalConstants.INSTALLED_VERSIONNAME));
+                    (TextUtils.isEmpty(KernalVersionManager.instance().currentVersionName()) || KernalVersionManager.instance().currentVersionName().equals(KernalConstants.INSTALLED_VERSIONNAME));
             if (!needReplaceClassLoader) {
                 FrameworkPropertiesClazz = archive.getOdexFile()[newFrameworkPropertiesDexIndex].loadClass("android.taobao.atlas.framework.FrameworkProperties", application.getClassLoader());
             }else if(patchWithApk){

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/reader/BundleListingUtil.java
Patch:
@@ -36,7 +36,9 @@ public static LinkedHashMap<String,BundleListing.BundleInfo> parseArray(String l
             if (currentBundleInfo==null) {
                 info.setCurrent_unique_tag(info.getUnique_tag());
             }else {
-                info.setCurrent_unique_tag(currentBundleInfo.get(info.getPkgName()).getUnique_tag());
+                if (currentBundleInfo.get(info.getPkgName())!= null){
+                    info.setCurrent_unique_tag(currentBundleInfo.get(info.getPkgName()).getUnique_tag());
+                }
             }
 
             infos.put(info.getPkgName(),info);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/repatch/InsTructionsReIClassDef.java
Patch:
@@ -521,7 +521,7 @@ public Iterator iterator() {
                                     DefineUtils.getDefineClassName(classProcessor.classProcess(DefineUtils.getDalvikClassName(charSequence.toString())).className,isArray1));
                         }
                         final ImmutableMethodReference immutableReference = new ImmutableMethodReference(
-                                DefineUtils.getDefineClassName(classProcessor.classProcess(DefineUtils.getDalvikClassName(methodReference.getDefiningClass())).className,false),
+                                DefineUtils.getDefineClassName(classProcessor.classProcess(DefineUtils.getDalvikClassName(methodReference.getDefiningClass())).className,methodReference.getDefiningClass().startsWith("[")),
 
                                 classProcessor.methodProcess(DefineUtils.getDalvikClassName(methodReference.getDefiningClass()),
                                         methodReference.getName(),
@@ -591,7 +591,7 @@ public Iterator iterator() {
 
                     final ImmutableFieldReference immutableFieldReference = new ImmutableFieldReference(
 
-                            DefineUtils.getDefineClassName(classProcessor.classProcess(DefineUtils.getDalvikClassName(fieldReference.getDefiningClass())).className,false),
+                            DefineUtils.getDefineClassName(classProcessor.classProcess(DefineUtils.getDalvikClassName(fieldReference.getDefiningClass())).className,fieldReference.getDefiningClass().startsWith("[")),
                             classProcessor.filedProcess(DefineUtils.getDalvikClassName(fieldReference.getDefiningClass()), isBasic?basicType.get(fieldReference.getType()):DefineUtils.getDalvikClassName(fieldReference.getType()), fieldReference.getName()).fieldName,
                             isBasic? fieldReference.getType():DefineUtils.getDefineClassName(classProcessor.classProcess(DefineUtils.getDalvikClassName(fieldReference.getType())).className,fieldReference.getType().startsWith("["))
                     );

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/manager/MtlTaskInjector.java
Patch:
@@ -319,6 +319,9 @@ protected List<Task> findTask(Class<Task> clazz, String variantName) {
         Task[] androidTasks = project.getTasks().withType(clazz).toArray(new Task[0]);
         List<Task> taskList = new ArrayList();
         for (Task task : androidTasks) {
+            if (task.getName().endsWith("TestJavaWithJavac")){
+                continue;
+            }
             if (task instanceof DefaultAndroidTask) {
                 if (variantName.equals(((DefaultAndroidTask)task).getVariantName())) {
                     taskList.add(task);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/builder/DexBuilder.java
Patch:
@@ -1,6 +1,7 @@
 package com.taobao.android.builder.tasks.dexpatch.builder;
 
 import com.taobao.android.builder.extension.DexConfig;
+import com.taobao.android.builder.extension.TBuildType;
 
 import java.io.File;
 import java.io.IOException;
@@ -28,4 +29,6 @@ public interface DexBuilder {
     void clear();
 
     Map<String, List<File>> getOutputs();
+
+    void obfDex(File mappingFile, File bundleListCfg, File baseApkFile, TBuildType buildType, boolean b);
 }

File: atlas-core/src/main/java/android/taobao/atlas/runtime/ActivityTaskMgr.java
Patch:
@@ -267,8 +267,9 @@ public void popFromActivityStack(Activity activity) {
         if(sReminderDialog!=null && sReminderDialog.getContext()==activity){
             try{
                 sReminderDialog.dismiss();
+            }catch (Throwable e){}finally {
                 sReminderDialog = null;
-            }catch (Throwable e){}
+            }
         }
         for(int x=0; x<activityList.size(); x++){
             WeakReference<Activity> ref = activityList.get(x);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/apatch/MergePatch.java
Patch:
@@ -344,7 +344,6 @@ private void fillManifest(Attributes main) throws IOException {
             main.putValue(name + "-Modified-Classes", attributes.getValue(name + "-Modified-Classes"));
             main.putValue(name + "-Used-Classes", attributes.getValue(name + "-Used-Classes"));
             main.putValue(name + "-add-classes", attributes.getValue(name + "-add-classes"));
-            main.putValue(name + "-Prepare-Classes", attributes.getValue(name + "-Prepare-Classes"));
 
 
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/classinject/FrameworkProperties.java
Patch:
@@ -11,6 +11,8 @@
 public class FrameworkProperties {
     public List<BasicBundleInfo> bundleInfo;
 
+    public String unit_tag;
+
     public boolean outApp = false;
 
     public String autoStartBundles;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/DexPatchDexTask.java
Patch:
@@ -36,7 +36,7 @@ public void run(){
     } catch (IOException e) {
         e.printStackTrace();
     }finally {
-        DexPatchContext.dexBuilder.clear();
+//        DexPatchContext.dexBuilder.clear();
     }
 
 }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/DexPatchDiffTask.java
Patch:
@@ -38,7 +38,7 @@ public void run() {
 
         ExecutorServicesHelper executorServicesHelper = new ExecutorServicesHelper();
 
-        for (Map.Entry entry : DexBuilder.getInstance().getOutputs().entrySet()) {
+        for (Map.Entry entry : DexPatchContext.dexBuilder.getOutputs().entrySet()) {
             executorServicesHelper.submitTask("dexDiff", new Callable<Boolean>() {
                 @Override
                 public Boolean call() throws Exception {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/DexPatchPackageTask.java
Patch:
@@ -74,7 +74,7 @@ public void run() throws IOException {
         List<PatchBundleInfo> list = new ArrayList<>();
         boolean add = false;
         for (ArtifactBundleInfo artifactBundleInfo : appVariantOutputContext.artifactBundleInfos) {
-            for (String key : DexBuilder.getInstance().getOutputs().keySet()) {
+            for (String key : DexPatchContext.dexBuilder.getOutputs().keySet()) {
                 if (artifactBundleInfo.getPkgName().equals(key)) {
                     PatchBundleInfo dexPatchBundelInfo = new PatchBundleInfo();
                     dexPatchBundelInfo.setPkgName(artifactBundleInfo.getPkgName());

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/dexpatch/PrepareBaseFileTask.java
Patch:
@@ -67,7 +67,7 @@ public void run() throws Exception {
                         File jarFile = androidLibrary.getJarFile();
 
                         if (DexPatchContext.modifyArtifact.containsKey(androidLibrary.getResolvedCoordinates().getArtifactId())) {
-                            FileUtils.copyFileToDirectory(jarFile, DexPatchContext.getInstance().getBundleArtifactFolder(DexPatchContext.modifyArtifact.get(androidLibrary.getResolvedCoordinates().getArtifactId()).bundleName, androidLibrary.getRequestedCoordinates().getArtifactId(), DexPatchContext.modifyArtifact.get(androidLibrary.getResolvedCoordinates().getArtifactId()).isMaindex));
+                            FileUtils.copyFileToDirectory(jarFile, DexPatchContext.getInstance().getBundleArtifactFolder(DexPatchContext.modifyArtifact.get(androidLibrary.getResolvedCoordinates().getArtifactId()).bundleName, androidLibrary.getResolvedCoordinates().getArtifactId(), DexPatchContext.modifyArtifact.get(androidLibrary.getResolvedCoordinates().getArtifactId()).isMaindex));
                         }
                     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/apatch/MergePatch.java
Patch:
@@ -339,6 +339,8 @@ private void fillManifest(Attributes main) throws IOException {
             // classes = attributes.getValue(name + "-Patch-Classes");
             main.putValue(name + "-Patch-Classes", attributes.getValue(name + "-Patch-Classes"));
             main.putValue(name + "-add-classes", attributes.getValue(name + "-add-classes"));
+            main.putValue(name + "-Prepare-Classes", attributes.getValue(name + "-Prepare-Classes"));
+
 
         }
         main.putValue("From-File", fromBuffer.toString());

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -398,7 +398,7 @@ public void patchKernalDex(Application application) throws Exception {
             if(!needReplaceClassLoader) {
                 FrameworkPropertiesClazz = archive.getOdexFile()[newFrameworkPropertiesDexIndex].loadClass("android.taobao.atlas.framework.FrameworkProperties", application.getClassLoader());
             }else{
-                replaceClassLoader = new NClassLoader(".",KernalBundle.class.getClassLoader());
+                replaceClassLoader = new NClassLoader(".",KernalBundle.class.getClassLoader().getParent());
                 FrameworkPropertiesClazz = archive.getOdexFile()[newFrameworkPropertiesDexIndex].loadClass("android.taobao.atlas.framework.FrameworkProperties", replaceClassLoader);
             }
             if(FrameworkPropertiesClazz==null && isDeubgMode()){

File: atlas-core/src/main/java/android/taobao/atlas/runtime/newcomponent/service/BaseDelegateService.java
Patch:
@@ -183,6 +183,7 @@ private AdditionalServiceRecord handleCreateService(ComponentName componentName)
                 }else{
                     gDefault=AtlasHacks.ActivityManagerNative_gDefault.get(AtlasHacks.ActivityManagerNative.getmClass());
                 }
+                gDefault = AtlasHacks.Singleton_mInstance.get(gDefault);
                 AtlasHacks.ContextImpl_setOuterContext.invoke(contextImpl,service);
                 ContextImplHook hook = new ContextImplHook((Context) contextImpl,serviceClazz.getClassLoader());
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/APatchTool.java
Patch:
@@ -240,7 +240,7 @@ public class APatchTool extends BasePatchTool {
     public static boolean isApatch = false;
     private String andfixMainBundleName = "com_taobao_maindex";
 
-    public static String replaceAnnotation = "Lcom/taobao/sophix/core/dex/hot/MethodReplace;";
+    public static String replaceAnnotation = "Lcom/alipay/euler/andfix/annotation/MethodReplace;";
     private String[] notIncludeFiles;
     private final PathMatcher pathMatcher = new PathMatcher();
     private String filterPath;                                 // 类白名单路径

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/baksmali/adaptors/EncodedValue/AnnotationEncodedValueAdaptor.java
Patch:
@@ -45,9 +45,8 @@ public static void writeTo(@Nonnull IndentingWriter writer,
         writer.write(".subannotation ");
         writer.write(annotationEncodedValue.getType());
         writer.write('\n');
-        if (annotationEncodedValue.getElements()!= null && annotationEncodedValue.getElements().size() > 0) {
-            writeElementsTo(writer, annotationEncodedValue.getElements(), containingClass);
-        }
+
+        writeElementsTo(writer, annotationEncodedValue.getElements(), containingClass);
         writer.write(".end subannotation");
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/APatchTool.java
Patch:
@@ -240,7 +240,7 @@ public class APatchTool extends BasePatchTool {
     public static boolean isApatch = false;
     private String andfixMainBundleName = "com_taobao_maindex";
 
-    public static String replaceAnnotation = "Lcom/alipay/euler/andfix/annotation/MethodReplace;";
+    public static String replaceAnnotation = "Lcom/taobao/sophix/core/dex/hot/MethodReplace;";
     private String[] notIncludeFiles;
     private final PathMatcher pathMatcher = new PathMatcher();
     private String filterPath;                                 // 类白名单路径

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/baksmali/adaptors/EncodedValue/AnnotationEncodedValueAdaptor.java
Patch:
@@ -45,8 +45,9 @@ public static void writeTo(@Nonnull IndentingWriter writer,
         writer.write(".subannotation ");
         writer.write(annotationEncodedValue.getType());
         writer.write('\n');
-
-        writeElementsTo(writer, annotationEncodedValue.getElements(), containingClass);
+        if (annotationEncodedValue.getElements()!= null && annotationEncodedValue.getElements().size() > 0) {
+            writeElementsTo(writer, annotationEncodedValue.getElements(), containingClass);
+        }
         writer.write(".end subannotation");
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -417,7 +417,7 @@ private PatchInfo processBundlePatch(PatchInfo hisPatchInfo, List<BundlePatch> b
                             if (patchBundleInfo.getUnitTag().equals(patchBundleInfo.getSrcUnitTag())) {
                                 addToPatch = false;
                             }else {
-                                throw new PatchException(patchName+"patch中:"+patchBundleInfo.getPkgName()+"的srcunittag和unittag不一致,"+patchBundleInfo.getUnitTag()+","+patchBundleInfo.getSrcUnitTag()+"但是无任何变更,无法动态部署，请重新集成!")
+                                throw new PatchException(patchName+"patch中:"+patchBundleInfo.getPkgName()+"的srcunittag和unittag不一致,"+patchBundleInfo.getUnitTag()+","+patchBundleInfo.getSrcUnitTag()+"但是无任何变更,无法动态部署，请重新集成!");
                             }
                         }
                     }

File: atlas-core/src/main/java/android/taobao/atlas/framework/bundlestorage/BundleArchiveRevision.java
Patch:
@@ -401,7 +401,7 @@ public File getRevisionFile() {
 
     public File mappingInternalDirectory(){
         if(externalStorage){
-            File internalLibDir = new File(RuntimeVariables.androidApplication.getFilesDir(),String.format("storage/%s/%s",location,revisionDir.getName()));
+            File internalLibDir = new File(RuntimeVariables.androidApplication.getFilesDir(),String.format("storage/%s/%s",location+"_internal",revisionDir.getName()));
             int retryCount = 2;
             do{
                 if(!internalLibDir.exists()){

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundleArchive.java
Patch:
@@ -421,7 +421,7 @@ public static void copyInputStreamToFile(InputStream input, File file) throws IO
 
     private File mappingInternalDirectory(){
         if(!revisionDir.getAbsolutePath().startsWith(KernalConstants.baseContext.getFilesDir().getAbsolutePath())){
-            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/com.taobao.maindex/%s",revisionDir.getName()));
+            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/com.taobao.maindex_internal/%s",revisionDir.getName()));
             return internalLibDir;
         }else{
             return revisionDir;

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/releaser/NativeLibReleaser.java
Patch:
@@ -287,7 +287,7 @@ public static boolean releaseLibs(File apkFile, File reversionDir) throws IOExce
 
     private static File mappingInternalDirectory(File revisionDir){
         if(!revisionDir.getAbsolutePath().startsWith(KernalConstants.baseContext.getFilesDir().getAbsolutePath())){
-            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/com.taobao.maindex/%s",revisionDir.getName()));
+            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/com.taobao.maindex_internal/%s",revisionDir.getName()));
             int retryCount = 2;
             do{
                 if(!internalLibDir.exists()){

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -828,7 +828,7 @@ private static File getInstalledBundleInternal(String bundleName,String bundleUn
     }
 
     private static File createBundleStorage(String bundleName){
-        if(new File(STORAGE_LOCATION).getUsableSpace()>15*1024*1024){
+        if(new File(STORAGE_LOCATION).getUsableSpace()>10*1024*1024){
             return new File(STORAGE_LOCATION,bundleName);
         }else{
             File externalStorageDir = null;

File: atlas-core/src/main/java/android/taobao/atlas/hack/AndroidHack.java
Patch:
@@ -490,9 +490,6 @@ public static void injectResources(Application application, Resources resources)
                         final Object wrapper = wrappRef != null ? wrappRef.get() : null;
                         Field mTintResourcesField = TintContextWrapper.getDeclaredField("mResources");
                         mTintResourcesField.setAccessible(true);
-                        Field mTintThemeField = TintContextWrapper.getDeclaredField("mTheme");
-                        mTintThemeField.setAccessible(true);
-                        mTintThemeField.set(wrapper,null);
                         Object obj = mTintResourcesField.get(wrapper);
                         Field mResourceField = findField(obj,"mResources");
                         mResourceField.set(obj,resources);

File: atlas-core/src/main/java/android/taobao/atlas/startup/DexFileCompat.java
Patch:
@@ -1,4 +1,4 @@
-package android.taobao.atlas.util;
+package android.taobao.atlas.startup;
 
 import android.content.Context;
 import android.os.Build;

File: atlas-core/src/main/java/android/taobao/atlas/startup/NClassLoader.java
Patch:
@@ -229,9 +229,8 @@ public NClassLoader(String dexPath, ClassLoader parent) {
         super(dexPath, parent);
     }
 
-    public static void replacePathClassLoader(Context base,ClassLoader original) throws Exception {
-        NClassLoader loader = new NClassLoader(".",original.getParent());
-
+    public static void replacePathClassLoader(Context base,ClassLoader original,NClassLoader target) throws Exception {
+        NClassLoader loader = target;
         Field pathListField = findField(original, "pathList");
         pathListField.setAccessible(true);
         Object originPathListObject = pathListField.get(original);

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundleArchive.java
Patch:
@@ -212,8 +212,6 @@
 import android.os.Looper;
 import android.taobao.atlas.startup.patch.releaser.BundleReleaser;
 import android.text.TextUtils;
-import android.util.Log;
-
 import dalvik.system.DexFile;
 import java.io.*;
 import java.nio.ByteBuffer;

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -828,7 +828,7 @@ private static File getInstalledBundleInternal(String bundleName,String bundleUn
     }
 
     private static File createBundleStorage(String bundleName){
-        if(new File(STORAGE_LOCATION).getUsableSpace()>5*1024*1024){
+        if(new File(STORAGE_LOCATION).getUsableSpace()>15*1024*1024){
             return new File(STORAGE_LOCATION,bundleName);
         }else{
             File externalStorageDir = null;

File: atlas-core/src/main/java/android/taobao/atlas/framework/bundlestorage/BundleArchiveRevision.java
Patch:
@@ -401,7 +401,7 @@ public File getRevisionFile() {
 
     private File mappingInternalDirectory(){
         if(externalStorage){
-            File internalLibDir = new File(RuntimeVariables.androidApplication.getFilesDir(),String.format("storage/%s",revisionDir.getName()));
+            File internalLibDir = new File(RuntimeVariables.androidApplication.getFilesDir(),String.format("storage/%s/%s",location,revisionDir.getName()));
             int retryCount = 2;
             do{
                 if(!internalLibDir.exists()){

File: atlas-core/src/main/java/android/taobao/atlas/hack/AtlasHacks.java
Patch:
@@ -345,14 +345,13 @@ public static boolean defineAndVerify() throws AssertionArrayException {
             if (atlasHacks.mExceptionArray != null) {
                 // 校验存在失败
                 sIsReflectAvailable = false;
-                throw atlasHacks.mExceptionArray;
             } else {
                 // 校验成功
                 sIsReflectAvailable = true;
             }
         } catch (HackAssertionException e) {
             sIsReflectAvailable = false;
-            e.printStackTrace();
+            throw atlasHacks.mExceptionArray;
         } finally {
             Hack.setAssertionFailureHandler(null);
             sIsReflectChecked = true;

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundleArchive.java
Patch:
@@ -423,7 +423,7 @@ public static void copyInputStreamToFile(InputStream input, File file) throws IO
 
     private File mappingInternalDirectory(){
         if(!revisionDir.getAbsolutePath().startsWith(KernalConstants.baseContext.getFilesDir().getAbsolutePath())){
-            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/%s",revisionDir.getName()));
+            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/com.taobao.maindex/%s",revisionDir.getName()));
             return internalLibDir;
         }else{
             return revisionDir;

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/releaser/NativeLibReleaser.java
Patch:
@@ -287,7 +287,7 @@ public static boolean releaseLibs(File apkFile, File reversionDir) throws IOExce
 
     private static File mappingInternalDirectory(File revisionDir){
         if(!revisionDir.getAbsolutePath().startsWith(KernalConstants.baseContext.getFilesDir().getAbsolutePath())){
-            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/%s",revisionDir.getName()));
+            File internalLibDir = new File(KernalConstants.baseContext.getFilesDir(),String.format("storage/com.taobao.maindex/%s",revisionDir.getName()));
             int retryCount = 2;
             do{
                 if(!internalLibDir.exists()){

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -217,7 +217,6 @@
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.lang.reflect.Method;
 import java.util.List;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
@@ -309,7 +308,7 @@ public static boolean checkLoadKernalDebugPatch(Application application){
                     DexFile dexFile = (DexFile)KernalConstants.dexBooster.loadDex(KernalConstants.baseContext,patchFile.getAbsolutePath(),
                             new File(patchFile.getParent(),"patch.dex").getAbsolutePath(),0,true) ;
                     bundle.installKernalBundle(KernalConstants.baseContext.getClassLoader(), patchFile, new DexFile[]{dexFile}, null,
-                                               (app_info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0);
+                                               true /*(app_info.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0*/);
                     bundle.replacePathClassLoaderIfNeed(application);
                     Class DelegateResourcesClazz = application.getClassLoader().loadClass("android.taobao.atlas.runtime.DelegateResources");
                     DelegateResourcesClazz.getDeclaredMethod("addApkpatchResources", String.class)

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/TPatchTool.java
Patch:
@@ -533,7 +533,7 @@ public Boolean call() throws Exception {
     private boolean isBundleFile(File file) {
     if (whiteList.size() > 1){
         for (String bundleName:whiteList){
-            if (file.getAbsolutePath().endsWith(bundleName)){
+            if (file.getAbsolutePath().replace("\\","/").endsWith(bundleName)){
                 return true;
             }
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/BundleGraphExecutor.java
Patch:
@@ -323,6 +323,9 @@ private static Map<String, BundleItem> getBundleItemMap(Map<String, BundleInfo>
                     if (null == child) {
                         child = new BundleItem();
                         child.bundleInfo = bundleInfoMap.get(dependency);
+                        if (null == child.bundleInfo){
+                            throw new GradleException("bundle dependency is error , not bundle found for " + dependency + " ; which may define in " + bundleInfo.getPkgName());
+                        }
                         bundleItemMap.put(dependency, child);
                     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/Version.java
Patch:
@@ -21,5 +21,5 @@
  */
 public class Version {
     /** {@code non-null;} version string */
-    public static final String VERSION = "1.10";
+    public static final String VERSION = "1.12";
 }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/cf/code/LocalVariableList.java
Patch:
@@ -149,7 +149,7 @@ public void set(int n, int startPc, int length, CstString name,
 
     /**
      * Gets the local variable information in this instance which matches
-     * the given {@link Item}
+     * the given {@link com.taobao.android.dx.cf.code.LocalVariableList.Item}
      * in all respects but the type descriptor and signature, if any.
      *
      * @param item {@code non-null;} local variable information to match

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/cf/code/LocalsArraySet.java
Patch:
@@ -29,8 +29,8 @@
  * have different locals sets for each caller.
  *
  * <p><b>Note:</b> For the most part, the documentation for this class
- * ignores the distinction between {@link Type} and {@link
- * TypeBearer}.</p>
+ * ignores the distinction between {@link com.taobao.android.dx.rop.type.Type} and {@link
+ * com.taobao.android.dx.rop.type.TypeBearer}.</p>
  */
 public class LocalsArraySet extends LocalsArray {
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/cf/code/OneLocalsArray.java
Patch:
@@ -26,8 +26,8 @@
  * Representation of an array of local variables, with Java semantics.
  *
  * <p><b>Note:</b> For the most part, the documentation for this class
- * ignores the distinction between {@link Type} and {@link
- * TypeBearer}.</p>
+ * ignores the distinction between {@link com.taobao.android.dx.rop.type.Type} and {@link
+ * com.taobao.android.dx.rop.type.TypeBearer}.</p>
  */
 public class OneLocalsArray extends LocalsArray {
     /** {@code non-null;} actual array */

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/command/dump/BlockDumper.java
Patch:
@@ -292,7 +292,7 @@ private void ropDump(ConcreteMethod meth) {
             boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());
             int paramWidth = computeParamWidth(meth, isStatic);
             rmeth =
-                new Optimizer().optimize(rmeth, paramWidth, isStatic, true, advice);
+                Optimizer.optimize(rmeth, paramWidth, isStatic, true, advice);
         }
 
         BasicBlockList blocks = rmeth.getBlocks();

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/command/dump/DotDumper.java
Patch:
@@ -119,7 +119,7 @@ public void endParsingMember(ByteArray bytes, int offset, String name,
 
         if (optimize) {
             boolean isStatic = AccessFlags.isStatic(meth.getAccessFlags());
-            rmeth = new Optimizer().optimize(rmeth,
+            rmeth = Optimizer.optimize(rmeth,
                     BaseDumper.computeParamWidth(meth, isStatic), isStatic,
                     true, advice);
         }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/cf/CfOptions.java
Patch:
@@ -46,7 +46,4 @@ public class CfOptions {
 
     /** where to issue warnings to */
     public PrintStream warn = System.err;
-
-    /** where to collect statistics */
-    public CodeStatistics codeStatistics;
 }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/code/form/Form12x.java
Patch:
@@ -126,9 +126,9 @@ public BitSet compatibleRegs(DalvInsn insn) {
                 bits.set(0, false);
                 bits.set(1, false);
             } else {
-                boolean compat = unsignedFitsInNibble(r1);
-                bits.set(0, compat);
-                bits.set(1, compat);
+                boolean dstRegComp = unsignedFitsInNibble(r1);
+                bits.set(0, dstRegComp);
+                bits.set(1, dstRegComp);
             }
 
             bits.set(2, unsignedFitsInNibble(regs.get(2).getReg()));

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/ClassDefsSection.java
Patch:
@@ -22,7 +22,6 @@
 import com.taobao.android.dx.rop.type.TypeList;
 import com.taobao.android.dx.util.AnnotatedOutput;
 import com.taobao.android.dx.util.Hex;
-
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.TreeMap;
@@ -116,7 +115,9 @@ public void add(ClassDefItem clazz) {
             // Elucidate the exception.
             throw new NullPointerException("clazz == null");
         }
-
+        if (classDefs.get(type)!= null){
+            return;
+        }
         throwIfPrepared();
 
         if (classDefs.get(type) != null) {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/CodeItem.java
Patch:
@@ -108,7 +108,7 @@ public void addContents(DexFile file) {
         MixedItemSection byteData = file.getByteData();
         TypeIdsSection typeIds = file.getTypeIds();
 
-        //一种简单去除debuginfo的方法
+        //去除debuginfo
 //        if (code.hasPositions() || code.hasLocals()) {
 //            debugInfo = new DebugInfoItem(code, isStatic, ref);
 //            byteData.add(debugInfo);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/MemberIdsSection.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.taobao.android.dex.DexFormat;
 import com.taobao.android.dex.DexIndexOverflowException;
+import com.taobao.android.dx.command.dexer.Main;
 
 import java.util.Formatter;
 import java.util.Map;
@@ -70,7 +71,8 @@ private String getTooManyMembersMessage() {
         Formatter formatter = new Formatter();
         try {
             String memberType = this instanceof MethodIdsSection ? "method" : "field";
-            formatter.format("Too many %s references: %d; max is %d.%n%n" +
+            formatter.format("Too many %s references: %d; max is %d.%n" +
+                    new Main().getTooManyIdsErrorMessage() + "%n" +
                     "References by package:",
                     memberType, items().size(), DexFormat.MAX_MEMBER_IDX + 1);
             for (Map.Entry<String, AtomicInteger> entry : membersByPackage.entrySet()) {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/MixedItemSection.java
Patch:
@@ -189,7 +189,7 @@ public void add(OffsettedItem item) {
      * @param item {@code non-null;} the item to intern
      * @return {@code non-null;} the equivalent interned instance
      */
-    public <T extends OffsettedItem> T intern(T item) {
+    public synchronized <T extends OffsettedItem> T intern(T item) {
         throwIfPrepared();
 
         OffsettedItem result = interns.get(item);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/ProtoIdsSection.java
Patch:
@@ -86,7 +86,7 @@ public void writeHeaderPart(AnnotatedOutput out) {
      * @param prototype {@code non-null;} the prototype to intern
      * @return {@code non-null;} the interned reference
      */
-    public ProtoIdItem intern(Prototype prototype) {
+    public synchronized ProtoIdItem intern(Prototype prototype) {
         if (prototype == null) {
             throw new NullPointerException("prototype == null");
         }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/Section.java
Patch:
@@ -211,6 +211,7 @@ public final int getAbsoluteOffset(int relative) {
     public final void prepare() {
         throwIfPrepared();
         prepare0();
+        System.out.println("prepare type:"+name +"in "+file);
         prepared = true;
     }
 
@@ -250,7 +251,7 @@ protected final void throwIfNotPrepared() {
      */
     protected final void throwIfPrepared() {
         if (prepared) {
-            throw new RuntimeException("already prepared");
+            throw new RuntimeException("already prepared "+name +"in "+file);
         }
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/dex/file/StringIdsSection.java
Patch:
@@ -21,7 +21,6 @@
 import com.taobao.android.dx.rop.cst.CstString;
 import com.taobao.android.dx.util.AnnotatedOutput;
 import com.taobao.android.dx.util.Hex;
-
 import java.util.Collection;
 import java.util.TreeMap;
 
@@ -118,7 +117,7 @@ public StringIdItem intern(CstString string) {
      * @param string {@code non-null;} the string to intern
      * @return {@code non-null;} the interned string
      */
-    public StringIdItem intern(StringIdItem string) {
+    public synchronized StringIdItem intern(StringIdItem string) {
         if (string == null) {
             throw new NullPointerException("string == null");
         }
@@ -141,7 +140,7 @@ public StringIdItem intern(StringIdItem string) {
      *
      * @param nat {@code non-null;} the name-and-type
      */
-    public void intern(CstNat nat) {
+    public synchronized void intern(CstNat nat) {
         intern(nat.getName());
         intern(nat.getDescriptor());
     }

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/merge/IndexMap.java
Patch:
@@ -220,7 +220,8 @@ public ClassDef adjust(ClassDef classDef) {
     }
 
     public SortableType adjust(SortableType sortableType) {
-        return new SortableType(sortableType.getDex(), adjust(sortableType.getClassDef()));
+        return new SortableType(sortableType.getDex(),
+                sortableType.getIndexMap(), adjust(sortableType.getClassDef()));
     }
 
     public EncodedValue adjustEncodedValue(EncodedValue encodedValue) {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/ssa/LocalVariableInfo.java
Patch:
@@ -24,15 +24,15 @@
 
 /**
  * Container for local variable information for a particular {@link
- * SsaMethod}.
+ * com.taobao.android.dx.ssa.SsaMethod}.
  * Stolen from {@link com.taobao.android.dx.rop.code.LocalVariableInfo}.
  */
 public class LocalVariableInfo         extends MutabilityControl {
     /** {@code >= 0;} the register count for the method */
     private final int regCount;
 
     /**
-     * {@code non-null;} {@link RegisterSpecSet} to use when indicating a block
+     * {@code non-null;} {@link com.taobao.android.dx.rop.code.RegisterSpecSet} to use when indicating a block
      * that has no locals; it is empty and immutable but has an appropriate
      * max size for the method
      */

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/ssa/NormalSsaInsn.java
Patch:
@@ -217,18 +217,17 @@ public  boolean isPhiOrMove() {
      * {@inheritDoc}
      *
      * TODO: Increase the scope of this.
-     * @param optimizer
      */
     @Override
-    public boolean hasSideEffect(Optimizer optimizer) {
+    public boolean hasSideEffect() {
         Rop opcode = getOpcode();
 
         if (opcode.getBranchingness() != Rop.BRANCH_NONE) {
             return true;
         }
 
         boolean hasLocalSideEffect
-            = optimizer.getPreserveLocals() && getLocalAssignment() != null;
+            = Optimizer.getPreserveLocals() && getLocalAssignment() != null;
 
         switch (opcode.getOpcode()) {
             case RegOps.MOVE_RESULT:

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/dx/ssa/SsaBasicBlock.java
Patch:
@@ -541,7 +541,7 @@ public void removeSuccessor(int oldIndex) {
     /**
      * Attaches block to an exit block if necessary. If this block
      * is not an exit predecessor or is the exit block, this block does
-     * nothing. For use by {@link SsaMethod#makeExitBlock}
+     * nothing. For use by {@link com.taobao.android.dx.ssa.SsaMethod#makeExitBlock}
      *
      * @param exitBlock {@code non-null;} exit block
      */

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/PrepareAPTask.java
Patch:
@@ -217,6 +217,7 @@
 import java.io.IOException;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import java.util.concurrent.TimeUnit;
 
 import com.android.build.gradle.internal.api.ApContext;
 import com.android.build.gradle.internal.api.VariantContext;
@@ -326,6 +327,8 @@ void generate() throws IOException, DocumentException {
                 Dependency dependency = project.getDependencies().create(apDependency);
                 Configuration configuration = project.getConfigurations().detachedConfiguration(dependency);
                 configuration.setTransitive(false);
+                configuration.getResolutionStrategy().cacheChangingModulesFor(0, TimeUnit.MILLISECONDS);
+                configuration.getResolutionStrategy().cacheDynamicVersionsFor(0, TimeUnit.MILLISECONDS);
                 for (File file : configuration.getFiles()) {
                     if (file.getName().endsWith(".ap")) {
                         apBaseFile = file;

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/releaser/BundleReleaser.java
Patch:
@@ -266,7 +266,8 @@ public BundleReleaser(final File reversionDir,boolean hasReleased) {
             externalStorage = true;
         }
         if (!(Looper.getMainLooper() == Looper.myLooper())) {
-            Looper.prepare();
+            if (Looper.myLooper() != null)
+                Looper.prepare();
         }
         handler = new Handler(new Handler.Callback() {
             @Override

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -554,9 +554,6 @@ private void hookFastMultiDex(AppVariantContext appVariantContext) throws Except
                 DefaultDexOptions dexOptions = (DefaultDexOptions)ReflectUtils.getField(transformTask.getTransform(),
                                                                                         "dexOptions");
                 dexOptions.setPreDexLibraries(false);
-                if (appVariantContext.getBuildType().getDexConfig()!= null && appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
-                    dexOptions.getAdditionalParameters().add("--useMyDex");
-                }
 
                 VariantScope variantScope = appVariantContext.getScope();
                 GradleVariantConfiguration config = appVariantContext.getVariantData().getVariantConfiguration();
@@ -603,6 +600,9 @@ private void hookFastDex(AppVariantContext appVariantContext) throws Exception {
                 DefaultDexOptions dexOptions = (DefaultDexOptions)ReflectUtils.getField(transformTask.getTransform(),
                                                                                         "dexOptions");
                 dexOptions.setPreDexLibraries(false);
+                if (appVariantContext.getBuildType().getDexConfig()!= null && appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
+                    dexOptions.getAdditionalParameters().add("--useMyDex");
+                }
             }
         }
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -554,6 +554,9 @@ private void hookFastMultiDex(AppVariantContext appVariantContext) throws Except
                 DefaultDexOptions dexOptions = (DefaultDexOptions)ReflectUtils.getField(transformTask.getTransform(),
                                                                                         "dexOptions");
                 dexOptions.setPreDexLibraries(false);
+                if (appVariantContext.getBuildType().getDexConfig()!= null && appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
+                    dexOptions.getAdditionalParameters().add("--useMyDex");
+                }
 
                 VariantScope variantScope = appVariantContext.getScope();
                 GradleVariantConfiguration config = appVariantContext.getVariantData().getVariantConfiguration();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/LogDependenciesTask.java
Patch:
@@ -249,7 +249,6 @@ public class LogDependenciesTask extends BaseTask {
     @TaskAction
     void generate() {
 
-        AtlasBuildContext.appVariantContext = appVariantContext;
         AtlasDependencyTree atlasDependencyTree = AtlasBuildContext.androidDependencyTrees.get(
             getVariantName());
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/prepare/PrepareAllDependenciesTask.java
Patch:
@@ -286,7 +286,7 @@ public List<File> getOutputDirs(){
 
     @TaskAction
     void run() throws ExecutionException, InterruptedException, IOException, DocumentException {
-        AtlasBuildContext.appVariantContext = appVariantContext;
+
         ExecutorServicesHelper executorServicesHelper = new ExecutorServicesHelper(taskName,
                                                                                    getLogger(),
                                                                                    0);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/AtlasProguardHelper.java
Patch:
@@ -248,7 +248,7 @@
 import com.taobao.android.builder.tools.bundleinfo.model.BundleInfo;
 import com.taobao.android.builder.tools.proguard.domain.Input;
 import com.taobao.android.builder.tools.proguard.domain.ClazzRefInfo;
-import com.taobao.android.builder.tools.proguard.domain.RefClazzContainer;
+import com.taobao.android.builder.tools.proguard.domain.ClazzRefInfoContainer;
 import org.apache.commons.io.FileUtils;
 import org.gradle.api.GradleException;
 import org.jetbrains.annotations.NotNull;
@@ -464,7 +464,7 @@ public static File generateBundleKeepCfg(AppVariantContext appVariantContext) th
     @NotNull
     private static File generateKeepFile(List<AwbBundle> awbBundles, File dir) throws IOException {
 
-        RefClazzContainer refClazzContainer = new RefClazzContainer();
+        ClazzRefInfoContainer refClazzContainer = new ClazzRefInfoContainer();
         for (AwbBundle awbBundle : awbBundles) {
             if (null != awbBundle.getKeepProguardFile() && awbBundle.getKeepProguardFile().exists()) {
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/domain/ClazzRefInfo.java
Patch:
@@ -226,6 +226,7 @@ public class ClazzRefInfo {
      */
     private boolean needExtend;
 
+    //for json serizable
     public ClazzRefInfo() {
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/domain/ClazzRefInfoContainer.java
Patch:
@@ -219,16 +219,16 @@
 /**
  * Created by wuzhong on 2017/5/14.
  */
-public class RefClazzContainer {
+public class ClazzRefInfoContainer {
 
     private Map<String, ClazzRefInfo> refClazzMap = new HashMap<>();
 
-    public RefClazzContainer(
+    public ClazzRefInfoContainer(
         Map<String, ClazzRefInfo> refClazzMap) {
         this.refClazzMap = refClazzMap;
     }
 
-    public RefClazzContainer() {
+    public ClazzRefInfoContainer() {
     }
 
     public void addRefClazz(Map<String, ClazzRefInfo> other) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/BundleGraphExecutor.java
Patch:
@@ -267,7 +267,7 @@ public void accept(BundleInfo bundleInfo) {
 
                 if (bundleItem.canResolve()) {
 
-                    logger.info("resolve bundle  >>>> " + index++ + bundleItem.bundleInfo.getPkgName());
+                    index++;
                     //bundleItem.resolve();
                     keys.add(key);
 

File: atlas-gradle-plugin/atlas-plugin/src/test/java/proguard/ProguardTest.java
Patch:
@@ -252,9 +252,10 @@ public void test() throws Exception {
 
         ClassPool classPool = (ClassPool)ReflectUtils.getField(proGuard, "programClassPool");
 
-        //classPool.classesAccept(new MyClassPrinter());
+        classPool.classesAccept(new MyClassPrinter());
 
-        LibClassRefVisitor classRefPrinter = new LibClassRefVisitor(Sets.newHashSet());
+        LibClassRefVisitor classRefPrinter = new LibClassRefVisitor(
+            Sets.newHashSet("java/lang/Object", "java/lang/System", "java/io/PrintStream"), classPool);
         classPool.classesAccept(classRefPrinter);
 
         System.out.println(JSON.toJSONString(classRefPrinter.getRefClazzMap(), true));

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dto/Input.java
Patch:
@@ -238,7 +238,7 @@ public class Input {
 
     private List<File> parentKeeps = new ArrayList<>();
 
-    private Set<String> mainDexClazzList = new HashSet<>();
+    private Set<String> defaultLibraryClasses = new HashSet<>();
 
     private Map<File, String> fileMd5s = new HashMap<>();
 
@@ -270,8 +270,8 @@ public Set<File> getLibraries() {
         return libraries;
     }
 
-    public Set<String> getMainDexClazzList() {
-        return mainDexClazzList;
+    public Set<String> getDefaultLibraryClasses() {
+        return defaultLibraryClasses;
     }
 
     public Map<File, String> getFileMd5s() {

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/releaser/BundleReleaser.java
Patch:
@@ -266,7 +266,8 @@ public BundleReleaser(final File reversionDir,boolean hasReleased) {
             externalStorage = true;
         }
         if (!(Looper.getMainLooper() == Looper.myLooper())) {
-            Looper.prepare();
+            if (Looper.myLooper() != null)
+                Looper.prepare();
         }
         handler = new Handler(new Handler.Callback() {
             @Override

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -554,6 +554,9 @@ private void hookFastMultiDex(AppVariantContext appVariantContext) throws Except
                 DefaultDexOptions dexOptions = (DefaultDexOptions)ReflectUtils.getField(transformTask.getTransform(),
                                                                                         "dexOptions");
                 dexOptions.setPreDexLibraries(false);
+                if (appVariantContext.getBuildType().getDexConfig()!= null && appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
+                    dexOptions.getAdditionalParameters().add("--useMyDex");
+                }
 
                 VariantScope variantScope = appVariantContext.getScope();
                 GradleVariantConfiguration config = appVariantContext.getVariantData().getVariantConfiguration();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/LogDependenciesTask.java
Patch:
@@ -249,7 +249,6 @@ public class LogDependenciesTask extends BaseTask {
     @TaskAction
     void generate() {
 
-        AtlasBuildContext.appVariantContext = appVariantContext;
         AtlasDependencyTree atlasDependencyTree = AtlasBuildContext.androidDependencyTrees.get(
             getVariantName());
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -1290,7 +1290,7 @@ public void mergeManifestsForBunlde(File outputFile, String packageName, String
     @NonNull
     public DexByteCodeConverter getDexByteCodeConverter() {
 
-        if (AtlasBuildContext.appVariantContext.getBuildType().getDexConfig()==null||!AtlasBuildContext.appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
+        if (AtlasBuildContext.appVariantContext == null||AtlasBuildContext.appVariantContext.getBuildType().getDexConfig()==null||!AtlasBuildContext.appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
             return super.getDexByteCodeConverter();
         }
         if (dexByteCodeConverter == null){

File: atlas-demo/AtlasDemo/activitygroupcompat/src/main/java/com/taobao/android/ActivityGroupDelegate.java
Patch:
@@ -205,7 +205,7 @@ public void execStartChildActivityInternal(ViewGroup container,String key, Inten
                     performLaunchChildActivity(container,key,intent);
                 }
             } catch (ClassNotFoundException e) {
-                Log.e("ActivityGroupDelegate",e.getCause().toString());
+                Log.e("ActivityGroupDelegate","",e);
             }
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/AtlasProguardHelper.java
Patch:
@@ -248,7 +248,7 @@
 import com.taobao.android.builder.tools.bundleinfo.model.BundleInfo;
 import com.taobao.android.builder.tools.proguard.domain.Input;
 import com.taobao.android.builder.tools.proguard.domain.ClazzRefInfo;
-import com.taobao.android.builder.tools.proguard.domain.RefClazzContainer;
+import com.taobao.android.builder.tools.proguard.domain.ClazzRefInfoContainer;
 import org.apache.commons.io.FileUtils;
 import org.gradle.api.GradleException;
 import org.jetbrains.annotations.NotNull;
@@ -464,7 +464,7 @@ public static File generateBundleKeepCfg(AppVariantContext appVariantContext) th
     @NotNull
     private static File generateKeepFile(List<AwbBundle> awbBundles, File dir) throws IOException {
 
-        RefClazzContainer refClazzContainer = new RefClazzContainer();
+        ClazzRefInfoContainer refClazzContainer = new ClazzRefInfoContainer();
         for (AwbBundle awbBundle : awbBundles) {
             if (null != awbBundle.getKeepProguardFile() && awbBundle.getKeepProguardFile().exists()) {
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/domain/ClazzRefInfo.java
Patch:
@@ -226,6 +226,7 @@ public class ClazzRefInfo {
      */
     private boolean needExtend;
 
+    //for json serizable
     public ClazzRefInfo() {
     }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/domain/ClazzRefInfoContainer.java
Patch:
@@ -219,16 +219,16 @@
 /**
  * Created by wuzhong on 2017/5/14.
  */
-public class RefClazzContainer {
+public class ClazzRefInfoContainer {
 
     private Map<String, ClazzRefInfo> refClazzMap = new HashMap<>();
 
-    public RefClazzContainer(
+    public ClazzRefInfoContainer(
         Map<String, ClazzRefInfo> refClazzMap) {
         this.refClazzMap = refClazzMap;
     }
 
-    public RefClazzContainer() {
+    public ClazzRefInfoContainer() {
     }
 
     public void addRefClazz(Map<String, ClazzRefInfo> other) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/BundleGraphExecutor.java
Patch:
@@ -267,7 +267,7 @@ public void accept(BundleInfo bundleInfo) {
 
                 if (bundleItem.canResolve()) {
 
-                    logger.info("resolve bundle  >>>> " + index++ + bundleItem.bundleInfo.getPkgName());
+                    index++;
                     //bundleItem.resolve();
                     keys.add(key);
 

File: atlas-gradle-plugin/atlas-plugin/src/test/java/proguard/ProguardTest.java
Patch:
@@ -252,9 +252,10 @@ public void test() throws Exception {
 
         ClassPool classPool = (ClassPool)ReflectUtils.getField(proGuard, "programClassPool");
 
-        //classPool.classesAccept(new MyClassPrinter());
+        classPool.classesAccept(new MyClassPrinter());
 
-        LibClassRefVisitor classRefPrinter = new LibClassRefVisitor(Sets.newHashSet());
+        LibClassRefVisitor classRefPrinter = new LibClassRefVisitor(
+            Sets.newHashSet("java/lang/Object", "java/lang/System", "java/io/PrintStream"), classPool);
         classPool.classesAccept(classRefPrinter);
 
         System.out.println(JSON.toJSONString(classRefPrinter.getRefClazzMap(), true));

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/proguard/dto/Input.java
Patch:
@@ -238,7 +238,7 @@ public class Input {
 
     private List<File> parentKeeps = new ArrayList<>();
 
-    private Set<String> mainDexClazzList = new HashSet<>();
+    private Set<String> defaultLibraryClasses = new HashSet<>();
 
     private Map<File, String> fileMd5s = new HashMap<>();
 
@@ -270,8 +270,8 @@ public Set<File> getLibraries() {
         return libraries;
     }
 
-    public Set<String> getMainDexClazzList() {
-        return mainDexClazzList;
+    public Set<String> getDefaultLibraryClasses() {
+        return defaultLibraryClasses;
     }
 
     public Map<File, String> getFileMd5s() {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -263,6 +263,7 @@ private List<BundlePatch> diffPatch(PatchInfo hisPatchInfo, PatchInfo currentPat
                 hisBundles.remove(bundleName);
             } else { // 如果历史的patch中没有包含该bundle
                 bundlePatch.bundlePolicy = BundlePolicy.ADD;
+                bundlePatch.srcUnitTag = curBundleInfo.getSrcUnitTag();
             }
             list.add(bundlePatch);
         }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchDiffResAPBuildTask.java
Patch:
@@ -247,7 +247,6 @@
 import com.android.ide.common.process.ProcessException;
 import com.android.ide.common.process.ProcessOutputHandler;
 import com.google.common.collect.Iterators;
-import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.extension.PatchConfig;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 import com.taobao.android.builder.tools.diff.DiffResExtractor;
@@ -259,6 +258,7 @@
 import org.gradle.api.GradleException;
 import org.gradle.api.tasks.InputDirectory;
 import org.gradle.api.tasks.InputFile;
+import org.gradle.api.tasks.OutputFile;
 import org.gradle.api.tasks.StopExecutionException;
 import org.gradle.api.tasks.TaskAction;
 
@@ -282,6 +282,7 @@ public class TPatchDiffResAPBuildTask extends BaseTask {
 
     private String packageForR;
 
+    @OutputFile
     private File packageOutputFile;
 
     private VariantType type;
@@ -563,7 +564,7 @@ public File call() throws Exception {
                     //TODO
                     ApkFileList baseApkFiles = JSON.parseObject(FileUtils.readFileToString(
                         baseApkFileList), ApkFileList.class);
-                    ApkFileList currentApkFiles = AtlasBuildContext.finalApkFileList;
+                    ApkFileList currentApkFiles = appVariantContext.getApkFiles().finalApkFileList;
 
                     Set<String> diffFiles = new HashSet<String>();
                     HashMap<String, String> baseFiles = baseApkFiles.getMainBundle();

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -1081,6 +1081,7 @@ public void preDexLibrary(@NonNull File inputFile,
 
         if (!inputFile.getName().startsWith("combined")) {
 
+
             if (inputFile.isFile()) {
                 md5 = MD5Util.getFileMD5(inputFile);
             } else if (inputFile.isDirectory()) {
@@ -1293,7 +1294,8 @@ public void mergeManifestsForBunlde(File outputFile, String packageName, String
 
     @NonNull
     public DexByteCodeConverter getDexByteCodeConverter() {
-        if (!buildType.equals("release")){
+
+        if (AtlasBuildContext.appVariantContext.getBuildType().getDexConfig()==null||!AtlasBuildContext.appVariantContext.getBuildType().getDexConfig().isUseMyDex()){
             return super.getDexByteCodeConverter();
         }
         if (dexByteCodeConverter == null){

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/TPatchDexTool.java
Patch:
@@ -124,6 +124,4 @@ public int size() {
 
     }
 
-
-
 }

File: atlas-core/src/main/java/android/taobao/atlas/framework/bundlestorage/BundleArchiveRevision.java
Patch:
@@ -479,6 +479,9 @@ public synchronized void optDexFile() {
             if (dexFile == null){
                 if(!externalStorage || (externalStorage && Build.VERSION.SDK_INT>=21 && MultiDex.IS_VM_MULTIDEX_CAPABLE)) {
                     boolean interpretOnly = externalStorage ? true : false;
+                    if(bundleFile.getUsableSpace()<5*1024*1024){
+                        interpretOnly = true;
+                    }
                     dexFile = AndroidRuntime.getInstance().loadDex(RuntimeVariables.androidApplication, bundleFile.getAbsolutePath(), odexFile.getAbsolutePath(), 0, interpretOnly);
                 }else{
                     Method m=Class.forName("android.taobao.atlas.util.DexFileCompat")

File: atlas-core/src/main/java/android/taobao/atlas/runtime/DelegateResources.java
Patch:
@@ -271,7 +271,7 @@ public XmlResourceParser getLayout(int id) throws NotFoundException {
             }
 
         }
-        if(result==null){
+        if(result==null && exception!=null){
             throw exception;
         }
         return result;
@@ -292,7 +292,7 @@ public Drawable getDrawable(int id, Theme theme) throws NotFoundException {
             }
 
         }
-        if(result==null){
+        if(result==null && exception!=null){
             throw exception;
         }
         return result;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/manager/AtlasAppTaskManager.java
Patch:
@@ -327,7 +327,7 @@ public void accept(ApplicationVariant applicationVariant) {
                 //        "atlas plgin is not compatible with instant run， plese turn it off in your ide！");
                 //}
 
-                tAndroidBuilder.setBuildType(appVariantContext.getBuildType().getName());
+                tAndroidBuilder.setBuildType(applicationVariant.getBuildType().getName());
 //                new AwbProguradHook().hookProguardTask(appVariantContext);
 
                 List<MtlTaskContext> mtlTaskContextList = new ArrayList<MtlTaskContext>();

File: atlas-core/src/main/java/android/taobao/atlas/util/DexFileCompat.java
Patch:
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 import android.os.Build;
+
+import java.io.Serializable;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import dalvik.system.DexFile;
@@ -10,7 +12,7 @@
  * Created by guanjie on 2017/5/24.
  */
 
-public class DexFileCompat {
+public class DexFileCompat implements Serializable{
 
     public static Method openDexFile;
     public static Field  mCookie;

File: atlas-demo/AtlasDemo/app/src/main/java/com/taobao/update/Updater.java
Patch:
@@ -265,7 +265,7 @@ public static void dexPatchUpdate(Context context) {
         File patchFile = new File(context.getExternalCacheDir(), "patch-" + info.updateVersion + "@" + info.baseVersion + ".tpatch");
 
         try {
-            AtlasUpdater.dexpatchUpdate(info, patchFile, new AtlasUpdater.IDexpatchMonitor() {
+            AtlasUpdater.dexpatchUpdate(context,info, patchFile, new AtlasUpdater.IDexpatchMonitor() {
                 @Override
                 public void merge(boolean success, String bundleName, long version, String errMsg) {
                     Log.d(TAG, "merge: " + success + " " + bundleName + " " + version + " " + errMsg);

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -723,7 +723,7 @@ public static File getInstalledBundle(String location,String bundleUniqueId) {
                         return mainBundle;
                     }
                 }else {
-                    BundleArchive archive = new BundleArchive(location, new File(storageLocation + location), bundleUniqueId, 0);
+                    BundleArchive archive = new BundleArchive(location, new File(storageLocation,location), bundleUniqueId, 0);
                     if (archive != null) {
                         return archive.getArchiveFile();
                     } else {

File: atlas-core/src/main/java/android/taobao/atlas/startup/KernalVersionManager.java
Patch:
@@ -580,6 +580,7 @@ public void saveDexPatchInfo(HashMap<String,String> infos,String storageLocation
         //dexpatch 部分
         out.writeUTF(bundleListStr);
         out.writeUTF(storageLocation!=null ? storageLocation : "");
+        out.writeBoolean(cachePreVersion);
         out.flush();
         out.close();
     }

File: atlas-update/src/main/java/com/taobao/atlas/update/model/UpdateInfo.java
Patch:
@@ -60,7 +60,7 @@ public static class Item implements Serializable {
          */
         public List<String> dependency;
 
-        public long dexPatchVersion = -1;
+        public long dexpatchVersion = -1;
 
         public boolean reset = false;
     }

File: atlas-update/src/main/java/com/taobao/atlas/update/util/PatchInstaller.java
Patch:
@@ -61,7 +61,7 @@ public void install() throws BundleException {
                 if (!updateInfo.dexPatch) {
                     upgradeVersions[index] = bundlePair.second.unitTag;
                 } else {
-                    dexPatchVersions[index] = bundlePair.second.dexPatchVersion;
+                    dexPatchVersions[index] = bundlePair.second.dexpatchVersion;
                 }
             }
             index++;

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -213,15 +213,12 @@
 import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
 import android.os.Build;
-import android.taobao.atlas.runtime.RuntimeVariables;
 import android.taobao.atlas.startup.KernalVersionManager;
 import android.taobao.atlas.startup.NClassLoader;
 import android.text.TextUtils;
 import android.util.Log;
 import android.widget.Toast;
-
 import com.taobao.android.runtime.AndroidRuntime;
-
 import dalvik.system.DexFile;
 import dalvik.system.PathClassLoader;
 import java.io.*;

File: atlas-demo/AtlasDemo/app/src/main/java/com/taobao/update/Updater.java
Patch:
@@ -243,7 +243,7 @@ public static void update(Context context) {
 
         String jsonStr = new String(FileUtils.readFile(updateInfo));
         UpdateInfo info = JSON.parseObject(jsonStr, UpdateInfo.class);
-
+        info.lowDisk = false;
         File patchFile = new File(context.getExternalCacheDir(), "patch-" + info.updateVersion + "@" + info.baseVersion + ".tpatch");
 
         try {

File: atlas-update/src/main/java/com/taobao/atlas/update/util/PatchMerger.java
Patch:
@@ -99,7 +99,7 @@ public void merge() throws MergeException, IOException {
                         mergeOutputs.put(bundleName, new Pair<>("", item));
                     }else {
                         //差量部署
-                        File baselineBundle = findOriginalBundleFile(bundleName, oringnalDir.getAbsolutePath(), item);
+//                        File baselineBundle = findOriginalBundleFile(bundleName, oringnalDir.getAbsolutePath(), item);
                         File originalBundle = findOriginalBundleFile(bundleName, oringnalDir.getAbsolutePath(), item);
                         if (originalBundle != null && originalBundle.exists()) {
                             updateBundles[x] = new Pair<File, String>(originalBundle, bundleName);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/builder/core/AtlasBuilder.java
Patch:
@@ -1065,7 +1065,7 @@ public void preDexLibrary(@NonNull File inputFile,
         String md5 = "";
         File dexFile = new File(outFile, "classes.dex");
 
-        if (!inputFile.getName().startsWith("combined")  && !inputFile.getName().equals("main.jar") ) {
+        if (!inputFile.getName().startsWith("combined")  && !(inputFile.getName().startsWith("main") && inputFile.getName().endsWith("jar")) ) {
 
             if (inputFile.isFile()) {
                 md5 = MD5Util.getFileMD5(inputFile);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/BasePatchTool.java
Patch:
@@ -347,8 +347,8 @@ protected File unzipApk(File outPatchDir) {
         }
         File baseApkUnzipFolder = new File(unzipFolder, BASE_APK_UNZIP_NAME);
         File newApkUnzipFolder = new File(unzipFolder, NEW_APK_UNZIP_NAME);
-        CommandUtils.exec("unzip "+baseApkBO.getApkFile().getAbsolutePath()+" -d "+baseApkUnzipFolder.getAbsolutePath());
-        CommandUtils.exec("unzip "+newApkBO.getApkFile().getAbsolutePath()+" -d "+ newApkUnzipFolder.getAbsolutePath());
+        CommandUtils.exec(outPatchDir,"unzip "+baseApkBO.getApkFile().getAbsolutePath()+" -d "+baseApkUnzipFolder.getAbsolutePath());
+        CommandUtils.exec(outPatchDir,"unzip "+newApkBO.getApkFile().getAbsolutePath()+" -d "+ newApkUnzipFolder.getAbsolutePath());
         return unzipFolder;
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/utils/HttpClientUtils.java
Patch:
@@ -419,6 +419,7 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.params.CoreConnectionPNames;
 import org.apache.http.util.EntityUtils;
 
 import java.io.IOException;
@@ -438,6 +439,7 @@ public class HttpClientUtils {
      */
     public static String getUrl(String url) throws IOException {
         HttpClient httpclient = new DefaultHttpClient();
+        httpclient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 3000);
         HttpGet httpget = new HttpGet(url);
         HttpResponse response = httpclient.execute(httpget);
         HttpEntity entity = response.getEntity();

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -524,7 +524,7 @@ public static void update(boolean upgrade,final String[] locations, final File[]
             File[] externalStorages = getExternalFilesDirs(RuntimeVariables.androidApplication,"storage");
             if(externalStorages!=null && externalStorages.length>0){
                 for(File externalStorage : externalStorages){
-                    if(getStorageState(externalStorage)==Environment.MEDIA_MOUNTED && externalStorage.getUsableSpace()>50*1024*1024) {
+                    if(getStorageState(externalStorage).equals(Environment.MEDIA_MOUNTED) && externalStorage.getUsableSpace()>50*1024*1024) {
                         updateStorageDir = externalStorage;
                     }
                 }

File: atlas-core/src/main/java/android/taobao/atlas/startup/KernalVersionManager.java
Patch:
@@ -342,7 +342,7 @@ public void init(){
                 if(!TextUtils.isEmpty(dexPatchBundles) && !TextUtils.isEmpty(dexpatchStorageLocation)){
                     //external dexpatch
                     File storage = new File(dexpatchStorageLocation);
-                    if(!storage.exists() || getStorageState(storage)!=Environment.MEDIA_MOUNTED){
+                    if(!storage.exists() || !getStorageState(storage).equals(Environment.MEDIA_MOUNTED)){
                         dexPatchBundles="";
                         dexpatchStorageLocation = "";
                     }
@@ -351,7 +351,7 @@ public void init(){
                 if(!TextUtils.isEmpty(updateBundles) && !TextUtils.isEmpty(currentStorageLocation)){
                     //no dexpatch,but external bundle update
                     File storage = new File(currentStorageLocation);
-                    if(!storage.exists() || getStorageState(storage)!=Environment.MEDIA_MOUNTED){
+                    if(!storage.exists() || !getStorageState(storage).equals(Environment.MEDIA_MOUNTED)){
                         throw new IOException("update bundle location storage is not usable");
                     }
                 }

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -249,14 +249,15 @@ public class KernalBundle{
     public static boolean checkloadKernalBundle(Application application,String currentProcessName) {
         File updateDir = null;
         File dexPatchDir = null;
+        dexPatchDir = updateDir = new File(KernalConstants.baseContext.getFilesDir(), "storage");
+
         if(!TextUtils.isEmpty(KernalVersionManager.instance().DEXPATCH_STORAGE_LOCATION)){
             dexPatchDir = new File(KernalVersionManager.instance().DEXPATCH_STORAGE_LOCATION);
         }
 
         if(!TextUtils.isEmpty(KernalVersionManager.instance().CURRENT_STORAGE_LOCATION)){
             updateDir = new File(KernalVersionManager.instance().CURRENT_STORAGE_LOCATION);
         }
-        dexPatchDir = updateDir = new File(KernalConstants.baseContext.getFilesDir(), "storage");
 
         final File kernalUpdateDir = new File(updateDir, KERNAL_BUNDLE_NAME);
         final File kernalDexPatchDir = new File(dexPatchDir,KERNAL_BUNDLE_NAME);

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/releaser/BundleReleaser.java
Patch:
@@ -445,7 +445,7 @@ public void run() {
                         }else{
                             //interpretOnly
                             optimizedPath = KernalConstants.baseContext.getFilesDir()+File.separator+"fake.dex";
-                            AndroidRuntime.getInstance().loadDex(KernalConstants.baseContext, validDexes[j].getPath(), optimizedPath, 0, true);
+                            dexFiles[j] = AndroidRuntime.getInstance().loadDex(KernalConstants.baseContext, validDexes[j].getPath(), optimizedPath, 0, true);
                         }
                         boolean result = verifyDexFile(dexFiles[j],optimizedPath);
                         if (!result) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/manifest/AtlasProxy.java
Patch:
@@ -216,7 +216,6 @@
 import java.util.Set;
 
 import com.google.common.collect.Lists;
-import com.taobao.android.builder.AtlasBuildContext;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
 import org.dom4j.Document;
@@ -309,8 +308,8 @@ public static void addAtlasProxyClazz(Document document, Set<String> nonProxyCha
 
         for (String processName : processNames) {
 
-            //boolean isMainPkg = packageName.equals(processName);
-            boolean isMainPkg = true;
+            boolean isMainPkg = packageName.equals(processName);
+            //boolean isMainPkg = true;
             String processClazzName = processName.replace(":", "").replace(".", "_");
 
             for (String elementName : elementNames) {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/APatchTool.java
Patch:
@@ -310,6 +310,9 @@ public void doPatch(File outPatchFile, String projectArtifactId) throws Exceptio
         Collection<File> soFiles = FileUtils.listFiles(newApkUnzipFolder, new String[]{"so"}, true);
         if (splitDiffBundle!= null) {
             for (Pair<BundleBO, BundleBO> bundle : splitDiffBundle) {
+                if (bundle.getFirst() == null||bundle.getSecond() == null){
+                    continue;
+                }
                 List<File> aPatchFiles = processBundleFiles(bundle.getSecond().getBundleFile(), bundle.getFirst().getBundleFile(), patchTmpDir, adiffFile, adiffJsonFile);
                 if (null != aPatchFiles) {
                     for (File aPatchFile : aPatchFiles) {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/BasePatchTool.java
Patch:
@@ -217,7 +217,6 @@
 import com.taobao.android.tpatch.model.BundleBO;
 import com.taobao.android.tpatch.utils.HttpClientUtils;
 import com.taobao.android.utils.CommandUtils;
-import com.taobao.android.utils.ZipUtils;
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
@@ -343,6 +342,9 @@ public List<File> getFolderDexFiles(File folder) {
      */
     protected File unzipApk(File outPatchDir) {
         File unzipFolder = new File(outPatchDir, "unzip");
+        if (!unzipFolder.exists()){
+            unzipFolder.mkdirs();
+        }
         File baseApkUnzipFolder = new File(unzipFolder, BASE_APK_UNZIP_NAME);
         File newApkUnzipFolder = new File(unzipFolder, NEW_APK_UNZIP_NAME);
         CommandUtils.exec("unzip "+baseApkBO.getApkFile().getAbsolutePath()+" -d "+baseApkUnzipFolder.getAbsolutePath());

File: atlas-core/src/main/java/android/taobao/atlas/startup/AtlasBridgeApplication.java
Patch:
@@ -437,10 +437,11 @@ public  boolean isUpdated(Context context){
         KernalConstants.LASTUPDATETIME = packageInfo.lastUpdateTime;
         if(TextUtils.isEmpty(KernalConstants.INSTALLED_VERSIONNAME )){
             //不可能发生
+            Log.e("AtlasBridgeApplication","version name is empty ");
             android.os.Process.killProcess(android.os.Process.myPid());
         }
 
-        File metafile = new File(context.getFilesDir(), "meta");
+        File metafile = new File(context.getFilesDir(), "storage/meta");
         if (metafile.exists()) {
             try {
                 DataInputStream in = new DataInputStream(new FileInputStream(metafile));

File: atlas-core/src/main/java/android/taobao/atlas/startup/KernalVersionManager.java
Patch:
@@ -417,9 +417,7 @@ public synchronized void parseUpdatedBundles(){
             if(bundles!=null && bundles.length>0){
                 for(String bundleInfo : bundles){
                     String[] infoItems = bundleInfo.split("@");
-                    if(infoItems.length>2){
-                        currentUpdateBundles.put(infoItems[0],infoItems[1]+"@"+infoItems[2]);
-                    }
+                    currentUpdateBundles.put(infoItems[0],infoItems[1]);
                 }
             }
         }

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundleArchive.java
Patch:
@@ -250,12 +250,12 @@ public KernalBundleArchive(Context context, File bundleDir,String version,long d
         if(dexPatchVersion>0){
             revisionDir = new File(bundleDir,DEXPATCH_DIR+dexPatchVersion);
         }
-        if(!revisionDir.exists()){
+        if(revisionDir==null || !revisionDir.exists()){
             //dexpatch目录不存在可降级，dexpatch改动必须向前兼容
             revisionDir = new File(bundleDir,version);
         }
 
-        if (!revisionDir.exists()) {
+        if (revisionDir==null || !revisionDir.exists()) {
             throw new IOException("can not find kernal bundle");
         }
         libraryDirectory = new File(revisionDir,"lib");

File: atlas-core/src/main/java/android/taobao/atlas/util/SoLoader.java
Patch:
@@ -296,6 +296,7 @@ private static File findLocalLibrary(String libraryName){
     private static synchronized void extractSoFromApk(String soName){
         AtlasFileLock.getInstance().LockExclusive(LIB_DIR);
         if(findLocalLibrary(soName)!=null){
+            AtlasFileLock.getInstance().unLock(LIB_DIR);
             return;
         }
         try {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/update/UpdateInfo.java
Patch:
@@ -251,7 +251,7 @@ public UpdateInfo(BuildPatchInfos patchInfos) {
                 item.name = patchBundleInfo.getPkgName();
             }
 //            item.srcVersion = patchBundleInfo.getVersion();
-            item.version = updateInfo.updateVersion + "@" + patchBundleInfo.getVersion();
+            item.version = updateInfo.baseVersion + "@" + patchBundleInfo.getVersion();
         }
         updateInfo.updateBundles = items;
     }

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundleArchive.java
Patch:
@@ -309,7 +309,7 @@ public void purge(String uniqueTag, final long dexPatchVersion) {
             @Override
             public boolean accept(File dir, String filename) {
                 if(dexPatchVersion>0 && !filename.equals(dexPatchVersion+"")){
-                    return true;
+                    return false;
                 }else{
                     return true;
                 }

File: atlas-update/src/main/java/com/taobao/atlas/update/AwoPatchReceiver.java
Patch:
@@ -144,7 +144,7 @@ protected Void doInBackground(Void[] params) {
 
         private void wrapperPatchAndInstall(String action){
             if(action.equals(ROLLBACK_ACTION)){
-                BaselineInfoManager.instance().rollback(true,null);
+                BaselineInfoManager.instance().rollback();
                 return;
             }else if(action.equals(DEXROLLBACK_ACTION)){
                 return;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/GenerateAtlasSourceTask.java
Patch:
@@ -270,7 +270,7 @@ void generate() {
 
         lines.add("private String version = \"" + injectParam.version + "\";");
         lines.add("public String getVersion() {return version;}");
-        lines.add("public static String bunleInfo = \"" + escapeExprSpecialWord(injectParam.bundleInfo) + "\";");
+        lines.add("public static String bundleInfo = \"" + escapeExprSpecialWord(injectParam.bundleInfo) + "\";");
         //lines.add("public static String bunleInfo = \"\";");
         if (StringUtils.isNotEmpty(injectParam.autoStartBundles)) {
             lines.add("public static String autoStartBundles = \"" + injectParam.autoStartBundles + "\";");

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/ManifestOptions.java
Patch:
@@ -249,6 +249,7 @@ public class ManifestOptions {
     private boolean replaceApplication = true;
 
     @Config(order = 8, title = "启用atlas multidex", message = "使用atlas的multiDex功能, 接atlas必须开启", advance = true, group = "atlas")
+    @Deprecated //根据是否是多dex自动控制，不要使用
     private boolean addMultiDexMetaData = true;
 
     @Config(order = 9, message = "移除所有的provider", advance = true, group = "atlas")

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/AtlasMultiDexTransform.java
Patch:
@@ -238,6 +238,8 @@ public AtlasMultiDexTransform(VariantScope variantScope,
         super(variantScope, dexOptions, includeInMainDexJarFile);
     }
 
+
+
     /**
      * add a couple of rules that cannot be easily parsed from the manifest.
      * keep("public class * extends android.app.Instrumentation { <init>(); }");

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/utils/SmaliCodeUtils.java
Patch:
@@ -496,7 +496,7 @@ private static baksmaliOptions createBaksmaliOptions(ClassDef classDef) {
         options.noParameterRegisters = false;
         options.useLocalsDirective = true;
         options.useSequentialLabels = true;
-        options.outputDebugInfo = true;
+        options.outputDebugInfo = false;
         options.addCodeOffsets = false;
         options.jobs = -1;
         options.noAccessorComments = false;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCache.java
Patch:
@@ -268,10 +268,9 @@ public String cacheFile(String key, File file, String type) {
             if (StringUtils.isEmpty(key)) {
                 return "";
             }
-
             File cacheFile = new File(cacheDir, type + "/" + key);
-            if (!cacheFile.exists()){
-                return "";
+            if (cacheFile.exists()){
+                return cacheFile.getAbsolutePath();
             }
             cacheFile.getParentFile().mkdirs();
             try {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/repatch/InsTructionsReIClassDef.java
Patch:
@@ -487,9 +487,7 @@ protected Iterable<? extends Instruction> reInstructions(Iterable<? extends Inst
                             isArray = true;
                         }
                         String methodName = methodReference.getName();
-                        if (methodName.equals("InitBundleInfoByVersionIfNeed")){
-                            System.out.println("InitBundleInfoByVersionIfNeed");
-                        }
+
                         if (basicType.containsKey(returnType)) {
                             isBasic = true;
                         }

File: atlas-core/src/main/java/android/taobao/atlas/framework/bundlestorage/BundleArchiveRevision.java
Patch:
@@ -379,7 +379,7 @@ public class BundleArchiveRevision {
                 if (containerVersion == null ||
                         (!TextUtils.isEmpty(Framework.getContainerVersion()) && !containerVersion.equals(Framework.getContainerVersion())) ||
                         (!TextUtils.isEmpty(version) && !TextUtils.isEmpty(wantedVersion) && !version.equals(wantedVersion)) ||
-                        (!TextUtils.isEmpty(info.getVersion()) && version!=null&&!version.equals("-1") && !version.equals(info.getVersion()))) {
+                        (!TextUtils.isEmpty(info.getVersion()) && version!=null&&!version.equals("-1") && !version.equals(info.getVersion()) && !Framework.isDeubgMode())) {
                     throw new BundleArchive.MisMatchException("mismatch bundle version" + revisionDir.getAbsolutePath());
                 }
             }

File: atlas-demo/AtlasDemo/firstbundle/src/main/java/com/taobao/firstbundle/FirstBundleActivity.java
Patch:
@@ -18,8 +18,6 @@ public class FirstBundleActivity extends AppCompatActivity implements BlankFragm
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_firstbundle);
-//       Toast.makeText(this,"this is aaaaaaaaaa  newnewnenenwn bundle",Toast.LENGTH_SHORT).show();
-
     }
 
 //    @Override

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/AtlasExtension.java
Patch:
@@ -212,7 +212,6 @@
 import com.android.annotations.NonNull;
 import com.taobao.android.builder.extension.annotation.Config;
 import com.taobao.android.builder.extension.annotation.ConfigGroup;
-
 import org.gradle.api.Action;
 import org.gradle.api.NamedDomainObjectContainer;
 import org.gradle.api.Project;
@@ -238,7 +237,7 @@ public class AtlasExtension<T extends TBuildType, Z extends TBuildConfig> {
     public ManifestOptions manifestOptions;
 
     //如果atlas开关开启了，自动会打开一些默认的开关
-    @Config(message = "是否启用atlas", order = 1)
+    @Config(message = "是否启用atlas", order = 0, group = "atlas")
     private boolean atlasEnabled;
 
     protected Project project;
@@ -259,7 +258,7 @@ public AtlasExtension(@NonNull final ProjectInternal project,
         this.patchConfigs = patchConfigs;
         this.buildTypes = buildTypes;
 
-        tBuildConfig = (Z) instantiator.newInstance(TBuildConfig.class);
+        tBuildConfig = (Z)instantiator.newInstance(TBuildConfig.class);
         manifestOptions = instantiator.newInstance(ManifestOptions.class);
         bundleConfig = instantiator.newInstance(BundleConfig.class);
     }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/extension/TBuildType.java
Patch:
@@ -223,7 +223,7 @@ public class TBuildType {
 
     private File baseApFile;
 
-    @Config(message = " 基线的依赖坐标， 如： com.taobao.android:taobao-android-release:6.3.0-SNAPSHOT@ap ", order = 1)
+    @Config(message = "基线的依赖坐标， 如： com.taobao.android:taobao-android-release:6.3.0-SNAPSHOT@ap ", order = 1, group = "atlas_patch")
     private String baseApDependency;
 
     private PatchConfig patchConfig;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/LogDependenciesTask.java
Patch:
@@ -381,7 +381,7 @@ public ConfigAction(AppVariantContext appVariantContext,
 
         @Override
         public String getName() {
-            return scope.getTaskName("log", "dependencies");
+            return scope.getTaskName("log", "Dependencies");
         }
 
         @Override

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/ProcessResAwbsTask.java
Patch:
@@ -219,6 +219,7 @@
 import com.taobao.android.builder.dependency.AtlasDependencyTree;
 import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
+import com.taobao.android.builder.tasks.manager.TaskCreater;
 import com.taobao.android.builder.tools.concurrent.ExecutorServicesHelper;
 
 import org.gradle.api.GradleException;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MergeAssetAwbsConfigAction.java
Patch:
@@ -215,9 +215,9 @@
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AtlasDependencyTree;
 import com.taobao.android.builder.dependency.model.AwbBundle;
-import com.taobao.android.builder.tasks.app.MtlParallelTask;
-import com.taobao.android.builder.tasks.app.bundle.TaskCreater;
-import com.taobao.android.builder.tasks.bundle.MergeAwbAssetConfigAction;
+import com.taobao.android.builder.tasks.manager.MtlParallelTask;
+import com.taobao.android.builder.tasks.manager.TaskCreater;
+import com.taobao.android.builder.tasks.app.merge.bundle.MergeAwbAssetConfigAction;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 import org.gradle.api.DefaultTask;
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MergeResAwbsConfigAction.java
Patch:
@@ -214,9 +214,9 @@
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AtlasDependencyTree;
 import com.taobao.android.builder.dependency.model.AwbBundle;
-import com.taobao.android.builder.tasks.app.MtlParallelTask;
-import com.taobao.android.builder.tasks.app.bundle.TaskCreater;
-import com.taobao.android.builder.tasks.bundle.MergeAwbResourceConfigAction;
+import com.taobao.android.builder.tasks.manager.MtlParallelTask;
+import com.taobao.android.builder.tasks.manager.TaskCreater;
+import com.taobao.android.builder.tasks.app.merge.bundle.MergeAwbResourceConfigAction;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 
 import org.apache.commons.io.FileUtils;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/bundle/MergeAwbAssetConfigAction.java
Patch:
@@ -207,7 +207,7 @@
  *
  */
 
-package com.taobao.android.builder.tasks.bundle;
+package com.taobao.android.builder.tasks.app.merge.bundle;
 
 //import com.android.build.gradle.internal.api.AppVariantContext;
 import com.android.build.gradle.internal.api.LibVariantContext;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/bundle/MergeAwbResourceConfigAction.java
Patch:
@@ -207,7 +207,7 @@
  *
  */
 
-package com.taobao.android.builder.tasks.bundle;
+package com.taobao.android.builder.tasks.app.merge.bundle;
 
 import com.android.build.gradle.AndroidConfig;
 import com.android.build.gradle.AndroidGradleOptions;
@@ -310,6 +310,7 @@ public void execute(CachedMergeResources mergeResourcesTask) {
 
         //mergeResourcesTask.setProcess9Patch(process9Patch);
         mergeResourcesTask.setCrunchPng(extension.getAaptOptions().getCruncherEnabled());
+        mergeResourcesTask.setProcessResources(true);
 
         VectorDrawablesOptions vectorDrawablesOptions = variantData.getVariantConfiguration()
                 .getMergedFlavor()

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/prepare/PrepareBundleInfoTask.java
Patch:
@@ -252,8 +252,7 @@ private Map<String, AwbBundle> collectBundleInfo(AppVariantOutputContext appVari
             try {
                 map.put(awbBundle.getAwbSoName(), awbBundle);
             }catch (Throwable e){
-                e.printStackTrace();
-                System.out.println(awbBundle.getAndroidLibrary());
+                getProject().getLogger().error(awbBundle.getAndroidLibrary().toString(), e);
             }
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/awo/AwoFullApkBuildTask.java
Patch:
@@ -258,7 +258,7 @@ public void doTask() throws IOException, SigningException {
         ZipUtils.addFileToZipFile(baseApkFile, outApkFile, awoFile, destPath, true);
 
         File signFile = new File(outApkFile.getParent(), outApkFile.getName().replace(".apk", "-signed.apk"));
-        AtlasBuildContext.androidSigner.signFile(outApkFile, signFile, getSigningConfig());
+        AtlasBuildContext.sBuilderAdapter.androidSigner.signFile(outApkFile, signFile, getSigningConfig());
         if (null != zipAlign && zipAlign) {
             File signAndZipAlignedFile = ZipAlignUtils.doZipAlign(androidBuilder, getProject(), signFile);
             FileUtils.deleteQuietly(outApkFile);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/awo/AwoPackageTask.java
Patch:
@@ -247,7 +247,7 @@ public void doFullTaskAction() throws IOException {
         libVariantContext.getPackageFile().getParentFile().mkdirs();
 
         try {
-            AtlasBuildContext.androidBuilder.oldPackageApk(libVariantContext.getOutputResouceAP().getAbsolutePath(),
+            AtlasBuildContext.androidBuilderMap.get(getProject()).oldPackageApk(libVariantContext.getOutputResouceAP().getAbsolutePath(),
                                                            getDexFolders(),
                                                            Collections.emptyList(),
                                                            getJniFolders(),

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/manager/TaskCreater.java
Patch:
@@ -207,7 +207,7 @@
  *
  */
 
-package com.taobao.android.builder.tasks.app.bundle;
+package com.taobao.android.builder.tasks.manager;
 
 import org.gradle.api.Project;
 import org.gradle.api.Task;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/BuildHelper.java
Patch:
@@ -238,7 +238,7 @@ public static File doSign(File apkFile, DefaultSigningConfig signConfig) throws
 
         File signFile = new File(apkFile.getParent(), apkFile.getName().replace(".apk", "-signed.apk"));
 
-        AtlasBuildContext.androidSigner.signFile(apkFile, signFile, signConfig);
+        AtlasBuildContext.sBuilderAdapter.androidSigner.signFile(apkFile, signFile, signConfig);
 
         return signFile;
     }
@@ -254,7 +254,7 @@ public static File reSign(File apkFile, DefaultSigningConfig signConfig) throws
         Pattern pattern = Pattern.compile("META-INF");
         ZipUtils.removeZipEntry(apkFile, pattern, unsignedApk);
 
-        AtlasBuildContext.androidSigner.signFile(unsignedApk, apkFile, signConfig);
+        AtlasBuildContext.sBuilderAdapter.androidSigner.signFile(unsignedApk, apkFile, signConfig);
 
         apkFile.renameTo(new File(filePath));
         FileUtils.deleteDirectory(workDir);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/cache/FileCache.java
Patch:
@@ -270,6 +270,9 @@ public String cacheFile(String key, File file, String type) {
             }
 
             File cacheFile = new File(cacheDir, type + "/" + key);
+            if (!cacheFile.exists()){
+                return "";
+            }
             cacheFile.getParentFile().mkdirs();
             try {
                 if (file.isDirectory()) {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/ideaplugin/ApDownloader.java
Patch:
@@ -239,7 +239,7 @@ public static File downloadAP(String mtlConfigUrl, File root) throws Exception {
         }
 
         String apiUrl = "http://" +
-                AtlasBuildContext.serverHost + "/rpc/androidPlugin/getAp.json?buildConfigId=" + configId;
+                AtlasBuildContext.sBuilderAdapter.tpatchHistoryUrl + "/rpc/androidPlugin/getAp.json?buildConfigId=" + configId;
 
         URL api = new URL(apiUrl);
         BufferedReader in = new BufferedReader(

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -353,7 +353,7 @@ public void patchKernalDex() throws Exception {
         DexFile[] dexFile = archive.getOdexFile();
         if ((dexFile != null&&dexFile.length>0) || archive.getLibraryDirectory().exists()) {
             installKernalBundle(KernalConstants.baseContext.getClassLoader(),archive);
-            Class FrameworkPropertiesClazz = archive.getOdexFile()[0].loadClass("android.taobao.atlas.framework.FrameworkProperties",ClassLoader.getSystemClassLoader());
+            Class FrameworkPropertiesClazz = archive.getOdexFile()[dexFile.length-1].loadClass("android.taobao.atlas.framework.FrameworkProperties",ClassLoader.getSystemClassLoader());
             Field versionField = FrameworkPropertiesClazz.getDeclaredField("version");
             versionField.setAccessible(true);
             String version = (String)versionField.get(FrameworkPropertiesClazz.newInstance());

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleInstaller.java
Patch:
@@ -626,7 +626,7 @@ private void findBundleSource(String location) throws IOException{
         String bundlePath = String.format("%s/lib/%s", dataDir,bundleFileName);
         File bundleFile = new File(bundlePath);
         BundleListing.BundleInfo info = AtlasBundleInfoManager.instance().getBundleInfo(location);
-        if(bundleFile.exists() && info.isInternal() && (info.getSize()>0 && info.getSize() == bundleFile.length())){
+        if(bundleFile.exists() && info.isInternal()){
             mTmpBundleSourceFile = bundleFile;
             Log.e("BundleInstaller","find valid bundle : "+bundleFile.getAbsolutePath());
         }else{

File: atlas-core/src/main/java/android/taobao/atlas/util/AtlasCrashManager.java
Patch:
@@ -1,6 +1,5 @@
 package android.taobao.atlas.util;
 
-import android.taobao.atlas.runtime.ActivityTaskMgr;
 import android.taobao.atlas.runtime.RuntimeVariables;
 import android.util.Log;
 
@@ -31,7 +30,7 @@ public void uncaughtException(Thread thread, Throwable ex) {
                 Object mPM = mPMField.get(RuntimeVariables.androidApplication.getPackageManager());
                 Method setPackageStoppedState = mPM.getClass().getDeclaredMethod("setPackageStoppedState",String.class,boolean.class,int.class);
                 setPackageStoppedState.setAccessible(true);
-                setPackageStoppedState.invoke(RuntimeVariables.androidApplication.getPackageName(),true,RuntimeVariables.androidApplication.getApplicationInfo().uid);
+                setPackageStoppedState.invoke(mPM,RuntimeVariables.androidApplication.getPackageName(),true,RuntimeVariables.androidApplication.getApplicationInfo().uid);
             } catch (Throwable e) {
                 e.printStackTrace();
             }

File: atlas-core/src/main/java/android/taobao/atlas/startup/KernalVersionManager.java
Patch:
@@ -330,8 +330,9 @@ public void init(){
                 input.close();
             } catch (Throwable e) {
                 updateMonitor(KernalConstants.DD_BASELINEINFO_FAIL, e==null?"":e.getMessage());
-                rollbackHardly();
                 killChildProcesses(KernalConstants.baseContext);
+                BASELINEINFO.delete();
+                rollbackHardly();
                 android.os.Process.killProcess(Process.myPid());
             }
         }

File: atlas-core/src/main/java/android/taobao/atlas/startup/patch/KernalBundle.java
Patch:
@@ -351,9 +351,9 @@ public KernalBundle(final File bundleDir,String process,String installedVersion)
 
     public void patchKernalDex() throws Exception {
         DexFile[] dexFile = archive.getOdexFile();
-        if (dexFile != null || archive.getLibraryDirectory().exists()) {
+        if ((dexFile != null&&dexFile.length>0) || archive.getLibraryDirectory().exists()) {
             installKernalBundle(KernalConstants.baseContext.getClassLoader(),archive);
-            Class FrameworkPropertiesClazz = KernalConstants.baseContext.getClassLoader().loadClass("android.taobao.atlas.framework.FrameworkProperties");
+            Class FrameworkPropertiesClazz = archive.getOdexFile()[0].loadClass("android.taobao.atlas.framework.FrameworkProperties",ClassLoader.getSystemClassLoader());
             Field versionField = FrameworkPropertiesClazz.getDeclaredField("version");
             versionField.setAccessible(true);
             String version = (String)versionField.get(FrameworkPropertiesClazz.newInstance());

File: atlas-core/src/main/java/android/taobao/atlas/bundleInfo/BundleListing.java
Patch:
@@ -453,6 +453,9 @@ private void findBundleTransitively(String location,List<String> bundlesListForI
             if(bundlesListForInstall.contains(location)){
                 return;
             }
+            if(!bundlesListForInstall.contains(location)) {
+                bundlesListForInstall.add(0,location);
+            }
             List<String> singleLevelDependencies = AtlasBundleInfoManager.instance().getDependencyForBundle(location);
             if(singleLevelDependencies!=null){
                 for(String dependepcy : singleLevelDependencies){
@@ -461,9 +464,6 @@ private void findBundleTransitively(String location,List<String> bundlesListForI
                     }
                 }
             }
-            if(!bundlesListForInstall.contains(location)) {
-                bundlesListForInstall.add(location);
-            }
         }
 
 

File: atlas-core/src/main/java/android/taobao/atlas/runtime/newcomponent/receiver/ReceiverBridge.java
Patch:
@@ -21,14 +21,14 @@
 public class ReceiverBridge {
 
     private static DelegateReceiver receiver;
-    private static Handler sMainHandler;
+    private static Handler sMainHandler  = new Handler(Looper.getMainLooper());
+
 
     public synchronized static void registerAdditionalReceiver() {
         if(receiver == null){
             receiver = new DelegateReceiver();
             IntentFilter additionalFilter = AdditionalPackageManager.getInstance().getAdditionIntentFilter();
             RuntimeVariables.androidApplication.registerReceiver(receiver,additionalFilter);
-            sMainHandler = new Handler(Looper.getMainLooper());
         }
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.android.utils.ILogger;
 import com.taobao.android.BasePatchTool;
+import com.taobao.android.TPatchDexTool;
 import com.taobao.android.differ.dex.PatchException;
 import com.taobao.android.object.BuildPatchInfos;
 import com.taobao.android.object.PatchBundleInfo;

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/common/dexpatcher/DexPatchGenerator.java
Patch:
@@ -223,9 +223,6 @@ public void executeAndSaveTo(File file) throws IOException {
         try {
             os = new BufferedOutputStream(new FileOutputStream(file));
             executeAndSaveTo(os);
-            if (file.exists() && file.length() == 0L){
-                FileUtils.deleteQuietly(file);
-            }
         } finally {
             if (os != null) {
                 try {
@@ -235,6 +232,9 @@ public void executeAndSaveTo(File file) throws IOException {
                 }
             }
         }
+        if (file.exists() && file.length() == 0L){
+            FileUtils.deleteQuietly(file);
+        }
     }
 
     public void executeAndSaveTo(OutputStream out) throws IOException {

File: atlas-update/src/main/java/com/taobao/common/dexpatcher/DexPatchGenerator.java
Patch:
@@ -1,5 +1,4 @@
 /*
- * Tencent is pleased to support the open source community by making Tinker available.
  *
  * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *

File: atlas-core/src/main/java/android/taobao/atlas/framework/Atlas.java
Patch:
@@ -337,9 +337,9 @@ public void init(Application application,boolean reset) throws AssertionArrayExc
 
             Object gDefault = null;
             if(Build.VERSION.SDK_INT<25) {
-                gDefault = AtlasHacks.ActivityManagerNative_gDefault.get(AtlasHacks.ActivityManagerNative.getmClass());
+                AtlasHacks.ActivityManagerNative_gDefault.get(AtlasHacks.ActivityManagerNative.getmClass());
             }else{
-                gDefault = AtlasHacks.ActivityManagerNative_getDefault.invoke(AtlasHacks.ActivityManagerNative.getmClass());
+                AtlasHacks.ActivityManagerNative_getDefault.invoke(AtlasHacks.ActivityManagerNative.getmClass());
             }
             AtlasHacks.Singleton_mInstance.hijack(gDefault, activityManagerProxy);
         }catch(Throwable e){}

File: atlas-core/src/main/java/android/taobao/atlas/framework/Atlas.java
Patch:
@@ -337,9 +337,9 @@ public void init(Application application,boolean reset) throws AssertionArrayExc
 
             Object gDefault = null;
             if(Build.VERSION.SDK_INT<25) {
-                AtlasHacks.ActivityManagerNative_gDefault.get(AtlasHacks.ActivityManagerNative.getmClass());
+                gDefault = AtlasHacks.ActivityManagerNative_gDefault.get(AtlasHacks.ActivityManagerNative.getmClass());
             }else{
-                AtlasHacks.ActivityManagerNative_getDefault.invoke(AtlasHacks.ActivityManagerNative.getmClass());
+                gDefault = AtlasHacks.ActivityManagerNative_getDefault.invoke(AtlasHacks.ActivityManagerNative.getmClass());
             }
             AtlasHacks.Singleton_mInstance.hijack(gDefault, activityManagerProxy);
         }catch(Throwable e){}

File: atlas-core/src/main/java/android/taobao/atlas/runtime/FrameworkLifecycleHandler.java
Patch:
@@ -307,7 +307,7 @@ public void onLowMemory() {
                 String[] bundles = autoStartBundle.split(",");
                 if (bundles.length > 0) {
                     for (int x = 0; x < bundles.length; x++) {
-                        final String bundleName = bundles[0];
+                        final String bundleName = bundles[x];
                         BundleImpl impl = (BundleImpl) Atlas.getInstance().getBundle(bundleName);
                         if (impl == null) {
                             BundleInstaller.startDelayInstall(bundleName, new BundleInstaller.InstallListener() {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/utils/ZipUtils.java
Patch:
@@ -267,8 +267,8 @@ public static List<String> unzip(final File zipFile, final String destination) {
     public static List<String> unzip(final File zipFile, final String destination, String encoding) {
         List<String> fileNames = new ArrayList<String>();
         String dest = destination;
-        if (!destination.endsWith(File.separator)) {
-            dest = destination + File.separator;
+        if (!destination.endsWith("/")) {
+            dest = destination + "/";
         }
         ZipFile file;
         try {

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/common/dexpatcher/Configuration.java
Patch:
@@ -276,7 +276,7 @@ public String toString() {
     }
 
     private void createTempDirectory() throws TinkerPatchException {
-        mTempResultDir = new File(mOutFolder + File.separator + TypedValue.PATH_PATCH_FILES);
+        mTempResultDir = new File(mOutFolder + "/" + TypedValue.PATH_PATCH_FILES);
         FileOperation.deleteDir(mTempResultDir);
         if (!mTempResultDir.exists()) {
             mTempResultDir.mkdir();

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/common/dexpatcher/algorithms/diff/utils/FileOperation.java
Patch:
@@ -206,7 +206,7 @@ public static void unZipAPk(String fileName, String filePath) throws IOException
                 }
                 BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry));
 
-                File file = new File(filePath + File.separator + entry.getName());
+                File file = new File(filePath + "/" + entry.getName());
 
                 File parentFile = file.getParentFile();
                 if (parentFile != null && (!parentFile.exists())) {
@@ -258,7 +258,7 @@ public static void zipFiles(Collection<File> resFileList, File zipFile) throws I
     }
 
     private static void zipFile(File resFile, ZipOutputStream zipout, String rootpath) throws IOException {
-        rootpath = rootpath + (rootpath.trim().length() == 0 ? "" : File.separator) + resFile.getName();
+        rootpath = rootpath + (rootpath.trim().length() == 0 ? "" : "/") + resFile.getName();
         if (resFile.isDirectory()) {
             File[] fileList = resFile.listFiles();
             for (File file : fileList) {
@@ -376,7 +376,7 @@ public static void zipInputDir(File inputDir, File outputFile) throws IOExceptio
 
     public static boolean sevenZipInputDir(File inputDir, File outputFile, Configuration config) {
         String outPath = inputDir.getAbsolutePath();
-        String path = outPath + File.separator + "*";
+        String path = outPath + "/" + "*";
         String cmd = config.mSevenZipPath;
 
         ProcessBuilder pb = new ProcessBuilder(cmd, "a", "-tzip", outputFile.getAbsolutePath(), path, "-mx9");

File: atlas-demo/AtlasDemo/app/src/main/java/com/taobao/demo/MainActivity.java
Patch:
@@ -132,7 +132,7 @@ public boolean onNavigationItemSelected(MenuItem item) {
             startActivity(intent);
 
         } else if (id == R.id.awo_manager) {
-            Dialog dialog = new Dialog(this,"单模块调试",
+            Dialog dialog = new Dialog(this,"单bundle调试",
                     "1、安装设备且连接电脑成功\n\n"+
                      "2、修改一个bundle工程的代码或者自由（设置生效的标识）\n\n"+
                             "3、bundle工程的目录下执行 ../gradlew clean assemblePatchDebug,然后等应用重启或者应用关闭后点击重启");

File: atlas-demo/AtlasDemo/firstbundle/src/main/java/com/taobao/firstbundle/FirstBundleActivity.java
Patch:
@@ -13,7 +13,7 @@ public class FirstBundleActivity extends AppCompatActivity implements BlankFragm
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_firstbundle);
-        Toast.makeText(this,"this is aaaaaaaaaa  newnewnenenwn bundle",Toast.LENGTH_SHORT).show();
+//        Toast.makeText(this,"this is aaaaaaaaaa  newnewnenenwn bundle",Toast.LENGTH_SHORT).show();
     }
 
 //    @Override

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/dependency/parser/DependencyLocationManager.java
Patch:
@@ -24,14 +24,15 @@
 public class DependencyLocationManager {
 
     public static File getExploreDir(Project project, MavenCoordinates mavenCoordinates, File bundle, String type,
-                                     String path) {
+                                     String path, boolean useBuildCache) {
 
         Optional<FileCache> buildCache =
             AndroidGradleOptions.getBuildCache(project);
         File explodedDir;
         if (PrepareLibraryTask.shouldUseBuildCache(
-            buildCache.isPresent(), mavenCoordinates) ) { //&& !"awb".equals(type)
+            buildCache.isPresent(), mavenCoordinates) && useBuildCache) { //&& !"awb".equals(type)
             try {
+
                 explodedDir = buildCache.get().getFileInCache(
                     PrepareLibraryTask.getBuildCacheInputs(bundle));
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingProcessLayoutsConfigAction.java
Patch:
@@ -249,6 +249,7 @@ public void execute(DataBindingProcessLayoutsTask task) {
         task.setLayoutInputFolder(appVariantContext.getAwbMergeResourcesOutputDir(awbBundle));
         task.setLayoutOutputFolder(appVariantContext.getAwbLayoutFolderOutputForDataBinding(awbBundle));
         task.setXmlInfoOutFolder(appVariantContext.getAwbLayoutInfoOutputForDataBinding(awbBundle));
+
     }
 
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbXmlProcessor.java
Patch:
@@ -237,10 +237,11 @@ public static LayoutXmlProcessor getLayoutXmlProcessor(AppVariantContext appVari
         final MergingLog mergingLog = new MergingLog(resourceBlameLogDir);
         LayoutXmlProcessor layoutXmlProcessor = new LayoutXmlProcessor(
 
+                 awbBundle.getPackageName(),
                 //                ManifestFileUtils.getPackage(awbBundle.getOrgManifestFile()),
 
                 //                "com.taobao.demo2",
-                appVariantContext.getVariantConfiguration().getOriginalApplicationId(),
+                //appVariantContext.getVariantConfiguration().getOriginalApplicationId(),
 
                 dataBindingBuilder.createJavaFileWriter(appVariantContext.getAwbClassOutputForDataBinding(
                         awbBundle)),
@@ -254,7 +255,7 @@ public File getOriginalFileFor(File file) {
                         SourceFile original = mergingLog.find(input);
                         // merged log api returns the file back if original cannot be found.
                         // it is not what we want so we alter the response.
-                        return original == input ? null : original.getSourceFile();
+                        return original == input ? input.getSourceFile() : original.getSourceFile();
                     }
                 });
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MergeResAwbsConfigAction.java
Patch:
@@ -274,6 +274,8 @@ public void execute(MtlParallelTask parallelTask) {
                                                                 mergeAwbResourceConfigAction.getName(),
                                                                 mergeAwbResourceConfigAction.getType());
 
+            mergeTask.setBlameLogFolder(appVariantContext.getAwbBlameLogFolder(awbBundle));
+
             mergeAwbResourceConfigAction.execute(mergeTask);
 
             tasks.add(mergeTask);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MergeResV4Dir.java
Patch:
@@ -224,6 +224,7 @@
 import java.io.File;
 import java.io.IOException;
 
+@Deprecated
 public class MergeResV4Dir extends DefaultAndroidTask {
 
     private VariantScope variantScope;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/awo/ProcessAwoAndroidResources.java
Patch:
@@ -323,7 +323,7 @@ private void addAaptOptions() {
             options.add("--customized-package-id");
             options.add(getCustomPackageId());
         } else {
-            throw new GradleException("bunle is not found in basic apk : " +
+            throw new GradleException("bundle is not found in basic apk : " +
                                           bundleLocation +
                                           ", \n you must config your project's group and projectName to bundle's "
                                           + "realName"
@@ -449,7 +449,7 @@ public ConfigAction(LibVariantContext variantContext,
         @NonNull
         @Override
         public String getName() {
-            return scope.getTaskName("process", "AwbResources[" + awbBundle.getName() + "]");
+            return scope.getTaskName("awoProcess", "Resources[" + awbBundle.getName() + "]");
         }
 
         @NonNull

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -915,7 +915,7 @@ static BundleImpl installNewBundle(final String location, final InputStream in)t
     }
 
     /**
-     * install a bundle from input file, the file will move to bunlde storage directory.
+     * install a bundle from input file, the file will move to bundle storage directory.
      *
      * @param location the bundle location.
      * @param file     the input file.

File: atlas-core/src/main/java/android/taobao/atlas/startup/KernalVersionManager.java
Patch:
@@ -344,7 +344,7 @@ public void init(){
         DEXPATCH_VERSION = dexpatchVersion;
         DEXPATCH_BUNDLES = dexPatchBundles;
 
-        parseUpdatedBunldes();
+        parseUpdatedBundles();
     }
 
     public void removeBaseLineInfo(){
@@ -416,7 +416,7 @@ public long dexPatchVersion(){
         return DEXPATCH_VERSION;
     }
 
-    public synchronized void parseUpdatedBunldes(){
+    public synchronized void parseUpdatedBundles(){
         if(CURRENT_UPDATE_BUNDLES!=null){
             String[] bundles = CURRENT_UPDATE_BUNDLES.split(";");
             if(bundles!=null && bundles.length>0){

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/manifest/PostProcessManifestTask.java
Patch:
@@ -254,7 +254,7 @@ public class PostProcessManifestTask extends DefaultTask {
 
     @InputFile
     @Optional
-    private File bunldeBaseInfoFile;
+    private File bundleBaseInfoFile;
 
     public boolean addMultiDex;
 
@@ -311,7 +311,7 @@ public void postProcess() throws IOException, DocumentException {
             ManifestFileUtils.postProcessManifests(getMainManifestFile(),
                                                    getLibManifestMap(),
                                                    getLibManifestDepenendyMap(),
-                                                   bunldeBaseInfoFile,
+                                                   bundleBaseInfoFile,
                                                    manifestOptions,
                                                    addMultiDex,
                                                    remoteBundles);
@@ -382,7 +382,7 @@ public List<? extends AndroidLibrary> call() {
                                             }
                                         });
 
-            postProcessManifestsTask.bunldeBaseInfoFile = new File(variantContext.getScope()
+            postProcessManifestsTask.bundleBaseInfoFile = new File(variantContext.getScope()
                                                                            .getGlobalScope()
                                                                            .getProject()
                                                                            .getProjectDir(),

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/ApkFileListUtils.java
Patch:
@@ -243,11 +243,11 @@ public static void recordApkFileInfos(AppVariantContext appVariantContext) {
         }
         inited = true;
 
-        List<File> mainBunldeResFolders = new ArrayList<File>();
-        mainBunldeResFolders.add(appVariantContext.getScope().getVariantData().mergeResourcesTask.getOutputDir());
+        List<File> mainBundleResFolders = new ArrayList<File>();
+        mainBundleResFolders.add(appVariantContext.getScope().getVariantData().mergeResourcesTask.getOutputDir());
         prepareApkFileList(appVariantContext.getScope().getVariantData().mergeAssetsTask.getOutputDir(),
                 "assets");
-        for (File resFolder : mainBunldeResFolders) {
+        for (File resFolder : mainBundleResFolders) {
             prepareApkFileList(resFolder, "res");
         }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -578,13 +578,13 @@ private PatchInfo createHisTPatch(String targetVersion, ILogger logger) throws I
                 if (soFile.exists() || bundleInfo.getVersion().equals(ROLLBACK_VERSION)) {
                     continue;
                 }
-                zipBunldeSo(bundleFolder, soFile);
+                zipBundleSo(bundleFolder, soFile);
                 FileUtils.deleteDirectory(bundleFolder);
             }
         }
         File tPatchFile = new File(patchsFolder, newPatchInfo.getFileName());
         if (tPatchFile.exists()) FileUtils.deleteQuietly(tPatchFile);
-        zipBunldeSo(destTPathTmpFolder, tPatchFile);
+        zipBundleSo(destTPathTmpFolder, tPatchFile);
         if (null != logger) {
             logger.info("[TPatchFile]" + tPatchFile.getAbsolutePath());
         }
@@ -597,7 +597,7 @@ private PatchInfo createHisTPatch(String targetVersion, ILogger logger) throws I
      * @param bundleFolder
      * @param soOutputFile
      */
-    private void zipBunldeSo(File bundleFolder, File soOutputFile) throws PatchException {
+    private void zipBundleSo(File bundleFolder, File soOutputFile) throws PatchException {
         try {
             Manifest manifest = createManifest();
             FileOutputStream fileOutputStream = new FileOutputStream(soOutputFile);

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -915,7 +915,7 @@ static BundleImpl installNewBundle(final String location, final InputStream in)t
     }
 
     /**
-     * install a bundle from input file, the file will move to bunlde storage directory.
+     * install a bundle from input file, the file will move to bundle storage directory.
      *
      * @param location the bundle location.
      * @param file     the input file.

File: atlas-core/src/main/java/android/taobao/atlas/startup/KernalVersionManager.java
Patch:
@@ -344,7 +344,7 @@ public void init(){
         DEXPATCH_VERSION = dexpatchVersion;
         DEXPATCH_BUNDLES = dexPatchBundles;
 
-        parseUpdatedBunldes();
+        parseUpdatedBundles();
     }
 
     public void removeBaseLineInfo(){
@@ -416,7 +416,7 @@ public long dexPatchVersion(){
         return DEXPATCH_VERSION;
     }
 
-    public synchronized void parseUpdatedBunldes(){
+    public synchronized void parseUpdatedBundles(){
         if(CURRENT_UPDATE_BUNDLES!=null){
             String[] bundles = CURRENT_UPDATE_BUNDLES.split(";");
             if(bundles!=null && bundles.length>0){

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/manifest/PostProcessManifestTask.java
Patch:
@@ -254,7 +254,7 @@ public class PostProcessManifestTask extends DefaultTask {
 
     @InputFile
     @Optional
-    private File bunldeBaseInfoFile;
+    private File bundleBaseInfoFile;
 
     public boolean addMultiDex;
 
@@ -311,7 +311,7 @@ public void postProcess() throws IOException, DocumentException {
             ManifestFileUtils.postProcessManifests(getMainManifestFile(),
                                                    getLibManifestMap(),
                                                    getLibManifestDepenendyMap(),
-                                                   bunldeBaseInfoFile,
+                                                   bundleBaseInfoFile,
                                                    manifestOptions,
                                                    addMultiDex,
                                                    remoteBundles);
@@ -382,7 +382,7 @@ public List<? extends AndroidLibrary> call() {
                                             }
                                         });
 
-            postProcessManifestsTask.bunldeBaseInfoFile = new File(variantContext.getScope()
+            postProcessManifestsTask.bundleBaseInfoFile = new File(variantContext.getScope()
                                                                            .getGlobalScope()
                                                                            .getProject()
                                                                            .getProjectDir(),

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/ApkFileListUtils.java
Patch:
@@ -243,11 +243,11 @@ public static void recordApkFileInfos(AppVariantContext appVariantContext) {
         }
         inited = true;
 
-        List<File> mainBunldeResFolders = new ArrayList<File>();
-        mainBunldeResFolders.add(appVariantContext.getScope().getVariantData().mergeResourcesTask.getOutputDir());
+        List<File> mainBundleResFolders = new ArrayList<File>();
+        mainBundleResFolders.add(appVariantContext.getScope().getVariantData().mergeResourcesTask.getOutputDir());
         prepareApkFileList(appVariantContext.getScope().getVariantData().mergeAssetsTask.getOutputDir(),
                 "assets");
-        for (File resFolder : mainBunldeResFolders) {
+        for (File resFolder : mainBundleResFolders) {
             prepareApkFileList(resFolder, "res");
         }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/builder/PatchFileBuilder.java
Patch:
@@ -578,13 +578,13 @@ private PatchInfo createHisTPatch(String targetVersion, ILogger logger) throws I
                 if (soFile.exists() || bundleInfo.getVersion().equals(ROLLBACK_VERSION)) {
                     continue;
                 }
-                zipBunldeSo(bundleFolder, soFile);
+                zipBundleSo(bundleFolder, soFile);
                 FileUtils.deleteDirectory(bundleFolder);
             }
         }
         File tPatchFile = new File(patchsFolder, newPatchInfo.getFileName());
         if (tPatchFile.exists()) FileUtils.deleteQuietly(tPatchFile);
-        zipBunldeSo(destTPathTmpFolder, tPatchFile);
+        zipBundleSo(destTPathTmpFolder, tPatchFile);
         if (null != logger) {
             logger.info("[TPatchFile]" + tPatchFile.getAbsolutePath());
         }
@@ -597,7 +597,7 @@ private PatchInfo createHisTPatch(String targetVersion, ILogger logger) throws I
      * @param bundleFolder
      * @param soOutputFile
      */
-    private void zipBunldeSo(File bundleFolder, File soOutputFile) throws PatchException {
+    private void zipBundleSo(File bundleFolder, File soOutputFile) throws PatchException {
         try {
             Manifest manifest = createManifest();
             FileOutputStream fileOutputStream = new FileOutputStream(soOutputFile);

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/TPatchTool.java
Patch:
@@ -471,7 +471,7 @@ public Boolean call() throws Exception {
 
         // 删除临时的目录
         FileUtils.deleteDirectory(patchTmpDir);
-        FileUtils.deleteDirectory(unzipFolder);
+//        FileUtils.deleteDirectory(unzipFolder);
         return patchFile;
     }
 

File: atlas-gradle-plugin/dexpatch/src/main/java/com/taobao/android/tpatch/manifest/AndroidManifestDiffFactory.java
Patch:
@@ -31,6 +31,9 @@ private void diff(Manifest baseManifest, Manifest newManifest) {
     }
 
     private void diff(Collection<? extends Manifest.AndroidBase> baseCollection, Collection<? extends Manifest.AndroidBase>newCollection){
+        if (newCollection == null||baseCollection == null){
+            return;
+        }
         for (Manifest.AndroidBase newAndroidBase:newCollection){
             String name = newAndroidBase.name;
             boolean find = false;

File: atlas-core/src/main/java/android/taobao/atlas/startup/AtlasBridgeApplication.java
Patch:
@@ -389,7 +389,7 @@ private void checkShowErrorNotification(String errorInfo) {
                     new Notification.Builder(this)
                             .setSmallIcon(this.getResources().getIdentifier("icon","drawable",getPackageName()))
                             .setContentTitle("提示").setAutoCancel(true)
-                            .setContentText("手机淘宝安装不完整,请您卸载重新安装!");
+                            .setContentText("应用安装不完整,请您卸载重新安装!");
 
             NotificationManager mNotificationManager =
                     (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/api/AppVariantContext.java
Patch:
@@ -213,7 +213,7 @@
 import com.android.build.gradle.internal.variant.ApplicationVariantData;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.extension.AtlasExtension;
 import org.gradle.api.Project;
 import org.gradle.api.file.ConfigurableFileTree;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/api/AwbTransform.java
Patch:
@@ -210,7 +210,7 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 
 import java.io.File;
 import java.util.List;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/android/build/gradle/internal/api/VariantContext.java
Patch:
@@ -219,7 +219,7 @@
 import com.android.builder.signing.DefaultSigningConfig;
 import com.android.utils.FileUtils;
 import com.android.utils.StringHelper;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.extension.AtlasExtension;
 import com.taobao.android.builder.extension.TBuildType;
 import org.gradle.api.Project;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/dependency/diff/DependencyCompareUtils.java
Patch:
@@ -209,7 +209,7 @@
 package com.taobao.android.builder.dependency.diff;
 
 import com.alibaba.fastjson.JSON;
-import com.taobao.android.builder.dependency.DependencyJson;
+import com.taobao.android.builder.dependency.output.DependencyJson;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/dependency/model/ApLibrary.java
Patch:
@@ -206,7 +206,7 @@
  *
  */
 
-package com.taobao.android.builder.dependency;
+package com.taobao.android.builder.dependency.model;
 
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/dependency/model/ApkLibrary.java
Patch:
@@ -206,7 +206,7 @@
  *
  */
 
-package com.taobao.android.builder.dependency;
+package com.taobao.android.builder.dependency.model;
 
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/dependency/model/SoLibrary.java
Patch:
@@ -206,7 +206,7 @@
  *
  */
 
-package com.taobao.android.builder.dependency;
+package com.taobao.android.builder.dependency.model;
 
 import com.android.annotations.NonNull;
 import com.android.annotations.Nullable;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/dependency/output/DependencyJson.java
Patch:
@@ -206,7 +206,7 @@
  *
  */
 
-package com.taobao.android.builder.dependency;
+package com.taobao.android.builder.dependency.output;
 
 import java.io.Serializable;
 import java.util.ArrayList;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/bundle/JavacAwbsTask.java
Patch:
@@ -215,7 +215,7 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 import com.taobao.android.builder.tools.concurrent.ExecutorServicesHelper;
 
@@ -225,7 +225,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 
 /**

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingExportBuildInfoConfigAction.java
Patch:
@@ -217,7 +217,7 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import org.gradle.api.file.ConfigurableFileTree;
 import org.gradle.api.file.FileCollection;
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbDataBindingProcessLayoutsConfigAction.java
Patch:
@@ -213,7 +213,7 @@
 import com.android.build.gradle.internal.scope.TaskConfigAction;
 import com.android.build.gradle.internal.scope.VariantScope;
 import com.android.build.gradle.internal.tasks.databinding.DataBindingProcessLayoutsTask;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 
 /**
  * Created by shenghua.nish on 2016-08-11 下午2:11.

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/AwbXmlProcessor.java
Patch:
@@ -213,7 +213,7 @@
 import com.android.build.gradle.internal.api.AppVariantContext;
 import com.android.ide.common.blame.MergingLog;
 import com.android.ide.common.blame.SourceFile;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 
 import java.io.File;
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/DataBindingExportBuildInfoAwbsConfigAction.java
Patch:
@@ -214,7 +214,7 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.app.MtlParallelTask;
 import com.taobao.android.builder.tasks.app.bundle.TaskCreater;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/DataBindingProcessLayoutAwbsConfigAction.java
Patch:
@@ -214,7 +214,7 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.app.MtlParallelTask;
 import com.taobao.android.builder.tasks.app.bundle.TaskCreater;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/databinding/DataBindingRenameTask.java
Patch:
@@ -217,7 +217,7 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 import com.taobao.android.builder.tools.concurrent.ExecutorServicesHelper;
 import com.taobao.android.builder.tools.manifest.ManifestFileUtils;
@@ -240,7 +240,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 
 public class DataBindingRenameTask extends BaseTask {
@@ -371,7 +370,7 @@ public void execute(DataBindingRenameTask packageAwbsTask) {
             packageAwbsTask.androidConfig = appVariantContext.getAppExtension();
             packageAwbsTask.appVariantContext = appVariantContext;
             packageAwbsTask.appVariantOutputContext = getAppVariantOutputContext();
-            packageAwbsTask.config = scope.getVariantConfiguration();
+            packageAwbsTask.config = scope.getVariantScope().getVariantConfiguration();
             packageAwbsTask.variantOutputData = (ApkVariantOutputData) scope.getVariantOutputData();
 
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MergeAssetAwbsConfigAction.java
Patch:
@@ -213,7 +213,7 @@
 import com.android.build.gradle.tasks.MergeSourceSetFolders;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.app.MtlParallelTask;
 import com.taobao.android.builder.tasks.app.bundle.TaskCreater;
 import com.taobao.android.builder.tasks.bundle.MergeAwbAssetConfigAction;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/merge/MergeManifestAwbsConfigAction.java
Patch:
@@ -215,7 +215,7 @@
 import com.google.common.collect.ImmutableList;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.app.MtlParallelTask;
 import com.taobao.android.builder.tasks.app.bundle.TaskCreater;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/app/prepare/PreparePackageIdsTask.java
Patch:
@@ -219,7 +219,7 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
@@ -347,7 +347,7 @@ public int compare(PackageIdItem o1, PackageIdItem o2) {
             autoConfigMap2.remove(key);
         }
         if (autoConfigMap2.size() > 0){
-            File outPkgFile2 = new File(getProject().getBuildDir(), "outputs/unusedPackageIdFile.properties");
+            File outPkgFile2 = new File(getProject().getBuildDir(), "outputs/warning-unusedPackageIdFile.properties");
             writeProperties(autoConfigMap2, outPkgFile2);
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/awo/AwoJavaCompileConfigAction.java
Patch:
@@ -212,7 +212,6 @@
 import com.android.build.gradle.internal.CompileOptions;
 import com.android.build.gradle.internal.LoggerWrapper;
 import com.android.build.gradle.internal.api.LibVariantContext;
-import com.android.build.gradle.internal.core.GradleVariantConfiguration;
 import com.android.build.gradle.internal.scope.ConventionMappingHelper;
 import com.android.build.gradle.internal.scope.GlobalScope;
 import com.android.build.gradle.internal.scope.VariantScope;
@@ -221,7 +220,7 @@
 import com.android.builder.model.SyncIssue;
 import com.android.utils.ILogger;
 import com.google.common.base.Joiner;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;
 import org.gradle.api.Project;
 import org.gradle.api.file.FileCollection;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/DiffBundleInfoTask.java
Patch:
@@ -219,8 +219,8 @@
 import com.android.builder.dependency.LibraryDependency;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
-import com.taobao.android.builder.dependency.DependencyJson;
+import com.taobao.android.builder.dependency.model.AwbBundle;
+import com.taobao.android.builder.dependency.output.DependencyJson;
 import com.taobao.android.builder.dependency.diff.DependencyCompareUtils;
 import com.taobao.android.builder.dependency.diff.DependencyDiff;
 import com.taobao.android.builder.tasks.manager.MtlBaseTaskAction;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/tpatch/TPatchTask.java
Patch:
@@ -317,7 +317,7 @@ public void doTPatch() throws Exception {
             tPatchTool.doPatch(outPatchFolder,
                                true,
                                new File(getOutPatchFolder(), "patchs.json"),
-                               true,
+                               StringUtils.isNotEmpty(patchContext.tpatchHistoryUrl),
                                patchContext.tpatchHistoryUrl,
                                patchContext.appSignName);
             getLogger().info("finish  do patch");

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tasks/transform/hook/AwbProguradHook.java
Patch:
@@ -217,7 +217,6 @@
 import com.android.build.gradle.internal.variant.BaseVariantOutputData;
 import com.android.builder.core.VariantConfiguration;
 import com.google.common.base.Joiner;
-import com.google.common.base.Supplier;
 import com.google.common.collect.Lists;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
@@ -231,6 +230,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.*;
+import java.util.function.Supplier;
 
 import static com.android.builder.model.AndroidProject.FD_OUTPUTS;
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/VersionUtils.java
Patch:
@@ -228,7 +228,7 @@ public static String getVersionName(ApkVariantOutputData variantOutputData, File
             versionName = variantOutputData.getVersionName();
         }
         if (null == versionName) {
-            versionName = variantOutputData.getScope().getVariantConfiguration().getVersionName();
+            versionName = variantOutputData.getScope().getVariantScope().getVariantConfiguration().getVersionName();
         }
         if (null == versionName) {
             try {

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/bundleinfo/ApkFileListUtils.java
Patch:
@@ -211,14 +211,13 @@
 import com.android.build.gradle.internal.api.AppVariantContext;
 import com.taobao.android.builder.AtlasBuildContext;
 import com.taobao.android.builder.dependency.AndroidDependencyTree;
-import com.taobao.android.builder.dependency.AwbBundle;
+import com.taobao.android.builder.dependency.model.AwbBundle;
 import com.taobao.android.builder.tools.MD5Util;
 import com.taobao.android.builder.tools.PathUtil;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.filefilter.IOFileFilter;
 import org.apache.commons.io.filefilter.TrueFileFilter;
 import org.apache.commons.lang.StringUtils;
-import org.codehaus.plexus.util.AbstractScanner;
 import org.gradle.api.tasks.StopExecutionException;
 
 import java.io.File;

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/diff/DiffResExtractor.java
Patch:
@@ -359,7 +359,9 @@ public static void extractDiff(Set<String> diffResFiles, File currentApk, File b
 
             //copy file
             File rawFile = new File(fullResDir, diffFile);
-            FileUtils.copyFile(rawFile, new File(destDir, diffFile));
+            if (rawFile.exists()) {
+                FileUtils.copyFile(rawFile, new File(destDir, diffFile));
+            }
 
         }
 

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/guide/AtlasExtensionOutput.java
Patch:
@@ -238,7 +238,7 @@ public AtlasExtensionOutput(AtlasExtension atlasExtension, String name) {
 
         this.tBuildType = new TBuildType(name);
 
-        TBuildType mtlBuildTypeValue = (TBuildType) atlasExtension.getBuildTypes().getByName(name);
+        TBuildType mtlBuildTypeValue = (TBuildType) atlasExtension.getBuildTypes().findByName(name);
         if (null == mtlBuildTypeValue) {
             return;
         }
@@ -259,7 +259,7 @@ private void copyProps(Object dest, Object orig) {
         try {
             BeanUtils.copyProperties(dest, orig);
         } catch (Throwable e) {
-            e.printStackTrace();
+            //e.printStackTrace();
         }
     }
 }

File: atlas-gradle-plugin/atlas-plugin/src/main/java/com/taobao/android/builder/tools/zip/ZipUtils.java
Patch:
@@ -555,7 +555,7 @@ public static boolean removeZipEntry(File file, Pattern pattern, File targetFile
             if (pattern.matcher(name).find()) {
                 continue;
             }
-            out.putNextEntry(new ZipEntry(name));
+            out.putNextEntry(zipEntry);
             inputStream = zipFile.getInputStream(zipEntry);
             write(inputStream, out, buffer);
             bo.flush();

File: atlas-gradle-plugin/dexpatch/src/main/java/android/content/res/AXMLResource.java
Patch:
@@ -205,7 +205,7 @@
  *
  *
  */
- */
+
 package android.content.res;
 
 import android.content.res.chunk.ChunkType;

File: atlas-gradle-plugin/dexpatch/src/main/java/android/content/res/chunk/PoolItem.java
Patch:
@@ -205,7 +205,6 @@
  *
  *
  */
- */
 package android.content.res.chunk;
 
 /**

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleImpl.java
Patch:
@@ -322,7 +322,7 @@ public final class BundleImpl implements Bundle {
         context.bundle = this;
         this.context = context;
         this.bundleDir = bundleDir;
-
+        Framework.notifyBundleListeners(BundleEvent.BEFORE_INSTALL, this);
         if (stream != null) {
             this.archive = new BundleArchive(location,bundleDir, stream,version, dexPatchVersion);
         } else if (file != null) {
@@ -363,6 +363,7 @@ public final class BundleImpl implements Bundle {
         this.location = in.readUTF();
         this.revisionNUM = in.readLong();
         in.close();
+        Framework.notifyBundleListeners(BundleEvent.BEFORE_INSTALL, this);
 
         bcontext.bundle = this;
         this.context = bcontext;
@@ -562,7 +563,7 @@ public synchronized void startBundle() {
         }
         state = STARTING;
         context.isValid = true;
-
+        Framework.notifyBundleListeners(BundleEvent.BEFORE_STARTED, this);
         Framework.notifyBundleListeners(BundleEvent.STARTED, this);
         if (Framework.DEBUG_BUNDLES) {
             Log.i("Framework","Bundle " + toString() + " started.");

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -783,8 +783,9 @@ public boolean accept(File dir, String filename) {
                                         targetDir.mkdirs();
                                         result =  newRevDir.renameTo(targetDir);
                                         new File(walBundleDir,"meta").renameTo(meta);
-                                        if(!result || !targetDir.exists()){
+                                        if(!result || !targetDir.exists() || !meta.exists()){
                                             BaselineInfoManager.instance().rollbackHardly();
+                                            android.os.Process.killProcess(android.os.Process.myPid());
                                         }
                                     }else{
                                         //remove old bundles

File: atlas-core/src/main/java/org/osgi/framework/BundleEvent.java
Patch:
@@ -68,6 +68,9 @@ public class BundleEvent extends EventObject
      */
     public final static int UNINSTALLED = 0x00000010;
 
+    public final static int BEFORE_INSTALL = 10086;
+    public final static int BEFORE_STARTED = 10087;
+
     /**
      * Creates a bundle event of the specified type.
      *

File: atlas-core/src/main/java/android/taobao/atlas/framework/BundleImpl.java
Patch:
@@ -322,7 +322,7 @@ public final class BundleImpl implements Bundle {
         context.bundle = this;
         this.context = context;
         this.bundleDir = bundleDir;
-
+        Framework.notifyBundleListeners(BundleEvent.BEFORE_INSTALL, this);
         if (stream != null) {
             this.archive = new BundleArchive(location,bundleDir, stream,version, dexPatchVersion);
         } else if (file != null) {
@@ -363,6 +363,7 @@ public final class BundleImpl implements Bundle {
         this.location = in.readUTF();
         this.revisionNUM = in.readLong();
         in.close();
+        Framework.notifyBundleListeners(BundleEvent.BEFORE_INSTALL, this);
 
         bcontext.bundle = this;
         this.context = bcontext;
@@ -562,7 +563,7 @@ public synchronized void startBundle() {
         }
         state = STARTING;
         context.isValid = true;
-
+        Framework.notifyBundleListeners(BundleEvent.BEFORE_STARTED, this);
         Framework.notifyBundleListeners(BundleEvent.STARTED, this);
         if (Framework.DEBUG_BUNDLES) {
             Log.i("Framework","Bundle " + toString() + " started.");

File: atlas-core/src/main/java/android/taobao/atlas/framework/Framework.java
Patch:
@@ -783,8 +783,9 @@ public boolean accept(File dir, String filename) {
                                         targetDir.mkdirs();
                                         result =  newRevDir.renameTo(targetDir);
                                         new File(walBundleDir,"meta").renameTo(meta);
-                                        if(!result || !targetDir.exists()){
+                                        if(!result || !targetDir.exists() || !meta.exists()){
                                             BaselineInfoManager.instance().rollbackHardly();
+                                            android.os.Process.killProcess(android.os.Process.myPid());
                                         }
                                     }else{
                                         //remove old bundles

File: atlas-core/src/main/java/org/osgi/framework/BundleEvent.java
Patch:
@@ -68,6 +68,9 @@ public class BundleEvent extends EventObject
      */
     public final static int UNINSTALLED = 0x00000010;
 
+    public final static int BEFORE_INSTALL = 10086;
+    public final static int BEFORE_STARTED = 10087;
+
     /**
      * Creates a bundle event of the specified type.
      *

