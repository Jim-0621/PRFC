File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/JsonUtil.java
Patch:
@@ -5,7 +5,7 @@
 import com.jsoniter.spi.JsonException;
 import com.jsoniter.spi.Slice;
 import jakarta.servlet.http.HttpServletResponse;
-import org.smartboot.http.server.HttpResponse;
+import tech.smartboot.feat.core.server.HttpResponse;
 
 import java.io.IOException;
 

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/JsonUtil.java
Patch:
@@ -4,9 +4,9 @@
 import com.jsoniter.output.JsonStreamPool;
 import com.jsoniter.spi.JsonException;
 import com.jsoniter.spi.Slice;
+import jakarta.servlet.http.HttpServletResponse;
 import org.smartboot.http.server.HttpResponse;
 
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 /**

File: frameworks/Java/helidon/nima/src/main/java/io/helidon/benchmark/nima/models/World.java
Patch:
@@ -9,9 +9,9 @@
 
 public final class World {
 
-    private static final String ID_KEY = "id";
-    private static final String ID_RANDOM_NUMBER = "randomNumber";
-    private static final JsonBuilderFactory JSON = Json.createBuilderFactory(Collections.emptyMap());
+    static final String ID_KEY = "id";
+    static final String ID_RANDOM_NUMBER = "randomNumber";
+    static final JsonBuilderFactory JSON = Json.createBuilderFactory(Collections.emptyMap());
 
     public int id;
     public int randomNumber;

File: frameworks/Java/spring/src/main/java/hello/web/DbHandler.java
Patch:
@@ -1,6 +1,7 @@
 package hello.web;
 
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 
 import hello.Utils;
@@ -52,6 +53,7 @@ ServerResponse updates(ServerRequest request) {
 					world.randomNumber = randomNumber;
 					return world;
 				}).limit(queries)
+				.sorted(Comparator.comparingInt(w -> w.id))
 				.toList();
 		dbRepository.updateWorlds(worlds);
 		return ServerResponse.ok()

File: frameworks/Java/jooby/src/main/java/com/techempower/MvcApp.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) {
       /** Template engine: */
       app.install(new RockerModule());
 
-      app.mvc(new Resource(app.require(DataSource.class)));
+      app.mvc(new Resource_(app.require(DataSource.class)));
     });
   }
 }

File: frameworks/Java/spring-webflux/src/main/java/benchmark/repository/R2dbcDbRepository.java
Patch:
@@ -22,7 +22,7 @@ public Mono<World> getWorld(int id) {
         return databaseClient
                 .sql("SELECT id, randomnumber FROM world WHERE id = $1")
                 .bind("$1", id)
-                .map((row, rowMetaData) -> new World(row.get("id", Integer.class), row.get("randomnumber", Integer.class)))
+                .mapProperties(World.class)
                 .first();
 
     }
@@ -48,7 +48,7 @@ public Mono<World> findAndUpdateWorld(int id, int randomNumber) {
     public Flux<Fortune> fortunes() {
         return databaseClient
                 .sql("SELECT id, message FROM fortune")
-                .map((row, rowMetaData) -> new Fortune(row.get("id", Integer.class), row.get("message", String.class)))
+                .mapProperties(Fortune.class)
                 .all();
     }
 }
\ No newline at end of file

File: frameworks/Java/spring/src/main/java/hello/App.java
Patch:
@@ -14,7 +14,7 @@
 
 import com.zaxxer.hikari.HikariDataSource;
 
-@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class, MongoRepositoriesAutoConfiguration.class})
+@SpringBootApplication
 public class App {
 
 	public static void main(String[] args) {

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -13,8 +13,6 @@
 public class StartApp {
 
     public static void main(String[] args) {
-        ConstConfig.bossPool = Runtime.getRuntime().availableProcessors()/2;
-        ConstConfig.workerPool = Runtime.getRuntime().availableProcessors();
         HServerApplication.run(StartApp.class, 8888, args);
     }
 }

File: frameworks/Java/spring-webflux/src/main/java/benchmark/config/JdbcConfig.java
Patch:
@@ -13,7 +13,7 @@
 public class JdbcConfig {
 
     @Bean
-    public DataSource datasource(DataSourceProperties dataSourceProperties) {
+    DataSource datasource(DataSourceProperties dataSourceProperties) {
         HikariDataSource dataSource = dataSourceProperties.initializeDataSourceBuilder().type(HikariDataSource.class).build();
         dataSource.setMaximumPoolSize(Runtime.getRuntime().availableProcessors() * 2);
 

File: frameworks/Java/spring-webflux/src/main/java/benchmark/config/PgClientConfig.java
Patch:
@@ -24,12 +24,12 @@ public class PgClientConfig {
     private String password;
 
     @Bean
-    public Vertx vertx() {
+    Vertx vertx() {
         return Vertx.vertx();
     }
 
     @Bean
-    public PgClients pgClients(Vertx vertx) {
+    PgClients pgClients(Vertx vertx) {
         List<PgClient> clients = new ArrayList<>();
 
         for (int i = 0; i < Runtime.getRuntime().availableProcessors(); i++) {

File: frameworks/Java/spring-webflux/src/main/java/benchmark/config/R2dbcConfig.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;
-import org.springframework.data.r2dbc.core.DatabaseClient;
+import org.springframework.r2dbc.core.DatabaseClient;
 
 import static io.r2dbc.spi.ConnectionFactoryOptions.*;
 
@@ -44,7 +44,7 @@ public void setPassword(String password) {
     }
 
     @Bean
-    public ConnectionFactory connectionFactory() {
+    ConnectionFactory connectionFactory() {
         return ConnectionFactories.get(ConnectionFactoryOptions.builder()
                 .option(DRIVER,"pool")
                 .option(PROTOCOL,"postgresql")
@@ -57,7 +57,7 @@ public ConnectionFactory connectionFactory() {
     }
 
     @Bean
-    public DatabaseClient databaseClient(ConnectionFactory connectionFactory) {
+    DatabaseClient databaseClient(ConnectionFactory connectionFactory) {
         return DatabaseClient.create(connectionFactory);
     }
 }
\ No newline at end of file

File: frameworks/Java/spring-webflux/src/main/java/benchmark/config/ReactiveMongoConfig.java
Patch:
@@ -19,6 +19,7 @@ public class ReactiveMongoConfig extends AbstractReactiveMongoConfiguration {
     private String url;
     private String name;
 
+    @Override
     @Bean
     public MongoClient reactiveMongoClient() {
         LoggerFactory.getLogger(getClass()).info("Connecting to mongo url: {}/{}", url, name);
@@ -31,7 +32,7 @@ protected String getDatabaseName() {
     }
 
     @Bean
-    public ReactiveMongoTemplate reactiveMongoTemplate() {
+    ReactiveMongoTemplate reactiveMongoTemplate() {
         return new ReactiveMongoTemplate(reactiveMongoClient(), getDatabaseName());
     }
 

File: frameworks/Java/spring-webflux/src/main/java/benchmark/web/WebfluxRouter.java
Patch:
@@ -12,7 +12,7 @@
 public class WebfluxRouter {
 
     @Bean
-    public RouterFunction<ServerResponse> route(WebfluxHandler handler) {
+    RouterFunction<ServerResponse> route(WebfluxHandler handler) {
         return RouterFunctions
                 .route(
                         GET("/plaintext"),

File: frameworks/Java/spring/src/main/java/hello/App.java
Patch:
@@ -28,7 +28,7 @@ public void runAfterStartup() {
 
 	@Bean
 	@Profile({ "jdbc", "jpa" })
-	public DataSource datasource(DataSourceProperties dataSourceProperties) {
+	DataSource datasource(DataSourceProperties dataSourceProperties) {
 		HikariDataSource dataSource = dataSourceProperties.initializeDataSourceBuilder().type(HikariDataSource.class)
 				.build();
 		dataSource.setMaximumPoolSize(Runtime.getRuntime().availableProcessors() * 2);

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -51,6 +51,7 @@ public void handle(HttpRequest request, HttpResponse response) throws IOExceptio
         HttpBootstrap bootstrap = new HttpBootstrap();
         bootstrap.configuration()
                 .threadNum(cpuNum)
+                .headerLimiter(0)
                 .readBufferSize(1024 * 4)
                 .writeBufferSize(1024 * 4)
                 .readMemoryPool(16384 * 1024 * 4)

File: frameworks/Java/inverno/src/main/java/com/techempower/inverno/benchmark/internal/SqlClientReactorScope.java
Patch:
@@ -59,6 +59,8 @@ public void destroy() {
 	
 	@Override
 	protected Mono<SqlClient> create() {
-		return Mono.fromCompletionStage(PgConnection.connect(this.vertx, this.connectOptions).toCompletionStage()).map(pgConn -> (SqlClient)new ConnectionSqlClient(pgConn)).cache();
+		return Mono.fromCompletionStage(() -> PgConnection.connect(this.vertx, this.connectOptions).toCompletionStage())
+			.map(pgConn -> (SqlClient)new ConnectionSqlClient(pgConn))
+			.cacheInvalidateWhen(client -> ((ConnectionSqlClient)client).onClose());
 	}
 }

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/JsonUtil.java
Patch:
@@ -4,9 +4,9 @@
 import com.jsoniter.output.JsonStreamPool;
 import com.jsoniter.spi.JsonException;
 import com.jsoniter.spi.Slice;
-import jakarta.servlet.http.HttpServletResponse;
 import org.smartboot.http.server.HttpResponse;
 
+import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 /**

File: frameworks/Java/inverno/src/main/java/module-info.java
Patch:
@@ -16,9 +16,9 @@
 	requires io.vertx.core;
 	requires java.sql;
 	
-	requires transitive io.netty.transport;
-	requires static io.netty.transport.unix.common;
-	requires static io.netty.transport.epoll;
+	//requires transitive io.netty.transport;
+	//requires static io.netty.transport.unix.common;
+	//requires static io.netty.transport.epoll;
 	
 	exports com.techempower.inverno.benchmark;
 	exports com.techempower.inverno.benchmark.model;

File: frameworks/Java/act/src/main/java/com/techempower/act/controller/FortuneController.java
Patch:
@@ -49,7 +49,7 @@ public void fortunes() {
         List<Fortune> fortunes = dao.findAllAsList();
         fortunes.add(new Fortune(0, "Additional fortune added at request time."));
         Collections.sort(fortunes);
-        renderTemplate("fortunes", fortunes);
+        renderTemplate("fortunes.html", fortunes);
     }
 
 }

File: frameworks/Java/quarkus/resteasy-hibernate/src/main/java/io/quarkus/benchmark/model/Fortune.java
Patch:
@@ -4,8 +4,8 @@
 
 import java.util.Objects;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 @Entity
 @Immutable

File: frameworks/Java/quarkus/resteasy-hibernate/src/main/java/io/quarkus/benchmark/model/World.java
Patch:
@@ -1,7 +1,7 @@
 package io.quarkus.benchmark.model;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 @Entity
 public class World {

File: frameworks/Java/quarkus/resteasy-hibernate/src/main/java/io/quarkus/benchmark/repository/WorldRepository.java
Patch:
@@ -5,9 +5,9 @@
 import java.util.Set;
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
-import javax.transaction.Transactional;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
+import jakarta.transaction.Transactional;
 
 import org.hibernate.FlushMode;
 import org.hibernate.Session;

File: frameworks/Java/quarkus/resteasy-reactive-hibernate-reactive/src/main/java/io/quarkus/benchmark/filter/ServerHeaderFilter.java
Patch:
@@ -3,7 +3,7 @@
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 import org.jboss.resteasy.reactive.server.ServerResponseFilter;
 

File: frameworks/Java/quarkus/resteasy-reactive-hibernate-reactive/src/main/java/io/quarkus/benchmark/model/Fortune.java
Patch:
@@ -4,8 +4,8 @@
 
 import java.util.Objects;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 @Entity
 @Immutable

File: frameworks/Java/quarkus/resteasy-reactive-hibernate-reactive/src/main/java/io/quarkus/benchmark/model/World.java
Patch:
@@ -1,7 +1,7 @@
 package io.quarkus.benchmark.model;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 @Entity
 public class World {

File: frameworks/Java/quarkus/resteasy-reactive-hibernate-reactive/src/main/java/io/quarkus/benchmark/repository/BaseRepository.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.function.Function;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import org.hibernate.reactive.mutiny.Mutiny;
 

File: frameworks/Java/quarkus/resteasy-reactive-hibernate-reactive/src/main/java/io/quarkus/benchmark/repository/FortuneRepository.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import javax.enterprise.context.ApplicationScoped;
+import jakarta.enterprise.context.ApplicationScoped;
 
 import io.quarkus.benchmark.model.Fortune;
 import io.smallrye.mutiny.Uni;

File: frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/filter/ServerHeaderFilter.java
Patch:
@@ -3,7 +3,7 @@
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
 
-import javax.annotation.PostConstruct;
+import jakarta.annotation.PostConstruct;
 
 import org.jboss.resteasy.reactive.server.ServerResponseFilter;
 

File: frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/model/Fortune.java
Patch:
@@ -4,8 +4,8 @@
 
 import java.util.Objects;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 @Entity
 @Immutable

File: frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/model/World.java
Patch:
@@ -1,7 +1,7 @@
 package io.quarkus.benchmark.model;
 
-import javax.persistence.Entity;
-import javax.persistence.Id;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
 
 @Entity
 public class World {

File: frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/repository/FortuneRepository.java
Patch:
@@ -2,8 +2,8 @@
 
 import java.util.List;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import org.hibernate.SessionFactory;
 import org.hibernate.StatelessSession;
 

File: frameworks/Java/quarkus/resteasy-reactive-hibernate/src/main/java/io/quarkus/benchmark/repository/WorldRepository.java
Patch:
@@ -1,8 +1,8 @@
 package io.quarkus.benchmark.repository;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
-import javax.transaction.Transactional;
+import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
+import jakarta.transaction.Transactional;
 
 import org.hibernate.FlushMode;
 import org.hibernate.Session;

File: frameworks/Java/javalin/src/main/java/benchmark/model/Fortune.java
Patch:
@@ -1,5 +1,8 @@
 package benchmark.model;
 
+import com.dslplatform.json.CompiledJson;
+
+@CompiledJson
 public class Fortune {
 
     private int id;

File: frameworks/Java/javalin/src/main/java/benchmark/model/World.java
Patch:
@@ -1,5 +1,8 @@
 package benchmark.model;
 
+import com.dslplatform.json.CompiledJson;
+
+@CompiledJson
 public class World {
 
     private int id;

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String[] args) {
         jsonServletInfo.addMapping("/json");
         applicationRuntime.getDeploymentInfo().addServlet(jsonServletInfo);
         containerRuntime.addRuntime(applicationRuntime);
-        containerRuntime.start();
+
         int cpuNum = Runtime.getRuntime().availableProcessors();
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         HttpBootstrap bootstrap = new HttpBootstrap();
@@ -46,6 +46,7 @@ public static void main(String[] args) {
                 .writeBufferSize(1024 * 4)
                 .readMemoryPool(16384 * 1024 * 4)
                 .writeMemoryPool(10 * 1024 * 1024 * cpuNum, cpuNum);
+        containerRuntime.start(bootstrap.configuration());
         bootstrap.setPort(8080)
                 .httpHandler(new HttpServerHandler() {
                     @Override

File: frameworks/Java/micronaut/common/src/main/java/benchmark/Application.java
Patch:
@@ -3,8 +3,9 @@
 import io.micronaut.runtime.Micronaut;
 
 public class Application {
+
     public static void main(String[] args) {
-        Micronaut.build(args)
-                .run(Application.class);
+        Micronaut.build(args).environments("common").classes(Application.class).start();
     }
+
 }
\ No newline at end of file

File: frameworks/Java/micronaut/common/src/main/java/benchmark/controller/JsonSerializationController.java
Patch:
@@ -9,10 +9,12 @@
 @Controller("/json")
 public class JsonSerializationController {
 
+    // https://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#json-serialization
     @Get
     public Map<String, String> getJson() {
         final Map<String, String> map = new HashMap<>();
         map.put("message", "Hello, World!");
         return map;
     }
+
 }

File: frameworks/Java/micronaut/common/src/main/java/benchmark/controller/PlainTextController.java
Patch:
@@ -6,6 +6,7 @@
 
 @Controller("/plaintext")
 public class PlainTextController {
+
     private static final String TEXT = "Hello, World!";
 
     @Get(value = "/", produces = MediaType.TEXT_PLAIN)

File: frameworks/Java/helidon/nima/src/main/java/io/helidon/benchmark/nima/models/Fortune.java
Patch:
@@ -1,4 +1,5 @@
-package io.helidon.benchmark.models;
+
+package io.helidon.benchmark.nima.models;
 
 public final class Fortune {
     public int id;

File: frameworks/Java/helidon/reactive/src/main/java/io/helidon/benchmark/reactive/models/DbRepository.java
Patch:
@@ -1,4 +1,4 @@
-package io.helidon.benchmark.models;
+package io.helidon.benchmark.reactive.models;
 
 import java.util.List;
 

File: frameworks/Java/helidon/reactive/src/main/java/io/helidon/benchmark/reactive/models/JdbcRepository.java
Patch:
@@ -1,4 +1,4 @@
-package io.helidon.benchmark.models;
+package io.helidon.benchmark.reactive.models;
 
 import java.util.ArrayList;
 import java.util.List;

File: frameworks/Java/helidon/reactive/src/main/java/io/helidon/benchmark/reactive/services/JsonService.java
Patch:
@@ -1,10 +1,10 @@
-package io.helidon.benchmark.services;
+package io.helidon.benchmark.reactive.services;
 
 import java.util.Collections;
 import java.util.Map;
 
-import javax.json.Json;
-import javax.json.JsonBuilderFactory;
+import jakarta.json.Json;
+import jakarta.json.JsonBuilderFactory;
 
 import io.helidon.webserver.Handler;
 import io.helidon.webserver.Routing;

File: frameworks/Java/helidon/reactive/src/main/java/io/helidon/benchmark/reactive/services/PlainTextService.java
Patch:
@@ -1,4 +1,4 @@
-package io.helidon.benchmark.services;
+package io.helidon.benchmark.reactive.services;
 
 import java.nio.charset.StandardCharsets;
 

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -1,8 +1,8 @@
 package com.test.hserver;
 
-import top.hserver.HServerApplication;
-import top.hserver.core.ioc.annotation.HServerBoot;
-import top.hserver.core.server.context.ConstConfig;
+
+import cn.hserver.HServerApplication;
+import cn.hserver.core.ioc.annotation.HServerBoot;
 
 /**
  * @author hxm

File: frameworks/Java/hserver/src/main/java/com/test/hserver/bean/World.java
Patch:
@@ -1,9 +1,9 @@
 package com.test.hserver.bean;
 
 public class World implements Comparable<World> {
-  private int id;
+  private final int id;
 
-  private int randomNumber;
+  private final int randomNumber;
 
   public World(int id, int randomNumber) {
     this.id = id;

File: frameworks/Java/hserver/src/main/java/com/test/hserver/db/DataSourceConfig.java
Patch:
@@ -1,9 +1,9 @@
 package com.test.hserver.db;
 
+import cn.hserver.core.ioc.annotation.Autowired;
+import cn.hserver.core.ioc.annotation.Bean;
+import cn.hserver.core.ioc.annotation.Configuration;
 import com.zaxxer.hikari.HikariDataSource;
-import top.hserver.core.ioc.annotation.Autowired;
-import top.hserver.core.ioc.annotation.Bean;
-import top.hserver.core.ioc.annotation.Configuration;
 
 import javax.sql.DataSource;
 

File: frameworks/Java/hserver/src/main/java/com/test/hserver/db/PostgresConfig.java
Patch:
@@ -1,6 +1,7 @@
 package com.test.hserver.db;
 
-import top.hserver.core.ioc.annotation.ConfigurationProperties;
+
+import cn.hserver.core.ioc.annotation.ConfigurationProperties;
 
 @ConfigurationProperties
 public class PostgresConfig {

File: frameworks/Java/hserver/src/main/java/com/test/hserver/task/TimeAdd.java
Patch:
@@ -1,8 +1,8 @@
 package com.test.hserver.task;
 
+import cn.hserver.core.ioc.annotation.Bean;
+import cn.hserver.core.ioc.annotation.Task;
 import com.test.hserver.util.DateUtil;
-import top.hserver.core.ioc.annotation.Bean;
-import top.hserver.core.ioc.annotation.Task;
 
 @Bean
 public class TimeAdd {

File: frameworks/Java/microhttp/src/main/java/db/WorldRow.java
Patch:
@@ -0,0 +1,3 @@
+package db;
+
+public record WorldRow(int id, int randomNumber) {}

File: frameworks/Java/microhttp/src/main/java/hello/HelloWebServer.java
Patch:
@@ -40,7 +40,7 @@ record JsonMessage(String message) {
         this.port = port;
     }
 
-    void start() throws IOException {
+    void start() throws IOException, InterruptedException {
         startUpdater();
         Options options = new Options()
                 .withHost(null) // wildcard any-address binding
@@ -54,6 +54,7 @@ void start() throws IOException {
                 .withRequestTimeout(Duration.ofSeconds(90));
         EventLoop eventLoop = new EventLoop(options, new DisabledLogger(), this::handle);
         eventLoop.start();
+        eventLoop.join();
     }
 
     void startUpdater() {
@@ -103,7 +104,7 @@ static byte[] jsonBody() {
         }
     }
 
-    public static void main(String[] args) throws IOException {
+    public static void main(String[] args) throws IOException, InterruptedException {
         int port = args.length > 0
                 ? Integer.parseInt(args[0])
                 : 8080;

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -11,7 +11,6 @@
 public class StartApp {
 
     public static void main(String[] args) {
-        ConstConfig.workerPool=Runtime.getRuntime().availableProcessors();
         HServerApplication.run(StartApp.class, 8888, args);
     }
 }

File: frameworks/Java/blade/src/main/java/hello/model/Fortune.java
Patch:
@@ -1,7 +1,8 @@
 package hello.model;
 
-import io.github.biezhi.anima.Model;
-import io.github.biezhi.anima.annotation.Table;
+
+import com.hellokaton.anima.Model;
+import com.hellokaton.anima.annotation.Table;
 
 @Table(name = "fortune")
 public class Fortune extends Model {

File: frameworks/Java/microhttp/src/main/java/hello/HelloWebServer.java
Patch:
@@ -51,7 +51,7 @@ void start() throws IOException {
                 .withMaxRequestSize(1_024 * 1_024)
                 .withReadBufferSize(1_024 * 64)
                 .withResolution(Duration.ofMillis(1_000))
-                .withSocketTimeout(Duration.ofSeconds(90));
+                .withRequestTimeout(Duration.ofSeconds(90));
         EventLoop eventLoop = new EventLoop(options, new DisabledLogger(), this::handle);
         eventLoop.start();
     }
@@ -95,7 +95,7 @@ void handle(Request request, Consumer<Response> callback) {
         }
     }
 
-    byte[] jsonBody() {
+    static byte[] jsonBody() {
         try {
             return OBJECT_MAPPER.writeValueAsBytes(new JsonMessage(MESSAGE));
         } catch (IOException e) {

File: frameworks/Java/isocket-nio/src/main/java/cn/ibaijia/tfb/processor/Message.java
Patch:
@@ -1,5 +1,8 @@
 package cn.ibaijia.tfb.processor;
 
+/**
+ * @author longzl
+ */
 public class Message {
 
     public String message;

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -11,6 +11,7 @@
 public class StartApp {
 
     public static void main(String[] args) {
+        ConstConfig.workerPool=Runtime.getRuntime().availableProcessors();
         HServerApplication.run(StartApp.class, 8888, args);
     }
 }

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -11,7 +11,6 @@
 public class StartApp {
 
     public static void main(String[] args) {
-        ConstConfig.workerPool=Runtime.getRuntime().availableProcessors()*2;
         HServerApplication.run(StartApp.class, 8888, args);
     }
 }

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -11,7 +11,7 @@
 public class StartApp {
 
     public static void main(String[] args) {
-        ConstConfig.workerPool=Runtime.getRuntime().availableProcessors();
+        ConstConfig.workerPool=Runtime.getRuntime().availableProcessors()*2;
         HServerApplication.run(StartApp.class, 8888, args);
     }
 }

File: frameworks/Java/hserver/src/main/java/com/test/hserver/StartApp.java
Patch:
@@ -2,6 +2,7 @@
 
 import top.hserver.HServerApplication;
 import top.hserver.core.ioc.annotation.HServerBoot;
+import top.hserver.core.server.context.ConstConfig;
 
 /**
  * @author hxm
@@ -10,6 +11,7 @@
 public class StartApp {
 
     public static void main(String[] args) {
+        ConstConfig.workerPool=Runtime.getRuntime().availableProcessors();
         HServerApplication.run(StartApp.class, 8888, args);
     }
 }

File: frameworks/Java/hserver/src/main/java/com/test/hserver/util/DateUtil.java
Patch:
@@ -10,8 +10,7 @@
  */
 public class DateUtil {
     private static final DateTimeFormatter GMT_FMT = DateTimeFormatter.ofPattern("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);
-    private static ZoneId zoneId = ZoneId.of("GMT");
-
+    private static final ZoneId zoneId = ZoneId.of("GMT");
     public static String getNow() {
         return GMT_FMT.format(LocalDateTime.now().atZone(zoneId));
     }

File: frameworks/Java/micronaut/src/main/java/benchmark/Application.java
Patch:
@@ -3,8 +3,8 @@
 import io.micronaut.runtime.Micronaut;
 
 public class Application {
-
     public static void main(String[] args) {
-        Micronaut.run(Application.class);
+        Micronaut.build(args)
+                .run(Application.class);
     }
 }
\ No newline at end of file

File: frameworks/Java/micronaut/src/main/java/benchmark/repository/EntityRepository.java
Patch:
@@ -2,10 +2,10 @@
 
 import benchmark.entity.Fortune;
 import benchmark.entity.World;
-import io.reactivex.Flowable;
-import io.reactivex.Single;
+import io.reactivex.rxjava3.core.Flowable;
+import io.reactivex.rxjava3.core.Single;
 
-public interface DbRepository {
+public interface EntityRepository {
     Single<World> getWorld(int id);
 
     Single<World> findAndUpdateWorld(int id, int randomNumber);

File: frameworks/Java/officefloor/src/woof_benchmark_rawsqlclient/src/main/java/net/officefloor/benchmark/RawSqlClientOfficeFloorMain.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.net.Socket;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.BitSet;
 import java.util.List;
 import java.util.concurrent.ThreadLocalRandom;
@@ -153,7 +154,7 @@ public RawSqlClientOfficeFloorMain(int socketCount, String server, int port, Str
 		// Create connection
 		PgConnectOptions connectOptions = new PgConnectOptions().setHost(server).setPort(port).setDatabase(database)
 				.setUser(username).setPassword(password).setCachePreparedStatements(true).setTcpNoDelay(true)
-				.setTcpQuickAck(true);
+				.setTcpQuickAck(true).setPipeliningLimit(1024);
 
 		// Provide connection
 		this.threadLocalQueryExecutor = new ThreadLocal<QueryExecutor>() {
@@ -278,6 +279,7 @@ public void update(int queryCount, UpdateSendResponse sender) {
 				worlds[lastIndex] = new World(row.getInteger(0), ThreadLocalRandom.current().nextInt(1, 10001));
 			}
 			if ((lastIndex + 1) >= queryCount) {
+				Arrays.sort(worlds, (a, b) -> a.id - b.id);
 				List<Integer> params = new ArrayList<>(queryCount * 2);
 				for (int i = 0; i < worlds.length; i++) {
 					World world = worlds[i];

File: frameworks/Java/officefloor/src/woof_benchmark_sqlclient/src/main/java/net/officefloor/benchmark/SqlClientOfficeFloorMain.java
Patch:
@@ -81,7 +81,7 @@ public SqlClientOfficeFloorMain(int socketCount, String server, int port, String
 		// Create connection
 		PgConnectOptions connectOptions = new PgConnectOptions().setHost(server).setPort(port).setDatabase(database)
 				.setUser(username).setPassword(password).setCachePreparedStatements(true).setTcpNoDelay(true)
-				.setTcpQuickAck(true);
+				.setTcpQuickAck(true).setPipeliningLimit(1024);
 
 		// Provide connection
 		this.threadLocalConnections = new ThreadLocal<Connections>() {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -55,6 +55,7 @@ public void handle(HttpRequest request, HttpResponse response) throws IOExceptio
         HttpBootstrap bootstrap = new HttpBootstrap();
         bootstrap.configuration()
                 .threadNum(cpuNum)
+                .headerLimiter(0)
                 .readBufferSize(1024 * 4)
                 .writeBufferSize(1024 * 4)
                 .readMemoryPool(16384 * 1024 * 4)

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -42,6 +42,7 @@ public static void main(String[] args) {
         bootstrap.configuration()
                 .threadNum(cpuNum)
                 .bannerEnabled(false)
+                .headerLimiter(0)
                 .readBufferSize(1024 * 4)
                 .writeBufferSize(1024 * 4)
                 .readMemoryPool(16384 * 1024 * 4)

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -70,7 +70,7 @@ public void stateEvent0(AioSession session, StateMachineEnum stateMachineEnum, T
                         processor.stateEvent(session, stateMachineEnum, throwable);
                     }
                 });
-        bootstrap.pipeline(routeHandle).setPort(8080).start();
+        bootstrap.httpHandler(routeHandle).setPort(8080).start();
     }
 
     private static void initDB(HttpRouteHandler routeHandle) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -58,7 +58,7 @@ public void stateEvent0(AioSession session, StateMachineEnum stateMachineEnum, T
                     }
                 });
         bootstrap.setPort(8080)
-                .pipeline(new HttpServerHandler() {
+                .httpHandler(new HttpServerHandler() {
                     @Override
                     public void handle(HttpRequest request, HttpResponse response) throws IOException {
                         containerRuntime.doHandle(request, response);

File: frameworks/Java/officefloor/src/woof_benchmark_sqlclient/src/main/java/net/officefloor/benchmark/SqlClientOfficeFloorMain.java
Patch:
@@ -63,7 +63,8 @@ public SqlClientOfficeFloorMain(int socketCount, String server, int port, String
 
 		// Create connection
 		PgConnectOptions connectOptions = new PgConnectOptions().setHost(server).setPort(port).setDatabase(database)
-				.setUser(username).setPassword(password).setCachePreparedStatements(true);
+				.setUser(username).setPassword(password).setCachePreparedStatements(true).setTcpNoDelay(true)
+				.setTcpQuickAck(true);
 
 		// Provide connection
 		this.threadLocalConnection = new ThreadLocal<PgConnection>() {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -11,7 +11,6 @@
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import org.smartboot.Message;
-import org.smartboot.aio.EnhanceAsynchronousChannelProvider;
 import org.smartboot.http.server.HttpBootstrap;
 import org.smartboot.http.server.HttpRequest;
 import org.smartboot.http.server.HttpResponse;
@@ -29,8 +28,6 @@ public class Bootstrap {
     static byte[] body = "Hello, World!".getBytes();
 
     public static void main(String[] args) {
-        System.setProperty("java.nio.channels.spi.AsynchronousChannelProvider", EnhanceAsynchronousChannelProvider.class.getName());
-
         HttpRouteHandler routeHandle = new HttpRouteHandler();
         routeHandle
                 .route("/plaintext", new HttpServerHandler() {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -1,6 +1,5 @@
 package org.smartboot.servlet;
 
-import org.smartboot.aio.EnhanceAsynchronousChannelProvider;
 import org.smartboot.http.server.HttpBootstrap;
 import org.smartboot.http.server.HttpRequest;
 import org.smartboot.http.server.HttpResponse;
@@ -20,8 +19,6 @@
 public class Bootstrap {
 
     public static void main(String[] args) {
-        System.setProperty("java.nio.channels.spi.AsynchronousChannelProvider", EnhanceAsynchronousChannelProvider.class.getName());
-
         ContainerRuntime containerRuntime = new ContainerRuntime();
         // plaintext
         ServletContextRuntime applicationRuntime = new ServletContextRuntime("/");

File: frameworks/Java/officefloor/src/woof_benchmark_spring/src/main/java/net/officefloor/benchmark/Fortune.java
Patch:
@@ -18,7 +18,4 @@ public class Fortune {
 
 	private String message;
 	
-	public String getMessage() {
-		return this.message;
-	}
 }

File: frameworks/Java/officefloor/src/woof_benchmark_woof/src/main/java/net/officefloor/benchmark/DatabaseOperationsFactory.java
Patch:
@@ -19,8 +19,9 @@ public interface DatabaseOperationsFactory {
 	 * @param username    Username.
 	 * @param password    Password.
 	 * @return {@link DatabaseOperations}.
+	 * @throws Throwable If fails to create {@link DatabaseOperations}.
 	 */
 	DatabaseOperations createDatabaseOperations(int socketCount, String server, int port, String database,
-			String username, String password);
+			String username, String password) throws Throwable;
 
 }
\ No newline at end of file

File: frameworks/Java/officefloor/src/woof_benchmark_woof/src/main/java/net/officefloor/benchmark/FortunesSendResponse.java
Patch:
@@ -9,8 +9,6 @@
 import java.util.Comparator;
 import java.util.List;
 
-import org.apache.commons.text.StringEscapeUtils;
-
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.escape.Escaper;
 import com.google.common.html.HtmlEscapers;
@@ -22,7 +20,6 @@
 import net.officefloor.server.http.impl.ProcessAwareServerHttpConnectionManagedObject;
 import net.officefloor.server.http.parse.HttpRequestParser;
 import net.officefloor.server.stream.ServerOutputStream;
-import net.officefloor.server.stream.ServerWriter;
 
 /**
  * Sends the Fortunes response.

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/MultipleQueriesHandler.java
Patch:
@@ -3,7 +3,7 @@
 import org.smartboot.http.common.utils.NumberUtils;
 import org.smartboot.http.server.HttpRequest;
 import org.smartboot.http.server.HttpResponse;
-import org.smartboot.http.server.HttpServerHandle;
+import org.smartboot.http.server.HttpServerHandler;
 
 import javax.sql.DataSource;
 import java.io.IOException;
@@ -17,15 +17,15 @@
  * @author 三刀
  * @version V1.0 , 2020/6/16
  */
-public class MultipleQueriesHandler extends HttpServerHandle {
+public class MultipleQueriesHandler extends HttpServerHandler {
     private DataSource dataSource;
 
     public MultipleQueriesHandler(DataSource dataSource) {
         this.dataSource = dataSource;
     }
 
     @Override
-    public void doHandle(HttpRequest httpRequest, HttpResponse response) throws IOException {
+    public void handle(HttpRequest httpRequest, HttpResponse response) throws IOException {
         int queries = Math.min(Math.max(NumberUtils.toInt(httpRequest.getParameter("queries"), 1), 1), 500);
         World[] worlds = new World[queries];
         try (Connection connection = dataSource.getConnection();

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/SingleQueryHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.smartboot.http.server.HttpRequest;
 import org.smartboot.http.server.HttpResponse;
-import org.smartboot.http.server.HttpServerHandle;
+import org.smartboot.http.server.HttpServerHandler;
 
 import javax.sql.DataSource;
 import java.io.IOException;
@@ -16,15 +16,15 @@
  * @author 三刀
  * @version V1.0 , 2020/6/16
  */
-public class SingleQueryHandler extends HttpServerHandle {
+public class SingleQueryHandler extends HttpServerHandler {
     private DataSource dataSource;
 
     public SingleQueryHandler(DataSource dataSource) {
         this.dataSource = dataSource;
     }
 
     @Override
-    public void doHandle(HttpRequest httpRequest, HttpResponse response) throws IOException {
+    public void handle(HttpRequest httpRequest, HttpResponse response) throws IOException {
         World world = new World();
         try (Connection connection = dataSource.getConnection();
              PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM World WHERE id=?");) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/UpdateHandler.java
Patch:
@@ -3,7 +3,7 @@
 import org.smartboot.http.common.utils.NumberUtils;
 import org.smartboot.http.server.HttpRequest;
 import org.smartboot.http.server.HttpResponse;
-import org.smartboot.http.server.HttpServerHandle;
+import org.smartboot.http.server.HttpServerHandler;
 
 import javax.sql.DataSource;
 import java.io.IOException;
@@ -18,15 +18,15 @@
  * @author 三刀
  * @version V1.0 , 2020/6/16
  */
-public class UpdateHandler extends HttpServerHandle {
+public class UpdateHandler extends HttpServerHandler {
     private DataSource dataSource;
 
     public UpdateHandler(DataSource dataSource) {
         this.dataSource = dataSource;
     }
 
     @Override
-    public void doHandle(HttpRequest httpRequest, HttpResponse response) throws IOException {
+    public void handle(HttpRequest httpRequest, HttpResponse response) throws IOException {
         int queries = Math.min(Math.max(NumberUtils.toInt(httpRequest.getParameter("queries"), 1), 1), 500);
         World[] worlds = new World[queries];
         StringJoiner updateSql = new StringJoiner(

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -4,7 +4,7 @@
 import org.smartboot.http.server.HttpBootstrap;
 import org.smartboot.http.server.HttpRequest;
 import org.smartboot.http.server.HttpResponse;
-import org.smartboot.http.server.HttpServerHandle;
+import org.smartboot.http.server.HttpServerHandler;
 import org.smartboot.http.server.impl.Request;
 import org.smartboot.servlet.conf.ServletInfo;
 import org.smartboot.socket.StateMachineEnum;
@@ -61,9 +61,9 @@ public void stateEvent0(AioSession session, StateMachineEnum stateMachineEnum, T
                     }
                 });
         bootstrap.setPort(8080)
-                .pipeline(new HttpServerHandle() {
+                .pipeline(new HttpServerHandler() {
                     @Override
-                    public void doHandle(HttpRequest request, HttpResponse response) throws IOException {
+                    public void handle(HttpRequest request, HttpResponse response) throws IOException {
                         containerRuntime.doHandle(request, response);
                     }
                 })

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/JsonUtil.java
Patch:
@@ -34,7 +34,6 @@ public static void writeJsonBytes(HttpServletResponse httpResponse, Object obj)
         try {
             stream.reset(null);
             stream.writeVal(obj.getClass(), obj);
-            stream.buffer();
             Slice slice = stream.buffer();
             httpResponse.setContentLength(slice.tail());
             httpResponse.getOutputStream().write(slice.data(), 0, slice.tail());

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -24,7 +24,7 @@ public static void main(String[] args) {
 
         ContainerRuntime containerRuntime = new ContainerRuntime();
         // plaintext
-        ApplicationRuntime applicationRuntime = new ApplicationRuntime("/");
+        ServletContextRuntime applicationRuntime = new ServletContextRuntime("/");
         ServletInfo plainTextServletInfo = new ServletInfo();
         plainTextServletInfo.setServletName("plaintext");
         plainTextServletInfo.setServletClass(HelloWorldServlet.class.getName());

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/JsonUtil.java
Patch:
@@ -19,7 +19,6 @@ public static void writeJsonBytes(HttpResponse httpResponse, Object obj) {
         try {
             stream.reset(null);
             stream.writeVal(obj.getClass(), obj);
-            stream.buffer();
             Slice slice = stream.buffer();
             httpResponse.setContentLength(slice.tail());
             httpResponse.getOutputStream().write(slice.data(), 0, slice.tail());

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/JsonUtil.java
Patch:
@@ -4,6 +4,7 @@
 import com.jsoniter.output.JsonStreamPool;
 import com.jsoniter.spi.JsonException;
 import com.jsoniter.spi.Slice;
+import org.smartboot.http.server.HttpResponse;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;

File: frameworks/Java/servlet/src/main/java/hello/FortunesServlet.java
Patch:
@@ -40,7 +40,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		res.setCharacterEncoding(UTF8);
 		res.setContentType(CONTENT_TYPE_HTML_UTF8);
 
-		final List<Fortune> fortunes = new ArrayList<>(32);
+		final List<Fortune> fortunes = new ArrayList<>();
 
 		try (Connection conn = dataSource.getConnection()) {
 			Common.modifySQLConnectionSettings(conn);

File: frameworks/Java/wizzardo-http/src/main/java/com/wizzardo/techempower/DBController.java
Patch:
@@ -147,7 +147,7 @@ public void fortunes() {
             try {
                 if (res.succeeded()) {
                     PgRowSet result = res.result();
-                    ArrayList<Fortune> fortunes = new ArrayList<>(result.size() + 1);
+                    ArrayList<Fortune> fortunes = new ArrayList<>();
                     for (Row row : result) {
                         fortunes.add(new Fortune(row.getInteger(0), row.getString(1)));
                     }

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -39,7 +39,7 @@ public static void main(String[] args) {
         // json
         ServletInfo jsonServletInfo = new ServletInfo();
         jsonServletInfo.setServletName("json");
-        jsonServletInfo.setServletClass(HelloWorldServlet.class.getName());
+        jsonServletInfo.setServletClass(JsonServlet.class.getName());
         jsonServletInfo.addMapping("/json");
         applicationRuntime.getDeploymentInfo().addServlet(jsonServletInfo);
         containerRuntime.addRuntime(applicationRuntime);

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/servlet/Bootstrap.java
Patch:
@@ -39,7 +39,7 @@ public static void main(String[] args) {
         // json
         ServletInfo jsonServletInfo = new ServletInfo();
         jsonServletInfo.setServletName("json");
-        jsonServletInfo.setServletClass(HelloWorldServlet.class.getName());
+        jsonServletInfo.setServletClass(JsonServlet.class.getName());
         jsonServletInfo.addMapping("/json");
         applicationRuntime.getDeploymentInfo().addServlet(jsonServletInfo);
         containerRuntime.addRuntime(applicationRuntime);

File: frameworks/Java/voovan/src/main/java/org/voovan/VoovanTFB.java
Patch:
@@ -36,7 +36,7 @@ public String getMessage() {
                 }
                 
                 public int hashCode(){
-                    return message.hashCode();
+                     return 98821452;
                 }
         }
         
@@ -51,7 +51,7 @@ public static void main(String[] args) {
                 webServerConfig.setPort(8080);
                 webServerConfig.setHotSwapInterval(0);
                 webServerConfig.setCache(true);
-                webServerConfig.getModuleonfigs().clear();
+                webServerConfig.getModuleConfigs().clear();
                 webServerConfig.getRouterConfigs().clear();
                 webServerConfig.setEnablePathVariables(false);
                 webServerConfig.setEnableWebSocket(false);
@@ -72,7 +72,7 @@ public void process(HttpRequest req, HttpResponse resp) throws Exception {
                         }
                 });
 
-                Logger.setEnable(false);
+                //Logger.setEnable(false);
 
                 webServer.serve();
         }

File: frameworks/Java/armeria/src/main/java/hello/services/PostgresDbService.java
Patch:
@@ -81,7 +81,7 @@ private static int getRandomNumber() {
     return 1 + ThreadLocalRandom.current().nextInt(10000);
   }
 
-  private int getSanitizedCount(String count) {
+  private static int getSanitizedCount(String count) {
     try {
       int intCount = Integer.parseInt(count);
       if (intCount < 1) {

File: frameworks/Java/dropwizard/src/main/java/com/example/helloworld/resources/FortuneResource.java
Patch:
@@ -25,7 +25,7 @@ public FortuneResource(FortuneDAO fortuneDAO) {
 	}
 
 	@GET
-	@UnitOfWork(transactional = false) // Needed only for Hibernate - not for Mongo or JDBI
+	@UnitOfWork // Needed only for Hibernate - not for Mongo or JDBI
 	public FortuneView dbTest() {
 		final List<Fortune> fortunes = fortuneDAO.list();
 

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -88,6 +88,7 @@ public void stateEvent0(AioSession session, StateMachineEnum stateMachineEnum, T
         server.setReadBufferSize(1024 * 4);
         int cpuNum = Runtime.getRuntime().availableProcessors();
         server.setThreadNum((cpuNum >> 1) + cpuNum);
+//        messageProcessor.addPlugin(new BufferPageMonitorPlugin(server, 6));
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -33,7 +33,7 @@ public static void main(String[] args) {
 //        System.setProperty("smart-socket.bufferPool.pageNum", 16 + "");
         System.setProperty("smart-socket.session.writeChunkSize", (1024 * 4) + "");
 //        System.setProperty("sun.nio.ch.maxCompletionHandlersOnStack", "4");
-        RouteHandle routeHandle = new RouteHandle(System.getProperty("webapps.dir", "./"));
+        RouteHandle routeHandle = new RouteHandle();
         routeHandle.route("/plaintext", new HttpHandle() {
 
 

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -18,6 +18,7 @@
 import org.smartboot.socket.MessageProcessor;
 import org.smartboot.socket.StateMachineEnum;
 import org.smartboot.socket.extension.plugins.MonitorPlugin;
+import org.smartboot.socket.extension.plugins.SocketOptionPlugin;
 import org.smartboot.socket.extension.processor.AbstractMessageProcessor;
 import org.smartboot.socket.transport.AioQuickServer;
 import org.smartboot.socket.transport.AioSession;
@@ -79,7 +80,8 @@ public void stateEvent0(AioSession<Http11Request> session, StateMachineEnum stat
                 processor.stateEvent(session, stateMachineEnum, throwable);
             }
         };
-        messageProcessor.addPlugin(new MonitorPlugin(5  ));
+        messageProcessor.addPlugin(new MonitorPlugin(5));
+        messageProcessor.addPlugin(new SocketOptionPlugin());
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), messageProcessor);
         server.setReadBufferSize(1024 * 4);

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FrameworkTest.java
Patch:
@@ -22,7 +22,7 @@ public class FrameworkTest implements GreenApp {
     private String host;
     private int concurrentWritesPerChannel;
   
-    private int telemetryPort;//for monitoring
+    private int telemetryPort;
     private int minMemoryOfInputPipes;
     private int dbCallMaxResponseSize;
 	private	final int dbCallMaxResponseCount;
@@ -58,7 +58,7 @@ public class FrameworkTest implements GreenApp {
 		System.setProperty("java.lang.Integer.IntegerCache.high", ""+Integer.MAX_VALUE);
 
 		ServerSocketWriterStage.BASE_ADJUST = Float.parseFloat(System.getProperty("xx.ratio", "1"));
-		ServerSocketWriterStage.HARD_LIMIT_NS = Long.parseLong(System.getProperty("xx.limitns", "180000"));		
+		ServerSocketWriterStage.HARD_LIMIT_NS = Long.parseLong(System.getProperty("xx.limitns", "120000"));		
 	}
 	
     public FrameworkTest() {

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/PoolManager.java
Patch:
@@ -18,8 +18,9 @@ public PoolManager(PgConnectOptions options, PoolOptions poolOptions) {
 		this.options = options;
 		this.poolOptions = poolOptions;
 		
-		this.vertx = Vertx.vertx(new VertxOptions().
-				  setPreferNativeTransport(true)
+		this.vertx = Vertx.vertx(new VertxOptions()
+				  .setPreferNativeTransport(true)
+				  .setWorkerPoolSize(4)//limit threads for this track
 				);
 		
 		boolean usingNative = vertx.isNativeTransportEnabled();

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/ProcessUpdate.java
Patch:
@@ -95,7 +95,8 @@ private PreparedQuery selectableQuery() {
 					
 					connection.prepare("SELECT * FROM world WHERE id=$1", ph -> {
 						if (ph.succeeded()) {							
-							selectQuery = ph.result();														
+							selectQuery = ph.result();	
+							
 							building = false;
 							if (updateQuery==null) {
 								updateQuery();

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FrameworkTest.java
Patch:
@@ -108,7 +108,7 @@ public FrameworkTest(String host, int port,
     	this.telemetryPort = telemetryPort;
     	this.pipelineBits = 15;//max concurrent in flight database requests 1<<pipelineBits
     	            
-    	this.dbCallMaxResponseCount = c;
+    	this.dbCallMaxResponseCount = c*8; //this will limit the in flight DB calls so make it larger
     	this.jsonMaxResponseCount = c*16*4;
     	
     	this.dbCallMaxResponseSize = 20_000; //for 500 mult db call in JSON format

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FortunesObject.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import io.reactiverse.pgclient.Tuple;
 
 public class FortunesObject {
 

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FrameworkTest.java
Patch:
@@ -98,7 +98,7 @@ public FrameworkTest(String host, int port,
     	this.payloadText = payloadResponse;
     	this.payload = payloadText.getBytes();
     	
-    	this.connectionsPerTrack = 1;
+    	this.connectionsPerTrack = 20;
     	this.connectionPort = 5432;
     	this.bindPort = port;
     	this.host = host;

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/DBRest.java
Patch:
@@ -20,9 +20,7 @@ public DBRest(GreenRuntime runtime, PgPoolOptions options, int pipelineBits,
 			      int maxResponseCount, int maxResponseSize) {
 		
 		pm = new PoolManager(options);
-				
-		maxResponseCount = Math.max(maxResponseCount, ((1<<pipelineBits)/20));//match response count to expected db calls
-		
+			
 		HTTPResponseService service = runtime.newCommandChannel().newHTTPResponseService(
 				                maxResponseCount, 
 				                maxResponseSize);

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/GreenLightning.java
Patch:
@@ -10,6 +10,7 @@ public static void main(String[] args) {
 		
 		GraphManager.showThreadIdOnTelemetry = true;		
 		GraphManager.showScheduledRateOnTelemetry = true;
+		GraphManager.showMessageCountRangeOnTelemetry = true;
 		
 		GreenRuntime.run(new FrameworkTest(),args);
 	

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FrameworkTest.java
Patch:
@@ -59,7 +59,6 @@ public class FrameworkTest implements GreenApp {
 
 		//TODO: test with normal polll and a very fast reader, vs epoll and slower reader.
 		
-		//TODO: does this work??
 	//	System.setProperty("java.nio.channels.spi.SelectorProvider","sun.nio.ch.PollSelectorProvider");
 		//System.setProperty("java.nio.channels.spi.SelectorProvider","com.javanut.gl.CustomEPollSelectorProvider");//
 		

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -68,7 +68,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         server.setReadBufferSize(1024 * 4);
         int cpuNum = Runtime.getRuntime().availableProcessors();
         int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 4;
-        server.setBossThreadNum(cpuNum+4);
+        server.setBossThreadNum(cpuNum << 1);
 //        server.setBossShareToWorkerThreadNum(shareNum);
 //        server.setWorkerThreadNum(cpuNum >> 1);
         try {

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/GreenLightning.java
Patch:
@@ -6,7 +6,8 @@
 public class GreenLightning {
 
 	public static void main(String[] args) {
-			
+		//System.setProperty("pronghorn.processors", "28");//only for local testing, do not send to tech empower
+		
 		GraphManager.showThreadIdOnTelemetry = true;		
 		GraphManager.showScheduledRateOnTelemetry = true;
 		

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/GreenLightning.java
Patch:
@@ -6,6 +6,9 @@
 public class GreenLightning {
 
 	public static void main(String[] args) {
+			
+		GraphManager.showThreadIdOnTelemetry = true;		
+		GraphManager.showScheduledRateOnTelemetry = true;
 		
 		GreenRuntime.run(new FrameworkTest(),args);
 	

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -68,7 +68,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         server.setReadBufferSize(1024 * 4);
         int cpuNum = Runtime.getRuntime().availableProcessors();
         int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 4;
-        server.setBossThreadNum(cpuNum+1);
+        server.setBossThreadNum(cpuNum+4);
 //        server.setBossShareToWorkerThreadNum(shareNum);
 //        server.setWorkerThreadNum(cpuNum >> 1);
         try {

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/ProcessUpdate.java
Patch:
@@ -14,9 +14,6 @@
 import io.reactiverse.pgclient.PgIterator;
 import io.reactiverse.pgclient.Tuple;
 
-//this is rolled back to simple solution which has good peformance
-//seems like we could do better but each attempt has not shown any improvement.
-
 public class ProcessUpdate {
 	
 	private transient ObjectPipe<ResultObject> DBUpdateInFlight;	

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -68,9 +68,9 @@ public static void http(MessageProcessor<Http11Request> processor) {
         server.setReadBufferSize(1024 * 4);
         int cpuNum = Runtime.getRuntime().availableProcessors();
         int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 4;
-        server.setBossThreadNum(cpuNum);
-        server.setBossShareToWorkerThreadNum(shareNum);
-        server.setWorkerThreadNum(cpuNum >> 1);
+        server.setBossThreadNum(cpuNum+1);
+//        server.setBossShareToWorkerThreadNum(shareNum);
+//        server.setWorkerThreadNum(cpuNum >> 1);
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -67,10 +67,10 @@ public static void http(MessageProcessor<Http11Request> processor) {
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 4);
         int cpuNum = Runtime.getRuntime().availableProcessors();
-        int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 8;
+        int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 4;
         server.setBossThreadNum(cpuNum);
         server.setBossShareToWorkerThreadNum(shareNum);
-        server.setWorkerThreadNum(cpuNum - shareNum);
+        server.setWorkerThreadNum(cpuNum >> 1);
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -70,7 +70,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 8;
         server.setBossThreadNum(cpuNum);
         server.setBossShareToWorkerThreadNum(shareNum);
-        server.setWorkerThreadNum((cpuNum - shareNum) * 2);
+        server.setWorkerThreadNum(cpuNum - shareNum);
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FrameworkTest.java
Patch:
@@ -155,7 +155,7 @@ public FrameworkTest(String host, int port,
 	@Override
     public void declareConfiguration(GreenFramework framework) {
 		
-		framework.setDefaultRate(50_000L);			
+		framework.setDefaultRate(200_000L);		
 	
 		//for 14 cores this is expected to use less than 16G, must use next largest prime to ensure smaller groups are not multiples.
 		framework.useHTTP1xServer(bindPort, this::parallelBehavior) //standard auto-scale

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/ProcessUpdate.java
Patch:
@@ -14,6 +14,9 @@
 import io.reactiverse.pgclient.PgIterator;
 import io.reactiverse.pgclient.Tuple;
 
+//this is rolled back to simple solution which has good peformance
+//seems like we could do better but each attempt has not shown any improvement.
+
 public class ProcessUpdate {
 	
 	private transient ObjectPipe<ResultObject> DBUpdateInFlight;	

File: frameworks/Java/officefloor/src/woof_benchmark_spring/src/main/java/net/officefloor/benchmark/FortuneRepository.java
Patch:
@@ -4,5 +4,5 @@
 import org.springframework.stereotype.Repository;
 
 @Repository
-public interface FortunueRepository extends CrudRepository<Fortune, Integer> {
+public interface FortuneRepository extends CrudRepository<Fortune, Integer> {
 }

File: frameworks/Java/officefloor/src/woof_benchmark_spring/src/main/java/net/officefloor/benchmark/FortunesLogic.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class FortunesLogic {
 
-	public Fortune[] getFortunes(FortunueRepository repository) {
+	public Fortune[] getFortunes(FortuneRepository repository) {
 		List<Fortune> fortunes = new ArrayList<>();
 		repository.findAll().forEach((fortune) -> fortunes.add(fortune));
 		fortunes.add(new Fortune(0, "Additional fortune added at request time."));

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -67,7 +67,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 4);
         int cpuNum = Runtime.getRuntime().availableProcessors();
-        int shareNum = Runtime.getRuntime().availableProcessors() * 7 / 8;
+        int shareNum = Runtime.getRuntime().availableProcessors() * 3 / 8;
         server.setBossThreadNum(cpuNum);
         server.setBossShareToWorkerThreadNum(shareNum);
         server.setWorkerThreadNum((cpuNum - shareNum) * 2);

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/Field.java
Patch:
@@ -1,4 +1,4 @@
-package com.ociweb.gl.benchmark;
+package com.javanut.gl.benchmark;
 
 public enum Field {
 	//identifiers for each field used by routes and/or structures

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FortuneObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.ociweb.gl.benchmark;
+package com.javanut.gl.benchmark;
 
 public class FortuneObject implements Comparable<FortuneObject>{
 

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/FortunesObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.ociweb.gl.benchmark;
+package com.javanut.gl.benchmark;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/PoolManager.java
Patch:
@@ -1,4 +1,4 @@
-package com.ociweb.gl.benchmark;
+package com.javanut.gl.benchmark;
 
 import io.reactiverse.pgclient.PgClient;
 import io.reactiverse.pgclient.PgPool;

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/ResultObject.java
Patch:
@@ -1,4 +1,4 @@
-package com.ociweb.gl.benchmark;
+package com.javanut.gl.benchmark;
 
 public class ResultObject {
 

File: frameworks/Java/greenlightning/src/main/java/com/javanut/gl/benchmark/Struct.java
Patch:
@@ -1,4 +1,4 @@
-package com.ociweb.gl.benchmark;
+package com.javanut.gl.benchmark;
 
 public enum Struct {
 	PLAINTEXT_ROUTE, JSON_ROUTE, 

File: frameworks/Java/grizzly/src-jersey/main/java/hello/JsonResource.java
Patch:
@@ -2,8 +2,9 @@
 
 import static javax.ws.rs.core.MediaType.APPLICATION_JSON;
 
-import javax.inject.Singleton;
 import java.util.Collections;
+
+import javax.inject.Singleton;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;

File: frameworks/Java/grizzly/src-jersey/main/java/hello/TFBApplication.java
Patch:
@@ -1,12 +1,12 @@
 package hello;
 
 import javax.inject.Singleton;
+import javax.persistence.EntityManagerFactory;
 
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
 import org.glassfish.jersey.jackson.JacksonFeature;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.server.mvc.mustache.MustacheMvcFeature;
-import org.hibernate.SessionFactory;
 
 public class TFBApplication extends ResourceConfig {
 	public TFBApplication() {
@@ -17,8 +17,7 @@ public TFBApplication() {
 		register(new AbstractBinder() {
 			@Override
 			protected void configure() {
-				bindFactory(SessionFactoryFactory.class).to(SessionFactory.class).in(
-						Singleton.class);
+				bindFactory(EMFactory.class).to(EntityManagerFactory.class).in(Singleton.class);
 			}
 		});
 	}

File: frameworks/Java/ninja-standalone/src/main/java/controllers/HelloFortuneController.java
Patch:
@@ -24,7 +24,7 @@ public Result index() {
         List<Fortune> fortunes = fortuneDao.getAll();
         fortunes.add(new Fortune(0, "Additional fortune added at request time."));
         Collections.sort(fortunes);
-
-        return Results.html().render("fortunes", fortunes);
+        //Cache control header is set to disable the double setting of the date header.
+        return Results.html().render("fortunes", fortunes).addHeader(Result.CACHE_CONTROL, "");
     }
 }

File: frameworks/Java/ninja-standalone/src/main/java/controllers/HelloJsonController.java
Patch:
@@ -9,7 +9,8 @@
 public class HelloJsonController {
 
     public Result index() {
-        return Results.json().render(new Message("Hello, World!"));
+    	//Cache control header is set to disable the double setting of the date header.
+        return Results.json().render(new Message("Hello, World!")).addHeader(Result.CACHE_CONTROL, "");
     }
 
     public static final class Message {

File: frameworks/Java/ninja-standalone/src/main/java/controllers/HelloPlaintextController.java
Patch:
@@ -9,7 +9,8 @@
 public class HelloPlaintextController {
 
     public Result index() {
-        return Results.text().render("Hello, World!");
+    	//Cache control header is set to disable the double setting of the date header.
+        return Results.text().render("Hello, World!").addHeader(Result.CACHE_CONTROL, "");
     }
 
 }

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessUpdate.java
Patch:
@@ -57,7 +57,7 @@ public boolean updateRestRequest(HTTPRequestReader request) {
 		long seqCode = request.getSequenceCode();
 		int temp = requestsInFlight.incrementAndGet();
 		
-		if ((pause.get()==0) && DBUpdateInFlight.hasRoomFor(queries) && service.hasRoomFor(temp) ) {		
+		if ((pause.get()<20) && DBUpdateInFlight.hasRoomFor(queries) && service.hasRoomFor(temp) ) {		
 			    
 				List<Tuple> args = new ArrayList<Tuple>(queries);
 				List<ResultObject> objs = new ArrayList<ResultObject>(queries);
@@ -152,8 +152,7 @@ private void execUpdate(List<ResultObject> toUpdate, List<Tuple> args, int i) {
 			if (ar.succeeded()) {
 		    	status = 200;
 		    	pause.decrementAndGet();
-			} else {	
-
+			} else {
 				execUpdate(toUpdate, args, 0);
 				return;
 //				System.out.println("unable to update");

File: frameworks/Java/vertx-web/src/main/java/io/vertx/benchmark/App.java
Patch:
@@ -499,7 +499,9 @@ void updateHandler(final RoutingContext ctx) {
   @Override
   public void start() {
     final Router app = Router.router(vertx);
-
+    // initialize the date header
+    date = DateTimeFormatter.RFC_1123_DATE_TIME.format(ZonedDateTime.now());
+    // refresh the value as a periodic task
     vertx.setPeriodic(1000, handler -> date = DateTimeFormatter.RFC_1123_DATE_TIME.format(ZonedDateTime.now()));
 
     final MongoDBBenchmark mongoDBBenchmark = new MongoDBBenchmark(vertx, config());

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FrameworkTest.java
Patch:
@@ -170,10 +170,11 @@ public void declareConfiguration(GreenFramework framework) {
     			 .setConcurrentChannelsPerDecryptUnit(concurrentWritesPerChannel)                //16K   14 bits
     	
     			 //NOTE: not sure this is optimal yet ...
+    			 //TODO: neeed to allow for multiple writes one pipe! big dif.
     			// .setConcurrentChannelsPerEncryptUnit(Math.max(1,concurrentWritesPerChannel/2))  //8K    
-    			 .setConcurrentChannelsPerEncryptUnit(concurrentWritesPerChannel)
+    			 .setConcurrentChannelsPerEncryptUnit(concurrentWritesPerChannel/4)//4)
     			 
-    	//		 .disableEPoll()
+    			 .disableEPoll() //provides advantage in JSON test....
  						 
     			 .setMaxQueueIn(queueLengthOfPendingRequests)
     			 .setMaxRequestSize(maxRequestSize)

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -54,8 +54,8 @@ public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 4);
-        server.setThreadNum(Runtime.getRuntime().availableProcessors());
-//        server.setReactor(true);
+        server.setBossThreadNum(Runtime.getRuntime().availableProcessors());
+        server.setThreadNum(Runtime.getRuntime().availableProcessors() >> 1);
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/restexpress/src/main/java/hello/controller/PlaintextController.java
Patch:
@@ -1,13 +1,13 @@
 package hello.controller;
 
-import com.strategicgains.restexpress.Request;
-import com.strategicgains.restexpress.Response;
+import org.restexpress.Request;
+import org.restexpress.Response;
 
 public class PlaintextController
 {
 	private static final String MESSAGE = "Hello, World!";
 
-	public String helloWorld(Request request, Response response)
+	public String sayHello(Request request, Response response)
 	{
 		response.setContentType("text/plain");
 		return MESSAGE;

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessFortune.java
Patch:
@@ -53,7 +53,7 @@ public boolean restFortuneRequest(HTTPRequestReader request) {
 	
 			target.setStatus(-2);//out for work	
 			target.clear();
-		
+
 			pm.pool().preparedQuery( "SELECT id, message FROM fortune", r -> {
 				    //NOTE: we want to do as little work here a s possible since
 				    //      we want this thread to get back to work on other calls.

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -55,7 +55,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 4);
         server.setThreadNum(Runtime.getRuntime().availableProcessors());
-        server.setReactor(true);
+//        server.setReactor(true);
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -54,7 +54,8 @@ public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 4);
-        server.setThreadNum((int) (Runtime.getRuntime().availableProcessors() * 1.2));
+        server.setThreadNum(Runtime.getRuntime().availableProcessors());
+        server.setReactor(true);
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -52,8 +52,8 @@ public void doHandle(HttpRequest request, HttpResponse response) throws IOExcept
     public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
-        server.setReadBufferSize(1024 * 4);
-        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.1));
+        server.setReadBufferSize(1024 * 2);
+        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.2));
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/DBRest.java
Patch:
@@ -16,7 +16,8 @@ public class DBRest implements RestMethodListener, PubSubMethodListener, TickLis
 	private final ProcessQuery processQuery;
 	private final transient PoolManager pm;
 	
-	public DBRest(GreenRuntime runtime, PgPoolOptions options, int pipelineBits, int maxResponseCount, int maxResponseSize) {
+	public DBRest(GreenRuntime runtime, PgPoolOptions options, int pipelineBits, 
+			      int maxResponseCount, int maxResponseSize) {
 		
 		pm = new PoolManager(options);
 		
@@ -26,7 +27,7 @@ public DBRest(GreenRuntime runtime, PgPoolOptions options, int pipelineBits, int
 				                maxResponseCount, 
 				                maxResponseSize);
 		
-		processUpdate = new ProcessUpdate(pipelineBits, service, pm);
+		processUpdate = new ProcessUpdate(pipelineBits, service, pm);		
 		processFortune = new ProcessFortune(pipelineBits, service, pm);
 		processQuery = new ProcessQuery(pipelineBits, service, pm);
 		

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -23,7 +23,7 @@ public class Bootstrap {
     public static void main(String[] args) {
         System.setProperty("smart-socket.server.pageSize", (16 * 1024 * 1024) + "");
         System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
-        System.setProperty("sun.nio.ch.maxCompletionHandlersOnStack","8");
+        System.setProperty("sun.nio.ch.maxCompletionHandlersOnStack","2");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 
@@ -53,7 +53,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 4);
-//        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.5));
+        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.1));
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessFortune.java
Patch:
@@ -30,8 +30,8 @@ public void tickEvent() {
 		
 		//for fortune
 		{
-			FortunesObject temp = fortuneInFlight.tailObject();
-			while (isReadyFortune(temp)) {			
+			FortunesObject temp;
+			while (isReadyFortune(temp = fortuneInFlight.tailObject())) {			
 				if (consumeResultObjectFortune(temp)) {
 					temp = fortuneInFlight.tailObject();
 				} else {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessQuery.java
Patch:
@@ -36,8 +36,8 @@ public ProcessQuery(int pipelineBits, HTTPResponseService service, PoolManager p
 	public void tickEvent() { 
 		//for DBRest
 		{
-			ResultObject temp = DBRestInFlight.tailObject();
-			while (isReadyDBRest(temp)) {
+			ResultObject temp;
+			while (isReadyDBRest(temp = DBRestInFlight.tailObject())) {
 				if (consumeResultObjectDBRest(temp)) {
 					temp = DBRestInFlight.tailObject();
 				} else {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -23,7 +23,7 @@ public class Bootstrap {
     public static void main(String[] args) {
         System.setProperty("smart-socket.server.pageSize", (16 * 1024 * 1024) + "");
         System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
-//        System.setProperty("sun.nio.ch.maxCompletionHandlersOnStack","32");
+        System.setProperty("sun.nio.ch.maxCompletionHandlersOnStack","8");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -23,6 +23,7 @@ public class Bootstrap {
     public static void main(String[] args) {
         System.setProperty("smart-socket.server.pageSize", (16 * 1024 * 1024) + "");
         System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
+//        System.setProperty("sun.nio.ch.maxCompletionHandlersOnStack","32");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/DBRest.java
Patch:
@@ -36,11 +36,11 @@ public void tickEvent() {
 		processQuery.tickEvent();
 		//removes DB pool if it is not longer in use
 		pm.clean();
-		
+			
 		
 	}
 	
-	public boolean restFortuneRequest(HTTPRequestReader request) {
+	public boolean restFortuneRequest(HTTPRequestReader request) {		
 		return processFortune.restFortuneRequest(request);
 	}
 	

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessQuery.java
Patch:
@@ -37,7 +37,7 @@ public void tickEvent() {
 		//for DBRest
 		{
 			ResultObject temp = DBRestInFlight.tailObject();
-			while (isReadyDBRest(temp)) {			
+			while (isReadyDBRest(temp)) {
 				if (consumeResultObjectDBRest(temp)) {
 					temp = DBRestInFlight.tailObject();
 				} else {
@@ -116,6 +116,7 @@ private void sendQueries(PgPool p, int queries, long con, long seq) {
 	public boolean singleRestRequest(HTTPRequestReader request) { 
 
 		final ResultObject target = DBRestInFlight.headObject();
+
 		if (null!=target && -1==target.getStatus()) {
 			target.setConnectionId(request.getConnectionId());
 			target.setSequenceId(request.getSequenceCode());
@@ -138,8 +139,7 @@ public boolean singleRestRequest(HTTPRequestReader request) {
 						target.setStatus(500);
 					}				
 				});
-
-			
+	   			
 			DBRestInFlight.moveHeadForward(); //always move to ensure this can be read.
 			return true;
 		} else {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessUpdate.java
Patch:
@@ -72,7 +72,7 @@ public boolean updateRestRequest(HTTPRequestReader request) {
 						worldObject.setGroupSize(queries);
 						
 						worldObject.setId(randomValue());
-												
+											 	
 						pm.pool().preparedQuery("SELECT * FROM world WHERE id=$1", Tuple.of(worldObject.getId()), r -> {
 								if (r.succeeded()) {
 																		
@@ -86,8 +86,7 @@ public boolean updateRestRequest(HTTPRequestReader request) {
 							        
 							        ///////////////////////////////////
 							        //set the new random value in this object
-							        worldObject.setResult(randomValue());
-							        							       
+							        worldObject.setResult(randomValue());			       
 							        
 							        pm.pool().preparedQuery("UPDATE world SET randomnumber=$1 WHERE id=$2", 							        		
 							        			Tuple.of(worldObject.getResult(), worldObject.getId()), ar -> {							        	

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -51,7 +51,7 @@ public void doHandle(HttpRequest request, HttpResponse response) throws IOExcept
     public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
-        server.setReadBufferSize(1024 * 8);
+        server.setReadBufferSize(1024 * 4);
 //        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.5));
         try {
             server.start();

File: frameworks/Java/play2-java/play2-java-jpa-hikaricp/app/models/World.java
Patch:
@@ -20,7 +20,7 @@ public class World {
     public Long randomNumber;
 
     public static World findById(final Long id, final JPAApi jpa) {
-        return jpa.withTransaction("default", true, em -> em.find(World.class, id));
+        return jpa.withTransaction("default", true, em -> { return em.find(World.class, id); });
     }
 
     public static List<World> save(final List<World> worlds, final JPAApi jpa) {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/PoolManager.java
Patch:
@@ -17,7 +17,7 @@ public PoolManager(PgPoolOptions options) {
 		
 	public PgPool pool() {
 		if (null==pool) {
-			pool = PgClient.pool(options);
+			pool = PgClient.pool(options);			
 		}
 		lastUsed = System.nanoTime();
 		return pool;

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FrameworkTest.java
Patch:
@@ -97,7 +97,7 @@ public FrameworkTest(String host, int port,
     	this.jsonMaxResponseSize = 1<<8;
 
     	this.maxQueueOut = 64;
-    	this.maxConnectionBits = 9;
+    	this.maxConnectionBits = 10;
     	this.maxRequestSize = 1<<9;
     	    	
     	if (!"127.0.0.1".equals(System.getProperty("host",null))) { 

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FrameworkTest.java
Patch:
@@ -59,7 +59,7 @@ public FrameworkTest() {
     	//this server works best with  -XX:+UseNUMA    	
     	this(System.getProperty("host","0.0.0.0"), 
     		 8080,    	//default port for test 
-    		 7,       	//default concurrency per track
+    		 13,       	//default concurrency per track
     		 2*(1<<14), //request queue length 
     		 1<<22,     //default total size of network buffer used by blocks
     		 Integer.parseInt(System.getProperty("telemetry.port", "-1")),
@@ -97,7 +97,7 @@ public FrameworkTest(String host, int port,
     	this.jsonMaxResponseSize = 1<<8;
 
     	this.maxQueueOut = 64;
-    	this.maxConnectionBits = 13;
+    	this.maxConnectionBits = 9;
     	this.maxRequestSize = 1<<9;
     	    	
     	if (!"127.0.0.1".equals(System.getProperty("host",null))) { 

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -21,7 +21,7 @@ public class Bootstrap {
     static byte[] body = "Hello, World!".getBytes();
 
     public static void main(String[] args) {
-        System.setProperty("smart-socket.server.pageSize", (5 * 1024 * 1024) + "");
+        System.setProperty("smart-socket.server.pageSize", (16 * 1024 * 1024) + "");
         System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -52,7 +52,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 8);
-        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.5));
+//        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.5));
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FrameworkTest.java
Patch:
@@ -96,7 +96,7 @@ public FrameworkTest(String host, int port,
     	this.dbCallMaxResponseSize = 20_000; //for 500 mult db call in JSON format
     	this.jsonMaxResponseSize = 1<<8;
 
-    	this.maxQueueOut = 256;
+    	this.maxQueueOut = 64;
     	this.maxConnectionBits = 13;
     	this.maxRequestSize = 1<<9;
     	    	

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FrameworkTest.java
Patch:
@@ -88,7 +88,7 @@ public FrameworkTest(String host, int port,
     	this.queueLengthOfPendingRequests = queueLengthOfPendingRequests;
     	this.minMemoryOfInputPipes = minMemoryOfInputPipes;
     	this.telemetryPort = telemetryPort;
-    	this.pipelineBits = 15;//max concurrent in flight database requests 1<<pipelineBits
+    	this.pipelineBits = 14;//max concurrent in flight database requests 1<<pipelineBits
     	
     	this.dbCallMaxResponseCount = 1<<9;
     	this.jsonMaxResponseCount = 3*(1<<14);

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -22,7 +22,7 @@ public class Bootstrap {
 
     public static void main(String[] args) {
         System.setProperty("smart-socket.server.pageSize", (5 * 1024 * 1024) + "");
-        System.setProperty("smart-socket.session.writeChunkSize", (1024 * 4) + "");
+        System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 
@@ -52,7 +52,7 @@ public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
         server.setReadBufferSize(1024 * 8);
-//        server.setThreadNum((int) (Runtime.getRuntime().availableProcessors() * 2));
+        server.setThreadNum((int)(Runtime.getRuntime().availableProcessors() * 1.5));
         try {
             server.start();
         } catch (IOException e) {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FrameworkTest.java
Patch:
@@ -54,7 +54,7 @@ public class FrameworkTest implements GreenApp {
 			    
     public FrameworkTest() {
     	// use this in commit messages to narrow travis testing to just this project
-    	// ebase before using this:  [ci fw-only Java/greenlightning]
+    	// rebase before using this:  [ci fw-only Java/greenlightning]
     	
     	//this server works best with  -XX:+UseNUMA    	
     	this(System.getProperty("host","0.0.0.0"), 

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/model/World.java
Patch:
@@ -3,7 +3,6 @@
 import com.dslplatform.json.JsonObject;
 import com.dslplatform.json.JsonWriter;
 import com.dslplatform.json.NumberConverter;
-import com.sun.org.apache.xpath.internal.operations.Number;
 
 /**
  * The model for the "world" database table.

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -21,8 +21,8 @@ public class Bootstrap {
     static byte[] body = "Hello, World!".getBytes();
 
     public static void main(String[] args) {
-        System.setProperty("smart-socket.server.pageSize", (32 * 1024 * 1024) + "");
-        System.setProperty("smart-socket.session.writeChunkSize", (1024 * 16) + "");
+        System.setProperty("smart-socket.server.pageSize", (5 * 1024 * 1024) + "");
+        System.setProperty("smart-socket.session.writeChunkSize", (1024 * 4) + "");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 
@@ -51,7 +51,7 @@ public void doHandle(HttpRequest request, HttpResponse response) throws IOExcept
     public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
-        server.setReadBufferSize(1024 * 128);
+        server.setReadBufferSize(1024 * 8);
 //        server.setThreadNum((int) (Runtime.getRuntime().availableProcessors() * 2));
         try {
             server.start();

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -21,8 +21,8 @@ public class Bootstrap {
     static byte[] body = "Hello, World!".getBytes();
 
     public static void main(String[] args) {
-        System.setProperty("smart-socket.server.pageSize", (5 * 1024 * 1024) + "");
-        System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
+        System.setProperty("smart-socket.server.pageSize", (32 * 1024 * 1024) + "");
+        System.setProperty("smart-socket.session.writeChunkSize", (1024 * 16) + "");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 
@@ -51,7 +51,7 @@ public void doHandle(HttpRequest request, HttpResponse response) throws IOExcept
     public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
-        server.setReadBufferSize(1024 * 8);
+        server.setReadBufferSize(1024 * 128);
 //        server.setThreadNum((int) (Runtime.getRuntime().availableProcessors() * 2));
         try {
             server.start();

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -21,7 +21,7 @@ public class Bootstrap {
     static byte[] body = "Hello, World!".getBytes();
 
     public static void main(String[] args) {
-        System.setProperty("smart-socket.server.pageSize", (32 * 1024 * 1024) + "");
+        System.setProperty("smart-socket.server.pageSize", (5 * 1024 * 1024) + "");
         System.setProperty("smart-socket.session.writeChunkSize", (1024 * 8) + "");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/DBRest.java
Patch:
@@ -14,7 +14,7 @@ public class DBRest implements RestMethodListener, PubSubMethodListener, TickLis
 	private final ProcessUpdate processUpdate;
 	private final ProcessFortune processFortune;
 	private final ProcessQuery processQuery;
-	private final PoolManager pm;
+	private final transient PoolManager pm;
 	
 	public DBRest(GreenRuntime runtime, PgPoolOptions options, int pipelineBits, int maxResponseCount, int maxResponseSize) {
 		

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessFortune.java
Patch:
@@ -14,7 +14,7 @@ public class ProcessFortune {
 	private transient ObjectPipe<FortunesObject> fortuneInFlight;
 	private int htmlFortunePos=0;
 	private final transient AppendableBuilder htmlFortuneBuffer = new AppendableBuilder();
-	private final PoolManager pm;
+	private final transient PoolManager pm;
 	private final HTTPResponseService service;
 	
 	public ProcessFortune(int pipelineBits, HTTPResponseService service, PoolManager pm) {

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/ProcessQuery.java
Patch:
@@ -14,12 +14,12 @@
 
 public class ProcessQuery {
 	
-	private final ObjectPipe<ResultObject> DBRestInFlight;
+	private final transient ObjectPipe<ResultObject> DBRestInFlight;
 	private boolean collectionPendingDBRest = false;
 	private transient final List<ResultObject> collectorDBRest = new ArrayList<ResultObject>();
 	private final HTTPResponseService service;
 	private transient final PoolManager pm;
-	private final ThreadLocalRandom localRandom = ThreadLocalRandom.current();
+	private final transient ThreadLocalRandom localRandom = ThreadLocalRandom.current();
 
 	public ProcessQuery(int pipelineBits, HTTPResponseService service, PoolManager pm) {
 		

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/FortunesObject.java
Patch:
@@ -11,8 +11,8 @@ public class FortunesObject {
 	private long connectionId; 
 	private long sequenceId;
 	private int status;
-	private List<FortuneObject> list = new ArrayList<FortuneObject>();
-	private List<FortuneObject> recycle = new ArrayList<FortuneObject>();
+	private List<FortuneObject> list = new ArrayList<FortuneObject>(32); //non zero default
+	private List<FortuneObject> recycle = new ArrayList<FortuneObject>(32);
 
 	public long getConnectionId() {
 		return connectionId;

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/SimpleRest.java
Patch:
@@ -10,6 +10,7 @@
 public class SimpleRest implements RestMethodListener {
 
 
+	private final byte[] messageBytes = "message".getBytes();
 	private final HTTPResponseService responseService;
 	
 	public SimpleRest(GreenRuntime runtime, int maxResponseCount, int maxResponseSize) {
@@ -25,7 +26,7 @@ public boolean jsonRestRequest(HTTPRequestReader request) {
 			//      be created once and held as a member.
 			JSONRenderer<HTTPRequestReader> renderJSON = new JSONRenderer<HTTPRequestReader>()
 					.startObject()
-					.string("message", (o,t) -> t.write(FrameworkTest.payload) )
+					.string(messageBytes, (o,t) -> t.write(FrameworkTest.payload) )
 					.endObject();
 					
 			return responseService.publishHTTPResponse(request, 

File: frameworks/Java/smart-socket/src/main/java/org/smartboot/http/Bootstrap.java
Patch:
@@ -21,7 +21,8 @@ public class Bootstrap {
     static byte[] body = "Hello, World!".getBytes();
 
     public static void main(String[] args) {
-        System.setProperty("smart-socket.server.pageSize", (4 * 1024 * 1024) + "");
+        System.setProperty("smart-socket.server.pageSize", (16 * 1024 * 1024) + "");
+        System.setProperty("smart-socket.session.writeChunkSize", "2048");
         HttpMessageProcessor processor = new HttpMessageProcessor(System.getProperty("webapps.dir", "./"));
         processor.route("/plaintext", new HttpHandle() {
 
@@ -49,7 +50,7 @@ public void doHandle(HttpRequest request, HttpResponse response) throws IOExcept
     public static void http(MessageProcessor<Http11Request> processor) {
         // 定义服务器接受的消息类型以及各类消息对应的处理器
         AioQuickServer<Http11Request> server = new AioQuickServer<>(8080, new HttpRequestProtocol(), processor);
-        server.setReadBufferSize(1024);
+        server.setReadBufferSize(1024*2);
 //        server.setThreadNum((int) (Runtime.getRuntime().availableProcessors() * 2));
         try {
             server.start();

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/GreenLightning.java
Patch:
@@ -5,7 +5,7 @@
 public class GreenLightning {
 
 	public static void main(String[] args) {
-		
+
 		GreenRuntime.run(new FrameworkTest(),args);
 	
 	}

File: frameworks/Java/officefloor/src/woof_raw/src/main/java/net/officefloor/benchmark/RawOfficeFloorMain.java
Patch:
@@ -163,8 +163,8 @@ public <R, T extends Throwable> R run(ProcessSafeOperation<R, T> operation) thro
 		 */
 		public RawHttpServicerFactory(HttpServerLocation serverLocation,
 				StreamBufferPool<ByteBuffer> serviceBufferPool) {
-			super(serverLocation, false, new HttpRequestParserMetaData(100, 1000, 1000000), serviceBufferPool, 1000,
-					null, null, true);
+			super(serverLocation, false, new HttpRequestParserMetaData(100, 1000, 1000000), serviceBufferPool, null,
+					null, true);
 			this.objectMapper.registerModule(new AfterburnerModule());
 		}
 

File: frameworks/Java/greenlightning/src/main/java/com/ociweb/gl/benchmark/Field.java
Patch:
@@ -1,5 +1,6 @@
 package com.ociweb.gl.benchmark;
 
 public enum Field {
-	PAYLOAD
+	//identifiers for each field used by routes and/or structures
+	CONNECTION, SEQUENCE, QUERIES; 
 }

File: frameworks/Java/officefloor/src/woof_raw/src/main/java/net/officefloor/benchmark/RawOfficeFloorMain.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.Executors;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;
 
 import lombok.Data;
 import net.officefloor.frame.api.manage.OfficeFloor;
@@ -157,6 +158,7 @@ public RawHttpServicerFactory(HttpServerLocation serverLocation,
 				StreamBufferPool<ByteBuffer> serviceBufferPool) {
 			super(serverLocation, false, new HttpRequestParserMetaData(100, 1000, 1000000), serviceBufferPool, 1000,
 					null, null, true);
+			this.objectMapper.registerModule(new AfterburnerModule());
 		}
 
 		/*

File: frameworks/Java/act/src/main/java/com/techempower/act/controller/HelloWorldController.java
Patch:
@@ -32,6 +32,7 @@
 public class HelloWorldController {
 
     private static final String HELLO_WORLD = "Hello, World!";
+    private static final String JSON_TYPE = H.Format.JSON.contentType();
 
     public static final class Message {
         private final String message;
@@ -46,7 +47,7 @@ public String getMessage() {
     @OnAppStart
     public void routing() {
         Act.getNonblock("/json", context -> context.resp()
-                .contentType(H.Format.JSON.contentType())
+                .contentType(JSON_TYPE)
                 .writeContent(JSON.toJSONString(new Message(HELLO_WORLD), SerializerFeature.DisableCircularReferenceDetect)));
     }
 

File: frameworks/Java/act/src/main/java/com/techempower/act/controller/HelloWorldController.java
Patch:
@@ -24,6 +24,7 @@
 import act.job.OnAppStart;
 import act.sys.Env;
 import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.serializer.SerializerFeature;
 import com.techempower.act.AppEntry;
 import org.osgl.http.H;
 
@@ -46,7 +47,7 @@ public String getMessage() {
     public void routing() {
         Act.getNonblock("/json", context -> context.resp()
                 .contentType(H.Format.JSON.contentType())
-                .writeContent(JSON.toJSONString(new Message(HELLO_WORLD))));
+                .writeContent(JSON.toJSONString(new Message(HELLO_WORLD), SerializerFeature.DisableCircularReferenceDetect)));
     }
 
 }

File: frameworks/Java/jawn/src/main/java/app/BenchmarkMain.java
Patch:
@@ -30,8 +30,8 @@ public class BenchmarkMain extends Jawn {
         get("/queries",DbController.class, DbController::getQueries);
         get("/updates",DbController.class, DbController::getUpdates);
         
-        get("/json", (context) -> Results.json(new Message(message)));
-        get("/plaintext", (context) -> Results.text(bytemessage));
+        get("/json", (context) -> Results.json(new Message(message)).addHeader("Server", "jawn"));
+        get("/plaintext", (context) -> Results.text(bytemessage).addHeader("Server", "jawn"));
         
         use(new AbstractModule() {
             @Override

File: frameworks/Java/jawn/src/main/java/app/controllers/FortunesController.java
Patch:
@@ -18,6 +18,7 @@ public void index() {
         List<Fortune> fortunes = db.fetchAllFortunes();
         fortunes.add(new Fortune(0, "Additional fortune added at request time."));
         Collections.sort(fortunes, (f1, f2) -> f1.message.compareTo(f2.message));
+        header("Server", "jawn");
         view("fortunes", fortunes);
     }
 }

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/FortunesPostgresqlGetHandler.java
Patch:
@@ -42,7 +42,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         StringWriter writer = new StringWriter();
         mustache.execute(writer, fortunes);
         exchange.getResponseHeaders().put(
-                Headers.CONTENT_TYPE, "text/html");
+                Headers.CONTENT_TYPE, "text/html;charset=utf-8");
         exchange.getResponseSender().send(writer.toString());
     }
 }

File: frameworks/Java/restexpress/src/main/java/hello/controller/JsonController.java
Patch:
@@ -5,11 +5,9 @@
 
 public class JsonController
 {
-	private static final HelloWorld MESSAGE_OBJECT = new HelloWorld();
-
 	public HelloWorld helloWorld(Request request, Response response)
 	{
-		return MESSAGE_OBJECT;
+		return new HelloWorld();
 	}
 
 	/**

File: frameworks/Java/restexpress/src/main/java/hello/controller/PlaintextController.java
Patch:
@@ -9,6 +9,7 @@ public class PlaintextController
 
 	public String helloWorld(Request request, Response response)
 	{
+		response.setContentType("text/plain");
 		return MESSAGE;
 	}
 }

File: frameworks/Java/blade/src/main/java/hello/DbConfig.java
Patch:
@@ -14,7 +14,7 @@
 @Bean
 public class DbConfig implements BeanProcessor {
 
-    private static final String DB_URL = "jdbc:mysql://TFB-database:3306/hello_world?jdbcCompliantTruncation=false&amp;elideSetAutoCommits=true&amp;useLocalSessionState=true&amp;cachePrepStmts=true&amp;cacheCallableStmts=true&amp;alwaysSendSetIsolation=false&amp;prepStmtCacheSize=4096&amp;cacheServerConfiguration=true&amp;prepStmtCacheSqlLimit=2048&amp;zeroDateTimeBehavior=convertToNull&amp;traceProtocol=false&amp;useUnbufferedInput=false&amp;useReadAheadInput=false&amp;maintainTimeStats=false&amp;useServerPrepStmts&amp;cacheRSMetadata=true&amp;useSSL=false";
+    private static final String DB_URL = "jdbc:mysql://TFB-database:3306/hello_world?jdbcCompliantTruncation=false&elideSetAutoCommits=true&useLocalSessionState=true&cachePrepStmts=true&cacheCallableStmts=true&alwaysSendSetIsolation=false&prepStmtCacheSize=4096&cacheServerConfiguration=true&prepStmtCacheSqlLimit=2048&zeroDateTimeBehavior=convertToNull&traceProtocol=false&useUnbufferedInput=false&useReadAheadInput=false&maintainTimeStats=false&useServerPrepStmts&cacheRSMetadata=true&useSSL=false";
 
     @Override
     public void processor(Blade blade) {

File: frameworks/Java/comsat/src/main/java/hello/servlet/JettyServer.java
Patch:
@@ -1,6 +1,8 @@
-package hello;
+package hello.servlet;
 
+import hello.Server;
 import co.paralleluniverse.embedded.containers.AbstractEmbeddedServer;
+
 import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;

File: frameworks/Java/comsat/src/main/java/hello/servlet/PlaintextServlet.java
Patch:
@@ -1,14 +1,16 @@
-package hello;
+package hello.servlet;
 
 import co.paralleluniverse.fibers.Suspendable;
 import co.paralleluniverse.fibers.servlet.FiberHttpServlet;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 
+@SuppressWarnings("serial")
 public final class PlaintextServlet extends FiberHttpServlet {
     private static final byte[] helloWorld = "Hello, World!".getBytes(StandardCharsets.ISO_8859_1);
 

File: frameworks/Java/comsat/src/main/java/hello/servlet/UndertowServer.java
Patch:
@@ -1,12 +1,14 @@
-package hello;
+package hello.servlet;
 
 import co.paralleluniverse.embedded.containers.AbstractEmbeddedServer;
+import hello.Server;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
 import io.undertow.server.HttpHandler;
 import io.undertow.servlet.Servlets;
 import io.undertow.servlet.api.DeploymentInfo;
 import io.undertow.servlet.api.DeploymentManager;
+
 import org.xnio.Options;
 
 import java.io.IOException;

File: frameworks/Java/comsat/src/main/java/hello/webactors/NettyServer.java
Patch:
@@ -1,7 +1,8 @@
-package hello;
+package hello.webactors;
 
 import co.paralleluniverse.comsat.webactors.netty.AutoWebActorHandler;
 import co.paralleluniverse.embedded.containers.AbstractEmbeddedServer;
+import hello.Server;
 import io.netty.bootstrap.ServerBootstrap;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.*;

File: frameworks/Java/comsat/src/main/java/hello/webactors/UndertowServer.java
Patch:
@@ -1,9 +1,11 @@
-package hello;
+package hello.webactors;
 
 import co.paralleluniverse.comsat.webactors.undertow.AutoWebActorHandler;
 import co.paralleluniverse.embedded.containers.AbstractEmbeddedServer;
+import hello.Server;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
+
 import org.xnio.Options;
 
 public final class UndertowServer implements Server {

File: frameworks/Java/comsat/src/main/java/hello/webactors/WebActor.java
Patch:
@@ -1,4 +1,4 @@
-package hello;
+package hello.webactors;
 
 import co.paralleluniverse.actors.BasicActor;
 import co.paralleluniverse.comsat.webactors.HttpRequest;

File: frameworks/Java/undertow/src/main/java/hello/HelloWebServer.java
Patch:
@@ -216,7 +216,7 @@ static MongoDatabase newMongoDatabase(String host,
       return client.getDatabase(databaseName);
     }
 
-    private static final int MAX_DB_REQUEST_CONCURRENCY = 256;
+    private static final int MAX_DB_REQUEST_CONCURRENCY = 512;
     private static final int MAX_DB_QUERIES_PER_REQUEST = 20;
   }
 }

File: frameworks/Java/act/src/main/java/com/techempower/act/AppEntry.java
Patch:
@@ -23,7 +23,6 @@
 
 import act.Act;
 
-@SuppressWarnings("unused")
 public class AppEntry {
 
 	public static final String PROFILE_JSON_PLAINTEXT = "json_plaintext";

File: frameworks/Java/act/src/main/java/com/techempower/act/controller/FortuneController.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.List;
 import javax.inject.Inject;
 
-@SuppressWarnings("unused")
 @Env.RequireProfile(value = AppEntry.PROFILE_JSON_PLAINTEXT, except = true)
 public class FortuneController {
 

File: frameworks/Java/act/src/main/java/com/techempower/act/controller/HelloWorldController.java
Patch:
@@ -27,7 +27,6 @@
 import com.techempower.act.AppEntry;
 import org.osgl.http.H;
 
-@SuppressWarnings("unused")
 @Env.RequireProfile(value = AppEntry.PROFILE_JSON_PLAINTEXT)
 public class HelloWorldController {
 

File: frameworks/Java/restexpress/src/main/java/hello/domain/World.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.github.jmkgreen.morphia.annotations.Entity;
 import com.github.jmkgreen.morphia.annotations.Id;
-import com.github.jmkgreen.morphia.annotations.Indexed;
 import com.strategicgains.repoexpress.domain.Identifiable;
 
 @Entity(value="world", noClassnameStored=true)
@@ -13,8 +12,7 @@ public class World
 {
 	@Id
 	private ObjectId oid;
-	
-	@Indexed(unique=true)
+
 	private Long id;
 	private int randomNumber;
 

File: frameworks/Java/servlet/src/main/java/hello/Cache2kPostgresServlet.java
Patch:
@@ -20,7 +20,6 @@
 public class Cache2kPostgresServlet extends HttpServlet {
 	// Database details.
 	private static final int DB_ROWS = 10000;
-	private static final int LIMIT = DB_ROWS + 1;
 	
 	// Database connection pool.
 	@Resource(name = "jdbc/hello_world")
@@ -56,7 +55,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		//TODO prevent duplicate numbers to be added
 		List<Integer> keys = new ArrayList<Integer>(count);
 		for (int i = 0; i < count; i++) {
-			keys.add(new Integer(random.nextInt(LIMIT)));
+			keys.add(new Integer(random.nextInt(DB_ROWS) + 1));
 		}
 		
 		// Set content type to JSON

File: frameworks/Java/servlet/src/main/java/hello/DbPoolServlet.java
Patch:
@@ -23,7 +23,6 @@ public class DbPoolServlet extends HttpServlet {
 	// Database details.
 	private static final String DB_QUERY = "SELECT * FROM World WHERE id = ?";
 	private static final int DB_ROWS = 10000;
-	private static final int LIMIT = DB_ROWS + 1;
 
 	// Database connection pool.
 	@Resource(name = "jdbc/hello_world")
@@ -44,7 +43,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 					ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {
 				// Run the query the number of times requested.
 				for (int i = 0; i < count; i++) {
-					final int id = random.nextInt(LIMIT);
+					final int id = random.nextInt(DB_ROWS) + 1;
 					statement.setInt(1, id);
 
 					try (ResultSet results = statement.executeQuery()) {

File: frameworks/Java/servlet/src/main/java/hello/PostgresUpdateServlet.java
Patch:
@@ -25,7 +25,6 @@ public class PostgresUpdateServlet extends HttpServlet {
 	private static final String DB_QUERY = "SELECT * FROM World WHERE id = ?";
 	private static final String UPDATE_QUERY = "UPDATE World SET randomNumber = ? WHERE id = ?";
 	private static final int DB_ROWS = 10000;
-	private static final int LIMIT = DB_ROWS + 1;
 
 	// Database connection pool.
 	@Resource(name = "jdbc/hello_world")
@@ -46,15 +45,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 				PreparedStatement statement2 = conn.prepareStatement(UPDATE_QUERY)) {
 			// Run the query the number of times requested.
 			for (int i = 0; i < count; i++) {
-				final int id = random.nextInt(LIMIT);
+				final int id = random.nextInt(DB_ROWS) + 1;
 				statement.setInt(1, id);
 
 				try (ResultSet results = statement.executeQuery()) {
 					if (results.next()) {
 						worlds[i] = new World(id, results.getInt("randomNumber"));
 
 						// Update row
-						worlds[i].setRandomNumber(random.nextInt(LIMIT));
+						worlds[i].setRandomNumber(random.nextInt(DB_ROWS) + 1);
 						statement2.setInt(1, worlds[i].getRandomNumber());
 						statement2.setInt(2, id);
 

File: frameworks/Java/servlet/src/main/java/hello/UpdateServlet.java
Patch:
@@ -25,7 +25,6 @@ public class UpdateServlet extends HttpServlet {
 	private static final String DB_QUERY = "SELECT * FROM World WHERE id = ?";
 	private static final String UPDATE_QUERY = "UPDATE World SET randomNumber = ? WHERE id = ?";
 	private static final int DB_ROWS = 10000;
-	private static final int LIMIT = DB_ROWS + 1;
 
 	// Database connection pool.
 	@Resource(name = "jdbc/hello_world")
@@ -47,15 +46,15 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 						ResultSet.TYPE_FORWARD_ONLY)) {
 			// Run the query the number of times requested.
 			for (int i = 0; i < count; i++) {
-				final int id = random.nextInt(LIMIT);
+				final int id = random.nextInt(DB_ROWS) + 1;
 				statement.setInt(1, id);
 
 				try (ResultSet results = statement.executeQuery()) {
 					if (results.next()) {
 						worlds[i] = new World(id, results.getInt("randomNumber"));
 
 						// Update row
-						worlds[i].setRandomNumber(random.nextInt(LIMIT));
+						worlds[i].setRandomNumber(random.nextInt(DB_ROWS) + 1);
 						statement2.setInt(1, worlds[i].getRandomNumber());
 						statement2.setInt(2, id);
 

File: frameworks/Java/dropwizard/src/main/java/com/example/helloworld/resources/WorldResource.java
Patch:
@@ -23,14 +23,14 @@ public WorldResource(WorldDAO worldDAO) {
 	}
 	
 	@GET
-	@UnitOfWork(transactional = false) // Needed only for Hibernate - not for Mongo or JDBI
+	@UnitOfWork(transactional = false, readOnly = true) // Needed only for Hibernate - not for Mongo or JDBI
 	public Object db() {
 		return worldDAO.findById(Helper.randomWorld());
 	}
 	
 	@GET
 	@Path("/query")
-	@UnitOfWork(transactional = false) // Needed only for Hibernate - not for Mongo or JDBI
+	@UnitOfWork(transactional = false,  readOnly = true) // Needed only for Hibernate - not for Mongo or JDBI
 	public Object dbTest(@QueryParam("queries") String queries) {
 		int totalQueries = Helper.getQueries(queries); // Optional check is done inside
 		final World[] worlds = new World[totalQueries];

File: frameworks/Java/act/src/main/java/com/techempower/act/model/Fortune.java
Patch:
@@ -26,8 +26,10 @@
 
 import javax.persistence.Entity;
 import javax.persistence.Id;
+import javax.persistence.Table;
 
 @Entity(name = "fortune")
+@Table(name = "fortune")
 @org.mongodb.morphia.annotations.Entity(value = "fortune", noClassnameStored = true)
 @Env.RequireProfile(value = AppEntry.PROFILE_JSON_PLAINTEXT, except = true)
 public final class Fortune implements SimpleBean, Comparable<Fortune> {

File: frameworks/Java/activeweb/src/main/java/app/config/DbConfig.java
Patch:
@@ -38,7 +38,8 @@ public void init(AppContext context) {
                 "&useReadAheadInput=false" +
                 "&maintainTimeStats=false" +
                 "&useServerPrepStmts" +
-                "&cacheRSMetadata=true";
+                "&cacheRSMetadata=true" +
+                "&useSSL=false";
 
         environment("development").jndi("java:comp/env/jdbc/hello_world");
 

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/controllers/Application.java
Patch:
@@ -52,7 +52,7 @@ public CompletionStage<Result> queries(final String queries) {
     public CompletionStage<Result> fortunes() {
         return CompletableFuture.supplyAsync(() -> {
             final List<FortuneRecord> fortunes = this.db.withConnection(connection -> {
-                return DSL.using(connection, DIALECT).selectFrom(FORTUNE).fetch();
+                return DSL.using(connection, DIALECT).select(FORTUNE.ID, FORTUNE.MESSAGE).from(FORTUNE).fetchInto(FortuneRecord.class);
             });
             fortunes.add(new FortuneRecord(UInteger.valueOf(0), "Additional fortune added at request time."));
             Collections.sort(fortunes, (f1, f2) -> f1.getMessage().compareTo(f2.getMessage()));

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/DefaultCatalog.java
Patch:
@@ -20,14 +20,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = 1833355075;
+    private static final long serialVersionUID = -1150433758;
 
     /**
      * The reference instance of <code></code>

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/HelloWorld.java
Patch:
@@ -24,14 +24,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class HelloWorld extends SchemaImpl {
 
-    private static final long serialVersionUID = -1521404055;
+    private static final long serialVersionUID = 618173128;
 
     /**
      * The reference instance of <code>hello_world</code>

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/Indexes.java
Patch:
@@ -20,7 +20,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/Keys.java
Patch:
@@ -24,7 +24,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/Tables.java
Patch:
@@ -16,7 +16,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/Fortune.java
Patch:
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Fortune extends TableImpl<FortuneRecord> {
 
-    private static final long serialVersionUID = 943840722;
+    private static final long serialVersionUID = -271252495;
 
     /**
      * The reference instance of <code>hello_world.fortune</code>

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/World.java
Patch:
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class World extends TableImpl<WorldRecord> {
 
-    private static final long serialVersionUID = 894226680;
+    private static final long serialVersionUID = 1665620473;
 
     /**
      * The reference instance of <code>hello_world.world</code>

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/FortuneRecord.java
Patch:
@@ -22,14 +22,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class FortuneRecord extends UpdatableRecordImpl<FortuneRecord> implements Record2<UInteger, String> {
 
-    private static final long serialVersionUID = -1978128230;
+    private static final long serialVersionUID = -1296721253;
 
     /**
      * Setter for <code>hello_world.fortune.id</code>.

File: frameworks/Java/play2-java/play2-java-jooq-hikaricp/app/models/tables/records/WorldRecord.java
Patch:
@@ -22,14 +22,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.1"
+        "jOOQ version:3.10.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class WorldRecord extends UpdatableRecordImpl<WorldRecord> implements Record2<UInteger, Integer> {
 
-    private static final long serialVersionUID = -323588540;
+    private static final long serialVersionUID = -826288699;
 
     /**
      * Setter for <code>hello_world.world.id</code>.

File: frameworks/Java/proteus/src/main/java/io/sinistral/controllers/Benchmarks.java
Patch:
@@ -25,6 +25,7 @@
 import com.jsoniter.output.JsonStream;
 
 import io.sinistral.models.Fortune;
+import io.sinistral.models.Message;
 import io.sinistral.models.World;
 import io.sinistral.services.MySqlService;
 import io.sinistral.services.PostgresService;
@@ -48,7 +49,6 @@
 public class Benchmarks
 {
 	private static final String HTML_UTF8_TYPE = io.sinistral.proteus.server.MediaType.TEXT_HTML_UTF8.toString();
-	private static final String PLAINTEXT_UTF8_TYPE = io.sinistral.proteus.server.MediaType.TEXT_PLAIN_UTF8.toString();
 	private static final String PLAINTEXT_TYPE = io.sinistral.proteus.server.MediaType.TEXT_PLAIN.toString();
 	
 	@Inject 
@@ -202,6 +202,6 @@ public void plaintext(HttpServerExchange exchange)
 	@ApiOperation(value = "Json serialization endpoint",   httpMethod = "GET" )
 	public void json(HttpServerExchange exchange)
 	{ 
-		response( JsonStream.serializeToBytes(ImmutableMap.of("message", "Hello, World!")) ).applicationJson().send(exchange);
+		response( JsonStream.serializeToBytes( new Message("hello, world!") ) ).applicationJson().send(exchange);
 	}
 }

File: frameworks/Java/gemini/Source/hello/GhServlet.java
Patch:
@@ -2,7 +2,7 @@
 
 import javax.servlet.annotation.*;
 
-import com.techempower.gemini.*;
+import com.techempower.gemini.transport.*;
 
 /**
  * Main Servlet to be used by the GeminiHello application.  Upon

File: frameworks/Java/gemini/Source/hello/home/entity/Fortune.java
Patch:
@@ -1,7 +1,7 @@
 package hello.home.entity;
 
 import com.techempower.data.annotation.*;
-import com.techempower.js.*;
+import com.techempower.js.legacy.*;
 
 /**
  * A fortune entity.

File: frameworks/Java/gemini/Source/hello/home/entity/GhDataEntity.java
Patch:
@@ -18,16 +18,16 @@ public abstract class GhDataEntity
   /**
    * The identity for this object.
    */
-  private int id;
+  private long id;
 
   @Override
-  public int getId()
+  public long getId()
   {
     return this.id;
   }
 
   @Override
-  public void setId(int newIdentity)
+  public void setId(long newIdentity)
   {
     this.id = newIdentity;
   }

File: frameworks/Java/gemini/Source/hello/home/entity/World.java
Patch:
@@ -1,7 +1,7 @@
 package hello.home.entity;
 
 import com.techempower.data.annotation.*;
-import com.techempower.js.*;
+import com.techempower.js.legacy.*;
 
 /**
  * Simple World entity.

File: frameworks/Java/netty/src/main/java/hello/HelloWebServer.java
Patch:
@@ -3,7 +3,6 @@
 import java.net.InetSocketAddress;
 
 import io.netty.bootstrap.ServerBootstrap;
-import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
@@ -52,7 +51,6 @@ private void doRun(EventLoopGroup loupGroup, Class<? extends ServerChannel> serv
 			b.option(ChannelOption.SO_BACKLOG, 8192);
 			b.option(ChannelOption.SO_REUSEADDR, true);
 			b.group(loupGroup).channel(serverChannelClass).childHandler(new HelloServerInitializer(loupGroup.next()));
-			b.childOption(ChannelOption.ALLOCATOR, new PooledByteBufAllocator(true));
 			b.childOption(ChannelOption.SO_REUSEADDR, true);
 
 			Channel ch = b.bind(inet).sync().channel();

File: frameworks/Java/activeweb/src/main/java/app/config/DbConfig.java
Patch:
@@ -43,8 +43,8 @@ public void init(AppContext context) {
         environment("development").jndi("java:comp/env/jdbc/hello_world");
 
         //need to set ACTIVE_ENV=local to run on dev box.
-        environment("local").jdbc("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/hello_world?" + jdbcParams, "benchmarkdbuser", "benchmarkdbpass");
+        environment("local").jdbc("com.mysql.jdbc.Driver", "jdbc:mysql://TFB-database/hello_world?" + jdbcParams, "benchmarkdbuser", "benchmarkdbpass");
 
-        environment("development").testing().jdbc("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/hello_world?" + jdbcParams, "benchmarkdbuser", "benchmarkdbpass");
+        environment("development").testing().jdbc("com.mysql.jdbc.Driver", "jdbc:mysql://TFB-database/hello_world?" + jdbcParams, "benchmarkdbuser", "benchmarkdbpass");
     }
 }

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/DbPostgresqlGetHandler.java
Patch:
@@ -26,7 +26,7 @@
 public class DbPostgresqlGetHandler implements HttpHandler {
     private final DataSource ds = PostgresStartupHookProvider.ds;
     private DslJson<Object> dsl = new DslJson<>();
-    private JsonWriter writer = dsl.newWriter(1024);
+    private JsonWriter writer = dsl.newWriter(512);
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/QueriesMysqlGetHandler.java
Patch:
@@ -46,7 +46,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         int queries = Helper.getQueries(exchange);
 
         List<CompletableFuture<World>> worlds = IntStream.range(0, queries)
-                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.selectWorld(ds), Helper.EXECUTOR))
+                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.selectWorld(ds), Helper.executor))
                 .collect(Collectors.toList());
 
         CompletableFuture<List<World>> allDone = Helper.sequence(worlds);

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/QueriesPostgresqlGetHandler.java
Patch:
@@ -42,7 +42,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         int queries = Helper.getQueries(exchange);
 
         List<CompletableFuture<World>> worlds = IntStream.range(0, queries)
-                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.selectWorld(ds), Helper.EXECUTOR))
+                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.selectWorld(ds), Helper.executor))
                 .collect(Collectors.toList());
 
         CompletableFuture<List<World>> allDone = Helper.sequence(worlds);

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/UpdatesMysqlGetHandler.java
Patch:
@@ -29,7 +29,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         int queries = Helper.getQueries(exchange);
 
         List<CompletableFuture<World>> worlds = IntStream.range(0, queries)
-                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.updateWorld(ds), Helper.EXECUTOR))
+                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.updateWorld(ds), Helper.executor))
                 .collect(Collectors.toList());
 
         CompletableFuture<List<World>> allDone = Helper.sequence(worlds);

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/UpdatesPostgresqlGetHandler.java
Patch:
@@ -43,7 +43,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         int queries = Helper.getQueries(exchange);
 
         List<CompletableFuture<World>> worlds = IntStream.range(0, queries)
-                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.updateWorld(ds), Helper.EXECUTOR))
+                .mapToObj(i -> CompletableFuture.supplyAsync(() -> Helper.updateWorld(ds), Helper.executor))
                 .collect(Collectors.toList());
 
         CompletableFuture<List<World>> allDone = Helper.sequence(worlds);

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/model/World.java
Patch:
@@ -25,8 +25,7 @@ public World(int id, int randomNumber) {
 
     @Override
     public void serialize(JsonWriter writer, boolean minimal) {
-        writer.writeByte(com.dslplatform.json.JsonWriter.OBJECT_START);
-        writer.writeAscii("\"id\":");
+        writer.writeAscii("{\"id\":");
         NumberConverter.serialize(this.id, writer);
         writer.writeAscii(",\"randomNumber\":");
         NumberConverter.serialize(this.randomNumber, writer);

File: frameworks/Java/undertow/src/main/java/hello/HelloWebServer.java
Patch:
@@ -166,7 +166,6 @@ static DataSource newSqlDataSource(String jdbcUrl,
       config.setJdbcUrl(jdbcUrl);
       config.setUsername(username);
       config.setPassword(password);
-      config.setMinimumIdle(connections);
       config.setMaximumPoolSize(connections);
       return new HikariDataSource(config);
     }
@@ -178,7 +177,6 @@ static MongoDatabase newMongoDatabase(String host,
                                           String databaseName,
                                           int connections) {
       MongoClientOptions.Builder options = MongoClientOptions.builder();
-      options.minConnectionsPerHost(connections);
       options.connectionsPerHost(connections);
       options.threadsAllowedToBlockForConnectionMultiplier(
           (int) Math.ceil((double) MAX_DB_REQUEST_CONCURRENCY / connections));
@@ -203,7 +201,6 @@ static MongoDatabase newMongoDatabase(String host,
       ConnectionPoolSettings connectionPoolSettings =
           ConnectionPoolSettings
               .builder()
-              .minSize(connections)
               .maxSize(connections)
               .maxWaitQueueSize(
                   MAX_DB_REQUEST_CONCURRENCY * MAX_DB_QUERIES_PER_REQUEST)

File: frameworks/Java/wicket/src/main/java/hellowicket/fortune/FortunePage.java
Patch:
@@ -23,10 +23,10 @@
  */
 public class FortunePage extends WebPage {
 	private static final long serialVersionUID = 1L;
-	private static final String TEXT_HTML = "text/html";
+	private static final String TEXT_HTML = "text/html;charset=utf-8";
 
 	public FortunePage() throws Exception {
-		List<Fortune> fortunes = new ArrayList<>(10000);
+		List<Fortune> fortunes = new ArrayList<>();
 
 		DataSource dataSource = WicketApplication.get().getDataSource();
 		try ( //

File: frameworks/Java/jawn/src/main/java/app/controllers/FortunesController.java
Patch:
@@ -19,5 +19,6 @@ public void index() {
         fortunes.add(new Fortune(0, "Additional fortune added at request time."));
         Collections.sort(fortunes, (f1, f2) -> f1.message.compareTo(f2.message));
         view("fortunes", fortunes);
+        render().layout("../index");
     }
 }

File: frameworks/Java/rapidoid/src/main/java/lowlevel/Main.java
Patch:
@@ -5,8 +5,8 @@
 
 public class Main {
 
-	public static void main(String[] args) throws Exception {
-		App.args(args);
+	public static void main(String[] args) {
+		App.run(args);
 
 		Conf.HTTP.set("maxPipeline", 128);
 		Conf.HTTP.set("timeout", 0);

File: frameworks/Java/rapidoid/src/main/java/lowlevel/PlaintextAndJsonServer.java
Patch:
@@ -4,6 +4,7 @@
 import org.rapidoid.buffer.Buf;
 import org.rapidoid.http.AbstractHttpServer;
 import org.rapidoid.http.HttpStatus;
+import org.rapidoid.http.HttpUtils;
 import org.rapidoid.http.MediaType;
 import org.rapidoid.net.abstracts.Channel;
 import org.rapidoid.net.impl.RapidoidHelper;
@@ -28,7 +29,7 @@ protected HttpStatus handle(Channel ctx, Buf buf, RapidoidHelper data) {
 				return ok(ctx, data.isKeepAlive.value, HELLO_WORLD, MediaType.TEXT_PLAIN);
 
 			} else if (matches(buf, data.path, URI_JSON)) {
-				return serializeToJson(ctx, data.isKeepAlive.value, new Message("Hello, World!"));
+				return serializeToJson(HttpUtils.noReq(), ctx, data.isKeepAlive.value, new Message("Hello, World!"));
 			}
 		}
 

File: frameworks/Java/revenj-jvm/src/main/java/hello/DbServlet.java
Patch:
@@ -16,7 +16,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		res.setContentType("application/json");
 		final Context ctx = Utils.getContext();
 		final Optional<World> world = ctx.worlds.find(ctx.getRandom10k(), ctx.connection);
-		final JsonWriter writer = ctx.json;
+		final JsonWriter writer = Utils.getJson();
 		world.get().serialize(writer, false);
 		writer.toStream(res.getOutputStream());
 	}

File: frameworks/Java/revenj-jvm/src/main/java/hello/FortunesServlet.java
Patch:
@@ -16,7 +16,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		final Context ctx = Utils.getContext();
 		final List<Fortune> fortunes = ctx.fortunes.search();
 		fortunes.add(new Fortune(0, "Additional fortune added at request time."));
-		Collections.sort(fortunes, COMPARATOR);
+		fortunes.sort(COMPARATOR);
 		req.setCharacterEncoding("UTF-8");
 		req.setAttribute("fortunes", fortunes);
 		req.getRequestDispatcher("/WEB-INF/jsp/fortunes.jsp").forward(req, res);

File: frameworks/Java/revenj-jvm/src/main/java/hello/JsonServlet.java
Patch:
@@ -13,7 +13,7 @@ public class JsonServlet extends HttpServlet {
 	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
 		res.setContentType("application/json");
 		final Message msg = new Message("Hello, World!");
-		final JsonWriter writer = Utils.getContext().json;
+		final JsonWriter writer = Utils.getJson();
 		msg.serialize(writer, false);
 		writer.toStream(res.getOutputStream());
 	}

File: frameworks/Java/revenj-jvm/src/main/java/hello/QueriesServlet.java
Patch:
@@ -14,7 +14,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		res.setContentType("application/json");
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
-		final JsonWriter json = ctx.json;
+		final JsonWriter json = Utils.getJson();
 		final World[] worlds = ctx.loadWorldsSlow(count);
 		json.serialize(worlds, count);
 		json.toStream(res.getOutputStream());

File: frameworks/Java/revenj-jvm/src/main/java/hello/UpdatesServlet.java
Patch:
@@ -17,13 +17,13 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		res.setContentType("application/json");
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
-		final JsonWriter json = ctx.json;
+		final JsonWriter json = Utils.getJson();
 		final World[] worlds = ctx.loadWorldsSlow(count);
 		final ArrayList<World> changed = new ArrayList<>(count);
 		for (int i = 0; i < count; i++) {
 			changed.add(worlds[i].setRandomNumber(ctx.getRandom10k()));
 		}
-		Collections.sort(changed, ASC);
+		changed.sort(ASC);
 		ctx.worlds.update(changed);
 		json.serialize(worlds, count);
 		json.toStream(res.getOutputStream());

File: frameworks/Java/wicket/src/main/java/hellowicket/WicketApplication.java
Patch:
@@ -80,7 +80,7 @@ private DataSource newDataSource()
 
 				// use faster DataSource impl
 				ds.setJdbcUrl("jdbc:mysql://localhost:3306/hello_world?jdbcCompliantTruncation=false&elideSetAutoCommits=true&useLocalSessionState=true&cachePrepStmts=true&cacheCallableStmts=true&alwaysSendSetIsolation=false&prepStmtCacheSize=4096&cacheServerConfiguration=true&prepStmtCacheSqlLimit=2048&zeroDateTimeBehavior=convertToNull&traceProtocol=false&useUnbufferedInput=false&useReadAheadInput=false&maintainTimeStats=false&useServerPrepStmts=true&cacheRSMetadata=true&useSSL=false");
-				ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
+				ds.setDriverClassName("com.mysql.jdbc.Driver");
 				ds.setUsername("benchmarkdbuser");
 				ds.setPassword("benchmarkdbpass");
 				dataSource = ds;

File: frameworks/Java/wicket/src/main/java/hellowicket/WicketApplication.java
Patch:
@@ -80,7 +80,7 @@ private DataSource newDataSource()
 
 				// use faster DataSource impl
 				ds.setJdbcUrl("jdbc:mysql://localhost:3306/hello_world?jdbcCompliantTruncation=false&elideSetAutoCommits=true&useLocalSessionState=true&cachePrepStmts=true&cacheCallableStmts=true&alwaysSendSetIsolation=false&prepStmtCacheSize=4096&cacheServerConfiguration=true&prepStmtCacheSqlLimit=2048&zeroDateTimeBehavior=convertToNull&traceProtocol=false&useUnbufferedInput=false&useReadAheadInput=false&maintainTimeStats=false&useServerPrepStmts=true&cacheRSMetadata=true&useSSL=false");
-				ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
+				ds.setDriverClassName("com.mysql.jdbc.Driver");
 				ds.setUsername("benchmarkdbuser");
 				ds.setPassword("benchmarkdbpass");
 				dataSource = ds;

File: frameworks/Java/light-java/src/main/java/com/networknt/techempower/handler/JsonGetHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.techempower.handler;
 
+import com.dslplatform.json.DslJson;
 import com.dslplatform.json.JsonWriter;
 import com.dslplatform.json.MapConverter;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -19,8 +20,8 @@
 import org.apache.commons.lang3.StringEscapeUtils;
 
 public class JsonGetHandler implements HttpHandler {
-    private final ObjectMapper objectMapper = Config.getInstance().getMapper();
-    private JsonWriter writer = new JsonWriter();
+    private DslJson<Object> dsl = new DslJson<>();
+    private JsonWriter writer = dsl.newWriter(25000);
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {

File: frameworks/Java/light-java/src/test/java/com/networknt/techempower/handler/JsonTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.techempower.handler;
 
+import com.dslplatform.json.DslJson;
 import com.dslplatform.json.JsonWriter;
 import com.dslplatform.json.MapConverter;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -15,7 +16,8 @@
  */
 public class JsonTest {
     private static ObjectMapper mapper = Config.getInstance().getMapper();
-    private static JsonWriter writer = new JsonWriter();
+    private DslJson<Object> dsl = new DslJson<>();
+    private JsonWriter writer = dsl.newWriter(25000);
 
     @Test
     public void testJson() throws Exception {

File: frameworks/Java/dropwizard/src/main/java/com/example/helloworld/HelloMongoService.java
Patch:
@@ -40,10 +40,10 @@ public void run(HelloMongoConfiguration config, Environment environment) throws
         final DB db = mongoClient.getDB(config.getMongo().getDb());
         final ObjectMapper mongoJackMapper = MongoJackModule.configure(Jackson.newObjectMapper());
         final JacksonDBCollection<World, Integer> worlds =
-                JacksonDBCollection.wrap(db.getCollection("World"), World.class, Integer.class, mongoJackMapper);
+                JacksonDBCollection.wrap(db.getCollection("world"), World.class, Integer.class, mongoJackMapper);
 
         final JacksonDBCollection<Fortune, Integer> fortunes =
-                JacksonDBCollection.wrap(db.getCollection("Fortune"), Fortune.class, Integer.class, mongoJackMapper);
+                JacksonDBCollection.wrap(db.getCollection("fortune"), Fortune.class, Integer.class, mongoJackMapper);
 
         environment.jersey().register(new WorldResource(new WorldMongoImpl(worlds))); // Test types 2, 3 & 5: Single database query, Multiple database queries & Database updates
         environment.jersey().register(new FortuneResource(new FortuneMongoImpl(fortunes))); // Test type 4: Fortunes

File: frameworks/Java/dropwizard/src/main/java/com/example/helloworld/db/model/Fortune.java
Patch:
@@ -5,7 +5,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table(name = "Fortune")
+@Table(name = "fortune")
 public class Fortune implements Comparable<Fortune> {
 
     @Id

File: frameworks/Java/dropwizard/src/main/java/com/example/helloworld/db/model/World.java
Patch:
@@ -8,7 +8,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "World")
+@Table(name = "world")
 public class World {
 
     @Id

File: frameworks/Java/undertow/src/main/java/hello/DbMongoHandler.java
Patch:
@@ -41,7 +41,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     
     World[] worlds = new World[queries];
     for (int i = 0; i < queries; i++) {
-      DBObject object = database.getCollection("World").findOne(
+      DBObject object = database.getCollection("world").findOne(
           new BasicDBObject("_id", Helper.randomWorld()));
       worlds[i] = new World(
           //

File: frameworks/Java/undertow/src/main/java/hello/FortunesMongoHandler.java
Patch:
@@ -36,7 +36,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       return;
     }
     List<Fortune> fortunes = new ArrayList<>();
-    DBCursor cursor = database.getCollection("Fortune").find();
+    DBCursor cursor = database.getCollection("fortune").find();
     while (cursor.hasNext()) {
       DBObject object = cursor.next();
       fortunes.add(new Fortune(

File: frameworks/Java/undertow/src/main/java/hello/UpdatesMongoHandler.java
Patch:
@@ -42,15 +42,15 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       // we could technically avoid doing either of those things and still
       // produce the correct output and side effects.
       //
-      DBObject object = database.getCollection("World").findOne(key);
+      DBObject object = database.getCollection("world").findOne(key);
       
       @SuppressWarnings("unused")
       // Per test requirement the old value must be read
       int oldRandomNumber = ((Number) object.get("randomNumber")).intValue(); 
       
       int newRandomNumber = Helper.randomWorld();
       object.put("randomNumber", newRandomNumber);
-      database.getCollection("World").update(key, object);
+      database.getCollection("world").update(key, object);
       worlds[i] = new World(id, newRandomNumber);
     }
     exchange.getResponseHeaders().put(

File: frameworks/Java/revenj/src/main/java/hello/QueriesServlet.java
Patch:
@@ -15,7 +15,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
 		final JsonWriter json = ctx.json;
-		final World[] worlds = ctx.loadWorlds(count);
+		final World[] worlds = ctx.loadWorldsSlow(count);
 		json.serialize(worlds, count);
 		json.toStream(res.getOutputStream());
 	}

File: frameworks/Java/revenj/src/main/java/hello/UpdatesServlet.java
Patch:
@@ -18,7 +18,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
 		final JsonWriter json = ctx.json;
-		final World[] worlds = ctx.loadWorlds(count);
+		final World[] worlds = ctx.loadWorldsSlow(count);
 		final ArrayList<World> changed = new ArrayList<>(count);
 		for (int i = 0; i < count; i++) {
 			changed.add(worlds[i].setRandomNumber(ctx.getRandom10k()));

File: frameworks/Java/revenj/src/main/java/hello/QueriesServlet.java
Patch:
@@ -15,7 +15,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
 		final JsonWriter json = ctx.json;
-		final World[] worlds = ctx.loadWorlds(count);
+		final World[] worlds = ctx.loadWorldsSlow(count);
 		json.serialize(worlds, count);
 		json.toStream(res.getOutputStream());
 	}

File: frameworks/Java/revenj/src/main/java/hello/UpdatesServlet.java
Patch:
@@ -18,7 +18,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
 		final JsonWriter json = ctx.json;
-		final World[] worlds = ctx.loadWorlds(count);
+		final World[] worlds = ctx.loadWorldsSlow(count);
 		final ArrayList<World> changed = new ArrayList<>(count);
 		for (int i = 0; i < count; i++) {
 			changed.add(worlds[i].setRandomNumber(ctx.getRandom10k()));

File: frameworks/Java/revenj/src/main/java/hello/DbServlet.java
Patch:
@@ -15,7 +15,7 @@ public class DbServlet extends HttpServlet {
 	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
 		res.setContentType("application/json");
 		final Context ctx = Utils.getContext();
-		final Optional<World> world = ctx.repository.find(ctx.getRandom10k(), ctx.connection);
+		final Optional<World> world = ctx.worlds.find(ctx.getRandom10k(), ctx.connection);
 		final JsonWriter writer = ctx.json;
 		world.get().serialize(writer, false);
 		writer.toStream(res.getOutputStream());

File: frameworks/Java/revenj/src/main/java/hello/QueriesServlet.java
Patch:
@@ -1,6 +1,7 @@
 package hello;
 
 import com.dslplatform.json.JsonWriter;
+import dsl.FrameworkBench.World;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.*;
@@ -14,8 +15,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 		final int count = Utils.parseBoundParam(req);
 		final Context ctx = Utils.getContext();
 		final JsonWriter json = ctx.json;
-		ctx.loadWorlds(count);
-		json.serialize(ctx.worlds, count);
+		final World[] worlds = ctx.loadWorlds(count);
+		json.serialize(worlds, count);
 		json.toStream(res.getOutputStream());
 	}
 }

File: frameworks/Java/revenj/src/main/java/hello/Utils.java
Patch:
@@ -3,7 +3,7 @@
 import javax.servlet.http.HttpServletRequest;
 import java.io.IOException;
 
-class Utils {
+abstract class Utils {
 
 	private static final ThreadLocal<Context> threadContext = new ThreadLocal<Context>() {
 		@Override

File: frameworks/Java/revenj/src/main/java/hello/PlaintextServlet.java
Patch:
@@ -1,4 +1,4 @@
-package dsl;
+package hello;
 
 import java.io.*;
 import java.nio.charset.Charset;

File: frameworks/Java/ninja-standalone/src/main/java/controllers/HelloDbController.java
Patch:
@@ -62,7 +62,7 @@ public Result update(@Param("queries") Integer queries) {
 
         // now update stuff:
         for (World world : worlds) {
-            world.randomNumber = ThreadLocalRandom.current().nextInt();
+            world.randomNumber = ThreadLocalRandom.current().nextInt(DB_ROWS) + 1;
             worldDao.put(world);
         }
 

File: frameworks/Java/curacao/src/main/java/benchmark/Bootstrap.java
Patch:
@@ -1,7 +1,7 @@
 package benchmark;
 
-import com.kolich.curacao.CuracaoContextListener;
-import com.kolich.curacao.CuracaoDispatcherServlet;
+import curacao.CuracaoContextListener;
+import curacao.CuracaoDispatcherServlet;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.webapp.WebAppContext;

File: frameworks/Java/curacao/src/main/java/benchmark/entities/HelloWorld.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.SerializedName;
-import com.kolich.curacao.gson.GsonAppendableCuracaoEntity;
+import curacao.gson.GsonAppendableCuracaoEntity;
 
 public final class HelloWorld extends GsonAppendableCuracaoEntity {
 

File: frameworks/Java/curacao/src/main/java/benchmark/Bootstrap.java
Patch:
@@ -1,7 +1,7 @@
 package benchmark;
 
-import com.kolich.curacao.CuracaoContextListener;
-import com.kolich.curacao.CuracaoDispatcherServlet;
+import curacao.CuracaoContextListener;
+import curacao.CuracaoDispatcherServlet;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.webapp.WebAppContext;

File: frameworks/Java/curacao/src/main/java/benchmark/entities/HelloWorld.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.SerializedName;
-import com.kolich.curacao.gson.GsonAppendableCuracaoEntity;
+import curacao.gson.GsonAppendableCuracaoEntity;
 
 public final class HelloWorld extends GsonAppendableCuracaoEntity {
 

File: frameworks/Java/ninja-standalone/src/main/java/controllers/HelloDbController.java
Patch:
@@ -62,7 +62,7 @@ public Result update(@Param("queries") Integer queries) {
 
         // now update stuff:
         for (World world : worlds) {
-            world.randomNumber = ThreadLocalRandom.current().nextInt();
+            world.randomNumber = ThreadLocalRandom.current().nextInt(DB_ROWS) + 1;
             worldDao.put(world);
         }
 

File: frameworks/Java/undertow-jersey-c3p0/src/main/java/hello/DbResource.java
Patch:
@@ -21,7 +21,7 @@ public class DbResource
   private SessionFactory sessionFactory;
 
   @GET
-  @Produces(APPLICATION_JSON + "; charset=utf-8")
+  @Produces(APPLICATION_JSON)
   public Object db(@QueryParam("queries") String queryParam,
       @QueryParam("single") boolean isSingle)
       throws ExecutionException, InterruptedException

File: frameworks/Java/undertow-jersey-c3p0/src/main/java/hello/JsonMessageBodyWriter.java
Patch:
@@ -15,7 +15,7 @@
 
 @Provider
 @Singleton
-@Produces(APPLICATION_JSON + "; charset=utf-8")
+@Produces(APPLICATION_JSON)
 public class JsonMessageBodyWriter
     implements MessageBodyWriter<Object>
 {

File: frameworks/Java/undertow-jersey-c3p0/src/main/java/hello/JsonResource.java
Patch:
@@ -12,7 +12,7 @@ public class JsonResource
 {
 
   @GET
-  @Produces(APPLICATION_JSON + "; charset=utf-8")
+  @Produces(APPLICATION_JSON)
   public Object json()
   {
     Map<String, String> data = new HashMap<String, String>(1);

File: frameworks/Java/undertow-jersey-c3p0/src/main/java/hello/undertow/UndertowJerseyContainer.java
Patch:
@@ -78,8 +78,8 @@ public void reload(ResourceConfig configuration)
 
     this.applicationHandler = new ApplicationHandler(configuration);
 
-    this.applicationHandler.onReload(this);
     this.applicationHandler.onStartup(this);
+    this.applicationHandler.onReload(this);
   }
 
   @Override

File: frameworks/Java/undertow-jersey-hikaricp/src/main/java/hello/DbResource.java
Patch:
@@ -21,7 +21,7 @@ public class DbResource
   private SessionFactory sessionFactory;
 
   @GET
-  @Produces(APPLICATION_JSON + "; charset=utf-8")
+  @Produces(APPLICATION_JSON)
   public Object db(@QueryParam("queries") String queryParam,
       @QueryParam("single") boolean isSingle)
       throws ExecutionException, InterruptedException

File: frameworks/Java/undertow-jersey-hikaricp/src/main/java/hello/JsonMessageBodyWriter.java
Patch:
@@ -15,7 +15,7 @@
 
 @Provider
 @Singleton
-@Produces(APPLICATION_JSON + "; charset=utf-8")
+@Produces(APPLICATION_JSON)
 public class JsonMessageBodyWriter
     implements MessageBodyWriter<Object>
 {

File: frameworks/Java/undertow-jersey-hikaricp/src/main/java/hello/JsonResource.java
Patch:
@@ -12,7 +12,7 @@ public class JsonResource
 {
 
   @GET
-  @Produces(APPLICATION_JSON + "; charset=utf-8")
+  @Produces(APPLICATION_JSON)
   public Object json()
   {
     Map<String, String> data = new HashMap<String, String>(1);

File: frameworks/Java/undertow-jersey-hikaricp/src/main/java/hello/undertow/UndertowJerseyContainer.java
Patch:
@@ -78,8 +78,8 @@ public void reload(ResourceConfig configuration)
 
     this.applicationHandler = new ApplicationHandler(configuration);
 
-    this.applicationHandler.onReload(this);
     this.applicationHandler.onStartup(this);
+    this.applicationHandler.onReload(this);
   }
 
   @Override

File: frameworks/Java/beyondj/beyondj-service/src/main/java/com/techempower/beyondj/action/FortuneActionBean.java
Patch:
@@ -25,6 +25,7 @@ public Resolution fortunes() {
         Collections.sort(fortunes);
         Map<String, String> headers = new HashMap<>();
         headers.put(TRANSFER_ENCODING, Boolean.TRUE.toString());
+       getContext().getResponse().setCharacterEncoding(UTF_8);
         setResponseHeaders(headers);
         return new ForwardResolution(JSP);
     }
@@ -36,9 +37,9 @@ public List<Fortune> getFortunes() {
     @SpringBean
     private FortuneRepository fortuneRepository;
 
+    public static final String UTF_8 = "UTF-8";
     public static final String FORTUNES = "fortunes";
     public static final String JSP = "/WEB-INF/templates/fortunes.jsp";
     public static final String TRANSFER_ENCODING = "Transfer-Encoding";
-    public static final String FORTUNE_REPOSITORY = "fortuneRepository";
 }
 

File: frameworks/Java/beyondj/beyondj-data/src/main/java/com/techempower/beyondj/Message.java
Patch:
@@ -1,7 +1,8 @@
 package com.techempower.beyondj;
 
 public class Message {
-    private final String message;
+
+    private String message;
 
     public Message(String message) {
         this.message = message;

File: frameworks/Java/beyondj/beyondj-data/src/main/java/com/techempower/beyondj/domain/Fortune.java
Patch:
@@ -9,7 +9,7 @@
 import javax.persistence.Id;
 
 @Entity
-public final class Fortune implements Comparable<Fortune>, Persistable<Integer> {
+public class Fortune implements Comparable<Fortune>, Persistable<Integer> {
 
     @Id
     @GeneratedValue

File: frameworks/Java/beyondj/beyondj-data/src/main/java/com/techempower/beyondj/domain/World.java
Patch:
@@ -9,7 +9,7 @@
 import javax.persistence.Id;
 
 @Entity
-public final class World implements Persistable<Integer> {
+public class World implements Persistable<Integer> {
 
     @Id
     @GeneratedValue

File: frameworks/Java/beyondj/beyondj-data-loader/src/main/java/com/techempower/beyondj/dataset/WorldDataSet.java
Patch:
@@ -17,6 +17,7 @@
 @Component
 public class WorldDataSet {
 
+    public static final String IMPORT_SQL = "import.sql";
     @Autowired
     private EntityManagerFactory entityManagerFactory;
     @Autowired
@@ -28,7 +29,7 @@ public WorldDataSet() {
     @PostConstruct
     public void create() throws Exception {
         if (getRepository().count() == 0) {
-            Resource resource = new ClassPathResource("import.sql");
+            Resource resource = new ClassPathResource(IMPORT_SQL);
             List<String> lines = IOUtils.readLines(resource.getInputStream());
             String[] array = new String[lines.size()];
             jdbcTemplate.batchUpdate(lines.toArray(array));

File: frameworks/Java/sabina/src/main/java/sabina/benchmark/MongoDbRepository.java
Patch:
@@ -49,7 +49,7 @@ final class MongoDbRepository implements Repository {
         fortuneCollection.find ().forEach ((Block<Document>)doc ->
             fortunes.add (
                 new Fortune (
-                    doc.get ("_id", Double.class).intValue (),
+                    doc.get ("_id", Number.class).intValue (),
                     (String)doc.get ("message")
                 )
             )
@@ -76,8 +76,8 @@ private World findWorld (int id) {
 
     private World createWorld (Document world) {
         return new World (
-            world.get ("_id", Double.class).intValue (),
-            world.get ("randomNumber", Double.class).intValue ()
+            world.get ("_id", Number.class).intValue (),
+            world.get ("randomNumber", Number.class).intValue ()
         );
     }
 

File: frameworks/Java/sabina/src/main/java/sabina/benchmark/MongoDbRepository.java
Patch:
@@ -49,7 +49,7 @@ final class MongoDbRepository implements Repository {
         fortuneCollection.find ().forEach ((Block<Document>)doc ->
             fortunes.add (
                 new Fortune (
-                    doc.get ("_id", Integer.class).intValue (),
+                    doc.get ("_id", Double.class).intValue (),
                     (String)doc.get ("message")
                 )
             )
@@ -76,8 +76,8 @@ private World findWorld (int id) {
 
     private World createWorld (Document world) {
         return new World (
-            world.get ("_id", Integer.class).intValue (),
-            world.get ("randomNumber", Integer.class).intValue ()
+            world.get ("_id", Double.class).intValue (),
+            world.get ("randomNumber", Double.class).intValue ()
         );
     }
 

File: frameworks/Java/sabina/src/main/java/sabina/benchmark/MongoDbRepository.java
Patch:
@@ -49,7 +49,7 @@ final class MongoDbRepository implements Repository {
         fortuneCollection.find ().forEach ((Block<Document>)doc ->
             fortunes.add (
                 new Fortune (
-                    doc.get ("_id", Double.class).intValue (),
+                    doc.get ("_id", Number.class).intValue (),
                     (String)doc.get ("message")
                 )
             )
@@ -76,8 +76,8 @@ private World findWorld (int id) {
 
     private World createWorld (Document world) {
         return new World (
-            world.get ("_id", Double.class).intValue (),
-            world.get ("randomNumber", Double.class).intValue ()
+            world.get ("_id", Number.class).intValue (),
+            world.get ("randomNumber", Number.class).intValue ()
         );
     }
 

File: frameworks/Java/sabina/src/main/java/sabina/benchmark/MongoDbRepository.java
Patch:
@@ -49,7 +49,7 @@ final class MongoDbRepository implements Repository {
         fortuneCollection.find ().forEach ((Block<Document>)doc ->
             fortunes.add (
                 new Fortune (
-                    doc.get ("_id", Integer.class).intValue (),
+                    doc.get ("_id", Double.class).intValue (),
                     (String)doc.get ("message")
                 )
             )
@@ -76,8 +76,8 @@ private World findWorld (int id) {
 
     private World createWorld (Document world) {
         return new World (
-            world.get ("_id", Integer.class).intValue (),
-            world.get ("randomNumber", Integer.class).intValue ()
+            world.get ("_id", Double.class).intValue (),
+            world.get ("randomNumber", Double.class).intValue ()
         );
     }
 

File: frameworks/Java/beyondj/beyondj-service/src/main/java/com/techempower/beyondj/action/FortuneActionBean.java
Patch:
@@ -25,6 +25,7 @@ public Resolution fortunes() {
         Collections.sort(fortunes);
         Map<String, String> headers = new HashMap<>();
         headers.put(TRANSFER_ENCODING, Boolean.TRUE.toString());
+       getContext().getResponse().setCharacterEncoding(UTF_8);
         setResponseHeaders(headers);
         return new ForwardResolution(JSP);
     }
@@ -36,9 +37,9 @@ public List<Fortune> getFortunes() {
     @SpringBean
     private FortuneRepository fortuneRepository;
 
+    public static final String UTF_8 = "UTF-8";
     public static final String FORTUNES = "fortunes";
     public static final String JSP = "/WEB-INF/templates/fortunes.jsp";
     public static final String TRANSFER_ENCODING = "Transfer-Encoding";
-    public static final String FORTUNE_REPOSITORY = "fortuneRepository";
 }
 

File: frameworks/Java/beyondj/beyondj-data/src/main/java/com/techempower/beyondj/Message.java
Patch:
@@ -1,7 +1,8 @@
 package com.techempower.beyondj;
 
 public class Message {
-    private final String message;
+
+    private String message;
 
     public Message(String message) {
         this.message = message;

File: frameworks/Java/beyondj/beyondj-data/src/main/java/com/techempower/beyondj/domain/Fortune.java
Patch:
@@ -9,7 +9,7 @@
 import javax.persistence.Id;
 
 @Entity
-public final class Fortune implements Comparable<Fortune>, Persistable<Integer> {
+public class Fortune implements Comparable<Fortune>, Persistable<Integer> {
 
     @Id
     @GeneratedValue

File: frameworks/Java/beyondj/beyondj-data/src/main/java/com/techempower/beyondj/domain/World.java
Patch:
@@ -9,7 +9,7 @@
 import javax.persistence.Id;
 
 @Entity
-public final class World implements Persistable<Integer> {
+public class World implements Persistable<Integer> {
 
     @Id
     @GeneratedValue

File: frameworks/Java/beyondj/beyondj-data-loader/src/main/java/com/techempower/beyondj/dataset/WorldDataSet.java
Patch:
@@ -17,6 +17,7 @@
 @Component
 public class WorldDataSet {
 
+    public static final String IMPORT_SQL = "import.sql";
     @Autowired
     private EntityManagerFactory entityManagerFactory;
     @Autowired
@@ -28,7 +29,7 @@ public WorldDataSet() {
     @PostConstruct
     public void create() throws Exception {
         if (getRepository().count() == 0) {
-            Resource resource = new ClassPathResource("import.sql");
+            Resource resource = new ClassPathResource(IMPORT_SQL);
             List<String> lines = IOUtils.readLines(resource.getInputStream());
             String[] array = new String[lines.size()];
             jdbcTemplate.batchUpdate(lines.toArray(array));

File: frameworks/Java/jawn/src/main/java/app/config/Database.java
Patch:
@@ -27,7 +27,6 @@ public void dbConnections(DatabaseConnections connections) {
         
         String dbUrl = "jdbc:mysql://127.0.0.1:3306/hello_world?";
         
-        
         connections
             .environment(Modes.prod)
             .jdbc()

File: frameworks/Java/jawn/src/main/java/app/db/DbManager.java
Patch:
@@ -27,7 +27,7 @@ public class DbManager {
     public DbManager(DatabaseConnection spec) throws ClassNotFoundException, SQLException, PropertyVetoException {
         if (spec == null) throw new InitException("DatabaseConnection is null");
         
-        source = spec.createDataSource();
+        source = spec;
     }
     
     public World getWorld(int id) {

File: frameworks/Java/jawn/src/main/java/app/config/Database.java
Patch:
@@ -22,11 +22,10 @@ public void dbConnections(DatabaseConnections connections) {
                 "&useUnbufferedInput=false" +
                 "&useReadAheadInput=false" +
                 "&maintainTimeStats=false" +
-                "&useServerPrepStmts" +
+                "&useServerPrepStmts=true" +
                 "&cacheRSMetadata=true";
         
-        String host = System.getProperty("DBHOST", "localhost");
-        String dbUrl = "jdbc:mysql://"+host+"/hello_world?";
+        String dbUrl = "jdbc:mysql://127.0.0.1:3306/hello_world?";
         
         
         connections

File: frameworks/Java/jawn/src/main/java/app/UndertowMain.java
Patch:
@@ -15,9 +15,11 @@ public static void main(String[] args) throws Exception {
         if (args.length > 1)  System.setProperty("DBHOST", args[1]);
         
         ServerConfig config = new ServerConfig();
+        
         config.setContextPath("/");
         config.setPort(8081);
         config.setWebappPath("webapp");
+        if (args.length > 2) config.setHost(args[2]);
         
         UndertowServer server = new UndertowServer();
         server.setupAndStartServer(config);

File: frameworks/Java/undertow/src/main/java/hello/HelloWebServer.java
Patch:
@@ -123,6 +123,8 @@ public World load(Integer id) throws Exception {
         .setSocketOption(Options.BACKLOG, 10000)
         .setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, false) //don't send a keep-alive header for HTTP/1.1 requests, as it is not required
         .setServerOption(UndertowOptions.ALWAYS_SET_DATE, true)
+        .setServerOption(UndertowOptions.ENABLE_CONNECTOR_STATISTICS, false)
+        .setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false)
         .setHandler(Handlers.header(Handlers.path()
             .addPrefixPath("/json",
                 new JsonHandler(objectMapper))

File: frameworks/Java/dropwizard/src/main/java/com/example/helloworld/db/WorldDAO.java
Patch:
@@ -5,4 +5,5 @@
 public interface WorldDAO {
     World findById(int id);
     World findAndModify(int id, int newRandomNumber);
+    World[] updatesQueries(int queries);
 }

File: frameworks/Java/grizzly-jersey/src/main/java/hello/DbResource.java
Patch:
@@ -66,11 +66,11 @@ public World call() throws Exception {
   private int getQueries(String proto) {
     int result = 1;
     try {
-      if (proto != null) {
+      if (proto != null && !proto.trim().isEmpty()) {
         result = Integer.parseInt(proto);
       }
     } catch (NumberFormatException e) {
-      e.printStackTrace();
+      throw new IllegalArgumentException(e);
     }
 
     return Math.min(500, Math.max(1, result));

File: frameworks/Java/grizzly-jersey/src/main/java/hello/DbResource.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.ThreadLocalRandom;
 
-import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
@@ -67,7 +66,9 @@ public World call() throws Exception {
   private int getQueries(String proto) {
     int result = 1;
     try {
-      result = Integer.parseInt(proto);
+      if (proto != null) {
+        result = Integer.parseInt(proto);
+      }
     } catch (NumberFormatException e) {
       e.printStackTrace();
     }

File: frameworks/Java/jawn/src/main/java/app/UndertowMain.java
Patch:
@@ -12,6 +12,8 @@ public static void main(String[] args) throws Exception {
         if (args.length > 0) environment = args[0];
         System.setProperty("JAWN_ENV", environment);
         
+        if (args.length > 1)  System.setProperty("DBHOST", args[1]);
+        
         ServerConfig config = new ServerConfig();
         config.setContextPath("/");
         config.setPort(8081);

File: frameworks/Java/sabina/src/main/java/sabina/benchmark/MongoDbRepository.java
Patch:
@@ -27,10 +27,9 @@
 import org.bson.Document;
 
 final class MongoDbRepository implements Repository {
-//    private static final boolean BULK = true; // TODO
     private static final String [] FORTUNES = {
         "fortune: No such file or directory",
-        "A computer scientist is someone who fixes things that aren''t broken.",
+        "A computer scientist is someone who fixes things that aren't broken.",
         "After enough decimal places, nobody gives a damn.",
         "A bad random number generator: 1, 1, 1, 1, 1, 4.33e+67, 1, 1, 1",
         "A computer program does what you tell it to do, not what you want it to do.",
@@ -62,6 +61,7 @@ final class MongoDbRepository implements Repository {
     }
 
     private void loadData () {
+        fortuneCollection.drop ();
         if (fortuneCollection.count () == 0) {
             int id = 0;
             for (String fortune : FORTUNES) {
@@ -71,6 +71,7 @@ private void loadData () {
             }
         }
 
+        worldCollection.drop ();
         if (worldCollection.count () == 0) {
             final Random random = ThreadLocalRandom.current ();
             for (int ii = 1; ii <= DB_ROWS; ii++) {

File: frameworks/Java/sabina/src/main/java/sabina/benchmark/Application.java
Patch:
@@ -137,7 +137,7 @@ private static Object getFortunes (Request it) {
             e.printStackTrace ();
         }
 
-        fortunes.add (new Fortune (42, "Additional fortune added at request time."));
+        fortunes.add (new Fortune (0, "Additional fortune added at request time."));
         fortunes.sort ((a, b) -> a.message.compareTo (b.message));
 
         it.response.type ("text/html; charset=utf-8");

File: frameworks/Java/sabina/src/test/java/sabina/benchmark/ApplicationTest.java
Patch:
@@ -39,7 +39,7 @@
  * <p>TODO Change assert's order
  */
 public final class ApplicationTest {
-    private static final int THREADS = 32, EXECUTIONS = 64, WARM_UP = 16;
+    private static final int THREADS = 16, EXECUTIONS = 32, WARM_UP = 32;
 
     private static final String ENDPOINT = "http://localhost:5050";
     private static final Gson GSON = new Gson ();

File: frameworks/Java/activeweb/src/main/java/app/config/AppBootstrap.java
Patch:
@@ -18,14 +18,15 @@
 import org.javalite.activeweb.AppContext;
 import org.javalite.activeweb.Bootstrap;
 
-import com.google.inject.Guice;
 import org.javalite.activeweb.Configuration;
+import org.javalite.templator.TemplatorConfig;
 
 /**
  * @author Igor Polevoy
  */
 public class AppBootstrap extends Bootstrap {
     public void init(AppContext context) {
         Configuration.setUseDefaultLayoutForErrors(true);
+        TemplatorConfig.instance().cacheTemplates(true);
     }
 }

File: servlet3-cass/src/main/java/fi/markoa/tfb/servlet3/DatabaseUpdatesServlet.java
Patch:
@@ -47,7 +47,8 @@ public void onSuccess(List<World> worlds) {
           newRandoms = newRandomsFuture.get();
         } catch (InterruptedException | ExecutionException ex) {
           LOGGER.error("failed to generate random numbers", ex);
-          throw new RuntimeException("failed to generate random numbers", ex);
+          errorDispatch(asyncContext, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "failed to generate random numbers"+ex.getMessage());
+          return;
         }
         List<World> newWorlds = new ArrayList<>();
         for(int i = 0; i < worlds.size(); i++)
@@ -58,7 +59,6 @@ public void onSuccess(List<World> worlds) {
           mapper.writeValue(asyncContext.getResponse().getOutputStream(), newWorlds);
         } catch (IOException ex) {
           LOGGER.error("failed to get output stream", ex);
-          throw new RuntimeException("failed to get output stream", ex);
         }
         asyncContext.complete();
 
@@ -68,6 +68,7 @@ public void onSuccess(List<World> worlds) {
       @Override
       public void onFailure(Throwable th) {
         LOGGER.error("update failed", th);
+        errorDispatch(asyncContext, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "update failed: "+th.getMessage());
       }
     }, executorService);
 

File: servlet3-cass/src/main/java/fi/markoa/tfb/servlet3/MessageDAO.java
Patch:
@@ -3,11 +3,11 @@
 import com.google.common.util.concurrent.ListenableFuture;
 
 import java.util.List;
-import java.util.Properties;
 
 public interface MessageDAO {
   void init();
   ListenableFuture<World> read(int id);
   ListenableFuture<List<World>> read(List<Integer> ids);
+  void update(List<World> worlds);
   void destroy();
 }

File: netty/src/main/java/hello/HelloWebServer.java
Patch:
@@ -16,7 +16,7 @@
 
 
 public class HelloWebServer {
-	private static int IO_THREADS = Runtime.getRuntime().availableProcessors() * 2;
+
     static {
         ResourceLeakDetector.setLevel(Level.DISABLED);
     }
@@ -45,7 +45,7 @@ private void doRun(EventLoopGroup loupGroup, Class<? extends ServerChannel> serv
 			b.option(ChannelOption.SO_REUSEADDR, true);
 			b.group(loupGroup).channel(serverChannelClass).childHandler(new HelloServerInitializer(loupGroup.next()));			
             b.option(ChannelOption.MAX_MESSAGES_PER_READ, Integer.MAX_VALUE);
-            b.childOption(ChannelOption.ALLOCATOR, new PooledByteBufAllocator(true, IO_THREADS, IO_THREADS, 8192, 11));
+            b.childOption(ChannelOption.ALLOCATOR, new PooledByteBufAllocator(true));
             b.childOption(ChannelOption.SO_REUSEADDR, true);
             b.childOption(ChannelOption.MAX_MESSAGES_PER_READ, Integer.MAX_VALUE);
 
@@ -67,3 +67,4 @@ public static void main(String[] args) throws Exception {
         new HelloWebServer(port).run();
     }
 }
+

File: ninja-resin/src/main/java/controllers/HelloPlaintextController.java
Patch:
@@ -8,6 +8,6 @@
 @Singleton
 public class HelloPlaintextController {
     public Result index() {
-	return Results.text().renderRaw("Hello, world!");
+	return Results.text().renderRaw("Hello, World!");
     }
 }

File: ninja-resin/src/test/java/controllers/HelloJsonControllerTest.java
Patch:
@@ -24,7 +24,7 @@ public void testHelloJsonController() {
         
         assertThat(
             response.payloadAs(Message.class).message, 
-            is("Hello, world"));
+            is("Hello, World!"));
         
     }
     

File: ninja-resin/src/test/java/controllers/HelloPlaintextControllerTest.java
Patch:
@@ -18,7 +18,7 @@ public void helloPlaintextControllerTest() {
         Response response = makeRequest(
             Request.GET().url(testServerUrl().path(URL_PLAINTEXT)));
         
-        assertThat(response.payload, CoreMatchers.is("Hello, world!"));
+        assertThat(response.payload, CoreMatchers.is("Hello, World!"));
         assertThat(
             response.headers.get("Content-Type"), 
             is("text/plain; charset=UTF-8"));

File: ninja-standalone/src/main/java/controllers/HelloPlaintextController.java
Patch:
@@ -8,6 +8,6 @@
 @Singleton
 public class HelloPlaintextController {
     public Result index() {
-	return Results.text().renderRaw("Hello, world!");
+	return Results.text().renderRaw("Hello, World!");
     }
 }

File: ninja-standalone/src/test/java/controllers/HelloJsonControllerTest.java
Patch:
@@ -24,7 +24,7 @@ public void testHelloJsonController() {
         
         assertThat(
             response.payloadAs(Message.class).message, 
-            is("Hello, world"));
+            is("Hello, World!"));
         
     }
     

File: ninja-standalone/src/test/java/controllers/HelloPlaintextControllerTest.java
Patch:
@@ -18,7 +18,7 @@ public void helloPlaintextControllerTest() {
         Response response = makeRequest(
             Request.GET().url(testServerUrl().path(URL_PLAINTEXT)));
         
-        assertThat(response.payload, CoreMatchers.is("Hello, world!"));
+        assertThat(response.payload, CoreMatchers.is("Hello, World!"));
         assertThat(
             response.headers.get("Content-Type"), 
             is("text/plain; charset=UTF-8"));

File: spring/src/main/java/com/techempower/spring/SampleApplication.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
 import org.springframework.boot.builder.SpringApplicationBuilder;
-import org.springframework.boot.web.SpringBootServletInitializer;
+import org.springframework.boot.context.web.SpringBootServletInitializer;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 

File: spring/src/main/java/com/techempower/spring/SampleApplication.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
 import org.springframework.boot.builder.SpringApplicationBuilder;
-import org.springframework.boot.web.SpringBootServletInitializer;
+import org.springframework.boot.context.web.SpringBootServletInitializer;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 

File: gemini/Source/hello/GhVersion.java
Patch:
@@ -17,7 +17,6 @@
  */
 public class GhVersion
      extends Version
-  implements GeminiConstants
 {
 
   //
@@ -32,7 +31,7 @@ public GhVersion()
     this.setVersionString(getMajorVersion() + "." 
         + StringHelper.padZero(getMinorVersion(), 2)
         + "(" + StringHelper.padZero(getMicroVersion(), 2) 
-        + ") (Gemini " + GEMINI_VERSION + ")");
+        + ") (Gemini " + GeminiConstants.GEMINI_VERSION + ")");
   }
 
   /**

File: activeweb/src/main/java/app/controllers/FortunesController.java
Patch:
@@ -33,7 +33,7 @@ public class FortunesController extends AppController {
     public void index() {
         List<Fortune> dbFortunes = Fortune.findAll();
         List<Fortune> fortunes = new ArrayList<Fortune>(dbFortunes);
-        fortunes.add((Fortune) Fortune.create("id", 0, "message", "New fortune: " + new Date().toString()));
+        fortunes.add((Fortune) Fortune.create("id", 0, "message", "Additional fortune added at request time."));
         Collections.sort(fortunes);
         view("fortunes", fortunes);
         render().noLayout();

File: spark/src/main/java/hello/web/SparkApplication.java
Patch:
@@ -14,7 +14,6 @@
 import spark.Filter;
 import spark.Request;
 import spark.Response;
-import spark.Route;
 
 public class SparkApplication implements spark.servlet.SparkApplication {
 
@@ -51,9 +50,9 @@ private int getQueries(final Request request) {
                 return (param == null ? 1 : Integer.parseInt(param));
             }
         });
-        get(new Route("/plaintext") {
+        get(new LoggingRoute("/plaintext") {
             @Override
-            public Object handle(final Request request, final Response response) {
+            protected Object handleInternal(final Request request, final Response response) {
                 response.type(CONTENT_TYPE_TEXT);
                 return MESSAGE;
             }

File: activeweb/src/test/java/app/controllers/JsonControllerSpec.java
Patch:
@@ -20,6 +20,7 @@
 
 package app.controllers;
 
+import org.javalite.activeweb.Configuration;
 import org.javalite.activeweb.ControllerSpec;
 import org.junit.Test;
 
@@ -30,6 +31,7 @@ public class JsonControllerSpec extends ControllerSpec {
     @Test
     public void shouldRenderMessage() {
 
+        System.out.println("ACTIVE_ENV value ============>>>>" + Configuration.getEnv());
         //execute controller
         request().get("index");
 

File: undertow-edge/src/main/java/hello/CacheHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.cache.LoadingCache;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow-edge/src/main/java/hello/FortunesMongoHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
-import com.google.common.net.MediaType;
 import com.mongodb.DB;
 import com.mongodb.DBCursor;
 import com.mongodb.DBObject;

File: undertow-edge/src/main/java/hello/FortunesSqlHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow-edge/src/main/java/hello/JsonHandler.java
Patch:
@@ -1,7 +1,6 @@
 package hello;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow-edge/src/main/java/hello/PlaintextHandler.java
Patch:
@@ -1,6 +1,5 @@
 package hello;
 
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow-edge/src/main/java/hello/UpdatesSqlHandler.java
Patch:
@@ -1,7 +1,6 @@
 package hello;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow/src/main/java/hello/CacheHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.cache.LoadingCache;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow/src/main/java/hello/FortunesMongoHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
-import com.google.common.net.MediaType;
 import com.mongodb.DB;
 import com.mongodb.DBCursor;
 import com.mongodb.DBObject;

File: undertow/src/main/java/hello/FortunesSqlHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow/src/main/java/hello/JsonHandler.java
Patch:
@@ -1,7 +1,6 @@
 package hello;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow/src/main/java/hello/PlaintextHandler.java
Patch:
@@ -1,6 +1,5 @@
 package hello;
 
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: undertow/src/main/java/hello/UpdatesMongoHandler.java
Patch:
@@ -1,7 +1,6 @@
 package hello;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.net.MediaType;
 import com.mongodb.BasicDBObject;
 import com.mongodb.DB;
 import com.mongodb.DBObject;
@@ -43,7 +42,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       // produce the correct output and side effects.
       //
       DBObject object = database.getCollection("World").findOne(key);
-      int oldRandomNumber = ((Number) object.get("randomNumber")).intValue();
       int newRandomNumber = Helper.randomWorld();
       object.put("randomNumber", newRandomNumber);
       database.getCollection("World").update(key, object);

File: undertow/src/main/java/hello/UpdatesSqlHandler.java
Patch:
@@ -1,7 +1,6 @@
 package hello;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.net.MediaType;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: wicket/src/main/java/hellowicket/WicketApplication.java
Patch:
@@ -1,5 +1,6 @@
 package hellowicket;
 
+import hellowicket.plaintext.HelloTextReference;
 import org.apache.wicket.protocol.http.WebApplication;
 
 /**
@@ -31,6 +32,7 @@ public void init()
 		// mount the resources under test
 		mountResource("/json", new HelloJsonReference());
 		mountResource("/db", new HelloDbReference());
+		mountResource("/plaintext", new HelloTextReference());
 
 		// disable response caching to be more close to other
 		// test applications' behavior

File: undertow/src/main/java/hello/DbSqlHandler.java
Patch:
@@ -53,7 +53,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         Headers.CONTENT_TYPE, JSON_UTF8);
     if (queries == 1)
     {
-      exchange.getResponseSender().send(objectMapper.writeValueAsString(world[0]));
+      exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds[0]));
     }
     else
     {

File: ninja-standalone/src/main/java/controllers/HelloJsonController.java
Patch:
@@ -1,4 +1,4 @@
-package hello.controllers;
+package controllers;
 
 import ninja.Result;
 import ninja.Results;

File: ninja-standalone/src/main/java/controllers/HelloPlaintextController.java
Patch:
@@ -1,4 +1,4 @@
-package hello.controllers;
+package controllers;
 
 import ninja.Result;
 import ninja.Results;
@@ -8,6 +8,6 @@
 @Singleton
 public class HelloPlaintextController {
     public Result index() {
-	return Results.text().render("Hello, world!");
+	return Results.text().renderRaw("Hello, world!");
     }
 }

File: ninja-standalone/src/main/java/model/World.java
Patch:
@@ -1,4 +1,4 @@
-package hello.model;
+package model;
 
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
@@ -7,6 +7,7 @@
 
 @Entity
 public class World {
+
     @Id
     @GeneratedValue(strategy = GenerationType.AUTO)
     public int id;

File: grizzly-jersey/src/main/java/hello/DbResource.java
Patch:
@@ -39,7 +39,7 @@ public Object db(@QueryParam("queries") @DefaultValue("1") final int queries) {
     }
     
     session.close();
-    return worlds;
+    return queries == 1 ? worlds[0] : worlds;
   }
   
 }

File: wicket/src/main/java/hellowicket/HelloJsonResponse.java
Patch:
@@ -21,7 +21,7 @@ protected ResourceResponse newResourceResponse(Attributes attributes)
       public void writeData(Attributes attributes)
       {
         Map<String, String> data = new HashMap<String, String>();
-        data.put("message", "Hello, world");
+        data.put("message", "Hello, World!");
 
         try
         {

File: tapestry/hello/src/main/java/hello/pages/HelloJSON.java
Patch:
@@ -21,7 +21,7 @@ public class HelloJSON
 
   StreamResponse onActivate() {
     Map<String, String> data = new HashMap<String, String>();
-    data.put("message", "Hello, world");
+    data.put("message", "Hello, World!");
     
     String response = "";
     try

File: spring/src/main/java/com/techempower/spring/web/HelloController.java
Patch:
@@ -8,7 +8,7 @@ final class HelloController {
 
     @RequestMapping(value = "/json", produces = "application/json")
     Message json() {
-        return new Message("Hello, world");
+        return new Message("Hello, World!");
     }
 
     @RequestMapping(value = "/plaintext", produces = "text/plain")

File: spark/src/main/java/hello/domain/Message.java
Patch:
@@ -2,6 +2,6 @@
 
 public class Message {
 
-    public String message = "Hello world";
+    public String message = "Hello, World!";
 
 }

File: play-java/app/controllers/Application.java
Patch:
@@ -53,7 +53,7 @@ public boolean condition() {
 
     public static Result json() {
         final ObjectNode result = OBJECT_MAPPER.createObjectNode();
-        result.put("message", "Hello World!");
+        result.put("message", "Hello, World!");
         return ok(result);
     }
 

File: play1siena/app/controllers/Application.java
Patch:
@@ -24,7 +24,7 @@ public static void index() {
 
 	public static void json() {
 		Map<String, String> result = new HashMap<String, String>();
-		result.put("message", "Hello World!");
+		result.put("message", "Hello, World!");
 		renderJSON(result);
 	}
 

File: play1/app/controllers/Application.java
Patch:
@@ -30,7 +30,7 @@ public static void hello() {
 
 	public static void json() {
 		Map<String, String> result = new HashMap<String, String>();
-		result.put("message", "Hello World!");
+		result.put("message", "Hello, World!");
 		renderJSON(result);
 	}
 

File: ninja-standalone/src/main/java/hello/controllers/HelloJsonController.java
Patch:
@@ -9,7 +9,7 @@
 public class HelloJsonController {
 
     public Result index() {
-	return Results.json().render(new Message("Hello, world"));
+	return Results.json().render(new Message("Hello, World!"));
     }
 
     public static class Message {

File: ninja/src/main/java/hello/controllers/HelloJsonController.java
Patch:
@@ -9,7 +9,7 @@
 public class HelloJsonController {
 
     public Result index() {
-	return Results.json().render(new Message("Hello, world"));
+	return Results.json().render(new Message("Hello, World!"));
     }
 
     public static class Message {

File: wicket/src/main/java/hellowicket/WicketApplication.java
Patch:
@@ -1,5 +1,6 @@
 package hellowicket;
 
+import hellowicket.dbupdates.HelloDbUpdatesReference;
 import org.apache.wicket.protocol.http.WebApplication;
 
 /**
@@ -31,6 +32,7 @@ public void init()
 		// mount the resources under test
 		mountResource("/json", new HelloJsonReference());
 		mountResource("/db", new HelloDbReference());
+		mountResource("/updates", new HelloDbUpdatesReference());
 
 		// disable response caching to be more close to other
 		// test applications' behavior

File: wicket/src/main/java/hellowicket/WicketApplication.java
Patch:
@@ -1,5 +1,6 @@
 package hellowicket;
 
+import hellowicket.plaintext.HelloTextReference;
 import org.apache.wicket.protocol.http.WebApplication;
 
 /**
@@ -31,6 +32,7 @@ public void init()
 		// mount the resources under test
 		mountResource("/json", new HelloJsonReference());
 		mountResource("/db", new HelloDbReference());
+		mountResource("/plaintext", new HelloTextReference());
 
 		// disable response caching to be more close to other
 		// test applications' behavior

File: undertow/src/main/java/hello/DbMongoHandler.java
Patch:
@@ -34,14 +34,14 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     int queries = Helper.getQueries(exchange);
     World[] worlds = new World[queries];
     for (int i = 0; i < queries; i++) {
-      DBObject object = database.getCollection("world").findOne(
-          new BasicDBObject("id", Helper.randomWorld()));
+      DBObject object = database.getCollection("World").findOne(
+          new BasicDBObject("_id", Helper.randomWorld()));
       worlds[i] = new World(
           //
           // The creation script for the Mongo database inserts these numbers as
           // JavaScript numbers, which resolve to Doubles in Java.
           //
-          ((Number) object.get("id")).intValue(),
+          ((Number) object.get("_id")).intValue(),
           ((Number) object.get("randomNumber")).intValue());
     }
     exchange.getResponseHeaders().put(

File: undertow/src/main/java/hello/FortunesMongoHandler.java
Patch:
@@ -37,11 +37,11 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       return;
     }
     List<Fortune> fortunes = new ArrayList<>();
-    DBCursor cursor = database.getCollection("fortune").find();
+    DBCursor cursor = database.getCollection("Fortune").find();
     while (cursor.hasNext()) {
       DBObject object = cursor.next();
       fortunes.add(new Fortune(
-          ((Number) object.get("id")).intValue(),
+          ((Number) object.get("_id")).intValue(),
           (String) object.get("message")));
     }
     fortunes.add(new Fortune(0, "Additional fortune added at request time."));

File: undertow/src/main/java/hello/UpdatesMongoHandler.java
Patch:
@@ -35,18 +35,18 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     World[] worlds = new World[queries];
     for (int i = 0; i < queries; i++) {
       int id = Helper.randomWorld();
-      DBObject key = new BasicDBObject("id", id);
+      DBObject key = new BasicDBObject("_id", id);
       //
       // The requirements for the test dictate that we must fetch the World
       // object from the data store and read its randomNumber field, even though
       // we could technically avoid doing either of those things and still
       // produce the correct output and side effects.
       //
-      DBObject object = database.getCollection("world").findOne(key);
+      DBObject object = database.getCollection("World").findOne(key);
       int oldRandomNumber = ((Number) object.get("randomNumber")).intValue();
       int newRandomNumber = Helper.randomWorld();
       object.put("randomNumber", newRandomNumber);
-      database.getCollection("world").update(key, object);
+      database.getCollection("World").update(key, object);
       worlds[i] = new World(id, newRandomNumber);
     }
     exchange.getResponseHeaders().put(

File: vertx/WebServer.java
Patch:
@@ -45,7 +45,7 @@ public void handle(HttpServerRequest req) {
   }
 
   private void handlePlainText(HttpServerRequest req) {
-    req.response().putHeader("Content-Type", "application/json; charset=UTF-8");
+    req.response().putHeader("Content-Type", "text/plain; charset=UTF-8");
     req.response().putHeader("Content-Length", helloWorldContentLength);
     req.response().end(helloWorldBuffer);
   }

File: undertow/src/main/java/hello/HelloWebServer.java
Patch:
@@ -56,7 +56,8 @@ public static void main(String[] args) throws Exception {
    * @throws SQLException if reading from the SQL database (while priming the
    *                      cache) fails
    */
-  public HelloWebServer() throws IOException, SQLException {
+  public HelloWebServer() throws ClassNotFoundException, IOException, SQLException {
+    Class.forName("org.postgresql.Driver");
     Properties properties = new Properties();
     try (InputStream in = HelloWebServer.class.getResourceAsStream(
         "server.properties")) {
@@ -142,6 +143,7 @@ public World load(Integer id) throws Exception {
             .addPath("/cache",
                 new CacheHandler(objectMapper, worldCache)),
             Headers.SERVER_STRING, "undertow")))
+        .setWorkerThreads(200)
         .build()
         .start();
   }

File: undertow/src/main/java/hello/CacheHandler.java
Patch:
@@ -9,6 +9,8 @@
 
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the cache access test.
  */
@@ -30,7 +32,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       worlds[i] = worldCache.get(Helper.randomWorld());
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/DbMongoHandler.java
Patch:
@@ -11,6 +11,8 @@
 
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the single- and multiple-query database tests using MongoDB.
  */
@@ -43,7 +45,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
           ((Number) object.get("randomNumber")).intValue());
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/DbSqlHandler.java
Patch:
@@ -12,6 +12,8 @@
 import java.sql.ResultSet;
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the single- and multiple-query database tests using a SQL database.
  */
@@ -48,7 +50,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       }
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/FortunesMongoHandler.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import static hello.HelloWebServer.HTML_UTF8;
+
 /**
  * Handles the fortunes test using MongoDB.
  */
@@ -48,7 +50,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     StringWriter writer = new StringWriter();
     mustache.execute(writer, fortunes);
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.HTML_UTF_8.toString());
+        Headers.CONTENT_TYPE, HTML_UTF8);
     exchange.getResponseSender().send(writer.toString());
   }
 }

File: undertow/src/main/java/hello/FortunesSqlHandler.java
Patch:
@@ -17,6 +17,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import static hello.HelloWebServer.HTML_UTF8;
+
 /**
  * Handles the fortunes test using a SQL database.
  */
@@ -54,7 +56,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     StringWriter writer = new StringWriter();
     mustache.execute(writer, fortunes);
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.HTML_UTF_8.toString());
+        Headers.CONTENT_TYPE, HTML_UTF8);
     exchange.getResponseSender().send(writer.toString());
   }
 }

File: undertow/src/main/java/hello/JsonHandler.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Collections;
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the JSON test.
  */
@@ -22,7 +24,7 @@ public JsonHandler(ObjectMapper objectMapper) {
   @Override
   public void handleRequest(HttpServerExchange exchange) throws Exception {
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(
         objectMapper.writeValueAsString(
             Collections.singletonMap("message", "Hello, World!")));

File: undertow/src/main/java/hello/PlaintextHandler.java
Patch:
@@ -5,14 +5,16 @@
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;
 
+import static hello.HelloWebServer.TEXT_PLAIN;
+
 /**
  * Handles the plaintext test.
  */
 final class PlaintextHandler implements HttpHandler {
   @Override
   public void handleRequest(HttpServerExchange exchange) throws Exception {
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8.toString());
+        Headers.CONTENT_TYPE, TEXT_PLAIN);
     exchange.getResponseSender().send("Hello, World!");
   }
 }

File: undertow/src/main/java/hello/UpdatesMongoHandler.java
Patch:
@@ -11,6 +11,8 @@
 
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the updates test using MongoDB.
  */
@@ -48,7 +50,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       worlds[i] = new World(id, newRandomNumber);
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/UpdatesSqlHandler.java
Patch:
@@ -12,6 +12,8 @@
 import java.sql.ResultSet;
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the updates test using a SQL database.
  */
@@ -56,7 +58,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       }
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/CacheHandler.java
Patch:
@@ -9,6 +9,8 @@
 
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the cache access test.
  */
@@ -30,7 +32,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       worlds[i] = worldCache.get(Helper.randomWorld());
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/DbMongoHandler.java
Patch:
@@ -11,6 +11,8 @@
 
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the single- and multiple-query database tests using MongoDB.
  */
@@ -43,7 +45,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
           ((Number) object.get("randomNumber")).intValue());
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/DbSqlHandler.java
Patch:
@@ -12,6 +12,8 @@
 import java.sql.ResultSet;
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the single- and multiple-query database tests using a SQL database.
  */
@@ -48,7 +50,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       }
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/FortunesMongoHandler.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import static hello.HelloWebServer.HTML_UTF8;
+
 /**
  * Handles the fortunes test using MongoDB.
  */
@@ -48,7 +50,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     StringWriter writer = new StringWriter();
     mustache.execute(writer, fortunes);
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.HTML_UTF_8.toString());
+        Headers.CONTENT_TYPE, HTML_UTF8);
     exchange.getResponseSender().send(writer.toString());
   }
 }

File: undertow/src/main/java/hello/FortunesSqlHandler.java
Patch:
@@ -17,6 +17,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import static hello.HelloWebServer.HTML_UTF8;
+
 /**
  * Handles the fortunes test using a SQL database.
  */
@@ -54,7 +56,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     StringWriter writer = new StringWriter();
     mustache.execute(writer, fortunes);
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.HTML_UTF_8.toString());
+        Headers.CONTENT_TYPE, HTML_UTF8);
     exchange.getResponseSender().send(writer.toString());
   }
 }

File: undertow/src/main/java/hello/JsonHandler.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Collections;
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the JSON test.
  */
@@ -22,7 +24,7 @@ public JsonHandler(ObjectMapper objectMapper) {
   @Override
   public void handleRequest(HttpServerExchange exchange) throws Exception {
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(
         objectMapper.writeValueAsString(
             Collections.singletonMap("message", "Hello, World!")));

File: undertow/src/main/java/hello/PlaintextHandler.java
Patch:
@@ -5,14 +5,16 @@
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;
 
+import static hello.HelloWebServer.TEXT_PLAIN;
+
 /**
  * Handles the plaintext test.
  */
 final class PlaintextHandler implements HttpHandler {
   @Override
   public void handleRequest(HttpServerExchange exchange) throws Exception {
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.PLAIN_TEXT_UTF_8.toString());
+        Headers.CONTENT_TYPE, TEXT_PLAIN);
     exchange.getResponseSender().send("Hello, World!");
   }
 }

File: undertow/src/main/java/hello/UpdatesMongoHandler.java
Patch:
@@ -11,6 +11,8 @@
 
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the updates test using MongoDB.
  */
@@ -48,7 +50,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       worlds[i] = new World(id, newRandomNumber);
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: undertow/src/main/java/hello/UpdatesSqlHandler.java
Patch:
@@ -12,6 +12,8 @@
 import java.sql.ResultSet;
 import java.util.Objects;
 
+import static hello.HelloWebServer.JSON_UTF8;
+
 /**
  * Handles the updates test using a SQL database.
  */
@@ -56,7 +58,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
       }
     }
     exchange.getResponseHeaders().put(
-        Headers.CONTENT_TYPE, MediaType.JSON_UTF_8.toString());
+        Headers.CONTENT_TYPE, JSON_UTF8);
     exchange.getResponseSender().send(objectMapper.writeValueAsString(worlds));
   }
 }

File: play-java-jpa/app/models/World.java
Patch:
@@ -15,7 +15,7 @@ public class World {
     public Long randomNumber;
 
     public static World findById(final Long id) throws Throwable {
-      return JPA.withTransaction(new play.libs.F.Function0<World>() {
+      return JPA.withTransaction("default", true, new play.libs.F.Function0<World>() {
         public World apply() {
             return JPA.em().find(World.class, id);
         }

File: play-java-jpa/app/models/World.java
Patch:
@@ -15,7 +15,7 @@ public class World {
     public Long randomNumber;
 
     public static World findById(final Long id) throws Throwable {
-      return JPA.withTransaction(new play.libs.F.Function0<World>() {
+      return JPA.withTransaction("default", true, new play.libs.F.Function0<World>() {
         public World apply() {
             return JPA.em().find(World.class, id);
         }

File: gemini/Source/hello/GhForm.java
Patch:
@@ -56,9 +56,8 @@ public GhForm(Context context, String action)
   {
     this(context, action, null);
   }
-
   @Override
-  protected <C extends Context> void onValidlySubmitted(C arg0)
+  protected void onValidlySubmitted()
   {
     // Does nothing.    
   }

File: gemini/Source/hello/GhForm.java
Patch:
@@ -56,9 +56,8 @@ public GhForm(Context context, String action)
   {
     this(context, action, null);
   }
-
   @Override
-  protected <C extends Context> void onValidlySubmitted(C arg0)
+  protected void onValidlySubmitted()
   {
     // Does nothing.    
   }

File: play-java/app/controllers/Application.java
Patch:
@@ -26,7 +26,7 @@ public class Application extends Controller {
     //http://stackoverflow.com/questions/3907929/should-i-make-jacksons-objectmapper-as-static-final
     private static final ObjectMapper objectMapper = new ObjectMapper();
 
-    private static final ExecutionContext dbEc = Akka.system().dispatchers().lookup("db");
+    private static final ExecutionContext dbEc = Akka.system().dispatchers().lookup("akka.actor.db");
 
     public static Result json() {
         final ObjectNode result = objectMapper.createObjectNode();

File: play-java/app/controllers/Application.java
Patch:
@@ -26,7 +26,7 @@ public class Application extends Controller {
     //http://stackoverflow.com/questions/3907929/should-i-make-jacksons-objectmapper-as-static-final
     private static final ObjectMapper objectMapper = new ObjectMapper();
 
-    private static final ExecutionContext dbEc = Akka.system().dispatchers().lookup("db");
+    private static final ExecutionContext dbEc = Akka.system().dispatchers().lookup("akka.actor.db");
 
     public static Result json() {
         final ObjectNode result = objectMapper.createObjectNode();

