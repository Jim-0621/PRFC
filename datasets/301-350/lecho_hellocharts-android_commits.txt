File: hellocharts-library/src/lecho/lib/hellocharts/renderer/AxesRenderer.java
Patch:
@@ -474,7 +474,7 @@ private void prepareAutoGeneratedAxis(Axis axis, int position) {
             stop = visibleViewport.right;
             contentRectDimension = contentRect.width();
         }
-        FloatUtils.computeAutoGeneratedAxisValues(start, stop, contentRectDimension /
+        FloatUtils.computeAutoGeneratedAxisValues(start, stop, Math.abs(contentRectDimension) /
                 labelDimensionForStepsTab[position] / 2, autoValuesBufferTab[position]);
         //Reinitialize tab to hold lines coordinates.
         if (axis.hasLines()

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/AxesRenderer.java
Patch:
@@ -474,7 +474,7 @@ private void prepareAutoGeneratedAxis(Axis axis, int position) {
             stop = visibleViewport.right;
             contentRectDimension = contentRect.width();
         }
-        FloatUtils.computeAutoGeneratedAxisValues(start, stop, contentRectDimension /
+        FloatUtils.computeAutoGeneratedAxisValues(start, stop, Math.abs(contentRectDimension) /
                 labelDimensionForStepsTab[position] / 2, autoValuesBufferTab[position]);
         //Reinitialize tab to hold lines coordinates.
         if (axis.hasLines()

File: hellocharts-library/src/lecho/lib/hellocharts/animation/ChartAnimationListener.java
Patch:
@@ -1,5 +1,7 @@
 package lecho.lib.hellocharts.animation;
 
+import java.util.EventListener;
+
 /**
  * Listener used to listen for chart animation start and stop events. Implementations of this interface can be used for
  * all types of chart animations(data, viewport, PieChart rotation).

File: hellocharts-library/src/lecho/lib/hellocharts/animation/ChartAnimationListener.java
Patch:
@@ -4,7 +4,7 @@
  * Listener used to listen for chart animation start and stop events. Implementations of this interface can be used for
  * all types of chart animations(data, viewport, PieChart rotation).
  */
-public interface ChartAnimationListener {
+public interface ChartAnimationListener extends EventListener {
 
     public void onAnimationStarted();
 

File: hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java
Patch:
@@ -262,7 +262,7 @@ private Viewport computeScrollViewport(float x, float y) {
             left = Math.max(maxViewport.left, Math.min(left, maxViewport.right - width));
             top = Math.max(maxViewport.bottom + height, Math.min(top, maxViewport.top));
 
-            scrollViewport.set(left, top, left + height, top - height);
+            scrollViewport.set(left, top, left + width, top - height);
         }
 
         return scrollViewport;

File: hellocharts-library/src/lecho/lib/hellocharts/model/Line.java
Patch:
@@ -55,6 +55,7 @@ public Line(Line line) {
         this.hasLines = line.hasLines;
         this.hasLabels = line.hasLabels;
         this.hasLabelsOnlyForSelected = line.hasLabelsOnlyForSelected;
+        this.isSquare = line.isSquare;
         this.isCubic = line.isCubic;
         this.isFilled = line.isFilled;
         this.shape = line.shape;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PieChartRenderer.java
Patch:
@@ -277,7 +277,9 @@ private void drawSeparationLines(Canvas canvas) {
             float x1 = sliceVector.x * (circleRadius + touchAdditional) + originCircleOval.centerX();
             float y1 = sliceVector.y * (circleRadius + touchAdditional) + originCircleOval.centerY();
 
-            canvas.drawLine(originCircleOval.centerX(), originCircleOval.centerY(), x1, y1, separationLinesPaint);
+            if(sliceSpacing > 0) {
+                canvas.drawLine(originCircleOval.centerX(), originCircleOval.centerY(), x1, y1, separationLinesPaint);
+            }
 
             lastAngle += angle;
         }

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/AbstractChartRenderer.java
Patch:
@@ -46,7 +46,7 @@ public abstract class AbstractChartRenderer implements ChartRenderer {
     protected float density;
     protected float scaledDensity;
     protected SelectedValue selectedValue = new SelectedValue();
-    protected char[] labelBuffer = new char[32];
+    protected char[] labelBuffer = new char[64];
     protected int labelOffset;
     protected int labelMargin;
     protected boolean isValueLabelBackgroundEnabled;

File: hellocharts-library/src/lecho/lib/hellocharts/model/SliceValue.java
Patch:
@@ -27,6 +27,7 @@ public class SliceValue {
 	/** Darken color used to draw label background and give touch feedback. */
 	private int darkenColor = ChartUtils.DEFAULT_DARKEN_COLOR;
 
+    @Deprecated
 	/** Spacing between this slice and its neighbors. */
 	private int sliceSpacing = DEFAULT_SLICE_SPACING_DP;
 
@@ -104,10 +105,12 @@ public int getDarkenColor() {
 		return darkenColor;
 	}
 
+    @Deprecated
 	public int getSliceSpacing() {
 		return sliceSpacing;
 	}
 
+    @Deprecated
 	public SliceValue setSliceSpacing(int sliceSpacing) {
 		this.sliceSpacing = sliceSpacing;
 		return this;

File: hellocharts-samples/src/lecho/lib/hellocharts/samples/LineChartActivity.java
Patch:
@@ -202,6 +202,8 @@ private void resetViewport() {
 			final Viewport v = new Viewport(chart.getMaximumViewport());
 			v.bottom = 0;
 			v.top = 100;
+			v.left = 0;
+			v.right = numberOfPoints -1;
 			chart.setMaximumViewport(v);
 			chart.setCurrentViewport(v);
 		}

File: hellocharts-library/src/lecho/lib/hellocharts/formatter/AxisValueFormatter.java
Patch:
@@ -14,7 +14,7 @@ public interface AxisValueFormatter {
 
 	/**
 	 * Used only for auto-generated axes. If you are not going to use your implementation for aut-generated axes you can
-	 * skip implementation of this method and just return 0. </br> Formats values with given number of digits after
+	 * skip implementation of this method and just return 0. SFormats values with given number of digits after
 	 * decimal separator. Result is stored in given array. Method returns number of chars for formatted value. The
 	 * formatted value starts at index [formattedValue.length - charsNumber] and ends at index [formattedValue.length-1].
 	 */

File: hellocharts-library/src/lecho/lib/hellocharts/formatter/ValueFormatterHelper.java
Patch:
@@ -67,7 +67,6 @@ public ValueFormatterHelper setDecimalSeparator(char decimalSeparator) {
 	 * Formats float value. Result is stored in (output) formattedValue array. Method
 	 * returns number of chars of formatted value. The formatted value starts at index [formattedValue.length -
 	 * charsNumber] and ends at index [formattedValue.length-1].
-	 * <p/>
 	 * Note: If label is not null it will be used as formattedValue instead of float value.
 	 * Note: Parameter defaultDigitsNumber is used only if you didn't change decimalDigintsNumber value using
 	 * method {@link #setDecimalDigitsNumber(int)}.

File: hellocharts-library/src/lecho/lib/hellocharts/model/Axis.java
Patch:
@@ -209,7 +209,7 @@ public Axis setTextColor(int color) {
 	}
 
 	/**
-	 * @see {{@link #setInside(boolean)}
+	 * @see #setInside(boolean)
 	 */
 	public boolean isInside() {
 		return isInside;

File: hellocharts-library/src/lecho/lib/hellocharts/model/BubbleChartData.java
Patch:
@@ -129,8 +129,8 @@ public float getBubbleScale() {
 	}
 
 	/**
-	 * Set bubble scale which is used to adjust bubble size. If you want smaller bubbles set scale <0, 1>, if you want
-	 * bigger bubbles set scale >1, default 1.0f.
+	 * Set bubble scale which is used to adjust bubble size. If you want smaller bubbles set scale {@code <0, 1>},
+	 * if you want bigger bubbles set scale greater than 1, default is 1.0f.
 	 */
 	public void setBubbleScale(float bubbleScale) {
 		this.bubbleScale = bubbleScale;

File: hellocharts-library/src/lecho/lib/hellocharts/model/ChartData.java
Patch:
@@ -65,7 +65,7 @@ public interface ChartData {
 	public void setAxisYRight(Axis axisY);
 
 	/**
-	 * @see #see #setAxisYRight(Axis)
+	 * @see #setAxisYRight(Axis)
 	 */
 	public Axis getAxisYRight();
 

File: hellocharts-library/src/lecho/lib/hellocharts/model/Column.java
Patch:
@@ -10,7 +10,6 @@
 /**
  * Single column for ColumnChart. One column can be divided into multiple sub-columns(ColumnValues) especially for
  * stacked ColumnChart.
- * <p/>
  * Note: you can set X value for columns or sub-columns, columns are by default indexed from 0 to numOfColumns-1 and
  * column index is used as column X value, so first column has X value 0, second clumn has X value 1 etc.
  * If you want to display AxisValue for given column you should initialize AxisValue with X value of that column.

File: hellocharts-library/src/lecho/lib/hellocharts/util/FloatUtils.java
Patch:
@@ -92,7 +92,6 @@ public static float roundToOneSignificantFigure(double num) {
 	/**
 	 * Formats a float value to the given number of decimals. Returns the length of the string. The string begins at
 	 * [endIndex] - [return value] and ends at [endIndex]. It's up to you to check indexes correctness.
-	 * <p/>
 	 * Parameter [endIndex] can be helpful when you want to append some text to formatted value.
 	 *
 	 * @return number of characters of formatted value

File: hellocharts-library/src/lecho/lib/hellocharts/view/Chart.java
Patch:
@@ -136,15 +136,15 @@ public interface Chart {
 	 * Move/Srcoll viewport to position x,y(that position must be within maximum chart viewport). If possible viewport
 	 * will be centered at this point. Width and height of viewport will not be modified.
 	 * 
-	 * @see #setCurrentViewport(Viewport);
+	 * @see #setCurrentViewport(lecho.lib.hellocharts.model.Viewport)
 	 */
 	public void moveTo(float x, float y);
 
 	/**
 	 * Animate viewport to position x,y(that position must be within maximum chart viewport). If possible viewport
 	 * will be centered at this point. Width and height of viewport will not be modified.
 	 *
-	 * @see #setCurrentViewport(Viewport);
+	 * @see #setCurrentViewport(lecho.lib.hellocharts.model.Viewport) ;
 	 */
 	public void moveToWithAnimation(float x, float y);
 
@@ -168,7 +168,7 @@ public interface Chart {
 	public float getMaxZoom();
 
 	/**
-	 * Set max zoom value >= 1. Default maximum zoom is 20.
+	 * Set max zoom value. Default maximum zoom is 20.
 	 * 
 	 */
 	public void setMaxZoom(float maxZoom);

File: hellocharts-library/src/lecho/lib/hellocharts/animation/ChartViewportAnimator.java
Patch:
@@ -6,10 +6,10 @@ public interface ChartViewportAnimator {
 
 	public static final int FAST_ANIMATION_DURATION = 300;
 
-	public void setDuration(long duration);
-
 	public void startAnimation(Viewport startViewport, Viewport targetViewport);
 
+	public void startAnimation(Viewport startViewport, Viewport targetViewport, long duration);
+
 	public void cancelAnimation();
 
 	public boolean isAnimationStarted();

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/LineChartRenderer.java
Patch:
@@ -119,7 +119,6 @@ public void draw(Canvas canvas) {
         if (null != softwareBitmap) {
             canvas.drawBitmap(softwareBitmap, 0, 0, null);
         }
-
     }
 
     @Override

File: hellocharts-library/src/lecho/lib/hellocharts/formatter/AxisValueFormatter.java
Patch:
@@ -18,5 +18,5 @@ public interface AxisValueFormatter {
 	 * decimal separator. Result is stored in given array. Method returns number of chars for formatted value. The
 	 * formatted value starts at index [formattedValue.length - charsNumber] and ends at index [formattedValue.length-1].
 	 */
-	public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int decimalDigits);
+	public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits);
 }

File: hellocharts-samples/src/lecho/lib/hellocharts/samples/SpeedChartActivity.java
Patch:
@@ -147,7 +147,7 @@ public HeightValueFormatter(float scale, float sub, int decimalDigits) {
 			}
 
 			@Override
-			public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int decimalDigits) {
+			public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
 				float scaledValue = (value + sub) / scale;
 				return super.formatValueForAutoGeneratedAxis(formattedValue, scaledValue, this.decimalDigits);
 			}

File: hellocharts-samples/src/lecho/lib/hellocharts/samples/TempoChartActivity.java
Patch:
@@ -182,7 +182,7 @@ public HeightValueFormatter(float scale, float sub, int decimalDigits) {
 			}
 
 			@Override
-			public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int decimalDigits) {
+			public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
 				float scaledValue = (value + sub) / scale;
 				return super.formatValueForAutoGeneratedAxis(formattedValue, scaledValue, this.decimalDigits);
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/model/Axis.java
Patch:
@@ -85,7 +85,6 @@ public class Axis {
 	/**
 	 * Creates auto-generated axis without name and with default formatter.
 	 *
-	 * @see lecho.lib.hellocharts.formatter.SimpleValueFormatter
 	 */
 	public Axis() {
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/model/AxisValue.java
Patch:
@@ -10,7 +10,7 @@ public class AxisValue {
 	private char[] label;
 
 	public AxisValue(float value) {
-		this.value = value;
+		setValue(value);
 	}
 
 	public AxisValue(float value, char[] label) {

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/BubbleChartRenderer.java
Patch:
@@ -3,6 +3,7 @@
 import lecho.lib.hellocharts.ChartComputator;
 import lecho.lib.hellocharts.model.BubbleChartData;
 import lecho.lib.hellocharts.model.BubbleValue;
+import lecho.lib.hellocharts.model.SelectedValue.SelectedValueType;
 import lecho.lib.hellocharts.model.ValueFormatter;
 import lecho.lib.hellocharts.model.ValueShape;
 import lecho.lib.hellocharts.model.Viewport;
@@ -124,15 +125,15 @@ public boolean checkTouch(float touchX, float touchY) {
 
 			if (ValueShape.SQUARE.equals(bubbleValue.getShape())) {
 				if (bubbleRect.contains(touchX, touchY)) {
-					selectedValue.set(valueIndex, valueIndex, 0);
+					selectedValue.set(valueIndex, valueIndex, SelectedValueType.NONE);
 				}
 			} else if (ValueShape.CIRCLE.equals(bubbleValue.getShape())) {
 				final float diffX = touchX - bubbleCenter.x;
 				final float diffY = touchY - bubbleCenter.y;
 				final float touchDistance = (float) Math.sqrt((diffX * diffX) + (diffY * diffY));
 
 				if (touchDistance <= rawRadius) {
-					selectedValue.set(valueIndex, valueIndex, 0);
+					selectedValue.set(valueIndex, valueIndex, SelectedValueType.NONE);
 				}
 			} else {
 				throw new IllegalArgumentException("Invalid bubble shape: " + bubbleValue.getShape());

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/ColumnChartRenderer.java
Patch:
@@ -4,6 +4,7 @@
 import lecho.lib.hellocharts.model.Column;
 import lecho.lib.hellocharts.model.ColumnChartData;
 import lecho.lib.hellocharts.model.ColumnValue;
+import lecho.lib.hellocharts.model.SelectedValue.SelectedValueType;
 import lecho.lib.hellocharts.provider.ColumnChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
@@ -331,7 +332,7 @@ private void highlightSubcolumn(Canvas canvas, Column column, ColumnValue column
 
 	private void checkRectToDraw(int columnIndex, int valueIndex) {
 		if (drawRect.contains(touchedPoint.x, touchedPoint.y)) {
-			selectedValue.set(columnIndex, valueIndex, 0);
+			selectedValue.set(columnIndex, valueIndex, SelectedValueType.NONE);
 		}
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/LineChartRenderer.java
Patch:
@@ -4,6 +4,7 @@
 import lecho.lib.hellocharts.model.Line;
 import lecho.lib.hellocharts.model.LineChartData;
 import lecho.lib.hellocharts.model.PointValue;
+import lecho.lib.hellocharts.model.SelectedValue.SelectedValueType;
 import lecho.lib.hellocharts.model.ValueShape;
 import lecho.lib.hellocharts.provider.LineChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
@@ -165,7 +166,7 @@ public boolean checkTouch(float touchX, float touchY) {
 				final float rawValueX = computator.computeRawX(pointValue.getX());
 				final float rawValueY = computator.computeRawY(pointValue.getY());
 				if (isInArea(rawValueX, rawValueY, touchX, touchY, pointRadius + touchTolleranceMargin)) {
-					selectedValue.set(lineIndex, valueIndex, 0);
+					selectedValue.set(lineIndex, valueIndex, SelectedValueType.NONE);
 				}
 				++valueIndex;
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PieChartRenderer.java
Patch:
@@ -3,6 +3,7 @@
 import lecho.lib.hellocharts.model.ArcValue;
 import lecho.lib.hellocharts.model.PieChartData;
 import lecho.lib.hellocharts.model.SelectedValue;
+import lecho.lib.hellocharts.model.SelectedValue.SelectedValueType;
 import lecho.lib.hellocharts.model.ValueFormatter;
 import lecho.lib.hellocharts.provider.PieChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
@@ -165,7 +166,7 @@ public boolean checkTouch(float touchX, float touchY) {
 		for (ArcValue arcValue : data.getValues()) {
 			final float angle = Math.abs(arcValue.getValue()) * arcScale;
 			if (touchAngle >= lastAngle) {
-				selectedValue.set(arcIndex, arcIndex, arcIndex);
+				selectedValue.set(arcIndex, arcIndex, SelectedValueType.NONE);
 			}
 			lastAngle += angle;
 			++arcIndex;
@@ -420,7 +421,7 @@ public ArcValue getValueForAngle(int angle, SelectedValue selectedValue) {
 			final float tempAngle = Math.abs(arcValue.getValue()) * arcScale;
 			if (touchAngle >= lastAngle) {
 				if (null != selectedValue) {
-					selectedValue.set(arcIndex, arcIndex, arcIndex);
+					selectedValue.set(arcIndex, arcIndex, SelectedValueType.NONE);
 				}
 				return arcValue;
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/view/BubbleChartView.java
Patch:
@@ -101,6 +101,7 @@ public void setOnValueTouchListener(BubbleChartOnValueTouchListener touchListene
 	 */
 	public void removeMargins() {
 		bubbleChartRenderer.removeMargins();
+		ViewCompat.postInvalidateOnAnimation(this);
 	}
 
 	public interface BubbleChartOnValueTouchListener {

File: hellocharts-library/src/lecho/lib/hellocharts/gesture/ChartTouchHandler.java
Patch:
@@ -6,7 +6,6 @@
 import lecho.lib.hellocharts.renderer.ChartRenderer;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;
-import android.util.Log;
 import android.view.GestureDetector;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
@@ -294,7 +293,6 @@ public boolean onDown(MotionEvent e) {
 
 		@Override
 		public boolean onDoubleTap(MotionEvent e) {
-			Log.e("TAG", "on double tab");
 			if (isZoomEnabled) {
 				return chartZoomer.startZoom(e, chart.getChartComputator());
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/gesture/ChartTouchHandler.java
Patch:
@@ -6,7 +6,6 @@
 import lecho.lib.hellocharts.renderer.ChartRenderer;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;
-import android.support.v4.view.ScaleGestureDetectorCompat;
 import android.util.Log;
 import android.view.GestureDetector;
 import android.view.MotionEvent;

File: hellocharts-library/src/lecho/lib/hellocharts/model/ValueFormatter.java
Patch:
@@ -17,9 +17,9 @@ public interface ValueFormatter {
 	public int formatValue(char[] formattedValue, float[] values, char[] label);
 
 	/**
-	 * Used mostly for auto-generated axes. Formats values with given number of digits after decimal separator. Result
-	 * is stored in given array. Method returns number of chars for formatted value. The formated value starts at index
+	 * Used for auto-generated axes. Formats values with given number of digits after decimal separator. Result is
+	 * stored in given array. Method returns number of chars for formatted value. The formated value starts at index
 	 * [formattedValue.length - nummChars] and ends at index [formatteValue.length-1].
 	 */
-	public int formatValue(char[] formattedValue, float[] values, char[] label, int digits);
+	public int formatAutoValue(char[] formattedValue, float[] values, int digits);
 }

File: hellocharts-library/src/lecho/lib/hellocharts/provider/BubbleChartDataProvider.java
Patch:
@@ -1,4 +1,4 @@
-package lecho.lib.hellocharts.model.provider;
+package lecho.lib.hellocharts.provider;
 
 import lecho.lib.hellocharts.model.BubbleChartData;
 

File: hellocharts-library/src/lecho/lib/hellocharts/provider/ColumnChartDataProvider.java
Patch:
@@ -1,4 +1,4 @@
-package lecho.lib.hellocharts.model.provider;
+package lecho.lib.hellocharts.provider;
 
 import lecho.lib.hellocharts.model.ColumnChartData;
 

File: hellocharts-library/src/lecho/lib/hellocharts/provider/ComboLineColumnChartDataProvider.java
Patch:
@@ -1,4 +1,4 @@
-package lecho.lib.hellocharts.model.provider;
+package lecho.lib.hellocharts.provider;
 
 import lecho.lib.hellocharts.model.ComboLineColumnChartData;
 

File: hellocharts-library/src/lecho/lib/hellocharts/provider/LineChartDataProvider.java
Patch:
@@ -1,4 +1,4 @@
-package lecho.lib.hellocharts.model.provider;
+package lecho.lib.hellocharts.provider;
 
 import lecho.lib.hellocharts.model.LineChartData;
 

File: hellocharts-library/src/lecho/lib/hellocharts/provider/PieChartDataProvider.java
Patch:
@@ -1,4 +1,4 @@
-package lecho.lib.hellocharts.model.provider;
+package lecho.lib.hellocharts.provider;
 
 import lecho.lib.hellocharts.model.PieChartData;
 

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/BubbleChartRenderer.java
Patch:
@@ -4,7 +4,7 @@
 import lecho.lib.hellocharts.model.BubbleChartData;
 import lecho.lib.hellocharts.model.BubbleValue;
 import lecho.lib.hellocharts.model.Viewport;
-import lecho.lib.hellocharts.model.provider.BubbleChartDataProvider;
+import lecho.lib.hellocharts.provider.BubbleChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/ColumnChartRenderer.java
Patch:
@@ -4,7 +4,7 @@
 import lecho.lib.hellocharts.model.Column;
 import lecho.lib.hellocharts.model.ColumnChartData;
 import lecho.lib.hellocharts.model.ColumnValue;
-import lecho.lib.hellocharts.model.provider.ColumnChartDataProvider;
+import lecho.lib.hellocharts.provider.ColumnChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/ComboLineColumnChartRenderer.java
Patch:
@@ -1,7 +1,7 @@
 package lecho.lib.hellocharts.renderer;
 
-import lecho.lib.hellocharts.model.provider.ColumnChartDataProvider;
-import lecho.lib.hellocharts.model.provider.LineChartDataProvider;
+import lecho.lib.hellocharts.provider.ColumnChartDataProvider;
+import lecho.lib.hellocharts.provider.LineChartDataProvider;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;
 import android.graphics.Canvas;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/LineChartRenderer.java
Patch:
@@ -4,7 +4,7 @@
 import lecho.lib.hellocharts.model.Line;
 import lecho.lib.hellocharts.model.LineChartData;
 import lecho.lib.hellocharts.model.PointValue;
-import lecho.lib.hellocharts.model.provider.LineChartDataProvider;
+import lecho.lib.hellocharts.provider.LineChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PieChartRenderer.java
Patch:
@@ -3,7 +3,7 @@
 import lecho.lib.hellocharts.model.ArcValue;
 import lecho.lib.hellocharts.model.PieChartData;
 import lecho.lib.hellocharts.model.SelectedValue;
-import lecho.lib.hellocharts.model.provider.PieChartDataProvider;
+import lecho.lib.hellocharts.provider.PieChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PreviewColumnChartRenderer.java
Patch:
@@ -2,7 +2,7 @@
 
 import lecho.lib.hellocharts.ChartComputator;
 import lecho.lib.hellocharts.model.Viewport;
-import lecho.lib.hellocharts.model.provider.ColumnChartDataProvider;
+import lecho.lib.hellocharts.provider.ColumnChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PreviewLineChartRenderer.java
Patch:
@@ -2,7 +2,7 @@
 
 import lecho.lib.hellocharts.ChartComputator;
 import lecho.lib.hellocharts.model.Viewport;
-import lecho.lib.hellocharts.model.provider.LineChartDataProvider;
+import lecho.lib.hellocharts.provider.LineChartDataProvider;
 import lecho.lib.hellocharts.util.Utils;
 import lecho.lib.hellocharts.view.Chart;
 import android.content.Context;

File: hellocharts-library/src/lecho/lib/hellocharts/view/BubbleChartView.java
Patch:
@@ -5,7 +5,7 @@
 import lecho.lib.hellocharts.model.BubbleValue;
 import lecho.lib.hellocharts.model.ChartData;
 import lecho.lib.hellocharts.model.SelectedValue;
-import lecho.lib.hellocharts.model.provider.BubbleChartDataProvider;
+import lecho.lib.hellocharts.provider.BubbleChartDataProvider;
 import lecho.lib.hellocharts.renderer.BubbleChartRenderer;
 import android.content.Context;
 import android.support.v4.view.ViewCompat;

File: hellocharts-library/src/lecho/lib/hellocharts/view/ColumnChartView.java
Patch:
@@ -4,7 +4,7 @@
 import lecho.lib.hellocharts.model.ColumnChartData;
 import lecho.lib.hellocharts.model.ColumnValue;
 import lecho.lib.hellocharts.model.SelectedValue;
-import lecho.lib.hellocharts.model.provider.ColumnChartDataProvider;
+import lecho.lib.hellocharts.provider.ColumnChartDataProvider;
 import lecho.lib.hellocharts.renderer.ColumnChartRenderer;
 import android.content.Context;
 import android.support.v4.view.ViewCompat;

File: hellocharts-library/src/lecho/lib/hellocharts/view/ComboLineColumnChartView.java
Patch:
@@ -8,9 +8,9 @@
 import lecho.lib.hellocharts.model.LineChartData;
 import lecho.lib.hellocharts.model.PointValue;
 import lecho.lib.hellocharts.model.SelectedValue;
-import lecho.lib.hellocharts.model.provider.ColumnChartDataProvider;
-import lecho.lib.hellocharts.model.provider.ComboLineColumnChartDataProvider;
-import lecho.lib.hellocharts.model.provider.LineChartDataProvider;
+import lecho.lib.hellocharts.provider.ColumnChartDataProvider;
+import lecho.lib.hellocharts.provider.ComboLineColumnChartDataProvider;
+import lecho.lib.hellocharts.provider.LineChartDataProvider;
 import lecho.lib.hellocharts.renderer.ComboLineColumnChartRenderer;
 import android.content.Context;
 import android.support.v4.view.ViewCompat;

File: hellocharts-library/src/lecho/lib/hellocharts/view/LineChartView.java
Patch:
@@ -5,7 +5,7 @@
 import lecho.lib.hellocharts.model.LineChartData;
 import lecho.lib.hellocharts.model.PointValue;
 import lecho.lib.hellocharts.model.SelectedValue;
-import lecho.lib.hellocharts.model.provider.LineChartDataProvider;
+import lecho.lib.hellocharts.provider.LineChartDataProvider;
 import lecho.lib.hellocharts.renderer.LineChartRenderer;
 import android.content.Context;
 import android.support.v4.view.ViewCompat;

File: hellocharts-library/src/lecho/lib/hellocharts/view/PieChartView.java
Patch:
@@ -9,7 +9,7 @@
 import lecho.lib.hellocharts.model.ChartData;
 import lecho.lib.hellocharts.model.PieChartData;
 import lecho.lib.hellocharts.model.SelectedValue;
-import lecho.lib.hellocharts.model.provider.PieChartDataProvider;
+import lecho.lib.hellocharts.provider.PieChartDataProvider;
 import lecho.lib.hellocharts.renderer.PieChartRenderer;
 import android.content.Context;
 import android.graphics.RectF;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/LineChartRenderer.java
Patch:
@@ -460,7 +460,7 @@ private void drawArea(Canvas canvas, int transparency) {
 		final Rect contentRect = computator.getContentRect();
 
 		float baseRawValue = computator.computeRawY(baseValue);
-		baseRawValue = Math.min(contentRect.height(), Math.max(baseRawValue, 0));
+		baseRawValue = Math.min(contentRect.bottom, Math.max(baseRawValue, contentRect.top));
 
 		path.lineTo(contentRect.right, baseRawValue);
 		path.lineTo(contentRect.left, baseRawValue);

File: hellocharts-library/src/lecho/lib/hellocharts/model/Axis.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import android.graphics.Color;
 import android.graphics.Typeface;
 
 import lecho.lib.hellocharts.util.Utils;
@@ -24,8 +25,8 @@ public class Axis {
 	private String name;
 	private boolean isAutoGenerated = true;
 	private boolean hasLines = false;
-	private int textColor = Utils.DEFAULT_DARKEN_COLOR;
-	private int lineColor = Utils.DEFAULT_COLOR;
+	private int textColor = Color.LTGRAY;
+	private int lineColor = Utils.DEFAULT_DARKEN_COLOR;
 	private int textSize = DEFAULT_TEXT_SIZE_SP;
 	private int maxLabelChars = DEFAULT_MAX_AXIS_LABEL_CHARS;
 	private Typeface typeface;

File: hellocharts-library/src/lecho/lib/hellocharts/view/PreviewColumnChartView.java
Patch:
@@ -4,7 +4,6 @@
 import lecho.lib.hellocharts.PreviewChartComputator;
 import lecho.lib.hellocharts.gesture.PreviewChartTouchHandler;
 import lecho.lib.hellocharts.model.ColumnChartData;
-import lecho.lib.hellocharts.renderer.DefaultAxesRenderer;
 import lecho.lib.hellocharts.renderer.PreviewColumnChartRenderer;
 import android.content.Context;
 import android.support.v4.view.ViewCompat;
@@ -27,7 +26,6 @@ public PreviewColumnChartView(Context context, AttributeSet attrs) {
 	public PreviewColumnChartView(Context context, AttributeSet attrs, int defStyle) {
 		super(context, attrs, defStyle);
 		chartComputator = new PreviewChartComputator();
-		axesRenderer = new DefaultAxesRenderer(context, this);
 		previewChartRenderer = new PreviewColumnChartRenderer(context, this, this);
 		chartRenderer = previewChartRenderer;
 		touchHandler = new PreviewChartTouchHandler(context, this);

File: hellocharts-library/src/lecho/lib/hellocharts/view/PreviewLineChartView.java
Patch:
@@ -4,7 +4,6 @@
 import lecho.lib.hellocharts.PreviewChartComputator;
 import lecho.lib.hellocharts.gesture.PreviewChartTouchHandler;
 import lecho.lib.hellocharts.model.LineChartData;
-import lecho.lib.hellocharts.renderer.DefaultAxesRenderer;
 import lecho.lib.hellocharts.renderer.PreviewLineChartRenderer;
 import android.content.Context;
 import android.support.v4.view.ViewCompat;
@@ -27,7 +26,6 @@ public PreviewLineChartView(Context context, AttributeSet attrs) {
 	public PreviewLineChartView(Context context, AttributeSet attrs, int defStyle) {
 		super(context, attrs, defStyle);
 		chartComputator = new PreviewChartComputator();
-		axesRenderer = new DefaultAxesRenderer(context, this);
 		previewChartRenderer = new PreviewLineChartRenderer(context, this, this);
 		chartRenderer = previewChartRenderer;
 		touchHandler = new PreviewChartTouchHandler(context, this);

File: hellocharts-samples/src/lecho/lib/hellocharts/samples/ComboLineColumnChartActivity.java
Patch:
@@ -163,7 +163,7 @@ private void generateDefaultData() {
 			// Chart looks the best when line data and column data have similar maximum viewports.
 			data = new ComboLineColumnChartData(generateDefaultColumnData(), generateDefaultLineData());
 			data.setAxisXBottom(new Axis().setName("Axis X"));
-			data.setAxisYLeft(new Axis().setName("Axis Y"));
+			data.setAxisYLeft(new Axis().setName("Axis Y").setHasLines(true));
 		}
 
 		private LineChartData generateDefaultLineData() {

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/BubbleChartRenderer.java
Patch:
@@ -108,15 +108,15 @@ public boolean checkTouch(float touchX, float touchY) {
 
 			if (bubbleValue.getShape() == BubbleValue.SHAPE_SQUARE) {
 				if (bubbleRect.contains(touchX, touchY)) {
-					selectedValue.set(valueIndex, valueIndex);
+					selectedValue.set(valueIndex, valueIndex, 0);
 				}
 			} else {
 				final float diffX = touchX - bubbleCenter.x;
 				final float diffY = touchY - bubbleCenter.y;
 				final float touchDistance = (float) Math.sqrt((diffX * diffX) + (diffY * diffY));
 
 				if (touchDistance <= rawRadius) {
-					selectedValue.set(valueIndex, valueIndex);
+					selectedValue.set(valueIndex, valueIndex, 0);
 				}
 			}
 			++valueIndex;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/ColumnChartRenderer.java
Patch:
@@ -153,7 +153,8 @@ private void highlightColumnsForSubcolumns(Canvas canvas) {
 		final ChartComputator computator = chart.getChartComputator();
 		final float columnWidth = calculateColumnWidth(computator, data.getFillRatio());
 		Column column = data.getColumns().get(selectedValue.getFirstIndex());
-		processColumnForSubcolumns(canvas, computator, column, columnWidth, selectedValue.getFirstIndex(), MODE_HIGHLIGHT);
+		processColumnForSubcolumns(canvas, computator, column, columnWidth, selectedValue.getFirstIndex(),
+				MODE_HIGHLIGHT);
 	}
 
 	private void checkTouchForSubcolumns(float touchX, float touchY) {
@@ -312,7 +313,7 @@ private void highlightSubcolumn(Canvas canvas, Column column, ColumnValue column
 
 	private void checkRectToDraw(int columnIndex, int valueIndex) {
 		if (drawRect.contains(touchedPoint.x, touchedPoint.y)) {
-			selectedValue.set(columnIndex, valueIndex);
+			selectedValue.set(columnIndex, valueIndex, 0);
 		}
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/LineChartRenderer.java
Patch:
@@ -145,7 +145,7 @@ public boolean checkTouch(float touchX, float touchY) {
 				final float rawValueX = computator.computeRawX(pointValue.getX());
 				final float rawValueY = computator.computeRawY(pointValue.getY());
 				if (isInArea(rawValueX, rawValueY, touchX, touchY, pointRadius + touchTolleranceMargin)) {
-					selectedValue.set(lineIndex, valueIndex);
+					selectedValue.set(lineIndex, valueIndex, 0);
 				}
 				++valueIndex;
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PieChartRenderer.java
Patch:
@@ -146,7 +146,7 @@ public boolean checkTouch(float touchX, float touchY) {
 		for (ArcValue arcValue : data.getValues()) {
 			final float angle = Math.abs(arcValue.getValue()) * arcScale;
 			if (touchAngle >= lastAngle) {
-				selectedValue.set(arcIndex, arcIndex);
+				selectedValue.set(arcIndex, arcIndex, 0);
 			}
 			lastAngle += angle;
 			++arcIndex;

File: hellocharts-library/src/lecho/lib/hellocharts/view/ComboLineColumnChartView.java
Patch:
@@ -70,18 +70,18 @@ public ChartData getChartData() {
 
 	@Override
 	public void callChartTouchListener(SelectedValue selectedValue) {
-		if (ComboLineColumnChartRenderer.TYPE_COLUMN == selectedValue.getDataType()) {
+		if (ComboLineColumnChartRenderer.TYPE_COLUMN == selectedValue.getThirdIndex()) {
 			ColumnValue value = data.getColumnChartData().getColumns().get(selectedValue.getFirstIndex()).getValues()
 					.get(selectedValue.getSecondIndex());
 			onValueTouchListener.onValueTouched(selectedValue.getFirstIndex(), selectedValue.getSecondIndex(), value,
 					null);
-		} else if (ComboLineColumnChartRenderer.TYPE_LINE == selectedValue.getDataType()) {
+		} else if (ComboLineColumnChartRenderer.TYPE_LINE == selectedValue.getThirdIndex()) {
 			PointValue value = data.getLineChartData().getLines().get(selectedValue.getFirstIndex()).getValues()
 					.get(selectedValue.getSecondIndex());
 			onValueTouchListener.onValueTouched(selectedValue.getFirstIndex(), selectedValue.getSecondIndex(), null,
 					value);
 		} else {
-			throw new IllegalArgumentException("Invalid selected value type + selectedValue.getDataType()");
+			throw new IllegalArgumentException("Invalid selected value type " + selectedValue.getThirdIndex());
 		}
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/model/PieChartData.java
Patch:
@@ -187,6 +187,9 @@ public String getCenterText2() {
 		return centerText2;
 	}
 
+	/**
+	 * Note that centerText2 will be drawn only if centerText1 is not empty/null.
+	 */
 	public void setCenterText2(String centerText2) {
 		this.centerText2 = centerText2;
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PieChartRenderer.java
Patch:
@@ -173,15 +173,15 @@ private void drawCenterCircle(Canvas canvas) {
 		// Draw center text1 and text2 if not empty.
 		if (!TextUtils.isEmpty(data.getCenterText1())) {
 
-			final int text1Bottom = Math.abs(centerCircleText1FontMetrics.bottom);
+			final int text1Height = Math.abs(centerCircleText1FontMetrics.ascent);
 
 			if (!TextUtils.isEmpty(data.getCenterText2())) {
 				// Draw text 2 only if text 1 is not empty.
 				final int text2Height = Math.abs(centerCircleText2FontMetrics.ascent);
-				canvas.drawText(data.getCenterText1(), centerX, centerY - text1Bottom, centerCircleText1Paint);
+				canvas.drawText(data.getCenterText1(), centerX, centerY - text1Height * 0.2f, centerCircleText1Paint);
 				canvas.drawText(data.getCenterText2(), centerX, centerY + text2Height, centerCircleText2Paint);
 			} else {
-				canvas.drawText(data.getCenterText1(), centerX, centerY + text1Bottom, centerCircleText1Paint);
+				canvas.drawText(data.getCenterText1(), centerX, centerY + text1Height / 4, centerCircleText1Paint);
 			}
 		}
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java
Patch:
@@ -62,8 +62,8 @@ protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight)
 		super.onSizeChanged(width, height, oldWidth, oldHeight);
 		chartComputator.setContentArea(getWidth(), getHeight(), getPaddingLeft(), getPaddingTop(), getPaddingRight(),
 				getPaddingBottom());
-		chartRenderer.initDataMeasuremetns();
 		axesRenderer.initAxesMeasurements();
+		chartRenderer.initDataMeasuremetns();
 	}
 
 	@Override

File: hellocharts-library/src/lecho/lib/hellocharts/view/BubbleChartView.java
Patch:
@@ -49,10 +49,10 @@ public void setBubbleChartData(BubbleChartData data) {
 		} else {
 			this.data = data;
 		}
+		axesRenderer.initAxesMeasurements();
 		chartRenderer.initMaxViewport();
 		chartRenderer.initCurrentViewport();
 		chartRenderer.initDataMeasuremetns();
-		axesRenderer.initAxesMeasurements();
 
 		ViewCompat.postInvalidateOnAnimation(BubbleChartView.this);
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/view/ColumnChartView.java
Patch:
@@ -51,10 +51,10 @@ public void setColumnChartData(ColumnChartData data) {
 		} else {
 			this.data = data;
 		}
+		axesRenderer.initAxesMeasurements();
 		chartRenderer.initMaxViewport();
 		chartRenderer.initCurrentViewport();
 		chartRenderer.initDataMeasuremetns();
-		axesRenderer.initAxesMeasurements();
 
 		ViewCompat.postInvalidateOnAnimation(ColumnChartView.this);
 

File: hellocharts-library/src/lecho/lib/hellocharts/view/LineChartView.java
Patch:
@@ -47,10 +47,10 @@ public void setLineChartData(LineChartData data) {
 		} else {
 			this.data = data;
 		}
+		axesRenderer.initAxesMeasurements();
 		chartRenderer.initMaxViewport();
 		chartRenderer.initCurrentViewport();
 		chartRenderer.initDataMeasuremetns();
-		axesRenderer.initAxesMeasurements();
 
 		ViewCompat.postInvalidateOnAnimation(LineChartView.this);
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PieChartRenderer.java
Patch:
@@ -162,7 +162,7 @@ private void drawArc(Canvas canvas, PieChartData data, ArcValue arcValue, float
 			drawCircleOval.inset(-touchAdditional, -touchAdditional);
 			arcPaint.setColor(arcValue.getDarkenColor());
 			canvas.drawArc(drawCircleOval, lastAngle, angle, true, arcPaint);
-			if (data.hasLabels() || MODE_HIGHLIGHT == mode) {
+			if (data.hasLabels() || data.hasLabelsOnlyForSelected()) {
 				drawLabel(canvas, data, arcValue, arcCenterX, arcCenterY);
 			}
 		} else {

File: hellocharts-library/src/lecho/lib/hellocharts/view/ColumnChartView.java
Patch:
@@ -43,7 +43,7 @@ public ColumnChartData getColumnChartData() {
 	@Override
 	public void setColumnChartData(ColumnChartData data) {
 		if (BuildConfig.DEBUG) {
-			Log.d(TAG, "Setting data for LineChartView");
+			Log.d(TAG, "Setting data for ColumnChartView");
 		}
 
 		if (null == data) {

File: hellocharts-library/src/lecho/lib/hellocharts/util/CasteljauComputator.java
Patch:
@@ -36,11 +36,11 @@ public void computePoint(float t, float[] startPoints, PointF outPoint) {
 		}
 
 		// Copy first raw of points into this.points[0] array.
-		System.arraycopy(points[0], 0, startPoints, 0, pointsNumber);
+		System.arraycopy(startPoints, 0, points[0], 0, pointsNumber);
 
-		for (int i = 1, pointsIndex = pointsNumber; i < curveDegree; ++i, pointsIndex -= 2) {
+		for (int i = 1, pointsIndex = pointsNumber - 2; i < curveDegree; ++i, pointsIndex -= 2) {
 
-			for (int indexX = 0, indexY = 1; indexY < pointsIndex; indexX += 2, indexY += 2) {
+			for (int indexX = 0, indexY = 1; indexY <= pointsIndex; indexX += 2, indexY += 2) {
 
 				// X value.
 				points[i][indexX] = (1 - t) * points[i - 1][indexX] + t * points[i - 1][indexX + 2];

File: hellocharts-library/src/lecho/lib/hellocharts/model/LinePoint.java
Patch:
@@ -26,13 +26,14 @@ public void finish(boolean isFinishedSuccess) {
 		}
 	}
 
-	public void set(float x, float y) {
+	public LinePoint set(float x, float y) {
 		this.x = x;
 		this.y = y;
 		this.orginX = x;
 		this.orginY = y;
 		this.diffX = 0;
 		this.diffY = 0;
+		return this;
 	}
 
 	public void setTarget(float targetX, float targetY) {

File: hellocharts-library/src/lecho/lib/hellocharts/util/Utils.java
Patch:
@@ -6,8 +6,8 @@
 
 public abstract class Utils {
 	public static final int POW10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000 };
-	public static final int DEFAULT_COLOR = Color.parseColor("#F4F4F4");
-	public static final int DEFAULT_DARKEN_COLOR = Color.parseColor("#F0F0F0");
+	public static final int DEFAULT_COLOR = Color.parseColor("#DFDFDF");
+	public static final int DEFAULT_DARKEN_COLOR = Color.parseColor("#DDDDDD");
 	public static final int COLOR_BLUE = Color.parseColor("#33B5E5");
 	public static final int COLOR_VIOLET = Color.parseColor("#AA66CC");
 	public static final int COLOR_GREEN = Color.parseColor("#99CC00");

File: hellocharts-library/src/lecho/lib/hellocharts/view/PieChartView.java
Patch:
@@ -175,7 +175,7 @@ public void setChartRotationEnabled(boolean isRotationEnabled) {
 		}
 	}
 
-	private PieChartData generateDummyData() {
+	protected PieChartData generateDummyData() {
 		final int numValues = 4;
 		PieChartData data = new PieChartData();
 		List<ArcValue> values = new ArrayList<ArcValue>(numValues);

File: hellocharts-library/src/lecho/lib/hellocharts/util/Utils.java
Patch:
@@ -6,7 +6,8 @@
 
 public abstract class Utils {
 	public static final int POW10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000 };
-
+	public static final int DEFAULT_COLOR = Color.parseColor("#F4F4F4");
+	public static final int DEFAULT_DARKEN_COLOR = Color.parseColor("#F0F0F0");
 	public static final int COLOR_BLUE = Color.parseColor("#33B5E5");
 	public static final int COLOR_VIOLET = Color.parseColor("#AA66CC");
 	public static final int COLOR_GREEN = Color.parseColor("#99CC00");

File: hellocharts-library/src/lecho/lib/hellocharts/gesture/PieChartTouchHandler.java
Patch:
@@ -58,7 +58,7 @@ public boolean computeScroll() {
 		if (!isInteractive) {
 			return false;
 		}
-		if (isRotationEnabled) {
+		if (!isRotationEnabled) {
 			return false;
 		}
 		if (scroller.computeScrollOffset()) {
@@ -116,7 +116,7 @@ public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float d
 
 		@Override
 		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
-			if (isRotationEnabled) {
+			if (!isRotationEnabled) {
 				return false;
 			}
 			// Set up the Scroller for a fling

File: hellocharts-library/src/lecho/lib/hellocharts/gesture/ChartScroller.java
Patch:
@@ -35,7 +35,7 @@ public boolean scroll(float distanceX, float distanceY, ChartCalculator chartCal
 		float viewportOffsetY = -distanceY * chartCalculator.getCurrentViewport().height()
 				/ chartCalculator.getContentRect().height();
 		chartCalculator.computeScrollSurfaceSize(surfaceSizeBuffer);
-		chartCalculator.setViewportBottomLeft(chartCalculator.getCurrentViewport().left + viewportOffsetX,
+		chartCalculator.setViewportTopLeft(chartCalculator.getCurrentViewport().left + viewportOffsetX,
 				chartCalculator.getCurrentViewport().top + viewportOffsetY);
 		return true;
 	}
@@ -49,7 +49,7 @@ public boolean computeScrollOffset(ChartCalculator chartCalculator) {
 					* scroller.getCurrX() / surfaceSizeBuffer.x;
 			float currYRange = chartCalculator.getMaximumViewport().top - chartCalculator.getMaximumViewport().height()
 					* scroller.getCurrY() / surfaceSizeBuffer.y;
-			chartCalculator.setViewportBottomLeft(currXRange, currYRange);
+			chartCalculator.setViewportTopLeft(currXRange, currYRange);
 			return true;
 		}
 		return false;

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PreviewColumnChartRenderer.java
Patch:
@@ -36,10 +36,10 @@ public void drawUnclipped(Canvas canvas) {
 		final float bottom = chartCalculator.calculateRawY(currentViewport.bottom);
 		previewPaint.setAlpha(DEFAULT_PREVIEW_TRANSPARENCY);
 		previewPaint.setStyle(Paint.Style.FILL);
-		canvas.drawRect(left, bottom, right, top, previewPaint);
+		canvas.drawRect(left, top, right, bottom, previewPaint);
 		previewPaint.setStyle(Paint.Style.STROKE);
 		previewPaint.setAlpha(FULL_ALPHA);
-		canvas.drawRect(left, bottom, right, top, previewPaint);
+		canvas.drawRect(left, top, right, bottom, previewPaint);
 	}
 
 	public void setPreviewColor(int color) {

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/PreviewLineChartRenderer.java
Patch:
@@ -36,10 +36,10 @@ public void drawUnclipped(Canvas canvas) {
 		final float bottom = chartCalculator.calculateRawY(currentViewport.bottom);
 		previewPaint.setAlpha(DEFAULT_PREVIEW_TRANSPARENCY);
 		previewPaint.setStyle(Paint.Style.FILL);
-		canvas.drawRect(left, bottom, right, top, previewPaint);
+		canvas.drawRect(left, top, right, bottom, previewPaint);
 		previewPaint.setStyle(Paint.Style.STROKE);
 		previewPaint.setAlpha(FULL_ALPHA);
-		canvas.drawRect(left, bottom, right, top, previewPaint);
+		canvas.drawRect(left, top, right, bottom, previewPaint);
 	}
 
 	public void setPreviewColor(int color) {

File: hellocharts-library/src/lecho/lib/hellocharts/ChartCalculator.java
Patch:
@@ -85,7 +85,7 @@ public void constrainViewport(float left, float top, float right, float bottom)
 	 * value represents the topmost pixel position, and thus the bottom of the {@link #currentViewport} rectangle. For
 	 * more details on why top and bottom are flipped, see {@link #currentViewport}.
 	 */
-	public void setViewportBottomLeft(float left, float bottom) {
+	public void setViewportBottomLeft(float left, float top) {
 		/**
 		 * Constrains within the scroll range. The scroll range is simply the viewport extremes (AXIS_X_MAX, etc.) minus
 		 * the viewport size. For example, if the extrema were 0 and 10, and the viewport size was 2, the scroll range
@@ -95,8 +95,8 @@ public void setViewportBottomLeft(float left, float bottom) {
 		final float curWidth = currentViewport.width();
 		final float curHeight = currentViewport.height();
 		left = Math.max(maxViewport.left, Math.min(left, maxViewport.right - curWidth));
-		bottom = Math.max(maxViewport.top + curHeight, Math.min(bottom, maxViewport.bottom));
-		constrainViewport(left, bottom - curHeight, left + curWidth, bottom);
+		top = Math.max(maxViewport.bottom + curHeight, Math.min(top, maxViewport.top));
+		constrainViewport(left, top, left + curWidth, top - curHeight);
 	}
 
 	public float calculateRawX(float valueX) {

File: hellocharts-library/src/lecho/lib/hellocharts/PreviewChartCalculator.java
Patch:
@@ -10,7 +10,7 @@ public float calculateRawX(float valueX) {
 	}
 
 	public float calculateRawY(float valueY) {
-		final float pixelOffset = (valueY - maxViewport.top) * (contentRect.height() / maxViewport.height());
+		final float pixelOffset = (valueY - maxViewport.bottom) * (contentRect.height() / maxViewport.height());
 		return contentRect.bottom - pixelOffset;
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/ChartCalculator.java
Patch:
@@ -120,7 +120,7 @@ public boolean rawPixelsToDataPoint(float x, float y, PointF dest) {
 			return false;
 		}
 		dest.set(currentViewport.left + (x - contentRect.left) * currentViewport.width() / contentRect.width(),
-				currentViewport.bottom + (y - contentRect.top) * currentViewport.height() / -contentRect.height());
+				currentViewport.bottom + (y - contentRect.bottom) * currentViewport.height() / -contentRect.height());
 		return true;
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/gesture/ChartZoomer.java
Patch:
@@ -49,7 +49,7 @@ public boolean computeZoom(ChartCalculator chartCalculator) {
 			final float newHeight = (1.0f - zoomer.getCurrZoom()) * scrollerStartViewport.height();
 			final float pointWithinViewportX = (zoomFocalPoint.x - scrollerStartViewport.left)
 					/ scrollerStartViewport.width();
-			final float pointWithinViewportY = (zoomFocalPoint.y - scrollerStartViewport.top)
+			final float pointWithinViewportY = (zoomFocalPoint.y - scrollerStartViewport.bottom)
 					/ scrollerStartViewport.height();
 
 			float left = zoomFocalPoint.x - newWidth * pointWithinViewportX;
@@ -75,10 +75,10 @@ public boolean scale(ChartCalculator chartCalculator, float focusX, float focusY
 
 		float left = viewportFocus.x - (focusX - chartCalculator.getContentRect().left)
 				* (newWidth / chartCalculator.getContentRect().width());
-		float top = viewportFocus.y - (chartCalculator.getContentRect().bottom - focusY)
+		float bottom = viewportFocus.y - (chartCalculator.getContentRect().top - focusY)
 				* (newHeight / chartCalculator.getContentRect().height());
 		float right = left + newWidth;
-		float bottom = top + newHeight;
+		float top = bottom + newHeight;
 		setCurrentViewport(chartCalculator, left, top, right, bottom);
 		return true;
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/Chart.java
Patch:
@@ -50,7 +50,7 @@ public interface Chart {
 
 	public RectF getMaxViewport();
 
-	public void setViewport(RectF viewport);
+	public void setViewport(RectF targetViewport, boolean isAnimated);
 
 	public RectF getViewport();
 

File: hellocharts-library/src/lecho/lib/hellocharts/ChartCalculator.java
Patch:
@@ -65,11 +65,10 @@ public void setAxesMargin(int axisXMargin, int axisYMargin) {
 		contentRect.bottom = contentRect.bottom - axisXMargin;
 	}
 
-	public void calculateViewport(RectF boundaries) {
-		maximumViewport.set(boundaries.left, boundaries.bottom, boundaries.right, boundaries.top);
+	public void calculateMaxViewport(RectF boundaries) {
+		maximumViewport.set(boundaries.left, boundaries.top, boundaries.right, boundaries.bottom);
 		minimumViewportWidth = maximumViewport.width() / MAXIMUM_SCALE;
 		minimumViewportHeight = maximumViewport.height() / MAXIMUM_SCALE;
-		currentViewport.set(maximumViewport);
 	}
 
 	public void setCurrentViewport(float left, float top, float right, float bottom) {

File: hellocharts-library/src/lecho/lib/hellocharts/anim/ChartAnimator.java
Patch:
@@ -3,6 +3,7 @@
 public interface ChartAnimator {
 
 	public static final int DEFAULT_ANIMATION_DURATION = 500;
+	public static final int FAST_ANIMATION_DURATION = 200;
 
 	public void startAnimation();
 

File: hellocharts-library/src/lecho/lib/hellocharts/anim/ChartDataAnimatorV8.java
Patch:
@@ -6,7 +6,7 @@
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.animation.Interpolator;
 
-public class ChartAnimatorV8 implements ChartAnimator {
+public class ChartDataAnimatorV8 implements ChartAnimator {
 
 	long start;
 	boolean isAnimationStarted = false;
@@ -32,11 +32,11 @@ public void run() {
 		}
 	};
 
-	public ChartAnimatorV8(final Chart chart) {
+	public ChartDataAnimatorV8(final Chart chart) {
 		this(chart, DEFAULT_ANIMATION_DURATION);
 	}
 
-	public ChartAnimatorV8(final Chart chart, final long duration) {
+	public ChartDataAnimatorV8(final Chart chart, final long duration) {
 		this.chart = chart;
 		this.duration = duration;
 		this.handler = new Handler();

File: hellocharts-library/src/lecho/lib/hellocharts/model/LinePoint.java
Patch:
@@ -38,7 +38,7 @@ public void set(float x, float y) {
 	public void setTarget(float targetX, float targetY) {
 		set(x, y);
 		this.diffX = targetX - orginX;
-		this.diffY = targetY - diffY;
+		this.diffY = targetY - orginY;
 	}
 
 	public float getX() {

File: hellocharts-library/src/lecho/lib/hellocharts/Chart.java
Patch:
@@ -22,6 +22,8 @@ public interface Chart {
 
 	public void animationDataUpdate(float scale);
 
+	public void animationDataFinished(boolean isFinishedSuccess);
+
 	public void startDataAnimation();
 
 	public void setChartAnimationListener(ChartAnimationListener animationListener);

File: hellocharts-library/src/lecho/lib/hellocharts/anim/ChartAnimator.java
Patch:
@@ -2,7 +2,7 @@
 
 public interface ChartAnimator {
 
-	public static final int DEFAULT_ANIMATION_DURATION = 1000;
+	public static final int DEFAULT_ANIMATION_DURATION = 500;
 
 	public void startAnimation();
 

File: hellocharts-library/src/lecho/lib/hellocharts/gesture/ChartTouchHandler.java
Patch:
@@ -66,7 +66,9 @@ private boolean computeTouch(MotionEvent event) {
 			break;
 		case MotionEvent.ACTION_UP:
 			if (chartRenderer.isTouched()) {
-				chartRenderer.callTouchListener();
+				if (chartRenderer.checkTouch(event.getX(), event.getY())) {
+					chartRenderer.callTouchListener();
+				}
 				chartRenderer.clearTouch();
 				needInvalidate = true;
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/view/AbstractChartView.java
Patch:
@@ -77,12 +77,12 @@ public void setValueTouchEnabled(boolean isValueTouchEnabled) {
 
 	@Override
 	public int getZoomType() {
-		return 0;
+		return mTouchHandler.getZoomType();
 	}
 
 	@Override
 	public void setZoomType(int zoomType) {
-
+		mTouchHandler.setZoomType(zoomType);
 	}
 
 	@Override

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/LineChartRenderer.java
Patch:
@@ -273,7 +273,7 @@ private void highlightPoint(Canvas canvas, Line line, LinePoint linePoint, float
 	private void drawLabel(Canvas canvas, Line line, LinePoint linePoint, float rawValueX, float rawValueY, float offset) {
 		final ChartCalculator chartCalculator = mChart.getChartCalculator();
 		final int nummChars = line.getFormatter().formatValue(labelBuffer, linePoint.getY());
-		labelPaint.getTextBounds(labelBuffer, labelBuffer.length - nummChars, labelBuffer.length, textBoundsRect);
+		labelPaint.getTextBounds(labelBuffer, labelBuffer.length - nummChars, nummChars, textBoundsRect);
 		float left = rawValueX - textBoundsRect.width() / 2 - mLabelMargin;
 		float right = rawValueX + textBoundsRect.width() / 2 + mLabelMargin;
 		float top = rawValueY - offset - textBoundsRect.height() - mLabelMargin * 2;
@@ -294,7 +294,7 @@ private void drawLabel(Canvas canvas, Line line, LinePoint linePoint, float rawV
 		labelPaint.setColor(Utils.darkenColor(line.getColor()));
 		canvas.drawRect(left, top, right, bottom, labelPaint);
 		labelPaint.setColor(line.getTextColor());
-		canvas.drawText(labelBuffer, labelBuffer.length - nummChars, labelBuffer.length, left + mLabelMargin, bottom
+		canvas.drawText(labelBuffer, labelBuffer.length - nummChars, nummChars, left + mLabelMargin, bottom
 				- mLabelMargin, labelPaint);
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/renderer/AxesRenderer.java
Patch:
@@ -145,7 +145,7 @@ private void drawAxisXAuto(Canvas canvas, ChartCalculator chartCalculator, Axis
 			// TODO: Should I draw vertical lines for X axis, that doesn't look good but sometimes it is useful.
 			float rawX = chartCalculator.calculateRawX(axisXStopsBuffer.stops[i]);
 			final int nummChars = axisX.getFormatter().formatValue(labelBuffer, axisXStopsBuffer.stops[i],
-					axisYStopsBuffer.decimals);
+					axisXStopsBuffer.decimals);
 			canvas.drawText(labelBuffer, labelBuffer.length - nummChars, nummChars, rawX, rawY, mAxisTextPaint);
 		}
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/model/Axis.java
Patch:
@@ -82,7 +82,7 @@ public Axis setFormatter(AxisValueFormatter formatter) {
 	}
 
 	public interface AxisValueFormatter {
-		public static final String DEFAULT_AXES_FORMAT = "%.0f";
+		public static final String DEFAULT_AXES_FORMAT = "%.1f";
 
 		public String formatValue(AxisValue value);
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/view/ColumnChartView.java
Patch:
@@ -56,7 +56,7 @@ protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight)
 		mChartCalculator.calculateViewport();
 		mChartCalculator.calculateContentArea(getWidth(), getHeight(), getPaddingLeft(), getPaddingTop(),
 				getPaddingRight(), getPaddingBottom());
-		mChartCalculator.setAxesMargin(mAxesRenderer.getAxisXHeight(0), mAxesRenderer.getAxisYWidth(0));
+		mChartCalculator.setAxesMargin(mAxesRenderer.getAxisXHeight(), mAxesRenderer.getAxisYWidth());
 	}
 
 	// Automatically calculates Y axis values.
@@ -119,7 +119,8 @@ public void setData(final ColumnChartData data) {
 		mChartCalculator.calculateViewport();
 		mChartCalculator.calculateContentArea(getWidth(), getHeight(), getPaddingLeft(), getPaddingTop(),
 				getPaddingRight(), getPaddingBottom());
-		mChartCalculator.setAxesMargin(mAxesRenderer.getAxisXHeight(0), mAxesRenderer.getAxisYWidth(0));
+		mAxesRenderer.initRenderer();
+		mChartCalculator.setAxesMargin(mAxesRenderer.getAxisXHeight(), mAxesRenderer.getAxisYWidth());
 		ViewCompat.postInvalidateOnAnimation(ColumnChartView.this);
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/ChartCalculator.java
Patch:
@@ -164,8 +164,8 @@ public boolean rawPixelsToDataPoint(float x, float y, PointF dest) {
 		if (!mContentRect.contains((int) x, (int) y)) {
 			return false;
 		}
-		dest.set(mCurrentViewport.left + (x - mContentRect.left) * (mCurrentViewport.width() / mContentRect.width()),
-				mCurrentViewport.top + (y - mContentRect.bottom) * (mCurrentViewport.height() / -mContentRect.height()));
+		dest.set(mCurrentViewport.left + (x - mContentRect.left) * mCurrentViewport.width() / mContentRect.width(),
+				mCurrentViewport.top + (y - mContentRect.bottom) * mCurrentViewport.height() / -mContentRect.height());
 		return true;
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/gestures/ChartZoomer.java
Patch:
@@ -65,8 +65,8 @@ public boolean scale(ScaleGestureDetector detector, ChartCalculator chartCalcula
 				* (newWidth / chartCalculator.mContentRect.width());
 		float top = mViewportFocus.y - (chartCalculator.mContentRect.bottom - focusY)
 				* (newHeight / chartCalculator.mContentRect.height());
-		float right = chartCalculator.mCurrentViewport.left + newWidth;
-		float bottom = chartCalculator.mCurrentViewport.top + newHeight;
+		float right = left + newWidth;
+		float bottom = top + newHeight;
 		setCurrentViewport(chartCalculator, left, top, right, bottom);
 		return true;
 	}

File: hellocharts-library/src/lecho/lib/hellocharts/LineChartRenderer.java
Patch:
@@ -267,7 +267,7 @@ private void drawAnnotation(Canvas canvas, LineStyle style, LinePoint linePoint,
 			top = rawValueY + offset;
 			bottom = rawValueY + offset + textBoundsRect.height() + mAnnotationMargin * 2;
 		}
-		if (right < chartCalculator.mContentRect.left) {
+		if (left < chartCalculator.mContentRect.left) {
 			left = rawValueX;
 			right = rawValueX + textBoundsRect.width() + mAnnotationMargin * 2;
 		}

File: hellocharts-library/src/lecho/lib/hellocharts/gestures/ChartZoomAndScrollHandler.java
Patch:
@@ -47,6 +47,7 @@ public boolean handleTouchEvent(MotionEvent event) {
 			break;
 		case MotionEvent.ACTION_UP:
 			if (chartRenderer.isValueTouched()) {
+				chartRenderer.clearValueTouch();
 				needInvalidate = true;
 				// TODO: call touchListener!!!
 			}

File: hellocharts-library/src/lecho/lib/hellocharts/AbstractChart.java
Patch:
@@ -9,7 +9,7 @@ public abstract class AbstractChart extends View implements Chart {
 	protected ChartCalculator mChartCalculator;
 	protected AxesRenderer mAxesRenderer;
 	protected ChartZoomAndScrollHandler mTouchHandler;
-	private ChartRenderer mChartRenderer;
+	protected ChartRenderer mChartRenderer;
 
 	public AbstractChart(Context context) {
 		super(context);

File: hellocharts-library/src/lecho/lib/hellocharts/BarChart.java
Patch:
@@ -20,7 +20,6 @@ public class BarChart extends AbstractChart {
 	private BarChartData mData;
 	private boolean mAxesOn = true;
 	private ChartAnimator mAnimator;
-	private BarChartRenderer mChartRenderer;
 
 	public BarChart(Context context) {
 		this(context, null, 0);
@@ -33,13 +32,12 @@ public BarChart(Context context, AttributeSet attrs) {
 	public BarChart(Context context, AttributeSet attrs, int defStyle) {
 		super(context, attrs, defStyle);
 		initAnimatiors();
+		mChartRenderer = new BarChartRenderer(context, this);
 		mChartCalculator = new ChartCalculator(context, this);
 		mAxesRenderer = new AxesRenderer(context, this);
-		mChartRenderer = new BarChartRenderer(context, this);
 		mTouchHandler = new ChartZoomAndScrollHandler(context, this);
 	}
 
-
 	private void initAnimatiors() {
 		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
 			mAnimator = new ChartAnimatorV8(this);

File: hellocharts-library/src/lecho/lib/hellocharts/MainActivity.java
Patch:
@@ -100,7 +100,7 @@ public void onClick(View v) {
 		// l1.hasValuesPopups = true;
 		// Bar l2 = new Bar(s2);
 		List<Bar> bars = new ArrayList<Bar>();
-		for (int i = 0; i < 10; ++i) {
+		for (int i = 0; i < 4; ++i) {
 			bars.add(generateBar());
 		}
 		data.bars = bars;
@@ -166,7 +166,7 @@ private List<ValueWithColor> generateValues(int num) {
 	}
 
 	private Bar generateBar() {
-		List<ValueWithColor> s1 = generateValues(3);
+		List<ValueWithColor> s1 = generateValues(2);
 		Bar l1 = new Bar(s1);
 		l1.hasValuesPopups = false;
 		return l1;

File: hellocharts-library/src/lecho/lib/hellocharts/AbstractChart.java
Patch:
@@ -3,12 +3,12 @@
 import android.content.Context;
 import android.util.AttributeSet;
 import android.view.View;
-import lecho.lib.hellocharts.gestures.ChartGestureHandler;
+import lecho.lib.hellocharts.gestures.ChartZoomAndScrollHandler;
 
 public abstract class AbstractChart extends View implements Chart {
 	protected ChartCalculator mChartCalculator;
 	protected AxesRenderer mAxesRenderer;
-	protected ChartGestureHandler mTouchHandler;
+	protected ChartZoomAndScrollHandler mTouchHandler;
 
 	public AbstractChart(Context context) {
 		super(context);
@@ -30,7 +30,7 @@ public ChartCalculator getChartCalculator() {
 		return mChartCalculator;
 	}
 
-	public ChartGestureHandler getTouchHandler() {
+	public ChartZoomAndScrollHandler getTouchHandler() {
 		return mTouchHandler;
 	}
 }

File: hellocharts-library/src/lecho/lib/hellocharts/Chart.java
Patch:
@@ -1,6 +1,6 @@
 package lecho.lib.hellocharts;
 
-import lecho.lib.hellocharts.gestures.ChartGestureHandler;
+import lecho.lib.hellocharts.gestures.ChartZoomAndScrollHandler;
 import lecho.lib.hellocharts.model.ChartData;
 
 public interface Chart {
@@ -11,7 +11,7 @@ public interface Chart {
 
 	public ChartCalculator getChartCalculator();
 
-	public ChartGestureHandler getTouchHandler();
+	public ChartZoomAndScrollHandler getTouchHandler();
 
 	public void animationUpdate(float scale);
 

File: hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
Patch:
@@ -5,7 +5,7 @@
 import lecho.lib.hellocharts.anim.ChartAnimator;
 import lecho.lib.hellocharts.anim.ChartAnimatorV11;
 import lecho.lib.hellocharts.anim.ChartAnimatorV8;
-import lecho.lib.hellocharts.gestures.ChartGestureHandler;
+import lecho.lib.hellocharts.gestures.ChartZoomAndScrollHandler;
 import lecho.lib.hellocharts.model.AnimatedPoint;
 import lecho.lib.hellocharts.model.LineChartData;
 import android.annotation.SuppressLint;
@@ -39,7 +39,7 @@ public LineChart(Context context, AttributeSet attrs, int defStyle) {
 		mChartCalculator = new ChartCalculator(context, this);
 		mAxesRenderer = new AxesRenderer(context, this);
 		mChartRenderer = new LineChartRenderer(context, this);
-		mTouchHandler = new ChartGestureHandler(context, this);
+		mTouchHandler = new ChartZoomAndScrollHandler(context, this);
 	}
 
 	@SuppressLint("NewApi")

File: hellocharts-library/src/lecho/lib/hellocharts/gestures/ChartZoomAndScrollHandler.java
Patch:
@@ -8,7 +8,7 @@
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 
-public class ChartGestureHandler {
+public class ChartZoomAndScrollHandler {
 
 	private int mSelectedLineIndex = Integer.MIN_VALUE;
 	private int mSelectedPointIndex = Integer.MIN_VALUE;
@@ -18,7 +18,7 @@ public class ChartGestureHandler {
 	private ChartZoomer mChartZoomer;
 	private Chart mChart;
 
-	public ChartGestureHandler(Context context, Chart chart) {
+	public ChartZoomAndScrollHandler(Context context, Chart chart) {
 		mChart = chart;
 		mGestureDetector = new GestureDetector(context, new ChartGestureListener());
 		mScaleGestureDetector = new ScaleGestureDetector(context, new ChartScaleGestureListener());

File: hellocharts-library/src/lecho/lib/hellocharts/AbstractChart.java
Patch:
@@ -3,13 +3,13 @@
 import android.content.Context;
 import android.util.AttributeSet;
 import android.view.View;
-import lecho.lib.hellocharts.gestures.ChartTouchHandler;
+import lecho.lib.hellocharts.gestures.ChartGestureHandler;
 
 public abstract class AbstractChart extends View implements Chart {
 	protected ChartCalculator mChartCalculator;
 	protected AxesRenderer mAxesRenderer;
 	protected LineChartRenderer mChartRenderer;
-	protected ChartTouchHandler mTouchHandler;
+	protected ChartGestureHandler mTouchHandler;
 
 	public AbstractChart(Context context) {
 		super(context);
@@ -35,7 +35,7 @@ public ChartCalculator getChartCalculator() {
 		return mChartCalculator;
 	}
 
-	public ChartTouchHandler getTouchHandler() {
+	public ChartGestureHandler getTouchHandler() {
 		return mTouchHandler;
 	}
 }

File: hellocharts-library/src/lecho/lib/hellocharts/Chart.java
Patch:
@@ -1,6 +1,6 @@
 package lecho.lib.hellocharts;
 
-import lecho.lib.hellocharts.gestures.ChartTouchHandler;
+import lecho.lib.hellocharts.gestures.ChartGestureHandler;
 import lecho.lib.hellocharts.model.ChartData;
 
 public interface Chart {
@@ -13,7 +13,7 @@ public interface Chart {
 
 	public ChartCalculator getChartCalculator();
 
-	public ChartTouchHandler getTouchHandler();
+	public ChartGestureHandler getTouchHandler();
 
 	public void animationUpdate(float scale);
 

File: hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
Patch:
@@ -5,7 +5,7 @@
 import lecho.lib.hellocharts.anim.ChartAnimator;
 import lecho.lib.hellocharts.anim.ChartAnimatorV11;
 import lecho.lib.hellocharts.anim.ChartAnimatorV8;
-import lecho.lib.hellocharts.gestures.ChartTouchHandler;
+import lecho.lib.hellocharts.gestures.ChartGestureHandler;
 import lecho.lib.hellocharts.model.AnimatedPoint;
 import lecho.lib.hellocharts.model.LineChartData;
 import android.annotation.SuppressLint;
@@ -38,7 +38,7 @@ public LineChart(Context context, AttributeSet attrs, int defStyle) {
 		mChartCalculator = new ChartCalculator(context, this);
 		mAxesRenderer = new AxesRenderer(context, this);
 		mChartRenderer = new LineChartRenderer(context, this);
-		mTouchHandler = new ChartTouchHandler(context, this);
+		mTouchHandler = new ChartGestureHandler(context, this);
 	}
 
 	@SuppressLint("NewApi")

File: hellocharts-library/src/lecho/lib/hellocharts/gestures/ChartGestureHandler.java
Patch:
@@ -11,7 +11,7 @@
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 
-public class ChartTouchHandler {
+public class ChartGestureHandler {
 
 	private int mSelectedLineIndex = Integer.MIN_VALUE;
 	private int mSelectedPointIndex = Integer.MIN_VALUE;
@@ -22,7 +22,7 @@ public class ChartTouchHandler {
 	private ChartZoomer mChartZoomer;
 	private LineChart mChart;
 
-	public ChartTouchHandler(Context context, LineChart chart) {
+	public ChartGestureHandler(Context context, LineChart chart) {
 		mChart = chart;
 		mGestureDetector = new GestureDetector(context, new ChartGestureListener());
 		mScaleGestureDetector = new ScaleGestureDetector(context, new ChartScaleGestureListener());

File: hellocharts-library/src/lecho/lib/hellocharts/gestures/ChartTouchHandler.java
Patch:
@@ -45,7 +45,8 @@ public boolean computeScroll() {
 	public boolean handleTouchEvent(MotionEvent event) {
 		final LineChartData data = mChart.getData();
 		final ChartCalculator chartCalculator = mChart.getChartCalculator();
-		boolean needInvalidate = mGestureDetector.onTouchEvent(event) || mScaleGestureDetector.onTouchEvent(event);
+		boolean needInvalidate = mScaleGestureDetector.onTouchEvent(event);
+		needInvalidate = mGestureDetector.onTouchEvent(event) || needInvalidate;
 		switch (event.getAction()) {
 		case MotionEvent.ACTION_DOWN:
 			// Only one point will be selected even if there are few point in touch area.

File: hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
Patch:
@@ -85,7 +85,7 @@ public LineChart(Context context, AttributeSet attrs, int defStyle) {
 		initAnimatiors();
 		mChartCalculator = new ChartCalculator(context);
 		mChartScroller = new ChartScroller(context);
-		mChartZoomer = new ChartZoomer(context);
+		mChartZoomer = new ChartZoomer(context, ChartZoomer.ZOOM_HORIZONTAL_AND_VERTICAL);
 		mAxisRenderer = new AxesRenderer();
 	}
 

File: hellocharts-library/src/lecho/lib/hellocharts/MainActivity.java
Patch:
@@ -60,7 +60,7 @@ public void onClick(View v) {
 		Axis axisX = new Axis();
 		axisX.values = generateAxis(0.0f, 100.0f, 1.0f);
 		data.axisX = axisX;
-		//data.axisX.name = "ala ma kota";
+		data.axisX.name = "Axis X";
 		data.axisX.textSize = Utils.sp2px(getApplicationContext(), 10);
 		data.axisX.color = Color.parseColor("#FFBB33");
 

File: hellocharts-library/src/lecho/lib/hellocharts/MainActivity.java
Patch:
@@ -60,13 +60,14 @@ public void onClick(View v) {
 		Axis axisX = new Axis();
 		axisX.values = generateAxis(0.0f, 100.0f, 1.0f);
 		data.axisX = axisX;
+		data.axisX.name = "ala ma kota";
 		data.axisX.textSize = Utils.sp2px(getApplicationContext(), 10);
 		data.axisX.color = Color.parseColor("#FFBB33");
 
 		Axis axisY = new Axis();
 		axisY.values = generateAxis(0.0f, 100.0f, 15.0f);
 		data.axisY = axisY;
-		data.axisY.name = "DUPA";
+		data.axisY.name = "Axis Y";
 		data.axisY.textSize = Utils.sp2px(getApplicationContext(), 10);
 		data.axisY.color = Color.parseColor("#99CC00");
 		chart.setData(data);

File: hellocharts-library/src/lecho/lib/hellocharts/MainActivity.java
Patch:
@@ -18,7 +18,7 @@
 
 public class MainActivity extends Activity {
 	private LineChart chart;
-	private static final int NUM_OF_VALUES = 20;
+	private static final int NUM_OF_VALUES = 5;
 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
@@ -48,12 +48,12 @@ public void onClick(View v) {
 		List<Float> s1 = generateValues(NUM_OF_VALUES, 1.0f);
 		List<Float> s2 = generateValues(NUM_OF_VALUES, 1.0f);
 		data.addSeries(new Series(Color.parseColor("#FFBB33"), s1));
-		data.addSeries(new Series(Color.parseColor("#99CC00"), s2));
+		//data.addSeries(new Series(Color.parseColor("#99CC00"), s2));
 		List<Float> yRules = generateAxis(0, 100, 10.0f);
 		Axis yAxis = new Axis();
 		yAxis.setValues(yRules);
 		data.setYAxis(yAxis);
-		List<Float> xRules = generateAxis(0, 20, 5.0f);
+		List<Float> xRules = generateAxis(0, 50, 10.0f);
 		Axis xAxis = new Axis();
 		xAxis.setValues(xRules);
 		data.setXAxis(xAxis);

File: hellocharts-library/src/lecho/lib/hellocharts/LineChart.java
Patch:
@@ -65,7 +65,6 @@ public class LineChart extends View {
 	private int mSelectedSeriesIndex = Integer.MIN_VALUE;
 	private int mSelectedValueIndex = Integer.MIN_VALUE;
 	private OnPointClickListener mOnPointClickListener = new DummyOnPointListener();
-
 	public float mZoomLevel = 0.0f;
 	private ScaleGestureDetector mScaleGestureDetector = new ScaleGestureDetector(getContext(),
 			new ChartScaleGestureListener());
@@ -438,7 +437,7 @@ private float calculateY(float valueY) {
 		final float additionalPadding = getPaddingBottom() + mPointPressedRadius + mXAxisMargin;
 		final float valueDistance = (valueY - mData.getMinYValue()) * (mYMultiplier * (1 + 2 * mZoomLevel));
 		// Subtracting from height because on android top left corner is 0,0 and bottom right is maxX,maxY.
-		return getHeight() - valueDistance - additionalPadding + mZoomLevel;
+		return getHeight() - valueDistance - additionalPadding + (getHeight() * mZoomLevel);
 	}
 
 	@Override

File: hellocharts-library/src/lecho/lib/hellocharts/MainActivity.java
Patch:
@@ -57,7 +57,7 @@ public void onClick(View v) {
 					s2.add(500f);
 					s2.add(550f);
 					s2.add(800f);
-					s2.add(700f);
+					s2.add(1700f);
 					// s2.add(300f);
 					// s2.add(500f);
 					// s2.add(550f);

File: hellocharts-library/src/lecho/lib/hellocharts/model/InternalLineChartData.java
Patch:
@@ -7,6 +7,7 @@ public class InternalLineChartData {
 
 	private final List<Float> mDomain;
 	private final List<InternalSeries> mInternalsSeries = new ArrayList<InternalSeries>();
+	public List<Float> mYRules;
 	private float mMinXValue = Float.MAX_VALUE;
 	private float mMaxXValue = Float.MIN_VALUE;
 	private float mMinYValue = Float.MAX_VALUE;
@@ -21,6 +22,7 @@ public static InternalLineChartData createFromRawData(ChartData rawData) {
 		for (Series series : rawData.getAllSeries()) {
 			internalData.addSeries(series);
 		}
+		internalData.mYRules = rawData.getYRules();
 		return internalData;
 	}
 

