File: generator/src/main/java/tk/mybatis/mapper/generator/model/TableColumnBuilder.java
Patch:
@@ -48,6 +48,7 @@ public class TableColumnBuilder {
     public static TableClass build(IntrospectedTable introspectedTable) {
         TableClass tableClass = new TableClass();
         tableClass.setIntrospectedTable(introspectedTable);
+        tableClass.setRemarks(introspectedTable.getRemarks());
 
         FullyQualifiedTable fullyQualifiedTable = introspectedTable.getFullyQualifiedTable();
         tableClass.setTableName(fullyQualifiedTable.getIntrospectedTableName());

File: generator/src/main/java/tk/mybatis/mapper/generator/model/TableColumnBuilder.java
Patch:
@@ -48,6 +48,7 @@ public class TableColumnBuilder {
     public static TableClass build(IntrospectedTable introspectedTable) {
         TableClass tableClass = new TableClass();
         tableClass.setIntrospectedTable(introspectedTable);
+        tableClass.setRemarks(introspectedTable.getRemarks());
 
         FullyQualifiedTable fullyQualifiedTable = introspectedTable.getFullyQualifiedTable();
         tableClass.setTableName(fullyQualifiedTable.getIntrospectedTableName());

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/FieldHelper.java
Patch:
@@ -181,6 +181,7 @@ private List<EntityField> _getFields(Class<?> entityClass, List<EntityField> fie
                 return fieldList;
             }
             Field[] fields = entityClass.getDeclaredFields();
+            Arrays.sort(fields, Comparator.comparing(Field::getName));
             int index = 0;
             for (int i = 0; i < fields.length; i++) {
                 Field field = fields[i];

File: core/src/test/java/tk/mybatis/mapper/mapperhelper/SqlHelperTest.java
Patch:
@@ -35,7 +35,7 @@ public void testLogicDeleteSql() {
         Assert.assertEquals(" AND is_valid = 1", notLogicDeletedColumn);
 
         String updateSetColumns = SqlHelper.updateSetColumns(User.class, null, false, false);
-        Assert.assertEquals("<set>username = #{username},is_valid = 1,</set>", updateSetColumns);
+        Assert.assertEquals("<set>is_valid = 1,username = #{username},</set>", updateSetColumns);
     }
 
 }

File: base/src/test/java/tk/mybatis/mapper/helper/MultipleMapperProviderTest.java
Patch:
@@ -23,7 +23,6 @@ public void test() {
         SqlSession sqlSession = MybatisHelper.getSqlSession();
         try {
             CountryMultipleMapper mapper = sqlSession.getMapper(CountryMultipleMapper.class);
-
             Country country = new Country();
             country.setId(200);
             country.setCountrycode("AB");

File: base/src/test/java/tk/mybatis/mapper/mapper/CountryMultipleMapper.java
Patch:
@@ -1,11 +1,10 @@
 package tk.mybatis.mapper.mapper;
 
 import tk.mybatis.mapper.common.Mapper;
+import tk.mybatis.mapper.common.base.insert.InsertMapper;
+import tk.mybatis.mapper.common.base.select.SelectMapper;
 import tk.mybatis.mapper.model.Country;
 
-//@RegisterMapper
 public interface CountryMultipleMapper
-//        extends Mapper<Country> {
         extends MultipleCommonMapper<Country> {
-
 }

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/FieldHelper.java
Patch:
@@ -181,6 +181,7 @@ private List<EntityField> _getFields(Class<?> entityClass, List<EntityField> fie
                 return fieldList;
             }
             Field[] fields = entityClass.getDeclaredFields();
+            Arrays.sort(fields, Comparator.comparing(Field::getName));
             int index = 0;
             for (int i = 0; i < fields.length; i++) {
                 Field field = fields[i];

File: core/src/test/java/tk/mybatis/mapper/mapperhelper/SqlHelperTest.java
Patch:
@@ -35,7 +35,7 @@ public void testLogicDeleteSql() {
         Assert.assertEquals(" AND is_valid = 1", notLogicDeletedColumn);
 
         String updateSetColumns = SqlHelper.updateSetColumns(User.class, null, false, false);
-        Assert.assertEquals("<set>username = #{username},is_valid = 1,</set>", updateSetColumns);
+        Assert.assertEquals("<set>is_valid = 1,username = #{username},</set>", updateSetColumns);
     }
 
 }

File: extra/src/main/java/tk/mybatis/mapper/additional/upsert/UpsertMapper.java
Patch:
@@ -1,7 +1,9 @@
 package tk.mybatis.mapper.additional.upsert;
 
 import org.apache.ibatis.annotations.UpdateProvider;
+import tk.mybatis.mapper.annotation.RegisterMapper;
 
+@RegisterMapper
 public interface UpsertMapper<T> {
 
     @UpdateProvider(

File: core/src/main/java/tk/mybatis/mapper/annotation/ColumnType.java
Patch:
@@ -25,7 +25,6 @@
 package tk.mybatis.mapper.annotation;
 
 import org.apache.ibatis.type.JdbcType;
-import org.apache.ibatis.type.TypeHandler;
 import org.apache.ibatis.type.UnknownTypeHandler;
 
 import java.lang.annotation.ElementType;
@@ -53,5 +52,5 @@
 
     JdbcType jdbcType() default JdbcType.UNDEFINED;
 
-    Class<? extends TypeHandler<?>> typeHandler() default UnknownTypeHandler.class;
+    Class<?> typeHandler() default UnknownTypeHandler.class;
 }

File: core/src/main/java/tk/mybatis/mapper/genid/GenId.java
Patch:
@@ -5,7 +5,7 @@
  * <p>
  * 在 Spring 集成环境中，可以通过配置静态方式获取 Spring 的 context 对象。<br/>
  * <p>
- * 如果使用 vesta(https://gitee.com/robertleepeak/vesta-id-generator) 来生成 ID，假设已经提供了 vesta 的 idService。<br/>
+ * 如果使用 vesta(https://gitee.com/free/vesta-id-generator) 来生成 ID，假设已经提供了 vesta 的 idService。<br/>
  * <p>
  * 那么可以在实现中获取该类，然后生成 Id 返回，示例代码如下：
  *
@@ -32,5 +32,4 @@ public Object genId(String table, String column) {
         }
     }
 
-
 }

File: spring/src/main/java/tk/mybatis/spring/mapper/MapperScannerConfigurer.java
Patch:
@@ -39,7 +39,6 @@
 
 import java.lang.annotation.Annotation;
 import java.util.Map;
-import java.util.Optional;
 import java.util.Properties;
 
 import static org.springframework.util.Assert.notNull;
@@ -211,8 +210,7 @@ private void processPropertyPlaceHolders() {
             this.sqlSessionTemplateBeanName = updatePropertyValue("sqlSessionTemplateBeanName", values);
             this.lazyInitialization = updatePropertyValue("lazyInitialization", values);
         }
-        this.lazyInitialization = Optional.ofNullable(this.lazyInitialization).map(getEnvironment()::resolvePlaceholders)
-                .orElse(null);
+        this.lazyInitialization = this.lazyInitialization == null ? null : getEnvironment().resolvePlaceholders(this.lazyInitialization);
     }
 
     private Environment getEnvironment() {

File: generator/src/main/java/tk/mybatis/mapper/generator/MapperPlugin.java
Patch:
@@ -242,7 +242,7 @@ private void processEntityClass(TopLevelClass topLevelClass, IntrospectedTable i
                 field.setStatic(true);
                 field.setFinal(true);
                 field.setInitializationString("\"" + introspectedColumn.getJavaProperty() + "\"");
-                context.getCommentGenerator().addClassComment(topLevelClass, introspectedTable);
+                context.getCommentGenerator().addFieldComment(field, introspectedTable, introspectedColumn);
                 topLevelClass.addField(field);
                 //增加字段名常量,用于pageHelper
                 String  columnFieldName = "DB_" + introspectedColumn.getActualColumnName().toUpperCase(); //$NON-NLS-1$

File: base/src/main/java/tk/mybatis/mapper/provider/IdsProvider.java
Patch:
@@ -64,7 +64,7 @@ public String deleteByIds(MappedStatement ms) {
             sql.append(column.getColumn());
             sql.append(" in (${_parameter})");
         } else {
-            throw new MapperException("继承 deleteByIds 方法的实体类[" + entityClass.getCanonicalName() + "]中必须只有一个带有 @Id 注解的字段");
+            throw new MapperException("继承 deleteByIds 方法的实体类[" + entityClass.getName() + "]中必须只有一个带有 @Id 注解的字段");
         }
         return sql.toString();
     }
@@ -89,7 +89,7 @@ public String selectByIds(MappedStatement ms) {
             sql.append(column.getColumn());
             sql.append(" in (${_parameter})");
         } else {
-            throw new MapperException("继承 selectByIds 方法的实体类[" + entityClass.getCanonicalName() + "]中必须只有一个带有 @Id 注解的字段");
+            throw new MapperException("继承 selectByIds 方法的实体类[" + entityClass.getName() + "]中必须只有一个带有 @Id 注解的字段");
         }
         return sql.toString();
     }

File: base/src/main/java/tk/mybatis/mapper/provider/SaveProvider.java
Patch:
@@ -111,15 +111,15 @@ private void processKey(StringBuilder sql, Class<?> entityClass, MappedStatement
                     if (column.getGenerator() != null && column.getGenerator().equals("JDBC")) {
                         continue;
                     }
-                    throw new MapperException(ms.getId() + "对应的实体类" + entityClass.getCanonicalName() + "中包含多个MySql的自动增长列,最多只能有一个!");
+                    throw new MapperException(ms.getId() + "对应的实体类" + entityClass.getName() + "中包含多个MySql的自动增长列,最多只能有一个!");
                 }
                 //插入selectKey
                 SelectKeyHelper.newSelectKeyMappedStatement(ms, column, entityClass, isBEFORE(), getIDENTITY(column));
                 hasIdentityKey = true;
             } else if(column.getGenIdClass() != null){
                 sql.append("<bind name=\"").append(column.getColumn()).append("GenIdBind\" value=\"@tk.mybatis.mapper.genid.GenIdUtil@genId(");
                 sql.append("_parameter").append(", '").append(column.getProperty()).append("'");
-                sql.append(", @").append(column.getGenIdClass().getCanonicalName()).append("@class");
+                sql.append(", @").append(column.getGenIdClass().getName()).append("@class");
                 sql.append(", '").append(tableName(entityClass)).append("'");
                 sql.append(", '").append(column.getColumn()).append("')");
                 sql.append("\"/>");

File: base/src/main/java/tk/mybatis/mapper/provider/base/BaseInsertProvider.java
Patch:
@@ -148,15 +148,15 @@ private void processKey(StringBuilder sql, Class<?> entityClass, MappedStatement
                     if (column.getGenerator() != null && "JDBC".equals(column.getGenerator())) {
                         continue;
                     }
-                    throw new MapperException(ms.getId() + "对应的实体类" + entityClass.getCanonicalName() + "中包含多个MySql的自动增长列,最多只能有一个!");
+                    throw new MapperException(ms.getId() + "对应的实体类" + entityClass.getName() + "中包含多个MySql的自动增长列,最多只能有一个!");
                 }
                 //插入selectKey
                 SelectKeyHelper.newSelectKeyMappedStatement(ms, column, entityClass, isBEFORE(), getIDENTITY(column));
                 hasIdentityKey = true;
             } else if (column.getGenIdClass() != null) {
                 sql.append("<bind name=\"").append(column.getColumn()).append("GenIdBind\" value=\"@tk.mybatis.mapper.genid.GenIdUtil@genId(");
                 sql.append("_parameter").append(", '").append(column.getProperty()).append("'");
-                sql.append(", @").append(column.getGenIdClass().getCanonicalName()).append("@class");
+                sql.append(", @").append(column.getGenIdClass().getName()).append("@class");
                 sql.append(", '").append(tableName(entityClass)).append("'");
                 sql.append(", '").append(column.getColumn()).append("')");
                 sql.append("\"/>");

File: core/src/main/java/tk/mybatis/mapper/entity/EntityColumn.java
Patch:
@@ -140,13 +140,13 @@ public String getColumnHolder(String entityName, String suffix, String separator
         //为了以后定制类型处理方式，你也可以指定一个特殊的类型处理器类，例如枚举
         if (this.typeHandler != null) {
             sb.append(", typeHandler=");
-            sb.append(this.typeHandler.getCanonicalName());
+            sb.append(this.typeHandler.getName());
         }
         //3.4.0 以前的 mybatis 无法获取父类中泛型的 javaType，所以如果使用低版本，就需要设置 useJavaType = true
         //useJavaType 默认 false,没有 javaType 限制时，对 ByPrimaryKey 方法的参数校验就放宽了，会自动转型
         if (useJavaType && !this.javaType.isArray()) {//当类型为数组时，不设置javaType#103
             sb.append(", javaType=");
-            sb.append(javaType.getCanonicalName());
+            sb.append(javaType.getName());
         }
         sb.append("}");
         if (StringUtil.isNotEmpty(separator)) {

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/EntityHelper.java
Patch:
@@ -66,7 +66,7 @@ public class EntityHelper {
     public static EntityTable getEntityTable(Class<?> entityClass) {
         EntityTable entityTable = entityTableMap.get(entityClass);
         if (entityTable == null) {
-            throw new MapperException("无法获取实体类" + entityClass.getCanonicalName() + "对应的表名!");
+            throw new MapperException("无法获取实体类" + entityClass.getName() + "对应的表名!");
         }
         return entityTable;
     }

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/resolve/DefaultEntityResolve.java
Patch:
@@ -286,7 +286,7 @@ protected void processKeySql(EntityTable entityTable, EntityColumn entityColumn,
             entityColumn.setIdentity(false);
             entityColumn.setGenIdClass(keySql.genId());
         } else {
-            throw new MapperException(entityTable.getEntityClass().getCanonicalName()
+            throw new MapperException(entityTable.getEntityClass().getName()
                     + " 类中的 @KeySql 注解配置无效!");
         }
     }

File: core/src/main/java/tk/mybatis/mapper/util/OGNL.java
Patch:
@@ -55,9 +55,9 @@ public static boolean checkExampleEntityClass(Object parameter, String entityFul
         if (parameter != null && parameter instanceof Example && StringUtil.isNotEmpty(entityFullName)) {
             Example example = (Example) parameter;
             Class<?> entityClass = example.getEntityClass();
-            if (!entityClass.getCanonicalName().equals(entityFullName)) {
+            if (!entityClass.getName().equals(entityFullName)) {
                 throw new MapperException("当前 Example 方法对应实体为:" + entityFullName
-                        + ", 但是参数 Example 中的 entityClass 为:" + entityClass.getCanonicalName());
+                        + ", 但是参数 Example 中的 entityClass 为:" + entityClass.getName());
             }
         }
         return true;
@@ -220,7 +220,7 @@ public static String andOr(Object parameter) {
             return ((Example.Criteria) parameter).getAndOr();
         } else if (parameter instanceof Example.Criterion) {
             return ((Example.Criterion) parameter).getAndOr();
-        } else if (parameter.getClass().getCanonicalName().endsWith("Criteria")) {
+        } else if (parameter.getClass().getName().endsWith("Criteria")) {
             return "or";
         } else {
             return "and";

File: extra/src/main/java/tk/mybatis/mapper/additional/aggregation/AggregationProvider.java
Patch:
@@ -87,14 +87,14 @@ public String selectAggregationByExample(MappedStatement ms) {
             sql.append(SqlHelper.exampleCheck(entityClass));
         }
         sql.append("SELECT ${@tk.mybatis.mapper.additional.aggregation.AggregationProvider@aggregationSelectClause(");
-        sql.append("@").append(entityClass.getCanonicalName()).append("@class");
+        sql.append("@").append(entityClass.getName()).append("@class");
         sql.append(", '").append(getConfig().getWrapKeyword()).append("'");
         sql.append(", aggregateCondition");
         sql.append(")} ");
         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));
         sql.append(SqlHelper.updateByExampleWhereClause());
         sql.append(" ${@tk.mybatis.mapper.additional.aggregation.AggregationProvider@aggregationGroupBy(");
-        sql.append("@").append(entityClass.getCanonicalName()).append("@class");
+        sql.append("@").append(entityClass.getName()).append("@class");
         sql.append(", '").append(getConfig().getWrapKeyword()).append("'");
         sql.append(", aggregateCondition");
         sql.append(")} ");

File: extra/src/main/java/tk/mybatis/mapper/additional/dialect/oracle/OracleProvider.java
Patch:
@@ -59,7 +59,7 @@ public String insertList(MappedStatement ms) {
             if (column.getGenIdClass() != null) {
                 sql.append("<bind name=\"").append(column.getColumn()).append("GenIdBind\" value=\"@tk.mybatis.mapper.genid.GenIdUtil@genId(");
                 sql.append("record").append(", '").append(column.getProperty()).append("'");
-                sql.append(", @").append(column.getGenIdClass().getCanonicalName()).append("@class");
+                sql.append(", @").append(column.getGenIdClass().getName()).append("@class");
                 sql.append(", '").append(tableName(entityClass)).append("'");
                 sql.append(", '").append(column.getColumn()).append("')");
                 sql.append("\"/>");

File: extra/src/main/java/tk/mybatis/mapper/additional/idlist/IdListProvider.java
Patch:
@@ -114,7 +114,7 @@ private void appendWhereIdList(StringBuilder sql, Class<?> entityClass, boolean
             sql.append("</foreach>");
             sql.append("</where>");
         } else {
-            throw new MapperException("继承 ByIdList 方法的实体类[" + entityClass.getCanonicalName() + "]中必须只有一个带有 @Id 注解的字段");
+            throw new MapperException("继承 ByIdList 方法的实体类[" + entityClass.getName() + "]中必须只有一个带有 @Id 注解的字段");
         }
     }
 }

File: extra/src/main/java/tk/mybatis/mapper/additional/insert/InsertListProvider.java
Patch:
@@ -64,7 +64,7 @@ public String insertList(MappedStatement ms) {
             if (column.getGenIdClass() != null) {
                 sql.append("<bind name=\"").append(column.getColumn()).append("GenIdBind\" value=\"@tk.mybatis.mapper.genid.GenIdUtil@genId(");
                 sql.append("record").append(", '").append(column.getProperty()).append("'");
-                sql.append(", @").append(column.getGenIdClass().getCanonicalName()).append("@class");
+                sql.append(", @").append(column.getGenIdClass().getName()).append("@class");
                 sql.append(", '").append(tableName(entityClass)).append("'");
                 sql.append(", '").append(column.getColumn()).append("')");
                 sql.append("\"/>");

File: extra/src/main/java/tk/mybatis/mapper/additional/update/differ/UpdateByDifferProvider.java
Patch:
@@ -96,7 +96,7 @@ public String whereVersion(Class<?> entityClass) {
         for (EntityColumn column : columnSet) {
             if (column.getEntityField().isAnnotationPresent(Version.class)) {
                 if (hasVersion) {
-                    throw new VersionException(entityClass.getCanonicalName() + " 中包含多个带有 @Version 注解的字段，一个类中只能存在一个带有 @Version 注解的字段!");
+                    throw new VersionException(entityClass.getName() + " 中包含多个带有 @Version 注解的字段，一个类中只能存在一个带有 @Version 注解的字段!");
                 }
                 hasVersion = true;
                 result = " AND " + column.getColumnEqualsHolder(NEWER);
@@ -122,14 +122,14 @@ public String updateSetColumnsByDiffer(Class<?> entityClass) {
         for (EntityColumn column : columnSet) {
             if (column.getEntityField().isAnnotationPresent(Version.class)) {
                 if (versionColumn != null) {
-                    throw new VersionException(entityClass.getCanonicalName() + " 中包含多个带有 @Version 注解的字段，一个类中只能存在一个带有 @Version 注解的字段!");
+                    throw new VersionException(entityClass.getName() + " 中包含多个带有 @Version 注解的字段，一个类中只能存在一个带有 @Version 注解的字段!");
                 }
                 versionColumn = column;
             }
             if (!column.isId() && column.isUpdatable()) {
                 if (column == versionColumn) {
                     Version version = versionColumn.getEntityField().getAnnotation(Version.class);
-                    String versionClass = version.nextVersion().getCanonicalName();
+                    String versionClass = version.nextVersion().getName();
                     //version = ${@tk.mybatis.mapper.version@nextVersionClass("versionClass", version)}
                     sql.append(column.getColumn())
                             .append(" = ${@tk.mybatis.mapper.version.VersionUtil@nextVersion(")

File: extra/src/main/java/tk/mybatis/mapper/additional/update/force/UpdateByPrimaryKeySelectiveForceProvider.java
Patch:
@@ -80,14 +80,14 @@ public String updateSetColumnsForce(Class<?> entityClass, String entityName, boo
         for (EntityColumn column : columnSet) {
             if (column.getEntityField().isAnnotationPresent(Version.class)) {
                 if (versionColumn != null) {
-                    throw new VersionException(entityClass.getCanonicalName() + " 中包含多个带有 @Version 注解的字段，一个类中只能存在一个带有 @Version 注解的字段!");
+                    throw new VersionException(entityClass.getName() + " 中包含多个带有 @Version 注解的字段，一个类中只能存在一个带有 @Version 注解的字段!");
                 }
                 versionColumn = column;
             }
             if (!column.isId() && column.isUpdatable()) {
                 if (column == versionColumn) {
                     Version version = versionColumn.getEntityField().getAnnotation(Version.class);
-                    String versionClass = version.nextVersion().getCanonicalName();
+                    String versionClass = version.nextVersion().getName();
                     //version = ${@tk.mybatis.mapper.version@nextVersionClass("versionClass", version)}
                     sql.append(column.getColumn())
                             .append(" = ${@tk.mybatis.mapper.version.VersionUtil@nextVersion(")

File: generator/src/main/java/tk/mybatis/mapper/generator/MapperPlugin.java
Patch:
@@ -396,7 +396,7 @@ public void setContext(Context context) {
         useMapperCommentGenerator = !"FALSE".equalsIgnoreCase(context.getProperty("useMapperCommentGenerator"));
         if (useMapperCommentGenerator) {
             commentCfg = new CommentGeneratorConfiguration();
-            commentCfg.setConfigurationType(MapperCommentGenerator.class.getCanonicalName());
+            commentCfg.setConfigurationType(MapperCommentGenerator.class.getName());
             context.setCommentGeneratorConfiguration(commentCfg);
         }
 

File: spring-boot-starter/mapper-spring-boot-autoconfigure/src/main/java/tk/mybatis/mapper/autoconfigure/MapperCacheDisabler.java
Patch:
@@ -57,10 +57,10 @@ private void removeStaticCache(Class<?> utilClass, String fieldName) {
                     throw new UnsupportedOperationException("cache field must be a java.util.Map " +
                             "or org.apache.ibatis.cache.Cache instance");
                 }
-                logger.info("Clear " + utilClass.getCanonicalName() + " " + fieldName + " cache.");
+                logger.info("Clear " + utilClass.getName() + " " + fieldName + " cache.");
             }
         } catch (Exception ex) {
-            logger.warn("Failed to disable " + utilClass.getCanonicalName() + " "
+            logger.warn("Failed to disable " + utilClass.getName() + " "
                     + fieldName + " cache. ClassCastExceptions may occur", ex);
         }
     }

File: core/src/main/java/tk/mybatis/mapper/util/SqlReservedWords.java
Patch:
@@ -932,6 +932,7 @@ public class SqlReservedWords {
                 "VCAT", // DB2 //$NON-NLS-1$
                 "VERBOSE", //$NON-NLS-1$
                 "VIEW", // DB2 //$NON-NLS-1$
+                "VIRTUAL", //MySQL #272
                 "VOLATILE", //$NON-NLS-1$
                 "VOLUMES", // DB2 //$NON-NLS-1$
                 "WAITFOR", //$NON-NLS-1$

File: core/src/main/java/tk/mybatis/mapper/entity/Example.java
Patch:
@@ -118,6 +118,7 @@ private Example(Builder builder) {
         this.oredCriteria = builder.exampleCriterias;
         this.forUpdate = builder.forUpdate;
         this.tableName = builder.tableName;
+        this.ORDERBY = new OrderBy(this, propertyMap);
 
         if (!StringUtil.isEmpty(builder.orderByClause.toString())) {
             this.orderByClause = builder.orderByClause.toString();

File: extra/src/main/java/tk/mybatis/mapper/additional/idlist/IdListProvider.java
Patch:
@@ -87,7 +87,7 @@ public String selectByIdList(MappedStatement ms) {
         StringBuilder sql = new StringBuilder();
         sql.append(SqlHelper.selectAllColumns(entityClass));
         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));
-        appendWhereIdList(sql, entityClass, false);
+        appendWhereIdList(sql, entityClass, isNotEmpty());
         return sql.toString();
     }
 

File: core/src/main/java/tk/mybatis/mapper/entity/Example.java
Patch:
@@ -972,10 +972,10 @@ private void contactOrderByClause(String order, String... properties) {
             for (String property : properties) {
                 String column;
                 if ((column = propertyforOderBy(property)) != null) {
-                    columns.append(",").append(column);
+                    columns.append(",").append(column).append(order);
                 }
             }
-            columns.append(order);
+           ;
             if (columns.length() > 0) {
                 orderByClause.append(columns);
             }

File: core/src/main/java/tk/mybatis/mapper/entity/Example.java
Patch:
@@ -972,10 +972,10 @@ private void contactOrderByClause(String order, String... properties) {
             for (String property : properties) {
                 String column;
                 if ((column = propertyforOderBy(property)) != null) {
-                    columns.append(",").append(column);
+                    columns.append(",").append(column).append(order);
                 }
             }
-            columns.append(order);
+           ;
             if (columns.length() > 0) {
                 orderByClause.append(columns);
             }

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/SqlHelper.java
Patch:
@@ -944,7 +944,6 @@ public static String exampleCheck(Class<?> entityClass) {
     public static String exampleWhereClause() {
         return "<if test=\"_parameter != null\">" +
                 "<where>\n" +
-                " ${@tk.mybatis.mapper.util.OGNL@andNotLogicDelete(_parameter)}" +
                 " <trim prefix=\"(\" prefixOverrides=\"and |or \" suffix=\")\">\n" +
                 "  <foreach collection=\"oredCriteria\" item=\"criteria\">\n" +
                 "    <if test=\"criteria.valid\">\n" +
@@ -973,6 +972,7 @@ public static String exampleWhereClause() {
                 "    </if>\n" +
                 "  </foreach>\n" +
                 " </trim>\n" +
+                " ${@tk.mybatis.mapper.util.OGNL@andNotLogicDelete(_parameter)}" +
                 "</where>" +
                 "</if>";
     }
@@ -984,7 +984,6 @@ public static String exampleWhereClause() {
      */
     public static String updateByExampleWhereClause() {
         return "<where>\n" +
-                " ${@tk.mybatis.mapper.util.OGNL@andNotLogicDelete(example)}" +
                 " <trim prefix=\"(\" prefixOverrides=\"and |or \" suffix=\")\">\n" +
                 "  <foreach collection=\"example.oredCriteria\" item=\"criteria\">\n" +
                 "    <if test=\"criteria.valid\">\n" +
@@ -1013,6 +1012,7 @@ public static String updateByExampleWhereClause() {
                 "    </if>\n" +
                 "  </foreach>\n" +
                 " </trim>\n" +
+                " ${@tk.mybatis.mapper.util.OGNL@andNotLogicDelete(example)}" +
                 "</where>";
     }
 

File: base/src/main/java/tk/mybatis/mapper/provider/SpecialProvider.java
Patch:
@@ -30,6 +30,7 @@
 import tk.mybatis.mapper.mapperhelper.MapperHelper;
 import tk.mybatis.mapper.mapperhelper.MapperTemplate;
 import tk.mybatis.mapper.mapperhelper.SqlHelper;
+import tk.mybatis.mapper.util.StringUtil;
 
 import java.util.Set;
 
@@ -54,7 +55,7 @@ public String insertList(MappedStatement ms) {
         //开始拼sql
         StringBuilder sql = new StringBuilder();
         sql.append("<bind name=\"listNotEmptyCheck\" value=\"@tk.mybatis.mapper.util.OGNL@notEmptyCollectionCheck(list, '" + ms.getId() + " 方法参数为空')\"/>");
-        sql.append(SqlHelper.insertIntoTable(entityClass, tableName(entityClass)));
+        sql.append(SqlHelper.insertIntoTable(entityClass, tableName(entityClass), "list[0]"));
         sql.append(SqlHelper.insertColumns(entityClass, true, false, false));
         sql.append(" VALUES ");
         sql.append("<foreach collection=\"list\" item=\"record\" separator=\",\" >");

File: extra/src/main/java/tk/mybatis/mapper/additional/dialact/oracle/OracleProvider.java
Patch:
@@ -46,7 +46,7 @@ public String insertList(MappedStatement ms){
         sql.append("INSERT ALL\n");
         sql.append("<foreach collection=\"list\" item=\"record\">\n");
 
-        String tableName = SqlHelper.getDynamicTableName(entityClass, tableName(entityClass));
+        String tableName = SqlHelper.getDynamicTableName(entityClass, tableName(entityClass),"list[0]");
         String columns = SqlHelper.insertColumns(entityClass, false, false, false);
         sql.append(" INTO ").append(tableName).append(" ").append(columns).append("\n");
         sql.append(" VALUES ");

File: extra/src/main/java/tk/mybatis/mapper/additional/insert/InsertListProvider.java
Patch:
@@ -52,7 +52,7 @@ public String insertList(MappedStatement ms) {
         //开始拼sql
         StringBuilder sql = new StringBuilder();
         sql.append("<bind name=\"listNotEmptyCheck\" value=\"@tk.mybatis.mapper.util.OGNL@notEmptyCollectionCheck(list, '" + ms.getId() + " 方法参数为空')\"/>");
-        sql.append(SqlHelper.insertIntoTable(entityClass, tableName(entityClass)));
+        sql.append(SqlHelper.insertIntoTable(entityClass, tableName(entityClass), "list[0]"));
         sql.append(SqlHelper.insertColumns(entityClass, false, false, false));
         sql.append(" VALUES ");
         sql.append("<foreach collection=\"list\" item=\"record\" separator=\",\" >");

File: core/src/main/java/tk/mybatis/mapper/entity/Example.java
Patch:
@@ -495,6 +495,9 @@ public Criteria andCondition(String condition, Object value) {
          * @Date 2015年7月17日 下午12:48:08
          */
         public Criteria andEqualTo(Object param) {
+            if(param == null){
+                return (Criteria) this;
+            }
             MetaObject metaObject = MetaObjectUtil.forObject(param);
             String[] properties = metaObject.getGetterNames();
             for (String property : properties) {

File: base/src/main/java/tk/mybatis/mapper/provider/ExampleProvider.java
Patch:
@@ -77,7 +77,7 @@ public String deleteByExample(MappedStatement ms) {
         if (getConfig().isSafeDelete()) {
             sql.append(SqlHelper.exampleHasAtLeastOneCriteriaCheck("_parameter"));
         }
-        if (SqlHelper.hasLogicDeleteAndCheckRepeated(entityClass)) {
+        if (SqlHelper.hasLogicDeleteColumn(entityClass)) {
             sql.append(SqlHelper.updateTable(entityClass, tableName(entityClass)));
             sql.append("<set>");
             sql.append(SqlHelper.logicDeleteColumnEqualsValue(entityClass, true));

File: base/src/main/java/tk/mybatis/mapper/provider/base/BaseDeleteProvider.java
Patch:
@@ -57,7 +57,7 @@ public String delete(MappedStatement ms) {
             sql.append(SqlHelper.notAllNullParameterCheck("_parameter", EntityHelper.getColumns(entityClass)));
         }
         // 如果是逻辑删除，则修改为更新表，修改逻辑删除字段的值
-        if (SqlHelper.hasLogicDeleteAndCheckRepeated(entityClass)) {
+        if (SqlHelper.hasLogicDeleteColumn(entityClass)) {
             sql.append(SqlHelper.updateTable(entityClass, tableName(entityClass)));
             sql.append("<set>");
             sql.append(SqlHelper.logicDeleteColumnEqualsValue(entityClass, true));
@@ -78,7 +78,7 @@ public String delete(MappedStatement ms) {
     public String deleteByPrimaryKey(MappedStatement ms) {
         final Class<?> entityClass = getEntityClass(ms);
         StringBuilder sql = new StringBuilder();
-        if (SqlHelper.hasLogicDeleteAndCheckRepeated(entityClass)) {
+        if (SqlHelper.hasLogicDeleteColumn(entityClass)) {
             sql.append(SqlHelper.updateTable(entityClass, tableName(entityClass)));
             sql.append("<set>");
             sql.append(SqlHelper.logicDeleteColumnEqualsValue(entityClass, true));

File: base/src/main/java/tk/mybatis/mapper/provider/ExampleProvider.java
Patch:
@@ -77,7 +77,7 @@ public String deleteByExample(MappedStatement ms) {
         if (getConfig().isSafeDelete()) {
             sql.append(SqlHelper.exampleHasAtLeastOneCriteriaCheck("_parameter"));
         }
-        if (SqlHelper.hasLogicDeleteAndCheckRepeated(entityClass)) {
+        if (SqlHelper.hasLogicDeleteColumn(entityClass)) {
             sql.append(SqlHelper.updateTable(entityClass, tableName(entityClass)));
             sql.append("<set>");
             sql.append(SqlHelper.logicDeleteColumnEqualsValue(entityClass, true));

File: base/src/main/java/tk/mybatis/mapper/provider/base/BaseDeleteProvider.java
Patch:
@@ -57,7 +57,7 @@ public String delete(MappedStatement ms) {
             sql.append(SqlHelper.notAllNullParameterCheck("_parameter", EntityHelper.getColumns(entityClass)));
         }
         // 如果是逻辑删除，则修改为更新表，修改逻辑删除字段的值
-        if (SqlHelper.hasLogicDeleteAndCheckRepeated(entityClass)) {
+        if (SqlHelper.hasLogicDeleteColumn(entityClass)) {
             sql.append(SqlHelper.updateTable(entityClass, tableName(entityClass)));
             sql.append("<set>");
             sql.append(SqlHelper.logicDeleteColumnEqualsValue(entityClass, true));
@@ -78,7 +78,7 @@ public String delete(MappedStatement ms) {
     public String deleteByPrimaryKey(MappedStatement ms) {
         final Class<?> entityClass = getEntityClass(ms);
         StringBuilder sql = new StringBuilder();
-        if (SqlHelper.hasLogicDeleteAndCheckRepeated(entityClass)) {
+        if (SqlHelper.hasLogicDeleteColumn(entityClass)) {
             sql.append(SqlHelper.updateTable(entityClass, tableName(entityClass)));
             sql.append("<set>");
             sql.append(SqlHelper.logicDeleteColumnEqualsValue(entityClass, true));

File: base/src/main/java/tk/mybatis/mapper/common/base/insert/InsertMapper.java
Patch:
@@ -25,6 +25,7 @@
 package tk.mybatis.mapper.common.base.insert;
 
 import org.apache.ibatis.annotations.InsertProvider;
+import org.apache.ibatis.annotations.Options;
 import tk.mybatis.mapper.annotation.RegisterMapper;
 import tk.mybatis.mapper.provider.base.BaseInsertProvider;
 
@@ -44,6 +45,7 @@ public interface InsertMapper<T> {
      * @return
      */
     @InsertProvider(type = BaseInsertProvider.class, method = "dynamicSQL")
+    @Options(useGeneratedKeys = true)
     int insert(T record);
 
 }
\ No newline at end of file

File: base/src/main/java/tk/mybatis/mapper/common/base/insert/InsertSelectiveMapper.java
Patch:
@@ -25,6 +25,7 @@
 package tk.mybatis.mapper.common.base.insert;
 
 import org.apache.ibatis.annotations.InsertProvider;
+import org.apache.ibatis.annotations.Options;
 import tk.mybatis.mapper.annotation.RegisterMapper;
 import tk.mybatis.mapper.provider.base.BaseInsertProvider;
 
@@ -44,6 +45,7 @@ public interface InsertSelectiveMapper<T> {
      * @return
      */
     @InsertProvider(type = BaseInsertProvider.class, method = "dynamicSQL")
+    @Options(useGeneratedKeys = true)
     int insertSelective(T record);
 
 }
\ No newline at end of file

File: base/src/main/java/tk/mybatis/mapper/common/special/InsertUseGeneratedKeysMapper.java
Patch:
@@ -43,7 +43,7 @@ public interface InsertUseGeneratedKeysMapper<T> {
      * @param record
      * @return
      */
-    @Options(useGeneratedKeys = true, keyProperty = "id")
+    @Options(useGeneratedKeys = true)
     @InsertProvider(type = SpecialProvider.class, method = "dynamicSQL")
     int insertUseGeneratedKeys(T record);
 

File: base/src/main/java/tk/mybatis/mapper/common/sqlserver/InsertMapper.java
Patch:
@@ -43,7 +43,7 @@ public interface InsertMapper<T> {
      * @param record
      * @return
      */
-    @Options(useGeneratedKeys = true, keyProperty = "id")
+    @Options(useGeneratedKeys = true)
     @InsertProvider(type = SqlServerProvider.class, method = "dynamicSQL")
     int insert(T record);
 

File: base/src/main/java/tk/mybatis/mapper/common/sqlserver/InsertSelectiveMapper.java
Patch:
@@ -37,7 +37,7 @@
 @tk.mybatis.mapper.annotation.RegisterMapper
 public interface InsertSelectiveMapper<T> {
 
-    @Options(useGeneratedKeys = true, keyProperty = "id")
+    @Options(useGeneratedKeys = true)
     @InsertProvider(type = SqlServerProvider.class, method = "dynamicSQL")
     int insertSelective(T record);
 

File: extra/src/main/java/tk/mybatis/mapper/additional/insert/InsertListMapper.java
Patch:
@@ -25,6 +25,7 @@
 package tk.mybatis.mapper.additional.insert;
 
 import org.apache.ibatis.annotations.InsertProvider;
+import org.apache.ibatis.annotations.Options;
 import tk.mybatis.mapper.annotation.RegisterMapper;
 
 import java.util.List;
@@ -50,5 +51,6 @@ public interface InsertListMapper<T> {
      * @return
      */
     @InsertProvider(type = InsertListProvider.class, method = "dynamicSQL")
+    @Options(useGeneratedKeys = true)
     int insertList(List<? extends T> recordList);
 }
\ No newline at end of file

File: base/src/main/java/tk/mybatis/mapper/common/special/InsertListMapper.java
Patch:
@@ -47,7 +47,7 @@ public interface InsertListMapper<T> {
      */
     @Options(useGeneratedKeys = true, keyProperty = "id")
     @InsertProvider(type = SpecialProvider.class, method = "dynamicSQL")
-    int insertList(List<T> recordList);
+    int insertList(List<? extends T> recordList);
 
     /**
      * ======如果主键不是id怎么用？==========

File: extra/src/main/java/tk/mybatis/mapper/additional/insert/InsertListMapper.java
Patch:
@@ -50,5 +50,5 @@ public interface InsertListMapper<T> {
      * @return
      */
     @InsertProvider(type = InsertListProvider.class, method = "dynamicSQL")
-    int insertList(List<T> recordList);
+    int insertList(List<? extends T> recordList);
 }
\ No newline at end of file

File: core/src/main/java/tk/mybatis/mapper/entity/EntityColumn.java
Patch:
@@ -52,7 +52,7 @@ public class EntityColumn {
     private boolean insertable = true;
     //可更新
     private boolean updatable = true;
-    private ORDER order;
+    private ORDER order = ORDER.DEFAULT;
     //是否设置 javaType
     private boolean useJavaType;
     /**

File: base/src/test/java/tk/mybatis/mapper/mapper/MybatisHelper.java
Patch:
@@ -85,6 +85,8 @@ public class MybatisHelper {
                 //config.setOrder("AFTER");
                 //自动关键字 - mysql
                 //config.setWrapKeyword("`{0}`");
+                //使用 javaType
+                config.setUseJavaType(true);
                 //设置配置
                 mapperHelper.setConfig(config);
                 //配置完成后，执行下面的操作

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/resolve/DefaultEntityResolve.java
Patch:
@@ -100,6 +100,8 @@ protected void processField(EntityTable entityTable, EntityField field, Config c
         }
         //Id
         EntityColumn entityColumn = new EntityColumn(entityTable);
+        //是否使用 {xx, javaType=xxx}
+        entityColumn.setUseJavaType(config.isUseJavaType());
         //记录 field 信息，方便后续扩展使用
         entityColumn.setEntityField(field);
         if (field.isAnnotationPresent(Id.class)) {

File: core/src/main/java/tk/mybatis/mapper/mapperhelper/resolve/DefaultEntityResolve.java
Patch:
@@ -63,9 +63,10 @@ public EntityTable resolveEntity(Class<?> entityClass, Config config) {
         for (EntityField field : fields) {
             //如果启用了简单类型，就做简单类型校验，如果不是简单类型，直接跳过
             //3.5.0 如果启用了枚举作为简单类型，就不会自动忽略枚举类型
-            //4.0 如果标记了 Column 注解，也不忽略
+            //4.0 如果标记了 Column 或 ColumnType 注解，也不忽略
             if (config.isUseSimpleType()
                     && !field.isAnnotationPresent(Column.class)
+                    && !field.isAnnotationPresent(ColumnType.class)
                     && !(SimpleTypeUtil.isSimpleType(field.getJavaType())
                             ||
                             (config.isEnumAsSimpleType() && Enum.class.isAssignableFrom(field.getJavaType())))) {

File: src/main/java/tk/mybatis/mapper/mapperhelper/EntityHelper.java
Patch:
@@ -40,7 +40,6 @@
 import tk.mybatis.mapper.util.StringUtil;
 
 import javax.persistence.*;
-import java.lang.annotation.Annotation;
 import java.text.MessageFormat;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -231,7 +230,7 @@ public static synchronized void initEntityNameMap(Class<?> entityClass, Config c
             if (config.isUseSimpleType() &&
                     !(SimpleTypeUtil.isSimpleType(field.getJavaType())
                             ||
-                            (config.isAnnotationAsSimpleType() && Annotation.class.isAssignableFrom(field.getJavaType())))) {
+                            (config.isEnumAsSimpleType() && Enum.class.isAssignableFrom(field.getJavaType())))) {
                 continue;
             }
             processField(entityTable, style, field, config.getWrapKeyword());

File: src/main/java/tk/mybatis/mapper/provider/base/BaseDeleteProvider.java
Patch:
@@ -50,6 +50,7 @@ public String delete(MappedStatement ms) {
         Class<?> entityClass = getEntityClass(ms);
         StringBuilder sql = new StringBuilder();
         sql.append(SqlHelper.deleteFromTable(entityClass, tableName(entityClass)));
+        //TODO 增加 @Version 支持
         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));
         return sql.toString();
     }
@@ -63,6 +64,7 @@ public String deleteByPrimaryKey(MappedStatement ms) {
         final Class<?> entityClass = getEntityClass(ms);
         StringBuilder sql = new StringBuilder();
         sql.append(SqlHelper.deleteFromTable(entityClass, tableName(entityClass)));
+        //TODO 增加 @Version 支持
         sql.append(SqlHelper.wherePKColumns(entityClass));
         return sql.toString();
     }

File: src/test/java/tk/mybatis/mapper/mapper/MybatisHelper.java
Patch:
@@ -77,7 +77,7 @@ public class MybatisHelper {
                 config.setCheckExampleEntityClass(true);
                 //启用简单类型
                 config.setUseSimpleType(true);
-                config.setAnnotationAsSimpleType(true);
+                config.setEnumAsSimpleType(true);
                 // 序列的获取规则,使用{num}格式化参数，默认值为{0}.nextval，针对Oracle
                 // 可选参数一共3个，对应0,1,2,分别为SequenceName，ColumnName, PropertyName
                 //config.setSeqFormat("NEXT VALUE FOR {0}");

File: src/test/java/tk/mybatis/mapper/mapper/MybatisHelper.java
Patch:
@@ -77,6 +77,7 @@ public class MybatisHelper {
                 config.setCheckExampleEntityClass(true);
                 //启用简单类型
                 config.setUseSimpleType(true);
+                config.setAnnotationAsSimpleType(true);
                 // 序列的获取规则,使用{num}格式化参数，默认值为{0}.nextval，针对Oracle
                 // 可选参数一共3个，对应0,1,2,分别为SequenceName，ColumnName, PropertyName
                 //config.setSeqFormat("NEXT VALUE FOR {0}");

File: src/main/java/tk/mybatis/mapper/mapperhelper/MapperTemplate.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
 import org.apache.ibatis.executor.keygen.NoKeyGenerator;
-import org.apache.ibatis.executor.keygen.SelectKeyGenerator;
 import org.apache.ibatis.mapping.*;
 import org.apache.ibatis.reflection.MetaObject;
 import org.apache.ibatis.reflection.SystemMetaObject;

File: src/main/java/tk/mybatis/mapper/common/base/update/UpdateByPrimaryKeyMapper.java
Patch:
@@ -24,6 +24,7 @@
 
 package tk.mybatis.mapper.common.base.update;
 
+import org.apache.ibatis.annotations.Options;
 import org.apache.ibatis.annotations.UpdateProvider;
 import tk.mybatis.mapper.provider.base.BaseUpdateProvider;
 
@@ -42,6 +43,7 @@ public interface UpdateByPrimaryKeyMapper<T> {
      * @return
      */
     @UpdateProvider(type = BaseUpdateProvider.class, method = "dynamicSQL")
+    @Options(flushCache = true, useCache = false, useGeneratedKeys = false)
     int updateByPrimaryKey(T record);
 
 }
\ No newline at end of file

File: src/main/java/tk/mybatis/mapper/common/base/update/UpdateByPrimaryKeySelectiveMapper.java
Patch:
@@ -24,6 +24,7 @@
 
 package tk.mybatis.mapper.common.base.update;
 
+import org.apache.ibatis.annotations.Options;
 import org.apache.ibatis.annotations.UpdateProvider;
 import tk.mybatis.mapper.provider.base.BaseUpdateProvider;
 
@@ -42,6 +43,7 @@ public interface UpdateByPrimaryKeySelectiveMapper<T> {
      * @return
      */
     @UpdateProvider(type = BaseUpdateProvider.class, method = "dynamicSQL")
+    @Options(flushCache = true, useCache = false, useGeneratedKeys = false)
     int updateByPrimaryKeySelective(T record);
 
 }
\ No newline at end of file

File: src/main/java/tk/mybatis/mapper/common/condition/UpdateByConditionMapper.java
Patch:
@@ -24,6 +24,7 @@
 
 package tk.mybatis.mapper.common.condition;
 
+import org.apache.ibatis.annotations.Options;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.UpdateProvider;
 import tk.mybatis.mapper.provider.ConditionProvider;
@@ -44,6 +45,7 @@ public interface UpdateByConditionMapper<T> {
      * @return
      */
     @UpdateProvider(type = ConditionProvider.class, method = "dynamicSQL")
+    @Options(flushCache = true, useCache = false, useGeneratedKeys = false)
     int updateByCondition(@Param("record") T record, @Param("example") Object condition);
 
 }
\ No newline at end of file

File: src/main/java/tk/mybatis/mapper/common/condition/UpdateByConditionSelectiveMapper.java
Patch:
@@ -24,6 +24,7 @@
 
 package tk.mybatis.mapper.common.condition;
 
+import org.apache.ibatis.annotations.Options;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.UpdateProvider;
 import tk.mybatis.mapper.provider.ConditionProvider;
@@ -44,6 +45,7 @@ public interface UpdateByConditionSelectiveMapper<T> {
      * @return
      */
     @UpdateProvider(type = ConditionProvider.class, method = "dynamicSQL")
+    @Options(flushCache = true, useCache = false, useGeneratedKeys = false)
     int updateByConditionSelective(@Param("record") T record, @Param("example") Object condition);
 
 }
\ No newline at end of file

File: src/main/java/tk/mybatis/mapper/common/example/UpdateByExampleMapper.java
Patch:
@@ -24,6 +24,7 @@
 
 package tk.mybatis.mapper.common.example;
 
+import org.apache.ibatis.annotations.Options;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.UpdateProvider;
 import tk.mybatis.mapper.provider.ExampleProvider;
@@ -44,6 +45,7 @@ public interface UpdateByExampleMapper<T> {
      * @return
      */
     @UpdateProvider(type = ExampleProvider.class, method = "dynamicSQL")
+    @Options(flushCache = true, useCache = false, useGeneratedKeys = false)
     int updateByExample(@Param("record") T record, @Param("example") Object example);
 
 }
\ No newline at end of file

File: src/main/java/tk/mybatis/mapper/common/example/UpdateByExampleSelectiveMapper.java
Patch:
@@ -24,6 +24,7 @@
 
 package tk.mybatis.mapper.common.example;
 
+import org.apache.ibatis.annotations.Options;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.UpdateProvider;
 import tk.mybatis.mapper.provider.ExampleProvider;
@@ -44,6 +45,7 @@ public interface UpdateByExampleSelectiveMapper<T> {
      * @return
      */
     @UpdateProvider(type = ExampleProvider.class, method = "dynamicSQL")
+    @Options(flushCache = true, useCache = false, useGeneratedKeys = false)
     int updateByExampleSelective(@Param("record") T record, @Param("example") Object example);
 
 }
\ No newline at end of file

File: src/test/java/tk/mybatis/mapper/mapper/MybatisHelper.java
Patch:
@@ -75,6 +75,8 @@ public class MybatisHelper {
                 config.setNotEmpty(true);
                 //校验Example中的类型是否一致
                 config.setCheckExampleEntityClass(true);
+                //启用简单类型
+                config.setUseSimpleType(true);
                 // 序列的获取规则,使用{num}格式化参数，默认值为{0}.nextval，针对Oracle
                 // 可选参数一共3个，对应0,1,2,分别为SequenceName，ColumnName, PropertyName
                 //config.setSeqFormat("NEXT VALUE FOR {0}");

File: src/main/java/tk/mybatis/mapper/provider/SpecialProvider.java
Patch:
@@ -58,7 +58,7 @@ public String insertList(MappedStatement ms) {
         sql.append(SqlHelper.insertColumns(entityClass, true, false, false));
         sql.append(" VALUES ");
         sql.append("<foreach collection=\"list\" item=\"record\" separator=\",\" >");
-        sql.append("<trim prefix=\"VALUES (\" suffix=\")\" suffixOverrides=\",\">");
+        sql.append("<trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">");
         //获取全部列
         Set<EntityColumn> columnList = EntityHelper.getColumns(entityClass);
         //当某个列有主键策略时，不需要考虑他的属性是否为空，因为如果为空，一定会根据主键策略给他生成一个值

File: src/main/java/tk/mybatis/mapper/provider/SpecialProvider.java
Patch:
@@ -48,7 +48,7 @@ public SpecialProvider(Class<?> mapperClass, MapperHelper mapperHelper) {
      * @param ms
      */
     public String insertList(MappedStatement ms) {
-        final Class<?> entityClass = getSelectReturnType(ms);
+        final Class<?> entityClass = getEntityClass(ms);
         EntityTable table = EntityHelper.getEntityTable(entityClass);
         //开始拼sql
         StringBuilder sql = new StringBuilder();
@@ -91,7 +91,7 @@ public String insertList(MappedStatement ms) {
      * @param ms
      */
     public String insertUseGeneratedKeys(MappedStatement ms) {
-        final Class<?> entityClass = getSelectReturnType(ms);
+        final Class<?> entityClass = getEntityClass(ms);
         EntityTable table = EntityHelper.getEntityTable(entityClass);
         //开始拼sql
         StringBuilder sql = new StringBuilder();

File: src/main/java/tk/mybatis/mapper/provider/SqlServerProvider.java
Patch:
@@ -53,7 +53,7 @@ public SqlServerProvider(Class<?> mapperClass, MapperHelper mapperHelper) {
      * @param ms
      */
     public String insert(MappedStatement ms) {
-        final Class<?> entityClass = getSelectReturnType(ms);
+        final Class<?> entityClass = getEntityClass(ms);
         EntityTable table = EntityHelper.getEntityTable(entityClass);
         //开始拼sql
         StringBuilder sql = new StringBuilder();
@@ -94,7 +94,7 @@ public String insert(MappedStatement ms) {
      * @return
      */
     public SqlNode insertSelective(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
         //insert into table
         sqlNodes.add(new StaticTextSqlNode("INSERT INTO "));

File: src/main/java/tk/mybatis/mapper/provider/base/BaseDeleteProvider.java
Patch:
@@ -54,7 +54,7 @@ public BaseDeleteProvider(Class<?> mapperClass, MapperHelper mapperHelper) {
      * @return
      */
     public SqlNode delete(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
         //delete from table
         sqlNodes.add(new StaticTextSqlNode("DELETE FROM "));
@@ -70,7 +70,7 @@ public SqlNode delete(MappedStatement ms) {
      * @param ms
      */
     public String deleteByPrimaryKey(MappedStatement ms) {
-        final Class<?> entityClass = getSelectReturnType(ms);
+        final Class<?> entityClass = getEntityClass(ms);
         StringBuilder sql = new StringBuilder();
         sql.append("delete from ");
         sql.append(getDynamicTableName(entityClass));

File: src/main/java/tk/mybatis/mapper/provider/base/BaseInsertProvider.java
Patch:
@@ -54,7 +54,7 @@ public BaseInsertProvider(Class<?> mapperClass, MapperHelper mapperHelper) {
      * @return
      */
     public SqlNode insert(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
         //insert into table
         sqlNodes.add(new StaticTextSqlNode("INSERT INTO "));
@@ -127,7 +127,7 @@ public SqlNode insert(MappedStatement ms) {
      * @return
      */
     public SqlNode insertSelective(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
         //insert into table
         sqlNodes.add(new StaticTextSqlNode("INSERT INTO "));

File: src/main/java/tk/mybatis/mapper/provider/base/BaseUpdateProvider.java
Patch:
@@ -52,7 +52,7 @@ public BaseUpdateProvider(Class<?> mapperClass, MapperHelper mapperHelper) {
      * @param ms
      */
     public SqlNode updateByPrimaryKey(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
         //update table
         sqlNodes.add(new StaticTextSqlNode("UPDATE "));
@@ -87,7 +87,7 @@ public SqlNode updateByPrimaryKey(MappedStatement ms) {
      * @return
      */
     public SqlNode updateByPrimaryKeySelective(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         List<SqlNode> sqlNodes = new ArrayList<SqlNode>();
         //update table
         sqlNodes.add(new StaticTextSqlNode("UPDATE "));

File: src/test/java/tk/mybatis/mapper/hsqldb/HsqldbProvider.java
Patch:
@@ -1,11 +1,11 @@
 package tk.mybatis.mapper.hsqldb;
 
+import org.apache.ibatis.mapping.MappedStatement;
+import org.apache.ibatis.scripting.xmltags.*;
 import tk.mybatis.mapper.entity.EntityColumn;
 import tk.mybatis.mapper.mapperhelper.EntityHelper;
 import tk.mybatis.mapper.mapperhelper.MapperHelper;
 import tk.mybatis.mapper.mapperhelper.MapperTemplate;
-import org.apache.ibatis.mapping.MappedStatement;
-import org.apache.ibatis.scripting.xmltags.*;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -25,7 +25,7 @@ public HsqldbProvider(Class<?> mapperClass, MapperHelper mapperHelper) {
      * @return
      */
     public SqlNode selectPage(MappedStatement ms) {
-        Class<?> entityClass = getSelectReturnType(ms);
+        Class<?> entityClass = getEntityClass(ms);
         //修改返回值类型为实体类型
         setResultType(ms, entityClass);
 

File: src/main/java/tk/mybatis/mapper/mapperhelper/EntityHelper.java
Patch:
@@ -194,12 +194,12 @@ public static synchronized void initEntityNameMap(Class<?> entityClass, Config c
         if (entityClass.isAnnotationPresent(Table.class)) {
             Table table = entityClass.getAnnotation(Table.class);
             if (!table.name().equals("")) {
-                entityTable = new EntityTable();
+                entityTable = new EntityTable(entityClass);
                 entityTable.setTable(table);
             }
         }
         if (entityTable == null) {
-            entityTable = new EntityTable();
+            entityTable = new EntityTable(entityClass);
             //可以通过stye控制
             entityTable.setName(StringUtil.convertByStyle(entityClass.getSimpleName(), style));
         }

File: src/main/java/tk/mybatis/mapper/mapperhelper/MapperTemplate.java
Patch:
@@ -477,7 +477,7 @@ protected SqlNode getIfCacheIsNull(EntityColumn column, SqlNode columnNode) {
      * @return
      */
     protected SqlNode getColumnEqualsProperty(EntityColumn column, boolean first) {
-        return new StaticTextSqlNode((first ? "" : " AND ") + column.getColumn() + " = #{" + column.getProperty() + "} ");
+        return new StaticTextSqlNode((first ? "" : " AND ") + column.getColumnEqualsHolder());
     }
 
     /**

File: src/main/java/tk/mybatis/mapper/provider/SpecialProvider.java
Patch:
@@ -77,7 +77,7 @@ public String insertList(MappedStatement ms) {
             if(!first) {
                 sql.append(",");
             }
-            sql.append("#{record.").append(column.getProperty()).append("}");
+            sql.append(column.getColumnHolder("record"));
             first = false;
         }
         sql.append(")");
@@ -118,7 +118,7 @@ public String insertUseGeneratedKeys(MappedStatement ms) {
             if(!first) {
                 sql.append(",");
             }
-            sql.append("#{").append(column.getProperty()).append("}");
+            sql.append(column.getColumnHolder());
             first = false;
         }
         sql.append(")");

File: src/main/java/tk/mybatis/mapper/provider/SqlServerProvider.java
Patch:
@@ -80,7 +80,7 @@ public String insert(MappedStatement ms) {
             if(!first) {
                 sql.append(",");
             }
-            sql.append("#{").append(column.getProperty()).append("}");
+            sql.append(column.getColumnHolder());
             first = false;
         }
         sql.append(")");
@@ -120,7 +120,7 @@ public SqlNode insertSelective(MappedStatement ms) {
         for (EntityColumn column : columnList) {
             //当参数中的属性值不为空的时候,使用传入的值
             if (!column.isId()) {
-                ifNodes.add(new IfSqlNode(new StaticTextSqlNode("#{" + column.getProperty() + "},"), column.getProperty() + " != null "));
+                ifNodes.add(new IfSqlNode(new StaticTextSqlNode(column.getColumnHolder() +","), column.getProperty() + " != null "));
             }
         }
         //values(#{property},#{property}...)

File: src/main/java/tk/mybatis/mapper/common/Mapper.java
Patch:
@@ -37,6 +37,7 @@
 public interface Mapper<T> extends
         BaseMapper<T>,
         ExampleMapper<T>,
-        RowBoundsMapper<T> {
+        RowBoundsMapper<T>,
+        Marker {
 
 }
\ No newline at end of file

File: src/main/java/tk/mybatis/mapper/mapperhelper/EntityHelper.java
Patch:
@@ -128,7 +128,7 @@ public static String getSelectColumns(Class<?> entityClass) {
                 if (entityColumn.getColumn().substring(1, entityColumn.getColumn().length() - 1).equalsIgnoreCase(entityColumn.getProperty())) {
                     selectBuilder.append(",");
                 } else {
-                    selectBuilder.append(" ").append(entityColumn.getProperty()).append(",");
+                    selectBuilder.append(" AS ").append(entityColumn.getProperty()).append(",");
                 }
             } else {
                 selectBuilder.append(",");

File: src/test/java/tk/mybatis/mapper/mapper/CachedCountryMapper.java
Patch:
@@ -32,6 +32,7 @@
 /**
  * Created by liuzh on 2014/11/19.
  */
-@CacheNamespace
+//@CacheNamespace
 public interface CachedCountryMapper extends Mapper<Country>,HsqldbMapper<Country> {
+    int selectCache(int id);
 }

File: src/test/java/tk/mybatis/mapper/test/jdbc/TestJDBC.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.Assert;
 
 /**
- * sqlserver测试
+ * sqlserver测试 - 该类注释所有测试方法是因为该测试是针对sqlserver的，而项目测试用的hsqldb，所以这些测试不能运行，需要换为sqlserver才可以
  */
 public class TestJDBC {
 

File: src/main/java/com/github/abel533/sql/SqlMapper.java
Patch:
@@ -192,7 +192,7 @@ public int insert(String sql, Object value) {
      */
     public int update(String sql) {
         String msId = msUtils.update(sql);
-        return sqlSession.insert(msId);
+        return sqlSession.update(msId);
     }
 
     /**
@@ -205,7 +205,7 @@ public int update(String sql) {
     public int update(String sql, Object value) {
         Class<?> parameterType = value != null ? value.getClass() : null;
         String msId = msUtils.updateDynamic(sql, parameterType);
-        return sqlSession.insert(msId, value);
+        return sqlSession.update(msId, value);
     }
 
     /**
@@ -229,7 +229,7 @@ public int delete(String sql) {
     public int delete(String sql, Object value) {
         Class<?> parameterType = value != null ? value.getClass() : null;
         String msId = msUtils.deleteDynamic(sql, parameterType);
-        return sqlSession.insert(msId, value);
+        return sqlSession.delete(msId, value);
     }
 
     private class MSUtils {

File: src/main/java/com/github/abel533/mapperhelper/MapperTemplate.java
Patch:
@@ -107,7 +107,7 @@ public static MetaObject forObject(Object object) {
      */
     public boolean supportMethod(String msId) {
         Class<?> mapperClass = getMapperClass(msId);
-        if (this.mapperClass.isAssignableFrom(mapperClass)) {
+        if (mapperClass != null && this.mapperClass.isAssignableFrom(mapperClass)) {
             String methodName = getMethodName(msId);
             return methodMap.get(methodName) != null;
         }
@@ -212,7 +212,7 @@ public static Class<?> getMapperClass(String msId) {
         try {
             return Class.forName(mapperClassStr);
         } catch (ClassNotFoundException e) {
-            throw new RuntimeException("无法获取Mapper接口信息:" + msId);
+            return null;
         }
     }
 

File: src/test/java/com/github/abel533/model/Country.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.abel533.model;
 
+import javax.persistence.Column;
 import javax.persistence.Id;
 
 /**
@@ -10,6 +11,7 @@
 public class Country {
     @Id
     private Integer id;
+    @Column
     private String countryname;
     private String countrycode;
 

File: src/test/java/test/mapper/CountryMapper.java
Patch:
@@ -1,7 +1,8 @@
 package test.mapper;
 
+import com.github.abel533.hsqldb.HsqldbMapper;
 import com.github.abel533.mapper.Mapper;
 import test.model.Country;
 
-public interface CountryMapper extends Mapper<Country> {
+public interface CountryMapper extends HsqldbMapper<Country>, Mapper<Country> {
 }
\ No newline at end of file

File: src/test/java/test/mapper/UserInfoMapper.java
Patch:
@@ -1,7 +1,8 @@
 package test.mapper;
 
+import com.github.abel533.hsqldb.HsqldbMapper;
 import com.github.abel533.mapper.Mapper;
 import test.model.UserInfo;
 
-public interface UserInfoMapper extends Mapper<UserInfo> {
+public interface UserInfoMapper extends HsqldbMapper<UserInfo>, Mapper<UserInfo> {
 }
\ No newline at end of file

File: src/test/java/test/mapper/UserLoginInfoMapper.java
Patch:
@@ -1,7 +1,8 @@
 package test.mapper;
 
+import com.github.abel533.hsqldb.HsqldbMapper;
 import com.github.abel533.mapper.Mapper;
 import test.model.UserLoginInfo;
 
-public interface UserLoginInfoMapper extends Mapper<UserLoginInfo> {
+public interface UserLoginInfoMapper extends HsqldbMapper<UserLoginInfo>, Mapper<UserLoginInfo> {
 }
\ No newline at end of file

File: src/main/java/com/github/abel533/mapperhelper/MapperTemplate.java
Patch:
@@ -409,7 +409,7 @@ protected void newSelectKeyMappedStatement(MappedStatement ms, EntityHelper.Enti
         ResultMap.Builder inlineResultMapBuilder = new ResultMap.Builder(
                 configuration,
                 statementBuilder.id() + "-Inline",
-                int.class,
+                column.getJavaType(),
                 new ArrayList<ResultMapping>(),
                 null);
         resultMaps.add(inlineResultMapBuilder.build());

File: src/main/java/com/github/abel533/mapper/MapperProvider.java
Patch:
@@ -176,7 +176,8 @@ public SqlNode insert(MappedStatement ms) {
             } else if (column.isUuid()) {
                 ifNodes.add(getIfIsNull(column, new StaticTextSqlNode("#{" + column.getProperty() + "_bind },")));
             } else {
-                ifNodes.add(getIfIsNull(column, new StaticTextSqlNode("#{" + column.getProperty() + "},")));
+                //当null的时候，如果不指定jdbcType，oracle可能会报异常，指定VARCHAR不影响其他
+                ifNodes.add(getIfIsNull(column, new StaticTextSqlNode("#{" + column.getProperty() + ",jdbcType=VARCHAR},")));
             }
         }
         //values(#{property},#{property}...)

