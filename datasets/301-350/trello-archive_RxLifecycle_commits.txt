File: rxlifecycle/src/main/java/com/trello/rxlifecycle/LifecycleTransformer.java
Patch:
@@ -21,7 +21,9 @@ public interface LifecycleTransformer<T> extends Observable.Transformer<T, T> {
      */
     @CheckResult
     @NonNull
-    Single.Transformer<T, T> forSingle();
+    // Implementation note: We use a different generic to cover some insane case in Java 8 inference.
+    // See more here: https://github.com/trello/RxLifecycle/issues/126
+    <U> Single.Transformer<U, U> forSingle();
 
     /**
      * @return a version of this Transformer for {@link Completable} streams.

File: rxlifecycle-navi/src/test/java/com/trello/rxlifecycle/components/NaviActivityLifecycleTest.java
Patch:
@@ -131,6 +131,7 @@ public void testBadHandler() {
         HashSet<Event<?>> notEnoughEvents = new HashSet<>();
         notEnoughEvents.add(Event.CREATE);
         NaviComponent badHandler = new NaviEmitter(notEnoughEvents);
+        //noinspection CheckResult
         NaviLifecycle.createActivityLifecycleProvider(badHandler);
     }
 

File: rxlifecycle-navi/src/test/java/com/trello/rxlifecycle/components/NaviFragmentLifecycleTest.java
Patch:
@@ -181,6 +181,7 @@ public void testBadHandler() {
         HashSet<Event<?>> notEnoughEvents = new HashSet<>();
         notEnoughEvents.add(Event.ATTACH);
         NaviComponent badHandler = new NaviEmitter(notEnoughEvents);
+        //noinspection CheckResult
         NaviLifecycle.createFragmentLifecycleProvider(badHandler);
     }
 

File: rxlifecycle-navi/src/test/java/com/trello/rxlifecycle/components/TestUtil.java
Patch:
@@ -5,7 +5,7 @@ final class TestUtil {
     /**
      * Used for testing whether references are cleared.
      */
-    static final void cleanGarbage() {
+    static void cleanGarbage() {
         System.gc();
         try {
             Thread.sleep(100);

File: rxlifecycle/src/main/java/com/trello/rxlifecycle/Functions.java
Patch:
@@ -15,6 +15,7 @@ public Boolean call(Throwable throwable) {
                 return true;
             }
 
+            //noinspection ThrowableResultOfMethodCallIgnored
             Exceptions.propagate(throwable);
             return false;
         }

File: rxlifecycle-navi/src/test/java/com/trello/rxlifecycle/components/NaviActivityLifecycleTest.java
Patch:
@@ -131,6 +131,7 @@ public void testBadHandler() {
         HashSet<Event<?>> notEnoughEvents = new HashSet<>();
         notEnoughEvents.add(Event.CREATE);
         NaviComponent badHandler = new NaviEmitter(notEnoughEvents);
+        //noinspection CheckResult
         NaviLifecycle.createActivityLifecycleProvider(badHandler);
     }
 

File: rxlifecycle-navi/src/test/java/com/trello/rxlifecycle/components/NaviFragmentLifecycleTest.java
Patch:
@@ -181,6 +181,7 @@ public void testBadHandler() {
         HashSet<Event<?>> notEnoughEvents = new HashSet<>();
         notEnoughEvents.add(Event.ATTACH);
         NaviComponent badHandler = new NaviEmitter(notEnoughEvents);
+        //noinspection CheckResult
         NaviLifecycle.createFragmentLifecycleProvider(badHandler);
     }
 

File: rxlifecycle-navi/src/test/java/com/trello/rxlifecycle/components/TestUtil.java
Patch:
@@ -5,7 +5,7 @@ final class TestUtil {
     /**
      * Used for testing whether references are cleared.
      */
-    static final void cleanGarbage() {
+    static void cleanGarbage() {
         System.gc();
         try {
             Thread.sleep(100);

File: rxlifecycle/src/main/java/com/trello/rxlifecycle/Functions.java
Patch:
@@ -15,6 +15,7 @@ public Boolean call(Throwable throwable) {
                 return true;
             }
 
+            //noinspection ThrowableResultOfMethodCallIgnored
             Exceptions.propagate(throwable);
             return false;
         }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxActivity.java
Patch:
@@ -22,7 +22,7 @@ public final Observable<ActivityEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
-        return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxDialogFragment.java
Patch:
@@ -23,7 +23,7 @@ public final Observable<FragmentEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
-        return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxFragment.java
Patch:
@@ -23,7 +23,7 @@ public final Observable<FragmentEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
-        return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxAppCompatActivity.java
Patch:
@@ -22,7 +22,7 @@ public final Observable<ActivityEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
-        return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxDialogFragment.java
Patch:
@@ -23,7 +23,7 @@ public final Observable<FragmentEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
-        return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragment.java
Patch:
@@ -20,7 +20,7 @@ public final Observable<FragmentEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
-        return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragmentActivity.java
Patch:
@@ -22,7 +22,7 @@ public final Observable<ActivityEvent> lifecycle() {
 
     @Override
     public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
-        return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-navi/src/main/java/com/trello/rxlifecycle/navi/ActivityLifecycleProviderImpl.java
Patch:
@@ -30,7 +30,7 @@ public Observable<ActivityEvent> lifecycle() {
 
     @Override
     public <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
-        return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-navi/src/main/java/com/trello/rxlifecycle/navi/FragmentLifecycleProviderImpl.java
Patch:
@@ -31,7 +31,7 @@ public Observable<FragmentEvent> lifecycle() {
 
     @Override
     public <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
-        return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
+        return RxLifecycle.bindUntilEvent(lifecycleSubject, event);
     }
 
     @Override

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/ActivityLifecycleProvider.java
Patch:
@@ -24,7 +24,7 @@ public interface ActivityLifecycleProvider {
      * @param event the {@link ActivityEvent} that triggers unsubscription
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes when the event triggers.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event);
+    <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event);
 
     /**
      * Binds a source until the next reasonable {@link ActivityEvent} occurs.
@@ -33,6 +33,6 @@ public interface ActivityLifecycleProvider {
      *
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes at the correct time.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle();
+    <T> Observable.Transformer<T, T> bindToLifecycle();
 
 }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/FragmentLifecycleProvider.java
Patch:
@@ -24,7 +24,7 @@ public interface FragmentLifecycleProvider {
      * @param event the {@link FragmentEvent} that triggers unsubscription
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes when the event triggers.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event);
+    <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event);
 
     /**
      * Binds a source until the next reasonable {@link FragmentEvent} occurs.
@@ -33,6 +33,6 @@ public interface FragmentLifecycleProvider {
      *
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes at the correct time.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle();
+    <T> Observable.Transformer<T, T> bindToLifecycle();
 
 }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxActivity.java
Patch:
@@ -20,12 +20,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxDialogFragment.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxFragment.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxAppCompatActivity.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxDialogFragment.java
Patch:
@@ -22,12 +22,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragment.java
Patch:
@@ -19,12 +19,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragmentActivity.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/ActivityLifecycleProvider.java
Patch:
@@ -24,7 +24,7 @@ public interface ActivityLifecycleProvider {
      * @param event the {@link ActivityEvent} that triggers unsubscription
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes when the event triggers.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event);
+    <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event);
 
     /**
      * Binds a source until the next reasonable {@link ActivityEvent} occurs.
@@ -33,6 +33,6 @@ public interface ActivityLifecycleProvider {
      *
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes at the correct time.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle();
+    <T> Observable.Transformer<T, T> bindToLifecycle();
 
 }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/FragmentLifecycleProvider.java
Patch:
@@ -24,7 +24,7 @@ public interface FragmentLifecycleProvider {
      * @param event the {@link FragmentEvent} that triggers unsubscription
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes when the event triggers.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event);
+    <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event);
 
     /**
      * Binds a source until the next reasonable {@link FragmentEvent} occurs.
@@ -33,6 +33,6 @@ public interface FragmentLifecycleProvider {
      *
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes at the correct time.
      */
-    <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle();
+    <T> Observable.Transformer<T, T> bindToLifecycle();
 
 }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxActivity.java
Patch:
@@ -20,12 +20,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxDialogFragment.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxFragment.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxAppCompatActivity.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxDialogFragment.java
Patch:
@@ -22,12 +22,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragment.java
Patch:
@@ -19,12 +19,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragmentActivity.java
Patch:
@@ -21,12 +21,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
+    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/ActivityLifecycleProvider.java
Patch:
@@ -24,7 +24,7 @@ public interface ActivityLifecycleProvider {
      * @param event the {@link ActivityEvent} that triggers unsubscription
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes when the event triggers.
      */
-    <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event);
+    <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event);
 
     /**
      * Binds a source until the next reasonable {@link ActivityEvent} occurs.
@@ -33,6 +33,6 @@ public interface ActivityLifecycleProvider {
      *
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes at the correct time.
      */
-    <T> Observable.Transformer<T, T> bindToLifecycle();
+    <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle();
 
 }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/FragmentLifecycleProvider.java
Patch:
@@ -24,7 +24,7 @@ public interface FragmentLifecycleProvider {
      * @param event the {@link FragmentEvent} that triggers unsubscription
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes when the event triggers.
      */
-    <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event);
+    <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event);
 
     /**
      * Binds a source until the next reasonable {@link FragmentEvent} occurs.
@@ -33,6 +33,6 @@ public interface FragmentLifecycleProvider {
      *
      * @return a reusable {@link rx.Observable.Transformer} which unsubscribes at the correct time.
      */
-    <T> Observable.Transformer<T, T> bindToLifecycle();
+    <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle();
 
 }

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxActivity.java
Patch:
@@ -17,12 +17,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxDialogFragment.java
Patch:
@@ -18,12 +18,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/RxFragment.java
Patch:
@@ -18,12 +18,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxAppCompatActivity.java
Patch:
@@ -18,12 +18,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxDialogFragment.java
Patch:
@@ -19,12 +19,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragment.java
Patch:
@@ -19,12 +19,12 @@ public final Observable<FragmentEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(FragmentEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(FragmentEvent event) {
         return RxLifecycle.bindUntilFragmentEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindFragment(lifecycleSubject);
     }
 

File: rxlifecycle-components/src/main/java/com/trello/rxlifecycle/components/support/RxFragmentActivity.java
Patch:
@@ -18,12 +18,12 @@ public final Observable<ActivityEvent> lifecycle() {
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindUntilEvent(ActivityEvent event) {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindUntilEvent(ActivityEvent event) {
         return RxLifecycle.bindUntilActivityEvent(lifecycleSubject, event);
     }
 
     @Override
-    public final <T> Observable.Transformer<T, T> bindToLifecycle() {
+    public final <T> Observable.Transformer<? super T, ? extends T> bindToLifecycle() {
         return RxLifecycle.bindActivity(lifecycleSubject);
     }
 

File: rxlifecycle/src/main/java/com/trello/rxlifecycle/RxLifecycle.java
Patch:
@@ -178,7 +178,7 @@ public static <T> Observable.Transformer<T, T> bindView(final View view) {
      * @param lifecycle the lifecycle sequence of a View
      * @return a reusable {@link Observable.Transformer} that unsubscribes the source during the View lifecycle
      */
-    public static <T> Observable.Transformer<T, T> bindView(final Observable<Object> lifecycle) {
+    public static <T, E> Observable.Transformer<T, T> bindView(final Observable<E> lifecycle) {
         if (lifecycle == null) {
             throw new IllegalArgumentException("Lifecycle must be given");
         }

File: rxlifecycle/src/main/java/com/trello/rxlifecycle/FragmentEvent.java
Patch:
@@ -15,9 +15,9 @@
 package com.trello.rxlifecycle;
 
 /**
- * Lifecycle events that can be emitted by Activities or Fragments.
+ * Lifecycle events that can be emitted by Fragments.
  */
-public enum LifecycleEvent {
+public enum FragmentEvent {
 
     ATTACH,
     CREATE,

