File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardFinishPanel.java
Patch:
@@ -84,7 +84,7 @@ public String getHTMLFooter() {
   private void initComponents() {
     // JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents
     // Generated using JFormDesigner non-commercial license
-    ResourceBundle bundle = ResourceBundle.getBundle("messages.MTWizardBundle");
+    final ResourceBundle bundle = ResourceBundle.getBundle("messages.MTWizardBundle");
     scrollPane = new JBScrollPane();
     content = new JPanel();
     summary = new JTextPane();
@@ -198,7 +198,7 @@ private void initComponents() {
     openCollLink.setListener((aSource, aLinkData) -> {
       if (Desktop.isDesktopSupported()) {
         try {
-          Desktop.getDesktop().browse(new URI("https://opencollective.com/material-theme-jetbrains"));
+          Desktop.getDesktop().browse(new URI("https://opencollective.com/atom-material-themes-and-plugins"));
         } catch (final IOException | URISyntaxException e) {
           e.printStackTrace();
         }

File: src/main/java/com/mallowigi/idea/MTThemeManager.java
Patch:
@@ -57,6 +57,7 @@
 import com.mallowigi.idea.themes.lists.AccentResources;
 import com.mallowigi.idea.themes.lists.FontResources;
 import com.mallowigi.idea.themes.models.MTThemeable;
+import com.mallowigi.idea.utils.MTChangeLAFAnimator;
 import com.mallowigi.idea.utils.MTUI;
 import com.mallowigi.idea.utils.MTUiUtils;
 import org.jetbrains.annotations.NonNls;

File: src/main/java/com/mallowigi/idea/actions/MTAccentModeAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTBiggerTabsAction.java
Patch:
@@ -28,6 +28,7 @@
 
 import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;
 

File: src/main/java/com/mallowigi/idea/actions/MTChangeWallpaperAction.java
Patch:
@@ -32,6 +32,7 @@
 import com.intellij.openapi.actionSystem.AnActionEvent;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.wm.impl.IdeBackgroundUtil;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.messages.MaterialThemeBundle;
 import com.mallowigi.idea.notifications.Notify;

File: src/main/java/com/mallowigi/idea/actions/MTCompactDropdownsAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTCompactMenusAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTCompactSidebarAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTCompactStatusBarAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTCompactTablesAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTConfigWizardAction.java
Patch:
@@ -30,6 +30,7 @@
 import com.intellij.openapi.actionSystem.AnActionEvent;
 import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.project.DumbAware;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.wizard.MTWizardDialog;
 import com.mallowigi.idea.wizard.MTWizardStepsProvider;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTContrastAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTHighContrastAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTMaterialFontsAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import com.mallowigi.idea.config.ui.MTForm;

File: src/main/java/com/mallowigi/idea/actions/MTOverrideAccentColorAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTProjectFrameAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTRemoveWallpaperAction.java
Patch:
@@ -32,6 +32,7 @@
 import com.intellij.openapi.actionSystem.AnActionEvent;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.wm.impl.IdeBackgroundUtil;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.messages.MaterialThemeBundle;
 import com.mallowigi.idea.notifications.Notify;
 import com.mallowigi.idea.utils.MTUiUtils;

File: src/main/java/com/mallowigi/idea/actions/MTToggleColoredDirsAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTToggleStatusbarIndicatorAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTToggleWallpaperAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/MTUpperCaseTabsAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import org.jetbrains.annotations.NotNull;

File: src/main/java/com/mallowigi/idea/actions/accents/MTAbstractAccentAction.java
Patch:
@@ -30,6 +30,7 @@
 import com.intellij.openapi.actionSystem.impl.ActionToolbarImpl;
 import com.intellij.openapi.project.DumbAware;
 import com.intellij.openapi.util.IconLoader;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import com.mallowigi.idea.UIReplacer;

File: src/main/java/com/mallowigi/idea/actions/indicators/MTAbstractIndicatorsAction.java
Patch:
@@ -28,6 +28,7 @@
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
 import com.intellij.openapi.actionSystem.impl.ActionToolbarImpl;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.actions.MTToggleAction;
 import com.mallowigi.idea.config.enums.IndicatorStyles;

File: src/main/java/com/mallowigi/idea/actions/positions/MTAbstractPositionsAction.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.actions.positions;
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.actions.MTToggleAction;
 import com.mallowigi.idea.config.enums.TabHighlightPositions;

File: src/main/java/com/mallowigi/idea/actions/themes/MTAbstractThemeAction.java
Patch:
@@ -28,6 +28,7 @@
 
 import com.intellij.openapi.actionSystem.AnActionEvent;
 import com.intellij.openapi.project.DumbAware;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.MTConfig;
 import com.mallowigi.idea.MTThemeManager;
 import com.mallowigi.idea.actions.MTToggleAction;

File: src/main/java/com/mallowigi/idea/actions/themes/MTQuickChangeThemeAction.java
Patch:
@@ -30,6 +30,7 @@
 import com.intellij.openapi.actionSystem.DataContext;
 import com.intellij.openapi.actionSystem.DefaultActionGroup;
 import com.intellij.openapi.project.Project;
+import com.mallowigi.idea.MTBundledThemesManager;
 import org.jetbrains.annotations.NotNull;
 
 /**

File: src/main/java/com/mallowigi/idea/help/MTHelpProvider.java
Patch:
@@ -27,6 +27,7 @@
 package com.mallowigi.idea.help;
 
 import com.intellij.openapi.help.WebHelpProvider;
+import com.mallowigi.idea.MTAnalytics;
 import com.mallowigi.idea.config.MTConfigurable;
 import com.mallowigi.idea.config.MTCustomThemeConfigurable;
 import com.mallowigi.idea.utils.MTUiUtils;

File: src/main/java/com/mallowigi/idea/themes/themes/ArcDarkTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2015 - 2020 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -125,7 +125,7 @@ public ColorUIResource getExcludedColorResource() {
   @NonNls
   @Override
   protected String getBackgroundImage() {
-    return "/walls/arcdark.svg";
+    return "walls/arcdark.svg";
 
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/DraculaTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/dracula.svg";
+    return "walls/dracula.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/GithubDarkTheme.java
Patch:
@@ -116,7 +116,7 @@ public ColorUIResource getExcludedColorResource() {
   @NonNls
   @Override
   protected String getBackgroundImage() {
-    return "/walls/github_dark.svg";
+    return "walls/github_dark.svg";
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/themes/themes/GithubTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -116,7 +116,7 @@ public ColorUIResource getExcludedColorResource() {
   @NonNls
   @Override
   protected String getBackgroundImage() {
-    return "/walls/github.svg";
+    return "walls/github.svg";
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/themes/themes/LightOwlTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -124,6 +124,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/lightowl.svg";
+    return "walls/lightowl.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MTDarkerTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/darker.svg";
+    return "walls/darker.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MTDeepOceanTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/deepocean.svg";
+    return "walls/deepocean.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MTLighterTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/lighter.svg";
+    return "walls/lighter.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MTOceanicTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/oceanic.svg";
+    return "walls/oceanic.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MTPalenightTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -118,6 +118,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/palenight.svg";
+    return "walls/palenight.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MonokaiTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -120,6 +120,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/monokai.svg";
+    return "walls/monokai.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/MoonlightTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/moonlight.svg";
+    return "walls/moonlight.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/NightOwlTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -124,6 +124,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/nightowl.svg";
+    return "walls/nightowl.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/OneDarkTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -118,6 +118,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/onedark.svg";
+    return "walls/onedark.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/OneLightTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -118,7 +118,7 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/onelight.svg";
+    return "walls/onelight.svg";
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/themes/themes/SolarizedDarkTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -121,6 +121,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/solardark.svg";
+    return "walls/solardark.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/themes/themes/SolarizedLightTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -118,6 +118,6 @@ public ColorUIResource getExcludedColorResource() {
 
   @Override
   protected String getBackgroundImage() {
-    return "/walls/solarlight.svg";
+    return "walls/solarlight.svg";
   }
 }

File: src/main/java/com/mallowigi/idea/ui/MTButtonUI.java
Patch:
@@ -231,7 +231,7 @@ protected boolean paintDecorations(final Graphics2D g, final JComponent c) {
     }
 
     Rectangle r = new Rectangle(c.getSize());
-    JBInsets.removeFrom(r, isSmallVariant(c) || isBorderless(c) ? c.getInsets() : JBUI.insets(1));
+    JBInsets.removeFrom(r, isSmallVariant(c) ? c.getInsets() : JBUI.insets(1));
 
     final Color backgroundColor = buttonBg();
     final Color focusedColor = primaryButtonHoverColor();

File: src/main/java/com/mallowigi/idea/themes/themes/GithubDarkTheme.java
Patch:
@@ -60,7 +60,7 @@ public ColorUIResource getSelectionForegroundColorResource() {
 
   @Override
   public ColorUIResource getButtonColorResource() {
-    return new ColorUIResource(0x2f363d);
+    return new ColorUIResource(0x39414a);
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/MTUpdatesComponent.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2015 - 2020 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2020 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2015 - 2020 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2020 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: src/main/java/com/mallowigi/idea/themes/themes/GithubDarkTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015-2020 Elior "Mallowigi" Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal

File: src/main/java/com/mallowigi/idea/themes/themes/MoonlightTheme.java
Patch:
@@ -101,7 +101,7 @@ public ColorUIResource getHighlightColorResource() {
 
   @Override
   public ColorUIResource getTreeSelectionColorResource() {
-    return new ColorUIResource(new Color(0x444a7370, true));
+    return new ColorUIResource(new Color(0x70444a73, true));
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/UIReplacer.java
Patch:
@@ -226,7 +226,7 @@ private static void patchKotlin() throws NoSuchFieldException, IllegalAccessExce
    * Very clever way to theme excluded files color
    */
   private static void patchScopes() throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
-    final Color disabledColor = MTConfig.getInstance().getSelectedTheme().getTheme().getExcludedColor();
+    final Color excludedColor = MTConfig.getInstance().getSelectedTheme().getTheme().getExcludedColor();
 
     // Do not replace file colors on native themes
     if (MTConfig.getInstance().getSelectedTheme().isNative()) {
@@ -246,7 +246,7 @@ private static void patchScopes() throws NoSuchFieldException, IllegalAccessExce
       .put("Crimson", UIManager.getColor("FileColor.Rose"))//NON-NLS
       .put("DeepPurple", UIManager.getColor("FileColor.Violet"))//NON-NLS
       .put("Amber", UIManager.getColor("FileColor.Yellow"))//NON-NLS
-      .put("Theme", disabledColor)//NON-NLS
+      .put("Theme Excluded Color", excludedColor)//NON-NLS
       .build();
 
     final Field[] fields = FileColorManagerImpl.class.getDeclaredFields();

File: src/main/java/com/mallowigi/idea/themes/MTAccentMode.java
Patch:
@@ -62,6 +62,7 @@ public enum MTAccentMode {
   );
   public static final Set<String> SELECTION_RESOURCES = Collections.unmodifiableSet(
     Sets.newHashSet(
+      "DefaultTabs.underlinedTabForeground",
       "EditorTabs.active.foreground", // deprecated
       "EditorTabs.selectedForeground",
       "EditorTabs.underlinedTabForeground",
@@ -88,6 +89,7 @@ public enum MTAccentMode {
       "EditorTabs.underlinedTabBackground",
       "Github.List.tallRow.selectionBackground",
       "Outline.focusedColor", // deprecated
+      "Plugins.Button.installFillBackground",
       "Table.focusCellBackground",
       "Table.highlightOuter",
       "Table.lightSelectionBackground", // deprecated

File: src/main/java/com/mallowigi/idea/themes/lists/AccentResources.java
Patch:
@@ -67,6 +67,7 @@ public enum AccentResources {
       "Checkbox.Focus.Thin.Selected.Dark",
       "Checkbox.Focus.Wide.Selected",
       "Checkbox.Focus.Wide.Selected.Dark",
+      "CodeWithMe.AccessEnabled.accessDot",
       "ComboBox.darcula.hoveredArrowButtonForeground", // deprecated
       "CheckBox.inactiveFillColor.selected",
       "ComboBox.modifiedItemForeground",
@@ -79,14 +80,15 @@ public enum AccentResources {
       "Debugger.Variables.modifyingValueForeground",
       "Debugger.Variables.changedValueForeground",
       "Debugger.Variables.valueForeground",
-      "DefaultTabs.inactiveUnderlineColor", // deprecated
+      "DefaultTabs.inactiveUnderlineColor",
       "DefaultTabs.underlineColor",
       "dropArea.base",
       "EditorPane.caretForeground",
       "EditorGroupsTabs.underlineColor",
       "EditorGroupsTabs.inactiveUnderlineColor",
       "EditorTabs.active.underlineColor", // deprecated
       "EditorTabs.inactiveUnderlineColor",
+      "EditorTabs.underlineColor",
       "Focus.defaultButtonBorderColor", // deprecated
       "FormattedTextField.caretForeground",
       "Git.Log.Ref.LocalBranch", // deprecated

File: src/main/java/com/mallowigi/idea/themes/lists/AccentResources.java
Patch:
@@ -67,6 +67,7 @@ public enum AccentResources {
       "Checkbox.Focus.Thin.Selected.Dark",
       "Checkbox.Focus.Wide.Selected",
       "Checkbox.Focus.Wide.Selected.Dark",
+      "ComboBox.darcula.hoveredArrowButtonForeground", // deprecated
       "CheckBox.inactiveFillColor.selected",
       "ComboBox.modifiedItemForeground",
       "CompletionPopup.matchForeground",
@@ -112,6 +113,7 @@ public enum AccentResources {
       "ParameterInfo.highlightedColor", //deprecated
       "ParameterInfo.currentParameterForeground",
       "PasswordField.caretForeground",
+      "Plugins.Button.updateBackground",
       "Plugins.tagForeground",
       "Popup.Advertiser.foreground",
       "ProgressBar.foreground",
@@ -137,7 +139,6 @@ public enum AccentResources {
       "Slider.thumb",
       "Slider.buttonBorderColor",
       "Slider.buttonColor",
-      "ComboBox.darcula.hoveredArrowButtonForeground", // deprecated
       "TabbedPane.selectedColor", // deprecated
       "TabbedPane.underlineColor",
       "TextArea.caretForeground",

File: src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java
Patch:
@@ -188,6 +188,7 @@ public static Set<String> getBackgroundResources() {
         "WelcomeScreen.borderColor",
         "WelcomeScreen.headerBackground",
         "WelcomeScreen.AssociatedComponent.background",
+        "WelcomeScreen.Details.background",
         "window"
       ));
   }
@@ -492,7 +493,6 @@ public static Set<String> getButtonColorResources() {
         "Plugins.Button.installBackground",
         "Plugins.Button.installBorderColor",
         "Plugins.Button.installFillBackground",
-        "Plugins.Button.updateBackground",
         "Plugins.Button.updateBorderColor",
         "ToggleButton.borderColor",
         "ToggleButton.buttonColor",
@@ -538,6 +538,7 @@ public static Set<String> getSecondaryBackgroundResources() {
         "UIDesigner.motion.ourAvg.background",
         "UIDesigner.motion.ConstraintSet.background",
         "UIDesigner.motion.ourCS.background",
+        "WelcomeScreen.SidePanel.background",
         "WelcomeScreen.Projects.background",
         "WelcomeScreen.Projects.selectionInactiveBackground"
       ));
@@ -676,6 +677,7 @@ public static Set<String> getTableSelectedResources() {
         "SearchOption.selectedBackground",
         "Slider.track", // deprecated
         "Slider.trackColor",
+        "StatusBar.LightEditBackground",
         "TabbedPane.focusColor",
         "Table.highlightOuter",
         "Table.focusCellBackground",

File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardAccentPanel.java
Patch:
@@ -66,12 +66,12 @@ public MTWizardAccentPanel() {
   }
 
   @Override
-  protected String getTitle() {
+  public String getTitle() {
     return MTWizardBundle.message("accent.panel.title");
   }
 
   @Override
-  protected String getHTMLHeader() {
+  public String getHTMLHeader() {
     return MTWizardBundle.message("accent.panel.body");
   }
 

File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardContrastPanel.java
Patch:
@@ -58,12 +58,12 @@ public MTWizardContrastPanel() {
   }
 
   @Override
-  protected String getTitle() {
+  public String getTitle() {
     return MTWizardBundle.message("contrast.panel.title");
   }
 
   @Override
-  protected String getHTMLHeader() {
+  public String getHTMLHeader() {
     return MTWizardBundle.message("contrast.panel.body");
   }
 

File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardFinishPanel.java
Patch:
@@ -58,18 +58,18 @@ public MTWizardFinishPanel() {
   }
 
   @Override
-  protected String getTitle() {
+  public String getTitle() {
     return MTWizardBundle.message("finish.panel.title");
   }
 
   @Override
-  protected String getHTMLHeader() {
+  public String getHTMLHeader() {
     return null;
   }
 
   @NotNull
   @Override
-  protected String getHTMLFooter() {
+  public String getHTMLFooter() {
     return MTWizardBundle.message("finish.panel.footer");
   }
 

File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardOtherOptionsPanel.java
Patch:
@@ -110,18 +110,18 @@ private void init() {
   }
 
   @Override
-  protected String getTitle() {
+  public String getTitle() {
     return MTWizardBundle.message("other.options.panel.title");
   }
 
   @Override
-  protected String getHTMLHeader() {
+  public String getHTMLHeader() {
     return MTWizardBundle.message("other.options.panel.body");
   }
 
   @NotNull
   @Override
-  protected String getHTMLFooter() {
+  public String getHTMLFooter() {
     return MTWizardBundle.message("other.options.panel.footer");
   }
 

File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardThemesPanel.java
Patch:
@@ -50,18 +50,18 @@ public MTWizardThemesPanel() {
   }
 
   @Override
-  protected String getTitle() {
+  public String getTitle() {
     return MTWizardBundle.message("themes.panel.title");
   }
 
   @Override
-  protected String getHTMLHeader() {
+  public String getHTMLHeader() {
     return MTWizardBundle.message("themes.panel.body");
   }
 
   @NotNull
   @Override
-  protected String getHTMLFooter() {
+  public String getHTMLFooter() {
     return MTWizardBundle.message("themes.panel.footer");
   }
 

File: src/main/java/com/mallowigi/idea/wizard/steps/MTWizardWelcomePanel.java
Patch:
@@ -48,12 +48,12 @@ public MTWizardWelcomePanel() {
   }
 
   @Override
-  protected String getTitle() {
+  public String getTitle() {
     return MTWizardBundle.message("welcome.panel.title");
   }
 
   @Override
-  protected String getHTMLHeader() {
+  public String getHTMLHeader() {
     return MTWizardBundle.message("welcome.panel.body");
   }
 

File: src/main/java/com/mallowigi/idea/UIReplacer.java
Patch:
@@ -219,7 +219,7 @@ private static void patchKotlin() throws NoSuchFieldException, IllegalAccessExce
       //      StaticPatcher.setFinalStatic(kotlinParamInfo, "GREEN_BACKGROUND", color);
     }
     catch (final ClassNotFoundException e) {
-      e.printStackTrace();
+      //      e.printStackTrace();
     }
   }
 

File: src/main/java/com/mallowigi/idea/UIReplacer.java
Patch:
@@ -117,7 +117,7 @@ private static void patchColors() throws NoSuchFieldException, IllegalAccessExce
     StaticPatcher.setFinalStatic(JBColor.class, "BLACK", MTUI.Panel.getForeground());
     StaticPatcher.setFinalStatic(JBColor.class, "gray", MTUI.Panel.getPrimaryForeground());
     StaticPatcher.setFinalStatic(JBColor.class, "GRAY", MTUI.Panel.getPrimaryForeground());
-    StaticPatcher.setFinalStatic(JBColor.class, "lightGray", MTUiUtils.brighter(MTUI.Panel.getPrimaryForeground(), 4));
+    StaticPatcher.setFinalStatic(JBColor.class, "lightGray", MTUiUtils.toJBColor(MTUiUtils.brighter(MTUI.Panel.getPrimaryForeground(), 4)));
     StaticPatcher.setFinalStatic(JBColor.class,
                                  "LIGHT_GRAY",
                                  MTUiUtils.toJBColor(MTUiUtils.brighter(MTUI.Panel.getPrimaryForeground(), 4)));

File: src/main/java/com/mallowigi/idea/UIReplacer.java
Patch:
@@ -141,7 +141,8 @@ private static void patchAndroid() throws NoSuchFieldException, IllegalAccessExc
   }
 
   private static void patchKotlin() throws NoSuchFieldException, IllegalAccessException {
-    final Color highlightBackground = UIManager.getColor("ParameterInfo.currentOverloadBackground");
+    final Color highlightBackground = JBColor.namedColor("ParameterInfo.currentOverloadBackground",
+      UIUtil.getListSelectionBackground(false));
 
     try {
       final Class<?> kotlinParamInfo = Class.forName("org.jetbrains.kotlin.idea.parameterInfo.KotlinParameterInfoWithCallHandlerBase");

File: src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java
Patch:
@@ -639,7 +639,6 @@ public static Set<String> getTableSelectedResources() {
         "FormattedTextField.selectionBackground",
         "ParameterInfo.borderColor",
         "ParameterInfo.lineSeparatorColor",
-        "ParameterInfo.currentOverloadBackground",
         "PasswordField.selectionBackground",
         "Plugins.Tab.active.background", // deprecated
         "Plugins.Tab.selectedBackground",
@@ -728,6 +727,7 @@ public static Set<String> getHighlightResources() {
         "MemoryIndicator.usedColor", // deprecated
         "MemoryIndicator.usedBackground",
         "Outline.focusedColor", // deprecated
+        "ParameterInfo.currentOverloadBackground",
         "Plugins.Button.installFocusedBackground",
         "Plugins.eapTagBackground",
         "Plugins.paidTagBackground",

File: src/main/java/com/mallowigi/idea/annotators/JavaAnnotator.java
Patch:
@@ -48,6 +48,7 @@ public final class JavaAnnotator extends BaseAnnotator {
   public static final TextAttributesKey IMPORT_PACKAGE = TextAttributesKey.createTextAttributesKey("JAVA.IMPORT_PACKAGE", JAVA_KEYWORD);
   public static final TextAttributesKey PRIMITIVE = TextAttributesKey.createTextAttributesKey("JAVA.PRIMITIVE", JAVA_NUMBER);
 
+  @SuppressWarnings("SwitchStatementWithTooManyBranches")
   @Nullable
   @Override
   protected TextAttributesKey getKeywordKind(@NotNull final PsiElement element) {

File: src/main/java/com/mallowigi/idea/annotators/settings/PHPColorSettings.java
Patch:
@@ -41,7 +41,6 @@
 import gnu.trove.THashMap;
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import javax.swing.*;
 import java.util.Collections;
@@ -100,6 +99,7 @@ public final class PHPColorSettings extends BaseColorSettings {
     "DuplicateStringLiteralInspection"})
   private static Map<String, TextAttributesKey> createAdditionalHlAttrs() {
     final Map<String, TextAttributesKey> descriptors = new THashMap<>();
+    descriptors.put("string", DefaultLanguageHighlighterColors.STRING);
     descriptors.put("keyword", PHPKEYWORD);
     descriptors.put("function", FUNCTION);
     descriptors.put("class", CLASS);
@@ -181,7 +181,7 @@ public ColorDescriptor[] getColorDescriptors() {
   @NotNull
   @Override
   public String getDisplayName() {
-    return MaterialThemeBundle.message("php.additions");
+    return MaterialThemeBundle.message("PHPColorPage.php.additions");
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java
Patch:
@@ -497,7 +497,6 @@ public static Set<String> getSecondaryBackgroundResources() {
         "Checkbox.Border.Disabled.Dark",
         "EditorGroupsTabs.borderColor",
         "EditorTabs.borderColor",
-        "EditorTabs.inactiveColoredFileBackground",
         "inactiveCaption",
         "List.background",
         "MemoryIndicator.allocatedBackground",

File: src/main/java/com/mallowigi/idea/MTConfig.java
Patch:
@@ -168,7 +168,7 @@ public final class MTConfig implements PersistentStateComponent<MTConfig>,
   @Property
   boolean useColoredDirectories = true;
   @Property
-  boolean useProjectFrame = true;
+  boolean useProjectFrame = false;
   @Property
   IndicatorStyles indicatorStyle = IndicatorStyles.BORDER;
   @Property
@@ -390,7 +390,7 @@ public void resetSettings() {
     useMaterialFont2 = false;
     useMaterialWallpapers = false;
     useColoredDirectories = true;
-    useProjectFrame = true;
+    useProjectFrame = false;
   }
 
   @Override

File: src/main/java/com/mallowigi/idea/MTProjectFrame.java
Patch:
@@ -191,7 +191,7 @@ protected void paintComponent(final Graphics g) {
     private Color getFrameColor() {
       final Color projectColor = new Color(stringToARGB(myProject.getName()));
 
-      return ColorUtil.withAlpha(MTUiUtils.darker(projectColor, 8), 0.25);
+      return ColorUtil.withAlpha(MTUiUtils.darker(projectColor, 8), 0.5);
     }
   }
 }

File: src/main/java/com/mallowigi/idea/messages/MaterialThemeBundle.java
Patch:
@@ -27,7 +27,6 @@
 package com.mallowigi.idea.messages;
 
 import com.intellij.AbstractBundle;
-import com.intellij.CommonBundle;
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -48,15 +47,15 @@ private MaterialThemeBundle() {
     super(BUNDLE);
   }
 
-  public static String message(@NotNull @PropertyKey(resourceBundle = BUNDLE) final String key, @NotNull final Object... params) {
+  public static String message(@NonNls @NotNull @PropertyKey(resourceBundle = BUNDLE) final String key, @NotNull final Object... params) {
     return INSTANCE.getMessage(key, params);
   }
 
   @Override
   public String messageOrDefault(@NotNull @PropertyKey(resourceBundle = BUNDLE) final String key,
                                  @Nullable final String defaultValue,
                                  @NotNull final Object... params) {
-    return CommonBundle.messageOrDefault(ResourceBundle.getBundle(BUNDLE), key, defaultValue, params);
+    return AbstractBundle.messageOrDefault(ResourceBundle.getBundle(BUNDLE), key, defaultValue, params);
   }
 
 }

File: src/main/java/com/mallowigi/idea/themes/models/MTBundledTheme.java
Patch:
@@ -37,10 +37,11 @@
 import javax.swing.plaf.ColorUIResource;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 
 public abstract class MTBundledTheme extends MTAbstractTheme {
   @Tag
-  private final Collection<MTThemeColor> colors = new ArrayList<>(16);
+  private final List<MTThemeColor> colors = new ArrayList<>(16);
   @Property
   private String themeId;
 

File: src/main/java/com/mallowigi/idea/ui/MTDarculaButtonUI.java
Patch:
@@ -38,7 +38,6 @@
 import java.awt.*;
 import java.util.Locale;
 
-@SuppressWarnings("StandardVariableNames")
 public final class MTDarculaButtonUI extends DarculaButtonUI {
 
   @SuppressWarnings({"MethodOverridesStaticMethodOfSuperclass",

File: src/main/java/com/mallowigi/idea/MTLafComponent.java
Patch:
@@ -119,7 +119,7 @@ private void initComponent() {
     activeLookAndFeel = LafManager.getInstance().getCurrentLookAndFeel();
 
     // Activate the theme
-    activateLaf(activeLookAndFeel);
+    ApplicationManager.getApplication().invokeLater(() -> activateLaf(activeLookAndFeel));
 
     // Listen for changes on the settings
     final MessageBusConnection connect = ApplicationManager.getApplication().getMessageBus().connect();

File: src/main/java/com/mallowigi/idea/MTLafComponent.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2015 - 2020 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -218,7 +218,7 @@ void onSettingsChanged() {
     //    MTThemeManager.updateFileIcons();
     MTSelectedTreeIndicatorImpl.resetCache();
 
-    activateTheme(true);
+    MTThemeManager.setLookAndFeel(MTConfig.getInstance().getSelectedTheme());
 
     ApplicationManager.getApplication().runWriteAction(UIReplacer::patchUI);
 

File: src/main/java/com/mallowigi/idea/MTConfig.java
Patch:
@@ -46,6 +46,7 @@
 import com.mallowigi.idea.themes.MTThemeFacade;
 import com.mallowigi.idea.themes.MTThemes;
 import com.mallowigi.idea.utils.MTAccents;
+import com.mallowigi.idea.utils.MTUiUtils;
 import org.jetbrains.annotations.NonNls;
 import org.jetbrains.annotations.NotNull;
 import org.json.JSONException;
@@ -93,6 +94,7 @@ public final class MTConfig implements PersistentStateComponent<MTConfig>,
   public static final int MIN_SIDEBAR_HEIGHT = DEFAULT_LINE_HEIGHT;
   public static final int MIN_FONT_SIZE = 6;
   public static final int MAX_FONT_SIZE = 24;
+  public static final int MAX_TAB_INDEX = 6;
   public static final int DEFAULT_TAB_OPACITY = 50;
   public static final int DEFAULT_TAB_FONT_SIZE = 12;
   public static final int DEFAULT_TREE_FONT_SIZE = 12;
@@ -1585,7 +1587,7 @@ public boolean isReset() {
    * @return the settingsSelectedTab (type Integer) of this MTConfig object.
    */
   public Integer getSettingsSelectedTab() {
-    return settingsSelectedTab;
+    return MTUiUtils.valueInRange(settingsSelectedTab, 0, MAX_TAB_INDEX);
   }
 
   /**

File: src/main/java/com/mallowigi/idea/themes/BundledThemeEP.java
Patch:
@@ -34,7 +34,7 @@
 @SuppressWarnings("StaticMethodOnlyUsedInOneClass")
 public class BundledThemeEP extends AbstractExtensionPointBean {
   public static final ExtensionPointName<BundledThemeEP> EP_NAME =
-    ExtensionPointName.create("com.mallowigi.idea.MaterialThemeUI.bundledTheme");
+    ExtensionPointName.create("com.chrisrm.idea.MaterialThemeUI.bundledTheme");
 
   @NonNls
   @Attribute("path")

File: src/main/java/com/mallowigi/idea/MTLafComponent.java
Patch:
@@ -86,6 +86,8 @@ private void lookAndFeelChanged(final LafManager source) {
 
   }
 
+  @SuppressWarnings({"FeatureEnvy",
+    "ChainOfInstanceofChecks"})
   private void activateLaf(final UIManager.LookAndFeelInfo currentLookAndFeel) {
     final UIManager.LookAndFeelInfo oldLaf = LafManager.getInstance().getCurrentLookAndFeel();
 

File: src/main/java/com/mallowigi/idea/MTThemeManager.java
Patch:
@@ -424,9 +424,7 @@ public static void applyAccents(final boolean fireEvent) {
     }
 
     // Accent mode
-    if (CONFIG.isAccentMode()) {
-      MTAccentMode.buildAllResources();
-    }
+    MTAccentMode.buildAllResources();
 
     // Scrollbars management
     applyScrollbars(accentColor);

File: src/main/java/com/mallowigi/idea/MTHackComponent.java
Patch:
@@ -52,7 +52,7 @@ public final class MTHackComponent implements AppLifecycleListener {
     hackTitleLabel();
     hackNewScreenHardcodedColor();
     hackScrollbars();
-    //    hackTrees();
+    hackTrees();
   }
 
   private static void hackBackgroundFrame() {
@@ -198,7 +198,7 @@ private static void hackTrees() {
       method.instrument(new ExprEditor() {
         @Override
         public void edit(final MethodCall m) throws CannotCompileException {
-          if ("paint".equals(m.getMethodName())) {
+          if ("paint".equals(m.getMethodName()) && m.getClassName().contains("Control.Painter")) {
             m.replace("$11 = selected; $_ = $proceed($$);");
           }
         }

File: src/main/java/com/mallowigi/idea/utils/MTUiUtils.java
Patch:
@@ -284,7 +284,7 @@ protected void hyperlinkActivated(@NotNull final Notification notification, @Not
    */
   public static void buildResources(final Iterable<String> resources, final Color color) {
     for (final String resource : resources) {
-      UIManager.getDefaults().putIfAbsent(resource, color);
+      UIManager.getDefaults().put(resource, color);
     }
   }
 

File: src/main/java/com/mallowigi/idea/themes/lists/AccentResources.java
Patch:
@@ -32,6 +32,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+@SuppressWarnings({"StaticMethodOnlyUsedInOneClass",
+  "DuplicateStringLiteralInspection"})
 public enum AccentResources {
   DEFAULT;
 

File: src/main/java/com/mallowigi/idea/utils/MTUI.java
Patch:
@@ -685,7 +685,7 @@ public static Color getForeground() {
     }
 
     public static Color getContrastBackground() {
-      final Color color = JBColor.namedColor(CONTRAST_BACKGROUND, UIUtil.getEditorPaneBackground());
+      final Color color = JBColor.namedColor(PANEL_BACKGROUND, UIUtil.getEditorPaneBackground());
       final boolean isDark = ColorUtil.isDark(color);
       return MTColorUtils.contrastifyBackground(isDark, new ColorUIResource(color), false);
     }

File: src/main/java/com/mallowigi/idea/UIReplacer.java
Patch:
@@ -176,6 +176,7 @@ private static void patchIdeaActionButton() throws NoSuchFieldException, Illegal
   private static void patchTabs() throws NoSuchFieldException, IllegalAccessException {
     final int tabsHeight = MTConfig.getInstance().getTabsHeight() + 10;
     StaticPatcher.setFinalStatic(SingleHeightTabs.class, "UNSCALED_PREF_HEIGHT", tabsHeight);
+    UIManager.put("TabbedPane.tabHeight", tabsHeight);
   }
 
   /**

File: src/main/java/com/chrisrm/idea/MTHackComponent.java
Patch:
@@ -51,7 +51,7 @@ public final class MTHackComponent implements BaseComponent {
     hackTabs();
     hackBackgroundFrame();
     hackTitleLabel();
-    hackSearchTextField();
+//    hackSearchTextField();
     hackNewScreenHardcodedColor();
     hackScrollbars();
     hackTrees();

File: src/main/java/com/chrisrm/idea/schemes/MTFileColors.java
Patch:
@@ -118,16 +118,16 @@ public static void initFileColors() {
         // 2. if there is an original file color
         final String originalColorString = ColorUtil.toHex(originalColor);
         // 2a. Get custom file color from the bundle, or default to original file color
-        final String property = FileColorsBundle.messageOrDefault("material.file." + allFileStatus.getId().toLowerCase(),
-            originalColorString);
+        final String property = FileColorsBundle.INSTANCE.messageOrDefault("material.file." + allFileStatus.getId().toLowerCase(),
+          originalColorString);
         final Color color = ColorUtil.fromHex(property == null ? originalColorString : property);
 
         // 2b. Set in the map the custom/default file color
         COLOR_KEYS.put(allFileStatus, ColorKey.createColorKey(MT_PREFIX + allFileStatus.getId(), color));
       } else {
         // 3. If there is no default file color
         // 3a. Get custom file color from the bundle
-        final String property = FileColorsBundle.messageOrDefault("material.file." + allFileStatus.getId().toLowerCase(), "-1");
+        final String property = FileColorsBundle.INSTANCE.messageOrDefault("material.file." + allFileStatus.getId().toLowerCase(), "-1");
         // If not found do not add the color to the map
         if (Objects.equals(property, "-1")) {
           COLOR_KEYS.put(allFileStatus, ColorKey.createColorKey(MT_PREFIX + allFileStatus.getId()));

File: src/main/java/com/mallowigi/idea/status/MTStatusWidget.java
Patch:
@@ -232,7 +232,8 @@ public void paintComponent(final Graphics g) {
 
     @Override
     public Dimension getPreferredSize() {
-      final String themeName = mtConfig.getSelectedTheme().getThemeColorScheme();
+      final String themeName = mtConfig.getSelectedTheme().getThemeName();
+      assert themeName != null;
       final int width = getFontMetrics(getWidgetFont()).charsWidth(themeName.toCharArray(), 0,
         themeName.length()) + 2 * STATUS_PADDING;
       final int accentDiameter = JBUI.scale(STATUS_HEIGHT);

File: src/main/java/com/mallowigi/idea/config/ui/MTForm.java
Patch:
@@ -78,8 +78,8 @@
   "ConfusingFloatingPointLiteral",
   "unused",
   "PublicMethodNotExposedInInterface",
-  "UndesirableClassUsage",
-  "unchecked"})
+  "UndesirableClassUsage"
+})
 public class MTForm implements MTFormUI {
   private SpinnerModel highlightSpinnerModel;
   private SpinnerModel tabsHeightSpinnerModel;

File: src/main/java/com/mallowigi/idea/messages/ThemesBundle.java
Patch:
@@ -47,7 +47,6 @@ private static String message(@NotNull @PropertyKey(resourceBundle = BUNDLE) fin
     return INSTANCE.getMessage(key, params);
   }
 
-  @SuppressWarnings("StaticMethodOnlyUsedInOneClass")
   public static String messageWithPrefix(@NonNls final String key, final String prefix) {
     return message(prefix + "." + key);
   }

File: src/main/java/com/chrisrm/idea/config/MTConfigTopHitProvider.java
Patch:
@@ -55,7 +55,6 @@ public final class MTConfigTopHitProvider extends OptionsTopHitProvider {
     option(getText("MTForm.compactDropdownsCheckbox.text"), "isCompactDropdowns", "setCompactDropdowns"),
     option(getText("MTForm.contrastCheckBox.text"), "isContrastMode", "setIsContrastMode"),
     option(getText("MTForm.customTreeIndentCheckbox.text"), "isCustomTreeIndent", "setIsCustomTreeIndent"),
-    option(getText("MTForm.decoratedFoldersCheckbox.text"), "isDecoratedFolders", "setIsDecoratedFolders"),
 
     option(getText("MTForm.fileColorsCheckbox.text"), "isFileStatusColorsEnabled", "setFileStatusColorsEnabled"),
     option(getText("MTForm.fontSizeCheckbox.text"), "isTreeFontSizeEnabled", "setTreeFontSizeEnabled"),

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -467,9 +467,9 @@ private static void replaceIcons(@NonNls final UIDefaults defaults) {
     defaults.put("Table.ascendingSortIcon", AllIcons.General.ArrowUp);
     defaults.put("Table.descendingSortIcon", AllIcons.General.ArrowDown);
 
-    defaults.put("TextField.darcula.searchWithHistory.icon", IconLoader.getIcon("/icons/darcula/searchWithHistory.png"));
-    defaults.put("TextField.darcula.search.icon", IconLoader.getIcon("/icons/darcula/search.png"));
-    defaults.put("TextField.darcula.clear.icon", IconLoader.getIcon("/icons/darcula/clear.png"));
+    defaults.put("TextField.darcula.searchWithHistory.icon", IconLoader.getIcon("/icons/mt/searchWithHistory.png"));
+    defaults.put("TextField.darcula.search.icon", IconLoader.getIcon("/icons/mt/search.png"));
+    defaults.put("TextField.darcula.clear.icon", IconLoader.getIcon("/icons/mt/clear.png"));
   }
 
   /**

File: src/main/java/com/chrisrm/idea/actions/arrows/MTAbstractArrowsAction.java
Patch:
@@ -28,6 +28,7 @@
 
 import com.chrisrm.idea.MTAnalytics;
 import com.chrisrm.idea.MTConfig;
+import com.chrisrm.idea.MTThemeManager;
 import com.chrisrm.idea.actions.MTToggleAction;
 import com.chrisrm.idea.config.enums.ArrowsStyles;
 import com.chrisrm.idea.ui.MTTreeUI;
@@ -52,6 +53,8 @@ public final void setSelected(@NotNull final AnActionEvent e, final boolean stat
     MTTreeUI.resetIcons();
     ActionToolbarImpl.updateAllToolbarsImmediately();
     MTAnalytics.getInstance().trackValue(MTAnalytics.ARROWS_STYLE, arrowsStyle);
+
+    MTThemeManager.activate();
   }
 
   /**

File: src/main/java/com/chrisrm/idea/ui/MTTreeUI.java
Patch:
@@ -247,9 +247,9 @@ protected void installDefaults() {
       if (tree.isForegroundSet()) {
         tree.setForeground(null);
       }
-      //      if (UIManager.get("Tree.showsRootHandles") == null) {
-      //        LookAndFeel.installProperty(tree, JTree.SHOWS_ROOT_HANDLES_PROPERTY, Boolean.TRUE);
-      //      }
+      if (UIManager.get("Tree.showsRootHandles") == null) {
+        LookAndFeel.installProperty(tree, JTree.SHOWS_ROOT_HANDLES_PROPERTY, Boolean.TRUE);
+      }
     }
   }
 

File: src/main/java/com/chrisrm/idea/MTCleanupComponent.java
Patch:
@@ -40,6 +40,5 @@ private MTCleanupComponent() {
   public void disposeComponent() {
     // shadow popup
     Registry.get("ide.balloon.shadow.size").setValue(15);
-    Registry.get("ide.tree.ui.experimental").setValue(true);
   }
 }

File: src/main/java/com/chrisrm/idea/themes/themes/LightOwlTheme.java
Patch:
@@ -57,7 +57,7 @@ public ColorUIResource getTextColorResource() {
 
   @Override
   public ColorUIResource getSelectionBackgroundColorResource() {
-    return new ColorUIResource(new Color(0xE0E0E0FF, true));
+    return new ColorUIResource(0xE0E0E0);
   }
 
   @Override
@@ -92,7 +92,7 @@ public ColorUIResource getTableSelectedColorResource() {
 
   @Override
   public ColorUIResource getSecondBorderColorResource() {
-    return new ColorUIResource(0x7e97ac);
+    return new ColorUIResource(0xd9d9d9);
   }
 
   @Override
@@ -102,7 +102,7 @@ public ColorUIResource getHighlightColorResource() {
 
   @Override
   public ColorUIResource getTreeSelectionColorResource() {
-    return new ColorUIResource(new Color(0xd3e8f87C, true));
+    return new ColorUIResource(new Color(0x7cd3e8f8, true));
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/themes/NightOwlTheme.java
Patch:
@@ -87,7 +87,7 @@ public ColorUIResource getContrastColorResource() {
 
   @Override
   public ColorUIResource getTableSelectedColorResource() {
-    return new ColorUIResource(0x1085bb);
+    return new ColorUIResource(0x234d70);
   }
 
   @Override
@@ -118,6 +118,6 @@ public ColorUIResource getAccentColorResource() {
 
   @Override
   public ColorUIResource getExcludedColorResource() {
-    return new ColorUIResource(0x293fff);
+    return new ColorUIResource(0x0e293f);
   }
 }

File: src/main/java/com/chrisrm/idea/themes/MTThemes.java
Patch:
@@ -59,8 +59,8 @@ public enum MTThemes implements MTThemeFacade {
   SOLARIZED_LIGHT("SOLARIZED_LIGHT", new SolarizedLightTheme(), false),
   DRACULA("DRACULA", new DraculaTheme(), false),
   GITHUB("GITHUB", new GithubTheme(), false),
-  NIGHTOWL("NIGHTOWL", new NightOwlTheme(), false),
-  LIGHTOWL("LIGHTOWL", new LightOwlTheme(), false);
+  NIGHTOWL("NIGHT_OWL", new NightOwlTheme(), false),
+  LIGHTOWL("LIGHT_OWL", new LightOwlTheme(), false);
 
   //  EXTERNAL("EXTERNAL", new MTCustomTheme());
 

File: src/main/java/com/chrisrm/idea/themes/themes/NightOwlTheme.java
Patch:
@@ -97,7 +97,7 @@ public ColorUIResource getSecondBorderColorResource() {
 
   @Override
   public ColorUIResource getHighlightColorResource() {
-    return new ColorUIResource(0x5f7e97);
+    return new ColorUIResource(0x084d81);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/icons/patchers/CheckStyleIconPatcher.java
Patch:
@@ -45,7 +45,7 @@ public final class CheckStyleIconPatcher extends IconPathPatcher {
     REPLACEMENTS.put("/actions/cancel.png", "AllIcons.Actions.Cancel");
     REPLACEMENTS.put("/actions/suspend.png", "AllIcons.Actions.Suspend");
     REPLACEMENTS.put("/actions/execute.png", "AllIcons.Actions.Execute");
-    REPLACEMENTS.put("/modules/modulesNode.png", "AllIcons.Nodes.ModulesGroup");
+    REPLACEMENTS.put("/modules/modulesNode.png", "AllIcons.Nodes.ModuleGroup");
     REPLACEMENTS.put("/general/projectTab.png", "AllIcons.General.ProjectTab");
     REPLACEMENTS.put("/general/toolWindowChanges.png", "AllIcons.Toolwindows.ToolWindowChanges");
     REPLACEMENTS.put("/general/smallConfigurableVcs.png", "AllIcons.Actions.ShowAsTree");

File: src/main/java/com/chrisrm/idea/MTAnalytics.java
Patch:
@@ -91,7 +91,7 @@ public MTAnalytics() {
     userId = MTConfig.getInstance().getUserId();
     isOffline = false;
 
-    ApplicationManager.getApplication().runWriteAction(this::ping);
+    ApplicationManager.getApplication().executeOnPooledThread(this::ping);
   }
 
   public static MTAnalytics getInstance() {

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainter.java
Patch:
@@ -30,13 +30,10 @@
 import com.chrisrm.idea.tabs.shadowPainters.*;
 import com.chrisrm.idea.themes.models.MTThemeable;
 import com.chrisrm.idea.utils.MTUI;
-import com.intellij.ui.ColorUtil;
 import com.intellij.ui.paint.RectanglePainter2D;
-import com.intellij.ui.tabs.JBTabs;
 import com.intellij.ui.tabs.JBTabsPosition;
 import com.intellij.ui.tabs.impl.JBDefaultTabPainter;
 import com.intellij.ui.tabs.impl.JBEditorTabs;
-import com.intellij.ui.tabs.newImpl.ShapeTransform;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 

File: src/main/java/com/chrisrm/idea/tabs/shadowPainters/ShadowPainter.java
Patch:
@@ -26,9 +26,7 @@
 
 package com.chrisrm.idea.tabs.shadowPainters;
 
-import com.chrisrm.idea.utils.MTUI;
 import com.intellij.ui.JBColor;
-import com.intellij.ui.tabs.newImpl.ShapeTransform;
 
 import java.awt.*;
 

File: src/main/java/com/chrisrm/idea/themes/lists/MTThemeResources.java
Patch:
@@ -85,7 +85,7 @@ public static Set<String> getBackgroundResources() {
             "Editor.background",
             "EditorPane.inactiveBackground",
             "EditorTabs.background",
-            "EditorTabs.inactiveColoredFileBackground",
+            //            "EditorTabs.inactiveColoredFileBackground",
             "EditorTabs.inactive.maskColor", // deprecated
             "EditorTabs.inactiveMaskColor",
             "FormattedTextField.background",

File: src/main/java/com/chrisrm/idea/config/ui/load/MTLoadCustomThemeComboBoxAction.java
Patch:
@@ -63,7 +63,7 @@ public final class MTLoadCustomThemeComboBoxAction extends ComboBoxAction {
 
   public MTLoadCustomThemeComboBoxAction(final MTCustomThemeForm mtCustomThemeForm) {
     this.mtCustomThemeForm = mtCustomThemeForm;
-    customThemeConfig = MTCustomThemeConfig.getInstance();
+    customThemeConfig = MTCustomThemeConfig.getInstance().clone();
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/config/ui/MTCustomThemeForm.java
Patch:
@@ -84,7 +84,7 @@ public boolean isModified(final MTBaseConfig config) {
     boolean modified = customThemeConfig.isBackgroundColorChanged(getBackgroundColor());
     modified = modified || customThemeConfig.isForegroundColorChanged(getForegroundColor());
     modified = modified || customThemeConfig.isTextColorChanged(getTextColor());
-    modified = modified || customThemeConfig.isSelectionBackgroundColorChanged(getSelectionForegroundColor());
+    modified = modified || customThemeConfig.isSelectionBackgroundColorChanged(getSelectionBackgroundColor());
     modified = modified || customThemeConfig.isSelectionForegroundColorChanged(getSelectionForegroundColor());
     modified = modified || customThemeConfig.isButtonColorChanged(getButtonColor());
     modified = modified || customThemeConfig.isSecondaryBackgroundColorChanged(getSecondaryBackgroundColor());

File: src/main/java/com/chrisrm/idea/ui/MTRootPaneUI.java
Patch:
@@ -110,7 +110,7 @@ public void installUI(final JComponent c) {
           c.addHierarchyListener((event) -> {
             final Window window = UIUtil.getWindow(c);
             final String title = getWindowTitle(window);
-            if (title != null && !title.equals("") && !title.equals("This should not be shown")) {
+            if (title != null && !title.equals("This should not be shown")) {
               c.putClientProperty(TRANSPARENT_TITLE_BAR_APPEARANCE, true);
               setCustomTitleBar(window, rootPane, (runnable) -> disposer = runnable);
             } else {

File: src/main/java/com/chrisrm/idea/themes/lists/MTThemeResources.java
Patch:
@@ -309,6 +309,7 @@ public static Set<String> getTextResources() {
             "RadioButtonMenuItem.acceleratorForeground",
             "RadioButtonMenuItem.acceleratorSelectionForeground",
             "SearchEverywhere.shortcutForeground", // deprecated
+            "SearchEverywhere.List.separatorForeground",
             "Table.lightSelectionInactiveForeground",
             "text",
             "textInactiveText",
@@ -632,7 +633,6 @@ public static Set<String> getSecondBorderResources() {
             "Plugins.SearchField.borderColor",
             "Popup.Separator.color", // deprecated
             "SearchEverywhere.List.Separator.Color", // deprecated
-            "SearchEverywhere.List.separatorForeground",
             "SearchEverywhere.List.Separator.foreground", // deprecated
             "SearchEverywhere.List.separatorColor",
             "SpeedSearch.borderColor",

File: src/main/java/com/chrisrm/idea/ui/MTRootPaneUI.java
Patch:
@@ -143,6 +143,9 @@ public void paintBorder(final Component c, final Graphics g, final int x, final
         }
 
         final Graphics2D graphics = (Graphics2D) g.create();
+        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
+        graphics.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);
+
         try {
           final Rectangle headerRectangle = new Rectangle(0, 0, c.getWidth(), topWindowInset.top);
           graphics.setColor(UIUtil.getPanelBackground());

File: src/main/java/com/chrisrm/idea/ui/MTRootPaneUI.java
Patch:
@@ -232,7 +232,7 @@ private static String getWindowTitle(final Window window) {
 
   private static boolean isInFullScreen(final Window window) {
     final Component ultimateParent = UIUtil.findUltimateParent(window);
-    if (ultimateParent instanceof IdeFrameEx) {
+    if (ultimateParent == window && ultimateParent instanceof IdeFrameEx) {
       final IdeFrameEx ultimateParentWindowForEvent = (IdeFrameEx) ultimateParent;
       return ultimateParentWindowForEvent.isInFullScreen();
     }

File: src/main/java/com/chrisrm/idea/ui/MTRootPaneUI.java
Patch:
@@ -101,10 +101,13 @@ public void installUI(final JComponent c) {
         Registry.get("ide.mac.allowDarkWindowDecorations").setValue(themeIsDark);
 
         c.putClientProperty(WINDOW_DARK_APPEARANCE, themeIsDark);
+
         if (!SystemInfo.isJavaVersionAtLeast(11)) {
           c.putClientProperty(TRANSPARENT_TITLE_BAR_APPEARANCE, true);
         } else {
+          c.putClientProperty(TRANSPARENT_TITLE_BAR_APPEARANCE, true);
           final JRootPane rootPane = (JRootPane) c;
+
           c.addHierarchyListener((event) -> {
             final Window window = UIUtil.getWindow(c);
             final String title = getWindowTitle(window);
@@ -122,7 +125,6 @@ public void installUI(final JComponent c) {
 
   private static void setCustomTitleBar(final Window window, final JRootPane rootPane, final Consumer<Runnable> onDispose) {
     final JBInsets topWindowInset = JBUI.insetsTop(24);
-    rootPane.putClientProperty(TRANSPARENT_TITLE_BAR_APPEARANCE, true);
 
     // Create the title bar
     final AbstractBorder customDecorationBorder = new AbstractBorder() {

File: src/main/java/com/chrisrm/idea/ui/MTLabelUI.java
Patch:
@@ -41,13 +41,13 @@ public static ComponentUI createUI(final JComponent component) {
 
   @Override
   protected void paintEnabledText(final JLabel l, final Graphics g, final String s, final int textX, final int textY) {
-    g.setColor(MTUI.Label.getLabelForeground(l));
+    g.setColor(MTUI.Label.getLabelInfoForeground(l));
     MTUI.Label.paintText(l, g, s, textX, textY);
   }
 
   @Override
   protected void paintDisabledText(final JLabel l, final Graphics g, final String s, final int textX, final int textY) {
-    g.setColor(MTUI.Label.getDisabledBackground());
+    g.setColor(MTUI.Label.getLabelDisabledForeground());
     MTUI.Label.paintText(l, g, s, textX, textY);
   }
 

File: src/main/java/com/chrisrm/idea/ui/MTRootPaneUI.java
Patch:
@@ -31,7 +31,6 @@
 import com.intellij.ide.ui.laf.darcula.ui.DarculaRootPaneUI;
 import com.intellij.openapi.util.SystemInfo;
 import com.intellij.openapi.util.registry.Registry;
-import com.intellij.ui.JBColor;
 import com.intellij.util.Consumer;
 import com.intellij.util.ui.GraphicsUtil;
 import com.intellij.util.ui.JBInsets;

File: src/main/java/com/chrisrm/idea/ui/MTButtonUI.java
Patch:
@@ -114,7 +114,7 @@ protected int textIconGap() {
   @Override
   public void installDefaults(final AbstractButton b) {
     super.installDefaults(b);
-    b.setBackground(isDefaultButton(b) ? primaryButtonBg() : buttonBg());
+    //    b.setBackground(isDefaultButton(b) ? primaryButtonBg() : buttonBg());
     isNotThemed = true;
 
     if (MTConfig.getInstance().isUpperCaseButtons()) {

File: src/main/java/com/chrisrm/idea/UIReplacer.java
Patch:
@@ -250,6 +250,6 @@ private static void patchTabs() throws NoSuchFieldException, IllegalAccessExcept
     StaticPatcher.setFinalStatic(TabsUtil.class, "NEW_TAB_VERTICAL_PADDING", tabsHeight);
 
     StaticPatcher.setFinalStatic(JBTabsImpl.class, "ourDefaultDecorator",
-        (UiDecorator) () -> new UiDecorator.UiDecoration(null, JBUI.insets(-1 * TabsUtil.NEW_TAB_VERTICAL_PADDING, 8)));
+        (UiDecorator) () -> new UiDecorator.UiDecoration(null, JBUI.insets(TabsUtil.NEW_TAB_VERTICAL_PADDING, 8)));
   }
 }

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -96,7 +96,7 @@ public final class MTConfig implements PersistentStateComponent<MTConfig>,
   public static final int DEFAULT_THICKNESS = 2;
   public static final int DEFAULT_LEFT_INDENT = 6;
   public static final int DEFAULT_RIGHT_INDENT = 10;
-  public static final int DEFAULT_TAB_HEIGHT = 42;
+  public static final int DEFAULT_TAB_HEIGHT = 32;
   //endregion
 
   //region ±±±±±±±±±±±±±±±±± Properties ±±±±±±±±±±±±±±±±±

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -279,8 +279,8 @@ public static void replaceTree(final UIDefaults defaults) {
    */
   private static void replaceSelectedIndicator(@NonNls final UIDefaults defaults) {
     final MTSelectedTreePainter painter = new MTSelectedTreePainter();
-    defaults.put(MTUI.List.getListSelectionPainter(), painter);
-    defaults.put(MTUI.List.getListFocusedSelectionPainter(), painter);
+    defaults.put(MTUI.List.LIST_SELECTION_BACKGROUND_PAINTER, painter);
+    defaults.put(MTUI.List.LIST_FOCUSED_SELECTION_BACKGROUND_PAINTER, painter);
   }
 
   /**

File: src/main/java/com/chrisrm/idea/MTCleanupComponent.java
Patch:
@@ -40,6 +40,6 @@ private MTCleanupComponent() {
   public void disposeComponent() {
     // shadow popup
     Registry.get("ide.balloon.shadow.size").setValue(15);
-
+    Registry.get("ide.tree.ui.experimental").setValue(true);
   }
 }

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -67,8 +67,6 @@ public final class MTLafComponent implements BaseComponent {
 
   private void lookAndFeelChanged(final LafManager source) {
     final UIManager.LookAndFeelInfo currentLookAndFeel = source.getCurrentLookAndFeel();
-    // Repatch tree
-    patchTree();
     // Prevent infinite loop
     if (currentLookAndFeel == activeLookAndFeel) {
       return;

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -152,6 +152,7 @@ static void installDefaults(@NonNls final UIDefaults defaults) {
     defaults.put("MenuBar.border", new DarculaMenuBarBorder());
 
     defaults.put("TextArea.caretBlinkRate", 500);
+    defaults.put("Tree.paintLines", false);
     defaults.put("Table.cellNoFocusBorder", JBUI.insets(4, 4, 4, 4));
     defaults.put("CheckBoxMenuItem.borderPainted", false);
     defaults.put("RadioButtonMenuItem.borderPainted", false);
@@ -458,6 +459,7 @@ private static void replaceIcons(@NonNls final UIDefaults defaults) {
    */
   private static void modifyRegistry() {
     Registry.get("ide.balloon.shadow.size").setValue(0);
+    Registry.get("ide.tree.ui.experimental").setValue(false);
   }
 
   /**

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainter.java
Patch:
@@ -76,10 +76,10 @@ private Color getInactiveBackground() {
   public void paintSelectedTab(@NotNull final JBTabsPosition position,
                                @NotNull final Graphics2D g,
                                @NotNull final Rectangle rect,
+                               final int thickness,
                                @Nullable final Color tabColor,
                                final boolean active,
                                final boolean hovered) {
-
     g.setColor(hovered ? MTUI.TabbedPane.getHoveredBackground() : MTUI.TabbedPane.getBackground());
     RectanglePainter2D.FILL.paint(g, rect.x, rect.y, rect.width, rect.height);
 

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -83,7 +83,7 @@ public final class MTConfig implements PersistentStateComponent<MTConfig>,
   public static final int MIN_INDICATOR_THICKNESS = 1;
   public static final int MAX_TABS_HEIGHT = 60;
   public static final int DEFAULT_LINE_HEIGHT = 18;
-  public static final int MIN_TABS_HEIGHT = 10;
+  public static final int MIN_TABS_HEIGHT = 18;
   public static final int MAX_TREE_INDENT = 40;
   public static final int MIN_TREE_INDENT = 0;
   public static final int MAX_SIDEBAR_HEIGHT = 36;
@@ -401,7 +401,6 @@ public void applySettings(final MTForm form) {
     setRightTreeIndent(form.getRightTreeIndent());
     setSelectedTheme(form.getTheme());
     setTabHighlightPosition(form.getTabHighlightPosition());
-    setTabOpacity(form.getTabOpacity());
     setTabsHeight(form.getTabsHeight());
     setThemedScrollbars(form.isThemedScrollbars());
     setTabFontSize(form.getTabFontSize());

File: src/main/java/com/chrisrm/idea/config/MTOptionContributor.java
Patch:
@@ -85,7 +85,6 @@ public void processOptions(@NotNull final SearchableOptionProcessor processor) {
             MaterialThemeBundle.message("MTForm.leftLabel.text"),
             MaterialThemeBundle.message("MTForm.materialThemeCheckbox.text"),
             MaterialThemeBundle.message("MTForm.monochromeCheckbox.text"),
-            MaterialThemeBundle.message("MTForm.opacityLabel.text"),
             MaterialThemeBundle.message("MTForm.otherTweaksPanel.tab.title"),
             MaterialThemeBundle.message("MTForm.overrideAccentCheckbox.text"),
             MaterialThemeBundle.message("MTForm.panelDesc.textWithMnemonic"),

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea;
 
 import com.chrisrm.idea.config.ui.MTForm;
+import com.chrisrm.idea.lafs.MTLafInstaller;
 import com.chrisrm.idea.listeners.ConfigNotifier;
 import com.chrisrm.idea.messages.MaterialThemeBundle;
 import com.chrisrm.idea.ui.MTTreeUI;
@@ -103,6 +104,8 @@ public void beforeConfigChanged(final MTConfig mtConfig, final MTForm form) {
     });
 
     LafManager.getInstance().addLafManagerListener(this::lookAndFeelChanged);
+
+    MTLafInstaller.replaceTree(UIManager.getLookAndFeelDefaults());
   }
 
   /**

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -266,7 +266,7 @@ private static void replaceProgressBar(final UIDefaults defaults) {
    *
    * @param defaults of type UIDefaults
    */
-  private static void replaceTree(final UIDefaults defaults) {
+  public static void replaceTree(final UIDefaults defaults) {
     defaults.put("TreeUI", MTTreeUI.class.getName());
     defaults.put(MTTreeUI.class.getName(), MTTreeUI.class);
   }
@@ -278,8 +278,8 @@ private static void replaceTree(final UIDefaults defaults) {
    */
   private static void replaceSelectedIndicator(@NonNls final UIDefaults defaults) {
     final MTSelectedTreePainter painter = new MTSelectedTreePainter();
-    defaults.put(MTUI.List.LIST_SELECTION_BACKGROUND_PAINTER, painter);
-    defaults.put(MTUI.List.LIST_FOCUSED_SELECTION_BACKGROUND_PAINTER, painter);
+    defaults.put(MTUI.List.getListSelectionPainter(), painter);
+    defaults.put(MTUI.List.getListFocusedSelectionPainter(), painter);
   }
 
   /**

File: src/main/java/com/chrisrm/idea/config/MTConfigTopHitProvider.java
Patch:
@@ -80,7 +80,6 @@ public final class MTConfigTopHitProvider extends OptionsTopHitProvider {
       option(getText("MTForm.psiIconsCheckbox.text"), "isPsiIcons", "setIsPsiIcons"),
 
       option(getText("MTForm.styledDirectoriesCheckbox.text"), "isStyledDirectories", "setIsStyledDirectories"),
-      option(getText("MTForm.tabShadowCheckbox.text"), "isTabsShadow", "setIsTabsShadow"),
       option(getText("MTForm.themedScrollbarsCheckbox.text"), "isThemedScrollbars", "setThemedScrollbars"),
       option(getText("MTForm.themedTitleBarCheckbox.text"), "isDarkTitleBar", "setDarkTitleBar"),
       option(getText("MTForm.themeStatusBar.text"), "isStatusBarTheme", "setIsStatusBarTheme"),

File: src/main/java/com/chrisrm/idea/config/MTOptionContributor.java
Patch:
@@ -104,7 +104,6 @@ public void processOptions(@NotNull final SearchableOptionProcessor processor) {
             MaterialThemeBundle.message("MTForm.tabHeight.text"),
             MaterialThemeBundle.message("MTForm.tabPanel.tab.title"),
             MaterialThemeBundle.message("MTForm.tabsDesc.textWithMnemonic"),
-            MaterialThemeBundle.message("MTForm.tabShadowCheckbox.text"),
             MaterialThemeBundle.message("MTForm.themedScrollbarsCheckbox.text"),
             MaterialThemeBundle.message("MTForm.themedTitleBarCheckbox.text"),
             MaterialThemeBundle.message("MTForm.themeStatusBar.text"),

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -393,7 +393,6 @@ public void applySettings(final MTForm form) {
     setIsPsiIcons(form.isPsiIcons());
     setIsStatusBarTheme(form.isStatusBarTheme());
     setIsStyledDirectories(form.isStyledDirectories());
-    setIsTabsShadow(form.isTabsShadow());
     setIsUpperCaseTabs(form.isUpperCaseTabs());
     setLeftTreeIndent(form.getLeftTreeIndent());
     setMonochromeIcons(form.isMonochromeIcons());

File: src/main/java/com/chrisrm/idea/ui/MTCheckBoxUI.java
Patch:
@@ -45,7 +45,7 @@
  */
 @SuppressWarnings("IntegerDivisionInFloatingPointContext")
 public final class MTCheckBoxUI extends DarculaCheckBoxUI {
-  private static final Icon DEFAULT_ICON = JBUI.scale(EmptyIcon.create(20)).asUIResource();
+  private static final Icon DEFAULT_ICON = EmptyIcon.create(20).asUIResource();
 
   @SuppressWarnings({"MethodOverridesStaticMethodOfSuperclass",
       "unused"})

File: src/main/java/com/chrisrm/idea/ui/MTRadioButtonUI.java
Patch:
@@ -49,7 +49,7 @@ public static ComponentUI createUI(final JComponent component) {
 
   @Override
   public Icon getDefaultIcon() {
-    return JBUI.scale(EmptyIcon.create(20)).asUIResource();
+    return (EmptyIcon.create(20)).asUIResource();
   }
 
   @SuppressWarnings("BadOddness")

File: src/main/java/com/chrisrm/idea/tabs/shadowPainters/BottomShadowPainter.java
Patch:
@@ -26,7 +26,6 @@
 
 package com.chrisrm.idea.tabs.shadowPainters;
 
-import com.chrisrm.idea.tabs.MTTabsPainter;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.tabs.impl.ShapeTransform;
 
@@ -47,7 +46,7 @@ private static void drawTopShadow(final Graphics2D g2d,
     final int w = path.getMaxX();
     final int h = rect.y;
 
-    final Color bg = MTTabsPainter.getContrastColor().darker();
+    final Color bg = getShadowColor();
     g2d.setColor(bg);
     g2d.drawLine(0, h - 1, w, h - 1);
 

File: src/main/java/com/chrisrm/idea/tabs/shadowPainters/LeftShadowPainter.java
Patch:
@@ -26,7 +26,6 @@
 
 package com.chrisrm.idea.tabs.shadowPainters;
 
-import com.chrisrm.idea.tabs.MTTabsPainter;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.tabs.impl.ShapeTransform;
 
@@ -47,7 +46,7 @@ private static void drawRightShadow(final Graphics2D g2d,
     final int h = path.getMaxY();
     final int w = rect.width;
 
-    final Color bg = MTTabsPainter.getContrastColor().darker();
+    final Color bg = getShadowColor();
     g2d.setColor(bg);
     g2d.drawLine(w + 1, 0, w + 1, h);
 

File: src/main/java/com/chrisrm/idea/tabs/shadowPainters/RightShadowPainter.java
Patch:
@@ -26,7 +26,6 @@
 
 package com.chrisrm.idea.tabs.shadowPainters;
 
-import com.chrisrm.idea.tabs.MTTabsPainter;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.tabs.impl.ShapeTransform;
 
@@ -47,7 +46,7 @@ private static void drawLeftShadow(final Graphics2D g2d,
     final int h = labelPath.getMaxY();
     final int w = rect.x;
 
-    final Color bg = MTTabsPainter.getContrastColor().darker();
+    final Color bg = getShadowColor();
     g2d.setColor(bg);
     g2d.drawLine(w - 1, 0, w - 1, h);
 

File: src/main/java/com/chrisrm/idea/tabs/shadowPainters/TopShadowPainter.java
Patch:
@@ -26,7 +26,6 @@
 
 package com.chrisrm.idea.tabs.shadowPainters;
 
-import com.chrisrm.idea.tabs.MTTabsPainter;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.tabs.impl.ShapeTransform;
 
@@ -47,7 +46,7 @@ private static void drawBottomShadow(final Graphics2D g2d,
     final int h = labelPath.getMaxY();
     final int w = path.getMaxX();
 
-    final Color bg = MTTabsPainter.getContrastColor().darker();
+    final Color bg = getShadowColor();
     g2d.setColor(bg);
     g2d.drawLine(0, h + 1, w, h + 1);
 

File: src/main/java/com/chrisrm/idea/themes/themes/MTLighterTheme.java
Patch:
@@ -85,7 +85,7 @@ public ColorUIResource getContrastColorResource() {
 
   @Override
   public ColorUIResource getTableSelectedColorResource() {
-    return new ColorUIResource(0xD2D4D5);
+    return new ColorUIResource(0xE7E7E8);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/themes/ArcDarkTheme.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -87,7 +87,7 @@ public ColorUIResource getContrastColorResource() {
 
   @Override
   public ColorUIResource getTableSelectedColorResource() {
-    return new ColorUIResource(0x444444);
+    return new ColorUIResource(0x41416A);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/wizard/steps/MTWizardAccentPanel.java
Patch:
@@ -77,6 +77,7 @@ protected String getHTMLHeader() {
 
   private void accentThemeCheckboxActionPerformed(final ActionEvent e) {
     config.setOverrideAccentColor(accentThemeCheckbox.isSelected());
+    MTThemeManager.applyAccents(true);
   }
 
   private void accentColorChooserActionPerformed(final ActionEvent e) {

File: src/main/java/com/chrisrm/idea/wizard/steps/MTWizardOtherOptionsPanel.java
Patch:
@@ -117,6 +117,9 @@ private void init() {
     // title bar
     titleBarCheckbox.setSelected(config.isDarkTitleBar());
 
+    // psi icons
+    psiIconsCheckbox.setSelected(config.isPsiIcons());
+
     // arrow styles
     arrowsStyleComboBox.setSelectedItem(config.getArrowsStyle());
 

File: src/main/java/com/chrisrm/idea/MTBundledThemesManager.java
Patch:
@@ -155,8 +155,7 @@ public static void saveTheme(final MTBundledTheme customTheme) {
             MaterialThemeBundle.message("SaveThemeDialog.title"),
             "xml"),
         (Project) null);
-    final VirtualFileWrapper target = saveFileDialog.save(null,
-        MaterialThemeBundle.message("SaveThemeDialog.filename"));
+    final VirtualFileWrapper target = saveFileDialog.save(null, customTheme.getThemeId() + ".xml");
 
     if (target != null) {
       final VirtualFile targetFile = target.getVirtualFile(true);

File: src/main/java/com/chrisrm/idea/config/ui/load/MTLoadCustomThemeComboBoxAction.java
Patch:
@@ -118,8 +118,8 @@ private void loadTheme(final VirtualFile virtualFile) {
         mtCustomThemeForm.setFormState(customThemeConfig);
         Messages.showDialog((Project) null,
             String.format(MaterialThemeBundle.message("MTCustomThemeForm.loadFromButton.success"), virtualFile.getName()),
-            "Import Successful",
-            new String[]{"OK"},
+            MaterialThemeBundle.message("MTCustomThemeForm.loadFromButton.importSuccess"),
+            new String[]{MaterialThemeBundle.message("common.ok")},
             0,
             Messages.getInformationIcon());
       }

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -662,6 +662,7 @@ private static void applyFonts() {
       // Tree font size
       final Font font = lookAndFeelDefaults.getFont("Tree.font");
       lookAndFeelDefaults.put("Tree.font", font.deriveFont((float) treeFontSize));
+      LafManager.getInstance().updateUI();
     }
   }
   //endregion

File: src/main/java/com/chrisrm/idea/MTBundledThemesManager.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2019 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -112,6 +112,8 @@ private static MTBundledTheme loadBundledTheme(@NonNls final String resource, fi
     }
 
     @NonNls final XStream xStream = new XStream(new DomDriver());
+    XStream.setupDefaultSecurity(xStream);
+    xStream.allowTypesByWildcard(new String[]{"com.chrisrm.idea.themes.models.*"});
     xStream.alias("mtTheme", MTDarkBundledTheme.class);
     xStream.alias("color", MTThemeColor.class);
 

File: src/main/java/com/chrisrm/idea/icons/DirIcon.java
Patch:
@@ -41,7 +41,7 @@ public class DirIcon implements Icon {
   }
 
   @SuppressWarnings("unused")
-  DirIcon(final Icon icon) {
+  public DirIcon(final Icon icon) {
     this(icon, icon);
   }
 

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -113,7 +113,7 @@ private static void colorOpenDirectories(final PresentationData data) {
   private static void setOpenDirectoryIcon(final PresentationData data, final VirtualFile file, final Project project) {
     if (data.getIcon(true) instanceof DirIcon) {
       final Icon openedIcon = ((DirIcon) Objects.requireNonNull(data.getIcon(true))).getOpenedIcon();
-      data.setIcon(openedIcon);
+      data.setIcon(new DirIcon(openedIcon));
     } else if (ProjectRootManager.getInstance(project).getFileIndex().isExcluded(file)) {
       data.setIcon(MTIcons.EXCLUDED);
     } else if (ProjectRootsUtil.isModuleContentRoot(file, project)) {

File: src/main/java/com/chrisrm/idea/wizard/steps/MTWizardAccentPanel.java
Patch:
@@ -84,7 +84,7 @@ private void accentColorChooserActionPerformed(final ActionEvent e) {
   private void initComponents() {
     // JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents
     // Generated using JFormDesigner non-commercial license
-    ResourceBundle bundle = ResourceBundle.getBundle("messages.MTWizardBundle");
+    final ResourceBundle bundle = ResourceBundle.getBundle("messages.MTWizardBundle");
     scrollPane = new JBScrollPane();
     content = new JPanel();
     accentColorPanel = new JPanel();

File: src/main/java/com/chrisrm/idea/MTAnalytics.java
Patch:
@@ -72,6 +72,7 @@ public final class MTAnalytics {
   public static final String COMPACT_TABLES = "CompactTables";
   public static final String MATERIAL_PSI_ICONS = "PsiIcons";
   public static final String MATERIAL_FILE_ICONS = "FileIcons";
+  public static final String TAB_HIGHLIGHT_POSITION = "TabHighlightPosition";
   @NonNls
   private static final String MIXPANEL_KEY = "mixpanelKey";
 

File: src/main/java/com/chrisrm/idea/config/ui/TabHighlightPositions.java
Patch:
@@ -29,6 +29,7 @@
 import org.jetbrains.annotations.NonNls;
 
 public enum TabHighlightPositions {
+  DEFAULT("Default"),
   BOTTOM("Bottom"),
   TOP("Top"),
   LEFT("Left"),

File: src/main/java/com/chrisrm/idea/status/MTStatusWidget.java
Patch:
@@ -89,7 +89,7 @@ private static Font getWidgetFont() {
         return font.deriveFont(attributes);
       }
     }
-    return JBUI.Fonts.label(12);
+    return JBUI.Fonts.create(Font.DIALOG, 12);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/notifications/Notify.java
Patch:
@@ -136,7 +136,7 @@ private static void showFullNotification(final Project project, final Notificati
     {
       final IdeFrame frame = WindowManager.getInstance().getIdeFrame(project);
       final Rectangle bounds = frame.getComponent().getBounds();
-      final RelativePoint target = new RelativePoint(frame.getComponent(), new Point(bounds.x + bounds.width, 0));
+      final RelativePoint target = new RelativePoint(frame.getComponent(), new Point(bounds.x + bounds.width, 20));
 
       try {
         // Create a notification balloon using the manager

File: src/main/java/com/chrisrm/idea/MTHackComponent.java
Patch:
@@ -49,7 +49,7 @@ public final class MTHackComponent implements BaseComponent {
   static {
     hackTitleLabel();
     //    hackSpeedSearch();
-    //    hackSearchTextField();
+    hackSearchTextField();
     hackPluginManagerNew();
     //    hackIntelliJFailures();
     hackNewScreenHardcodedColor();

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -228,13 +228,11 @@ private static void replaceButtons(final UIDefaults defaults) {
   private static void replaceTextFields(final UIDefaults defaults) {
     defaults.put("TextFieldUI", MTTextFieldUI.class.getName());
     defaults.put(MTTextFieldUI.class.getName(), MTTextFieldUI.class);
-    defaults.put("com.intellij.ide.ui.laf.darcula.ui.DarculaTextFieldUI", MTTextFieldUI.class);
 
     defaults.put("PasswordFieldUI", MTPasswordFieldUI.class.getName());
     defaults.put(MTPasswordFieldUI.class.getName(), MTPasswordFieldUI.class);
 
     defaults.put("TextField.border", new MTTextBorder());
-    defaults.put("com.intellij.ide.ui.laf.darcula.ui.DarculaTextBorder", new MTTextBorder());
     defaults.put("PasswordField.border", new MTTextBorder());
   }
 

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -454,7 +454,6 @@ public void resetSettings() {
   public boolean needsRestart(final MTForm form) {
     boolean modified = isMaterialDesignChanged(form.isMaterialDesign());
     modified = modified || isThemedScrollbarsChanged(form.isThemedScrollbars());
-    modified = modified || isMaterialIconsChanged(form.isUseMaterialIcons());
     modified = modified || isMaterialThemeChanged(form.isMaterialTheme());
     modified = modified || isAccentScrollbarsChanged(form.isAccentScrollbars());
 

File: src/main/java/com/chrisrm/idea/actions/MTMaterialIconsAction.java
Patch:
@@ -42,7 +42,7 @@ public boolean isSelected(@NotNull final AnActionEvent e) {
 
   @Override
   public void setSelected(@NotNull final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().toggleMaterialIcons();
+    MTThemeManager.toggleMaterialIcons();
     MTAnalytics.getInstance().trackValue(MTAnalytics.MATERIAL_ICONS, state);
 
     IconLoader.clearCache();

File: src/main/java/com/chrisrm/idea/themes/themes/MTDeepOceanTheme.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.jetbrains.annotations.NotNull;
 
-import javax.swing.plaf.*;
+import javax.swing.plaf.ColorUIResource;
 import java.awt.*;
 
 public final class MTDeepOceanTheme extends MTAbstractTheme {
@@ -55,7 +55,7 @@ public ColorUIResource getTextColorResource() {
 
   @Override
   public ColorUIResource getSelectionBackgroundColorResource() {
-    return new ColorUIResource(new Color(0x50717CB4, true));
+    return new ColorUIResource(0x232632);
   }
 
   @Override

File: src/main/java/icons/MTIcons.java
Patch:
@@ -43,7 +43,6 @@ public final class MTIcons {
   public static final Icon TEST = load("/icons/mt/modules/testRootOpen.svg");
   public static final Icon SEARCH_WITH_HISTORY_HOVERED = load("/icons/actions/searchWithHistoryHovered.svg");
   public static final Icon SEARCH_WITH_HISTORY = load("/icons/actions/searchWithHistory.svg");
-  public static final Icon SEARCH_HOVERED = load("/icons/actions/searchHovered.svg");
   public static final Icon SEARCH = load("/icons/actions/search.svg");
   public static final Icon CLEAR = load("/icons/actions/clear.svg");
 

File: src/main/java/com/chrisrm/idea/themes/themes/MTAbstractTheme.java
Patch:
@@ -384,7 +384,6 @@ private static Set<String> getBackgroundResources() {
             "TabbedPane.mt.tab.background",
             "Table.background",
             "Table.gridColor",
-            "TextArea.background",
             "TextField.background",
             "TextField.borderColor",
             "TextField.focusedBorderColor",
@@ -671,6 +670,7 @@ private static Set<String> getSecondaryBackgroundResources() {
             "Separator.separatorColor",
             "Slider.tickColor",
             "Table.lightSelectionInactiveBackground",
+            "TextArea.background",
             "ToolWindow.active.Header.background",
             "ToolWindow.Header.background",
             "ToolWindow.header.active.background",

File: src/main/java/com/chrisrm/idea/themes/themes/OneLightTheme.java
Patch:
@@ -57,7 +57,7 @@ public ColorUIResource getSelectionBackgroundColorResource() {
 
   @Override
   public ColorUIResource getSelectionForegroundColorResource() {
-    return new ColorUIResource(0xFFFFFF);
+    return new ColorUIResource(0x232324);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -79,7 +79,7 @@ public final class MTConfig implements PersistentStateComponent<MTConfig>,
   public static final int MIN_INDICATOR_THICKNESS = 1;
   public static final int MAX_TABS_HEIGHT = 60;
   public static final int DEFAULT_LINE_HEIGHT = 18;
-  public static final int MIN_TABS_HEIGHT = DEFAULT_LINE_HEIGHT;
+  public static final int MIN_TABS_HEIGHT = 10;
   public static final int MAX_TREE_INDENT = 40;
   public static final int MIN_TREE_INDENT = 0;
   public static final int MAX_SIDEBAR_HEIGHT = 36;

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -105,7 +105,6 @@ public String getComponentName() {
     return getClass().getName();
   }
 
-
   /**
    * Called before Material Settings are changed
    *
@@ -118,7 +117,6 @@ void onBeforeSettingsChanged(final MTConfig mtConfig, final MTForm form) {
     restartIdeIfNecessary(mtConfig, form);
   }
 
-
   /**
    * Restart IDE if necessary (ex: material design components)
    *
@@ -150,6 +148,8 @@ void onSettingsChanged() {
     MTTreeUI.resetIcons();
     MTSelectedTreeIndicatorImpl.resetCache();
 
+    ApplicationManager.getApplication().runWriteAction(UIReplacer::patchUI);
+
     if (willRestartIde) {
       MTUiUtils.restartIde();
     }

File: src/main/java/com/chrisrm/idea/lafs/MTDarkLaf.java
Patch:
@@ -87,7 +87,7 @@ private static void installDarculaDefaults(@NonNls final UIDefaults defaults) {
   public UIDefaults getDefaults() {
     final UIDefaults defaults = super.getDefaults();
 
-    mtLafInstaller.installDefaults(defaults);
+    MTLafInstaller.installDefaults(defaults);
     // Install darcula defaults
     installDarculaDefaults(defaults);
     // Install material defaults

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -132,7 +132,7 @@ public final void installMTDefaults(final UIDefaults defaults) {
    * @param defaults of type UIDefaults
    */
   @SuppressWarnings("DuplicateStringLiteralInspection")
-  final void installDefaults(@NonNls final UIDefaults defaults) {
+  static void installDefaults(@NonNls final UIDefaults defaults) {
     defaults.put("Caret.width", 2);
     defaults.put("Border.width", 2);
     defaults.put("CellEditor.border.width", 2);

File: src/main/java/com/chrisrm/idea/lafs/MTLightLaf.java
Patch:
@@ -85,7 +85,7 @@ private static void installLightDefaults(@NonNls final UIDefaults defaults) {
   public UIDefaults getDefaults() {
     final UIDefaults defaults = super.getDefaults();
 
-    mtLafInstaller.installDefaults(defaults);
+    MTLafInstaller.installDefaults(defaults);
     // Install darcula defaults
     installLightDefaults(defaults);
     // Install material defaults

File: src/main/java/com/chrisrm/idea/lafs/MTLafInstaller.java
Patch:
@@ -383,8 +383,8 @@ private static void replaceTabbedPanes(final UIDefaults defaults) {
     defaults.put("TabbedPaneUI", MTTabbedPaneUI.class.getName());
     defaults.put(MTTabbedPaneUI.class.getName(), MTTabbedPaneUI.class);
 
-    defaults.put("LabelUI", MTLabelUI.class.getName());
-    defaults.put(MTLabelUI.class.getName(), MTLabelUI.class);
+    //    defaults.put("LabelUI", MTLabelUI.class.getName());
+    //    defaults.put(MTLabelUI.class.getName(), MTLabelUI.class);
   }
 
   /**

File: src/main/java/com/chrisrm/idea/themes/MTThemes.java
Patch:
@@ -57,7 +57,7 @@ public enum MTThemes implements MTThemeFacade {
   ONE_LIGHT("ONE_LIGHT", new OneLightTheme(), false),
   SOLARIZED_DARK("SOLARIZED_DARK", new SolarizedDarkTheme(), false),
   SOLARIZED_LIGHT("SOLARIZED_LIGHT", new SolarizedLightTheme(), false),
-  DRACULA("DRACULA", new DraculaTheme(), true);
+  DRACULA("DRACULA", new DraculaTheme(), false);
 
   //  EXTERNAL("EXTERNAL", new MTCustomTheme());
 

File: src/main/java/com/chrisrm/idea/themes/lists/AccentResources.java
Patch:
@@ -65,6 +65,8 @@ public enum AccentResources {
           "CompletionPopup.matchForeground",
           "CompletionPopup.matchSelectedForeground",
           "CompletionPopup.matchSelectionForeground",
+          "ScrollBar.Thumb.Hovered.background",
+          "ScrollBar.Thumb.NonOpaque.Hovered.background",
           "Component.focusColor",
           "EditorPane.caretForeground",
           "EditorTabs.active.underlineColor",

File: src/main/java/com/chrisrm/idea/themes/themes/MTAbstractTheme.java
Patch:
@@ -348,6 +348,7 @@ private static Set<String> getBackgroundResources() {
             "NavBar.borderColor",
             "OptionPane.background",
             "PasswordField.background",
+            "Plugins.background",
             "Plugins.SearchField.background",
             "Popup.Advertiser.background",
             "Popup.Border.inactiveColor",
@@ -532,7 +533,6 @@ private static Set<String> getSelectionBackgroundResources() {
             "List.selectionBackground",
             "Menu.selectionBackground",
             "MenuItem.selectionBackground",
-            "Plugins.selectionBackground",
             "RadioButtonMenuItem.selectionBackground",
             "TabbedPane.selected",
             "WelcomeScreen.Projects.selectionBackground",
@@ -641,7 +641,6 @@ private static Set<String> getSecondaryBackgroundResources() {
             "ParameterInfo.background",
             "ParameterInfo.borderColor",
             "Plugins.SectionHeader.background",
-            "Plugins.background",
             "Popup.separatorColor",
             "ProgressBar.trackColor",
             "Separator.background",
@@ -746,6 +745,7 @@ private static Set<String> getTableSelectedResources() {
             "FormattedTextField.selectionBackground",
             "ParameterInfo.borderColor",
             "PasswordField.selectionBackground",
+            "Plugins.selectionBackground",
             "Plugins.Tab.active.background",
             "Plugins.Tab.hover.background",
             "Table.focusCellBackground",

File: src/main/java/com/chrisrm/idea/themes/themes/MTLighterTheme.java
Patch:
@@ -100,7 +100,7 @@ public ColorUIResource getHighlightColorResource() {
 
   @Override
   public ColorUIResource getTreeSelectionColorResource() {
-    return new ColorUIResource(new Color(0x50546E7A));
+    return new ColorUIResource(new Color(0x50546E7A, true));
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -609,7 +609,7 @@ private void resetContrast() {
   private void applyCustomTreeIndent() {
     final MTConfig mtConfig = MTConfig.getInstance();
 
-    if (mtConfig.isCustomTreeIndentEnabled) {
+    if (mtConfig.isCustomTreeIndent()) {
       UIManager.put("Tree.leftChildIndent", mtConfig.getLeftTreeIndent());
       UIManager.put("Tree.rightChildIndent", mtConfig.getRightTreeIndent());
     } else {

File: src/test/java/com/chrisrm/idea/MTThemeManagerTest.java
Patch:
@@ -292,7 +292,7 @@ public void testApplyAccents() {
     // Setup
 
     // Run the test
-    mtThemeManagerUnderTest.applyAccents();
+    mtThemeManagerUnderTest.applyAccents(true);
 
     // Verify the results
   }

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -333,7 +333,7 @@ public void activate(final MTThemeFacade mtTheme, final boolean switchColorSchem
 
     // Save a reference to the theme
     PropertiesComponent.getInstance().setValue(getSettingsPrefix() + ".theme", newTheme.getThemeId());
-    //    IconLoader.clearCache();
+    IconLoader.clearCache();
 
     // apply different settings
     applyContrast(false);
@@ -349,7 +349,7 @@ public void activate(final MTThemeFacade mtTheme, final boolean switchColorSchem
 
     // Monochrome filter and co
     IconManager.applyFilter();
-    //    LafManager.getInstance().updateUI();
+    LafManager.getInstance().updateUI();
 
     // Custom UI Patches
     UIReplacer.patchUI();

File: src/main/java/com/chrisrm/idea/actions/MTBiggerTabsAction.java
Patch:
@@ -33,7 +33,7 @@
 
 public final class MTBiggerTabsAction extends AnAction {
 
-  public static final int RECOMMENDED_HEIGHT = 50;
+  public static final int RECOMMENDED_HEIGHT = 42;
 
   @Override
   public void actionPerformed(final AnActionEvent e) {

File: src/main/java/com/chrisrm/idea/actions/accents/MTAbstractAccentAction.java
Patch:
@@ -45,6 +45,7 @@ public final void actionPerformed(final AnActionEvent e) {
 
     final String accentColor = getAccentColor();
     MTConfig.getInstance().setAccentColor(accentColor);
+
     MTThemeManager.getInstance().applyAccents();
     UIReplacer.patchUI();
 

File: src/main/java/com/chrisrm/idea/annotators/JSAnnotator.java
Patch:
@@ -26,14 +26,13 @@
 
 package com.chrisrm.idea.annotators;
 
-import com.intellij.lang.annotation.Annotator;
 import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
 import com.intellij.openapi.editor.colors.TextAttributesKey;
 import com.intellij.psi.PsiElement;
 import com.intellij.util.ObjectUtils;
 import org.jetbrains.annotations.NotNull;
 
-public class JSAnnotator extends BaseAnnotator implements Annotator {
+public class JSAnnotator extends BaseAnnotator {
 
   private static final TextAttributesKey JSKEYWORD = ObjectUtils.notNull(TextAttributesKey.find("JS.KEYWORD"),
       DefaultLanguageHighlighterColors.KEYWORD);

File: src/main/java/com/chrisrm/idea/annotators/JavaAnnotator.java
Patch:
@@ -26,14 +26,13 @@
 
 package com.chrisrm.idea.annotators;
 
-import com.intellij.lang.annotation.Annotator;
 import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
 import com.intellij.openapi.editor.colors.TextAttributesKey;
 import com.intellij.psi.PsiElement;
 import com.intellij.util.ObjectUtils;
 import org.jetbrains.annotations.NotNull;
 
-public class JavaAnnotator extends BaseAnnotator implements Annotator {
+public class JavaAnnotator extends BaseAnnotator {
 
   public static final TextAttributesKey JAVA_KEYWORD = ObjectUtils.notNull(TextAttributesKey.find("JAVA_KEYWORD"),
       DefaultLanguageHighlighterColors.KEYWORD);

File: src/main/java/com/chrisrm/idea/annotators/settings/TSColorSettings.java
Patch:
@@ -29,6 +29,7 @@
 import com.chrisrm.idea.annotators.TSAnnotator;
 import com.intellij.icons.AllIcons;
 import com.intellij.lang.Language;
+import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;
 import com.intellij.openapi.editor.colors.TextAttributesKey;
 import com.intellij.openapi.fileTypes.SyntaxHighlighter;
 import com.intellij.openapi.options.colors.AttributesDescriptor;
@@ -64,6 +65,7 @@ public class TSColorSettings extends BaseColorSettings {
   private static Map<String, TextAttributesKey> createAdditionalHlAttrs() {
     final Map<String, TextAttributesKey> descriptors = new THashMap<>();
     descriptors.put("private", PRIVATE);
+    descriptors.put("class", DefaultLanguageHighlighterColors.CLASS_NAME);
 
     return descriptors;
   }

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -106,7 +106,7 @@ public class MTConfig implements PersistentStateComponent<MTConfig>, Cloneable {
   public boolean darkTitleBar = false;
   public ArrowsStyles arrowsStyle = ArrowsStyles.MATERIAL;
   public IndicatorStyles indicatorStyle = IndicatorStyles.BORDER;
-  public boolean useMaterialFont = false;
+  public boolean useMaterialFont = true;
   public int tabOpacity = 50;
   public boolean compactDropdowns = false;
   public boolean monochromeIcons = false;
@@ -207,7 +207,7 @@ public void resetSettings() {
     arrowsStyle = ArrowsStyles.MATERIAL;
     indicatorStyle = IndicatorStyles.BORDER;
     indicatorThickness = 2;
-    useMaterialFont = false;
+    useMaterialFont = true;
     tabOpacity = 50;
     compactDropdowns = false;
     monochromeIcons = false;

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -75,7 +75,7 @@ public final class MTThemeManager {
   public static final int DEFAULT_SIDEBAR_HEIGHT = 28;
   public static final int DEFAULT_INDENT = 6;
   public static final int DEFAULT_FONT_SIZE = JBUI.scale(13);
-  public static final String DEFAULT_FONT = "Roboto Material";
+  public static final String DEFAULT_FONT = "Roboto";
   public static final String DEFAULT_MONO_FONT = "Fira Code";
 
   public MTThemeManager() {
@@ -428,7 +428,7 @@ private void applyFonts() {
     final UIDefaults lookAndFeelDefaults = UIManager.getLookAndFeelDefaults();
     final int treeFontSize = JBUI.scale(MTConfig.getInstance().getTreeFontSize());
 
-    final boolean useMaterialFont = MTConfig.getInstance().isUseMaterialFont();
+    final boolean useMaterialFont = Registry.get("bigger.font.in.project.view").asBoolean();
 
     if (uiSettings.getOverrideLafFonts()) {
       applySettingsFont(lookAndFeelDefaults, uiSettings.getFontFace(), uiSettings.getFontSize());

File: src/main/java/com/chrisrm/idea/icons/MTFileIconProvider.java
Patch:
@@ -139,7 +139,7 @@ private DirIcon loadDirIcon(final FileInfo file, final Association association)
 
     try {
       final String iconPath = association.getIcon();
-      icon = new DirIcon(IconLoader.getIcon("/icons/foldersOpen" + iconPath), IconLoader.getIcon("/icons/folders" + iconPath));
+      icon = new DirIcon(IconLoader.getIcon("/icons/folders" + iconPath), IconLoader.getIcon("/icons/foldersOpen" + iconPath));
     } catch (final Exception e) {
       e.printStackTrace();
     }

File: src/main/java/com/chrisrm/idea/icons/tinted/TintedIconsService.java
Patch:
@@ -121,8 +121,6 @@ public final class TintedIconsService {
       "/icons/nodes/TreeClosed.svg",
       "/icons/nodes/folderClosed.svg",
       "/icons/nodes/folderOpen.svg",
-      "/icons/plugins/datagrip/objectGroup.svg",
-      "/icons/plugins/datagrip/table.svg",
       "/icons/mac/tree_white_down_arrow.svg",
       "/icons/mac/tree_white_right_arrow.svg",
       "/icons/mac/material/down.svg",

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -798,6 +798,7 @@ protected String[] getHighlightResources() {
         "ProgressBar.selectionBackground",
         "Outline.focusedColor",
         "Github.List.tallRow.selectionBackground.unfocused",
+        "DebuggerTabs.active.background",
         "MemoryIndicator.usedColor"
     };
   }

File: src/main/java/com/chrisrm/idea/themes/lists/ContrastResources.java
Patch:
@@ -53,7 +53,6 @@ public final class ContrastResources {
       "TabbedPane.darkShadow",
       "TabbedPane.shadow",
       "TabbedPane.borderColor",
-      //      "StatusBar.background",
       "SplitPane.highlight",
       "ActionToolbar.background"
   };

File: src/main/java/com/chrisrm/idea/ui/MTStatusBarUI.java
Patch:
@@ -42,9 +42,9 @@ public static ComponentUI createUI(final JComponent c) {
     return new MTStatusBarUI();
   }
 
-  @Override
-  public void paint(final Graphics g, final JComponent c) {
-  }
+  //  @Override
+  //  public void paint(final Graphics g, final JComponent c) {
+  //  }
 
   @Override
   public void installUI(final JComponent c) {

File: src/main/java/com/chrisrm/idea/actions/accents/MTAbstractAccentAction.java
Patch:
@@ -50,6 +50,8 @@ public final void actionPerformed(final AnActionEvent e) {
     IconReplacer.replaceIcons(AllIcons.class, "/icons");
     ActionToolbarImpl.updateAllToolbarsImmediately();
     MTAnalytics.getInstance().track(MTAnalytics.ACCENT, accentColor);
+
+    MTConfig.getInstance().fireChanged();
   }
 
   /**

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -569,6 +569,7 @@ protected String[] getSelectionForegroundResources() {
         "Table.selectionForeground",
         "TextField.selectionForeground",
         "PasswordField.selectionForeground",
+        "Table.focusCellForeground",
         "Button.mt.selectedForeground",
         "TextArea.selectionForeground",
         "List.selectionForeground",
@@ -673,7 +674,6 @@ protected String[] getContrastResources() {
         "Table.stripedBackground",
         "ToolWindow.header.tab.selected.background",
         "ToolWindow.header.tab.selected.active.background",
-        "Table.focusCellBackground",
         "ScrollBar.thumb",
         "EditorPane.background",
         "ToolBar.background",
@@ -701,6 +701,7 @@ protected String[] getTableSelectedResources() {
         "TextField.selectionBackground",
         "PasswordField.selectionBackground",
         "FormattedTextField.selectionBackground",
+        "Table.focusCellBackground",
         "ComboBox.selectionBackground",
         "TextArea.selectionBackground",
         "TextPane.selectionBackground",
@@ -799,7 +800,7 @@ private void buildResources(final String[] resources, final String color) {
 
   private void buildNotificationsColors() {
     UIManager.put("Notifications.errorBackground", new JBColor(new ColorUIResource(0xef5350), new ColorUIResource(0xb71c1c)));
-    UIManager.put("Notifications.warnBackground", new JBColor(new ColorUIResource(0xFFD54F), new ColorUIResource(0xFFF59D)));
+    UIManager.put("Notifications.warnBackground", new JBColor(new ColorUIResource(0xFFD54F), new ColorUIResource(0x8D6E63)));
     UIManager.put("Notifications.infoBackground", new JBColor(new ColorUIResource(0x66BB6A), new ColorUIResource(0x1B5E20)));
   }
 }

File: src/main/java/com/chrisrm/idea/icons/tinted/TintedIconsService.java
Patch:
@@ -40,7 +40,7 @@
 
 public final class TintedIconsService {
 
-  public static final String[] TINTED_ICONS = new String[]{
+  public static final String[] TINTED_ICONS = new String[] {
       "/icons/actions/closeHovered.svg",
       "/icons/actions/closeNewHovered.svg",
       "/icons/general/expandAllHover.svg",

File: src/main/java/com/chrisrm/idea/themes/lists/ContrastResources.java
Patch:
@@ -52,7 +52,7 @@ public final class ContrastResources {
       "TabbedPane.darkShadow",
       "TabbedPane.shadow",
       "TabbedPane.borderColor",
-      "StatusBar.background",
+      //      "StatusBar.background",
       "SplitPane.highlight",
       "ActionToolbar.background"
   };

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -449,6 +449,7 @@ protected String[] getBackgroundResources() {
         "Borders.ContrastBorderColor",
         "tooltips.actions.settings.icon.background.color",
         "Button.darcula.disabledOutlineColor",
+        "EditorTabs.inactive.maskColor",
         "WelcomeScreen.borderColor",
         "darcula.background",
         "intellijlaf.background",
@@ -685,7 +686,6 @@ protected String[] getContrastResources() {
         "SearchEverywhere.SearchField.background",
         "SearchEverywhere.Advertiser.background",
         "ToolWindow.Button.selectedBackground",
-        "EditorTabs.active.background",
         "TitlePane.background",
         "WelcomeScreen.captionBackground",
         "material.contrast"
@@ -709,7 +709,7 @@ protected String[] getTableSelectedResources() {
         "Button.darcula.focusedBorderColor",
         "Button.darcula.defaultFocusedBorderColor",
         "ToolWindow.Button.hoverBackground",
-        "EditorTabs.inactive.maskColor",
+        "EditorTabs.active.background",
         "Button.mt.selection.color2",
         "Button.mt.selection.color1"
     };

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -128,7 +128,7 @@ private void setOpenDirectoryIcon(final PresentationData data, final VirtualFile
 
   private Icon getDirectoryIcon() {
     if (directory == null) {
-      directory = MTIcons.Nodes2.Folder;
+      directory = MTIcons.Nodes2.FolderOpen;
     }
     return directory;
   }

File: src/main/java/icons/MTIcons.java
Patch:
@@ -118,6 +118,7 @@ public static class Nodes2 {
     public static Icon TabPin = TintedIconsService.getAccentIcon("/icons/nodes/tabPin.svg");
 
     public static Icon Folder = TintedIconsService.getThemedIcon("/icons/nodes/folder.svg");
+    public static Icon FolderOpen = TintedIconsService.getThemedIcon("/icons/nodes/folderOpen.svg");
   }
 
   public static class Process {

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -497,6 +497,7 @@ protected String[] getTextResources() {
         "Menu.acceleratorForeground",
         "text",
         "textText",
+        "Label.textForeground",
         "textInactiveText",
         "infoText",
         "controlText",

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -523,10 +523,10 @@ public static void patchPluginPage() throws Exception {
       }
 
       StaticPatcher.setFinalStatic(PluginManagerConfigurableNew.class, "MAIN_BG_COLOR", UIUtil.getPanelBackground());
-      StaticPatcher.setFinalStatic(PluginManagerConfigurableNew.class, "DisabledColor", UIUtil.getLabelDisabledForeground());
+      StaticPatcher.setFinalStatic(PluginManagerConfigurableNew.class, "DisabledColor", UIUtil.getLabelTextForeground());
 
       final Class<?> CellPluginComponentCls = Class.forName("com.intellij.ide.plugins.newui.CellPluginComponent");
-      StaticPatcher.setFinalStatic(CellPluginComponentCls, "HOVER_COLOR", UIUtil.getListSelectionBackground());
+      StaticPatcher.setFinalStatic(CellPluginComponentCls, "HOVER_COLOR", UIUtil.getTableSelectionBackground());
       StaticPatcher.setFinalStatic(CellPluginComponentCls, "GRAY_COLOR", UIUtil.getLabelForeground());
     }
 

File: src/main/java/com/chrisrm/idea/icons/patchers/AccentTintedIconsPatcher.java
Patch:
@@ -135,9 +135,9 @@ public static void clearCache() {
   @Nullable
   @Override
   public String patchPath(final String path, final ClassLoader classLoader) {
-    if (getInstance() == null || !getInstance().isUseMaterialIcons()) {
-      return null;
-    }
+    //    if (getInstance() == null || !getInstance().isUseMaterialIcons()) {
+    //      return null;
+    //    }
     final String vPath = path.replace(".svg", "").replace(".png", "");
 
     if (CACHE.containsKey(vPath)) {

File: src/main/java/com/chrisrm/idea/icons/patchers/ThemedTintedIconsPatcher.java
Patch:
@@ -72,9 +72,9 @@ public static void clearCache() {
   @Nullable
   @Override
   public String patchPath(final String path, final ClassLoader classLoader) {
-    if (getInstance() == null || !getInstance().isUseMaterialIcons()) {
-      return null;
-    }
+    //    if (getInstance() == null || !getInstance().isUseMaterialIcons()) {
+    //      return null;
+    //    }
     final String vPath = path.replace(".svg", "").replace(".png", "");
 
     if (CACHE.containsKey(vPath)) {

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -433,6 +433,9 @@ protected String[] getBackgroundResources() {
         "SearchEverywhere.SearchField.Border.color",
         "TextField.focusedBorderColor",
         "ComboBox.darcula.nonEditableBackground",
+        "NavBar.borderColor",
+        "Borders.color",
+        "Borders.ContrastBorderColor",
         "darcula.background",
         "intellijlaf.background",
         "material.background"

File: src/main/java/com/chrisrm/idea/themes/MTLighterTheme.java
Patch:
@@ -120,7 +120,7 @@ public String getSelectionForegroundColorString() {
 
   @Override
   public String getSelectionBackgroundColorString() {
-    return "546E7A";
+    return "80CBC440";
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/MTUpdatesComponent.java
Patch:
@@ -40,7 +40,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import javax.swing.event.HyperlinkEvent;
+import javax.swing.event.*;
 import java.net.URL;
 
 public final class MTUpdatesComponent extends AbstractProjectComponent {
@@ -91,7 +91,7 @@ public void projectOpened() {
     if (!application.isAgreementShown()) {
       final Notification notification = createStatsNotification(
           (notification1, event) -> {
-            MTConfig.getInstance().setAllowDataCollection(event.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED));
+            MTConfig.getInstance().setAllowDataCollection(event.getDescription().equals("allow"));
             PropertiesComponent.getInstance().setValue(MTApplicationComponent.SHOW_STATISTICS_AGREEMENT, true);
             notification1.expire();
           });

File: src/main/java/com/chrisrm/idea/icons/patchers/MTIconPatcher.java
Patch:
@@ -27,7 +27,6 @@
 package com.chrisrm.idea.icons.patchers;
 
 import com.intellij.openapi.util.IconPathPatcher;
-import com.vladium.util.ResourceLoader;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -77,7 +76,7 @@ public String patchPath(final String path, final ClassLoader classLoader) {
    */
   public URL getSVG(final String path) {
     final String svgFile = getReplacement(path).replace(".png", ".svg");
-    return ResourceLoader.getResource(svgFile);
+    return getClass().getResource(svgFile);
   }
 
   /**
@@ -88,7 +87,7 @@ public URL getSVG(final String path) {
    */
   public URL getPNG(final String path) {
     final String replacement = getReplacement(path).replace(".svg", ".png");
-    return ResourceLoader.getResource(replacement);
+    return getClass().getResource(replacement);
   }
 
   @NotNull

File: src/main/java/com/chrisrm/idea/ui/MTRootPaneUI.java
Patch:
@@ -65,6 +65,7 @@ public void installUI(final JComponent c) {
 
     if (SystemInfo.isMac) {
       if (darkTitleBar) {
+        Registry.get("ide.mac.allowDarkWindowDecorations").setValue(themeIsDark);
         c.putClientProperty("jetbrains.awt.windowDarkAppearance", themeIsDark);
         c.putClientProperty("jetbrains.awt.transparentTitleBarAppearance", true);
       } else {

File: src/main/java/com/chrisrm/idea/MTApplicationComponent.java
Patch:
@@ -60,7 +60,7 @@ private void checkWizard() {
     final boolean isWizardShown = PropertiesComponent.getInstance().getBoolean(MT_IS_SHOWN_WIZARD);
     if (!isWizardShown) {
       new MTWizardDialog(new MTWizardStepsProvider()).show();
-      PropertiesComponent.getInstance().getBoolean(MT_IS_SHOWN_WIZARD);
+      PropertiesComponent.getInstance().setValue(MT_IS_SHOWN_WIZARD, true);
     }
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTDeepOceanTheme.java
Patch:
@@ -35,7 +35,7 @@ public final class MTDeepOceanTheme extends MTAbstractTheme {
   public static final String TEXT = "4B526D"; // 96, 125, 139
   public static final String SELECTION_BACKGROUND = "717CB4"; // 84, 110, 122
   public static final String SELECTION_FOREGROUND = "FFFFFF";
-  public static final String DISABLED = "232324"; // 65, 89, 103
+  public static final String DISABLED = "292D3E"; // 65, 89, 103
 
   public MTDeepOceanTheme() {
     super("mt.deepocean", "Material Deep Ocean", true, "Material Deep Ocean", "/icons/actions/themes/deepocean.svg");
@@ -85,7 +85,7 @@ public String getHighlightColorString() {
 
   @Override
   public String getSecondBorderColorString() {
-    return "3B3F51";
+    return "0F111A";
   }
 
   @Override
@@ -110,7 +110,7 @@ public String getSecondaryBackgroundColorString() {
 
   @Override
   public String getButtonColorString() {
-    return "3B3F51";
+    return "292D3E";
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/MTDeepOceanTheme.java
Patch:
@@ -35,7 +35,7 @@ public final class MTDeepOceanTheme extends MTAbstractTheme {
   public static final String TEXT = "4B526D"; // 96, 125, 139
   public static final String SELECTION_BACKGROUND = "717CB4"; // 84, 110, 122
   public static final String SELECTION_FOREGROUND = "FFFFFF";
-  public static final String DISABLED = "292D3E"; // 65, 89, 103
+  public static final String DISABLED = "232324"; // 65, 89, 103
 
   public MTDeepOceanTheme() {
     super("mt.deepocean", "Material Deep Ocean", true, "Material Deep Ocean", "/icons/actions/themes/deepocean.svg");

File: src/main/java/com/chrisrm/idea/actions/accents/MTAbstractAccentAction.java
Patch:
@@ -30,6 +30,7 @@
 import com.chrisrm.idea.MTThemeManager;
 import com.chrisrm.idea.icons.IconReplacer;
 import com.chrisrm.idea.ui.indicators.MTSelectedTreeIndicatorImpl;
+import com.chrisrm.idea.utils.UIReplacer;
 import com.intellij.icons.AllIcons;
 import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
@@ -42,6 +43,8 @@ public final void actionPerformed(final AnActionEvent e) {
     MTSelectedTreeIndicatorImpl.resetCache();
     MTConfig.getInstance().setAccentColor(getAccentColor());
     MTThemeManager.getInstance().applyAccents();
+    UIReplacer.patchUI();
+
     IconReplacer.replaceIcons(AllIcons.class, "/icons");
     ActionToolbarImpl.updateAllToolbarsImmediately();
   }

File: src/main/java/com/chrisrm/idea/icons/MTIconReplacerComponent.java
Patch:
@@ -43,8 +43,8 @@ public void initComponent() {
       IconReplacer.replaceIcons(AllIcons.class, "/icons", "");
       IconReplacer.replaceIcons(ImagesIcons.class, "/icons/images", "/org/intellij/images/icons");
       IconReplacer.replaceIcons(PlatformIcons.class, "", "");
-      IconReplacer.replaceIcons(DvcsImplIcons.class, "/icons/plugins/vcs", "");
-      IconReplacer.replaceIcons(VcsLogIcons.class, "/icons/plugins/vcs", "");
+      IconReplacer.replaceIcons(DvcsImplIcons.class, "/icons/plugins/vcs", "/icons");
+      IconReplacer.replaceIcons(VcsLogIcons.class, "/icons/plugins/vcs", "/icons");
     }
   }
 

File: src/main/java/com/chrisrm/idea/icons/tinted/TintedIconsService.java
Patch:
@@ -138,6 +138,7 @@ public final class TintedIconsService {
       "/icons/nodes/TreeClosed.svg",
       "/icons/nodes/folderClosed.svg",
       "/icons/nodes/folderOpen.svg",
+      "/icons/svg/open.svg",
       "/icons/plugins/datagrip/objectGroup.svg",
       "/icons/plugins/datagrip/table.svg",
       "/icons/mac/tree_white_down_arrow.svg",

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -99,7 +99,7 @@ private void installMaterialComponents() {
   }
 
   private void modifyRegistry() {
-    Registry.get("ide.mac.allowDarkWindowDecorations").setValue(0);
+    Registry.get("ide.balloon.shadow.size").setValue(0);
   }
 
   private void installDefaults() {

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -269,7 +269,9 @@ public void activate(final MTThemeFacade mtTheme, final boolean switchColorSchem
     applyCustomTreeIndent();
     applyAccents();
     setBoldTabs();
-
+    // Documentation styles
+    patchStyledEditorKit();
+    
     LafManager.getInstance().updateUI();
 
     applyFonts();

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -34,7 +34,7 @@ public final class MonokaiTheme extends MTAbstractTheme {
   public static final String TEXT = "727072";
   public static final String SELECTION_BACKGROUND = "5B595C";
   public static final String SELECTION_FOREGROUND = "FFFFFF";
-  public static final String DISABLED = "575558";
+  public static final String DISABLED = "3a3a3c";
 
   public MonokaiTheme() {
     super("monokai", "Material Monokai Pro", true, "Monokai Pro", "/icons/actions/themes/monokai.png");

File: src/main/java/com/chrisrm/idea/icons/Associations.java
Patch:
@@ -69,6 +69,7 @@ public Association findAssociationForFile(final FileInfo file) {
       }
     }
 
+    //    if (result != null && (result.getName().equals("Images") || result.getName().equals("SVG"))) {
     if (result != null && result.getName().equals("Images")) {
       try {
         // Icon viewer plugin

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -377,6 +377,8 @@ private void installLightDefaults() {
 
     UIManager.put("TreeUI", DarculaTreeUI.class.getName());
     UIManager.put("OptionButtonUI", DarculaOptionButtonUI.class.getName());
+    UIManager.put("InternalFrameUI", DarculaInternalFrameUI.class.getName());
+    UIManager.put("RootPaneUI", DarculaRootPaneUI.class.getName());
   }
 
   private Icon getIcon(final String icon) {

File: src/main/java/com/chrisrm/idea/plugins/MTPluginPHP.java
Patch:
@@ -36,7 +36,7 @@ public final class MTPluginPHP implements ApplicationComponent {
   public void initComponent() {
     try {
       final Class<?> iconsClass = Class.forName("icons.PhpIcons", false, getClass().getClassLoader());
-      IconReplacer.replaceIcons(iconsClass, "/icons/plugins/php/");
+      IconReplacer.replaceIcons(iconsClass, "/icons/plugins/php/", "/icons");
     } catch (final ClassNotFoundException e) {
       // Suppress
     }

File: src/main/java/com/chrisrm/idea/icons/MTIconReplacerComponent.java
Patch:
@@ -38,9 +38,9 @@ public final class MTIconReplacerComponent implements ApplicationComponent {
   @Override
   public void initComponent() {
     if (MTConfig.getInstance().isUseMaterialIcons()) {
-      IconReplacer.replaceIcons(AllIcons.class, "/icons");
-      IconReplacer.replaceIcons(ImagesIcons.class, "/icons/images");
-      IconReplacer.replaceIcons(PlatformIcons.class, "");
+      IconReplacer.replaceIcons(AllIcons.class, "/icons", "");
+      IconReplacer.replaceIcons(ImagesIcons.class, "/icons/images", "/org/intellij/images/icons");
+      IconReplacer.replaceIcons(PlatformIcons.class, "", "");
     }
   }
 

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -220,6 +220,7 @@ protected String[] getBackgroundResources() {
         "SplitPane.highlight",
         "Tree.background",
         "Popup.Header.inactiveBackground",
+        "Popup.Header.activeBackground",
         "Popup.Border.inactiveColor",
         "Popup.inactiveBorderColor",
         "Popup.preferences.background",
@@ -475,7 +476,7 @@ protected String[] getContrastResources() {
         "ScrollBar.thumb",
         "EditorPane.background",
         "ToolBar.background",
-        "Popup.Header.activeBackground",
+        "Popup.Header.inactiveBackground",
         "Popup.Toolbar.background",
         "Popup.Border.color",
         "Popup.Toolbar.Border.color",

File: src/main/java/com/chrisrm/idea/ui/MTButtonUI.java
Patch:
@@ -191,7 +191,7 @@ private void removeHighlight(final MouseEvent e) {
    * @param b
    */
   @Override
-  protected void installDefaults(final AbstractButton b) {
+  public void installDefaults(final AbstractButton b) {
     super.installDefaults(b);
     final Color background = isDefaultButton(b) ? buttonSelectPrimaryColor() : buttonBackground();
     b.setBackground(background);

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -539,6 +539,7 @@ protected String[] getHighlightResources() {
         "Focus.color",
         "TextField.separatorColor",
         "ProgressBar.halfColor",
+        "Autocomplete.selectionUnfocus",
         "CheckBox.darcula.inactiveFillColor",
         "TableHeader.borderColor",
         "MemoryIndicator.usedColor"
@@ -555,8 +556,7 @@ protected String[] getHighlightResources() {
    */
   protected String[] getTreeSelectionResources() {
     return new String[] {
-        "Tree.selectionBackground",
-        "Autocomplete.selectionUnfocus"
+        "Tree.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -64,7 +64,7 @@ protected String getTreeSelectionColorString() {
 
   @Override
   protected String getHighlightColorString() {
-    return "4A474B";
+    return "59575A";
   }
 
   @Override
@@ -74,7 +74,7 @@ protected String getSecondBorderColorString() {
 
   @Override
   protected String getTableSelectedColorString() {
-    return "5B595C";
+    return "4A474B";
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -40,6 +40,7 @@
 import com.intellij.ui.tabs.impl.JBEditorTabs;
 import com.intellij.ui.tabs.impl.JBEditorTabsPainter;
 import com.intellij.ui.tabs.impl.ShapeTransform;
+import com.intellij.util.ObjectUtils;
 import com.intellij.util.ReflectionUtil;
 import com.intellij.util.messages.MessageBus;
 import com.intellij.util.messages.MessageBusConnection;
@@ -113,6 +114,7 @@ public void selectionChanged(@NotNull final FileEditorManagerEvent event) {
    */
   private void patchPainter(final JBEditorTabs component) {
     final JBEditorTabsPainter painter = ReflectionUtil.getField(JBEditorTabs.class, component, JBEditorTabsPainter.class, "myDarkPainter");
+    final Color accentColor = ObjectUtils.notNull(ColorUtil.fromHex(config.getAccentColor()), DEFAULT_BORDER_COLOR);
 
     if (painter instanceof MTTabsPainter) {
       return;
@@ -125,7 +127,7 @@ private void patchPainter(final JBEditorTabs component) {
 
       // Custom props
       final boolean isColorEnabled = config.isHighlightColorEnabled();
-      final Color borderColor = isColorEnabled ? config.getHighlightColor() : DEFAULT_BORDER_COLOR;
+      final Color borderColor = isColorEnabled ? config.getHighlightColor() : accentColor;
       final int borderThickness = config.getHighlightThickness();
 
       if ("paintSelectionAndBorder".equals(method.getName())) {

File: src/main/java/com/chrisrm/idea/MTHackComponent.java
Patch:
@@ -58,7 +58,7 @@ public class MTHackComponent implements ApplicationComponent {
 
   public MTHackComponent() {
     PropertiesComponent.getInstance().setValue(TABS_HEIGHT, 25, 24);
-    PropertiesComponent.getInstance().setValue(BOLD_TABS, true, false);
+    PropertiesComponent.getInstance().setValue(BOLD_TABS, false, true);
     PropertiesComponent.getInstance().setValue(BORDER_POPUP, true, false);
   }
 

File: src/main/java/com/chrisrm/idea/themes/SolarizedDarkTheme.java
Patch:
@@ -37,7 +37,7 @@ public final class SolarizedDarkTheme extends MTAbstractTheme {
   public static final String DISABLED = "083F4D"; // 65, 89, 103
 
   public SolarizedDarkTheme() {
-    super("solarized.dark", "Solarized Dark", true, "Solarized Dark");
+    super("solarized.dark", "Material Solarized Dark", true, "Solarized Dark");
   }
 
   @NotNull

File: src/main/java/com/chrisrm/idea/themes/SolarizedLightTheme.java
Patch:
@@ -37,7 +37,7 @@ public final class SolarizedLightTheme extends MTAbstractTheme {
   public static final String DISABLED = "E3DCC9"; // 65, 89, 103
 
   public SolarizedLightTheme() {
-    super("solarized.light", "Solarized Light", false, "Solarized Light");
+    super("solarized.light", "Material Solarized Light", false, "Solarized Light");
   }
 
   @NotNull
@@ -54,7 +54,7 @@ public String getDisabled() {
 
   @Override
   protected String getNotificationsColorString() {
-    return "002b36";
+    return "EDE8D4";
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -40,8 +40,6 @@
 import com.intellij.ide.ui.laf.darcula.DarculaTableHeaderUI;
 import com.intellij.ide.ui.laf.darcula.DarculaTableSelectedCellHighlightBorder;
 import com.intellij.ide.ui.laf.darcula.ui.*;
-import com.intellij.openapi.actionSystem.impl.ChameleonAction;
-import com.intellij.ide.ui.laf.darcula.ui.DarculaMenuItemBorder;
 import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.components.ApplicationComponent;
 import com.intellij.openapi.project.Project;

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -105,7 +105,7 @@ static void patchStatusBar() throws Exception {
         StaticPatcher.setFinalStatic(Gray.class, "_145", alphaGray);
         //        StaticPatcher.setFinalStatic(Gray.class, "_255", alphaGray);
         StaticPatcher.setFinalStatic(Gray.class, "_201", alphaGray);
-        StaticPatcher.setFinalStatic(Gray.class, "x39", gray.withAlpha(25));
+        //        StaticPatcher.setFinalStatic(Gray.class, "x39", gray.withAlpha(25));
 
         // Quick info border
         StaticPatcher.setFinalStatic(Gray.class, "_90", gray.withAlpha(25));

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -267,15 +267,15 @@ private static void replaceToolBalloons() throws Exception {
       declaredConstructor.setAccessible(true);
       final Color errorBackground = ObjectUtils.notNull(UIManager.getColor("Notifications.errorBackground"), new JBColor(
           new ColorUIResource(0xE53935),
-          new ColorUIResource(0xFF5370)
+          new ColorUIResource(0x743A3A)
       ));
       final Color warnBackground = ObjectUtils.notNull(UIManager.getColor("Notifications.warnBackground"), new JBColor(
           new ColorUIResource(0xFFB62C),
-          new ColorUIResource(0xFFCB6B))
+          new ColorUIResource(0x7F6C00))
       );
       final Color infoBackground = ObjectUtils.notNull(UIManager.getColor("Notifications.infoBackground"), new JBColor(
           new ColorUIResource(0x91B859),
-          new ColorUIResource(0xC3E88D))
+          new ColorUIResource(0x356936))
       );
 
       final JBColor errorBackgroundColor = new JBColor(errorBackground, errorBackground);

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -118,7 +118,6 @@ private void installDefaults() {
     UIManager.put("Spinner.arrowButtonInsets", "1,1,1,1");
     UIManager.put("Spinner.editorBorderPainted", false);
     UIManager.put("Tree.leftChildIndent", 6);
-    UIManager.put("Tree.rightChildIndent", 6);
     UIManager.put("Notifications.errorBackground", "743A3A");
     UIManager.put("Notifications.warnBackground", "7F6C00");
     UIManager.put("Notifications.infoBackground", "356936");

File: src/main/java/com/chrisrm/idea/ui/MTButtonUI.java
Patch:
@@ -384,9 +384,9 @@ protected void paintDisabledText(final Graphics g,
     final int x = (c.getWidth() - getTextShiftOffset() - metrics.stringWidth(textToPrint)) / 2;
 
     g.setColor(UIManager.getColor("Button.darcula.disabledText.shadow"));
-    SwingUtilities2.drawStringUnderlineCharAt(c, g, text.toUpperCase(), -1, x + 1, textRect.y + metrics.getAscent() + 1);
+    SwingUtilities2.drawStringUnderlineCharAt(c, g, textToPrint, -1, x + 1, textRect.y + metrics.getAscent() + 1);
 
     g.setColor(UIManager.getColor("Button.disabledText"));
-    SwingUtilities2.drawStringUnderlineCharAt(c, g, text.toUpperCase(), -1, x, textRect.y + metrics.getAscent());
+    SwingUtilities2.drawStringUnderlineCharAt(c, g, textToPrint, -1, x, textRect.y + metrics.getAscent());
   }
 }

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -209,7 +209,6 @@ protected String[] getBackgroundResources() {
         //        "Panel.background",
         "SidePanel.background",
         "DialogWrapper.southPanelDivider",
-        "OnePixelDivider.background",
         "Dialog.titleColor",
         "SearchEverywhere.background",
         "CheckBoxMenuItem.background",
@@ -495,6 +494,7 @@ protected String[] getSecondBorderResources() {
         "Separator.foreground",
         "TabbedPane.highlight",
         "TabbedPane.darkShadow",
+        "OnePixelDivider.background",
         "TabbedPane.shadow"
     };
   }

File: src/main/java/com/chrisrm/idea/ui/MTCheckBoxUI.java
Patch:
@@ -162,8 +162,10 @@ protected void drawCheckIcon(final JComponent c,
         g.fillRoundRect(0, 0, w, h, rad, rad);
 
         final Color borderColor;
-        if (!b.getModel().isSelected() || isIndeterminate(b)) {
+        if (!b.getModel().isSelected()) {
           borderColor = getBorderColor(enabled, selected || overrideBg);
+        } else if (isIndeterminate(b)) {
+          borderColor = getBorderColorSelected(enabled, selected || overrideBg);
         } else {
           borderColor = getBorderColorSelected(enabled, selected || overrideBg);
         }

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -209,7 +209,6 @@ protected String[] getBackgroundResources() {
         //        "Panel.background",
         "SidePanel.background",
         "DialogWrapper.southPanelDivider",
-        "OnePixelDivider.background",
         "Dialog.titleColor",
         "SearchEverywhere.background",
         "CheckBoxMenuItem.background",
@@ -495,6 +494,7 @@ protected String[] getSecondBorderResources() {
         "Separator.foreground",
         "TabbedPane.highlight",
         "TabbedPane.darkShadow",
+        "OnePixelDivider.background",
         "TabbedPane.shadow"
     };
   }

File: src/main/java/com/chrisrm/idea/ui/MTCheckBoxUI.java
Patch:
@@ -162,8 +162,10 @@ protected void drawCheckIcon(final JComponent c,
         g.fillRoundRect(0, 0, w, h, rad, rad);
 
         final Color borderColor;
-        if (!b.getModel().isSelected() || isIndeterminate(b)) {
+        if (!b.getModel().isSelected()) {
           borderColor = getBorderColor(enabled, selected || overrideBg);
+        } else if (isIndeterminate(b)) {
+          borderColor = getBorderColorSelected(enabled, selected || overrideBg);
         } else {
           borderColor = getBorderColorSelected(enabled, selected || overrideBg);
         }

File: src/main/java/com/chrisrm/idea/themes/MTPalenightTheme.java
Patch:
@@ -38,7 +38,7 @@ public final class MTPalenightTheme extends MTAbstractTheme {
   public static final String DISABLED = "2f2e43";
 
   public MTPalenightTheme() {
-    super("mt.palenight", "Material Palenight", true);
+    super("mt.palenight", "Material Palenight", true, "Material Palenight");
   }
 
   @NotNull

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -37,7 +37,7 @@ public final class MonokaiTheme extends MTAbstractTheme {
   public static final String DISABLED = "727072";
 
   public MonokaiTheme() {
-    super("monokai", "Material Monokai Pro", true);
+    super("monokai", "Material Monokai Pro", true, "Monokai Pro");
   }
 
   @NotNull

File: src/main/java/com/chrisrm/idea/MTBundledThemesManager.java
Patch:
@@ -82,7 +82,7 @@ public MTBundledTheme findTheme(final String selectedTheme) {
   }
 
   private MTBundledTheme loadBundledTheme(final String resource, final BundledThemeEP ep) throws Exception {
-    final URL url = ep.getClass().getResource(resource);
+    final URL url = ep.getLoaderForClass().getResource(resource);
     if (url == null) {
       throw new Exception("Cannot read theme from " + resource);
     }

File: src/main/java/com/chrisrm/idea/MTAbstractTheme.java
Patch:
@@ -36,6 +36,7 @@
 import com.intellij.openapi.util.IconLoader;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.JBColor;
+import com.intellij.util.IconUtil;
 import com.intellij.util.ObjectUtils;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -55,7 +56,7 @@ public abstract class MTAbstractTheme implements Serializable, MTThemeable {
   @Override
   @Nullable
   public Icon getIcon() {
-    return icon != null ? IconLoader.getIcon(icon) : null;
+    return icon != null ? IconLoader.getIcon(icon) : IconUtil.getEmptyIcon(true);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/schemes/MTThemesComponent.java
Patch:
@@ -44,14 +44,15 @@ public final class MTThemesComponent implements ApplicationComponent {
 
   @Override
   public void initComponent() {
-    activateTheme();
-
     try {
       MTBundledThemesManager.getInstance().loadBundledThemes();
     } catch (final Exception e) {
       e.printStackTrace();
     }
 
+    // Activate the theme
+    activateTheme();
+
     connect = ApplicationManager.getApplication().getMessageBus().connect();
     connect.subscribe(ConfigNotifier.CONFIG_TOPIC, mtConfig -> activateTheme());
     connect.subscribe(CustomConfigNotifier.CONFIG_TOPIC, mtCustomThemeConfig -> activateTheme());

File: src/main/java/com/chrisrm/idea/themes/models/MTBundledTheme.java
Patch:
@@ -26,14 +26,14 @@
 
 package com.chrisrm.idea.themes.models;
 
-import com.chrisrm.idea.MTAbstractTheme;
+import com.chrisrm.idea.themes.MTCustomTheme;
 import com.intellij.util.ObjectUtils;
 import org.jetbrains.annotations.NotNull;
 
 import java.io.Serializable;
 import java.util.List;
 
-public class MTBundledTheme extends MTAbstractTheme implements Serializable {
+public class MTBundledTheme extends MTCustomTheme implements Serializable {
   private List<MTThemeColor> colors;
 
   public MTBundledTheme() {
@@ -43,7 +43,7 @@ public MTBundledTheme() {
   protected MTBundledTheme(@NotNull final String id,
                            @NotNull final String editorColorsScheme,
                            final boolean dark) {
-    super(id, editorColorsScheme, dark);
+    super();
   }
 
   public static String notificationsColor = "323232";

File: src/main/java/com/chrisrm/idea/utils/IconReplacer.java
Patch:
@@ -86,10 +86,11 @@ public static void replaceIcons(final Class iconsClass, final String iconsRootPa
     }
   }
 
-  private static Icon chromatizeIcon(Icon newIcon) {
+  public static Icon chromatizeIcon(final Icon newIcon) {
     if (MTConfig.getInstance().isMonochromeIcons()) {
       final Color primaryColor = MTConfig.getInstance().getSelectedTheme().getTheme().getPrimaryColor();
-      newIcon = IconUtil.colorize(newIcon, ColorUtil.brighter(primaryColor, 4));
+      final Icon mcIcon = IconUtil.colorize(newIcon, ColorUtil.brighter(primaryColor, 4), false);
+      return IconUtil.toSize(mcIcon, newIcon.getIconWidth(), newIcon.getIconHeight());
     }
     return newIcon;
   }

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2017 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -171,7 +171,7 @@ public void edit(final MethodCall m) throws CannotCompileException {
             m.replace("{ if ($1.getBounds().width > 30) { " +
                       "$proceed($$); " +
                       "} else { " +
-                      "$0.fillOval(1, 1, $1.getBounds().width, $1.getBounds().height); } " +
+                "$0.fillOval(1, 1, $1.getBounds().width - 2, $1.getBounds().height - 2); } " +
                       "}");
           }
         }

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -68,7 +68,7 @@ public class MTConfig implements PersistentStateComponent<MTConfig> {
   // They are public so they can be serialized
   public String version;
 
-  public MTThemeFacade selectedTheme = MTThemes.OCEANIC;
+  public MTThemes selectedTheme = MTThemes.OCEANIC;
   public String highlightColor = ACCENT_COLOR;
   public boolean highlightColorEnabled = false;
   public Integer highlightThickness = 2;
@@ -149,7 +149,7 @@ public MTThemeFacade getSelectedTheme() {
   }
 
   public void setSelectedTheme(final MTThemeFacade selectedTheme) {
-    this.selectedTheme = selectedTheme;
+    this.selectedTheme = (MTThemes) selectedTheme;
   }
 
   /**

File: src/main/java/com/chrisrm/idea/MTLaf.java
Patch:
@@ -26,6 +26,7 @@
 
 package com.chrisrm.idea;
 
+import com.chrisrm.idea.themes.MTThemeable;
 import com.chrisrm.idea.utils.PropertiesParser;
 import com.intellij.ide.ui.laf.darcula.DarculaLaf;
 import com.intellij.openapi.util.SystemInfo;
@@ -42,9 +43,9 @@
 
 public final class MTLaf extends DarculaLaf {
 
-  private final MTTheme theme;
+  private final MTThemeable theme;
 
-  public MTLaf(@NotNull final MTTheme theme) {
+  public MTLaf(@NotNull final MTThemeable theme) {
     super();
     this.theme = theme;
   }

File: src/main/java/com/chrisrm/idea/icons/tinted/TintedIconsService.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2017 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -38,7 +38,7 @@
 
 public final class TintedIconsService {
 
-  public static final String[] TINTED_ICONS = new String[] {
+  public static final String[] TINTED_ICONS = new String[]{
       "/icons/actions/closeHovered.png",
       "/icons/actions/closeNewHovered.png",
       "/icons/general/expandAllHover.png",
@@ -102,7 +102,7 @@ public static Icon getIcon(final String newPath, final String accentColor) {
     if (MY_TINTED_ICONS.contains(newPath)) {
       return new TintedIcon(IconLoader.getIcon(newPath), ColorUtil.fromHex(accentColor), newPath);
     } else if (MY_THEMED_ICONS.contains(newPath)) {
-      String folderColor = MTConfig.getInstance().getSelectedTheme().getTheme().getSelectionBackground();
+      final String folderColor = MTConfig.getInstance().getSelectedTheme().getTheme().getSelectionBackground();
       return new TintedIcon(IconLoader.getIcon(newPath), ColorUtil.fromHex(folderColor), newPath);
     }
     return IconLoader.getIcon(newPath);

File: src/main/java/com/chrisrm/idea/status/MTStatusWidget.java
Patch:
@@ -93,7 +93,7 @@ public void updateUI() {
 
   @Override
   public void paintComponent(final Graphics g) {
-    final String themeName = mtConfig.getSelectedTheme().getEditorColorsScheme();
+    final String themeName = mtConfig.getSelectedTheme().getThemeColorScheme();
 
     if (myBufferedImage == null) {
       final Dimension size = getSize();
@@ -131,7 +131,7 @@ public void paintComponent(final Graphics g) {
 
   @Override
   public Dimension getPreferredSize() {
-    final String themeName = mtConfig.getSelectedTheme().getEditorColorsScheme();
+    final String themeName = mtConfig.getSelectedTheme().getThemeColorScheme();
     final int width = getFontMetrics(MTUiUtils.getWidgetFont()).charsWidth(themeName.toCharArray(), 0,
         themeName.length()) + 2 * MTUiUtils.PADDING;
     return new Dimension(width, JBUI.scale(MTUiUtils.HEIGHT));

File: src/main/java/com/chrisrm/idea/tabs/MTEditorTabColor.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2017 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -27,7 +27,7 @@
 package com.chrisrm.idea.tabs;
 
 import com.chrisrm.idea.MTConfig;
-import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.themes.MTThemeable;
 import com.intellij.openapi.fileEditor.impl.EditorTabColorProvider;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.vfs.VirtualFile;
@@ -50,7 +50,7 @@ public Color getEditorTabColor(@NotNull final Project project, @NotNull final Vi
 
   private Color getDefaultTabColor() {
     final MTConfig config = MTConfig.getInstance();
-    final MTTheme mtTheme = config.getSelectedTheme().getTheme();
+    final MTThemeable mtTheme = config.getSelectedTheme().getTheme();
     //    return config.getIsContrastMode() ? mtTheme.getContrastColor() : mtTheme.getBackgroundColor();
     return mtTheme.getBackgroundColor();
   }

File: src/main/java/com/chrisrm/idea/tabs/MTTabsEditorAdapter.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * The MIT License (MIT)
  *
- * Copyright (c) 2017 Chris Magnussen and Elior Boukhobza
+ * Copyright (c) 2018 Chris Magnussen and Elior Boukhobza
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -27,7 +27,7 @@
 package com.chrisrm.idea.tabs;
 
 import com.chrisrm.idea.MTConfig;
-import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.themes.MTThemeable;
 import com.intellij.openapi.fileEditor.FileEditorManagerEvent;
 import com.intellij.openapi.fileEditor.FileEditorManagerListener;
 import com.intellij.openapi.fileEditor.ex.FileEditorManagerEx;
@@ -69,7 +69,7 @@ public void selectionChanged(@NotNull final FileEditorManagerEvent event) {
   private void processActiveTab(@NotNull final FileStatusManager fileStatusManager,
                                 @NotNull final VirtualFile file,
                                 @NotNull final EditorWindow editorWindow) {
-    final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme().getTheme();
+    final MTThemeable mtTheme = MTConfig.getInstance().getSelectedTheme().getTheme();
     final MTConfig mtConfig = MTConfig.getInstance();
 
     final Color backgroundColor = mtTheme.getBackgroundColor();

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -107,7 +107,7 @@ static void patchStatusBar() throws Exception {
         StaticPatcher.setFinalStatic(Gray.class, "_90", gray.withAlpha(25));
 
         // tool window color
-        final boolean dark = MTConfig.getInstance().getSelectedTheme().isDark();
+        final boolean dark = MTConfig.getInstance().getSelectedTheme().getThemeIsDark();
         StaticPatcher.setFinalStatic(Gray.class, "_15", dark ? Gray._15.withAlpha(255) : Gray._200.withAlpha(15));
         // This thing doesnt work on compiled jars...
         final Class<?> clazz = Class.forName("com.intellij.openapi.wm.impl.status.StatusBarUI$BackgroundPainter");

File: src/main/java/com/chrisrm/idea/ui/MTButtonUI.java
Patch:
@@ -50,8 +50,6 @@
 
 public class MTButtonUI extends DarculaButtonUI {
   public static ComponentUI createUI(final JComponent c) {
-    ((AbstractButton) c).setRolloverEnabled(true);
-
     return new MTButtonUI();
   }
 

File: src/main/java/com/chrisrm/idea/themes/ArcDarkTheme.java
Patch:
@@ -197,8 +197,9 @@ protected String[] getContrastResources() {
   @Override
   protected String[] getDisabledResources() {
     return new String[] {
-        "MenuItem.disabledForeground",
         "Button.disabledText",
+        "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "CheckBox.darcula.checkSignColorDisabled"
     };
   }
@@ -265,8 +266,7 @@ protected String[] getSelectionBackgroundResources() {
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
         "List.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -138,6 +138,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "TextField.inactiveForeground",
         "PasswordField.inactiveForeground",
         "Button.disabledText",
@@ -226,7 +227,6 @@ protected String[] getTextResources() {
         "Menu.acceleratorForeground",
         "MenuItem.acceleratorForeground",
         "TextField.separatorColorDisabled",
-        "ComboBox.disabledForeground",
         "Button.foreground",
         "Button.mt.foreground",
         "material.tagColor",

File: src/main/java/com/chrisrm/idea/themes/MTDarkerTheme.java
Patch:
@@ -204,6 +204,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "Button.disabledText",
         "CheckBox.darcula.checkSignColorDisabled"
     };
@@ -268,8 +269,7 @@ protected String[] getSelectionBackgroundResources() {
         "MenuItem.selectionBackground",
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTLightCustomTheme.java
Patch:
@@ -127,6 +127,8 @@ protected String[] getContrastResources() {
   @Override
   protected String[] getDisabledResources() {
     return new String[] {
+        "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground"
     };
   }
 
@@ -203,8 +205,6 @@ protected String[] getSelectionBackgroundResources() {
         "RadioButtonMenuItem.selectionBackground",
         "CheckBoxMenuItem.selectionBackground",
         "EditorPane.selectionBackground",
-        "MenuItem.disabledForeground",
-        "ComboBox.disabledForeground",
         "TabbedPane.selected",
         "Button.disabledText"
     };

File: src/main/java/com/chrisrm/idea/themes/MTLighterTheme.java
Patch:
@@ -199,6 +199,8 @@ protected String[] getContrastResources() {
   @Override
   protected String[] getDisabledResources() {
     return new String[] {
+        "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground"
     };
   }
 
@@ -259,8 +261,6 @@ protected String[] getSelectionBackgroundResources() {
         "mt.lighter.selectionBackgroundInactive",
         "mt.lighter.selectionInactiveBackground",
         "inactiveCaption",
-        "MenuItem.disabledForeground",
-        "ComboBox.disabledForeground",
         "Button.disabledText"
     };
   }

File: src/main/java/com/chrisrm/idea/themes/MTOceanicTheme.java
Patch:
@@ -202,6 +202,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "TextField.inactiveForeground",
         "PasswordField.inactiveForeground",
         "Button.disabledText",
@@ -273,7 +274,6 @@ protected String[] getTextResources() {
         "Menu.acceleratorForeground",
         "MenuItem.acceleratorForeground",
         "TextField.separatorColorDisabled",
-        "ComboBox.disabledForeground",
         "Button.foreground",
         "Button.mt.foreground",
         "SearchEverywhere.shortcutForeground",

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -204,6 +204,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "Button.disabledText",
         "CheckBox.darcula.checkSignColorDisabled"
     };
@@ -267,8 +268,7 @@ protected String[] getSelectionBackgroundResources() {
         "MenuItem.selectionBackground",
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/OneDarkTheme.java
Patch:
@@ -201,6 +201,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "Button.disabledText",
         "CheckBox.darcula.checkSignColorDisabled"
     };
@@ -265,8 +266,7 @@ protected String[] getSelectionBackgroundResources() {
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
         "List.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/ui/MTButtonUI.java
Patch:
@@ -50,8 +50,6 @@
 
 public class MTButtonUI extends DarculaButtonUI {
   public static ComponentUI createUI(final JComponent c) {
-    ((AbstractButton) c).setRolloverEnabled(true);
-
     return new MTButtonUI();
   }
 

File: src/main/java/com/chrisrm/idea/themes/ArcDarkTheme.java
Patch:
@@ -197,8 +197,9 @@ protected String[] getContrastResources() {
   @Override
   protected String[] getDisabledResources() {
     return new String[] {
-        "MenuItem.disabledForeground",
         "Button.disabledText",
+        "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "CheckBox.darcula.checkSignColorDisabled"
     };
   }
@@ -265,8 +266,7 @@ protected String[] getSelectionBackgroundResources() {
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
         "List.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -138,6 +138,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "TextField.inactiveForeground",
         "PasswordField.inactiveForeground",
         "Button.disabledText",
@@ -226,7 +227,6 @@ protected String[] getTextResources() {
         "Menu.acceleratorForeground",
         "MenuItem.acceleratorForeground",
         "TextField.separatorColorDisabled",
-        "ComboBox.disabledForeground",
         "Button.foreground",
         "Button.mt.foreground",
         "material.tagColor",

File: src/main/java/com/chrisrm/idea/themes/MTDarkerTheme.java
Patch:
@@ -204,6 +204,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "Button.disabledText",
         "CheckBox.darcula.checkSignColorDisabled"
     };
@@ -268,8 +269,7 @@ protected String[] getSelectionBackgroundResources() {
         "MenuItem.selectionBackground",
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTLightCustomTheme.java
Patch:
@@ -127,6 +127,8 @@ protected String[] getContrastResources() {
   @Override
   protected String[] getDisabledResources() {
     return new String[] {
+        "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground"
     };
   }
 
@@ -203,8 +205,6 @@ protected String[] getSelectionBackgroundResources() {
         "RadioButtonMenuItem.selectionBackground",
         "CheckBoxMenuItem.selectionBackground",
         "EditorPane.selectionBackground",
-        "MenuItem.disabledForeground",
-        "ComboBox.disabledForeground",
         "TabbedPane.selected",
         "Button.disabledText"
     };

File: src/main/java/com/chrisrm/idea/themes/MTLighterTheme.java
Patch:
@@ -199,6 +199,8 @@ protected String[] getContrastResources() {
   @Override
   protected String[] getDisabledResources() {
     return new String[] {
+        "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground"
     };
   }
 
@@ -259,8 +261,6 @@ protected String[] getSelectionBackgroundResources() {
         "mt.lighter.selectionBackgroundInactive",
         "mt.lighter.selectionInactiveBackground",
         "inactiveCaption",
-        "MenuItem.disabledForeground",
-        "ComboBox.disabledForeground",
         "Button.disabledText"
     };
   }

File: src/main/java/com/chrisrm/idea/themes/MTOceanicTheme.java
Patch:
@@ -202,6 +202,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "TextField.inactiveForeground",
         "PasswordField.inactiveForeground",
         "Button.disabledText",
@@ -273,7 +274,6 @@ protected String[] getTextResources() {
         "Menu.acceleratorForeground",
         "MenuItem.acceleratorForeground",
         "TextField.separatorColorDisabled",
-        "ComboBox.disabledForeground",
         "Button.foreground",
         "Button.mt.foreground",
         "SearchEverywhere.shortcutForeground",

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -204,6 +204,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "Button.disabledText",
         "CheckBox.darcula.checkSignColorDisabled"
     };
@@ -267,8 +268,7 @@ protected String[] getSelectionBackgroundResources() {
         "MenuItem.selectionBackground",
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/OneDarkTheme.java
Patch:
@@ -201,6 +201,7 @@ protected String[] getContrastResources() {
   protected String[] getDisabledResources() {
     return new String[] {
         "MenuItem.disabledForeground",
+        "ComboBox.disabledForeground",
         "Button.disabledText",
         "CheckBox.darcula.checkSignColorDisabled"
     };
@@ -265,8 +266,7 @@ protected String[] getSelectionBackgroundResources() {
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
         "List.selectionBackground",
-        "PasswordField.selectionBackground",
-        "ComboBox.disabledForeground"
+        "PasswordField.selectionBackground"
     };
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -286,7 +286,7 @@ protected String[] getBackgroundResources() {
         "Spinner.background",
         "SplitPane.highlight",
         "Label.background",
-        "Panel.background",
+        //        "Panel.background",
         "SidePanel.background",
         "DialogWrapper.southPanelDivider",
         "OnePixelDivider.background",
@@ -321,7 +321,6 @@ protected String[] getForegroundResources() {
         "OptionPane.messageForeground",
         "Menu.foreground",
         "MenuItem.foreground",
-        "Panel.foreground",
         "Label.foreground",
         "EditorPane.inactiveForeground",
         "CheckBox.foreground",
@@ -331,6 +330,7 @@ protected String[] getForegroundResources() {
         "MenuBar.foreground",
         "RadioButtonMenuItem.foreground",
         "CheckBoxMenuItem.foreground",
+        "MenuItem.foreground",
         //        "OptionPane.foreground",
         "PopupMenu.foreground",
         "Spinner.foreground",

File: src/main/java/com/chrisrm/idea/ui/MTTreeUI.java
Patch:
@@ -128,7 +128,7 @@ private static Color getSelectionBackgroundColor(@NotNull final JTree tree, fina
     if (selection) {
       return UIUtil.getTreeSelectionBackground(true);
     } else {
-      return ColorUtil.dimmer(UIManager.getColor("Tree.selectionBackground"));
+      return ColorUtil.withAlpha(UIManager.getColor("Tree.selectionBackground"), 0.25);
     }
   }
 

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -51,6 +51,7 @@
 import com.intellij.openapi.wm.impl.status.IdeStatusBarImpl;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.JBColor;
+import com.intellij.util.ObjectUtils;
 import com.intellij.util.ui.JBUI;
 import com.intellij.util.ui.UIUtil;
 import sun.awt.AppContext;
@@ -556,7 +557,8 @@ private void patchStyledEditorKit() {
 
     // Add custom accent color
     assert styleSheet != null;
-    styleSheet.addRule("a, address, b { color: #" + mtConfig.getAccentColor() + "; }");
+    final String accentColor = ObjectUtils.notNull(mtConfig.getAccentColor(), "80CBC4");
+    styleSheet.addRule(String.format("a, address, b { color: #%s; }", accentColor));
     defaults.put("StyledEditorKit.JBDefaultStyle", styleSheet);
 
     try {

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -221,9 +221,9 @@ private static void replaceToolBalloons() throws Exception {
 
       final Constructor<MessageType> declaredConstructor = MessageType.class.getDeclaredConstructor(Icon.class, Color.class, Color.class);
       declaredConstructor.setAccessible(true);
-      final Color errorBackground = UIManager.getColor("Notifications.errorBackground");
-      final Color warnBackground = UIManager.getColor("Notifications.warnBackground");
-      final Color infoBackground = UIManager.getColor("Notifications.infoBackground");
+      final Color errorBackground = ObjectUtils.notNull(UIManager.getColor("Notifications.errorBackground"), new ColorUIResource(0x323232));
+      final Color warnBackground = ObjectUtils.notNull(UIManager.getColor("Notifications.warnBackground"), new ColorUIResource(0x323232));
+      final Color infoBackground = ObjectUtils.notNull(UIManager.getColor("Notifications.infoBackground"), new ColorUIResource(0x323232));
 
       final MessageType errorType = declaredConstructor.newInstance(
           AllIcons.General.NotificationError,

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -82,7 +82,6 @@ private void setOpenOrClosedIcon(final PresentationData data, final VirtualFile
     if (!file.isDirectory()) {
       return;
     }
-    data.setIcon(TintedIconsService.getIcon("/icons/nodes/folderClosed.png", "ff00cc"));
 
     final FileEditorManagerEx manager = FileEditorManagerEx.getInstanceEx(project);
     for (final EditorWindow editorWindow : manager.getWindows()) {
@@ -123,5 +122,4 @@ private void applyBoldTabs(final PresentationData data, final VirtualFile file)
       data.setAttributesKey(CodeInsightColors.BOOKMARKS_ATTRIBUTES);
     }
   }
-
 }

File: src/main/java/com/chrisrm/idea/themes/ArcDarkTheme.java
Patch:
@@ -259,6 +259,7 @@ protected String[] getSelectionBackgroundResources() {
         "MenuItem.selectionBackground",
         "Autocomplete.selectionbackground",
         "TextField.selectionBackground",
+        "List.selectionBackground",
         "PasswordField.selectionBackground",
         "ComboBox.disabledForeground"
     };

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -165,7 +165,6 @@ protected String[] getSecondBorderResources() {
         "CheckBox.darcula.disabledBorderColor2",
         "Table.highlightOuter",
         "Table.highlightInner",
-        "Separator.foreground",
         "Table.shadowOuter",
         "Table.shadowInner"
     };
@@ -211,6 +210,7 @@ protected String[] getSecondaryBackgroundResources() {
         "Button.darcula.selection.color1",
         "Button.darcula.selection.color2",
         "List.background",
+        "Separator.foreground",
         "material.mergeCommits",
         "material.disabled"
     };

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -165,6 +165,7 @@ protected String[] getSecondBorderResources() {
         "CheckBox.darcula.disabledBorderColor2",
         "Table.highlightOuter",
         "Table.highlightInner",
+        "Separator.foreground",
         "Table.shadowOuter",
         "Table.shadowInner"
     };
@@ -204,7 +205,6 @@ protected String[] getSecondaryBackgroundResources() {
     return new String[]{
         "inactiveCaption",
         "ScrollBar.thumb",
-        "Separator.foreground",
         "TextField.inactiveForeground",
         "PasswordField.inactiveForeground",
         "TextArea.selectionForeground",

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -557,7 +557,7 @@ private void patchStyledEditorKit() {
 
     // Add custom accent color
     assert styleSheet != null;
-    styleSheet.addRule("a, address, b { color: " + mtConfig.getAccentColor() + "; }");
+    styleSheet.addRule("a, address, b { color: #" + mtConfig.getAccentColor() + "; }");
     defaults.put("StyledEditorKit.JBDefaultStyle", styleSheet);
 
     try {

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -61,7 +61,7 @@ public class MTConfig implements PersistentStateComponent<MTConfig> {
   public MTThemes selectedTheme = MTThemes.OCEANIC;
   public String highlightColor = ACCENT_COLOR;
   public boolean highlightColorEnabled = false;
-  public Integer highlightThickness;
+  public Integer highlightThickness = 2;
   public boolean isContrastMode = false;
   public boolean isMaterialDesign = true;
   public boolean isBoldTabs = false;
@@ -261,7 +261,7 @@ public int getHighlightThickness() {
    * @param thickness thickness value
    */
   public void setHighlightThickness(final int thickness) {
-    this.highlightThickness = thickness;
+    highlightThickness = thickness;
   }
 
   /**

File: src/main/java/com/chrisrm/idea/config/ui/ArrowsStyles.java
Patch:
@@ -29,7 +29,7 @@
 public enum ArrowsStyles {
   MATERIAL("Material", "/icons/mac/tree_white_right_arrow", "/icons/mac/tree_white_down_arrow"),
   DARCULA("Darcula", "/icons/mac/darcula/tree_white_right_arrow", "/icons/mac/darcula/tree_white_down_arrow"),
-  PLUSMINUS("Plus-Minus", "/icons/mac/plusminus/minus", "/icons/mac/plusminus/plus");
+  PLUSMINUS("Plus-Minus", "/icons/mac/plusminus/plus", "/icons/mac/plusminus/minus");
 
   private final String type;
   private final String expandedIcon;

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -50,7 +50,7 @@ public final class MTCustomTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MTCustomTheme() {
-    super("mt.custom", "Material Theme - Custom", true, MTThemes.CUSTOM);
+    super("mt.custom", "Material Custom Theme", true, MTThemes.CUSTOM);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -95,7 +95,7 @@ static void patchStatusBar() throws Exception {
         StaticPatcher.setFinalStatic(Gray.class, "_85", alphaGray);
         StaticPatcher.setFinalStatic(Gray.class, "_40", alphaGray);
         StaticPatcher.setFinalStatic(Gray.class, "_145", alphaGray);
-        StaticPatcher.setFinalStatic(Gray.class, "_255", alphaGray);
+        //        StaticPatcher.setFinalStatic(Gray.class, "_255", alphaGray);
         StaticPatcher.setFinalStatic(Gray.class, "_201", alphaGray);
 
         // Quick info border

File: src/main/java/com/chrisrm/idea/icons/Associations.java
Patch:
@@ -32,6 +32,7 @@
 import com.intellij.ide.plugins.PluginManager;
 import com.intellij.openapi.extensions.PluginId;
 import com.thoughtworks.xstream.XStream;
+import com.thoughtworks.xstream.io.xml.DomDriver;
 import org.jetbrains.annotations.Nullable;
 
 import java.io.Serializable;
@@ -91,7 +92,7 @@ public static final class AssociationsFactory {
      */
     public static Associations create() {
       final URL associationsXml = AssociationsFactory.class.getResource("/icon_associations.xml");
-      final XStream xStream = new XStream();
+      final XStream xStream = new XStream(new DomDriver());
       xStream.alias("associations", Associations.class);
       xStream.alias("regex", RegexAssociation.class);
       xStream.alias("type", TypeAssociation.class);

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -120,7 +120,7 @@ static void patchPanels() throws Exception {
         StaticPatcher.setFinalStatic(UIUtil.class, "CONTRAST_BORDER_COLOR", ColorUtil.withAlpha(color, .05));
         StaticPatcher.setFinalStatic(UIUtil.class, "BORDER_COLOR", color);
         StaticPatcher.setFinalStatic(UIUtil.class, "AQUA_SEPARATOR_FOREGROUND_COLOR", color);
-//        StaticPatcher.setFinalStatic(HelpTooltip.class, "BACKGROUND_COLOR", color);
+        //        StaticPatcher.setFinalStatic(HelpTooltip.class, "BACKGROUND_COLOR", color);
       }
 
       final Field[] fields = DarculaUIUtil.class.getDeclaredFields();

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -383,6 +383,7 @@ private void replaceSpinners() {
   }
 
   private void replaceTables() {
+    UIManager.put("Table.cellNoFocusBorder", new MTTableCellNoFocusBorder());
     UIManager.put("Table.focusCellHighlightBorder", new MTTableSelectedCellHighlightBorder());
   }
 

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -202,6 +202,7 @@ protected String[] getSelectionBackgroundResources() {
         "EditorPane.selectionBackground",
         "Autocomplete.selectionbackground",
         "EditorPane.inactiveForeground",
+        "TabbedPane.selected",
         "ScrollBar.thumb"
     };
   }

File: src/main/java/com/chrisrm/idea/actions/themes/MTDarkerThemeAction.java
Patch:
@@ -39,6 +39,6 @@ public boolean isSelected(final AnActionEvent e) {
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.DARKER);
+    MTThemeManager.getInstance().activate(MTThemes.DARKER, true);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTLighterThemeAction.java
Patch:
@@ -39,6 +39,6 @@ public boolean isSelected(final AnActionEvent e) {
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.LIGHTER);
+    MTThemeManager.getInstance().activate(MTThemes.LIGHTER, true);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTOceanicThemeAction.java
Patch:
@@ -39,6 +39,6 @@ public boolean isSelected(final AnActionEvent e) {
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.OCEANIC);
+    MTThemeManager.getInstance().activate(MTThemes.OCEANIC, true);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTOneDarkThemeAction.java
Patch:
@@ -39,6 +39,6 @@ public boolean isSelected(final AnActionEvent e) {
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.ONE_DARK);
+    MTThemeManager.getInstance().activate(MTThemes.ONE_DARK, true);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTPalenightThemeAction.java
Patch:
@@ -39,6 +39,6 @@ public boolean isSelected(final AnActionEvent e) {
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.PALENIGHT);
+    MTThemeManager.getInstance().activate(MTThemes.PALENIGHT, true);
   }
 }

File: src/main/java/com/chrisrm/idea/schemes/MTThemesComponent.java
Patch:
@@ -54,10 +54,12 @@ public void activateTheme() {
     MTThemeManager.getInstance().activate();
   }
 
+  @Override
   public void disposeComponent() {
     connect.disconnect();
   }
 
+  @Override
   @NotNull
   public String getComponentName() {
     return "MTThemesComponent";

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -71,7 +71,6 @@ public String getDisabled() {
   @Override
   public final void activate() {
     try {
-      UIManager.getDefaults().remove("Panel.background");
       if (isDark()) {
         LafManager.getInstance().setCurrentLookAndFeel(new DarculaLookAndFeelInfo());
         UIManager.setLookAndFeel(new MTLaf(this));

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -81,7 +81,6 @@ public final void activate() {
       JBColor.setDark(isDark());
       IconLoader.setUseDarkIcons(isDark());
 
-      UIManager.put("intellijlaf.background", new ColorUIResource(0x8078a8));
       buildResources(getBackgroundResources(), getBackgroundColorString());
       buildResources(getForegroundResources(), getForegroundColorString());
       buildResources(getTextResources(), getTextColorString());

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -83,7 +83,7 @@ public class MTConfig implements PersistentStateComponent<MTConfig> {
   public String defaultBackground;
   public boolean upperCaseTabs = false;
   public int customSidebarHeight = 18;
-  private boolean accentScrollbars = false;
+  public boolean accentScrollbars = true;
 
   public MTConfig() {
     final MTTheme theme = selectedTheme.getTheme();
@@ -119,6 +119,7 @@ public static MTConfig getInstance() {
   public boolean needsRestart(final MTForm form) {
     boolean modified = isMaterialDesignChanged(form.getIsMaterialDesign());
     modified = modified || isThemedScrollbarsChanged(form.isThemedScrollbars());
+    modified = modified || isAccentScrollbarsChanged(form.isAccentScrollbars());
 
     return modified;
   }

File: src/main/java/com/chrisrm/idea/schemes/MTFileColors.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.Objects;
 
 public final class MTFileColors {
-  public static final HashMap<FileStatus, ColorKey> FILE_STATUS_COLOR_MAP;
+  public static HashMap<FileStatus, ColorKey> FILE_STATUS_COLOR_MAP;
 
   static {
     initFileColors();

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -126,7 +126,7 @@ private void colorFileStatus(final PresentationData data, final VirtualFile file
     final Color colorFromStatus = getColorFromStatus(status);
     final boolean isBoldTabs = MTConfig.getInstance().getIsBoldTabs();
     if (file.isDirectory()) {
-      //      data.setForcedTextForeground(ColorUtil.fromHex(MTConfig.getInstance().getAccentColor()));
+      data.setForcedTextForeground(MTFileColors.get(FileStatus.NOT_CHANGED));
       if (isBoldTabs) {
         data.setAttributesKey(CodeInsightColors.BOOKMARKS_ATTRIBUTES);
       }

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -161,8 +161,8 @@ public void edit(final MethodCall m) throws CannotCompileException {
       paintBackground.instrument(new ExprEditor() {
         @Override
         public void edit(final MethodCall m) throws CannotCompileException {
-          if (m.getMethodName().equals("setColor")) {
-            m.replace("{ $1 = new java.awt.Color(0x00000000, true); $_ = $proceed($$); }");
+          if (m.getMethodName().equals("paintBackground")) {
+            m.replace("{ }");
           }
         }
       });

File: src/main/java/com/chrisrm/idea/themes/ArcDarkTheme.java
Patch:
@@ -162,7 +162,6 @@ protected String[] getSecondBorderResources() {
     return new String[]{
         "MenuBar.darcula.borderColor",
         "MenuBar.darcula.borderShadowColor",
-        "TabbedPane.highlight",
         "TabbedPane.selected",
         "TabbedPane.selectHighlight",
         "CheckBox.darcula.disabledBorderColor1",

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -162,7 +162,6 @@ protected String[] getSecondBorderResources() {
     return new String[] {
         "MenuBar.darcula.borderColor",
         "MenuBar.darcula.borderShadowColor",
-        "TabbedPane.highlight",
         "TabbedPane.selected",
         "TabbedPane.selectHighlight",
         "CheckBox.darcula.disabledBorderColor1",

File: src/main/java/com/chrisrm/idea/themes/OneDarkTheme.java
Patch:
@@ -163,7 +163,6 @@ protected String[] getSecondBorderResources() {
     return new String[]{
         "MenuBar.darcula.borderColor",
         "MenuBar.darcula.borderShadowColor",
-        "TabbedPane.highlight",
         "TabbedPane.selected",
         "TabbedPane.selectHighlight",
         "CheckBox.darcula.disabledBorderColor1",

File: src/main/java/com/chrisrm/idea/schemes/MTFileColors.java
Patch:
@@ -57,7 +57,7 @@ public final class MTFileColors {
         final String property = FileColorsBundle.messageOrDefault("material.file." + allFileStatus.getId().toLowerCase(), "-1");
         // If not found do not add the color to the map
         if (Objects.equals(property, "-1")) {
-          FILE_STATUS_COLOR_MAP.put(allFileStatus, ColorKey.createColorKey("MT_" + allFileStatus.getId(), null));
+          FILE_STATUS_COLOR_MAP.put(allFileStatus, ColorKey.createColorKey("MT_" + allFileStatus.getId()));
           continue;
         }
 

File: src/main/java/com/chrisrm/idea/themes/OneDarkTheme.java
Patch:
@@ -59,7 +59,7 @@ public String getDisabled() {
 
   @Override
   protected String getTreeSelectionColorString() {
-    return "2C313A50";
+    return "3A3F4B50";
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/wallpaper/MTWallpaperComponent.java
Patch:
@@ -33,6 +33,7 @@
 import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.components.ApplicationComponent;
 import com.intellij.openapi.wm.impl.IdeBackgroundUtil;
+import com.intellij.util.ObjectUtils;
 import com.intellij.util.messages.MessageBusConnection;
 import org.jetbrains.annotations.NotNull;
 
@@ -106,8 +107,9 @@ private String getOriginalDefaultBackground() {
    *
    * @return
    */
+  @NotNull
   private String getIdeBackground() {
-    return propertiesComponent.getValue(FRAME_PROP);
+    return ObjectUtils.notNull(propertiesComponent.getValue(FRAME_PROP), "");
   }
 
   /**

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -45,6 +45,7 @@
 import com.intellij.packageDependencies.ui.PackageDependenciesNode;
 import com.intellij.ui.ColorUtil;
 import com.intellij.ui.ColoredTreeCellRenderer;
+import com.intellij.util.PlatformIcons;
 
 import java.awt.*;
 
@@ -113,6 +114,8 @@ private void setDirectoryIcon(final PresentationData data, final VirtualFile fil
       data.setIcon(IconLoader.findIcon("/icons/modules/sourceRootOpen.png"));
     } else if (ProjectRootsUtil.isInTestSource(file, project)) {
       data.setIcon(IconLoader.findIcon("/icons/modules/testRootOpen.png"));
+    } else if (data.getIcon(false).equals(PlatformIcons.PACKAGE_ICON)) {
+      //      Looks like an open directory anyway
     } else {
       data.setIcon(AllIcons.Nodes.TreeOpen);
     }

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -32,7 +32,7 @@
 import org.jetbrains.annotations.NotNull;
 
 import javax.swing.*;
-import javax.swing.plaf.ColorUIResource;
+import javax.swing.plaf.*;
 import java.awt.*;
 
 public enum MTTheme {
@@ -62,8 +62,8 @@ public int getTreeIndent() {
   public Color getBackgroundColor() {
     final Color defaultValue = MTUiUtils.getColor(
         new ColorUIResource(0x263238),
-        UIManager.getColor("darcula.background"),
-        UIManager.getColor("intellijlaf.background"));
+        ObjectUtils.notNull(UIManager.getColor("darcula.background"), new ColorUIResource(0x3c3f41)),
+        ObjectUtils.notNull(UIManager.getColor("intellijlaf.background"), new ColorUIResource(0xe8e8e8)));
     return ObjectUtils.notNull(UIManager.getColor("material.tab.backgroundColor"), defaultValue);
   }
 

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -55,8 +55,8 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import org.jetbrains.annotations.NotNull;
 
-import javax.swing.*;
-import javax.swing.border.MatteBorder;
+import javax.swing.border.*;
+import javax.swing.plaf.*;
 import java.awt.*;
 import java.lang.reflect.Field;
 
@@ -282,7 +282,7 @@ private void paintSelectionAndBorder(final Object[] objects,
     // Position of tabs
     final JBTabsPosition position = tabsComponent.getTabsPosition();
     if (position.equals(JBTabsPosition.left) || position.equals(JBTabsPosition.right)) {
-      final Color border = UIManager.getColor("Separator.foreground");
+      final Color border = new ColorUIResource(0x3D3D3D);
       tabsComponent.setBorder(new MatteBorder(1, 0, 1, 0, border));
     }
 

File: src/main/java/com/chrisrm/idea/config/MTCustomThemeConfigurable.java
Patch:
@@ -102,6 +102,6 @@ protected void doApply(final MTCustomThemeForm mtForm, final MTCustomThemeConfig
 
   @Override
   protected boolean checkModified(final MTCustomThemeForm mtForm, final MTCustomThemeConfig mtConfig) {
-    return false;
+    return true;
   }
 }

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -178,7 +178,6 @@ protected String[] getBackgroundResources() {
         "ToolTip.background",
         "Spinner.background",
         "SplitPane.highlight",
-        "Panel.background",
         "SidePanel.background",
         "DialogWrapper.southPanelDivider",
         "OnePixelDivider.background",

File: src/main/java/com/chrisrm/idea/actions/themes/MTCustomThemeAction.java
Patch:
@@ -34,11 +34,11 @@
 public final class MTCustomThemeAction extends MTAbstractThemeAction {
   @Override
   public boolean isSelected(final AnActionEvent e) {
-    return MTConfig.getInstance().getSelectedTheme() == MTThemes.CUSTOM.getTheme();
+    return MTConfig.getInstance().getSelectedTheme() == MTThemes.CUSTOM;
   }
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.CUSTOM.getTheme());
+    MTThemeManager.getInstance().activate(MTThemes.CUSTOM);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTDarkerThemeAction.java
Patch:
@@ -34,11 +34,11 @@
 public final class MTDarkerThemeAction extends MTAbstractThemeAction {
   @Override
   public boolean isSelected(final AnActionEvent e) {
-    return MTConfig.getInstance().getSelectedTheme() == MTThemes.DARKER.getTheme();
+    return MTConfig.getInstance().getSelectedTheme() == MTThemes.DARKER;
   }
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.DARKER.getTheme());
+    MTThemeManager.getInstance().activate(MTThemes.DARKER);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTDefaultThemeAction.java
Patch:
@@ -34,11 +34,11 @@
 public final class MTDefaultThemeAction extends MTAbstractThemeAction {
   @Override
   public boolean isSelected(final AnActionEvent e) {
-    return MTConfig.getInstance().getSelectedTheme() == MTThemes.DEFAULT.getTheme();
+    return MTConfig.getInstance().getSelectedTheme() == MTThemes.DEFAULT;
   }
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.DEFAULT.getTheme());
+    MTThemeManager.getInstance().activate(MTThemes.DEFAULT);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTLighterThemeAction.java
Patch:
@@ -34,11 +34,11 @@
 public final class MTLighterThemeAction extends MTAbstractThemeAction {
   @Override
   public boolean isSelected(final AnActionEvent e) {
-    return MTConfig.getInstance().getSelectedTheme() == MTThemes.LIGHTER.getTheme();
+    return MTConfig.getInstance().getSelectedTheme() == MTThemes.LIGHTER;
   }
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.LIGHTER.getTheme());
+    MTThemeManager.getInstance().activate(MTThemes.LIGHTER);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTMonokaiThemeAction.java
Patch:
@@ -34,11 +34,11 @@
 public final class MTMonokaiThemeAction extends MTAbstractThemeAction {
   @Override
   public boolean isSelected(final AnActionEvent e) {
-    return MTConfig.getInstance().getSelectedTheme() == MTThemes.MONOKAI.getTheme();
+    return MTConfig.getInstance().getSelectedTheme() == MTThemes.MONOKAI;
   }
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.MONOKAI.getTheme());
+    MTThemeManager.getInstance().activate(MTThemes.MONOKAI);
   }
 }

File: src/main/java/com/chrisrm/idea/actions/themes/MTPalenightThemeAction.java
Patch:
@@ -34,11 +34,11 @@
 public final class MTPalenightThemeAction extends MTAbstractThemeAction {
   @Override
   public boolean isSelected(final AnActionEvent e) {
-    return MTConfig.getInstance().getSelectedTheme() == MTThemes.PALENIGHT.getTheme();
+    return MTConfig.getInstance().getSelectedTheme() == MTThemes.PALENIGHT;
   }
 
   @Override
   public void setSelected(final AnActionEvent e, final boolean state) {
-    MTThemeManager.getInstance().activate(MTThemes.PALENIGHT.getTheme());
+    MTThemeManager.getInstance().activate(MTThemes.PALENIGHT);
   }
 }

File: src/main/java/com/chrisrm/idea/config/ui/MTForm.java
Patch:
@@ -250,7 +250,7 @@ public MTForm() {
 
     // Reset tab defaults
     resetTabDefaultsBtn.addActionListener(e -> {
-      final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme();
+      final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme().getTheme();
       Color borderColor = mtTheme.getBorderColor();
       int thickness = mtTheme.getBorderThickness();
 

File: src/main/java/com/chrisrm/idea/status/MTStatusWidget.java
Patch:
@@ -115,7 +115,7 @@ public void paintComponent(final Graphics g) {
       as.addAttribute(TextAttribute.SIZE, DEFAULT_FONT_SIZE);
 
       // background
-      g2.setColor(mtConfig.getSelectedTheme().getContrastColor());
+      g2.setColor(mtConfig.getSelectedTheme().getTheme().getContrastColor());
       g2.fillRoundRect(0, 0, size.width, MTUiUtils.HEIGHT, arcs.width, arcs.height);
 
       // label

File: src/main/java/com/chrisrm/idea/tabs/MTEditorTabColor.java
Patch:
@@ -39,7 +39,7 @@ public final class MTEditorTabColor implements EditorTabColorProvider {
 
   @Override
   public Color getEditorTabColor(@NotNull final Project project, @NotNull final VirtualFile virtualFile) {
-    final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme();
+    final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme().getTheme();
 
     return mtTheme.getBackgroundColor();
   }

File: src/main/java/com/chrisrm/idea/tabs/MTTabsEditorAdapter.java
Patch:
@@ -70,7 +70,7 @@ public void selectionChanged(@NotNull final FileEditorManagerEvent event) {
   private void processActiveTab(@NotNull final FileStatusManager fileStatusManager,
                                 @NotNull final VirtualFile file,
                                 @NotNull final EditorWindow editorWindow) {
-    final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme();
+    final MTTheme mtTheme = MTConfig.getInstance().getSelectedTheme().getTheme();
     final MTConfig mtConfig = MTConfig.getInstance();
 
     final Color backgroundColor = mtTheme.getBackgroundColor();

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -75,7 +75,7 @@ public final class MTTabsPainterPatcherComponent implements ApplicationComponent
 
   public MTTabsPainterPatcherComponent() {
     config = MTConfig.getInstance();
-    theme = config.getSelectedTheme();
+    theme = config.getSelectedTheme().getTheme();
 
     PropertiesComponent.getInstance().setValue(TABS_HEIGHT, 25, 24);
     PropertiesComponent.getInstance().setValue(BOLD_TABS, false, false);
@@ -330,13 +330,13 @@ public final void fillSelectionAndBorder(final Graphics2D g,
 
     public final Color getBackgroundColor() {
       final MTConfig config = MTConfig.getInstance();
-      final MTTheme mtTheme = config.getSelectedTheme();
+      final MTTheme mtTheme = config.getSelectedTheme().getTheme();
       return mtTheme.getBackgroundColor();
     }
 
     public final Color getContrastColor() {
       final MTConfig config = MTConfig.getInstance();
-      final MTTheme mtTheme = config.getSelectedTheme();
+      final MTTheme mtTheme = config.getSelectedTheme().getTheme();
       return config.getIsContrastMode() ? mtTheme.getContrastColor() : mtTheme.getBackgroundColor();
     }
 

File: src/main/java/com/chrisrm/idea/themes/MTCustomTheme.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.themes;
 
 import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.MTThemes;
 
 public final class MTCustomTheme extends MTTheme implements LafTheme {
   public static final String BACKGROUND = "263238"; // 38, 50, 56
@@ -48,7 +49,7 @@ public final class MTCustomTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MTCustomTheme() {
-    super("mt.custom", "Material Theme - Custom", true);
+    super("mt.custom", "Material Theme - Custom", true, MTThemes.CUSTOM);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/MTDarkerTheme.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.themes;
 
 import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.MTThemes;
 
 public final class MTDarkerTheme extends MTTheme implements LafTheme {
   public static final String BACKGROUND = "212121"; // 33, 33, 33
@@ -51,7 +52,7 @@ public final class MTDarkerTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MTDarkerTheme() {
-    super("mt.darker", "Material Theme - Darker", true);
+    super("mt.darker", "Material Theme - Darker", true, MTThemes.DARKER);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/MTDefaultTheme.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.themes;
 
 import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.MTThemes;
 
 public final class MTDefaultTheme extends MTTheme implements LafTheme {
   public static final String BACKGROUND = "263238"; // 38, 50, 56
@@ -48,7 +49,7 @@ public final class MTDefaultTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MTDefaultTheme() {
-    super("mt.default", "Material Theme - Default", true);
+    super("mt.default", "Material Theme - Default", true, MTThemes.DEFAULT);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/MTLighterTheme.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.themes;
 
 import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.MTThemes;
 
 public final class MTLighterTheme extends MTTheme implements LafTheme {
   public static final String BACKGROUND = "FAFAFA"; // 250, 250, 250
@@ -51,7 +52,7 @@ public final class MTLighterTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MTLighterTheme() {
-    super("mt.lighter", "Material Theme - Lighter", false);
+    super("mt.lighter", "Material Theme - Lighter", false, MTThemes.LIGHTER);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/MTPalenightTheme.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.themes;
 
 import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.MTThemes;
 
 public final class MTPalenightTheme extends MTTheme implements LafTheme {
   public static final String BACKGROUND = "292D3E"; // 41, 45, 62
@@ -51,7 +52,7 @@ public final class MTPalenightTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MTPalenightTheme() {
-    super("mt.palenight", "Material Theme - Palenight", true);
+    super("mt.palenight", "Material Theme - Palenight", true, MTThemes.PALENIGHT);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/themes/MonokaiTheme.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.themes;
 
 import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.MTThemes;
 
 public final class MonokaiTheme extends MTTheme implements LafTheme {
   public static final String BACKGROUND = "263238"; // 38, 50, 56
@@ -48,7 +49,7 @@ public final class MonokaiTheme extends MTTheme implements LafTheme {
   public static final String ACCENT_COLOR = "80CBC4"; // 128, 203, 196
 
   public MonokaiTheme() {
-    super("monokai", "Material Monokai", true);
+    super("monokai", "Material Monokai", true, MTThemes.MONOKAI);
   }
 
   @Override

File: src/main/java/com/chrisrm/idea/ui/MTProgressBarUI.java
Patch:
@@ -90,7 +90,7 @@ protected void paintIndeterminate(final Graphics g2d, final JComponent c) {
     }
 
     JBColor jbcolor;
-    if (MTConfig.getInstance().getSelectedTheme().isDark()) {
+    if (MTConfig.getInstance().getSelectedTheme().getTheme().isDark()) {
       jbcolor = new JBColor(progressBarHalfColor, progressBarHalfColor);
     } else {
       jbcolor = new JBColor(progressBarHalfColorLight, progressBarHalfColorLight);

File: src/main/java/com/chrisrm/idea/MTThemeManager.java
Patch:
@@ -172,7 +172,7 @@ public final class MTThemeManager {
   };
   public static final int DEFAULT_SIDEBAR_HEIGHT = 28;
   public static final int DEFAULT_TAB_HEIGHT = 24;
-  public static final boolean DEFAULT_IS_BOLD_TABS = true;
+  public static final boolean DEFAULT_IS_BOLD_TABS = false;
   public static final int DEFAULT_INDENT = 6;
   public static final int DEFAULT_FONT_SIZE = 12;
   public static final String DEFAULT_FONT = "Roboto";

File: src/main/java/com/chrisrm/idea/config/ui/MTForm.java
Patch:
@@ -103,7 +103,7 @@ public void init() {
     MTConfig config = MTConfig.getInstance();
     highlightSpinnerModel = new SpinnerNumberModel(config.getHighlightThickness(), 1, 5, 1);
     highlightSpinner.setModel(highlightSpinnerModel);
-    tabsHeightSpinnerModel = new SpinnerNumberModel(config.getTabsHeight(), 25, 60, 1);
+    tabsHeightSpinnerModel = new SpinnerNumberModel(config.getTabsHeight(), 18, 60, 1);
     tabHeightSpinner.setModel(tabsHeightSpinnerModel);
     customTreeIndentModel = new SpinnerNumberModel(config.getCustomTreeIndent(), 2, 8, 2);
     customIndentSpinner.setModel(customTreeIndentModel);

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -115,7 +115,8 @@ private void hackTabsGetHeight() throws
       public void edit(final MethodCall m) throws CannotCompileException {
         if (m.getClassName().equals("com.intellij.ui.tabs.TabsUtil") && m.getMethodName().equals("getTabsHeight")) {
           final String code = String.format("com.intellij.ide.util.PropertiesComponent.getInstance().getInt(\"%s\", 25)", TABS_HEIGHT);
-          m.replace("{ $_ = com.intellij.util.ui.JBUI.scale(myCentered ? " + code + " : 25); }");
+          final String isDebugTab = "!myInfo.getTabActionPlace().contains(\"debugger\")";
+          m.replace(String.format("{ $_ = com.intellij.util.ui.JBUI.scale(%s ? %s : 25); }", isDebugTab, code));
         }
       }
     });

File: src/main/java/com/chrisrm/idea/schemes/MTFileColors.java
Patch:
@@ -57,6 +57,7 @@ public final class MTFileColors {
         final String property = FileColorsBundle.messageOrDefault("material.file." + allFileStatus.getId().toLowerCase(), "-1");
         // If not found do not add the color to the map
         if (Objects.equals(property, "-1")) {
+          FILE_STATUS_COLOR_MAP.put(allFileStatus, ColorKey.createColorKey("MT_" + allFileStatus.getId(), null));
           continue;
         }
 

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -163,8 +163,11 @@ public final class MTThemeManager {
       "CheckBox.darcula.borderColor1",
       "CheckBox.darcula.borderColor2",
       "CheckBox.darcula.backgroundColor1.selected",
+      "CheckBox.darcula.backgroundColor2.selected",
       "CheckBox.darcula.focusedArmed.backgroundColor1.selected",
+      "CheckBox.darcula.focusedArmed.backgroundColor2.selected",
       "CheckBox.darcula.focused.backgroundColor1.selected",
+      "CheckBox.darcula.focused.backgroundColor2.selected",
       "Hyperlink.linkColor",
       "Focus.color",
       "material.tab.borderColor"

File: src/main/java/com/chrisrm/idea/config/MTFileColorsPage.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.config;
 
 import com.chrisrm.idea.messages.MaterialThemeBundle;
+import com.chrisrm.idea.schemes.MTFileColors;
 import com.intellij.openapi.editor.colors.TextAttributesKey;
 import com.intellij.openapi.fileTypes.PlainSyntaxHighlighter;
 import com.intellij.openapi.fileTypes.SyntaxHighlighter;
@@ -61,7 +62,8 @@ public ColorDescriptor[] getColorDescriptors() {
 
     final FileStatus[] allFileStatuses = FileStatusFactory.getInstance().getAllFileStatuses();
     for (final FileStatus allFileStatus : allFileStatuses) {
-      descriptors.add(new ColorDescriptor(allFileStatus.getText(), allFileStatus.getColorKey(), ColorDescriptor.Kind.FOREGROUND));
+      descriptors.add(new ColorDescriptor(allFileStatus.getText(), MTFileColors.getColorKey(allFileStatus), ColorDescriptor.Kind
+          .FOREGROUND));
     }
 
     return ArrayUtil.toObjectArray(descriptors, ColorDescriptor.class);

File: src/main/java/com/chrisrm/idea/ui/MTSelectedTreePainter.java
Patch:
@@ -27,10 +27,11 @@
 package com.chrisrm.idea.ui;
 
 import com.chrisrm.idea.MTConfig;
+import com.intellij.ui.ColorUtil;
 import com.intellij.util.ui.JBUI;
 import com.intellij.util.ui.UIUtil;
 
-import javax.swing.border.Border;
+import javax.swing.border.*;
 import java.awt.*;
 
 public final class MTSelectedTreePainter implements Border {
@@ -48,7 +49,7 @@ public void paintBorder(final Component c, final Graphics g, final int x, final
   }
 
   private Color getHighlightColor() {
-    return MTConfig.getInstance().getHighlightColor();
+    return ColorUtil.fromHex(MTConfig.getInstance().getAccentColor());
   }
 
   private int getThickness() {

File: src/main/java/com/chrisrm/idea/plugins/MTPluginPHP.java
Patch:
@@ -34,7 +34,7 @@ public final class MTPluginPHP implements ApplicationComponent {
 
   public void initComponent() {
     try {
-      final Class<?> iconsClass = Class.forName("com.jetbrains.php.PhpIcons", false, getClass().getClassLoader());
+      final Class<?> iconsClass = Class.forName("icons.PhpIcons", false, getClass().getClassLoader());
       IconReplacer.replaceIcons(iconsClass, "/icons/plugins/php/");
     } catch (ClassNotFoundException e) {
       // Suppress

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -88,7 +88,7 @@ private static void hackToolWindowHeight() {
       ctMethod.instrument(new ExprEditor() {
         public void edit(final MethodCall m) throws CannotCompileException {
           if (m.getClassName().equals("com.intellij.ui.tabs.TabsUtil") && m.getMethodName().equals("getTabsHeight")) {
-            m.replace("{ $_ = 25; }");
+            m.replace("{ $_ = com.intellij.util.ui.JBUI.scale(25); }");
           }
         }
       });
@@ -113,7 +113,8 @@ private void hackTabsGetHeight() throws
     ctMethod.instrument(new ExprEditor() {
       public void edit(final MethodCall m) throws CannotCompileException {
         if (m.getClassName().equals("com.intellij.ui.tabs.TabsUtil") && m.getMethodName().equals("getTabsHeight")) {
-          m.replace("{ $_ = com.intellij.ide.util.PropertiesComponent.getInstance().getInt(\"" + TABS_HEIGHT + "\", 25); }");
+          m.replace("{ $_ = com.intellij.util.ui.JBUI.scale(com.intellij.ide.util.PropertiesComponent.getInstance().getInt(\"" +
+              TABS_HEIGHT + "\", 25)); }");
         }
       }
     });

File: src/main/java/com/chrisrm/idea/ui/MTTextFieldUI.java
Patch:
@@ -138,7 +138,7 @@ protected void paintDarculaBackground(final Graphics2D g, final JTextComponent c
           .bottom + JBUI.scale(6), JBUI.scale(5), JBUI.scale(5));
     } else {
       g.fillRect(i.left - JBUI.scale(5), i.top - JBUI.scale(2), width - i.right - i.left + JBUI.scale(10), height - i.top - i
-          .bottom + JBUI.scale(6));
+          .bottom + JBUI.scale(8));
     }
   }
 

File: src/main/java/com/chrisrm/idea/utils/MTUiUtils.java
Patch:
@@ -32,7 +32,7 @@
 import com.intellij.util.ui.JBUI;
 
 import java.awt.*;
-import java.awt.font.TextAttribute;
+import java.awt.font.*;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -78,8 +78,8 @@ public static Font getWidgetFont() {
 
         final Map<TextAttribute, Object> attributes = new HashMap<>();
 
-        attributes.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_ULTRABOLD);
-        attributes.put(TextAttribute.SIZE, 8);
+        attributes.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
+        attributes.put(TextAttribute.SIZE, JBUI.scale(11));
 
         return f.deriveFont(attributes);
 

File: src/main/java/com/chrisrm/idea/utils/PropertiesParser.java
Patch:
@@ -27,6 +27,7 @@
 package com.chrisrm.idea.utils;
 
 import com.chrisrm.idea.MTLaf;
+import com.chrisrm.idea.icons.tinted.TintedIconsService;
 import com.intellij.openapi.util.IconLoader;
 import com.intellij.openapi.util.text.StringUtil;
 import com.intellij.ui.ColorUtil;
@@ -112,7 +113,7 @@ public static Object parseValue(final String key, @NotNull final String value) {
       final Color color = parseColor(value);
       final Integer invVal = getInteger(value);
       final Boolean boolVal = "true".equals(value) ? Boolean.TRUE : "false".equals(value) ? Boolean.FALSE : null;
-      Icon icon = value.startsWith("AllIcons.") ? IconLoader.getIcon(value) : null;
+      Icon icon = value.startsWith("AllIcons.") ? TintedIconsService.getIcon(value) : null;
       if (icon == null && value.endsWith(".png")) {
         icon = IconLoader.findIcon(value, MTLaf.class, true);
       }

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -93,6 +93,9 @@ static void patchStatusBar() throws Exception {
       // Quick info border
       StaticPatcher.setFinalStatic(Gray.class, "_90", gray.withAlpha(25));
 
+      // tool window color
+      final boolean dark = MTConfig.getInstance().getSelectedTheme().isDark();
+      StaticPatcher.setFinalStatic(Gray.class, "_15", dark ? Gray._15.withAlpha(255) : Gray._200.withAlpha(15));
       // This thing doesnt work on compiled jars...
       final Class<?> clazz = Class.forName("com.intellij.openapi.wm.impl.status.StatusBarUI$BackgroundPainter");
 

File: src/main/java/com/chrisrm/idea/utils/MTUiUtils.java
Patch:
@@ -32,7 +32,7 @@
 import com.intellij.util.ui.JBUI;
 
 import java.awt.*;
-import java.awt.font.TextAttribute;
+import java.awt.font.*;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -78,8 +78,8 @@ public static Font getWidgetFont() {
 
         final Map<TextAttribute, Object> attributes = new HashMap<>();
 
-        attributes.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_ULTRABOLD);
-        attributes.put(TextAttribute.SIZE, 8);
+        attributes.put(TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD);
+        attributes.put(TextAttribute.SIZE, JBUI.scale(11));
 
         return f.deriveFont(attributes);
 

File: src/main/java/com/chrisrm/idea/plugins/MTPluginPHP.java
Patch:
@@ -34,7 +34,7 @@ public final class MTPluginPHP implements ApplicationComponent {
 
   public void initComponent() {
     try {
-      final Class<?> iconsClass = Class.forName("com.jetbrains.php.PhpIcons", false, getClass().getClassLoader());
+      final Class<?> iconsClass = Class.forName("icons.PhpIcons", false, getClass().getClassLoader());
       IconReplacer.replaceIcons(iconsClass, "/icons/plugins/php/");
     } catch (ClassNotFoundException e) {
       // Suppress

File: src/main/java/com/chrisrm/idea/tabs/MTTabsEditorAdapter.java
Patch:
@@ -89,6 +89,7 @@ private void processActiveTab(@NotNull final FileStatusManager fileStatusManager
   private void setBoldTabs(@NotNull final VirtualFile file,
                            @NotNull final EditorWindow editorWindow) {
     final EditorWithProviderComposite fileComposite = editorWindow.findFileComposite(file);
+    final boolean isBoldTabs = MTConfig.getInstance().getIsBoldTabs();
 
     // Find the tab of the selected file
     final int editorIndex = getEditorIndex(editorWindow, fileComposite);
@@ -99,7 +100,7 @@ private void setBoldTabs(@NotNull final VirtualFile file,
         try {
           tabbedPane.getTabs()
               .getTabAt(editorIndex)
-              .setDefaultStyle(SimpleTextAttributes.STYLE_BOLD);
+              .setDefaultStyle(isBoldTabs ? SimpleTextAttributes.STYLE_BOLD : SimpleTextAttributes.STYLE_PLAIN);
         }
         catch (IndexOutOfBoundsException ignored) {
         }

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -476,7 +476,7 @@ private void resetContrast() {
    */
   private void applyCustomTreeIndent() {
     final MTConfig mtConfig = MTConfig.getInstance();
-    final int defaultIndent = mtConfig.getSelectedTheme().getTreeIndent();
+    final int defaultIndent = 6;
 
     if (mtConfig.isCustomTreeIndentEnabled) {
       UIManager.put("Tree.rightChildIndent", mtConfig.customTreeIndent);

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -433,7 +433,7 @@ private void applyFonts() {
     } else {
       final Font roboto = MTUiUtils.findFont("Roboto");
       if (roboto != null) {
-        applyCustomFonts(lookAndFeelDefaults, "Roboto", JBUI.scale(12));
+        applyCustomFonts(lookAndFeelDefaults, "Roboto", JBUI.scale(14));
       }
     }
   }

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -57,9 +57,8 @@
 import sun.awt.AppContext;
 
 import javax.swing.*;
-import javax.swing.plaf.FontUIResource;
-import javax.swing.text.html.HTMLEditorKit;
-import javax.swing.text.html.StyleSheet;
+import javax.swing.plaf.*;
+import javax.swing.text.html.*;
 import java.awt.*;
 import java.lang.reflect.Field;
 import java.net.URL;
@@ -108,6 +107,7 @@ public final class MTThemeManager {
       "Tree.font"};
 
   private static final String[] CONTRASTED_RESOURCES = new String[]{
+      "Tree.background",
       "Tree.textBackground",
       //      "Table.background",
       "Viewport.background",

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -88,7 +88,7 @@ private static void hackToolWindowHeight() {
       ctMethod.instrument(new ExprEditor() {
         public void edit(final MethodCall m) throws CannotCompileException {
           if (m.getClassName().equals("com.intellij.ui.tabs.TabsUtil") && m.getMethodName().equals("getTabsHeight")) {
-            m.replace("{ $_ = 25; }");
+            m.replace("{ $_ = com.intellij.util.ui.JBUI.scale(25); }");
           }
         }
       });

File: src/main/java/com/chrisrm/idea/utils/IconReplacer.java
Patch:
@@ -82,7 +82,7 @@ public static void replaceIcons(final Class iconsClass, final String iconsRootPa
   }
 
   @NotNull
-  private static Icon getIcon(final String accentColor, final String newPath) {
+  public static Icon getIcon(final String accentColor, final String newPath) {
     if (TINTED_ICONS.contains(newPath)) {
       return new TintedIcon(IconLoader.getIcon(newPath), ColorUtil.fromHex(accentColor));
     }

File: src/main/java/com/chrisrm/idea/themes/MTLafComponent.java
Patch:
@@ -169,7 +169,7 @@ public void edit(final MethodCall m) throws CannotCompileException {
           if (m.getMethodName().equals("setColor")) {
             m.replace("{ $1 = new java.awt.Color(0x7f546e7a, true); $_ = $proceed($$); }");
           } else if (m.getMethodName().equals("draw")) {
-            m.replace("{ g.fillOval(3, 3, size.width - 6,size.height - 6); }");
+            m.replace("{ $0.fillOval(3, 3, 18, 18); }");
           }
         }
       });

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -73,7 +73,7 @@ public class MTThemeManager {
 
   private static final String[] contrastedResources = new String[]{
       "Tree.textBackground",
-      "Table.background",
+      //      "Table.background",
       "Viewport.background",
       "ToolBar.background",
       "SidePanel.background",

File: src/main/java/com/chrisrm/idea/themes/MTLafComponent.java
Patch:
@@ -272,7 +272,7 @@ private void setStatusBarBorders(boolean compactSidebar) {
       if (component != null) {
         IdeStatusBarImpl ideStatusBar = UIUtil.findComponentOfType(component, IdeStatusBarImpl.class);
         if (ideStatusBar != null) {
-          ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(10, 0));
+          ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(6, 0));
         }
       }
     });

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -39,7 +39,7 @@ public MTProjectViewNodeDecorator() {
     fileStatusColorMap.put(FileStatus.ADDED, ColorUtil.fromHex("#C3E887"));
     fileStatusColorMap.put(FileStatus.MERGE, ColorUtil.fromHex("#C792EA"));
     fileStatusColorMap.put(FileStatus.UNKNOWN, ColorUtil.fromHex("#F77669"));
-    fileStatusColorMap.put(FileStatus.IGNORED, ColorUtil.fromHex("#515D5D"));
+    fileStatusColorMap.put(FileStatus.IGNORED, ColorUtil.fromHex("#B0BEC5"));
     fileStatusColorMap.put(FileStatus.HIJACKED, ColorUtil.fromHex("#FFCB6B"));
     fileStatusColorMap.put(FileStatus.MERGED_WITH_CONFLICTS, ColorUtil.fromHex("#BC3F3C"));
     fileStatusColorMap.put(FileStatus.MERGED_WITH_BOTH_CONFLICTS, ColorUtil.fromHex("#BC3F3C"));

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -73,7 +73,7 @@ public class MTThemeManager {
 
   private static final String[] contrastedResources = new String[]{
       "Tree.textBackground",
-      "Table.background",
+      //      "Table.background",
       "Viewport.background",
       "ToolBar.background",
       "SidePanel.background",

File: src/main/java/com/chrisrm/idea/themes/MTLafComponent.java
Patch:
@@ -272,7 +272,7 @@ private void setStatusBarBorders(boolean compactSidebar) {
       if (component != null) {
         IdeStatusBarImpl ideStatusBar = UIUtil.findComponentOfType(component, IdeStatusBarImpl.class);
         if (ideStatusBar != null) {
-          ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(10, 0));
+          ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(6, 0));
         }
       }
     });

File: src/main/java/com/chrisrm/idea/tree/MTProjectViewNodeDecorator.java
Patch:
@@ -39,7 +39,7 @@ public MTProjectViewNodeDecorator() {
     fileStatusColorMap.put(FileStatus.ADDED, ColorUtil.fromHex("#C3E887"));
     fileStatusColorMap.put(FileStatus.MERGE, ColorUtil.fromHex("#C792EA"));
     fileStatusColorMap.put(FileStatus.UNKNOWN, ColorUtil.fromHex("#F77669"));
-    fileStatusColorMap.put(FileStatus.IGNORED, ColorUtil.fromHex("#515D5D"));
+    fileStatusColorMap.put(FileStatus.IGNORED, ColorUtil.fromHex("#B0BEC5"));
     fileStatusColorMap.put(FileStatus.HIJACKED, ColorUtil.fromHex("#FFCB6B"));
     fileStatusColorMap.put(FileStatus.MERGED_WITH_CONFLICTS, ColorUtil.fromHex("#BC3F3C"));
     fileStatusColorMap.put(FileStatus.MERGED_WITH_BOTH_CONFLICTS, ColorUtil.fromHex("#BC3F3C"));

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -72,6 +72,7 @@ public Color getDisabledColor() {
     return ColorUtil.fromHex(properties.getProperty("material.disabled"));
   }
 
+  @NotNull
   public String getEditorColorsScheme() {
     return editorColorsScheme;
   }

File: src/main/java/com/chrisrm/idea/themes/MTLafComponent.java
Patch:
@@ -269,7 +269,9 @@ private void setStatusBarBorders(boolean compactSidebar) {
       JComponent component = WindowManager.getInstance().findVisibleFrame().getRootPane();
       if (component != null) {
         IdeStatusBarImpl ideStatusBar = UIUtil.findComponentOfType(component, IdeStatusBarImpl.class);
-        ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(10, 0));
+        if (ideStatusBar != null) {
+          ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(10, 0));
+        }
       }
     });
   }

File: src/main/java/com/chrisrm/idea/themes/MTLafComponent.java
Patch:
@@ -269,7 +269,9 @@ private void setStatusBarBorders(boolean compactSidebar) {
       JComponent component = WindowManager.getInstance().findVisibleFrame().getRootPane();
       if (component != null) {
         IdeStatusBarImpl ideStatusBar = UIUtil.findComponentOfType(component, IdeStatusBarImpl.class);
-        ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(10, 0));
+        if (ideStatusBar != null) {
+          ideStatusBar.setBorder(compactSidebar ? JBUI.Borders.empty() : JBUI.Borders.empty(10, 0));
+        }
       }
     });
   }

File: src/main/java/com/chrisrm/idea/config/MTConfigTopHitProvider.java
Patch:
@@ -18,7 +18,6 @@
 public class MTConfigTopHitProvider extends OptionsTopHitProvider {
 
   private static final Collection<OptionDescription> ourOptions = Collections.unmodifiableCollection(Arrays.asList(
-      option(messageIde("mt.activetab"), "getHighlightColorEnabled", "setHighlightColorEnabled"),
       option(messageIde("mt.contrast"), "getIsContrastMode", "setIsContrastMode"),
       option(messageIde("mt.materialdesign"), "getIsMaterialDesign", "setIsMaterialDesign"),
       option(messageIde("mt.boldtabs"), "getIsBoldTabs", "setIsBoldTabs"),

File: src/main/java/com/chrisrm/idea/actions/MTDarkerTheme.java
Patch:
@@ -2,10 +2,9 @@
 
 import com.chrisrm.idea.MTTheme;
 import com.chrisrm.idea.themes.MTThemeManager;
-import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 
-public class MTDarkerTheme extends AnAction {
+public class MTDarkerTheme extends MTAbstractTheme {
   public static String BACKGROUND = "212121"; // 33, 33, 33
   public static String FOREGROUND = "B0BEC5"; // 176, 190, 197
   public static String CARET = "FFCC00"; // 255, 204, 0
@@ -30,6 +29,5 @@ public class MTDarkerTheme extends AnAction {
   @Override
   public void actionPerformed(AnActionEvent anActionEvent) {
     MTThemeManager.getInstance().activate(MTTheme.DARKER);
-    //    MTTheme.DARKER.activate();
   }
 }

File: src/main/java/com/chrisrm/idea/actions/MTLighterTheme.java
Patch:
@@ -2,10 +2,9 @@
 
 import com.chrisrm.idea.MTTheme;
 import com.chrisrm.idea.themes.MTThemeManager;
-import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 
-public class MTLighterTheme extends AnAction {
+public class MTLighterTheme extends MTAbstractTheme {
   public static String BACKGROUND = "FAFAFA"; // 250, 250, 250
   public static String FOREGROUND = "A7ADB0"; // 167, 173, 176
   public static String CARET = "FFCC00"; // 255, 204, 0
@@ -30,6 +29,5 @@ public class MTLighterTheme extends AnAction {
   @Override
   public void actionPerformed(AnActionEvent anActionEvent) {
     MTThemeManager.getInstance().activate(MTTheme.LIGHTER);
-    //    MTTheme.LIGHTER.activate();
   }
 }

File: src/main/java/com/chrisrm/idea/actions/MTNoTheme.java
Patch:
@@ -2,10 +2,9 @@
 
 import com.chrisrm.idea.MTTheme;
 import com.chrisrm.idea.themes.MTThemeManager;
-import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 
-public class MTNoTheme extends AnAction {
+public class MTNoTheme extends MTAbstractTheme {
   @Override
   public void actionPerformed(AnActionEvent e) {
     MTThemeManager.getInstance().activate(MTTheme.NONE);

File: src/main/java/com/chrisrm/idea/actions/MTPalenightTheme.java
Patch:
@@ -2,10 +2,9 @@
 
 import com.chrisrm.idea.MTTheme;
 import com.chrisrm.idea.themes.MTThemeManager;
-import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 
-public class MTPalenightTheme extends AnAction {
+public class MTPalenightTheme extends MTAbstractTheme {
   public static String BACKGROUND = "292D3E"; // 41, 45, 62
   public static String FOREGROUND = "B0BEC5"; // 176, 190, 197
   public static String CARET = "FFCC00"; // 255, 204, 0
@@ -30,6 +29,5 @@ public class MTPalenightTheme extends AnAction {
   @Override
   public void actionPerformed(AnActionEvent anActionEvent) {
     MTThemeManager.getInstance().activate(MTTheme.PALENIGHT);
-    //    MTTheme.PALENIGHT.activate();
   }
 }

File: src/main/java/com/chrisrm/idea/config/ConfigNotifier.java
Patch:
@@ -10,7 +10,7 @@ public interface ConfigNotifier {
   /**
    * Topic for Material Theme Settings changes
    */
-  Topic<ConfigNotifier> CONFIG_TOPIC = Topic.create("Material Theme Config", ConfigNotifier.class);
+  Topic<ConfigNotifier> CONFIG_TOPIC = Topic.create("Material Theme Config save", ConfigNotifier.class);
 
   void configChanged(MTConfig mtConfig);
 

File: src/main/java/com/chrisrm/idea/utils/UIReplacer.java
Patch:
@@ -177,6 +177,9 @@ static void patchTabs() throws Exception {
 
     private static void patchDialogs() throws Exception {
       Color color = UIManager.getColor("Dialog.titleColor");
+      if (color == null) {
+        color = Gray._55;
+      }
 
       StaticPatcher.setFinalStatic(CaptionPanel.class, "CNT_ACTIVE_BORDER_COLOR", new JBColor(color, color));
       StaticPatcher.setFinalStatic(CaptionPanel.class, "BND_ACTIVE_COLOR", new JBColor(color, color));

File: src/main/java/com/chrisrm/idea/actions/MTDarkerTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTDarkerTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "B0BEC5"; // 176, 190, 197
   public static String SUB_LABEL = "616161"; // 97, 97, 97
-  public static String DISABLED = "474747"; // 65, 89, 103
+  public static String DISABLED = "323232"; // 65, 89, 103
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "616161"; // 97, 97, 97

File: src/main/java/com/chrisrm/idea/actions/MTDefaultTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTDefaultTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "B0BEC5"; // 176, 190, 197
   public static String SUB_LABEL = "546E7A"; // 84, 110, 122
-  public static String DISABLED = "415967"; // 65, 89, 103
+  public static String DISABLED = "2E3C43"; // 65, 89, 103
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "78909C"; // 120, 144, 156

File: src/main/java/com/chrisrm/idea/actions/MTLighterTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTLighterTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "546E7A";// 84, 110, 122
   public static String SUB_LABEL = "B0BEC5"; // 176, 190, 197
-  public static String DISABLED = "D2D4D5";
+  public static String DISABLED = "eae8e8";
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "90A4AE"; // 144, 164, 174

File: src/main/java/com/chrisrm/idea/actions/MTPalenightTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTPalenightTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "A6ACCD";// 166, 172, 205
   public static String SUB_LABEL = "676E95";  // 103, 110, 149
-  public static String DISABLED = "4E5579";
+  public static String DISABLED = "2f2e43";
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "676E95"; // 103, 110, 149

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -180,7 +180,9 @@ public void activate(MTTheme mtTheme) {
 
     // We need this to update parts of the UI that do not change
     DarculaInstaller.uninstall();
-    DarculaInstaller.install();
+    if (mtTheme.isDark()) {
+      DarculaInstaller.install();
+    }
 
     if (scheme != null) {
       EditorColorsManager.getInstance().setGlobalScheme(scheme);

File: src/main/java/com/chrisrm/idea/actions/MTDarkerTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTDarkerTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "B0BEC5"; // 176, 190, 197
   public static String SUB_LABEL = "616161"; // 97, 97, 97
-  public static String DISABLED = "474747"; // 65, 89, 103
+  public static String DISABLED = "323232"; // 65, 89, 103
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "616161"; // 97, 97, 97

File: src/main/java/com/chrisrm/idea/actions/MTDefaultTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTDefaultTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "B0BEC5"; // 176, 190, 197
   public static String SUB_LABEL = "546E7A"; // 84, 110, 122
-  public static String DISABLED = "415967"; // 65, 89, 103
+  public static String DISABLED = "2E3C43"; // 65, 89, 103
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "78909C"; // 120, 144, 156

File: src/main/java/com/chrisrm/idea/actions/MTLighterTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTLighterTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "546E7A";// 84, 110, 122
   public static String SUB_LABEL = "B0BEC5"; // 176, 190, 197
-  public static String DISABLED = "D2D4D5";
+  public static String DISABLED = "eae8e8";
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "90A4AE"; // 144, 164, 174

File: src/main/java/com/chrisrm/idea/actions/MTPalenightTheme.java
Patch:
@@ -15,7 +15,7 @@ public class MTPalenightTheme extends AnAction {
   public static String SELECTION_FOREGROUND = "FFFFFF";
   public static String LABEL = "A6ACCD";// 166, 172, 205
   public static String SUB_LABEL = "676E95";  // 103, 110, 149
-  public static String DISABLED = "4E5579";
+  public static String DISABLED = "2f2e43";
 
   public static String SIDEBAR_HEADING = "CFD8DC"; // 207, 216, 220
   public static String STATUS_LABEL = "676E95"; // 103, 110, 149

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -180,7 +180,9 @@ public void activate(MTTheme mtTheme) {
 
     // We need this to update parts of the UI that do not change
     DarculaInstaller.uninstall();
-    DarculaInstaller.install();
+    if (mtTheme.isDark()) {
+      DarculaInstaller.install();
+    }
 
     if (scheme != null) {
       EditorColorsManager.getInstance().setGlobalScheme(scheme);

File: src/main/java/com/chrisrm/idea/actions/MTContrastAction.java
Patch:
@@ -1,12 +1,12 @@
 package com.chrisrm.idea.actions;
 
-import com.chrisrm.idea.MTTheme;
+import com.chrisrm.idea.themes.MTThemeManager;
 import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
 
 public class MTContrastAction extends AnAction {
   @Override
   public void actionPerformed(AnActionEvent e) {
-    MTTheme.getCurrentPreference().toggleContrast();
+    MTThemeManager.getInstance().toggleContrast();
   }
 }

File: src/main/java/com/chrisrm/idea/icons/Associations.java
Patch:
@@ -44,7 +44,7 @@ protected Association findAssociationForFile(FileInfo file) {
       }
     }
 
-    if (result.getName().equals("Images")) {
+    if (result != null && result.getName().equals("Images")) {
       try {
         // Icon viewer plugin
         IdeaPluginDescriptor plugin = PluginManager.getPlugin(PluginId.getId("ch.dasoft.iconviewer"));

File: src/main/java/com/chrisrm/idea/tabs/MTTabsPainterPatcherComponent.java
Patch:
@@ -87,7 +87,7 @@ private void patchPainter(JBEditorTabs component) {
       @Override
       public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
         final Object result = method.invoke(tabsPainter, objects);
-        final Color defaultColor = theme.getBackgroundColor();
+        final Color defaultColor = theme.getBorderColor();
 
         // Custom props
         boolean isColorEnabled = config.isHighlightColorEnabled();

File: src/main/java/com/chrisrm/idea/themes/MTThemeManager.java
Patch:
@@ -200,7 +200,7 @@ public void activate(MTTheme mtTheme) {
    * @param compactSidebar
    */
   private void applyCompactSidebar(boolean compactSidebar) {
-    int rowHeight = compactSidebar ? 0 : JBUI.scale(24);
+    int rowHeight = compactSidebar ? JBUI.scale(18) : JBUI.scale(24);
     UIManager.put("Tree.rowHeight", rowHeight);
   }
 

File: src/main/java/com/chrisrm/idea/MTConfig.java
Patch:
@@ -22,6 +22,8 @@
     storages = @Storage("material_theme.xml")
 )
 public class MTConfig implements PersistentStateComponent<MTConfig> {
+  public static final String DEFAULT_BG = "https://raw.githubusercontent" +
+      ".com/mallowigi/material-theme-jetbrains-extended/master/src/main/resources/themes/wall.jpg";
   private MTTheme selectedTheme = MTTheme.DEFAULT;
   private String highlightColor;
   private boolean highlightColorEnabled = false;
@@ -30,8 +32,7 @@ public class MTConfig implements PersistentStateComponent<MTConfig> {
   private boolean isMaterialDesign = true;
   private boolean isBoldTabs = false;
   private String accentColor = "80CBC4";
-  private String wallpaper = "https://raw.githubusercontent" +
-      ".com/mallowigi/material-theme-jetbrains-extended/master/src/main/resources/themes/wall.jpg";
+  private String wallpaper = DEFAULT_BG;
 
   private boolean wallpaperSet = true;
   private boolean useMaterialIcons = true;

File: src/main/java/com/chrisrm/idea/themes/MTLafComponent.java
Patch:
@@ -10,11 +10,12 @@
 import com.intellij.openapi.application.impl.ApplicationImpl;
 import com.intellij.openapi.components.ApplicationComponent;
 import com.intellij.openapi.ui.Messages;
+import com.intellij.ui.components.JBPanel;
 import org.jetbrains.annotations.NotNull;
 
 import javax.swing.*;
 
-public class MTLafComponent implements ApplicationComponent {
+public class MTLafComponent extends JBPanel implements ApplicationComponent {
 
   private boolean isMaterialDesign;
 

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -75,7 +75,6 @@ public enum MTTheme {
       "Viewport.background",
       "ToolBar.background",
       "SidePanel.background",
-      "List.background",
       "TabbedPane.background",
       "TextField.background",
       "PasswordField.background",

File: src/test/java/com/chrisrm/idea/icons/AssociationsTest.java
Patch:
@@ -52,7 +52,7 @@ public void testFindIconForFiles() throws Exception {
         assertAssociationMatches("Python", "sample.py");
         assertAssociationMatches("R", "sample.r");
         assertAssociationMatches("Haskell", "sample.hs");
-        assertAssociationMatches("Jade", "sample.jade");
+        assertAssociationMatches("Jade/Pug", "sample.jade");
         assertAssociationMatches("Scala", "euler.scala");
         assertAssociationMatches("ASP", "sample.asp");
         assertAssociationMatches("ASP", "sample.cshtml");
@@ -72,7 +72,7 @@ public void testFindIconForFiles() throws Exception {
         assertAssociationMatches("Clojure", "sample.cljs");
         assertAssociationMatches("Clojure", "sample.clj");
         assertAssociationMatches("DLang", "sample.d");
-        assertAssociationMatches("HTAccess", "sample.conf");
+        assertAssociationMatches("nginx", "sample.conf");
         assertAssociationMatches("Docker", "Dockerfile");
         assertAssociationMatches("Docker", "sample.extra");
         assertAssociationMatches("ERLang", "sample.erc");
@@ -86,7 +86,7 @@ public void testFindIconForFiles() throws Exception {
         assertAssociationMatches("Font", "Roboto.dfont");
         assertAssociationMatches("Font", "Roboto.pfa");
         assertAssociationMatches("Font", "Roboto.afm");
-        assertAssociationMatches("HackLang", "sample.hh");
+        assertAssociationMatches("Hack", "sample.hh");
         assertAssociationMatches("Slim", "sample.slim");
         assertAssociationMatches("Swift", "sample.swift");
         assertAssociationMatches("TCL", "sample.tcl");

File: src/main/java/com/chrisrm/idea/ui/MTButtonUI.java
Patch:
@@ -137,9 +137,9 @@ protected boolean paintDecorations(Graphics2D g, JComponent c) {
             final GraphicsConfig config = GraphicsUtil.setupAAPainting(g);
             if (c.isEnabled() && border != null) {
                 final Insets ins = border.getBorderInsets(c);
-                final int xOff = 3;
+                final int xOff = 0;
                 final int yOff = 0;
-                final int width = w - 2 * JBUI.scale(xOff);
+                final int width = w;
 
                 if (c.hasFocus()) {
                     g.setPaint(UIUtil.getGradientPaint(0, 0, focusedButtonColor, 0, h, focusedButtonColor));
@@ -149,7 +149,7 @@ protected boolean paintDecorations(Graphics2D g, JComponent c) {
                     g.setPaint(UIUtil.getGradientPaint(0, 0, background, 0, h, background));
                 }
                 int rad = JBUI.scale(3);
-                g.fillRoundRect(JBUI.scale(xOff), yOff, w * JBUI.scale(xOff), h, rad, rad);
+                g.fillRoundRect(xOff, yOff, w, h, rad, rad);
             }
             config.restore();
             return true;

File: src/main/java/com/chrisrm/idea/MTLafComponent.java
Patch:
@@ -71,7 +71,7 @@ private void installTheme() {
             replaceProgressBar();
         }
 
-        UIReplacer.patchUI();
+//        UIReplacer.patchUI();
     }
 
     private void replaceProgressBar() {

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -1,5 +1,6 @@
 package com.chrisrm.idea;
 
+import com.chrisrm.idea.utils.UIReplacer;
 import com.google.common.collect.ImmutableList;
 import com.intellij.ide.plugins.PluginManager;
 import com.intellij.ide.ui.UISettings;
@@ -206,5 +207,7 @@ public void activate() {
         if (uiSettings.getOverrideLafFonts()) {
             applyCustomFonts(uiDefaults2, uiSettings.getFontFace(), uiSettings.getFontSize());
         }
+
+        UIReplacer.patchUI();
     }
 }

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -43,7 +43,6 @@ public enum MTTheme {
 
     private static final String[] contrastedResources = {
             "Tree.textBackground",
-            "List.background",
             "Table.background",
             "Viewport.background",
             "ToolBar.background"

File: src/main/java/com/chrisrm/idea/ui/MTToggleButtonUI.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.chrisrm.idea.ui;
 
-import com.intellij.ide.ui.laf.darcula.ui.DarculaButtonUI;
+import com.intellij.ide.ui.laf.darcula.ui.DarculaToggleButtonUI;
 
 import javax.swing.*;
 import javax.swing.plaf.ComponentUI;
 
-public class MTToggleButtonUI extends DarculaButtonUI {
+public class MTToggleButtonUI extends DarculaToggleButtonUI {
     @SuppressWarnings("MethodOverridesStaticMethodOfSuperclass")
     public static ComponentUI createUI(JComponent c) {
         return new MTToggleButtonUI();

File: src/main/java/com/chrisrm/idea/config/ui/MTForm.java
Patch:
@@ -9,9 +9,6 @@
 import javax.swing.event.ChangeListener;
 import java.awt.*;
 
-/**
- * Created by helio on 24/03/2017.
- */
 public class MTForm implements MTFormUI {
   private CheckBoxWithColorChooserImpl checkBoxWithColorChooserImpl;
   private JPanel content;

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -88,9 +88,9 @@ public void activate() {
 
         UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults();
 
-        if (uiSettings.OVERRIDE_NONIDEA_LAF_FONTS) {
-            JBUI.setScaleFactor(uiSettings.FONT_SIZE / 12f);
-            initFontDefaults(uiDefaults, uiSettings.FONT_FACE, uiSettings.FONT_SIZE);
+        if (uiSettings.getOverrideLafFonts()) {
+            JBUI.setUserScaleFactor(uiSettings.getFontSize() / 12f);
+            initFontDefaults(uiDefaults, uiSettings.getFontFace(), uiSettings.getFontSize());
         }
     }
 

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -88,9 +88,9 @@ public void activate() {
 
         UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults();
 
-        if (uiSettings.OVERRIDE_NONIDEA_LAF_FONTS) {
-            JBUI.setScaleFactor(uiSettings.FONT_SIZE / 12f);
-            initFontDefaults(uiDefaults, uiSettings.FONT_FACE, uiSettings.FONT_SIZE);
+        if (uiSettings.getOverrideLafFonts()) {
+            JBUI.setUserScaleFactor(uiSettings.getFontSize() / 12f);
+            initFontDefaults(uiDefaults, uiSettings.getFontFace(), uiSettings.getFontSize());
         }
     }
 

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -89,9 +89,9 @@ public void activate() {
 
         UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults();
 
-        if (uiSettings.OVERRIDE_NONIDEA_LAF_FONTS) {
+        if (uiSettings.getOverrideLafFonts()) {
 //            JBUI.setScaleFactor(uiSettings.FONT_SIZE / 12f);
-            initFontDefaults(uiDefaults, uiSettings.FONT_FACE, uiSettings.FONT_SIZE);
+            initFontDefaults(uiDefaults, uiSettings.getFontFace(), uiSettings.getFontSize());
         }
     }
 

File: src/main/java/com/chrisrm/idea/MTTheme.java
Patch:
@@ -89,7 +89,7 @@ public void activate() {
         UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults();
 
         if (uiSettings.OVERRIDE_NONIDEA_LAF_FONTS) {
-            JBUI.setScaleFactor(uiSettings.FONT_SIZE / 12f);
+//            JBUI.setScaleFactor(uiSettings.FONT_SIZE / 12f);
             initFontDefaults(uiDefaults, uiSettings.FONT_FACE, uiSettings.FONT_SIZE);
         }
     }

File: src/com/chrisrm/idea/MTTabsPainterPatcher.java
Patch:
@@ -80,7 +80,7 @@ public Object intercept(Object o, Method method, Object[] objects, MethodProxy m
                     final Graphics2D g2d = (Graphics2D) objects[0];
                     final Rectangle rect = (Rectangle) objects[1];
 
-                    g2d.setColor(ColorUtil.fromHex("#" + properties.getProperty("material.tab.border")));
+                    g2d.setColor(ColorUtil.fromHex("#" + properties.getProperty("material.tab.borderColor")));
                     g2d.fillRect(rect.x, rect.y + rect.height - 2, rect.width, 2);
                 }
 
@@ -113,7 +113,7 @@ protected Color getDefaultTabColor() {
 
             Properties properties = getProperties();
 
-            return ColorUtil.fromHex("#" + properties.getProperty("material.tab.background"));
+            return ColorUtil.fromHex("#" + properties.getProperty("material.tab.backgroundColor"));
         }
 
         @Override

File: src/com/chrisrm/idea/MTTabsPainterPatcher.java
Patch:
@@ -36,7 +36,7 @@ public MTTabsPainterPatcher() {
         this.theme = new MTDataLayer().getValue("theme", "default").toLowerCase();
 
         try {
-            InputStream stream = getClass().getResourceAsStream("/properties/" + this.theme + "/mt-" + this.theme + ".properties");
+            InputStream stream = getClass().getResourceAsStream("mt." + this.theme + ".properties");
             properties.load(stream);
             stream.close();
         } catch (IOException e) {
@@ -127,7 +127,7 @@ private Properties getProperties() {
             String theme = new MTDataLayer().getValue("theme", "default").toLowerCase();
 
             try {
-                InputStream stream = MTTabsPainter.class.getResourceAsStream("/properties/" + theme + "/mt-" + theme + ".properties");
+                InputStream stream = MTTabsPainter.class.getResourceAsStream("mt." + theme + ".properties");
                 properties.load(stream);
                 stream.close();
             } catch (IOException e) {}

File: src/com/chrisrm/idea/icons/MTFileIconProvider.java
Patch:
@@ -1,8 +1,7 @@
 package com.chrisrm.idea.icons;
 
-import com.bulenkov.iconloader.IconLoader;
 import com.intellij.ide.IconProvider;
-import com.intellij.lang.Language;
+import com.intellij.openapi.util.IconLoader;
 import com.intellij.openapi.vfs.VirtualFile;
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiFile;

File: src/com/chrisrm/idea/ui/MTInternalFrameUI.java
Patch:
@@ -1,7 +1,7 @@
 package com.chrisrm.idea.ui;
 
-import com.bulenkov.iconloader.util.GraphicsConfig;
-import com.bulenkov.iconloader.util.GraphicsUtil;
+import com.intellij.openapi.ui.GraphicsConfig;
+import com.intellij.util.ui.GraphicsUtil;
 
 import javax.swing.*;
 import javax.swing.plaf.ComponentUI;
@@ -169,7 +169,7 @@ public MaximizeIcon(Color c) {
         @Override
         public void paintIcon(Component c, Graphics g, int x, int y) {
             Graphics2D g2 = (Graphics2D) g;
-            GraphicsConfig config = GraphicsUtil.setupAAPainting(g2);
+            com.intellij.openapi.ui.GraphicsConfig config = GraphicsUtil.setupAAPainting(g2);
             g2.setStroke(new BasicStroke(2f));
             g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
             g2.setPaint(getColor());

File: src/com/chrisrm/idea/MTEditorTabColor.java
Patch:
@@ -11,9 +11,9 @@
 
 public class MTEditorTabColor implements EditorTabColorProvider {
 
-    public static final Color COLOR_DARKER = new JBColor(new Color(33, 33, 33, 255), new Color(33, 33, 33, 255));
-    public static final Color COLOR_DEFAULT = new JBColor(new Color(38, 50, 56, 255), new Color(38, 50, 56, 255));
-    public static final Color COLOR_LIGHTER = new JBColor(new Color(250, 250, 250, 255), new Color(250, 250, 250, 255));
+    private static final Color COLOR_DARKER = new JBColor(new Color(33, 33, 33, 255), new Color(33, 33, 33, 255));
+    private static final Color COLOR_DEFAULT = new JBColor(new Color(38, 50, 56, 255), new Color(38, 50, 56, 255));
+    private static final Color COLOR_LIGHTER = new JBColor(new Color(250, 250, 250, 255), new Color(250, 250, 250, 255));
 
     @Nullable
     @Override

File: src/com/chrisrm/idea/icons/MTFileIconProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.bulenkov.iconloader.IconLoader;
 import com.intellij.ide.IconProvider;
+import com.intellij.lang.Language;
 import com.intellij.openapi.vfs.VirtualFile;
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiFile;
@@ -22,6 +23,7 @@ public Icon getIcon(@NotNull PsiElement psiElement, int i) {
         if (containingFile != null) {
             VirtualFile vFile = containingFile.getVirtualFile();
             final FileInfo file = convertToFileInfo(vFile, psiElement);
+
             return getIconForAssociation(file, associations.findAssociationForFile(file));
         }
 

File: src/com/chrisrm/idea/ui/MTInternalFrameUI.java
Patch:
@@ -1,4 +1,4 @@
-package com.chrisrm.idea;
+package com.chrisrm.idea.ui;
 
 import com.bulenkov.iconloader.util.GraphicsConfig;
 import com.bulenkov.iconloader.util.GraphicsUtil;
@@ -16,7 +16,7 @@
  * @author Konstantin Bulenkov
  */
 public class MTInternalFrameUI extends BasicInternalFrameUI {
-    public MTInternalFrameUI(JInternalFrame b) {
+    private MTInternalFrameUI(JInternalFrame b) {
         super(b);
     }
 

File: src/com/chrisrm/idea/MTTabsPainterPatcher.java
Patch:
@@ -82,7 +82,7 @@ public Object intercept(Object o, Method method, Object[] objects, MethodProxy m
                     final Rectangle rect = (Rectangle) objects[1];
 
                     g2d.setColor(ColorUtil.fromHex("#" + properties.getProperty("material.tab.border")));
-                    g2d.fillRect(rect.x, rect.height - 2, rect.width, 2);
+                    g2d.fillRect(rect.x, rect.y + rect.height - 2, rect.width, 2);
                 }
 
                 return result;

File: src/com/chrisrm/idea/MTTabsPainterPatcher.java
Patch:
@@ -82,7 +82,7 @@ public Object intercept(Object o, Method method, Object[] objects, MethodProxy m
                     final Rectangle rect = (Rectangle) objects[1];
 
                     g2d.setColor(ColorUtil.fromHex("#" + properties.getProperty("material.tab.border")));
-                    g2d.fillRect(rect.x, rect.height - 2, rect.width, 2);
+                    g2d.fillRect(rect.x, rect.y + rect.height - 2, rect.width, 2);
                 }
 
                 return result;

File: test/com/chrisrm/idea/icons/AssociationsTest.java
Patch:
@@ -575,6 +575,7 @@ public PsiElement addAfter(PsiElement element, PsiElement anchor) throws Incorre
         }
 
         @Override
+        @Deprecated
         public void checkAdd(PsiElement element) throws IncorrectOperationException {
 
         }
@@ -600,6 +601,7 @@ public void delete() throws IncorrectOperationException {
         }
 
         @Override
+        @Deprecated
         public void checkDelete() throws IncorrectOperationException {
 
         }

File: src/com/chrisrm/idea/MTLaf.java
Patch:
@@ -101,7 +101,7 @@ private static void patchComboBox(UIDefaults metalDefaults, UIDefaults defaults)
 
     @SuppressWarnings("IOResourceOpenedButNotSafelyClosed")
     private void patchStyledEditorKit(UIDefaults defaults) {
-        URL url = getClass().getResource(getPrefix() + ".css");
+        URL url = getClass().getResource("/properties/" + this.theme + "/mt-" + this.theme + ".css");
         StyleSheet styleSheet = UIUtil.loadStyleSheet(url);
         defaults.put("StyledEditorKit.JBDefaultStyle", styleSheet);
         try {

