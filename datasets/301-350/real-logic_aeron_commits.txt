File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -2154,8 +2154,7 @@ private SendChannelEndpoint findExistingSendChannelEndpoint(final UdpChannel udp
         {
             for (final SendChannelEndpoint endpoint : sendChannelEndpointByChannelMap.values())
             {
-                final UdpChannel endpointUdpChannel = endpoint.udpChannel();
-                if (endpointUdpChannel.matchesTag(udpChannel))
+                if (endpoint.matchesTag(udpChannel))
                 {
                     return endpoint;
                 }

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -619,7 +619,7 @@ public long tag()
      */
     public boolean matchesTag(final UdpChannel udpChannel)
     {
-        return super.udpChannel.matchesTag(udpChannel);
+        return udpChannel.matchesTag(super.udpChannel, currentControlAddress, null);
     }
 
     /**

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -777,7 +777,6 @@ public Context countersValuesBuffer(final UnsafeBuffer countersValuesBuffer)
          * @return true if the configuration should be printed on start.
          * @see CommonContext#PRINT_CONFIGURATION_ON_START_PROP_NAME
          */
-        @Config
         public boolean printConfigurationOnStart()
         {
             return printConfigurationOnStart;

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestCluster.java
Patch:
@@ -1963,7 +1963,7 @@ public void validateRecordingLogWithReplay(final int nodeId)
 
             while (position.get() < recordingPosition)
             {
-                if (0 == replay.poll(fragmentHandler,10))
+                if (0 == replay.poll(fragmentHandler, 10))
                 {
                     Tests.yield();
                 }

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveMarkFileTest.java
Patch:
@@ -330,8 +330,6 @@ private static void shouldEncodeMarkFileFromArchiveContext(final Archive.Context
             .recordingEventsChannel("aeron:udp?endpoint=localhost:0")
             .epochClock(epochClock);
 
-        System.out.println(ctx);
-
         try (ArchiveMarkFile archiveMarkFile = new ArchiveMarkFile(ctx))
         {
             archiveMarkFile.signalReady();

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -356,7 +356,7 @@ else if (udpChannel.hasExplicitEndpoint() && !udpChannel.isMulticast())
             {
                 timeOfLastResolutionNs = nowNs;
                 final String endpoint = udpChannel.channelUri().get(CommonContext.ENDPOINT_PARAM_NAME);
-                conductorProxy.reResolveEndpoint(endpoint, this, udpChannel.remoteData());
+                conductorProxy.reResolveEndpoint(endpoint, this, this.connectAddress);
             }
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTool.java
Patch:
@@ -597,12 +597,12 @@ static ClusterNodeControlProperties loadControlProperties(final File clusterDir)
         return BACKWARD_COMPATIBLE_OPERATIONS.loadControlProperties(clusterDir);
     }
 
-    ///////////////////////////////////////////////////////
+    /*--------------------------------------------------------------*/
 
     /**
      * Cluster Tool commands map.
      * This is to allow other tools to simply extend ClusterTool
-     *
+     * <p>
      * Note that the map is cloned and both key and value are Java immutable objects.
      *
      * @return a clone of Cluster Tool commands map

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1388,7 +1388,7 @@ void onServiceCloseSession(final long clusterSessionId)
 
     void onServiceMessage(final long clusterSessionId, final DirectBuffer buffer, final int offset, final int length)
     {
-        final int i = PendingServiceMessageTracker.serviceId(clusterSessionId);
+        final int i = (int)clusterSessionId;
         pendingServiceMessageTrackers[i].enqueueMessage((MutableDirectBuffer)buffer, offset, length);
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -262,7 +262,7 @@ void shouldRecoverRecordingWithNonZeroStartPosition()
         {
             final Catalog.CatalogEntryProcessor catalogEntryProcessor =
                 (recordingDescriptorOffset, headerEncoder, headerDecoder, descriptorEncoder, descriptorDecoder) ->
-                    descriptorEncoder.stopPosition(Aeron.NULL_VALUE);
+                descriptorEncoder.stopPosition(Aeron.NULL_VALUE);
 
             assertTrue(catalog.forEntry(recordingId, catalogEntryProcessor));
         }

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -919,7 +919,7 @@ void shouldTimeoutInactiveArchiveClients(final String controlRequestChannel, fin
                     endNs - startNs,
                     greaterThanOrEqualTo(timeToFillResponseWindowNs + archive.context().connectTimeoutNs()));
 
-                assertEquals(1, archive.context().errorCounter().get());
+                Tests.await(() -> 1 == archive.context().errorCounter().get());
                 final ArgumentCaptor<Throwable> captor = ArgumentCaptor.forClass(Throwable.class);
                 verify(errorHandler, timeout(1000)).onError(captor.capture());
                 final ArchiveEvent event = assertInstanceOf(ArchiveEvent.class, captor.getValue());

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveInterceptor.java
Patch:
@@ -105,9 +105,10 @@ static void logReplicationSessionDone(
     static class ControlSessionStateChange
     {
         @Advice.OnMethodEnter
-        static <E extends Enum<E>> void logStateChange(final E oldState, final E newState, final long controlSessionId)
+        static <E extends Enum<E>> void logStateChange(
+            final E oldState, final E newState, final long controlSessionId, final String reason)
         {
-            LOGGER.logControlSessionStateChange(oldState, newState, controlSessionId);
+            LOGGER.logControlSessionStateChange(oldState, newState, controlSessionId, reason);
         }
     }
 

File: aeron-agent/src/test/java/io/aeron/agent/ArchiveEventDissectorTest.java
Patch:
@@ -906,13 +906,14 @@ void controlSessionStateChange()
     {
         internalEncodeLogHeader(buffer, 0, 10, 20, () -> 1_500_000_000L);
         buffer.putLong(LOG_HEADER_LENGTH, -10_000_000_000L, LITTLE_ENDIAN);
-        buffer.putStringAscii(LOG_HEADER_LENGTH + SIZE_OF_LONG, "x -> y");
+        final int length = buffer.putStringAscii(LOG_HEADER_LENGTH + SIZE_OF_LONG, "x -> y");
+        buffer.putStringAscii(LOG_HEADER_LENGTH + SIZE_OF_LONG + length, "the very reason to report");
 
         dissectControlSessionStateChange(buffer, 0, builder);
 
         assertEquals("[1.500000000] " + CONTEXT + ": " + CONTROL_SESSION_STATE_CHANGE.name() + " [10/20]:" +
             " controlSessionId=-10000000000" +
-            " x -> y",
+            " x -> y reason=\"the very reason to report\"",
             builder.toString());
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/AbstractListRecordingsSession.java
Patch:
@@ -50,7 +50,7 @@ abstract class AbstractListRecordingsSession implements Session
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
         isDone = true;
     }

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -447,10 +447,10 @@ public static final class Configuration
         /**
          * Default time interval in nanoseconds for checking session liveness.
          *
-         * @see #CONNECT_TIMEOUT_PROP_NAME
+         * @see #SESSION_LIVENESS_CHECK_INTERVAL_PROP_NAME
          */
-        @Config(defaultType = DefaultType.LONG, defaultLong = 100 * 1000 * 1000)
-        public static final long SESSION_LIVENESS_CHECK_INTERVAL_DEFAULT_NS = TimeUnit.MILLISECONDS.toNanos(100);
+        @Config(defaultType = DefaultType.LONG, defaultLong = 1000L * 1000 * 1000)
+        public static final long SESSION_LIVENESS_CHECK_INTERVAL_DEFAULT_NS = TimeUnit.SECONDS.toNanos(1);
 
         /**
          * How long a replay publication should linger after all data is sent. Longer linger can help avoid tail loss.

File: aeron-archive/src/main/java/io/aeron/archive/CreateReplayPublicationSession.java
Patch:
@@ -86,7 +86,7 @@ public void close()
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
         isDone = true;
     }

File: aeron-archive/src/main/java/io/aeron/archive/DeleteSegmentsSession.java
Patch:
@@ -79,7 +79,7 @@ public void close()
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingSubscriptionsSession.java
Patch:
@@ -63,7 +63,7 @@ public void close()
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
         isDone = true;
     }

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -98,7 +98,7 @@ public boolean isDone()
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
         isAborted = true;
     }

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -215,7 +215,7 @@ public int doWork()
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
         isAborted = true;
     }

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -163,7 +163,7 @@ public boolean isDone()
     /**
      * {@inheritDoc}
      */
-    public void abort()
+    public void abort(final String reason)
     {
         this.state(State.DONE, "abort");
     }

File: aeron-archive/src/main/java/io/aeron/archive/Session.java
Patch:
@@ -22,7 +22,7 @@
  */
 interface Session
 {
-    void abort();
+    void abort(String reason);
 
     boolean isDone();
 

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -184,7 +184,7 @@ void shouldRejoinAfterResting(final String channel)
         srcBuffer.setMemory(0, MESSAGE_LENGTH, (byte)-1);
         final String untetheredChannel = channel + "|tether=false";
         final String publicationChannel = channel.startsWith("aeron-spy") ? channel.substring(10) : channel;
-        int untetheredPollLimit = 3;
+        boolean pollingUntethered = true;
 
         try (Subscription tetheredSub = aeron.addSubscription(channel, STREAM_ID);
             Subscription untetheredSub = aeron.addSubscription(
@@ -205,9 +205,9 @@ void shouldRejoinAfterResting(final String channel)
                     aeron.conductorAgentInvoker().invoke();
                 }
 
-                if (untetheredPollLimit > 0 && untetheredSub.poll(fragmentHandler, FRAGMENT_COUNT_LIMIT) > 0)
+                if (pollingUntethered && untetheredSub.poll(fragmentHandler, FRAGMENT_COUNT_LIMIT) > 0)
                 {
-                    untetheredPollLimit--;
+                    pollingUntethered = false;
                 }
 
                 tetheredSub.poll(fragmentHandler, FRAGMENT_COUNT_LIMIT);

File: aeron-archive/src/main/java/io/aeron/archive/ControlSessionAdapter.java
Patch:
@@ -960,8 +960,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                         liveDestination,
                         replicationChannel,
                         encodedCredentials,
-                        srcResponseChannel
-                    );
+                        srcResponseChannel);
                 }
                 break;
             }

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -700,7 +700,7 @@ void shouldCreateImageOnSubscription()
         final InetSocketAddress sourceAddress = new InetSocketAddress("localhost", 4400);
         final int initialTermId = 1;
         final int activeTermId = 2;
-        final int termOffset = 100;
+        final int termOffset = 160;
 
         driverProxy.addSubscription(CHANNEL_4000, STREAM_ID_1);
 

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -41,6 +41,7 @@
 import java.nio.file.AccessDeniedException;
 import java.nio.file.FileSystemException;
 import java.nio.file.NoSuchFileException;
+import java.util.Objects;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
@@ -1750,7 +1751,7 @@ public ThreadFactory threadFactory()
         public Context publicationErrorFrameHandler(
             final PublicationErrorFrameHandler publicationErrorFrameHandler)
         {
-            this.publicationErrorFrameHandler = publicationErrorFrameHandler;
+            this.publicationErrorFrameHandler = Objects.requireNonNull(publicationErrorFrameHandler);
             return this;
         }
 

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -46,7 +46,7 @@
 
 import static io.aeron.CommonContext.UNTETHERED_RESTING_TIMEOUT_PARAM_NAME;
 import static io.aeron.CommonContext.UNTETHERED_WINDOW_LIMIT_TIMEOUT_PARAM_NAME;
-import static io.aeron.ErrorCode.GENERIC_ERROR;
+import static io.aeron.ErrorCode.IMAGE_REJECT;
 import static io.aeron.driver.LossDetector.lossFound;
 import static io.aeron.driver.LossDetector.rebuildOffset;
 import static io.aeron.driver.status.SystemCounterDescriptor.*;
@@ -729,7 +729,7 @@ int sendPendingStatusMessage(final long nowNs)
             if (hasSmTimedOut)
             {
                 channelEndpoint.sendErrorFrame(
-                    imageConnections, sessionId, streamId, GENERIC_ERROR.value(), rejectionReason);
+                    imageConnections, sessionId, streamId, IMAGE_REJECT.value(), rejectionReason);
 
                 nextSmDeadlineNs = nowNs + smTimeoutNs;
                 workCount++;

File: aeron-client/src/main/java/io/aeron/status/PublicationErrorFrame.java
Patch:
@@ -29,7 +29,7 @@ public class PublicationErrorFrame implements Cloneable
     private int streamId;
     private long receiverId;
     private long destinationRegistrationId;
-    private Long groupTag;
+    private long groupTag;
     private int errorCode;
     private String errorMessage;
     private InetSocketAddress sourceAddress;
@@ -77,10 +77,10 @@ public long receiverId()
     /**
      * Group tag of the source that sent the error frame.
      *
-     * @return group tag of the source that sent the error frame, <code>null</code> if the source did not have a group
+     * @return group tag of the source that sent the error frame or {@link io.aeron.Aeron#NULL_VALUE} if the source did not have a group
      * tag set.
      */
-    public Long groupTag()
+    public long groupTag()
     {
         return groupTag;
     }

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductorProxy.java
Patch:
@@ -253,7 +253,7 @@ void onPublicationError(
         final int sessionId,
         final int streamId,
         final long receiverId,
-        final Long groupId,
+        final long groupId,
         final InetSocketAddress srcAddress,
         final int errorCode,
         final String errorMessage)

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -2284,8 +2284,8 @@ public static void validateSocketBufferLengths(final MediaDriver.Context ctx)
         if (ctx.osMaxSocketRcvbufLength() < ctx.socketRcvbufLength())
         {
             System.err.println(
-                "WARNING: Could not set desired SO_RCVBUF, adjust OS to allow " + SOCKET_SNDBUF_LENGTH_PROP_NAME +
-                " attempted=" + ctx.socketSndbufLength() + ", actual=" + ctx.osMaxSocketSndbufLength());
+                "WARNING: Could not set desired SO_RCVBUF, adjust OS to allow " + SOCKET_RCVBUF_LENGTH_PROP_NAME +
+                " attempted=" + ctx.socketRcvbufLength() + ", actual=" + ctx.osMaxSocketRcvbufLength());
         }
 
         final int soSndBuf = 0 == ctx.socketSndbufLength() ?

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveEventLogger.java
Patch:
@@ -226,7 +226,7 @@ public <E extends Enum<E>> void logReplicationSessionStateChange(
         final int captureLength = captureLength(length);
         final int encodedLength = encodedLength(captureLength);
         final ManyToOneRingBuffer ringBuffer = this.ringBuffer;
-        final int index = ringBuffer.tryClaim(RECORDING_SESSION_STATE_CHANGE.toEventCodeId(), encodedLength);
+        final int index = ringBuffer.tryClaim(REPLICATION_SESSION_STATE_CHANGE.toEventCodeId(), encodedLength);
 
         if (index > 0)
         {

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationSubscriptionTest.java
Patch:
@@ -54,6 +54,7 @@
 
 import static io.aeron.AeronCounters.DRIVER_RECEIVE_CHANNEL_STATUS_TYPE_ID;
 import static io.aeron.ChannelUri.SPY_QUALIFIER;
+import static org.agrona.concurrent.status.CountersReader.NULL_COUNTER_ID;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.*;
@@ -863,7 +864,7 @@ void shouldCleanupMdcDestinationWhenSubscriptionIsClosed()
 
                 countersReader.forEach(socketAddressCapture);
                 assertEquals(2, receiveSocketCount.intValue());
-                assertNotEquals(CountersReader.NULL_COUNTER_ID, countersReader.findByTypeIdAndRegistrationId(
+                assertNotEquals(NULL_COUNTER_ID, countersReader.findByTypeIdAndRegistrationId(
                     DRIVER_RECEIVE_CHANNEL_STATUS_TYPE_ID, registrationId));
             }
 
@@ -875,7 +876,7 @@ void shouldCleanupMdcDestinationWhenSubscriptionIsClosed()
                 return 0 == receiveSocketCount.intValue();
             });
 
-            assertEquals(CountersReader.NULL_COUNTER_ID, countersReader.findByTypeIdAndRegistrationId(
+            Tests.await(() -> NULL_COUNTER_ID == countersReader.findByTypeIdAndRegistrationId(
                 DRIVER_RECEIVE_CHANNEL_STATUS_TYPE_ID, registrationId));
         }
     }

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -245,7 +245,7 @@ void sortRecordingLogIsANoOpIfRecordLogIsAlreadySorted(final @TempDir Path empty
         try (RecordingLog recordingLog = new RecordingLog(clusterDir, true))
         {
             recordingLog.appendTerm(21, 0, 100, 100);
-            recordingLog.appendSnapshot(0, 0, 0, 0, 200, 0);
+            recordingLog.appendSnapshot(0, 0, 100, 0, 200, 0);
             recordingLog.appendTerm(21, 1, 1024, 200);
         }
 

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -298,7 +298,7 @@ public void closeMultiRcvDestinationTransports(final DataTransportPoller poller)
     {
         if (null != multiRcvDestination)
         {
-            multiRcvDestination.closeTransports(poller);
+            multiRcvDestination.closeTransports(this, poller);
         }
     }
 
@@ -1135,6 +1135,7 @@ public String toString()
             ", udpChannel=" + udpChannel +
             ", connectAddress=" + connectAddress +
             ", isClosed=" + isClosed +
+            ", multiRcvDestination=" + multiRcvDestination +
             '}';
     }
 }

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -434,7 +434,8 @@ public static InferableBoolean parse(final String value)
     /**
      * The default secure random algorithm to be used.
      */
-    public static final String SECURE_RANDOM_ALGORITHM_DEFAULT = "NativePRNGNonBlocking";
+    public static final String SECURE_RANDOM_ALGORITHM_DEFAULT =
+        SystemUtil.isWindows() ? "Windows-PRNG" : "NativePRNGNonBlocking";
 
     /**
      * Get the configured value for the secure random algorithm, falling back to the default if not supplied.

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -139,7 +139,7 @@ abstract class ArchiveConductor
         dutyCycleTracker = ctx.conductorDutyCycleTracker();
         cachedEpochClock.update(epochClock.time());
 
-        random = stronglySeededRandom();
+        random = ctx.secureRandom();
 
         authenticator = ctx.authenticatorSupplier().get();
         if (null == authenticator)

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -722,7 +722,7 @@ int sendPendingStatusMessage(final long nowNs)
     {
         int workCount = 0;
         final long changeNumber = (long)END_SM_CHANGE_VH.getAcquire(this);
-        final boolean hasSmTimedOut = (nowNs - smTimeoutNs) < timeOfLastSmNs;
+        final boolean hasSmTimedOut = (nowNs - smTimeoutNs) > timeOfLastSmNs;
 
         if (null != rejectionReason)
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -892,6 +892,7 @@ else if (Cluster.Role.LEADER == role)
                     clusterClock.time(),
                     memberId,
                     logPublisher.sessionId(),
+                    ctx.appVersion(),
                     false);
             }
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusPublisher.java
Patch:
@@ -181,6 +181,7 @@ void newLeadershipTerm(
         final long timestamp,
         final int leaderMemberId,
         final int logSessionId,
+        final int appVersion,
         final boolean isStartup)
     {
         if (null == publication)
@@ -214,6 +215,7 @@ void newLeadershipTerm(
                     .timestamp(timestamp)
                     .leaderMemberId(leaderMemberId)
                     .logSessionId(logSessionId)
+                    .appVersion(appVersion)
                     .isStartup(isStartup ? BooleanType.TRUE : BooleanType.FALSE);
 
                 bufferClaim.commit();

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -1202,6 +1202,7 @@ private void publishNewLeadershipTerm(
                 timestamp,
                 thisMember.id(),
                 logSessionId,
+                ctx.appVersion(),
                 isLeaderStartup);
         }
     }

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -384,6 +384,8 @@ void shouldNotDeleteStaticCounterIfClosed()
     @SuppressWarnings("indentation")
     void shouldReturnErrorIfANonStaticCounterExistsForTypeIdRegistrationId()
     {
+        testWatcher.ignoreErrorsMatching((error) -> error.contains("(-11) generic error, see message"));
+
         final Counter counter = clientA.addCounter(COUNTER_TYPE_ID, "test session-specific counter");
         assertNotEquals(NULL_VALUE, counter.registrationId());
         assertEquals(clientA.clientId(), clientA.countersReader().getCounterOwnerId(counter.id()));

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -455,13 +455,14 @@ else if (UntetheredSubscription.State.RESTING == untethered.state)
             {
                 if ((untethered.timeOfLastUpdateNs + untetheredRestingTimeoutNs) - nowNs <= 0)
                 {
+                    final long joinPosition = joinPosition();
                     subscriberPositions = ArrayUtil.add(subscriberPositions, untethered.position);
                     conductor.notifyAvailableImageLink(
                         registrationId,
                         sessionId,
                         untethered.subscriptionLink,
                         untethered.position.id(),
-                        joinPosition(),
+                        joinPosition,
                         rawLog.fileName(),
                         CommonContext.IPC_CHANNEL);
                     untethered.state(UntetheredSubscription.State.ACTIVE, nowNs, streamId, sessionId);

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -1101,13 +1101,14 @@ else if (UntetheredSubscription.State.RESTING == untethered.state)
                 {
                     if ((untethered.timeOfLastUpdateNs + untetheredRestingTimeoutNs) - nowNs <= 0)
                     {
+                        final long joinPosition = joinPosition();
                         subscriberPositions = ArrayUtil.add(subscriberPositions, untethered.position);
                         conductor.notifyAvailableImageLink(
                             correlationId,
                             sessionId,
                             untethered.subscriptionLink,
                             untethered.position.id(),
-                            joinPosition(),
+                            joinPosition,
                             rawLog.fileName(),
                             sourceIdentity);
                         untethered.state(UntetheredSubscription.State.ACTIVE, nowNs, streamId, sessionId);

File: aeron-driver/src/test/java/io/aeron/driver/UntetheredSubscriptionTest.java
Patch:
@@ -113,7 +113,7 @@ void shouldLifeCycleTimeoutsAndRelink()
             eq(SESSION_ID),
             eq(untetheredLink),
             anyInt(),
-            eq(ipcPublication.joinPosition()),
+            eq(tetheredPosition.get()),
             eq(rawLog.fileName()),
             eq(CommonContext.IPC_CHANNEL));
     }

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveReplayTest.java
Patch:
@@ -41,7 +41,8 @@
 public class ArchiveReplayTest
 {
     @RegisterExtension
-    final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
+    final SystemTestWatcher systemTestWatcher = new SystemTestWatcher()
+        .ignoreErrorsMatching(s -> s.contains("response publication is closed"));
 
     private TestMediaDriver driver;
     private Archive archive;

File: aeron-test-support/src/main/java/io/aeron/test/SystemTestWatcher.java
Patch:
@@ -431,6 +431,7 @@ private Throwable reportAndTerminate(final String directoryName)
 
         try
         {
+            System.out.println("Reported and termination: " + closeables);
             CloseHelper.closeAll(closeables);
         }
         catch (final Throwable t)

File: aeron-archive/src/main/java/io/aeron/archive/DeleteSegmentsSession.java
Patch:
@@ -133,7 +133,7 @@ else if (!file.getName().endsWith(DELETE_SUFFIX))
     private void onDeleteError(final File file)
     {
         final String errorMessage = "unable to delete segment file: " + file;
-        controlSession.attemptErrorResponse(correlationId, ArchiveException.GENERIC, errorMessage);
+        controlSession.sendErrorResponse(correlationId, ArchiveException.GENERIC, errorMessage);
         errorHandler.onError(new ArchiveEvent(errorMessage));
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -193,7 +193,7 @@ void sendPendingError()
     {
         if (null != errorMessage)
         {
-            controlSession.attemptErrorResponse(correlationId, errorCode, errorMessage);
+            controlSession.sendErrorResponse(correlationId, errorCode, errorMessage);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -258,7 +258,7 @@ void sendPendingError()
         if (null != errorMessage)
         {
             onPendingError(sessionId, recordingId, errorMessage);
-            controlSession.attemptErrorResponse(correlationId, ArchiveException.GENERIC, errorMessage);
+            controlSession.sendErrorResponse(correlationId, ArchiveException.GENERIC, errorMessage);
         }
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/ReplaySessionTest.java
Patch:
@@ -284,9 +284,8 @@ void shouldNotReplayPartialUnalignedDataFromFile()
         replaySession.doWork();
         assertEquals(ReplaySession.State.DONE, replaySession.state());
 
-        final ControlResponseProxy proxy = mock(ControlResponseProxy.class);
         replaySession.sendPendingError();
-        verify(mockControlSession).attemptErrorResponse(eq(correlationId), anyInt(), anyString());
+        verify(mockControlSession).sendErrorResponse(eq(correlationId), anyLong(), anyString());
     }
 
     @Test

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpNameResolutionTransport.java
Patch:
@@ -108,7 +108,6 @@ public int poll(final UdpFrameHandler handler, final long nowMs)
      */
     public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress)
     {
-        final int remaining = buffer.remaining();
         int bytesSent = 0;
         try
         {
@@ -123,7 +122,7 @@ public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress
         }
         catch (final IOException ex)
         {
-            sendError(remaining, ex, remoteAddress);
+            onSendError(ex, remoteAddress, errorHandler);
         }
 
         return bytesSent;

File: aeron-system-tests/src/test/java/io/aeron/RejectImageTest.java
Patch:
@@ -396,7 +396,7 @@ void shouldRejectSubscriptionsImageManualMdc()
                 aeron.countersReader().getCounterValue(ERROR_FRAMES_RECEIVED.id()),
                 lessThan(A_VALUE_THAT_SHOWS_WE_ARENT_SPAMMING_ERROR_MESSAGES));
 
-            while (initialAvailable != imageAvailable.get())
+            while (initialAvailable == imageAvailable.get())
             {
                 Tests.yield();
             }

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -3048,7 +3048,7 @@ public Context messageTimeoutNs(final long messageTimeoutNs)
         @Config
         public long messageTimeoutNs()
         {
-            return messageTimeoutNs;
+            return CommonContext.checkDebugTimeout(messageTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTruncateRecordingTest.java
Patch:
@@ -196,7 +196,6 @@ void truncateRecordingShouldDeleteAllFilesWhenTruncatingToTheStartOfTheRecording
             deleteList.add(Files.createFile(archiveDir.resolve(recordingId + "-1048575" + RECORDING_SEGMENT_SUFFIX)));
             deleteList.add(Files.createFile(archiveDir.resolve(recordingId + "-1048577" + RECORDING_SEGMENT_SUFFIX)));
             deleteList.add(Files.createFile(archiveDir.resolve(recordingId + "-222222222" + RECORDING_SEGMENT_SUFFIX)));
-            deleteList.add(Files.createFile(archiveDir.resolve(recordingId + "-abc" + RECORDING_SEGMENT_SUFFIX)));
             deleteList.add(Files.createFile(archiveDir.resolve(
                 recordingId + "-" + archive.context().segmentFileLength() + RECORDING_SEGMENT_SUFFIX)));
 

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventDissector.java
Patch:
@@ -120,7 +120,7 @@ static void dissectStateChange(
 
         builder.append(": memberId=").append(memberId);
         builder.append(' ');
-        buffer.getStringAscii(absoluteOffset, builder);
+        buffer.getStringAscii(absoluteOffset, builder, LITTLE_ENDIAN);
     }
 
     static void dissectNoOp(
@@ -157,7 +157,7 @@ static void dissectElectionStateChange(
         absoluteOffset += SIZE_OF_INT;
 
         builder.append(": memberId=").append(memberId).append(' ');
-        absoluteOffset += SIZE_OF_INT + buffer.getStringAscii(absoluteOffset, builder);
+        absoluteOffset += SIZE_OF_INT + buffer.getStringAscii(absoluteOffset, builder, LITTLE_ENDIAN);
 
         builder.append(" leaderId=").append(leaderId);
         builder.append(" candidateTermId=").append(candidateTermId);
@@ -167,7 +167,7 @@ static void dissectElectionStateChange(
         builder.append(" appendPosition=").append(appendPosition);
         builder.append(" catchupPosition=").append(catchupPosition);
         builder.append(" reason=");
-        buffer.getStringAscii(absoluteOffset, builder);
+        buffer.getStringAscii(absoluteOffset, builder, LITTLE_ENDIAN);
     }
 
     static void dissectCanvassPosition(

File: aeron-agent/src/main/java/io/aeron/agent/CommonEventDissector.java
Patch:
@@ -92,7 +92,7 @@ static int dissectInetAddress(final MutableDirectBuffer buffer, final int offset
     {
         int encodedLength = 0;
 
-        final int addressLength = buffer.getInt(offset + encodedLength);
+        final int addressLength = buffer.getInt(offset + encodedLength, LITTLE_ENDIAN);
         encodedLength += SIZE_OF_INT;
 
         if (4 == addressLength)

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -1679,7 +1679,7 @@ public ChannelUriStringBuilder socketSndbufLength(final ChannelUri channelUri)
     }
 
     /**
-     * Get the underling OS send buffer length setting
+     * Get the underlying OS send buffer length setting.
      *
      * @return underlying OS send buffer length setting or null if not specified.
      * @see CommonContext#SOCKET_SNDBUF_PARAM_NAME
@@ -1692,7 +1692,7 @@ public Integer socketSndbufLength()
     /**
      * Set the underlying OS receive buffer length.
      *
-     * @param socketRcvbufLength parameter to be passed as SO_SNDBUF value.
+     * @param socketRcvbufLength parameter to be passed as SO_RCVBUF value.
      * @return this for a fluent API.
      * @see CommonContext#SOCKET_RCVBUF_PARAM_NAME
      */
@@ -1731,7 +1731,7 @@ public ChannelUriStringBuilder socketRcvbufLength(final ChannelUri channelUri)
     }
 
     /**
-     * Get the underling OS receive buffer length setting.
+     * Get the underlying OS receive buffer length setting.
      *
      * @return underlying OS receive buffer length setting or null if not specified.
      * @see CommonContext#SOCKET_RCVBUF_PARAM_NAME

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -45,9 +45,7 @@
 import org.agrona.SystemUtil;
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.status.CountersReader;
-import org.hamcrest.CoreMatchers;
 import org.hamcrest.Matcher;
-import org.hamcrest.number.OrderingComparison;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveToolTests.java
Patch:
@@ -1409,7 +1409,7 @@ void deleteOrphanedSegmentsDeletesSegmentFilesForAllRecordings() throws IOExcept
         final File file25 = createFile(segmentFileName(
             rec2, segmentFileBasePosition(1_000_000, Long.MAX_VALUE, TERM_LENGTH, SEGMENT_LENGTH)));
 
-        deleteOrphanedSegments(out, archiveDir, epochClock);
+        deleteOrphanedSegments(out, archiveDir, epochClock, null);
 
         assertFileExists(file12, file13, file15, file17);
         assertFileDoesNotExist(file11, file14, file16);

File: buildSrc/src/main/java/io/aeron/build/AsciidoctorPreprocessTask.java
Patch:
@@ -49,7 +49,8 @@ public class AsciidoctorPreprocessTask extends DefaultTask
 
     private final File source = new File(sampleBaseDir, "/src/docs/asciidoc");
 
-    private final File target = new File(getProject().getLayout().getBuildDirectory().getAsFile().get(), "/asciidoc/asciidoc");
+    private final File target = new File(
+        getProject().getLayout().getBuildDirectory().getAsFile().get(), "/asciidoc/asciidoc");
 
     // Has a slightly silly name to avoid name clashes in the build script.
     private String versionText;

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -1009,7 +1009,7 @@ private static InetSocketAddress getEndpointAddress(final ChannelUri uri, final
             {
                 throw new UnknownHostException(
                     "unresolved - " + ENDPOINT_PARAM_NAME + "=" + endpointValue +
-                    ", name-resolver=" + nameResolver.getClass().getName());
+                    ", name-resolver=" + nameResolver.name());
             }
         }
 

File: aeron-test-support/src/main/java/io/aeron/test/DataCollector.java
Patch:
@@ -202,7 +202,7 @@ private static Stream<Path> find(final Path p, final BiPredicate<Path, BasicFile
     {
         try
         {
-            return Files.find(p, 1, matcher);
+            return Files.find(p, 10, matcher);
         }
         catch (final NoSuchFileException ignore)
         {

File: aeron-driver/src/main/java/io/aeron/driver/ReceiverLivenessTracker.java
Patch:
@@ -33,9 +33,9 @@ public void onStatusMessage(final long receiverId, final long nowNs)
         lastSmTimestampNsByReceiverIdMap.put(receiverId, nowNs);
     }
 
-    public void onRemoteClose(final long receiverId)
+    public boolean onRemoteClose(final long receiverId)
     {
-        lastSmTimestampNsByReceiverIdMap.remove(receiverId);
+        return MISSING_VALUE != lastSmTimestampNsByReceiverIdMap.remove(receiverId);
     }
 
     public void onIdle(final long nowNs, final long timeoutNs)

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -396,7 +396,7 @@ void shouldPublishLogMessageButNotSnapshotOnStandbySnapshot()
         inOrder.verify(mockLogPublisher).appendClusterAction(
             anyLong(), anyLong(), eq(ClusterAction.SNAPSHOT), eq(CLUSTER_ACTION_FLAGS_STANDBY_SNAPSHOT));
 
-        agent.onReplayClusterAction(-1, ClusterAction.SNAPSHOT, CLUSTER_ACTION_FLAGS_STANDBY_SNAPSHOT);
+        agent.onReplayClusterAction(-1, 2048, 0, ClusterAction.SNAPSHOT, CLUSTER_ACTION_FLAGS_STANDBY_SNAPSHOT);
         assertEquals(ConsensusModule.State.ACTIVE.code(), stateCounter.get());
     }
 

File: aeron-client/src/main/java/io/aeron/DriverProxy.java
Patch:
@@ -262,7 +262,6 @@ public long removeDestination(final long registrationId, final String endpointCh
         return correlationId;
     }
 
-
     /**
      * Remove a destination from the send channel of an existing MDC Publication.
      *

File: aeron-client/src/main/java/io/aeron/command/ControlProtocolEvents.java
Patch:
@@ -100,6 +100,9 @@ public class ControlProtocolEvents
      */
     public static final int ADD_STATIC_COUNTER = 0x0F;
 
+    /**
+     * Remove a destination by registration id.
+     */
     public static final int REMOVE_DESTINATION_BY_ID = 0x10;
 
     // Media Driver to Clients

File: aeron-cluster/src/main/java/io/aeron/cluster/ServiceProxy.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.cluster;
 
 import io.aeron.Publication;
+import io.aeron.cluster.client.ClusterEvent;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.*;
 import io.aeron.cluster.service.Cluster;
@@ -216,7 +217,7 @@ void terminationPosition(final long logPosition, final ErrorHandler errorHandler
             }
             while (--attempts > 0);
 
-            errorHandler.onError(new ClusterException(
+            errorHandler.onError(new ClusterEvent(
                 "failed to send service termination position: result=" + result, AeronException.Category.WARN));
         }
     }

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 /**
  * Configuration used for samples with defaults which can be overridden by system properties.
  */
+@SuppressWarnings("JavadocVariable")
 public class SampleConfiguration
 {
     public static final String CHANNEL_PROP = "aeron.sample.channel";

File: aeron-samples/src/main/java/io/aeron/samples/echo/EchoPair.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class EchoPair implements ControlledFragmentHandler, AutoCloseable
 {
-    public static final int FRAGMENT_LIMIT = 10;
+    private static final int FRAGMENT_LIMIT = 10;
 
     private final long correlationId;
     private final Subscription subscription;

File: aeron-annotations/src/main/java/io/aeron/config/validation/Validator.java
Patch:
@@ -20,6 +20,7 @@
 import io.aeron.config.ExpectedCConfig;
 import io.aeron.validation.Grep;
 
+import javax.script.ScriptContext;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
@@ -195,6 +196,8 @@ private void validateCDefaultNumeric(
 
         try
         {
+            scriptEngine.getContext().setAttribute("INT32_MAX", Integer.MAX_VALUE, ScriptContext.ENGINE_SCOPE);
+
             final String evaluatedFoundDefaultString = scriptEngine.eval(
                 "AERON_TERM_BUFFER_LENGTH_DEFAULT = (16 * 1024 * 1024);\n" + // this feels like a (very) bad idea
                 "(" + foundDefaultString + ").toFixed(0)" // avoid scientific notation

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1640,6 +1640,7 @@ private NetworkPublication newNetworkPublication(
                 ctx.retransmitUnicastDelayGenerator(),
                 ctx.retransmitUnicastLingerGenerator(),
                 udpChannel.hasGroupSemantics(),
+                params.hasMaxResend ? params.maxResend : ctx.maxResend(),
                 retransmitOverflowCounter);
 
             final NetworkPublication publication = new NetworkPublication(

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveToolSeparateMarkFileTest.java
Patch:
@@ -61,7 +61,7 @@ void shouldDescribeRecordings(@TempDir final File archiveDir, @TempDir final Fil
             Objects.requireNonNull(driver);
             Objects.requireNonNull(archive);
 
-            ArchiveTool.describeRecording(new PrintStream(new ByteArrayOutputStream()), archiveDir, 0);
+            ArchiveTool.describeAll(new PrintStream(new ByteArrayOutputStream()), archiveDir);
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/NameReResolutionTest.java
Patch:
@@ -509,10 +509,9 @@ void shouldReResolveUnicastAddressWhenSendChannelEndpointIsReused()
                 final long deadlineNs = System.nanoTime() + TimeUnit.SECONDS.toNanos(1);
                 do
                 {
-                    if (pub.isConnected())
+                    if (pub.isConnected() && subscription.isConnected())
                     {
                         final long timeToReResolutionNs = System.nanoTime() - startTimeNs;
-                        assertTrue(subscription.isConnected());
                         final long destinationTimeoutNs = TimeUnit.SECONDS.toNanos(5);
                         assertThat(
                             timeToReResolutionNs,

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1754,7 +1754,7 @@ int replayLogPoll(final LogAdapter logAdapter, final long stopPosition)
             final int fragments = logAdapter.poll(stopPosition);
             final long position = logAdapter.position();
 
-            if (fragments > 0)
+            if (fragments > 0 || logAdapter.isTrailingPadMessage(commitPosition.get()))
             {
                 commitPosition.setOrdered(position);
             }

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -250,7 +250,6 @@ enum State
         final long nowNs = cachedNanoClock.nanoTime();
         timeOfLastDataOrHeartbeatNs = nowNs - PUBLICATION_HEARTBEAT_TIMEOUT_NS - 1;
         timeOfLastSetupNs = nowNs - PUBLICATION_SETUP_TIMEOUT_NS - 1;
-        timeOfLastStatusMessageNs = nowNs;
 
         positionBitsToShift = LogBufferDescriptor.positionBitsToShift(termLength);
         this.termWindowLength = termWindowLength;

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -1895,7 +1895,8 @@ private static MappedByteBuffer waitForFileMapping(
                 }
                 catch (final IOException ex)
                 {
-                    throw new AeronException("cannot open CnC file: " + file.getAbsolutePath(), ex);
+                    final String msg = "cannot open CnC file: " + file.getAbsolutePath() + " reason=" + ex.getMessage();
+                    throw new AeronException(msg, ex);
                 }
             }
         }

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventLoggerTest.java
Patch:
@@ -32,7 +32,6 @@
 import static io.aeron.agent.AgentTests.verifyLogHeader;
 import static io.aeron.agent.ClusterEventCode.*;
 import static io.aeron.agent.ClusterEventEncoder.*;
-import static io.aeron.agent.ClusterEventEncoder.MAX_REASON_LENGTH;
 import static io.aeron.agent.CommonEventEncoder.LOG_HEADER_LENGTH;
 import static io.aeron.agent.CommonEventEncoder.STATE_SEPARATOR;
 import static io.aeron.agent.CommonEventEncoder.enumName;

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -179,8 +179,8 @@ private MediaDriver(final Context ctx)
                     sharedInvoker = null;
                     break;
 
-                default:
                 case DEDICATED:
+                default:
                     senderRunner = new AgentRunner(ctx.senderIdleStrategy(), errorHandler, errorCounter, sender);
                     receiverRunner = new AgentRunner(ctx.receiverIdleStrategy(), errorHandler, errorCounter, receiver);
                     conductorRunner = new AgentRunner(

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -201,7 +201,7 @@ private static void printOutput(final CncFileReader cncFileReader, final Counter
         System.out.print(DATE_FORMAT.format(new Date()));
         System.out.println(
             " - Aeron Stat (CnC v" + cncFileReader.semanticVersion() + ")" +
-            ", pid " + CncFileDescriptor.pid(cncFileReader.countersReader().metaDataBuffer()) +
+            ", pid " + cncFileReader.driverPid() +
             ", heartbeat age " + cncFileReader.driverHeartbeatAgeMs() + "ms");
         System.out.println("======================================================================");
 

File: aeron-client/src/main/java/io/aeron/AeronCounters.java
Patch:
@@ -582,7 +582,7 @@ public static int appendToLabel(
         final int state = metaDataBuffer.getIntVolatile(counterMetaDataOffset);
         if (CountersReader.RECORD_ALLOCATED != state)
         {
-            throw new IllegalArgumentException("counter id " + counterId + " state != RECORD_ALLOCATED");
+            throw new IllegalArgumentException("counter id " + counterId + " is not allocated, state: " + state);
         }
 
         final int existingLabelLength = metaDataBuffer.getInt(counterMetaDataOffset + CountersReader.LABEL_OFFSET);

File: aeron-client/src/test/java/io/aeron/AeronCountersTest.java
Patch:
@@ -175,7 +175,7 @@ void appendToLabelThrowsIllegalArgumentExceptionIfCounterIsInWrongState(final in
 
         final IllegalArgumentException exception = assertThrowsExactly(
             IllegalArgumentException.class, () -> AeronCounters.appendToLabel(metaDataBuffer, counterId, "test"));
-        assertEquals("counter id 1 state != RECORD_ALLOCATED", exception.getMessage());
+        assertEquals("counter id 1 is not allocated, state: " + state, exception.getMessage());
     }
 
     @Test

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -1069,7 +1069,7 @@ public final class Configuration
     /**
      * Property name to set a limit on the number sessions allowed per stream on a subscription.
      */
-    @Config
+    @Config(defaultType = DefaultType.INT, defaultInt = Integer.MAX_VALUE)
     public static final String STREAM_SESSION_LIMIT_PROP_NAME = "aeron.driver.stream.session.limit";
 
     /**

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -927,7 +927,7 @@ else if (clientLock instanceof NoOpLock && !useConductorAgentInvoker)
 
             if (null != clientName && clientName.length() > MAX_CLIENT_NAME_LENGTH)
             {
-                throw new AeronException("clientName must <= " + MAX_CLIENT_NAME_LENGTH);
+                throw new AeronException("clientName length must <= " + MAX_CLIENT_NAME_LENGTH);
             }
 
             if (null == epochClock)

File: aeron-system-tests/src/test/java/io/aeron/ClientContextTest.java
Patch:
@@ -214,6 +214,6 @@ void shouldRejectClientNameThatIsTooLong()
 
         final AeronException aeronException = assertThrows(
             AeronException.class, () -> new Aeron.Context().clientName(name).conclude());
-        assertEquals("ERROR - clientName must <= 100", aeronException.getMessage());
+        assertEquals("ERROR - clientName length must <= 100", aeronException.getMessage());
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2451,11 +2451,11 @@ private int checkClusterControlToggle(final long nowNs)
                 break;
 
             case STANDBY_SNAPSHOT:
-                if (ConsensusModule.State.ACTIVE == state)
+                if (ConsensusModule.State.ACTIVE == state &&
+                    appendAction(ClusterAction.SNAPSHOT, CLUSTER_ACTION_FLAGS_STANDBY_SNAPSHOT))
                 {
-                    appendAction(ClusterAction.SNAPSHOT, CLUSTER_ACTION_FLAGS_STANDBY_SNAPSHOT);
+                    ClusterControl.ToggleState.reset(controlToggle);
                 }
-                ClusterControl.ToggleState.reset(controlToggle);
                 break;
 
             case SHUTDOWN:

File: aeron-driver/src/main/java/io/aeron/driver/CounterLink.java
Patch:
@@ -47,7 +47,7 @@ public void close()
      */
     public void onTimeEvent(final long timeNs, final long timeMs, final DriverConductor conductor)
     {
-        if (null != client && client.hasTimedOut())
+        if (client.hasTimedOut())
         {
             reachedEndOfLife = true;
             conductor.unavailableCounter(registrationId, counterId());

File: aeron-driver/src/main/java/io/aeron/driver/CounterLink.java
Patch:
@@ -47,7 +47,7 @@ public void close()
      */
     public void onTimeEvent(final long timeNs, final long timeMs, final DriverConductor conductor)
     {
-        if (client.hasTimedOut())
+        if (null != client && client.hasTimedOut())
         {
             reachedEndOfLife = true;
             conductor.unavailableCounter(registrationId, counterId());

File: aeron-driver/src/test/java/io/aeron/driver/RetransmitHandlerTest.java
Patch:
@@ -324,7 +324,6 @@ void shouldIncrementOverflowCounter(final BiConsumer<RetransmitHandlerTest, Inte
     {
         createTermBuffer(creator, 5);
         final int termLength = 128 * 1024;
-        final long existingCount = retransmitOverflow.get();
 
         for (int i = 0; i < 16; i++)
         {

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -2470,7 +2470,6 @@ void shouldSetClientName()
     @Test
     @SuppressWarnings("MethodLength")
     @InterruptAfter(30)
-    @Disabled // Is currently intermittent
     void twoClustersCanShareArchiveAndMediaDriver(@TempDir final Path tmpDir)
     {
         final ConsensusModule.Context cmContext1 = new ConsensusModule.Context();
@@ -2572,8 +2571,7 @@ public void onNewLeadershipTermEvent(
 
             assertEquals(1L, consensusModule1.context().electionCounter().get());
             assertEquals(1L, consensusModule2.context().electionCounter().get());
-            assertEquals(1, leadershipCounter1.get());
-            assertEquals(1, leadershipCounter2.get());
+            Tests.await(() -> 1 == leadershipCounter1.get() && 1 == leadershipCounter2.get());
 
             try (AeronArchive aeronArchive = AeronArchive.connect(new AeronArchive.Context()
                 .aeronDirectoryName(archive.context().aeronDirectoryName())

File: aeron-agent/src/test/java/io/aeron/agent/ArchiveEventCodeTest.java
Patch:
@@ -22,7 +22,7 @@
 import static io.aeron.agent.ArchiveEventCode.*;
 import static org.junit.jupiter.api.Assertions.*;
 
-public class ArchiveEventCodeTest
+class ArchiveEventCodeTest
 {
     @ParameterizedTest
     @EnumSource(ArchiveEventCode.class)

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventCodeTest.java
Patch:
@@ -22,7 +22,7 @@
 import static io.aeron.agent.ClusterEventCode.*;
 import static org.junit.jupiter.api.Assertions.*;
 
-public class ClusterEventCodeTest
+class ClusterEventCodeTest
 {
     @ParameterizedTest
     @EnumSource(ClusterEventCode.class)

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventLoggerTest.java
Patch:
@@ -102,8 +102,7 @@ void logOnNewLeadershipTerm()
         index += SIZE_OF_LONG;
         assertEquals(nextLeadershipTermId, logBuffer.getLong(index, LITTLE_ENDIAN));
         index += SIZE_OF_LONG;
-        assertEquals(
-            nextTermBaseLogPosition, logBuffer.getLong(index, LITTLE_ENDIAN));
+        assertEquals(nextTermBaseLogPosition, logBuffer.getLong(index, LITTLE_ENDIAN));
         index += SIZE_OF_LONG;
         assertEquals(nextLogPosition, logBuffer.getLong(index, LITTLE_ENDIAN));
         index += SIZE_OF_LONG;

File: aeron-agent/src/test/java/io/aeron/agent/ConfigOptionTest.java
Patch:
@@ -137,8 +137,8 @@ void shouldParseAgentArgsThatEndWithExtraSeparators()
         final Map<String, String> expectedOptions = new HashMap<>();
         expectedOptions.put(ENABLED_ARCHIVE_EVENT_CODES, "REPLICATION_SESSION_STATE_CHANGE,CMD_IN_START_RECORDING");
 
-        final Map<String, String> configOptions =
-            parseAgentArgs("aeron.event.archive.log=REPLICATION_SESSION_STATE_CHANGE,CMD_IN_START_RECORDING||||");
+        final Map<String, String> configOptions = parseAgentArgs(
+            "aeron.event.archive.log=REPLICATION_SESSION_STATE_CHANGE,CMD_IN_START_RECORDING||||");
 
         assertEquals(expectedOptions, configOptions);
     }

File: aeron-agent/src/test/java/io/aeron/agent/DriverEventCodeTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.jupiter.api.Assertions.assertSame;
 
-public class DriverEventCodeTest
+class DriverEventCodeTest
 {
     @ParameterizedTest
     @EnumSource(DriverEventCode.class)

File: aeron-agent/src/test/java/io/aeron/agent/EventConfigurationTest.java
Patch:
@@ -34,7 +34,7 @@
 public class EventConfigurationTest
 {
     @Test
-    public void nullValueMeansNoEventsEnabled()
+    void nullValueMeansNoEventsEnabled()
     {
         final EnumSet<TestEvent> parsedEvents = parseEventCodes(
             TestEvent.class, null, Collections.emptyMap(), i -> TestEvent.values()[i], TestEvent::valueOf);
@@ -43,7 +43,7 @@ public void nullValueMeansNoEventsEnabled()
     }
 
     @Test
-    public void parseEventCodesShouldIgnoreInvalidEventCodes()
+    void parseEventCodesShouldIgnoreInvalidEventCodes()
     {
         final PrintStream err = System.err;
         final ByteArrayOutputStream stderr = new ByteArrayOutputStream();

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -701,8 +701,8 @@ static int validateAndComputeLength(final int lengthOne, final int lengthTwo)
     }
 
     /**
-     * Returns a string representation of a position.  Generally used for errors.  If the position is a valid error then
-     * String name of the error will be returned.  If the value is 0 or greater the text will be "NONE". If the position
+     * Returns a string representation of a position. Generally used for errors. If the position is a valid error then
+     * String name of the error will be returned. If the value is 0 or greater the text will be "NONE". If the position
      * is negative, but not a known error code then "UNKNOWN" will be returned.
      *
      * @param position position value returned from a call to offer.

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -3242,7 +3242,8 @@ public AuthorisationServiceSupplier authorisationServiceSupplier()
          * <p>When using an authorisation service for the ConsensusModule, then the following values for protocolId,
          * actionId, and type should be considered.</p>
          *
-         * <table summary="Parameters for authorisation service queries from the Archive">
+         * <table>
+         *     <caption>Parameters for authorisation service queries from the Archive</caption>
          *     <thead>
          *         <tr><td>Description</td><td>protocolId</td><td>actionId</td><td>type(s)</td></tr>
          *     </thead>

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -3886,7 +3886,8 @@ public AuthorisationServiceSupplier authorisationServiceSupplier()
          *
          * <p>When using an authorisation service for the ConsensusModule, then the following values for protocolId,
          * actionId, and type should be considered.</p>
-         * <table summary="Parameters for authorisation service queries from the Consensus Module">
+         * <table>
+         *     <caption>Parameters for authorisation service queries from the Consensus Module</caption>
          *     <thead>
          *         <tr><td>Description</td><td>protocolId</td><td>actionId</td><td>type(s)</td></tr>
          *     </thead>

File: aeron-driver/src/main/java/io/aeron/driver/OptimalMulticastDelayGenerator.java
Patch:
@@ -65,7 +65,6 @@ public class OptimalMulticastDelayGenerator implements FeedbackDelayGenerator
 
     /**
      * Create new feedback delay generator based on estimates. Pre-calculating some parameters upfront.
-     * <p>
      *
      * @param maxBackoffT of the delay interval
      * @param groupSize   estimate

File: aeron-system-tests/src/test/java/io/aeron/MultipleMulticastsSubscriptionsTest.java
Patch:
@@ -32,10 +32,9 @@
 import org.junit.jupiter.api.extension.RegisterExtension;
 
 import static org.junit.jupiter.api.Assumptions.assumeFalse;
-import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 @ExtendWith(InterruptingTestCallback.class)
-public class MultipleMulticastsSubscriptionsTest
+class MultipleMulticastsSubscriptionsTest
 {
     @RegisterExtension
     final SystemTestWatcher watcher = new SystemTestWatcher();

File: aeron-archive/src/main/java/io/aeron/archive/DedicatedModeArchiveConductor.java
Patch:
@@ -55,7 +55,8 @@ public void onStart()
      */
     public int doWork()
     {
-        return processCloseQueue() + super.doWork();
+        final int workCount = processCloseQueue();
+        return workCount + super.doWork();
     }
 
     /**

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -546,7 +546,7 @@ public static final class Configuration
         public static final String CONSENSUS_STREAM_ID_PROP_NAME = "aeron.cluster.consensus.stream.id";
 
         /**
-         * Stream id for the archived snapshots within a channel.
+         * Stream id for the communicating consensus messages.
          */
         @Config
         public static final int CONSENSUS_STREAM_ID_DEFAULT = 108;

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1598,7 +1598,8 @@ private NetworkPublication newNetworkPublication(
                 ctx.senderCachedNanoClock(),
                 ctx.systemCounters().get(INVALID_PACKETS),
                 ctx.retransmitUnicastDelayGenerator(),
-                ctx.retransmitUnicastLingerGenerator());
+                ctx.retransmitUnicastLingerGenerator(),
+                udpChannel.hasGroupSemantics());
 
             final NetworkPublication publication = new NetworkPublication(
                 registrationId,

File: aeron-driver/src/test/java/io/aeron/driver/RetransmitHandlerTest.java
Patch:
@@ -77,7 +77,7 @@ class RetransmitHandlerTest
         DataHeaderFlyweight.createDefaultHeader(0, 0, 0));
 
     private RetransmitHandler handler = new RetransmitHandler(
-        () -> currentTime, invalidPackets, DELAY_GENERATOR, LINGER_GENERATOR);
+        () -> currentTime, invalidPackets, DELAY_GENERATOR, LINGER_GENERATOR, true);
 
     @BeforeEach
     void before()
@@ -319,7 +319,7 @@ void shouldOnlyRetransmitOnNakWhenConfiguredTo(final BiConsumer<RetransmitHandle
 
     private RetransmitHandler newZeroDelayRetransmitHandler()
     {
-        return new RetransmitHandler(() -> currentTime, invalidPackets, ZERO_DELAY_GENERATOR, LINGER_GENERATOR);
+        return new RetransmitHandler(() -> currentTime, invalidPackets, ZERO_DELAY_GENERATOR, LINGER_GENERATOR, true);
     }
 
     private void createTermBuffer(final BiConsumer<RetransmitHandlerTest, Integer> creator, final int num)

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleExtension.java
Patch:
@@ -47,7 +47,7 @@ public interface ConsensusModuleExtension extends AutoCloseable
      * @param header representing the metadata for the data.
      * @return The action to be taken with regard to the stream position after the callback.
      */
-    ControlledFragmentHandler.Action onFragment(
+    ControlledFragmentHandler.Action onMessage(
         int schemaId,
         int templateId,
         DirectBuffer buffer,

File: aeron-cluster/src/main/java/io/aeron/cluster/IngressAdapter.java
Patch:
@@ -75,7 +75,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
         final int templateId = messageHeaderDecoder.templateId();
         if (schemaId != MessageHeaderDecoder.SCHEMA_ID)
         {
-            return consensusModuleAgent.onUnknownMessageSchema(schemaId, templateId, buffer, offset, length, header);
+            return consensusModuleAgent.onExtensionMessage(schemaId, templateId, buffer, offset, length, header);
         }
 
         if (templateId == SessionMessageHeaderDecoder.TEMPLATE_ID)

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -467,10 +467,10 @@ void shouldDelegateHandlingToRegisteredExtension()
             .consensusModuleExtension(() -> consensusModuleExtension);
 
         final ConsensusModuleAgent agent = new ConsensusModuleAgent(ctx);
-        agent.onUnknownMessageSchema(SCHEMA_ID, 1, null, 0, 0, null);
+        agent.onExtensionMessage(SCHEMA_ID, 1, null, 0, 0, null);
 
         verify(consensusModuleExtension)
-            .onFragment(SCHEMA_ID, 1, null, 0, 0, null);
+            .onMessage(SCHEMA_ID, 1, null, 0, 0, null);
     }
 
     @Test
@@ -482,6 +482,6 @@ void shouldThrowExceptionOnUnknownSchemaAndNoAdapter()
         final ConsensusModuleAgent agent = new ConsensusModuleAgent(ctx);
 
         assertThrows(ClusterException.class,
-            () -> agent.onUnknownMessageSchema(SCHEMA_ID, 0, null, 0, 0, null));
+            () -> agent.onExtensionMessage(SCHEMA_ID, 0, null, 0, 0, null));
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/IngressAdapterTest.java
Patch:
@@ -90,7 +90,7 @@ static Stream<Arguments> shouldDelegateToConsensusModuleAgent()
                     .version(0);
             }, 0,  // no wrapping
             (ConsensusModuleAgentExpectation)(a, buffer) ->
-                a.onUnknownMessageSchema(17, 19, buffer, 0, MessageHeaderDecoder.ENCODED_LENGTH, null)),
+                a.onExtensionMessage(17, 19, buffer, 0, MessageHeaderDecoder.ENCODED_LENGTH, null)),
         Arguments.of(
             "SessionMessageHeaderDecoder",
             (Consumer<MutableDirectBuffer>)buffer ->

File: aeron-samples/src/main/java/io/aeron/samples/archive/RecordedBasicPublisher.java
Patch:
@@ -63,6 +63,8 @@ public static void main(final String[] args) throws InterruptedException
 
         try (AeronArchive archive = AeronArchive.connect(archiveCtx))
         {
+            System.out.println("AeronArchive.Context " + archiveCtx);
+
             archive.startRecording(CHANNEL, STREAM_ID, SourceLocation.LOCAL);
 
             try (Publication publication = archive.context().aeron().addPublication(CHANNEL, STREAM_ID))

File: aeron-samples/src/main/java/io/aeron/samples/archive/ReplayedBasicSubscriber.java
Patch:
@@ -60,6 +60,8 @@ public static void main(final String[] args)
 
         try (AeronArchive archive = AeronArchive.connect(archiveCtx))
         {
+            System.out.println("AeronArchive.Context " + archiveCtx);
+
             final long recordingId = findLatestRecording(archive);
             final long position = 0L;
             final long length = Long.MAX_VALUE;

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -66,6 +66,7 @@ public class ConsensusModuleAgentTest
     private static final String RESPONSE_CHANNEL_ONE = "aeron:udp?endpoint=localhost:11111";
     private static final String RESPONSE_CHANNEL_TWO = "aeron:udp?endpoint=localhost:22222";
     private static final int SCHEMA_ID = 17;
+    private static final int MILLIS = 19;
 
     private final EgressPublisher mockEgressPublisher = mock(EgressPublisher.class);
     private final LogPublisher mockLogPublisher = mock(LogPublisher.class);
@@ -165,7 +166,7 @@ public void shouldLimitActiveSessions()
         Tests.setField(agent, "appendPosition", mock(ReadableCounter.class));
         agent.onSessionConnect(correlationIdOne, 2, PROTOCOL_SEMANTIC_VERSION, RESPONSE_CHANNEL_ONE, new byte[0]);
 
-        clock.update(SCHEMA_ID, TimeUnit.MILLISECONDS);
+        clock.update(MILLIS, TimeUnit.MILLISECONDS);
         agent.doWork();
         verify(mockTimeConsumer).accept(clock.time());
 

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplayMerge.java
Patch:
@@ -557,7 +557,9 @@ private void checkProgress(final long nowMs)
     {
         if (nowMs > (timeOfLastProgressMs + mergeProgressTimeoutMs))
         {
-            throw new TimeoutException("ReplayMerge no progress: state=" + state);
+            final int transportCount = null != image ? image.activeTransportCount() : 0;
+            throw new TimeoutException(
+                "ReplayMerge no progress: state=" + state + ", activeTransportCount=" + transportCount);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -407,7 +407,7 @@ public void onLoadBeginSnapshot(
         }
     }
 
-    public void onUnknownMessage(
+    public ControlledFragmentHandler.Action onUnknownMessage(
         final int schemaId,
         final int templateId,
         final DirectBuffer buffer,

File: aeron-cluster/src/main/java/io/aeron/cluster/IngressAdapter.java
Patch:
@@ -75,7 +75,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
         final int templateId = messageHeaderDecoder.templateId();
         if (schemaId != MessageHeaderDecoder.SCHEMA_ID)
         {
-            consensusModuleAgent.onUnknownMessage(schemaId, templateId, buffer, offset, length, header);
+            return consensusModuleAgent.onUnknownMessage(schemaId, templateId, buffer, offset, length, header);
         }
 
         if (templateId == SessionMessageHeaderDecoder.TEMPLATE_ID)

File: aeron-cluster/src/test/java/io/aeron/cluster/IngressAdapterTest.java
Patch:
@@ -61,7 +61,7 @@ public void setup()
     @SuppressWarnings("unused") // name used for test display name
     @ParameterizedTest(name = "{index} {0}")
     @MethodSource
-    public void shouldDelegateToConsensusModuleAgent(
+    void shouldDelegateToConsensusModuleAgent(
         final String name,
         final Consumer<MutableDirectBuffer> encoder,
         final int blockLength,
@@ -76,7 +76,7 @@ public void shouldDelegateToConsensusModuleAgent(
         expectation.expect(verify(consensusModuleAgent), buffer);
     }
 
-    public static Stream<Arguments> shouldDelegateToConsensusModuleAgent()
+    static Stream<Arguments> shouldDelegateToConsensusModuleAgent()
     {
         return Stream.of(
         Arguments.of(

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1996,7 +1996,7 @@ private ReceiveChannelEndpoint getOrCreateReceiveChannelEndpoint(
                 channelStatus = ReceiveChannelStatus.allocate(tempBuffer, countersManager, registrationId, channel);
 
                 final DataPacketDispatcher dispatcher = new DataPacketDispatcher(
-                    ctx.driverConductorProxy(), receiverProxy.receiver());
+                    ctx.driverConductorProxy(), receiverProxy.receiver(), ctx.streamSessionLimit());
                 channelEndpoint = ctx.receiveChannelEndpointSupplier().newInstance(
                     udpChannel, dispatcher, channelStatus, ctx);
 

File: aeron-driver/src/test/java/io/aeron/driver/ReceiverTest.java
Patch:
@@ -189,7 +189,7 @@ void setUp() throws Exception
 
         receiveChannelEndpoint = new ReceiveChannelEndpoint(
             UdpChannel.parse(URI),
-            new DataPacketDispatcher(driverConductorProxy, receiver),
+            new DataPacketDispatcher(driverConductorProxy, receiver, ctx.streamSessionLimit()),
             mock(AtomicCounter.class),
             receiverChannelContext);
     }

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestDecoders.java
Patch:
@@ -63,4 +63,5 @@ class ControlRequestDecoders
     final KeepAliveRequestDecoder keepAliveRequest = new KeepAliveRequestDecoder();
     final TaggedReplicateRequestDecoder taggedReplicateRequest = new TaggedReplicateRequestDecoder();
     final ArchiveIdRequestDecoder archiveIdRequestDecoder = new ArchiveIdRequestDecoder();
+    final ReplayTokenRequestDecoder replayTokenRequestDecoder = new ReplayTokenRequestDecoder();
 }

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -523,7 +523,8 @@ void onReplicate(
         final String srcControlChannel,
         final String liveDestination,
         final String replicationChannel,
-        final byte[] encodedCredentials)
+        final byte[] encodedCredentials,
+        final String srcResponseChannel)
     {
         attemptToActivate();
         if (State.ACTIVE == state)
@@ -542,6 +543,7 @@ void onReplicate(
                 fileIoMaxLength,
                 replicationSessionId,
                 encodedCredentials,
+                srcResponseChannel,
                 this);
         }
     }

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -115,8 +115,8 @@ enum State
         this.publisherLimit = publisherLimit;
         this.rawLog = rawLog;
         this.unblockTimeoutNs = ctx.publicationUnblockTimeoutNs();
-        this.untetheredWindowLimitTimeoutNs = ctx.untetheredWindowLimitTimeoutNs();
-        this.untetheredRestingTimeoutNs = ctx.untetheredRestingTimeoutNs();
+        this.untetheredWindowLimitTimeoutNs = params.untetheredWindowLimitTimeoutNs;
+        this.untetheredRestingTimeoutNs = params.untetheredRestingTimeoutNs;
         this.unblockedPublications = ctx.systemCounters().get(UNBLOCKED_PUBLICATIONS);
         this.metaDataBuffer = rawLog.metaData();
 

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -190,8 +190,8 @@ enum State
         this.unblockTimeoutNs = ctx.publicationUnblockTimeoutNs();
         this.connectionTimeoutNs = ctx.publicationConnectionTimeoutNs();
         this.lingerTimeoutNs = params.lingerTimeoutNs;
-        this.untetheredWindowLimitTimeoutNs = ctx.untetheredWindowLimitTimeoutNs();
-        this.untetheredRestingTimeoutNs = ctx.untetheredRestingTimeoutNs();
+        this.untetheredWindowLimitTimeoutNs = params.untetheredWindowLimitTimeoutNs;
+        this.untetheredRestingTimeoutNs = params.untetheredRestingTimeoutNs;
         this.tag = params.entityTag;
         this.channelEndpoint = channelEndpoint;
         this.rawLog = rawLog;

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -838,7 +838,7 @@ else if (NULL_COUNTER_ID == liveLogRecCounterId)
                 final CountersReader countersReader = aeron.countersReader();
 
                 liveLogRecCounterId = RecordingPos.findCounterIdBySession(
-                    countersReader, (int)liveLogReplaySessionId, clusterArchive.archiveId());
+                    countersReader, (int)liveLogReplaySessionId, backupArchive.archiveId());
                 if (NULL_COUNTER_ID != liveLogRecCounterId)
                 {
                     liveLogPositionCounter.setOrdered(countersReader.getCounterValue(liveLogRecCounterId));

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestBackupNode.java
Patch:
@@ -161,7 +161,6 @@ static class Context
     {
         final MediaDriver.Context mediaDriverContext = new MediaDriver.Context();
         final Archive.Context archiveContext = new Archive.Context();
-        final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context();
         final ClusterBackup.Context clusterBackupContext = new ClusterBackup.Context();
     }
 }

File: aeron-system-tests/src/test/java/io/aeron/ChannelValidationTest.java
Patch:
@@ -33,15 +33,13 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
-import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
 
 import java.io.IOException;
 import java.net.StandardProtocolFamily;
 import java.net.StandardSocketOptions;
 import java.nio.channels.DatagramChannel;
-import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.concurrent.TimeUnit;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ConsensusModuleProxy.java
Patch:
@@ -219,7 +219,7 @@ private static void checkResult(final long result)
             result == Publication.CLOSED ||
             result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new ClusterException("unexpected publication state: " + result);
+            throw new ClusterException("unexpected publication state: " + Publication.errorString(result));
         }
     }
 }

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -1492,7 +1492,8 @@ private int checkLiveness(final long nowNs)
                     AeronCounters.appendToLabel(
                         countersReader.metaDataBuffer(),
                         counterId,
-                        " " + AeronCounters.formatVersionInfo(AeronVersion.VERSION, AeronVersion.GIT_SHA));
+                        " name=" + ctx.clientName() + " " +
+                        AeronCounters.formatVersionInfo(AeronVersion.VERSION, AeronVersion.GIT_SHA));
                     timeOfLastKeepAliveNs = nowNs;
                 }
             }

File: aeron-client/src/main/java/io/aeron/status/HeartbeatTimestamp.java
Patch:
@@ -88,7 +88,7 @@ public static int allocateCounterId(
         final int labelOffset = BitUtil.align(keyLength, SIZE_OF_INT);
         int labelLength = 0;
         labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, name);
-        labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, ": ");
+        labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, ": id=");
         labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, registrationId);
 
         return countersManager.allocate(

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -526,7 +526,7 @@ public enum ReplayStart
          * Get the initial value for the cluster relay start
          *
          * @return enum to determine where to start replaying the log from.
-         * @see Context#initialReplayStart(ReplayStart)
+         * @see #CLUSTER_INITIAL_REPLAY_START_PROP_NAME
          */
         public static ReplayStart clusterInitialReplayStart()
         {
@@ -1850,7 +1850,8 @@ public Context initialReplayStart(final Configuration.ReplayStart replayStart)
          * Get the place for the cluster replay to start from when no local copy of the log exists.
          *
          * @return the cluster replay start.
-         * @see #initialReplayStart(Configuration.ReplayStart)
+         * @see Configuration.ReplayStart
+         * @see Configuration#CLUSTER_INITIAL_REPLAY_START_DEFAULT
          */
         public Configuration.ReplayStart initialReplayStart()
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1877,6 +1877,7 @@ else if (0 == workCount && !poller.subscription().isConnected())
     void leadershipTermId(final long leadershipTermId)
     {
         this.leadershipTermId = leadershipTermId;
+        ctx.leadershipTermIdCounter().setOrdered(leadershipTermId);
         for (final PendingServiceMessageTracker tracker : pendingServiceMessageTrackers)
         {
             tracker.leadershipTermId(leadershipTermId);

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -92,6 +92,8 @@ public class ConsensusModuleAgentTest
         .controlToggleCounter(mock(Counter.class))
         .nodeControlToggleCounter(mock(Counter.class))
         .clusterNodeRoleCounter(mock(Counter.class))
+        .electionCounter(mock(Counter.class))
+        .leadershipTermIdCounter(mock(Counter.class))
         .timedOutClientCounter(mockTimedOutClientCounter)
         .clusterTimeConsumerSupplier((ctx) -> mockTimeConsumer)
         .idleStrategySupplier(NoOpIdleStrategy::new)

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -1857,6 +1857,9 @@ public AeronCluster poll()
 
                 case CONCLUDE_CONNECT:
                     return concludeConnect();
+
+                default:
+                    break;
             }
 
             return null;

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -781,7 +781,8 @@ void shouldRejectArchiveCreationIfAnotherArchiveWithTheSameArchiveIdIsAlreadyRun
                 .aeronDirectoryName(driver.context().aeronDirectoryName());
             try
             {
-                final ArchiveException exception = assertThrowsExactly(ArchiveException.class, archiveContext2::conclude);
+                final ArchiveException exception =
+                    assertThrowsExactly(ArchiveException.class, archiveContext2::conclude);
                 assertEquals("ERROR - found existing archive for archiveId=" + archiveId, exception.getMessage());
             }
             finally

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -1981,7 +1981,7 @@ void shouldTrackSnapshotDuration()
         assertThat(
             totalSnapshotDurationTracker.maxSnapshotDuration().get(),
             greaterThanOrEqualTo(
-                percent90(MILLISECONDS.toNanos(Math.max(service1SnapshotDelayMs, service2SnapshotDelayMs)))));
+            percent90(MILLISECONDS.toNanos(Math.max(service1SnapshotDelayMs, service2SnapshotDelayMs)))));
 
         assertEquals(1, service1SnapshotDurationTracker.snapshotDurationThresholdExceededCount().get());
         assertThat(

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -1128,7 +1128,7 @@ private int pollServiceAdapter()
             {
                 ctx.countedErrorHandler().onError(new ClusterEvent(
                     "invalid ack request: logPosition=" + logPosition +
-                    " > requestedAckPosition=" + terminationPosition));
+                    " > requestedAckPosition=" + requestedAckPosition));
             }
 
             final long id = ackId++;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -1097,7 +1097,7 @@ private int pollServiceAdapter()
             if (logPosition > requestedAckPosition)
             {
                 ctx.countedErrorHandler().onError(new ClusterEvent(
-                    "service terminate: logPosition=" + logPosition +
+                    "invalid ack request: logPosition=" + logPosition +
                     " > requestedAckPosition=" + terminationPosition));
             }
 

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -33,7 +33,8 @@
 import java.util.ArrayList;
 
 import static io.aeron.driver.Configuration.PENDING_SETUPS_TIMEOUT_NS;
-import static io.aeron.driver.status.SystemCounterDescriptor.*;
+import static io.aeron.driver.status.SystemCounterDescriptor.BYTES_RECEIVED;
+import static io.aeron.driver.status.SystemCounterDescriptor.RESOLUTION_CHANGES;
 
 /**
  * Agent that receives messages streams and rebuilds {@link PublicationImage}s, plus iterates over them sending status
@@ -115,7 +116,7 @@ public int doWork()
         cachedNanoClock.update(nowNs);
         dutyCycleTracker.measureAndUpdate(nowNs);
 
-        int workCount = commandQueue.drain(Runnable::run, Configuration.COMMAND_DRAIN_LIMIT);
+        int workCount = commandQueue.drain(CommandProxy.RUN_TASK, Configuration.COMMAND_DRAIN_LIMIT);
 
         final int bytesReceived = dataTransportPoller.pollTransports();
         totalBytesReceived.getAndAddOrdered(bytesReceived);

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiModuleSharedDriverTest.java
Patch:
@@ -283,9 +283,8 @@ public void close()
         ConsensusModule consensusModule(final int clusterId, final String aeronDirectoryName)
         {
             final int nodeOffset = (clusterId * 100) + (nodeId * 10);
-            // The `:X` suffix will be removed by the `RedirectingNameResolver:lookup`
             final String ingressChannelWithInvalidEndpointFormatToBeRemovedByNameResolver =
-                "aeron:udp?term-length=64k|endpoint=node" + nodeId + ":2" + clusterId + "11" + nodeId + ":X";
+                "aeron:udp?term-length=64k|endpoint=node" + nodeId + ":2" + clusterId + "11" + nodeId;
             final ConsensusModule.Context ctx = new ConsensusModule.Context()
                 .clusterMemberId(nodeId)
                 .clusterId(clusterId)
@@ -297,7 +296,6 @@ ConsensusModule consensusModule(final int clusterId, final String aeronDirectory
                 .serviceStreamId(104 + nodeOffset)
                 .consensusModuleStreamId(105 + nodeOffset)
                 .ingressChannel(ingressChannelWithInvalidEndpointFormatToBeRemovedByNameResolver)
-                .nameResolver(nameResolver)
                 .replicationChannel("aeron:udp?endpoint=localhost:0");
 
             return ConsensusModule.launch(ctx);

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestNode.java
Patch:
@@ -1085,7 +1085,6 @@ static class Context
         Context(final TestService[] services, final String nodeMappings)
         {
             mediaDriverContext.nameResolver(new RedirectingNameResolver(nodeMappings));
-            consensusModuleContext.nameResolver(new RedirectingNameResolver(nodeMappings));
 
             this.services = services;
             hasServiceTerminated = new AtomicBoolean[services.length];

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestDecoders.java
Patch:
@@ -62,4 +62,5 @@ class ControlRequestDecoders
     final ChallengeResponseDecoder challengeResponse = new ChallengeResponseDecoder();
     final KeepAliveRequestDecoder keepAliveRequest = new KeepAliveRequestDecoder();
     final TaggedReplicateRequestDecoder taggedReplicateRequest = new TaggedReplicateRequestDecoder();
+    final ArchiveIdRequestDecoder archiveIdRequestDecoder = new ArchiveIdRequestDecoder();
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -836,7 +836,8 @@ else if (NULL_COUNTER_ID == liveLogRecCounterId)
             {
                 final CountersReader countersReader = aeron.countersReader();
 
-                liveLogRecCounterId = RecordingPos.findCounterIdBySession(countersReader, (int)liveLogReplaySessionId);
+                liveLogRecCounterId = RecordingPos.findCounterIdBySession(
+                    countersReader, (int)liveLogReplaySessionId, clusterArchive.archiveId());
                 if (NULL_COUNTER_ID != liveLogRecCounterId)
                 {
                     liveLogPositionCounter.setOrdered(countersReader.getCounterValue(liveLogRecCounterId));

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTool.java
Patch:
@@ -1266,9 +1266,9 @@ private static ClusterMarkFile[] openServiceMarkFiles(final File clusterDir, fin
     {
         File[] clusterMarkFileNames =
             clusterDir.listFiles((dir, name) ->
-                name.startsWith(ClusterMarkFile.SERVICE_FILENAME_PREFIX) &&
-                    (name.endsWith(ClusterMarkFile.FILE_EXTENSION) ||
-                        name.endsWith(ClusterMarkFile.LINK_FILE_EXTENSION)));
+            name.startsWith(ClusterMarkFile.SERVICE_FILENAME_PREFIX) &&
+            (name.endsWith(ClusterMarkFile.FILE_EXTENSION) ||
+            name.endsWith(ClusterMarkFile.LINK_FILE_EXTENSION)));
 
         if (null == clusterMarkFileNames)
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingReplication.java
Patch:
@@ -183,7 +183,8 @@ void onSignal(final long correlationId, final long recordingId, final long posit
             if (RecordingSignal.EXTEND == signal)
             {
                 final CountersReader counters = archive.context().aeron().countersReader();
-                recordingPositionCounterId = RecordingPos.findCounterIdByRecording(counters, recordingId);
+                recordingPositionCounterId =
+                    RecordingPos.findCounterIdByRecording(counters, recordingId, archive.archiveId());
             }
             else if (RecordingSignal.SYNC == signal)
             {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -1010,12 +1010,13 @@ private boolean shouldSnapshot(final int flags)
     private int awaitRecordingCounter(final int sessionId, final CountersReader counters, final AeronArchive archive)
     {
         idleStrategy.reset();
-        int counterId = RecordingPos.findCounterIdBySession(counters, sessionId);
+        final long archiveId = archive.archiveId();
+        int counterId = RecordingPos.findCounterIdBySession(counters, sessionId, archiveId);
         while (NULL_COUNTER_ID == counterId)
         {
             idle();
             archive.checkForErrorResponse();
-            counterId = RecordingPos.findCounterIdBySession(counters, sessionId);
+            counterId = RecordingPos.findCounterIdBySession(counters, sessionId, archiveId);
         }
 
         return counterId;

File: aeron-samples/src/main/java/io/aeron/samples/archive/ArchiveCreator.java
Patch:
@@ -122,7 +122,7 @@ private static void createRecording(
         try (Publication publication = aeronArchive.addRecordedExclusivePublication(uriBuilder.build(), STREAM_ID))
         {
             final CountersReader counters = aeron.countersReader();
-            final int counterId = awaitRecordingCounterId(counters, publication.sessionId());
+            final int counterId = awaitRecordingCounterId(counters, publication.sessionId(), aeronArchive.archiveId());
             final long recordingId = RecordingPos.getRecordingId(counters, counterId);
 
             System.out.println(
@@ -145,10 +145,10 @@ private static void checkInterruptStatus()
         }
     }
 
-    private static int awaitRecordingCounterId(final CountersReader counters, final int sessionId)
+    private static int awaitRecordingCounterId(final CountersReader counters, final int sessionId, final long archiveId)
     {
         int counterId;
-        while (NULL_VALUE == (counterId = RecordingPos.findCounterIdBySession(counters, sessionId)))
+        while (NULL_VALUE == (counterId = RecordingPos.findCounterIdBySession(counters, sessionId, archiveId)))
         {
             Thread.yield();
             checkInterruptStatus();

File: aeron-samples/src/main/java/io/aeron/samples/archive/EmbeddedRecordingThroughput.java
Patch:
@@ -148,7 +148,8 @@ private long streamMessagesForRecording()
 
             final long stopPosition = publication.position();
             final CountersReader counters = aeron.countersReader();
-            final int counterId = RecordingPos.findCounterIdBySession(counters, publication.sessionId());
+            final int counterId =
+                RecordingPos.findCounterIdBySession(counters, publication.sessionId(), aeronArchive.archiveId());
 
             idleStrategy.reset();
             while (counters.getCounterValue(counterId) < stopPosition)

File: aeron-samples/src/main/java/io/aeron/samples/archive/RecordedBasicPublisher.java
Patch:
@@ -70,7 +70,8 @@ public static void main(final String[] args) throws InterruptedException
                 final IdleStrategy idleStrategy = YieldingIdleStrategy.INSTANCE;
                 // Wait for recording to have started before publishing.
                 final CountersReader counters = archive.context().aeron().countersReader();
-                int counterId = RecordingPos.findCounterIdBySession(counters, publication.sessionId());
+                final long archiveId = archive.archiveId();
+                int counterId = RecordingPos.findCounterIdBySession(counters, publication.sessionId(), archiveId);
                 while (CountersReader.NULL_COUNTER_ID == counterId)
                 {
                     if (!running.get())
@@ -79,7 +80,7 @@ public static void main(final String[] args) throws InterruptedException
                     }
 
                     idleStrategy.idle();
-                    counterId = RecordingPos.findCounterIdBySession(counters, publication.sessionId());
+                    counterId = RecordingPos.findCounterIdBySession(counters, publication.sessionId(), archiveId);
                 }
 
                 final long recordingId = RecordingPos.getRecordingId(counters, counterId);

File: aeron-samples/src/test/java/io/aeron/samples/archive/RecordingReplicatorTest.java
Patch:
@@ -209,7 +209,8 @@ private long createRecording(
         try (ExclusivePublication publication = aeronArchive.addRecordedExclusivePublication(channel, streamId))
         {
             final CountersReader counters = aeronArchive.context().aeron().countersReader();
-            final int counterId = Tests.awaitRecordingCounterId(counters, publication.sessionId());
+            final int counterId =
+                Tests.awaitRecordingCounterId(counters, publication.sessionId(), aeronArchive.archiveId());
             final long recordingId = RecordingPos.getRecordingId(counters, counterId);
             final BufferClaim bufferClaim = new BufferClaim();
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -387,7 +387,8 @@ private void createRecording()
             Publication publication = aeron.addPublication(RECORDED_CHANNEL, RECORDED_STREAM_ID))
         {
             final CountersReader counters = aeron.countersReader();
-            final int counterId = Tests.awaitRecordingCounterId(counters, publication.sessionId());
+            final int counterId = Tests.awaitRecordingCounterId(
+                counters, publication.sessionId(), aeronArchive.archiveId());
 
             offer(publication, messageCount, messagePrefix);
             consume(subscription, messageCount, messagePrefix);

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -181,7 +181,8 @@ void shouldMergeFromReplayToLive()
 
             aeronArchive.startRecording(recordingChannel, STREAM_ID, REMOTE, true);
             final CountersReader counters = aeron.countersReader();
-            final int recordingCounterId = Tests.awaitRecordingCounterId(counters, publication.sessionId());
+            final int recordingCounterId =
+                Tests.awaitRecordingCounterId(counters, publication.sessionId(), aeronArchive.archiveId());
             final long recordingId = RecordingPos.getRecordingId(counters, recordingCounterId);
 
             publishMessages(publication);

File: aeron-test-support/src/main/java/io/aeron/test/Tests.java
Patch:
@@ -700,10 +700,10 @@ public void testFailed(final ExtensionContext context, final Throwable cause)
         };
     }
 
-    public static int awaitRecordingCounterId(final CountersReader counters, final int sessionId)
+    public static int awaitRecordingCounterId(final CountersReader counters, final int sessionId, final long archiveId)
     {
         int counterId;
-        while (NULL_VALUE == (counterId = RecordingPos.findCounterIdBySession(counters, sessionId)))
+        while (NULL_VALUE == (counterId = RecordingPos.findCounterIdBySession(counters, sessionId, archiveId)))
         {
             Tests.yield();
         }

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestNode.java
Patch:
@@ -256,7 +256,8 @@ public long appendPosition()
         }
 
         final CountersReader countersReader = countersReader();
-        final int counterId = RecordingPos.findCounterIdByRecording(countersReader, recordingId);
+        final int counterId =
+            RecordingPos.findCounterIdByRecording(countersReader, recordingId, archive.context().archiveId());
         if (NULL_VALUE == counterId)
         {
             fail("recording not active " + recordingId);

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterControlAdapter.java
Patch:
@@ -132,6 +132,7 @@ else if (templateId == ClusterMembersExtendedResponseDecoder.TEMPLATE_ID)
                     catchupEndpoint,
                     archiveEndpoint,
                     endpoints)
+                    .isLeader(id == leaderMemberId)
                     .leadershipTermId(activeMembersDecoder.leadershipTermId())
                     .logPosition(activeMembersDecoder.logPosition())
                     .timeOfLastAppendPositionNs(activeMembersDecoder.timeOfLastAppendNs()));

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterMember.java
Patch:
@@ -549,13 +549,13 @@ public static ClusterMember[] parse(final String value)
         {
             final String idAndEndpoints = memberValues[i];
             final String[] memberAttributes = idAndEndpoints.split(",");
-            final int clusterMemberId;
 
             if (memberAttributes.length != 6)
             {
                 throw new ClusterException("invalid member value: " + idAndEndpoints + " within: " + value);
             }
 
+            final int clusterMemberId;
             try
             {
                 clusterMemberId = Integer.parseInt(memberAttributes[0]);

File: aeron-client/src/main/java/io/aeron/BufferBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 
+import static io.aeron.Aeron.NULL_VALUE;
 import static io.aeron.logbuffer.FrameDescriptor.BEGIN_FRAG_FLAG;
 import static io.aeron.logbuffer.FrameDescriptor.FLAGS_OFFSET;
 import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
@@ -45,7 +46,7 @@ public final class BufferBuilder
 
     private final boolean isDirect;
     private int limit;
-    private int nextTermOffset;
+    private int nextTermOffset = NULL_VALUE;
     private final UnsafeBuffer buffer = new UnsafeBuffer();
     final UnsafeBuffer headerBuffer = new UnsafeBuffer();
     final Header completeHeader = new Header(0, 0);
@@ -175,7 +176,7 @@ public MutableDirectBuffer buffer()
     public BufferBuilder reset()
     {
         limit = 0;
-        nextTermOffset = 0;
+        nextTermOffset = NULL_VALUE;
         return this;
     }
 

File: aeron-client/src/test/java/io/aeron/BufferBuilderTest.java
Patch:
@@ -59,6 +59,7 @@ void shouldInitialiseToDefaultValues()
     {
         assertEquals(0, bufferBuilder.capacity());
         assertEquals(0, bufferBuilder.limit());
+        assertEquals(Aeron.NULL_VALUE, bufferBuilder.nextTermOffset());
         assertEquals(0, bufferBuilder.buffer().capacity());
         assertNull(bufferBuilder.buffer().byteBuffer());
         assertArrayEquals(ArrayUtil.EMPTY_BYTE_ARRAY, bufferBuilder.buffer().byteArray());
@@ -176,7 +177,7 @@ void shouldAppendThenReset()
         bufferBuilder.reset();
 
         assertEquals(0, bufferBuilder.limit());
-        assertEquals(0, bufferBuilder.nextTermOffset());
+        assertEquals(Aeron.NULL_VALUE, bufferBuilder.nextTermOffset());
     }
 
     @Test

File: aeron-driver/src/main/java/io/aeron/driver/RetransmitHandler.java
Patch:
@@ -200,6 +200,9 @@ private RetransmitAction scanForExistingRetransmit(final int termId, final int t
                         return action;
                     }
                     break;
+
+                default:
+                    break;
             }
         }
 

File: aeron-system-tests/src/test/java/io/aeron/DataLossAndRecoverySystemTest.java
Patch:
@@ -70,7 +70,6 @@ void tearDown()
     @Test
     void shouldSendStreamOfDataAndHandleLargeGapWithingSingleNakAndRetransmit() throws IOException
     {
-        TestMediaDriver.notSupportedOnCMediaDriver("Not implemented yet");
         launch(context);
 
         sendAndReceive10mOfDataWithLoss(

File: aeron-test-support/src/main/java/io/aeron/test/driver/TestMediaDriver.java
Patch:
@@ -77,7 +77,7 @@ static void enableFixedLoss(
     {
         if (shouldRunCMediaDriver())
         {
-            // No-op
+            CTestMediaDriver.enableFixedLossOnReceive(context, termId, termOffset, length);
         }
         else
         {

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -513,6 +513,8 @@ private int doSend(final ByteBuffer message)
      */
     public void resend(final int termId, final int termOffset, final int length)
     {
+        channelEndpoint.resendHook(sessionId, streamId, termId, termOffset, length);
+
         final long senderPosition = this.senderPosition.get();
         final long resendPosition = computePosition(termId, termOffset, positionBitsToShift, initialTermId);
         final long bottomResendWindow =

File: aeron-driver/src/main/java/io/aeron/driver/ext/DebugReceiveChannelEndpoint.java
Patch:
@@ -112,7 +112,8 @@ public int onDataPacket(
     {
         int result = 0;
 
-        if (!dataLossGenerator.shouldDropFrame(srcAddress, buffer, length))
+        if (!dataLossGenerator.shouldDropFrame(
+            srcAddress, buffer, header.streamId(), header.sessionId(), header.termId(), header.termOffset(), length))
         {
             result = super.onDataPacket(header, buffer, length, srcAddress, transportIndex);
         }

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -77,7 +77,7 @@ void shouldGapFillWhenLossOccurs() throws Exception
         ctx.sendChannelEndpointSupplier((udpChannel, statusIndicator, context) -> new DebugSendChannelEndpoint(
             udpChannel, statusIndicator, context, noLossGenerator, noLossGenerator));
 
-        TestMediaDriver.enableLossGenerationOnReceive(ctx, 0.20, 0xcafebabeL, true, false);
+        TestMediaDriver.enableRandomLoss(ctx, 0.20, 0xcafebabeL, true, false);
 
         try (TestMediaDriver mediaDriver = TestMediaDriver.launch(ctx, watcher))
         {

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -285,7 +285,7 @@ void shouldReceivePublishedMessageOneForOneWithDataLoss(final String channel) th
         context.sendChannelEndpointSupplier((udpChannel, statusIndicator, context) -> new DebugSendChannelEndpoint(
             udpChannel, statusIndicator, context, noLossGenerator, noLossGenerator));
 
-        TestMediaDriver.enableLossGenerationOnReceive(context, 0.1, 0xcafebabeL, true, false);
+        TestMediaDriver.enableRandomLoss(context, 0.1, 0xcafebabeL, true, false);
 
         launch(channel);
 
@@ -330,7 +330,7 @@ void shouldReceivePublishedMessageBatchedWithDataLoss(final String channel) thro
         context.sendChannelEndpointSupplier((udpChannel, statusIndicator, context) -> new DebugSendChannelEndpoint(
             udpChannel, statusIndicator, context, noLossGenerator, noLossGenerator));
 
-        TestMediaDriver.enableLossGenerationOnReceive(context, 0.1, 0xcafebabeL, true, false);
+        TestMediaDriver.enableRandomLoss(context, 0.1, 0xcafebabeL, true, false);
 
         launch(channel);
 

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -340,7 +340,7 @@ public AgentInvoker sharedAgentInvoker()
         throw new UnsupportedOperationException("Not supported in C media driver");
     }
 
-    public static void enableLossGenerationOnReceive(
+    public static void enableRandomLossOnReceive(
         final MediaDriver.Context context,
         final double rate,
         final long seed,

File: aeron-system-tests/src/test/java/io/aeron/ResponseChannelsTest.java
Patch:
@@ -164,7 +164,7 @@ void shouldConnectResponseChannelUsingConcurrent()
             final String url = "aeron:udp?control-mode=response|control=localhost:10002|response-correlation-id=" +
                 image.correlationId();
 
-            try (Publication pubRsp = client.addPublication(url, RESPONSE_STREAM_ID))
+            try (Publication pubRsp = server.addPublication(url, RESPONSE_STREAM_ID))
             {
                 Tests.awaitConnected(subRsp);
                 Tests.awaitConnected(pubRsp);

File: aeron-client/src/main/java/io/aeron/ConcurrentPublication.java
Patch:
@@ -391,7 +391,7 @@ private long appendFragmentedMessage(
         final int length,
         final ReservedValueSupplier reservedValueSupplier)
     {
-        final int framedLength = computeFramedLength(length, maxPayloadLength);
+        final int framedLength = computeFragmentedFrameLength(length, maxPayloadLength);
         final int termLength = termBuffer.capacity();
 
         final long rawTail = logMetaDataBuffer.getAndAddLong(tailCounterOffset, framedLength);
@@ -503,7 +503,7 @@ private long appendFragmentedMessage(
         final ReservedValueSupplier reservedValueSupplier)
     {
         final int length = lengthOne + lengthTwo;
-        final int framedLength = computeFramedLength(length, maxPayloadLength);
+        final int framedLength = computeFragmentedFrameLength(length, maxPayloadLength);
         final int termLength = termBuffer.capacity();
 
         final long rawTail = logMetaDataBuffer.getAndAddLong(tailCounterOffset, framedLength);
@@ -634,7 +634,7 @@ private long appendFragmentedMessage(
         final int length,
         final ReservedValueSupplier reservedValueSupplier)
     {
-        final int framedLength = computeFramedLength(length, maxPayloadLength);
+        final int framedLength = computeFragmentedFrameLength(length, maxPayloadLength);
         final int termLength = termBuffer.capacity();
 
         final long rawTail = logMetaDataBuffer.getAndAddLong(tailCounterOffset, framedLength);

File: aeron-client/src/main/java/io/aeron/ControlledFragmentAssembler.java
Patch:
@@ -126,6 +126,7 @@ else if ((flags & BEGIN_FRAG_FLAG) == BEGIN_FRAG_FLAG)
         {
             final BufferBuilder builder = getBufferBuilder(header.sessionId());
             builder.reset()
+                .firstHeader(header)
                 .append(buffer, offset, length)
                 .nextTermOffset(BitUtil.align(offset + length + HEADER_LENGTH, FRAME_ALIGNMENT));
         }
@@ -142,7 +143,8 @@ else if ((flags & BEGIN_FRAG_FLAG) == BEGIN_FRAG_FLAG)
 
                     if ((flags & END_FRAG_FLAG) == END_FRAG_FLAG)
                     {
-                        action = delegate.onFragment(builder.buffer(), 0, builder.limit(), header);
+                        action = delegate.onFragment(
+                            builder.buffer(), 0, builder.limit(), builder.completeHeader(header));
 
                         if (Action.ABORT == action)
                         {

File: aeron-client/src/main/java/io/aeron/FragmentAssembler.java
Patch:
@@ -132,6 +132,7 @@ private void handleFragment(
         {
             final BufferBuilder builder = getBufferBuilder(header.sessionId());
             builder.reset()
+                .firstHeader(header)
                 .append(buffer, offset, length)
                 .nextTermOffset(BitUtil.align(offset + length + HEADER_LENGTH, FRAME_ALIGNMENT));
         }
@@ -146,7 +147,8 @@ private void handleFragment(
 
                     if ((flags & END_FRAG_FLAG) == END_FRAG_FLAG)
                     {
-                        delegate.onFragment(builder.buffer(), 0, builder.limit(), header);
+                        delegate.onFragment(
+                            builder.buffer(), 0, builder.limit(), builder.completeHeader(header));
                         builder.reset();
                     }
                     else

File: aeron-client/src/main/java/io/aeron/ImageControlledFragmentAssembler.java
Patch:
@@ -117,6 +117,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
         else if ((flags & BEGIN_FRAG_FLAG) == BEGIN_FRAG_FLAG)
         {
             builder.reset()
+                .firstHeader(header)
                 .append(buffer, offset, length)
                 .nextTermOffset(BitUtil.align(offset + length + HEADER_LENGTH, FRAME_ALIGNMENT));
         }
@@ -128,7 +129,8 @@ else if (offset == builder.nextTermOffset())
 
             if ((flags & END_FRAG_FLAG) == END_FRAG_FLAG)
             {
-                action = delegate.onFragment(builder.buffer(), 0, builder.limit(), header);
+                action = delegate.onFragment(
+                    builder.buffer(), 0, builder.limit(), builder.completeHeader(header));
 
                 if (Action.ABORT == action)
                 {

File: aeron-client/src/main/java/io/aeron/ImageFragmentAssembler.java
Patch:
@@ -122,6 +122,7 @@ private void handleFragment(
         if ((flags & BEGIN_FRAG_FLAG) == BEGIN_FRAG_FLAG)
         {
             builder.reset()
+                .firstHeader(header)
                 .append(buffer, offset, length)
                 .nextTermOffset(BitUtil.align(offset + length + HEADER_LENGTH, FRAME_ALIGNMENT));
         }
@@ -131,7 +132,7 @@ else if (offset == builder.nextTermOffset())
 
             if ((flags & END_FRAG_FLAG) == END_FRAG_FLAG)
             {
-                delegate.onFragment(builder.buffer(), 0, builder.limit(), header);
+                delegate.onFragment(builder.buffer(), 0, builder.limit(), builder.completeHeader(header));
                 builder.reset();
             }
             else

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAdapter.java
Patch:
@@ -154,6 +154,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
         else if ((flags & BEGIN_FRAG_FLAG) == BEGIN_FRAG_FLAG)
         {
             builder.reset()
+                .firstHeader(header)
                 .append(buffer, offset, length)
                 .nextTermOffset(BitUtil.align(offset + length + HEADER_LENGTH, FRAME_ALIGNMENT));
         }
@@ -165,7 +166,7 @@ else if (offset == builder.nextTermOffset())
 
             if ((flags & END_FRAG_FLAG) == END_FRAG_FLAG)
             {
-                action = onMessage(builder.buffer(), 0, header);
+                action = onMessage(builder.buffer(), 0, builder.completeHeader(header));
 
                 if (Action.ABORT == action)
                 {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/BoundedLogAdapter.java
Patch:
@@ -72,6 +72,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
         else if ((flags & BEGIN_FRAG_FLAG) == BEGIN_FRAG_FLAG)
         {
             builder.reset()
+                .firstHeader(header)
                 .append(buffer, offset, length)
                 .nextTermOffset(BitUtil.align(offset + length + HEADER_LENGTH, FRAME_ALIGNMENT));
         }
@@ -83,7 +84,7 @@ else if (offset == builder.nextTermOffset())
 
             if ((flags & END_FRAG_FLAG) == END_FRAG_FLAG)
             {
-                action = onMessage(builder.buffer(), 0, builder.limit(), header);
+                action = onMessage(builder.buffer(), 0, builder.limit(), builder.completeHeader(header));
 
                 if (Action.ABORT == action)
                 {

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -38,7 +38,7 @@
 
 import java.util.List;
 
-import static io.aeron.logbuffer.FrameDescriptor.END_FRAG_FLAG;
+import static io.aeron.logbuffer.FrameDescriptor.UNFRAGMENTED;
 import static java.util.Arrays.asList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.*;
@@ -135,7 +135,7 @@ void shouldReceivePublishedMessage(final String channel)
                 assertEquals(srcBuffer.getByte(i), capturedBuffer.getByte(i), "same at i=" + i);
             }
 
-            assertEquals(END_FRAG_FLAG, headerArg.getValue().flags());
+            assertEquals(UNFRAGMENTED, headerArg.getValue().flags());
         }
     }
 }

File: aeron-client/src/test/java/io/aeron/ChannelUriStringBuilderTest.java
Patch:
@@ -210,7 +210,7 @@ void shouldBuildChannelBuilderUsingExistingStringWithAllTheFields()
             "term-length=1048576|init-term-id=5|term-offset=64|term-id=4353|session-id=2314234|gtag=3|" +
             "linger=100000055000001|sparse=true|eos=true|tether=false|group=false|ssc=true|so-sndbuf=8388608|" +
             "so-rcvbuf=2097152|rcv-wnd=1048576|media-rcv-ts-offset=reserved|channel-rcv-ts-offset=0|" +
-            "channel-snd-ts-offset=8";
+            "channel-snd-ts-offset=8|response-endpoint=127.0.0.3:0|response-correlation-id=12345";
 
         final ChannelUri fromString = ChannelUri.parse(uri);
         final ChannelUri fromBuilder = ChannelUri.parse(new ChannelUriStringBuilder(uri).build());

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublicationThreadLocals.java
Patch:
@@ -36,7 +36,7 @@ final class NetworkPublicationThreadLocals
 
     NetworkPublicationThreadLocals()
     {
-        final ByteBuffer byteBuffer = BufferUtil.allocateDirectAligned(CACHE_LINE_LENGTH * 3, CACHE_LINE_LENGTH);
+        final ByteBuffer byteBuffer = BufferUtil.allocateDirectAligned(CACHE_LINE_LENGTH * 4, CACHE_LINE_LENGTH);
 
         byteBuffer.limit(DataHeaderFlyweight.HEADER_LENGTH);
         heartbeatBuffer = byteBuffer.slice();

File: aeron-driver/src/main/java/io/aeron/driver/SubscriptionParams.java
Patch:
@@ -35,6 +35,7 @@ final class SubscriptionParams
     boolean isRejoin = true;
     boolean isSparse = true;
     boolean isTether = true;
+    boolean isResponse = false;
     InferableBoolean group = InferableBoolean.INFER;
     int initialWindowLength;
 
@@ -116,6 +117,8 @@ static SubscriptionParams getSubscriptionParams(final ChannelUri channelUri, fin
         final int initialWindowLength = UdpChannel.parseBufferLength(channelUri, RECEIVER_WINDOW_LENGTH_PARAM_NAME);
         params.initialWindowLength = 0 != initialWindowLength ? initialWindowLength : context.initialWindowLength();
 
+        params.isResponse = CONTROL_MODE_RESPONSE.equals(channelUri.get(MDC_CONTROL_MODE_PARAM_NAME));
+
         return params;
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/ext/DebugSendChannelEndpoint.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.ext;
 
+import io.aeron.driver.DriverConductorProxy;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.media.UdpChannel;
 import io.aeron.driver.media.SendChannelEndpoint;
@@ -99,11 +100,11 @@ public void onStatusMessage(
         final StatusMessageFlyweight msg,
         final UnsafeBuffer buffer,
         final int length,
-        final InetSocketAddress srcAddress)
+        final InetSocketAddress srcAddress, final DriverConductorProxy conductorProxy)
     {
         if (!controlLossGenerator.shouldDropFrame(srcAddress, msg, msg.frameLength()))
         {
-            super.onStatusMessage(msg, buffer, length, srcAddress);
+            super.onStatusMessage(msg, buffer, length, srcAddress, conductorProxy);
         }
     }
 

File: aeron-driver/src/test/java/io/aeron/driver/DataPacketDispatcherTest.java
Patch:
@@ -119,7 +119,7 @@ void shouldRequestCreateImageUponReceivingSetup()
 
         verify(mockConductorProxy).createPublicationImage(
             SESSION_ID, STREAM_ID, INITIAL_TERM_ID, ACTIVE_TERM_ID, TERM_OFFSET, TERM_LENGTH,
-            MTU_LENGTH, 0, SRC_ADDRESS, SRC_ADDRESS, mockChannelEndpoint);
+            MTU_LENGTH, 0, (short)0, SRC_ADDRESS, SRC_ADDRESS, mockChannelEndpoint);
     }
 
     @Test
@@ -132,7 +132,7 @@ void shouldOnlyRequestCreateImageOnceUponReceivingSetup()
 
         verify(mockConductorProxy).createPublicationImage(
             SESSION_ID, STREAM_ID, INITIAL_TERM_ID, ACTIVE_TERM_ID, TERM_OFFSET, TERM_LENGTH,
-            MTU_LENGTH, 0, SRC_ADDRESS, SRC_ADDRESS, mockChannelEndpoint);
+            MTU_LENGTH, 0, (short)0, SRC_ADDRESS, SRC_ADDRESS, mockChannelEndpoint);
     }
 
     @Test
@@ -196,7 +196,7 @@ void shouldNotIgnoreDataAndSetupAfterImageRemovedAndCoolDownRemoved()
             .addPendingSetupMessage(SESSION_ID, STREAM_ID, 0, mockChannelEndpoint, false, SRC_ADDRESS);
         inOrder.verify(mockConductorProxy).createPublicationImage(
             SESSION_ID, STREAM_ID, INITIAL_TERM_ID, ACTIVE_TERM_ID, TERM_OFFSET, TERM_LENGTH,
-            MTU_LENGTH, 0, SRC_ADDRESS, SRC_ADDRESS, mockChannelEndpoint);
+            MTU_LENGTH, 0, (short)0, SRC_ADDRESS, SRC_ADDRESS, mockChannelEndpoint);
     }
 
     @Test

File: aeron-archive/src/test/java/io/aeron/archive/checksum/ChecksumsTest.java
Patch:
@@ -100,8 +100,8 @@ void newInstanceCreatesANewInstanceOfTheSpecifiedClass()
     {
         final Checksum instance1 = Checksums.newInstance(TestChecksum.class.getName());
         final Checksum instance2 = Checksums.newInstance(TestChecksum.class.getName());
-        assertTrue(instance1 instanceof TestChecksum);
-        assertTrue(instance2 instanceof TestChecksum);
+        assertInstanceOf(TestChecksum.class, instance1);
+        assertInstanceOf(TestChecksum.class, instance2);
         assertNotSame(instance1, instance2);
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -60,7 +60,6 @@
 import static io.aeron.AeronCounters.NODE_CONTROL_TOGGLE_TYPE_ID;
 import static io.aeron.AeronCounters.validateCounterTypeId;
 import static io.aeron.CommonContext.*;
-import static io.aeron.cluster.ConsensusModule.Configuration.CLUSTER_CLIENT_TIMEOUT_COUNT_TYPE_ID;
 import static io.aeron.cluster.ConsensusModule.Configuration.CLUSTER_NODE_ROLE_TYPE_ID;
 import static io.aeron.cluster.ConsensusModule.Configuration.COMMIT_POSITION_TYPE_ID;
 import static io.aeron.cluster.ConsensusModule.Configuration.*;

File: aeron-cluster/src/test/java/io/aeron/cluster/service/ClusteredServiceContainerContextTest.java
Patch:
@@ -225,7 +225,7 @@ void shouldInitializeClusterDirectoryNameFromTheAssignedClusterDir(@TempDir fina
     }
 
     @Test
-    void shouldInitializeClusterDirectoryFromTheGivenDirectoryName(@TempDir final Path temp) throws IOException
+    void shouldInitializeClusterDirectoryFromTheGivenDirectoryName(@TempDir final Path temp)
     {
         final Path dir = Paths.get(temp.toString(), "/some/path");
         context.clusterDir(null).clusterDirectoryName(dir.toString());

File: aeron-system-tests/src/test/java/io/aeron/SystemTests.java
Patch:
@@ -151,7 +151,7 @@ boolean hasMatched()
         public String toString()
         {
             final StringDescription description = new StringDescription();
-            final String lineSeparator = System.getProperty("line.separator");
+            final String lineSeparator = System.lineSeparator();
 
             description.appendText("Unable to match: ");
             matcher.describeTo(description);

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveToolCliTest.java
Patch:
@@ -184,7 +184,7 @@ private static boolean outputMatches(final OutputConsole console, final String e
             .count() == 1;
     }
 
-    private static class OutputConsole
+    private static final class OutputConsole
     {
         private final OutputStream outputBytes = new ByteArrayOutputStream();
         private final PrintStream sysOut = new PrintStream(outputBytes);

File: aeron-cluster/src/test/java/io/aeron/cluster/PriorityHeapTimerServiceTest.java
Patch:
@@ -513,7 +513,7 @@ void manyRandomOperations()
         }
     }
 
-    private static class TestHarness
+    private static final class TestHarness
     {
         final PriorityHeapTimerService timerService = new PriorityHeapTimerService(this::onTimerEvent);
         final Long2LongHashMap timerDeadlines = new Long2LongHashMap(-1);

File: aeron-samples/src/main/java/io/aeron/samples/echo/EchoPair.java
Patch:
@@ -132,7 +132,7 @@ public void close()
         CloseHelper.quietCloseAll(publication, subscription);
     }
 
-    private class EchoMonitor implements EchoMonitorMBean
+    private final class EchoMonitor implements EchoMonitorMBean
     {
         /**
          * Get the correaltionId

File: aeron-system-tests/src/test/java/io/aeron/TaggedFlowControlSystemTest.java
Patch:
@@ -131,7 +131,7 @@ private static Stream<Arguments> strategyConfigurations()
             Arguments.of(null, null, null, "|fc=tagged,g:123", "|gtag=123"));
     }
 
-    private static class State
+    private static final class State
     {
         private int numMessagesToSend;
         private int numMessagesLeftToSend;

File: aeron-test-support/src/main/java/io/aeron/test/SystemTestWatcher.java
Patch:
@@ -563,7 +563,7 @@ void filterErrors(List<Path> paths, MutableInteger count, StringBuilder errors,
             throws IOException;
     }
 
-    private static class ArchiveMarkFileDissector implements MarkFileDissector
+    private static final class ArchiveMarkFileDissector implements MarkFileDissector
     {
         public String filename()
         {

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestCluster.java
Patch:
@@ -2162,7 +2162,7 @@ public byte[] onChallenge(final byte[] encodedChallenge)
         }
     };
 
-    private class KeepAlive implements Runnable
+    private final class KeepAlive implements Runnable
     {
         private long keepAliveDeadlineMs;
         private EpochClock epochClock;
@@ -2243,7 +2243,7 @@ int newLeaderEvent()
         }
     }
 
-    private static class BackupListener implements ClusterBackupEventsListener
+    private static final class BackupListener implements ClusterBackupEventsListener
     {
         public void onBackupQuery()
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -1036,7 +1036,7 @@ public static final class Configuration
         /**
          * Channel for receiving response messages from a cluster.
          */
-        public static final String EGRESS_CHANNEL_DEFAULT = "aeron:udp?endpoint=localhost:0";
+        public static final String EGRESS_CHANNEL_DEFAULT = null;
 
         /**
          * Stream id within a channel for receiving messages from a cluster.

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -466,6 +466,7 @@ private AeronCluster connectToCluster(final CredentialsSupplier credentialsSuppl
             new AeronCluster.Context()
                 .ingressChannel("aeron:udp")
                 .ingressEndpoints(INGRESS_ENDPOINTS)
+                .egressChannel("aeron:udp?endpoint=localhost:0")
                 .credentialsSupplier(credentialsSupplier));
     }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -356,6 +356,7 @@ private AeronCluster connectToCluster(final EgressListener egressListener)
             new AeronCluster.Context()
                 .egressListener(egressListener)
                 .ingressChannel("aeron:udp")
-                .ingressEndpoints(INGRESS_ENDPOINTS));
+                .ingressEndpoints(INGRESS_ENDPOINTS)
+                .egressChannel("aeron:udp?endpoint=localhost:0"));
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/NameResolutionClusterNodeTest.java
Patch:
@@ -153,6 +153,7 @@ private AeronCluster connectToCluster(final EgressListener egressListener)
                         t.printStackTrace();
                     })
                 .ingressChannel("aeron:udp")
-                .ingressEndpoints(INGRESS_ENDPOINTS + ",1=badname:9011"));
+                .ingressEndpoints(INGRESS_ENDPOINTS + ",1=badname:9011")
+                .egressChannel("aeron:udp?endpoint=localhost:0"));
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -529,6 +529,7 @@ public void onSessionMessage(
                     final long correlationId = serviceCorrelationId(nextCorrelationId++);
                     final long deadlineMs = timestamp + buffer.getLong(offset + TIMER_MESSAGE_DELAY_OFFSET);
 
+                    idleStrategy.reset();
                     while (!cluster.scheduleTimer(correlationId, deadlineMs))
                     {
                         idleStrategy.idle();
@@ -608,6 +609,7 @@ public void onTakeSnapshot(final ExclusivePublication snapshotPublication)
                 final ExpandableArrayBuffer buffer = new ExpandableArrayBuffer();
                 buffer.putLong(0, triggeredTimersCounter.get());
 
+                idleStrategy.reset();
                 while (snapshotPublication.offer(buffer, 0, SIZE_OF_INT) < 0)
                 {
                     idleStrategy.idle();

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -81,7 +81,7 @@
  *  +---------------------------------------------------------------+
  *  |                          Reserved                             |
  *  +---------------------------------------------------------------+
- *  |                 Recording Descriptor (varible)                |
+ *  |                Recording Descriptor (variable)                |
  *  |                                                              ...
  * ...                                                              |
  *  +---------------------------------------------------------------+

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -230,7 +230,7 @@ public int maxMessageLength()
     /**
      * Maximum length of a message payload that fits within a message fragment.
      * <p>
-     * This is he MTU length minus the message fragment header length.
+     * This is the MTU length minus the message fragment header length.
      *
      * @return maximum message fragment payload length.
      */

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -230,7 +230,7 @@ public int maxMessageLength()
     /**
      * Maximum length of a message payload that fits within a message fragment.
      * <p>
-     * This is he MTU length minus the message fragment header length.
+     * This is the MTU length minus the message fragment header length.
      *
      * @return maximum message fragment payload length.
      */

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -645,7 +645,7 @@ public Context conclude()
                 LogBufferDescriptor.checkTermLength(publicationTermBufferLength);
                 LogBufferDescriptor.checkTermLength(ipcTermBufferLength);
                 validateInitialWindowLength(initialWindowLength, mtuLength);
-                validateUnblockTimeout(publicationUnblockTimeoutNs, clientLivenessTimeoutNs, timerIntervalNs);
+                validateUnblockTimeout(publicationUnblockTimeoutNs(), clientLivenessTimeoutNs(), timerIntervalNs);
                 validateUntetheredTimeouts(untetheredWindowLimitTimeoutNs, untetheredRestingTimeoutNs, timerIntervalNs);
 
                 final long cncFileLength = BitUtil.align(
@@ -1411,7 +1411,7 @@ public Context counterFreeToReuseTimeoutNs(final long counterFreeToReuseTimeoutN
          */
         public long publicationUnblockTimeoutNs()
         {
-            return publicationUnblockTimeoutNs;
+            return CommonContext.checkDebugTimeout(publicationUnblockTimeoutNs, TimeUnit.NANOSECONDS, 1.5);
         }
 
         /**

File: aeron-test-support/src/main/java/io/aeron/test/driver/RedirectingNameResolver.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Objects;
 
 import static io.aeron.Aeron.NULL_VALUE;
+import static org.agrona.BitUtil.SIZE_OF_INT;
 
 public class RedirectingNameResolver implements NameResolver
 {
@@ -64,7 +65,7 @@ public void init(final CountersReader countersReader, final CounterProvider coun
     {
         countersReader.forEach((counterId, typeId, keyBuffer, label) ->
         {
-            if (typeId == NAME_ENTRY_COUNTER_TYPE_ID && keyBuffer.capacity() > BitUtil.SIZE_OF_INT)
+            if (typeId == NAME_ENTRY_COUNTER_TYPE_ID && keyBuffer.capacity() > SIZE_OF_INT)
             {
                 final String entryName = keyBuffer.getStringAscii(0);
                 final NameEntry entry = nameToEntryMap.get(entryName);
@@ -81,7 +82,7 @@ public void init(final CountersReader countersReader, final CounterProvider coun
             if (null == nameEntry.counter)
             {
                 final int keyLength = tmpBuffer.putStringAscii(0, nameEntry.name);
-                final int labelLength = tmpBuffer.putStringAscii(keyLength, nameEntry.toString());
+                final int labelLength = tmpBuffer.putStringWithoutLengthAscii(keyLength, nameEntry.toString());
 
                 final AtomicCounter atomicCounter = counterProvider.newCounter(
                     NAME_ENTRY_COUNTER_TYPE_ID,

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveCountersTest.java
Patch:
@@ -97,7 +97,7 @@ void allocateErrorCounter()
     @CsvSource({ "5,8", "42,-10", "-19, 61312936129398123" })
     void findReturnsNullValueIfCounterNotFound(final int typeId, final long archiveId)
     {
-        final CountersManager countersManager = Tests.newCountersMananger(2 * COUNTER_LENGTH);
+        final CountersManager countersManager = Tests.newCountersManager(2 * COUNTER_LENGTH);
         assertEquals(1, countersManager.maxCounterId());
         countersManager.allocate(
             "test",
@@ -110,7 +110,7 @@ void findReturnsNullValueIfCounterNotFound(final int typeId, final long archiveI
     @Test
     void findReturnsFirstMatchingCounter()
     {
-        final CountersManager countersManager = Tests.newCountersMananger(8 * COUNTER_LENGTH);
+        final CountersManager countersManager = Tests.newCountersManager(8 * COUNTER_LENGTH);
         final int typeId = 7;
         final long archiveId = Long.MIN_VALUE / 13;
         countersManager.allocate(

File: aeron-client/src/test/java/io/aeron/SubscriptionTest.java
Patch:
@@ -58,7 +58,7 @@ class SubscriptionTest
     private final UnavailableImageHandler unavailableImageHandlerMock = mock(UnavailableImageHandler.class);
 
     private final UnsafeBuffer tempBuffer = new UnsafeBuffer(ByteBuffer.allocate(1024));
-    private final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
+    private final CountersManager countersManager = Tests.newCountersManager(16 * 1024);
 
     private Subscription subscription;
 

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -80,7 +80,7 @@ public class ConsensusModuleAgentTest
     private final ExclusivePublication mockExclusivePublication = mock(ExclusivePublication.class);
     private final Counter mockTimedOutClientCounter = mock(Counter.class);
     private final LongConsumer mockTimeConsumer = mock(LongConsumer.class);
-    private final CountersManager countersManager = Tests.newCountersMananger(2 * COUNTER_LENGTH);
+    private final CountersManager countersManager = Tests.newCountersManager(2 * COUNTER_LENGTH);
     private long registrationId = 20;
 
     private final ConsensusModule.Context ctx = TestContexts.localhostConsensusModule()

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleContextTest.java
Patch:
@@ -73,7 +73,7 @@ class ConsensusModuleContextTest
     File clusterDir;
 
     private ConsensusModule.Context context;
-    private final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
+    private final CountersManager countersManager = Tests.newCountersManager(16 * 1024);
     private long registrationId = 0;
 
     @BeforeEach

File: aeron-cluster/src/test/java/io/aeron/cluster/PendingServiceMessageTrackerTest.java
Patch:
@@ -39,7 +39,7 @@
 
 class PendingServiceMessageTrackerTest
 {
-    private final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
+    private final CountersManager countersManager = Tests.newCountersManager(16 * 1024);
     private final int counterId = countersManager.allocate("test");
     private final Counter counter = new Counter(countersManager, 0, counterId);
     private final LogPublisher logPublisher = mock(LogPublisher.class);
@@ -170,7 +170,7 @@ void snapshotAfterEnqueuePollAndSweepForFollower()
     @Test
     void loadInvalid()
     {
-        final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
+        final CountersManager countersManager = Tests.newCountersManager(16 * 1024);
         final int counterId = countersManager.allocate("test");
         final Counter counter = new Counter(countersManager, 0, counterId);
         final LogPublisher logPublisher = mock(LogPublisher.class);
@@ -187,7 +187,7 @@ void loadInvalid()
     @Test
     void loadValid()
     {
-        final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
+        final CountersManager countersManager = Tests.newCountersManager(16 * 1024);
         final int counterId = countersManager.allocate("test");
         final Counter counter = new Counter(countersManager, 0, counterId);
         final LogPublisher logPublisher = mock(LogPublisher.class);

File: aeron-cluster/src/test/java/io/aeron/cluster/service/ClusteredServiceAgentTest.java
Patch:
@@ -88,7 +88,7 @@ void shouldAbortClusteredServiceIfCommitPositionCounterIsClosed()
         final ArgumentCaptor<UnavailableCounterHandler> captor =
             ArgumentCaptor.forClass(UnavailableCounterHandler.class);
         final ClusterMarkFile markFile = mock(ClusterMarkFile.class);
-        final CountersManager countersManager = Tests.newCountersMananger(64 * 1024);
+        final CountersManager countersManager = Tests.newCountersManager(64 * 1024);
 
         when(aeron.addCounter(anyInt(), any(), anyInt(), anyInt(), any(), anyInt(), anyInt()))
             .then(CountersAnswer.mapTo(countersManager));
@@ -133,7 +133,7 @@ void shouldLogErrorInsteadOfThrowingIfSessionIsNotFoundOnClose()
         final Aeron aeron = mock(Aeron.class);
         final DistinctErrorLog distinctErrorLog = new DistinctErrorLog(
             new UnsafeBuffer(ByteBuffer.allocateDirect(16384)), new SystemEpochClock());
-        final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
+        final CountersManager countersManager = Tests.newCountersManager(16 * 1024);
         final AtomicCounter errorCounter = countersManager.newCounter("test");
         final long originalErrorCount = errorCounter.get();
 

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -144,7 +144,7 @@ void before()
         counterKeyAndLabel.putInt(COUNTER_KEY_OFFSET, 42);
         counterKeyAndLabel.putStringAscii(COUNTER_LABEL_OFFSET, COUNTER_LABEL);
 
-        spyCountersManager = spy(Tests.newCountersMananger(BUFFER_LENGTH));
+        spyCountersManager = spy(Tests.newCountersManager(BUFFER_LENGTH));
         spySystemCounters = spy(new SystemCounters(spyCountersManager));
 
         when(spySystemCounters.get(SystemCounterDescriptor.ERRORS)).thenReturn(mockErrorCounter);

File: aeron-driver/src/test/java/io/aeron/driver/IpcPublicationTest.java
Patch:
@@ -57,7 +57,7 @@ void setUp()
         final RingBuffer toDriverCommands = new ManyToOneRingBuffer(new UnsafeBuffer(
             ByteBuffer.allocateDirect(Configuration.CONDUCTOR_BUFFER_LENGTH_DEFAULT)));
 
-        final CountersManager countersManager = Tests.newCountersMananger(BUFFER_LENGTH);
+        final CountersManager countersManager = Tests.newCountersManager(BUFFER_LENGTH);
         final SystemCounters systemCounters = new SystemCounters(countersManager);
 
         final SenderProxy senderProxy = mock(SenderProxy.class);

File: aeron-driver/src/test/java/io/aeron/driver/MinMulticastFlowControlTest.java
Patch:
@@ -38,7 +38,7 @@ class MinMulticastFlowControlTest
 
     private final UnsafeBuffer tempBuffer = new UnsafeBuffer(new byte[8192]);
     private final MinMulticastFlowControl flowControl = new MinMulticastFlowControl();
-    private final CountersManager countersManager = Tests.newCountersMananger(COUNTERS_BUFFER_LENGTH);
+    private final CountersManager countersManager = Tests.newCountersManager(COUNTERS_BUFFER_LENGTH);
 
     private static Stream<Arguments> validUris()
     {

File: aeron-driver/src/test/java/io/aeron/driver/TaggedMulticastFlowControlTest.java
Patch:
@@ -40,7 +40,7 @@ class TaggedMulticastFlowControlTest
     private static final int COUNTERS_BUFFER_LENGTH = 16 * 1024;
 
     private final UnsafeBuffer tempBuffer = new UnsafeBuffer(new byte[8192]);
-    private final CountersManager countersManager = Tests.newCountersMananger(COUNTERS_BUFFER_LENGTH);
+    private final CountersManager countersManager = Tests.newCountersManager(COUNTERS_BUFFER_LENGTH);
     private final TaggedMulticastFlowControl flowControl = new TaggedMulticastFlowControl();
 
     private static Stream<Arguments> validUris()

File: aeron-client/src/main/java/io/aeron/AeronCounters.java
Patch:
@@ -499,7 +499,7 @@ public static int appendToLabel(
     }
 
     /**
-     * Format version information to display purposes.
+     * Format version information for display purposes.
      *
      * @param fullVersion of the component.
      * @param commitHash  Git commit SHA.

File: aeron-driver/src/main/java/io/aeron/driver/status/SystemCounterDescriptor.java
Patch:
@@ -196,7 +196,7 @@ public enum SystemCounterDescriptor
     NAME_RESOLVER_TIME_THRESHOLD_EXCEEDED(33, "NameResolver exceeded threshold count"),
 
     /**
-     * Count of the number of times the time threshold has been exceeded by the NameResolver.
+     * The version of the media driver.
      */
     AERON_VERSION(34, "Aeron software: " +
         AeronCounters.formatVersionInfo(MediaDriverVersion.VERSION, MediaDriverVersion.GIT_SHA)),

File: aeron-driver/src/main/java/io/aeron/driver/status/SystemCounterDescriptor.java
Patch:
@@ -103,7 +103,7 @@ public enum SystemCounterDescriptor
     /**
      * Count of errors observed by the driver and an indication to read the distinct error log.
      */
-    ERRORS(15, "Errors - " + AeronCounters.formatVersionInfo(MediaDriverVersion.VERSION, MediaDriverVersion.GIT_SHA)),
+    ERRORS(15, "Errors: " + AeronCounters.formatVersionInfo(MediaDriverVersion.VERSION, MediaDriverVersion.GIT_SHA)),
 
     /**
      * Count of socket send operation which resulted in less than the packet length being sent.

File: aeron-samples/src/main/java/io/aeron/samples/CncFileReader.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.io.File;
 import java.nio.MappedByteBuffer;
+import java.nio.charset.StandardCharsets;
 
 import static io.aeron.CncFileDescriptor.*;
 import static io.aeron.samples.SamplesUtil.mapExistingFileReadOnly;
@@ -67,7 +68,8 @@ private CncFileReader(final MappedByteBuffer cncByteBuffer)
 
         this.countersReader = new CountersReader(
             createCountersMetaDataBuffer(cncByteBuffer, cncMetaDataBuffer),
-            createCountersValuesBuffer(cncByteBuffer, cncMetaDataBuffer));
+            createCountersValuesBuffer(cncByteBuffer, cncMetaDataBuffer),
+            StandardCharsets.US_ASCII);
     }
 
     /**

File: aeron-test-support/src/main/java/io/aeron/test/SystemTestWatcher.java
Patch:
@@ -42,6 +42,7 @@
 import java.lang.reflect.Method;
 import java.net.UnknownHostException;
 import java.nio.MappedByteBuffer;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.text.SimpleDateFormat;
 import java.util.*;
@@ -472,7 +473,8 @@ private Throwable printCncInfo(final List<Path> paths)
                 {
                     final CountersReader countersReader = new CountersReader(
                         createCountersMetaDataBuffer(mappedByteBuffer, metaDataBuffer),
-                        createCountersValuesBuffer(mappedByteBuffer, metaDataBuffer));
+                        createCountersValuesBuffer(mappedByteBuffer, metaDataBuffer),
+                        StandardCharsets.US_ASCII);
                     countersReader.forEach(
                         (counterId, label) ->
                         {

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -32,6 +32,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
@@ -190,7 +191,7 @@ public CountersReader counters()
                 .keepAliveIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
                 .conclude();
             countersReader = new CountersReader(
-                aeronContext.countersMetaDataBuffer(), aeronContext.countersValuesBuffer());
+                aeronContext.countersMetaDataBuffer(), aeronContext.countersValuesBuffer(), StandardCharsets.US_ASCII);
         }
 
         return countersReader;

File: buildSrc/src/main/java/io/aeron/build/GithubUtil.java
Patch:
@@ -46,7 +46,7 @@ public static String currentGitHash(final String projectDir) throws IOException,
             final String commitSha = reader.abbreviate(commitId, 10).name();
             final Status status = git.status().call();
 
-            return status.isClean() ? commitSha : commitSha + "+guilty";
+            return status.hasUncommittedChanges() ? commitSha + "+guilty" : commitSha;
         }
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveContextTest.java
Patch:
@@ -912,7 +912,7 @@ void shouldCreateALinkToTheArchiveMarkFileInAnotherDirectory(
         assertTrue(Files.exists(markFile));
         final Path linkFile = archiveDir.resolve(ArchiveMarkFile.LINK_FILENAME);
         assertTrue(Files.exists(linkFile));
-        assertEquals(markFileDir.toAbsolutePath().toString(), new String(Files.readAllBytes(linkFile), US_ASCII));
+        assertEquals(markFileDir.toFile().getCanonicalPath(), new String(Files.readAllBytes(linkFile), US_ASCII));
     }
 
     @Test
@@ -937,7 +937,7 @@ void shouldCreateALinkToTheArchiveMarkFileWhichIsExplicitlyAssigned(
         final Path linkFile = archiveDir.resolve(ArchiveMarkFile.LINK_FILENAME);
         assertTrue(Files.exists(linkFile));
         assertEquals(
-            archiveMarkFileDir.toAbsolutePath().toString(), new String(Files.readAllBytes(linkFile), US_ASCII));
+            archiveMarkFileDir.toFile().getCanonicalPath(), new String(Files.readAllBytes(linkFile), US_ASCII));
     }
 
     private Counter mockArchiveCounter(

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -1167,8 +1167,7 @@ public void conclude()
                 if (null == errorCounter)
                 {
                     concludeArchiveId();
-                    errorCounter = ArchiveCounters.allocate(
-                        aeron, tempBuffer, Configuration.ARCHIVE_ERROR_COUNT_TYPE_ID, "Archive Errors", archiveId);
+                    errorCounter = ArchiveCounters.allocateErrorCounter(aeron, tempBuffer, archiveId);
                 }
             }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -664,7 +664,7 @@ public void conclude()
 
                 if (null == errorCounter)
                 {
-                    errorCounter = ClusterCounters.allocate(
+                    errorCounter = ClusterCounters.allocateVersioned(
                         aeron, buffer, "ClusterBackup Errors", CLUSTER_BACKUP_ERROR_COUNT_TYPE_ID, clusterId);
                 }
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -1583,7 +1583,7 @@ public void conclude()
 
                 if (null == errorCounter)
                 {
-                    errorCounter = ClusterCounters.allocate(
+                    errorCounter = ClusterCounters.allocateVersioned(
                         aeron, buffer, "Cluster Errors", CONSENSUS_MODULE_ERROR_COUNT_TYPE_ID, clusterId);
                 }
             }

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveToolCliTest.java
Patch:
@@ -48,8 +48,7 @@ public class ArchiveToolCliTest
     void before(
         @TempDir final File aeronDir,
         @TempDir final File markFileDir,
-        @TempDir final File archiveDir
-    ) throws IOException
+        @TempDir final File archiveDir)
     {
         this.archiveDir = archiveDir;
 
@@ -78,7 +77,7 @@ void before(
     }
 
     @AfterEach
-    void after() throws IOException
+    void after()
     {
         CloseHelper.close(mediaDriver);
     }

File: aeron-client/src/test/java/io/aeron/PublicationTest.java
Patch:
@@ -378,8 +378,7 @@ void tryClaimShouldReturnPositionAtWhichTheClaimedSpaceEnds(
                 termId,
                 termCount,
                 tailAfterUpdate,
-                expectedPosition
-            );
+                expectedPosition);
         }
     }
 

File: aeron-samples/src/main/java/io/aeron/samples/stress/StressMdcServer.java
Patch:
@@ -95,7 +95,7 @@ public void onStart()
     /**
      * {@inheritDoc}
      */
-    public int doWork() throws Exception
+    public int doWork()
     {
         if (!mdcSubscription1.isConnected() || !mdcSubscription2.isConnected())
         {

File: aeron-samples/src/main/java/io/aeron/samples/stress/StressUnicastClient.java
Patch:
@@ -51,6 +51,7 @@
  */
 public class StressUnicastClient implements Agent
 {
+    private static final long TIMEOUT_MS = 5_000;
     private final String serverAddress;
     private final String clientAddress;
     private final EpochClock clock;
@@ -62,7 +63,6 @@ public class StressUnicastClient implements Agent
     private final int mtu;
     private final byte[] buffer = new byte[2 * MAX_UDP_PAYLOAD_LENGTH];
     private int messageLength;
-    private final long timeoutMs = 5_000;
     private final CRC64 crc = new CRC64();
 
     private Aeron aeron;
@@ -119,7 +119,7 @@ public void onStart()
     /**
      * {@inheritDoc}
      */
-    public int doWork() throws Exception
+    public int doWork()
     {
         if (0 == messageLength)
         {
@@ -147,7 +147,7 @@ public int doWork() throws Exception
         if (0 < correlationId && 0 == recvCount && !inflightMessages.isEmpty())
         {
             final long timeSinceLastMessageMs = clock.time() - lastMessageSent;
-            if (timeoutMs < timeSinceLastMessageMs)
+            if (TIMEOUT_MS < timeSinceLastMessageMs)
             {
                 throw new RuntimeException("No response received for " + timeSinceLastMessageMs + "ms, client=" + this);
             }

File: aeron-samples/src/main/java/io/aeron/samples/stress/StressUnicastServer.java
Patch:
@@ -84,7 +84,7 @@ public void onStart()
     /**
      * {@inheritDoc}
      */
-    public int doWork() throws Exception
+    public int doWork()
     {
         int count = 0;
 

File: aeron-samples/src/main/java/io/aeron/samples/stress/StressUtil.java
Patch:
@@ -77,7 +77,7 @@ public static ChannelUriStringBuilder unicastReqChannel(final String serverAddre
     }
 
     /**
-     * Start forming unicast respopnse channel for the specific server.
+     * Start forming unicast response channel for the specific server.
      *
      * @param clientAddress as the endpoint receiver of the unicast traffic.
      * @return a partially constructed URI with the endpoint set.
@@ -172,8 +172,8 @@ static boolean crcMatches(final DirectBuffer msg, final int offset, final int le
     {
         final long recvCrc = msg.getLong(offset, LITTLE_ENDIAN);
         final long calcCrc = crc.recalculate(msg, offset + BitUtil.SIZE_OF_LONG, length - BitUtil.SIZE_OF_LONG);
-        final boolean dataMatches = calcCrc == recvCrc;
-        return dataMatches;
+
+        return calcCrc == recvCrc;
     }
 
     static void validateMessage(

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveCountersTest.java
Patch:
@@ -46,7 +46,7 @@ void allocateCounterUsingAeronClientIdAsArchiveIdentifier()
         final String expectedLabel = name + " - archiveId=" + archiveId + " " +
             AeronCounters.formatVersionInfo(ArchiveVersion.VERSION, ArchiveVersion.GIT_SHA);
         final Aeron aeron = mock(Aeron.class);
-        final MutableDirectBuffer tempBuffer = new UnsafeBuffer(new byte[100]);
+        final MutableDirectBuffer tempBuffer = new UnsafeBuffer(new byte[200]);
         final Counter counter = mock(Counter.class);
         when(aeron.clientId()).thenReturn(archiveId);
         when(aeron.addCounter(typeId, tempBuffer, 0, SIZE_OF_LONG, tempBuffer, SIZE_OF_LONG, expectedLabel.length()))

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveCounters.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.archive;
 
 import io.aeron.Aeron;
+import io.aeron.AeronCounters;
 import io.aeron.Counter;
 import org.agrona.AsciiEncoding;
 import org.agrona.MutableDirectBuffer;
@@ -58,11 +59,12 @@ public static Counter allocate(
         int index = 0;
         tempBuffer.putLong(index, archiveId);
         index += SIZE_OF_LONG;
+        final int keyLength = index;
 
         index += tempBuffer.putStringWithoutLengthAscii(index, name);
         index += appendArchiveIdLabel(tempBuffer, index, archiveId);
+        index += AeronCounters.appendVersionInfo(tempBuffer, index, ArchiveVersion.VERSION, ArchiveVersion.GIT_SHA);
 
-        final int keyLength = SIZE_OF_LONG;
         return aeron.addCounter(typeId, tempBuffer, 0, keyLength, tempBuffer, keyLength, index - keyLength);
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -665,7 +665,7 @@ public void conclude()
                 if (null == errorCounter)
                 {
                     errorCounter = ClusterCounters.allocate(
-                        aeron, buffer, "ClusterBackup errors", CLUSTER_BACKUP_ERROR_COUNT_TYPE_ID, clusterId);
+                        aeron, buffer, "ClusterBackup Errors", CLUSTER_BACKUP_ERROR_COUNT_TYPE_ID, clusterId);
                 }
             }
 

File: aeron-driver/src/main/java/io/aeron/driver/status/SystemCounterDescriptor.java
Patch:
@@ -103,7 +103,7 @@ public enum SystemCounterDescriptor
     /**
      * Count of errors observed by the driver and an indication to read the distinct error log.
      */
-    ERRORS(15, "Errors"),
+    ERRORS(15, "Errors - " + AeronCounters.formatVersionInfo(MediaDriverVersion.VERSION, MediaDriverVersion.GIT_SHA)),
 
     /**
      * Count of socket send operation which resulted in less than the packet length being sent.
@@ -198,7 +198,8 @@ public enum SystemCounterDescriptor
     /**
      * Count of the number of times the time threshold has been exceeded by the NameResolver.
      */
-    AERON_VERSION(34, "Aeron software: version=" + MediaDriverVersion.VERSION);
+    AERON_VERSION(34, "Aeron software: " +
+        AeronCounters.formatVersionInfo(MediaDriverVersion.VERSION, MediaDriverVersion.GIT_SHA));
 
     /**
      * All system counters have the same type id, i.e. system counters are the same type. Other types can exist.

File: buildSrc/src/main/java/io/aeron/build/DeduplicateTask.java
Patch:
@@ -63,6 +63,7 @@ public void setSource(final File source)
      * @throws IOException if an error occurs during the process.
      */
     @TaskAction
+    @SuppressWarnings("NestedTryDepth")
     public void process() throws IOException
     {
         final File newFile = generateUnusedFileName(source, "new");

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -805,7 +805,7 @@ public static boolean isDriverActive(
         final long nowMs = System.currentTimeMillis();
         final long timestampAgeMs = nowMs - timestampMs;
 
-        logger.accept("INFO: Aeron toDriver consumer heartbeat is (ms): " + timestampAgeMs);
+        logger.accept("INFO: Aeron toDriver consumer heartbeat age is (ms): " + timestampAgeMs);
 
         return timestampAgeMs <= driverTimeoutMs;
     }

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -29,7 +29,7 @@
 import io.aeron.security.AuthenticatorSupplier;
 import io.aeron.security.AuthorisationService;
 import io.aeron.security.AuthorisationServiceSupplier;
-import io.aeron.version.VersionType;
+import io.aeron.version.Versioned;
 import org.agrona.*;
 import org.agrona.concurrent.*;
 import org.agrona.concurrent.errors.DistinctErrorLog;
@@ -67,7 +67,7 @@
 /**
  * The Aeron Archive which allows for the recording and replay of local and remote {@link io.aeron.Publication}s .
  */
-@VersionType("io.aeron.archive.ArchiveVersion")
+@Versioned
 public final class Archive implements AutoCloseable
 {
     private final Context ctx;

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.exceptions.ConfigurationException;
 import io.aeron.exceptions.DriverTimeoutException;
 import io.aeron.logbuffer.FragmentHandler;
-import io.aeron.version.VersionType;
+import io.aeron.version.Versioned;
 import org.agrona.*;
 import org.agrona.concurrent.*;
 import org.agrona.concurrent.broadcast.BroadcastReceiver;
@@ -57,7 +57,7 @@
  * occurs then the process will face the wrath of {@link System#exit(int)}.
  * See {@link Aeron.Configuration#DEFAULT_ERROR_HANDLER}.
  */
-@VersionType("io.aeron.AeronVersion")
+@Versioned
 public class Aeron implements AutoCloseable
 {
     /**

File: aeron-cluster/src/main/java/io/aeron/cluster/service/Cluster.java
Patch:
@@ -24,7 +24,7 @@
 import io.aeron.cluster.codecs.CloseReason;
 import io.aeron.logbuffer.BufferClaim;
 import io.aeron.logbuffer.Header;
-import io.aeron.version.VersionType;
+import io.aeron.version.Versioned;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.IdleStrategy;
 import org.agrona.concurrent.status.AtomicCounter;
@@ -44,7 +44,7 @@
  * {@link ClusteredService#onSessionClose(ClientSession, long, CloseReason)},
  * and {@link ClusteredService#onNewLeadershipTermEvent(long, long, long, long, int, int, TimeUnit, int)}.
  */
-@VersionType("io.aeron.cluster.ClusterVersion")
+@Versioned
 public interface Cluster
 {
     /**

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -29,7 +29,7 @@
 import io.aeron.exceptions.ConcurrentConcludeException;
 import io.aeron.logbuffer.BufferClaim;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.version.VersionType;
+import io.aeron.version.Versioned;
 import org.agrona.*;
 import org.agrona.concurrent.*;
 import org.agrona.concurrent.broadcast.BroadcastTransmitter;
@@ -78,7 +78,7 @@
  *
  * @see Configuration
  */
-@VersionType("io.aeron.archive.DriverVersion")
+@Versioned
 public final class MediaDriver implements AutoCloseable
 {
     private boolean wasHighResTimerEnabled;

File: aeron-version/src/main/java/io/aeron/version/VersionProcessor.java
Patch:
@@ -70,8 +70,8 @@ public boolean process(final Set<? extends TypeElement> annotations, final Round
                     {
                         final int lastDot = versionType.value().lastIndexOf('.');
                         final String packageName = -1 != lastDot ? versionType.value().substring(0, lastDot) : null;
-                        final String className =
-                            -1 != lastDot ? versionType.value().substring(lastDot + 1) : versionType.value();
+                        final String className = -1 != lastDot ?
+                            versionType.value().substring(lastDot + 1) : versionType.value();
 
                         final String versionString = processingEnv.getOptions().get("io.aeron.version");
                         final VersionInformation info = new VersionInformation(versionString);
@@ -116,7 +116,7 @@ private static class VersionInformation
             final Matcher matcher = VERSION_PATTERN.matcher(versionString);
             if (!matcher.matches())
             {
-                throw new IllegalArgumentException("The version string: " + versionString + " is not valid");
+                throw new IllegalArgumentException("The version string: '" + versionString + "' is not valid");
             }
 
             major = Integer.parseInt(matcher.group(1));

File: buildSrc/src/main/java/io/aeron/build/GithubUtil.java
Patch:
@@ -67,9 +67,9 @@ private static String stripSuffix(final String s, final String suffix)
         return s;
     }
 
-    public static String currentGitHash() throws IOException, GitAPIException
+    public static String currentGitHash(final String projectDir) throws IOException, GitAPIException
     {
-        final Repository repository = new FileRepositoryBuilder().findGitDir().build();
+        final Repository repository = new FileRepositoryBuilder().findGitDir(new File(projectDir)).build();
         final Git git = new Git(repository);
         return git.log().setMaxCount(1).call().iterator().next().getName();
     }

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveEventDissector.java
Patch:
@@ -530,7 +530,7 @@ static void dissectControlSessionStateChange(
 
         final long controlSessionId = buffer.getLong(absoluteOffset, LITTLE_ENDIAN);
         absoluteOffset += SIZE_OF_LONG;
-        final long ignorePosition = buffer.getLong(absoluteOffset, LITTLE_ENDIAN);
+        // SKIP: final long ignorePosition = buffer.getLong(absoluteOffset, LITTLE_ENDIAN);
         absoluteOffset += SIZE_OF_LONG;
 
         builder.append(": controlSessionId=").append(controlSessionId);

File: aeron-driver/src/main/java/io/aeron/driver/SubscriberPosition.java
Patch:
@@ -61,7 +61,7 @@ public String toString()
     {
         return "SubscriberPosition{" +
             "subscriptionLink=" + subscriptionLink +
-            ", m_subscribable=" + subscribable +
+            ", subscribable=" + subscribable +
             ", position=" + position +
             '}';
     }

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveContextTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -269,6 +270,7 @@ void configurationMarkFileDirReturnsValueSet(final String markFileDir)
     }
 
     @Test
+    @Disabled
     void concludeShouldCreateMarkFileDirSetViaSystemProperty(final @TempDir File tempDir)
     {
         final File rootDir = new File(tempDir, "root");

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleContextTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -521,6 +522,7 @@ void clusterDirectoryNameShouldMatchClusterDirWhenClusterDirectoryNameSet() thro
     }
 
     @Test
+    @Disabled
     void concludeShouldCreateMarkFileDirSetViaSystemProperty(final @TempDir File tempDir)
     {
         final File rootDir = new File(tempDir, "root");

File: aeron-cluster/src/test/java/io/aeron/cluster/service/ClusteredServiceContainerContextTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -84,6 +85,7 @@ void throwsIllegalStateExceptionIfAnActiveMarkFileExists()
     }
 
     @Test
+    @Disabled
     void concludeShouldCreateMarkFileDirSetViaSystemProperty(final @TempDir File tempDir)
     {
         final File rootDir = new File(tempDir, "root");

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterBackupContextTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.agrona.concurrent.status.AtomicCounter;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -102,6 +103,7 @@ void clusterDirectoryNameShouldMatchClusterDirWhenClusterDirectoryNameSet() thro
     }
 
     @Test
+    @Disabled
     void concludeShouldCreateMarkFileDirSetViaSystemProperty(final @TempDir File tempDir)
     {
         final File rootDir = new File(tempDir, "root");

File: aeron-driver/src/main/java/io/aeron/driver/Subscribable.java
Patch:
@@ -23,9 +23,9 @@
 public interface Subscribable
 {
     /**
-     * Registration Id that is in use by the subscribable.
+     * Registration Id that is in use by the m_subscribable.
      *
-     * @return registration Id for subscribable.
+     * @return registration Id for m_subscribable.
      */
     long subscribableRegistrationId();
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -197,7 +197,7 @@ void shouldBeAbleToAccessClusterMarkFilesInANonDefaultLocation(final @TempDir Fi
         final String errorContent = stream.flushAndGetContent();
         assertThat(errorContent, containsString("This message will cause an error"));
         assertThat(errorContent, containsString("Mark file exists"));
-        final String path = markFileDir.getAbsolutePath().replace("\\", "\\\\");
+        final String path = markFileDir.getName();
         final Pattern serviceMarkFileName = Pattern.compile(
             ".*Mark file exists:.*" + path + ".*cluster-mark-service-0.dat.*", Pattern.DOTALL);
         assertThat("Tool output: " + errorContent, errorContent, matchesRegex(serviceMarkFileName));

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -197,8 +197,9 @@ void shouldBeAbleToAccessClusterMarkFilesInANonDefaultLocation(final @TempDir Fi
         final String errorContent = stream.flushAndGetContent();
         assertThat(errorContent, containsString("This message will cause an error"));
         assertThat(errorContent, containsString("Mark file exists"));
+        final String path = markFileDir.getAbsolutePath().replace("\\", "\\\\");
         final Pattern serviceMarkFileName = Pattern.compile(
-            ".*Mark file exists:.*" + markFileDir + ".*cluster-mark-service-0.dat.*", Pattern.DOTALL);
+            ".*Mark file exists:.*" + path + ".*cluster-mark-service-0.dat.*", Pattern.DOTALL);
         assertThat("Tool output: " + errorContent, errorContent, matchesRegex(serviceMarkFileName));
     }
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -186,16 +186,16 @@ void shouldBeAbleToAccessClusterMarkFilesInANonDefaultLocation(final @TempDir Fi
 
         final TestNode leader = cluster.awaitLeader();
         cluster.connectClient();
-        cluster.sendUnexpectedMessages(1);
-        cluster.sendAndAwaitMessages(5);
+        cluster.sendErrorGeneratingMessages(1);
+        cluster.awaitResponseMessageCount(1);
 
         final CapturingPrintStream stream = new CapturingPrintStream();
         ClusterTool.errors(
             stream.resetAndGetPrintStream(),
             cluster.node(leader.index()).consensusModule().context().clusterDir());
 
         final String errorContent = stream.flushAndGetContent();
-        assertThat(errorContent, containsString("unexpected message received"));
+        assertThat(errorContent, containsString("This message will cause an error"));
         assertThat(errorContent, containsString("Mark file exists"));
         final Pattern serviceMarkFileName = Pattern.compile(
             ".*Mark file exists:.*" + markFileDir + ".*cluster-mark-service-0.dat.*", Pattern.DOTALL);

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -42,6 +42,7 @@ public class ClusterTests
         "Echo as Service IPC ingress (skip follower)";
     public static final String UNEXPECTED_MSG =
         "Should never get this message because it is not going to be committed!";
+    public static final String ERROR_MSG = "This message will cause an error";
     public static final String LARGE_MSG;
     public static final String TERMINATE_MSG = "Please terminate the clustered service";
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -59,7 +59,7 @@
 import static org.hamcrest.Matchers.endsWith;
 import static org.junit.jupiter.api.Assertions.*;
 
-@ExtendWith({ EventLogExtension`.class, InterruptingTestCallback.class })
+@ExtendWith({ EventLogExtension.class, InterruptingTestCallback.class })
 class ReplicateRecordingTest
 {
     private static final int SRC_CONTROL_STREAM_ID = AeronArchive.Configuration.CONTROL_STREAM_ID_DEFAULT;

File: aeron-agent/src/test/java/io/aeron/agent/AgentTests.java
Patch:
@@ -63,7 +63,8 @@ static void verifyLogHeader(
         final int captureLength,
         final int length)
     {
-        assertEquals(HEADER_LENGTH + LOG_HEADER_LENGTH + captureLength,
+        assertEquals(
+            HEADER_LENGTH + LOG_HEADER_LENGTH + captureLength,
             logBuffer.getInt(lengthOffset(recordOffset), LITTLE_ENDIAN));
         assertEquals(eventCodeId, logBuffer.getInt(typeOffset(recordOffset), LITTLE_ENDIAN));
         assertEquals(captureLength, logBuffer.getInt(encodedMsgOffset(recordOffset), LITTLE_ENDIAN));

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -515,6 +515,7 @@ else if (!logSourceValidator.isAcceptable(leaderMemberId, memberId))
                     NULL_TIMESTAMP,
                     NULL_VALUE,
                     RecordingLog.ENTRY_TYPE_TERM,
+                    null,
                     true,
                     -1);
             }
@@ -531,6 +532,7 @@ else if (!logSourceValidator.isAcceptable(leaderMemberId, memberId))
                     NULL_TIMESTAMP,
                     NULL_VALUE,
                     RecordingLog.ENTRY_TYPE_TERM,
+                    null,
                     true,
                     -1);
             }

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleContextTest.java
Patch:
@@ -53,6 +53,7 @@
 import java.io.File;
 import java.util.concurrent.TimeUnit;
 
+import static io.aeron.AeronCounters.NODE_CONTROL_TOGGLE_TYPE_ID;
 import static io.aeron.cluster.ConsensusModule.Configuration.*;
 import static io.aeron.cluster.codecs.mark.ClusterComponentType.CONSENSUS_MODULE;
 import static io.aeron.cluster.service.ClusterMarkFile.ERROR_BUFFER_MIN_LENGTH;
@@ -98,6 +99,7 @@ void beforeEach()
             .clusterNodeRoleCounter(newCounter("clusterNodeRole", CLUSTER_NODE_ROLE_TYPE_ID))
             .commitPositionCounter(newCounter("commitPosition", COMMIT_POSITION_TYPE_ID))
             .controlToggleCounter(newCounter("controlToggle", CONTROL_TOGGLE_TYPE_ID))
+            .nodeControlToggleCounter(newCounter("nodeControlToggle", NODE_CONTROL_TOGGLE_TYPE_ID))
             .snapshotCounter(newCounter("snapshot", SNAPSHOT_COUNTER_TYPE_ID))
             .timedOutClientCounter(newCounter("timedOut", CLUSTER_CLIENT_TIMEOUT_COUNT_TYPE_ID));
     }
@@ -198,7 +200,7 @@ void rejectInvalidLogChannelParameters()
     @Test
     void defaultAuthorisationServiceSupplierReturnsADenyAllAuthorisationService()
     {
-        assertSame(AuthorisationService.DENY_ALL, DEFAULT_AUTHORISATION_SERVICE_SUPPLIER.get());
+        assertSame(ALLOW_ONLY_BACKUP_QUERIES, DEFAULT_AUTHORISATION_SERVICE_SUPPLIER.get());
     }
 
     @Test

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -249,6 +249,7 @@ void sortRecordingLogShouldRearrangeDataOnDisc(final @TempDir Path emptyClusterD
                     entry.timestamp,
                     entry.serviceId,
                     entry.type,
+                    null,
                     entry.isValid,
                     i));
             }
@@ -353,6 +354,7 @@ private void testSeedRecordingLogFromSnapshot(final Path emptyClusterDir, final
                     entry.timestamp,
                     entry.serviceId,
                     entry.type,
+                    null,
                     entry.isValid,
                     i - 2));
             }

File: aeron-test-support/src/main/java/io/aeron/test/SystemTestWatcher.java
Patch:
@@ -212,8 +212,8 @@ else if (0 != count.get())
                 }
 
                 System.out.println(
-                    "*** " + testName + " failed in " +
-                    NANOSECONDS.toMillis(endTimeNs - startTimeNs) + " ms, cause: " + error);
+                    "*** " + testName + " failed in endTimeNs(" + endTimeNs + ") - startTimeNs(" + startTimeNs + ") " +
+                    " = " + NANOSECONDS.toMillis(endTimeNs - startTimeNs) + " ms, cause: " + error);
                 final Throwable terminateError = reportAndTerminate(directoryName);
                 error = setOrUpdateError(error, terminateError);
                 try

File: aeron-cluster/src/main/java/io/aeron/cluster/MultipleRecordingReplication.java
Patch:
@@ -166,7 +166,8 @@ private void replicateCurrentSnapshot(final long nowNs)
             srcControlChannel,
             srcControlStreamId,
             replicationChannel,
-            Aeron.NULL_VALUE, progressTimeoutNs,
+            (int)archive.context().aeron().nextCorrelationId(),
+            progressTimeoutNs,
             progressIntervalNs,
             nowNs);
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -3117,6 +3117,7 @@ RecordingReplication newLogReplication(
             ChannelUri.createDestinationUri(ctx.leaderArchiveControlChannel(), leaderArchiveEndpoint),
             archive.context().controlRequestStreamId(),
             ctx.replicationChannel(),
+            (int)aeron.nextCorrelationId(),
             ctx.leaderHeartbeatTimeoutNs(),
             ctx.leaderHeartbeatIntervalNs(),
             nowNs);

File: aeron-cluster/src/main/java/io/aeron/cluster/DynamicJoin.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.cluster;
 
+import io.aeron.Aeron;
 import io.aeron.ChannelUri;
 import io.aeron.Counter;
 import io.aeron.ExclusivePublication;
@@ -291,7 +292,7 @@ private int snapshotRetrieve(final long nowNs)
                 leaderArchiveControlRequestChannel(),
                 ctx.archiveContext().controlRequestStreamId(),
                 ctx.replicationChannel(),
-                ctx.leaderHeartbeatTimeoutNs(),
+                Aeron.NULL_VALUE, ctx.leaderHeartbeatTimeoutNs(),
                 ctx.leaderHeartbeatIntervalNs(),
                 nowNs);
 
@@ -326,7 +327,7 @@ private int snapshotRetrieve(final long nowNs)
                         leaderArchiveControlRequestChannel(),
                         ctx.archiveContext().controlRequestStreamId(),
                         ctx.replicationChannel(),
-                        ctx.leaderHeartbeatTimeoutNs(),
+                        Aeron.NULL_VALUE, ctx.leaderHeartbeatTimeoutNs(),
                         ctx.leaderHeartbeatIntervalNs(),
                         nowNs);
 

File: aeron-cluster/src/main/java/io/aeron/cluster/MultipleRecordingReplication.java
Patch:
@@ -166,7 +166,7 @@ private void replicateCurrentSnapshot(final long nowNs)
             srcControlChannel,
             srcControlStreamId,
             replicationChannel,
-            progressTimeoutNs,
+            Aeron.NULL_VALUE, progressTimeoutNs,
             progressIntervalNs,
             nowNs);
     }

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -1200,16 +1200,16 @@ void shouldRecoverWhenFollowerIsMultipleTermsBehind()
     }
 
     @Test
-    @InterruptAfter(40)
+    @InterruptAfter(60)
     void shouldRecoverWhenFollowerIsMultipleTermsBehindFromEmptyLog()
     {
-        cluster = aCluster().withStaticNodes(3).start();
+        cluster = aCluster().withStaticNodes(4).start();
 
         systemTestWatcher.cluster(cluster);
 
         final TestNode originalLeader = cluster.awaitLeader();
 
-        final int messageCount = 10;
+        final int messageCount = 100_000;
         cluster.connectClient();
         cluster.sendMessages(messageCount);
         cluster.awaitResponseMessageCount(messageCount);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -3391,7 +3391,7 @@ private void snapshotState(
 
         for (final PendingServiceMessageTracker tracker : pendingServiceMessageTrackers)
         {
-            snapshotTaker.snapshot(tracker);
+            snapshotTaker.snapshot(tracker, ctx.errorHandler());
         }
 
         snapshotTaker.markEnd(SNAPSHOT_TYPE_ID, logPosition, leadershipTermId, 0, clusterTimeUnit, ctx.appVersion());

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -39,6 +39,8 @@ public class ClusterTests
     public static final String NO_OP_MSG = "No op!           ";
     public static final String REGISTER_TIMER_MSG = "Register a timer!";
     public static final String ECHO_SERVICE_IPC_INGRESS_MSG = "Echo as Service IPC ingress";
+    public static final String ECHO_SERVICE_IPC_INGRESS_MSG_SKIP_FOLLOWER =
+        "Echo as Service IPC ingress (skip follower)";
     public static final String UNEXPECTED_MSG =
         "Should never get this message because it is not going to be committed!";
     public static final String LARGE_MSG;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/Cluster.java
Patch:
@@ -282,7 +282,7 @@ public static Role get(final AtomicCounter counter)
      *     {
      *         break;
      *     }
-     *     else if (Publication.ADMIN_ACTION != position || Publication.BACK_PRESSURED != position)
+     *     else if (Publication.ADMIN_ACTION != position && Publication.BACK_PRESSURED != position)
      *     {
      *         throw new ClusterException("Internal offer failed: " + position);
      *     }

File: aeron-test-support/src/main/java/io/aeron/test/Tests.java
Patch:
@@ -87,7 +87,7 @@ public static void setField(final Object instance, final String fieldName, final
 
     /**
      * Error handler that can be used as an implementation of {@link org.agrona.ErrorHandler} which will print out
-     * a stacktrace unless the exception is to type {@link AeronException.Category#WARN}.
+     * a stacktrace unless the exception is to type {@link io.aeron.exceptions.AeronException.Category#WARN}.
      *
      * @param ex to be handled.
      */

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -1332,8 +1332,8 @@ else if (segmentFileLength < TERM_MIN_LENGTH || segmentFileLength > TERM_MAX_LEN
                     {
                         throw new ConfigurationException(
                             "Unable to derive Archive.Context.archiveClientContext.controlResponseChannel as " +
-                                "Archive.Context.controlChannel.endpoint=" + endpoint +
-                                " and is not in the <host>:<port> format");
+                            "Archive.Context.controlChannel.endpoint=" + endpoint +
+                            " and is not in the <host>:<port> format");
                     }
 
                     final String responseEndpoint = endpoint.substring(0, separatorIndex) + ":0";

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveTool.java
Patch:
@@ -613,7 +613,7 @@ public static boolean verifyRecording(
     }
 
     /**
-     * Compute and persist CRC-32 checksums for every fragment of a segment file for all recordings in the catalog.
+     * Compute and persist CRC-32(c) checksums for every fragment of a segment file for all recordings in the catalog.
      *
      * @param out               stream to print results and errors to.
      * @param archiveDir        that contains {@link org.agrona.MarkFile}, {@link Catalog}, and recordings.
@@ -627,7 +627,7 @@ public static void checksum(
     }
 
     /**
-     * Compute and persist CRC-32 checksums for every fragment of a segment file(s) for a given recording.
+     * Compute and persist CRC-32(c) checksums for every fragment of a segment file(s) for a given recording.
      *
      * @param out               stream to print results and errors to.
      * @param archiveDir        that contains {@link org.agrona.MarkFile}, {@link Catalog}, and recordings.

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplayParams.java
Patch:
@@ -31,6 +31,7 @@ public class ReplayParams
     /**
      * Default, initialise all values to "null"
      */
+    @SuppressWarnings("this-escape")
     public ReplayParams()
     {
         reset();

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplicationParams.java
Patch:
@@ -35,6 +35,7 @@ public class ReplicationParams
     /**
      * Initialise all parameters to defaults.
      */
+    @SuppressWarnings("this-escape")
     public ReplicationParams()
     {
         reset();

File: aeron-driver/src/main/java/io/aeron/driver/ext/CubicCongestionControl.java
Patch:
@@ -100,6 +100,7 @@ public class CubicCongestionControl implements CongestionControl
      * @param context         for configuration options applied in the driver.
      * @param countersManager for the driver.
      */
+    @SuppressWarnings("this-escape")
     public CubicCongestionControl(
         final long registrationId,
         final UdpChannel udpChannel,

File: aeron-test-support/src/main/java/io/aeron/test/DisableJavaUtilLogging.java
Patch:
@@ -23,6 +23,7 @@
  */
 public class DisableJavaUtilLogging extends LogManager
 {
+    @SuppressWarnings("this-escape")
     public DisableJavaUtilLogging()
     {
         reset(); // Close all logging handlers

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestNode.java
Patch:
@@ -681,6 +681,7 @@ public static void delaySessionMessageProcessing(final boolean shouldDelay)
             delaySessionMessageProcessing = shouldDelay;
         }
 
+        @SuppressWarnings("this-escape")
         public MessageTrackingService(final int serviceId, final int index)
         {
             this.serviceId = serviceId;

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -1731,7 +1731,7 @@ public void conclude()
             {
                 nameResolver = DefaultNameResolver.INSTANCE;
             }
-            nameResolver.init(aeron::addCounter);
+            nameResolver.init(aeron.countersReader(), aeron::addCounter);
 
             final ChannelUri channelUri = ChannelUri.parse(logChannel());
             isLogMdc = channelUri.isUdp() && null == channelUri.get(ENDPOINT_PARAM_NAME);

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -3747,7 +3747,7 @@ private void concludeDependantProperties()
                     nameResolverThresholdNs);
             }
 
-            nameResolver.init(countersManager::newCounter);
+            nameResolver.init(countersManager, countersManager::newCounter);
         }
 
         private void concludeCounters()

File: aeron-driver/src/main/java/io/aeron/driver/TimeTrackingNameResolver.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.CounterProvider;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.NanoClock;
+import org.agrona.concurrent.status.CountersReader;
 
 import java.net.InetAddress;
 
@@ -84,9 +85,9 @@ public String lookup(final String name, final String uriParamName, final boolean
     /**
      * {@inheritDoc}
      */
-    public void init(final CounterProvider counterProvider)
+    public void init(final CountersReader countersReader, final CounterProvider counterProvider)
     {
-        delegateResolver.init(counterProvider);
+        delegateResolver.init(countersReader, counterProvider);
     }
 
     /**

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveContextTest.java
Patch:
@@ -67,6 +67,9 @@ class ArchiveContextTest
     void beforeEach(final @TempDir Path tempDir)
     {
         final Aeron aeron = mock(Aeron.class);
+        when(aeron.addCounter(
+            anyInt(), any(DirectBuffer.class), anyInt(), anyInt(), any(DirectBuffer.class), anyInt(), anyInt()))
+            .thenAnswer(invocation -> mock(Counter.class));
         final CountersReader countersReader = mock(CountersReader.class);
         final Aeron.Context aeronContext = new Aeron.Context();
         aeronContext.subscriberErrorHandler(RethrowingErrorHandler.INSTANCE);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -1731,6 +1731,7 @@ public void conclude()
             {
                 nameResolver = DefaultNameResolver.INSTANCE;
             }
+            nameResolver.init(aeron::addCounter);
 
             final ChannelUri channelUri = ChannelUri.parse(logChannel());
             isLogMdc = channelUri.isUdp() && null == channelUri.get(ENDPOINT_PARAM_NAME);

File: aeron-driver/src/main/java/io/aeron/driver/DriverNameResolver.java
Patch:
@@ -119,7 +119,8 @@ final class DriverNameResolver implements AutoCloseable, UdpNameResolutionTransp
 
         cache = new DriverNameResolverCache(TIMEOUT_MS);
 
-        final UdpChannel placeholderChannel = UdpChannel.parse("aeron:udp?endpoint=localhost:8050");
+        final UdpChannel placeholderChannel =
+            UdpChannel.parse("aeron:udp?endpoint=localhost:8050", delegateResolver);
         transport = new UdpNameResolutionTransport(placeholderChannel, localSocketAddress, unsafeBuffer, ctx);
 
         neighborsCounter = ctx.countersManager().newCounter(
@@ -206,8 +207,6 @@ public InetAddress resolve(final String name, final String uriParamName, final b
         {
         }
 
-        DefaultNameResolver.INSTANCE.resolveHook(this.getClass().getSimpleName(), name, resolvedAddress);
-
         return resolvedAddress;
     }
 

File: aeron-driver/src/test/java/io/aeron/driver/IpcPublicationTest.java
Patch:
@@ -80,7 +80,8 @@ void setUp()
             .nameResolver(DefaultNameResolver.INSTANCE)
             .nanoClock(new CachedNanoClock())
             .threadingMode(ThreadingMode.DEDICATED)
-            .conductorDutyCycleTracker(new DutyCycleTracker());
+            .conductorDutyCycleTracker(new DutyCycleTracker())
+            .nameResolverTimeTracker(new DutyCycleTracker());
 
         driverProxy = new DriverProxy(toDriverCommands, CLIENT_ID);
         driverConductor = new DriverConductor(ctx);

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -2229,7 +2229,8 @@ private void checkDeadline(final long deadlineNs, final String errorMessage, fin
     {
         if (deadlineNs - nanoClock.nanoTime() < 0)
         {
-            throw new TimeoutException(errorMessage + " - correlationId=" + correlationId);
+            throw new TimeoutException(
+                errorMessage + " - correlationId=" + correlationId + " messageTimeout=" + messageTimeoutNs + "ns");
         }
 
         if (Thread.currentThread().isInterrupted())

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -1806,6 +1806,7 @@ private void checkDeadline()
                     null != egressSubscription ? egressSubscription.tryResolveChannelEndpointPort() : "<unknown>";
                 final TimeoutException ex = new TimeoutException(
                     "cluster connect timeout: step=" + step +
+                    " messageTimeout=" + ctx.messageTimeoutNs() + "ns" +
                     " ingressChannel=" + ctx.ingressChannel() +
                     " ingressEndpoints=" + ctx.ingressEndpoints() +
                     " ingressPublication=" + ingressPublication +
@@ -1839,7 +1840,7 @@ private void createSubscription()
             egressSubscription = ctx.aeron().getSubscription(egressRegistrationId);
             if (null != egressSubscription)
             {
-                this.egressPoller = new EgressPoller(egressSubscription, FRAGMENT_LIMIT);
+                egressPoller = new EgressPoller(egressSubscription, FRAGMENT_LIMIT);
                 step(0);
             }
         }

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -187,7 +187,7 @@ public CountersReader counters()
         {
             aeronContext = new Aeron.Context()
                 .aeronDirectoryName(context.aeronDirectoryName())
-                .keepAliveIntervalNs(1_000_000_000)
+                .keepAliveIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
                 .conclude();
             countersReader = new CountersReader(
                 aeronContext.countersMetaDataBuffer(), aeronContext.countersValuesBuffer());

File: aeron-system-tests/src/test/java/io/aeron/test/driver/TestMediaDriverTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.File;
-import java.util.Objects;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingReplication.java
Patch:
@@ -243,7 +243,6 @@ public String toString()
             ", position=" + position +
             ", progressDeadlineNs=" + progressDeadlineNs +
             ", progressCheckDeadlineNs=" + progressCheckDeadlineNs +
-            ", archive=" + archive +
             ", lastRecordingSignal=" + lastRecordingSignal +
             ", hasReplicationEnded=" + hasReplicationEnded +
             ", hasSynced=" + hasSynced +

File: aeron-client/src/test/java/io/aeron/ConcurrentPublicationTermRotationRaceTest.java
Patch:
@@ -49,7 +49,7 @@ class ConcurrentPublicationTermRotationRaceTest
     private TestMediaDriver mediaDriver;
     private Aeron aeron;
     @RegisterExtension
-    private final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
+    final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
 
     @BeforeEach
     void setup()

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTruncateRecordingTest.java
Patch:
@@ -76,7 +76,7 @@
 class ArchiveTruncateRecordingTest
 {
     @RegisterExtension
-    private final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
+    final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
     private final FragmentAssembler fragmentHandler = new FragmentAssembler((buffer, offset, length, header) -> {});
     private TestMediaDriver driver;
     private Archive archive;

File: aeron-system-tests/src/test/java/io/aeron/driver/DriverSpaceTest.java
Patch:
@@ -41,7 +41,7 @@
 public class DriverSpaceTest
 {
     @RegisterExtension
-    private final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
+    final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
     private Path aeronDir;
     private Path publicationsDir;
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1153,9 +1153,9 @@ void onRemoveRcvNetworkDestination(
         clientProxy.operationSucceeded(correlationId);
     }
 
-    void closeReceiveDestination(final ReceiveDestinationTransport destinationTransport)
+    void closeReceiveDestinationIndicators(final ReceiveDestinationTransport destinationTransport)
     {
-        CloseHelper.close(destinationTransport);
+        destinationTransport.closeIndicators();
     }
 
     void onTerminateDriver(final DirectBuffer tokenBuffer, final int tokenOffset, final int tokenLength)

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -227,8 +227,9 @@ void onCloseReceiveChannelEndpoint(final ReceiveChannelEndpoint channelEndpoint)
             }
         }
 
-        channelEndpoint.closeMultiRcvDestination(dataTransportPoller);
+        channelEndpoint.closeMultiRcvDestinationTransports(dataTransportPoller);
         channelEndpoint.close();
+        channelEndpoint.closeMultiRcvDestinationIndicators(conductorProxy);
     }
 
     void onRemoveCoolDown(final ReceiveChannelEndpoint channelEndpoint, final int sessionId, final int streamId)
@@ -279,7 +280,7 @@ void onRemoveDestination(final ReceiveChannelEndpoint channelEndpoint, final Udp
                 }
             }
 
-            conductorProxy.closeReceiveDestination(transport);
+            conductorProxy.closeReceiveDestinationIndicators(transport);
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/media/DataTransportPoller.java
Patch:
@@ -71,7 +71,7 @@ public void close()
         for (final ChannelAndTransport transport : channelAndTransports)
         {
             final ReceiveChannelEndpoint receiveChannelEndpoint = transport.channelEndpoint;
-            receiveChannelEndpoint.closeMultiRcvDestination(this);
+            receiveChannelEndpoint.closeMultiRcvDestinationTransports(this);
             CloseHelper.close(errorHandler, receiveChannelEndpoint);
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/CreateReplayPublicationSession.java
Patch:
@@ -111,7 +111,7 @@ public int doWork()
             }
             catch (final Exception ex)
             {
-                isDone = false;
+                isDone = true;
                 final String msg = "failed to create replay publication: " + ex.getMessage();
                 controlSession.sendErrorResponse(correlationId, msg, controlResponseProxy);
                 throw ex;

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -136,8 +136,8 @@ public int doWork()
 
         if (State.INACTIVE == state)
         {
-            recordingWriter.close();
             state(State.STOPPED);
+            recordingWriter.close();
             workCount++;
 
             if (null != recordingEventsProxy)

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -172,7 +172,6 @@ enum State
         replayLimit = fromPosition + replayLength;
 
         segmentFile = new File(archiveDir, segmentFileName(recordingId, segmentFileBasePosition));
-
         connectDeadlineMs = epochClock.time() + connectTimeoutMs;
     }
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ServiceIpcIngressMessageTest.java
Patch:
@@ -244,6 +244,7 @@ void shouldProcessServiceMessagesWithoutDuplicatesWhenClusterIsRestartedAfterTak
             msgBuffer.putInt(0, ++messageCount, LITTLE_ENDIAN);
             cluster.pollUntilMessageSent(SIZE_OF_INT);
         }
+
         cluster.takeSnapshot(leader);
         cluster.awaitSnapshotCount(1);
         TestNode.MessageTrackingService.delaySessionMessageProcessing(false);

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestCluster.java
Patch:
@@ -1141,7 +1141,6 @@ public TestNode awaitLeaderAndClosedElection()
         return awaitLeaderAndClosedElection(NULL_VALUE);
     }
 
-
     public List<TestNode> followers()
     {
         return followers(0);

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestNode.java
Patch:
@@ -175,7 +175,7 @@ public TestService service()
     {
         if (1 != services.length)
         {
-            throw new IllegalStateException("111 service count expected=1 actual=" + services.length);
+            throw new IllegalStateException("service count expected=1 actual=" + services.length);
         }
 
         return services[0];

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -173,7 +173,6 @@ enum State
 
         segmentFile = new File(archiveDir, segmentFileName(recordingId, segmentFileBasePosition));
 
-        controlSession.sendOkResponse(correlationId, replaySessionId, controlResponseProxy);
         connectDeadlineMs = epochClock.time() + connectTimeoutMs;
     }
 
@@ -328,6 +327,8 @@ private int init() throws IOException
                         return 0;
                     }
                 }
+
+                controlSession.asyncSendReplayOkResponse(correlationId, sessionId);
             }
         }
 

File: aeron-agent/src/test/java/io/aeron/agent/DriverEventLoggerTest.java
Patch:
@@ -33,6 +33,7 @@
 import static io.aeron.agent.DriverEventLogger.toEventCodeId;
 import static io.aeron.agent.EventConfiguration.MAX_EVENT_LENGTH;
 import static java.nio.ByteBuffer.allocate;
+import static java.nio.ByteBuffer.allocateDirect;
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static java.util.Arrays.fill;
 import static org.agrona.BitUtil.*;
@@ -44,7 +45,7 @@
 class DriverEventLoggerTest
 {
     private static final int CAPACITY = 32 * 1024;
-    private final UnsafeBuffer logBuffer = new UnsafeBuffer(allocate(CAPACITY + TRAILER_LENGTH));
+    private final UnsafeBuffer logBuffer = new UnsafeBuffer(allocateDirect(CAPACITY + TRAILER_LENGTH));
     private final DriverEventLogger logger = new DriverEventLogger(new ManyToOneRingBuffer(logBuffer));
     private final UnsafeBuffer buffer = new UnsafeBuffer(allocate(MAX_EVENT_LENGTH * 3));
 

File: aeron-client/src/test/java/io/aeron/CommonContextTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.nio.file.Path;
 
 import static io.aeron.CommonContext.FALLBACK_LOGGER_PROP_NAME;
+import static java.nio.ByteBuffer.allocateDirect;
 import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.AdditionalMatchers.and;
 import static org.mockito.Mockito.*;
@@ -126,7 +127,7 @@ void saveExistingErrorsCreatesErrorFileInTheSameDirectoryAsTheCorrespondingMarkF
     {
         final File markFile = tempDir.resolve("mark.dat").toFile();
         final DistinctErrorLog errorLog =
-            new DistinctErrorLog(new UnsafeBuffer(new byte[10 * 1024]), SystemEpochClock.INSTANCE);
+            new DistinctErrorLog(new UnsafeBuffer(allocateDirect(10 * 1024)), SystemEpochClock.INSTANCE);
         assertTrue(errorLog.record(new Exception("Just to test")));
         final PrintStream logger = mock(PrintStream.class);
         final String errorFilePrefix = "my-file-";

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleContextTest.java
Patch:
@@ -32,10 +32,10 @@
 import io.aeron.security.DefaultAuthenticatorSupplier;
 import io.aeron.security.SessionProxy;
 import io.aeron.test.TestContexts;
+import io.aeron.test.Tests;
 import io.aeron.test.cluster.TestClusterClock;
 import org.agrona.SystemUtil;
 import org.agrona.concurrent.AgentInvoker;
-import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.agrona.concurrent.status.CountersManager;
 import org.junit.jupiter.api.AfterEach;
@@ -63,8 +63,7 @@ class ConsensusModuleContextTest
     File clusterDir;
 
     private ConsensusModule.Context context;
-    private final CountersManager countersManager = new CountersManager(
-        new UnsafeBuffer(new byte[64 * 1024]), new UnsafeBuffer(new byte[16 * 1024]));
+    private final CountersManager countersManager = Tests.newCountersMananger(16 * 1024);
     private long registrationId = 0;
 
     @BeforeEach

File: aeron-cluster/src/test/java/io/aeron/cluster/service/ClusteredServiceAgentTest.java
Patch:
@@ -24,6 +24,7 @@
 import io.aeron.driver.DutyCycleTracker;
 import io.aeron.logbuffer.BufferClaim;
 import io.aeron.test.CountersAnswer;
+import io.aeron.test.Tests;
 import org.agrona.DirectBuffer;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.*;
@@ -85,8 +86,7 @@ void shouldAbortClusteredServiceIfCommitPositionCounterIsClosed()
         final ArgumentCaptor<UnavailableCounterHandler> captor =
             ArgumentCaptor.forClass(UnavailableCounterHandler.class);
         final ClusterMarkFile markFile = mock(ClusterMarkFile.class);
-        final CountersManager countersManager = new CountersManager(
-            new UnsafeBuffer(new byte[64 * 1024]), new UnsafeBuffer(new byte[16 * 1024]));
+        final CountersManager countersManager = Tests.newCountersMananger(64 * 1024);
 
         when(aeron.addCounter(anyInt(), any(), anyInt(), anyInt(), any(), anyInt(), anyInt()))
             .then(CountersAnswer.mapTo(countersManager));

File: aeron-driver/src/test/java/io/aeron/driver/buffer/TestLogFactory.java
Patch:
@@ -95,6 +95,6 @@ public void close()
 
     private static UnsafeBuffer newLogBuffer(final int termBufferLength)
     {
-        return new UnsafeBuffer(ByteBuffer.allocate(termBufferLength));
+        return new UnsafeBuffer(ByteBuffer.allocateDirect(termBufferLength));
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -1685,7 +1685,7 @@ public SourceType sourceType()
          */
         public Context replicationProgressTimeoutNs(final long timeoutNs)
         {
-            this.replicationProgressIntervalNs = timeoutNs;
+            this.replicationProgressTimeoutNs = timeoutNs;
             return this;
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -319,7 +319,7 @@ private static int alignedTotalFileLength(final Archive.Context ctx)
         final int headerLength =
             MarkFileHeaderEncoder.BLOCK_LENGTH +
             (4 * VarAsciiEncodingEncoder.lengthEncodingLength()) +
-            ctx.controlChannel().length() +
+            (null != ctx.controlChannel() ? ctx.controlChannel().length() : 0) +
             ctx.localControlChannel().length() +
             (null != ctx.recordingEventsChannel() ? ctx.recordingEventsChannel().length() : 0) +
             ctx.aeronDirectoryName().length();

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -3753,7 +3753,7 @@ boolean isLogMdc()
         }
 
         /**
-         * Start up the consensus module using presupplied state skipping the recovery process.  Internal use only.
+         * Start up the consensus module using pre-supplied state skipping the recovery process. Internal use only.
          *
          * @param bootstrapState to initialize the consensus module.
          * @return this for a fluent API.
@@ -3912,7 +3912,7 @@ public String toString()
                 "\n    logPublisher=" + logPublisher +
                 "\n    isLogMdc=" + isLogMdc +
                 "\n    cycleThresholdNs=" + cycleThresholdNs +
-                "\n    dutyCyleTracker=" + dutyCycleTracker +
+                "\n    dutyCycleTracker=" + dutyCycleTracker +
                 "\n}";
         }
     }

File: aeron-test-support/src/main/java/io/aeron/test/SystemTestWatcher.java
Patch:
@@ -113,9 +113,9 @@ public void outputFiles(final String aeronDirectoryName, final File stdoutFile,
         dataCollector.add(stderrFile);
     }
 
-    public void exitCode(final String aeronDirectoryName, final int exitValue)
+    public void exitCode(final String aeronDirectoryName, final int exitValue, final String exitMessage)
     {
-        mediaDriverTestUtil.exitCode(aeronDirectoryName, exitValue);
+        mediaDriverTestUtil.exitCode(aeronDirectoryName, exitValue, exitMessage);
     }
 
     public void environmentVariables(final String aeronDirectoryName, final Map<String, String> environment)

File: aeron-test-support/src/main/java/io/aeron/test/driver/DriverOutputConsumer.java
Patch:
@@ -24,7 +24,7 @@ default void outputFiles(String aeronDirectoryName, File stdoutFile, File stderr
     {
     }
 
-    default void exitCode(String aeronDirectoryName, int exitValue)
+    default void exitCode(String aeronDirectoryName, int exitValue, String exitMessage)
     {
     }
 

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -210,7 +210,7 @@ public static CTestMediaDriver launch(
         environment.put("AERON_FLOW_CONTROL_GROUP_TAG", String.valueOf(context.flowControlGroupTag()));
         environment.put(
             "AERON_FLOW_CONTROL_GROUP_MIN_SIZE", String.valueOf(context.flowControlGroupMinSize()));
-        environment.put("AERON_PRINT_CONFIGURATION", Boolean.toString(context.printConfigurationOnStart()));
+        environment.put("AERON_PRINT_CONFIGURATION", "true");
 
         if (null != context.resolverName())
         {

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMigration_0_1.java
Patch:
@@ -59,7 +59,7 @@ public void migrate(
         final File archiveDir)
     {
         try (FileChannel ignore = MigrationUtils.createMigrationTimestampFile(
-            archiveDir, markFile.decoder().version(), minimumVersion()))
+            archiveDir, catalog.version(), minimumVersion()))
         {
             catalog.forEach(
                 (recordingDescriptorOffset, headerEncoder, headerDecoder, encoder, decoder) ->

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -223,7 +223,7 @@ public ChannelUriStringBuilder validate()
     }
 
     /**
-     * Set the prefix for taking an addition action such as spying on an outgoing publication with "aeron-spy".
+     * Set the prefix for taking an additional action such as spying on an outgoing publication with "aeron-spy".
      *
      * @param prefix to be applied to the URI before the scheme.
      * @return this for a fluent API.

File: aeron-agent/src/test/java/io/aeron/agent/ClusterLoggingAgentTest.java
Patch:
@@ -227,6 +227,9 @@ public void onMessage(final int msgTypeId, final MutableDirectBuffer buffer, fin
                     }
                     break;
                 }
+
+                default:
+                    break;
             }
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterClock.java
Patch:
@@ -93,9 +93,10 @@ static ClusterTimeUnit map(final TimeUnit timeUnit)
 
             case NANOSECONDS:
                 return ClusterTimeUnit.NANOS;
-        }
 
-        throw new IllegalArgumentException("unsupported time unit: " + timeUnit);
+            default:
+                throw new IllegalArgumentException("unsupported time unit: " + timeUnit);
+        }
     }
 
     /**

File: aeron-system-tests/src/test/java/io/aeron/MaxFlowControlStrategySystemTest.java
Patch:
@@ -29,7 +29,6 @@
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
-import org.agrona.IoUtil;
 import org.agrona.SystemUtil;
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -77,7 +76,6 @@ class MaxFlowControlStrategySystemTest
     void after()
     {
         CloseHelper.quietCloseAll(clientB, clientA, driverB, driverA);
-        IoUtil.delete(new File(ROOT_DIR), true);
     }
 
     @Test

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -118,10 +118,10 @@ void before(@TempDir final File tempDir)
             .threadingMode(THREADING_MODE);
 
         driverA = TestMediaDriver.launch(driverAContext, testWatcher);
-        driverB = TestMediaDriver.launch(driverBContext, testWatcher);
-
         testWatcher.dataCollector().add(driverA.context().aeronDirectory());
+        driverB = TestMediaDriver.launch(driverBContext, testWatcher);
         testWatcher.dataCollector().add(driverB.context().aeronDirectory());
+
         testWatcher.ignoreErrorsMatching((s) -> true);
 
         clientA = Aeron.connect(

File: aeron-system-tests/src/test/java/io/aeron/ErrorHandlerTest.java
Patch:
@@ -60,9 +60,10 @@ class ErrorHandlerTest
     private void launch()
     {
         driver = TestMediaDriver.launch(context, watcher);
-        aeron = Aeron.connect();
         watcher.dataCollector().add(driver.context().aeronDirectory());
         watcher.ignoreErrorsMatching(s -> true);
+
+        aeron = Aeron.connect();
     }
 
     @AfterEach

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -105,12 +105,11 @@ private void launch(final ErrorHandler errorHandler)
             .threadingMode(ThreadingMode.SHARED);
 
         driverA = TestMediaDriver.launch(driverAContext, testWatcher);
+        testWatcher.dataCollector().add(driverA.context().aeronDirectory());
         driverB = TestMediaDriver.launch(driverBContext, testWatcher);
+        testWatcher.dataCollector().add(driverB.context().aeronDirectory());
         clientA = Aeron.connect(new Aeron.Context().aeronDirectoryName(driverAContext.aeronDirectoryName()));
         clientB = Aeron.connect(new Aeron.Context().aeronDirectoryName(driverBContext.aeronDirectoryName()));
-
-        testWatcher.dataCollector().add(driverA.context().aeronDirectory());
-        testWatcher.dataCollector().add(driverB.context().aeronDirectory());
     }
 
     @AfterEach

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -394,7 +394,7 @@ private static void setFlowControlStrategy(final Map<String, String> environment
         else if (null != multicastFlowControlSupplier)
         {
             throw new RuntimeException("No equivalent C multicast flow control strategy for: " +
-                multicastFlowControlSupplier.getClass().getName());
+                multicastFlowControlSupplier.getClass());
         }
 
         final FlowControlSupplier unicastFlowControlSupplier = context.unicastFlowControlSupplier();
@@ -406,7 +406,7 @@ else if (null != multicastFlowControlSupplier)
         else if (null != unicastFlowControlSupplier)
         {
             throw new RuntimeException("No equivalent C unicast flow control strategy for: " +
-                multicastFlowControlSupplier.getClass().getName());
+                unicastFlowControlSupplier.getClass());
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -191,6 +191,9 @@ public int doWork()
             case INACTIVE:
                 state(State.DONE);
                 break;
+
+            case DONE:
+                break;
         }
 
         return workCount;

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -230,6 +230,9 @@ public int doWork()
                 case ATTEMPT_LIVE_JOIN:
                     workCount += attemptLiveJoin();
                     break;
+
+                case DONE:
+                    break;
             }
         }
         catch (final Exception ex)

File: aeron-client/src/main/java/io/aeron/logbuffer/LogBufferUnblocker.java
Patch:
@@ -59,6 +59,9 @@ public static boolean unblock(
 
         switch (TermUnblocker.unblock(logMetaDataBuffer, termBuffer, blockedOffset, tailOffset, termId))
         {
+            case NO_ACTION:
+                break;
+
             case UNBLOCKED_TO_END:
                 rotateLog(logMetaDataBuffer, blockedTermCount, termId);
                 return true;

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -282,6 +282,9 @@ public int doWork()
                 case RESET_BACKUP:
                     workCount += resetBackup(nowMs);
                     break;
+
+                case CLOSED:
+                    return workCount;
             }
 
             if (hasProgressStalled(nowMs))

File: aeron-cluster/src/main/java/io/aeron/cluster/DynamicJoin.java
Patch:
@@ -133,6 +133,9 @@ int doWork(final long nowNs)
             case JOIN_CLUSTER:
                 workCount += joinCluster(nowNs);
                 break;
+
+            case DONE:
+                break;
         }
 
         return workCount;

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -227,6 +227,9 @@ int doWork(final long nowNs)
             case FOLLOWER_READY:
                 workCount += followerReady(nowNs);
                 break;
+
+            case CLOSED:
+                break;
         }
 
         return workCount;

File: aeron-samples/src/main/java/io/aeron/samples/echo/ProvisioningMessage.java
Patch:
@@ -54,7 +54,7 @@ public void complete(final Object value)
         synchronized (mutex)
         {
             result = value;
-            mutex.notify();
+            mutex.notifyAll();
         }
     }
 }

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -64,6 +64,7 @@ void before()
                 .errorHandler(Tests::onError)
                 .threadingMode(ThreadingMode.SHARED),
             testWatcher);
+        testWatcher.dataCollector().add(driver.context().aeronDirectory());
 
         clientA = Aeron.connect();
         clientB = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -70,6 +70,7 @@ void before()
                 .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
                 .threadingMode(ThreadingMode.SHARED),
             testWatcher);
+        testWatcher.dataCollector().add(driver.context().aeronDirectory());
 
         pingClient = Aeron.connect();
         pongClient = Aeron.connect();
@@ -85,7 +86,6 @@ void before()
     void after()
     {
         CloseHelper.closeAll(pongClient, pingClient, driver);
-        driver.context().deleteDirectory();
     }
 
     @Test

File: aeron-test-support/src/main/java/io/aeron/test/MediaDriverTestUtil.java
Patch:
@@ -47,6 +47,9 @@ private void dumpMediaDriverDiagnostics()
                     {
                         System.out.println();
                         System.out.println("Media Driver: " + aeronDirectoryName + ", exit code: " + files.exitValue);
+                        System.out.println();
+                        Tests.printDirectoryContents(aeronDirectoryName, System.out);
+                        System.out.println();
                         printEnvironment(files.environment, System.out);
                         System.out.println();
                         System.out.println("*** STDOUT ***");

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -256,7 +256,7 @@ public void shouldTakeMultipleSnapshots()
 
             while (controlToggle.get() != ClusterControl.ToggleState.NEUTRAL.code())
             {
-                Tests.sleep(1, "snapshot ", i);
+                Tests.sleep(1, "snapshot %d", i);
             }
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -391,7 +391,7 @@ private int replay() throws IOException
                 int paddingFrameLength = 0;
                 final int sessionId = publication.sessionId();
                 final int streamId = publication.streamId();
-                final long remaining = (int)Math.min(replayLimit - replayPosition, Integer.MAX_VALUE);
+                final int remaining = (int)Math.min(replayLimit - replayPosition, Integer.MAX_VALUE);
                 final Checksum checksum = this.checksum;
                 final UnsafeBuffer replayBuffer = this.replayBuffer;
 

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -248,7 +248,7 @@ private static void clearScreen() throws IOException, InterruptedException
     {
         if (SystemUtil.isWindows())
         {
-            new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
+            new ProcessBuilder("C:\\Windows\\System32\\cmd.exe", "/c", "cls").inheritIO().start().waitFor();
         }
         else
         {

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -391,7 +391,7 @@ private int replay() throws IOException
                 int paddingFrameLength = 0;
                 final int sessionId = publication.sessionId();
                 final int streamId = publication.streamId();
-                final long remaining = replayLimit - replayPosition;
+                final long remaining = (int)Math.min(replayLimit - replayPosition, Integer.MAX_VALUE);
                 final Checksum checksum = this.checksum;
                 final UnsafeBuffer replayBuffer = this.replayBuffer;
 

File: aeron-samples/src/main/java/io/aeron/samples/archive/RecordedBasicPublisher.java
Patch:
@@ -85,7 +85,7 @@ public static void main(final String[] args) throws InterruptedException
                 final long recordingId = RecordingPos.getRecordingId(counters, counterId);
                 System.out.println("Recording started: recordingId = " + recordingId);
 
-                for (int i = 0; i < NUMBER_OF_MESSAGES && running.get(); i++)
+                for (long i = 0; i < NUMBER_OF_MESSAGES && running.get(); i++)
                 {
                     final String message = "Hello World! " + i;
                     final byte[] messageBytes = message.getBytes();

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -716,9 +716,10 @@ private int waitForPublication(final long nowMs)
     {
         int workCount = 0;
 
-        controlPublication = aeron.getExclusivePublication(controlPublicationId);
-        if (null != controlPublication)
+        final ExclusivePublication publication = aeron.getExclusivePublication(controlPublicationId);
+        if (null != publication)
         {
+            controlPublication = publication;
             activityDeadlineMs = nowMs + connectTimeoutMs;
             state(State.CONNECTING);
             workCount += 1;

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.util.*;
 import java.util.concurrent.TimeUnit;
 
@@ -249,7 +250,7 @@ public static CTestMediaDriver launch(
             final ProcessBuilder pb = new ProcessBuilder(aeronBinary.getAbsolutePath());
             if (null != driverOutputConsumer)
             {
-                stdoutFile = File.createTempFile(context.aeronDirectory().getName() + "-driver-", ".out");
+                stdoutFile = Files.createTempFile(context.aeronDirectory().getName() + "-driver-", ".out").toFile();
                 final String tmpName = stdoutFile.getName().substring(0, stdoutFile.getName().length() - 4) + ".err";
                 stderrFile = new File(stdoutFile.getParent(), tmpName);
                 driverOutputConsumer.outputFiles(context.aeronDirectoryName(), stdoutFile, stderrFile);

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterNetworkTopologyTest.java
Patch:
@@ -257,7 +257,7 @@ private void connectAndSendMessages(
         final String ingressChannel,
         final String ingressEndpoints,
         final Selector selector,
-        final double messageCount)
+        final int messageCount)
     {
         final String message = "Hello World!";
         final MutableDirectBuffer messageBuffer = new UnsafeBuffer(ByteBuffer.allocate(128));

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -708,7 +708,7 @@ public static final class Configuration
         /**
          * Size in bytes of the error buffer for the cluster.
          */
-        public static final int ERROR_BUFFER_LENGTH_DEFAULT = 1024 * 1024;
+        public static final int ERROR_BUFFER_LENGTH_DEFAULT = ClusterMarkFile.ERROR_BUFFER_MIN_LENGTH;
 
         /**
          * Timeout a leader will wait on getting termination ACKs from followers.

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveTool.java
Patch:
@@ -736,7 +736,7 @@ static void compact(final PrintStream out, final File archiveDir, final EpochClo
             try (FileChannel channel = FileChannel.open(compactFilePath, READ, WRITE, CREATE_NEW);
                 Catalog catalog = openCatalogReadOnly(archiveDir, epochClock))
             {
-                final MappedByteBuffer mappedByteBuffer = channel.map(READ_WRITE, 0, MAX_CATALOG_LENGTH);
+                final MappedByteBuffer mappedByteBuffer = channel.map(READ_WRITE, 0, catalog.capacity());
                 mappedByteBuffer.order(CatalogHeaderEncoder.BYTE_ORDER);
                 try
                 {
@@ -781,6 +781,8 @@ static void compact(final PrintStream out, final File archiveDir, final EpochClo
                             }
                         });
 
+                    channel.truncate(offset.get()); // Trim to size
+
                     out.println("Compaction result: deleted " + deletedRecords.get() + " records and reclaimed " +
                         reclaimedBytes.get() + " bytes");
                 }

File: aeron-samples/src/main/java/io/aeron/samples/cluster/ClusterConfig.java
Patch:
@@ -114,7 +114,7 @@ public static ClusterConfig create(
         final String aeronDirName = CommonContext.getAeronDirectoryName() + "-" + memberId + "-driver";
         final File baseDir = new File(parentDir, "aeron-cluster-" + memberId);
 
-        final String ingressHostname = clusterHostnames.get(memberId - startingMemberId);
+        final String ingressHostname = ingressHostnames.get(memberId - startingMemberId);
         final String hostname = clusterHostnames.get(memberId - startingMemberId);
 
         final MediaDriver.Context mediaDriverContext = new MediaDriver.Context()
@@ -149,8 +149,7 @@ public static ClusterConfig create(
             .clusterDir(new File(baseDir, CLUSTER_SUB_DIR))
             .archiveContext(aeronArchiveContext.clone())
             .serviceCount(1 + additionalServices.length)
-            .replicationChannel("aeron:udp?endpoint=" + hostname + ":0")
-            .ingressChannel("aeron:udp?endpoint=" + ingressHostname + ":" + (portBase + CLIENT_FACING_PORT_OFFSET));
+            .replicationChannel("aeron:udp?endpoint=" + hostname + ":0");
 
         final List<ClusteredServiceContainer.Context> serviceContexts = new ArrayList<>();
 

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredServiceNode.java
Patch:
@@ -161,7 +161,8 @@ public static void main(final String[] args)
             .archiveClientContext(replicationArchiveContext)
             .localControlChannel("aeron:ipc?term-length=64k")
             .recordingEventsEnabled(false)
-            .threadingMode(ArchiveThreadingMode.SHARED);
+            .threadingMode(ArchiveThreadingMode.SHARED)
+            .replicationChannel("aeron:udp?endpoint=" + hostname + ":0");
         // end::archive[]
 
         // tag::archive_client[]
@@ -177,7 +178,7 @@ public static void main(final String[] args)
             .errorHandler(errorHandler("Consensus Module"))
             .clusterMemberId(nodeId)                                                                     // <1>
             .clusterMembers(clusterMembers(Arrays.asList(hostnames)))                                    // <2>
-            .clusterDir(new File(baseDir, "cluster"))                                                    // <3>
+            .clusterDir(new File(baseDir, "cluster"))                                               // <3>
             .ingressChannel("aeron:udp?term-length=64k")                                                 // <4>
             .logChannel(logControlChannel(nodeId, hostname, LOG_CONTROL_PORT_OFFSET))                    // <5>
             .replicationChannel(logReplicationChannel(hostname))                                         // <6>

File: aeron-cluster/src/test/java/io/aeron/cluster/ElectionTest.java
Patch:
@@ -591,7 +591,7 @@ public void shouldTimeoutFailedCandidateBallotOnSplitVoteThenSucceedOnRetry()
 
         election.onCanvassPosition(leadershipTermId, logPosition, leadershipTermId, 0, VERSION);
 
-        clock.increment(ctx.electionTimeoutNs());
+        clock.increment(ctx.leaderHeartbeatTimeoutNs());
         election.doWork(clock.nanoTime());
         inOrder.verify(electionStateCounter).setOrdered(ElectionState.NOMINATE.code());
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTermination.java
Patch:
@@ -79,7 +79,7 @@ private static boolean haveFollowersTerminated(final ClusterMember[] members, fi
 
         for (final ClusterMember member : members)
         {
-            if (!member.hasTerminated() && member.logPosition() < terminationPosition)
+            if (!member.isLeader() && !member.hasTerminated())
             {
                 result = false;
                 break;

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -197,6 +197,9 @@ void shouldAbortClusterAndRestart()
         systemTestWatcher.cluster(cluster);
 
         final TestNode leader = cluster.awaitLeader();
+        TestCluster.awaitElectionClosed(cluster.node(0));
+        TestCluster.awaitElectionClosed(cluster.node(1));
+        TestCluster.awaitElectionClosed(cluster.node(2));
 
         cluster.node(0).isTerminationExpected(true);
         cluster.node(1).isTerminationExpected(true);

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterBackupTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
 
+import static io.aeron.test.SystemTestWatcher.UNKNOWN_HOST_FILTER;
 import static io.aeron.test.cluster.TestCluster.*;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
@@ -531,7 +532,7 @@ void shouldBackupClusterWithInvalidNameResolution(final ClusterBackup.SourceType
             .withMemberSpecificInvalidNameResolution(backupNodeId)
             .start();
         systemTestWatcher.cluster(cluster);
-        systemTestWatcher.ignoreErrorsMatching((s) -> s.contains("UnknownHostException"));
+        systemTestWatcher.ignoreErrorsMatching(UNKNOWN_HOST_FILTER);
 
         final TestNode leader = cluster.awaitLeader();
 
@@ -545,8 +546,6 @@ void shouldBackupClusterWithInvalidNameResolution(final ClusterBackup.SourceType
 
         cluster.awaitBackupNodeErrors();
 
-//        Tests.sleep(6_000);
-
         cluster.restoreByMemberNameResolution(backupNodeId);
 
         cluster.awaitBackupState(ClusterBackup.State.BACKING_UP);

File: aeron-test-support/src/main/java/io/aeron/test/driver/RedirectingNameResolver.java
Patch:
@@ -37,7 +37,7 @@ public class RedirectingNameResolver implements NameResolver
     public static final int USE_RE_RESOLUTION_HOST = 1;
     public static final int NAME_ENTRY_COUNTER_TYPE_ID = 2001;
     public static final int EXPECTED_COLUMN_COUNT = 3;
-    private static final String INVALID_HOSTNAME_SENTINAL = "forced-resolve-failure.invalid";
+    private static final String INVALID_HOSTNAME_SENTINEL = "forced-resolve-failure.invalid";
 
     private final Map<String, NameEntry> nameToEntryMap = new Object2ObjectHashMap<>();
     private final String csvConfiguration;
@@ -79,7 +79,7 @@ public InetAddress resolve(final String name, final String uriParamName, final b
         final String hostname = null != nameEntry ? nameEntry.redirectHost(name) : name;
 
         InetAddress resolvedAddress = null;
-        if (!Objects.equals(INVALID_HOSTNAME_SENTINAL, hostname))
+        if (!Objects.equals(INVALID_HOSTNAME_SENTINEL, hostname))
         {
             resolvedAddress = DefaultNameResolver.INSTANCE.resolve(hostname, uriParamName, isReResolution);
         }
@@ -143,7 +143,7 @@ String redirectHost(final String name)
             final long operation = counter.get();
             if (DISABLE_RESOLUTION == operation)
             {
-                return INVALID_HOSTNAME_SENTINAL;
+                return INVALID_HOSTNAME_SENTINEL;
             }
             else if (USE_INITIAL_RESOLUTION_HOST == operation)
             {

File: aeron-test-support/src/main/java/io/aeron/test/driver/RedirectingNameResolver.java
Patch:
@@ -37,7 +37,7 @@ public class RedirectingNameResolver implements NameResolver
     public static final int USE_RE_RESOLUTION_HOST = 1;
     public static final int NAME_ENTRY_COUNTER_TYPE_ID = 2001;
     public static final int EXPECTED_COLUMN_COUNT = 3;
-    private static final String INVALID_HOSTNAME_SENTINEL = "forced-resolve-failure.invalid";
+    private static final String INVALID_HOSTNAME_SENTINAL = "forced-resolve-failure.invalid";
 
     private final Map<String, NameEntry> nameToEntryMap = new Object2ObjectHashMap<>();
     private final String csvConfiguration;
@@ -79,7 +79,7 @@ public InetAddress resolve(final String name, final String uriParamName, final b
         final String hostname = null != nameEntry ? nameEntry.redirectHost(name) : name;
 
         InetAddress resolvedAddress = null;
-        if (!Objects.equals(INVALID_HOSTNAME_SENTINEL, hostname))
+        if (!Objects.equals(INVALID_HOSTNAME_SENTINAL, hostname))
         {
             resolvedAddress = DefaultNameResolver.INSTANCE.resolve(hostname, uriParamName, isReResolution);
         }
@@ -143,7 +143,7 @@ String redirectHost(final String name)
             final long operation = counter.get();
             if (DISABLE_RESOLUTION == operation)
             {
-                return INVALID_HOSTNAME_SENTINEL;
+                return INVALID_HOSTNAME_SENTINAL;
             }
             else if (USE_INITIAL_RESOLUTION_HOST == operation)
             {

File: aeron-test-support/src/main/java/io/aeron/test/driver/RedirectingNameResolver.java
Patch:
@@ -37,7 +37,7 @@ public class RedirectingNameResolver implements NameResolver
     public static final int USE_RE_RESOLUTION_HOST = 1;
     public static final int NAME_ENTRY_COUNTER_TYPE_ID = 2001;
     public static final int EXPECTED_COLUMN_COUNT = 3;
-    private static final String INVALID_HOSTNAME_SENTINAL = "forced-resolve-failure.invalid";
+    private static final String INVALID_HOSTNAME_SENTINEL = "forced-resolve-failure.invalid";
 
     private final Map<String, NameEntry> nameToEntryMap = new Object2ObjectHashMap<>();
     private final String csvConfiguration;
@@ -79,7 +79,7 @@ public InetAddress resolve(final String name, final String uriParamName, final b
         final String hostname = null != nameEntry ? nameEntry.redirectHost(name) : name;
 
         InetAddress resolvedAddress = null;
-        if (!Objects.equals(INVALID_HOSTNAME_SENTINAL, hostname))
+        if (!Objects.equals(INVALID_HOSTNAME_SENTINEL, hostname))
         {
             resolvedAddress = DefaultNameResolver.INSTANCE.resolve(hostname, uriParamName, isReResolution);
         }
@@ -143,7 +143,7 @@ String redirectHost(final String name)
             final long operation = counter.get();
             if (DISABLE_RESOLUTION == operation)
             {
-                return INVALID_HOSTNAME_SENTINAL;
+                return INVALID_HOSTNAME_SENTINEL;
             }
             else if (USE_INITIAL_RESOLUTION_HOST == operation)
             {

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -2622,7 +2622,7 @@ public static final class Configuration
         public static final String RECORDING_EVENTS_ENABLED_PROP_NAME = "aeron.archive.recording.events.enabled";
 
         /**
-         * Channel enabled for recording progress events of recordings from an archive which defaults to true.
+         * Channel enabled for recording progress events of recordings from an archive which defaults to false.
          */
         public static final boolean RECORDING_EVENTS_ENABLED_DEFAULT = false;
 

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventDissectorTest.java
Patch:
@@ -59,7 +59,7 @@ void dissectNewLeadershipTerm()
         assertEquals("[33.000000] " + CONTEXT + ": " + NEW_LEADERSHIP_TERM.name() + " [8/9]: memberId=13 " +
             "logLeadershipTermId=1 nextLeadershipTermId=2 nextTermBaseLogPosition=3 nextLogPosition=13 " +
             "leadershipTermId=23 termBaseLogPosition=4 logPosition=5 leaderRecordingId=6 " +
-            "timestamp=7 leaderId=100 logSessionId=200 appVersion=300 isStartup=true",
+            "timestamp=7 leaderId=100 logSessionId=200 appVersion=0.1.44 isStartup=true",
             builder.toString());
     }
 

File: aeron-agent/src/test/java/io/aeron/agent/CommonEventEncoderTest.java
Patch:
@@ -193,13 +193,13 @@ void testStateTransitionStringLength()
     void stateNameReturnsNameOfTheEnumConstant()
     {
         final ChronoUnit state = ChronoUnit.CENTURIES;
-        assertEquals(state.name(), stateName(state));
+        assertEquals(state.name(), enumName(state));
     }
 
     @Test
     void stateNameReturnsNullIfNull()
     {
-        assertEquals("null", stateName(null));
+        assertEquals("null", enumName(null));
     }
 
     private static List<Arguments> captureLengthArgs()

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -1235,9 +1235,9 @@ private void state(final ElectionState newState, final long nowNs)
         if (newState != state)
         {
             logStateChange(
+                thisMember.id(),
                 state,
                 newState,
-                thisMember.id(),
                 null != leaderMember ? leaderMember.id() : -1,
                 candidateTermId,
                 leadershipTermId,
@@ -1410,9 +1410,9 @@ private boolean hasIntervalExpired(
     }
 
     private void logStateChange(
+        final int memberId,
         final ElectionState oldState,
         final ElectionState newState,
-        final int memberId,
         final int leaderId,
         final long candidateTermId,
         final long leadershipTermId,

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -853,7 +853,7 @@ void onNewLeadershipTerm(
 
         if (!ctx.appVersionValidator().isVersionCompatible(ctx.appVersion(), appVersion))
         {
-            ctx.errorHandler().onError(new ClusterException(
+            ctx.countedErrorHandler().onError(new ClusterException(
                 "incompatible version: " + SemanticVersion.toString(ctx.appVersion()) +
                 " log=" + SemanticVersion.toString(appVersion)));
             throw new AgentTerminationException();

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -517,7 +517,7 @@ void onNewLeadershipTermEvent(
     {
         if (!ctx.appVersionValidator().isVersionCompatible(ctx.appVersion(), appVersion))
         {
-            ctx.errorHandler().onError(new ClusterException(
+            ctx.countedErrorHandler().onError(new ClusterException(
                 "incompatible version: " + SemanticVersion.toString(ctx.appVersion()) +
                 " log=" + SemanticVersion.toString(appVersion)));
             throw new AgentTerminationException();

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -538,7 +538,7 @@ public final class Configuration
     /**
      * Capacity for the command queues used between driver agents.
      */
-    public static final int CMD_QUEUE_CAPACITY = 128;
+    public static final int CMD_QUEUE_CAPACITY = 512;
 
     /**
      * Timeout on cleaning up pending SETUP message state on subscriber.

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusAdapter.java
Patch:
@@ -339,7 +339,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 final byte[] credentials = new byte[challengeResponseDecoder.encodedCredentialsLength()];
                 challengeResponseDecoder.getEncodedCredentials(credentials, 0, credentials.length);
 
-                consensusModuleAgent.onChallengeResponse(
+                consensusModuleAgent.onConsensusChallengeResponse(
                     challengeResponseDecoder.correlationId(),
                     challengeResponseDecoder.clusterSessionId(),
                     credentials);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusPublisher.java
Patch:
@@ -627,6 +627,7 @@ boolean backupResponse(
         final ClusterSession session,
         final int commitPositionCounterId,
         final int leaderMemberId,
+        final int memberId,
         final RecordingLog.Entry lastEntry,
         final RecordingLog.RecoveryPlan recoveryPlan,
         final String clusterMembers)
@@ -639,7 +640,8 @@ boolean backupResponse(
             .lastLeadershipTermId(lastEntry.leadershipTermId)
             .lastTermBaseLogPosition(lastEntry.termBaseLogPosition)
             .commitPositionCounterId(commitPositionCounterId)
-            .leaderMemberId(leaderMemberId);
+            .leaderMemberId(leaderMemberId)
+            .memberId(memberId);
 
         final BackupResponseEncoder.SnapshotsEncoder snapshotsEncoder =
             backupResponseEncoder.snapshotsCount(recoveryPlan.snapshots.size());

File: aeron-cluster/src/main/java/io/aeron/cluster/IngressAdapter.java
Patch:
@@ -160,7 +160,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                 final byte[] credentials = new byte[challengeResponseDecoder.encodedCredentialsLength()];
                 challengeResponseDecoder.getEncodedCredentials(credentials, 0, credentials.length);
 
-                consensusModuleAgent.onChallengeResponse(
+                consensusModuleAgent.onIngressChallengeResponse(
                     challengeResponseDecoder.correlationId(),
                     challengeResponseDecoder.clusterSessionId(),
                     credentials);

File: aeron-test-support/src/main/java/io/aeron/test/SystemTestWatcher.java
Patch:
@@ -268,7 +268,8 @@ private static void appendError(final StringBuilder errors, final Path path, fin
         final int lineFeedIndex = encodedException.indexOf('\n');
         if (lineFeedIndex > 0)
         {
-            final int endOfMessageIndex = '\r' != encodedException.charAt(lineFeedIndex - 1) ? lineFeedIndex : lineFeedIndex - 1;
+            final int endOfMessageIndex =
+                '\r' != encodedException.charAt(lineFeedIndex - 1) ? lineFeedIndex : lineFeedIndex - 1;
             errorMessage = encodedException.substring(0, endOfMessageIndex);
         }
         else

File: aeron-system-tests/src/test/java/io/aeron/cluster/DynamicMembershipTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -3244,9 +3244,9 @@ public Context timedOutClientCounter(final Counter timedOutClientCounter)
          *
          * @param aeron client for communicating with the local Media Driver.
          * @return this for a fluent API.
-         * @see Aeron#connect()
-         * @see Aeron.Context#useConductorAgentInvoker(boolean)
-         * @see Context#aeronDirectoryName(String)
+         * @see io.aeron.Aeron#connect()
+         * @see io.aeron.Aeron.Context#useConductorAgentInvoker(boolean)
+         * @see #aeronDirectoryName(String)
          */
         public Context aeron(final Aeron aeron)
         {

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -776,10 +776,11 @@ public Context conclude()
             {
                 clientLock = new ReentrantLock();
             }
-            else if (!useConductorAgentInvoker)
+            else if (clientLock instanceof NoOpLock && !useConductorAgentInvoker)
             {
                 throw new AeronException(
-                    "Must use Aeron.Context.useConductorAgentInvoker(true) when Aeron.Context.clientLock(...) is set");
+                    "Must use Aeron.Context.useConductorAgentInvoker(true) when Aeron.Context.clientLock(...) " +
+                    "is using a NoOpLock");
             }
 
             if (null == epochClock)

File: aeron-client/src/main/java/io/aeron/logbuffer/LogBufferDescriptor.java
Patch:
@@ -671,7 +671,7 @@ public static boolean rotateLog(final UnsafeBuffer metadataBuffer, final int ter
         long rawTail;
         do
         {
-            rawTail = rawTail(metadataBuffer, nextIndex);
+            rawTail = rawTailVolatile(metadataBuffer, nextIndex);
             if (expectedTermId != termId(rawTail))
             {
                 break;

File: aeron-client/src/main/java/io/aeron/Image.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.aeron;
 
-import io.aeron.exceptions.AeronException;
 import io.aeron.logbuffer.*;
 import io.aeron.logbuffer.ControlledFragmentHandler.Action;
 import org.agrona.*;

File: aeron-cluster/src/test/java/io/aeron/cluster/service/ClusteredServiceAgentTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.agrona.DirectBuffer;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.*;
+import org.agrona.concurrent.errors.DistinctErrorLog;
 import org.agrona.concurrent.status.CountersManager;
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
@@ -119,6 +120,7 @@ void shouldAbortClusteredServiceIfCommitPositionCounterIsClosed()
             .clusteredService(mock(ClusteredService.class))
             .dutyCycleTracker(new DutyCycleTracker())
             .idleStrategySupplier(() -> YieldingIdleStrategy.INSTANCE)
+            .errorLog(mock(DistinctErrorLog.class))
             .terminationHook(() -> {});
         final ClusteredServiceAgent clusteredServiceAgent = new ClusteredServiceAgent(ctx);
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/RecoveryState.java
Patch:
@@ -20,7 +20,6 @@
 import io.aeron.Counter;
 import io.aeron.cluster.client.ClusterException;
 import org.agrona.*;
-import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.CountersReader;
 
 import static io.aeron.Aeron.NULL_VALUE;

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -28,6 +28,7 @@
 import io.aeron.test.InterruptingTestCallback;
 import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.TestContexts;
+import io.aeron.test.Tests;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;
@@ -391,13 +392,13 @@ private void createRecording()
             Publication publication = aeron.addPublication(RECORDED_CHANNEL, RECORDED_STREAM_ID))
         {
             final CountersReader counters = aeron.countersReader();
-            final int counterId = ArchiveSystemTests.awaitRecordingCounterId(counters, publication.sessionId());
+            final int counterId = Tests.awaitRecordingCounterId(counters, publication.sessionId());
 
             offer(publication, messageCount, messagePrefix);
             consume(subscription, messageCount, messagePrefix);
 
             final long currentPosition = publication.position();
-            awaitPosition(counters, counterId, currentPosition);
+            Tests.awaitPosition(counters, counterId, currentPosition);
         }
 
         aeronArchive.stopRecording(subscriptionId);

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -178,7 +178,7 @@ void shouldExtendRecordingAndReplay(final boolean exclusive)
                 consume(subscription, 0, messageCount);
 
                 stopOne = publication.position();
-                ArchiveSystemTests.awaitPosition(counters, counterId, stopOne);
+                Tests.awaitPosition(counters, counterId, stopOne);
             }
             finally
             {
@@ -217,7 +217,7 @@ void shouldExtendRecordingAndReplay(final boolean exclusive)
                 consume(subscription, messageCount, messageCount);
 
                 stopTwo = publication.position();
-                ArchiveSystemTests.awaitPosition(counters, counterId, stopTwo);
+                Tests.awaitPosition(counters, counterId, stopTwo);
             }
             finally
             {

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -191,11 +191,11 @@ void shouldMergeFromReplayToLive()
 
             aeronArchive.startRecording(recordingChannel, STREAM_ID, REMOTE, true);
             final CountersReader counters = aeron.countersReader();
-            final int recordingCounterId = awaitRecordingCounterId(counters, publication.sessionId());
+            final int recordingCounterId = Tests.awaitRecordingCounterId(counters, publication.sessionId());
             final long recordingId = RecordingPos.getRecordingId(counters, recordingCounterId);
 
             publishMessages(publication);
-            awaitPosition(counters, recordingCounterId, publication.position());
+            Tests.awaitPosition(counters, recordingCounterId, publication.position());
             int attempt = 1;
 
             while (!attemptReplayMerge(

File: aeron-samples/src/main/java/io/aeron/samples/archive/IndexedReplicatedRecording.java
Patch:
@@ -114,7 +114,6 @@ public class IndexedReplicatedRecording implements AutoCloseable
                 .catalogCapacity(CATALOG_CAPACITY)
                 .controlChannel(SRC_CONTROL_REQUEST_CHANNEL)
                 .archiveClientContext(new AeronArchive.Context().controlResponseChannel(SRC_CONTROL_RESPONSE_CHANNEL))
-                .recordingEventsEnabled(false)
                 .replicationChannel(SRC_REPLICATION_CHANNEL)
                 .deleteArchiveOnStart(true)
                 .archiveDir(srcArchiveDir)
@@ -136,7 +135,6 @@ public class IndexedReplicatedRecording implements AutoCloseable
                 .catalogCapacity(CATALOG_CAPACITY)
                 .controlChannel(DST_CONTROL_REQUEST_CHANNEL)
                 .archiveClientContext(new AeronArchive.Context().controlResponseChannel(DST_CONTROL_RESPONSE_CHANNEL))
-                .recordingEventsEnabled(false)
                 .replicationChannel(DST_REPLICATION_CHANNEL)
                 .deleteArchiveOnStart(true)
                 .archiveDir(dstArchiveDir)

File: aeron-agent/src/test/java/io/aeron/agent/ArchiveLoggingAgentTest.java
Patch:
@@ -104,6 +104,7 @@ private void testArchiveLogging(final String enabledEvents, final EnumSet<Archiv
             .archiveDir(new File(testDir, "archive"))
             .deleteArchiveOnStart(true)
             .recordingEventsEnabled(false)
+            .replicationChannel("aeron:udp?endpoint=localhost:0")
             .controlChannel(aeronArchiveContext.controlRequestChannel())
             .controlStreamId(aeronArchiveContext.controlRequestStreamId())
             .localControlStreamId(aeronArchiveContext.controlRequestStreamId())

File: aeron-agent/src/test/java/io/aeron/agent/ClusterLoggingAgentTest.java
Patch:
@@ -28,6 +28,7 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.TestContexts;
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.ClusterTests;
 import org.agrona.CloseHelper;
@@ -120,7 +121,7 @@ private void testClusterEventsLogging(
             .controlResponseStreamId(AeronArchive.Configuration.localControlStreamId() + 1)
             .controlResponseStreamId(101);
 
-        final Archive.Context archiveCtx = new Archive.Context()
+        final Archive.Context archiveCtx = TestContexts.localhostArchive()
             .errorHandler(Tests::onError)
             .archiveDir(new File(testDir, "archive"))
             .deleteArchiveOnStart(true)

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -317,7 +317,7 @@ private static int alignedTotalFileLength(final Archive.Context ctx)
             (4 * VarAsciiEncodingEncoder.lengthEncodingLength()) +
             ctx.controlChannel().length() +
             ctx.localControlChannel().length() +
-            ctx.recordingEventsChannel().length() +
+            (null != ctx.recordingEventsChannel() ? ctx.recordingEventsChannel().length() : 0) +
             ctx.aeronDirectoryName().length();
 
         if (headerLength > HEADER_LENGTH)

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.aeron.cluster;
 
-import io.aeron.archive.Archive;
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.cluster.client.AeronCluster;
 import io.aeron.cluster.service.ClientSession;
@@ -27,6 +26,7 @@
 import io.aeron.security.*;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.TestContexts;
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.ClusterTests;
 import io.aeron.test.cluster.StubClusteredService;
@@ -483,7 +483,7 @@ private void launchClusteredMediaDriver(final AuthenticatorSupplier authenticato
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true)
                 .dirDeleteOnShutdown(false),
-            new Archive.Context()
+            TestContexts.localhostArchive()
                 .catalogCapacity(CATALOG_CAPACITY)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .recordingEventsEnabled(false)

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -18,7 +18,6 @@
 import io.aeron.ExclusivePublication;
 import io.aeron.Image;
 import io.aeron.Publication;
-import io.aeron.archive.Archive;
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.cluster.client.AeronCluster;
 import io.aeron.cluster.service.ClientSession;
@@ -650,7 +649,7 @@ private void launchClusteredMediaDriver(final boolean initialLaunch)
                 .termBufferSparseFile(true)
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true),
-            new Archive.Context()
+            TestContexts.localhostArchive()
                 .catalogCapacity(CATALOG_CAPACITY)
                 .recordingEventsEnabled(false)
                 .threadingMode(ArchiveThreadingMode.SHARED)

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.aeron.cluster;
 
-import io.aeron.archive.Archive;
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.cluster.client.AeronCluster;
 import io.aeron.cluster.client.EgressListener;
@@ -28,6 +27,7 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.TestContexts;
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.ClusterTests;
 import io.aeron.test.cluster.StubClusteredService;
@@ -63,7 +63,7 @@ public void before()
                 .termBufferSparseFile(true)
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true),
-            new Archive.Context()
+            TestContexts.localhostArchive()
                 .catalogCapacity(CATALOG_CAPACITY)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .recordingEventsEnabled(false)

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTimerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.aeron.ExclusivePublication;
 import io.aeron.Image;
-import io.aeron.archive.Archive;
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.cluster.client.AeronCluster;
 import io.aeron.cluster.service.ClientSession;
@@ -29,6 +28,7 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.TestContexts;
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.ClusterTests;
 import io.aeron.test.cluster.StubClusteredService;
@@ -306,7 +306,7 @@ private void launchClusteredMediaDriver(final boolean initialLaunch)
                 .termBufferSparseFile(true)
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true),
-            new Archive.Context()
+            TestContexts.localhostArchive()
                 .catalogCapacity(CATALOG_CAPACITY)
                 .errorHandler(ClusterTests.errorHandler(0))
                 .threadingMode(ArchiveThreadingMode.SHARED)

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -27,6 +27,7 @@
 import io.aeron.security.AuthorisationService;
 import io.aeron.security.DefaultAuthenticatorSupplier;
 import io.aeron.status.ReadableCounter;
+import io.aeron.test.TestContexts;
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.TestClusterClock;
 import org.agrona.collections.MutableLong;
@@ -68,7 +69,7 @@ public class ConsensusModuleAgentTest
     private final Counter mockTimedOutClientCounter = mock(Counter.class);
     private final LongConsumer mockTimeConsumer = mock(LongConsumer.class);
 
-    private final ConsensusModule.Context ctx = new ConsensusModule.Context()
+    private final ConsensusModule.Context ctx = TestContexts.localhostConsensusModule()
         .errorHandler(Tests::onError)
         .errorCounter(mock(AtomicCounter.class))
         .moduleStateCounter(mock(Counter.class))

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleContextTest.java
Patch:
@@ -23,6 +23,7 @@
 import io.aeron.exceptions.ConfigurationException;
 import io.aeron.security.AuthorisationService;
 import io.aeron.security.AuthorisationServiceSupplier;
+import io.aeron.test.TestContexts;
 import org.agrona.concurrent.AgentInvoker;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.junit.jupiter.api.AfterEach;
@@ -56,7 +57,7 @@ void beforeEach()
         when(aeron.context()).thenReturn(aeronContext);
         when(aeron.conductorAgentInvoker()).thenReturn(conductorInvoker);
 
-        context = new ConsensusModule.Context()
+        context = TestContexts.localhostConsensusModule()
             .clusterDir(clusterDir)
             .aeron(aeron)
             .errorCounter(mock(AtomicCounter.class))

File: aeron-cluster/src/test/java/io/aeron/cluster/NameResolutionClusterNodeTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.aeron.cluster;
 
-import io.aeron.archive.Archive;
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.cluster.client.AeronCluster;
 import io.aeron.cluster.client.EgressListener;
@@ -28,6 +27,7 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.TestContexts;
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.ClusterTests;
 import io.aeron.test.cluster.StubClusteredService;
@@ -69,7 +69,7 @@ void before()
                 .termBufferSparseFile(true)
                 .errorHandler(mockErrorHandler)
                 .dirDeleteOnStart(true),
-            new Archive.Context()
+            TestContexts.localhostArchive()
                 .catalogCapacity(CATALOG_CAPACITY)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .recordingEventsEnabled(false)

File: aeron-samples/src/main/java/io/aeron/samples/cluster/ClusterConfig.java
Patch:
@@ -117,6 +117,7 @@ public static ClusterConfig create(
             .controlChannel(udpChannel(nodeId, hostname, portBase, ARCHIVE_CONTROL_PORT_OFFSET))
             .archiveClientContext(replicationArchiveContext)
             .localControlChannel("aeron:ipc?term-length=64k")
+            .replicationChannel("aeron:udp?endpoint=" + hostname + ":0")
             .recordingEventsEnabled(false)
             .threadingMode(ArchiveThreadingMode.SHARED);
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -27,6 +27,7 @@
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
 import io.aeron.test.SystemTestWatcher;
+import io.aeron.test.TestContexts;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;
@@ -344,7 +345,7 @@ private void connectClient(final CredentialsSupplier credentialsSupplier)
                 .aeronDirectoryName(aeronDirectoryName));
 
         aeronArchive = AeronArchive.connect(
-            new AeronArchive.Context()
+            TestContexts.localhostAeronArchive()
                 .credentialsSupplier(credentialsSupplier)
                 .aeron(aeron));
     }
@@ -358,7 +359,7 @@ private void launchArchivingMediaDriver(final AuthenticatorSupplier authenticato
             .spiesSimulateConnection(false)
             .dirDeleteOnStart(true);
 
-        final Archive.Context archiveCtx = new Archive.Context()
+        final Archive.Context archiveCtx = TestContexts.localhostArchive()
             .catalogCapacity(CATALOG_CAPACITY)
             .aeronDirectoryName(aeronDirectoryName)
             .deleteArchiveOnStart(true)

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -90,7 +90,7 @@ public void before()
 
         archiveDir = new File(SystemUtil.tmpDirName(), "archive");
 
-        final Archive.Context archiveCtx = new Archive.Context()
+        final Archive.Context archiveCtx = TestContexts.localhostArchive()
             .catalogCapacity(CATALOG_CAPACITY)
             .aeronDirectoryName(aeronDirectoryName)
             .deleteArchiveOnStart(true)
@@ -114,7 +114,7 @@ public void before()
                 .aeronDirectoryName(aeronDirectoryName));
 
         aeronArchive = AeronArchive.connect(
-            new AeronArchive.Context()
+            TestContexts.localhostAeronArchive()
                 .aeron(aeron));
     }
 

File: aeron-system-tests/src/test/java/io/aeron/archive/CatalogWithJumboRecordingsAndGapsTest.java
Patch:
@@ -23,6 +23,7 @@
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
 import io.aeron.test.SystemTestWatcher;
+import io.aeron.test.TestContexts;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;
@@ -125,7 +126,7 @@ void before()
             .ipcTermBufferLength(TERM_MIN_LENGTH)
             .dirDeleteOnStart(true);
 
-        final Archive.Context archiveCtx = new Archive.Context()
+        final Archive.Context archiveCtx = TestContexts.localhostArchive()
             .catalogCapacity(ArchiveSystemTests.CATALOG_CAPACITY)
             .aeronDirectoryName(aeronDirectoryName)
             .archiveDir(archiveDir)
@@ -148,7 +149,7 @@ void before()
                 .aeronDirectoryName(aeronDirectoryName));
 
         aeronArchive = AeronArchive.connect(
-            new AeronArchive.Context()
+            TestContexts.localhostAeronArchive()
                 .aeron(aeron));
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -652,7 +652,7 @@ void startReplay(
 
         if (!catalog.hasRecording(recordingId))
         {
-            final String msg = "unknown recording id " + recordingId;
+            final String msg = "unknown recording id: " + recordingId;
             controlSession.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
             return;
         }
@@ -842,7 +842,7 @@ Subscription extendRecording(
 
         if (!catalog.hasRecording(recordingId))
         {
-            final String msg = "unknown recording " + recordingId;
+            final String msg = "unknown recording id: " + recordingId;
             controlSession.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
             return null;
         }
@@ -1601,7 +1601,7 @@ private boolean hasRecording(final long recordingId, final long correlationId, f
     {
         if (!catalog.hasRecording(recordingId))
         {
-            final String msg = "unknown recording " + recordingId;
+            final String msg = "unknown recording id: " + recordingId;
             session.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
             return false;
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -1227,13 +1227,16 @@ private void addLiveLogDestination()
     private Subscription addFollowerSubscription()
     {
         final Aeron aeron = ctx.aeron();
+        final ChannelUri logChannelParams = ChannelUri.parse(ctx.logChannel());
         final String channel = new ChannelUriStringBuilder()
             .media(UDP_MEDIA)
             .tags(aeron.nextCorrelationId() + "," + aeron.nextCorrelationId())
             .controlMode(MDC_CONTROL_MODE_MANUAL)
             .sessionId(logSessionId)
             .group(Boolean.TRUE)
             .rejoin(Boolean.FALSE)
+            .socketRcvbufLength(logChannelParams)
+            .receiverWindowLength(logChannelParams)
             .alias("log")
             .build();
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2455,7 +2455,7 @@ private int processPendingSessions(final ArrayList<ClusterSession> pendingSessio
                 {
                     case CLIENT:
                     {
-                        if (appendSessionAndOpen(session, nowNs))
+                        if (session.responsePublication().isConnected() && appendSessionAndOpen(session, nowNs))
                         {
                             ArrayListUtil.fastUnorderedRemove(pendingSessions, i, lastIndex--);
                             addSession(session);
@@ -2726,6 +2726,7 @@ private boolean appendSessionAndOpen(final ClusterSession session, final long no
         {
             session.open(resultingPosition);
             session.timeOfLastActivityNs(nowNs);
+            sendSessionOpenEvent(session);
             return true;
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -513,7 +513,7 @@ private int readRecording(final long availableReplay) throws IOException
 
     private void onError(final String errorMessage)
     {
-        this.errorMessage = errorMessage;
+        this.errorMessage = errorMessage + ", recordingId=" + recordingId + ", sessionId=" + sessionId;
         state(State.INACTIVE);
     }
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ServiceIpcIngressMessageTest.java
Patch:
@@ -32,7 +32,6 @@
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static org.agrona.BitUtil.SIZE_OF_INT;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertSame;
 
 @ExtendWith(InterruptingTestCallback.class)
 class ServiceIpcIngressMessageTest

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -3227,7 +3227,7 @@ private void enqueueServiceSessionMessage(
         buffer.putLong(timestampOffset, Long.MAX_VALUE, SessionMessageHeaderDecoder.BYTE_ORDER);
         if (!pendingServiceMessages.append(buffer, offset - SESSION_HEADER_LENGTH, length + SESSION_HEADER_LENGTH))
         {
-            throw new ClusterException("pending service message buffer capacity: " + pendingServiceMessages.size());
+            throw new ClusterException("pending service message buffer at capacity: " + pendingServiceMessages.size());
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -2491,7 +2491,7 @@ public static final class Configuration
         /**
          * Timeout when waiting on a message to be sent or received.
          */
-        public static final long MESSAGE_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(5);
+        public static final long MESSAGE_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(10);
 
         /**
          * Channel for sending control messages to an archive.

File: aeron-samples/src/main/java/io/aeron/samples/raw/BurstSendReceiveUdpPing.java
Patch:
@@ -145,7 +145,7 @@ private static void measureRoundTrip(
                 final long receivedSequenceNumber = buffer.getLong(0);
                 if (receivedSequenceNumber != sequenceNumber + i)
                 {
-                    throw new IllegalStateException("Data Loss:" + sequenceNumber + " to " + receivedSequenceNumber);
+                    throw new IllegalStateException("Data Loss: " + sequenceNumber + " to " + receivedSequenceNumber);
                 }
 
                 final long durationNs = System.nanoTime() - buffer.getLong(BitUtil.SIZE_OF_LONG);

File: aeron-samples/src/main/java/io/aeron/samples/raw/SendHackSelectReceiveUdpPing.java
Patch:
@@ -88,7 +88,7 @@ public static void main(final String[] args) throws IOException
 
                     if (receivedSequenceNumber != sequence.get())
                     {
-                        throw new IllegalStateException("Data Loss:" + sequence + " to " + receivedSequenceNumber);
+                        throw new IllegalStateException("Data Loss: " + sequence + " to " + receivedSequenceNumber);
                     }
 
                     histogram.recordValue(durationNs);

File: aeron-samples/src/main/java/io/aeron/samples/raw/SendReceiveUdpPing.java
Patch:
@@ -140,7 +140,7 @@ private static void measureRoundTrip(
 
             if (receivedSequenceNumber != sequenceNumber)
             {
-                throw new IllegalStateException("Data Loss:" + sequenceNumber + " to " + receivedSequenceNumber);
+                throw new IllegalStateException("Data Loss: " + sequenceNumber + " to " + receivedSequenceNumber);
             }
 
             final long durationNs = System.nanoTime() - receivedTimestamp;

File: aeron-samples/src/main/java/io/aeron/samples/raw/SendSelectReceiveUdpPing.java
Patch:
@@ -86,7 +86,7 @@ public static void main(final String[] args) throws IOException
 
                     if (receivedSequenceNumber != sequence.get())
                     {
-                        throw new IllegalStateException("Data Loss:" + sequence + " to " + receivedSequenceNumber);
+                        throw new IllegalStateException("Data Loss: " + sequence + " to " + receivedSequenceNumber);
                     }
 
                     final long durationNs = System.nanoTime() - receivedTimestampNs;

File: aeron-samples/src/main/java/io/aeron/samples/raw/WriteReceiveUdpPing.java
Patch:
@@ -130,7 +130,7 @@ private static void measureRoundTrip(
             final long receivedSequenceNumber = buffer.getLong(0);
             if (receivedSequenceNumber != sequenceNumber)
             {
-                throw new IllegalStateException("Data Loss:" + sequenceNumber + " to " + receivedSequenceNumber);
+                throw new IllegalStateException("Data Loss: " + sequenceNumber + " to " + receivedSequenceNumber);
             }
 
             final long durationNs = System.nanoTime() - buffer.getLong(SIZE_OF_LONG);

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterMarkFile.java
Patch:
@@ -420,7 +420,8 @@ public static void checkHeaderLength(
 
         if (length > HEADER_LENGTH)
         {
-            throw new ClusterException("ClusterMarkFile required headerLength=" + length + " > " + HEADER_LENGTH);
+            throw new ClusterException(
+                "ClusterMarkFile headerLength=" + length + " > maxHeaderLength=" + HEADER_LENGTH);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMigrationPlanner.java
Patch:
@@ -20,11 +20,11 @@
 
 /**
  * Creates a series of migration steps given a starting semantic version.
- *
+ * <p>
  * Migration steps are stored statically in a list sorted by order of operation. Each has
  * a minimum version. The first step that has a minimum version greater than the passed in version forms
  * the start of the migration steps. All steps afterward are included in the migration.
- *
+ * <p>
  * A step need not be a complete operation. A series of operations may be broken down in steps and
  * included with the same minimum version.
  */

File: aeron-client/src/main/java/io/aeron/Image.java
Patch:
@@ -258,7 +258,7 @@ public boolean isEndOfStream()
 
     /**
      * Count of observed active transports within the image liveness timeout.
-     *
+     * <p>
      * If the image is closed, then this is 0. This may also be 0 if no actual datagrams have arrived. IPC
      * Images also will be 0.
      *

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -327,7 +327,7 @@ public int channelStatusId()
     /**
      * Fetches the local socket address for this publication. If the channel is not
      * {@link io.aeron.status.ChannelEndpointStatus#ACTIVE}, then this will return an empty list.
-     *
+     * <p>
      * The format is as follows:
      * <br>
      * <br>

File: aeron-client/src/main/java/io/aeron/command/CorrelatedMessageFlyweight.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Base flyweight that can be extended to track a client request.
- *
+ * <p>
  * 0                   1                   2                   3
  * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

File: aeron-client/src/main/java/io/aeron/logbuffer/LogBufferDescriptor.java
Patch:
@@ -591,7 +591,7 @@ public static int computeTermIdFromPosition(
 
     /**
      * Compute the total length of a log file given the term length.
-     *
+     * <p>
      * Assumes {@link #TERM_MAX_LENGTH} is 1 GB and that filePageSize is 1 GB or less and a power of 2.
      *
      * @param termLength   on which to base the calculation.
@@ -653,7 +653,7 @@ public static void applyDefaultHeader(
 
     /**
      * Rotate the log and update the tail counter for the new term.
-     *
+     * <p>
      * This method is safe for concurrent use.
      *
      * @param metadataBuffer for the log.

File: aeron-client/src/main/java/io/aeron/security/CredentialsSupplier.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Supplier of credentials for authentication with a system.
- *
+ * <p>
  * Implement this interface to supply credentials for clients. If no credentials are required then the
  * {@link NullCredentialsSupplier} can be used.
  */

File: aeron-cluster/src/main/java/io/aeron/cluster/AppVersionValidator.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Class to be used for determining AppVersion compatibility.
- *
+ * <p>
  * Default is to use {@link org.agrona.SemanticVersion} semantics for check.
  */
 public class AppVersionValidator

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -1704,7 +1704,7 @@ public int appVersion()
 
         /**
          * User assigned application version validator implementation used to check version compatibility.
-         *
+         * <p>
          * The default validator uses {@link org.agrona.SemanticVersion} semantics.
          *
          * @param appVersionValidator for user application.
@@ -1718,7 +1718,7 @@ public Context appVersionValidator(final AppVersionValidator appVersionValidator
 
         /**
          * User assigned application version validator implementation used to check version compatibility.
-         *
+         * <p>
          * The default validator uses {@link org.agrona.SemanticVersion} semantics.
          *
          * @return AppVersionValidator in use.

File: aeron-cluster/src/main/java/io/aeron/cluster/TimerServiceSupplier.java
Patch:
@@ -26,7 +26,6 @@ public interface TimerServiceSupplier
     /**
      * New instance of the {@link TimerService}.
      *
-     *
      * @param timeUnit      units to be used by the underlying timer service.
      * @param timerHandler  that must be invoked for each expired timer.
      * @return              timer service instance ready for immediate usage.

File: aeron-cluster/src/main/java/io/aeron/cluster/package-info.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Aeron Cluster provides support for fault-tolerant services as replicated state machines based on the
  * <a href="https://raft.github.io/raft.pdf" target="_blank">Raft</a> consensus algorithm.
- *
+ * <p>
  * The purpose of Aeron Cluster is to aggregate and sequence streams from cluster clients into a single log. A number of
  * nodes will replicate and archive the log to achieve fault tolerance.
  * {@link io.aeron.cluster.service.ClusteredService}s deterministically process the log and respond to cluster clients.

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -841,7 +841,7 @@ public int appVersion()
 
         /**
          * User assigned application version validator implementation used to check version compatibility.
-         *
+         * <p>
          * The default validator uses {@link org.agrona.SemanticVersion} semantics.
          *
          * @param appVersionValidator for user application.
@@ -855,7 +855,7 @@ public Context appVersionValidator(final AppVersionValidator appVersionValidator
 
         /**
          * User assigned application version validator implementation used to check version compatibility.
-         *
+         * <p>
          * The default validator uses {@link org.agrona.SemanticVersion} semantics.
          *
          * @return AppVersionValidator in use.

File: aeron-samples/src/main/java/io/aeron/samples/FileReceiver.java
Patch:
@@ -46,7 +46,7 @@
  * linked via the correlation id. Messages are encoded in {@link java.nio.ByteOrder#LITTLE_ENDIAN}.
  * <p>
  * The chunk size if best determined by {@link io.aeron.Publication#maxPayloadLength()} minus header for the chunk.
- *
+ * <p>
  * <b>file-create</b>
  * <pre>
  *   0                   1                   2                   3

File: aeron-samples/src/main/java/io/aeron/samples/FileSender.java
Patch:
@@ -35,7 +35,7 @@
  * linked via the correlation id. Messages are encoded in {@link java.nio.ByteOrder#LITTLE_ENDIAN}.
  * <p>
  * The chunk size if best determined by {@link io.aeron.Publication#maxPayloadLength()} minus header for the chunk.
- *
+ * <p>
  * <b>file-create</b>
  * <pre>
  *   0                   1                   2                   3

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -1357,7 +1357,7 @@ public void conclude()
 
             if (null == appVersionValidator)
             {
-                appVersionValidator = new AppVersionValidator();
+                appVersionValidator = AppVersionValidator.SEMANTIC_VERSIONING_VALIDATOR;
             }
 
             if (null == clusterTimeConsumerSupplier)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -670,7 +670,7 @@ public void conclude()
 
             if (null == appVersionValidator)
             {
-                appVersionValidator = new AppVersionValidator();
+                appVersionValidator = AppVersionValidator.SEMANTIC_VERSIONING_VALIDATOR;
             }
 
             if (null == epochClock)

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplayMerge.java
Patch:
@@ -38,6 +38,8 @@
  * range and this will be added to the replay channel for instructing the archive.
  * <p>
  * NOTE: Merging is only supported with UDP streams.
+ * <p>
+ * NOTE: ReplayMerge is not threadsafe and should <b>not</b> be used with a shared {@link AeronArchive} client.
  */
 public final class ReplayMerge implements AutoCloseable
 {

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiRcvDestination.java
Patch:
@@ -75,7 +75,7 @@ void removeDestination(final int transportIndex)
 
     boolean hasDestination(final int transportIndex)
     {
-        return numDestinations > transportIndex && null != transports[transportIndex];
+        return transports.length > transportIndex && null != transports[transportIndex];
     }
 
     ReceiveDestinationTransport transport(final int transportIndex)

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -186,7 +186,7 @@ public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress
      */
     public String originalUriString()
     {
-        return udpChannel().originalUriString();
+        return subscriptionUdpChannel().originalUriString();
     }
 
     /**

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -280,7 +280,7 @@ public int doWork()
             throw new AgentTerminationException("unexpected Aeron close");
         }
 
-        dutyCycleTracker.measureAndUpdateClock(nowNs);
+        dutyCycleTracker.measureAndUpdate(nowNs);
 
         final long nowMs = epochClock.time();
         if (cachedEpochClock.time() != nowMs)

File: aeron-archive/src/main/java/io/aeron/archive/DedicatedModeArchiveConductor.java
Patch:
@@ -177,7 +177,7 @@ public int doWork()
                 throw new AgentTerminationException();
             }
 
-            dutyCycleTracker.measureAndUpdateClock(nanoClock.nanoTime());
+            dutyCycleTracker.measureAndUpdate(nanoClock.nanoTime());
 
             return drainSessionsQueue() + super.doWork();
         }
@@ -324,7 +324,7 @@ public int doWork()
                 throw new AgentTerminationException();
             }
 
-            dutyCycleTracker.measureAndUpdateClock(nanoClock.nanoTime());
+            dutyCycleTracker.measureAndUpdate(nanoClock.nanoTime());
 
             return drainSessionQueue() + super.doWork();
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -332,7 +332,7 @@ public int doWork()
         final long nowNs = clusterTimeUnit.toNanos(timestamp);
         int workCount = 0;
 
-        dutyCycleTracker.measureAndUpdateClock(nowNs);
+        dutyCycleTracker.measureAndUpdate(nowNs);
 
         try
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -167,7 +167,7 @@ public int doWork()
     {
         int workCount = 0;
 
-        dutyCycleTracker.measureAndUpdateClock(nanoClock.nanoTime());
+        dutyCycleTracker.measureAndUpdate(nanoClock.nanoTime());
 
         try
         {

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -31,7 +31,6 @@
 import io.aeron.test.cluster.TestClusterClock;
 import org.agrona.collections.MutableLong;
 import org.agrona.concurrent.AgentInvoker;
-import org.agrona.concurrent.CachedNanoClock;
 import org.agrona.concurrent.CountedErrorHandler;
 import org.agrona.concurrent.NoOpIdleStrategy;
 import org.agrona.concurrent.status.AtomicCounter;
@@ -88,7 +87,7 @@ public class ConsensusModuleAgentTest
         .archiveContext(new AeronArchive.Context())
         .logPublisher(mockLogPublisher)
         .egressPublisher(mockEgressPublisher)
-        .dutyCycleTracker(new DutyCycleTracker(new CachedNanoClock()));
+        .dutyCycleTracker(new DutyCycleTracker());
 
     @BeforeEach
     public void before()

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1993,7 +1993,7 @@ private void linkSpies(final ArrayList<SubscriptionLink> links, final NetworkPub
     private void trackTime(final long nowNs)
     {
         cachedNanoClock.update(nowNs);
-        dutyCycleTracker.measureAndUpdateClock(nowNs);
+        dutyCycleTracker.measureAndUpdate(nowNs);
 
         if (clockUpdateDeadlineNs - nowNs < 0)
         {

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -3607,7 +3607,6 @@ private void concludeDependantProperties()
             if (null == conductorDutyCycleTracker)
             {
                 conductorDutyCycleTracker = new DutyCycleStallTracker(
-                    new CachedNanoClock(),
                     systemCounters.get(CONDUCTOR_MAX_CYCLE_TIME),
                     systemCounters.get(CONDUCTOR_CYCLE_TIME_THRESHOLD_EXCEEDED),
                     conductorCycleThresholdNs);
@@ -3616,7 +3615,6 @@ private void concludeDependantProperties()
             if (null == senderDutyCycleTracker)
             {
                 senderDutyCycleTracker = new DutyCycleStallTracker(
-                    new CachedNanoClock(),
                     systemCounters.get(SENDER_MAX_CYCLE_TIME),
                     systemCounters.get(SENDER_CYCLE_TIME_THRESHOLD_EXCEEDED),
                     senderCycleThresholdNs);
@@ -3625,7 +3623,6 @@ private void concludeDependantProperties()
             if (null == receiverDutyCycleTracker)
             {
                 receiverDutyCycleTracker = new DutyCycleStallTracker(
-                    new CachedNanoClock(),
                     systemCounters.get(RECEIVER_MAX_CYCLE_TIME),
                     systemCounters.get(RECEIVER_CYCLE_TIME_THRESHOLD_EXCEEDED),
                     receiverCycleThresholdNs);

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -114,7 +114,7 @@ public int doWork()
     {
         final long nowNs = nanoClock.nanoTime();
         cachedNanoClock.update(nowNs);
-        dutyCycleTracker.measureAndUpdateClock(nowNs);
+        dutyCycleTracker.measureAndUpdate(nowNs);
 
         int workCount = commandQueue.drain(Runnable::run, Configuration.COMMAND_DRAIN_LIMIT);
 

File: aeron-driver/src/main/java/io/aeron/driver/Sender.java
Patch:
@@ -128,7 +128,7 @@ public int doWork()
     {
         final long nowNs = nanoClock.nanoTime();
         cachedNanoClock.update(nowNs);
-        dutyCycleTracker.measureAndUpdateClock(nowNs);
+        dutyCycleTracker.measureAndUpdate(nowNs);
 
         final int workCount = commandQueue.drain(Runnable::run, Configuration.COMMAND_DRAIN_LIMIT);
         final int bytesSent = doSend(nowNs);

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -151,7 +151,6 @@ public void before()
         when(mockErrorCounter.appendToLabel(any())).thenReturn(mockErrorCounter);
 
         final DutyCycleStallTracker conductorDutyCycleTracker = new DutyCycleStallTracker(
-            new CachedNanoClock(),
             spySystemCounters.get(CONDUCTOR_MAX_CYCLE_TIME),
             spySystemCounters.get(CONDUCTOR_CYCLE_TIME_THRESHOLD_EXCEEDED),
             600_000_000);

File: aeron-driver/src/test/java/io/aeron/driver/ReceiverTest.java
Patch:
@@ -120,7 +120,7 @@ public class ReceiverTest
         .senderCachedNanoClock(nanoClock)
         .receiverCachedNanoClock(nanoClock)
         .lossReport(mockLossReport)
-        .receiverDutyCycleTracker(new DutyCycleTracker(new CachedNanoClock()));
+        .receiverDutyCycleTracker(new DutyCycleTracker());
 
     private ReceiveChannelEndpoint receiveChannelEndpoint;
 
@@ -156,7 +156,7 @@ public void setUp() throws Exception
             .receiverCachedNanoClock(nanoClock)
             .receiveChannelEndpointThreadLocals(new ReceiveChannelEndpointThreadLocals())
             .driverConductorProxy(driverConductorProxy)
-            .receiverDutyCycleTracker(new DutyCycleTracker(new CachedNanoClock()));
+            .receiverDutyCycleTracker(new DutyCycleTracker());
 
         receiverProxy = new ReceiverProxy(
             ThreadingMode.DEDICATED, ctx.receiverCommandQueue(), mock(AtomicCounter.class));

File: aeron-driver/src/test/java/io/aeron/driver/SenderTest.java
Patch:
@@ -125,7 +125,7 @@ public void setUp()
             .senderCommandQueue(senderCommandQueue)
             .nanoClock(nanoClock)
             .errorHandler(errorHandler)
-            .senderDutyCycleTracker(new DutyCycleTracker(new CachedNanoClock()));
+            .senderDutyCycleTracker(new DutyCycleTracker());
         sender = new Sender(ctx);
 
         LogBufferDescriptor.initialiseTailWithTermId(rawLog.metaData(), 0, INITIAL_TERM_ID);

File: aeron-driver/src/test/java/io/aeron/driver/IpcPublicationTest.java
Patch:
@@ -78,7 +78,9 @@ public void setUp()
             .countersManager(countersManager)
             .systemCounters(systemCounters)
             .nameResolver(DefaultNameResolver.INSTANCE)
-            .nanoClock(new CachedNanoClock());
+            .nanoClock(new CachedNanoClock())
+            .threadingMode(ThreadingMode.DEDICATED)
+            .conductorDutyCycleTracker(new DutyCycleTracker(new CachedNanoClock()));
 
         ctx.countersValuesBuffer(counterBuffer);
 

File: aeron-driver/src/test/java/io/aeron/driver/SenderTest.java
Patch:
@@ -124,7 +124,8 @@ public void setUp()
             .systemCounters(mockSystemCounters)
             .senderCommandQueue(senderCommandQueue)
             .nanoClock(nanoClock)
-            .errorHandler(errorHandler);
+            .errorHandler(errorHandler)
+            .senderDutyCycleTracker(new DutyCycleTracker(new CachedNanoClock()));
         sender = new Sender(ctx);
 
         LogBufferDescriptor.initialiseTailWithTermId(rawLog.metaData(), 0, INITIAL_TERM_ID);

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestCluster.java
Patch:
@@ -1113,9 +1113,10 @@ public long getSnapshotCount(final TestNode node)
 
     public void awaitNodeTermination(final TestNode node)
     {
+        final String msg = "Failed to see node=" + node.index() + " terminate";
         while (!node.hasMemberTerminated() || !node.hasServiceTerminated())
         {
-            Tests.yield();
+            Tests.yieldingIdle(msg);
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterBackupTest.java
Patch:
@@ -44,7 +44,7 @@ public class ClusterBackupTest
     void setUp()
     {
         systemTestWatcher.ignoreErrorsMatching(
-            s -> s.contains("ats_gcm_decrypt final_ex: error:00000000:lib(0):func(0):reason(0)"));
+            (s) -> s.contains("ats_gcm_decrypt final_ex: error:00000000:lib(0):func(0):reason(0)"));
     }
 
     @Test

File: aeron-system-tests/src/test/java/io/aeron/cluster/DynamicMembershipTest.java
Patch:
@@ -45,7 +45,7 @@ public class DynamicMembershipTest
     void setUp()
     {
         systemTestWatcher.ignoreErrorsMatching(
-            s -> s.contains("ats_gcm_decrypt final_ex: error:00000000:lib(0):func(0):reason(0)"));
+            (s) -> s.contains("ats_gcm_decrypt final_ex: error:00000000:lib(0):func(0):reason(0)"));
     }
 
     @Test

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -559,7 +559,7 @@ public static final class Configuration
         /**
          * Timeout for a session if no activity is observed.
          */
-        public static final long SESSION_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(5);
+        public static final long SESSION_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(10);
 
         /**
          * Timeout for a leader if no heartbeat is received by another member.

File: aeron-test-support/src/main/java/io/aeron/test/Tests.java
Patch:
@@ -550,7 +550,7 @@ public static void awaitConnected(final Subscription subscription)
     {
         while (!subscription.isConnected())
         {
-            Tests.yield();
+            Tests.yieldingIdle(subscription.channel());
         }
     }
 
@@ -564,7 +564,7 @@ public static void awaitConnections(final Subscription subscription, final int c
     {
         while (subscription.imageCount() < connectionCount)
         {
-            Tests.yield();
+            Tests.yieldingIdle(subscription.channel());
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/TaggedFlowControlSystemTest.java
Patch:
@@ -249,12 +249,13 @@ void shouldRemoveDeadReceiver()
 
         launch();
 
-        subscriptionA = clientA.addSubscription(MULTICAST_URI + "|gtag=123", STREAM_ID);
-        subscriptionB = clientB.addSubscription(MULTICAST_URI + "|gtag=123", STREAM_ID);
         publication = clientA.addPublication(MULTICAST_URI + "|fc=tagged,g:123,t:1s", STREAM_ID);
 
+        subscriptionA = clientA.addSubscription(MULTICAST_URI + "|gtag=123", STREAM_ID);
         Tests.awaitConnected(subscriptionA);
+        subscriptionB = clientB.addSubscription(MULTICAST_URI + "|gtag=123", STREAM_ID);
         Tests.awaitConnected(subscriptionB);
+
         Tests.awaitConnected(publication);
 
         while (state.numFragmentsReadFromA < state.numMessagesToSend)

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -23,6 +23,7 @@
 import io.aeron.archive.codecs.SourceLocation;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.logbuffer.Header;
@@ -408,6 +409,7 @@ private void prePublicationActionsAndVerifications(
     {
         Tests.awaitConnected(controlPublication);
         Tests.awaitConnected(recordingEvents);
+        Tests.awaitCounterDelta(client.countersReader(), SystemCounterDescriptor.HEARTBEATS_RECEIVED.id(), 2);
 
         controlResponse = client.addSubscription(CONTROL_RESPONSE_URI, CONTROL_RESPONSE_STREAM_ID);
         final long connectCorrelationId = client.nextCorrelationId();

File: aeron-test-support/src/main/java/io/aeron/test/driver/TestMediaDriver.java
Patch:
@@ -25,6 +25,9 @@
 public interface TestMediaDriver extends AutoCloseable
 {
     String AERONMD_PATH_PROP_NAME = "aeron.test.system.aeronmd.path";
+    String ATS_LIBRARY_PATH_PROP_NAME = "aeron.test.system.ats.path";
+    String ATS_LIBRARY_CONF_PATH_PROP_NAME = "aeron.test.system.ats.conf.dir";
+    String ATS_LIBRARY_CONF_FILE_PROP_NAME = "aeron.test.system.ats.conf.file";
     String DRIVER_AGENT_PATH_PROP_NAME = "aeron.test.system.driver.agent.path";
 
     static boolean shouldRunCMediaDriver()

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventEncoder.java
Patch:
@@ -398,7 +398,7 @@ static int encodeAppendPosition(
         final long leadershipTermId,
         final long logPosition,
         final int memberId,
-        final int flags)
+        final short flags)
     {
         final int logHeaderLength = encodeLogHeader(encodingBuffer, offset, captureLength, length);
         final int bodyOffset = offset + logHeaderLength;

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventLogger.java
Patch:
@@ -492,7 +492,7 @@ public void logAppendPosition(
         final long leadershipTermId,
         final long logPosition,
         final int followerMemberId,
-        final int flags)
+        final short flags)
     {
         final int length = (2 * SIZE_OF_LONG) + SIZE_OF_INT + SIZE_OF_BYTE;
         final int encodedLength = encodedLength(length);

File: aeron-agent/src/main/java/io/aeron/agent/ClusterInterceptor.java
Patch:
@@ -213,7 +213,7 @@ static void onAppendPosition(
             final long leadershipTermId,
             final long logPosition,
             final int memberId,
-            final int flags)
+            final short flags)
         {
             LOGGER.logAppendPosition(
                 leadershipTermId,

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusAdapter.java
Patch:
@@ -159,8 +159,9 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     messageHeaderDecoder.blockLength(),
                     messageHeaderDecoder.version());
 
-                final int flags = AppendPositionDecoder.flagsNullValue() == appendPositionDecoder.flags() ?
-                    ConsensusModuleAgent.APPEND_POSITION_FLAG_NONE : appendPositionDecoder.flags();
+                final short flagsDecodedValue = appendPositionDecoder.flags();
+                final short flags = AppendPositionDecoder.flagsNullValue() == flagsDecodedValue ?
+                    ConsensusModuleAgent.APPEND_POSITION_FLAG_NONE : flagsDecodedValue;
 
                 consensusModuleAgent.onAppendPosition(
                     appendPositionDecoder.leadershipTermId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusPublisher.java
Patch:
@@ -229,7 +229,7 @@ boolean appendPosition(
         final long leadershipTermId,
         final long logPosition,
         final int followerMemberId,
-        final int flags)
+        final short flags)
     {
         if (null == publication)
         {
@@ -249,7 +249,7 @@ boolean appendPosition(
                     .leadershipTermId(leadershipTermId)
                     .logPosition(logPosition)
                     .followerMemberId(followerMemberId)
-                    .flags((short)(flags & 0xFF));
+                    .flags(flags);
 
                 bufferClaim.commit();
 

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -490,7 +490,7 @@ void onAppendPosition(
         final long leadershipTermId,
         final long logPosition,
         final int followerMemberId,
-        final int flags)
+        final short flags)
     {
         if (INIT == state)
         {

File: aeron-cluster/src/test/java/io/aeron/cluster/ElectionTest.java
Patch:
@@ -290,7 +290,7 @@ public void shouldVoteForAppointedLeader()
         verify(electionStateCounter).setOrdered(ElectionState.FOLLOWER_READY.code());
 
         when(consensusPublisher.appendPosition(
-            any(), anyLong(), anyLong(), anyInt(), anyInt())).thenReturn(Boolean.TRUE);
+            any(), anyLong(), anyLong(), anyInt(), anyShort())).thenReturn(Boolean.TRUE);
         when(consensusModuleAgent.appendNewLeadershipTermEvent(anyLong())).thenReturn(true);
 
         election.doWork(++nowNs);
@@ -1133,7 +1133,7 @@ void followerShouldReplicateReplayAndCatchupWhenLateJoiningClusterInLaterTerm()
         when(logReplication.isDone(anyLong())).thenReturn(true);
         when(logReplication.position()).thenReturn(termBaseLogPosition);
         when(logReplication.recordingId()).thenReturn(localRecordingId);
-        when(consensusPublisher.appendPosition(any(), anyLong(), anyLong(), anyInt(), anyInt())).thenReturn(true);
+        when(consensusPublisher.appendPosition(any(), anyLong(), anyLong(), anyInt(), anyShort())).thenReturn(true);
         t1 += ctx.leaderHeartbeatIntervalNs();
         election.doWork(++t1);
 

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveInterceptor.java
Patch:
@@ -29,7 +29,7 @@ class ArchiveInterceptor
     static class ReplicationSessionStateChange
     {
         @Advice.OnMethodEnter
-        static <E extends Enum<E>> void stateChange(final E oldState, final E newState, final long replicationId)
+        static <E extends Enum<E>> void logStateChange(final E oldState, final E newState, final long replicationId)
         {
             LOGGER.logSessionStateChange(REPLICATION_SESSION_STATE_CHANGE, oldState, newState, replicationId);
         }
@@ -38,7 +38,7 @@ static <E extends Enum<E>> void stateChange(final E oldState, final E newState,
     static class ControlSessionStateChange
     {
         @Advice.OnMethodEnter
-        static <E extends Enum<E>> void stateChange(final E oldState, final E newState, final long controlSessionId)
+        static <E extends Enum<E>> void logStateChange(final E oldState, final E newState, final long controlSessionId)
         {
             LOGGER.logSessionStateChange(CONTROL_SESSION_STATE_CHANGE, oldState, newState, controlSessionId);
         }

File: aeron-agent/src/main/java/io/aeron/agent/DriverInterceptor.java
Patch:
@@ -28,7 +28,7 @@ class DriverInterceptor
     static class UntetheredSubscriptionStateChange
     {
         @Advice.OnMethodEnter
-        static <E extends Enum<E>> void stateChange(
+        static <E extends Enum<E>> void logStateChange(
             final E oldState, final E newState, final long subscriptionId, final int streamId, final int sessionId)
         {
             LOGGER.logUntetheredSubscriptionStateChange(oldState, newState, subscriptionId, streamId, sessionId);

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -880,12 +880,11 @@ private void attemptToActivate()
 
     private void state(final State state)
     {
-        stateChange(this.state, state, controlSessionId);
+        logStateChange(this.state, state, controlSessionId);
         this.state = state;
     }
 
-    @SuppressWarnings("unused")
-    void stateChange(final State oldState, final State newState, final long controlSessionId)
+    private void logStateChange(final State oldState, final State newState, final long controlSessionId)
     {
 //        System.out.println(controlSessionId + ": " + oldState + " -> " + newState);
     }

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -732,13 +732,13 @@ private int trackAction(final long correlationId)
 
     private void state(final State newState)
     {
-        stateChange(state, newState, replicationId);
+        logStateChange(state, newState, replicationId);
         state = newState;
         activeCorrelationId = NULL_VALUE;
         timeOfLastActionMs = epochClock.time();
     }
 
-    void stateChange(final State oldState, final State newState, final long replicationId)
+    private void logStateChange(final State oldState, final State newState, final long replicationId)
     {
         //System.out.println("ReplicationSession: " + oldState + " -> " + newState + " replicationId=" + replicationId);
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -877,7 +877,7 @@ private int backingUp(final long nowMs)
 
     private void state(final ClusterBackup.State newState, final long nowMs)
     {
-        stateChange(state, newState, nowMs);
+        logStateChange(state, newState, nowMs);
 
         if (BACKUP_QUERY == newState && null != eventsListener)
         {
@@ -893,7 +893,8 @@ private void state(final ClusterBackup.State newState, final long nowMs)
         correlationId = NULL_VALUE;
     }
 
-    private void stateChange(final ClusterBackup.State oldState, final ClusterBackup.State newState, final long nowMs)
+    private void logStateChange(
+        final ClusterBackup.State oldState, final ClusterBackup.State newState, final long nowMs)
     {
         //System.out.println("ClusterBackup: " + oldState + " -> " + newState + " nowMs=" + nowMs);
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -1216,7 +1216,7 @@ private void state(final ElectionState newState, final long nowNs)
     {
         if (newState != state)
         {
-            stateChange(
+            logStateChange(
                 state,
                 newState,
                 thisMember.id(),
@@ -1419,7 +1419,7 @@ private boolean hasIntervalExpired(
         return (nowNs - previousTimestampForIntervalNs) >= intervalNs;
     }
 
-    void stateChange(
+    private void logStateChange(
         final ElectionState oldState,
         final ElectionState newState,
         final int memberId,

File: aeron-driver/src/main/java/io/aeron/driver/UntetheredSubscription.java
Patch:
@@ -40,12 +40,12 @@ enum State
 
     void state(final State newState, final long nowNs, final int streamId, final int sessionId)
     {
-        stateChange(state, newState, subscriptionLink.registrationId, streamId, sessionId, nowNs);
+        logStateChange(state, newState, subscriptionLink.registrationId, streamId, sessionId, nowNs);
         state = newState;
         timeOfLastUpdateNs = nowNs;
     }
 
-    void stateChange(
+    private void logStateChange(
         final State oldState,
         final State newState,
         final long subscriptionId,

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -959,7 +959,7 @@ private void pollServiceAdapter()
         }
     }
 
-    private void terminate(final boolean expectedTermination)
+    private void terminate(final boolean isTerminationExpected)
     {
         isServiceActive = false;
         activeLifecycleCallbackName = "onTerminate";
@@ -995,7 +995,7 @@ private void terminate(final boolean expectedTermination)
         }
 
         terminationPosition = NULL_VALUE;
-        throw new ClusterTerminationException(expectedTermination);
+        throw new ClusterTerminationException(isTerminationExpected);
     }
 
     private void checkForLifecycleCallback()

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -59,7 +59,7 @@ public static Runnable terminationHook(final AtomicBoolean isTerminationExpected
                         hasTerminated.set(true);
                     }
 
-                    throw new ClusterTerminationException(true);
+                    throw new ClusterTerminationException();
                 }
 
                 throw new AgentTerminationException();

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventLoggerTest.java
Patch:
@@ -374,7 +374,7 @@ void logReplayNewLeadershipTerm()
             REPLAY_NEW_LEADERSHIP_TERM, logBuffer, encodedMsgOffset(offset), sb);
 
         final String expectedMessagePattern = "\\[[0-9]+\\.[0-9]+\\] CLUSTER: REPLAY_NEW_LEADERSHIP_TERM " +
-            "\\[51/51\\]: memberId=982374 isInElection=true leadershipTermId=1233 logPosition=988723465 " +
+            "\\[59/59\\]: memberId=982374 isInElection=true leadershipTermId=1233 logPosition=988723465 " +
             "termBaseLogPosition=988723433 appVersion=13 timestamp=890723452345 timeUnit=NANOSECONDS";
 
         assertThat(sb.toString(), Matchers.matchesPattern(expectedMessagePattern));

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -113,7 +113,7 @@ public class ArchiveMarkFile implements AutoCloseable
                 if (SemanticVersion.major(version) != MAJOR_VERSION)
                 {
                     throw new IllegalArgumentException("mark file major version " + SemanticVersion.major(version) +
-                        " does not match software:" + MAJOR_VERSION);
+                        " does not match software: " + MAJOR_VERSION);
                 }
             },
             null);
@@ -164,7 +164,7 @@ public ArchiveMarkFile(
                 if (SemanticVersion.major(version) != MAJOR_VERSION)
                 {
                     throw new IllegalArgumentException("mark file major version " + SemanticVersion.major(version) +
-                        " does not match software:" + MAJOR_VERSION);
+                        " does not match software: " + MAJOR_VERSION);
                 }
             },
             logger);

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterMarkFile.java
Patch:
@@ -97,7 +97,7 @@ public ClusterMarkFile(
                 else if (SemanticVersion.major(version) != MAJOR_VERSION)
                 {
                     throw new ClusterException("mark file major version " + SemanticVersion.major(version) +
-                        " does not match software:" + MAJOR_VERSION);
+                        " does not match software: " + MAJOR_VERSION);
                 }
             },
             null);
@@ -167,7 +167,7 @@ public ClusterMarkFile(
                 if (SemanticVersion.major(version) != MAJOR_VERSION)
                 {
                     throw new ClusterException("mark file major version " + SemanticVersion.major(version) +
-                        " does not match software:" + MAJOR_VERSION);
+                        " does not match software: " + MAJOR_VERSION);
                 }
             },
             logger);

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventDissector.java
Patch:
@@ -207,7 +207,7 @@ static void dissectCatchupPosition(
         builder.append(": leadershipTermId=").append(leadershipTermId);
         builder.append(" logPosition=").append(logPosition);
         builder.append(" followerMemberId=").append(followerMemberId);
-        builder.append(" endpoint=");
+        builder.append(" catchupEndpoint=");
         buffer.getStringWithoutLengthAscii(absoluteOffset, catchupEndpointLength, builder);
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -131,7 +131,7 @@ public class ArchiveMarkFile implements AutoCloseable
             final UnsafeBuffer existingErrorBuffer = new UnsafeBuffer(
                 buffer, headerDecoder.headerLength(), headerDecoder.errorBufferLength());
 
-            saveExistingErrors(file, existingErrorBuffer, System.err);
+            saveExistingErrors(file, existingErrorBuffer, CommonContext.fallbackLogger());
             existingErrorBuffer.setMemory(0, headerDecoder.errorBufferLength(), (byte)0);
         }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterMarkFile.java
Patch:
@@ -113,7 +113,7 @@ else if (SemanticVersion.major(version) != MAJOR_VERSION)
             final UnsafeBuffer existingErrorBuffer = new UnsafeBuffer(
                 buffer, headerDecoder.headerLength(), headerDecoder.errorBufferLength());
 
-            saveExistingErrors(file, existingErrorBuffer, type, System.err);
+            saveExistingErrors(file, existingErrorBuffer, type, CommonContext.fallbackLogger());
             existingErrorBuffer.setMemory(0, headerDecoder.errorBufferLength(), (byte)0);
         }
         else

File: aeron-test-support/src/main/java/io/aeron/test/MediaDriverTestUtil.java
Patch:
@@ -99,8 +99,8 @@ private void deleteFiles()
         outputFilesByAeronDirectoryName.forEach(
             (aeronDirectoryName, files) ->
             {
-                IoUtil.delete(files.stdout, false);
-                IoUtil.delete(files.stderr, false);
+                IoUtil.delete(files.stdout, true);
+                IoUtil.delete(files.stderr, true);
             });
     }
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/RacingCatchupClusterTest.java
Patch:
@@ -90,7 +90,7 @@ static void followerCatchupInit(final long nowNs)
     }
 
     @Test
-    @InterruptAfter(20)
+    @InterruptAfter(40)
     @Disabled
     public void shouldCatchupIfLogPositionMovesForwardBeforeFollowersCommitPositionWhenCatchingUpNodeIsOnlyFollower()
     {

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -314,7 +314,7 @@ public static class Configuration
         /**
          * Default timeout within which a cluster backup will expect a response from a backup query.
          */
-        public static final long CLUSTER_BACKUP_RESPONSE_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(3);
+        public static final long CLUSTER_BACKUP_RESPONSE_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(5);
 
         /**
          * Timeout within which a cluster backup will expect progress.

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -611,7 +611,7 @@ void findLastMatchingRecording(
     {
         if (minRecordingId < 0)
         {
-            final String msg = "minRecordingId=" + minRecordingId + " is < 0";
+            final String msg = "minRecordingId=" + minRecordingId + " < 0";
             controlSession.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
         }
         else

File: aeron-driver/src/test/java/io/aeron/driver/UntetheredSubscriptionTest.java
Patch:
@@ -66,7 +66,8 @@ public void before()
             publisherLimit,
             rawLog,
             TERM_WINDOW_LENGTH,
-            true);
+            true,
+            new PublicationParams());
     }
 
     @Test

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveDeleteAndRestartTest.java
Patch:
@@ -52,7 +52,7 @@ public class ArchiveDeleteAndRestartTest
     private final long seed = System.nanoTime();
 
     @RegisterExtension
-    public final TestWatcher randomSeedWatcher = ArchiveTests.newWatcher(seed);
+    public final TestWatcher randomSeedWatcher = Tests.seedWatcher(seed);
 
     @RegisterExtension
     public final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -81,7 +81,7 @@ private static Stream<Arguments> threadingModes()
     private final long seed = System.nanoTime();
 
     @RegisterExtension
-    public final TestWatcher randomSeedWatcher = ArchiveTests.newWatcher(seed);
+    public final TestWatcher randomSeedWatcher = Tests.seedWatcher(seed);
 
     @RegisterExtension
     public final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();

File: aeron-agent/src/test/java/io/aeron/agent/ArchiveLoggingAgentTest.java
Patch:
@@ -83,6 +83,7 @@ public void logControlResponseProxySendResponseHook()
         testArchiveLogging(CMD_OUT_RESPONSE.name(), EnumSet.of(CMD_OUT_RESPONSE));
     }
 
+    @SuppressWarnings("try")
     private void testArchiveLogging(final String enabledEvents, final EnumSet<ArchiveEventCode> expectedEvents)
     {
         before(enabledEvents, expectedEvents);

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -68,6 +68,7 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(InterruptingTestCallback.class)
+@SuppressWarnings("try")
 public class ArchiveTest
 {
     @Test

File: aeron-driver/src/test/java/io/aeron/driver/MediaDriverTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class MediaDriverTest
 {
@@ -39,8 +40,9 @@ public void shouldPrintConfigOnStart()
         final PrintStream out = System.out;
         System.setOut(printStream);
 
-        try (MediaDriver ignore = MediaDriver.launch(context))
+        try (MediaDriver mediaDriver = MediaDriver.launch(context))
         {
+            assertTrue(mediaDriver.context().printConfigurationOnStart());
             final String result = os.toString();
             assertThat(result, containsString("printConfigurationOnStart=true"));
         }

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedBufferClaimIpcThroughput.java
Patch:
@@ -53,8 +53,8 @@ public static void main(final String[] args) throws InterruptedException
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED);
 
-        try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             Publication publication = aeron.addPublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedDualExclusiveThroughput.java
Patch:
@@ -75,8 +75,8 @@ public static void main(final String[] args) throws InterruptedException
         final String sourceUriOne = builder.controlEndpoint("localhost:20550").tags("1").build();
         final String sourceUriTwo = builder.controlEndpoint("localhost:20551").tags("2").build();
 
-        try (MediaDriver ignore = MediaDriver.launch();
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch();
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID, handler, null);
             ExclusivePublication publicationOne = aeron.addExclusivePublication(sourceUriOne, STREAM_ID);
             ExclusivePublication publicationTwo = aeron.addExclusivePublication(sourceUriTwo, STREAM_ID))

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedExclusiveBufferClaimIpcThroughput.java
Patch:
@@ -53,8 +53,8 @@ public static void main(final String[] args) throws InterruptedException
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED);
 
-        try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             Publication publication = aeron.addExclusivePublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedExclusiveIpcThroughput.java
Patch:
@@ -53,8 +53,8 @@ public static void main(final String[] args) throws InterruptedException
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED);
 
-        try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             ExclusivePublication publication = aeron.addExclusivePublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedExclusiveSpiedThroughput.java
Patch:
@@ -71,8 +71,8 @@ public static void main(final String[] args) throws InterruptedException
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .spiesSimulateConnection(true);
 
-        try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CommonContext.SPY_PREFIX + CHANNEL, STREAM_ID);
             ExclusivePublication publication = aeron.addExclusivePublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedExclusiveThroughput.java
Patch:
@@ -62,8 +62,8 @@ public static void main(final String[] args) throws InterruptedException
         final ExecutorService executor = Executors.newFixedThreadPool(2);
         final AtomicBoolean running = new AtomicBoolean(true);
 
-        try (MediaDriver ignore = MediaDriver.launch();
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch();
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             ExclusivePublication publication = aeron.addExclusivePublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedExclusiveVectoredIpcThroughput.java
Patch:
@@ -56,8 +56,8 @@ public static void main(final String[] args) throws InterruptedException
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED);
 
-        try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             ExclusivePublication publication = aeron.addExclusivePublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedIpcThroughput.java
Patch:
@@ -53,8 +53,8 @@ public static void main(final String[] args) throws InterruptedException
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED);
 
-        try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             Publication publication = aeron.addPublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedPingPong.java
Patch:
@@ -78,8 +78,8 @@ public static void main(final String[] args) throws InterruptedException
             .receiverIdleStrategy(NoOpIdleStrategy.INSTANCE)
             .senderIdleStrategy(NoOpIdleStrategy.INSTANCE);
 
-        try (MediaDriver ignored = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect())
+        try (MediaDriver mediaDriver = MediaDriver.launch(ctx);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName())))
         {
             final Thread pongThread = startPong(aeron);
             pongThread.start();

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedThroughput.java
Patch:
@@ -66,8 +66,8 @@ public static void main(final String[] args) throws InterruptedException
         final ExecutorService executor = Executors.newFixedThreadPool(2);
         final AtomicBoolean running = new AtomicBoolean(true);
 
-        try (MediaDriver ignore = MediaDriver.launch();
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch();
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID);
             Publication publication = aeron.addPublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/io/aeron/samples/FileReceiver.java
Patch:
@@ -151,8 +151,8 @@ public static void main(final String[] args)
         final AtomicBoolean running = new AtomicBoolean(true);
         SigInt.register(() -> running.set(false));
 
-        try (MediaDriver ignore = MediaDriver.launch();
-            Aeron aeron = Aeron.connect();
+        try (MediaDriver mediaDriver = MediaDriver.launch();
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID))
         {
             System.out.println("Receiving from " + CHANNEL + " on stream id " + STREAM_ID);

File: aeron-samples/src/main/java/io/aeron/samples/ImageRateSubscriber.java
Patch:
@@ -40,7 +40,8 @@ class ImageRateSubscriberValues extends ImageRateSubscriberLhsPadding
     {
         try
         {
-            TOTAL_BYTES_OFFSET = UNSAFE.objectFieldOffset(RateReporterValues.class.getDeclaredField("totalBytes"));
+            TOTAL_BYTES_OFFSET = UNSAFE.objectFieldOffset(
+                ImageRateSubscriberValues.class.getDeclaredField("totalBytes"));
         }
         catch (final Exception ex)
         {
@@ -132,6 +133,6 @@ public void run()
 
     private void onFragment(final DirectBuffer buffer, final int offset, final int length, final Header header)
     {
-        UNSAFE.putOrderedLong(this, TOTAL_BYTES_OFFSET, totalBytes + length);
+        UNSAFE.putOrderedLong(this, ImageRateSubscriberValues.TOTAL_BYTES_OFFSET, totalBytes + length);
     }
 }

File: aeron-samples/src/main/java/io/aeron/samples/LowLatencyMediaDriver.java
Patch:
@@ -34,6 +34,7 @@ public class LowLatencyMediaDriver
      *
      * @param args passed to the process which will be used for loading properties files.
      */
+    @SuppressWarnings("try")
     public static void main(final String[] args)
     {
         loadPropertiesFiles(args);

File: aeron-samples/src/main/java/io/aeron/samples/archive/ArchiveCreator.java
Patch:
@@ -56,6 +56,7 @@ public class ArchiveCreator
      *
      * @param args passed to the process.
      */
+    @SuppressWarnings("try")
     public static void main(final String[] args)
     {
         final String archiveDirName = Archive.Configuration.archiveDirName();

File: aeron-samples/src/main/java/io/aeron/samples/cluster/EchoServiceNode.java
Patch:
@@ -48,6 +48,7 @@ private static ErrorHandler errorHandler(final String context)
      *
      * @param args passed to the process.
      */
+    @SuppressWarnings("try")
     public static void main(final String[] args)
     {
         final int nodeId = parseInt(System.getProperty("aeron.cluster.tutorial.nodeId"));
@@ -75,11 +76,11 @@ public static void main(final String[] args)
             .errorHandler(errorHandler("Clustered Service"));
 
         try (
-            ClusteredMediaDriver clusteredMediaDriver = ClusteredMediaDriver.launch(
+            ClusteredMediaDriver ignore = ClusteredMediaDriver.launch(
                 clusterConfig.mediaDriverContext(),
                 clusterConfig.archiveContext(),
                 clusterConfig.consensusModuleContext());
-            ClusteredServiceContainer container = ClusteredServiceContainer.launch(
+            ClusteredServiceContainer ignore2 = ClusteredServiceContainer.launch(
                 clusterConfig.clusteredServiceContext()))
         {
             System.out.println("[" + nodeId + "] Started Cluster Node on " + hostnames.get(nodeId) + "...");

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredServiceNode.java
Patch:
@@ -125,6 +125,7 @@ private static String clusterMembers(final List<String> hostnames)
      *
      * @param args passed to the process.
      */
+    @SuppressWarnings("try")
     // tag::main[]
     public static void main(final String[] args)
     {

File: aeron-system-tests/src/test/java/io/aeron/AsyncResourceTest.java
Patch:
@@ -31,6 +31,7 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.mockito.Mockito.*;
 
+@SuppressWarnings("try")
 class AsyncResourceTest
 {
     private static final int STREAM_ID = 7777;

File: aeron-system-tests/src/test/java/io/aeron/ClientContextTest.java
Patch:
@@ -24,6 +24,7 @@
 class ClientContextTest
 {
     @Test
+    @SuppressWarnings("try")
     void shouldPreventCreatingMultipleClientsWithTheSameContext()
     {
         final MediaDriver.Context driverCtx = new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/ClientErrorHandlerTest.java
Patch:
@@ -58,6 +58,7 @@ class ClientErrorHandlerTest
 
     @Test
     @InterruptAfter(10)
+    @SuppressWarnings("try")
     void shouldHaveCorrectTermBufferLength()
     {
         final MediaDriver.Context ctx = new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -50,6 +50,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 @ExtendWith(InterruptingTestCallback.class)
+@SuppressWarnings("try")
 class ExclusivePublicationTest
 {
     private static List<String> channels()

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -79,8 +79,8 @@ void shouldGapFillWhenLossOccurs() throws Exception
 
         TestMediaDriver.enableLossGenerationOnReceive(ctx, 0.20, 0xcafebabeL, true, false);
 
-        try (TestMediaDriver ignore = TestMediaDriver.launch(ctx, watcher);
-            Aeron aeron = Aeron.connect();
+        try (TestMediaDriver mediaDriver = TestMediaDriver.launch(ctx, watcher);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(UNRELIABLE_CHANNEL, STREAM_ID);
             Publication publication = aeron.addPublication(CHANNEL, STREAM_ID))
         {

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -72,6 +72,7 @@ void after()
     @ParameterizedTest
     @MethodSource("channels")
     @InterruptAfter(10)
+    @SuppressWarnings("try")
     void shouldCallImageHandlers(final String channel)
     {
         final AtomicInteger unavailableImageCount = new AtomicInteger();
@@ -124,6 +125,7 @@ void shouldCallImageHandlers(final String channel)
     @ParameterizedTest
     @MethodSource("channels")
     @InterruptAfter(10)
+    @SuppressWarnings("try")
     void shouldCallImageHandlersWithPublisherOnDifferentClient(final String channel)
     {
         final AtomicInteger unavailableImageCount = new AtomicInteger();

File: aeron-system-tests/src/test/java/io/aeron/MinPositionSubscriptionTest.java
Patch:
@@ -82,6 +82,7 @@ void shouldJoinAtSamePositionUdpSpy()
         shouldJoinAtSamePosition(channel, SPY_PREFIX + channel);
     }
 
+    @SuppressWarnings("try")
     private void shouldJoinAtSamePosition(final String publicationChannel, final String subscriptionChannel)
     {
         try (Subscription subscriptionOne = aeron.addSubscription(subscriptionChannel, STREAM_ID);

File: aeron-system-tests/src/test/java/io/aeron/RegistrationAndOwnerTest.java
Patch:
@@ -58,8 +58,8 @@ void shouldHaveCorrectOwnershipOnEntities(final String channel)
             .dirDeleteOnStart(true);
 
         try (
-            TestMediaDriver ignore = TestMediaDriver.launch(ctx, testWatcher);
-            Aeron aeron = Aeron.connect();
+            TestMediaDriver mediaDriver = TestMediaDriver.launch(ctx, testWatcher);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Subscription subscription = aeron.addSubscription(channel, STREAM_ID);
             Publication publication = aeron.addPublication(channel, STREAM_ID);
             Counter userCounter = aeron.addCounter(1002, "Test Counter"))

File: aeron-system-tests/src/test/java/io/aeron/SpecifiedPositionPublicationTest.java
Patch:
@@ -44,8 +44,8 @@ void shouldRejectSpecifiedPositionForConcurrentPublications()
             .threadingMode(ThreadingMode.SHARED);
 
         try (
-            TestMediaDriver ignore = TestMediaDriver.launch(context, testWatcher);
-            Aeron aeron = Aeron.connect())
+            TestMediaDriver mediaDriver = TestMediaDriver.launch(context, testWatcher);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName())))
         {
             final String channel = new ChannelUriStringBuilder()
                 .media("ipc")

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -48,8 +48,8 @@ void shouldHaveCorrectTermBufferLength(final String channel)
             .ipcTermBufferLength(TEST_TERM_LENGTH * 2);
 
         try (
-            TestMediaDriver ignore = TestMediaDriver.launch(ctx, testWatcher);
-            Aeron aeron = Aeron.connect();
+            TestMediaDriver mediaDriver = TestMediaDriver.launch(ctx, testWatcher);
+            Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriver.aeronDirectoryName()));
             Publication publication = aeron.addPublication(channel, STREAM_ID))
         {
             assertEquals(TEST_TERM_LENGTH, publication.termBufferLength());

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -408,6 +408,7 @@ public void purgeRecordingFailsIfRecordingIsActive()
 
     @Test
     @InterruptAfter(10)
+    @SuppressWarnings("try")
     public void purgeRecordingFailsIfThereAreActiveReplays()
     {
         final String messagePrefix = "Message-Prefix-";

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiModuleSharedDriverTest.java
Patch:
@@ -49,9 +49,9 @@ public class MultiModuleSharedDriverTest
     @RegisterExtension
     public final SystemTestWatcher systemTestWatcher = new SystemTestWatcher();
 
-    @SuppressWarnings("methodlength")
     @Test
     @InterruptAfter(20)
+    @SuppressWarnings({ "try", "methodlength"})
     public void shouldSupportTwoSingleNodeClusters()
     {
         final MediaDriver.Context driverCtx = new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/test/driver/TestMediaDriverTest.java
Patch:
@@ -56,12 +56,13 @@ void connectToCMediaDriverWithoutSpecifyingAeronDir()
 
         final MediaDriver.Context context = new MediaDriver.Context().dirDeleteOnStart(true).dirDeleteOnShutdown(false);
         assertEquals(CommonContext.getAeronDirectoryName(), context.aeronDirectoryName());
-        try (TestMediaDriver ignore = CTestMediaDriver.launch(context, false, null);
+        try (TestMediaDriver mediaDriver = CTestMediaDriver.launch(context, false, null);
             Aeron aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(context.aeronDirectoryName())))
         {
             final File aeronDirectory = aeron.context().aeronDirectory();
             assertNotNull(aeronDirectory);
             assertTrue(aeronDirectory.exists());
+            assertNotNull(mediaDriver);
         }
         finally
         {

File: aeron-test-support/src/main/java/io/aeron/test/NetworkTestingUtil.java
Patch:
@@ -26,6 +26,7 @@ public class NetworkTestingUtil
      * @param address The address to attempt to bind to.
      * @return null if successful, error message otherwise.
      */
+    @SuppressWarnings("try")
     public static String isBindAddressAvailable(final String address)
     {
         try (ServerSocket ignored = new ServerSocket(0, 1024, InetAddress.getByName(address)))

File: aeron-test-support/src/main/java/io/aeron/test/launcher/RemoteLaunchClient.java
Patch:
@@ -40,6 +40,7 @@ public static RemoteLaunchClient connect(final String host, final int port) thro
     {
         final RemoteLaunchClient remoteLaunchClient = new RemoteLaunchClient(host, port);
         remoteLaunchClient.init();
+
         return remoteLaunchClient;
     }
 
@@ -84,7 +85,7 @@ public void executeBlocking(final OutputStream out, final String... command) thr
         }
     }
 
-    public void close() throws Exception
+    public void close() throws IOException
     {
         clientChannel.close();
     }

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -33,7 +33,6 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.file.StandardOpenOption;
-import java.nio.file.attribute.FileAttribute;
 import java.util.EnumSet;
 
 import static io.aeron.archive.Archive.segmentFileName;
@@ -68,7 +67,6 @@ enum State
     }
 
     private static final EnumSet<StandardOpenOption> FILE_OPTIONS = EnumSet.of(READ);
-    private static final FileAttribute<?>[] NO_ATTRIBUTES = new FileAttribute[0];
 
     private final long connectDeadlineMs;
     private final long correlationId;
@@ -569,7 +567,7 @@ private void openRecordingSegment() throws IOException
             }
         }
 
-        fileChannel = FileChannel.open(segmentFile.toPath(), FILE_OPTIONS, NO_ATTRIBUTES);
+        fileChannel = FileChannel.open(segmentFile.toPath(), FILE_OPTIONS);
     }
 
     static boolean notHeaderAligned(

File: aeron-client/src/main/java/io/aeron/LogBuffers.java
Patch:
@@ -28,7 +28,6 @@
 import java.nio.channels.FileChannel;
 import java.nio.file.Paths;
 import java.nio.file.StandardOpenOption;
-import java.nio.file.attribute.FileAttribute;
 import java.util.EnumSet;
 
 import static io.aeron.logbuffer.LogBufferDescriptor.*;
@@ -43,7 +42,6 @@
 public final class LogBuffers implements AutoCloseable
 {
     private static final EnumSet<StandardOpenOption> FILE_OPTIONS = EnumSet.of(READ, WRITE, SPARSE);
-    private static final FileAttribute<?>[] NO_ATTRIBUTES = new FileAttribute[0];
 
     private long lingerDeadlineNs = Long.MAX_VALUE;
     private int refCount;
@@ -67,7 +65,7 @@ public LogBuffers(final String logFileName)
 
         try
         {
-            fileChannel = FileChannel.open(Paths.get(logFileName), FILE_OPTIONS, NO_ATTRIBUTES);
+            fileChannel = FileChannel.open(Paths.get(logFileName), FILE_OPTIONS);
             final long logLength = fileChannel.size();
 
             if (logLength < Integer.MAX_VALUE)

File: aeron-driver/src/main/java/io/aeron/driver/buffer/MappedRawLog.java
Patch:
@@ -28,7 +28,6 @@
 import java.nio.MappedByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.file.StandardOpenOption;
-import java.nio.file.attribute.FileAttribute;
 import java.util.EnumSet;
 
 import static io.aeron.logbuffer.LogBufferDescriptor.*;
@@ -44,7 +43,6 @@ class MappedRawLog implements RawLog
     private static final int ONE_GIG = 1 << 30;
     private static final EnumSet<StandardOpenOption> FILE_OPTIONS = EnumSet.of(CREATE_NEW, READ, WRITE);
     private static final EnumSet<StandardOpenOption> SPARSE_FILE_OPTIONS = EnumSet.of(CREATE_NEW, READ, WRITE, SPARSE);
-    private static final FileAttribute<?>[] NO_ATTRIBUTES = new FileAttribute[0];
 
     private final int termLength;
     private final UnsafeBuffer[] termBuffers = new UnsafeBuffer[PARTITION_COUNT];
@@ -68,7 +66,7 @@ class MappedRawLog implements RawLog
 
         final EnumSet<StandardOpenOption> options = useSparseFiles ? SPARSE_FILE_OPTIONS : FILE_OPTIONS;
 
-        try (FileChannel logChannel = FileChannel.open(logFile.toPath(), options, NO_ATTRIBUTES))
+        try (FileChannel logChannel = FileChannel.open(logFile.toPath(), options))
         {
             if (!useSparseFiles)
             {

File: aeron-system-tests/src/test/java/io/aeron/PrintEnvInfoTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
-class PrintEnvInfo
+class PrintEnvInfoTest
 {
     @Disabled
     @Test

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -170,7 +170,7 @@ void sortRecordingLogIsANoOpIfRecordLogIsEmpty(final @TempDir Path emptyClusterD
     }
 
     @Test
-    void sortRecordingLogIsANoOpIfRecordDoesNotExist(final @TempDir Path emptyClusterDir) throws IOException
+    void sortRecordingLogIsANoOpIfRecordDoesNotExist(final @TempDir Path emptyClusterDir)
     {
         final File clusterDir = emptyClusterDir.toFile();
         final Path logFile = emptyClusterDir.resolve(RecordingLog.RECORDING_LOG_FILE_NAME);

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusterMarkFile;
 import io.aeron.cluster.service.ClusterTerminationException;
+import io.aeron.security.AuthorisationService;
 import io.aeron.security.DefaultAuthenticatorSupplier;
 import io.aeron.status.ReadableCounter;
 import io.aeron.test.Tests;
@@ -72,6 +73,7 @@ public class ConsensusModuleAgentTest
         .aeron(mockAeron)
         .clusterMemberId(0)
         .authenticatorSupplier(new DefaultAuthenticatorSupplier())
+        .authorisationServiceSupplier(() -> AuthorisationService.DENY_ALL)
         .clusterMarkFile(mock(ClusterMarkFile.class))
         .archiveContext(new AeronArchive.Context())
         .logPublisher(mockLogPublisher)

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -280,7 +280,7 @@ private void truncateRecordingLogAndDeleteMarkFiles(final int index) throws IOEx
                 throw new IllegalStateException("no term found in recording log");
             }
 
-            try (RecordingLog newRecordingLog = new RecordingLog(new File(baseDirName), false))
+            try (RecordingLog newRecordingLog = new RecordingLog(new File(baseDirName), true))
             {
                 newRecordingLog.appendTerm(
                     lastTermEntry.recordingId,

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -2246,7 +2246,7 @@ public Context sessionTimeoutNs(final long sessionTimeoutNs)
          */
         public long sessionTimeoutNs()
         {
-            return sessionTimeoutNs;
+            return CommonContext.checkDebugTimeout(sessionTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-system-tests/src/test/java/io/aeron/log/EventLogExtension.java
Patch:
@@ -20,6 +20,8 @@
 import org.junit.jupiter.api.extension.BeforeEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
 
+import java.lang.reflect.Method;
+
 /**
  * JUnit extension to start and reset the CollectingEventLogReaderAgent.
  */
@@ -31,7 +33,7 @@ public class EventLogExtension implements BeforeEachCallback, AfterEachCallback
     public void beforeEach(final ExtensionContext context)
     {
         final String className = context.getTestClass().map(Class::getSimpleName).orElse("<UNKNOWN>");
-        final String methodName = context.getTestClass().map(Class::getSimpleName).orElse(context.getDisplayName());
+        final String methodName = context.getTestMethod().map(Method::getName).orElse(context.getDisplayName());
         Tests.startLogCollecting("TEST: " + className + "." + methodName);
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -674,7 +674,7 @@ public boolean matchesTag(final UdpChannel udpChannel)
         }
 
         throw new IllegalArgumentException(
-            "matching tag=" + tag + " has explicit endpoint or control - " + uriStr + " <> " + udpChannel.uriStr);
+            "matching tag=" + tag + " has explicit endpoint or control: " + uriStr + " <> " + udpChannel.uriStr);
     }
 
     /**

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -165,6 +165,8 @@ public void shouldAbortClusterAndRestart()
         assertFalse(cluster.node(0).service().wasSnapshotLoaded());
         assertFalse(cluster.node(1).service().wasSnapshotLoaded());
         assertFalse(cluster.node(2).service().wasSnapshotLoaded());
+
+        fail("Manual failure");
     }
 
     @Test

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleContextCloseTests.java
Patch:
@@ -48,13 +48,13 @@ class ConsensusModuleContextCloseTests
     private final Counter commitPosition = mock(Counter.class);
     private final InvalidNameException commitPositionException = new InvalidNameException();
     private final Counter clusterNodeRole = mock(Counter.class);
-    private final AssertionError clusterNodeRoleException = new AssertionError();
+    private final UnsupportedOperationException clusterNodeRoleException = new UnsupportedOperationException();
     private final Counter controlToggle = mock(Counter.class);
     private final IllegalArgumentException controlToggleException = new IllegalArgumentException();
     private final Counter snapshotCounter = mock(Counter.class);
     private final IndexOutOfBoundsException snapshotCounterException = new IndexOutOfBoundsException();
     private final Counter timedOutClientCounter = mock(Counter.class);
-    private final UnknownError timedOutClientCounterException = new UnknownError();
+    private final IllegalMonitorStateException timedOutClientCounterException = new IllegalMonitorStateException();
     private ConsensusModule.Context context;
 
     @BeforeEach
@@ -145,4 +145,4 @@ void doesNotOwnAeronClientAndClientIsClosed() throws Exception
         inOrder.verify(aeron).isClosed();
         inOrder.verifyNoMoreInteractions();
     }
-}
\ No newline at end of file
+}

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -293,7 +293,7 @@ void onCanvassPosition(
                     case LEADER_INIT:
                     case LEADER_READY:
                     case LEADER_REPLAY:
-                        publishNewLeadershipTerm(follower, logLeadershipTermId, ctx.clusterClock().timeNanos());
+                        publishNewLeadershipTerm(follower, logLeadershipTermId, ctx.clusterClock().time());
                         break;
                 }
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -683,7 +683,7 @@ private void joinActiveLog(final ActiveLogEvent activeLog)
             final Image image = awaitImage(activeLog.sessionId, logSubscription);
             if (image.joinPosition() != logPosition)
             {
-                throw new ClusterException("Cluster log must be contagious: " +
+                throw new ClusterException("Cluster log must be contiguous: " +
                     "expectedPosition=" + logPosition + " joinPosition=" + image.joinPosition());
             }
 

File: aeron-samples/src/main/java/io/aeron/samples/StreamStat.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.PrintStream;
 import java.util.*;
 
-import static io.aeron.driver.status.PerImageIndicator.PER_IMAGE_TYPE_ID;
 import static io.aeron.driver.status.PublisherLimit.PUBLISHER_LIMIT_TYPE_ID;
 import static io.aeron.driver.status.PublisherPos.PUBLISHER_POS_TYPE_ID;
 import static io.aeron.driver.status.ReceiverPos.RECEIVER_POS_TYPE_ID;
@@ -77,7 +76,7 @@ public Map<StreamCompositeKey, List<StreamPosition>> snapshot()
             (counterId, typeId, keyBuffer, label) ->
             {
                 if ((typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID) ||
-                    typeId == SENDER_LIMIT_TYPE_ID || typeId == PER_IMAGE_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID)
+                    typeId == SENDER_LIMIT_TYPE_ID || typeId == PUBLISHER_POS_TYPE_ID)
                 {
                     final StreamCompositeKey key = new StreamCompositeKey(
                         keyBuffer.getInt(SESSION_ID_OFFSET),
@@ -173,7 +172,7 @@ public int sessionId()
         /**
          * The stream id within a channel.
          *
-         * @return  stream id within a channel.
+         * @return stream id within a channel.
          */
         public int streamId()
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -785,7 +785,7 @@ private void loadState(final Image image, final AeronArchive archive)
         if (SemanticVersion.major(ctx.appVersion()) != SemanticVersion.major(appVersion))
         {
             throw new ClusterException(
-                "incompatible version: " + SemanticVersion.toString(ctx.appVersion()) +
+                "incompatible app version: " + SemanticVersion.toString(ctx.appVersion()) +
                 " snapshot=" + SemanticVersion.toString(appVersion));
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -2011,8 +2011,8 @@ private boolean isLowStorageSpace(final long correlationId, final ControlSession
     {
         try
         {
-            final long usableSpace = ctx.archiveFileStore().getUsableSpace();
             final long threshold = ctx.lowStorageSpaceThreshold();
+            final long usableSpace = ctx.archiveFileStore().getUsableSpace();
 
             if (usableSpace <= threshold)
             {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2475,6 +2475,7 @@ private void loadSnapshot(final RecordingLog.Snapshot snapshot, final AeronArchi
 
                     if (image.isClosed())
                     {
+                        pollArchiveEvents();
                         throw new ClusterException("snapshot ended unexpectedly: " + image);
                     }
                 }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -771,12 +771,11 @@ private void loadState(final Image image, final AeronArchive archive)
 
             if (fragments == 0)
             {
+                archive.checkForErrorResponse();
                 if (image.isClosed())
                 {
                     throw new ClusterException("snapshot ended unexpectedly: " + image);
                 }
-
-                archive.checkForErrorResponse();
             }
 
             idle(fragments);

File: aeron-cluster/src/test/java/io/aeron/cluster/ElectionTest.java
Patch:
@@ -111,7 +111,6 @@ public void shouldElectSingleNodeClusterLeader()
         election.doWork(clock.nanoTime());
 
         verify(consensusModuleAgent).joinLogAsLeader(eq(newLeadershipTermId), eq(logPosition), anyInt(), eq(true));
-        verify(recordingLog).isUnknown(newLeadershipTermId);
         verify(recordingLog).appendTerm(RECORDING_ID, newLeadershipTermId, logPosition, clock.nanoTime());
         verify(electionStateCounter).setOrdered(ElectionState.LEADER_READY.code());
     }

File: aeron-system-tests/src/test/java/io/aeron/NameReResolutionTest.java
Patch:
@@ -42,8 +42,7 @@
 import static io.aeron.driver.status.SystemCounterDescriptor.RESOLUTION_CHANGES;
 import static io.aeron.test.driver.RedirectingNameResolver.*;
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
 public class NameReResolutionTest
@@ -101,7 +100,6 @@ public void before()
         final MediaDriver.Context context = new MediaDriver.Context()
             .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
             .dirDeleteOnStart(true)
-            .dirDeleteOnShutdown(true)
             .threadingMode(ThreadingMode.SHARED)
             .nameResolver(new RedirectingNameResolver(STUB_LOOKUP_CONFIGURATION));
 
@@ -427,6 +425,7 @@ public void shouldReResolveMdcDynamicControlOnManualDestinationSubscriptionOnNot
     @InterruptAfter(20)
     public void shouldReportErrorOnReResolveFailure() throws IOException
     {
+        systemTestWatcher.ignoreErrorsMatching(s -> s.contains("Unable to resolve host"));
         buffer.putInt(0, 1);
 
         subscription = client.addSubscription(FIRST_SUBSCRIPTION_URI, STREAM_ID);

File: aeron-test-support/src/main/java/io/aeron/test/MediaDriverTestUtil.java
Patch:
@@ -31,7 +31,7 @@ class MediaDriverTestUtil
 {
     private final Map<String, ProcessDetails> outputFilesByAeronDirectoryName = new LinkedHashMap<>();
 
-    public void testFailed(final ExtensionContext context, final Throwable cause)
+    public void testFailed()
     {
         dumpMediaDriverDiagnostics();
     }
@@ -79,7 +79,7 @@ private void printEnvironment(final Map<String, String> environment, final Print
             });
     }
 
-    public void testSuccessful(final ExtensionContext context)
+    public void testSuccessful()
     {
         if (TestMediaDriver.shouldRunCMediaDriver())
         {

File: aeron-system-tests/src/test/java/io/aeron/AsyncResourceTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.exceptions.RegistrationException;
 import io.aeron.test.SlowTest;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.ErrorHandler;
 import org.junit.jupiter.api.Test;
@@ -37,7 +37,7 @@ class AsyncResourceTest
     private static final String AERON_IPC = "aeron:ipc";
 
     @RegisterExtension
-    final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @Test
     @Timeout(10)

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableBoolean;
@@ -54,7 +54,7 @@ private static List<String> channels()
     private static final int MESSAGE_LENGTH = 200;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -26,8 +26,8 @@
 import io.aeron.status.ChannelEndpointStatus;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.ErrorHandler;
@@ -97,7 +97,7 @@ else if (ex instanceof InvalidChannelException)
         };
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @BeforeEach
     public void before()

File: aeron-system-tests/src/test/java/io/aeron/ChannelValidationTests.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
@@ -52,7 +52,7 @@
 public class ChannelValidationTests
 {
     @RegisterExtension
-    public final MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher watcher = new SystemTestWatcher();
 
     private final MediaDriver.Context context = new MediaDriver.Context();
     {

File: aeron-system-tests/src/test/java/io/aeron/ClientErrorHandlerTest.java
Patch:
@@ -34,8 +34,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.ErrorHandler;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -54,7 +54,7 @@ public class ClientErrorHandlerTest
     private static final String CHANNEL = "aeron:ipc";
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @Test
     @InterruptAfter(10)

File: aeron-system-tests/src/test/java/io/aeron/ControlledMessageTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
@@ -44,7 +44,7 @@ public class ControlledMessageTest
     private static final int PAYLOAD_LENGTH = 10;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.status.ReadableCounter;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -50,7 +50,7 @@ public class CounterTest
     private TestMediaDriver driver;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private volatile ReadableCounter readableCounter;
 

File: aeron-system-tests/src/test/java/io/aeron/ErrorHandlerTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.hamcrest.Matcher;
@@ -41,7 +41,7 @@
 public class ErrorHandlerTest
 {
     @RegisterExtension
-    public final MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher watcher = new SystemTestWatcher();
 
     private final MediaDriver.Context context = new MediaDriver.Context();
     {

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -21,8 +21,8 @@
 import io.aeron.logbuffer.RawBlockHandler;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;
@@ -67,7 +67,7 @@ private static List<String> channels()
     private final UnsafeBuffer srcBuffer = new UnsafeBuffer(new byte[65 * 1024]);
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final MediaDriver.Context driverContext = new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
@@ -57,7 +57,7 @@ private static List<String> channels()
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final FragmentHandler mockFragmentHandler = mock(FragmentHandler.class);
 

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -25,8 +25,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -56,7 +56,7 @@ public class GapFillLossTest
     private static final AtomicLong FINAL_POSITION = new AtomicLong(Long.MAX_VALUE);
 
     @RegisterExtension
-    final MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
+    final SystemTestWatcher watcher = new SystemTestWatcher();
 
     @Test
     @InterruptAfter(10)

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.junit.jupiter.api.AfterEach;
@@ -50,7 +50,7 @@ private static List<String> channels()
     private static final int STREAM_ID = 1001;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/LifecycleTest.java
Patch:
@@ -18,8 +18,8 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -31,7 +31,7 @@
 public class LifecycleTest
 {
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @Test
     @InterruptAfter(10)

File: aeron-system-tests/src/test/java/io/aeron/MaxFlowControlStrategySystemTest.java
Patch:
@@ -24,8 +24,8 @@
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
@@ -71,7 +71,7 @@ public class MaxFlowControlStrategySystemTest
     private final FragmentHandler fragmentHandlerB = mock(FragmentHandler.class);
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private void launch()
     {

File: aeron-system-tests/src/test/java/io/aeron/MaxPositionPublicationTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -44,7 +44,7 @@ public class MaxPositionPublicationTest
     private final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocate(MESSAGE_LENGTH));
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -21,8 +21,8 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
@@ -53,7 +53,7 @@ public class MemoryOrderingTest
     private static volatile String failedMessage = null;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/MinPositionSubscriptionTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -39,7 +39,7 @@ public class MinPositionSubscriptionTest
     private static final int STREAM_ID = 1001;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -21,10 +21,10 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.SlowTest;
-import io.aeron.test.driver.TestMediaDriver;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
@@ -59,7 +59,7 @@ public class PongTest
     private final FragmentHandler pongHandler = mock(FragmentHandler.class);
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @BeforeEach
     public void before()

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -25,8 +25,8 @@
 import io.aeron.logbuffer.RawBlockHandler;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
@@ -70,7 +70,7 @@ private static List<String> channels()
     }
 
     @RegisterExtension
-    public final MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher watcher = new SystemTestWatcher();
 
     private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.SHARED;

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;
@@ -54,7 +54,7 @@ private static List<String> channels()
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .threadingMode(ThreadingMode.SHARED)

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
@@ -53,7 +53,7 @@ public class PublishFromArbitraryPositionTest
     private final long seed = System.nanoTime();
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/RegistrationAndOwnerTest.java
Patch:
@@ -31,8 +31,8 @@
 package io.aeron;
 
 import io.aeron.driver.MediaDriver;
-import io.aeron.test.*;
-import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.SystemTestWatcher;
+import io.aeron.test.Tests;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -47,7 +47,7 @@ public class RegistrationAndOwnerTest
     private static final int STREAM_ID = 1001;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @ParameterizedTest
     @ValueSource(strings = { "aeron:udp?endpoint=localhost:24325", "aeron:ipc" })

File: aeron-system-tests/src/test/java/io/aeron/ResolvedEndpointSystemTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -52,7 +52,7 @@ public class ResolvedEndpointSystemTest
     private Aeron client;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @BeforeEach
     void before()

File: aeron-system-tests/src/test/java/io/aeron/SpecifiedPositionPublicationTest.java
Patch:
@@ -19,7 +19,7 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.exceptions.RegistrationException;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.ErrorHandler;
 import org.junit.jupiter.api.Test;
@@ -31,7 +31,7 @@
 class SpecifiedPositionPublicationTest
 {
     @RegisterExtension
-    final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @Test
     void shouldRejectSpecifiedPositionForConcurrentPublications()

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;
@@ -76,7 +76,7 @@ private static List<String> channels()
     private final FragmentHandler fragmentHandlerSub = (buffer1, offset, length, header) -> fragmentCountSub.value++;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher watcher = new SystemTestWatcher();
 
     private void launch()
     {

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -21,8 +21,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;
@@ -62,7 +62,7 @@ private static List<String> channels()
     private final FragmentHandler fragmentHandlerSub = (buffer1, offset, length, header) -> fragmentCountSub.value++;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.aeron.driver.MediaDriver;
 import io.aeron.logbuffer.LogBufferDescriptor;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.junit.jupiter.api.extension.RegisterExtension;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -32,7 +32,7 @@ public class TermBufferLengthTest
     private static final int STREAM_ID = 1001;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     @ParameterizedTest
     @ValueSource(strings = {

File: aeron-system-tests/src/test/java/io/aeron/TwoBufferOfferMessageTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableReference;
@@ -41,7 +41,7 @@ public class TwoBufferOfferMessageTest
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final MediaDriver.Context driverContext = new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -21,8 +21,8 @@
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.InterruptAfter;
 import io.aeron.test.InterruptingTestCallback;
+import io.aeron.test.SystemTestWatcher;
 import io.aeron.test.Tests;
-import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -58,7 +58,7 @@ private static List<String> channels()
     private static final int MESSAGE_LENGTH = 512 - DataHeaderFlyweight.HEADER_LENGTH;
 
     @RegisterExtension
-    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final SystemTestWatcher testWatcher = new SystemTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-test-support/src/main/java/io/aeron/test/InterruptingTestCallback.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.jupiter.api.extension.AfterEachCallback;
 import org.junit.jupiter.api.extension.BeforeEachCallback;
 import org.junit.jupiter.api.extension.ExtensionContext;
+import org.junit.platform.commons.util.RuntimeUtils;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
@@ -41,7 +42,7 @@ public void beforeEach(final ExtensionContext context)
         timer = null;
         final InterruptAfter annotation = context.getRequiredTestMethod().getAnnotation(InterruptAfter.class);
 
-        if (null != annotation)
+        if (null != annotation && !RuntimeUtils.isDebugMode())
         {
             final Thread testThread = Thread.currentThread();
             timer = scheduler.schedule(testThread::interrupt, annotation.value(), annotation.unit());

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -2469,7 +2469,7 @@ public String toString()
                 "\n    dataBuffer=" + dataBuffer +
                 "\n    replayBuffer=" + replayBuffer +
                 "\n    recordChecksumBuffer=" + recordChecksumBuffer +
-                '}';
+                "\n}";
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -1603,7 +1603,7 @@ public String toString()
                 "\n    shutdownSignalBarrier=" + shutdownSignalBarrier +
                 "\n    terminationHook=" + terminationHook +
                 "\n    eventsListener=" + eventsListener +
-                '}';
+                "\n}";
         }
 
         private void concludeMarkFile()

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -3211,7 +3211,7 @@ public String toString()
                 "\n    logPublisher=" + logPublisher +
                 "\n    egressPublisher=" + egressPublisher +
                 "\n    isLogMdc=" + isLogMdc +
-                '}';
+                "\n}";
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/buffer/FileStoreLogFactory.java
Patch:
@@ -166,7 +166,7 @@ private void checkStorage(final long logLength)
             if (usableSpace <= lowStorageWarningThreshold)
             {
                 final String msg =
-                    "space is running low in threshold=" + lowStorageWarningThreshold +
+                    "space is running low: threshold=" + lowStorageWarningThreshold +
                     " usable=" + usableSpace + " in " + fileStore;
 
                 errorHandler.onError(new AeronException(msg, AeronException.Category.WARN));

File: aeron-driver/src/main/java/io/aeron/driver/buffer/FileStoreLogFactory.java
Patch:
@@ -166,7 +166,7 @@ private void checkStorage(final long logLength)
             if (usableSpace <= lowStorageWarningThreshold)
             {
                 final String msg =
-                    "space is running low in threshold= " + lowStorageWarningThreshold +
+                    "space is running low in threshold=" + lowStorageWarningThreshold +
                     " usable=" + usableSpace + " in " + fileStore;
 
                 errorHandler.onError(new AeronException(msg, AeronException.Category.WARN));

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestNode.java
Patch:
@@ -377,8 +377,8 @@ public static class TestService extends StubClusteredService
         static final int SNAPSHOT_FRAGMENT_COUNT = 500;
         static final int SNAPSHOT_MSG_LENGTH = 1000;
 
-        protected volatile boolean wasSnapshotTaken = false;
-        protected volatile boolean wasSnapshotLoaded = false;
+        volatile boolean wasSnapshotTaken = false;
+        volatile boolean wasSnapshotLoaded = false;
         private int index;
         private volatile boolean hasReceivedUnexpectedMessage = false;
         private volatile Cluster.Role roleChangedTo = null;

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -339,7 +339,9 @@ private void testSeedRecordingLogFromSnapshot(final Path emptyClusterDir, final
         }
 
         assertArrayEquals(logContents, Files.readAllBytes(backupLogFile));
-        assertEquals(logLastModifiedTime, Files.getLastModifiedTime(backupLogFile));
+        // compare up to millis, because upon copy file timestamp seems to be truncated
+        // e.g. expected: <2021-09-27T09:49:22.756944756Z> but was: <2021-09-27T09:49:22.756944Z>
+        assertEquals(logLastModifiedTime.toMillis(), Files.getLastModifiedTime(backupLogFile).toMillis());
     }
 
     static class CapturingPrintStream

File: aeron-cluster/src/main/java/io/aeron/cluster/PriorityHeapTimerService.java
Patch:
@@ -27,10 +27,10 @@
  * <p>
  * <b>Caveats</b>
  * <p>
- * Timers that expire in the same tick are not be ordered with one another. As ticks are
- * fairly coarse resolution normally, this means that some timers may expire out of order.
+ * Timers with the same deadline are not be ordered with one another. In contrast, the timers with different deadlines
+ * are guaranteed to expire in order even after Cluster restart, i.e. when the deadlines are in the past.
  * <p>
- * <b>Note:</b> Not threadsafe.
+ * <b>Note:</b> Not thread safe.
  */
 public final class PriorityHeapTimerService implements TimerService
 {

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterNetworkTopologyTest.java
Patch:
@@ -154,6 +154,7 @@ void shouldGetEchoFromCluster(
     {
         assertNotNull(hostnames);
         assertEquals(3, hostnames.size());
+        setupDataCollection(3);
         final String ingressEndpoints = ingressChannel.contains("endpoint") ?
             null : BasicAuctionClusterClient.ingressEndpoints(hostnames);
 

File: aeron-test-support/src/main/java/io/aeron/test/launcher/RemoteLaunchServer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.test.launcher;
 
+import io.aeron.test.NullOutputStream;
 import org.agrona.CloseHelper;
 
 import java.io.*;
@@ -397,7 +398,7 @@ private PrintStream parseBaseDirectory(final String[] command)
                 }
             }
 
-            return null;
+            return new PrintStream(new NullOutputStream());
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/ErrorHandlerTest.java
Patch:
@@ -36,7 +36,6 @@
 
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 @ExtendWith(InterruptingTestCallback.class)
 public class ErrorHandlerTest
@@ -97,9 +96,8 @@ void shouldReportToErrorHandlerAndDistinctErrorLog() throws IOException
             containsString("mtuLength="),
             containsString("> initialWindowLength="));
 
+        Tests.await(() -> null != throwableRef.get());
         SystemTests.waitForErrorToOccur(driver.aeronDirectoryName(), exceptionMessageMatcher, Tests.SLEEP_1_MS);
-
-        assertNotNull(throwableRef.get());
     }
 
     private void addPublication(final String channel, final int streamId)

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -32,7 +32,6 @@
 import java.io.PrintStream;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;
-import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Map;
@@ -911,8 +910,7 @@ public static void saveExistingErrors(
         try
         {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            final int observations =
-                printErrorLog(errorBuffer, new PrintStream(baos, false, StandardCharsets.US_ASCII));
+            final int observations = printErrorLog(errorBuffer, new PrintStream(baos, false, "US-ASCII"));
             if (observations > 0)
             {
                 final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSSZ");

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -931,8 +931,7 @@ public static ErrorHandler setupErrorHandler(
                 }
                 catch (final Throwable t)
                 {
-                    // Not much more we can do if the user's error handler fails.
-                    t.printStackTrace();
+                    loggingErrorHandler.onError(t);
                 }
                 loggingErrorHandler.onError(throwable);
             };

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredService.java
Patch:
@@ -111,11 +111,11 @@ public void onSessionMessage(
     // tag::takeSnapshot[]
     public void onTakeSnapshot(final ExclusivePublication snapshotPublication)
     {
-        snapshotBuffer.putLong(CUSTOMER_ID_OFFSET, auction.getCurrentWinningCustomerId());    // <1>
-        snapshotBuffer.putLong(PRICE_OFFSET, auction.getBestPrice());
+        snapshotBuffer.putLong(SNAPSHOT_CUSTOMER_ID_OFFSET, auction.getCurrentWinningCustomerId());  // <1>
+        snapshotBuffer.putLong(SNAPSHOT_PRICE_OFFSET, auction.getBestPrice());
 
         idleStrategy.reset();
-        while (snapshotPublication.offer(snapshotBuffer, 0, SNAPSHOT_MESSAGE_LENGTH) < 0)     // <2>
+        while (snapshotPublication.offer(snapshotBuffer, 0, SNAPSHOT_MESSAGE_LENGTH) < 0)            // <2>
         {
             idleStrategy.idle();
         }

File: aeron-test-support/src/test/java/io/aeron/test/DataCollectorTest.java
Patch:
@@ -52,7 +52,7 @@ void throwsIllegalArgumentExceptionIfTargetDirectoryIsAFile(final @TempDir Path
     void addFileThrowsNullPointerExceptionIfFileIsNull()
     {
         final DataCollector dataCollector = new DataCollector();
-        assertThrows(NullPointerException.class, () -> dataCollector.add(null));
+        assertThrows(NullPointerException.class, () -> dataCollector.add((Path)null));
     }
 
     @Test

File: aeron-test-support/src/main/java/io/aeron/test/driver/TestMediaDriver.java
Patch:
@@ -45,7 +45,7 @@ static void notSupportedOnCMediaDriver(final String reason)
     static TestMediaDriver launch(final MediaDriver.Context context, final DriverOutputConsumer driverOutputConsumer)
     {
         return shouldRunCMediaDriver() ?
-            CTestMediaDriver.launch(context, driverOutputConsumer) : JavaTestMediaDriver.launch(context);
+            CTestMediaDriver.launch(context, true, driverOutputConsumer) : JavaTestMediaDriver.launch(context);
     }
 
     static void enableLossGenerationOnReceive(

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestNode.java
Patch:
@@ -109,6 +109,9 @@ public void environmentVariables(
             if (clusterErrorFile.exists())
             {
                 clusterErrorMmap = IoUtil.mapExistingFile(clusterErrorFile, "cluster error log file");
+                // Erase existing errors
+                final UnsafeBuffer unsafeBuffer = new UnsafeBuffer(clusterErrorMmap);
+                unsafeBuffer.setMemory(0, unsafeBuffer.capacity(), (byte)0);
             }
             else
             {

File: aeron-system-tests/src/test/java/io/aeron/test/driver/TestMediaDriverTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.agrona.IoUtil;
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.Timeout;
 
 import java.io.File;
 
@@ -28,7 +27,6 @@
 class TestMediaDriverTest
 {
     @Test
-    @Timeout(10)
     void countersReaderReturnsTheSameInstanceForTheEntireLifetimeOfTheDriver()
     {
         final File aeronDirectory;
@@ -37,7 +35,6 @@ void countersReaderReturnsTheSameInstanceForTheEntireLifetimeOfTheDriver()
         {
             aeronDirectory = driver.context().aeronDirectory();
             assertNotNull(aeronDirectory);
-            assertTrue(aeronDirectory.exists());
 
             final CountersReader countersReader = driver.counters();
             assertNotNull(countersReader);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotTaker.java
Patch:
@@ -23,7 +23,8 @@
 import org.agrona.concurrent.AgentInvoker;
 import org.agrona.concurrent.IdleStrategy;
 
-class ConsensusModuleSnapshotTaker extends SnapshotTaker implements ExpandableRingBuffer.MessageConsumer
+class ConsensusModuleSnapshotTaker extends SnapshotTaker implements ExpandableRingBuffer.MessageConsumer,
+    TimerService.TimerSnapshotTaker
 {
     private static final int ENCODED_TIMER_LENGTH = MessageHeaderEncoder.ENCODED_LENGTH + TimerEncoder.BLOCK_LENGTH;
 
@@ -114,7 +115,7 @@ void snapshotSession(final ClusterSession session)
         }
     }
 
-    void snapshotTimer(final long correlationId, final long deadline)
+    public void snapshotTimer(final long correlationId, final long deadline)
     {
         idleStrategy.reset();
         while (true)

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -65,6 +65,7 @@ public class ConsensusModuleAgentTest
         .clusterNodeRoleCounter(mock(Counter.class))
         .timedOutClientCounter(mockTimedOutClientCounter)
         .idleStrategySupplier(NoOpIdleStrategy::new)
+        .timerServiceSupplier(timerHandler -> mock(TimerService.class))
         .aeron(mockAeron)
         .clusterMemberId(0)
         .authenticatorSupplier(new DefaultAuthenticatorSupplier())

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -1971,7 +1971,7 @@ public String build()
 
         if (null != linger)
         {
-            sb.append(LINGER_PARAM_NAME).append('=').append(linger.intValue()).append('|');
+            sb.append(LINGER_PARAM_NAME).append('=').append(linger).append('|');
         }
 
         if (null != alias)

File: aeron-agent/src/test/java/io/aeron/agent/DriverEventDissectorTest.java
Patch:
@@ -651,7 +651,7 @@ void dissectResolve() throws UnknownHostException
     }
 
     @Test
-    void dissectResolveNullAddress() throws UnknownHostException
+    void dissectResolveNullAddress()
     {
         final String resolver = "myResolver";
         final String hostname = "some-host";

File: aeron-system-tests/src/test/java/io/aeron/driver/DriverNameResolverTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.api.extension.RegisterExtension;
 
-import java.io.IOException;
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.function.Supplier;
@@ -323,7 +322,7 @@ public void shouldUseFirstAvailableBootstrapNeighbor()
     @SlowTest
     @Test
     @InterruptAfter(20)
-    public void shouldFallbackToAnotherBootstrapNeighborIfOneBecomesUnavailable() throws IOException
+    public void shouldFallbackToAnotherBootstrapNeighborIfOneBecomesUnavailable()
     {
         assumeTrue(TestMediaDriver.shouldRunJavaMediaDriver());
 

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -198,7 +198,7 @@ public static CTestMediaDriver launch(
 
         setFlowControlStrategy(environment, context);
         setLogging(environment);
-        C_DRIVER_ADDITIONAL_ENV_VARS.get().getOrDefault(context, emptyMap()).forEach(environment::put);
+        environment.putAll(C_DRIVER_ADDITIONAL_ENV_VARS.get().getOrDefault(context, emptyMap()));
 
         try
         {

File: aeron-agent/src/test/java/io/aeron/agent/ClusterLoggingAgentTest.java
Patch:
@@ -133,6 +133,7 @@ private void testClusterEventsLogging(
             .clusterMemberId(0)
             .clusterMembers("0,localhost:20110,localhost:20220,localhost:20330,localhost:20440,localhost:8010")
             .logChannel("aeron:udp?term-length=256k|control-mode=manual|control=localhost:20550")
+            .ingressChannel("aeron:udp?term-length=64k")
             .replicationChannel("aeron:udp?endpoint=localhost:0");
 
         final ClusteredService clusteredService = mock(ClusteredService.class);

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -828,7 +828,7 @@ public static final class Configuration
         /**
          * Channel for sending messages to a cluster.
          */
-        public static final String INGRESS_CHANNEL_DEFAULT = "aeron:udp?endpoint=localhost:9010";
+        public static final String INGRESS_CHANNEL_DEFAULT = null;
 
         /**
          * Stream id within a channel for sending messages to a cluster.
@@ -1558,6 +1558,7 @@ private void checkDeadline()
             {
                 final TimeoutException ex = new TimeoutException(
                     "cluster connect timeout: step=" + step +
+                    " ingressChannel=" + ctx.ingressChannel() +
                     " ingressPublication=" + ingressPublication +
                     " egress.isConnected=" + egressSubscription.isConnected() +
                     " responseChannel=" + egressSubscription.tryResolveChannelEndpointPort());

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -41,6 +41,9 @@
  */
 public final class UdpChannel
 {
+    /**
+     * The offset from the beginning of a payload where the reserved value begins.
+     */
     public static final int RESERVED_VALUE_OFFSET = -8;
 
     private static final AtomicInteger UNIQUE_CANONICAL_FORM_VALUE = new AtomicInteger();

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1967,7 +1967,8 @@ private static void validateTimestampConfiguration(final UdpChannel udpChannel)
         if (null != udpChannel.channelUri().get(MEDIA_RCV_TIMESTAMP_OFFSET_PARAM_NAME))
         {
             throw new InvalidChannelException(
-                "RX timestamps '" + MEDIA_RCV_TIMESTAMP_OFFSET_PARAM_NAME + "' are not supported in the Java driver");
+                "Media timestamps '" + MEDIA_RCV_TIMESTAMP_OFFSET_PARAM_NAME +
+                "' are not supported in the Java driver");
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -687,7 +687,8 @@ public final class Configuration
     public static final String RESOLVER_INTERFACE_PROP_NAME = "aeron.driver.resolver.interface";
 
     /**
-     * Property name for resolver bootstrap neighbor for which it can bootstrap naming, format is hostname:port.
+     * Property name for resolver bootstrap neighbors for which it can bootstrap naming, format is comma separated list
+     * of {@code hostname:port} pairs.
      * @see #RESOLVER_INTERFACE_PROP_NAME
      */
     public static final String RESOLVER_BOOTSTRAP_NEIGHBOR_PROP_NAME = "aeron.driver.resolver.bootstrap.neighbor";

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -2978,7 +2978,8 @@ public Context resolverInterface(final String resolverInterface)
         /**
          * Get the bootstrap neighbor of the {@link MediaDriver} for name resolver purposes.
          *
-         * The format is hostname:port and follows the URI format for the endpoint parameter.
+         * The format is comma separated list of {@code hostname:port} pairs. and follows the URI format for the
+         * endpoint parameter.
          *
          * @return bootstrap neighbor of the {@link MediaDriver}.
          * @see Configuration#RESOLVER_BOOTSTRAP_NEIGHBOR_PROP_NAME

File: aeron-driver/src/test/java/io/aeron/driver/ext/CubicCongestionControlTest.java
Patch:
@@ -44,7 +44,6 @@ class CubicCongestionControlTest
         "aeron:udp?endpoint=127.0.0.1:9999|rcv-wnd=" + CHANNEL_RECEIVER_WINDOW_LENGTH);
     private final UdpChannel channelWithoutWindow = UdpChannel.parse("aeron:udp?endpoint=127.0.0.1:9999");
     private final int bigTermLength = 1_000_000;
-    private final int smallTermLength = 8192;
     private final NanoClock nanoClock = new CachedNanoClock();
 
     @BeforeEach
@@ -74,6 +73,7 @@ void shouldSetWindowLengthFromContext()
     @Test
     void shouldSetWindowLengthFromTermLength()
     {
+        final int smallTermLength = 8192;
         final CubicCongestionControl cubicCongestionControl = new CubicCongestionControl(
             0, channelWithWindow, 0, 0, smallTermLength, MTU_LENGTH, null, null, nanoClock, context, countersManager);
 

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -698,6 +698,7 @@ public String toString()
             "originalRegistrationId=" + originalRegistrationId +
             ", registrationId=" + registrationId +
             ", isClosed=" + isClosed +
+            ", isConnected=" + isConnected() +
             ", initialTermId=" + initialTermId +
             ", termBufferLength=" + termBufferLength +
             ", sessionId=" + sessionId +

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -1558,6 +1558,7 @@ private void checkDeadline()
             {
                 final TimeoutException ex = new TimeoutException(
                     "cluster connect timeout: step=" + step +
+                    " ingressPublication=" + ingressPublication +
                     " egress.isConnected=" + egressSubscription.isConnected() +
                     " responseChannel=" + egressSubscription.tryResolveChannelEndpointPort());
 

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -156,7 +156,7 @@ public static void failOnClusterError()
                 warning.printStackTrace();
             }
 
-            LangUtil.rethrowUnchecked(error);
+            throw new RuntimeException("Cluster node received error", error);
         }
 
         if (Thread.currentThread().isInterrupted() && null != warning)

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -1235,7 +1235,7 @@ private int checkLiveness(final long nowNs)
                 forceCloseResources();
 
                 throw new DriverTimeoutException(
-                    "MediaDriver keepalive age (ms) exceeded: age=" +
+                    "MediaDriver keepalive (ms): age=" +
                     (nowMs - lastKeepAliveMs) + " > timeout=" + driverTimeoutMs);
             }
 

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -1235,8 +1235,8 @@ private int checkLiveness(final long nowNs)
                 forceCloseResources();
 
                 throw new DriverTimeoutException(
-                    "MediaDriver keepalive age exceeded (ms): timeout= " +
-                     driverTimeoutMs + ", age=" + (nowMs - lastKeepAliveMs));
+                    "MediaDriver keepalive age (ms) exceeded: age=" +
+                    (nowMs - lastKeepAliveMs) + " > timeout=" + driverTimeoutMs);
             }
 
             if (null == heartbeatTimestamp)

File: aeron-system-tests/src/test/java/io/aeron/cluster/AppointedLeaderTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 
+import static io.aeron.test.cluster.TestCluster.aCluster;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -32,7 +33,7 @@ public class AppointedLeaderTest
     @Timeout(20)
     public void shouldConnectAndSendKeepAlive()
     {
-        try (TestCluster cluster = TestCluster.startThreeNodeStaticCluster(LEADER_ID))
+        try (TestCluster cluster = aCluster().withStaticNodes(3).withAppointedLeader(LEADER_ID).start())
         {
             final TestNode leader = cluster.awaitLeader();
             assertEquals(LEADER_ID, leader.index());
@@ -47,7 +48,7 @@ public void shouldConnectAndSendKeepAlive()
     @Timeout(20)
     public void shouldEchoMessagesViaService()
     {
-        try (TestCluster cluster = TestCluster.startThreeNodeStaticCluster(LEADER_ID))
+        try (TestCluster cluster = aCluster().withStaticNodes(3).withAppointedLeader(LEADER_ID).start())
         {
             final TestNode leader = cluster.awaitLeader();
             assertEquals(LEADER_ID, leader.index());

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiClusteredServicesTest.java
Patch:
@@ -105,7 +105,7 @@ public void shouldSupportMultipleServicesPerNode()
             .threadingMode(ThreadingMode.SHARED)
             .dirDeleteOnStart(true)
             .aeronDirectoryName(aeronDirName)
-            .nameResolver(new RedirectingNameResolver(TestCluster.NAME_NODE_MAPPINGS)));
+            .nameResolver(new RedirectingNameResolver(TestCluster.DEFAULT_NODE_MAPPINGS)));
 
         final AeronCluster client = AeronCluster.connect(new AeronCluster.Context()
             .aeronDirectoryName(aeronDirName)

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiModuleSharedDriverTest.java
Patch:
@@ -52,7 +52,7 @@ public void shouldSupportTwoSingleNodeClusters()
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED)
             .errorHandler(Tests::onError)
-            .nameResolver(new RedirectingNameResolver(TestCluster.NAME_NODE_MAPPINGS))
+            .nameResolver(new RedirectingNameResolver(TestCluster.DEFAULT_NODE_MAPPINGS))
             .dirDeleteOnStart(true);
 
         final Archive.Context archiveCtx = new Archive.Context()
@@ -240,7 +240,7 @@ static class MultiClusterNode implements AutoCloseable
                 .aeronDirectoryName(CommonContext.getAeronDirectoryName() + "-" + nodeId)
                 .threadingMode(ThreadingMode.SHARED)
                 .errorHandler(Tests::onError)
-                .nameResolver(new RedirectingNameResolver(TestCluster.NAME_NODE_MAPPINGS))
+                .nameResolver(new RedirectingNameResolver(TestCluster.DEFAULT_NODE_MAPPINGS))
                 .dirDeleteOnStart(true);
 
             final Archive.Context archiveCtx = new Archive.Context()

File: aeron-system-tests/src/test/java/io/aeron/cluster/ServiceIpcIngressTest.java
Patch:
@@ -20,15 +20,15 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 
-import static io.aeron.Aeron.NULL_VALUE;
+import static io.aeron.test.cluster.TestCluster.aCluster;
 
 public class ServiceIpcIngressTest
 {
     @Test
     @Timeout(20)
     public void shouldEchoIpcMessages()
     {
-        try (TestCluster cluster = TestCluster.startThreeNodeStaticCluster(NULL_VALUE))
+        try (TestCluster cluster = aCluster().withStaticNodes(3).start())
         {
             cluster.awaitLeader();
             cluster.connectClient();

File: aeron-driver/src/test/java/io/aeron/driver/media/SocketAddressParserTest.java
Patch:
@@ -125,7 +125,7 @@ public void shouldParseIpV6() throws Exception
     }
 
     @Test
-    public void shouldParseWithScope() throws UnknownHostException
+    public void shouldParseWithScope()
     {
         final InetSocketAddress address = SocketAddressParser.parse(
             "[::1%12~_.-34]:1234", ENDPOINT_PARAM_NAME, false, DEFAULT_RESOLVER);

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -346,7 +346,7 @@ void onReResolveEndpoint(
 
             if (newAddress.isUnresolved())
             {
-                ctx.errorHandler().onError(new AeronEvent("could not be re-resolved: endpoint=" + endpoint));
+                ctx.errorHandler().onError(new AeronEvent("could not re-resolve: endpoint=" + endpoint));
                 errorCounter.increment();
             }
             else if (!address.equals(newAddress))
@@ -374,7 +374,7 @@ void onReResolveControl(
 
             if (newAddress.isUnresolved())
             {
-                ctx.errorHandler().onError(new AeronEvent("could not be re-resolved: control=" + control));
+                ctx.errorHandler().onError(new AeronEvent("could not re-resolve: control=" + control));
                 errorCounter.increment();
             }
             else if (!address.equals(newAddress))

File: aeron-client/src/main/java/io/aeron/exceptions/AeronEvent.java
Patch:
@@ -28,7 +28,7 @@ public class AeronEvent extends AeronException
      */
     public AeronEvent(final String message)
     {
-        super(message, Category.WARN);
+        super(message, AeronException.Category.WARN);
     }
 
     /**
@@ -37,7 +37,7 @@ public AeronEvent(final String message)
      * @param message  to detail the event.
      * @param category of the event.
      */
-    public AeronEvent(final String message, final Category category)
+    public AeronEvent(final String message, final AeronException.Category category)
     {
         super(message, category);
     }

File: aeron-agent/src/main/java/io/aeron/agent/DriverEventCode.java
Patch:
@@ -80,7 +80,9 @@ public enum DriverEventCode implements EventCode
     NAME_RESOLUTION_NEIGHBOR_REMOVED(47, DriverEventDissector::dissectAddress),
 
     FLOW_CONTROL_RECEIVER_ADDED(48, DriverEventDissector::dissectFlowControlReceiver),
-    FLOW_CONTROL_RECEIVER_REMOVED(49, DriverEventDissector::dissectFlowControlReceiver);
+    FLOW_CONTROL_RECEIVER_REMOVED(49, DriverEventDissector::dissectFlowControlReceiver),
+
+    NAME_RESOLUTION_RESOLVE(50, DriverEventDissector::dissectResolve);
 
     static final int EVENT_CODE_TYPE = EventCodeType.DRIVER.getTypeCode();
 

File: aeron-agent/src/test/java/io/aeron/agent/CommonEventDissectorTest.java
Patch:
@@ -87,7 +87,7 @@ void dissectSocketAddressIpv6()
         final int decodedLength = CommonEventDissector.dissectSocketAddress(buffer, offset, builder);
 
         assertEquals(24, decodedLength);
-        assertEquals("9c7c:12:7880:2c2c:ab0:5016:7a05:59d:7777", builder.toString());
+        assertEquals("[9c7c:12:7880:2c2c:ab0:5016:7a05:59d]:7777", builder.toString());
     }
 
     @Test

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -166,6 +166,8 @@ public void onStart()
             .appendToLabel(": driverName=").appendToLabel(ctx.resolverName())
             .appendToLabel(" hostname=").appendToLabel(DriverNameResolver.getCanonicalName("<unresolved>"));
 
+        nameResolver.init(ctx);
+
         final long nowNs = nanoClock.nanoTime();
         cachedNanoClock.update(nowNs);
         cachedEpochClock.update(epochClock.time());

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiClusteredServicesTest.java
Patch:
@@ -25,6 +25,7 @@
 import io.aeron.test.Tests;
 import io.aeron.test.cluster.TestCluster;
 import io.aeron.test.cluster.TestNode;
+import io.aeron.test.driver.RedirectingNameResolver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -103,7 +104,8 @@ public void shouldSupportMultipleServicesPerNode()
         final MediaDriver clientMediaDriver = MediaDriver.launch(new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED)
             .dirDeleteOnStart(true)
-            .aeronDirectoryName(aeronDirName));
+            .aeronDirectoryName(aeronDirName)
+            .nameResolver(new RedirectingNameResolver(TestCluster.NAME_NODE_MAPPINGS)));
 
         final AeronCluster client = AeronCluster.connect(new AeronCluster.Context()
             .aeronDirectoryName(aeronDirName)

File: aeron-driver/src/main/java/io/aeron/driver/DriverNameResolver.java
Patch:
@@ -370,8 +370,8 @@ private void sendSelfResolutions(final long nowMs)
         {
             if (nowMs > bootstrapNeighborResolveDeadlineMs)
             {
-                bootstrapNeighborAddress = UdpNameResolutionTransport.getInetSocketAddress(bootstrapNeighbor);
                 bootstrapNeighborResolveDeadlineMs = nowMs + TIMEOUT_MS;
+                bootstrapNeighborAddress = UdpNameResolutionTransport.getInetSocketAddress(bootstrapNeighbor);
             }
 
             sendResolutionFrameTo(byteBuffer, bootstrapNeighborAddress);

File: aeron-client/src/main/java/io/aeron/ErrorCode.java
Patch:
@@ -68,7 +68,7 @@ public enum ErrorCode
     NOT_SUPPORTED(8),
 
     /**
-     * Attempted to send a command that had a host name that could not be resolved.
+     * Attempted to send a command that had a hostname that could not be resolved.
      */
     UNKNOWN_HOST(9),
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1386,13 +1386,13 @@ private void checkForClashingSubscription(
                 {
                     if (params.isReliable != subscription.isReliable())
                     {
-                        throw new IllegalStateException(
+                        throw new InvalidChannelException(
                             "option conflicts with existing subscriptions: reliable=" + params.isReliable);
                     }
 
                     if (params.isRejoin != subscription.isRejoin())
                     {
-                        throw new IllegalStateException(
+                        throw new InvalidChannelException(
                             "option conflicts with existing subscriptions: rejoin=" + params.isRejoin);
                     }
                 }
@@ -1739,7 +1739,7 @@ private void checkForSessionClash(final int sessionId, final int streamId, final
     {
         if (activeSessionSet.contains(new SessionKey(sessionId, streamId, channel)))
         {
-            throw new IllegalStateException("existing publication has clashing sessionId=" + sessionId +
+            throw new InvalidChannelException("existing publication has clashing sessionId=" + sessionId +
                 " for streamId=" + streamId + " channel=" + channel);
         }
     }

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -1515,7 +1515,7 @@ public void shouldErrorOnAddPublicationWithClashingSessionId()
         final long correlationId = driverProxy.addExclusivePublication(CHANNEL_4000 + sessionIdParam, STREAM_ID_1);
         driverConductor.doWork();
 
-        verify(mockClientProxy).onError(eq(correlationId), eq(GENERIC_ERROR), anyString());
+        verify(mockClientProxy).onError(eq(correlationId), eq(INVALID_CHANNEL), anyString());
         verify(mockErrorCounter).increment();
         verify(mockErrorHandler).onError(any(Throwable.class));
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -291,7 +291,8 @@ public static class Configuration
         /**
          * Default channel template used for catchup and replication of log and snapshots.
          */
-        public static final String CLUSTER_BACKUP_CATCHUP_CHANNEL_DEFAULT = "aeron:udp?alias=backup|cc=cubic";
+        public static final String CLUSTER_BACKUP_CATCHUP_CHANNEL_DEFAULT =
+            "aeron:udp?alias=backup|cc=cubic|so-sndbuf=512k|so-rcvbuf=512k|rcv-wnd=512k";
 
         /**
          * Interval at which a cluster backup will send backup queries.

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1889,9 +1889,7 @@ private int trackStreamPositions(final int existingWorkCount, final long nowNs)
     }
 
     private static void validateChannelBufferLength(
-        final String paramName,
-        final int channelLength,
-        final int endpointLength)
+        final String paramName, final int channelLength, final int endpointLength)
     {
         if (0 != channelLength && channelLength != endpointLength)
         {

File: aeron-cluster/src/test/java/io/aeron/cluster/RecordingLogTest.java
Patch:
@@ -482,7 +482,7 @@ void shouldAppendTermWithLeadershipTermIdOutOfOrder()
     {
         final List<RecordingLog.Entry> sortedEntries = asList(
             new RecordingLog.Entry(0, 0, 0, 700, 0, NULL_VALUE, ENTRY_TYPE_TERM, true, 0),
-            new RecordingLog.Entry(0, 1, 700, NULL_POSITION, 0, NULL_VALUE, ENTRY_TYPE_TERM, true, 3),
+            new RecordingLog.Entry(0, 1, 700, 2048, 0, NULL_VALUE, ENTRY_TYPE_TERM, true, 3),
             new RecordingLog.Entry(0, 2, 2048, 5000, 0, NULL_VALUE, ENTRY_TYPE_TERM, true, 1),
             new RecordingLog.Entry(0, 3, 5000, NULL_POSITION, 100, NULL_VALUE, ENTRY_TYPE_TERM, true, 2));
 

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -1217,6 +1217,7 @@ void stateChange(final ElectionState oldState, final ElectionState newState, fin
     {
         /*
         System.out.println("Election: memberId=" + memberId + " " + oldState + " -> " + newState +
+            " leaderId=" + (null != leaderMember ? leaderMember.id() : -1) +
             " leadershipTermId=" + leadershipTermId +
             " logPosition=" + logPosition +
             " logLeadershipTermId=" + logLeadershipTermId +

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -1091,6 +1091,7 @@ private void state(final ElectionState newState, final long nowNs)
                     consensusModuleAgent.role(Cluster.Role.CANDIDATE);
                     break;
 
+                case FOLLOWER_REPLAY:
                 case FOLLOWER_LOG_REPLICATION:
                     consensusModuleAgent.role(Cluster.Role.FOLLOWER);
                     break;

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -894,7 +894,7 @@ public void shouldCatchupFromEmptyLogThenSnapshotAfterShutdownAndFollowerCleanSt
         try
         {
             final TestNode leader = cluster.awaitLeader();
-            final List<TestNode> followers = cluster.followers();
+            final List<TestNode> followers = cluster.followers(2);
             final TestNode followerA = followers.get(0);
             final TestNode followerB = followers.get(1);
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterNetworkTopologyTest.java
Patch:
@@ -82,7 +82,7 @@ void setUp()
                 if (!echoServices.isEmpty())
                 {
                     System.out.println(echoServices);
-                    Tests.sleep(200);
+                    Tests.sleep(200, () -> "Failed to shutdown EchoServiceNode");
                 }
 
                 return echoServices.isEmpty();

File: aeron-samples/src/main/java/io/aeron/samples/cluster/EchoServiceNode.java
Patch:
@@ -140,7 +140,6 @@ public static void main(final String[] args)
         final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context()
             .lock(NoOpLock.INSTANCE)
             .controlRequestChannel(archiveContext.localControlChannel())
-            .controlRequestStreamId(archiveContext.localControlStreamId())
             .controlResponseChannel(archiveContext.localControlChannel())
             .aeronDirectoryName(aeronDirName);
 

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredServiceNode.java
Patch:
@@ -154,7 +154,6 @@ public static void main(final String[] args)
         final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context()
             .lock(NoOpLock.INSTANCE)
             .controlRequestChannel(archiveContext.localControlChannel())
-            .controlRequestStreamId(archiveContext.localControlStreamId())
             .controlResponseChannel(archiveContext.localControlChannel())
             .aeronDirectoryName(aeronDirName);
         // end::archive_client[]

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusteredArchive.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.cluster;
 
+import io.aeron.CommonContext;
 import io.aeron.archive.Archive;
 import io.aeron.driver.MediaDriver;
 import org.agrona.CloseHelper;
@@ -47,7 +48,7 @@ public static void main(final String[] args)
         try (ClusteredArchive driver = launch())
         {
             driver.consensusModule().context().shutdownSignalBarrier().await();
-            System.out.println("Shutdown ClusteredMediaDriver...");
+            System.out.println("Shutdown ClusteredArchive...");
         }
     }
 
@@ -58,8 +59,7 @@ public static void main(final String[] args)
      */
     public static ClusteredArchive launch()
     {
-        return launch(
-            new MediaDriver.Context().aeronDirectoryName(), new Archive.Context(), new ConsensusModule.Context());
+        return launch(CommonContext.getAeronDirectoryName(), new Archive.Context(), new ConsensusModule.Context());
     }
 
     /**

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -2204,7 +2204,7 @@ public static final class Configuration
         /**
          * Stream id within a channel for sending control messages to a driver local archive.
          */
-        public static final int LOCAL_CONTROL_STREAM_ID_DEFAULT = 11;
+        public static final int LOCAL_CONTROL_STREAM_ID_DEFAULT = CONTROL_STREAM_ID_DEFAULT;
 
         /**
          * Channel for receiving control response messages from an archive.

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -339,7 +339,6 @@ private void startNode(final int index, final boolean cleanStart)
         final AeronArchive.Context archiveCtx = new AeronArchive.Context()
             .lock(NoOpLock.INSTANCE)
             .controlRequestChannel(LOCAL_ARCHIVE_CONTROL_CHANNEL)
-            .controlRequestStreamId(AeronArchive.Configuration.localControlStreamId())
             .controlResponseChannel(LOCAL_ARCHIVE_CONTROL_CHANNEL)
             .aeronDirectoryName(baseDirName);
 
@@ -357,7 +356,6 @@ private void startNode(final int index, final boolean cleanStart)
                 .archiveDir(new File(baseDirName, "archive"))
                 .controlChannel(ARCHIVE_CONTROL_REQUEST_CHANNEL + index)
                 .localControlChannel(LOCAL_ARCHIVE_CONTROL_CHANNEL)
-                .localControlStreamId(archiveCtx.controlRequestStreamId())
                 .recordingEventsEnabled(false)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .errorHandler(ClusterTests.errorHandler(index))

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -64,11 +64,11 @@ private static Stream<Arguments> threadingModes()
     }
 
     private static final String CONTROL_RESPONSE_URI = CommonContext.IPC_CHANNEL;
-    private static final int CONTROL_RESPONSE_STREAM_ID = 100;
+    private static final int CONTROL_RESPONSE_STREAM_ID = AeronArchive.Configuration.controlResponseStreamId();
     private static final String REPLAY_URI = CommonContext.IPC_CHANNEL;
     private static final int MESSAGE_COUNT = 5000;
     private static final int SYNC_LEVEL = 0;
-    private static final int PUBLISH_STREAM_ID = 1;
+    private static final int PUBLISH_STREAM_ID = 1033;
     private static final int MAX_FRAGMENT_SIZE = 1024;
     private static final int REPLAY_STREAM_ID = 101;
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiModuleSharedDriverTest.java
Patch:
@@ -121,12 +121,12 @@ public void shouldSupportTwoSingleNodeClusters()
                 client0 = AeronCluster.connect(new AeronCluster.Context()
                     .egressListener(egressListener)
                     .ingressChannel(moduleCtx0.ingressChannel())
-                    .egressChannel("aeron:udp?endpoint=localhost:9020"));
+                    .egressChannel("aeron:udp?endpoint=localhost:0"));
 
                 client1 = AeronCluster.connect(new AeronCluster.Context()
                     .egressListener(egressListener)
                     .ingressChannel(moduleCtx1.ingressChannel())
-                    .egressChannel("aeron:udp?endpoint=localhost:9021"));
+                    .egressChannel("aeron:udp?endpoint=localhost:0"));
 
                 echoMessage(client0, "Message 0", egress);
                 echoMessage(client1, "Message 1", egress);

File: aeron-client/src/main/java/io/aeron/ExclusivePublication.java
Patch:
@@ -138,12 +138,11 @@ public final class ExclusivePublication extends ExclusivePublicationValues
             originalRegistrationId,
             registrationId);
 
-        final UnsafeBuffer[] buffers = logBuffers.duplicateTermBuffers();
         final UnsafeBuffer logMetaDataBuffer = logBuffers.metaDataBuffer();
 
         for (int i = 0; i < PARTITION_COUNT; i++)
         {
-            termAppenders[i] = new ExclusiveTermAppender(buffers[i], logMetaDataBuffer, i);
+            termAppenders[i] = new ExclusiveTermAppender(termBuffers[i], logMetaDataBuffer, i);
         }
 
         final int termCount = LogBufferDescriptor.activeTermCount(logMetaDataBuffer);

File: aeron-client/src/main/java/io/aeron/LogBuffers.java
Patch:
@@ -224,6 +224,8 @@ public void close()
             error = t;
         }
 
+        logMetaDataBuffer.wrap(0, 0);
+
         for (int i = 0, length = mappedByteBuffers.length; i < length; i++)
         {
             final MappedByteBuffer mappedByteBuffer = mappedByteBuffers[i];

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -324,7 +324,8 @@ void onStartReplay(
         attemptToActivate();
         if (State.ACTIVE == state)
         {
-            conductor.startReplay(correlationId, recordingId, position, length, replayStreamId, replayChannel, this);
+            conductor.startReplay(
+                correlationId, recordingId, position, length, replayStreamId, replayChannel, null, this);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -291,7 +291,7 @@ public static class Configuration
         /**
          * Default channel template used for catchup and replication of log and snapshots.
          */
-        public static final String CLUSTER_BACKUP_CATCHUP_CHANNEL_DEFAULT = "aeron:udp?alias=replicate|cc=cubic";
+        public static final String CLUSTER_BACKUP_CATCHUP_CHANNEL_DEFAULT = "aeron:udp?alias=backup|cc=cubic";
 
         /**
          * Interval at which a cluster backup will send backup queries.

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -649,7 +649,7 @@ private boolean hasResponse(final ControlResponsePoller poller)
             final ControlResponseCode code = poller.code();
             if (ControlResponseCode.ERROR == code)
             {
-                throw new ArchiveException(poller.errorMessage(), code.value());
+                throw new ArchiveException(poller.errorMessage(), (int)poller.relevantId());
             }
 
             return poller.correlationId() == activeCorrelationId && ControlResponseCode.OK == code;

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventEncoder.java
Patch:
@@ -81,7 +81,7 @@ static int encodeNewLeadershipTerm(
 
     static int newLeaderShipTermLength()
     {
-        return (SIZE_OF_LONG * 5) + (SIZE_OF_INT * 3);
+        return (SIZE_OF_LONG * 7) + (SIZE_OF_INT * 3);
     }
 
     static <E extends Enum<E>> int encodeStateChange(

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventLoggerTest.java
Patch:
@@ -56,7 +56,7 @@ void logNewLeadershipTerm()
         final long timestamp = 2;
         final int leaderMemberId = 0;
         final int logSessionId = 3;
-        final int captureLength = SIZE_OF_LONG * 5 + SIZE_OF_INT * 3;
+        final int captureLength = SIZE_OF_LONG * 7 + SIZE_OF_INT * 3;
         final boolean isStartup = true;
         final long termBaseLogPosition = 982734;
         final long leaderRecordingId = 76434;

File: aeron-archive/src/main/java/io/aeron/archive/RecordingEventsProxy.java
Patch:
@@ -70,7 +70,8 @@ void started(
         int attempts = SEND_ATTEMPTS;
         do
         {
-            final long result = publication.offer(buffer, 0, recordingStartedEncoder.encodedLength());
+            final int length = MessageHeaderEncoder.ENCODED_LENGTH + recordingStartedEncoder.encodedLength();
+            final long result = publication.offer(buffer, 0, length);
             if (result > 0 || Publication.NOT_CONNECTED == result)
             {
                 break;

File: aeron-archive/src/main/java/io/aeron/archive/DedicatedModeArchiveConductor.java
Patch:
@@ -16,7 +16,6 @@
 package io.aeron.archive;
 
 import org.agrona.CloseHelper;
-import org.agrona.ErrorHandler;
 import org.agrona.concurrent.*;
 import org.agrona.concurrent.status.AtomicCounter;
 
@@ -118,7 +117,7 @@ static class DedicatedModeRecorder extends SessionWorker<RecordingSession>
         private volatile boolean isAbort;
 
         DedicatedModeRecorder(
-            final ErrorHandler errorHandler,
+            final CountedErrorHandler errorHandler,
             final AtomicCounter errorCounter,
             final ManyToOneConcurrentLinkedQueue<Session> closeQueue,
             final CountDownLatch abortLatch)
@@ -240,7 +239,7 @@ static class DedicatedModeReplayer extends SessionWorker<ReplaySession>
         private volatile boolean isAbort;
 
         DedicatedModeReplayer(
-            final ErrorHandler errorHandler,
+            final CountedErrorHandler errorHandler,
             final AtomicCounter errorCounter,
             final ManyToOneConcurrentLinkedQueue<Session> closeQueue,
             final CountDownLatch abortLatch)

File: aeron-archive/src/main/java/io/aeron/archive/SessionWorker.java
Patch:
@@ -15,9 +15,9 @@
  */
 package io.aeron.archive;
 
-import org.agrona.ErrorHandler;
 import org.agrona.collections.ArrayListUtil;
 import org.agrona.concurrent.Agent;
+import org.agrona.concurrent.CountedErrorHandler;
 
 import java.util.ArrayList;
 
@@ -31,10 +31,10 @@ class SessionWorker<T extends Session> implements Agent
 {
     private final ArrayList<T> sessions = new ArrayList<>();
     private final String roleName;
-    protected final ErrorHandler errorHandler;
+    protected final CountedErrorHandler errorHandler;
     private boolean isClosed = false;
 
-    SessionWorker(final String roleName, final ErrorHandler errorHandler)
+    SessionWorker(final String roleName, final CountedErrorHandler errorHandler)
     {
         this.roleName = roleName;
         this.errorHandler = errorHandler;

File: aeron-archive/src/main/java/io/aeron/archive/SharedModeArchiveConductor.java
Patch:
@@ -16,8 +16,8 @@
 package io.aeron.archive;
 
 import org.agrona.CloseHelper;
-import org.agrona.ErrorHandler;
 import org.agrona.concurrent.AgentInvoker;
+import org.agrona.concurrent.CountedErrorHandler;
 
 final class SharedModeArchiveConductor extends ArchiveConductor
 {
@@ -69,7 +69,7 @@ protected void closeSessionWorkers()
 
     class SharedModeRecorder extends SessionWorker<RecordingSession>
     {
-        SharedModeRecorder(final ErrorHandler errorHandler)
+        SharedModeRecorder(final CountedErrorHandler errorHandler)
         {
             super("archive-recorder", errorHandler);
         }
@@ -82,7 +82,7 @@ protected void closeSession(final RecordingSession session)
 
     class SharedModeReplayer extends SessionWorker<ReplaySession>
     {
-        SharedModeReplayer(final ErrorHandler errorHandler)
+        SharedModeReplayer(final CountedErrorHandler errorHandler)
         {
             super("archive-replayer", errorHandler);
         }

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1029,8 +1029,8 @@ void closeRecordingSession(final RecordingSession session)
             final long position = session.recordedPosition();
             final long recordingId = session.sessionId();
             final long subscriptionId = subscription.registrationId();
-            catalog.recordingStopped(recordingId, position, epochClock.time());
             recordingSessionByIdMap.remove(recordingId);
+            catalog.recordingStopped(recordingId, position, epochClock.time());
 
             session.sendPendingError(controlResponseProxy);
             session.controlSession().attemptSignal(

File: aeron-test-support/src/main/java/io/aeron/test/cluster/TestCluster.java
Patch:
@@ -1014,7 +1014,7 @@ public void awaitServiceMessageCount(final TestNode node, final int messageCount
             Thread.yield();
             if (Thread.interrupted())
             {
-                final String message = "count=" + count + " awaiting=" + messageCount;
+                final String message = "count=" + count + " awaiting=" + messageCount + " node=" + node;
                 Tests.unexpectedInterruptStackTrace(message);
                 fail(message);
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -291,7 +291,7 @@ public static class Configuration
         /**
          * Default channel template used for catchup and replication of log and snapshots.
          */
-        public static final String CLUSTER_BACKUP_CATCHUP_CHANNEL_DEFAULT = "aeron:udp?alias=replicate";
+        public static final String CLUSTER_BACKUP_CATCHUP_CHANNEL_DEFAULT = "aeron:udp?alias=replicate|cc=cubic";
 
         /**
          * Interval at which a cluster backup will send backup queries.

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -18,7 +18,6 @@
 import io.aeron.Aeron;
 import io.aeron.ChannelUri;
 import io.aeron.CommonContext;
-import io.aeron.CommonContext.InferableBoolean;
 import io.aeron.driver.MediaDriver.Context;
 import io.aeron.driver.buffer.LogFactory;
 import io.aeron.driver.buffer.RawLog;

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -37,7 +37,6 @@ class ReplicationSession implements Session, RecordingDescriptorConsumer
     private static final int REPLAY_REMOVE_THRESHOLD = 0;
     private static final int RETRY_ATTEMPTS = 3;
 
-
     enum State
     {
         CONNECT,
@@ -49,7 +48,7 @@ enum State
         REPLICATE,
         CATCHUP,
         ATTEMPT_LIVE_JOIN,
-        DONE;
+        DONE
     }
 
     private long activeCorrelationId = NULL_VALUE;

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -1598,12 +1598,12 @@ public long replicate(
             if (!archiveProxy.replicate(
                 srcRecordingId,
                 dstRecordingId,
-                stopPosition, srcControlStreamId,
+                stopPosition,
+                srcControlStreamId,
                 srcControlChannel,
                 liveDestination,
                 lastCorrelationId,
-                controlSessionId
-            ))
+                controlSessionId))
             {
                 throw new ArchiveException("failed to send replicate request");
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1476,7 +1476,7 @@ long logRecordingId()
 
     void logRecordingId(final long recordingId)
     {
-        this.logRecordingId = recordingId;
+        logRecordingId = recordingId;
     }
 
     void truncateLogEntry(final long leadershipTermId, final long logPosition)

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -570,7 +570,7 @@ public int socketRcvbufLength()
     /**
      * Get the socket receive buffer length.
      *
-     * @param defaultValue to be used if the UdpChannel's value is 0 (unspecified)
+     * @param defaultValue to be used if the UdpChannel's value is 0 (unspecified).
      * @return socket receive buffer length or 0 if not specified.
      */
     public int socketRcvbufLengthOrDefault(final int defaultValue)
@@ -591,7 +591,7 @@ public int socketSndbufLength()
     /**
      * Get the socket send buffer length.
      *
-     * @param defaultValue to be used if the UdpChannel's value is 0 (unspecified)
+     * @param defaultValue to be used if the UdpChannel's value is 0 (unspecified).
      * @return socket send buffer length or defaultValue if not specified.
      */
     public int socketSndbufLengthOrDefault(final int defaultValue)
@@ -612,7 +612,7 @@ public int receiverWindowLength()
     /**
      * Get the receiver window length used as the initial window length for congestion control.
      *
-     * @param defaultValue to be used if the UdpChannel's value is 0 (unspecified)
+     * @param defaultValue to be used if the UdpChannel's value is 0 (unspecified).
      * @return receiver window length or defaultValue if not specified.
      */
     public int receiverWindowLengthOrDefault(final int defaultValue)

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -382,7 +382,7 @@ public void shouldReplicateLiveRecordingAndStopAtSpecifiedPosition()
             final MutableReference<RecordingSignal> signalRef = new MutableReference<>();
             final RecordingSignalAdapter adapter = newRecordingSignalAdapter(signalRef, dstRecordingId);
 
-            final long replicationId = dstAeronArchive.replicate(
+            dstAeronArchive.replicate(
                 srcRecordingId, NULL_VALUE, SRC_CONTROL_STREAM_ID, SRC_CONTROL_REQUEST_CHANNEL, null, firstPosition);
 
             assertEquals(RecordingSignal.REPLICATE, awaitSignal(signalRef, adapter));
@@ -395,7 +395,6 @@ public void shouldReplicateLiveRecordingAndStopAtSpecifiedPosition()
             assertEquals(RecordingSignal.SYNC, awaitSignal(signalRef, adapter));
             assertEquals(RecordingSignal.STOP, awaitSignal(signalRef, adapter));
 
-
             awaitPosition(dstCounters, dstCounterId, firstPosition);
 
             offer(publication, messageCount, messagePrefix);

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -59,8 +59,8 @@ public void shouldReplayWithAppointedLeaderWithThreeNodesWithNoSnapshot()
             assertEquals(appointedLeaderIndex, leader.index());
             assertEquals(Cluster.Role.LEADER, leader.role());
 
-            cluster.connectClient();
             final int messageCount = 10;
+            cluster.connectClient();
             cluster.sendMessages(messageCount);
             cluster.awaitResponseMessageCount(messageCount);
             cluster.awaitServicesMessageCount(messageCount);
@@ -86,10 +86,10 @@ public void shouldCatchUpWithAppointedLeaderWithThreeNodesWithNoSnapshot()
             assertEquals(appointedLeaderIndex, leader.index());
             assertEquals(Cluster.Role.LEADER, leader.role());
 
-            cluster.connectClient();
             final int preCatchupMessageCount = 5;
             final int postCatchupMessageCount = 10;
             final int totalMessageCount = preCatchupMessageCount + postCatchupMessageCount;
+            cluster.connectClient();
             cluster.sendMessages(preCatchupMessageCount);
             cluster.awaitResponseMessageCount(preCatchupMessageCount);
             cluster.awaitServicesMessageCount(preCatchupMessageCount);

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventCode.java
Patch:
@@ -29,7 +29,9 @@ public enum ClusterEventCode implements EventCode
     ELECTION_STATE_CHANGE(1, ClusterEventDissector::dissectStateChange),
     NEW_LEADERSHIP_TERM(2, (eventCode, buffer, offset, builder) -> dissectNewLeadershipTerm(buffer, offset, builder)),
     STATE_CHANGE(3, ClusterEventDissector::dissectStateChange),
-    ROLE_CHANGE(4, ClusterEventDissector::dissectStateChange);
+    ROLE_CHANGE(4, ClusterEventDissector::dissectStateChange),
+    CANVASS_POSITION(5, ClusterEventDissector::dissectCanvassPosition),
+    REQUEST_VOTE(6, ClusterEventDissector::dissectRequestVote);
 
     static final int EVENT_CODE_TYPE = EventCodeType.CLUSTER.getTypeCode();
     private static final ClusterEventCode[] EVENT_CODE_BY_ID;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1072,6 +1072,7 @@ void replicate(
         final int srcControlStreamId,
         final String srcControlChannel,
         final String liveDestination,
+        final long stopPosition,
         final ControlSession controlSession)
     {
         final boolean hasRecording = catalog.hasRecording(dstRecordingId);
@@ -1098,6 +1099,7 @@ void replicate(
             channelTagId,
             subscriptionTagId,
             replicationId,
+            stopPosition,
             liveDestination,
             ctx.replicationChannel(),
             hasRecording ? recordingSummary : null,

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestDecoders.java
Patch:
@@ -47,6 +47,7 @@ class ControlRequestDecoders
     final BoundedReplayRequestDecoder boundedReplayRequest = new BoundedReplayRequestDecoder();
     final StopAllReplaysRequestDecoder stopAllReplaysRequest = new StopAllReplaysRequestDecoder();
     final ReplicateRequestDecoder replicateRequest = new ReplicateRequestDecoder();
+    final ReplicateRequest2Decoder replicateRequest2 = new ReplicateRequest2Decoder();
     final StopReplicationRequestDecoder stopReplicationRequest = new StopReplicationRequestDecoder();
     final StartPositionRequestDecoder startPositionRequest = new StartPositionRequestDecoder();
     final DetachSegmentsRequestDecoder detachSegmentsRequest = new DetachSegmentsRequestDecoder();

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTool.java
Patch:
@@ -258,7 +258,7 @@ public static void recoveryPlan(final PrintStream out, final File clusterDir, fi
         try (AeronArchive archive = AeronArchive.connect();
             RecordingLog recordingLog = new RecordingLog(clusterDir))
         {
-            out.println(recordingLog.createRecoveryPlan(archive, serviceCount));
+            out.println(recordingLog.createRecoveryPlan(archive, serviceCount, Aeron.NULL_VALUE));
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusAdapter.java
Patch:
@@ -140,6 +140,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     newLeadershipTermDecoder.logTruncatePosition(),
                     newLeadershipTermDecoder.leadershipTermId(),
                     newLeadershipTermDecoder.logPosition(),
+                    newLeadershipTermDecoder.leaderRecordingId(),
                     newLeadershipTermDecoder.timestamp(),
                     newLeadershipTermDecoder.leaderMemberId(),
                     newLeadershipTermDecoder.logSessionId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusPublisher.java
Patch:
@@ -153,6 +153,7 @@ void newLeadershipTerm(
         final long logTruncatePosition,
         final long leadershipTermId,
         final long logPosition,
+        final long leaderRecordingId,
         final long timestamp,
         final int leaderMemberId,
         final int logSessionId,
@@ -172,6 +173,7 @@ void newLeadershipTerm(
                     .logTruncatePosition(logTruncatePosition)
                     .leadershipTermId(leadershipTermId)
                     .logPosition(logPosition)
+                    .leaderRecordingId(leaderRecordingId)
                     .timestamp(timestamp)
                     .leaderMemberId(leaderMemberId)
                     .logSessionId(logSessionId)

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -478,7 +478,7 @@ public void updateEndpoint(final InetSocketAddress newAddress, final AtomicCount
      */
     public int socketSndbufLength()
     {
-        return socketSndbufLength;
+        return 0 != udpChannel.socketSndbufLength() ? udpChannel.socketSndbufLength() : context.socketSndbufLength();
     }
 
     /**

File: aeron-driver/src/main/java/io/aeron/driver/CongestionControl.java
Patch:
@@ -49,7 +49,7 @@ static long packOutcome(final int receiverWindowLength, final boolean forceStatu
      */
     static int receiverWindowLength(final long outcome)
     {
-        return (int)outcome;
+        return (int)(outcome & 0xFFFFFFFFL);
     }
 
     /**

File: aeron-driver/src/main/java/io/aeron/driver/StaticWindowCongestionControl.java
Patch:
@@ -62,7 +62,9 @@ public StaticWindowCongestionControl(
         final MediaDriver.Context context,
         final CountersManager countersManager)
     {
-        ccOutcome = CongestionControl.packOutcome(Math.min(termLength >> 1, context.initialWindowLength()), false);
+        final int initialWindowLength = udpChannel.receiverWindowLength() != 0 ?
+            udpChannel.receiverWindowLength() : context.initialWindowLength();
+        ccOutcome = CongestionControl.packOutcome(Math.min(termLength >> 1, initialWindowLength), false);
     }
 
     /**

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -167,6 +167,9 @@ public static CTestMediaDriver launch(
         {
             environment.put("AERON_DRIVER_RESOLVER_BOOTSTRAP_NEIGHBOR", context.resolverBootstrapNeighbor());
         }
+        environment.put("AERON_SOCKET_SO_RCVBUF", String.valueOf(context.socketRcvbufLength()));
+        environment.put("AERON_SOCKET_SO_SNDBUF", String.valueOf(context.socketSndbufLength()));
+        environment.put("AERON_RCV_INITIAL_WINDOW_LENGTH", String.valueOf(context.initialWindowLength()));
 
         setFlowControlStrategy(environment, context);
         setLogging(environment);

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -585,7 +585,7 @@ public boolean matchesTag(final UdpChannel udpChannel)
         }
 
         throw new IllegalArgumentException(
-            "matching tag has explicit endpoint or control - " + uriStr + " <> " + udpChannel.uriStr);
+            "matching tag=" + tag + " has explicit endpoint or control - " + uriStr + " <> " + udpChannel.uriStr);
     }
 
     /**

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -585,7 +585,7 @@ public boolean matchesTag(final UdpChannel udpChannel)
         }
 
         throw new IllegalArgumentException(
-            "matching tag has set endpoint or control address - " + uriStr + " <> " + udpChannel.uriStr);
+            "matching tag has explicit endpoint or control - " + uriStr + " <> " + udpChannel.uriStr);
     }
 
     /**

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -453,7 +453,7 @@ private int slowTick(final long nowMs)
 
             if (null != clusterArchive)
             {
-                clusterArchive.pollForErrorResponse();
+                clusterArchive.checkForErrorResponse();
             }
         }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1285,7 +1285,8 @@ int addLogPublication()
         {
             if (!channelUri.containsKey(FLOW_CONTROL_PARAM_NAME))
             {
-                final long timeout = Math.max(TimeUnit.NANOSECONDS.toSeconds(ctx.leaderHeartbeatTimeoutNs() >> 1), 2L);
+                final long timeoutNs = (ctx.leaderHeartbeatTimeoutNs() >> 1) + (ctx.leaderHeartbeatTimeoutNs() >> 2);
+                final long timeout = Math.max(TimeUnit.NANOSECONDS.toSeconds(timeoutNs), 3L);
                 channelUri.put(FLOW_CONTROL_PARAM_NAME, "min,t:" + timeout + "s");
             }
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -20,13 +20,11 @@
 import io.aeron.test.cluster.TestCluster;
 import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.Timeout;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
 
 import static io.aeron.Aeron.NULL_VALUE;
-import static io.aeron.test.cluster.TestCluster.startThreeNodeStaticCluster;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class MultiNodeTest

File: aeron-driver/src/main/java/io/aeron/driver/Sender.java
Patch:
@@ -89,7 +89,7 @@ public final class Sender extends SenderRhsPadding implements Agent
     public void onStart()
     {
         final long nowNs = nanoClock.nanoTime();
-        this.cachedNanoClock.update(nowNs);
+        cachedNanoClock.update(nowNs);
         reResolutionDeadlineNs = nowNs + reResolutionCheckIntervalNs;
     }
 

File: aeron-driver/src/test/java/io/aeron/driver/ReceiverTest.java
Patch:
@@ -533,7 +533,7 @@ public void shouldRemoveImageFromDispatcherWithNoActivity()
         final PublicationImage mockImage = mock(PublicationImage.class);
         when(mockImage.sessionId()).thenReturn(SESSION_ID);
         when(mockImage.streamId()).thenReturn(STREAM_ID);
-        when(mockImage.hasActivityAndNotEndOfStream(anyLong())).thenReturn(false);
+        when(mockImage.isConnected(anyLong())).thenReturn(false);
 
         receiver.onNewPublicationImage(receiveChannelEndpoint, mockImage);
         receiver.doWork();
@@ -555,7 +555,7 @@ public void shouldNotRemoveImageFromDispatcherOnRemoveSubscription()
         final PublicationImage mockImage = mock(PublicationImage.class);
         when(mockImage.sessionId()).thenReturn(SESSION_ID);
         when(mockImage.streamId()).thenReturn(STREAM_ID);
-        when(mockImage.hasActivityAndNotEndOfStream(anyLong())).thenReturn(true);
+        when(mockImage.isConnected(anyLong())).thenReturn(true);
 
         receiver.onNewPublicationImage(receiveChannelEndpoint, mockImage);
         receiver.onRemoveSubscription(receiveChannelEndpoint, STREAM_ID);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -327,7 +327,7 @@ else if (null != election)
 
     public String roleName()
     {
-        return "consensus-module";
+        return "consensus-module_" + ctx.clusterId() + "_" + memberId;
     }
 
     void onSessionConnect(

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -388,7 +388,7 @@ public void shouldAcceptMessagesAfterSingleNodeCleanRestart(final TestInfo testI
 
             follower = cluster.startStaticNode(follower.index(), true);
 
-            awaitElectionClosed(follower);
+            awaitElectionClosed(cluster.node(follower.index()));
             assertEquals(FOLLOWER, follower.role());
 
             final int messageCount = 10;
@@ -977,7 +977,6 @@ public void shouldCatchUpTwoFreshNodesAfterRestart(final TestInfo testInfo)
             final TestNode oldFollower2 = cluster.startStaticNode(followers.get(1).index(), true);
 
             cluster.awaitLeader();
-
             cluster.awaitServiceMessageCount(oldFollower1, messageCount);
             cluster.awaitServiceMessageCount(oldFollower2, messageCount);
 
@@ -1163,6 +1162,7 @@ void shouldHandleMultipleElections(final TestInfo testInfo)
             cluster.awaitNewLeadershipEvent(1);
             assertTrue(cluster.client().sendKeepAlive());
             cluster.startStaticNode(leader0.index(), false);
+            awaitElectionClosed(cluster.node(leader0.index()));
 
             cluster.sendMessages(numMessages);
             cluster.awaitResponseMessageCount(numMessages * 2);
@@ -1173,6 +1173,7 @@ void shouldHandleMultipleElections(final TestInfo testInfo)
             cluster.awaitNewLeadershipEvent(2);
             assertTrue(cluster.client().sendKeepAlive());
             cluster.startStaticNode(leader1.index(), false);
+            awaitElectionClosed(cluster.node(leader1.index()));
 
             cluster.sendMessages(numMessages);
             cluster.awaitResponseMessageCount(numMessages * 3);

File: aeron-driver/src/main/java/io/aeron/driver/ClientCommandAdapter.java
Patch:
@@ -257,21 +257,21 @@ else if (channel.startsWith(SPY_QUALIFIER))
                     final ControlProtocolException ex = new ControlProtocolException(
                         ErrorCode.UNKNOWN_COMMAND_TYPE_ID, "command typeId=" + msgTypeId);
 
-                    clientProxy.onError(correlationId, ex.errorCode(), ex.getMessage());
                     recordError(ex);
+                    clientProxy.onError(correlationId, ex.errorCode(), ex.getMessage());
                 }
             }
         }
         catch (final ControlProtocolException ex)
         {
-            clientProxy.onError(correlationId, ex.errorCode(), ex.getMessage());
             recordError(ex);
+            clientProxy.onError(correlationId, ex.errorCode(), ex.getMessage());
         }
         catch (final Exception ex)
         {
+            recordError(ex);
             final String errorMessage = ex.getClass().getName() + " : " + ex.getMessage();
             clientProxy.onError(correlationId, GENERIC_ERROR, errorMessage);
-            recordError(ex);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1921,7 +1921,7 @@ private boolean eraseRemainingSegment(
             if (ReplaySession.notHeaderAligned(
                 channel, dataBuffer, segmentOffset, termOffset, termId, recordingSummary.streamId))
             {
-                final String msg = position + " position not aligned to data header";
+                final String msg = position + " position not aligned to a data header";
                 controlSession.sendErrorResponse(correlationId, msg, controlResponseProxy);
                 return false;
             }

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -294,7 +294,7 @@ private int init() throws IOException
                 {
                     if (notHeaderAligned(fileChannel, replayBuffer, segmentOffset, termOffset, termId, streamId))
                     {
-                        onError(replayPosition + " position not aligned to data header");
+                        onError(replayPosition + " position not aligned to a data header");
                         return 0;
                     }
                 }

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -126,6 +126,7 @@ public static void printWarning()
             warning.printStackTrace();
         }
     }
+
     public static void failOnClusterError()
     {
         final Throwable error = ERROR.getAndSet(null);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -605,14 +605,14 @@ public static final class Configuration
         public static final int ERROR_BUFFER_LENGTH_DEFAULT = 1024 * 1024;
 
         /**
-         * Timeout waiting for follower termination by leader.
+         * Timeout a leader will wait on getting termination acks from followers.
          */
         public static final String TERMINATION_TIMEOUT_PROP_NAME = "aeron.cluster.termination.timeout";
 
         /**
-         * Timeout waiting for follower termination by leader default value.
+         * Default timeout a leader will wait on getting termination acks from followers.
          */
-        public static final long TERMINATION_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(5);
+        public static final long TERMINATION_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(10);
 
         /**
          * Resolution in nanoseconds for each tick of the timer wheel for scheduling deadlines.

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1734,6 +1734,7 @@ private void startLogRecording(final String channel, final int streamId, final S
         {
             if (ex.errorCode() == ArchiveException.STORAGE_SPACE)
             {
+                ctx.countedErrorHandler().onError(ex);
                 unexpectedTermination();
             }
 

File: aeron-client/src/main/java/io/aeron/ErrorCode.java
Patch:
@@ -23,7 +23,7 @@
 public enum ErrorCode
 {
     /**
-     * Old generic value, no longer used (0 value clashes with success).  Retained for version compatibility.
+     * Old generic value, no longer used (0 value clashes with success). Retained for version compatibility.
      */
     UNUSED(0),
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTool.java
Patch:
@@ -714,7 +714,7 @@ public static boolean toggleClusterState(
         final File cncFile = new File(clusterNodeControlProperties.aeronDirectoryName, CncFileDescriptor.CNC_FILE);
         if (!cncFile.exists())
         {
-            out.println(prefix + "Unable to locate media driver.  C`n`C file [" + cncFile.getAbsolutePath() +
+            out.println(prefix + "Unable to locate media driver. C`n`C file [" + cncFile.getAbsolutePath() +
                 "] does not exist.");
             return false;
         }

File: aeron-driver/src/main/java/io/aeron/driver/MinMulticastFlowControl.java
Patch:
@@ -20,7 +20,7 @@
 import java.net.InetSocketAddress;
 
 /**
- * Minimum multicast sender flow control strategy.  Uses the {@link AbstractMinMulticastFlowControl}, but specifies that
+ * Minimum multicast sender flow control strategy. Uses the {@link AbstractMinMulticastFlowControl}, but specifies that
  * the group membership for a given receiver is always <code>true</code>, so it tracks the minimum for all receivers.
  */
 public class MinMulticastFlowControl extends AbstractMinMulticastFlowControl

File: aeron-driver/src/main/java/io/aeron/driver/media/NetworkUtil.java
Patch:
@@ -36,7 +36,7 @@ public class NetworkUtil
     /**
      * Search for a list of network interfaces that match the specified address and subnet prefix.
      * The results will be ordered by the length of the subnet prefix
-     * ({@link InterfaceAddress#getNetworkPrefixLength()}).  If no results match, then the collection
+     * ({@link InterfaceAddress#getNetworkPrefixLength()}). If no results match, then the collection
      * will be empty.
      *
      * @param address      to search for on the {@link NetworkInterface}s.

File: aeron-samples/src/main/java/io/aeron/samples/BasicSubscriber.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * This is a Basic Aeron subscriber application.
  * <p>
- * The application subscribes to a default channel and stream ID.  These defaults can
+ * The application subscribes to a default channel and stream ID. These defaults can
  * be overwritten by changing their value in {@link SampleConfiguration} or by
  * setting their corresponding Java system properties at the command line, e.g.:
  * -Daeron.sample.channel=aeron:udp?endpoint=localhost:5555 -Daeron.sample.streamId=20

File: aeron-samples/src/main/java/io/aeron/samples/SimplePublisher.java
Patch:
@@ -54,7 +54,7 @@ public static void main(final String[] args) throws InterruptedException
         final Aeron.Context ctx = new Aeron.Context();
 
         // Create an Aeron instance with client-provided context configuration and connect to the
-        // media driver, and create a Publication.  The Aeron and Publication classes implement
+        // media driver, and create a Publication. The Aeron and Publication classes implement
         // AutoCloseable, and will automatically clean up resources when this try block is finished.
         try (Aeron aeron = Aeron.connect(ctx);
             Publication publication = aeron.addPublication(channel, streamId))

File: aeron-samples/src/main/java/io/aeron/samples/StreamingPublisher.java
Patch:
@@ -109,7 +109,7 @@ public static void main(final String[] args) throws InterruptedException
                     while (publication.offer(OFFER_BUFFER, 0, length, null) < 0L)
                     {
                         // The offer failed, which is usually due to the publication
-                        // being temporarily blocked.  Retry the offer after a short
+                        // being temporarily blocked. Retry the offer after a short
                         // spin/yield/sleep, depending on the chosen IdleStrategy.
                         backPressureCount++;
                         idleStrategy.idle();

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -238,7 +238,7 @@ public static final class Configuration
          *
          * @see #LOW_STORAGE_SPACE_THRESHOLD_PROP_NAME
          */
-        public static final int LOW_STORAGE_SPACE_THRESHOLD_DEFAULT = TERM_MIN_LENGTH;
+        public static final int LOW_STORAGE_SPACE_THRESHOLD_DEFAULT = SEGMENT_FILE_LENGTH_DEFAULT;
 
         /**
          * The level at which recording files should be sync'ed to disk.

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2625,9 +2625,9 @@ private void idle(final int workCount)
 
     private static void checkInterruptStatus()
     {
-        if (Thread.interrupted())
+        if (Thread.currentThread().isInterrupted())
         {
-            LangUtil.rethrowUnchecked(new InterruptedException());
+            throw new AgentTerminationException("interrupted");
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductorProxy.java
Patch:
@@ -18,7 +18,7 @@
 import io.aeron.driver.media.ReceiveChannelEndpoint;
 import io.aeron.driver.media.SendChannelEndpoint;
 import io.aeron.driver.media.UdpChannel;
-import org.agrona.LangUtil;
+import org.agrona.concurrent.AgentTerminationException;
 import org.agrona.concurrent.status.AtomicCounter;
 
 import java.net.InetSocketAddress;
@@ -178,9 +178,9 @@ private void offer(final Runnable cmd)
             }
 
             Thread.yield();
-            if (Thread.interrupted())
+            if (Thread.currentThread().isInterrupted())
             {
-                LangUtil.rethrowUnchecked(new InterruptedException());
+                throw new AgentTerminationException("interrupted");
             }
         }
     }

File: aeron-driver/src/main/java/io/aeron/driver/ReceiverProxy.java
Patch:
@@ -18,7 +18,7 @@
 import io.aeron.driver.media.ReceiveChannelEndpoint;
 import io.aeron.driver.media.ReceiveDestinationTransport;
 import io.aeron.driver.media.UdpChannel;
-import org.agrona.LangUtil;
+import org.agrona.concurrent.AgentTerminationException;
 import org.agrona.concurrent.status.AtomicCounter;
 
 import java.net.InetSocketAddress;
@@ -203,9 +203,9 @@ private void offer(final Runnable cmd)
             }
 
             Thread.yield();
-            if (Thread.interrupted())
+            if (Thread.currentThread().isInterrupted())
             {
-                LangUtil.rethrowUnchecked(new InterruptedException());
+                throw new AgentTerminationException("interrupted");
             }
         }
     }

File: aeron-driver/src/main/java/io/aeron/driver/SenderProxy.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.aeron.ChannelUri;
 import io.aeron.driver.media.SendChannelEndpoint;
-import org.agrona.LangUtil;
+import org.agrona.concurrent.AgentTerminationException;
 import org.agrona.concurrent.status.AtomicCounter;
 
 import java.net.InetSocketAddress;
@@ -150,9 +150,9 @@ private void offer(final Runnable cmd)
             }
 
             Thread.yield();
-            if (Thread.interrupted())
+            if (Thread.currentThread().isInterrupted())
             {
-                LangUtil.rethrowUnchecked(new InterruptedException());
+                throw new AgentTerminationException("interrupted");
             }
         }
     }

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterBackupTest.java
Patch:
@@ -150,7 +150,7 @@ public void shouldBackupClusterWithSnapshot()
     }
 
     @Test
-    @Timeout(60)
+    @Timeout(30)
     public void shouldBackupClusterAfterCleanShutdown()
     {
         try (TestCluster cluster = TestCluster.startThreeNodeStaticCluster(NULL_VALUE))
@@ -345,7 +345,6 @@ public void shouldBackupClusterNoSnapshotsAndNonEmptyLogAfterFailure()
             final long logPosition = nextLeader.service().cluster().logPosition();
 
             cluster.startClusterBackupNode(true);
-
             cluster.awaitBackupState(ClusterBackup.State.BACKING_UP);
             cluster.awaitBackupLiveLogPosition(logPosition);
 

File: aeron-test-support/src/main/java/io/aeron/test/Tests.java
Patch:
@@ -337,7 +337,7 @@ public static void awaitValue(final AtomicLong counter, final long value)
         while ((counterValue = counter.get()) < value)
         {
             Thread.yield();
-            if (Thread.interrupted())
+            if (Thread.currentThread().isInterrupted())
             {
                 unexpectedInterruptStackTrace("awaiting=" + value + " counter=" + counterValue);
                 fail("unexpected interrupt");
@@ -351,7 +351,7 @@ public static void awaitValue(final AtomicCounter counter, final long value)
         while ((counterValue = counter.get()) < value)
         {
             Thread.yield();
-            if (Thread.interrupted())
+            if (Thread.currentThread().isInterrupted())
             {
                 unexpectedInterruptStackTrace("awaiting=" + value + " counter=" + counterValue);
                 fail("unexpected interrupt");

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -77,6 +77,7 @@ public static ErrorHandler errorHandler(final int memberId)
 
                 if (ex instanceof AgentTerminationException)
                 {
+                    addWarning(ex);
                     return;
                 }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;
+import org.agrona.IoUtil;
 import org.agrona.collections.LongHashSet;
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.NoOpLock;

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -300,9 +300,7 @@ private void startNode(final int index, final boolean cleanStart)
         final AeronArchive.Context archiveCtx = new AeronArchive.Context()
             .lock(NoOpLock.INSTANCE)
             .controlRequestChannel(ARCHIVE_CONTROL_REQUEST_CHANNEL)
-            .controlRequestStreamId(100 + index)
             .controlResponseChannel(ARCHIVE_CONTROL_RESPONSE_CHANNEL)
-            .controlResponseStreamId(110 + index)
             .aeronDirectoryName(baseDirName);
 
         clusteredMediaDrivers[index] = ClusteredMediaDriver.launch(

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2881,7 +2881,7 @@ private void closeAndTerminate()
     private void unexpectedTermination()
     {
         aeron.removeUnavailableCounterHandler(unavailableCounterHandlerRegistrationId);
-        serviceProxy.terminationPosition(NULL_POSITION, ctx.countedErrorHandler());
+        serviceProxy.terminationPosition(0, ctx.countedErrorHandler());
         tryStopLogRecording();
         state(ConsensusModule.State.CLOSED);
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterControl.java
Patch:
@@ -256,7 +256,7 @@ private static void checkUsage(final String[] args)
         if (1 != args.length)
         {
             System.out.format("Usage: [-Daeron.dir=<directory containing CnC file> -Daeron.cluster.id=<id>] " +
-                ClusterControl.class.getSimpleName() + " <action>%n");
+                ClusterControl.class.getName() + " <action>%n");
 
             System.exit(0);
         }

File: aeron-driver/src/main/java/io/aeron/driver/ClientCommandAdapter.java
Patch:
@@ -269,7 +269,7 @@ else if (channel.startsWith(SPY_QUALIFIER))
         }
         catch (final Exception ex)
         {
-            final String errorMessage = ex.getClass().getSimpleName() + " : " + ex.getMessage();
+            final String errorMessage = ex.getClass().getName() + " : " + ex.getMessage();
             clientProxy.onError(correlationId, GENERIC_ERROR, errorMessage);
             recordError(ex);
         }

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -279,7 +279,7 @@ void onCreatePublicationImage(
 
     void onChannelEndpointError(final long statusIndicatorId, final Exception ex)
     {
-        final String errorMessage = ex.getClass().getSimpleName() + " : " + ex.getMessage();
+        final String errorMessage = ex.getClass().getName() + " : " + ex.getMessage();
         clientProxy.onError(statusIndicatorId, CHANNEL_ENDPOINT_ERROR, errorMessage);
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/SubscriptionLink.java
Patch:
@@ -206,7 +206,7 @@ public boolean hasReachedEndOfLife()
 
     public String toString()
     {
-        return this.getClass().getSimpleName() + "{" +
+        return this.getClass().getName() + "{" +
             "registrationId=" + registrationId +
             ", streamId=" + streamId +
             ", sessionId=" + sessionId +

File: aeron-test-support/src/main/java/io/aeron/test/driver/CTestMediaDriver.java
Patch:
@@ -232,7 +232,7 @@ private static void setFlowControlStrategy(final Map<String, String> environment
         else if (null != multicastFlowControlSupplier)
         {
             throw new RuntimeException("No equivalent C multicast flow control strategy for: " +
-                multicastFlowControlSupplier.getClass().getSimpleName());
+                multicastFlowControlSupplier.getClass().getName());
         }
 
         final FlowControlSupplier unicastFlowControlSupplier = context.unicastFlowControlSupplier();
@@ -244,7 +244,7 @@ else if (null != multicastFlowControlSupplier)
         else if (null != unicastFlowControlSupplier)
         {
             throw new RuntimeException("No equivalent C unicast flow control strategy for: " +
-                multicastFlowControlSupplier.getClass().getSimpleName());
+                multicastFlowControlSupplier.getClass().getName());
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -141,7 +141,7 @@ public final class DriverConductor implements Agent
 
         ctx.systemCounters().get(RESOLUTION_CHANGES)
             .appendToLabel(": driverName=").appendToLabel(ctx.resolverName())
-            .appendToLabel(" hostname=").appendToLabel(DriverNameResolver.getCanonicalName());
+            .appendToLabel(" hostname=").appendToLabel(DriverNameResolver.getCanonicalName("<unresolved>"));
 
         final long nowNs = nanoClock.nanoTime();
         cachedNanoClock.update(nowNs);

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -45,9 +45,8 @@
 import static io.aeron.agent.EventConfiguration.EVENT_READER_FRAME_LIMIT;
 import static io.aeron.agent.EventConfiguration.EVENT_RING_BUFFER;
 import static java.util.Collections.synchronizedSet;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.params.provider.EnumSource.Mode.INCLUDE;
 
 public class DriverLoggingAgentTest
@@ -189,7 +188,7 @@ private void testLogMediaDriverEvents(
             latch.await();
         }
 
-        assertThat(LOGGED_EVENTS, containsInAnyOrder(expectedEvents.toArray()));
+        assertTrue(LOGGED_EVENTS.containsAll(expectedEvents));
     }
 
     private void before(final String enabledEvents, final EnumSet<DriverEventCode> expectedEvents)

File: aeron-system-tests/src/test/java/io/aeron/MinFlowControlSystemTest.java
Patch:
@@ -88,12 +88,14 @@ private void launch()
         driverAContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirA)
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
+            .flowControlReceiverTimeoutNs(TimeUnit.MILLISECONDS.toNanos(1000))
             .errorHandler(Tests::onError)
             .threadingMode(ThreadingMode.SHARED);
 
         driverBContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirB)
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
+            .flowControlReceiverTimeoutNs(TimeUnit.MILLISECONDS.toNanos(1000))
             .errorHandler(Tests::onError)
             .threadingMode(ThreadingMode.SHARED);
 
@@ -200,7 +202,6 @@ public void shouldRemoveDeadTaggedReceiverWithMinMulticastFlowControlStrategy()
         final int numMessagesToSend = NUM_MESSAGES_PER_TERM * 3;
         int numMessagesLeftToSend = numMessagesToSend;
         int numFragmentsReadFromA = 0, numFragmentsReadFromB = 0;
-        boolean isBClosed = false;
 
         driverBContext.imageLivenessTimeoutNs(TimeUnit.MILLISECONDS.toNanos(500));
         driverAContext.multicastFlowControlSupplier(new MinMulticastFlowControlSupplier());
@@ -216,6 +217,7 @@ public void shouldRemoveDeadTaggedReceiverWithMinMulticastFlowControlStrategy()
             Tests.yield();
         }
 
+        boolean isBClosed = false;
         while (numFragmentsReadFromA < numMessagesToSend)
         {
             if (numMessagesLeftToSend > 0)

File: aeron-system-tests/src/test/java/io/aeron/TaggedFlowControlSystemTest.java
Patch:
@@ -88,12 +88,14 @@ private void launch()
         driverAContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirA)
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
+            .flowControlReceiverTimeoutNs(TimeUnit.MILLISECONDS.toNanos(1000))
             .errorHandler(Tests::onError)
             .threadingMode(ThreadingMode.SHARED);
 
         driverBContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirB)
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
+            .flowControlReceiverTimeoutNs(TimeUnit.MILLISECONDS.toNanos(1000))
             .errorHandler(Tests::onError)
             .threadingMode(ThreadingMode.SHARED);
 

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/InvalidChannelException.java
Patch:
@@ -16,7 +16,6 @@
 package io.aeron.driver.exceptions;
 
 import io.aeron.ErrorCode;
-import io.aeron.exceptions.AeronException;
 import io.aeron.exceptions.ControlProtocolException;
 
 /**

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/ActiveDriverException.java
Patch:
@@ -23,7 +23,7 @@
 public class ActiveDriverException extends AeronException
 {
     /**
-     * Exception with provided message and {@link AeronException.Category#ERROR}.
+     * Exception with provided message and {@link io.aeron.exceptions.AeronException.Category#ERROR}.
      *
      * @param message to detail the exception.
      */

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/UnknownSubscriptionException.java
Patch:
@@ -23,7 +23,7 @@
 public class UnknownSubscriptionException extends AeronException
 {
     /**
-     * Exception with provided message and {@link AeronException.Category#ERROR}.
+     * Exception with provided message and {@link io.aeron.exceptions.AeronException.Category#ERROR}.
      *
      * @param message to detail the exception.
      */

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/ActiveDriverException.java
Patch:
@@ -23,7 +23,7 @@
 public class ActiveDriverException extends AeronException
 {
     /**
-     * Exception with provided message and {@link Category#ERROR}.
+     * Exception with provided message and {@link AeronException.Category#ERROR}.
      *
      * @param message to detail the exception.
      */

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/InvalidChannelException.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.driver.exceptions;
 
 import io.aeron.ErrorCode;
+import io.aeron.exceptions.AeronException;
 import io.aeron.exceptions.ControlProtocolException;
 
 /**
@@ -24,7 +25,7 @@
 public class InvalidChannelException extends ControlProtocolException
 {
     /**
-     * Exception with provided message and {@link Category#ERROR} and {@link ErrorCode#INVALID_CHANNEL}.
+     * Exception with provided message and {@link AeronException.Category#ERROR} and {@link ErrorCode#INVALID_CHANNEL}.
      *
      * @param message to detail the exception.
      */
@@ -34,7 +35,7 @@ public InvalidChannelException(final String message)
     }
 
     /**
-     * Exception with provided cause and {@link Category#ERROR} and {@link ErrorCode#INVALID_CHANNEL}.
+     * Exception with provided cause and {@link AeronException.Category#ERROR} and {@link ErrorCode#INVALID_CHANNEL}.
      *
      * @param cause of the exception.
      */

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/UnknownSubscriptionException.java
Patch:
@@ -23,7 +23,7 @@
 public class UnknownSubscriptionException extends AeronException
 {
     /**
-     * Exception with provided message and {@link Category#ERROR}.
+     * Exception with provided message and {@link AeronException.Category#ERROR}.
      *
      * @param message to detail the exception.
      */

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -669,7 +669,7 @@ public class Configuration
      * Default value for the receiver timeout used to determine if the receiver should still be monitored for
      * flow control purposes.
      */
-    public static final long FLOW_CONTROL_RECEIVER_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(2);
+    public static final long FLOW_CONTROL_RECEIVER_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(5);
 
     /**
      * Property name for flow control timeout after which with no status messages the receiver is consider gone.

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -112,7 +112,7 @@ public static void failOnClusterError()
         {
             if (null != warning)
             {
-                System.err.println("*** Warning captured before error ***");
+                System.err.println("*** Warning captured with error ***");
                 warning.printStackTrace();
             }
 

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -235,8 +235,8 @@ private static void checkForHelp(final String[] args)
                     "filter by optional regex patterns:%n" +
                     "\t[type=<pattern>]%n" +
                     "\t[identity=<pattern>]%n" +
-                    "\t[sessionId=<pattern>]%n" +
-                    "\t[streamId=<pattern>]%n" +
+                    "\t[session=<pattern>]%n" +
+                    "\t[stream=<pattern>]%n" +
                     "\t[channel=<pattern>]%n");
 
                 System.exit(0);

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -56,7 +56,6 @@
 
 import static io.aeron.Aeron.NULL_VALUE;
 import static io.aeron.cluster.RecordingLog.RECORDING_LOG_FILE_NAME;
-import static io.aeron.test.cluster.ClusterTests.awaitElectionState;
 import static org.junit.jupiter.api.Assertions.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: aeron-test-support/src/main/java/io/aeron/test/cluster/ClusterTests.java
Patch:
@@ -104,7 +104,7 @@ public static void addError(final Throwable ex)
         {
             CLUSTER_ERROR.set(ex);
         }
-        else
+        else if (error != ex)
         {
             error.addSuppressed(ex);
         }

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -162,11 +162,11 @@ public void before()
     @AfterEach
     public void after()
     {
-        if (receivedMessageCount.get() != MIN_MESSAGES_PER_TERM * 6)
+        if (receivedMessageCount.get() != MIN_MESSAGES_PER_TERM * 6L)
         {
             System.out.println(
                 "received " + receivedMessageCount.get() + ", sent " + messagesPublished +
-                ", total " + (MIN_MESSAGES_PER_TERM * 6));
+                ", total " + (MIN_MESSAGES_PER_TERM * 6L));
         }
 
         CloseHelper.closeAll(aeronArchive, aeron, archive, driver);

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredServiceNode.java
Patch:
@@ -153,9 +153,9 @@ public static void main(final String[] args)
         // tag::archive_client[]
         final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context()
             .lock(NoOpLock.INSTANCE)
-            .controlRequestChannel(archiveContext.controlChannel())
-            .controlRequestStreamId(archiveContext.controlStreamId())
-            .controlResponseChannel("aeron:udp?endpoint=localhost:0|term-length=64k")
+            .controlRequestChannel(archiveContext.localControlChannel())
+            .controlRequestStreamId(archiveContext.localControlStreamId())
+            .controlResponseChannel(archiveContext.localControlChannel())
             .aeronDirectoryName(aeronDirName);
         // end::archive_client[]
 

File: aeron-client/src/main/java/io/aeron/exceptions/RegistrationException.java
Patch:
@@ -51,7 +51,7 @@ public RegistrationException(
         final long correlationId, final int errorCodeValue, final ErrorCode errorCode, final String msg)
     {
         super(
-            msg + ", correlationId=" + correlationId + " errorCodeValue=" + errorCodeValue,
+            msg + ", errorCodeValue=" + errorCodeValue,
             ErrorCode.RESOURCE_TEMPORARILY_UNAVAILABLE == errorCode ? Category.WARN : Category.ERROR);
         this.correlationId = correlationId;
         this.errorCode = errorCode;

File: aeron-driver/src/main/java/io/aeron/driver/ClientCommandAdapter.java
Patch:
@@ -255,8 +255,7 @@ else if (channel.startsWith(SPY_QUALIFIER))
                 default:
                 {
                     final ControlProtocolException ex = new ControlProtocolException(
-                        ErrorCode.UNKNOWN_COMMAND_TYPE_ID,
-                        "command typeId=" + msgTypeId + " unknown, correlationId=" + correlationId);
+                        ErrorCode.UNKNOWN_COMMAND_TYPE_ID, "command typeId=" + msgTypeId);
 
                     clientProxy.onError(correlationId, ex.errorCode(), ex.getMessage());
                     recordError(ex);

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -731,14 +731,14 @@ Subscription extendRecording(
     {
         if (recordingSessionByIdMap.size() >= maxConcurrentRecordings)
         {
-            final String msg = "max concurrent recordings reached of " + maxConcurrentRecordings;
+            final String msg = "max concurrent recordings reached at " + maxConcurrentRecordings;
             controlSession.sendErrorResponse(correlationId, MAX_RECORDINGS, msg, controlResponseProxy);
             return null;
         }
 
         if (!catalog.hasRecording(recordingId))
         {
-            final String msg = "unknown recording id " + recordingId;
+            final String msg = "unknown recording " + recordingId;
             controlSession.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
             return null;
         }
@@ -754,7 +754,7 @@ Subscription extendRecording(
 
         if (recordingSessionByIdMap.containsKey(recordingId))
         {
-            final String msg = "cannot extend active recording for " + recordingId;
+            final String msg = "cannot extend active recording " + recordingId;
             controlSession.sendErrorResponse(correlationId, ACTIVE_RECORDING, msg, controlResponseProxy);
             return null;
         }

File: aeron-driver/src/main/java/io/aeron/driver/reports/LossReport.java
Patch:
@@ -189,7 +189,7 @@ public static class ReportEntry
          */
         public void recordObservation(final long bytesLost, final long timestampMs)
         {
-            buffer.putLong(offset + LAST_OBSERVATION_OFFSET, timestampMs);
+            buffer.putLongOrdered(offset + LAST_OBSERVATION_OFFSET, timestampMs);
             buffer.getAndAddLong(offset + TOTAL_BYTES_LOST_OFFSET, bytesLost);
             buffer.getAndAddLong(offset + OBSERVATION_COUNT_OFFSET, 1);
         }

File: aeron-driver/src/main/java/io/aeron/driver/reports/LossReportReader.java
Patch:
@@ -110,9 +110,9 @@ public static int read(final AtomicBuffer buffer, final EntryConsumer entryConsu
 
             entryConsumer.accept(
                 observationCount,
-                buffer.getLong(offset + TOTAL_BYTES_LOST_OFFSET),
+                buffer.getLongVolatile(offset + TOTAL_BYTES_LOST_OFFSET),
                 buffer.getLong(offset + FIRST_OBSERVATION_OFFSET),
-                buffer.getLong(offset + LAST_OBSERVATION_OFFSET),
+                buffer.getLongVolatile(offset + LAST_OBSERVATION_OFFSET),
                 buffer.getInt(offset + SESSION_ID_OFFSET),
                 buffer.getInt(offset + STREAM_ID_OFFSET),
                 channel,

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -276,7 +276,8 @@ else if (2 == publisherId)
     @ParameterizedTest
     @MethodSource("channels")
     @Timeout(10)
-    public void shouldOfferTwoBuffersFromConcurrentExclusivePublications(final String channel) throws InterruptedException
+    public void shouldOfferTwoBuffersFromConcurrentExclusivePublications(final String channel)
+        throws InterruptedException
     {
         try (Subscription subscription = aeron.addSubscription(channel, STREAM_ID);
             ExclusivePublication publicationOne = aeron.addExclusivePublication(channel, STREAM_ID);

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -26,6 +26,8 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.security.*;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.ClusterTests;
+import io.aeron.test.cluster.StubClusteredService;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -29,6 +29,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.Header;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.ClusterTests;
+import io.aeron.test.cluster.StubClusteredService;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -27,6 +27,8 @@
 import io.aeron.logbuffer.BufferClaim;
 import io.aeron.logbuffer.Header;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.ClusterTests;
+import io.aeron.test.cluster.StubClusteredService;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTimerTest.java
Patch:
@@ -28,6 +28,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.ClusterTests;
+import io.aeron.test.cluster.StubClusteredService;
 import org.agrona.CloseHelper;
 import org.agrona.ExpandableArrayBuffer;
 import org.agrona.concurrent.status.AtomicCounter;

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleAgentTest.java
Patch:
@@ -23,6 +23,7 @@
 import io.aeron.security.DefaultAuthenticatorSupplier;
 import io.aeron.status.ReadableCounter;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.TestClusterClock;
 import org.agrona.collections.MutableLong;
 import org.agrona.concurrent.AgentInvoker;
 import org.agrona.concurrent.NoOpIdleStrategy;

File: aeron-cluster/src/test/java/io/aeron/cluster/ElectionTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.*;
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusterMarkFile;
+import io.aeron.test.cluster.TestClusterClock;
 import org.agrona.collections.Int2ObjectHashMap;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -31,6 +31,8 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.test.SlowTest;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.ClusterTests;
+import io.aeron.test.cluster.StubClusteredService;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.BufferClaim;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableBoolean;

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.status.ChannelEndpointStatus;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.ErrorHandler;

File: aeron-system-tests/src/test/java/io/aeron/ControlledMessageTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.ControlledFragmentHandler;
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -18,9 +18,9 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.status.ReadableCounter;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.CountersReader;

File: aeron-system-tests/src/test/java/io/aeron/DriverNameResolverTest.java
Patch:
@@ -18,10 +18,10 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
 import io.aeron.test.SlowTest;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.SleepingMillisIdleStrategy;

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.RawBlockHandler;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -23,9 +23,9 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.junit.jupiter.api.Test;
@@ -35,7 +35,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static io.aeron.test.LossReportTestUtil.verifyLossOccurredForStream;
+import static io.aeron.test.driver.LossReportTestUtil.verifyLossOccurredForStream;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.lessThan;
 

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.junit.jupiter.api.AfterEach;

File: aeron-system-tests/src/test/java/io/aeron/LifecycleTest.java
Patch:
@@ -16,8 +16,8 @@
 package io.aeron;
 
 import io.aeron.driver.MediaDriver;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;

File: aeron-system-tests/src/test/java/io/aeron/MaxFlowControlStrategySystemTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;

File: aeron-system-tests/src/test/java/io/aeron/MaxPositionPublicationTest.java
Patch:
@@ -18,9 +18,9 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.junit.jupiter.api.AfterEach;

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.Header;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;

File: aeron-system-tests/src/test/java/io/aeron/MinFlowControlSystemTest.java
Patch:
@@ -24,8 +24,8 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.CountingFragmentHandler;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationSubscriptionTest.java
Patch:
@@ -22,6 +22,8 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.*;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.IoUtil;

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -21,9 +21,9 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
+import io.aeron.test.driver.MediaDriverTestWatcher;
 import io.aeron.test.SlowTest;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -23,8 +23,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.RawBlockHandler;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
@@ -46,7 +46,7 @@
 
 import static io.aeron.logbuffer.FrameDescriptor.FRAME_ALIGNMENT;
 import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
-import static io.aeron.test.LossReportTestUtil.verifyLossOccurredForStream;
+import static io.aeron.test.driver.LossReportTestUtil.verifyLossOccurredForStream;
 import static java.util.Arrays.asList;
 import static org.agrona.BitUtil.SIZE_OF_INT;
 import static org.junit.jupiter.api.Assertions.assertEquals;

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.BufferClaim;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -20,9 +20,9 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;

File: aeron-system-tests/src/test/java/io/aeron/ReentrantClientTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import io.aeron.driver.MediaDriver;
 import io.aeron.exceptions.AeronException;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.ErrorHandler;

File: aeron-system-tests/src/test/java/io/aeron/ResolvedEndpointSystemTest.java
Patch:
@@ -18,9 +18,9 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.junit.jupiter.api.AfterEach;

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificPublicationTest.java
Patch:
@@ -20,10 +20,10 @@
 import io.aeron.exceptions.RegistrationException;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
 import io.aeron.test.SlowTest;
-import io.aeron.test.TestMediaDriver;
 import io.aeron.test.Tests;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.ErrorHandler;

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;

File: aeron-system-tests/src/test/java/io/aeron/TaggedFlowControlSystemTest.java
Patch:
@@ -6,8 +6,8 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.*;
 import org.agrona.concurrent.UnsafeBuffer;

File: aeron-system-tests/src/test/java/io/aeron/TwoBufferOfferMessageTest.java
Patch:
@@ -18,8 +18,8 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableReference;

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.concurrent.UnsafeBuffer;

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -24,8 +24,8 @@
 import io.aeron.security.AuthenticatorSupplier;
 import io.aeron.security.CredentialsSupplier;
 import io.aeron.security.SessionProxy;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveDeleteAndRestartTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FrameDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.IoUtil;

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -26,8 +26,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.logbuffer.Header;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.*;
 import org.agrona.collections.MutableBoolean;

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -21,8 +21,8 @@
 import io.aeron.archive.status.RecordingPos;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;

File: aeron-system-tests/src/test/java/io/aeron/archive/CatalogWithJumboRecordingsAndGapsTest.java
Patch:
@@ -20,8 +20,8 @@
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.collections.MutableInteger;

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -25,8 +25,8 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.ExpandableArrayBuffer;

File: aeron-system-tests/src/test/java/io/aeron/archive/ManageRecordingHistoryTest.java
Patch:
@@ -23,8 +23,8 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.LogBufferDescriptor;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -24,8 +24,8 @@
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.protocol.DataHeaderFlyweight;
 import io.aeron.test.DataCollector;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.ExpandableArrayBuffer;

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -22,8 +22,8 @@
 import io.aeron.archive.status.RecordingPos;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
-import io.aeron.test.MediaDriverTestWatcher;
-import io.aeron.test.TestMediaDriver;
+import io.aeron.test.driver.MediaDriverTestWatcher;
+import io.aeron.test.driver.TestMediaDriver;
 import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;

File: aeron-system-tests/src/test/java/io/aeron/cluster/AppointedLeaderTest.java
Patch:
@@ -16,6 +16,8 @@
 package io.aeron.cluster;
 
 import io.aeron.cluster.service.Cluster;
+import io.aeron.test.cluster.TestCluster;
+import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterBackupTest.java
Patch:
@@ -17,7 +17,9 @@
 
 import io.aeron.cluster.client.AeronCluster;
 import io.aeron.test.SlowTest;
-
+import io.aeron.test.cluster.TestBackupNode;
+import io.aeron.test.cluster.TestCluster;
+import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -16,6 +16,8 @@
 package io.aeron.cluster;
 
 import io.aeron.test.SlowTest;
+import io.aeron.test.cluster.TestCluster;
+import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 import org.junit.jupiter.api.io.TempDir;

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiClusteredServicesTest.java
Patch:
@@ -23,6 +23,8 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.Header;
 import io.aeron.test.Tests;
+import io.aeron.test.cluster.TestCluster;
+import io.aeron.test.cluster.TestNode;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;

File: aeron-system-tests/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -16,6 +16,8 @@
 package io.aeron.cluster;
 
 import io.aeron.cluster.service.Cluster;
+import io.aeron.test.cluster.TestCluster;
+import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/ServiceIpcIngressTest.java
Patch:
@@ -15,6 +15,8 @@
  */
 package io.aeron.cluster;
 
+import io.aeron.test.cluster.ClusterTests;
+import io.aeron.test.cluster.TestCluster;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 

File: aeron-system-tests/src/test/java/io/aeron/cluster/SingleNodeTest.java
Patch:
@@ -16,6 +16,8 @@
 package io.aeron.cluster;
 
 import io.aeron.cluster.service.Cluster;
+import io.aeron.test.cluster.TestCluster;
+import io.aeron.test.cluster.TestNode;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
 

File: aeron-test-support/src/main/java/io/aeron/test/driver/DistinctErrorLogTestWatcher.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.test;
+package io.aeron.test.driver;
 
 import io.aeron.CommonContext;
 import org.agrona.IoUtil;

File: aeron-test-support/src/main/java/io/aeron/test/driver/DriverOutputConsumer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.test;
+package io.aeron.test.driver;
 
 import java.io.File;
 import java.util.Map;

File: aeron-test-support/src/main/java/io/aeron/test/driver/ErrorReportTestUtil.java
Patch:
@@ -13,9 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.test;
+package io.aeron.test.driver;
 
 import io.aeron.CommonContext;
+import io.aeron.test.Tests;
 import org.agrona.IoUtil;
 import org.agrona.concurrent.AtomicBuffer;
 import org.agrona.concurrent.IdleStrategy;

File: aeron-test-support/src/main/java/io/aeron/test/driver/LossReportTestUtil.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.test;
+package io.aeron.test.driver;
 
 import io.aeron.driver.reports.LossReportReader;
 import io.aeron.driver.reports.LossReportUtil;

File: aeron-test-support/src/main/java/io/aeron/test/driver/MediaDriverTestWatcher.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.test;
+package io.aeron.test.driver;
 
+import io.aeron.test.IgnoreStdErr;
 import org.agrona.IoUtil;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.extension.AfterTestExecutionCallback;

File: aeron-test-support/src/main/java/io/aeron/test/driver/StubCsvNameResolver.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.test;
+package io.aeron.test.driver;
 
 import io.aeron.driver.DefaultNameResolver;
 import io.aeron.driver.NameResolver;

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTimerTest.java
Patch:
@@ -166,7 +166,7 @@ void shouldRescheduleTimerWhenSchedulingWithExistingCorrelationId()
         {
             public void onSessionOpen(final ClientSession session, final long timestamp)
             {
-                schedule(1, timestamp + 10);
+                schedule(1, timestamp + 1_000_000); // Too far in the future
                 schedule(1, timestamp + 20);
                 schedule(2, timestamp + 30);
             }

File: aeron-agent/src/main/java/io/aeron/agent/CommonEventEncoder.java
Patch:
@@ -78,7 +78,7 @@ static int internalEncodeLogHeader(
     }
 
     static int encodeSocketAddress(
-        final UnsafeBuffer encodingBuffer, final int offset, final InetSocketAddress dstAddress)
+        final UnsafeBuffer encodingBuffer, final int offset, final InetSocketAddress address)
     {
         int relativeOffset = 0;
         /*
@@ -88,10 +88,10 @@ static int encodeSocketAddress(
          * - IP address (4 or 16 bytes)
          */
 
-        encodingBuffer.putInt(offset + relativeOffset, dstAddress.getPort(), LITTLE_ENDIAN);
+        encodingBuffer.putInt(offset + relativeOffset, address.getPort(), LITTLE_ENDIAN);
         relativeOffset += SIZE_OF_INT;
 
-        final byte[] addressBytes = dstAddress.getAddress().getAddress();
+        final byte[] addressBytes = address.getAddress().getAddress();
         encodingBuffer.putInt(offset + relativeOffset, addressBytes.length, LITTLE_ENDIAN);
         relativeOffset += SIZE_OF_INT;
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1541,6 +1541,7 @@ private IpcPublication addIpcPublication(
 
         final IpcPublication publication = new IpcPublication(
             registrationId,
+            channel,
             ctx,
             params.entityTag,
             sessionId,

File: aeron-driver/src/test/java/io/aeron/driver/UntetheredSubscriptionTest.java
Patch:
@@ -57,6 +57,7 @@ public void before()
 
         ipcPublication = new IpcPublication(
             REGISTRATION_ID,
+            CHANNEL,
             ctx,
             TAG_ID,
             SESSION_ID,

File: aeron-system-tests/src/test/java/io/aeron/test/CTestMediaDriver.java
Patch:
@@ -192,7 +192,7 @@ public static CTestMediaDriver launch(
 
     private static void setLogging(final Map<String, String> environment)
     {
-        environment.put("AERON_EVENT_LOG", "0xffff");
+        environment.put("AERON_EVENT_LOG", "all");
 
         final String driverAgentPath = System.getProperty(DRIVER_AGENT_PATH_PROP_NAME);
         if (null == driverAgentPath)

File: aeron-archive/src/main/java/io/aeron/archive/ControlSessionDemuxer.java
Patch:
@@ -798,7 +798,6 @@ private ControlSession getControlSession(final long controlSessionId, final long
         if (controlSession == null)
         {
             final String message = "unknown controlSessionId=" + controlSessionId +
-                " for correlationId=" + correlationId +
                 " from source=" + image.sourceIdentity();
 
             throw new ArchiveException(message, correlationId, AeronException.Category.WARN);

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -3077,7 +3077,7 @@ private void checkDeadline()
 
             if (deadlineNs - nanoClock.nanoTime() < 0)
             {
-                throw new TimeoutException("Archive connect timeout: correlationId=" + correlationId + " step=" + step);
+                throw new TimeoutException("Archive connect timeout: step=" + step);
             }
         }
     }

File: aeron-agent/src/main/java/io/aeron/agent/EventLogReaderAgent.java
Patch:
@@ -47,7 +47,7 @@ public final class EventLogReaderAgent implements Agent, MessageHandler
      */
     public static final String LOG_FILENAME_PROP_NAME = "aeron.event.log.filename";
 
-    private final ManyToOneRingBuffer ringBuffer = EVENT_RING_BUFFER;
+    private final ManyToOneRingBuffer ringBuffer = EventConfiguration.EVENT_RING_BUFFER;
     private final StringBuilder builder = new StringBuilder();
     private ByteBuffer byteBuffer;
     private FileChannel fileChannel = null;

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -876,6 +876,7 @@ public void conclude()
                         .epochClock(epochClock)
                         .driverAgentInvoker(mediaDriverAgentInvoker)
                         .useConductorAgentInvoker(true)
+                        .subscriberErrorHandler(RethrowingErrorHandler.INSTANCE)
                         .awaitingIdleStrategy(YieldingIdleStrategy.INSTANCE)
                         .clientLock(NoOpLock.INSTANCE));
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -165,12 +165,12 @@ public int doWork()
         if (null != logAdapter.image())
         {
             final int polled = logAdapter.poll(commitPosition.get());
+            workCount += polled;
+
             if (0 == polled && logAdapter.isDone())
             {
                 closeLog();
             }
-
-            workCount += polled;
         }
 
         return workCount;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -15,9 +15,7 @@
  */
 package io.aeron.cluster.service;
 
-import io.aeron.Aeron;
-import io.aeron.AeronCounters;
-import io.aeron.CommonContext;
+import io.aeron.*;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.mark.ClusterComponentType;
@@ -675,6 +673,7 @@ public void conclude()
                     new Aeron.Context()
                         .aeronDirectoryName(aeronDirectoryName)
                         .errorHandler(errorHandler)
+                        .subscriberErrorHandler(RethrowingErrorHandler.INSTANCE)
                         .awaitingIdleStrategy(YieldingIdleStrategy.INSTANCE)
                         .epochClock(epochClock));
 

File: aeron-client/src/main/java/io/aeron/RethrowingErrorHandler.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Error handler that will rethrow a {@link Throwable} as an unchecked exception.
  */
-public class RethrowingErrorHandler implements ErrorHandler
+public final class RethrowingErrorHandler implements ErrorHandler
 {
     /**
      * Singleton instance to avoid allocation.

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -332,7 +332,7 @@ void onAvailableImage(
                 sessionId,
                 new UnsafeBufferPosition(counterValuesBuffer, subscriberPositionId),
                 logBuffers(correlationId, logFileName, subscription.channel()),
-                ctx.errorHandler(),
+                ctx.subscriberErrorHandler(),
                 sourceIdentity,
                 correlationId);
 

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveInterceptor.java
Patch:
@@ -56,10 +56,9 @@ static void onPendingError(final long sessionId, final long recordingId, final S
     static class Catalog
     {
         @Advice.OnMethodEnter
-        static void catalogResized(
-            final int maxEntries, final long catalogLength, final int newMaxEntries, final long newCatalogLength)
+        static void catalogResized(final long catalogLength, final long newCatalogLength)
         {
-            LOGGER.logCatalogResize(maxEntries, catalogLength, newMaxEntries, newCatalogLength);
+            LOGGER.logCatalogResize(catalogLength, newCatalogLength);
         }
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -42,7 +42,7 @@ public class ArchiveMarkFile implements AutoCloseable
     /**
      * Major version for the archive files stored on disk. A change to this requires migration.
      */
-    public static final int MAJOR_VERSION = 2;
+    public static final int MAJOR_VERSION = 3;
 
     /**
      * Minor version for the archive files stored on disk. A change to this indicates new features.

File: aeron-archive/src/main/java/io/aeron/archive/CatalogView.java
Patch:
@@ -74,6 +74,7 @@ static class RecordingDescriptorConsumerAdapter implements Catalog.CatalogEntryP
         }
 
         public void accept(
+            final int recordingDescriptorOffset,
             final RecordingDescriptorHeaderEncoder headerEncoder,
             final RecordingDescriptorHeaderDecoder headerDecoder,
             final RecordingDescriptorEncoder descriptorEncoder,

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestDecoders.java
Patch:
@@ -34,6 +34,7 @@ class ControlRequestDecoders
     final ExtendRecordingRequest2Decoder extendRecordingRequest2 = new ExtendRecordingRequest2Decoder();
     final RecordingPositionRequestDecoder recordingPositionRequest = new RecordingPositionRequestDecoder();
     final TruncateRecordingRequestDecoder truncateRecordingRequest = new TruncateRecordingRequestDecoder();
+    final PurgeRecordingRequestDecoder purgeRecordingRequest = new PurgeRecordingRequestDecoder();
     final StopRecordingSubscriptionRequestDecoder stopRecordingSubscriptionRequest =
         new StopRecordingSubscriptionRequestDecoder();
     final StopPositionRequestDecoder stopPositionRequest = new StopPositionRequestDecoder();

File: aeron-archive/src/test/java/io/aeron/archive/CatalogViewTest.java
Patch:
@@ -31,7 +31,7 @@
 
 public class CatalogViewTest
 {
-    private static final long MAX_ENTRIES = 1024;
+    private static final long CAPACITY = 1024 * 1024;
     private static final int TERM_LENGTH = 2 * Catalog.PAGE_SIZE;
     private static final int SEGMENT_LENGTH = 2 * TERM_LENGTH;
     private static final int MTU_LENGTH = 1024;
@@ -49,7 +49,7 @@ public void before()
     {
         clock.update(1);
 
-        try (Catalog catalog = new Catalog(archiveDir, null, 0, MAX_ENTRIES, clock, null, null))
+        try (Catalog catalog = new Catalog(archiveDir, null, 0, CAPACITY, clock, null, null))
         {
             recordingOneId = catalog.addNewRecording(
                 10L, 4L, 0, SEGMENT_LENGTH, TERM_LENGTH, MTU_LENGTH, 7, 1, "channelG", "channelG?tag=f", "sourceA");

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -45,7 +45,7 @@
 
 public class AuthenticationTest
 {
-    private static final long MAX_CATALOG_ENTRIES = 1024;
+    private static final long CATALOG_CAPACITY = 1024 * 1024;
     private static final String CREDENTIALS_STRING = "username=\"admin\"|password=\"secret\"";
     private static final String CHALLENGE_STRING = "I challenge you!";
     private static final String PRINCIPAL_STRING = "I am THE Principal!";
@@ -475,7 +475,7 @@ private void launchClusteredMediaDriver(final AuthenticatorSupplier authenticato
                 .dirDeleteOnStart(true)
                 .dirDeleteOnShutdown(false),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .recordingEventsEnabled(false)
                 .deleteArchiveOnStart(true),

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -53,7 +53,7 @@
 
 public class ClusterNodeRestartTest
 {
-    private static final long MAX_CATALOG_ENTRIES = 1024;
+    private static final long CATALOG_CAPACITY = 1024 * 1024;
     private static final int MESSAGE_LENGTH = SIZE_OF_INT;
     private static final int TIMER_MESSAGE_LENGTH = SIZE_OF_INT + SIZE_OF_LONG + SIZE_OF_LONG;
     private static final int MESSAGE_VALUE_OFFSET = 0;
@@ -653,7 +653,7 @@ private void launchClusteredMediaDriver(final boolean initialLaunch)
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .recordingEventsEnabled(false)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .deleteArchiveOnStart(initialLaunch),

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -41,7 +41,7 @@
 
 public class ClusterNodeTest
 {
-    private static final long MAX_CATALOG_ENTRIES = 1024;
+    private static final long CATALOG_CAPACITY = 1024 * 1024;
 
     private ClusteredMediaDriver clusteredMediaDriver;
     private ClusteredServiceContainer container;
@@ -57,7 +57,7 @@ public void before()
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .recordingEventsEnabled(false)
                 .deleteArchiveOnStart(true),

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTimerTest.java
Patch:
@@ -47,7 +47,7 @@
 
 public class ClusterTimerTest
 {
-    private static final long MAX_CATALOG_ENTRIES = 128;
+    private static final long CATALOG_CAPACITY = 128 * 1024;
     private static final int INTERVAL_MS = 20;
 
     private ClusteredMediaDriver clusteredMediaDriver;
@@ -312,7 +312,7 @@ private void launchClusteredMediaDriver(final boolean initialLaunch)
                 .errorHandler(ClusterTests.errorHandler(0))
                 .dirDeleteOnStart(true),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .recordingEventsEnabled(false)
                 .deleteArchiveOnStart(initialLaunch),

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -59,7 +59,7 @@
 @SlowTest
 public class StartFromTruncatedRecordingLogTest
 {
-    private static final long MAX_CATALOG_ENTRIES = 1024;
+    private static final long CATALOG_CAPACITY = 1024 * 1024;
     private static final int MEMBER_COUNT = 3;
     private static final int MESSAGE_COUNT = 10;
 
@@ -339,7 +339,7 @@ private void startNode(final int index, final boolean cleanStart)
                 .dirDeleteOnShutdown(false)
                 .dirDeleteOnStart(true),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .archiveDir(new File(baseDirName, "archive"))
                 .controlChannel(archiveCtx.controlRequestChannel())
                 .controlStreamId(archiveCtx.controlRequestStreamId())

File: aeron-samples/src/main/java/io/aeron/samples/archive/ArchiveCreator.java
Patch:
@@ -44,7 +44,7 @@
 public class ArchiveCreator
 {
     private static final String MESSAGE_PREFIX = "Message-Prefix-";
-    private static final int MAX_CATALOG_ENTRIES = 128;
+    private static final long CATALOG_CAPACITY = 128 * 1024;
     private static final int TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int SEGMENT_LENGTH = TERM_LENGTH * 2;
     private static final int STREAM_ID = 33;
@@ -66,7 +66,7 @@ public static void main(final String[] args)
             .dirDeleteOnStart(true);
 
         final Archive.Context archiveContext = new Archive.Context()
-            .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+            .catalogCapacity(CATALOG_CAPACITY)
             .segmentFileLength(SEGMENT_LENGTH)
             .deleteArchiveOnStart(true)
             .archiveDir(archiveDir)

File: aeron-samples/src/main/java/io/aeron/samples/archive/IndexedReplicatedRecording.java
Patch:
@@ -59,7 +59,7 @@ public class IndexedReplicatedRecording implements AutoCloseable
     static final int MESSAGE_BURST_COUNT = 10_000;
 
     private static final int TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
-    private static final int MAX_CATALOG_ENTRIES = 64;
+    private static final long CATALOG_CAPACITY = 64 * 1024;
     private static final int SRC_CONTROL_STREAM_ID = AeronArchive.Configuration.CONTROL_STREAM_ID_DEFAULT;
     private static final String SRC_CONTROL_REQUEST_CHANNEL = "aeron:udp?endpoint=localhost:8090";
     private static final String SRC_CONTROL_RESPONSE_CHANNEL = "aeron:udp?endpoint=localhost:8091";
@@ -107,7 +107,7 @@ public class IndexedReplicatedRecording implements AutoCloseable
                 .dirDeleteOnShutdown(true)
                 .dirDeleteOnStart(true),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .controlChannel(SRC_CONTROL_REQUEST_CHANNEL)
                 .archiveClientContext(new AeronArchive.Context().controlResponseChannel(SRC_CONTROL_RESPONSE_CHANNEL))
                 .recordingEventsEnabled(false)
@@ -129,7 +129,7 @@ public class IndexedReplicatedRecording implements AutoCloseable
                 .dirDeleteOnShutdown(true)
                 .dirDeleteOnStart(true),
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .controlChannel(DST_CONTROL_REQUEST_CHANNEL)
                 .archiveClientContext(new AeronArchive.Context().controlResponseChannel(DST_CONTROL_RESPONSE_CHANNEL))
                 .recordingEventsEnabled(false)

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -358,7 +358,7 @@ private void launchArchivingMediaDriver(final AuthenticatorSupplier authenticato
 
         archive = Archive.launch(
             new Archive.Context()
-                .maxCatalogEntries(ArchiveSystemTests.MAX_CATALOG_ENTRIES)
+                .catalogCapacity(ArchiveSystemTests.CATALOG_CAPACITY)
                 .aeronDirectoryName(aeronDirectoryName)
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "archive"))

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveDeleteAndRestartTest.java
Patch:
@@ -83,7 +83,7 @@ public void before()
             testWatcher);
 
         archiveContext = new Archive.Context()
-            .maxCatalogEntries(ArchiveSystemTests.MAX_CATALOG_ENTRIES)
+            .catalogCapacity(ArchiveSystemTests.CATALOG_CAPACITY)
             .fileSyncLevel(SYNC_LEVEL)
             .deleteArchiveOnStart(true)
             .archiveDir(new File(SystemUtil.tmpDirName(), "archive-test"))

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveSystemTests.java
Patch:
@@ -34,7 +34,7 @@
 
 class ArchiveSystemTests
 {
-    static final long MAX_CATALOG_ENTRIES = 128;
+    static final long CATALOG_CAPACITY = 128 * 1024;
     static final int TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     static final int FRAGMENT_LIMIT = 10;
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -147,7 +147,7 @@ private void before(final ThreadingMode threadingMode, final ArchiveThreadingMod
             testWatcher);
 
         final Archive.Context archiveContext = new Archive.Context()
-            .maxCatalogEntries(ArchiveSystemTests.MAX_CATALOG_ENTRIES)
+            .catalogCapacity(ArchiveSystemTests.CATALOG_CAPACITY)
             .fileSyncLevel(SYNC_LEVEL)
             .deleteArchiveOnStart(true)
             .archiveDir(new File(SystemUtil.tmpDirName(), "archive-test"))

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -114,7 +114,7 @@ public void before()
 
         archive = Archive.launch(
             new Archive.Context()
-                .maxCatalogEntries(ArchiveSystemTests.MAX_CATALOG_ENTRIES)
+                .catalogCapacity(ArchiveSystemTests.CATALOG_CAPACITY)
                 .aeronDirectoryName(aeronDirectoryName)
                 .archiveDir(archiveDir)
                 .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/archive/ManageRecordingHistoryTest.java
Patch:
@@ -77,7 +77,7 @@ public void before()
 
         archive = Archive.launch(
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .segmentFileLength(SEGMENT_LENGTH)
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "archive"))

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -138,7 +138,7 @@ public void before()
 
         archive = Archive.launch(
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .aeronDirectoryName(mediaDriverContext.aeronDirectoryName())
                 .errorHandler(Tests::onError)
                 .archiveDir(archiveDir)

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -100,7 +100,7 @@ public void before()
 
         srcArchive = Archive.launch(
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .aeronDirectoryName(srcAeronDirectoryName)
                 .controlChannel(SRC_CONTROL_REQUEST_CHANNEL)
                 .archiveClientContext(new AeronArchive.Context().controlResponseChannel(SRC_CONTROL_RESPONSE_CHANNEL))
@@ -124,7 +124,7 @@ public void before()
 
         dstArchive = Archive.launch(
             new Archive.Context()
-                .maxCatalogEntries(MAX_CATALOG_ENTRIES)
+                .catalogCapacity(CATALOG_CAPACITY)
                 .aeronDirectoryName(dstAeronDirectoryName)
                 .controlChannel(DST_CONTROL_REQUEST_CHANNEL)
                 .archiveClientContext(new AeronArchive.Context().controlResponseChannel(DST_CONTROL_RESPONSE_CHANNEL))

File: aeron-system-tests/src/test/java/io/aeron/test/CTestMediaDriver.java
Patch:
@@ -192,7 +192,7 @@ public static CTestMediaDriver launch(
 
     private static void setLogging(final Map<String, String> environment)
     {
-        environment.put("AERON_EVENT_LOG", "0x3");
+        environment.put("AERON_EVENT_LOG", "0xffff");
 
         final String driverAgentPath = System.getProperty(DRIVER_AGENT_PATH_PROP_NAME);
         if (null == driverAgentPath)

File: aeron-system-tests/src/test/java/io/aeron/test/MediaDriverTestWatcher.java
Patch:
@@ -50,8 +50,10 @@ private void dumpMediaDriverDiagnostics()
                         System.out.println();
                         System.out.println("Media Driver: " + aeronDirectoryName + ", exit code: " + files.exitValue);
                         printEnvironment(files.environment, System.out);
+                        System.out.println();
                         System.out.println("*** STDOUT ***");
                         Files.copy(files.stdout.toPath(), System.out);
+                        System.out.println();
                         System.out.println("*** STDERR ***");
                         Files.copy(files.stderr.toPath(), System.out);
                         System.out.println("====");

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -126,8 +126,8 @@ public void logIndividualEvents(final DriverEventCode eventCode) throws Interrup
         }
     }
 
-    private void testLogMediaDriverEvents(
-        final String enabledEvents, final EnumSet<DriverEventCode> expectedEvents) throws InterruptedException
+    private void testLogMediaDriverEvents(final String enabledEvents, final EnumSet<DriverEventCode> expectedEvents)
+        throws InterruptedException
     {
         before(enabledEvents, expectedEvents);
 
@@ -203,7 +203,7 @@ public void onMessage(final int msgTypeId, final MutableDirectBuffer buffer, fin
         {
             LOGGED_EVENTS.add(msgTypeId);
 
-            if (WAIT_LIST.contains(msgTypeId) && WAIT_LIST.remove(msgTypeId))
+            if (WAIT_LIST.remove(msgTypeId))
             {
                 latch.countDown();
             }

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -746,7 +746,6 @@ public static boolean requestDriverTermination(
                 final ManyToOneRingBuffer toDriverBuffer = new ManyToOneRingBuffer(
                     CncFileDescriptor.createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer));
                 final long clientId = toDriverBuffer.nextCorrelationId();
-
                 final DriverProxy driverProxy = new DriverProxy(toDriverBuffer, clientId);
 
                 return driverProxy.terminateDriver(tokenBuffer, tokenOffset, tokenLength);

File: aeron-client/src/main/java/io/aeron/command/ClientTimeoutFlyweight.java
Patch:
@@ -38,7 +38,7 @@ public class ClientTimeoutFlyweight
      * Length of the header.
      */
     public static final int LENGTH = SIZE_OF_LONG;
-    static final int CLIENT_ID_FIELD_OFFSET = 0;
+    private static final int CLIENT_ID_FIELD_OFFSET = 0;
 
     private MutableDirectBuffer buffer;
     private int offset;

File: aeron-client/src/main/java/io/aeron/command/ImageMessageFlyweight.java
Patch:
@@ -26,7 +26,7 @@
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
- *  |                        Correlation ID                         |
+ *  |                       Correlation ID                          |
  *  |                                                               |
  *  +---------------------------------------------------------------+
  *  |                 Subscription Registration ID                  |

File: aeron-client/src/main/java/io/aeron/command/OperationSucceededFlyweight.java
Patch:
@@ -48,7 +48,7 @@ public class OperationSucceededFlyweight
      *
      * @param buffer to wrap.
      * @param offset at which the message begins.
-     * @return for fluent API
+     * @return this for a fluent API.
      */
     public final OperationSucceededFlyweight wrap(final MutableDirectBuffer buffer, final int offset)
     {
@@ -72,7 +72,7 @@ public long correlationId()
      * Set the correlation id field.
      *
      * @param correlationId field value.
-     * @return this for a fluent API
+     * @return this for a fluent API.
      */
     public OperationSucceededFlyweight correlationId(final long correlationId)
     {

File: aeron-client/src/main/java/io/aeron/command/PublicationBuffersReadyFlyweight.java
Patch:
@@ -67,7 +67,7 @@ public class PublicationBuffersReadyFlyweight
      *
      * @param buffer to wrap.
      * @param offset at which the message begins.
-     * @return for fluent API
+     * @return this for a fluent API.
      */
     public final PublicationBuffersReadyFlyweight wrap(final MutableDirectBuffer buffer, final int offset)
     {
@@ -90,7 +90,7 @@ public long correlationId()
     /**
      * Set the correlation id field.
      *
-     * @param correlationId field value
+     * @param correlationId field value.
      * @return this for a fluent API.
      */
     public PublicationBuffersReadyFlyweight correlationId(final long correlationId)
@@ -113,7 +113,7 @@ public long registrationId()
     /**
      * Set the correlation id field.
      *
-     * @param registrationId field value
+     * @param registrationId field value.
      * @return this for a fluent API.
      */
     public PublicationBuffersReadyFlyweight registrationId(final long registrationId)

File: aeron-client/src/main/java/io/aeron/command/SubscriptionReadyFlyweight.java
Patch:
@@ -28,7 +28,7 @@
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
- *  |                         Correlation ID                        |
+ *  |                        Correlation ID                         |
  *  |                                                               |
  *  +---------------------------------------------------------------+
  *  |                  Channel Status Indicator ID                  |

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusterClient.java
Patch:
@@ -190,8 +190,6 @@ public static void main(final String[] args)
         final BasicAuctionClusterClient client = new BasicAuctionClusterClient(customerId, numOfBids, bidIntervalMs);
 
         // tag::connect[]
-        final int egressPort = 19000 + customerId;
-
         try (
             MediaDriver mediaDriver = MediaDriver.launchEmbedded(new MediaDriver.Context()                      // <1>
                 .threadingMode(ThreadingMode.SHARED)
@@ -200,7 +198,7 @@ public static void main(final String[] args)
             AeronCluster aeronCluster = AeronCluster.connect(
                 new AeronCluster.Context()
                 .egressListener(client)                                                                         // <2>
-                .egressChannel("aeron:udp?endpoint=localhost:" + egressPort)                                    // <3>
+                .egressChannel("aeron:udp?endpoint=localhost:0")                                                // <3>
                 .aeronDirectoryName(mediaDriver.aeronDirectoryName())
                 .ingressChannel("aeron:udp")                                                                    // <4>
                 .ingressEndpoints(ingressEndpoints)))                                                           // <5>

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusterClient.java
Patch:
@@ -149,6 +149,7 @@ private long sendBid(final AeronCluster aeronCluster, final long price)
         actionBidBuffer.putLong(CUSTOMER_ID_OFFSET, customerId);
         actionBidBuffer.putLong(PRICE_OFFSET, price);
 
+        idleStrategy.reset();
         while (aeronCluster.offer(actionBidBuffer, 0, BID_MESSAGE_LENGTH) < 0)    // <2>
         {
             idleStrategy.idle(aeronCluster.pollEgress());                         // <3>

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredService.java
Patch:
@@ -93,6 +93,7 @@ public void onSessionMessage(
             egressMessageBuffer.putLong(PRICE_OFFSET, auction.getBestPrice());
             egressMessageBuffer.putByte(BID_SUCCEEDED_OFFSET, bidSucceeded ? (byte)1 : (byte)0);
 
+            idleStrategy.reset();
             while (session.offer(egressMessageBuffer, 0, EGRESS_MESSAGE_LENGTH) < 0)                 // <5>
             {
                 idleStrategy.idle();                                                                 // <6>
@@ -107,6 +108,7 @@ public void onTakeSnapshot(final ExclusivePublication snapshotPublication)
         snapshotBuffer.putLong(CUSTOMER_ID_OFFSET, auction.getCurrentWinningCustomerId());    // <1>
         snapshotBuffer.putLong(PRICE_OFFSET, auction.getBestPrice());
 
+        idleStrategy.reset();
         while (snapshotPublication.offer(snapshotBuffer, 0, SNAPSHOT_MESSAGE_LENGTH) < 0)     // <2>
         {
             idleStrategy.idle();

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Samples for using getting a overview of using Aeron Cluster with the basic tutorial.
+ * Samples for getting an overview of using Aeron Cluster with the basic tutorial.
  */
 package io.aeron.samples.cluster.tutorial;
\ No newline at end of file

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterToolTest.java
Patch:
@@ -52,9 +52,7 @@ void shouldHandleSnapshotOnLeaderOnly()
                 containsString("SNAPSHOT applied successfully"));
 
             final long expectedSnapshotCount = initialSnapshotCount + 1;
-            cluster.awaitSnapshotCount(leader, expectedSnapshotCount);
-            cluster.awaitSnapshotCount(cluster.followers().get(0), expectedSnapshotCount);
-            cluster.awaitSnapshotCount(cluster.followers().get(1), expectedSnapshotCount);
+            cluster.awaitSnapshotCount(expectedSnapshotCount);
 
             for (final TestNode follower : cluster.followers())
             {

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -549,7 +549,7 @@ public void shouldTimeoutPublicationWithNoKeepaliveButNotDrained()
         assertEquals(NetworkPublication.State.ACTIVE, publication.state());
 
         doWorkUntil(
-            () -> nanoClock.nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2,
+            () -> nanoClock.nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 1.25,
             (timeNs) ->
             {
                 publication.onStatusMessage(msg, new InetSocketAddress("localhost", 4059));

File: aeron-client/src/main/java/io/aeron/DirectBufferVector.java
Patch:
@@ -24,9 +24,9 @@
  */
 public final class DirectBufferVector
 {
-    public DirectBuffer buffer;
-    public int offset;
-    public int length;
+    private DirectBuffer buffer;
+    private int offset;
+    private int length;
 
     /**
      * Default constructor so the fluent API can be used.

File: aeron-client/src/main/java/io/aeron/logbuffer/TermUnblocker.java
Patch:
@@ -27,6 +27,9 @@
  */
 public class TermUnblocker
 {
+    /**
+     * Status result of an {@link #unblock(UnsafeBuffer, UnsafeBuffer, int, int, int)} operation.
+     */
     public enum Status
     {
         /**

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -287,7 +287,7 @@ public class Configuration
     /**
      * Default timeout for client liveness timeout after which it is considered not alive.
      */
-    public static final long CLIENT_LIVENESS_TIMEOUT_DEFAULT_NS = TimeUnit.MILLISECONDS.toNanos(5000);
+    public static final long CLIENT_LIVENESS_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(10);
 
     /**
      * {@link Image} liveness timeout for how long it stays active without heartbeats or lingers around after being
@@ -323,7 +323,7 @@ public class Configuration
     /**
      * Timeout for {@link Publication} unblock in nanoseconds.
      */
-    public static final long PUBLICATION_UNBLOCK_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(10);
+    public static final long PUBLICATION_UNBLOCK_TIMEOUT_DEFAULT_NS = TimeUnit.SECONDS.toNanos(15);
 
     /**
      * Property name for {@link Publication} timeout due to lack of status messages which indicate a connection.

File: aeron-cluster/src/test/java/io/aeron/cluster/TestCluster.java
Patch:
@@ -164,7 +164,7 @@ static ClusterTool.ClusterMembership awaitMembershipSize(final TestNode leader,
             {
                 return clusterMembership;
             }
-            Tests.sleep(10);
+            Tests.sleep(100);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/TimerService.java
Patch:
@@ -80,7 +80,7 @@ public boolean onTimerExpiry(final TimeUnit timeUnit, final long now, final long
 
     void scheduleTimerForCorrelationId(final long correlationId, final long deadline)
     {
-        cancelTimer(correlationId);
+        cancelTimerByCorrelationId(correlationId);
 
         final long timerId = super.scheduleTimer(deadline);
         timerIdByCorrelationIdMap.put(correlationId, timerId);

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -93,7 +93,7 @@ public void shouldCatchUpWithAppointedLeaderWithThreeNodesWithNoSnapshot()
             cluster.stopNode(cluster.node(0));
 
             cluster.sendMessages(postCatchupMessageCount);
-            cluster.awaitResponseMessageCount(postCatchupMessageCount);
+            cluster.awaitResponseMessageCount(totalMessageCount);
 
             cluster.stopAllNodes();
             cluster.restartAllNodes(false);

File: aeron-cluster/src/test/java/io/aeron/cluster/ElectionTest.java
Patch:
@@ -224,7 +224,6 @@ public void shouldVoteForAppointedLeader()
 
         when(consensusModuleAgent.createAndRecordLogSubscriptionAsFollower(anyString()))
             .thenReturn(mock(Subscription.class));
-        when(consensusModuleAgent.logSubscriptionTags()).thenReturn("3,4");
         final long t3 = 3;
         election.doWork(t3);
         election.doWork(t3);
@@ -393,7 +392,6 @@ public void shouldBaseStartupValueOnLeader(final boolean leaderIsStart, final bo
         final ClusterMember[] clusterMembers = prepareClusterMembers();
         final ClusterMember followerMember = clusterMembers[1];
 
-        when(consensusModuleAgent.logSubscriptionTags()).thenReturn("");
         when(consensusModuleAgent.createAndRecordLogSubscriptionAsFollower(any())).thenReturn(mock(Subscription.class));
 
         final Election election = newElection(

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -1467,12 +1467,12 @@ public void deleteDirectory()
         public void close()
         {
             final ErrorHandler errorHandler = countedErrorHandler();
-            CloseHelper.close(errorHandler, markFile);
-
             if (ownsAeronClient)
             {
-                CloseHelper.close(aeron);
+                CloseHelper.close(errorHandler, aeron);
             }
+
+            CloseHelper.close(errorHandler, markFile);
         }
 
         CountDownLatch abortLatch()

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiClusteredServicesTest.java
Patch:
@@ -123,8 +123,10 @@ public void shouldSupportMultipleServicesPerNode()
         finally
         {
             CloseHelper.closeAll(client, clientMediaDriver);
-            CloseHelper.closeAll(clusteredMediaDrivers);
+
+            clusteredMediaDrivers.forEach((clusteredMediaDriver) -> clusteredMediaDriver.consensusModule().close());
             CloseHelper.closeAll(clusteredServiceContainers);
+            CloseHelper.closeAll(clusteredMediaDrivers);
 
             clientMediaDriver.context().deleteDirectory();
             clusteredMediaDrivers.forEach((driver) -> driver.mediaDriver().context().deleteDirectory());

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -155,11 +155,10 @@ public DriverConductor(final Context ctx)
 
     public void onClose()
     {
+        CloseHelper.close(ctx.errorHandler(), driverNameResolver);
         publicationImages.forEach(PublicationImage::free);
         networkPublications.forEach(NetworkPublication::free);
         ipcPublications.forEach(IpcPublication::free);
-
-        CloseHelper.close(ctx.errorHandler(), driverNameResolver);
         toDriverCommands.consumerHeartbeatTime(Aeron.NULL_VALUE);
         ctx.close();
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1658,7 +1658,7 @@ void stopAllCatchups()
                     }
                     catch (final Exception ex)
                     {
-                        ctx.countedErrorHandler().onError(ex);
+                        ctx.countedErrorHandler().onError(new ClusterException("catchup already stopped", ex, WARN));
                     }
                 }
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -362,6 +362,7 @@ private void launchArchivingMediaDriver(final AuthenticatorSupplier authenticato
                 .aeronDirectoryName(aeronDirectoryName)
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "archive"))
+                .errorHandler(Tests::onError)
                 .fileSyncLevel(0)
                 .authenticatorSupplier(authenticatorSupplier)
                 .threadingMode(ArchiveThreadingMode.SHARED));

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -85,6 +85,7 @@ public void before()
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "archive"))
                 .fileSyncLevel(0)
+                .errorHandler(Tests::onError)
                 .threadingMode(ArchiveThreadingMode.SHARED));
 
         aeron = Aeron.connect(

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -115,6 +115,7 @@ public void before()
                 .maxCatalogEntries(ArchiveSystemTests.MAX_CATALOG_ENTRIES)
                 .aeronDirectoryName(aeronDirectoryName)
                 .archiveDir(archiveDir)
+                .errorHandler(Tests::onError)
                 .fileSyncLevel(0)
                 .threadingMode(ArchiveThreadingMode.SHARED));
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ManageRecordingHistoryTest.java
Patch:
@@ -82,6 +82,7 @@ public void before()
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "archive"))
                 .fileSyncLevel(0)
+                .errorHandler(Tests::onError)
                 .threadingMode(ArchiveThreadingMode.SHARED));
 
         aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -106,6 +106,7 @@ public void before()
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "src-archive"))
                 .fileSyncLevel(0)
+                .errorHandler(Tests::onError)
                 .threadingMode(ArchiveThreadingMode.SHARED));
 
         dstDriver = TestMediaDriver.launch(
@@ -128,6 +129,7 @@ public void before()
                 .deleteArchiveOnStart(true)
                 .archiveDir(new File(SystemUtil.tmpDirName(), "dst-archive"))
                 .fileSyncLevel(0)
+                .errorHandler(Tests::onError)
                 .threadingMode(ArchiveThreadingMode.SHARED));
 
         srcAeron = Aeron.connect(

File: aeron-archive/src/main/java/io/aeron/archive/status/RecordingPos.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.archive.status;
 
 import io.aeron.Aeron;
+import io.aeron.AeronCounters;
 import io.aeron.Counter;
 import io.aeron.Image;
 import org.agrona.BitUtil;
@@ -51,7 +52,7 @@ public class RecordingPos
     /**
      * Type id of a recording position counter.
      */
-    public static final int RECORDING_POSITION_TYPE_ID = 100;
+    public static final int RECORDING_POSITION_TYPE_ID = AeronCounters.ARCHIVE_RECORDING_POSITION_TYPE_ID;
 
     /**
      * Represents a null recording id when not found.

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterControl.java
Patch:
@@ -177,7 +177,7 @@ public static ToggleState get(final AtomicCounter controlToggle)
     /**
      * Counter type id for the control toggle.
      */
-    public static final int CONTROL_TOGGLE_TYPE_ID = 202;
+    public static final int CONTROL_TOGGLE_TYPE_ID = AeronCounters.CLUSTER_CONTROL_TOGGLE_TYPE_ID;
 
     /**
      * Map a {@link CountersReader} over the provided {@link File} for the CnC file.

File: aeron-cluster/src/main/java/io/aeron/cluster/service/RecoveryState.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.cluster.service;
 
 import io.aeron.Aeron;
+import io.aeron.AeronCounters;
 import io.aeron.Counter;
 import io.aeron.cluster.client.ClusterException;
 import org.agrona.*;
@@ -60,7 +61,7 @@ public class RecoveryState
     /**
      * Type id of a recovery state counter.
      */
-    public static final int RECOVERY_STATE_TYPE_ID = 204;
+    public static final int RECOVERY_STATE_TYPE_ID = AeronCounters.CLUSTER_RECOVERY_STATE_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-client/src/main/java/io/aeron/status/HeartbeatTimestamp.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.BitUtil;
 import org.agrona.DirectBuffer;
 import org.agrona.MutableDirectBuffer;
@@ -34,7 +35,7 @@ public class HeartbeatTimestamp
     /**
      * Type id of a heartbeat counter.
      */
-    public static final int HEARTBEAT_TYPE_ID = 11;
+    public static final int HEARTBEAT_TYPE_ID = AeronCounters.DRIVER_HEARTBEAT_TYPE_ID;
 
     /**
      * Offset in the key meta data for the registration id of the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/PerImageIndicator.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.agrona.concurrent.status.CountersManager;
@@ -28,7 +29,7 @@ public class PerImageIndicator
     /**
      * Type id of a per Image indicator.
      */
-    public static final int PER_IMAGE_TYPE_ID = 10;
+    public static final int PER_IMAGE_TYPE_ID = AeronCounters.DRIVER_PER_IMAGE_TYPE_ID;
 
     /**
      * Allocate a per {@link io.aeron.driver.PublicationImage} indicator.

File: aeron-driver/src/main/java/io/aeron/driver/status/PublisherLimit.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -28,7 +29,7 @@ public class PublisherLimit
     /**
      * Type id of a publisher limit counter.
      */
-    public static final int PUBLISHER_LIMIT_TYPE_ID = 1;
+    public static final int PUBLISHER_LIMIT_TYPE_ID = AeronCounters.DRIVER_PUBLISHER_LIMIT_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/PublisherPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -29,7 +30,7 @@ public class PublisherPos
     /**
      * Type id of a publisher limit counter.
      */
-    public static final int PUBLISHER_POS_TYPE_ID = 12;
+    public static final int PUBLISHER_POS_TYPE_ID = AeronCounters.DRIVER_PUBLISHER_POS_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiveChannelStatus.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.AtomicCounter;
@@ -28,7 +29,7 @@ public class ReceiveChannelStatus
     /**
      * Type id of a receive channel status indicator.
      */
-    public static final int RECEIVE_CHANNEL_STATUS_TYPE_ID = 7;
+    public static final int RECEIVE_CHANNEL_STATUS_TYPE_ID = AeronCounters.DRIVER_RECEIVE_CHANNEL_STATUS_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiverHwm.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -28,7 +29,7 @@ public class ReceiverHwm
     /**
      * Type id of a receiver high-water-mark position counter.
      */
-    public static final int RECEIVER_HWM_TYPE_ID = 3;
+    public static final int RECEIVER_HWM_TYPE_ID = AeronCounters.DRIVER_RECEIVER_HWM_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiverPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -28,7 +29,7 @@ public class ReceiverPos
     /**
      * Type id of a receiver position counter.
      */
-    public static final int RECEIVER_POS_TYPE_ID = 5;
+    public static final int RECEIVER_POS_TYPE_ID = AeronCounters.DRIVER_RECEIVER_POS_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SendChannelStatus.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.AtomicCounter;
@@ -28,7 +29,7 @@ public class SendChannelStatus
     /**
      * Type id of a send channel status indicator.
      */
-    public static final int SEND_CHANNEL_STATUS_TYPE_ID = 6;
+    public static final int SEND_CHANNEL_STATUS_TYPE_ID = AeronCounters.DRIVER_SEND_CHANNEL_STATUS_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SenderBpe.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.agrona.concurrent.status.CountersManager;
@@ -28,7 +29,7 @@ public class SenderBpe
     /**
      * Type id of a sender back-pressure event counter.
      */
-    public static final int SENDER_BPE_TYPE_ID = 13;
+    public static final int SENDER_BPE_TYPE_ID = AeronCounters.DRIVER_SENDER_BPE_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SenderLimit.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -27,7 +28,7 @@ public class SenderLimit
     /**
      * Type id of a sender position counter.
      */
-    public static final int SENDER_LIMIT_TYPE_ID = 9;
+    public static final int SENDER_LIMIT_TYPE_ID = AeronCounters.DRIVER_SENDER_LIMIT_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SenderPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -27,7 +28,7 @@ public class SenderPos
     /**
      * Type id of a sender position counter.
      */
-    public static final int SENDER_POSITION_TYPE_ID = 2;
+    public static final int SENDER_POSITION_TYPE_ID = AeronCounters.DRIVER_SENDER_POSITION_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SubscriberPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
@@ -28,7 +29,7 @@ public class SubscriberPos
     /**
      * Type id of a subscriber position counter.
      */
-    public static final int SUBSCRIBER_POSITION_TYPE_ID = 4;
+    public static final int SUBSCRIBER_POSITION_TYPE_ID = AeronCounters.DRIVER_SUBSCRIBER_POSITION_TYPE_ID;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SystemCounterDescriptor.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.AeronCounters;
 import org.agrona.collections.Int2ObjectHashMap;
 import org.agrona.concurrent.status.*;
 
@@ -53,7 +54,7 @@ public enum SystemCounterDescriptor
     /**
      * All system counters have the same type id, i.e. system counters are the same type. Other types can exist.
      */
-    public static final int SYSTEM_COUNTER_TYPE_ID = 0;
+    public static final int SYSTEM_COUNTER_TYPE_ID = AeronCounters.DRIVER_SYSTEM_COUNTER_TYPE_ID;
 
     private static final Int2ObjectHashMap<SystemCounterDescriptor> DESCRIPTOR_BY_ID_MAP = new Int2ObjectHashMap<>();
 

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/BasicAuctionClusteredServiceNode.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.samples.cluster;
+package io.aeron.samples.cluster.tutorial;
 
 import io.aeron.ChannelUriStringBuilder;
 import io.aeron.CommonContext;

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/SingleNodeCluster.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.samples.cluster;
+package io.aeron.samples.cluster.tutorial;
 
 import io.aeron.CommonContext;
 import io.aeron.ExclusivePublication;

File: aeron-samples/src/main/java/io/aeron/samples/cluster/tutorial/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Samples for using getting a overview of using Aeron Cluster with the basic tutorial.
  */
-package io.aeron.samples.cluster;
\ No newline at end of file
+package io.aeron.samples.cluster.tutorial;
\ No newline at end of file

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -1817,7 +1817,7 @@ private void pollNextResponse(final long correlationId, final long deadlineNs, f
 
             if (!poller.subscription().isConnected())
             {
-                throw new ArchiveException("subscription to archive is not connected");
+                throw new ArchiveException("response channel from archive is not connected");
             }
 
             checkDeadline(deadlineNs, "awaiting response", correlationId);
@@ -1955,7 +1955,7 @@ private int pollForDescriptors(
 
             if (!poller.subscription().isConnected())
             {
-                throw new ArchiveException("subscription to archive is not connected");
+                throw new ArchiveException("response channel from archive is not connected");
             }
 
             checkDeadline(deadlineNs, "awaiting recording descriptors", correlationId);
@@ -1997,7 +1997,7 @@ private int pollForSubscriptionDescriptors(
 
             if (!poller.subscription().isConnected())
             {
-                throw new ArchiveException("subscription to archive is not connected");
+                throw new ArchiveException("response channel from archive is not connected");
             }
 
             checkDeadline(deadlineNs, "awaiting subscription descriptors", correlationId);

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -3034,7 +3034,7 @@ private void checkDeadline()
             if (deadlineNs - nanoClock.nanoTime() < 0)
             {
                 throw new TimeoutException(
-                    "Archive connect timeout for correlation id: " + correlationId + " step " + step);
+                    "Archive connect timeout: correlationId=" + correlationId + " step=" + step);
             }
         }
     }

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -127,8 +127,9 @@ public void before()
         counterKeyAndLabel.putStringAscii(COUNTER_LABEL_OFFSET, COUNTER_LABEL);
 
         final UnsafeBuffer counterBuffer = new UnsafeBuffer(ByteBuffer.allocate(BUFFER_LENGTH));
-        spyCountersManager = spy(new CountersManager(
-            new UnsafeBuffer(ByteBuffer.allocate(BUFFER_LENGTH * 2)), counterBuffer, StandardCharsets.US_ASCII));
+        final UnsafeBuffer metaDataBuffer = new UnsafeBuffer(
+            ByteBuffer.allocate(Configuration.countersMetadataBufferLength(BUFFER_LENGTH)));
+        spyCountersManager = spy(new CountersManager(metaDataBuffer, counterBuffer, StandardCharsets.US_ASCII));
 
         final SystemCounters mockSystemCounters = mock(SystemCounters.class);
         when(mockSystemCounters.get(any())).thenReturn(mockErrorCounter);

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -1434,7 +1434,7 @@ public static void validateSessionIdRange(final int low, final int high)
 
         if (Math.abs((long)high - low) > Integer.MAX_VALUE)
         {
-            throw new ConfigurationException("reserved range to too large");
+            throw new ConfigurationException("reserved range too large");
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -58,7 +58,7 @@
 /**
  * The Aeron Archive which allows for the recording and replay of local and remote {@link io.aeron.Publication}s .
  */
-public class Archive implements AutoCloseable
+public final class Archive implements AutoCloseable
 {
     private final Context ctx;
     private final AgentRunner conductorRunner;

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -520,7 +520,7 @@ public void conclude()
 
             if (null == terminationHook)
             {
-                terminationHook = () -> shutdownSignalBarrier.signal();
+                terminationHook = () -> shutdownSignalBarrier.signalAll();
             }
 
             concludeMarkFile();

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -52,8 +52,7 @@
  * Component which resides on each node and is responsible for coordinating consensus within a cluster in concert
  * with the lifecycle of clustered services.
  */
-@SuppressWarnings("unused")
-public class ConsensusModule implements AutoCloseable
+public final class ConsensusModule implements AutoCloseable
 {
     /**
      * Possible states for the {@link ConsensusModule}.
@@ -1270,7 +1269,7 @@ public void conclude()
 
             if (null == terminationHook)
             {
-                terminationHook = () -> shutdownSignalBarrier.signal();
+                terminationHook = () -> shutdownSignalBarrier.signalAll();
             }
 
             if (null == authenticatorSupplier)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -48,7 +48,6 @@
  * loaded via {@link ClusteredServiceContainer.Configuration#SERVICE_CLASS_NAME_PROP_NAME} or
  * {@link ClusteredServiceContainer.Context#clusteredService(ClusteredService)}.
  */
-@SuppressWarnings("unused")
 public final class ClusteredServiceContainer implements AutoCloseable
 {
     /**
@@ -713,7 +712,7 @@ public void conclude()
 
             if (null == terminationHook)
             {
-                terminationHook = () -> shutdownSignalBarrier.signal();
+                terminationHook = () -> shutdownSignalBarrier.signalAll();
             }
 
             if (null == clusteredService)

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -3289,7 +3289,7 @@ private void concludeCounters()
                 if (counterFreeToReuseTimeoutNs > 0)
                 {
                     clock = epochClock;
-                    reuseTimeoutMs = Math.min(TimeUnit.NANOSECONDS.toMillis(counterFreeToReuseTimeoutNs), 1);
+                    reuseTimeoutMs = Math.max(TimeUnit.NANOSECONDS.toMillis(counterFreeToReuseTimeoutNs), 1);
                 }
                 else
                 {

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -3289,7 +3289,7 @@ private void concludeCounters()
                 if (counterFreeToReuseTimeoutNs > 0)
                 {
                     clock = epochClock;
-                    reuseTimeoutMs = Math.min(TimeUnit.NANOSECONDS.toMillis(counterFreeToReuseTimeoutNs), 1);
+                    reuseTimeoutMs = Math.max(TimeUnit.NANOSECONDS.toMillis(counterFreeToReuseTimeoutNs), 1);
                 }
                 else
                 {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -809,7 +809,7 @@ private void awaitRecordingComplete(
 
             if (!RecordingPos.isActive(counters, counterId, recordingId))
             {
-                throw new ClusterException("recording has stopped unexpectedly: " + recordingId);
+                throw new ClusterException("recording stopped unexpectedly: " + recordingId);
             }
         }
     }

File: aeron-system-tests/src/test/java/io/aeron/NameReResolutionTest.java
Patch:
@@ -91,7 +91,6 @@ public void before()
     {
         final MediaDriver.Context context = new MediaDriver.Context()
             .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
-            .aeronDirectoryName("")
             .dirDeleteOnStart(true)
             .dirDeleteOnShutdown(true)
             .threadingMode(ThreadingMode.SHARED);

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -283,7 +283,7 @@ public static InferableBoolean parse(final String value)
     public static final String GROUP_TAG_PARAM_NAME = "gtag";
 
     /**
-     * Parameter name for Publication URI param to indicate if spy subscriptions should simulate a connection.
+     * Parameter name for Publication URI param to indicate whether spy subscriptions should simulate a connection.
      */
     public static final String SPIES_SIMULATE_CONNECTION_PARAM_NAME = "ssc";
 

File: aeron-client/src/main/java/io/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -88,7 +88,7 @@ public DataHeaderFlyweight(final ByteBuffer buffer)
     /**
      * Get the fragment length field from the header.
      *
-     * @param termBuffer  container the header.
+     * @param termBuffer  containing the header.
      * @param frameOffset in the buffer where the header starts.
      * @return the fragment length field from the header.
      */

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredService.java
Patch:
@@ -40,7 +40,7 @@ public interface ClusteredService
      * The snapshot image can be null if no previous snapshot exists.
      * <p>
      * <b>Note:</b> As this is a potentially long running operation the implementation should use
-     * {@link Cluster#idleStrategy()} and then occasional call {@link org.agrona.concurrent.IdleStrategy#idle()} or
+     * {@link Cluster#idleStrategy()} and then occasionally call {@link org.agrona.concurrent.IdleStrategy#idle()} or
      * {@link org.agrona.concurrent.IdleStrategy#idle(int)}, especially when polling the {@link Image} returns 0.
      *
      * @param cluster       with which the service can interact.
@@ -95,7 +95,7 @@ void onSessionMessage(
      * The service should take a snapshot and store its state to the provided archive {@link Publication}.
      * <p>
      * <b>Note:</b> As this is a potentially long running operation the implementation should use
-     * {@link Cluster#idleStrategy()} and then occasional call {@link org.agrona.concurrent.IdleStrategy#idle()} or
+     * {@link Cluster#idleStrategy()} and then occasionally call {@link org.agrona.concurrent.IdleStrategy#idle()} or
      * {@link org.agrona.concurrent.IdleStrategy#idle(int)},
      * especially when the snapshot {@link ExclusivePublication} returns {@link Publication#BACK_PRESSURED}.
      *

File: aeron-archive/src/main/java/io/aeron/archive/checksum/Crc32c.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Implementation of the {@link Checksum} interface that computes CRC-32C checksum.
  * <p>
- * <em>Note: Available only JDK 9+.</em>
+ * <em>Note: Available only on JDK 9+.</em>
  * </p>
  */
 final class Crc32c implements Checksum
@@ -49,7 +49,7 @@ final class Crc32c implements Checksum
                 Crc32c.class, "bitwiseComplement", methodType(int.class, int.class));
             // Always invoke with the 0xFFFFFFFF as first argument, i.e. empty CRC value
             methodHandle = insertArguments(methodHandle, 0, 0xFFFFFFFF);
-            // Always compute bitwise complete on the result value
+            // Always compute bitwise complement on the result value
             methodHandle = filterReturnValue(methodHandle, bitwiseComplement);
         }
         catch (final ClassNotFoundException ex)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -215,7 +215,7 @@ public static class Configuration
         /**
          * Default channel for communications between the local consensus module and services. This should be IPC.
          */
-        public static final String CONTROL_CHANNEL_DEFAULT = "aeron:ipc?term-length=64k|mtu=8k";
+        public static final String CONTROL_CHANNEL_DEFAULT = "aeron:ipc?term-length=128k";
 
         /**
          * Stream id within the control channel for communications from the consensus module to the services.

File: aeron-client/src/main/java/io/aeron/ErrorCode.java
Patch:
@@ -68,7 +68,7 @@ public enum ErrorCode
     NOT_SUPPORTED(8),
 
     /**
-     * Attempted to send a command that had a host name the could be resolved.
+     * Attempted to send a command that had a host name that could not be resolved.
      */
     UNKNOWN_HOST(9),
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -21,7 +21,7 @@
 import io.aeron.archive.Archive;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.mark.ClusterComponentType;
 import io.aeron.cluster.service.*;

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -21,7 +21,7 @@
 import io.aeron.archive.codecs.SourceLocation;
 import io.aeron.archive.status.RecordingPos;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.*;
 import io.aeron.cluster.service.Cluster;

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotLoader.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.cluster;
 
 import io.aeron.*;
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.*;
 import io.aeron.logbuffer.ControlledFragmentHandler;

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAdapter.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.cluster;
 
 import io.aeron.*;
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.*;
 import io.aeron.logbuffer.ControlledFragmentHandler;

File: aeron-cluster/src/main/java/io/aeron/cluster/LogPublisher.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.cluster;
 
 import io.aeron.*;
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import io.aeron.cluster.codecs.*;
 import io.aeron.exceptions.AeronException;
 import io.aeron.logbuffer.BufferClaim;

File: aeron-cluster/src/main/java/io/aeron/cluster/MillisecondClusterClock.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.aeron.cluster;
 
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 
 import java.util.concurrent.TimeUnit;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/NanosecondClusterClock.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.aeron.cluster;
 
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import org.agrona.concurrent.HighResolutionClock;
 
 import java.util.concurrent.TimeUnit;

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -1460,7 +1460,7 @@ public void close()
         }
 
         /**
-         * Indicates which step in the connect process has reached.
+         * Indicates which step in the connect process has been reached.
          *
          * @return which step in the connect process has reached.
          */

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterClock.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.cluster.client;
+package io.aeron.cluster.service;
 
 import io.aeron.cluster.codecs.ClusterTimeUnit;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredService.java
Patch:
@@ -91,7 +91,7 @@ void onSessionMessage(
      * <b>Note:</b> As this is a potentially long running operation the implementation should use
      * {@link Cluster#idleStrategy()} and then occasional call {@link org.agrona.concurrent.IdleStrategy#idle()} or
      * {@link org.agrona.concurrent.IdleStrategy#idle(int)},
-     * especially when polling the snapshot {@link ExclusivePublication} returns {@link Publication#BACK_PRESSURED}.
+     * especially when the snapshot {@link ExclusivePublication} returns {@link Publication#BACK_PRESSURED}.
      *
      * @param snapshotPublication to which the state should be recorded.
      */

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceSnapshotLoader.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.aeron.Image;
 import io.aeron.ImageControlledFragmentAssembler;
-import io.aeron.cluster.client.ClusterClock;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.codecs.*;
 import io.aeron.logbuffer.ControlledFragmentHandler;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/SnapshotTaker.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.aeron.ExclusivePublication;
 import io.aeron.Publication;
-import io.aeron.cluster.client.ClusterClock;
 import io.aeron.cluster.codecs.MessageHeaderEncoder;
 import io.aeron.cluster.codecs.SnapshotMark;
 import io.aeron.cluster.codecs.SnapshotMarkerEncoder;

File: aeron-cluster/src/test/java/io/aeron/cluster/TestClusterClock.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.aeron.cluster;
 
-import io.aeron.cluster.client.ClusterClock;
+import io.aeron.cluster.service.ClusterClock;
 import org.agrona.concurrent.EpochClock;
 import org.agrona.concurrent.NanoClock;
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -722,7 +722,7 @@ Subscription extendRecording(
         catalog.recordingSummary(recordingId, recordingSummary);
         if (streamId != recordingSummary.streamId)
         {
-            final String msg = "cannot extend recording  " + recordingSummary.recordingId +
+            final String msg = "cannot extend recording " + recordingSummary.recordingId +
                 " with streamId " + streamId + " != existing streamId " + recordingSummary.streamId;
             controlSession.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
             return null;

File: aeron-agent/src/test/java/io/aeron/agent/ClusterLoggingAgentTest.java
Patch:
@@ -27,8 +27,7 @@
 import org.agrona.CloseHelper;
 import org.agrona.IoUtil;
 import org.agrona.MutableDirectBuffer;
-import org.agrona.concurrent.Agent;
-import org.agrona.concurrent.MessageHandler;
+import org.agrona.concurrent.*;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
@@ -113,6 +112,7 @@ private void testClusterEventsLogging(
             .threadingMode(ThreadingMode.SHARED);
 
         final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context()
+            .lock(NoOpLock.INSTANCE)
             .aeronDirectoryName(aeronDirectoryName)
             .controlRequestChannel("aeron:udp?term-length=64k|endpoint=localhost:8010")
             .controlRequestStreamId(100)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -748,7 +748,7 @@ private long onTakeSnapshot(final long logPosition, final long leadershipTermId)
             final String channel = ChannelUri.addSessionId(ctx.snapshotChannel(), publication.sessionId());
             archive.startRecording(channel, ctx.snapshotStreamId(), LOCAL, true);
             final CountersReader counters = aeron.countersReader();
-            final int counterId = awaitRecordingCounter(publication.sessionId(), counters);
+            final int counterId = awaitRecordingCounter(publication.sessionId(), counters, archive);
             recordingId = RecordingPos.getRecordingId(counters, counterId);
 
             snapshotState(publication, logPosition, leadershipTermId);
@@ -813,13 +813,14 @@ private void executeAction(final ClusterAction action, final long logPosition, f
         }
     }
 
-    private int awaitRecordingCounter(final int sessionId, final CountersReader counters)
+    private int awaitRecordingCounter(final int sessionId, final CountersReader counters, final AeronArchive archive)
     {
         idleStrategy.reset();
         int counterId = RecordingPos.findCounterIdBySession(counters, sessionId);
         while (NULL_COUNTER_ID == counterId)
         {
             idle();
+            archive.checkForErrorResponse();
             counterId = RecordingPos.findCounterIdBySession(counters, sessionId);
         }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -703,8 +703,8 @@ public void conclude()
             archiveContext
                 .aeron(aeron)
                 .ownsAeronClient(false)
-                .errorHandler(countedErrorHandler)
-                .lock(NoOpLock.INSTANCE);
+                .lock(NoOpLock.INSTANCE)
+                .errorHandler(countedErrorHandler);
 
             if (null == shutdownSignalBarrier)
             {

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.agrona.ExpandableArrayBuffer;
 import org.agrona.collections.LongHashSet;
 import org.agrona.collections.MutableInteger;
+import org.agrona.concurrent.NoOpLock;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.jupiter.api.AfterEach;
@@ -312,6 +313,7 @@ private void startNode(final int index, final boolean cleanStart)
         final String aeronDirName = aeronDirName(index);
 
         final AeronArchive.Context archiveCtx = new AeronArchive.Context()
+            .lock(NoOpLock.INSTANCE)
             .controlRequestChannel(memberSpecificPort(ARCHIVE_CONTROL_REQUEST_CHANNEL, index))
             .controlRequestStreamId(100 + index)
             .controlResponseChannel(memberSpecificPort(ARCHIVE_CONTROL_RESPONSE_CHANNEL, index))

File: aeron-samples/src/main/java/io/aeron/samples/cluster/BasicAuctionClusteredServiceNode.java
Patch:
@@ -27,6 +27,7 @@
 import io.aeron.driver.MinMulticastFlowControlSupplier;
 import io.aeron.driver.ThreadingMode;
 import org.agrona.ErrorHandler;
+import org.agrona.concurrent.NoOpLock;
 import org.agrona.concurrent.ShutdownSignalBarrier;
 
 import java.io.File;
@@ -142,6 +143,7 @@ public static void main(final String[] args)
 
         // tag::archive_client[]
         final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context()
+            .lock(NoOpLock.INSTANCE)
             .controlRequestChannel(archiveContext.controlChannel())
             .controlRequestStreamId(archiveContext.controlStreamId())
             .controlResponseChannel(udpChannel(nodeId, "localhost", ARCHIVE_CONTROL_RESPONSE_PORT_OFFSET))

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -472,7 +472,7 @@ public static class Configuration
         /**
          * Type id for election state counter.
          */
-        public static final int ELECTION_STATE_TYPE_ID = Election.ELECTION_STATE_TYPE_ID;
+        public static final int ELECTION_STATE_TYPE_ID = 207;
 
         /**
          * Counter type id for the consensus module error count.
@@ -1225,7 +1225,7 @@ public void conclude()
             if (null == commitPosition)
             {
                 commitPosition = ClusterCounters.allocate(
-                    aeron, "cluster-commit-pos:", COMMIT_POSITION_TYPE_ID, clusterId);
+                    aeron, "Cluster commit-pos:", COMMIT_POSITION_TYPE_ID, clusterId);
             }
 
             if (null == controlToggle)

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingLog.java
Patch:
@@ -601,7 +601,7 @@ public Entry getLatestSnapshot(final int serviceId)
                 }
 
                 final int serviceSnapshotIndex = i - (serviceId + 1);
-                if (serviceSnapshotIndex > 0)
+                if (serviceSnapshotIndex >= 0)
                 {
                     final Entry snapshot = entriesCache.get(serviceSnapshotIndex);
                     if (isValidSnapshot(snapshot) && serviceId == snapshot.serviceId)

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -194,9 +194,9 @@ public static class Configuration
         static final String RECORDING_SEGMENT_SUFFIX = ".rec";
 
         /**
-         * Default block length of data read from disk in a single IO operation during a recording or replay.
+         * Default block length of data in a single IO operation during a recording or replay.
          */
-        public static final int FILE_IO_MAX_LENGTH_DEFAULT = 2 * 1024 * 1024;
+        public static final int FILE_IO_MAX_LENGTH_DEFAULT = 1024 * 1024;
 
         /**
          * Maximum length of a file IO operation for recording or replay. Must be a power of 2.

File: aeron-driver/src/main/java/io/aeron/driver/SubscriptionLink.java
Patch:
@@ -336,13 +336,13 @@ enum State
 
     void state(final State newState, final long nowNs, final int streamId, final int sessionId)
     {
-        changeState(state, newState, subscriptionLink.registrationId, streamId, sessionId, nowNs);
+        stateChange(state, newState, subscriptionLink.registrationId, streamId, sessionId, nowNs);
         state = newState;
         timeOfLastUpdateNs = nowNs;
     }
 
     @SuppressWarnings("unused")
-    void changeState(
+    void stateChange(
         final State oldState,
         final State newState,
         final long subscriptionId,

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventLogger.java
Patch:
@@ -23,8 +23,7 @@
 import static io.aeron.agent.ClusterEventCode.EVENT_CODE_TYPE;
 import static io.aeron.agent.ClusterEventCode.NEW_LEADERSHIP_TERM;
 import static io.aeron.agent.ClusterEventEncoder.*;
-import static io.aeron.agent.CommonEventEncoder.captureLength;
-import static io.aeron.agent.CommonEventEncoder.encodedLength;
+import static io.aeron.agent.CommonEventEncoder.*;
 import static io.aeron.agent.EventConfiguration.EVENT_RING_BUFFER;
 
 /**
@@ -55,6 +54,7 @@ public void logNewLeadershipTerm(
         final int length = newLeaderShipTermLength();
         final int captureLength = captureLength(length);
         final int encodedLength = encodedLength(captureLength);
+        final ManyToOneRingBuffer ringBuffer = this.ringBuffer;
         final int index = ringBuffer.tryClaim(toEventCodeId(NEW_LEADERSHIP_TERM), encodedLength);
 
         if (index > 0)
@@ -88,6 +88,7 @@ public <T extends Enum<T>> void logStateChange(
         final int length = stateChangeLength(oldState, newState);
         final int captureLength = captureLength(length);
         final int encodedLength = encodedLength(captureLength);
+        final ManyToOneRingBuffer ringBuffer = this.ringBuffer;
         final int index = ringBuffer.tryClaim(toEventCodeId(eventCode), encodedLength);
 
         if (index > 0)

File: aeron-agent/src/main/java/io/aeron/agent/ClusterInterceptor.java
Patch:
@@ -16,7 +16,6 @@
 package io.aeron.agent;
 
 import io.aeron.cluster.ConsensusModule;
-import io.aeron.cluster.Election;
 import io.aeron.cluster.service.Cluster;
 import net.bytebuddy.asm.Advice;
 
@@ -31,7 +30,7 @@ class ClusterInterceptor
     static class ElectionStateChange
     {
         @Advice.OnMethodEnter
-        static void stateChange(final Election.State oldState, final Election.State newState, final int memberId)
+        static <E extends Enum<E>> void stateChange(final E oldState, final E newState, final int memberId)
         {
             LOGGER.logStateChange(ELECTION_STATE_CHANGE, oldState, newState, memberId);
         }

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventLoggerTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import static io.aeron.agent.ClusterEventCode.NEW_LEADERSHIP_TERM;
 import static io.aeron.agent.ClusterEventCode.STATE_CHANGE;
-import static io.aeron.agent.ClusterEventEncoder.SEPARATOR;
+import static io.aeron.agent.CommonEventEncoder.STATE_SEPARATOR;
 import static io.aeron.agent.ClusterEventLogger.toEventCodeId;
 import static io.aeron.agent.AgentTests.verifyLogHeader;
 import static io.aeron.agent.CommonEventEncoder.LOG_HEADER_LENGTH;
@@ -106,7 +106,7 @@ void logStateChange()
         final TimeUnit from = MINUTES;
         final TimeUnit to = SECONDS;
         final int memberId = 42;
-        final String payload = from.name() + SEPARATOR + to.name();
+        final String payload = from.name() + STATE_SEPARATOR + to.name();
         final int captureLength = SIZE_OF_INT * 2 + payload.length();
 
         logger.logStateChange(STATE_CHANGE, from, to, memberId);

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -32,14 +32,14 @@
 /**
  * Election process to determine a new cluster leader and catch up followers.
  */
-public class Election
+class Election
 {
     /**
      * The type id of the {@link Counter} used for the election state.
      */
     static final int ELECTION_STATE_TYPE_ID = 207;
 
-    public enum State
+    enum State
     {
         INIT(0),
         CANVASS(1),
@@ -133,7 +133,7 @@ public static State get(final AtomicCounter counter)
     private final ConsensusModuleAgent consensusModuleAgent;
     private final Random random;
 
-    public Election(
+    Election(
         final boolean isNodeStartup,
         final long leadershipTermId,
         final long logPosition,

File: aeron-driver/src/main/java/io/aeron/driver/media/SocketAddressParser.java
Patch:
@@ -44,6 +44,7 @@ enum IpV6State
      * @param isReResolution for the parse.
      * @param nameResolver   to be used for resolving hostnames.
      * @return An {@link InetSocketAddress} for the parsed input.
+     * @throws UnknownHostException if address cannot be resolved
      */
     static InetSocketAddress parse(
         final String value, final String uriParamName, final boolean isReResolution, final NameResolver nameResolver)

File: buildSrc/src/main/java/io/aeron/build/AsciidoctorPreprocessTask.java
Patch:
@@ -93,12 +93,12 @@ public void preprocess() throws Exception
             options.put("attributes", attributes);
             options.put("safe", org.asciidoctor.SafeMode.UNSAFE.getLevel());
 
-            try (final PrintStream output = new PrintStream(outputFile))
+            try (PrintStream output = new PrintStream(outputFile))
             {
                 asciidoctor.javaExtensionRegistry().preprocessor(
                     new org.asciidoctor.extension.Preprocessor()
                     {
-                        public void process(Document document, PreprocessorReader reader)
+                        public void process(final Document document, final PreprocessorReader reader)
                         {
                             String line;
                             while (null != (line = reader.readLine()))

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -348,8 +348,8 @@ private int replay() throws IOException
             if (frameLength <= 0)
             {
                 throw new IllegalStateException(
-                    "unexpected end of recording at position=" + replayPosition +
-                    " batchOffset=" + batchOffset + " bytesRead=" + bytesRead);
+                    "unexpected end of recording at replayPosition=" + replayPosition + " remaining=" + remaining +
+                    " batchOffset=" + batchOffset + " bytesRead=" + bytesRead + " limitPosition=" + limitPosition);
             }
 
             final int frameType = frameType(replayBuffer, batchOffset);

File: buildSrc/src/main/java/io/aeron/build/TutorialPublishTask.java
Patch:
@@ -70,7 +70,7 @@ public void publish() throws Exception
                 StandardCopyOption.REPLACE_EXISTING);
         }
 
-        git.add().addFilepattern(".").setUpdate(true).call();
+        git.add().addFilepattern(".").setUpdate(false).call();
         git.commit().setMessage("Update Docs").call();
 
         System.out.println("Publishing to: " + wikiUri);
@@ -99,4 +99,4 @@ public String getWikiUri() throws IOException, URISyntaxException
 
         return GithubUtil.getWikiUriFromOriginUri(origin);
     }
-}
\ No newline at end of file
+}

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -105,14 +105,14 @@ public void abort()
 
     public void close()
     {
-        CloseHelper.close(countedErrorHandler, recordingWriter);
-        CloseHelper.close(countedErrorHandler, position);
         if (autoStop)
         {
             final Subscription subscription = image.subscription();
             CloseHelper.close(countedErrorHandler, subscription);
             controlSession.archiveConductor().removeRecordingSubscription(subscription.registrationId());
         }
+        CloseHelper.close(countedErrorHandler, recordingWriter);
+        CloseHelper.close(countedErrorHandler, position);
     }
 
     public void abortClose()

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusAdapter.java
Patch:
@@ -26,7 +26,7 @@
 
 class ConsensusAdapter implements FragmentHandler, AutoCloseable
 {
-    static final int FRAGMENT_POLL_LIMIT = 10;
+    static final int FRAGMENT_LIMIT = 10;
 
     private final MessageHeaderDecoder messageHeaderDecoder = new MessageHeaderDecoder();
     private final CanvassPositionDecoder canvassPositionDecoder = new CanvassPositionDecoder();
@@ -64,7 +64,7 @@ public void close()
 
     public int poll()
     {
-        return subscription.poll(fragmentAssembler, FRAGMENT_POLL_LIMIT);
+        return subscription.poll(fragmentAssembler, FRAGMENT_LIMIT);
     }
 
     public int poll(final int limit)

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1853,7 +1853,7 @@ else if (ConsensusModule.State.ACTIVE == state || ConsensusModule.State.SUSPENDE
 
     private void checkForArchiveErrors()
     {
-        if (null != archive)
+        if (null != archive && null == dynamicJoin)
         {
             final ControlResponsePoller controlResponsePoller = archive.controlResponsePoller();
             if (!controlResponsePoller.subscription().isConnected())

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotLoader.java
Patch:
@@ -30,7 +30,7 @@
 @SuppressWarnings("MethodLength")
 class ConsensusModuleSnapshotLoader implements ControlledFragmentHandler
 {
-    private static final int FRAGMENT_LIMIT = 10;
+    static final int FRAGMENT_LIMIT = 10;
 
     private boolean inSnapshot = false;
     private boolean isDone = false;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1123,6 +1123,7 @@ void migrateSegments(
                 final File srcFile = new File(archiveDir, segmentFileName(srcRecordingId, position));
                 if (position == recordingSummary.stopPosition)
                 {
+                    //noinspection ResultOfMethodCallIgnored
                     srcFile.delete();
                     position -= segmentLength;
                     continue;

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -178,7 +178,7 @@ public void shouldMergeFromReplayToLive()
             final String recordingChannel = this.recordingChannel.sessionId(sessionId).build();
             final String subscriptionChannel = this.subscriptionChannel.sessionId(sessionId).build();
 
-            aeronArchive.startRecording(recordingChannel, STREAM_ID, REMOTE);
+            final long subscriptionId = aeronArchive.startRecording(recordingChannel, STREAM_ID, REMOTE, true);
 
             final CountersReader counters = aeron.countersReader();
             final int recordingCounterId = awaitRecordingCounterId(counters, publication.sessionId());
@@ -236,7 +236,7 @@ public void shouldMergeFromReplayToLive()
                 {
                     if (0 == image.poll(fragmentHandler, FRAGMENT_LIMIT))
                     {
-                        assertFalse(replayMerge.hasFailed(), "image closed unexpectedly");
+                        assertFalse(image.isClosed(), "image closed unexpectedly");
 
                         Tests.yieldingWait(
                             "received.get()=%d < totalMessageCount=%d", received.get(), totalMessageCount);
@@ -250,7 +250,7 @@ public void shouldMergeFromReplayToLive()
             }
             finally
             {
-                aeronArchive.stopRecording(recordingChannel, STREAM_ID);
+                aeronArchive.tryStopRecording(subscriptionId);
             }
         }
     }

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -47,7 +47,7 @@ private static List<String> channels()
     private static final int STREAM_ID = 1001;
 
     @RegisterExtension
-    public MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Tests::onError)

File: aeron-system-tests/src/test/java/io/aeron/MaxFlowControlStrategySystemTest.java
Patch:
@@ -70,7 +70,7 @@ public class MaxFlowControlStrategySystemTest
     private final FragmentHandler fragmentHandlerB = mock(FragmentHandler.class);
 
     @RegisterExtension
-    public MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
 
     private void launch()
     {

File: aeron-system-tests/src/test/java/io/aeron/MinFlowControlSystemTest.java
Patch:
@@ -79,7 +79,7 @@ public class MinFlowControlSystemTest
     private final FragmentHandler fragmentHandlerB = mock(FragmentHandler.class);
 
     @RegisterExtension
-    public MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
 
     private void launch()
     {

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -84,7 +84,7 @@ public class MultiDestinationCastTest
     private final FragmentHandler fragmentHandlerC = mock(FragmentHandler.class, "fragmentHandlerC");
 
     @RegisterExtension
-    public MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
 
     private void launch()
     {

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationSubscriptionTest.java
Patch:
@@ -82,7 +82,7 @@ public class MultiDestinationSubscriptionTest
     private final FragmentHandler copyFragmentHandler = mock(FragmentHandler.class);
 
     @RegisterExtension
-    public MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
 
     private void launch()
     {

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -78,7 +78,7 @@ public class ReplicateRecordingTest
     private AeronArchive dstAeronArchive;
 
     @RegisterExtension
-    public MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
+    public final MediaDriverTestWatcher testWatcher = new MediaDriverTestWatcher();
 
     @BeforeEach
     public void before()

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -525,7 +525,7 @@ public void onNewLeader(
 
         fragmentAssembler.clear();
         controlledFragmentAssembler.clear();
-        egressListener.newLeader(clusterSessionId, leadershipTermId, leaderMemberId, memberEndpoints);
+        egressListener.onNewLeader(clusterSessionId, leadershipTermId, leaderMemberId, memberEndpoints);
         controlledEgressListener.newLeader(clusterSessionId, leadershipTermId, leaderMemberId, memberEndpoints);
     }
 
@@ -637,7 +637,7 @@ else if (SessionEventDecoder.TEMPLATE_ID == templateId)
                     isClosed = true;
                 }
 
-                egressListener.sessionEvent(
+                egressListener.onSessionEvent(
                     sessionEventDecoder.correlationId(),
                     sessionId,
                     sessionEventDecoder.leadershipTermId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/client/EgressAdapter.java
Patch:
@@ -103,7 +103,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 final long sessionId = sessionEventDecoder.clusterSessionId();
                 if (sessionId == clusterSessionId)
                 {
-                    listener.sessionEvent(
+                    listener.onSessionEvent(
                         sessionEventDecoder.correlationId(),
                         sessionId,
                         sessionEventDecoder.leadershipTermId(),
@@ -125,7 +125,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 final long sessionId = newLeaderEventDecoder.clusterSessionId();
                 if (sessionId == clusterSessionId)
                 {
-                    listener.newLeader(
+                    listener.onNewLeader(
                         sessionId,
                         newLeaderEventDecoder.leadershipTermId(),
                         newLeaderEventDecoder.leaderMemberId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/client/EgressListener.java
Patch:
@@ -53,7 +53,7 @@ void onMessage(
      * @param code             to indicate the type of event.
      * @param detail           Textual detail to explain the event.
      */
-    default void sessionEvent(
+    default void onSessionEvent(
         long correlationId,
         long clusterSessionId,
         long leadershipTermId,
@@ -71,7 +71,7 @@ default void sessionEvent(
      * @param leaderMemberId   identity of the active leader.
      * @param memberEndpoints  for connecting to the cluster which can be updated due to dynamic membership.
      */
-    default void newLeader(long clusterSessionId, long leadershipTermId, int leaderMemberId, String memberEndpoints)
+    default void onNewLeader(long clusterSessionId, long leadershipTermId, int leaderMemberId, String memberEndpoints)
     {
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/TestCluster.java
Patch:
@@ -80,7 +80,7 @@ public void onMessage(
             responseCount.value++;
         }
 
-        public void sessionEvent(
+        public void onSessionEvent(
             final long correlationId,
             final long clusterSessionId,
             final long leadershipTermId,
@@ -94,7 +94,7 @@ public void sessionEvent(
             }
         }
 
-        public void newLeader(
+        public void onNewLeader(
             final long clusterSessionId,
             final long leadershipTermId,
             final int leaderMemberId,

File: aeron-samples/src/main/java/io/aeron/samples/cluster/BasicAuctionClusteredService.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.aeron.samples.tutorial.cluster;
+package io.aeron.samples.cluster;
 
 import io.aeron.ExclusivePublication;
 import io.aeron.Image;

File: aeron-samples/src/main/java/io/aeron/samples/cluster/BasicAuctionClusteredServiceNode.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.aeron.samples.tutorial.cluster;
+package io.aeron.samples.cluster;
 
 import io.aeron.ChannelUriStringBuilder;
 import io.aeron.CommonContext;
@@ -111,7 +111,7 @@ public static String clusterMembers(final List<String> hostnames)
     // tag::main[]
     public static void main(final String[] args)
     {
-        final int nodeId = parseInt(System.getProperty("aeron.tutorial.cluster.nodeId"));                // <1>
+        final int nodeId = parseInt(System.getProperty("aeron.cluster.tutorial.nodeId"));                // <1>
 
         final List<String> hostnames = Arrays.asList("localhost", "localhost", "localhost");             // <2>
         final String hostname = hostnames.get(nodeId);

File: aeron-archive/src/main/java/io/aeron/archive/ControlResponseProxy.java
Patch:
@@ -20,6 +20,7 @@
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.archive.client.ArchiveException;
 import io.aeron.archive.codecs.*;
+import io.aeron.exceptions.AeronException;
 import io.aeron.logbuffer.BufferClaim;
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;
@@ -202,7 +203,8 @@ private static void checkResult(final ControlSession session, final long result)
         if (result == Publication.NOT_CONNECTED)
         {
             session.abort();
-            throw new ArchiveException("response publication is not connected: " + session);
+            throw new ArchiveException(
+                "response publication is not connected: " + session, AeronException.Category.WARN);
         }
 
         if (result == Publication.CLOSED)

File: aeron-archive/src/main/java/io/aeron/archive/ControlSessionDemuxer.java
Patch:
@@ -785,7 +785,7 @@ private ControlSession getControlSession(final long controlSessionId, final long
                 " for correlationId=" + correlationId +
                 " from source=" + image.sourceIdentity();
 
-            throw new ArchiveException(message, ArchiveException.GENERIC, correlationId, AeronException.Category.WARN);
+            throw new ArchiveException(message, correlationId, AeronException.Category.WARN);
         }
 
         return controlSession;

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterMember.java
Patch:
@@ -642,12 +642,12 @@ public static void addConsensusPublications(
     }
 
     /**
-     * Close the publications associated with members of the cluster.
+     * Close the publications associated with members of the cluster used for the consensus protocol.
      *
      * @param errorHandler   to capture errors during close.
      * @param clusterMembers to close the publications for.
      */
-    public static void closeMemberPublications(final ErrorHandler errorHandler, final ClusterMember[] clusterMembers)
+    public static void closeConsensusPublications(final ErrorHandler errorHandler, final ClusterMember[] clusterMembers)
     {
         for (final ClusterMember member : clusterMembers)
         {

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveDestinationTransport.java
Patch:
@@ -112,9 +112,7 @@ public void currentControlAddress(final InetSocketAddress newAddress)
 
     public void close()
     {
-        localSocketAddressIndicator.setOrdered(ChannelEndpointStatus.CLOSING);
         CloseHelper.close(localSocketAddressIndicator);
-
         super.close();
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -166,13 +166,11 @@ public void closeStatusIndicator()
     {
         if (!statusIndicator.isClosed())
         {
-            statusIndicator.setOrdered(ChannelEndpointStatus.CLOSING);
             statusIndicator.close();
         }
 
         if (null != localSocketAddressIndicator && !localSocketAddressIndicator.isClosed())
         {
-            localSocketAddressIndicator.setOrdered(ChannelEndpointStatus.CLOSING);
             localSocketAddressIndicator.close();
         }
     }

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -236,7 +236,7 @@ public void shouldCatchErrorOnAddressAlreadyInUseForPublications()
 
         assertThat(status, is(ChannelEndpointStatus.ERRORED));
         assertThat(publicationB.channelStatusId(), is(channelEndpointException.statusIndicatorId()));
-        assertTrue(publicationB.isClosed());
+        assertThat(publicationB.channelStatus(), is(ChannelEndpointStatus.ERRORED));
         assertThat(publicationA.channelStatus(), is(ChannelEndpointStatus.ACTIVE));
         assertNull(testException.get());
     }
@@ -266,7 +266,6 @@ public void shouldNotErrorOnAddressAlreadyInUseOnActiveChannelEndpointForSubscri
         verify(errorHandlerClientC, timeout(5000L)).onError(any(ChannelEndpointException.class));
 
         assertThat(subscriptionC.channelStatus(), is(ChannelEndpointStatus.ERRORED));
-        assertTrue(subscriptionC.isClosed());
 
         assertThat(subscriptionA.channelStatus(), is(ChannelEndpointStatus.ACTIVE));
         assertThat(subscriptionB.channelStatus(), is(ChannelEndpointStatus.ACTIVE));

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -80,8 +80,7 @@ public class ChannelEndpointStatusTest
     private final ErrorHandler driverErrorHandler =
         (ex) ->
         {
-            if (ex instanceof AeronException &&
-                ex.getMessage().startsWith("channel error - Address already in use:"))
+            if (ex instanceof AeronException && ex.getMessage().contains("channel error - Address already in use"))
             {
                 return;
             }

File: aeron-client/src/main/java/io/aeron/ChannelUri.java
Patch:
@@ -414,7 +414,7 @@ public static ChannelUri parse(final CharSequence cs)
                     break;
 
                 default:
-                    throw new IllegalStateException("unexpected state=" + state);
+                    throw new IllegalStateException("unexpected state=" + state + " in " + cs);
             }
         }
 
@@ -430,7 +430,7 @@ public static ChannelUri parse(final CharSequence cs)
                 break;
 
             default:
-                throw new IllegalStateException("no more input found, state=" + state);
+                throw new IllegalStateException("no more input found, state=" + state + " in " + cs);
         }
 
         return new ChannelUri(prefix, media, params);

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -247,9 +247,9 @@ public void onChannelEndpointError(final int statusIndicatorId, final String mes
 
                 if (subscription.channelStatusId() == statusIndicatorId)
                 {
-                    handleError(new ChannelEndpointException(statusIndicatorId, message));
                     subscription.internalClose();
                     iterator.remove();
+                    handleError(new ChannelEndpointException(statusIndicatorId, message));
                 }
             }
             else if (resource instanceof Publication)
@@ -258,10 +258,10 @@ else if (resource instanceof Publication)
 
                 if (publication.channelStatusId() == statusIndicatorId)
                 {
-                    handleError(new ChannelEndpointException(statusIndicatorId, message));
                     publication.internalClose();
                     releaseLogBuffers(publication.logBuffers(), publication.originalRegistrationId());
                     iterator.remove();
+                    handleError(new ChannelEndpointException(statusIndicatorId, message));
                 }
             }
         }

File: aeron-driver/src/main/java/io/aeron/driver/DriverNameResolver.java
Patch:
@@ -359,7 +359,6 @@ public void sendNeighborResolutions(final long nowMs)
 
     public int sendResolutionFrameTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress)
     {
-        //System.out.println("out " + transport.bindAddressAndPort() + " " + remoteAddress);
         buffer.position(0);
 
         final int bytesRemaining = buffer.remaining();

File: aeron-driver/src/main/java/io/aeron/driver/Sender.java
Patch:
@@ -105,7 +105,6 @@ public int doWork()
         if (reResolutionCheckIntervalNs > 0 && (reResolutionDeadlineNs - nowNs) < 0)
         {
             controlTransportPoller.checkForReResolutions(nowNs, conductorProxy);
-
             reResolutionDeadlineNs = nowNs + reResolutionCheckIntervalNs;
         }
 

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiSndDestination.java
Patch:
@@ -197,7 +197,7 @@ void checkForReResolution(
     {
         for (final Destination destination : destinations)
         {
-            if (nowNs > (destination.timeOfLastActivityNs + destinationTimeoutNs))
+            if ((destination.timeOfLastActivityNs + destinationTimeoutNs) - nowNs < 0)
             {
                 final String endpoint = destination.channelUri.get(CommonContext.ENDPOINT_PARAM_NAME);
                 final InetSocketAddress address = destination.address;

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -495,7 +495,9 @@ private int awaitImage()
         }
         else if (epochClock.time() >= (timeOfLastActionMs + actionTimeoutMs))
         {
-            throw new TimeoutException("failed get replay image");
+            throw new TimeoutException(
+                "failed get replay image for sessionId " + (int)srcReplaySessionId +
+                " on channel " + recordingSubscription.channel());
         }
 
         return workCount;

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -255,7 +255,6 @@ public void shouldReplicateStoppedRecording()
     @Test
     public void shouldReplicateStoppedRecordingsConcurrently()
     {
-        TestMediaDriver.notSupportedOnCMediaDriver("Awaiting Bug Fix");
         final String messagePrefix = "Message-Prefix-";
         final int messageCount = 10;
         final long[] srcRecordingIds = new long[2];

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -2245,7 +2245,7 @@ public static int controlStreamId()
 
         /**
          * The value {@link #LOCAL_CONTROL_CHANNEL_DEFAULT} or system property
-         * {@link #CONTROL_CHANNEL_PROP_NAME} if set.
+         * {@link #LOCAL_CONTROL_CHANNEL_PROP_NAME} if set.
          *
          * @return {@link #LOCAL_CONTROL_CHANNEL_DEFAULT} or system property
          * {@link #LOCAL_CONTROL_CHANNEL_PROP_NAME} if set.

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupEventsListener.java
Patch:
@@ -29,8 +29,10 @@ public interface ClusterBackupEventsListener
 
     /**
      * Possible failure of cluster leader detected.
+     *
+     * @param ex the underlying exception.
      */
-    void onPossibleClusterFailure();
+    void onPossibleClusterFailure(Exception ex);
 
     /**
      * Backup response was received for a backup query.

File: aeron-client/src/main/java/io/aeron/exceptions/RegistrationException.java
Patch:
@@ -30,7 +30,7 @@ public class RegistrationException extends AeronException
     public RegistrationException(
         final long correlationId, final int errorCodeValue, final ErrorCode errorCode, final String msg)
     {
-        super(msg);
+        super(msg, ErrorCode.RESOURCE_TEMPORARILY_UNAVAILABLE == errorCode ? Category.WARN : Category.ERROR);
         this.correlationId = correlationId;
         this.errorCode = errorCode;
         this.errorCodeValue = errorCodeValue;

File: aeron-system-tests/src/test/java/io/aeron/NameReResolutionTest.java
Patch:
@@ -304,7 +304,6 @@ public void shouldReResolveMdcDynamicControlOnNoConnected()
     public void shouldReResolveMdcDynamicControlOnManualDestinationSubscriptionOnNoConnected()
     {
         final long initialResolutionChanges = countersReader.getCounterValue(RESOLUTION_CHANGES.id());
-        TestMediaDriver.notSupportedOnCMediaDriverYet("Multi-Destination-Subscriptions");
 
         buffer.putInt(0, 1);
 
@@ -363,7 +362,7 @@ public void shouldReResolveMdcDynamicControlOnManualDestinationSubscriptionOnNoC
 
     @SlowTest
     @Test
-    @Timeout(20)
+    @Timeout(200000)
     public void shouldReportErrorOnReResolveFailure() throws IOException
     {
         buffer.putInt(0, 1);

File: aeron-system-tests/src/test/java/io/aeron/test/TestMediaDriver.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.test;
 
 import io.aeron.driver.MediaDriver;
+import org.agrona.concurrent.AgentInvoker;
 
 import static org.agrona.Strings.isEmpty;
 import static org.junit.jupiter.api.Assumptions.assumeFalse;
@@ -82,4 +83,6 @@ static void enableCsvNameLookupConfiguration(final MediaDriver.Context context,
     String aeronDirectoryName();
 
     void close();
+
+    AgentInvoker sharedAgentInvoker();
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -825,8 +825,9 @@ public void shouldCatchUpTwoFreshNodesAfterRestart()
             final TestNode oldFollower2 = cluster.startStaticNode(followers.get(1).index(), true);
 
             cluster.awaitLeader();
-            awaitElectionClosed(oldFollower1);
-            awaitElectionClosed(oldFollower2);
+
+            cluster.awaitServiceMessageCount(oldFollower1, messageCount);
+            cluster.awaitServiceMessageCount(oldFollower2, messageCount);
 
             assertEquals(0L, oldLeader.errors());
             assertEquals(0L, oldFollower1.errors());

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -225,7 +225,7 @@ public String bindAddressAndPort()
                 return "";
             }
 
-            return localAddress.getAddress().getHostAddress() + ":" + localAddress.getPort();
+            return NetworkUtil.formatAddressAndPort(localAddress.getAddress(), localAddress.getPort());
         }
         catch (final IOException ex)
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingLog.java
Patch:
@@ -323,7 +323,7 @@ public String toString()
                 ", appendedLogPosition=" + appendedLogPosition +
                 ", committedLogPosition=" + committedLogPosition +
                 ", snapshots=" + snapshots +
-                ", logs=" + log +
+                ", log=" + log +
                 '}';
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingLog.java
Patch:
@@ -323,7 +323,7 @@ public String toString()
                 ", appendedLogPosition=" + appendedLogPosition +
                 ", committedLogPosition=" + committedLogPosition +
                 ", snapshots=" + snapshots +
-                ", logs" + log +
+                ", logs=" + log +
                 '}';
         }
     }

File: aeron-client/src/main/java/io/aeron/status/ReadableCounter.java
Patch:
@@ -47,9 +47,10 @@ public class ReadableCounter implements AutoCloseable
      */
     public ReadableCounter(final CountersReader countersReader, final long registrationId, final int counterId)
     {
-        if (countersReader.getCounterState(counterId) != CountersReader.RECORD_ALLOCATED)
+        final int counterState = countersReader.getCounterState(counterId);
+        if (counterState != CountersReader.RECORD_ALLOCATED)
         {
-            throw new IllegalStateException("Counter id has not been allocated: " + counterId);
+            throw new IllegalStateException("Counter not allocated: id=" + counterId + " state=" + counterState);
         }
 
         this.countersReader = countersReader;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -589,10 +589,9 @@ private void recoverState(final CountersReader counters)
             service.onStart(this, null);
         }
 
-        final long aeronClientId = aeron.context().clientId();
         final long id = ackId++;
         idleStrategy.reset();
-        while (!consensusModuleProxy.ack(logPosition, clusterTime, id, aeronClientId, serviceId))
+        while (!consensusModuleProxy.ack(logPosition, clusterTime, id, aeron.clientId(), serviceId))
         {
             idle();
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClientSession.java
Patch:
@@ -103,7 +103,7 @@ public void close()
     {
         if (null != clusteredServiceAgent.getClientSession(id))
         {
-            clusteredServiceAgent.closeSession(id);
+            clusteredServiceAgent.closeClientSession(id);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -212,7 +212,7 @@ public Collection<ClientSession> clientSessions()
         return readOnlyClientSessions;
     }
 
-    public boolean closeSession(final long clusterSessionId)
+    public boolean closeClientSession(final long clusterSessionId)
     {
         final ClientSession clientSession = sessionByIdMap.get(clusterSessionId);
         if (clientSession == null)

File: aeron-client/src/main/java/io/aeron/ExclusivePublication.java
Patch:
@@ -455,7 +455,7 @@ private void checkBlockLength(final int length)
         if (length > remaining)
         {
             throw new IllegalArgumentException(
-                "invalid block length " + length + ", remaining space in term " + remaining);
+                "invalid block length " + length + ", remaining space in term is " + remaining);
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -194,14 +194,14 @@ public void close()
 
     public void addSubscriber(final SubscriptionLink subscriptionLink, final ReadablePosition subscriberPosition)
     {
-        LogBufferDescriptor.isConnected(metaDataBuffer, true);
         subscriberPositions = ArrayUtil.add(subscriberPositions, subscriberPosition);
-
         if (!subscriptionLink.isTether())
         {
             untetheredSubscriptions.add(new UntetheredSubscription(
                 subscriptionLink, subscriberPosition, timeOfLastConsumerPositionUpdateNs));
         }
+
+        LogBufferDescriptor.isConnected(metaDataBuffer, true);
     }
 
     public void removeSubscriber(final SubscriptionLink subscriptionLink, final ReadablePosition subscriberPosition)

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -406,8 +406,8 @@ public void addSubscriber(final SubscriptionLink subscriptionLink, final Readabl
 
         if (spiesSimulateConnection)
         {
-            LogBufferDescriptor.isConnected(metaDataBuffer, true);
             isConnected = true;
+            LogBufferDescriptor.isConnected(metaDataBuffer, true);
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -378,7 +378,7 @@ public void shouldManuallyAddPortDuringActiveStream() throws InterruptedExceptio
                 subscriptionB.poll(fragmentHandlerB, 10);
             }
 
-            if (messagesSent.value == (numMessagesToSend - numMessageForSub2 - 1))
+            if (messagesSent.value == (numMessagesToSend - numMessageForSub2))
             {
                 final int published = messagesSent.value;
                 // If we add B before A has reached `published` number of messages

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.concurrent.TimeUnit;
 
 import static io.aeron.Aeron.NULL_VALUE;
-import static io.aeron.ChannelUri.SPY_QUALIFIER;
 import static io.aeron.CommonContext.*;
 import static io.aeron.archive.client.AeronArchive.NULL_LENGTH;
 import static io.aeron.archive.client.AeronArchive.NULL_POSITION;
@@ -1321,7 +1320,7 @@ void becomeLeader(
         startLogRecording(recordingChannel, SourceLocation.LOCAL);
         createAppendPosition(logSessionId);
 
-        final String logChannel = channelUri.isUdp() ? channelUri.prefix(SPY_QUALIFIER).toString() : recordingChannel;
+        final String logChannel = channelUri.isUdp() ? SPY_PREFIX + recordingChannel : recordingChannel;
         awaitServicesReady(logChannel, logSessionId, logPosition, isStartup);
 
         if (!isStartup)

File: aeron-cluster/src/test/java/io/aeron/cluster/DynamicMembershipTest.java
Patch:
@@ -240,6 +240,7 @@ public void shouldRemoveLeaderAfterDynamicNodeJoined()
             final TestNode dynamicMember = cluster.startDynamicNode(3, true);
 
             awaitElectionClosed(dynamicMember);
+            awaitMembershipSize(initialLeader, 4);
 
             initialLeader.terminationExpected(true);
             initialLeader.removeMember(initialLeader.index(), false);

File: aeron-agent/src/test/java/io/aeron/agent/ArchiveLoggingAgentTest.java
Patch:
@@ -21,6 +21,7 @@
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.test.Tests;
 import org.agrona.IoUtil;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.Agent;
@@ -94,7 +95,7 @@ private void testArchiveLogging(
         final String aeronDirectoryName = testDir.toPath().resolve("media").toString();
 
         final MediaDriver.Context mediaDriverCtx = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .aeronDirectoryName(aeronDirectoryName)
             .dirDeleteOnStart(true)
             .threadingMode(ThreadingMode.SHARED);
@@ -109,7 +110,7 @@ private void testArchiveLogging(
 
         final Archive.Context archiveCtx = new Archive.Context()
             .aeronDirectoryName(aeronDirectoryName)
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .archiveDir(new File(testDir, "archive"))
             .deleteArchiveOnStart(true)
             .controlChannel(aeronArchiveContext.controlRequestChannel())

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -132,7 +132,7 @@ private void testLogMediaDriverEvents(
         final String aeronDirectoryName = testDir.toPath().resolve("media").toString();
 
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .publicationLingerTimeoutNs(0)
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(1))
             .aeronDirectoryName(aeronDirectoryName);

File: aeron-archive/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -29,6 +29,7 @@
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
+import io.aeron.test.Tests;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.ManyToOneConcurrentLinkedQueue;
 import org.agrona.concurrent.SystemEpochClock;
@@ -121,7 +122,7 @@ public void shouldAllowMultipleConnectionsInParallel() throws InterruptedExcepti
         final ThreadPoolExecutor executor = (ThreadPoolExecutor)Executors.newFixedThreadPool(numberOfArchiveClients);
         final ManyToOneConcurrentLinkedQueue<AeronArchive> archiveClientQueue = new ManyToOneConcurrentLinkedQueue<>();
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .clientLivenessTimeoutNs(connectTimeoutNs)
             .dirDeleteOnStart(true)
             .publicationUnblockTimeoutNs(connectTimeoutNs * 2)

File: aeron-cluster/src/main/java/io/aeron/cluster/DynamicJoin.java
Patch:
@@ -185,7 +185,7 @@ void onClusterMembersChange(
                         if (!leaderMember.memberFacingEndpoint().equals(
                             clusterMemberStatusEndpoints[clusterMembersStatusEndpointsCursor]))
                         {
-                            memberStatusPublication.close();
+                            CloseHelper.close(ctx.countedErrorHandler(), memberStatusPublication);
 
                             final ChannelUri memberStatusUri = ChannelUri.parse(ctx.memberStatusChannel());
                             memberStatusUri.put(ENDPOINT_PARAM_NAME, leaderMember.memberFacingEndpoint());
@@ -264,7 +264,7 @@ private int init(final long nowNs)
                 cursor = 0;
             }
 
-            CloseHelper.close(memberStatusPublication);
+            CloseHelper.close(ctx.countedErrorHandler(), memberStatusPublication);
             final ChannelUri uri = ChannelUri.parse(ctx.memberStatusChannel());
             uri.put(ENDPOINT_PARAM_NAME, clusterMemberStatusEndpoints[cursor]);
             memberStatusPublication = ctx.aeron().addExclusivePublication(uri.toString(), ctx.memberStatusStreamId());
@@ -449,7 +449,7 @@ private int snapshotLoad(final long nowNs)
         }
         else if (consensusModuleAgent.pollForEndOfSnapshotLoad(recoveryStateCounter, nowNs))
         {
-            recoveryStateCounter.close();
+            CloseHelper.close(ctx.countedErrorHandler(), recoveryStateCounter);
             recoveryStateCounter = null;
             state(State.JOIN_CLUSTER);
             workCount++;

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAdapter.java
Patch:
@@ -188,7 +188,6 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
 
                 consensusModuleAgent.onReplayClusterAction(
                     clusterActionRequestDecoder.leadershipTermId(),
-                    clusterActionRequestDecoder.logPosition(),
                     clusterActionRequestDecoder.action());
                 return Action.BREAK;
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -882,14 +882,14 @@ private void snapshotState(
         snapshotTaker.markEnd(SNAPSHOT_TYPE_ID, logPosition, leadershipTermId, 0, timeUnit, ctx.appVersion());
     }
 
-    private void executeAction(final ClusterAction action, final long position, final long leadershipTermId)
+    private void executeAction(final ClusterAction action, final long logPosition, final long leadershipTermId)
     {
         if (ClusterAction.SNAPSHOT == action)
         {
-            final long recordingId = onTakeSnapshot(position, leadershipTermId);
+            final long recordingId = onTakeSnapshot(logPosition, leadershipTermId);
             final long id = ackId++;
             idleStrategy.reset();
-            while (!consensusModuleProxy.ack(position, clusterTime, id, recordingId, serviceId))
+            while (!consensusModuleProxy.ack(logPosition, clusterTime, id, recordingId, serviceId))
             {
                 idle();
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1540,10 +1540,10 @@ void awaitServicesReadyForReplay(
         awaitServices(logPosition);
     }
 
-    void awaitServicesReplayComplete(final long stopPosition)
+    void awaitServicesReplayPosition(final long logPosition)
     {
-        expectedAckPosition = stopPosition;
-        awaitServices(stopPosition);
+        expectedAckPosition = logPosition;
+        awaitServices(logPosition);
     }
 
     void replayLogPoll(final LogAdapter logAdapter, final long stopPosition)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -841,8 +841,8 @@ private long onTakeSnapshot(final long logPosition, final long leadershipTermId)
             {
                 final CountersReader counters = aeron.countersReader();
                 final int counterId = awaitRecordingCounter(publication.sessionId(), counters);
-
                 recordingId = RecordingPos.getRecordingId(counters, counterId);
+
                 snapshotState(publication, logPosition, leadershipTermId);
 
                 checkForClockTick();
@@ -852,7 +852,8 @@ private long onTakeSnapshot(final long logPosition, final long leadershipTermId)
             }
             finally
             {
-                archive.stopRecording(subscriptionId);
+                archive.archiveProxy().stopRecording(
+                    subscriptionId, aeron.nextCorrelationId(), archive.controlSessionId());
             }
         }
 

File: aeron-driver/src/test/java/io/aeron/driver/media/SocketAddressParserTest.java
Patch:
@@ -125,7 +125,7 @@ public void shouldParseIpV6() throws Exception
     }
 
     @Test
-    public void shouldParseWithScope()
+    public void shouldParseWithScope() throws UnknownHostException
     {
         final InetSocketAddress address = SocketAddressParser.parse(
             "[::1%12~_.-34]:1234", ENDPOINT_PARAM_NAME, false, DEFAULT_RESOLVER);

File: aeron-test-support/src/main/java/io/aeron/test/Tests.java
Patch:
@@ -21,6 +21,7 @@
 import io.aeron.logbuffer.FragmentHandler;
 import org.agrona.LangUtil;
 import org.agrona.concurrent.IdleStrategy;
+import org.agrona.concurrent.SleepingMillisIdleStrategy;
 import org.agrona.concurrent.YieldingIdleStrategy;
 
 import java.util.function.BooleanSupplier;
@@ -32,6 +33,8 @@
 
 public class Tests
 {
+    public static final IdleStrategy SLEEP_1_MS = new SleepingMillisIdleStrategy(1);
+
     /**
      * Check if the interrupt flag has been set on the current thread and fail the test if it has.
      * <p>

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -49,7 +49,7 @@ private static List<String> channels()
     private static final int MESSAGE_LENGTH = 200;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
         .threadingMode(ThreadingMode.SHARED));
 

File: aeron-system-tests/src/test/java/io/aeron/ControlledMessageTest.java
Patch:
@@ -39,7 +39,7 @@ public class ControlledMessageTest
     private static final int PAYLOAD_LENGTH = 10;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
         .threadingMode(ThreadingMode.SHARED));
 

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -55,7 +55,7 @@ private void launch()
 
         driver = TestMediaDriver.launch(
             new MediaDriver.Context()
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .threadingMode(ThreadingMode.SHARED));
 
         clientA = Aeron.connect(

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -59,7 +59,7 @@ private static List<String> channels()
     private final UnsafeBuffer srcBuffer = new UnsafeBuffer(new byte[65 * 1024]);
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .threadingMode(ThreadingMode.SHARED));
 
     private final Aeron aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -55,7 +55,7 @@ private static List<String> channels()
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .threadingMode(ThreadingMode.SHARED));
 
     private final Aeron aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -63,7 +63,7 @@ public void shouldGapFillWhenLossOccurs() throws Exception
         srcBuffer.setMemory(0, MSG_LENGTH, (byte)7);
 
         final MediaDriver.Context ctx = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .threadingMode(ThreadingMode.SHARED)
             .dirDeleteOnStart(true)
             .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH);
@@ -135,14 +135,13 @@ public void run()
                 final int fragments = subscription.poll(this, FRAGMENT_COUNT_LIMIT);
                 if (0 == fragments)
                 {
+                    Thread.yield();
                     Tests.checkInterruptStatus();
                     if (subscription.isClosed())
                     {
                         return;
                     }
                 }
-
-                Thread.yield();
             }
         }
 

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -45,14 +45,14 @@ private static List<String> channels()
     private static final int STREAM_ID = 1001;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true)
         .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(20))
         .threadingMode(ThreadingMode.SHARED));
 
     private final Aeron aeron = Aeron.connect(new Aeron.Context()
         .useConductorAgentInvoker(true)
-        .errorHandler(Throwable::printStackTrace));
+        .errorHandler(Tests::onError));
 
     @AfterEach
     public void after()

File: aeron-system-tests/src/test/java/io/aeron/MaxPositionPublicationTest.java
Patch:
@@ -39,7 +39,7 @@ public class MaxPositionPublicationTest
     private final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocate(MESSAGE_LENGTH));
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true)
         .threadingMode(ThreadingMode.SHARED));
 

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -48,7 +48,7 @@ public class MemoryOrderingTest
     private static volatile String failedMessage = null;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true)
         .threadingMode(ThreadingMode.SHARED)
         .publicationTermBufferLength(TERM_BUFFER_LENGTH));

File: aeron-system-tests/src/test/java/io/aeron/MultiDriverTest.java
Patch:
@@ -74,13 +74,13 @@ private void launch()
         buffer.putInt(0, 1);
 
         final MediaDriver.Context driverAContext = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirA)
             .threadingMode(THREADING_MODE);
 
         final MediaDriver.Context driverBContext = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirB)
             .threadingMode(THREADING_MODE);

File: aeron-system-tests/src/test/java/io/aeron/MultiSubscriberTest.java
Patch:
@@ -39,7 +39,7 @@ public class MultiSubscriberTest
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final MediaDriver driver = MediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .threadingMode(ThreadingMode.SHARED));
 
     private final Aeron aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/NameReResolutionTest.java
Patch:
@@ -89,7 +89,7 @@ public void before()
 
         driver = TestMediaDriver.launch(
             new MediaDriver.Context()
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
                 .threadingMode(ThreadingMode.SHARED)
                 .nameResolver(lookupResolver),

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -61,7 +61,7 @@ public void before()
     {
         driver = TestMediaDriver.launch(
             new MediaDriver.Context()
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
                 .threadingMode(ThreadingMode.SHARED));
 

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -89,7 +89,7 @@ private void launch(final String channel)
     {
         context
             .threadingMode(THREADING_MODE)
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .publicationConnectionTimeoutNs(TimeUnit.MILLISECONDS.toNanos(500))
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100));
 

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -50,7 +50,7 @@ private static List<String> channels()
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .threadingMode(ThreadingMode.SHARED)
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
         .clientLivenessTimeoutNs(TimeUnit.MILLISECONDS.toNanos(400))
         .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(10))

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -49,7 +49,7 @@ public class PublishFromArbitraryPositionTest
     private final long seed = System.nanoTime();
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .threadingMode(ThreadingMode.SHARED));
 
     private final Aeron aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/ReentrantClientTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.exceptions.AeronException;
 import io.aeron.test.TestMediaDriver;
+import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.ErrorHandler;
 import org.agrona.collections.MutableReference;
@@ -35,6 +36,7 @@
 public class ReentrantClientTest
 {
     private final TestMediaDriver mediaDriver = TestMediaDriver.launch(new MediaDriver.Context()
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true));
 
     @AfterEach

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificPublicationTest.java
Patch:
@@ -73,8 +73,7 @@ public void after()
     @ParameterizedTest
     @MethodSource("data")
     public void shouldNotCreateExclusivePublicationWhenSessionIdCollidesWithExistingPublication(
-        final ChannelUriStringBuilder channelBuilder
-    )
+        final ChannelUriStringBuilder channelBuilder)
     {
         try (Subscription ignored = aeron.addSubscription(channelBuilder.build(), STREAM_ID);
             Publication publication = aeron.addExclusivePublication(channelBuilder.build(), STREAM_ID))

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificSubscriptionTest.java
Patch:
@@ -60,7 +60,7 @@ public class SessionSpecificSubscriptionTest
         (buffer, offset, length, header) -> assertEquals(SESSION_ID_2, header.sessionId());
 
     private final MediaDriver driver = MediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true)
         .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
         .threadingMode(ThreadingMode.SHARED));

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -78,7 +78,7 @@ private static List<String> channels()
     private void launch()
     {
         driverContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .dirDeleteOnStart(true)
             .threadingMode(ThreadingMode.SHARED);
 

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -55,7 +55,7 @@ private static List<String> channels()
     private final FragmentHandler fragmentHandlerSub = (buffer1, offset, length, header) -> fragmentCountSub.value++;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true)
         .publicationTermBufferLength(LogBufferDescriptor.TERM_MIN_LENGTH)
         .threadingMode(ThreadingMode.SHARED));

File: aeron-system-tests/src/test/java/io/aeron/StartStopSystemTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron;
 
 import io.aeron.driver.MediaDriver;
+import io.aeron.test.Tests;
 import org.junit.jupiter.api.Test;
 
 public class StartStopSystemTest
@@ -25,7 +26,7 @@ public void shouldStartAndStopInstantly()
     {
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
             .dirDeleteOnStart(true)
-            .errorHandler(Throwable::printStackTrace);
+            .errorHandler(Tests::onError);
 
         try (MediaDriver ignore = MediaDriver.launchEmbedded(driverCtx))
         {

File: aeron-system-tests/src/test/java/io/aeron/StopStartSecondSubscriberTest.java
Patch:
@@ -65,13 +65,13 @@ private void launch(final String channelOne, final int streamOne, final String c
         driverOne = MediaDriver.launchEmbedded(
             new MediaDriver.Context()
                 .dirDeleteOnStart(true)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .termBufferSparseFile(true));
 
         driverTwo = MediaDriver.launchEmbedded(
             new MediaDriver.Context()
                 .dirDeleteOnStart(true)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .termBufferSparseFile(true));
 
         publisherOne = Aeron.connect(new Aeron.Context().aeronDirectoryName(driverOne.aeronDirectoryName()));

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.test.TestMediaDriver;
+import io.aeron.test.Tests;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
 
@@ -37,7 +38,7 @@ public class TermBufferLengthTest
     public void shouldHaveCorrectTermBufferLength(final String channel)
     {
         final MediaDriver.Context ctx = new MediaDriver.Context()
-            .errorHandler(Throwable::printStackTrace)
+            .errorHandler(Tests::onError)
             .dirDeleteOnStart(true)
             .publicationTermBufferLength(TEST_TERM_LENGTH * 2)
             .ipcTermBufferLength(TEST_TERM_LENGTH * 2);

File: aeron-system-tests/src/test/java/io/aeron/TwoBufferOfferMessageTest.java
Patch:
@@ -36,7 +36,7 @@ public class TwoBufferOfferMessageTest
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .dirDeleteOnStart(true)
         .threadingMode(ThreadingMode.SHARED));
 

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -53,7 +53,7 @@ private static List<String> channels()
     private static final int MESSAGE_LENGTH = 512 - DataHeaderFlyweight.HEADER_LENGTH;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
-        .errorHandler(Throwable::printStackTrace)
+        .errorHandler(Tests::onError)
         .spiesSimulateConnection(true)
         .dirDeleteOnStart(true)
         .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(20))
@@ -62,8 +62,7 @@ private static List<String> channels()
         .threadingMode(ThreadingMode.SHARED));
 
     private final Aeron aeron = Aeron.connect(new Aeron.Context()
-        .useConductorAgentInvoker(true)
-        .errorHandler(Throwable::printStackTrace));
+        .useConductorAgentInvoker(true));
 
     @AfterEach
     public void after()

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -24,6 +24,7 @@
 import io.aeron.security.AuthenticatorSupplier;
 import io.aeron.security.CredentialsSupplier;
 import io.aeron.security.SessionProxy;
+import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;
 import org.agrona.collections.MutableLong;
@@ -345,7 +346,7 @@ private void launchArchivingMediaDriver(final AuthenticatorSupplier authenticato
                 .aeronDirectoryName(aeronDirectoryName)
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .spiesSimulateConnection(false)
                 .dirDeleteOnStart(true),
             new Archive.Context()

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -135,7 +135,7 @@ private void before(final ThreadingMode threadingMode, final ArchiveThreadingMod
                 .threadingMode(threadingMode)
                 .sharedIdleStrategy(YieldingIdleStrategy.INSTANCE)
                 .spiesSimulateConnection(true)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .dirDeleteOnStart(true));
 
         archive = Archive.launch(

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -66,7 +66,7 @@ public void before()
                 .aeronDirectoryName(aeronDirectoryName)
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .spiesSimulateConnection(false)
                 .dirDeleteOnStart(true),
             new Archive.Context()

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -264,7 +264,7 @@ private void launchAeronAndArchive()
                 .aeronDirectoryName(aeronDirectoryName)
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .spiesSimulateConnection(false)
                 .dirDeleteOnStart(true),
             new Archive.Context()

File: aeron-system-tests/src/test/java/io/aeron/archive/ManageRecordingHistoryTest.java
Patch:
@@ -23,6 +23,7 @@
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.LogBufferDescriptor;
+import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;
 import org.agrona.concurrent.status.CountersReader;
@@ -63,7 +64,7 @@ public void before()
                 .publicationTermBufferLength(Common.TERM_LENGTH)
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .spiesSimulateConnection(true)
                 .dirDeleteOnStart(true),
             new Archive.Context()

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -22,6 +22,7 @@
 import io.aeron.archive.status.RecordingPos;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.test.Tests;
 import org.agrona.CloseHelper;
 import org.agrona.SystemUtil;
 import org.agrona.collections.MutableLong;
@@ -81,7 +82,7 @@ public void before()
                 .aeronDirectoryName(srcAeronDirectoryName)
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .spiesSimulateConnection(true)
                 .dirDeleteOnStart(true),
             new Archive.Context()
@@ -101,7 +102,7 @@ public void before()
                 .aeronDirectoryName(dstAeronDirectoryName)
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(Tests::onError)
                 .spiesSimulateConnection(true)
                 .dirDeleteOnStart(true),
             new Archive.Context()

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -157,7 +157,7 @@ public void onClose()
         networkPublications.forEach(NetworkPublication::free);
         ipcPublications.forEach(IpcPublication::free);
 
-        CloseHelper.close(driverNameResolver);
+        CloseHelper.close(ctx.errorHandler(), driverNameResolver);
         ctx.close();
     }
 
@@ -361,8 +361,8 @@ else if (!address.equals(newAddress))
 
     void closeChannelEndpoints()
     {
-        receiveChannelEndpointByChannelMap.values().forEach(UdpChannelTransport::close);
-        sendChannelEndpointByChannelMap.values().forEach(UdpChannelTransport::close);
+        CloseHelper.closeAll(ctx.errorHandler(), receiveChannelEndpointByChannelMap.values());
+        CloseHelper.closeAll(ctx.errorHandler(), sendChannelEndpointByChannelMap.values());
     }
 
     SendChannelEndpoint senderChannelEndpoint(final UdpChannel channel)

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -258,6 +258,8 @@ public void onResolutionChange(
                 resolutionChanges.getAndAddOrdered(1);
             }
         }
+
+        channelEndpoint.updateControlAddress(transportIndex, newAddress);
     }
 
     private void checkPendingSetupMessages(final long nowNs)

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -371,10 +371,10 @@ public void shouldManuallyAddPortDuringActiveStream() throws InterruptedExceptio
             {
                 // If we add B before A has reached i number of messages
                 // then B will receive more than the expected `numMessageForSub2`.
-                final int published = i;
+                final int published = i + 1;
                 final Supplier<String> message =
                     () -> "Handler: " + fragmentHandlerA.toString() + ", published: " + published;
-                while (!fragmentHandlerA.hasReached(i + 1))
+                while (!fragmentHandlerA.hasReached(published))
                 {
                     if (subscriptionA.poll(fragmentHandlerA, 10) <= 0)
                     {

File: aeron-client/src/main/java/io/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -26,7 +26,8 @@
 /**
  * Flyweight for Data Frame header of a message fragment.
  * <p>
- * <a target="_blank" href="https://github.com/real-logic/aeron/wiki/Protocol-Specification#data-frame">Data Frame</a>
+ * <a target="_blank"
+ *    href="https://github.com/real-logic/aeron/wiki/Transport-Protocol-Specification#data-frame">Data Frame</a>
  * wiki page.
  */
 public class DataHeaderFlyweight extends HeaderFlyweight

File: aeron-client/src/main/java/io/aeron/protocol/SetupFlyweight.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * HeaderFlyweight for Setup Message Frames.
  * <p>
- * <a target="_blank" href="https://github.com/real-logic/aeron/wiki/Protocol-Specification#stream-setup">
+ * <a target="_blank" href="https://github.com/real-logic/aeron/wiki/Transport-Protocol-Specification#stream-setup">
  *     Stream Setup</a> wiki page.
  */
 public class SetupFlyweight extends HeaderFlyweight

File: aeron-client/src/main/java/io/aeron/protocol/StatusMessageFlyweight.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Flyweight for a Status Message Frame.
  * <p>
- * <a target="_blank" href="https://github.com/real-logic/aeron/wiki/Protocol-Specification#status-messages">
+ * <a target="_blank" href="https://github.com/real-logic/aeron/wiki/Transport-Protocol-Specification#status-messages">
  *     Status Message</a> wiki page.
  */
 public class StatusMessageFlyweight extends HeaderFlyweight

File: aeron-system-tests/src/test/java/io/aeron/test/CTestMediaDriver.java
Patch:
@@ -129,7 +129,7 @@ public static CTestMediaDriver launch(
         pb.environment().put("AERON_FLOW_CONTROL_GROUP_TAG", String.valueOf(context.flowControlGroupTag()));
         pb.environment().put(
             "AERON_FLOW_CONTROL_GROUP_MIN_SIZE", String.valueOf(context.flowControlGroupMinSize()));
-        pb.environment().put("AERON_PRINT_CONFIGURATION", "true");
+//        pb.environment().put("AERON_PRINT_CONFIGURATION", "true");
         pb.environment().put("AERON_EVENT_LOG", "0xFFFF");
 
         setFlowControlStrategy(pb.environment(), context);
@@ -149,7 +149,8 @@ public static CTestMediaDriver launch(
             else
             {
                 stdoutFile = File.createTempFile("CTestMediaDriver-", ".out");
-                stderrFile = File.createTempFile("CTestMediaDriver-", ".err");
+                final String tmpName = stdoutFile.getName().substring(0, stdoutFile.getName().length() - 4) + ".err";
+                stderrFile = new File(stdoutFile.getParent(), tmpName);
                 driverOutputConsumer.outputFiles(context.aeronDirectoryName(), stdoutFile, stderrFile);
             }
 

File: aeron-agent/src/test/java/io/aeron/agent/ArchiveLoggingAgentTest.java
Patch:
@@ -95,6 +95,7 @@ private void testArchiveLogging(final String enabledEvents, final EnumSet<Archiv
             final MediaDriver.Context mediaDriverCtx = new MediaDriver.Context()
                 .errorHandler(Throwable::printStackTrace)
                 .aeronDirectoryName(aeronDirectoryName)
+                .dirDeleteOnStart(true)
                 .threadingMode(ThreadingMode.SHARED);
 
             final AeronArchive.Context aeronArchiveContext = new AeronArchive.Context()
@@ -109,6 +110,7 @@ private void testArchiveLogging(final String enabledEvents, final EnumSet<Archiv
                 .aeronDirectoryName(aeronDirectoryName)
                 .errorHandler(Throwable::printStackTrace)
                 .archiveDir(new File(testDir, "archive"))
+                .deleteArchiveOnStart(true)
                 .controlChannel(aeronArchiveContext.controlRequestChannel())
                 .controlStreamId(aeronArchiveContext.controlRequestStreamId())
                 .localControlStreamId(aeronArchiveContext.controlRequestStreamId())
@@ -132,6 +134,7 @@ private void before(final String enabledEvents, final EnumSet<ArchiveEventCode>
         AgentTests.beforeAgent();
 
         latch = new CountDownLatch(expectedEvents.size());
+        LOGGED_EVENTS.clear();
         WAIT_LIST.addAll(expectedEvents.stream().map(ArchiveEventLogger::toEventCodeId).collect(toSet()));
 
         testDir = Paths.get(IoUtil.tmpDirName(), "archive-test").toFile();

File: aeron-cluster/src/test/java/io/aeron/cluster/BackupTest.java
Patch:
@@ -281,7 +281,7 @@ public void shouldBackupClusterNoSnapshotsAndNonEmptyLogWithReQuery()
                 cluster.awaitBackupState(ClusterBackup.State.BACKING_UP);
                 cluster.awaitBackupLiveLogPosition(logPosition);
 
-                backupNode.nextBackupQueryDeadlineMs(0);
+                assertTrue(backupNode.nextBackupQueryDeadlineMs(0));
 
                 cluster.sendMessages(5);
                 cluster.awaitResponseMessageCount(15);

File: aeron-test-support/src/main/java/io/aeron/test/Tests.java
Patch:
@@ -38,7 +38,6 @@ public static void checkInterruptStatus()
         if (Thread.interrupted())
         {
             unexpectedInterruptStackTrace();
-
             fail("unexpected interrupt");
         }
     }

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventCodeTest.java
Patch:
@@ -18,14 +18,14 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;
 
-import static org.junit.jupiter.api.Assertions.assertSame;
+import static org.junit.jupiter.api.Assertions.assertNotSame;
 
 public class ClusterEventCodeTest
 {
     @ParameterizedTest
     @EnumSource(ClusterEventCode.class)
     void getCodeById(final ClusterEventCode code)
     {
-        assertSame(code, ClusterEventCode.get(code.id()));
+        assertNotSame(code, ClusterEventCode.get(code.id()));
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/TestBackupNode.java
Patch:
@@ -55,6 +55,7 @@ void closeAndDelete()
         {
             clusterBackupMediaDriver.clusterBackup().context().deleteDirectory();
             clusterBackupMediaDriver.archive().context().deleteArchiveDirectory();
+            clusterBackupMediaDriver.mediaDriver().context().deleteAeronDirectory();
         }
     }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/TestNode.java
Patch:
@@ -100,6 +100,7 @@ void closeAndDelete()
         {
             clusteredMediaDriver.consensusModule().context().deleteDirectory();
             clusteredMediaDriver.archive().context().deleteArchiveDirectory();
+            clusteredMediaDriver.mediaDriver().context().deleteAeronDirectory();
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -330,7 +330,7 @@ private static void ensureDirectoryIsRecreated(final Context ctx)
         {
             if (ctx.warnIfDirectoryExists())
             {
-                System.err.println("WARNING: " + ctx.aeronDirectory() + " already exists.");
+                System.err.println("WARNING: " + ctx.aeronDirectory() + " exists");
             }
 
             if (!ctx.dirDeleteOnStart())

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -944,7 +944,6 @@ void replicate(
 
         final long replicationId = aeron.nextCorrelationId();
         final ReplicationSession replicationSession = new ReplicationSession(
-            correlationId,
             srcRecordingId,
             dstRecordingId,
             channelTagId,

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -225,7 +225,8 @@ public ControlledFragmentAssembler.Action onFragment(
 
             return Action.BREAK;
         }
-        else if (messageHeaderDecoder.templateId() == ChallengeDecoder.TEMPLATE_ID)
+
+        if (messageHeaderDecoder.templateId() == ChallengeDecoder.TEMPLATE_ID)
         {
             challengeDecoder.wrap(
                 buffer,

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplayMerge.java
Patch:
@@ -522,7 +522,7 @@ private static boolean pollForResponse(final AeronArchive archive, final long co
             {
                 if (poller.code() == ControlResponseCode.ERROR)
                 {
-                    throw new ArchiveException("archive response for correlationId=" + correlationId +
+                    throw new ArchiveException("archive response for correlationId=" + poller.correlationId() +
                         ", error: " + poller.errorMessage(), (int)poller.relevantId());
                 }
 

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplayMerge.java
Patch:
@@ -516,18 +516,17 @@ private void checkProgress(final long nowMs)
     private static boolean pollForResponse(final AeronArchive archive, final long correlationId)
     {
         final ControlResponsePoller poller = archive.controlResponsePoller();
-
         if (poller.poll() > 0 && poller.isPollComplete())
         {
-            if (poller.controlSessionId() == archive.controlSessionId() && poller.correlationId() == correlationId)
+            if (poller.controlSessionId() == archive.controlSessionId())
             {
                 if (poller.code() == ControlResponseCode.ERROR)
                 {
                     throw new ArchiveException("archive response for correlationId=" + correlationId +
                         ", error: " + poller.errorMessage(), (int)poller.relevantId());
                 }
 
-                return true;
+                return poller.correlationId() == correlationId;
             }
         }
 

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventLogger.java
Patch:
@@ -54,6 +54,7 @@ public void logNewLeadershipTerm(
         final int captureLength = captureLength(length);
         final int encodedLength = encodedLength(captureLength);
         final int index = ringBuffer.tryClaim(toEventCodeId(NEW_LEADERSHIP_TERM), encodedLength);
+
         if (index > 0)
         {
             try
@@ -84,6 +85,7 @@ public <T extends Enum<T>> void logStateChange(
         final int captureLength = captureLength(length);
         final int encodedLength = encodedLength(captureLength);
         final int index = ringBuffer.tryClaim(toEventCodeId(eventCode), encodedLength);
+
         if (index > 0)
         {
             try

File: aeron-client/src/main/java/io/aeron/DriverEventsAdapter.java
Patch:
@@ -98,15 +98,15 @@ public void onMessage(final int msgTypeId, final MutableDirectBuffer buffer, fin
             {
                 errorResponse.wrap(buffer, index);
 
-                final int correlationId = (int)errorResponse.offendingCommandCorrelationId();
+                final long correlationId = errorResponse.offendingCommandCorrelationId();
                 final int errorCodeValue = errorResponse.errorCodeValue();
                 final ErrorCode errorCode = ErrorCode.get(errorCodeValue);
                 boolean notProcessed = true;
 
                 if (CHANNEL_ENDPOINT_ERROR == errorCode)
                 {
                     notProcessed = false;
-                    listener.onChannelEndpointError(correlationId, errorResponse.errorMessage());
+                    listener.onChannelEndpointError((int)correlationId, errorResponse.errorMessage());
                 }
                 else if (correlationId == activeCorrelationId)
                 {

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -39,7 +39,6 @@
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static java.time.Duration.ofSeconds;
 import static java.util.Arrays.asList;
-import static org.agrona.BufferUtil.allocateDirectAligned;
 import static org.junit.jupiter.api.Assertions.*;
 
 public class ExclusivePublicationTest
@@ -56,7 +55,7 @@ private static List<String> channels()
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 200;
 
-    private final UnsafeBuffer srcBuffer = new UnsafeBuffer(allocateDirectAligned(65 * 1024, 64));
+    private final UnsafeBuffer srcBuffer = new UnsafeBuffer(new byte[65 * 1024]);
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Throwable::printStackTrace)

File: aeron-driver/src/main/java/io/aeron/driver/MinMulticastFlowControl.java
Patch:
@@ -52,7 +52,7 @@ public void initialize(
         final int initialTermId,
         final int termBufferLength)
     {
-        receiverTimeoutNs = context.minFlowControlTimeoutNs();
+        receiverTimeoutNs = context.flowControlReceiverTimeoutNs();
         final String fcValue = udpChannel.channelUri().get(CommonContext.FLOW_CONTROL_PARAM_NAME);
         if (null != fcValue)
         {

File: aeron-system-tests/src/test/java/io/aeron/test/CTestMediaDriver.java
Patch:
@@ -131,7 +131,7 @@ public static CTestMediaDriver launch(
         }
         pb.environment().put("AERON_FLOW_CONTROL_GROUP_RTAG", String.valueOf(context.flowControlGroupReceiverTag()));
         pb.environment().put(
-            "AERON_FLOW_CONTROL_GROUP_REQUIRED_SIZE", String.valueOf(context.flowControlGroupRequiredSize()));
+            "AERON_FLOW_CONTROL_RECEIVER_GROUP_MIN_SIZE", String.valueOf(context.flowControlReceiverGroupMinSize()));
         pb.environment().put("AERON_PRINT_CONFIGURATION", "true");
         pb.environment().put("AERON_EVENT_LOG", "0xFFFF");
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2502,7 +2502,7 @@ private void enterElection(final long nowNs)
             this);
 
         election.doWork(nowNs);
-        serviceProxy.electionStartEvent(commitPosition.getWeak());
+        serviceProxy.electionStartEvent(commitPosition.getWeak(), ctx.countedErrorHandler());
     }
 
     private void idle()

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -656,7 +656,7 @@ public class Configuration
         "aeron.tagged.multicast.flow.control.receiver.timeout";
 
     /**
-     * Property name for tagged flow control timeouts.
+     * Property name for min flow control timeouts.
      */
     public static final String MIN_FLOW_CONTROL_TIMEOUT_PROP_NAME =
         "aeron.min.multicast.flow.control.receiver.timeout";

File: aeron-driver/src/test/java/io/aeron/driver/TaggedMulticastFlowControlTest.java
Patch:
@@ -1,7 +1,6 @@
 package io.aeron.driver;
 
 import io.aeron.driver.media.UdpChannel;
-import io.aeron.test.SlowTest;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
@@ -12,7 +11,6 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-@SlowTest
 class TaggedMulticastFlowControlTest
 {
     private static final int DEFAULT_GROUP_SIZE = 0;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1196,7 +1196,7 @@ private int findTermOffsetForStart(
             {
                 byteBuffer.clear().limit(Math.min(termLength - termOffset, MAX_BLOCK_LENGTH));
                 final int bytesRead = fileChannel.read(byteBuffer, termOffset);
-                if (-1 == bytesRead)
+                if (bytesRead <= 0)
                 {
                     final String msg = "read failed on " + file;
                     controlSession.sendErrorResponse(correlationId, msg, controlResponseProxy);

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -340,7 +340,8 @@ private int replay() throws IOException
             if (frameLength <= 0)
             {
                 throw new IllegalStateException(
-                    "unexpected end of recording at position=" + replayPosition + " batchOffset=" + batchOffset);
+                    "unexpected end of recording at position=" + replayPosition +
+                    " batchOffset=" + batchOffset + " bytesRead=" + bytesRead);
             }
 
             final int frameType = frameType(replayBuffer, batchOffset);

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -69,13 +69,13 @@ public static synchronized void removeTransformer()
     {
         if (logTransformer != null)
         {
-            CloseHelper.quietClose(readerAgentRunner);
             logTransformer.reset(instrumentation, AgentBuilder.RedefinitionStrategy.RETRANSFORMATION);
-
             thread = null;
-            readerAgentRunner = null;
             instrumentation = null;
             logTransformer = null;
+
+            CloseHelper.close(readerAgentRunner);
+            readerAgentRunner = null;
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -109,9 +109,8 @@ public Context context()
 
     public void close()
     {
-        final CountedErrorHandler errorHandler = ctx.countedErrorHandler();
-        AeronCloseHelper.close(errorHandler, conductorInvoker);
-        AeronCloseHelper.close(errorHandler, conductorRunner);
+        CloseHelper.close(conductorInvoker);
+        CloseHelper.close(conductorRunner);
     }
 
     private Archive start()

File: aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java
Patch:
@@ -15,7 +15,6 @@
  */
 package io.aeron.archive;
 
-import io.aeron.AeronCloseHelper;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.status.SystemCounterDescriptor;
 import org.agrona.CloseHelper;
@@ -126,7 +125,6 @@ public MediaDriver mediaDriver()
 
     public void close()
     {
-        AeronCloseHelper.close(driver.context().errorHandler(), archive);
-        CloseHelper.close(driver);
+        CloseHelper.closeAll(archive, driver);
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -267,7 +267,7 @@ public Context context()
 
     public void close()
     {
-        AeronCloseHelper.close(ctx.countedErrorHandler(), conductorRunner);
+        CloseHelper.close(conductorRunner);
     }
 
     /**

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -139,7 +139,7 @@ public Context context()
 
     public void close()
     {
-        AeronCloseHelper.close(ctx.errorHandler(), serviceAgentRunner);
+        CloseHelper.close(serviceAgentRunner);
     }
 
     /**

File: aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.archive;
 
+import io.aeron.AeronCloseHelper;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.status.SystemCounterDescriptor;
 import org.agrona.CloseHelper;
@@ -125,6 +126,7 @@ public MediaDriver mediaDriver()
 
     public void close()
     {
-        CloseHelper.closeAll(archive, driver);
+        AeronCloseHelper.close(driver.context().errorHandler(), archive);
+        CloseHelper.close(driver);
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -288,7 +288,7 @@ public void close()
         if (!isClosed)
         {
             isClosed = true;
-            CloseHelper.close(catalogChannel);
+            CloseHelper.quietClose(catalogChannel); // Ignore error so that the rest can be closed
             IoUtil.unmap(catalogByteBuffer);
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterSession.java
Patch:
@@ -90,9 +90,10 @@ enum State
 
     public void close()
     {
-        CloseHelper.close(responsePublication);
-        responsePublication = null;
+        final Publication responsePublication = this.responsePublication;
+        this.responsePublication = null;
         state = State.CLOSED;
+        CloseHelper.close(responsePublication);
     }
 
     long id()

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -18,7 +18,6 @@
 import io.aeron.*;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.service.Cluster;
-import org.agrona.CloseHelper;
 import org.agrona.collections.Int2ObjectHashMap;
 
 import java.util.Random;
@@ -158,7 +157,7 @@ public Election(
 
     public void close()
     {
-        CloseHelper.close(stateCounter);
+        AeronCloseHelper.close(ctx.countedErrorHandler(), stateCounter);
     }
 
     public ClusterMember leader()

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -96,7 +96,7 @@ public ReceiveChannelEndpoint(
             Long.valueOf(AsciiEncoding.parseLongAscii(rtagStr, 0, rtagStr.length()));
 
         multiRcvDestination = udpChannel.isManualControlMode() ?
-            new MultiRcvDestination(context.nanoClock(), DESTINATION_ADDRESS_TIMEOUT) : null;
+            new MultiRcvDestination(context.nanoClock(), DESTINATION_ADDRESS_TIMEOUT, errorHandler) : null;
     }
 
     /**

File: aeron-archive/src/main/java/io/aeron/archive/ArchivingMediaDriver.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.archive;
 
+import io.aeron.AeronCloseHelper;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.status.SystemCounterDescriptor;
 import org.agrona.CloseHelper;
@@ -125,6 +126,7 @@ public MediaDriver mediaDriver()
 
     public void close()
     {
-        CloseHelper.closeAll(archive, driver);
+        AeronCloseHelper.close(driver.context().errorHandler(), archive);
+        CloseHelper.close(driver);
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -288,7 +288,7 @@ public void close()
         if (!isClosed)
         {
             isClosed = true;
-            CloseHelper.close(catalogChannel);
+            CloseHelper.quietClose(catalogChannel); // Ignore error so that the rest can be closed
             IoUtil.unmap(catalogByteBuffer);
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterSession.java
Patch:
@@ -90,9 +90,10 @@ enum State
 
     public void close()
     {
-        CloseHelper.close(responsePublication);
-        responsePublication = null;
+        final Publication responsePublication = this.responsePublication;
+        this.responsePublication = null;
         state = State.CLOSED;
+        CloseHelper.close(responsePublication);
     }
 
     long id()

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -18,7 +18,6 @@
 import io.aeron.*;
 import io.aeron.cluster.client.ClusterException;
 import io.aeron.cluster.service.Cluster;
-import org.agrona.CloseHelper;
 import org.agrona.collections.Int2ObjectHashMap;
 
 import java.util.Random;
@@ -158,7 +157,7 @@ public Election(
 
     public void close()
     {
-        CloseHelper.close(stateCounter);
+        AeronCloseHelper.close(ctx.countedErrorHandler(), stateCounter);
     }
 
     public ClusterMember leader()

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -96,7 +96,7 @@ public ReceiveChannelEndpoint(
             Long.valueOf(AsciiEncoding.parseLongAscii(rtagStr, 0, rtagStr.length()));
 
         multiRcvDestination = udpChannel.isManualControlMode() ?
-            new MultiRcvDestination(context.nanoClock(), DESTINATION_ADDRESS_TIMEOUT) : null;
+            new MultiRcvDestination(context.nanoClock(), DESTINATION_ADDRESS_TIMEOUT, errorHandler) : null;
     }
 
     /**

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -162,6 +162,8 @@ public void shouldBeAbleToStartClusterFromTruncatedRecordingLog()
 
             stopAndStartClusterWithTruncationOfRecordingLog();
             assertClusterIsFunctioningCorrectly();
+
+            ClusterTests.failOnClusterError();
         });
     }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/TestCluster.java
Patch:
@@ -139,6 +139,8 @@ public void close()
                 node.cleanUp();
             }
         }
+
+        ClusterTests.failOnClusterError();
     }
 
     static void awaitCount(final AtomicLong counter, final long value)

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -162,6 +162,8 @@ public void shouldBeAbleToStartClusterFromTruncatedRecordingLog()
 
             stopAndStartClusterWithTruncationOfRecordingLog();
             assertClusterIsFunctioningCorrectly();
+
+            ClusterTests.failOnClusterError();
         });
     }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/TestCluster.java
Patch:
@@ -139,6 +139,8 @@ public void close()
                 node.cleanUp();
             }
         }
+
+        ClusterTests.failOnClusterError();
     }
 
     static void awaitCount(final AtomicLong counter, final long value)

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -364,9 +364,10 @@ public static class Configuration
         public static final String LOG_CHANNEL_PROP_NAME = "aeron.cluster.log.channel";
 
         /**
-         * Channel for the clustered log.
+         * Channel for the clustered log. This channel can exist for a potentially log time given cluster operation
+         * so attention should be given to configuration such as term-length and mtu.
          */
-        public static final String LOG_CHANNEL_DEFAULT = "aeron:udp?endpoint=localhost:9030|group=true";
+        public static final String LOG_CHANNEL_DEFAULT = "aeron:udp?endpoint=localhost:9030|group=true|term-length=64m";
 
         /**
          * Property name for the comma separated list of member endpoints.

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -1214,7 +1214,7 @@ Context interServiceTimeoutNs(final long interServiceTimeout)
          */
         public long interServiceTimeoutNs()
         {
-            return interServiceTimeoutNs;
+            return CommonContext.checkDebugTimeout(interServiceTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -997,7 +997,7 @@ public Context messageTimeoutNs(final long messageTimeoutNs)
          */
         public long messageTimeoutNs()
         {
-            return messageTimeoutNs;
+            return CommonContext.checkDebugTimeout(messageTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -1272,7 +1272,7 @@ public Context nakMulticastGroupSize(final int nakMulticastGroupSize)
          */
         public long clientLivenessTimeoutNs()
         {
-            return clientLivenessTimeoutNs;
+            return CommonContext.checkDebugTimeout(clientLivenessTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -117,7 +117,7 @@ public static UdpChannel parse(final String channelUriString)
             if (hasNoDistinguishingCharacteristic && !isManualControlMode)
             {
                 throw new IllegalArgumentException(
-                    "URIs for UDP must specify an endpoint, control, tag-id, or control-mode manual: " +
+                    "URIs for UDP must specify an endpoint, control, tags, or control-mode=manual: " +
                     channelUriString);
             }
 

File: aeron-driver/src/main/java/io/aeron/driver/FlowControl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver;
 
+import io.aeron.driver.media.UdpChannel;
 import io.aeron.protocol.StatusMessageFlyweight;
 
 import java.net.InetSocketAddress;
@@ -46,10 +47,11 @@ long onStatusMessage(
     /**
      * Initialize the flow control strategy for a stream.
      *
+     * @param udpChannel       for the stream.
      * @param initialTermId    at which the stream started.
      * @param termBufferLength to use as the length of each term buffer.
      */
-    void initialize(int initialTermId, int termBufferLength);
+    void initialize(UdpChannel udpChannel, int initialTermId, int termBufferLength);
 
     /**
      * Perform any maintenance needed by the flow control strategy and return current sender limit position.

File: aeron-driver/src/main/java/io/aeron/driver/MaxMulticastFlowControl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver;
 
+import io.aeron.driver.media.UdpChannel;
 import io.aeron.protocol.StatusMessageFlyweight;
 
 import java.net.InetSocketAddress;
@@ -34,7 +35,7 @@ public class MaxMulticastFlowControl implements FlowControl
     /**
      * {@inheritDoc}
      */
-    public void initialize(final int initialTermId, final int termBufferLength)
+    public void initialize(final UdpChannel udpChannel, final int initialTermId, final int termBufferLength)
     {
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -218,7 +218,7 @@ public NetworkPublication(
         final int termLength = rawLog.termLength();
         termBufferLength = termLength;
         termLengthMask = termLength - 1;
-        flowControl.initialize(initialTermId, termLength);
+        flowControl.initialize(channelEndpoint.udpChannel(), initialTermId, termLength);
 
         final long nowNs = nanoClock.nanoTime();
         timeOfLastSendOrHeartbeatNs = nowNs - PUBLICATION_HEARTBEAT_TIMEOUT_NS - 1;

File: aeron-driver/src/main/java/io/aeron/driver/UnicastFlowControl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver;
 
+import io.aeron.driver.media.UdpChannel;
 import io.aeron.protocol.StatusMessageFlyweight;
 
 import java.net.InetSocketAddress;
@@ -56,7 +57,7 @@ public long onStatusMessage(
     /**
      * {@inheritDoc}
      */
-    public void initialize(final int initialTermId, final int termBufferLength)
+    public void initialize(final UdpChannel udpChannel, final int initialTermId, final int termBufferLength)
     {
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -160,7 +160,7 @@ public static State get(final int code)
     }
 
     /**
-     * Get the current state of the ConsensusModule
+     * Get the current state of the {@link ConsensusModule}.
      *
      * @param counters to search for the control toggle.
      * @return the state of the ConsensusModule or null if not found.
@@ -184,7 +184,6 @@ public static State findState(final CountersReader counters)
         return null;
     }
 
-
     /**
      * Launch an {@link ConsensusModule} with that communicates with an out of process {@link io.aeron.archive.Archive}
      * and {@link io.aeron.driver.MediaDriver} then awaits shutdown signal.

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -48,6 +48,7 @@
 import static io.aeron.logbuffer.LogBufferDescriptor.TERM_MAX_LENGTH;
 import static io.aeron.logbuffer.LogBufferDescriptor.TERM_MIN_LENGTH;
 import static java.lang.System.getProperty;
+import static java.nio.charset.StandardCharsets.US_ASCII;
 import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;
 import static org.agrona.SystemUtil.*;
 
@@ -787,7 +788,8 @@ public void conclude()
 
             if (null == errorHandler)
             {
-                errorHandler = new LoggingErrorHandler(new DistinctErrorLog(markFile.errorBuffer(), epochClock));
+                errorHandler = new LoggingErrorHandler(new DistinctErrorLog(
+                    markFile.errorBuffer(), epochClock, US_ASCII));
             }
 
             if (null == aeron)

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -43,6 +43,7 @@
 
 import static io.aeron.CommonContext.ENDPOINT_PARAM_NAME;
 import static io.aeron.cluster.ConsensusModule.Configuration.SERVICE_ID;
+import static java.nio.charset.StandardCharsets.US_ASCII;
 import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;
 import static org.agrona.SystemUtil.getDurationInNanos;
 
@@ -414,7 +415,7 @@ public void conclude()
 
             if (null == errorLog)
             {
-                errorLog = new DistinctErrorLog(markFile.errorBuffer(), epochClock);
+                errorLog = new DistinctErrorLog(markFile.errorBuffer(), epochClock, US_ASCII);
             }
 
             if (null == errorHandler)

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -44,6 +44,7 @@
 import static io.aeron.cluster.ConsensusModule.Configuration.*;
 import static io.aeron.cluster.service.ClusteredServiceContainer.Configuration.SNAPSHOT_CHANNEL_PROP_NAME;
 import static io.aeron.cluster.service.ClusteredServiceContainer.Configuration.SNAPSHOT_STREAM_ID_PROP_NAME;
+import static java.nio.charset.StandardCharsets.US_ASCII;
 import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;
 import static org.agrona.SystemUtil.*;
 import static org.agrona.concurrent.status.CountersReader.METADATA_LENGTH;
@@ -1134,7 +1135,7 @@ public void conclude()
 
             if (null == errorLog)
             {
-                errorLog = new DistinctErrorLog(markFile.errorBuffer(), epochClock);
+                errorLog = new DistinctErrorLog(markFile.errorBuffer(), epochClock, US_ASCII);
             }
 
             if (null == errorHandler)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.function.Supplier;
 
 import static io.aeron.cluster.service.ClusteredServiceContainer.Configuration.*;
+import static java.nio.charset.StandardCharsets.US_ASCII;
 import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;
 import static org.agrona.SystemUtil.getSizeAsInt;
 import static org.agrona.SystemUtil.loadPropertiesFiles;
@@ -610,7 +611,7 @@ public void conclude()
 
             if (null == errorLog)
             {
-                errorLog = new DistinctErrorLog(markFile.errorBuffer(), epochClock);
+                errorLog = new DistinctErrorLog(markFile.errorBuffer(), epochClock, US_ASCII);
             }
 
             if (null == errorHandler)

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -2963,7 +2963,8 @@ private void concludeDependantProperties()
 
             if (null == errorLog)
             {
-                errorLog = new DistinctErrorLog(createErrorLogBuffer(cncByteBuffer, cncMetaDataBuffer), epochClock);
+                errorLog = new DistinctErrorLog(
+                    createErrorLogBuffer(cncByteBuffer, cncMetaDataBuffer), epochClock, US_ASCII);
             }
 
             if (null == errorHandler)

File: aeron-agent/src/main/java/io/aeron/agent/EventLogReaderAgent.java
Patch:
@@ -31,6 +31,7 @@
 import static java.lang.System.*;
 import static java.nio.channels.FileChannel.open;
 import static java.nio.file.StandardOpenOption.*;
+import static java.time.ZoneId.systemDefault;
 import static org.agrona.BitUtil.CACHE_LINE_LENGTH;
 import static org.agrona.BufferUtil.allocateDirectAligned;
 
@@ -71,7 +72,7 @@ public void onStart()
         }
 
         builder.setLength(0);
-        dissectLogStartMessage(nanoTime(), currentTimeMillis(), builder);
+        dissectLogStartMessage(nanoTime(), currentTimeMillis(), systemDefault(), builder);
         builder.append(lineSeparator());
 
         if (null == fileChannel)

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -51,7 +51,7 @@
 
 public class DriverLoggingAgentTest
 {
-    private static final String NETWORK_CHANNEL = "aeron:udp?endpoint=localhost:54325";
+    private static final String NETWORK_CHANNEL = "aeron:udp?endpoint=localhost:24325";
     private static final int STREAM_ID = 1777;
 
     private static final Set<Integer> LOGGED_EVENTS = synchronizedSet(new HashSet<>());

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -42,7 +42,7 @@ public class BufferClaimMessageTest
 {
     private static List<String> channels()
     {
-        return Arrays.asList("aeron:udp?endpoint=localhost:54325", CommonContext.IPC_CHANNEL);
+        return Arrays.asList("aeron:udp?endpoint=localhost:24325", CommonContext.IPC_CHANNEL);
     }
 
     private static final int STREAM_ID = 1001;

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -40,7 +40,7 @@ private static List<String> channels()
     {
         return asList(
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost",
-            "aeron:udp?endpoint=localhost:54325",
+            "aeron:udp?endpoint=localhost:24325",
             CommonContext.IPC_CHANNEL);
     }
 

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -45,7 +45,7 @@ private static List<String> channels()
     {
         return asList(
             CommonContext.IPC_CHANNEL,
-            "aeron:udp?endpoint=localhost:54325",
+            "aeron:udp?endpoint=localhost:24325",
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost");
     }
 

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -42,7 +42,7 @@
 
 public class GapFillLossTest
 {
-    private static final String CHANNEL = "aeron:udp?endpoint=localhost:54325";
+    private static final String CHANNEL = "aeron:udp?endpoint=localhost:24325";
     private static final String UNRELIABLE_CHANNEL =
         CHANNEL + "|" + CommonContext.RELIABLE_STREAM_PARAM_NAME + "=false";
 

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -38,7 +38,7 @@ private static List<String> channels()
     {
         return asList(
             "aeron:ipc?term-length=64k",
-            "aeron:udp?endpoint=localhost:54325|term-length=64k",
+            "aeron:udp?endpoint=localhost:24325|term-length=64k",
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost");
     }
 

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -37,7 +37,7 @@
 
 public class MemoryOrderingTest
 {
-    private static final String CHANNEL = "aeron:udp?endpoint=localhost:54325";
+    private static final String CHANNEL = "aeron:udp?endpoint=localhost:24325";
     private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 2000;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -44,9 +44,9 @@
 
 public class MultiDestinationCastTest
 {
-    private static final String PUB_MDC_DYNAMIC_URI = "aeron:udp?control=localhost:54325";
-    private static final String SUB1_MDC_DYNAMIC_URI = "aeron:udp?control=localhost:54325|group=true";
-    private static final String SUB2_MDC_DYNAMIC_URI = "aeron:udp?control=localhost:54325|group=true";
+    private static final String PUB_MDC_DYNAMIC_URI = "aeron:udp?control=localhost:24325";
+    private static final String SUB1_MDC_DYNAMIC_URI = "aeron:udp?control=localhost:24325|group=true";
+    private static final String SUB2_MDC_DYNAMIC_URI = "aeron:udp?control=localhost:24325|group=true";
     private static final String SUB3_MDC_DYNAMIC_URI = CommonContext.SPY_PREFIX + PUB_MDC_DYNAMIC_URI;
 
     private static final String PUB_MDC_MANUAL_URI = "aeron:udp?control-mode=manual|tags=3,4";

File: aeron-system-tests/src/test/java/io/aeron/MultiSubscriberTest.java
Patch:
@@ -34,8 +34,8 @@
 
 public class MultiSubscriberTest
 {
-    private static final String CHANNEL_1 = "aeron:udp?endpoint=localhost:54325|fruit=banana";
-    private static final String CHANNEL_2 = "aeron:udp?endpoint=localhost:54325|fruit=apple";
+    private static final String CHANNEL_1 = "aeron:udp?endpoint=localhost:24325|fruit=banana";
+    private static final String CHANNEL_2 = "aeron:udp?endpoint=localhost:24325|fruit=apple";
     private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -41,7 +41,7 @@
 
 public class PongTest
 {
-    private static final String PING_URI = "aeron:udp?endpoint=localhost:54325";
+    private static final String PING_URI = "aeron:udp?endpoint=localhost:24325";
     private static final String PONG_URI = "aeron:udp?endpoint=localhost:54326";
 
     private static final int PING_STREAM_ID = 1001;

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -60,7 +60,7 @@ public class PubAndSubTest
     private static List<String> channels()
     {
         return asList(
-            "aeron:udp?endpoint=localhost:54325",
+            "aeron:udp?endpoint=localhost:24325",
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost",
             IPC_URI);
     }

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -42,7 +42,7 @@ public class PublicationUnblockTest
     private static List<String> channels()
     {
         return asList(
-            "aeron:udp?endpoint=localhost:54325",
+            "aeron:udp?endpoint=localhost:24325",
             "aeron:ipc");
     }
 

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldPublishFromArbitraryJoinPosition()
             final int termOffset = BitUtil.align(rnd.nextInt(termLength), FrameDescriptor.FRAME_ALIGNMENT);
             final int termId = initialTermId + rnd.nextInt(1000);
             final String channelUri = new ChannelUriStringBuilder()
-                .endpoint("localhost:54325")
+                .endpoint("localhost:24325")
                 .termLength(termLength)
                 .initialTermId(initialTermId)
                 .termId(termId)

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificPublicationTest.java
Patch:
@@ -37,7 +37,7 @@
 
 public class SessionSpecificPublicationTest
 {
-    private static final String ENDPOINT = "localhost:54325";
+    private static final String ENDPOINT = "localhost:24325";
     private static final int SESSION_ID_1 = 1077;
     private static final int SESSION_ID_2 = 1078;
     private static final int STREAM_ID = 1007;

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificSubscriptionTest.java
Patch:
@@ -35,7 +35,7 @@
 
 public class SessionSpecificSubscriptionTest
 {
-    private static final String ENDPOINT = "localhost:54325";
+    private static final String ENDPOINT = "localhost:24325";
     private static final int SESSION_ID_1 = 1077;
     private static final int SESSION_ID_2 = 1078;
     private static final int STREAM_ID = 1007;

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -45,7 +45,7 @@ public class SpySimulatedConnectionTest
     private static List<String> channels()
     {
         return asList(
-            "aeron:udp?endpoint=localhost:54325",
+            "aeron:udp?endpoint=localhost:24325",
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost");
     }
 

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -41,7 +41,7 @@ public class SpySubscriptionTest
     private static List<String> channels()
     {
         return asList(
-            "aeron:udp?endpoint=localhost:54325",
+            "aeron:udp?endpoint=localhost:24325",
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost");
     }
 

File: aeron-system-tests/src/test/java/io/aeron/StopStartSecondSubscriberTest.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class StopStartSecondSubscriberTest
 {
-    public static final String CHANNEL1 = "aeron:udp?endpoint=localhost:54325";
+    public static final String CHANNEL1 = "aeron:udp?endpoint=localhost:24325";
     public static final String CHANNEL2 = "aeron:udp?endpoint=localhost:54326";
     private static final int STREAM_ID1 = 1001;
     private static final int STREAM_ID2 = 1002;

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -32,7 +32,7 @@ public class TermBufferLengthTest
     @ParameterizedTest
     @ValueSource(strings =
         {
-        "aeron:udp?endpoint=localhost:54325|" + CommonContext.TERM_LENGTH_PARAM_NAME + "=" + TEST_TERM_LENGTH,
+        "aeron:udp?endpoint=localhost:24325|" + CommonContext.TERM_LENGTH_PARAM_NAME + "=" + TEST_TERM_LENGTH,
         "aeron:ipc?" + CommonContext.TERM_LENGTH_PARAM_NAME + "=" + TEST_TERM_LENGTH
         }
     )

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -43,8 +43,8 @@ private static List<String> channels()
     {
         return asList(
             "aeron:ipc?term-length=64k",
-            "aeron:udp?endpoint=localhost:54325|term-length=64k",
-            "aeron-spy:aeron:udp?endpoint=localhost:54325|term-length=64k");
+            "aeron:udp?endpoint=localhost:24325|term-length=64k",
+            "aeron-spy:aeron:udp?endpoint=localhost:24325|term-length=64k");
     }
 
     private static final int STREAM_ID = 1001;

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -116,7 +116,7 @@ private void before(final ThreadingMode threadingMode, final ArchiveThreadingMod
 
         publishUri = new ChannelUriStringBuilder()
             .media("udp")
-            .endpoint("localhost:54325")
+            .endpoint("localhost:24325")
             .termLength(termLength)
             .mtu(mtu)
             .initialTermId(requestedInitialTermId)

File: aeron-agent/src/main/java/io/aeron/agent/EventLogReaderAgent.java
Patch:
@@ -31,6 +31,7 @@
 import static java.lang.System.*;
 import static java.nio.channels.FileChannel.open;
 import static java.nio.file.StandardOpenOption.*;
+import static java.time.ZoneId.systemDefault;
 import static org.agrona.BitUtil.CACHE_LINE_LENGTH;
 import static org.agrona.BufferUtil.allocateDirectAligned;
 
@@ -71,7 +72,7 @@ public void onStart()
         }
 
         builder.setLength(0);
-        dissectLogStartMessage(nanoTime(), currentTimeMillis(), builder);
+        dissectLogStartMessage(nanoTime(), currentTimeMillis(), systemDefault(), builder);
         builder.append(lineSeparator());
 
         if (null == fileChannel)

File: aeron-agent/src/main/java/io/aeron/agent/DriverEventDissector.java
Patch:
@@ -496,8 +496,9 @@ private static void dissectError(final StringBuilder builder)
             .append(ERROR_MSG.offendingCommandCorrelationId())
             .append(' ')
             .append(ERROR_MSG.errorCode())
-            .append(' ')
-            .append(ERROR_MSG.errorMessage());
+            .append(' ');
+
+        ERROR_MSG.appendMessage(builder);
     }
 
     private static void dissectCounter(final StringBuilder builder)

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -243,7 +243,7 @@ public static void saveExistingErrors(final File markFile, final AtomicBuffer er
         try
         {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            final int observations = CommonContext.printErrorLog(errorBuffer, new PrintStream(baos, false, "UTF-8"));
+            final int observations = CommonContext.printErrorLog(errorBuffer, new PrintStream(baos, false, "US-ASCII"));
             if (observations > 0)
             {
                 final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSSZ");

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterMarkFile.java
Patch:
@@ -246,7 +246,7 @@ public static void saveExistingErrors(final File markFile, final AtomicBuffer er
         try
         {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            final int observations = CommonContext.printErrorLog(errorBuffer, new PrintStream(baos, false, "UTF-8"));
+            final int observations = CommonContext.printErrorLog(errorBuffer, new PrintStream(baos, false, "US-ASCII"));
             if (observations > 0)
             {
                 final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSSZ");

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -407,7 +407,7 @@ private static void reportExistingErrors(final Context ctx, final MappedByteBuff
         try
         {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream();
-            final int observations = ctx.saveErrorLog(new PrintStream(baos, false, "UTF-8"), cncByteBuffer);
+            final int observations = ctx.saveErrorLog(new PrintStream(baos, false, "US-ASCII"), cncByteBuffer);
             if (observations > 0)
             {
                 final StringBuilder builder = new StringBuilder(ctx.aeronDirectoryName());

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventLoggerTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.agent;
 
+import org.agrona.BitUtil;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.ringbuffer.ManyToOneRingBuffer;
 import org.junit.jupiter.api.Test;
@@ -42,7 +43,8 @@
 
 class ClusterEventLoggerTest
 {
-    private final UnsafeBuffer logBuffer = new UnsafeBuffer(allocateDirect(MAX_EVENT_LENGTH + TRAILER_LENGTH));
+    private final UnsafeBuffer logBuffer = new UnsafeBuffer(
+        allocateDirect(BitUtil.align(MAX_EVENT_LENGTH, 64) + TRAILER_LENGTH));
     private final ClusterEventLogger logger = new ClusterEventLogger(new ManyToOneRingBuffer(logBuffer));
 
     @ParameterizedTest

File: aeron-agent/src/main/java/io/aeron/agent/CleanupInterceptor.java
Patch:
@@ -30,7 +30,7 @@ class CleanupInterceptor
     static class CleanupImage
     {
         @Advice.OnMethodEnter
-        static void cleanupImageInterceptor(final PublicationImage image)
+        static void cleanupImage(final PublicationImage image)
         {
             LOGGER.logImageRemoval(image.channel(), image.sessionId(), image.streamId(), image.correlationId());
         }

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -158,7 +158,7 @@ private static AgentBuilder addDriverConductorInstrumentation(final AgentBuilder
                 if (hasSubscriptionHook)
                 {
                     builder = builder.visit(to(CleanupInterceptor.CleanupSubscriptionLink.class)
-                        .on(named("cleanupSubscription")));
+                        .on(named("cleanupSubscriptionLink")));
                 }
 
                 return builder;

File: aeron-agent/src/test/java/io/aeron/agent/ClusterEventDissectorTest.java
Patch:
@@ -37,7 +37,7 @@ class ClusterEventDissectorTest
     @Test
     void dissectNewLeadershipTerm()
     {
-        internalEncodeLogHeader(buffer, 8, 9, () -> 33_000_000_000L);
+        internalEncodeLogHeader(buffer, 0, 8, 9, () -> 33_000_000_000L);
         buffer.putLong(LOG_HEADER_LENGTH, 1, LITTLE_ENDIAN);
         buffer.putLong(LOG_HEADER_LENGTH + SIZE_OF_LONG, 2, LITTLE_ENDIAN);
         buffer.putLong(LOG_HEADER_LENGTH + SIZE_OF_LONG * 2, 3, LITTLE_ENDIAN);
@@ -55,7 +55,7 @@ void dissectNewLeadershipTerm()
     @Test
     void dissectStateChange()
     {
-        internalEncodeLogHeader(buffer, 100, 200, () -> -1_000_000_000);
+        internalEncodeLogHeader(buffer, 0, 100, 200, () -> -1_000_000_000);
         buffer.putInt(LOG_HEADER_LENGTH, 42, LITTLE_ENDIAN);
         buffer.putStringAscii(LOG_HEADER_LENGTH + SIZE_OF_INT, "a -> b");
 

File: aeron-agent/src/test/java/io/aeron/agent/CommonEventDissectorTest.java
Patch:
@@ -51,7 +51,7 @@ void dissectLogStartMessage()
     @Test
     void dissectLogHeader()
     {
-        internalEncodeLogHeader(buffer, 100, 222, () -> 1234567890);
+        internalEncodeLogHeader(buffer, 0, 100, 222, () -> 1234567890);
 
         final int decodedLength = CommonEventDissector
             .dissectLogHeader("test ctx", ArchiveEventCode.CMD_OUT_RESPONSE, buffer, 0, builder);

File: aeron-agent/src/test/java/io/aeron/agent/CommonEventEncoderTest.java
Patch:
@@ -36,7 +36,7 @@ class CommonEventEncoderTest
     @Test
     void encodeLogHeader()
     {
-        final int encodedLength = internalEncodeLogHeader(buffer, 100, Integer.MAX_VALUE, () -> 555_000L);
+        final int encodedLength = internalEncodeLogHeader(buffer, 0, 100, Integer.MAX_VALUE, () -> 555_000L);
 
         assertEquals(LOG_HEADER_LENGTH, encodedLength);
         assertEquals(100, buffer.getInt(0, LITTLE_ENDIAN));

File: aeron-cluster/src/test/java/io/aeron/cluster/StartFromTruncatedRecordingLogTest.java
Patch:
@@ -348,7 +348,7 @@ private void startNode(final int index, final boolean cleanStart)
                 .threadingMode(ThreadingMode.SHARED)
                 .termBufferSparseFile(true)
                 .multicastFlowControlSupplier(new MinMulticastFlowControlSupplier())
-                .errorHandler(TestUtil.errorHandler(0))
+                .errorHandler(TestUtil.errorHandler(index))
                 .dirDeleteOnStart(true),
             new Archive.Context()
                 .maxCatalogEntries(MAX_CATALOG_ENTRIES)
@@ -365,7 +365,7 @@ private void startNode(final int index, final boolean cleanStart)
                 .deleteArchiveOnStart(cleanStart),
             new ConsensusModule.Context()
                 .epochClock(epochClock)
-                .errorHandler(TestUtil.errorHandler(0))
+                .errorHandler(TestUtil.errorHandler(index))
                 .clusterMemberId(index)
                 .clusterMembers(CLUSTER_MEMBERS)
                 .aeronDirectoryName(aeronDirName)
@@ -381,7 +381,7 @@ private void startNode(final int index, final boolean cleanStart)
                 .archiveContext(archiveCtx.clone())
                 .clusterDir(new File(baseDirName, "service"))
                 .clusteredService(echoServices[index])
-                .errorHandler(TestUtil.errorHandler(0)));
+                .errorHandler(TestUtil.errorHandler(index)));
     }
 
     private void stopNode(final int index)

File: aeron-driver/src/main/java/io/aeron/driver/ClientCommandAdapter.java
Patch:
@@ -197,10 +197,10 @@ else if (channel.startsWith(SPY_QUALIFIER))
                     conductor.onAddCounter(
                         counterMsgFlyweight.typeId(),
                         buffer,
-                        index + counterMsgFlyweight.keyBufferOffset(),
+                        counterMsgFlyweight.keyBufferOffset(),
                         counterMsgFlyweight.keyBufferLength(),
                         buffer,
-                        index + counterMsgFlyweight.labelBufferOffset(),
+                        counterMsgFlyweight.labelBufferOffset(),
                         counterMsgFlyweight.labelBufferLength(),
                         correlationId,
                         counterMsgFlyweight.clientId());

File: aeron-archive/src/main/java/io/aeron/archive/RecordingWriter.java
Patch:
@@ -113,9 +113,10 @@ public void onBlock(
                 byteBuffer.limit(dataLength).position(0);
             }
 
+            int fileOffset = segmentOffset;
             do
             {
-                recordingFileChannel.write(byteBuffer);
+                fileOffset += recordingFileChannel.write(byteBuffer, fileOffset);
             }
             while (byteBuffer.remaining() > 0);
 

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -142,7 +142,6 @@ enum State
         this.startPosition = recordingSummary.startPosition;
         this.stopPosition = null == limitPosition ? recordingSummary.stopPosition : limitPosition.get();
 
-
         final long fromPosition = position == NULL_POSITION ? startPosition : position;
         final long maxLength = null == limitPosition ? stopPosition - fromPosition : Long.MAX_VALUE - fromPosition;
         final long replayLength = length == AeronArchive.NULL_LENGTH ? maxLength : Math.min(length, maxLength);

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterMarkFile.java
Patch:
@@ -45,8 +45,8 @@
 public class ClusterMarkFile implements AutoCloseable
 {
     public static final int MAJOR_VERSION = 0;
-    public static final int MINOR_VERSION = 0;
-    public static final int PATCH_VERSION = 1;
+    public static final int MINOR_VERSION = 1;
+    public static final int PATCH_VERSION = 0;
     public static final int SEMANTIC_VERSION = SemanticVersion.compose(MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION);
 
     public static final int HEADER_LENGTH = 8 * 1024;

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -32,7 +32,7 @@
 import static java.time.Duration.ofSeconds;
 import static org.junit.jupiter.api.Assertions.*;
 
-//@Disabled
+@Disabled
 public class ClusterTest
 {
     private static final String MSG = "Hello World!";

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -40,7 +40,7 @@
 public class DriverLoggingAgentTest
 {
     private static final String NETWORK_CHANNEL = "aeron:udp?endpoint=localhost:54325";
-    private static final int STREAM_ID = 777;
+    private static final int STREAM_ID = 1777;
 
     private static final IntHashSet MSG_ID_SET = new IntHashSet();
     private static final CountDownLatch LATCH = new CountDownLatch(1);

File: aeron-archive/src/test/java/io/aeron/archive/ReplaySessionTest.java
Patch:
@@ -71,7 +71,7 @@ public class ReplaySessionTest
     private static final int MTU_LENGTH = 4096;
     private static final int FRAME_LENGTH = 1024;
     private static final int SESSION_ID = 1;
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final FileChannel ARCHIVE_DIR_CHANNEL = null;
 
     private final Image mockImage = mock(Image.class);

File: aeron-client/src/test/java/io/aeron/ClientConductorTest.java
Patch:
@@ -54,8 +54,8 @@ public class ClientConductorTest
     private static final int SESSION_ID_2 = 15;
 
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:40124";
-    private static final int STREAM_ID_1 = 2;
-    private static final int STREAM_ID_2 = 4;
+    private static final int STREAM_ID_1 = 1002;
+    private static final int STREAM_ID_2 = 1004;
     private static final int SEND_BUFFER_CAPACITY = 1024;
     private static final int COUNTER_BUFFER_LENGTH = 1024;
 

File: aeron-client/src/test/java/io/aeron/DriverProxyTest.java
Patch:
@@ -33,7 +33,7 @@ public class DriverProxyTest
 {
     public static final String CHANNEL = "aeron:udp?interface=localhost:40123|endpoint=localhost:40124";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final long CORRELATION_ID = 3;
     private static final long CLIENT_ID = 7;
     private final RingBuffer conductorBuffer = new ManyToOneRingBuffer(

File: aeron-client/src/test/java/io/aeron/PublicationTest.java
Patch:
@@ -33,7 +33,7 @@
 public class PublicationTest
 {
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:40124";
-    private static final int STREAM_ID_1 = 2;
+    private static final int STREAM_ID_1 = 1002;
     private static final int SESSION_ID_1 = 13;
     private static final int TERM_ID_1 = 1;
     private static final int CORRELATION_ID = 2000;

File: aeron-client/src/test/java/io/aeron/SubscriptionTest.java
Patch:
@@ -32,7 +32,7 @@
 public class SubscriptionTest
 {
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:40124";
-    private static final int STREAM_ID_1 = 2;
+    private static final int STREAM_ID_1 = 1002;
     private static final int INITIAL_TERM_ID = 7;
     private static final long SUBSCRIPTION_CORRELATION_ID = 100;
     private static final int READ_BUFFER_CAPACITY = 1024;

File: aeron-client/src/test/java/io/aeron/logbuffer/TermGapFillerTest.java
Patch:
@@ -33,7 +33,7 @@ public class TermGapFillerTest
     private static final int INITIAL_TERM_ID = 11;
     private static final int TERM_ID = 22;
     private static final int SESSION_ID = 333;
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
 
     private final UnsafeBuffer metaDataBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(LOG_META_DATA_LENGTH));
     private final UnsafeBuffer termBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(TERM_MIN_LENGTH));

File: aeron-driver/src/test/java/io/aeron/driver/DataPacketDispatcherTest.java
Patch:
@@ -32,7 +32,7 @@ public class DataPacketDispatcherTest
 {
     private static final long CORRELATION_ID_1 = 101;
     private static final long CORRELATION_ID_2 = 102;
-    private static final int STREAM_ID = 10;
+    private static final int STREAM_ID = 1010;
     private static final int INITIAL_TERM_ID = 3;
     private static final int ACTIVE_TERM_ID = 3;
     private static final int SESSION_ID = 1;

File: aeron-driver/src/test/java/io/aeron/driver/IpcPublicationTest.java
Patch:
@@ -41,7 +41,7 @@
 public class IpcPublicationTest
 {
     private static final long CLIENT_ID = 7L;
-    private static final int STREAM_ID = 10;
+    private static final int STREAM_ID = 1010;
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int BUFFER_LENGTH = 16 * 1024;
 

File: aeron-driver/src/test/java/io/aeron/driver/ReceiverTest.java
Patch:
@@ -61,7 +61,7 @@ public class ReceiverTest
     private static final long UNTETHERED_WINDOW_LIMIT_TIMEOUT_NS = Configuration.untetheredWindowLimitTimeoutNs();
     private static final long UNTETHERED_RESTING_TIMEOUT_NS = Configuration.untetheredRestingTimeoutNs();
     private static final long CORRELATION_ID = 20;
-    private static final int STREAM_ID = 10;
+    private static final int STREAM_ID = 1010;
     private static final int INITIAL_TERM_ID = 3;
     private static final int ACTIVE_TERM_ID = 3;
     private static final int SESSION_ID = 1;

File: aeron-driver/src/test/java/io/aeron/driver/SenderTest.java
Patch:
@@ -58,7 +58,7 @@ public class SenderTest
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int MAX_FRAME_LENGTH = 1024;
     private static final int SESSION_ID = 1;
-    private static final int STREAM_ID = 2;
+    private static final int STREAM_ID = 1002;
     private static final int INITIAL_TERM_ID = 3;
     private static final byte[] PAYLOAD = "Payload is here!".getBytes();
 

File: aeron-driver/src/test/java/io/aeron/driver/UntetheredSubscriptionTest.java
Patch:
@@ -33,7 +33,7 @@ public class UntetheredSubscriptionTest
     private static final long REGISTRATION_ID = 1;
     private static final int TAG_ID = 0;
     private static final int SESSION_ID = 777;
-    private static final int STREAM_ID = 3;
+    private static final int STREAM_ID = 1003;
     private static final String CHANNEL = CommonContext.IPC_CHANNEL;
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int TERM_WINDOW_LENGTH = TERM_BUFFER_LENGTH / 2;

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -45,7 +45,7 @@ private static List<String> channels()
         return Arrays.asList("aeron:udp?endpoint=localhost:54325", CommonContext.IPC_CHANNEL);
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 200;
 

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -51,7 +51,7 @@ public class ChannelEndpointStatusTest
     private static final String URI_WITH_INTERFACE_PORT =
         "aeron:udp?endpoint=localhost:54326|interface=localhost:34567";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.DEDICATED;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;

File: aeron-system-tests/src/test/java/io/aeron/ControlledMessageTest.java
Patch:
@@ -34,7 +34,7 @@
 public class ControlledMessageTest
 {
     private static final String CHANNEL = CommonContext.IPC_CHANNEL;
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int PAYLOAD_LENGTH = 10;
 

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -31,7 +31,7 @@
 
 public class CounterTest
 {
-    private static final int COUNTER_TYPE_ID = 101;
+    private static final int COUNTER_TYPE_ID = 1101;
     private static final String COUNTER_LABEL = "counter label";
 
     private final UnsafeBuffer labelBuffer = new UnsafeBuffer(new byte[COUNTER_LABEL.length()]);

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -44,7 +44,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 200;
 

File: aeron-system-tests/src/test/java/io/aeron/FlowControlStrategiesTest.java
Patch:
@@ -45,7 +45,7 @@ public class FlowControlStrategiesTest
 {
     private static final String MULTICAST_URI = "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int NUM_MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -49,7 +49,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final FragmentHandler mockFragmentHandler = mock(FragmentHandler.class);

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -45,7 +45,7 @@ public class GapFillLossTest
     private static final String UNRELIABLE_CHANNEL =
         CHANNEL + "|" + CommonContext.RELIABLE_STREAM_PARAM_NAME + "=false";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MSG_LENGTH = 1024;
     private static final int NUM_MESSAGES = 10_000;

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -41,7 +41,7 @@ private static List<String> channels()
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost");
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Throwable::printStackTrace)

File: aeron-system-tests/src/test/java/io/aeron/MaxPositionPublicationTest.java
Patch:
@@ -33,7 +33,7 @@
 
 public class MaxPositionPublicationTest
 {
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int MESSAGE_LENGTH = 32;
 
     private final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocate(MESSAGE_LENGTH));

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -37,7 +37,7 @@
 public class MemoryOrderingTest
 {
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:54325";
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 2000;
     private static final int TERM_BUFFER_LENGTH = 1024 * 64;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -53,7 +53,7 @@ public class MultiDestinationCastTest
     private static final String SUB2_MDC_MANUAL_URI = "aeron:udp?endpoint=localhost:54327|group=true";
     private static final String SUB3_MDC_MANUAL_URI = CommonContext.SPY_PREFIX + PUB_MDC_MANUAL_URI;
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationSubscriptionTest.java
Patch:
@@ -51,7 +51,7 @@ public class MultiDestinationSubscriptionTest
     private static final String SUB_URI = "aeron:udp?control-mode=manual";
     private static final String SUB_MDC_DESTINATION_URI = "aeron:udp?endpoint=localhost:54326|control=localhost:54325";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int NUM_MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/MultiDriverTest.java
Patch:
@@ -40,7 +40,7 @@ public class MultiDriverTest
 {
     private static final String MULTICAST_URI = "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.SHARED;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;

File: aeron-system-tests/src/test/java/io/aeron/MultiSubscriberTest.java
Patch:
@@ -35,7 +35,7 @@ public class MultiSubscriberTest
 {
     private static final String CHANNEL_1 = "aeron:udp?endpoint=localhost:54325|fruit=banana";
     private static final String CHANNEL_2 = "aeron:udp?endpoint=localhost:54325|fruit=apple";
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final MediaDriver driver = MediaDriver.launch(new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -45,8 +45,8 @@ public class PongTest
     private static final String PING_URI = "aeron:udp?endpoint=localhost:54325";
     private static final String PONG_URI = "aeron:udp?endpoint=localhost:54326";
 
-    private static final int PING_STREAM_ID = 1;
-    private static final int PONG_STREAM_ID = 2;
+    private static final int PING_STREAM_ID = 1001;
+    private static final int PONG_STREAM_ID = 1002;
 
     private Aeron pingClient;
     private Aeron pongClient;

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -70,7 +70,7 @@ private static List<String> channels()
     @RegisterExtension
     public MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.SHARED;
 
     private final MediaDriver.Context context = new MediaDriver.Context();

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -46,7 +46,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -40,7 +40,7 @@
 
 public class PublishFromArbitraryPositionTest
 {
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MAX_MESSAGE_LENGTH = 1024 - DataHeaderFlyweight.HEADER_LENGTH;
 

File: aeron-system-tests/src/test/java/io/aeron/ReentrantClientTest.java
Patch:
@@ -57,8 +57,8 @@ public void shouldThrowWhenReentering()
             doAnswer((invocation) -> aeron.addSubscription(channel, 3))
                 .when(mockHandler).onAvailableImage(any(Image.class));
 
-            final Subscription sub = aeron.addSubscription(channel, 1, mockHandler, null);
-            final Publication pub = aeron.addPublication(channel, 1);
+            final Subscription sub = aeron.addSubscription(channel, 1001, mockHandler, null);
+            final Publication pub = aeron.addPublication(channel, 1001);
 
             verify(mockHandler, timeout(5000L)).onAvailableImage(any(Image.class));
 

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificPublicationTest.java
Patch:
@@ -39,7 +39,7 @@ public class SessionSpecificPublicationTest
     private static final String ENDPOINT = "localhost:54325";
     private static final int SESSION_ID_1 = 1077;
     private static final int SESSION_ID_2 = 1078;
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int MTU_1 = 4096;
     private static final int MTU_2 = 8192;
     private static final int TERM_LENGTH_1 = 64 * 1024;

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificSubscriptionTest.java
Patch:
@@ -37,7 +37,7 @@ public class SessionSpecificSubscriptionTest
     private static final String ENDPOINT = "localhost:54325";
     private static final int SESSION_ID_1 = 1077;
     private static final int SESSION_ID_2 = 1078;
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 1024 - DataHeaderFlyweight.HEADER_LENGTH;
     private static final int EXPECTED_NUMBER_OF_MESSAGES = 10;

File: aeron-system-tests/src/test/java/io/aeron/SpecifiedPositionPublicationTest.java
Patch:
@@ -46,7 +46,7 @@ public void shouldRejectSpecifiedPositionForConcurrentPublications()
                 .initialPosition(1024, -873648623, 65536)
                 .build();
 
-            assertThrows(RegistrationException.class, () -> aeron.addPublication(channel, 101));
+            assertThrows(RegistrationException.class, () -> aeron.addPublication(channel, 1001));
         }
     }
 }

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -49,7 +49,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int NUM_MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -45,7 +45,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int PAYLOAD_LENGTH = 10;
 

File: aeron-system-tests/src/test/java/io/aeron/StopStartSecondSubscriberTest.java
Patch:
@@ -38,8 +38,8 @@ public class StopStartSecondSubscriberTest
 {
     public static final String CHANNEL1 = "aeron:udp?endpoint=localhost:54325";
     public static final String CHANNEL2 = "aeron:udp?endpoint=localhost:54326";
-    private static final int STREAM_ID1 = 1;
-    private static final int STREAM_ID2 = 2;
+    private static final int STREAM_ID1 = 1001;
+    private static final int STREAM_ID2 = 1002;
 
     private MediaDriver driverOne;
     private MediaDriver driverTwo;

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -27,7 +27,7 @@ public class TermBufferLengthTest
 {
     public static final int TEST_TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH * 2;
 
-    public static final int STREAM_ID = 1;
+    public static final int STREAM_ID = 1001;
 
     @ParameterizedTest
     @ValueSource(strings =

File: aeron-system-tests/src/test/java/io/aeron/TwoBufferOfferMessageTest.java
Patch:
@@ -33,7 +33,7 @@ public class TwoBufferOfferMessageTest
 {
     public static final String CHANNEL = "aeron:ipc?term-length=64k";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -47,7 +47,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 512 - DataHeaderFlyweight.HEADER_LENGTH;
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -42,7 +42,7 @@
 
 public class ArchiveAuthenticationTest
 {
-    private static final int RECORDED_STREAM_ID = 33;
+    private static final int RECORDED_STREAM_ID = 1033;
     private static final String RECORDED_CHANNEL = new ChannelUriStringBuilder()
         .media("udp")
         .endpoint("localhost:3333")

File: aeron-system-tests/src/test/java/io/aeron/archive/ManageRecordingHistoryTest.java
Patch:
@@ -43,7 +43,7 @@ public class ManageRecordingHistoryTest
 {
     private static final int TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int SEGMENT_LENGTH = TERM_LENGTH * 2;
-    private static final int STREAM_ID = 33;
+    private static final int STREAM_ID = 1033;
     private static final int MTU_LENGTH = 1024;
 
     private final ChannelUriStringBuilder uriBuilder = new ChannelUriStringBuilder()

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -46,7 +46,7 @@ public class ReplayMergeTest
         TERM_LENGTH / (MESSAGE_PREFIX.length() + DataHeaderFlyweight.HEADER_LENGTH);
 
     private static final int PUBLICATION_TAG = 2;
-    private static final int STREAM_ID = 33;
+    private static final int STREAM_ID = 1033;
 
     private static final String CONTROL_ENDPOINT = "localhost:43265";
     private static final String RECORDING_ENDPOINT = "localhost:43266";

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -52,7 +52,7 @@ public class ReplicateRecordingTest
     private static final String SRC_REPLICATION_CHANNEL = "aeron:udp?endpoint=localhost:8040";
     private static final String DST_REPLICATION_CHANNEL = "aeron:udp?endpoint=localhost:8041";
 
-    private static final int LIVE_STREAM_ID = 33;
+    private static final int LIVE_STREAM_ID = 1033;
     private static final String LIVE_CHANNEL = new ChannelUriStringBuilder()
         .media("udp")
         .controlEndpoint("localhost:8100")

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -40,7 +40,7 @@
 public class DriverLoggingAgentTest
 {
     private static final String NETWORK_CHANNEL = "aeron:udp?endpoint=localhost:54325";
-    private static final int STREAM_ID = 777;
+    private static final int STREAM_ID = 1777;
 
     private static final IntHashSet MSG_ID_SET = new IntHashSet();
     private static final CountDownLatch LATCH = new CountDownLatch(1);

File: aeron-archive/src/test/java/io/aeron/archive/ReplaySessionTest.java
Patch:
@@ -71,7 +71,7 @@ public class ReplaySessionTest
     private static final int MTU_LENGTH = 4096;
     private static final int FRAME_LENGTH = 1024;
     private static final int SESSION_ID = 1;
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final FileChannel ARCHIVE_DIR_CHANNEL = null;
 
     private final Image mockImage = mock(Image.class);

File: aeron-client/src/test/java/io/aeron/ClientConductorTest.java
Patch:
@@ -54,8 +54,8 @@ public class ClientConductorTest
     private static final int SESSION_ID_2 = 15;
 
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:40124";
-    private static final int STREAM_ID_1 = 2;
-    private static final int STREAM_ID_2 = 4;
+    private static final int STREAM_ID_1 = 1002;
+    private static final int STREAM_ID_2 = 1004;
     private static final int SEND_BUFFER_CAPACITY = 1024;
     private static final int COUNTER_BUFFER_LENGTH = 1024;
 

File: aeron-client/src/test/java/io/aeron/DriverProxyTest.java
Patch:
@@ -33,7 +33,7 @@ public class DriverProxyTest
 {
     public static final String CHANNEL = "aeron:udp?interface=localhost:40123|endpoint=localhost:40124";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final long CORRELATION_ID = 3;
     private static final long CLIENT_ID = 7;
     private final RingBuffer conductorBuffer = new ManyToOneRingBuffer(

File: aeron-client/src/test/java/io/aeron/PublicationTest.java
Patch:
@@ -33,7 +33,7 @@
 public class PublicationTest
 {
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:40124";
-    private static final int STREAM_ID_1 = 2;
+    private static final int STREAM_ID_1 = 1002;
     private static final int SESSION_ID_1 = 13;
     private static final int TERM_ID_1 = 1;
     private static final int CORRELATION_ID = 2000;

File: aeron-client/src/test/java/io/aeron/SubscriptionTest.java
Patch:
@@ -32,7 +32,7 @@
 public class SubscriptionTest
 {
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:40124";
-    private static final int STREAM_ID_1 = 2;
+    private static final int STREAM_ID_1 = 1002;
     private static final int INITIAL_TERM_ID = 7;
     private static final long SUBSCRIPTION_CORRELATION_ID = 100;
     private static final int READ_BUFFER_CAPACITY = 1024;

File: aeron-client/src/test/java/io/aeron/logbuffer/TermGapFillerTest.java
Patch:
@@ -33,7 +33,7 @@ public class TermGapFillerTest
     private static final int INITIAL_TERM_ID = 11;
     private static final int TERM_ID = 22;
     private static final int SESSION_ID = 333;
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
 
     private final UnsafeBuffer metaDataBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(LOG_META_DATA_LENGTH));
     private final UnsafeBuffer termBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(TERM_MIN_LENGTH));

File: aeron-driver/src/test/java/io/aeron/driver/DataPacketDispatcherTest.java
Patch:
@@ -32,7 +32,7 @@ public class DataPacketDispatcherTest
 {
     private static final long CORRELATION_ID_1 = 101;
     private static final long CORRELATION_ID_2 = 102;
-    private static final int STREAM_ID = 10;
+    private static final int STREAM_ID = 1010;
     private static final int INITIAL_TERM_ID = 3;
     private static final int ACTIVE_TERM_ID = 3;
     private static final int SESSION_ID = 1;

File: aeron-driver/src/test/java/io/aeron/driver/IpcPublicationTest.java
Patch:
@@ -41,7 +41,7 @@
 public class IpcPublicationTest
 {
     private static final long CLIENT_ID = 7L;
-    private static final int STREAM_ID = 10;
+    private static final int STREAM_ID = 1010;
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int BUFFER_LENGTH = 16 * 1024;
 

File: aeron-driver/src/test/java/io/aeron/driver/ReceiverTest.java
Patch:
@@ -61,7 +61,7 @@ public class ReceiverTest
     private static final long UNTETHERED_WINDOW_LIMIT_TIMEOUT_NS = Configuration.untetheredWindowLimitTimeoutNs();
     private static final long UNTETHERED_RESTING_TIMEOUT_NS = Configuration.untetheredRestingTimeoutNs();
     private static final long CORRELATION_ID = 20;
-    private static final int STREAM_ID = 10;
+    private static final int STREAM_ID = 1010;
     private static final int INITIAL_TERM_ID = 3;
     private static final int ACTIVE_TERM_ID = 3;
     private static final int SESSION_ID = 1;

File: aeron-driver/src/test/java/io/aeron/driver/SenderTest.java
Patch:
@@ -58,7 +58,7 @@ public class SenderTest
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int MAX_FRAME_LENGTH = 1024;
     private static final int SESSION_ID = 1;
-    private static final int STREAM_ID = 2;
+    private static final int STREAM_ID = 1002;
     private static final int INITIAL_TERM_ID = 3;
     private static final byte[] PAYLOAD = "Payload is here!".getBytes();
 

File: aeron-driver/src/test/java/io/aeron/driver/UntetheredSubscriptionTest.java
Patch:
@@ -33,7 +33,7 @@ public class UntetheredSubscriptionTest
     private static final long REGISTRATION_ID = 1;
     private static final int TAG_ID = 0;
     private static final int SESSION_ID = 777;
-    private static final int STREAM_ID = 3;
+    private static final int STREAM_ID = 1003;
     private static final String CHANNEL = CommonContext.IPC_CHANNEL;
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int TERM_WINDOW_LENGTH = TERM_BUFFER_LENGTH / 2;

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -45,7 +45,7 @@ private static List<String> channels()
         return Arrays.asList("aeron:udp?endpoint=localhost:54325", CommonContext.IPC_CHANNEL);
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 200;
 

File: aeron-system-tests/src/test/java/io/aeron/ChannelEndpointStatusTest.java
Patch:
@@ -51,7 +51,7 @@ public class ChannelEndpointStatusTest
     private static final String URI_WITH_INTERFACE_PORT =
         "aeron:udp?endpoint=localhost:54326|interface=localhost:34567";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.DEDICATED;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;

File: aeron-system-tests/src/test/java/io/aeron/ControlledMessageTest.java
Patch:
@@ -34,7 +34,7 @@
 public class ControlledMessageTest
 {
     private static final String CHANNEL = CommonContext.IPC_CHANNEL;
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int PAYLOAD_LENGTH = 10;
 

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -31,7 +31,7 @@
 
 public class CounterTest
 {
-    private static final int COUNTER_TYPE_ID = 101;
+    private static final int COUNTER_TYPE_ID = 1101;
     private static final String COUNTER_LABEL = "counter label";
 
     private final UnsafeBuffer labelBuffer = new UnsafeBuffer(new byte[COUNTER_LABEL.length()]);

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -44,7 +44,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 200;
 

File: aeron-system-tests/src/test/java/io/aeron/FlowControlStrategiesTest.java
Patch:
@@ -45,7 +45,7 @@ public class FlowControlStrategiesTest
 {
     private static final String MULTICAST_URI = "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int NUM_MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -49,7 +49,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final FragmentHandler mockFragmentHandler = mock(FragmentHandler.class);

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -45,7 +45,7 @@ public class GapFillLossTest
     private static final String UNRELIABLE_CHANNEL =
         CHANNEL + "|" + CommonContext.RELIABLE_STREAM_PARAM_NAME + "=false";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MSG_LENGTH = 1024;
     private static final int NUM_MESSAGES = 10_000;

File: aeron-system-tests/src/test/java/io/aeron/ImageAvailabilityTest.java
Patch:
@@ -41,7 +41,7 @@ private static List<String> channels()
             "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost");
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()
         .errorHandler(Throwable::printStackTrace)

File: aeron-system-tests/src/test/java/io/aeron/MaxPositionPublicationTest.java
Patch:
@@ -33,7 +33,7 @@
 
 public class MaxPositionPublicationTest
 {
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int MESSAGE_LENGTH = 32;
 
     private final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocate(MESSAGE_LENGTH));

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -37,7 +37,7 @@
 public class MemoryOrderingTest
 {
     private static final String CHANNEL = "aeron:udp?endpoint=localhost:54325";
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 2000;
     private static final int TERM_BUFFER_LENGTH = 1024 * 64;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -53,7 +53,7 @@ public class MultiDestinationCastTest
     private static final String SUB2_MDC_MANUAL_URI = "aeron:udp?endpoint=localhost:54327|group=true";
     private static final String SUB3_MDC_MANUAL_URI = CommonContext.SPY_PREFIX + PUB_MDC_MANUAL_URI;
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationSubscriptionTest.java
Patch:
@@ -51,7 +51,7 @@ public class MultiDestinationSubscriptionTest
     private static final String SUB_URI = "aeron:udp?control-mode=manual";
     private static final String SUB_MDC_DESTINATION_URI = "aeron:udp?endpoint=localhost:54326|control=localhost:54325";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int NUM_MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/MultiDriverTest.java
Patch:
@@ -40,7 +40,7 @@ public class MultiDriverTest
 {
     private static final String MULTICAST_URI = "aeron:udp?endpoint=224.20.30.39:54326|interface=localhost";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.SHARED;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;

File: aeron-system-tests/src/test/java/io/aeron/MultiSubscriberTest.java
Patch:
@@ -35,7 +35,7 @@ public class MultiSubscriberTest
 {
     private static final String CHANNEL_1 = "aeron:udp?endpoint=localhost:54325|fruit=banana";
     private static final String CHANNEL_2 = "aeron:udp?endpoint=localhost:54325|fruit=apple";
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final MediaDriver driver = MediaDriver.launch(new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/PongTest.java
Patch:
@@ -45,8 +45,8 @@ public class PongTest
     private static final String PING_URI = "aeron:udp?endpoint=localhost:54325";
     private static final String PONG_URI = "aeron:udp?endpoint=localhost:54326";
 
-    private static final int PING_STREAM_ID = 1;
-    private static final int PONG_STREAM_ID = 2;
+    private static final int PING_STREAM_ID = 1001;
+    private static final int PONG_STREAM_ID = 1002;
 
     private Aeron pingClient;
     private Aeron pongClient;

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -70,7 +70,7 @@ private static List<String> channels()
     @RegisterExtension
     public MediaDriverTestWatcher watcher = new MediaDriverTestWatcher();
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final ThreadingMode THREADING_MODE = ThreadingMode.SHARED;
 
     private final MediaDriver.Context context = new MediaDriver.Context();

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -46,7 +46,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -40,7 +40,7 @@
 
 public class PublishFromArbitraryPositionTest
 {
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MAX_MESSAGE_LENGTH = 1024 - DataHeaderFlyweight.HEADER_LENGTH;
 

File: aeron-system-tests/src/test/java/io/aeron/ReentrantClientTest.java
Patch:
@@ -57,8 +57,8 @@ public void shouldThrowWhenReentering()
             doAnswer((invocation) -> aeron.addSubscription(channel, 3))
                 .when(mockHandler).onAvailableImage(any(Image.class));
 
-            final Subscription sub = aeron.addSubscription(channel, 1, mockHandler, null);
-            final Publication pub = aeron.addPublication(channel, 1);
+            final Subscription sub = aeron.addSubscription(channel, 1001, mockHandler, null);
+            final Publication pub = aeron.addPublication(channel, 1001);
 
             verify(mockHandler, timeout(5000L)).onAvailableImage(any(Image.class));
 

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificPublicationTest.java
Patch:
@@ -39,7 +39,7 @@ public class SessionSpecificPublicationTest
     private static final String ENDPOINT = "localhost:54325";
     private static final int SESSION_ID_1 = 1077;
     private static final int SESSION_ID_2 = 1078;
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int MTU_1 = 4096;
     private static final int MTU_2 = 8192;
     private static final int TERM_LENGTH_1 = 64 * 1024;

File: aeron-system-tests/src/test/java/io/aeron/SessionSpecificSubscriptionTest.java
Patch:
@@ -37,7 +37,7 @@ public class SessionSpecificSubscriptionTest
     private static final String ENDPOINT = "localhost:54325";
     private static final int SESSION_ID_1 = 1077;
     private static final int SESSION_ID_2 = 1078;
-    private static final int STREAM_ID = 7;
+    private static final int STREAM_ID = 1007;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 1024 - DataHeaderFlyweight.HEADER_LENGTH;
     private static final int EXPECTED_NUMBER_OF_MESSAGES = 10;

File: aeron-system-tests/src/test/java/io/aeron/SpecifiedPositionPublicationTest.java
Patch:
@@ -46,7 +46,7 @@ public void shouldRejectSpecifiedPositionForConcurrentPublications()
                 .initialPosition(1024, -873648623, 65536)
                 .build();
 
-            assertThrows(RegistrationException.class, () -> aeron.addPublication(channel, 101));
+            assertThrows(RegistrationException.class, () -> aeron.addPublication(channel, 1001));
         }
     }
 }

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -49,7 +49,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
 
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int NUM_MESSAGES_PER_TERM = 64;

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -45,7 +45,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int PAYLOAD_LENGTH = 10;
 

File: aeron-system-tests/src/test/java/io/aeron/StopStartSecondSubscriberTest.java
Patch:
@@ -38,8 +38,8 @@ public class StopStartSecondSubscriberTest
 {
     public static final String CHANNEL1 = "aeron:udp?endpoint=localhost:54325";
     public static final String CHANNEL2 = "aeron:udp?endpoint=localhost:54326";
-    private static final int STREAM_ID1 = 1;
-    private static final int STREAM_ID2 = 2;
+    private static final int STREAM_ID1 = 1001;
+    private static final int STREAM_ID2 = 1002;
 
     private MediaDriver driverOne;
     private MediaDriver driverTwo;

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -27,7 +27,7 @@ public class TermBufferLengthTest
 {
     public static final int TEST_TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH * 2;
 
-    public static final int STREAM_ID = 1;
+    public static final int STREAM_ID = 1001;
 
     @ParameterizedTest
     @ValueSource(strings =

File: aeron-system-tests/src/test/java/io/aeron/TwoBufferOfferMessageTest.java
Patch:
@@ -33,7 +33,7 @@ public class TwoBufferOfferMessageTest
 {
     public static final String CHANNEL = "aeron:ipc?term-length=64k";
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
 
     private final TestMediaDriver driver = TestMediaDriver.launch(new MediaDriver.Context()

File: aeron-system-tests/src/test/java/io/aeron/UntetheredSubscriptionTest.java
Patch:
@@ -47,7 +47,7 @@ private static List<String> channels()
         );
     }
 
-    private static final int STREAM_ID = 1;
+    private static final int STREAM_ID = 1001;
     private static final int FRAGMENT_COUNT_LIMIT = 10;
     private static final int MESSAGE_LENGTH = 512 - DataHeaderFlyweight.HEADER_LENGTH;
 

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveAuthenticationTest.java
Patch:
@@ -42,7 +42,7 @@
 
 public class ArchiveAuthenticationTest
 {
-    private static final int RECORDED_STREAM_ID = 33;
+    private static final int RECORDED_STREAM_ID = 1033;
     private static final String RECORDED_CHANNEL = new ChannelUriStringBuilder()
         .media("udp")
         .endpoint("localhost:3333")

File: aeron-system-tests/src/test/java/io/aeron/archive/ManageRecordingHistoryTest.java
Patch:
@@ -43,7 +43,7 @@ public class ManageRecordingHistoryTest
 {
     private static final int TERM_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int SEGMENT_LENGTH = TERM_LENGTH * 2;
-    private static final int STREAM_ID = 33;
+    private static final int STREAM_ID = 1033;
     private static final int MTU_LENGTH = 1024;
 
     private final ChannelUriStringBuilder uriBuilder = new ChannelUriStringBuilder()

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplayMergeTest.java
Patch:
@@ -46,7 +46,7 @@ public class ReplayMergeTest
         TERM_LENGTH / (MESSAGE_PREFIX.length() + DataHeaderFlyweight.HEADER_LENGTH);
 
     private static final int PUBLICATION_TAG = 2;
-    private static final int STREAM_ID = 33;
+    private static final int STREAM_ID = 1033;
 
     private static final String CONTROL_ENDPOINT = "localhost:43265";
     private static final String RECORDING_ENDPOINT = "localhost:43266";

File: aeron-system-tests/src/test/java/io/aeron/archive/ReplicateRecordingTest.java
Patch:
@@ -52,7 +52,7 @@ public class ReplicateRecordingTest
     private static final String SRC_REPLICATION_CHANNEL = "aeron:udp?endpoint=localhost:8040";
     private static final String DST_REPLICATION_CHANNEL = "aeron:udp?endpoint=localhost:8041";
 
-    private static final int LIVE_STREAM_ID = 33;
+    private static final int LIVE_STREAM_ID = 1033;
     private static final String LIVE_CHANNEL = new ChannelUriStringBuilder()
         .media("udp")
         .controlEndpoint("localhost:8100")

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -102,7 +102,7 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntact() throws Excepti
                     {
                         nowNs = System.nanoTime();
                     }
-                    while ((timeoutNs - nowNs) < 0);
+                    while ((timeoutNs - nowNs) > 0);
                 }
             }
 

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -102,7 +102,7 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntact() throws Excepti
                     {
                         nowNs = System.nanoTime();
                     }
-                    while ((timeoutNs - nowNs) < 0);
+                    while ((timeoutNs - nowNs) > 0);
                 }
             }
 

File: aeron-system-tests/src/test/java/io/aeron/test/CTestMediaDriver.java
Patch:
@@ -241,7 +241,7 @@ public static void enableLossGenerationOnReceive(
             "|seed=" + seed +
             "|recv-msg-mask=0x" + Integer.toHexString(receiveMessageTypeMask);
 
-        lossTransportEnv.put("AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_INTERCEPTORS", interceptor);
+        lossTransportEnv.put("AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS", interceptor);
         lossTransportEnv.put("AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_LOSS_ARGS", lossArgs);
 
         // This is a bit of an ugly hack to decorate the MediaDriver.Context with additional information.

File: aeron-archive/src/main/java/io/aeron/archive/RecordingWriter.java
Patch:
@@ -107,7 +107,7 @@ public void onBlock(
                 byteBuffer.clear();
                 recordingBuffer.putBytes(0, termBuffer, termOffset, length);
                 byteBuffer.limit(length).position(0);
-                computeCRC(recordingBuffer, 0, length);
+                computeCrc(recordingBuffer, 0, length);
             }
             else
             {
@@ -147,7 +147,7 @@ else if (isPaddingFrame)
         }
     }
 
-    private void computeCRC(final UnsafeBuffer termBuffer, final int termOffset, final int length)
+    private void computeCrc(final UnsafeBuffer termBuffer, final int termOffset, final int length)
     {
         final int endOffset = termOffset + length;
         final long address = termBuffer.addressOffset();

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -536,7 +536,7 @@ static boolean isInvalidHeader(
     {
         return
             DataHeaderFlyweight.termOffset(buffer, 0) != termOffset ||
-                DataHeaderFlyweight.termId(buffer, 0) != termId ||
-                DataHeaderFlyweight.streamId(buffer, 0) != streamId;
+            DataHeaderFlyweight.termId(buffer, 0) != termId ||
+            DataHeaderFlyweight.streamId(buffer, 0) != streamId;
     }
 }

File: aeron-samples/src/main/java/io/aeron/samples/archive/EmbeddedRecordingThroughput.java
Patch:
@@ -117,7 +117,7 @@ public long streamMessagesForRecording()
                 idleStrategy.idle();
             }
 
-            final long start = System.nanoTime();
+            final long startNs = System.nanoTime();
             final UnsafeBuffer buffer = this.buffer;
 
             for (long i = 0; i < NUMBER_OF_MESSAGES; i++)
@@ -141,7 +141,7 @@ public long streamMessagesForRecording()
                 idleStrategy.idle();
             }
 
-            final long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
+            final long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
             final double dataRate = (stopPosition * 1000.0d / durationMs) / MEGABYTE;
             final double recordingMb = stopPosition / MEGABYTE;
             final long msgRate = (NUMBER_OF_MESSAGES / durationMs) * 1000L;

File: aeron-samples/src/main/java/io/aeron/samples/archive/EmbeddedReplayThroughput.java
Patch:
@@ -81,11 +81,11 @@ public static void main(final String[] args) throws Exception
             do
             {
                 System.out.printf("Replaying %,d messages%n", NUMBER_OF_MESSAGES);
-                final long start = System.nanoTime();
+                final long startNs = System.nanoTime();
 
                 test.replayRecording(recordingLength, recordingId);
 
-                final long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
+                final long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
                 final double dataRate = (recordingLength * 1000.0d / durationMs) / MEGABYTE;
                 final double recordingMb = recordingLength / MEGABYTE;
                 final long msgRate = (NUMBER_OF_MESSAGES / durationMs) * 1000L;

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -1214,7 +1214,7 @@ Context interServiceTimeoutNs(final long interServiceTimeout)
          */
         public long interServiceTimeoutNs()
         {
-            return interServiceTimeoutNs;
+            return CommonContext.checkDebugTimeout(interServiceTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -997,7 +997,7 @@ public Context messageTimeoutNs(final long messageTimeoutNs)
          */
         public long messageTimeoutNs()
         {
-            return messageTimeoutNs;
+            return CommonContext.checkDebugTimeout(messageTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -1272,7 +1272,7 @@ public Context nakMulticastGroupSize(final int nakMulticastGroupSize)
          */
         public long clientLivenessTimeoutNs()
         {
-            return clientLivenessTimeoutNs;
+            return CommonContext.checkDebugTimeout(clientLivenessTimeoutNs, TimeUnit.NANOSECONDS);
         }
 
         /**

File: aeron-archive/src/test/java/io/aeron/archive/ReplaySessionTest.java
Patch:
@@ -439,8 +439,6 @@ public void shouldThrowArchiveExceptionIfCrcFails()
             final ArchiveException exception = assertThrows(ArchiveException.class, replaySession::doWork);
             assertEquals(ArchiveException.GENERIC, exception.errorCode());
             assertThat(exception.getMessage(), Matchers.startsWith("CRC checksum mismatch at offset=0"));
-            assertEquals(ReplaySession.State.INACTIVE, replaySession.state());
-            assertEquals(exception.getMessage(), replaySession.errorMessage());
         }
     }
 

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -65,13 +65,13 @@ public class SampleConfiguration
     static
     {
         CHANNEL = System.getProperty(CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
-        STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 15);
+        STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 1001);
         PING_CHANNEL = System.getProperty(PING_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
         PONG_CHANNEL = System.getProperty(PONG_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40124");
         IDLE_STRATEGY_NAME = System.getProperty(IDLE_STRATEGY_PROP, "org.agrona.concurrent.BusySpinIdleStrategy");
         LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, 0);
-        PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 16);
-        PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 17);
+        PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 1002);
+        PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 1003);
         FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 10);
         MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 32);
         RANDOM_MESSAGE_LENGTH = Boolean.getBoolean(RANDOM_MESSAGE_LENGTH_PROP);

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -65,13 +65,13 @@ public class SampleConfiguration
     static
     {
         CHANNEL = System.getProperty(CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
-        STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 11);
+        STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 15);
         PING_CHANNEL = System.getProperty(PING_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
         PONG_CHANNEL = System.getProperty(PONG_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40124");
         IDLE_STRATEGY_NAME = System.getProperty(IDLE_STRATEGY_PROP, "org.agrona.concurrent.BusySpinIdleStrategy");
         LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, 0);
-        PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 11);
-        PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 12);
+        PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 16);
+        PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 17);
         FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 10);
         MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 32);
         RANDOM_MESSAGE_LENGTH = Boolean.getBoolean(RANDOM_MESSAGE_LENGTH_PROP);

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -65,13 +65,13 @@ public class SampleConfiguration
     static
     {
         CHANNEL = System.getProperty(CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
-        STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 10);
+        STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 11);
         PING_CHANNEL = System.getProperty(PING_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
         PONG_CHANNEL = System.getProperty(PONG_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40124");
         IDLE_STRATEGY_NAME = System.getProperty(IDLE_STRATEGY_PROP, "org.agrona.concurrent.BusySpinIdleStrategy");
         LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, 0);
-        PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 10);
-        PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 11);
+        PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 11);
+        PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 12);
         FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 10);
         MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 32);
         RANDOM_MESSAGE_LENGTH = Boolean.getBoolean(RANDOM_MESSAGE_LENGTH_PROP);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -475,7 +475,7 @@ public static class Configuration
 
         /**
          * The number of services in this cluster instance.
-         * @see ClusteredServiceContainer.Configuration#SERVICE_ID_PROP_NAME
+         * @see io.aeron.cluster.service.ClusteredServiceContainer.Configuration#SERVICE_ID_PROP_NAME
          */
         public static final String SERVICE_COUNT_PROP_NAME = "aeron.cluster.service.count";
 
@@ -2009,7 +2009,7 @@ public int ticksPerWheel()
          * @param serviceCount the number of clustered services in this cluster instance.
          * @return this for a fluent API
          * @see Configuration#SERVICE_COUNT_PROP_NAME
-         * @see ClusteredServiceContainer.Configuration#SERVICE_ID_PROP_NAME
+         * @see io.aeron.cluster.service.ClusteredServiceContainer.Configuration#SERVICE_ID_PROP_NAME
          */
         public Context serviceCount(final int serviceCount)
         {
@@ -2022,7 +2022,7 @@ public Context serviceCount(final int serviceCount)
          *
          * @return the number of clustered services in this cluster instance.
          * @see Configuration#SERVICE_COUNT_PROP_NAME
-         * @see ClusteredServiceContainer.Configuration#SERVICE_ID_PROP_NAME
+         * @see io.aeron.cluster.service.ClusteredServiceContainer.Configuration#SERVICE_ID_PROP_NAME
          */
         public int serviceCount()
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1173,7 +1173,7 @@ void onReplayNewLeadershipTermEvent(
         if (timeUnit != clusterTimeUnit)
         {
             ctx.errorHandler().onError(new ClusterException(
-                "incompatible units: " + clusterTimeUnit + " log=" + timeUnit));
+                "incompatible timestamp units: " + clusterTimeUnit + " log=" + timeUnit));
             state(ConsensusModule.State.CLOSED);
             ctx.terminationHook().run();
             return;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -721,9 +721,8 @@ Subscription extendRecording(
         catalog.recordingSummary(recordingId, recordingSummary);
         if (streamId != recordingSummary.streamId)
         {
-            final String msg = "cannot extend recording " + recordingSummary.recordingId +
-                " streamId " + streamId +
-                " not equal to recording streamId " + recordingSummary.streamId;
+            final String msg = "cannot extend recording  " + recordingSummary.recordingId +
+                " with streamId " + streamId + " != existing streamId " + recordingSummary.streamId;
             controlSession.sendErrorResponse(correlationId, UNKNOWN_RECORDING, msg, controlResponseProxy);
             return null;
         }

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -751,7 +751,7 @@ private void forceWrites(final FileChannel channel, final boolean forceWrites, f
     static String[] listSegmentFiles(final File archiveDir, final long recordingId)
     {
         final String prefix = recordingId + "-";
-        return archiveDir.list((dir, name) -> name.startsWith(prefix));
+        return archiveDir.list((dir, name) -> name.startsWith(prefix) && name.endsWith(RECORDING_SEGMENT_SUFFIX));
     }
 
     static String findSegmentFileWithHighestPosition(final String[] segmentFiles)

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -627,7 +627,7 @@ public class Configuration
     public static final String TERMINATION_VALIDATOR_PROP_NAME = "aeron.driver.termination.validator";
 
     /**
-     * Property name for default boolean value for if a stream is rejoinable. True to allow rejoin, false to not.
+     * Property name for default boolean value for if a stream can be rejoined. True to allow rejoin, false to not.
      */
     public static final String REJOIN_STREAM_PROP_NAME = "aeron.rejoin.stream";
 
@@ -643,7 +643,7 @@ public static boolean useWindowsHighResTimer()
 
     public static boolean warnIfDirExists()
     {
-        return "true".equalsIgnoreCase(getProperty(DIR_WARN_IF_EXISTS_PROP_NAME, "true"));
+        return "true".equalsIgnoreCase(getProperty(DIR_WARN_IF_EXISTS_PROP_NAME, "false"));
     }
 
     public static boolean dirDeleteOnStart()

File: aeron-archive/src/main/java/io/aeron/archive/CatalogTool.java
Patch:
@@ -29,7 +29,7 @@ public class CatalogTool
     @SuppressWarnings("MethodLength")
     public static void main(final String[] args)
     {
-        if (args.length == 0 || args.length > 3)
+        if (args.length == 0 || args.length > 4)
         {
             printHelp();
             System.exit(-1);
@@ -83,7 +83,7 @@ else if (args.length == 3)
                         CatalogTool::truncateFileOnPageStraddle);
                 }
             }
-            else if (args.length == 4)
+            else
             {
                 verifyRecording(System.out, archiveDir, Long.parseLong(args[2]), verifyAllSegmentFiles(args[3]),
                     CatalogTool::truncateFileOnPageStraddle);

File: aeron-samples/src/main/java/io/aeron/samples/BasicPublisher.java
Patch:
@@ -101,7 +101,7 @@ else if (result == Publication.MAX_POSITION_EXCEEDED)
                     }
                     else
                     {
-                        System.out.println("Offer failed due to unknown reason");
+                        System.out.println("Offer failed due to unknown reason: " + result);
                     }
                 }
                 else

File: aeron-samples/src/main/java/io/aeron/samples/BasicSubscriber.java
Patch:
@@ -34,7 +34,7 @@
  * This application only handles non-fragmented data. A DataHandler method is called
  * for every received message or message fragment.
  * For an example that implements reassembly of large, fragmented messages, see
- * {link@ MultipleSubscribersWithFragmentAssembly}.
+ * {@link MultipleSubscribersWithFragmentAssembly}.
  */
 public class BasicSubscriber
 {

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -1236,7 +1236,7 @@ public long nakMulticastMaxBackoffNs()
          */
         public Context nakMulticastMaxBackoffNs(final long nakMulticastMaxBackoffNs)
         {
-            this.nakMulticastMaxBackoffNs = nakUnicastDelayNs;
+            this.nakMulticastMaxBackoffNs = nakMulticastMaxBackoffNs;
             return this;
         }
 

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -1236,7 +1236,7 @@ public long nakMulticastMaxBackoffNs()
          */
         public Context nakMulticastMaxBackoffNs(final long nakMulticastMaxBackoffNs)
         {
-            this.nakMulticastMaxBackoffNs = nakUnicastDelayNs;
+            this.nakMulticastMaxBackoffNs = nakMulticastMaxBackoffNs;
             return this;
         }
 

File: aeron-system-tests/src/test/java/io/aeron/test/TestMediaDriver.java
Patch:
@@ -22,11 +22,12 @@
 
 public interface TestMediaDriver extends AutoCloseable
 {
-    String AERON_TEST_SYSTEM_AERONMD_PATH = "aeron.test.system.aeronmd.path";
+    String AERONMD_PATH = "aeron.test.system.aeronmd.path";
+    String DRIVER_AGENT_PATH = "aeron.test.system.driver.agent.path";
 
     static boolean shouldRunCMediaDriver()
     {
-        return !isEmpty(System.getProperty(AERON_TEST_SYSTEM_AERONMD_PATH));
+        return !isEmpty(System.getProperty(AERONMD_PATH));
     }
 
     static void notSupportedOnCMediaDriverYet(String reason)

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -473,7 +473,7 @@ public void onRequestVote(
         }
         else if (candidateTermId > leadershipTermId)
         {
-            ctx.countedErrorHandler().onError(new ClusterException("unexpected vote request"));
+            ctx.countedErrorHandler().onError(new ClusterException("unexpected vote request", AeronException.Category.WARN));
             enterElection(clusterTimeUnit.toNanos(clusterClock.time()));
             election.onRequestVote(logLeadershipTermId, logPosition, candidateTermId, candidateId);
         }
@@ -509,7 +509,7 @@ public void onNewLeadershipTerm(
         }
         else if (leadershipTermId > this.leadershipTermId)
         {
-            ctx.countedErrorHandler().onError(new ClusterException("unexpected new leadership term"));
+            ctx.countedErrorHandler().onError(new ClusterException("unexpected new leadership term", AeronException.Category.WARN));
             enterElection(clusterTimeUnit.toNanos(clusterClock.time()));
         }
     }
@@ -1915,7 +1915,7 @@ else if (Cluster.Role.FOLLOWER == role &&
             {
                 ctx.countedErrorHandler().onError(new ClusterException(
                     "no leader connection: logPosition=" + logPosition() + " commitPosition=" + commitPosition.get() +
-                    " leadershipTermId=" + leadershipTermId + " leaderId=" + leaderMember.id()));
+                    " leadershipTermId=" + leadershipTermId + " leaderId=" + leaderMember.id(), AeronException.Category.WARN));
                 enterElection(nowNs);
                 return 1;
             }

File: aeron-archive/src/main/java/io/aeron/archive/RecordingWriter.java
Patch:
@@ -16,7 +16,6 @@
 package io.aeron.archive;
 
 import io.aeron.Image;
-import io.aeron.archive.client.AeronArchive;
 import io.aeron.archive.client.ArchiveException;
 import io.aeron.logbuffer.BlockHandler;
 import io.aeron.protocol.DataHeaderFlyweight;
@@ -31,6 +30,7 @@
 import java.nio.channels.ClosedByInterruptException;
 import java.nio.channels.FileChannel;
 
+import static io.aeron.archive.client.AeronArchive.segmentFileBasePosition;
 import static io.aeron.logbuffer.FrameDescriptor.PADDING_FRAME_TYPE;
 import static io.aeron.logbuffer.FrameDescriptor.typeOffset;
 
@@ -80,7 +80,7 @@ class RecordingWriter implements BlockHandler
         final long joinPosition = image.joinPosition();
         final long startTermBasePosition = startPosition - (startPosition & (termLength - 1));
         segmentOffset = (int)((joinPosition - startTermBasePosition) & (segmentLength - 1));
-        segmentBasePosition = AeronArchive.segmentFileBasePosition(startPosition, joinPosition, termLength, segmentLength);
+        segmentBasePosition = segmentFileBasePosition(startPosition, joinPosition, termLength, segmentLength);
     }
 
     public void onBlock(

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -25,7 +25,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicLong;
 
-import static io.aeron.test.LossReportTestUtil.verifyLossOccuredForStream;
+import static io.aeron.test.LossReportTestUtil.verifyLossOccurredForStream;
 import static org.hamcrest.Matchers.lessThan;
 import static org.junit.Assert.assertThat;
 
@@ -93,7 +93,7 @@ public void shouldGapFillWhenLossOccurs() throws Exception
             subscriberThread.join();
 
             assertThat(subscriber.messageCount, lessThan(NUM_MESSAGES));
-            verifyLossOccuredForStream(ctx.aeronDirectoryName(), STREAM_ID);
+            verifyLossOccurredForStream(ctx.aeronDirectoryName(), STREAM_ID);
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.concurrent.TimeUnit;
 
 
-import static io.aeron.test.LossReportTestUtil.verifyLossOccuredForStream;
+import static io.aeron.test.LossReportTestUtil.verifyLossOccurredForStream;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.*;
@@ -346,7 +346,7 @@ public void shouldReceivePublishedMessageOneForOneWithDataLoss(final String chan
             eq(messageLength),
             any(Header.class));
 
-        verifyLossOccuredForStream(context.aeronDirectoryName(), STREAM_ID);
+        verifyLossOccurredForStream(context.aeronDirectoryName(), STREAM_ID);
     }
 
     @Theory
@@ -415,7 +415,7 @@ public void shouldReceivePublishedMessageBatchedWithDataLoss(final String channe
             eq(messageLength),
             any(Header.class));
 
-        verifyLossOccuredForStream(context.aeronDirectoryName(), STREAM_ID);
+        verifyLossOccurredForStream(context.aeronDirectoryName(), STREAM_ID);
     }
 
     @Theory

File: aeron-system-tests/src/test/java/io/aeron/test/LossReportTestUtil.java
Patch:
@@ -19,7 +19,9 @@
 
 public class LossReportTestUtil
 {
-    public static void verifyLossOccuredForStream(String aeronDirectoryName, int streamId) throws IOException
+    public static void verifyLossOccurredForStream(
+        final String aeronDirectoryName,
+        final int streamId) throws IOException
     {
         final File lossReportFile = LossReportUtil.file(aeronDirectoryName);
         assertTrue(lossReportFile.exists());

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -1816,6 +1816,7 @@ public void close()
             CloseHelper.close(archiveDirChannel);
             archiveDirChannel = null;
 
+            CloseHelper.close(errorCounter);
             if (errorHandler instanceof AutoCloseable)
             {
                 CloseHelper.close((AutoCloseable)errorHandler);

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -225,7 +225,9 @@ protected void abort()
             replayer.abort();
             recorder.abort();
             isAbort = true;
+
             ctx.abortLatch().await(AgentRunner.RETRY_CLOSE_TIMEOUT_MS * 2L, TimeUnit.MILLISECONDS);
+            ctx.errorCounter().close();
         }
         catch (final InterruptedException ignore)
         {

File: aeron-system-tests/src/test/java/io/aeron/support/CTestMediaDriver.java
Patch:
@@ -162,10 +162,10 @@ else if (null != unicastFlowControlSupplier)
         }
     }
 
-    private static String getFlowControlStrategyName(FlowControlSupplier multicastFlowControlSupplier)
+    private static String getFlowControlStrategyName(final FlowControlSupplier flowControlSupplier)
     {
-        return null == multicastFlowControlSupplier ?
-            null : C_DRIVER_FLOW_CONTROL_STRATEGY_NAME_BY_SUPPLIER_TYPE.get(multicastFlowControlSupplier.getClass());
+        return null == flowControlSupplier ?
+            null : C_DRIVER_FLOW_CONTROL_STRATEGY_NAME_BY_SUPPLIER_TYPE.get(flowControlSupplier.getClass());
     }
 
     @Override

File: aeron-system-tests/src/test/java/io/aeron/support/MediaDriverTestWatcher.java
Patch:
@@ -18,7 +18,7 @@ protected void failed(final Throwable e, final Description description)
         hasFailed = true;
     }
 
-    protected void finished(Description description)
+    protected void finished(final Description description)
     {
         if (hasFailed && !outputFilesByAeronDirectoryName.isEmpty())
         {
@@ -45,12 +45,12 @@ public void outputFiles(final String aeronDirectoryName, final File stdoutFile,
         outputFilesByAeronDirectoryName.put(aeronDirectoryName, new StdOutputFiles(stdoutFile, stderrFile));
     }
 
-    private static class StdOutputFiles
+    private static final class StdOutputFiles
     {
         private final File stderr;
         private final File stdout;
 
-        private StdOutputFiles(File stderr, File stdout)
+        private StdOutputFiles(final File stderr, final File stdout)
         {
             this.stderr = stderr;
             this.stdout = stdout;

File: aeron-cluster/src/main/java/io/aeron/cluster/DynamicJoin.java
Patch:
@@ -472,7 +472,7 @@ static class SnapshotReader implements ControlledFragmentHandler
 
         boolean isDone()
         {
-            return isDone && (endPosition <= recordingPosition);
+            return isDone && endPosition <= recordingPosition && image.isEndOfStream();
         }
 
         long recordingId()

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -841,7 +841,7 @@ static class SnapshotReader implements ControlledFragmentHandler
 
         boolean isDone()
         {
-            return isDone && endPosition <= recordingPosition;
+            return isDone && endPosition <= recordingPosition && image.isEndOfStream();
         }
 
         void pollRecordingPosition()

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -2764,6 +2764,7 @@ public ClusterMarkFile clusterMarkFile()
          *
          * @param errorBufferLength in bytes to use.
          * @return this for a fluent API.
+         * @see Configuration#ERROR_BUFFER_LENGTH_PROP_NAME
          */
         public Context errorBufferLength(final int errorBufferLength)
         {
@@ -2775,6 +2776,7 @@ public Context errorBufferLength(final int errorBufferLength)
          * The error buffer length in bytes.
          *
          * @return error buffer length in bytes.
+         * @see Configuration#ERROR_BUFFER_LENGTH_PROP_NAME
          */
         public int errorBufferLength()
         {

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -226,7 +226,7 @@ private static AgentBuilder addDriverInstrumentation(final AgentBuilder agentBui
     private static AgentBuilder addArchiveInstrumentation(final AgentBuilder agentBuilder)
     {
         return agentBuilder
-            .type(nameEndsWith("ControlRequestAdapter"))
+            .type(nameEndsWith("ControlSessionDemuxer"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ControlRequestInterceptor.ControlRequest.class)
                     .on(named("onFragment")))));

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -226,7 +226,7 @@ private static AgentBuilder addDriverInstrumentation(final AgentBuilder agentBui
     private static AgentBuilder addArchiveInstrumentation(final AgentBuilder agentBuilder)
     {
         return agentBuilder
-            .type(nameEndsWith("ControlRequestAdapter"))
+            .type(nameEndsWith("ControlSessionDemuxer"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ControlRequestInterceptor.ControlRequest.class)
                     .on(named("onFragment")))));

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -117,7 +117,7 @@ public static UdpChannel parse(final String channelUriString)
             if (hasNoDistinguishingCharacteristic && !isManualControlMode)
             {
                 throw new IllegalArgumentException(
-                    "Aeron URIs for UDP must specify an endpoint address, control address, tag-id, or control-mode: " +
+                    "URIs for UDP must specify an endpoint, control, tag-id, or control-mode manual: " +
                     channelUriString);
             }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -692,6 +692,7 @@ private void closeSession()
             {
                 sessionCloseRequestEncoder
                     .wrapAndApplyHeader(bufferClaim.buffer(), bufferClaim.offset(), messageHeaderEncoder)
+                    .leadershipTermId(leadershipTermId)
                     .clusterSessionId(clusterSessionId);
 
                 bufferClaim.commit();

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -70,7 +70,7 @@ public SendChannelEndpoint(
         {
             multiDestination = new ManualMultiDestination();
         }
-        else if (udpChannel.isDynamicControlMode())
+        else if (udpChannel.isDynamicControlMode() || udpChannel.hasExplicitControl())
         {
             multiDestination = new DynamicMultiDestination(context.cachedNanoClock(), DESTINATION_TIMEOUT);
         }

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -466,6 +466,7 @@ public void onRttMeasurement(
     {
         if (RttMeasurementFlyweight.REPLY_FLAG == (msg.flags() & RttMeasurementFlyweight.REPLY_FLAG))
         {
+            rttMeasurementBuffer.clear();
             rttMeasurementHeader
                 .receiverId(msg.receiverId())
                 .echoTimestampNs(msg.echoTimestampNs())

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -436,6 +436,7 @@ public void sendRttMeasurement(
     {
         if (!isClosed)
         {
+            rttMeasurementBuffer.clear();
             rttMeasurementFlyweight
                 .sessionId(sessionId)
                 .streamId(streamId)
@@ -504,6 +505,7 @@ public void sendRttMeasurement(
     {
         if (!isClosed)
         {
+            rttMeasurementBuffer.clear();
             rttMeasurementFlyweight
                 .sessionId(sessionId)
                 .streamId(streamId)

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -218,7 +218,6 @@ public String bindAddressAndPort()
         try
         {
             final InetSocketAddress localAddress = (InetSocketAddress)receiveDatagramChannel.getLocalAddress();
-
             if (null == localAddress)
             {
                 return "";

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingSubscriptionsSession.java
Patch:
@@ -26,7 +26,7 @@ class ListRecordingSubscriptionsSession implements Session
     private int pseudoIndex;
     private int sent;
     private final int streamId;
-    private boolean applyStreamId;
+    private final boolean applyStreamId;
     private boolean isDone = false;
     private final String channelFragment;
     private final Object2ObjectHashMap<String, Subscription> subscriptionByKeyMap;

File: aeron-client/src/main/java/io/aeron/status/HeartbeatTimestamp.java
Patch:
@@ -25,7 +25,6 @@
 import static org.agrona.BitUtil.SIZE_OF_INT;
 import static org.agrona.BitUtil.SIZE_OF_LONG;
 import static org.agrona.concurrent.status.CountersReader.*;
-import static org.agrona.concurrent.status.CountersReader.NULL_COUNTER_ID;
 
 /**
  * Allocate a counter for tracking the last heartbeat of an entity with a given registration id.

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackupAgent.java
Patch:
@@ -85,8 +85,8 @@ public class ClusterBackupAgent implements Agent, UnavailableCounterHandler
     private Image snapshotRetrieveImage;
     private SnapshotReader snapshotReader;
 
-    private FragmentAssembler memberStatusFragmentAssembler = new FragmentAssembler(this::onFragment);
-    private Subscription memberStatusSubscription;
+    private final FragmentAssembler memberStatusFragmentAssembler = new FragmentAssembler(this::onFragment);
+    private final Subscription memberStatusSubscription;
     private ExclusivePublication memberStatusPublication;
     private ClusterMember[] clusterMembers;
     private ClusterMember leaderMember;

File: aeron-archive/src/main/java/io/aeron/archive/client/ReplayMerge.java
Patch:
@@ -20,6 +20,7 @@
 import io.aeron.Image;
 import io.aeron.Subscription;
 import io.aeron.archive.codecs.ControlResponseCode;
+import io.aeron.exceptions.TimeoutException;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import org.agrona.concurrent.EpochClock;
@@ -395,8 +396,7 @@ private int catchup(final long nowMs)
             }
             else if (image.isClosed())
             {
-                state(State.ERRORED);
-                workCount += 1;
+                throw new IllegalStateException("ReplayMerge Image closed unexpectedly.");
             }
             else if (image.position() > positionOfLastProgress)
             {
@@ -513,7 +513,7 @@ private void checkProgress(final long nowMs)
     {
         if (hasProgressStalled(nowMs))
         {
-            state(State.ERRORED);
+            throw new TimeoutException("ReplayMerge no progress state=" + state);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -314,7 +314,7 @@ public static class Configuration
          * Channel for receiving replication streams replayed from another archive.
          * @see #REPLICATION_CHANNEL_PROP_NAME
          */
-        public static final String REPLICATION_CHANNEL_DEFAULT = "aeron:udp?endpoint=8040";
+        public static final String REPLICATION_CHANNEL_DEFAULT = "aeron:udp?endpoint=localhost:8040";
 
         /**
          * Filename for the single instance of a {@link Catalog} contents for an archive.

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMigrationPlanner.java
Patch:
@@ -46,7 +46,7 @@ public static List<ArchiveMigrationStep> createPlan(final int version)
         {
             if (ALL_MIGRATION_STEPS.get(i).minimumVersion() > version)
             {
-                steps.addAll(ALL_MIGRATION_STEPS.subList(i, ALL_MIGRATION_STEPS.size() - 1));
+                steps.addAll(ALL_MIGRATION_STEPS.subList(i, ALL_MIGRATION_STEPS.size()));
                 break;
             }
         }

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1000,6 +1000,7 @@ private ChannelUriStringBuilder strippedChannelBuilder(final ChannelUri channelU
             .endpoint(channelUri)
             .networkInterface(channelUri)
             .controlEndpoint(channelUri)
+            .controlMode(channelUri)
             .tags(channelUri)
             .rejoin(channelUri)
             .group(channelUri)

File: aeron-client/src/main/java/io/aeron/exceptions/RegistrationException.java
Patch:
@@ -69,6 +69,6 @@ public int errorCodeValue()
 
     public String getMessage()
     {
-        return "correlationId=" + correlationId + "errorCodeValue=" + errorCodeValue + " " + super.getMessage();
+        return "correlationId=" + correlationId + ", errorCodeValue=" + errorCodeValue + ", " + super.getMessage();
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -105,7 +105,8 @@ public static UdpChannel parse(final String channelUriString)
             if (hasNoDistinguishingCharacteristic && null == controlMode)
             {
                 throw new IllegalArgumentException(
-                    "Aeron URIs for UDP must specify an endpoint address, control address, tag-id, or control-mode");
+                    "Aeron URIs for UDP must specify an endpoint address, control address, tag-id, or control-mode: " +
+                    channelUriString);
             }
 
             if (null != endpointAddress && endpointAddress.isUnresolved())

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -2535,7 +2535,7 @@ private void takeSnapshot(final long timestamp, final long logPosition)
                 recordingLog.appendSnapshot(
                     recordingId, leadershipTermId, termBaseLogPosition, logPosition, timestamp, SERVICE_ID);
 
-                recordingLog.force();
+                recordingLog.force(ctx.fileSyncLevel());
                 recoveryPlan = recordingLog.createRecoveryPlan(archive, ctx.serviceCount());
             }
             finally

File: aeron-archive/src/main/java/io/aeron/archive/ReplicationSession.java
Patch:
@@ -165,6 +165,8 @@ public void onRecordingDescriptor(
 
         dstRecordingId = catalog.addNewRecording(
             startPosition,
+            startPosition,
+            startTimestamp,
             startTimestamp,
             initialTermId,
             segmentFileLength,

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -182,10 +182,10 @@ public static class Configuration
         public static final String DEFAULT_IDLE_STRATEGY = "org.agrona.concurrent.BackoffIdleStrategy";
 
         public static final String MAX_CONCURRENT_RECORDINGS_PROP_NAME = "aeron.archive.max.concurrent.recordings";
-        public static final int MAX_CONCURRENT_RECORDINGS_DEFAULT = 50;
+        public static final int MAX_CONCURRENT_RECORDINGS_DEFAULT = 20;
 
         public static final String MAX_CONCURRENT_REPLAYS_PROP_NAME = "aeron.archive.max.concurrent.replays";
-        public static final int MAX_CONCURRENT_REPLAYS_DEFAULT = 50;
+        public static final int MAX_CONCURRENT_REPLAYS_DEFAULT = 20;
 
         public static final String MAX_CATALOG_ENTRIES_PROP_NAME = "aeron.archive.max.catalog.entries";
         public static final long MAX_CATALOG_ENTRIES_DEFAULT = Catalog.DEFAULT_MAX_ENTRIES;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1249,7 +1249,7 @@ private boolean isInvalidReplayPosition(
         if (position - startPosition < 0)
         {
             final String msg = "requested replay start position " + position +
-                ") is less than recording start position " + startPosition + " for recording " + recordingId;
+                " is less than recording start position " + startPosition + " for recording " + recordingId;
             controlSession.sendErrorResponse(correlationId, msg, controlResponseProxy);
 
             return true;

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -109,7 +109,7 @@ public void openDatagramChannel(final AtomicCounter statusIndicator)
                 receiveDatagramChannel.join(endPointAddress.getAddress(), udpChannel.localInterface());
                 sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, udpChannel.localInterface());
 
-                if (udpChannel.isHasMulticastTtl())
+                if (udpChannel.hasMulticastTtl())
                 {
                     sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, udpChannel.multicastTtl());
                     multicastTtl = sendDatagramChannel.getOption(StandardSocketOptions.IP_MULTICAST_TTL);

File: aeron-client/src/main/java/io/aeron/exceptions/ControlProtocolException.java
Patch:
@@ -13,10 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.aeron.driver.exceptions;
+package io.aeron.exceptions;
 
 import io.aeron.ErrorCode;
-import io.aeron.exceptions.AeronException;
 
 public class ControlProtocolException extends AeronException
 {

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -21,7 +21,7 @@
 import io.aeron.driver.MediaDriver.Context;
 import io.aeron.driver.buffer.LogFactory;
 import io.aeron.driver.buffer.RawLog;
-import io.aeron.driver.exceptions.ControlProtocolException;
+import io.aeron.exceptions.ControlProtocolException;
 import io.aeron.driver.media.*;
 import io.aeron.driver.status.*;
 import io.aeron.logbuffer.LogBufferDescriptor;

File: aeron-driver/src/main/java/io/aeron/driver/exceptions/InvalidChannelException.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.driver.exceptions;
 
 import io.aeron.ErrorCode;
+import io.aeron.exceptions.ControlProtocolException;
 
 public class InvalidChannelException extends ControlProtocolException
 {

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -21,7 +21,7 @@
 import io.aeron.driver.DriverConductorProxy;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.PublicationImage;
-import io.aeron.driver.exceptions.ControlProtocolException;
+import io.aeron.exceptions.ControlProtocolException;
 import io.aeron.exceptions.AeronException;
 import io.aeron.protocol.*;
 import io.aeron.status.ChannelEndpointStatus;

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -18,7 +18,7 @@
 import io.aeron.CommonContext;
 import io.aeron.ErrorCode;
 import io.aeron.driver.*;
-import io.aeron.driver.exceptions.ControlProtocolException;
+import io.aeron.exceptions.ControlProtocolException;
 import io.aeron.status.ChannelEndpointStatus;
 import io.aeron.protocol.NakFlyweight;
 import io.aeron.protocol.RttMeasurementFlyweight;

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -16,10 +16,12 @@
 package io.aeron.driver.media;
 
 import io.aeron.CommonContext;
+import io.aeron.ErrorCode;
 import io.aeron.driver.DataPacketDispatcher;
 import io.aeron.driver.DriverConductorProxy;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.PublicationImage;
+import io.aeron.driver.exceptions.ControlProtocolException;
 import io.aeron.exceptions.AeronException;
 import io.aeron.protocol.*;
 import io.aeron.status.ChannelEndpointStatus;
@@ -267,7 +269,7 @@ public void validateAllowsDestinationControl()
     {
         if (null == multiRcvDestination)
         {
-            throw new AeronException("channel does not allow manual control");
+            throw new ControlProtocolException(ErrorCode.INVALID_CHANNEL, "channel does not allow manual control");
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -16,7 +16,9 @@
 package io.aeron.driver.media;
 
 import io.aeron.CommonContext;
+import io.aeron.ErrorCode;
 import io.aeron.driver.*;
+import io.aeron.driver.exceptions.ControlProtocolException;
 import io.aeron.status.ChannelEndpointStatus;
 import io.aeron.protocol.NakFlyweight;
 import io.aeron.protocol.RttMeasurementFlyweight;
@@ -283,7 +285,7 @@ public void validateAllowsManualControl()
     {
         if (null == multiDestination || !multiDestination.isManualControlMode())
         {
-            throw new IllegalArgumentException("control channel does not allow manual control");
+            throw new ControlProtocolException(ErrorCode.INVALID_CHANNEL, "channel does not allow manual control");
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -172,6 +172,7 @@ public void onCloseReceiveChannelEndpoint(final ReceiveChannelEndpoint channelEn
 
         channelEndpoint.closeMultiRcvDestination();
         channelEndpoint.close();
+        dataTransportPoller.selectNowWithoutProcessing();
     }
 
     public void onRemoveCoolDown(final ReceiveChannelEndpoint channelEndpoint, final int sessionId, final int streamId)

File: aeron-client/src/main/java/io/aeron/ErrorCode.java
Patch:
@@ -33,7 +33,7 @@ public enum ErrorCode
     INVALID_CHANNEL(1),
 
     /**
-     * Attempted to reference a subscription, but it was not found
+     * Attempted to reference a subscription, but it was not found.
      */
     UNKNOWN_SUBSCRIPTION(2),
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterControl.java
Patch:
@@ -46,7 +46,7 @@ public class ClusterControl
     public enum ToggleState
     {
         /**
-         * Neutral state ready to accept a new action.
+         * Inactive state.
          */
         INACTIVE(0),
 

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -291,7 +291,7 @@ public int leaderMemberId()
      * <p>
      * This can be wrapped with a {@link IngressSessionDecorator} for pre-pending the cluster session header to
      * messages.
-     * {@link io.aeron.cluster.codecs.SessionMessageHeaderEncoder} or should be used for raw access.
+     * {@link io.aeron.cluster.codecs.SessionMessageHeaderEncoder} should be used for raw access.
      *
      * @return the raw {@link Publication} for connecting to the cluster.
      */
@@ -304,7 +304,7 @@ public Publication ingressPublication()
      * Get the raw {@link Subscription} for receiving from the cluster.
      * <p>
      * The can be wrapped with a {@link EgressAdapter} for dispatching events from the cluster.
-     * {@link io.aeron.cluster.codecs.SessionMessageHeaderDecoder} or should be used for raw access.
+     * {@link io.aeron.cluster.codecs.SessionMessageHeaderDecoder} should be used for raw access.
      *
      * @return the raw {@link Subscription} for receiving from the cluster.
      */

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClientSession.java
Patch:
@@ -164,7 +164,7 @@ public long offer(final DirectBufferVector[] vectors)
      *              final MutableDirectBuffer buffer = bufferClaim.buffer();
      *              final int offset = bufferClaim.offset();
      *              // ensure that data is written at the correct offset
-     *              buffer.putBytes(offset + ClientSession.SESSION_HEADER_LENGTH, srcBuffer, 0, length);
+     *              buffer.putBytes(offset + AeronCluster.SESSION_HEADER_LENGTH, srcBuffer, 0, length);
      *         }
      *         finally
      *         {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/Cluster.java
Patch:
@@ -254,7 +254,7 @@ public static Role get(final int code)
      *              final MutableDirectBuffer buffer = bufferClaim.buffer();
      *              final int offset = bufferClaim.offset();
      *              // ensure that data is written at the correct offset
-     *              buffer.putBytes(offset + ClientSession.SESSION_HEADER_LENGTH, srcBuffer, 0, length);
+     *              buffer.putBytes(offset + AeronCluster.SESSION_HEADER_LENGTH, srcBuffer, 0, length);
      *         }
      *         finally
      *         {

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -1072,7 +1072,7 @@ private void extendRecordingSession(
             ctx);
 
         recordingSessionByIdMap.put(recordingId, session);
-        catalog.extendRecording(recordingId, controlSession.sessionId(), correlationId);
+        catalog.extendRecording(recordingId, controlSession.sessionId(), correlationId, image.sessionId());
         recorder.addSession(session);
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/TestUtil.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.Subscription;
 import io.aeron.archive.client.ControlResponseAdapter;
 import io.aeron.archive.codecs.ControlResponseCode;
+import io.aeron.exceptions.AeronException;
 import io.aeron.exceptions.TimeoutException;
 import org.agrona.IoUtil;
 import org.agrona.SystemUtil;
@@ -167,7 +168,7 @@ public static void await(final BooleanSupplier conditionSupplier)
 
             if ((deadlineNs - System.nanoTime()) <= 0)
             {
-                throw new TimeoutException();
+                throw new TimeoutException(AeronException.Type.ERROR);
             }
 
             Thread.yield();

File: aeron-client/src/main/java/io/aeron/exceptions/ClientTimeoutException.java
Patch:
@@ -22,6 +22,6 @@ public class ClientTimeoutException extends TimeoutException
 {
     public ClientTimeoutException(final String message)
     {
-        super(message);
+        super(message, Type.FATAL);
     }
 }

File: aeron-client/src/main/java/io/aeron/exceptions/ConductorServiceTimeoutException.java
Patch:
@@ -22,6 +22,6 @@ public class ConductorServiceTimeoutException extends TimeoutException
 {
     public ConductorServiceTimeoutException(final String message)
     {
-        super(message);
+        super(message, Type.FATAL);
     }
 }

File: aeron-client/src/main/java/io/aeron/exceptions/DriverTimeoutException.java
Patch:
@@ -22,6 +22,6 @@ public class DriverTimeoutException extends TimeoutException
 {
     public DriverTimeoutException(final String message)
     {
-        super(message);
+        super(message, Type.FATAL);
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.aeron.*;
 import io.aeron.cluster.codecs.*;
+import io.aeron.exceptions.AeronException;
 import io.aeron.exceptions.ConcurrentConcludeException;
 import io.aeron.exceptions.ConfigurationException;
 import io.aeron.exceptions.TimeoutException;
@@ -1503,7 +1504,7 @@ private void checkDeadline()
 
             if (deadlineNs - nanoClock.nanoTime() < 0)
             {
-                throw new TimeoutException("connect timeout, step=" + step);
+                throw new TimeoutException("connect timeout, step=" + step, AeronException.Type.ERROR);
             }
         }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ExpandableRingBuffer.java
Patch:
@@ -416,7 +416,6 @@ private void resize(final int newMessageLength)
         final int newCapacity = BitUtil.findNextPositivePowerOfTwo(capacity + newMessageLength);
         if (newCapacity < capacity || newCapacity > maxCapacity)
         {
-            System.out.println("ExpandableRingBuffer.resize newCapacity=" + newCapacity + " capacity=" + capacity);
             return;
         }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/MemberStatusAdapter.java
Patch:
@@ -138,9 +138,9 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
 
                 memberStatusListener.onNewLeadershipTerm(
                     newLeadershipTermDecoder.logLeadershipTermId(),
-                    newLeadershipTermDecoder.logPosition(),
+                    newLeadershipTermDecoder.logLeadershipTermPosition(),
                     newLeadershipTermDecoder.leadershipTermId(),
-                    newLeadershipTermDecoder.maxLogPosition(),
+                    newLeadershipTermDecoder.logPosition(),
                     newLeadershipTermDecoder.leaderMemberId(),
                     newLeadershipTermDecoder.logSessionId());
                 break;

File: aeron-cluster/src/main/java/io/aeron/cluster/MemberStatusListener.java
Patch:
@@ -33,9 +33,9 @@ void onVote(
 
     void onNewLeadershipTerm(
         long logLeadershipTermId,
-        long logPosition,
+        long logLeadershipTermPosition,
         long leadershipTermId,
-        long maxLogPosition,
+        long logPosition,
         int leaderMemberId,
         int logSessionId);
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterBackup.java
Patch:
@@ -60,7 +60,8 @@ enum State
         BACKUP_QUERY(1),
         SNAPSHOT_RETRIEVE(2),
         LIVE_LOG_REPLAY(3),
-        BACKING_UP(4);
+        UPDATE_RECORDING_LOG(4),
+        BACKING_UP(5);
 
         static final State[] STATES;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/MemberStatusAdapter.java
Patch:
@@ -283,14 +283,15 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     messageHeaderDecoder.blockLength(),
                     messageHeaderDecoder.version());
 
+                final String responseChannel = backupQueryDecoder.responseChannel();
                 final byte[] credentials = new byte[backupQueryDecoder.encodedCredentialsLength()];
                 backupQueryDecoder.getEncodedCredentials(credentials, 0, credentials.length);
 
                 memberStatusListener.onBackupQuery(
                     backupQueryDecoder.correlationId(),
                     backupQueryDecoder.responseStreamId(),
                     backupQueryDecoder.version(),
-                    backupQueryDecoder.responseChannel(),
+                    responseChannel,
                     credentials);
                 break;
         }

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -860,7 +860,6 @@ public void decRef()
             channelEndpoint.decRef();
             timeOfLastActivityNs = nanoClock.nanoTime();
 
-            LogBufferDescriptor.isConnected(metaDataBuffer, spyPositions.length > 0);
             final long producerPosition = producerPosition();
             publisherLimit.setOrdered(producerPosition);
             endOfStreamPosition(metaDataBuffer, producerPosition);

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterSessionProxy.java
Patch:
@@ -79,7 +79,8 @@ public final boolean authenticate(final byte[] encodedPrincipal)
             clusterSession.authenticate(encodedPrincipal);
             return true;
         }
-        else if (egressPublisher.sendEvent(clusterSession, leadershipTermId, leaderMemberId, EventCode.OK, EMPTY_DETAIL))
+        else if (egressPublisher.sendEvent(
+            clusterSession, leadershipTermId, leaderMemberId, EventCode.OK, EMPTY_DETAIL))
         {
             clusterSession.authenticate(encodedPrincipal);
             return true;

File: aeron-cluster/src/main/java/io/aeron/cluster/MemberStatusListener.java
Patch:
@@ -61,5 +61,6 @@ void onNewLeadershipTerm(
 
     void onTerminationAck(long logPosition, int memberId);
 
-    void onBackupQuery(long correlationId, int responseStreamId, int version, String responseChannel, byte[] credentials);
+    void onBackupQuery(
+        long correlationId, int responseStreamId, int version, String responseChannel, byte[] credentials);
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/TestCluster.java
Patch:
@@ -142,8 +142,8 @@ static TestCluster startThreeNodeStaticCluster(final int appointedLeaderId)
         return testCluster;
     }
 
-    static TestCluster startThreeNodeStaticCluster(final int appointedLeaderId,
-        final Supplier<? extends TestNode.TestService> serviceSupplier)
+    static TestCluster startThreeNodeStaticCluster(
+        final int appointedLeaderId, final Supplier<? extends TestNode.TestService> serviceSupplier)
     {
         final TestCluster testCluster = new TestCluster(3, 0, appointedLeaderId);
         for (int i = 0; i < 3; i++)

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveEventLogger.java
Patch:
@@ -109,9 +109,6 @@ public void logControlRequest(final DirectBuffer buffer, final int offset, final
             case ListRecordingSubscriptionsRequestDecoder.TEMPLATE_ID:
                 dispatchIfEnabled(buffer, offset, length, CMD_IN_LIST_RECORDING_SUBSCRIPTIONS);
                 break;
-
-            default:
-                throw new IllegalArgumentException("Unknown template id: " + templateId);
         }
     }
 

File: aeron-agent/src/main/java/io/aeron/agent/DriverEventDissector.java
Patch:
@@ -280,12 +280,12 @@ private static int dissectLogHeader(
         final int bufferLength = buffer.getInt(offset + relativeOffset, LITTLE_ENDIAN);
         relativeOffset += SIZE_OF_INT;
 
-        final long timestamp = buffer.getLong(offset + relativeOffset, LITTLE_ENDIAN);
+        final long timestampNs = buffer.getLong(offset + relativeOffset, LITTLE_ENDIAN);
         relativeOffset += SIZE_OF_LONG;
 
         builder
             .append('[')
-            .append(((double)timestamp) / 1_000_000_000.0)
+            .append(((double)timestampNs) / 1_000_000_000.0)
             .append("] ")
             .append(code.name())
             .append(" [")

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -238,15 +238,15 @@ private static AgentBuilder addClusterInstrumentation(final AgentBuilder agentBu
             .type(nameEndsWith("Election"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ClusterInterceptor.ElectionStateChange.class)
-                    .on(named("stateTransition").and(takesArgument(0, nameEndsWith("State")))))))
+                    .on(named("stateChange")))))
             .type(nameEndsWith("ConsensusModuleAgent"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ClusterInterceptor.NewLeadershipTerm.class)
                     .on(named("onNewLeadershipTerm")))
                 .visit(to(ClusterInterceptor.ConsensusModuleStateChange.class)
-                    .on(named("state")))
+                    .on(named("stateChange")))
                 .visit(to(ClusterInterceptor.ConsensusModuleRoleChange.class)
-                    .on(named("role").and(takesArgument(0, nameEndsWith("Role")))))));
+                    .on(named("roleChange")))));
     }
 
     private static Agent getReaderAgent()

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -504,12 +504,12 @@ public static boolean originalChannelContains(
         return false;
     }
 
-    public void recordingStopped(final long recordingId, final long position, final long timestamp)
+    public void recordingStopped(final long recordingId, final long position, final long timestampMs)
     {
         final int offset = recordingDescriptorOffset(recordingId) + RecordingDescriptorHeaderDecoder.BLOCK_LENGTH;
         final long stopPosition = nativeOrder() == BYTE_ORDER ? position : Long.reverseBytes(position);
 
-        fieldAccessBuffer.putLong(offset + stopTimestampEncodingOffset(), timestamp, BYTE_ORDER);
+        fieldAccessBuffer.putLong(offset + stopTimestampEncodingOffset(), timestampMs, BYTE_ORDER);
         fieldAccessBuffer.putLongVolatile(offset + stopPositionEncodingOffset(), stopPosition);
 
         forceWrites(catalogChannel, forceWrites, forceMetadata);

File: aeron-archive/src/test/java/io/aeron/archive/TestUtil.java
Patch:
@@ -165,7 +165,7 @@ public static void await(final BooleanSupplier conditionSupplier)
                 throw new IllegalStateException("unexpected interrupt in test");
             }
 
-            if (System.nanoTime() > deadlineNs)
+            if ((deadlineNs - System.nanoTime()) <= 0)
             {
                 throw new TimeoutException();
             }

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -316,7 +316,7 @@ private void slowOffer(
         while (publication.offer(buffer, 0, length) < 0)
         {
             LockSupport.parkNanos(1000);
-            if (System.nanoTime() > deadlineNs)
+            if ((deadlineNs - System.nanoTime()) < 0)
             {
                 fail("Offer has timed out");
             }

File: aeron-client/src/main/java/io/aeron/protocol/RttMeasurementFlyweight.java
Patch:
@@ -103,9 +103,9 @@ public long echoTimestampNs()
         return getLong(ECHO_TIMESTAMP_FIELD_OFFSET, LITTLE_ENDIAN);
     }
 
-    public RttMeasurementFlyweight echoTimestampNs(final long timestamp)
+    public RttMeasurementFlyweight echoTimestampNs(final long timestampNs)
     {
-        putLong(ECHO_TIMESTAMP_FIELD_OFFSET, timestamp, LITTLE_ENDIAN);
+        putLong(ECHO_TIMESTAMP_FIELD_OFFSET, timestampNs, LITTLE_ENDIAN);
 
         return this;
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterMember.java
Patch:
@@ -28,7 +28,8 @@
 import static io.aeron.archive.client.AeronArchive.NULL_POSITION;
 
 /**
- * Represents a member of the cluster that participates in consensus.
+ * Represents a member of the cluster that participates in consensus for storing state from the perspective
+ * of any single member. It is is not a global view of the cluster, perspectives only exist from a vantage point.
  */
 public final class ClusterMember
 {

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTermination.java
Patch:
@@ -34,12 +34,12 @@ void deadlineMs(final long deadlineMs)
 
     boolean canTerminate(final ClusterMember[] members, final long terminationPosition, final long nowMs)
     {
-        if (!hasServiceTerminated)
+        if (hasServiceTerminated)
         {
-            return false;
+            return haveFollowersTerminated(members, terminationPosition) || nowMs >= deadlineMs;
         }
 
-        return haveFollowersTerminated(members, terminationPosition) || nowMs >= deadlineMs;
+        return false;
     }
 
     void hasServiceTerminated(final boolean hasServiceTerminated)

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -915,7 +915,7 @@ private static ChannelUri followerLogDestination(final String logChannel, final
 
     private void state(final State newState, final long nowMs)
     {
-        stateTransition(this.state, newState, nowMs);
+        stateChange(this.state, newState, thisMember.id());
 
         if (State.CANVASS == newState)
         {
@@ -952,9 +952,9 @@ private void state(final State newState, final long nowMs)
         timeOfLastStateChangeMs = nowMs;
     }
 
-    void stateTransition(final State oldState, final State newState, final long nowMs)
+    void stateChange(final State oldState, final State newState, final int memberId)
     {
-        //System.out.println("memberId=" + thisMember.id() + " nowMs=" + nowMs + " " + oldState + " -> " + newState);
+        //System.out.println("memberId=" + memberId + " " + oldState + " -> " + newState);
     }
 
     private void cleanupReplay()

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -43,7 +43,6 @@
 
 class ClusteredServiceAgent implements Agent, Cluster
 {
-
     private final int serviceId;
     private final AeronArchive.Context archiveCtx;
     private final ClusteredServiceContainer.Context ctx;

File: aeron-cluster/src/test/java/io/aeron/cluster/TestNode.java
Patch:
@@ -196,15 +196,16 @@ void removeMember(final int followerMemberId, final boolean isPassive)
 
     static class TestService extends StubClusteredService
     {
+        private int index;
         private volatile int messageCount;
         private volatile boolean wasSnapshotTaken = false;
         private volatile boolean wasSnapshotLoaded = false;
         private volatile Cluster.Role roleChangedTo = null;
-        private final int index;
 
-        TestService(final int index)
+        TestService index(final int index)
         {
             this.index = index;
+            return this;
         }
 
         int index()

File: aeron-driver/src/main/java/io/aeron/driver/PendingSetupMessageFromSource.java
Patch:
@@ -86,9 +86,9 @@ public long timeOfStatusMessageNs()
         return timeOfStatusMessageNs;
     }
 
-    public void timeOfStatusMessageNs(final long now)
+    public void timeOfStatusMessageNs(final long nowNs)
     {
-        timeOfStatusMessageNs = now;
+        timeOfStatusMessageNs = nowNs;
     }
 
     public void removeFromDataPacketDispatcher()

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -159,9 +159,9 @@ static final class Destination
         final int port;
         final InetSocketAddress address;
 
-        Destination(final long now, final long receiverId, final InetSocketAddress address)
+        Destination(final long nowNs, final long receiverId, final InetSocketAddress address)
         {
-            this.timeOfLastActivityNs = now;
+            this.timeOfLastActivityNs = nowNs;
             this.receiverId = receiverId;
             this.address = address;
             this.port = address.getPort();

File: aeron-driver/src/main/java/io/aeron/driver/status/PublisherPos.java
Patch:
@@ -34,7 +34,7 @@ public class PublisherPos
     /**
      * Human readable name for the counter.
      */
-    public static final String NAME = "pub-pos (sample)";
+    public static final String NAME = "pub-pos (sampled)";
 
     public static UnsafeBufferPosition allocate(
         final MutableDirectBuffer tempBuffer,

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.CncFileDescriptor;
 import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.DirectBuffer;
+import org.agrona.SemanticVersion;
 import org.agrona.SystemUtil;
 import org.agrona.concurrent.SigInt;
 import org.agrona.concurrent.status.CountersReader;
@@ -187,7 +188,8 @@ public static void main(final String[] args) throws Exception
         final AtomicBoolean running = new AtomicBoolean(true);
         SigInt.register(() -> running.set(false));
 
-        final String header = " - Aeron Stat (CnC v" + CNC_VERSION + "), pid " + SystemUtil.getPid();
+        final String header =
+            " - Aeron Stat (v" + SemanticVersion.toString(CNC_VERSION) + "), pid " + SystemUtil.getPid();
         final SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
 
         while (running.get())

File: aeron-samples/src/main/java/io/aeron/samples/SimplePublisher.java
Patch:
@@ -61,7 +61,7 @@ public static void main(final String[] args) throws Exception
             final long deadlineNs = System.nanoTime() + TimeUnit.SECONDS.toNanos(5);
             while (!publication.isConnected())
             {
-                if (System.nanoTime() >= deadlineNs)
+                if ((deadlineNs - System.nanoTime()) < 0)
                 {
                     System.out.println("Failed to connect to subscriber");
                     return;

File: aeron-archive/src/test/java/io/aeron/archive/TestUtil.java
Patch:
@@ -165,7 +165,7 @@ public static void await(final BooleanSupplier conditionSupplier)
                 throw new IllegalStateException("unexpected interrupt in test");
             }
 
-            if (System.nanoTime() > deadlineNs)
+            if ((deadlineNs - System.nanoTime()) <= 0)
             {
                 throw new TimeoutException();
             }

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -316,7 +316,7 @@ private void slowOffer(
         while (publication.offer(buffer, 0, length) < 0)
         {
             LockSupport.parkNanos(1000);
-            if (System.nanoTime() > deadlineNs)
+            if ((deadlineNs - System.nanoTime()) < 0)
             {
                 fail("Offer has timed out");
             }

File: aeron-samples/src/main/java/io/aeron/samples/SimplePublisher.java
Patch:
@@ -61,7 +61,7 @@ public static void main(final String[] args) throws Exception
             final long deadlineNs = System.nanoTime() + TimeUnit.SECONDS.toNanos(5);
             while (!publication.isConnected())
             {
-                if (System.nanoTime() >= deadlineNs)
+                if ((deadlineNs - System.nanoTime()) < 0)
                 {
                     System.out.println("Failed to connect to subscriber");
                     return;

File: aeron-samples/src/main/java/io/aeron/samples/raw/SendSelectReceiveUdpPing.java
Patch:
@@ -79,7 +79,7 @@ private void run() throws IOException
                     if (receivedSequenceNumber != sequenceNumber)
                     {
                         throw new IllegalStateException(
-                            "Data Loss:" + sequenceNumber + " to " + receivedSequenceNumber);
+                            "data Loss:" + sequenceNumber + " to " + receivedSequenceNumber);
                     }
 
                     final long durationNs = System.nanoTime() - timestampNs;

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -100,7 +100,7 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntact() throws Excepti
                     {
                         nowNs = System.nanoTime();
                     }
-                    while (nowNs < timeoutNs);
+                    while ((timeoutNs - nowNs) < 0);
                 }
             }
 
@@ -151,7 +151,7 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntactFromExclusivePubl
                     {
                         nowNs = System.nanoTime();
                     }
-                    while (nowNs < timeoutNs);
+                    while ((timeoutNs - nowNs) > 0);
                 }
             }
 

File: aeron-client/src/main/java/io/aeron/CncFileDescriptor.java
Patch:
@@ -338,7 +338,7 @@ public static void checkVersion(final int cncVersion)
     {
         if (SemanticVersion.major(CNC_VERSION) != SemanticVersion.major(cncVersion))
         {
-            throw new AeronException("CnC version not supported:" +
+            throw new AeronException("CnC version not compatible:" +
                 " app=" + SemanticVersion.toString(CNC_VERSION) +
                 " file=" + SemanticVersion.toString(cncVersion));
         }

File: aeron-agent/src/main/java/io/aeron/agent/ArchiveEventLogger.java
Patch:
@@ -109,9 +109,6 @@ public void logControlRequest(final DirectBuffer buffer, final int offset, final
             case ListRecordingSubscriptionsRequestDecoder.TEMPLATE_ID:
                 dispatchIfEnabled(buffer, offset, length, CMD_IN_LIST_RECORDING_SUBSCRIPTIONS);
                 break;
-
-            default:
-                throw new IllegalArgumentException("Unknown template id: " + templateId);
         }
     }
 

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventLogger.java
Patch:
@@ -45,13 +45,13 @@ private ClusterEventLogger(final ManyToOneRingBuffer eventRingBuffer)
         ringBuffer = eventRingBuffer;
     }
 
-    public void logElectionStateChange(final Election.State newState, final long nowMs, final Election election)
+    public void logElectionStateChange(final Election.State oldState, final Election.State newState, final long nowMs)
     {
         if (ClusterEventCode.isEnabled(ELECTION_STATE_CHANGE, ENABLED_EVENT_CODES))
         {
             final MutableDirectBuffer encodedBuffer = ENCODING_BUFFER.get();
             final int encodedLength = ClusterEventEncoder.encodeElectionStateChange(
-                encodedBuffer, election, newState, nowMs);
+                encodedBuffer, oldState, newState, nowMs);
 
             ringBuffer.write(toEventCodeId(ELECTION_STATE_CHANGE), encodedBuffer, 0, encodedLength);
         }

File: aeron-agent/src/main/java/io/aeron/agent/ClusterInterceptor.java
Patch:
@@ -30,9 +30,9 @@ final class ClusterInterceptor
     static class ElectionStateChange
     {
         @Advice.OnMethodEnter
-        static void state(final Election.State newState, final long nowMs, @Advice.This final Election election)
+        static void stateTransition(final Election.State oldState, final Election.State newState, final long nowMs)
         {
-            LOGGER.logElectionStateChange(newState, nowMs, election);
+            LOGGER.logElectionStateChange(oldState, newState, nowMs);
         }
     }
 

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -239,7 +239,7 @@ private static AgentBuilder addClusterInstrumentation(final AgentBuilder agentBu
             .type(nameEndsWith("Election"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ClusterInterceptor.ElectionStateChange.class)
-                    .on(named("state").and(takesArgument(0, nameEndsWith("State")))))))
+                    .on(named("stateTransition").and(takesArgument(0, nameEndsWith("State")))))))
             .type(nameEndsWith("ConsensusModuleAgent"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ClusterInterceptor.NewLeadershipTerm.class)

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventLogger.java
Patch:
@@ -103,7 +103,7 @@ public void logRoleChange(final Cluster.Role role)
         }
     }
 
-    private static int toEventCodeId(final ClusterEventCode code)
+    public static int toEventCodeId(final ClusterEventCode code)
     {
         return ClusterEventCode.EVENT_CODE_TYPE << 16 | (code.id() & 0xFFFF);
     }

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -103,12 +103,12 @@ public void onComplete(
 
     public static void premain(final String agentArgs, final Instrumentation instrumentation)
     {
-        agent(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION, instrumentation);
+        agent(AgentBuilder.RedefinitionStrategy.DISABLED, instrumentation);
     }
 
     public static void agentmain(final String agentArgs, final Instrumentation instrumentation)
     {
-        agent(AgentBuilder.RedefinitionStrategy.DISABLED, instrumentation);
+        agent(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION, instrumentation);
     }
 
     public static void removeTransformer()

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -51,7 +51,6 @@ public static void installAgent()
     {
         System.setProperty(EventConfiguration.ENABLED_EVENT_CODES_PROP_NAME, "all");
         System.setProperty(EventLogAgent.READER_CLASSNAME_PROP_NAME, StubEventLogReaderAgent.class.getName());
-        EventLogAgent.agentmain("", ByteBuddyAgent.install());
     }
 
     @AfterClass
@@ -69,6 +68,8 @@ public void shouldLogMessages() throws Exception
 
         try (MediaDriver ignore = MediaDriver.launchEmbedded(driverCtx))
         {
+            EventLogAgent.agentmain("", ByteBuddyAgent.install());
+
             final Aeron.Context clientCtx = new Aeron.Context()
                 .aeronDirectoryName(driverCtx.aeronDirectoryName());
 

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventInterceptor.java
Patch:
@@ -58,7 +58,7 @@ static void newLeadershipTermInterceptor(
         }
     }
 
-    static class StateChange
+    static class ConsensusModuleStateChange
     {
         @Advice.OnMethodEnter
         static void state(final ConsensusModule.State state)
@@ -67,7 +67,7 @@ static void state(final ConsensusModule.State state)
         }
     }
 
-    static class RoleChange
+    static class ConsensusModuleRoleChange
     {
         @Advice.OnMethodEnter
         static void role(final Cluster.Role role)

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -237,8 +237,8 @@ private static AgentBuilder addClusterInstrumentation(final AgentBuilder agentBu
             .type(nameEndsWith("ConsensusModuleAgent"))
             .transform(((builder, typeDescription, classLoader, module) -> builder
                 .visit(to(ClusterEventInterceptor.NewLeadershipTerm.class).on(named("onNewLeadershipTerm")))
-                .visit(to(ClusterEventInterceptor.StateChange.class).on(named("state")))
-                .visit(to(ClusterEventInterceptor.RoleChange.class).on(named("role")
+                .visit(to(ClusterEventInterceptor.ConsensusModuleStateChange.class).on(named("state")))
+                .visit(to(ClusterEventInterceptor.ConsensusModuleRoleChange.class).on(named("role")
                     .and(takesArgument(0, nameEndsWith("Role")))))));
     }
 

File: aeron-agent/src/test/java/io/aeron/agent/DriverLoggingAgentTest.java
Patch:
@@ -38,7 +38,7 @@
 import static junit.framework.TestCase.assertSame;
 import static junit.framework.TestCase.assertTrue;
 
-public class LoggingAgentTest
+public class DriverLoggingAgentTest
 {
     private static final String NETWORK_CHANNEL = "aeron:udp?endpoint=localhost:54325";
     private static final int STREAM_ID = 777;
@@ -123,11 +123,11 @@ public int doWork()
 
     public void onMessage(final int msgTypeId, final MutableDirectBuffer buffer, final int index, final int length)
     {
-        LoggingAgentTest.MSG_ID_SET.add(msgTypeId);
+        DriverLoggingAgentTest.MSG_ID_SET.add(msgTypeId);
 
         if (DriverEventCode.CMD_IN_CLIENT_CLOSE.id() == msgTypeId)
         {
-            LoggingAgentTest.LATCH.countDown();
+            DriverLoggingAgentTest.LATCH.countDown();
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1696,7 +1696,7 @@ else if (Cluster.Role.FOLLOWER == role &&
             if (0 == count && logAdapter.isImageClosed())
             {
                 ctx.countedErrorHandler().onError(new ClusterException(
-                    "lost leader connection: logPosition=" + logPosition() + " commitPosition=" + commitPosition.get() +
+                    "no leader connection: logPosition=" + logPosition() + " commitPosition=" + commitPosition.get() +
                     " leadershipTermId=" + leadershipTermId + " leaderId=" + leaderMember.id()));
                 enterElection(nowMs);
                 return 1;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -483,7 +483,7 @@ public void conclude()
         {
             if (serviceId < 0)
             {
-                throw new ConfigurationException("service id must be not be negative: " + serviceId);
+                throw new ConfigurationException("service id cannot be negative: " + serviceId);
             }
 
             if (null == threadFactory)

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1034,8 +1034,6 @@ private NetworkPublication newNetworkPublication(
             tempBuffer, countersManager, registrationId, sessionId, streamId, channel);
         final UnsafeBufferPosition senderLimit = SenderLimit.allocate(
             tempBuffer, countersManager, registrationId, sessionId, streamId, channel);
-        final AtomicCounter senderBpe = SenderBpe.allocate(
-            tempBuffer, countersManager, registrationId, sessionId, streamId, channel);
 
         if (params.isReplay)
         {
@@ -1068,7 +1066,7 @@ private NetworkPublication newNetworkPublication(
             publisherLimit,
             senderPosition,
             senderLimit,
-            senderBpe,
+            SenderBpe.allocate(tempBuffer, countersManager, registrationId, sessionId, streamId, channel),
             sessionId,
             streamId,
             initialTermId,

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -246,6 +246,7 @@ public void close()
         publisherLimit.close();
         senderPosition.close();
         senderLimit.close();
+        senderBpe.close();
         for (final ReadablePosition position : spyPositions)
         {
             position.close();

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -36,7 +36,6 @@
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.concurrent.TimeUnit;
@@ -364,7 +363,6 @@ public void shouldRestartServiceWithTimerFromSnapshotWithFurtherLog() throws Exc
         assertThat(serviceState.get(), is("5"));
     }
 
-    @Ignore
     @Test(timeout = 10_000)
     public void shouldTriggerRescheduledTimerAfterReplay()
     {
@@ -531,7 +529,7 @@ public void onSessionMessage(
                     final int length,
                     final Header header)
                 {
-                    scheduleNext(serviceCorrelationId(0), timestampMs + 100);
+                    scheduleNext(serviceCorrelationId(7), timestampMs + 100);
                 }
 
                 public void onTimerEvent(final long correlationId, final long timestampMs)

File: aeron-archive/src/main/java/io/aeron/archive/AbstractListRecordingsSession.java
Patch:
@@ -72,7 +72,7 @@ public int doWork()
 
     public void close()
     {
-        controlSession.hasActiveListing(false);
+        controlSession.activeListing(null);
     }
 
     protected abstract int sendDescriptors();

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingSubscriptionsSession.java
Patch:
@@ -57,7 +57,7 @@ class ListRecordingSubscriptionsSession implements Session
 
     public void close()
     {
-        controlSession.hasActiveListing(false);
+        controlSession.activeListing(null);
     }
 
     public void abort()

File: aeron-driver/src/main/java/io/aeron/driver/buffer/FileStoreLogFactory.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.buffer;
 
+import io.aeron.exceptions.AeronException;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import org.agrona.ErrorHandler;
 import org.agrona.IoUtil;
@@ -155,8 +156,8 @@ private void checkStorage(final int termBufferLength)
 
             if (usableSpace < logLength)
             {
-                throw new IllegalStateException(
-                    "Insufficient usable storage for new log of length=" + logLength + " in " + fileStore);
+                throw new AeronException(
+                    "insufficient usable storage for new log of length=" + logLength + " in " + fileStore);
             }
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1677,7 +1677,7 @@ else if (Cluster.Role.FOLLOWER == role &&
             if (0 == count && logAdapter.isImageClosed())
             {
                 ctx.countedErrorHandler().onError(new ClusterException(
-                    "lost leader connection: logPosition" + logPosition() + " commitPosition=" + commitPosition.get() +
+                    "lost leader connection: logPosition=" + logPosition() + " commitPosition=" + commitPosition.get() +
                     " leadershipTermId=" + leadershipTermId + " leaderId=" + leaderMember.id()));
                 enterElection(nowMs);
                 return 1;

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1499,7 +1499,7 @@ void catchupLogPoll(final Subscription subscription, final int logSessionId, fin
             final Image image = logAdapter.image();
             if (logAdapter.poll(stopPosition) == 0 && image.isClosed())
             {
-                throw new ClusterException("unexpected close of image when replaying log");
+                throw new ClusterException("unexpected image close replaying log at position " + image.position());
             }
 
             final long appendedPosition = this.appendedPosition.get();

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -798,6 +798,7 @@ private void cleanBufferTo(final long newCleanPosition)
 
     private void trackConnection(final int transportIndex, final InetSocketAddress srcAddress, final long nowNs)
     {
+        imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1);
         ImageConnection imageConnection = imageConnections[transportIndex];
 
         if (null == imageConnection)

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -798,6 +798,7 @@ private void cleanBufferTo(final long newCleanPosition)
 
     private void trackConnection(final int transportIndex, final InetSocketAddress srcAddress, final long nowNs)
     {
+        imageConnections = ArrayUtil.ensureCapacity(imageConnections, transportIndex + 1);
         ImageConnection imageConnection = imageConnections[transportIndex];
 
         if (null == imageConnection)

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -1384,7 +1384,7 @@ public static class Configuration
          * for dynamic subscribers, an endpoint can be added to the subscription side for controlling port usage.
          */
         public static final String RECORDING_EVENTS_CHANNEL_DEFAULT =
-            "aeron:udp?control=localhost:8030|control-mode=dynamic";
+            "aeron:udp?control-mode=dynamic|control=localhost:8030";
 
         /**
          * Stream id within a channel for receiving progress of recordings from an archive.

File: aeron-cluster/src/test/java/io/aeron/cluster/StartClusterFromTruncatedRecordingLogTest.java
Patch:
@@ -343,6 +343,7 @@ private void startNode(final int index, final boolean cleanStart)
                 .controlStreamId(archiveCtx.controlRequestStreamId())
                 .localControlChannel("aeron:ipc?term-length=64k")
                 .localControlStreamId(archiveCtx.controlRequestStreamId())
+                .recordingEventsChannel("aeron:udp?control-mode=dynamic|control=localhost:803" + index)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .errorHandler(Throwable::printStackTrace)
                 .deleteArchiveOnStart(cleanStart),

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -1381,7 +1381,8 @@ public static class Configuration
          * For production it is recommended that multicast or dynamic multi-destination-cast (MDC) is used to allow
          * for dynamic subscribers.
          */
-        public static final String RECORDING_EVENTS_CHANNEL_DEFAULT = "aeron:udp?endpoint=localhost:8030";
+        public static final String RECORDING_EVENTS_CHANNEL_DEFAULT =
+            "aeron:udp?control=localhost:8030|control-mode=dynamic";
 
         /**
          * Stream id within a channel for receiving progress of recordings from an archive.

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventLogger.java
Patch:
@@ -9,10 +9,10 @@
 
 import static io.aeron.agent.ClusterEventCode.ELECTION_STATE_CHANGE;
 
-final class ClusterEventLogger
+public final class ClusterEventLogger
 {
     static final long ENABLED_EVENT_CODES = EventConfiguration.getEnabledClusterEventCodes();
-    static final ClusterEventLogger LOGGER = new ClusterEventLogger(EventConfiguration.EVENT_RING_BUFFER);
+    public static final ClusterEventLogger LOGGER = new ClusterEventLogger(EventConfiguration.EVENT_RING_BUFFER);
     private static final ThreadLocal<MutableDirectBuffer> ENCODING_BUFFER = ThreadLocal.withInitial(
         () -> new UnsafeBuffer(ByteBuffer.allocateDirect(EventConfiguration.MAX_EVENT_LENGTH)));
 
@@ -23,7 +23,7 @@ private ClusterEventLogger(final ManyToOneRingBuffer eventRingBuffer)
         ringBuffer = eventRingBuffer;
     }
 
-    void logElectionStateChange(final Election.State newState, final long nowMs)
+    public void logElectionStateChange(final Election.State newState, final long nowMs)
     {
         if (ClusterEventCode.isEnabled(ELECTION_STATE_CHANGE, ENABLED_EVENT_CODES))
         {

File: aeron-agent/src/main/java/io/aeron/agent/EventLogReaderAgent.java
Patch:
@@ -94,17 +94,16 @@ public void onMessage(final int msgTypeId, final MutableDirectBuffer buffer, fin
         if (DriverEventCode.EVENT_CODE_TYPE == identifier.eventCodeTypeId)
         {
             DriverEventCode.get(identifier.eventCodeId).decode(buffer, index, builder);
-            builder.append(System.lineSeparator());
         }
         else if (ClusterEventCode.EVENT_CODE_TYPE == identifier.eventCodeTypeId)
         {
             ClusterEventCode.get(identifier.eventCodeId).decode(buffer, index, builder);
         }
         else
         {
-            builder.append("Unknown EventCodeType: ").append(identifier.eventCodeTypeId)
-                .append(System.lineSeparator());
+            builder.append("Unknown EventCodeType: ").append(identifier.eventCodeTypeId);
         }
+        builder.append(System.lineSeparator());
 
         if (null == fileChannel)
         {

File: aeron-agent/src/main/java/io/aeron/agent/ClusterEventCode.java
Patch:
@@ -9,7 +9,7 @@ public enum ClusterEventCode
 {
     ELECTION_STATE_CHANGE(0, ClusterEventDissector::electionStateChange);
 
-    static final int EVENT_CODE_TYPE = EventCodeType.DRIVER.getTypeCode();
+    static final int EVENT_CODE_TYPE = EventCodeType.CLUSTER.getTypeCode();
     private static final int MAX_ID = 63;
     private static final ClusterEventCode[] EVENT_CODE_BY_ID = new ClusterEventCode[MAX_ID];
 

File: aeron-agent/src/main/java/io/aeron/agent/EventCode.java
Patch:
@@ -66,9 +66,11 @@ public enum EventCode
 
     CMD_OUT_ON_CLIENT_TIMEOUT(43, EventDissector::dissectAsCommand);
 
+    static final int EVENT_CODE_TYPE = EventCodeType.DRIVER.getTypeCode();
     private static final int MAX_ID = 63;
     private static final EventCode[] EVENT_CODE_BY_ID = new EventCode[MAX_ID];
 
+
     @FunctionalInterface
     interface DissectFunction
     {

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestAdapter.java
Patch:
@@ -58,7 +58,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
     {
         headerDecoder.wrap(buffer, offset);
 
-        final int schemaId = headerDecoder.sbeSchemaId();
+        final int schemaId = headerDecoder.schemaId();
         if (schemaId != MessageHeaderDecoder.SCHEMA_ID)
         {
             throw new ArchiveException("expected schemaId=" + MessageHeaderDecoder.SCHEMA_ID + ", actual=" + schemaId);

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -172,7 +172,7 @@ public ControlledFragmentAssembler.Action onFragment(
     {
         messageHeaderDecoder.wrap(buffer, offset);
 
-        final int schemaId = messageHeaderDecoder.sbeSchemaId();
+        final int schemaId = messageHeaderDecoder.schemaId();
         if (schemaId != MessageHeaderDecoder.SCHEMA_ID)
         {
             throw new ArchiveException("expected schemaId=" + MessageHeaderDecoder.SCHEMA_ID + ", actual=" + schemaId);

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAdapter.java
Patch:
@@ -93,7 +93,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     messageHeaderDecoder.blockLength(),
                     messageHeaderDecoder.version());
 
-                consensusModuleAgent.onCancelTimer(scheduleTimerDecoder.correlationId());
+                consensusModuleAgent.onCancelTimer(cancelTimerDecoder.correlationId());
                 break;
 
             case ServiceAckDecoder.TEMPLATE_ID:

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -178,10 +178,10 @@ public static class Configuration
         public static final String DEFAULT_IDLE_STRATEGY = "org.agrona.concurrent.BackoffIdleStrategy";
 
         public static final String MAX_CONCURRENT_RECORDINGS_PROP_NAME = "aeron.archive.max.concurrent.recordings";
-        public static final int MAX_CONCURRENT_RECORDINGS_DEFAULT = 128;
+        public static final int MAX_CONCURRENT_RECORDINGS_DEFAULT = 50;
 
         public static final String MAX_CONCURRENT_REPLAYS_PROP_NAME = "aeron.archive.max.concurrent.replays";
-        public static final int MAX_CONCURRENT_REPLAYS_DEFAULT = 128;
+        public static final int MAX_CONCURRENT_REPLAYS_DEFAULT = 50;
 
         public static final String MAX_CATALOG_ENTRIES_PROP_NAME = "aeron.archive.max.catalog.entries";
         public static final long MAX_CATALOG_ENTRIES_DEFAULT = Catalog.DEFAULT_MAX_ENTRIES;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -640,6 +640,7 @@ else if (!file.delete())
     ControlSession newControlSession(
         final long correlationId,
         final int streamId,
+        @SuppressWarnings("unused") final int version,
         final String channel,
         final ControlSessionDemuxer demuxer)
     {

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestAdapter.java
Patch:
@@ -76,6 +76,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 listener.onConnect(
                     connectRequestDecoder.correlationId(),
                     connectRequestDecoder.responseStreamId(),
+                    connectRequestDecoder.version(),
                     connectRequestDecoder.responseChannel());
                 break;
             }

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestListener.java
Patch:
@@ -22,7 +22,7 @@
  */
 interface ControlRequestListener
 {
-    void onConnect(long correlationId, int streamId, String channel);
+    void onConnect(long correlationId, int streamId, int version, String channel);
 
     void onCloseSession(long controlSessionId);
 

File: aeron-archive/src/main/java/io/aeron/archive/ControlSessionDemuxer.java
Patch:
@@ -87,9 +87,9 @@ public int doWork()
         return workCount;
     }
 
-    public void onConnect(final long correlationId, final int streamId, final String channel)
+    public void onConnect(final long correlationId, final int streamId, final int version, final String channel)
     {
-        final ControlSession session = conductor.newControlSession(correlationId, streamId, channel, this);
+        final ControlSession session = conductor.newControlSession(correlationId, streamId, version, channel, this);
         controlSessionByIdMap.put(session.sessionId(), session);
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/client/ArchiveProxy.java
Patch:
@@ -128,6 +128,7 @@ public boolean connect(final String responseChannel, final int responseStreamId,
             .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder)
             .correlationId(correlationId)
             .responseStreamId(responseStreamId)
+            .version(AeronArchive.Configuration.SEMANTIC_VERSION)
             .responseChannel(responseChannel);
 
         return offerWithTimeout(connectRequestEncoder.encodedLength(), null);
@@ -148,6 +149,7 @@ public boolean tryConnect(final String responseChannel, final int responseStream
             .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder)
             .correlationId(correlationId)
             .responseStreamId(responseStreamId)
+            .version(AeronArchive.Configuration.SEMANTIC_VERSION)
             .responseChannel(responseChannel);
 
         final int length = MessageHeaderEncoder.ENCODED_LENGTH + connectRequestEncoder.encodedLength();
@@ -174,6 +176,7 @@ public boolean connect(
             .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder)
             .correlationId(correlationId)
             .responseStreamId(responseStreamId)
+            .version(AeronArchive.Configuration.SEMANTIC_VERSION)
             .responseChannel(responseChannel);
 
         return offerWithTimeout(connectRequestEncoder.encodedLength(), aeronClientInvoker);

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterSession.java
Patch:
@@ -35,7 +35,7 @@ class ClusterSession
 
     enum State
     {
-        INIT, CONNECTED, CHALLENGED, AUTHENTICATED, REJECTED, OPEN, CLOSED
+        INIT, CONNECTED, CHALLENGED, AUTHENTICATED, REJECTED, INVALID_VERSION, OPEN, CLOSED
     }
 
     private boolean hasNewLeaderEventPending = false;

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -754,7 +754,7 @@ void clearSessionsAfter(final long logPosition)
         for (final Iterator<ClusterSession> i = sessionByIdMap.values().iterator(); i.hasNext(); )
         {
             final ClusterSession session = i.next();
-            if (session.openedLogPosition() >= logPosition)
+            if (session.openedLogPosition() > logPosition)
             {
                 i.remove();
                 session.close();

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -754,7 +754,7 @@ void clearSessionsAfter(final long logPosition)
         for (final Iterator<ClusterSession> i = sessionByIdMap.values().iterator(); i.hasNext(); )
         {
             final ClusterSession session = i.next();
-            if (session.openedLogPosition() >= logPosition)
+            if (session.openedLogPosition() > logPosition)
             {
                 i.remove();
                 session.close();

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -609,7 +609,7 @@ public void shouldCatchupFromEmptyLogThenSnapshotAfterShutdownAndFollowerCleanSt
             assertTrue(cluster.node(2).service().wasSnapshotTaken());
         }
     }
-    
+
     @Test(timeout = 30_000)
     public void shouldCatchUpAfterFollowerMissesOneMessage() throws Exception
     {

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -91,6 +91,7 @@ public int poll()
         correlationId = -1;
         relevantId = -1;
         templateId = -1;
+        errorMessage = null;
         pollComplete = false;
 
         return subscription.controlledPoll(fragmentAssembler, fragmentLimit);

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class ControlResponsePoller implements ControlledFragmentHandler
 {
-    private static final int FRAGMENT_LIMIT = 10;
+    private static final int FRAGMENT_LIMIT = 1;
 
     private final MessageHeaderDecoder messageHeaderDecoder = new MessageHeaderDecoder();
     private final ControlResponseDecoder controlResponseDecoder = new ControlResponseDecoder();

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class ControlResponsePoller implements ControlledFragmentHandler
 {
-    private static final int FRAGMENT_LIMIT = 10;
+    private static final int FRAGMENT_LIMIT = 1;
 
     private final MessageHeaderDecoder messageHeaderDecoder = new MessageHeaderDecoder();
     private final ControlResponseDecoder controlResponseDecoder = new ControlResponseDecoder();

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -364,7 +364,7 @@ void onSessionOpen(
 
         if (sessionByIdMap.containsKey(clusterSessionId))
         {
-            throw new ClusterException("clashing clusterSessionId=" + clusterSessionId +
+            throw new ClusterException("clashing open clusterSessionId=" + clusterSessionId +
                 " leadershipTermId=" + leadershipTermId + " logPosition=" + logPosition);
         }
 
@@ -393,7 +393,7 @@ void onSessionClose(
         if (null == session)
         {
             throw new ClusterException(
-                "unknown clusterSessionId=" + clusterSessionId + " reason=" + closeReason +
+                "unknown clusterSessionId=" + clusterSessionId + " for close reason=" + closeReason +
                 " leadershipTermId=" + leadershipTermId + " logPosition=" + logPosition);
         }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -169,7 +169,7 @@ public int doWork()
 
     public String roleName()
     {
-        return ctx.serviceName();
+        return ctx.serviceName() + "_" + memberId;
     }
 
     public Cluster.Role role()

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public class SampleConfiguration
         LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, 0);
         PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 10);
         PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 10);
-        FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 20);
+        FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 10);
         MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 32);
         RANDOM_MESSAGE_LENGTH = Boolean.getBoolean(RANDOM_MESSAGE_LENGTH_PROP);
         NUMBER_OF_MESSAGES = Long.getLong(NUMBER_OF_MESSAGES_PROP, 10_000_000);

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -68,9 +68,9 @@ public class SampleConfiguration
         PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 10);
         PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 10);
         FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 20);
-        MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 256);
+        MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 32);
         RANDOM_MESSAGE_LENGTH = Boolean.getBoolean(RANDOM_MESSAGE_LENGTH_PROP);
-        NUMBER_OF_MESSAGES = Long.getLong(NUMBER_OF_MESSAGES_PROP, 1_000_000);
+        NUMBER_OF_MESSAGES = Long.getLong(NUMBER_OF_MESSAGES_PROP, 10_000_000);
         WARMUP_NUMBER_OF_MESSAGES = Long.getLong(WARMUP_NUMBER_OF_MESSAGES_PROP, 10_000);
         WARMUP_NUMBER_OF_ITERATIONS = Integer.getInteger(WARMUP_NUMBER_OF_ITERATIONS_PROP, 5);
         EMBEDDED_MEDIA_DRIVER = Boolean.getBoolean(EMBEDDED_MEDIA_DRIVER_PROP);

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -118,7 +118,7 @@ public ChannelUriStringBuilder validate()
             if (termId - initialTermId < 0)
             {
                 throw new IllegalStateException(
-                    "difference greater than 2^31 - 1: initialTermId=" + initialTermId + " for termId=" + termId);
+                    "difference greater than 2^31 - 1: initialTermId=" + initialTermId + " when termId=" + termId);
             }
 
             if (null != termLength && termOffset > termLength)

File: aeron-driver/src/main/java/io/aeron/driver/SubscriptionParams.java
Patch:
@@ -85,8 +85,9 @@ static SubscriptionParams getSubscriptionParams(final ChannelUri channelUri, fin
 
             if (params.termId - params.initialTermId < 0)
             {
-                throw new IllegalStateException("difference greater than 2^31 - 1: initialTermId=" +
-                    params.initialTermId + " for termId=" + params.termId);
+                throw new IllegalStateException(
+                    "difference greater than 2^31 - 1: " + INITIAL_TERM_ID_PARAM_NAME + "=" +
+                    params.initialTermId + " when " + TERM_ID_PARAM_NAME + "=" + params.termId);
             }
 
             params.hasJoinPosition = true;

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -459,7 +459,7 @@ public void onSessionMessage(
             new ClusteredServiceContainer.Context()
                 .clusteredService(service)
                 .terminationHook(TestUtil.TERMINATION_HOOK)
-                .errorHandler(Throwable::printStackTrace));
+                .errorHandler(TestUtil.errorHandler(0)));
     }
 
     private AeronCluster connectToCluster(final CredentialsSupplier credentialsSupplier)
@@ -483,7 +483,7 @@ private void launchClusteredMediaDriver(final AuthenticatorSupplier authenticato
             new MediaDriver.Context()
                 .warnIfDirectoryExists(true)
                 .threadingMode(ThreadingMode.SHARED)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(TestUtil.errorHandler(0))
                 .dirDeleteOnStart(true),
             new Archive.Context()
                 .maxCatalogEntries(MAX_CATALOG_ENTRIES)

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -478,7 +478,7 @@ public void onLoadSnapshot(final Image snapshotImage)
             new ClusteredServiceContainer.Context()
                 .clusteredService(service)
                 .terminationHook(TestUtil.TERMINATION_HOOK)
-                .errorHandler(Throwable::printStackTrace));
+                .errorHandler(TestUtil.errorHandler(0)));
     }
 
     private AeronCluster connectToCluster()
@@ -509,14 +509,14 @@ private void launchClusteredMediaDriver(final boolean initialLaunch)
                 .warnIfDirectoryExists(initialLaunch)
                 .threadingMode(ThreadingMode.SHARED)
                 .termBufferSparseFile(true)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(TestUtil.errorHandler(0))
                 .dirDeleteOnStart(true),
             new Archive.Context()
                 .maxCatalogEntries(MAX_CATALOG_ENTRIES)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .deleteArchiveOnStart(initialLaunch),
             new ConsensusModule.Context()
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(TestUtil.errorHandler(0))
                 .snapshotCounter(mockSnapshotCounter)
                 .terminationHook(TestUtil.TERMINATION_HOOK)
                 .deleteDirOnStart(initialLaunch));

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -52,14 +52,14 @@ public void before()
             new MediaDriver.Context()
                 .threadingMode(ThreadingMode.SHARED)
                 .termBufferSparseFile(true)
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(TestUtil.errorHandler(0))
                 .dirDeleteOnStart(true),
             new Archive.Context()
                 .maxCatalogEntries(MAX_CATALOG_ENTRIES)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .deleteArchiveOnStart(true),
             new ConsensusModule.Context()
-                .errorHandler(Throwable::printStackTrace)
+                .errorHandler(TestUtil.errorHandler(0))
                 .terminationHook(TestUtil.TERMINATION_HOOK)
                 .deleteDirOnStart(true));
     }
@@ -229,7 +229,7 @@ public void onTimerEvent(final long correlationId, final long timestampMs)
             new ClusteredServiceContainer.Context()
                 .clusteredService(timedService)
                 .terminationHook(TestUtil.TERMINATION_HOOK)
-                .errorHandler(Throwable::printStackTrace));
+                .errorHandler(TestUtil.errorHandler(0)));
     }
 
     private AeronCluster connectToCluster(final EgressListener egressListener)

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -771,12 +771,13 @@ private void startRecordingSession(
         final int mtuLength = image.mtuLength();
         final int initialTermId = image.initialTermId();
         final long startPosition = image.joinPosition();
+        final int segmentFileLength = Math.max(ctx.segmentFileLength(), termBufferLength);
 
         final long recordingId = catalog.addNewRecording(
             startPosition,
             cachedEpochClock.time(),
             initialTermId,
-            ctx.segmentFileLength(),
+            segmentFileLength,
             termBufferLength,
             mtuLength,
             sessionId,
@@ -792,7 +793,7 @@ private void startRecordingSession(
         final RecordingSession session = new RecordingSession(
             recordingId,
             startPosition,
-            Math.max(ctx.segmentFileLength(), termBufferLength),
+            segmentFileLength,
             originalChannel,
             recordingEventsProxy,
             image,

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -771,12 +771,13 @@ private void startRecordingSession(
         final int mtuLength = image.mtuLength();
         final int initialTermId = image.initialTermId();
         final long startPosition = image.joinPosition();
+        final int segmentFileLength = Math.max(ctx.segmentFileLength(), termBufferLength);
 
         final long recordingId = catalog.addNewRecording(
             startPosition,
             cachedEpochClock.time(),
             initialTermId,
-            ctx.segmentFileLength(),
+            segmentFileLength,
             termBufferLength,
             mtuLength,
             sessionId,
@@ -792,7 +793,7 @@ private void startRecordingSession(
         final RecordingSession session = new RecordingSession(
             recordingId,
             startPosition,
-            Math.max(ctx.segmentFileLength(), termBufferLength),
+            segmentFileLength,
             originalChannel,
             recordingEventsProxy,
             image,

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1686,7 +1686,7 @@ private void checkServiceHeartbeats(final long nowMs)
 
                 if (heartbeat < heartbeatThreshold)
                 {
-                    ctx.errorHandler().onError(new TimeoutException("no heartbeat from service: " + heartbeat));
+                    ctx.countedErrorHandler().onError(new TimeoutException("no heartbeat from service: " + heartbeat));
                     ctx.terminationHook().run();
                 }
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -254,7 +254,7 @@ public long offer(final DirectBuffer buffer, final int offset, final int length)
     }
 
     /**
-     * Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced cluster
+     * Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster
      * ingress header so must be left unused.
      *
      * @param vectors which make up the message.

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClientSession.java
Patch:
@@ -133,7 +133,7 @@ public long offer(final DirectBuffer buffer, final int offset, final int length)
     }
 
     /**
-     * Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced cluster
+     * Non-blocking publish by gathering buffer vectors into a message. The first vector will be replaced by the cluster
      * egress header so must be left unused.
      *
      * @param vectors which make up the message.
@@ -154,8 +154,9 @@ void connect(final Aeron aeron)
             {
                 responsePublication = aeron.addPublication(responseChannel, responseStreamId);
             }
-            catch (final RegistrationException ignore)
+            catch (final RegistrationException ex)
             {
+                cluster.handleError(ex);
             }
         }
     }

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -649,9 +649,9 @@ public Context epochClock(final EpochClock clock)
         }
 
         /**
-         * Get the {@link java.time.Clock} used by the client for the epoch time in milliseconds.
+         * Get the {@link EpochClock} used by the client for the epoch time in milliseconds.
          *
-         * @return the {@link java.time.Clock} used by the client for the epoch time in milliseconds.
+         * @return the {@link EpochClock} used by the client for the epoch time in milliseconds.
          */
         public EpochClock epochClock()
         {

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -70,7 +70,6 @@ public ChannelUriStringBuilder clear()
         tags = null;
         alias = null;
         reliable = null;
-        sparse = null;
         ttl = null;
         mtu = null;
         termLength = null;
@@ -79,6 +78,7 @@ public ChannelUriStringBuilder clear()
         termOffset = null;
         sessionId = null;
         linger = null;
+        sparse = null;
         isSessionIdTagged = false;
 
         return this;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -907,7 +907,7 @@ private void validateImageForExtendRecording(
                 " image joinPosition " + image.joinPosition() +
                 " not equal to recording stopPosition " + recordingSummary.stopPosition;
 
-            controlSession.attemptErrorResponse(correlationId, msg, controlResponseProxy);
+            controlSession.attemptErrorResponse(correlationId, INVALID_EXTENSION, msg, controlResponseProxy);
             throw new ArchiveException(msg);
         }
 
@@ -917,7 +917,7 @@ private void validateImageForExtendRecording(
                 " image termBufferLength " + image.termBufferLength() +
                 " not equal to recording termBufferLength " + recordingSummary.termBufferLength;
 
-            controlSession.attemptErrorResponse(correlationId, msg, controlResponseProxy);
+            controlSession.attemptErrorResponse(correlationId, INVALID_EXTENSION, msg, controlResponseProxy);
             throw new ArchiveException(msg);
         }
 
@@ -927,7 +927,7 @@ private void validateImageForExtendRecording(
                 " image mtuLength " + image.mtuLength() +
                 " not equal to recording mtuLength " + recordingSummary.mtuLength;
 
-            controlSession.attemptErrorResponse(correlationId, msg, controlResponseProxy);
+            controlSession.attemptErrorResponse(correlationId, INVALID_EXTENSION, msg, controlResponseProxy);
             throw new ArchiveException(msg);
         }
     }

File: aeron-archive/src/main/java/io/aeron/archive/client/ArchiveException.java
Patch:
@@ -31,6 +31,7 @@ public class ArchiveException extends AeronException
     public static final int UNKNOWN_REPLAY = 6;
     public static final int MAX_REPLAYS = 7;
     public static final int MAX_RECORDINGS = 8;
+    public static final int INVALID_EXTENSION = 9;
 
     private final int errorCode;
 

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -288,7 +288,7 @@ void sendErrorResponse(
 
     void attemptErrorResponse(final long correlationId, final String errorMessage, final ControlResponseProxy proxy)
     {
-        proxy.attemptErrorResponse(controlSessionId, GENERIC, correlationId, errorMessage, controlPublication);
+        proxy.attemptErrorResponse(controlSessionId, correlationId, GENERIC, errorMessage, controlPublication);
     }
 
     void attemptErrorResponse(

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -433,6 +433,9 @@ public static long resourceLingerDurationNs()
      * A number of the properties are for testing and should not be set by end users.
      * <p>
      * <b>Note:</b> Do not reuse instances of the context across different {@link Aeron} clients.
+     * <p>
+     * The context will be owned by {@link ClientConductor} after a successful
+     * {@link Aeron#connect(Context)} and closed via {@link Aeron#close()}.
      */
     public static class Context extends CommonContext
     {

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -50,7 +50,7 @@
  * <li><code>aeron.dir</code>: Use value as directory name for Aeron buffers and status.</li>
  * </ul>
  */
-public class CommonContext implements AutoCloseable, Cloneable
+public class CommonContext implements Cloneable
 {
     /**
      * Property name for driver timeout after which the driver is considered inactive.

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -148,7 +148,7 @@ private AeronCluster(final Context ctx)
                 CloseHelper.quietClose(subscription);
             }
 
-            CloseHelper.quietClose(ctx);
+            ctx.close();
             throw ex;
         }
     }
@@ -951,7 +951,7 @@ public static int egressStreamId()
     /**
      * Context for cluster session and connection.
      */
-    public static class Context implements AutoCloseable, Cloneable
+    public static class Context implements Cloneable
     {
         private long messageTimeoutNs = Configuration.messageTimeoutNs();
         private String clusterMemberEndpoints = Configuration.clusterMemberEndpoints();

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -396,6 +396,9 @@ private static void removeTrailingSlashes(final StringBuilder builder)
      * Configuration for the {@link MediaDriver} that can be used to override {@link Configuration}.
      * <p>
      * <b>Note:</b> Do not reuse instances of this {@link Context} across different {@link MediaDriver}s.
+     * <p>
+     * The context will be owned by {@link DriverConductor} after a successful
+     * {@link MediaDriver#launch(Context)} and closed via {@link MediaDriver#close()}.
      */
     public static class Context extends CommonContext
     {

File: aeron-system-tests/src/test/java/io/aeron/StartStopSystemTest.java
Patch:
@@ -55,11 +55,10 @@ public void shouldNotSegvIfContextIsClosed()
             .errorHandler(Throwable::printStackTrace)
             .threadingMode(ThreadingMode.INVOKER))
         {
-            mediaDriver = MediaDriver.launchEmbedded(driverCtx);
+            mediaDriver = MediaDriver.launch(driverCtx);
         }
 
         mediaDriver.sharedAgentInvoker().invoke();
-
         mediaDriver.close();
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -1309,9 +1309,7 @@ public void close()
             }
 
             CloseHelper.close(catalog);
-            catalog = null;
             CloseHelper.close(markFile);
-            markFile = null;
             CloseHelper.close(archiveDirChannel);
             archiveDirChannel = null;
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -205,6 +205,7 @@ public void onClose()
         }
 
         CloseHelper.close(archive);
+        ctx.close();
     }
 
     public void onStart()

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -133,6 +133,8 @@ public void onClose()
             CloseHelper.close(serviceAdapter);
             CloseHelper.close(consensusModuleProxy);
         }
+
+        ctx.close();
     }
 
     public int doWork()

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -129,7 +129,6 @@ public Context context()
     public void close()
     {
         CloseHelper.close(serviceAgentRunner);
-        CloseHelper.close(ctx);
     }
 
     /**
@@ -1251,12 +1250,12 @@ public void deleteDirectory()
          */
         public void close()
         {
-            CloseHelper.quietClose(markFile);
-
             if (ownsAeronClient)
             {
                 CloseHelper.close(aeron);
             }
+
+            CloseHelper.close(markFile);
         }
 
         private void concludeMarkFile()

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -106,7 +106,6 @@ public void close()
     {
         CloseHelper.close(conductorInvoker);
         CloseHelper.close(conductorRunner);
-        CloseHelper.close(ctx);
     }
 
     private Archive start()
@@ -1310,8 +1309,11 @@ public void close()
             }
 
             CloseHelper.close(catalog);
+            catalog = null;
             CloseHelper.close(markFile);
+            markFile = null;
             CloseHelper.close(archiveDirChannel);
+            archiveDirChannel = null;
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -165,6 +165,8 @@ protected void postSessionsClose()
             CloseHelper.close(controlSubscription);
             CloseHelper.close(recordingEventsProxy);
         }
+
+        ctx.close();
     }
 
     protected int preWork()

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -142,6 +142,8 @@ public void onClose()
         publicationImages.forEach(PublicationImage::free);
         networkPublications.forEach(NetworkPublication::free);
         ipcPublications.forEach(IpcPublication::free);
+
+        ctx.close();
     }
 
     public String roleName()

File: aeron-client/src/main/java/io/aeron/LogBuffers.java
Patch:
@@ -184,12 +184,11 @@ public FileChannel fileChannel()
 
     public void close()
     {
+        CloseHelper.close(fileChannel);
         for (final MappedByteBuffer buffer : mappedByteBuffers)
         {
             IoUtil.unmap(buffer);
         }
-
-        CloseHelper.close(fileChannel);
     }
 
     /**

File: aeron-client/src/test/java/io/aeron/ChannelUriStringBuilderTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldGenerateComplexUdpChannel()
             .ttl(9)
             .termLength(1024 * 128);
 
-        assertThat(builder.build(), is("aeron:udp?endpoint=localhost:9999|ttl=9|term-length=131072"));
+        assertThat(builder.build(), is("aeron:udp?endpoint=localhost:9999|term-length=131072|ttl=9"));
     }
 
     @Test

File: aeron-driver/src/main/java/io/aeron/driver/media/InterfaceSearchAddress.java
Patch:
@@ -30,7 +30,7 @@ class InterfaceSearchAddress
     private static final Pattern IPV4_ADDRESS_PATTERN = Pattern.compile(
         "([^:/]+)(?::(?<port>[0-9]+))?(?:/(?<subnet>[0-9]+))?");
     private static final Pattern IPV6_ADDRESS_PATTERN = Pattern.compile(
-        "\\[([0-9A-Fa-f:]+)\\](?::(?<port>[0-9]+))?(?:/(?<subnet>[0-9]+))?");
+        "\\[([0-9A-Fa-f:]+)](?::(?<port>[0-9]+))?(?:/(?<subnet>[0-9]+))?");
 
     private final InetSocketAddress address;
     private final int subnetPrefix;
@@ -65,7 +65,7 @@ static InterfaceSearchAddress parse(final String s) throws UnknownHostException
     {
         if (Strings.isEmpty(s))
         {
-            throw new IllegalArgumentException("Search address string is null or empty");
+            throw new IllegalArgumentException("search address string is null or empty");
         }
 
         final Matcher matcher = getMatcher(s);
@@ -99,6 +99,6 @@ private static Matcher getMatcher(final CharSequence cs)
             return ipV6Matcher;
         }
 
-        throw new IllegalArgumentException("Invalid search address: " + cs);
+        throw new IllegalArgumentException("invalid search address: " + cs);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/ClientCommandAdapter.java
Patch:
@@ -200,8 +200,7 @@ else if (channel.startsWith(SPY_PREFIX))
                 {
                     correlatedMsgFlyweight.wrap(buffer, index);
 
-                    correlationId = correlatedMsgFlyweight.correlationId();
-                    conductor.onClientClose(correlatedMsgFlyweight.clientId(), correlationId);
+                    conductor.onClientClose(correlatedMsgFlyweight.clientId());
                     break;
                 }
 

File: aeron-driver/src/main/java/io/aeron/driver/SubscriptionParams.java
Patch:
@@ -60,7 +60,7 @@ static SubscriptionParams getSubscriptionParams(final ChannelUri channelUri, fin
         {
             if (count < 3)
             {
-                throw new IllegalArgumentException("Params must be used as a complete set: " +
+                throw new IllegalArgumentException("params must be used as a complete set: " +
                     INITIAL_TERM_ID_PARAM_NAME + " " +
                     TERM_ID_PARAM_NAME + " " +
                     TERM_OFFSET_PARAM_NAME);

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -23,6 +23,7 @@
 import org.agrona.BitUtil;
 
 import java.net.*;
+import java.util.Objects;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static io.aeron.driver.media.NetworkUtil.*;
@@ -321,7 +322,7 @@ public boolean equals(final Object o)
 
         final UdpChannel that = (UdpChannel)o;
 
-        return !(canonicalForm != null ? !canonicalForm.equals(that.canonicalForm) : that.canonicalForm != null);
+        return Objects.equals(canonicalForm, that.canonicalForm);
     }
 
     public int hashCode()

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationSubscriptionTest.java
Patch:
@@ -35,9 +35,6 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyInt;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.*;
 
 public class MultiDestinationSubscriptionTest

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingsForUriSession.java
Patch:
@@ -72,7 +72,7 @@ protected int sendDescriptors()
 
             if (Catalog.isValidDescriptor(descriptorBuffer) &&
                 decoder.streamId() == streamId &&
-                decoder.strippedChannel().contains(channel))
+                decoder.originalChannel().contains(channel))
             {
                 final int bytesSent = controlSession.sendDescriptor(correlationId, descriptorBuffer, proxy);
                 if (bytesSent == 0)

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -333,7 +333,7 @@ void newListRecordingsForUriSession(
                 correlationId,
                 fromRecordingId,
                 count,
-                strippedChannelBuilder(ChannelUri.parse(channel)).build(),
+                channel,
                 streamId,
                 catalog,
                 controlResponseProxy,

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -436,7 +436,7 @@ public long findLast(final long minRecordingId, final int sessionId, final int s
 
                 if (sessionId == descriptorDecoder.sessionId() &&
                     streamId == descriptorDecoder.streamId() &&
-                    descriptorDecoder.strippedChannel().contains(channel))
+                    descriptorDecoder.originalChannel().contains(channel))
                 {
                     return recordingId;
                 }

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -776,7 +776,7 @@ public int listRecordings(
      *
      * @param fromRecordingId at which to begin the listing.
      * @param recordCount     to limit for each query.
-     * @param channel         for a contains match on the stripped channel stored with the archive descriptor
+     * @param channel         for a contains match on the original channel stored with the archive descriptor.
      * @param streamId        to match.
      * @param consumer        to which the descriptors are dispatched.
      * @return the number of descriptors found and consumed.
@@ -897,7 +897,7 @@ public long getStopPosition(final long recordingId)
      * Find the last recording that matches the given criteria.
      *
      * @param minRecordingId to search back to.
-     * @param channel        for a contains match on the stripped channel stored with the archive descriptor
+     * @param channel        for a contains match on the original channel stored with the archive descriptor.
      * @param streamId       of the recording to match.
      * @param sessionId      of the recording to match.
      * @return the recordingId if found otherwise {@link Aeron#NULL_VALUE} if not found.

File: aeron-system-tests/src/test/java/io/aeron/FlowControlStrategiesTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.File;
@@ -114,6 +115,7 @@ public void shouldSpinUpAndShutdown()
         }
     }
 
+    @Ignore
     @Test(timeout = 10_000)
     public void shouldTimeoutImageWhenBehindForTooLongWithMaxMulticastFlowControlStrategy() throws Exception
     {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -1097,6 +1097,7 @@ public void conclude()
 
             archiveContext
                 .aeron(aeron)
+                .errorHandler(countedErrorHandler)
                 .ownsAeronClient(false)
                 .lock(new NoOpLock());
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -558,6 +558,7 @@ public void conclude()
             archiveContext
                 .aeron(aeron)
                 .ownsAeronClient(false)
+                .errorHandler(countedErrorHandler)
                 .lock(new NoOpLock());
 
             if (null == shutdownSignalBarrier)

File: aeron-client/src/main/java/io/aeron/protocol/HeaderFlyweight.java
Patch:
@@ -85,7 +85,7 @@ public class HeaderFlyweight extends UnsafeBuffer
     public static final int VERSION_FIELD_OFFSET = 4;
     public static final int FLAGS_FIELD_OFFSET = 5;
     public static final int TYPE_FIELD_OFFSET = 6;
-    public static final int HEADER_LENGTH = TYPE_FIELD_OFFSET + SIZE_OF_SHORT;
+    public static final int MIN_HEADER_LENGTH = TYPE_FIELD_OFFSET + SIZE_OF_SHORT;
 
     public HeaderFlyweight()
     {

File: aeron-client/src/test/java/io/aeron/logbuffer/LogBufferUnblockerTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 import static io.aeron.logbuffer.LogBufferDescriptor.*;
-import static io.aeron.protocol.HeaderFlyweight.HEADER_LENGTH;
+import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
 
 public class LogBufferUnblockerTest
 {

File: aeron-client/src/test/java/io/aeron/logbuffer/TermUnblockerTest.java
Patch:
@@ -31,7 +31,7 @@
 import static io.aeron.logbuffer.TermUnblocker.Status.UNBLOCKED;
 import static io.aeron.logbuffer.TermUnblocker.Status.UNBLOCKED_TO_END;
 import static io.aeron.protocol.HeaderFlyweight.HDR_TYPE_PAD;
-import static io.aeron.protocol.HeaderFlyweight.HEADER_LENGTH;
+import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
 
 public class TermUnblockerTest
 {

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -268,7 +268,7 @@ public boolean isValidFrame(final UnsafeBuffer buffer, final int length)
             isFrameValid = false;
             invalidPackets.increment();
         }
-        else if (length < HeaderFlyweight.HEADER_LENGTH)
+        else if (length < HeaderFlyweight.MIN_HEADER_LENGTH)
         {
             isFrameValid = false;
             invalidPackets.increment();

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -33,7 +33,6 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.*;
 
-@Ignore
 public class MultiNodeTest
 {
     private static final String THREE_NODE_MEMBERS =

File: aeron-client/src/main/java/io/aeron/Image.java
Patch:
@@ -661,12 +661,12 @@ private void validatePosition(final long newPosition)
         if (newPosition < currentPosition || newPosition > limitPosition)
         {
             throw new IllegalArgumentException(
-                "newPosition " + newPosition + " out of range " + currentPosition + "-" + limitPosition);
+                newPosition + " newPosition out of range " + currentPosition + "-" + limitPosition);
         }
 
         if (0 != (newPosition & (FRAME_ALIGNMENT - 1)))
         {
-            throw new IllegalArgumentException("newPosition " + newPosition + " not aligned to FRAME_ALIGNMENT");
+            throw new IllegalArgumentException(newPosition + " newPosition not aligned to FRAME_ALIGNMENT");
         }
     }
 

File: aeron-client/src/main/java/io/aeron/Image.java
Patch:
@@ -661,12 +661,12 @@ private void validatePosition(final long newPosition)
         if (newPosition < currentPosition || newPosition > limitPosition)
         {
             throw new IllegalArgumentException(
-                "newPosition of " + newPosition + " out of range " + currentPosition + "-" + limitPosition);
+                "newPosition " + newPosition + " out of range " + currentPosition + "-" + limitPosition);
         }
 
         if (0 != (newPosition & (FRAME_ALIGNMENT - 1)))
         {
-            throw new IllegalArgumentException("newPosition of " + newPosition + " not aligned to FRAME_ALIGNMENT");
+            throw new IllegalArgumentException("newPosition " + newPosition + " not aligned to FRAME_ALIGNMENT");
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -840,7 +840,7 @@ public static class Context implements AutoCloseable, Cloneable
         private Aeron aeron;
         private CredentialsSupplier credentialsSupplier;
         private boolean ownsAeronClient = false;
-        private boolean isIngressExclusive = true;
+        private boolean isIngressExclusive = false;
         private ErrorHandler errorHandler = Aeron.Configuration.DEFAULT_ERROR_HANDLER;
         private EgressListener egressListener;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/DynamicJoin.java
Patch:
@@ -316,11 +316,11 @@ private int snapshotRetrieve()
                     snapshotRetrieveImage = null;
                     snapshotReader = null;
                     correlationId = NULL_VALUE;
+                    localArchive.stopRecording(snapshotRetrieveSubscriptionId);
                     snapshotReplaySessionId = NULL_VALUE;
 
                     if (++snapshotCursor >= leaderSnapshots.size())
                     {
-                        localArchive.stopRecording(snapshotRetrieveSubscriptionId);
                         state(State.SNAPSHOT_LOAD);
                         workCount++;
                     }

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -356,6 +356,7 @@ else if (this.logPosition > logPosition && this.logLeadershipTermId == logLeader
             }
             else
             {
+                catchupLogPosition = logPosition;
                 state(State.FOLLOWER_REPLAY, ctx.epochClock().time());
             }
         }

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -1051,7 +1051,7 @@ private void pollNextResponse(final long correlationId, final long deadlineNs, f
                 throw new ArchiveException("subscription to archive is not connected");
             }
 
-            checkDeadline(deadlineNs, "failed to establish response connection", correlationId);
+            checkDeadline(deadlineNs, "awaiting response", correlationId);
             idleStrategy.idle();
             invokeAeronClient();
         }

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -943,7 +943,7 @@ private void checkDeadline(final long deadlineNs, final String errorMessage, fin
             LangUtil.rethrowUnchecked(new InterruptedException());
         }
 
-        if (nanoClock.nanoTime() > deadlineNs)
+        if (deadlineNs - nanoClock.nanoTime() < 0)
         {
             throw new TimeoutException(errorMessage + " - correlationId=" + correlationId);
         }

File: aeron-archive/src/main/java/io/aeron/archive/client/ArchiveProxy.java
Patch:
@@ -586,7 +586,7 @@ private boolean offerWithTimeout(final int length, final AgentInvoker aeronClien
                 throw new ArchiveException("offer failed due to max position being reached");
             }
 
-            if (nanoClock.nanoTime() > deadlineNs)
+            if (deadlineNs - nanoClock.nanoTime() < 0)
             {
                 return false;
             }

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -664,7 +664,7 @@ private void checkDeadline(final long deadlineNs, final String errorMessage)
             LangUtil.rethrowUnchecked(new InterruptedException());
         }
 
-        if (nanoClock.nanoTime() > deadlineNs)
+        if (deadlineNs - nanoClock.nanoTime() < 0)
         {
             throw new TimeoutException(errorMessage);
         }

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -922,7 +922,7 @@ private void checkForBlockedToDriverCommands(final long nowNs)
         if (consumerPosition == lastConsumerCommandPosition)
         {
             if (toDriverCommands.producerPosition() > consumerPosition &&
-                nowNs > (timeOfLastToDriverPositionChangeNs + clientLivenessTimeoutNs))
+                ((timeOfLastToDriverPositionChangeNs + clientLivenessTimeoutNs) - nowNs < 0))
             {
                 if (toDriverCommands.unblock())
                 {
@@ -1557,7 +1557,7 @@ private void linkSpies(final ArrayList<SubscriptionLink> links, final NetworkPub
 
     private void updateClocks(final long nowNs)
     {
-        if (nowNs >= clockUpdateDeadlineNs)
+        if (clockUpdateDeadlineNs - nowNs < 0)
         {
             clockUpdateDeadlineNs = nowNs + CLOCK_UPDATE_DURATION_NS;
             cachedNanoClock.update(nowNs);
@@ -1569,7 +1569,7 @@ private int processTimers(final long nowNs)
     {
         int workCount = 0;
 
-        if (nowNs > (timeOfLastTimerCheckNs + timerIntervalNs))
+        if ((timeOfLastTimerCheckNs + timerIntervalNs) - nowNs < 0)
         {
             heartbeatAndCheckTimers(nowNs);
             checkForBlockedToDriverCommands(nowNs);

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -224,7 +224,7 @@ else if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPositio
             }
 
             case LINGER:
-                if (timeNs > (timeOfLastStateChangeNs + lingerTimeoutNs))
+                if ((timeOfLastStateChangeNs + lingerTimeoutNs) - timeNs < 0)
                 {
                     reachedEndOfLife = true;
                     conductor.cleanupIpcPublication(this);
@@ -333,7 +333,7 @@ private void checkForBlockedPublisher(final long producerPosition, final long ti
 
         if (consumerPosition == lastConsumerPosition && isPossiblyBlocked(producerPosition, consumerPosition))
         {
-            if (timeNs > (timeOfLastConsumerPositionUpdateNs + unblockTimeoutNs))
+            if ((timeOfLastConsumerPositionUpdateNs + unblockTimeoutNs) - timeNs < 0)
             {
                 if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPosition, termBufferLength))
                 {

File: aeron-driver/src/main/java/io/aeron/driver/LossDetector.java
Patch:
@@ -153,7 +153,7 @@ private void activateGap(final long nowNs, final Gap gap)
 
     private void checkTimerExpiry(final long nowNs)
     {
-        if (nowNs >= deadlineNs)
+        if (deadlineNs - nowNs <= 0)
         {
             lossHandler.onGapDetected(activeGap.termId, activeGap.termOffset, activeGap.length);
             deadlineNs = nowNs + delayGenerator.generateDelay();

File: aeron-driver/src/main/java/io/aeron/driver/MaxMulticastFlowControl.java
Patch:
@@ -78,7 +78,7 @@ public long onIdle(
     {
         if (isEndOfStream && shouldLinger)
         {
-            if (lastPosition >= senderPosition || timeNs > (timeOfLastStatusMessage + RECEIVER_TIMEOUT_NS))
+            if (lastPosition >= senderPosition || ((timeOfLastStatusMessage + RECEIVER_TIMEOUT_NS) - timeNs < 0))
             {
                 shouldLinger = false;
             }

File: aeron-driver/src/main/java/io/aeron/driver/MinMulticastFlowControl.java
Patch:
@@ -120,7 +120,7 @@ public long onIdle(
         for (int lastIndex = receiverList.size() - 1, i = lastIndex; i >= 0; i--)
         {
             final Receiver receiver = receiverList.get(i);
-            if (timeNs > (receiver.timeOfLastStatusMessageNs + RECEIVER_TIMEOUT))
+            if ((receiver.timeOfLastStatusMessageNs + RECEIVER_TIMEOUT) - timeNs < 0)
             {
                 ArrayListUtil.fastUnorderedRemove(receiverList, i, lastIndex--);
             }

File: aeron-driver/src/main/java/io/aeron/driver/PreferredMulticastFlowControl.java
Patch:
@@ -138,7 +138,7 @@ public long onIdle(
         for (int lastIndex = receiverList.size() - 1, i = lastIndex; i >= 0; i--)
         {
             final Receiver receiver = receiverList.get(i);
-            if (timeNs > (receiver.timeOfLastStatusMessageNs + RECEIVER_TIMEOUT))
+            if ((receiver.timeOfLastStatusMessageNs + RECEIVER_TIMEOUT) - timeNs < 0)
             {
                 ArrayListUtil.fastUnorderedRemove(receiverList, i, lastIndex--);
             }

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -224,7 +224,7 @@ private void checkPendingSetupMessages(final long nowNs)
         {
             final PendingSetupMessageFromSource pending = pendingSetupMessages.get(i);
 
-            if (nowNs > (pending.timeOfStatusMessageNs() + PENDING_SETUPS_TIMEOUT_NS))
+            if ((pending.timeOfStatusMessageNs() + PENDING_SETUPS_TIMEOUT_NS) - nowNs < 0)
             {
                 if (!pending.isPeriodic())
                 {

File: aeron-driver/src/main/java/io/aeron/driver/RetransmitHandler.java
Patch:
@@ -140,12 +140,12 @@ public void processTimeouts(final long nowNs, final RetransmitSender retransmitS
         {
             for (final RetransmitAction action : retransmitActionPool)
             {
-                if (DELAYED == action.state && nowNs > action.expireNs)
+                if (DELAYED == action.state && (action.expireNs - nowNs < 0))
                 {
                     retransmitSender.resend(action.termId, action.termOffset, action.length);
                     action.linger(determineLingerTimeout(), nanoClock.nanoTime());
                 }
-                else if (LINGERING == action.state && nowNs > action.expireNs)
+                else if (LINGERING == action.state && (action.expireNs - nowNs < 0))
                 {
                     action.cancel();
                     activeRetransmitsMap.remove(action.termId, action.termOffset);

File: aeron-driver/src/main/java/io/aeron/driver/Sender.java
Patch:
@@ -86,7 +86,7 @@ public int doWork()
         final int bytesSent = doSend(nowNs);
 
         int bytesReceived = 0;
-        if (0 == bytesSent || ++dutyCycleCounter == dutyCycleRatio || nowNs >= controlPollDeadlineNs)
+        if (0 == bytesSent || ++dutyCycleCounter == dutyCycleRatio || (controlPollDeadlineNs - nowNs < 0))
         {
             bytesReceived = controlTransportPoller.pollTransports();
 

File: aeron-driver/src/main/java/io/aeron/driver/UnicastFlowControl.java
Patch:
@@ -78,7 +78,7 @@ public long onIdle(
     {
         if (isEndOfStream && shouldLinger)
         {
-            if (lastPosition >= senderPosition || timeNs > (timeOfLastStatusMessage + RECEIVER_TIMEOUT_NS))
+            if (lastPosition >= senderPosition || ((timeOfLastStatusMessage + RECEIVER_TIMEOUT_NS) - timeNs < 0))
             {
                 shouldLinger = false;
             }

File: aeron-driver/src/main/java/io/aeron/driver/ext/CubicCongestionControl.java
Patch:
@@ -130,8 +130,8 @@ public boolean shouldMeasureRtt(final long nowNs)
     {
         return RTT_MEASUREMENT &&
             outstandingRttMeasurements < MAX_OUTSTANDING_RTT_MEASUREMENTS &&
-            (nowNs > (lastRttTimestampNs + RTT_MAX_TIMEOUT_NS) ||
-                nowNs > (lastRttTimestampNs + RTT_MEASUREMENT_TIMEOUT_NS));
+            (((lastRttTimestampNs + RTT_MAX_TIMEOUT_NS) - nowNs < 0) ||
+                ((lastRttTimestampNs + RTT_MEASUREMENT_TIMEOUT_NS) - nowNs < 0));
     }
 
     public void onRttMeasurementSent(final long nowNs)
@@ -167,7 +167,7 @@ public long onTrackRebuild(
             lastLossTimestampNs = nowNs;
             forceStatusMessage = true;
         }
-        else if (cwnd < maxCwnd && nowNs > (lastUpdateTimestampNs + windowUpdateTimeoutNs))
+        else if (cwnd < maxCwnd && ((lastUpdateTimestampNs + windowUpdateTimeoutNs) - nowNs < 0))
         {
             // W_cubic = C(T - K)^3 + w_max
             final double durationSinceDecr = (double)(nowNs - lastLossTimestampNs) / (double)SECOND_IN_NS;

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -129,7 +129,7 @@ int send(
         {
             final Destination destination = destinations.get(i);
 
-            if (nowNs > (destination.timeOfLastActivityNs + destinationTimeoutNs))
+            if ((destination.timeOfLastActivityNs + destinationTimeoutNs) - nowNs < 0)
             {
                 ArrayListUtil.fastUnorderedRemove(destinations, i, lastIndex--);
             }

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiRcvDestination.java
Patch:
@@ -120,8 +120,7 @@ public int sendToAll(
             if (null != controlAddress)
             {
                 final UdpChannelTransport transport = transports[i];
-
-                if (null != transport && nowNs < (controlAddress.timeOfLastFrameNs + destinationAddressTimeoutNs))
+                if (null != transport && ((controlAddress.timeOfLastFrameNs + destinationAddressTimeoutNs) - nowNs > 0))
                 {
                     buffer.position(position);
                     minBytesSent = Math.min(minBytesSent, sendTo(transport, buffer, controlAddress.address));

File: aeron-driver/src/test/java/io/aeron/driver/LossDetectorTest.java
Patch:
@@ -72,7 +72,6 @@ public class LossDetectorTest
     public LossDetectorTest()
     {
         lossHandler = mock(LossHandler.class);
-
         lossDetector = new LossDetector(DELAY_GENERATOR, lossHandler);
         dataHeader.wrap(rcvBuffer);
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -933,8 +933,7 @@ void onLoadSession(
     }
 
     @SuppressWarnings("unused")
-    void onReplaySessionClose(
-        final long correlationId, final long clusterSessionId, final long timestamp, final CloseReason closeReason)
+    void onReplaySessionClose(final long clusterSessionId, final long timestamp, final CloseReason closeReason)
     {
         clusterTimeMs(timestamp);
         sessionByIdMap.remove(clusterSessionId).close();

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAdapter.java
Patch:
@@ -146,7 +146,6 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                     messageHeaderDecoder.version());
 
                 consensusModuleAgent.onReplaySessionClose(
-                    sessionCloseEventDecoder.correlationId(),
                     sessionCloseEventDecoder.clusterSessionId(),
                     sessionCloseEventDecoder.timestamp(),
                     sessionCloseEventDecoder.closeReason());

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotLoader.java
Patch:
@@ -104,7 +104,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
 
                 consensusModuleAgent.onLoadSession(
                     clusterSessionDecoder.openedLogPosition(),
-                    clusterSessionDecoder.lastCorrelationId(),
+                    clusterSessionDecoder.correlationId(),
                     clusterSessionDecoder.clusterSessionId(),
                     clusterSessionDecoder.timeOfLastActivity(),
                     clusterSessionDecoder.closeReason(),

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotTaker.java
Patch:
@@ -51,7 +51,7 @@ void snapshotSession(final ClusterSession session)
                 clusterSessionEncoder
                     .wrapAndApplyHeader(bufferClaim.buffer(), bufferClaim.offset(), messageHeaderEncoder)
                     .clusterSessionId(session.id())
-                    .lastCorrelationId(session.lastCorrelationId())
+                    .correlationId(session.correlationId())
                     .timeOfLastActivity(session.timeOfLastActivityMs())
                     .openedLogPosition(session.openedLogPosition())
                     .closeReason(session.closeReason())

File: aeron-cluster/src/main/java/io/aeron/cluster/EgressPublisher.java
Patch:
@@ -55,7 +55,7 @@ boolean sendEvent(
                 sessionEventEncoder
                     .wrapAndApplyHeader(bufferClaim.buffer(), bufferClaim.offset(), messageHeaderEncoder)
                     .clusterSessionId(session.id())
-                    .correlationId(session.lastCorrelationId())
+                    .correlationId(session.correlationId())
                     .leadershipTermId(leadershipTermId)
                     .leaderMemberId(leaderMemberId)
                     .code(code)
@@ -82,7 +82,7 @@ boolean sendChallenge(final ClusterSession session, final byte[] encodedChalleng
         challengeEncoder
             .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder)
             .clusterSessionId(session.id())
-            .correlationId(session.lastCorrelationId())
+            .correlationId(session.correlationId())
             .putEncodedChallenge(encodedChallenge, 0, encodedChallenge.length);
 
         final int length = MessageHeaderEncoder.ENCODED_LENGTH + challengeEncoder.encodedLength();

File: aeron-cluster/src/main/java/io/aeron/cluster/IngressAdapter.java
Patch:
@@ -69,9 +69,8 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                 messageHeaderDecoder.version());
 
             return consensusModuleAgent.onIngressMessage(
-                ingressMessageHeaderDecoder.correlationId(),
-                ingressMessageHeaderDecoder.clusterSessionId(),
                 ingressMessageHeaderDecoder.leadershipTermId(),
+                ingressMessageHeaderDecoder.clusterSessionId(),
                 buffer,
                 offset + INGRESS_HEADER,
                 length - INGRESS_HEADER);

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAdapter.java
Patch:
@@ -98,7 +98,6 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                 messageHeaderDecoder.version());
 
             consensusModuleAgent.onReplaySessionMessage(
-                sessionHeaderDecoder.correlationId(),
                 sessionHeaderDecoder.clusterSessionId(),
                 sessionHeaderDecoder.timestamp(),
                 buffer,

File: aeron-cluster/src/main/java/io/aeron/cluster/LogPublisher.java
Patch:
@@ -109,15 +109,15 @@ void removePassiveFollower(final String followerLogEndpoint)
     }
 
     boolean appendMessage(
-        final long correlationId,
+        final long leadershipTermId,
         final long clusterSessionId,
         final long timestampMs,
         final DirectBuffer buffer,
         final int offset,
         final int length)
     {
         sessionHeaderEncoder
-            .correlationId(correlationId)
+            .leadershipTermId(leadershipTermId)
             .clusterSessionId(clusterSessionId)
             .timestamp(timestampMs);
 
@@ -149,7 +149,7 @@ long appendSessionOpen(final ClusterSession session, final long leadershipTermId
             .wrapAndApplyHeader(expandableArrayBuffer, 0, messageHeaderEncoder)
             .leadershipTermId(leadershipTermId)
             .clusterSessionId(session.id())
-            .correlationId(session.lastCorrelationId())
+            .correlationId(session.correlationId())
             .timestamp(nowMs)
             .responseStreamId(session.responseStreamId())
             .responseChannel(channel)

File: aeron-cluster/src/main/java/io/aeron/cluster/client/EgressAdapter.java
Patch:
@@ -74,7 +74,6 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
             if (sessionId == clusterSessionId)
             {
                 listener.onMessage(
-                    egressMessageHeaderDecoder.correlationId(),
                     sessionId,
                     egressMessageHeaderDecoder.timestamp(),
                     buffer,

File: aeron-cluster/src/main/java/io/aeron/cluster/client/EgressPoller.java
Patch:
@@ -217,8 +217,8 @@ public ControlledFragmentAssembler.Action onFragment(
                     messageHeaderDecoder.blockLength(),
                     messageHeaderDecoder.version());
 
+                leadershipTermId = egressMessageHeaderDecoder.leadershipTermId();
                 clusterSessionId = egressMessageHeaderDecoder.clusterSessionId();
-                correlationId = egressMessageHeaderDecoder.correlationId();
                 break;
 
             case ChallengeDecoder.TEMPLATE_ID:

File: aeron-cluster/src/main/java/io/aeron/cluster/service/BoundedLogAdapter.java
Patch:
@@ -92,7 +92,6 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
 
             agent.onSessionMessage(
                 sessionHeaderDecoder.clusterSessionId(),
-                sessionHeaderDecoder.correlationId(),
                 sessionHeaderDecoder.timestamp(),
                 buffer,
                 offset + SESSION_HEADER_LENGTH,
@@ -127,7 +126,6 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
 
                 agent.onSessionOpen(
                     openEventDecoder.clusterSessionId(),
-                    openEventDecoder.correlationId(),
                     openEventDecoder.timestamp(),
                     openEventDecoder.responseStreamId(),
                     responseChannel,

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceSnapshotLoader.java
Patch:
@@ -105,7 +105,6 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
 
                 agent.addSession(
                     clientSessionDecoder.clusterSessionId(),
-                    clientSessionDecoder.lastCorrelationId(),
                     clientSessionDecoder.responseStreamId(),
                     responseChannel,
                     encodedPrincipal);

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceSnapshotTaker.java
Patch:
@@ -47,7 +47,6 @@ public void snapshotSession(final ClientSession session)
                 clientSessionEncoder
                     .wrapAndApplyHeader(bufferClaim.buffer(), bufferClaim.offset(), messageHeaderEncoder)
                     .clusterSessionId(session.id())
-                    .lastCorrelationId(session.lastCorrelationId())
                     .responseStreamId(session.responseStreamId())
                     .responseChannel(responseChannel)
                     .putEncodedPrincipal(encodedPrincipal, 0, encodedPrincipal.length);

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -416,10 +416,9 @@ public void onChallengedSession(final SessionProxy sessionProxy, final long nowM
 
     private void sendCountedMessageIntoCluster(final int value)
     {
-        final long msgCorrelationId = aeronCluster.nextCorrelationId();
         msgBuffer.putInt(0, value);
 
-        while (aeronCluster.offer(msgCorrelationId, msgBuffer, 0, SIZE_OF_INT) < 0)
+        while (aeronCluster.offer(msgBuffer, 0, SIZE_OF_INT) < 0)
         {
             TestUtil.checkInterruptedStatus();
             Thread.yield();
@@ -442,7 +441,6 @@ public void onSessionOpen(final ClientSession session, final long timestampMs)
 
                 public void onSessionMessage(
                     final ClientSession session,
-                    final long correlationId,
                     final long timestampMs,
                     final DirectBuffer buffer,
                     final int offset,

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -220,7 +220,7 @@ public void shouldBecomeLeaderStaticThreeNodeConfigWithElectionFromPreviousLog()
             harness.awaitServiceOnMessageCounter(10);
 
             verify(mockService, times(10))
-                .onSessionMessage(any(ClientSession.class), anyLong(), anyLong(), any(), anyInt(), eq(100), any());
+                .onSessionMessage(any(ClientSession.class), anyLong(), any(), anyInt(), eq(100), any());
 
             harness.awaitMemberStatusMessage(1, harness.onCommitPosition(1));
             harness.awaitMemberStatusMessage(2, harness.onCommitPosition(2));
@@ -272,7 +272,7 @@ public void shouldBecomeFollowerStaticThreeNodeConfigWithElectionFromPreviousLog
             harness.awaitServiceOnMessageCounter(10);
 
             verify(mockService, times(10))
-                .onSessionMessage(any(ClientSession.class), anyLong(), anyLong(), any(), anyInt(), eq(100), any());
+                .onSessionMessage(any(ClientSession.class), anyLong(), any(), anyInt(), eq(100), any());
         }
     }
 
@@ -352,7 +352,7 @@ public void shouldBecomeFollowerStaticThreeNodeConfigWithElectionFromPreviousLog
             followerHarness.awaitServiceOnMessageCounter(10);
 
             verify(mockFollowerService, times(10))
-                .onSessionMessage(any(ClientSession.class), anyLong(), anyLong(), any(), anyInt(), eq(100), any());
+                .onSessionMessage(any(ClientSession.class), anyLong(), any(), anyInt(), eq(100), any());
 
             // wait until Leader sends commitPosition after election. This will only work while Leader waits for
             // all followers.

File: aeron-cluster/src/test/java/io/aeron/cluster/SingleNodeTest.java
Patch:
@@ -59,7 +59,7 @@ public void shouldBeAbleToLoadUpFromPreviousLog()
             harness.awaitServiceOnMessageCounter(count);
 
             verify(mockService, times(count))
-                .onSessionMessage(any(ClientSession.class), anyLong(), anyLong(), any(), anyInt(), eq(length), any());
+                .onSessionMessage(any(ClientSession.class), anyLong(), any(), anyInt(), eq(length), any());
         }
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/StubClusteredService.java
Patch:
@@ -43,7 +43,6 @@ public void onSessionClose(final ClientSession session, final long timestampMs,
 
     public void onSessionMessage(
         final ClientSession session,
-        final long correlationId,
         final long timestampMs,
         final DirectBuffer buffer,
         final int offset,

File: aeron-cluster/src/test/java/io/aeron/cluster/DynamicClusterTest.java
Patch:
@@ -153,14 +153,14 @@ public void shouldDynamicallyJoinClusterOfThreeNoSnapshots() throws Exception
         final int dynamicMemberIndex = STATIC_MEMBER_COUNT;
         startDynamicNode(dynamicMemberIndex, true);
 
-        Thread.sleep(2000);
+        Thread.sleep(1000);
 
         assertThat(roleOf(dynamicMemberIndex), is(Cluster.Role.FOLLOWER));
 
         final ClusterMembersInfo clusterMembersInfo = queryClusterMembers(leaderMemberId);
 
         assertThat(clusterMembersInfo.leaderMemberId, is(leaderMemberId));
-        //assertThat(clusterMembersInfo.passiveMembers, is(""));
+        assertThat(clusterMembersInfo.passiveMembers, is(""));
     }
 
     @Test(timeout = 10_000)

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAdapter.java
Patch:
@@ -176,7 +176,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                     messageHeaderDecoder.version());
 
                 consensusModuleAgent.onReplayClusterChange(
-                    clusterChangeEventDecoder.leaderMemberId(),
+                    clusterChangeEventDecoder.leadershipTermId(),
                     clusterChangeEventDecoder.logPosition(),
                     clusterChangeEventDecoder.timestamp(),
                     clusterChangeEventDecoder.leaderMemberId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/service/BoundedLogAdapter.java
Patch:
@@ -184,7 +184,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                     messageHeaderDecoder.version());
 
                 agent.onClusterChange(
-                    clusterChangeEventDecoder.leaderMemberId(),
+                    clusterChangeEventDecoder.leadershipTermId(),
                     clusterChangeEventDecoder.logPosition(),
                     clusterChangeEventDecoder.timestamp(),
                     clusterChangeEventDecoder.leaderMemberId(),

File: aeron-cluster/src/test/java/io/aeron/cluster/DynamicClusterTest.java
Patch:
@@ -153,14 +153,14 @@ public void shouldDynamicallyJoinClusterOfThreeNoSnapshots() throws Exception
         final int dynamicMemberIndex = STATIC_MEMBER_COUNT;
         startDynamicNode(dynamicMemberIndex, true);
 
-        Thread.sleep(1000);
+        Thread.sleep(2000);
 
         assertThat(roleOf(dynamicMemberIndex), is(Cluster.Role.FOLLOWER));
 
         final ClusterMembersInfo clusterMembersInfo = queryClusterMembers(leaderMemberId);
 
         assertThat(clusterMembersInfo.leaderMemberId, is(leaderMemberId));
-        assertThat(clusterMembersInfo.passiveMembers, is(""));
+        //assertThat(clusterMembersInfo.passiveMembers, is(""));
     }
 
     @Test(timeout = 10_000)

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingsSession.java
Patch:
@@ -46,7 +46,6 @@ protected int sendDescriptors()
             if (!catalog.wrapDescriptor(recordingId, descriptorBuffer))
             {
                 controlSession.sendRecordingUnknown(correlationId, recordingId, proxy);
-
                 isDone = true;
                 break;
             }

File: aeron-cluster/src/test/java/io/aeron/cluster/AppointedLeaderClusterTest.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.EgressMessageListener;
+import io.aeron.cluster.client.EgressListener;
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.ClusteredServiceContainer;
 import io.aeron.driver.MediaDriver;
@@ -63,7 +63,7 @@ public class AppointedLeaderClusterTest
     private AeronCluster client;
 
     private final MutableInteger responseCount = new MutableInteger();
-    private final EgressMessageListener egressMessageListener =
+    private final EgressListener egressListener =
         (correlationId, clusterSessionId, timestamp, buffer, offset, length, header) -> responseCount.value++;
 
     @Before
@@ -132,7 +132,7 @@ public void before()
 
         client = AeronCluster.connect(
             new AeronCluster.Context()
-                .egressMessageListener(egressMessageListener)
+                .egressListener(egressListener)
                 .aeronDirectoryName(aeronDirName)
                 .ingressChannel("aeron:udp")
                 .clusterMemberEndpoints("0=localhost:20110,1=localhost:20111,2=localhost:20112"));

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterFollowerTest.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.EgressMessageListener;
+import io.aeron.cluster.client.EgressListener;
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusteredServiceContainer;
@@ -79,7 +79,7 @@ public class ClusterFollowerTest
     private AeronCluster client;
 
     private final MutableInteger responseCount = new MutableInteger();
-    private final EgressMessageListener egressMessageListener =
+    private final EgressListener egressMessageListener =
         (correlationId, clusterSessionId, timestamp, buffer, offset, length, header) -> responseCount.value++;
 
     @Before
@@ -458,7 +458,7 @@ private void startClient()
 
         client = AeronCluster.connect(
             new AeronCluster.Context()
-                .egressMessageListener(egressMessageListener)
+                .egressListener(egressMessageListener)
                 .aeronDirectoryName(aeronDirName)
                 .ingressChannel("aeron:udp")
                 .clusterMemberEndpoints("0=localhost:20110,1=localhost:20111,2=localhost:20112"));

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.EgressMessageListener;
+import io.aeron.cluster.client.EgressListener;
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusteredServiceContainer;
@@ -75,7 +75,7 @@ public class ClusterTest
     private AeronCluster client;
 
     private final MutableInteger responseCount = new MutableInteger();
-    private final EgressMessageListener egressMessageListener =
+    private final EgressListener egressListener =
         (correlationId, clusterSessionId, timestamp, buffer, offset, length, header) -> responseCount.value++;
 
     @Before
@@ -144,7 +144,7 @@ public void before()
 
         client = AeronCluster.connect(
             new AeronCluster.Context()
-                .egressMessageListener(egressMessageListener)
+                .egressListener(egressListener)
                 .aeronDirectoryName(aeronDirName)
                 .ingressChannel("aeron:udp")
                 .clusterMemberEndpoints("0=localhost:20110,1=localhost:20111,2=localhost:20112"));

File: aeron-cluster/src/test/java/io/aeron/cluster/AppointedLeaderClusterTest.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.EgressMessageListener;
+import io.aeron.cluster.client.EgressListener;
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.ClusteredServiceContainer;
 import io.aeron.driver.MediaDriver;
@@ -63,7 +63,7 @@ public class AppointedLeaderClusterTest
     private AeronCluster client;
 
     private final MutableInteger responseCount = new MutableInteger();
-    private final EgressMessageListener egressMessageListener =
+    private final EgressListener egressListener =
         (correlationId, clusterSessionId, timestamp, buffer, offset, length, header) -> responseCount.value++;
 
     @Before
@@ -132,7 +132,7 @@ public void before()
 
         client = AeronCluster.connect(
             new AeronCluster.Context()
-                .egressMessageListener(egressMessageListener)
+                .egressListener(egressListener)
                 .aeronDirectoryName(aeronDirName)
                 .ingressChannel("aeron:udp")
                 .clusterMemberEndpoints("0=localhost:20110,1=localhost:20111,2=localhost:20112"));

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterFollowerTest.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.EgressMessageListener;
+import io.aeron.cluster.client.EgressListener;
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusteredServiceContainer;
@@ -79,7 +79,7 @@ public class ClusterFollowerTest
     private AeronCluster client;
 
     private final MutableInteger responseCount = new MutableInteger();
-    private final EgressMessageListener egressMessageListener =
+    private final EgressListener egressMessageListener =
         (correlationId, clusterSessionId, timestamp, buffer, offset, length, header) -> responseCount.value++;
 
     @Before
@@ -458,7 +458,7 @@ private void startClient()
 
         client = AeronCluster.connect(
             new AeronCluster.Context()
-                .egressMessageListener(egressMessageListener)
+                .egressListener(egressMessageListener)
                 .aeronDirectoryName(aeronDirName)
                 .ingressChannel("aeron:udp")
                 .clusterMemberEndpoints("0=localhost:20110,1=localhost:20111,2=localhost:20112"));

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -20,7 +20,7 @@
 import io.aeron.archive.ArchiveThreadingMode;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.client.AeronCluster;
-import io.aeron.cluster.client.EgressMessageListener;
+import io.aeron.cluster.client.EgressListener;
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusteredServiceContainer;
@@ -75,7 +75,7 @@ public class ClusterTest
     private AeronCluster client;
 
     private final MutableInteger responseCount = new MutableInteger();
-    private final EgressMessageListener egressMessageListener =
+    private final EgressListener egressListener =
         (correlationId, clusterSessionId, timestamp, buffer, offset, length, header) -> responseCount.value++;
 
     @Before
@@ -144,7 +144,7 @@ public void before()
 
         client = AeronCluster.connect(
             new AeronCluster.Context()
-                .egressMessageListener(egressMessageListener)
+                .egressListener(egressListener)
                 .aeronDirectoryName(aeronDirName)
                 .ingressChannel("aeron:udp")
                 .clusterMemberEndpoints("0=localhost:20110,1=localhost:20111,2=localhost:20112"));

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -778,9 +778,9 @@ private Thread validateActiveRecordingReplay(
                             Thread.yield();
                         }
                     }
-
-                    waitForData.countDown();
                 }
+
+                waitForData.countDown();
             });
 
         thread.setName("replay-consumer");

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -108,7 +108,7 @@ enum State
     private long lastSmWindowLimit;
 
     private long timeOfLastStateChangeNs;
-    
+
     private final long correlationId;
     private final long imageLivenessTimeoutNs;
     private final int sessionId;

File: aeron-driver/src/main/java/io/aeron/driver/status/StreamPositionCounter.java
Patch:
@@ -190,8 +190,8 @@ public static UnsafeBufferPosition allocate(
 
         if (labelLength < (MAX_LABEL_LENGTH - 20))
         {
-            labelLength += tempBuffer.putStringWithoutLengthAscii(keyLength + labelLength, " @");
-            labelLength += tempBuffer.putLongAscii(keyLength + labelLength, joinPosition);
+            labelLength += tempBuffer.putStringWithoutLengthAscii(labelOffset + labelLength, " @");
+            labelLength += tempBuffer.putLongAscii(labelOffset + labelLength, joinPosition);
         }
 
         final int counterId = countersManager.allocate(

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -629,7 +629,7 @@ private void refreshAndFixDescriptor(
                 final int termBufferLength = decoder.termBufferLength();
                 final long startPosition = decoder.startPosition();
                 final long recordingLength =
-                    (startPosition & (termBufferLength - 1)) + (maxSegmentIndex * segmentFileLength) + stopOffset;
+                    (startPosition & (termBufferLength - 1)) + (maxSegmentIndex * (long)segmentFileLength) + stopOffset;
                 encoder.stopPosition(startPosition + recordingLength);
             }
 

File: aeron-archive/src/main/java/io/aeron/archive/CatalogTool.java
Patch:
@@ -203,7 +203,7 @@ private static void verify(
             stopSegmentOffset = Catalog.recoverStopOffset(maxSegmentFile, segmentFileLength);
 
             final long recordingLength =
-                startSegmentOffset + (maxSegmentIndex * segmentFileLength) + stopSegmentOffset;
+                startSegmentOffset + (maxSegmentIndex * (long)segmentFileLength) + stopSegmentOffset;
 
             stopPosition = startPosition + recordingLength;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingLog.java
Patch:
@@ -826,7 +826,7 @@ public void tombstoneEntry(final long leadershipTermId, final int entryIndex)
 
         buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN);
         byteBuffer.limit(SIZE_OF_INT).position(0);
-        final long filePosition = (index * ENTRY_LENGTH) + ENTRY_TYPE_OFFSET;
+        final long filePosition = (index * (long)ENTRY_LENGTH) + ENTRY_TYPE_OFFSET;
 
         try
         {
@@ -959,7 +959,7 @@ private void commitEntryValue(final int entryIndex, final long value, final int
     {
         buffer.putLong(0, value, LITTLE_ENDIAN);
         byteBuffer.limit(SIZE_OF_LONG).position(0);
-        final long filePosition = (entryIndex * ENTRY_LENGTH) + fieldOffset;
+        final long filePosition = (entryIndex * (long)ENTRY_LENGTH) + fieldOffset;
 
         try
         {

File: aeron-samples/src/main/java/io/aeron/samples/RateReporter.java
Patch:
@@ -78,8 +78,9 @@ public void run()
 
             final long timeSpanNs = currentTimestamp - lastTimestamp;
             final double messagesPerSec =
-                ((currentTotalMessages - lastTotalMessages) * reportIntervalNs) / (double)timeSpanNs;
-            final double bytesPerSec = ((currentTotalBytes - lastTotalBytes) * reportIntervalNs) / (double)timeSpanNs;
+                ((currentTotalMessages - lastTotalMessages) * (double)reportIntervalNs) / (double)timeSpanNs;
+            final double bytesPerSec =
+                ((currentTotalBytes - lastTotalBytes) * (double)reportIntervalNs) / (double)timeSpanNs;
 
             reportingFunc.onReport(messagesPerSec, bytesPerSec, currentTotalMessages, currentTotalBytes);
 

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -463,7 +463,7 @@ long logPosition()
 
     private int init(final long nowMs)
     {
-        stateCounter = ctx.aeron().addCounter(0, "Election State");
+        stateCounter = ctx.aeron().addCounter(ELECTION_STATE_TYPE_ID, "Election State");
 
         if (!isStartup)
         {

File: aeron-cluster/src/test/java/io/aeron/cluster/SingleNodeTest.java
Patch:
@@ -21,8 +21,6 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import java.util.concurrent.TimeUnit;
-
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.anyLong;

File: aeron-cluster/src/test/java/io/aeron/cluster/SingleNodeTest.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.cluster.service.ClientSession;
 import io.aeron.cluster.service.Cluster;
 import io.aeron.cluster.service.ClusteredService;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.concurrent.TimeUnit;
@@ -43,6 +44,7 @@ public void shouldBeAbleToComeUpInDefaultConfig()
         }
     }
 
+    @Ignore
     @Test(timeout = 15_000L)
     public void shouldBeAbleToLoadUpFromPreviousLog()
     {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -77,7 +77,7 @@ class ConsensusModuleAgent implements Agent, MemberStatusListener
     private int logPublicationInitialTermId = NULL_VALUE;
     private int logPublicationTermBufferLength = NULL_VALUE;
     private int logPublicationMtuLength = NULL_VALUE;
-    private int highMemberId = NULL_VALUE;
+    private int highMemberId;
     private ReadableCounter appendedPosition;
     private Counter commitPosition;
     private ConsensusModule.State state = ConsensusModule.State.INIT;

File: aeron-client/src/main/java/io/aeron/command/CounterMessageFlyweight.java
Patch:
@@ -181,6 +181,6 @@ public int length()
     private int labelOffset()
     {
         return BitUtil.align(
-            KEY_LENGTH_OFFSET + buffer.getInt(offset + KEY_LENGTH_OFFSET), SIZE_OF_INT) + SIZE_OF_INT;
+            KEY_LENGTH_OFFSET + SIZE_OF_INT + buffer.getInt(offset + KEY_LENGTH_OFFSET), SIZE_OF_INT);
     }
 }

File: aeron-client/src/main/java/io/aeron/command/ImageBuffersReadyFlyweight.java
Patch:
@@ -257,6 +257,6 @@ public int length()
     private int sourceIdentityOffset()
     {
         return BitUtil.align(
-            LOG_FILE_NAME_OFFSET + buffer.getInt(offset + LOG_FILE_NAME_OFFSET), SIZE_OF_INT) + SIZE_OF_INT;
+            LOG_FILE_NAME_OFFSET + SIZE_OF_INT + buffer.getInt(offset + LOG_FILE_NAME_OFFSET), SIZE_OF_INT);
     }
 }

File: aeron-client/src/main/java/io/aeron/CncFileDescriptor.java
Patch:
@@ -74,7 +74,7 @@ public class CncFileDescriptor
 {
     public static final String CNC_FILE = "cnc.dat";
 
-    public static final int CNC_VERSION = 13;
+    public static final int CNC_VERSION = 14;
 
     public static final int CNC_VERSION_FIELD_OFFSET;
     public static final int TO_DRIVER_BUFFER_LENGTH_FIELD_OFFSET;

File: aeron-client/src/main/java/io/aeron/BufferBuilder.java
Patch:
@@ -107,7 +107,7 @@ public void limit(final int limit)
         if (limit < 0 || limit >= buffer.capacity())
         {
             throw new IllegalArgumentException(
-                "Limit outside range: capacity=" + buffer.capacity() + " limit=" + limit);
+                "limit outside range: capacity=" + buffer.capacity() + " limit=" + limit);
         }
 
         this.limit = limit;
@@ -171,7 +171,7 @@ private void ensureCapacity(final int additionalCapacity)
         if (requiredCapacity > BufferBuilderUtil.MAX_CAPACITY)
         {
             throw new IllegalStateException(
-                "Max capacity exceeded: limit=" + limit + " required=" + requiredCapacity);
+                "max capacity exceeded: limit=" + limit + " required=" + requiredCapacity);
         }
 
         final int capacity = buffer.capacity();

File: aeron-client/src/main/java/io/aeron/BufferBuilderUtil.java
Patch:
@@ -28,7 +28,7 @@ static int findSuitableCapacity(final int currentCapacity, final int requiredCap
             {
                 if (capacity == MAX_CAPACITY)
                 {
-                    throw new IllegalStateException("Max capacity reached: " + MAX_CAPACITY);
+                    throw new IllegalStateException("max capacity reached: " + MAX_CAPACITY);
                 }
 
                 capacity = MAX_CAPACITY;

File: aeron-client/src/main/java/io/aeron/ChannelUri.java
Patch:
@@ -340,7 +340,7 @@ public static ChannelUri parse(final CharSequence cs)
                             break;
 
                         case ':':
-                            throw new IllegalArgumentException("Encountered ':' within media definition");
+                            throw new IllegalArgumentException("encountered ':' within media definition");
 
                         default:
                             builder.append(c);
@@ -376,7 +376,7 @@ public static ChannelUri parse(final CharSequence cs)
                     break;
 
                 default:
-                    throw new IllegalStateException("Que? state=" + state);
+                    throw new IllegalStateException("unexpected state=" + state);
             }
         }
 
@@ -391,7 +391,7 @@ public static ChannelUri parse(final CharSequence cs)
                 break;
 
             default:
-                throw new IllegalArgumentException("No more input found, but was in state: " + state);
+                throw new IllegalArgumentException("no more input found, state=" + state);
         }
 
         return new ChannelUri(prefix, media, params);

File: aeron-client/src/main/java/io/aeron/LogBuffers.java
Patch:
@@ -118,7 +118,7 @@ public LogBuffers(final String logFileName)
                 if (metaDataTermLength != assumedTermLength)
                 {
                     throw new IllegalStateException(
-                        "Assumed term length " + assumedTermLength +
+                        "assumed term length " + assumedTermLength +
                         " does not match metadata: termLength=" + metaDataTermLength);
                 }
 

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -510,7 +510,7 @@ final void checkForMaxPayloadLength(final int length)
         if (length > maxPayloadLength)
         {
             throw new IllegalArgumentException(
-                "Claim exceeds maxPayloadLength of " + maxPayloadLength + ", length=" + length);
+                "claim exceeds maxPayloadLength of " + maxPayloadLength + ", length=" + length);
         }
     }
 
@@ -519,7 +519,7 @@ final void checkForMaxMessageLength(final int length)
         if (length > maxMessageLength)
         {
             throw new IllegalArgumentException(
-                "Message exceeds maxMessageLength of " + maxMessageLength + ", length=" + length);
+                "message exceeds maxMessageLength of " + maxMessageLength + ", length=" + length);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -862,7 +862,7 @@ public static class Context implements AutoCloseable, Cloneable
         private CredentialsSupplier credentialsSupplier;
         private boolean ownsAeronClient = false;
         private boolean isIngressExclusive = true;
-        private ErrorHandler errorHandler = Aeron.DEFAULT_ERROR_HANDLER;
+        private ErrorHandler errorHandler = Aeron.Configuration.DEFAULT_ERROR_HANDLER;
         private EgressMessageListener egressMessageListener;
 
         /**

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -332,7 +332,7 @@ private static void ensureDirectoryIsRecreated(final Context ctx)
                 {
                     if (CommonContext.isDriverActive(ctx.driverTimeoutMs(), logger, cncByteBuffer))
                     {
-                        throw new ActiveDriverException("Active driver detected");
+                        throw new ActiveDriverException("active driver detected");
                     }
 
                     reportExistingErrors(ctx, cncByteBuffer);
@@ -2155,7 +2155,7 @@ private static void validateSessionIdRange(final int low, final int high)
 
             if (Math.abs((long)high - low) > Integer.MAX_VALUE)
             {
-                throw new IllegalArgumentException("Reserved range to too large");
+                throw new IllegalArgumentException("reserved range to too large");
             }
         }
     }

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -811,7 +811,7 @@ private void checkServiceInterval(final long nowNs)
 
             onClose();
 
-            throw new ConductorServiceTimeoutException("Exceeded (ns): " + interServiceTimeoutNs);
+            throw new ConductorServiceTimeoutException("Service interval exceeded (ns): " + interServiceTimeoutNs);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -945,7 +945,7 @@ public void conclude()
                 serviceHeartbeatCounters = new Counter[serviceCount];
                 for (int i = 0; i < serviceCount; i++)
                 {
-                    serviceHeartbeatCounters[i] = ServiceHeartbeat.allocate(aeron, tempBuffer, i);
+                    serviceHeartbeatCounters[i] = ServiceHeartbeat.allocate(aeron, tempBuffer, i, clusterMemberId);
                 }
             }
 

File: aeron-client/src/test/java/io/aeron/BufferBuilderTest.java
Patch:
@@ -21,13 +21,13 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
+import static io.aeron.BufferBuilderUtil.MIN_ALLOCATED_CAPACITY;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.lessThan;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertThat;
-import static io.aeron.BufferBuilder.MIN_ALLOCATED_CAPACITY;
 
 public class BufferBuilderTest
 {

File: aeron-client/src/test/java/io/aeron/BufferBuilderTest.java
Patch:
@@ -21,13 +21,13 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
+import static io.aeron.BufferBuilderUtil.MIN_ALLOCATED_CAPACITY;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.lessThan;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertThat;
-import static io.aeron.BufferBuilder.MIN_ALLOCATED_CAPACITY;
 
 public class BufferBuilderTest
 {

File: aeron-archive/src/main/java/io/aeron/archive/client/ArchiveProxy.java
Patch:
@@ -38,7 +38,7 @@ public class ArchiveProxy
     private final IdleStrategy retryIdleStrategy;
     private final NanoClock nanoClock;
 
-    private final ExpandableArrayBuffer buffer = new ExpandableArrayBuffer(124);
+    private final ExpandableArrayBuffer buffer = new ExpandableArrayBuffer(256);
     private final Publication publication;
     private final MessageHeaderEncoder messageHeaderEncoder = new MessageHeaderEncoder();
     private final ConnectRequestEncoder connectRequestEncoder = new ConnectRequestEncoder();

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -2044,7 +2044,8 @@ private void concludeDependantProperties()
 
             if (null == rawLogFactory)
             {
-                rawLogFactory = new RawLogFactory(aeronDirectoryName(), filePageSize, performStorageChecks, errorLog);
+                rawLogFactory = new RawLogFactory(
+                    aeronDirectoryName(), filePageSize, performStorageChecks, errorHandler);
             }
 
             if (null == lossReport)

File: aeron-driver/src/test/java/io/aeron/driver/buffer/RawLogFactoryTest.java
Patch:
@@ -18,9 +18,9 @@
 import io.aeron.driver.Configuration;
 import io.aeron.driver.media.UdpChannel;
 import io.aeron.logbuffer.LogBufferDescriptor;
+import org.agrona.ErrorHandler;
 import org.agrona.IoUtil;
 import org.agrona.concurrent.UnsafeBuffer;
-import org.agrona.concurrent.errors.DistinctErrorLog;
 import org.junit.*;
 
 import java.io.*;
@@ -50,7 +50,7 @@ public void createDataDir()
     {
         IoUtil.ensureDirectoryExists(DATA_DIR, "data");
         rawLogFactory = new RawLogFactory(
-            DATA_DIR.getAbsolutePath(), PAGE_SIZE, PERFORM_STORAGE_CHECKS, mock(DistinctErrorLog.class));
+            DATA_DIR.getAbsolutePath(), PAGE_SIZE, PERFORM_STORAGE_CHECKS, mock(ErrorHandler.class));
     }
 
     @After

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -366,7 +366,9 @@ private static void reportExistingErrors(final Context ctx, final MappedByteBuff
                     if ('/' == c || '\\' == c)
                     {
                         builder.setLength(lastCharIndex);
-                    } else {
+                    }
+                    else
+                    {
                         break;
                     }
                 }

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -366,6 +366,8 @@ private static void reportExistingErrors(final Context ctx, final MappedByteBuff
                     if ('/' == c || '\\' == c)
                     {
                         builder.setLength(lastCharIndex);
+                    } else {
+                        break;
                     }
                 }
 

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -775,7 +775,7 @@ private void awaitResponse(final long correlationId)
         }
         while (nanoClock.nanoTime() < deadlineNs);
 
-        throw new DriverTimeoutException("No response from MediaDriver within (ns):" + driverTimeoutNs);
+        throw new DriverTimeoutException("No response from MediaDriver within (ns): " + driverTimeoutNs);
     }
 
     private int onCheckTimeouts()

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -644,8 +644,8 @@ void closeRecordingSession(final RecordingSession session)
     void closeReplaySession(final ReplaySession session)
     {
         replaySessionByIdMap.remove(session.sessionId());
+        session.sendPendingError(controlResponseProxy);
         closeSession(session);
-        session.sendError(controlResponseProxy);
     }
 
     private int runTasks(final ArrayDeque<Runnable> taskQueue)

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -192,7 +192,7 @@ State state()
         return state;
     }
 
-    void sendError(final ControlResponseProxy controlResponseProxy)
+    void sendPendingError(final ControlResponseProxy controlResponseProxy)
     {
         if (null != errorMessage && !controlSession.isDone())
         {

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -581,6 +581,7 @@ void truncateRecording(
                     }
                     catch (final IOException ex)
                     {
+                        controlSession.sendErrorResponse(correlationId, ex.getMessage(), controlResponseProxy);
                         LangUtil.rethrowUnchecked(ex);
                     }
                 }

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -288,7 +288,7 @@ public class Configuration
     /**
      * The ratio for sending data to polling status messages in the Sender.
      */
-    public static final int SEND_TO_STATUS_POLL_RATIO_DEFAULT = 4;
+    public static final int SEND_TO_STATUS_POLL_RATIO_DEFAULT = 6;
 
     /**
      * Property name for SO_RCVBUF setting on UDP sockets which must be sufficient for Bandwidth Delay Produce (BDP).

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterMember.java
Patch:
@@ -548,7 +548,7 @@ public static boolean hasMajorityVoteWithCanvassMembers(
         int votes = 0;
         for (final ClusterMember member : clusterMembers)
         {
-            if (Aeron.NULL_VALUE != member.leadershipTermId && null == member.vote)
+            if (NULL_POSITION != member.logPosition && null == member.vote)
             {
                 return false;
             }
@@ -616,7 +616,7 @@ public static boolean isUnanimousCandidate(final ClusterMember[] clusterMembers,
     {
         for (final ClusterMember member : clusterMembers)
         {
-            if (Aeron.NULL_VALUE == member.logPosition || compareLog(candidate, member) < 0)
+            if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0)
             {
                 return false;
             }
@@ -637,7 +637,7 @@ public static boolean isQuorumCandidate(final ClusterMember[] clusterMembers, fi
         int possibleVotes = 0;
         for (final ClusterMember member : clusterMembers)
         {
-            if (Aeron.NULL_VALUE == member.logPosition || compareLog(candidate, member) < 0)
+            if (NULL_POSITION == member.logPosition || compareLog(candidate, member) < 0)
             {
                 continue;
             }

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -265,7 +265,7 @@ void sendResponse(
         final String errorMessage,
         final ControlResponseProxy proxy)
     {
-        if (!proxy.sendResponse(controlSessionId, correlationId, 0, code, errorMessage, controlPublication))
+        if (!proxy.sendResponse(controlSessionId, correlationId, relevantId, code, errorMessage, controlPublication))
         {
             queueResponse(correlationId, relevantId, code, errorMessage);
         }

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -228,7 +228,7 @@ void sendOkResponse(final long correlationId, final long relevantId, final Contr
     {
         if (!proxy.sendResponse(controlSessionId, correlationId, relevantId, OK, null, controlPublication))
         {
-            queueResponse(correlationId, 0, OK, null);
+            queueResponse(correlationId, relevantId, OK, null);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -856,7 +856,7 @@ private static ChannelUri followerLogDestination(final String logChannel, final
 
     private void state(final State newState, final long nowMs)
     {
-//        System.out.println("memberId=" + thisMember.id() + " " + this.state + " -> " + newState);
+//        System.out.println("memberId=" + thisMember.id() + " nowMs=" + nowMs + " " + this.state + " -> " + newState);
 
         if (State.CANVASS == newState)
         {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -637,8 +637,8 @@ void clearSessionsAfter(final long logPosition)
             if (session.openedLogPosition() >= logPosition)
             {
                 i.remove();
+                session.close();
             }
-            session.close();
         }
 
         for (final ClusterSession session : pendingSessions)

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -151,7 +151,7 @@ public void openDatagramChannel(final AtomicCounter statusIndicator)
             receiveDatagramChannel = null;
 
             throw new RuntimeException(
-                "channel error: " + ex.getMessage() +
+                "channel error - " + ex.getMessage() +
                 " (at " + ex.getStackTrace()[0].toString() + "): " +
                 udpChannel.originalUriString(), ex);
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -90,7 +90,6 @@ public void onStart()
         checkForSnapshot(counters, recoveryCounterId);
         checkForReplay(counters, recoveryCounterId);
         isRecovering = false;
-        service.onReady();
     }
 
     public void onClose()

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -857,7 +857,7 @@ private void state(final State newState, final long nowMs)
             isStartup = false;
         }
 
-        if (State.CANDIDATE_BALLOT == this.state && State.LEADER_TRANSITION != newState)
+        if (State.CANDIDATE_BALLOT == this.state && State.LEADER_REPLAY != newState)
         {
             consensusModuleAgent.role(Cluster.Role.FOLLOWER);
         }
@@ -867,7 +867,7 @@ private void state(final State newState, final long nowMs)
             consensusModuleAgent.role(Cluster.Role.CANDIDATE);
         }
 
-        if (State.LEADER_TRANSITION == newState)
+        if (State.LEADER_REPLAY == newState)
         {
             consensusModuleAgent.role(Cluster.Role.LEADER);
         }

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -166,9 +166,9 @@ boolean isClosed()
         return isClosed;
     }
 
-    public void onError(final long correlationId, final ErrorCode errorCode, final int codeValue, final String message)
+    public void onError(final long correlationId, final int codeValue, final ErrorCode errorCode, final String message)
     {
-        driverException = new RegistrationException(errorCode, codeValue, message);
+        driverException = new RegistrationException(codeValue, errorCode, message);
     }
 
     public void onChannelEndpointError(final int statusIndicatorId, final String message)

File: aeron-client/src/main/java/io/aeron/DriverEventsAdapter.java
Patch:
@@ -82,7 +82,7 @@ public void onMessage(final int msgTypeId, final MutableDirectBuffer buffer, fin
                 else if (correlationId == activeCorrelationId)
                 {
                     receivedCorrelationId = correlationId;
-                    listener.onError(correlationId, errorCode, errorCodeValue, message);
+                    listener.onError(correlationId, errorCodeValue, errorCode, message);
                 }
                 break;
             }

File: aeron-client/src/main/java/io/aeron/DriverEventsListener.java
Patch:
@@ -20,7 +20,7 @@
  */
 interface DriverEventsListener
 {
-    void onError(long correlationId, ErrorCode errorCode, int codeValue, String message);
+    void onError(long correlationId, int codeValue, ErrorCode errorCode, String message);
 
     void onAvailableImage(
         long correlationId,

File: aeron-cluster/src/main/java/io/aeron/cluster/ServiceAck.java
Patch:
@@ -59,7 +59,7 @@ ServiceAck relevantId(final long relevantId)
         return this;
     }
 
-    static boolean hasReachedThreshold(final long position, final long ackId, final ServiceAck[] serviceAcks)
+    static boolean hasReachedPosition(final long position, final long ackId, final ServiceAck[] serviceAcks)
     {
         for (final ServiceAck serviceAck : serviceAcks)
         {

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -166,9 +166,9 @@ boolean isClosed()
         return isClosed;
     }
 
-    public void onError(final long correlationId, final ErrorCode errorCode, final String message)
+    public void onError(final long correlationId, final ErrorCode errorCode, final int codeValue, final String message)
     {
-        driverException = new RegistrationException(errorCode, message);
+        driverException = new RegistrationException(errorCode, codeValue, message);
     }
 
     public void onChannelEndpointError(final int statusIndicatorId, final String message)

File: aeron-client/src/main/java/io/aeron/DriverEventsListener.java
Patch:
@@ -20,7 +20,7 @@
  */
 interface DriverEventsListener
 {
-    void onError(long correlationId, ErrorCode errorCode, String message);
+    void onError(long correlationId, ErrorCode errorCode, int codeValue, String message);
 
     void onAvailableImage(
         long correlationId,

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -722,7 +722,7 @@ private void awaitResponse(final long correlationId)
 
             service(correlationId);
 
-            if (driverEventsAdapter.lastReceivedCorrelationId() == correlationId)
+            if (driverEventsAdapter.receivedCorrelationId() == correlationId)
             {
                 if (null != driverException)
                 {

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAgent.java
Patch:
@@ -1556,7 +1556,7 @@ private void snapshotState(final Publication publication, final long logPosition
         aeronClientInvoker.invoke();
 
         timerService.snapshot(snapshotTaker);
-        snapshotTaker.consenseModuleState(nextSessionId);
+        snapshotTaker.consensusModuleState(nextSessionId);
 
         snapshotTaker.markEnd(SNAPSHOT_TYPE_ID, logPosition, leadershipTermId, 0);
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotTaker.java
Patch:
@@ -87,7 +87,7 @@ void snapshotTimer(final long correlationId, final long deadline)
         }
     }
 
-    void consenseModuleState(final long nextSessionId)
+    void consensusModuleState(final long nextSessionId)
     {
         final int length = MessageHeaderEncoder.ENCODED_LENGTH + ConsensusModuleEncoder.BLOCK_LENGTH;
 

File: aeron-archive/src/test/java/io/aeron/archive/CatalogTest.java
Patch:
@@ -188,6 +188,7 @@ public void shouldFixTimestampAndPositionAfterFailureSamePage() throws Exception
         new File(archiveDir, segmentFileName(newRecordingId, 1)).createNewFile();
         new File(archiveDir, segmentFileName(newRecordingId, 2)).createNewFile();
         final File segmentFile = new File(archiveDir, segmentFileName(newRecordingId, 3));
+
         try (FileChannel log = FileChannel.open(segmentFile.toPath(), READ, WRITE, CREATE))
         {
             final ByteBuffer bb = ByteBuffer.allocateDirect(HEADER_LENGTH);
@@ -331,6 +332,7 @@ public void shouldFixTimestampAndPositionAfterFailureFullSegment() throws Except
     @Test
     public void shouldBeAbleToCreateMaxEntries()
     {
+        after();
         final File archiveDir = TestUtil.makeTestDirectory();
         final long maxEntries = 2;
 

File: aeron-archive/src/main/java/io/aeron/archive/ControlResponseProxy.java
Patch:
@@ -96,14 +96,15 @@ boolean sendResponse(
     void attemptErrorResponse(
         final long controlSessionId,
         final long correlationId,
+        final long relevantId,
         final String errorMessage,
         final Publication controlPublication)
     {
         responseEncoder
             .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder)
             .controlSessionId(controlSessionId)
             .correlationId(correlationId)
-            .relevantId(0)
+            .relevantId(relevantId)
             .code(ControlResponseCode.ERROR)
             .errorMessage(null == errorMessage ? "" : errorMessage);
 

File: aeron-client/src/main/java/io/aeron/exceptions/ChannelEndpointException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package io.aeron.exceptions;
 
-public class ChannelEndpointException extends RuntimeException
+public class ChannelEndpointException extends AeronException
 {
     private final int statusIndicatorId;
 

File: aeron-client/src/main/java/io/aeron/exceptions/RegistrationException.java
Patch:
@@ -21,7 +21,7 @@
  * Caused when a error occurs during addition or release of {@link Publication}s
  * or {@link Subscription}s
  */
-public class RegistrationException extends RuntimeException
+public class RegistrationException extends AeronException
 {
     private final ErrorCode code;
 

File: aeron-client/src/main/java/io/aeron/exceptions/TimeoutException.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Generic timeout has occurred while waiting on some action or event.
  */
-public class TimeoutException extends RuntimeException
+public class TimeoutException extends AeronException
 {
     public TimeoutException()
     {

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -287,9 +287,9 @@ public int maxEntries()
         return maxRecordingId + 1;
     }
 
-    public long entries()
+    public int countEntries()
     {
-        return nextRecordingId;
+        return (int)nextRecordingId;
     }
 
     long addNewRecording(

File: aeron-archive/src/main/java/io/aeron/archive/CatalogTool.java
Patch:
@@ -91,11 +91,11 @@ else if (args.length == 3 && args[1].equals("verify"))
                 catalog.forEntry(CatalogTool::verify, Long.valueOf(args[2]));
             }
         }
-        else if (args.length == 2 && args[1].equals("entries"))
+        else if (args.length == 2 && args[1].equals("count-entries"))
         {
             try (Catalog catalog = openCatalog())
             {
-                System.out.println(catalog.entries());
+                System.out.println(catalog.countEntries());
             }
         }
         else if (args.length == 2 && args[1].equals("max-entries"))
@@ -358,7 +358,7 @@ private static void printHelp()
         System.out.println("  pid: prints just PID of archive.");
         System.out.println("  verify <optional recordingId>: verifies descriptor(s) in the catalog, checking");
         System.out.println("     recording files availability and contents. Faulty entries are marked as unusable.");
-        System.out.println("  entries: gets the number of recording entries in the catalog.");
+        System.out.println("  count-entries: queries the number of recording entries in the catalog.");
         System.out.println("  max-entries <optional number of entries>: gets or increases the maximum number of");
         System.out.println("     recording entries the catalog can store.");
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -61,7 +61,7 @@ public static void main(final String[] args)
         {
             container.context().shutdownSignalBarrier().await();
 
-            System.out.println("Shutdown ClusteredMediaDriver...");
+            System.out.println("Shutdown ClusteredServiceContainer...");
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -61,7 +61,7 @@ public static void main(final String[] args)
         {
             container.context().shutdownSignalBarrier().await();
 
-            System.out.println("Shutdown ClusteredMediaDriver...");
+            System.out.println("Shutdown ClusteredServiceContainer...");
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/BoundedLogAdapter.java
Patch:
@@ -155,7 +155,7 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
                     messageHeaderDecoder.version());
 
                 agent.onServiceAction(
-                    header.position(),
+                    actionRequestDecoder.logPosition(),
                     actionRequestDecoder.timestamp(),
                     actionRequestDecoder.action());
                 break;

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -62,7 +62,7 @@ static int send(final DatagramChannel datagramChannel,
         }
         catch (final IOException ex)
         {
-            sendError(bytesSent, bytesToSend, ex, destination);
+            sendError(bytesToSend, ex, destination);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiRcvDestination.java
Patch:
@@ -147,7 +147,7 @@ public static int sendTo(
         }
         catch (final IOException ex)
         {
-            sendError(bytesSent, remaining, ex, remoteAddress);
+            sendError(remaining, ex, remoteAddress);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -122,7 +122,7 @@ public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress
         }
         catch (final IOException ex)
         {
-            sendError(bytesSent, remaining, ex, remoteAddress);
+            sendError(remaining, ex, remoteAddress);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -202,7 +202,7 @@ public int send(final ByteBuffer buffer)
                 }
                 catch (final IOException ex)
                 {
-                    sendError(bytesSent, bytesToSend, ex, connectAddress);
+                    sendError(bytesToSend, ex, connectAddress);
                 }
             }
             else

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -27,6 +27,8 @@
 import java.nio.channels.DatagramChannel;
 import java.util.ArrayList;
 
+import static io.aeron.driver.media.UdpChannelTransport.sendError;
+
 abstract class MultiDestination
 {
     abstract int send(
@@ -60,9 +62,7 @@ static int send(final DatagramChannel datagramChannel,
         }
         catch (final IOException ex)
         {
-            final String msg = "failed to send packet of " + bytesToSend +
-                " bytes to " + destination + " bytes sent: " + bytesSent;
-            throw new RuntimeException(msg, ex);
+            sendError(bytesSent, bytesToSend, ex, destination);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiRcvDestination.java
Patch:
@@ -23,6 +23,8 @@
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 
+import static io.aeron.driver.media.UdpChannelTransport.sendError;
+
 public class MultiRcvDestination implements AutoCloseable
 {
     private static final ReceiveDestinationUdpTransport[] EMPTY_TRANSPORTS = new ReceiveDestinationUdpTransport[0];
@@ -145,9 +147,7 @@ public static int sendTo(
         }
         catch (final IOException ex)
         {
-            final String msg = "failed to send packet of " + remaining +
-                " bytes to " + remoteAddress + " bytes sent: " + bytesSent;
-            throw new RuntimeException(msg, ex);
+            sendError(bytesSent, remaining, ex, remoteAddress);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -122,9 +122,7 @@ public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress
         }
         catch (final IOException ex)
         {
-            final String msg = "failed to send packet of " + remaining +
-                " bytes to " + remoteAddress + " bytes sent: " + bytesSent;
-            throw new RuntimeException(msg, ex);
+            sendError(bytesSent, remaining, ex, remoteAddress);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -202,9 +202,7 @@ public int send(final ByteBuffer buffer)
                 }
                 catch (final IOException ex)
                 {
-                    final String msg = "failed to send packet of " + bytesToSend +
-                        " bytes to " + connectAddress + " bytes sent: " + bytesSent;
-                    throw new RuntimeException(msg, ex);
+                    sendError(bytesSent, bytesToSend, ex, connectAddress);
                 }
             }
             else

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -60,8 +60,9 @@ static int send(final DatagramChannel datagramChannel,
         }
         catch (final IOException ex)
         {
-            throw new RuntimeException(
-                "Failed to send packet of " + bytesToSend + " bytes to " + destination, ex);
+            final String msg = "failed to send packet of " + bytesToSend +
+                " bytes to " + destination + " bytes sent: " + bytesSent;
+            throw new RuntimeException(msg, ex);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -139,7 +139,7 @@ public void openDatagramChannel(final AtomicCounter statusIndicator)
             receiveDatagramChannel = null;
 
             throw new RuntimeException(
-                "Channel error: " + ex.getMessage() +
+                "channel error: " + ex.getMessage() +
                 " (at " + ex.getStackTrace()[0].toString() + "): " +
                 udpChannel.originalUriString(), ex);
         }

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -277,9 +277,9 @@ public void shouldBecomeFollowerStaticThreeNodeConfigWithElectionFromPreviousLog
         mockLeaderStatusListeners[2] = mock(MemberStatusListener.class);
 
         try (ConsensusModuleHarness leaderHarness = new ConsensusModuleHarness(
-            leaderContext, mockLeaderService, mockLeaderStatusListeners, false, true, true);
+            leaderContext, mockLeaderService, mockLeaderStatusListeners, false, true, false);
             ConsensusModuleHarness followerHarness = new ConsensusModuleHarness(
-                followerContext, mockFollowerService, mockFollowerStatusListeners, false, true, true))
+                followerContext, mockFollowerService, mockFollowerStatusListeners, false, true, false))
         {
             leaderHarness.awaitMemberStatusMessage(2, leaderHarness.onRequestVoteCounter(2));
 

File: aeron-archive/src/test/java/io/aeron/archive/ControlSessionTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.*;
 
 public class ControlSessionTest

File: aeron-client/src/test/java/io/aeron/ImageTest.java
Patch:
@@ -27,10 +27,10 @@
 import static io.aeron.logbuffer.LogBufferDescriptor.*;
 import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
 import static java.nio.ByteBuffer.allocateDirect;
-import static junit.framework.TestCase.assertTrue;
 import static org.agrona.BitUtil.align;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.*;
 
 public class ImageTest

File: aeron-client/src/test/java/io/aeron/SubscriptionTest.java
Patch:
@@ -25,9 +25,9 @@
 
 import java.nio.ByteBuffer;
 
-import static junit.framework.TestCase.assertTrue;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.*;
 
 public class SubscriptionTest

File: aeron-client/src/main/java/io/aeron/ChannelUri.java
Patch:
@@ -433,7 +433,7 @@ private static String[] splitTags(final CharSequence tags)
 
                     if ((i - currentStartIndex) > 0)
                     {
-                        tag = tags.subSequence(currentStartIndex, i - 1).toString();
+                        tag = tags.subSequence(currentStartIndex, i).toString();
                         currentStartIndex = i + 1;
                     }
 
@@ -446,7 +446,7 @@ private static String[] splitTags(final CharSequence tags)
             if ((length - currentStartIndex) > 0)
             {
                 stringArray = ArrayUtil.ensureCapacity(stringArray, tagIndex + 1);
-                stringArray[tagIndex] = tags.subSequence(currentStartIndex, length - 1).toString();
+                stringArray[tagIndex] = tags.subSequence(currentStartIndex, length).toString();
             }
         }
 

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -348,7 +348,7 @@ public Integer ttl()
      */
     public ChannelUriStringBuilder mtu(final Integer mtu)
     {
-        if (null != mtu)
+        if (null != mtu && !isMtuTagRef)
         {
             if (mtu < 32 || mtu > 65504)
             {
@@ -386,7 +386,7 @@ public Integer mtu()
      */
     public ChannelUriStringBuilder termLength(final Integer termLength)
     {
-        if (null != termLength)
+        if (null != termLength && !isTermLengthTagRef)
         {
             LogBufferDescriptor.checkTermLength(termLength);
         }

File: aeron-cluster/src/test/java/io/aeron/cluster/AppointedLeaderClusterTest.java
Patch:
@@ -119,7 +119,7 @@ public void before()
                 new ClusteredServiceContainer.Context()
                     .aeronDirectoryName(baseDirName)
                     .archiveContext(archiveCtx.clone())
-                    .clusteredServiceDir(new File(baseDirName, "service"))
+                    .clusterDir(new File(baseDirName, "service"))
                     .clusteredService(echoServices[i])
                     .errorHandler(Throwable::printStackTrace));
         }

File: aeron-cluster/src/test/java/io/aeron/cluster/AppointedLeaderClusterTest.java
Patch:
@@ -121,8 +121,7 @@ public void before()
                     .archiveContext(archiveCtx.clone())
                     .clusteredServiceDir(new File(baseDirName, "service"))
                     .clusteredService(echoServices[i])
-                    .errorHandler(Throwable::printStackTrace)
-                    .deleteDirOnStart(true));
+                    .errorHandler(Throwable::printStackTrace));
         }
 
         client = AeronCluster.connect(

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleHarness.java
Patch:
@@ -180,8 +180,7 @@ public void write(final int b)
                 .clusteredService(this)
                 .terminationHook(() -> {})
                 .archiveContext(aeronArchiveContext.clone())
-                .errorHandler(Throwable::printStackTrace)
-                .deleteDirOnStart(isCleanStart));
+                .errorHandler(Throwable::printStackTrace));
 
         this.cleanOnClose = cleanOnClose;
         aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(mediaDriverPath));

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -179,9 +179,9 @@ public void onAddDestination(
         if (transport.hasExplicitControl())
         {
             addPendingSetupMessage(
-                0, 0, transportIndex, channelEndpoint, true, channelEndpoint.explicitControlAddress());
+                0, 0, transportIndex, channelEndpoint, true, transport.explicitControlAddress());
             channelEndpoint.sendSetupElicitingStatusMessage(
-                transportIndex, channelEndpoint.explicitControlAddress(), 0, 0);
+                transportIndex, transport.explicitControlAddress(), 0, 0);
         }
 
         for (final PublicationImage image : publicationImages)

File: aeron-archive/src/main/java/io/aeron/archive/RecordingFragmentReader.java
Patch:
@@ -250,7 +250,7 @@ private void openRecordingSegment()
 
         if (!segmentFile.exists())
         {
-            throw new IllegalArgumentException("failed to open recording segment file: " + segmentFileName);
+            throw new IllegalArgumentException("failed to open recording segment file " + segmentFileName);
         }
 
         try (FileChannel channel = FileChannel.open(segmentFile.toPath(), FILE_OPTIONS, NO_ATTRIBUTES))

File: aeron-archive/src/main/java/io/aeron/archive/RecordingWriter.java
Patch:
@@ -119,7 +119,7 @@ public void onBlock(
             //noinspection ResultOfMethodCallIgnored
             Thread.interrupted();
             close();
-            throw new IllegalStateException("file closed by interrupt, recording aborted.", ex);
+            throw new IllegalStateException("file closed by interrupt, recording aborted", ex);
         }
         catch (final Exception ex)
         {

File: aeron-archive/src/main/java/io/aeron/archive/RecordingFragmentReader.java
Patch:
@@ -114,7 +114,7 @@ class RecordingFragmentReader implements AutoCloseable
             DataHeaderFlyweight.streamId(termBuffer, fromTermOffset) != recordingSummary.streamId))
         {
             close();
-            throw new IllegalArgumentException("position is not aligned to fragment: " + fromPosition);
+            throw new IllegalArgumentException("position is not aligned to a fragment: " + fromPosition);
         }
 
         replayPosition = fromPosition;

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -107,7 +107,7 @@ enum State
         catch (final Exception ex)
         {
             CloseHelper.close(replayPublication);
-            onError("failed to open cursor on a recording - " + ex.getMessage());
+            onError("failed to replay recording id " + recordingSummary.recordingId + " - " + ex.getMessage());
             LangUtil.rethrowUnchecked(ex);
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/RecordingWriter.java
Patch:
@@ -157,7 +157,7 @@ public void close()
     void init(final int segmentOffset) throws IOException
     {
         segmentPosition = segmentOffset;
-        newRecordingSegmentFile();
+        openRecordingSegmentFile();
 
         if (segmentOffset != 0)
         {
@@ -170,7 +170,7 @@ boolean isClosed()
         return isClosed;
     }
 
-    private void newRecordingSegmentFile()
+    private void openRecordingSegmentFile()
     {
         final File file = new File(archiveDir, segmentFileName(recordingId, segmentIndex));
 
@@ -199,6 +199,6 @@ private void onFileRollOver()
         segmentPosition = 0;
         segmentIndex++;
 
-        newRecordingSegmentFile();
+        openRecordingSegmentFile();
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -182,7 +182,7 @@ public static class Configuration
         public static final int MAX_CONCURRENT_REPLAYS_DEFAULT = 128;
 
         public static final String REPLAY_FRAGMENT_LIMIT_PROP_NAME = "aeron.archive.replay.fragment.limit";
-        public static final int REPLAY_FRAGMENT_LIMIT_DEFAULT = 16;
+        public static final int REPLAY_FRAGMENT_LIMIT_DEFAULT = 64;
 
         public static final String MAX_CATALOG_ENTRIES_PROP_NAME = "aeron.archive.max.catalog.entries";
         public static final long MAX_CATALOG_ENTRIES_DEFAULT = Catalog.DEFAULT_MAX_ENTRIES;

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -380,7 +380,7 @@ void startReplay(
             replayPosition = position;
         }
 
-        if (!RecordingFragmentReader.initialSegmentFileExists(recordingSummary, archiveDir, replayPosition))
+        if (!RecordingFragmentReader.hasInitialSegmentFile(recordingSummary, archiveDir, replayPosition))
         {
             controlSession.sendResponse(
                 correlationId,

File: aeron-archive/src/main/java/io/aeron/archive/CatalogTool.java
Patch:
@@ -134,7 +134,7 @@ private static void verify(
         {
             final String prefix = recordingId + "-";
             String[] segmentFiles =
-                archiveDir.list((dir, name) -> name.endsWith(RECORDING_SEGMENT_POSTFIX));
+                archiveDir.list((dir, name) -> name.startsWith(prefix) && name.endsWith(RECORDING_SEGMENT_POSTFIX));
 
             if (null == segmentFiles)
             {

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -107,7 +107,7 @@ enum State
         catch (final Exception ex)
         {
             CloseHelper.close(replayPublication);
-            onError("failed to open cursor on a recording because: " + ex.getMessage());
+            onError("failed to open cursor on a recording - " + ex.getMessage());
             LangUtil.rethrowUnchecked(ex);
         }
 

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -638,8 +638,8 @@ private void refreshAndFixDescriptor(
         if (headerDecoder.valid() == VALID && decoder.stopTimestamp() == NULL_TIMESTAMP)
         {
             final String prefix = recordingId + "-";
-            String[] segmentFiles =
-                archiveDir.list((dir, name) -> name.endsWith(RECORDING_SEGMENT_POSTFIX));
+            String[] segmentFiles = // Only the segments for recordingId
+                archiveDir.list((dir, name) -> name.startsWith(prefix) && name.endsWith(RECORDING_SEGMENT_POSTFIX));
             int maxSegmentIndex = -1;
 
             if (null == segmentFiles)

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -638,8 +638,8 @@ private void refreshAndFixDescriptor(
         if (headerDecoder.valid() == VALID && decoder.stopTimestamp() == NULL_TIMESTAMP)
         {
             final String prefix = recordingId + "-";
-            String[] segmentFiles =
-                archiveDir.list((dir, name) -> name.endsWith(RECORDING_SEGMENT_POSTFIX));
+            String[] segmentFiles = // Only the segments for recordingId
+                archiveDir.list((dir, name) -> name.startsWith(prefix) && name.endsWith(RECORDING_SEGMENT_POSTFIX));
             int maxSegmentIndex = -1;
 
             if (null == segmentFiles)

File: aeron-agent/src/main/java/io/aeron/agent/EventCode.java
Patch:
@@ -81,7 +81,7 @@ private interface DissectFunction
             final int id = code.id();
             if (null != EVENT_CODE_BY_ID[id])
             {
-                throw new IllegalArgumentException("Id already in use: " + id);
+                throw new IllegalArgumentException("id already in use: " + id);
             }
 
             EVENT_CODE_BY_ID[id] = code;
@@ -115,14 +115,14 @@ public static EventCode get(final int id)
     {
         if (id < 0 || id > MAX_ID)
         {
-            throw new IllegalArgumentException("No EventCode for ID: " + id);
+            throw new IllegalArgumentException("no EventCode for id: " + id);
         }
 
         final EventCode code = EVENT_CODE_BY_ID[id];
 
         if (null == code)
         {
-            throw new IllegalArgumentException("No EventCode for ID: " + id);
+            throw new IllegalArgumentException("no EventCode for id: " + id);
         }
 
         return code;

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -429,18 +429,18 @@ public void conclude()
             if (!archiveDir.exists() && !archiveDir.mkdirs())
             {
                 throw new IllegalArgumentException(
-                    "Failed to create archive dir: " + archiveDir.getAbsolutePath());
+                    "failed to create archive dir: " + archiveDir.getAbsolutePath());
             }
 
             archiveDirChannel = channelForDirectorySync(archiveDir, fileSyncLevel);
 
             if (!BitUtil.isPowerOfTwo(segmentFileLength))
             {
-                throw new ConfigurationException("Segment file length not a power of 2: " + segmentFileLength);
+                throw new ConfigurationException("segment file length not a power of 2: " + segmentFileLength);
             }
             else if (segmentFileLength < TERM_MIN_LENGTH || segmentFileLength > TERM_MAX_LENGTH)
             {
-                throw new ConfigurationException("Segment file length not in valid range: " + segmentFileLength);
+                throw new ConfigurationException("segment file length not in valid range: " + segmentFileLength);
             }
 
             if (null == markFile)

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveMarkFile.java
Patch:
@@ -68,7 +68,7 @@ public ArchiveMarkFile(
             {
                 if (version != MarkFileHeaderDecoder.SCHEMA_VERSION)
                 {
-                    throw new IllegalArgumentException("Mark file version " + version +
+                    throw new IllegalArgumentException("mark file version " + version +
                         " does not match software:" + MarkFileHeaderDecoder.SCHEMA_VERSION);
                 }
             },
@@ -100,7 +100,7 @@ public ArchiveMarkFile(
             {
                 if (version != MarkFileHeaderDecoder.SCHEMA_VERSION)
                 {
-                    throw new IllegalArgumentException("Mark file version " + version +
+                    throw new IllegalArgumentException("mark file version " + version +
                         " does not match software:" + MarkFileHeaderDecoder.SCHEMA_VERSION);
                 }
             },

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestAdapter.java
Patch:
@@ -221,7 +221,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 break;
 
             default:
-                throw new IllegalArgumentException("Unexpected template id:" + templateId);
+                throw new IllegalArgumentException("unexpected template id:" + templateId);
         }
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/ControlResponseProxy.java
Patch:
@@ -139,17 +139,17 @@ private static void checkResult(final Publication controlPublication, final long
     {
         if (result == Publication.NOT_CONNECTED)
         {
-            throw new IllegalStateException("Response publication is not connected: " + controlPublication.channel());
+            throw new IllegalStateException("response publication is not connected: " + controlPublication.channel());
         }
 
         if (result == Publication.CLOSED)
         {
-            throw new IllegalStateException("Response publication is closed: " + controlPublication.channel());
+            throw new IllegalStateException("response publication is closed: " + controlPublication.channel());
         }
 
         if (result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Response publication at max position: " + controlPublication.channel());
+            throw new IllegalStateException("response publication at max position: " + controlPublication.channel());
         }
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/RecordingEventsProxy.java
Patch:
@@ -93,12 +93,12 @@ private void send(final int length)
 
             if (result == Publication.CLOSED)
             {
-                throw new IllegalStateException("Recording events publication is closed");
+                throw new IllegalStateException("recording events publication is closed");
             }
 
             if (result == Publication.MAX_POSITION_EXCEEDED)
             {
-                throw new IllegalStateException("Recording events publication at max position");
+                throw new IllegalStateException("recording events publication at max position");
             }
 
             idleStrategy.idle();

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -795,7 +795,7 @@ public long getRecordingPosition(final long recordingId)
 
             if (!archiveProxy.getRecordingPosition(recordingId, correlationId, controlSessionId))
             {
-                throw new IllegalStateException("Failed to send get recording position request");
+                throw new IllegalStateException("failed to send get recording position request");
             }
 
             return pollForResponse(correlationId);

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponseAdapter.java
Patch:
@@ -114,7 +114,7 @@ public void onFragment(
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -181,7 +181,7 @@ public ControlledFragmentAssembler.Action onFragment(
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
 
         pollComplete = true;

File: aeron-archive/src/main/java/io/aeron/archive/client/RecordingDescriptorPoller.java
Patch:
@@ -201,7 +201,7 @@ public void reset(
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
 
         return Action.CONTINUE;

File: aeron-archive/src/main/java/io/aeron/archive/client/RecordingEventsAdapter.java
Patch:
@@ -115,7 +115,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
     }
 }

File: aeron-archive/src/main/java/io/aeron/archive/client/RecordingEventsPoller.java
Patch:
@@ -173,7 +173,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
 
         pollComplete = true;

File: aeron-archive/src/test/java/io/aeron/archive/TestUtil.java
Patch:
@@ -52,7 +52,7 @@ public static File makeTestDirectory()
 
         if (!archiveDir.mkdirs())
         {
-            throw new IllegalStateException("Failed to make archive test directory: " + archiveDir.getAbsolutePath());
+            throw new IllegalStateException("failed to make archive test directory: " + archiveDir.getAbsolutePath());
         }
 
         return archiveDir;
@@ -161,7 +161,7 @@ public static void await(final BooleanSupplier conditionSupplier)
         {
             if (Thread.currentThread().isInterrupted())
             {
-                throw new IllegalStateException("Unexpected interrupt in test");
+                throw new IllegalStateException("unexpected interrupt in test");
             }
 
             if (System.nanoTime() > deadlineNs)

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveReplayLoadTest.java
Patch:
@@ -224,7 +224,7 @@ private void publishDataToBeRecorded(final Publication publication)
 
                 if (result == Publication.CLOSED || result == Publication.NOT_CONNECTED)
                 {
-                    throw new IllegalStateException("Publication unexpected not connected");
+                    throw new IllegalStateException("publication unexpectedly not connected");
                 }
 
                 Thread.yield();

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterControl.java
Patch:
@@ -137,7 +137,7 @@ public static ToggleState get(final AtomicCounter controlToggle)
 
             if (toggleValue < 0 || toggleValue > (STATES.length - 1))
             {
-                throw new IllegalStateException("Invalid toggle value: " + toggleValue);
+                throw new IllegalStateException("invalid toggle value: " + toggleValue);
             }
 
             return STATES[(int)toggleValue];

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterMember.java
Patch:
@@ -295,7 +295,7 @@ public static ClusterMember[] parse(final String value)
             final String[] memberAttributes = endpointsDetail.split(",");
             if (memberAttributes.length != 5)
             {
-                throw new IllegalStateException("Invalid member value: " + endpointsDetail + " within: " + value);
+                throw new IllegalStateException("invalid member value: " + endpointsDetail + " within: " + value);
             }
 
             members[i] = new ClusterMember(

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterSession.java
Patch:
@@ -88,7 +88,7 @@ void connect(final Aeron aeron)
     {
         if (null != responsePublication)
         {
-            throw new IllegalStateException("Response publication already present");
+            throw new IllegalStateException("response publication already added");
         }
 
         responsePublication = aeron.addPublication(responseChannel, responseStreamId);

File: aeron-cluster/src/main/java/io/aeron/cluster/Election.java
Patch:
@@ -63,7 +63,7 @@ enum State
                 final int code = state.code();
                 if (null != STATES[code])
                 {
-                    throw new IllegalStateException("Code already in use: " + code);
+                    throw new IllegalStateException("code already in use: " + code);
                 }
 
                 STATES[code] = state;
@@ -86,7 +86,7 @@ public static State get(final int code)
         {
             if (code < 0 || code > (STATES.length - 1))
             {
-                throw new IllegalStateException("Invalid state counter code: " + code);
+                throw new IllegalStateException("invalid state counter code: " + code);
             }
 
             return STATES[code];

File: aeron-cluster/src/main/java/io/aeron/cluster/LogPublisher.java
Patch:
@@ -206,7 +206,7 @@ private static void checkResult(final long result)
             result == Publication.CLOSED ||
             result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Unexpected publication state: " + result);
+            throw new IllegalStateException("unexpected publication state: " + result);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/MemberStatusAdapter.java
Patch:
@@ -166,7 +166,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 break;
 
             default:
-                throw new IllegalStateException("Unknown template id: " + templateId);
+                throw new IllegalStateException("unknown template id: " + templateId);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/MemberStatusPublisher.java
Patch:
@@ -261,7 +261,7 @@ private static void checkResult(final long result)
     {
         if (result == Publication.CLOSED || result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Unexpected publication state: " + result);
+            throw new IllegalStateException("unexpected publication state: " + result);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/SequencerAgent.java
Patch:
@@ -322,7 +322,7 @@ public void onServiceAck(
         }
         else if (serviceAckCount > ctx.serviceCount())
         {
-            throw new IllegalStateException("Service count exceeded: " + serviceAckCount);
+            throw new IllegalStateException("service count ACK exceeded: " + serviceAckCount);
         }
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/client/EgressAdapter.java
Patch:
@@ -110,7 +110,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/client/EgressPoller.java
Patch:
@@ -206,7 +206,7 @@ public ControlledFragmentAssembler.Action onFragment(
                 break;
 
             default:
-                throw new IllegalStateException("Unknown templateId: " + templateId);
+                throw new IllegalStateException("unknown templateId: " + templateId);
         }
 
         pollComplete = true;

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusterMarkFile.java
Patch:
@@ -71,7 +71,7 @@ public ClusterMarkFile(
             {
                 if (version != MarkFileHeaderDecoder.SCHEMA_VERSION)
                 {
-                    throw new IllegalArgumentException("Mark file version " + version +
+                    throw new IllegalArgumentException("mark file version " + version +
                         " does not match software:" + MarkFileHeaderDecoder.SCHEMA_VERSION);
                 }
             },
@@ -125,7 +125,7 @@ public ClusterMarkFile(
             {
                 if (version != MarkFileHeaderDecoder.SCHEMA_VERSION)
                 {
-                    throw new IllegalArgumentException("Mark file version " + version +
+                    throw new IllegalArgumentException("mark file version " + version +
                         " does not match software:" + MarkFileHeaderDecoder.SCHEMA_VERSION);
                 }
             },

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -488,7 +488,7 @@ public void conclude()
 
             if (null == errorCounter)
             {
-                throw new IllegalStateException("Error counter must be supplied");
+                throw new IllegalStateException("error counter must be supplied");
             }
 
             if (null == countedErrorHandler)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/RecordingLog.java
Patch:
@@ -715,7 +715,7 @@ public void tombstoneEntry(final long leadershipTermId, final int entryIndex)
 
         if (-1 == index)
         {
-            throw new IllegalArgumentException("Unknown entry index: " + entryIndex);
+            throw new IllegalArgumentException("unknown entry index: " + entryIndex);
         }
 
         buffer.putInt(0, NULL_VALUE, LITTLE_ENDIAN);
@@ -825,7 +825,7 @@ private static void getRecordingExtent(
     {
         if (archive.listRecording(entry.recordingId, recordingExtent) == 0)
         {
-            throw new IllegalStateException("Unknown recording id: " + entry.recordingId);
+            throw new IllegalStateException("unknown recording id: " + entry.recordingId);
         }
     }
 
@@ -840,7 +840,7 @@ private int getLeadershipTermEntryIndex(final long leadershipTermId)
             }
         }
 
-        throw new IllegalArgumentException("Unknown leadershipTermId: " + leadershipTermId);
+        throw new IllegalArgumentException("unknown leadershipTermId: " + leadershipTermId);
     }
 
     private static ReplayStep planRecovery(

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlAdapter.java
Patch:
@@ -120,7 +120,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 break;
 
             default:
-                throw new IllegalArgumentException("Unknown template id: " + templateId);
+                throw new IllegalArgumentException("unknown template id: " + templateId);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlPublisher.java
Patch:
@@ -123,7 +123,7 @@ public void ackAction(
         }
         while (--attempts > 0);
 
-        throw new IllegalStateException("Failed to send ACK");
+        throw new IllegalStateException("failed to send ACK");
     }
 
     public void joinLog(
@@ -161,7 +161,7 @@ public void joinLog(
         }
         while (--attempts > 0);
 
-        throw new IllegalStateException("Failed to send log connect request");
+        throw new IllegalStateException("failed to send log connect request");
     }
 
     public boolean closeSession(final long clusterSessionId)
@@ -196,7 +196,7 @@ private static void checkResult(final long result)
             result == Publication.CLOSED ||
             result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Unexpected publication state: " + result);
+            throw new IllegalStateException("unexpected publication state: " + result);
         }
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/SnapshotTaker.java
Patch:
@@ -88,7 +88,7 @@ protected static void checkInterruptedStatus()
     {
         if (Thread.currentThread().isInterrupted())
         {
-            throw new AgentTerminationException("Unexpected interrupt during operation");
+            throw new AgentTerminationException("unexpected interrupt during operation");
         }
     }
 
@@ -98,7 +98,7 @@ protected static void checkResult(final long result)
             result == Publication.CLOSED ||
             result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Unexpected publication state: " + result);
+            throw new IllegalStateException("unexpected publication state: " + result);
         }
     }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -427,7 +427,7 @@ private static void checkResult(final long result)
             result == Publication.CLOSED ||
             result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Unexpected publication state: " + result);
+            throw new IllegalStateException("unexpected publication state: " + result);
         }
     }
 }

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -256,7 +256,7 @@ public void onSessionMessage(
 
                 if (!cluster.scheduleTimer(correlationId, timestampMs + 100))
                 {
-                    throw new IllegalStateException("Unexpected back pressure");
+                    throw new IllegalStateException("unexpected back pressure");
                 }
             }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/ConsensusModuleHarness.java
Patch:
@@ -617,7 +617,7 @@ private static void checkOfferResult(final long result)
             result == Publication.CLOSED ||
             result == Publication.MAX_POSITION_EXCEEDED)
         {
-            throw new IllegalStateException("Unexpected publication state: " + result);
+            throw new IllegalStateException("unexpected publication state: " + result);
         }
     }
 }

File: aeron-samples/src/main/java/io/aeron/samples/LogInspector.java
Patch:
@@ -99,7 +99,7 @@ public static void main(final String[] args)
 
             for (int i = 0; i < PARTITION_COUNT; i++)
             {
-                final long rawTail = rawTailVolatile(metaDataBuffer, 0);
+                final long rawTail = rawTailVolatile(metaDataBuffer, i);
                 final long termOffset = rawTail & 0xFFFF_FFFFL;
                 final int termId = termId(rawTail);
                 final int offset = (int)Math.min(termOffset, termLength);

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlPublisher.java
Patch:
@@ -187,7 +187,7 @@ public void closeSession(final long clusterSessionId)
         }
         while (--attempts > 0);
 
-        throw new IllegalStateException("Failed to schedule timer");
+        throw new IllegalStateException("Failed to close session");
     }
 
     private static void checkResult(final long result)

File: aeron-archive/src/main/java/io/aeron/archive/CatalogTool.java
Patch:
@@ -126,7 +126,7 @@ private static void verify(
 
         final int recordingFileCount = (int)((dataLength + segmentFileLength - 1) / segmentFileLength);
 
-        final String prefix = recordingId + ".";
+        final String prefix = recordingId + "-";
         final boolean[] filesFound = new boolean[recordingFileCount];
         for (final String fileName : archiveDir.list((dir, name) -> name.startsWith(prefix)))
         {
@@ -139,7 +139,6 @@ private static void verify(
             catch (final Exception ex)
             {
                 System.err.println("(recordingId=" + recordingId + ") ERR: malformed recording filename:" + fileName);
-                ex.printStackTrace(System.err);
                 headerEncoder.valid(INVALID);
                 return;
             }

File: aeron-cluster/src/test/java/io/aeron/cluster/AuthenticationTest.java
Patch:
@@ -509,6 +509,7 @@ private void launchClusteredMediaDriver(final AuthenticatorSupplier authenticato
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .deleteArchiveOnStart(true),
             new ConsensusModule.Context()
+                .errorHandler(Throwable::printStackTrace)
                 .authenticatorSupplier(authenticatorSupplier)
                 .deleteDirOnStart(true));
     }

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -415,6 +415,7 @@ private void launchClusteredMediaDriver(final boolean initialLaunch)
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .deleteArchiveOnStart(initialLaunch),
             new ConsensusModule.Context()
+                .errorHandler(Throwable::printStackTrace)
                 .snapshotCounter(mockSnapshotCounter)
                 .terminationHook(() -> isTerminated.set(true))
                 .deleteDirOnStart(initialLaunch));

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -64,6 +64,7 @@ public void before()
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .deleteArchiveOnStart(true),
             new ConsensusModule.Context()
+                .errorHandler(Throwable::printStackTrace)
                 .deleteDirOnStart(true));
     }
 

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterTest.java
Patch:
@@ -104,6 +104,7 @@ public void before()
                     .threadingMode(ArchiveThreadingMode.SHARED)
                     .deleteArchiveOnStart(true),
                 new ConsensusModule.Context()
+                    .errorHandler(Throwable::printStackTrace)
                     .clusterMemberId(i)
                     .clusterMembers(CLUSTER_MEMBERS)
                     .appointedLeaderId(0)

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -980,7 +980,7 @@ private void connectToDriver()
                 {
                     if (epochClock.time() > (startTimeMs + driverTimeoutMs()))
                     {
-                        throw new DriverTimeoutException("CnC file not found: " + cncFile.getAbsolutePath());
+                        throw new DriverTimeoutException("CnC file not created: " + cncFile.getAbsolutePath());
                     }
 
                     sleep(16);

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -976,7 +976,7 @@ private void connectToDriver()
 
             while (true)
             {
-                while (!cncFile.exists())
+                while (!cncFile.exists() || cncFile.length() <= 0)
                 {
                     if (epochClock.time() > (startTimeMs + driverTimeoutMs()))
                     {

File: aeron-cluster/src/test/java/io/aeron/cluster/SingleNodeTest.java
Patch:
@@ -33,7 +33,7 @@ public void shouldBeAbleToComeUpInDefaultConfig()
         final ClusteredService mockService = mock(ClusteredService.class);
 
         try (ConsensusModuleHarness harness = new ConsensusModuleHarness(
-            new ConsensusModule.Context(), mockService, null, true, true))
+            new ConsensusModule.Context(), mockService, null, true, true, false))
         {
             harness.awaitServiceOnStart();
         }
@@ -47,7 +47,7 @@ public void shouldBeAbleToLoadUpFromPreviousLog()
         final ClusteredService mockService = mock(ClusteredService.class);
 
         try (ConsensusModuleHarness harness = new ConsensusModuleHarness(
-            new ConsensusModule.Context(), mockService, null, false, true))
+            new ConsensusModule.Context(), mockService, null, false, true, false))
         {
             harness.awaitServiceOnStart();
             harness.awaitServiceOnMessageCounter(10);

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingCatchUp.java
Patch:
@@ -96,7 +96,6 @@ enum State
     public void close()
     {
         CloseHelper.close(srcArchive);
-        CloseHelper.close(dstArchive);
     }
 
     public int doWork(final long nowMs)
@@ -277,7 +276,7 @@ private int tryExtendRecording()
 
             if (dstArchive.archiveProxy().extendRecording(
                 extendChannel,
-                context.replayStreamId(),
+                context.logStreamId(),
                 SourceLocation.REMOTE,
                 recordingIdToExtend,
                 correlationId,
@@ -313,7 +312,7 @@ private int tryStartReplay()
                 fromPosition,
                 targetPosition - fromPosition,
                 replayChannel,
-                context.replayStreamId(),
+                context.logStreamId(),
                 correlationId,
                 srcArchive.controlSessionId()))
             {

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlAdapter.java
Patch:
@@ -105,6 +105,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     joinLogDecoder.commitPositionId(),
                     joinLogDecoder.logSessionId(),
                     joinLogDecoder.logStreamId(),
+                    joinLogDecoder.ackBeforeImage() == BooleanType.TRUE,
                     joinLogDecoder.logChannel());
                 break;
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlPublisher.java
Patch:
@@ -131,6 +131,7 @@ public void joinLog(
         final int commitPositionId,
         final int logSessionId,
         final int logStreamId,
+        final boolean ackBeforeImage,
         final String channel)
     {
         final int length = MessageHeaderEncoder.ENCODED_LENGTH + JoinLogEncoder.BLOCK_LENGTH +
@@ -148,6 +149,7 @@ public void joinLog(
                     .commitPositionId(commitPositionId)
                     .logSessionId(logSessionId)
                     .logStreamId(logStreamId)
+                    .ackBeforeImage((ackBeforeImage ? BooleanType.TRUE : BooleanType.FALSE))
                     .logChannel(channel);
 
                 bufferClaim.commit();

File: aeron-cluster/src/main/java/io/aeron/cluster/service/RecordingExtent.java
Patch:
@@ -29,6 +29,7 @@ public class RecordingExtent implements RecordingDescriptorConsumer
     public long stopTimestamp;
     public long startPosition;
     public long stopPosition;
+    public int sessionId;
 
     public void onRecordingDescriptor(
         final long controlSessionId,
@@ -53,6 +54,7 @@ public void onRecordingDescriptor(
         this.stopTimestamp = stopTimestamp;
         this.startPosition = startPosition;
         this.stopPosition = stopPosition;
+        this.sessionId = sessionId;
     }
 
     public String toString()
@@ -63,6 +65,7 @@ public String toString()
             ", stopTimestamp=" + stopTimestamp +
             ", startPosition=" + startPosition +
             ", stopPosition=" + stopPosition +
+            ", sessionId=" + sessionId +
             '}';
     }
 }

File: aeron-cluster/src/main/java/io/aeron/cluster/SequencerAgent.java
Patch:
@@ -695,7 +695,7 @@ void onReloadState(final long nextSessionId)
         this.nextSessionId = nextSessionId;
     }
 
-    void catchupLog(final RecordingCatchUp recordingCatchUp)
+    private void catchupLog(final RecordingCatchUp recordingCatchUp)
     {
         final long fromPosition = recordingCatchUp.fromPosition();
         final long targetPosition = recordingCatchUp.targetPosition();

File: aeron-cluster/src/main/java/io/aeron/cluster/service/RecordingLog.java
Patch:
@@ -284,14 +284,14 @@ public int encode(final MutableDirectBuffer buffer, final int offset)
 
             if (null != snapshotStep)
             {
-                snapshotStep.encode(stepEncoder);
                 stepEncoder.next();
+                snapshotStep.encode(stepEncoder);
             }
 
             for (int i = 0, size = termSteps.size(); i < size; i++)
             {
-                termSteps.get(i).encode(stepEncoder);
                 stepEncoder.next();
+                termSteps.get(i).encode(stepEncoder);
             }
 
             return encoder.encodedLength();

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingCatchUpSupplier.java
Patch:
@@ -19,7 +19,7 @@
 import io.aeron.cluster.client.RecordingLog;
 import org.agrona.concurrent.status.CountersReader;
 
-public interface RecordingCatchUpSupplier
+interface RecordingCatchUpSupplier
 {
     RecordingCatchUp catchUp(
         AeronArchive.Context localArchiveContext,

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsSessionTest.java
Patch:
@@ -20,6 +20,7 @@
 
 public class ListRecordingsSessionTest
 {
+    private static final int MAX_ENTRIES = 1024;
     private static final int SEGMENT_FILE_SIZE = 128 * 1024 * 1024;
     private final RecordingDescriptorDecoder recordingDescriptorDecoder = new RecordingDescriptorDecoder();
     private long[] recordingIds = new long[3];
@@ -35,7 +36,7 @@ public class ListRecordingsSessionTest
     @Before
     public void before()
     {
-        catalog = new Catalog(archiveDir, null, 0, Catalog.DEFAULT_MAX_ENTRIES, clock);
+        catalog = new Catalog(archiveDir, null, 0, MAX_ENTRIES, clock);
         recordingIds[0] = catalog.addNewRecording(
             0L, 0L, 0, SEGMENT_FILE_SIZE, 4096, 1024, 6, 1, "channelG", "channelG?tag=f", "sourceA");
         recordingIds[1] = catalog.addNewRecording(

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -114,7 +114,7 @@ public void shouldBecomeFollowerStaticThreeNodeConfigWithElection()
             .appointedLeaderId(1);
 
         try (ConsensusModuleHarness harness = new ConsensusModuleHarness(
-            context, mockService, printStatusListeners, true, true))
+            context, mockService, mockMemberStatusListeners, true, true))
         {
             harness.memberStatusPublisher().requestVote(
                 harness.memberStatusPublication(1), 0, 0, 0, 1);

File: aeron-cluster/src/main/java/io/aeron/cluster/client/RecordingLog.java
Patch:
@@ -612,7 +612,7 @@ public void appendSnapshot(
         {
             final Entry entry = entries.get(size - 1);
 
-            if (entry.leadershipTermId != leadershipTermId)
+            if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId)
             {
                 throw new IllegalStateException("leadershipTermId out of sequence: previous " +
                     entry.leadershipTermId + " this " + leadershipTermId);

File: aeron-cluster/src/main/java/io/aeron/cluster/client/RecordingLog.java
Patch:
@@ -612,7 +612,7 @@ public void appendSnapshot(
         {
             final Entry entry = entries.get(size - 1);
 
-            if (entry.leadershipTermId != leadershipTermId)
+            if (entry.type == ENTRY_TYPE_TERM && entry.leadershipTermId != leadershipTermId)
             {
                 throw new IllegalStateException("leadershipTermId out of sequence: previous " +
                     entry.leadershipTermId + " this " + leadershipTermId);

File: aeron-cluster/src/test/java/io/aeron/cluster/MultiNodeTest.java
Patch:
@@ -34,15 +34,16 @@ public class MultiNodeTest
         "2,localhost:9012,localhost:9022,localhost:9032,localhost:8012";
 
     private final MemberStatusListener[] mockMemberStatusListeners = new MemberStatusListener[3];
-    final MemberStatusListener[] printStatusListeners =
-        ConsensusModuleHarness.printMemberStatusMixIn(System.out, mockMemberStatusListeners);
+    private final MemberStatusListener[] printStatusListeners = new MemberStatusListener[3];
 
     @Before
     public void before()
     {
         for (int i = 0; i < mockMemberStatusListeners.length; i++)
         {
             mockMemberStatusListeners[i] = mock(MemberStatusListener.class);
+            printStatusListeners[i] =
+                ConsensusModuleHarness.printMemberStatusMixIn(System.out, mockMemberStatusListeners[i]);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/RecordingFragmentReader.java
Patch:
@@ -117,7 +117,7 @@ class RecordingFragmentReader implements AutoCloseable
             DataHeaderFlyweight.streamId(termBuffer, fromTermOffset) != recordingSummary.streamId)
         {
             close();
-            throw new IllegalArgumentException("fromPosition is not aligned to fragment: " + fromPosition);
+            throw new IllegalArgumentException("position is not aligned to fragment: " + fromPosition);
         }
 
         replayPosition = fromPosition;

File: aeron-client/src/main/java/io/aeron/Subscription.java
Patch:
@@ -126,7 +126,7 @@ public int streamId()
     }
 
     /**
-     * Return the registration id used to register this Publication with the media driver.
+     * Return the registration id used to register this Subscription with the media driver.
      *
      * @return registration id
      */

File: aeron-client/src/main/java/io/aeron/Subscription.java
Patch:
@@ -126,7 +126,7 @@ public int streamId()
     }
 
     /**
-     * Return the registration id used to register this Publication with the media driver.
+     * Return the registration id used to register this Subscription with the media driver.
      *
      * @return registration id
      */

File: aeron-samples/src/main/java/io/aeron/samples/FileSender.java
Patch:
@@ -57,13 +57,13 @@
  *  |                       Correlation ID                          |
  *  |                                                               |
  *  +---------------------------------------------------------------+
- *  |                           Offset                              |
+ *  |                        File Length                            |
  *  |                                                               |
  *  +---------------------------------------------------------------+
- *  |                           Length                              |
+ *  |                           Offset                              |
  *  |                                                               |
  *  +---------------------------------------------------------------+
- *  |                        File Length                            |
+ *  |                           Length                              |
  *  |                                                               |
  *  +---------------------------------------------------------------+
  * </pre>

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusteredMediaDriver.java
Patch:
@@ -87,9 +87,7 @@ public static ClusteredMediaDriver launch(
             .errorHandler(driverCtx.errorHandler())
             .errorCounter(driverCtx.systemCounters().get(SystemCounterDescriptor.ERRORS)));
 
-        final ConsensusModule consensusModule = ConsensusModule.launch(consensusModuleCtx
-            .errorHandler(driverCtx.errorHandler())
-            .errorCounter(driverCtx.systemCounters().get(SystemCounterDescriptor.ERRORS)));
+        final ConsensusModule consensusModule = ConsensusModule.launch(consensusModuleCtx);
 
         return new ClusteredMediaDriver(driver, archive, consensusModule);
     }

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannel.java
Patch:
@@ -31,7 +31,7 @@
 import static java.net.InetAddress.getByAddress;
 
 /**
- * The media configuration for a Aeron UDP channel as an instantiation of the socket addresses for a {@link ChannelUri}.
+ * The media configuration for Aeron UDP channels as an instantiation of the socket addresses for a {@link ChannelUri}.
  *
  * @see ChannelUri
  * @see io.aeron.ChannelUriStringBuilder

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -87,7 +87,7 @@ public ChannelUriStringBuilder validate()
             throw new IllegalStateException("media type is mandatory");
         }
 
-        if ("udp".equals(media) && (null == endpoint && null == controlEndpoint))
+        if (CommonContext.UDP_MEDIA.equals(media) && (null == endpoint && null == controlEndpoint))
         {
             throw new IllegalStateException("Either 'endpoint' or 'control' must be specified for UDP.");
         }
@@ -144,8 +144,8 @@ public ChannelUriStringBuilder media(final String media)
     {
         switch (media)
         {
-            case "udp":
-            case "ipc":
+            case CommonContext.UDP_MEDIA:
+            case CommonContext.IPC_MEDIA:
                 break;
 
             default:

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterMember.java
Patch:
@@ -21,6 +21,7 @@
 import org.agrona.CloseHelper;
 
 import static io.aeron.CommonContext.ENDPOINT_PARAM_NAME;
+import static io.aeron.CommonContext.UDP_MEDIA;
 
 /**
  * Represents a member of the cluster that participates in replication.
@@ -417,7 +418,7 @@ public static boolean awaitingVotes(final ClusterMember[] clusterMembers)
 
     public static void checkArchiveEndpoint(final ClusterMember thisMember, final ChannelUri archiveControlRequestUri)
     {
-        if (!archiveControlRequestUri.media().equals("udp"))
+        if (!UDP_MEDIA.equals(archiveControlRequestUri.media()))
         {
             throw new IllegalStateException("archive control request channel must be udp");
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/RecordingCatchUp.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron.cluster;
 
 import io.aeron.ChannelUriStringBuilder;
+import io.aeron.CommonContext;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.archive.codecs.SourceLocation;
 import io.aeron.archive.status.RecordingPos;
@@ -142,7 +143,7 @@ public static RecordingCatchUp catchUp(
         final long extendStopPosition = leaderLastStep.recordingStopPosition;
 
         final ChannelUriStringBuilder archiveControlRequestChannel = new ChannelUriStringBuilder()
-            .media("udp")
+            .media(CommonContext.UDP_MEDIA)
             .endpoint(leader.archiveEndpoint());
 
         final AeronArchive.Context leaderArchiveContext = new AeronArchive.Context()

File: aeron-cluster/src/main/java/io/aeron/cluster/SequencerAgent.java
Patch:
@@ -450,7 +450,8 @@ public void onAdminQuery(final long correlationId, final long clusterSessionId,
             }
             else
             {
-                // TODO: error back, but leave client open.
+                session.lastActivity(cachedEpochClock.time(), correlationId);
+                egressPublisher.sendEvent(session, EventCode.ERROR, "Principal does not have QUERY capability");
             }
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/SnapshotLoader.java
Patch:
@@ -102,8 +102,8 @@ public Action onFragment(final DirectBuffer buffer, final int offset, final int
 
                 sequencerAgent.onLoadSession(
                     clusterSessionDecoder.openedTermPosition(),
-                    clusterSessionDecoder.clusterSessionId(),
                     clusterSessionDecoder.lastCorrelationId(),
+                    clusterSessionDecoder.clusterSessionId(),
                     clusterSessionDecoder.timeOfLastActivity(),
                     clusterSessionDecoder.closeReason(),
                     clusterSessionDecoder.responseStreamId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/SequencerAgent.java
Patch:
@@ -1341,15 +1341,15 @@ private void validateServiceAck(
         final long currentLogPosition = baseLogPosition + currentTermPosition();
         if (logPosition != currentLogPosition || leadershipTermId != this.leadershipTermId)
         {
-            throw new IllegalStateException("Invalid log state:" +
+            throw new IllegalStateException("invalid log state:" +
                 " serviceId=" + serviceId +
                 ", logPosition=" + logPosition + " current is " + currentLogPosition +
                 ", leadershipTermId=" + leadershipTermId + " current is " + this.leadershipTermId);
         }
 
         if (!state.isValid(action))
         {
-            throw new IllegalStateException("Invalid action ack for state " + state + " action " + action);
+            throw new IllegalStateException("invalid service ACK given state " + state + ", action " + action);
         }
     }
 
@@ -1484,7 +1484,6 @@ private void takeSnapshot(final long timestampMs, final long termPosition)
 
         ctx.recordingLog().appendSnapshot(recordingId, leadershipTermId, baseLogPosition, termPosition, timestampMs);
         ctx.snapshotCounter().incrementOrdered();
-
     }
 
     private void awaitRecordingComplete(

File: aeron-cluster/src/main/java/io/aeron/cluster/SequencerAgent.java
Patch:
@@ -1263,8 +1263,8 @@ private void recoverFromLog(final List<RecordingLog.ReplayStep> steps, final Aer
 
             if (logPosition != baseLogPosition)
             {
-                throw new IllegalStateException("base position for log not as expected: expected " +
-                    baseLogPosition + " actual is " + logPosition + ", " + step);
+                throw new IllegalStateException("invalid base position for log: expected=" +
+                    baseLogPosition + " actual=" + logPosition + ", " + step);
             }
 
             leadershipTermId = entry.leadershipTermId;

File: aeron-cluster/src/test/java/io/aeron/cluster/service/RecordingLogTest.java
Patch:
@@ -35,7 +35,7 @@ public class RecordingLogTest
     @After
     public void after()
     {
-        IoUtil.delete(new File(TEMP_DIR, RecordingLog.RECORDING_INDEX_FILE_NAME), false);
+        IoUtil.delete(new File(TEMP_DIR, RecordingLog.RECORDING_LOG_FILE_NAME), false);
     }
 
     @Test

File: aeron-client/src/main/java/io/aeron/logbuffer/ExclusiveTermAppender.java
Patch:
@@ -392,7 +392,7 @@ public int appendFragmentedMessage(
                     final int vectorRemaining = vector.length - vectorOffset;
                     final int numBytes = Math.min(bytesToWrite - bytesWritten, vectorRemaining);
 
-                    termBuffer.putBytes(payloadOffset, vector.buffer, vectorOffset, numBytes);
+                    termBuffer.putBytes(payloadOffset, vector.buffer, vector.offset + vectorOffset, numBytes);
 
                     bytesWritten += numBytes;
                     payloadOffset += numBytes;

File: aeron-client/src/main/java/io/aeron/logbuffer/TermAppender.java
Patch:
@@ -378,7 +378,7 @@ public int appendFragmentedMessage(
                     final int vectorRemaining = vector.length - vectorOffset;
                     final int numBytes = Math.min(bytesToWrite - bytesWritten, vectorRemaining);
 
-                    termBuffer.putBytes(payloadOffset, vector.buffer, vectorOffset, numBytes);
+                    termBuffer.putBytes(payloadOffset, vector.buffer, vector.offset + vectorOffset, numBytes);
 
                     bytesWritten += numBytes;
                     payloadOffset += numBytes;

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -467,7 +467,7 @@ long stopPosition(final long recordingId)
     {
         final int offset = recordingDescriptorOffset(recordingId) +
             RecordingDescriptorHeaderDecoder.BLOCK_LENGTH +
-            startPositionEncodingOffset();
+            stopPositionEncodingOffset();
 
         final long stopPosition = fieldAccessBuffer.getLongVolatile(offset);
 

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -42,7 +42,6 @@ private enum State
     private final RecordingWriter recordingWriter;
     private State state = State.INIT;
     private final String originalChannel;
-    private final Archive.Context ctx;
 
     RecordingSession(
         final long recordingId,
@@ -59,7 +58,6 @@ private enum State
         this.recordingEventsProxy = recordingEventsProxy;
         this.image = image;
         this.position = position;
-        this.ctx = ctx;
 
         final int termBufferLength = image.termBufferLength();
         blockLengthLimit = Math.min(termBufferLength, MAX_BLOCK_LENGTH);
@@ -112,7 +110,6 @@ public int doWork()
         {
             state = State.STOPPED;
             final long stopPosition = position.getWeak();
-            ctx.catalog().recordingStopped(recordingId, stopPosition, ctx.epochClock().time());
             recordingEventsProxy.stopped(recordingId, image.joinPosition(), stopPosition);
             recordingWriter.close();
             workDone += 1;

File: aeron-archive/src/test/java/io/aeron/archive/CatalogTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.File;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
-import java.util.concurrent.TimeUnit;
 
 import static io.aeron.archive.Archive.segmentFileName;
 import static io.aeron.archive.Catalog.PAGE_SIZE;
@@ -43,12 +42,11 @@
 
 public class CatalogTest
 {
-    private static final long TIMEOUT_MS = TimeUnit.SECONDS.toMillis(1);
     private static final int TERM_BUFFER_LENGTH = 2 * Catalog.PAGE_SIZE;
     private static final int SEGMENT_FILE_SIZE = 2 * TERM_BUFFER_LENGTH;
     private final UnsafeBuffer unsafeBuffer = new UnsafeBuffer();
     private final RecordingDescriptorDecoder recordingDescriptorDecoder = new RecordingDescriptorDecoder();
-    private final File archiveDir = TestUtil.makeTempDir();
+    private final File archiveDir = TestUtil.makeTestDirectory();
 
     private long currentTimeMs = 1;
     private final EpochClock clock = () -> currentTimeMs;

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsForUriSessionTest.java
Patch:
@@ -25,7 +25,7 @@ public class ListRecordingsForUriSessionTest
     private final UnsafeBuffer descriptorBuffer = new UnsafeBuffer();
     private final RecordingDescriptorDecoder recordingDescriptorDecoder = new RecordingDescriptorDecoder();
     private long[] matchingRecordingIds = new long[3];
-    private final File archiveDir = TestUtil.makeTempDir();
+    private final File archiveDir = TestUtil.makeTestDirectory();
     private final EpochClock clock = mock(EpochClock.class);
 
     private Catalog catalog;

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsSessionTest.java
Patch:
@@ -23,7 +23,7 @@ public class ListRecordingsSessionTest
     private static final int SEGMENT_FILE_SIZE = 128 * 1024 * 1024;
     private final RecordingDescriptorDecoder recordingDescriptorDecoder = new RecordingDescriptorDecoder();
     private long[] recordingIds = new long[3];
-    private final File archiveDir = TestUtil.makeTempDir();
+    private final File archiveDir = TestUtil.makeTestDirectory();
     private final EpochClock clock = mock(EpochClock.class);
 
     private Catalog catalog;

File: aeron-archive/src/test/java/io/aeron/archive/ReplaySessionTest.java
Patch:
@@ -31,7 +31,6 @@
 import java.io.File;
 import java.nio.channels.FileChannel;
 
-import static io.aeron.archive.TestUtil.makeTempDir;
 import static io.aeron.archive.client.AeronArchive.NULL_POSITION;
 import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
 import static io.aeron.protocol.HeaderFlyweight.HDR_TYPE_DATA;
@@ -64,7 +63,7 @@ public class ReplaySessionTest
 
     private int messageCounter = 0;
 
-    private File archiveDir = makeTempDir();
+    private final File archiveDir = TestUtil.makeTestDirectory();
     private ControlResponseProxy proxy = mock(ControlResponseProxy.class);
     private EpochClock epochClock = mock(EpochClock.class);
     private Catalog mockCatalog = mock(Catalog.class);

File: aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java
Patch:
@@ -25,6 +25,7 @@
 import io.aeron.logbuffer.LogBufferDescriptor;
 import org.agrona.CloseHelper;
 import org.agrona.ExpandableArrayBuffer;
+import org.agrona.IoUtil;
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.status.CountersReader;
 import org.junit.After;
@@ -240,7 +241,7 @@ private void launchAeronAndArchive()
 
         if (null == archiveDir)
         {
-            archiveDir = TestUtil.makeTempDir();
+            archiveDir = new File(IoUtil.tmpDirName(), "archive");
         }
 
         archivingMediaDriver = ArchivingMediaDriver.launch(

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -1079,9 +1079,9 @@ public void close()
                 CloseHelper.close(aeron);
             }
 
-            CloseHelper.quietClose(catalog);
-            CloseHelper.quietClose(markFile);
-            CloseHelper.quietClose(archiveDirChannel);
+            CloseHelper.close(catalog);
+            CloseHelper.close(markFile);
+            CloseHelper.close(archiveDirChannel);
         }
     }
 

File: aeron-archive/src/main/java/io/aeron/archive/ControlSession.java
Patch:
@@ -88,8 +88,8 @@ public void abort()
     public void close()
     {
         state = State.CLOSED;
-        CloseHelper.quietClose(controlPublication);
         demuxer.removeControlSession(this);
+        CloseHelper.close(controlPublication);
     }
 
     public boolean isDone()

File: aeron-archive/src/main/java/io/aeron/archive/RecordingWriter.java
Patch:
@@ -226,7 +226,7 @@ private void newRecordingSegmentFile()
         }
         catch (final IOException ex)
         {
-            CloseHelper.quietClose(recordingFile);
+            CloseHelper.close(recordingFile);
             close();
             LangUtil.rethrowUnchecked(ex);
         }

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -104,7 +104,7 @@ enum State
         }
         catch (final Exception ex)
         {
-            CloseHelper.quietClose(replayPublication);
+            CloseHelper.close(replayPublication);
             onError("failed to open cursor on a recording because: " + ex.getMessage());
             LangUtil.rethrowUnchecked(ex);
         }

File: aeron-archive/src/main/java/io/aeron/archive/SharedModeArchiveConductor.java
Patch:
@@ -62,8 +62,8 @@ protected int preWork()
 
     protected void closeSessionWorkers()
     {
-        CloseHelper.quietClose(recorderAgentInvoker);
-        CloseHelper.quietClose(replayerAgentInvoker);
+        CloseHelper.close(recorderAgentInvoker);
+        CloseHelper.close(replayerAgentInvoker);
     }
 
     private class SharedModeRecorder extends SessionWorker<RecordingSession>

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsForUriSessionTest.java
Patch:
@@ -52,7 +52,7 @@ public void before()
     @After
     public void after()
     {
-        CloseHelper.quietClose(catalog);
+        CloseHelper.close(catalog);
         IoUtil.delete(archiveDir, false);
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsSessionTest.java
Patch:
@@ -47,7 +47,7 @@ public void before()
     @After
     public void after()
     {
-        CloseHelper.quietClose(catalog);
+        CloseHelper.close(catalog);
         IoUtil.delete(archiveDir, false);
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -118,9 +118,9 @@ public void before()
     @After
     public void after()
     {
-        CloseHelper.quietClose(aeronArchive);
-        CloseHelper.quietClose(archive);
-        CloseHelper.quietClose(driver);
+        CloseHelper.close(aeronArchive);
+        CloseHelper.close(archive);
+        CloseHelper.close(driver);
 
         archive.context().deleteArchiveDirectory();
         driver.context().deleteAeronDirectory();

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -108,8 +108,8 @@ public int doWork()
 
         if (State.INACTIVE == state)
         {
-            recordingEventsProxy.stopped(recordingId, image.joinPosition(), position.getWeak());
             state = State.STOPPED;
+            recordingEventsProxy.stopped(recordingId, image.joinPosition(), position.getWeak());
             recordingWriter.close();
             workDone += 1;
         }

File: aeron-archive/src/main/java/io/aeron/archive/ControlResponseProxy.java
Patch:
@@ -19,7 +19,7 @@
 import io.aeron.archive.codecs.*;
 import io.aeron.logbuffer.BufferClaim;
 import org.agrona.DirectBuffer;
-import org.agrona.ExpandableDirectByteBuffer;
+import org.agrona.ExpandableArrayBuffer;
 import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
 
@@ -31,7 +31,7 @@ class ControlResponseProxy
     private static final int DESCRIPTOR_CONTENT_OFFSET = RecordingDescriptorHeaderDecoder.BLOCK_LENGTH +
         recordingIdEncodingOffset();
 
-    private final ExpandableDirectByteBuffer buffer = new ExpandableDirectByteBuffer(2048);
+    private final ExpandableArrayBuffer buffer = new ExpandableArrayBuffer(1024);
     private final BufferClaim bufferClaim = new BufferClaim();
 
     private final MessageHeaderEncoder messageHeaderEncoder = new MessageHeaderEncoder();

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -179,7 +179,7 @@ public boolean onFragment(final UnsafeBuffer buffer, final int offset, final int
         }
         else if (result == Publication.CLOSED || result == Publication.NOT_CONNECTED)
         {
-            closeOnError(null, "replay stream has been shutdown mid-replay");
+            closeOnError(null, "stream closed before replay is complete");
         }
 
         return false;
@@ -257,7 +257,7 @@ private void closeOnError(final Throwable ex, final String errorMessage)
             cursor.close();
         }
 
-        if (!controlSession.isDone())
+        if (!controlSession.isDone() && controlSession.isConnected())
         {
             controlSession.sendResponse(
                 correlationId,

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -133,7 +133,9 @@ public void openDatagramChannel(final AtomicCounter statusIndicator)
             receiveDatagramChannel = null;
 
             throw new RuntimeException(
-                "Channel error: " + ex.getMessage() + " : " + udpChannel.originalUriString(), ex);
+                "Channel error: " + ex.getMessage() +
+                " (at " + ex.getStackTrace()[0].toString() + "): " +
+                udpChannel.originalUriString(), ex);
         }
     }
 

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -76,9 +76,7 @@ public void shouldPublishFromArbitraryJoinPosition() throws Exception
         final int expectedNumberOfFragments = 10 + rnd.nextInt(10000);
 
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
-            .dirDeleteOnStart(true)
-            .errorHandler(Throwable::printStackTrace)
-            .termBufferSparseFile(true);
+            .errorHandler(Throwable::printStackTrace);
 
         try (MediaDriver ignore = MediaDriver.launch(driverCtx);
             Aeron aeron = Aeron.connect();

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -477,7 +477,7 @@ public void conclude()
                 if (null == className)
                 {
                     throw new IllegalStateException(
-                        "Either a ClusteredService instance or class name for service must be provided");
+                        "Either a ClusteredService instance or class name for the service must be provided");
                 }
 
                 try

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -958,7 +958,7 @@ private void connectToDriver()
                 {
                     if (epochClock.time() > (startTimeMs + driverTimeoutMs()))
                     {
-                        throw new DriverTimeoutException("CnC file not found: " + cncFile.getName());
+                        throw new DriverTimeoutException("CnC file not found: " + cncFile.getAbsolutePath());
                     }
 
                     sleep(16);

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTool.java
Patch:
@@ -64,7 +64,7 @@ else if (args.length == 2 && args[1].equals("pid"))
                 System.out.println(cncFile.decoder().pid());
             }
         }
-        else if (args.length == 2 && args[1].equals("recover"))
+        else if (args.length == 2 && args[1].equals("recovery"))
         {
             final RecordingLog recordingLog = new RecordingLog(clusterDir);
             try (AeronArchive archive = AeronArchive.connect())

File: aeron-cluster/src/main/java/io/aeron/cluster/ClusterTool.java
Patch:
@@ -64,7 +64,7 @@ else if (args.length == 2 && args[1].equals("pid"))
                 System.out.println(cncFile.decoder().pid());
             }
         }
-        else if (args.length == 2 && args[1].equals("recover"))
+        else if (args.length == 2 && args[1].equals("recovery"))
         {
             final RecordingLog recordingLog = new RecordingLog(clusterDir);
             try (AeronArchive archive = AeronArchive.connect())

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -519,7 +519,7 @@ private void publishDataToBeRecorded(final Publication publication, final int me
 
                 if (result == Publication.CLOSED || result == Publication.NOT_CONNECTED)
                 {
-                    throw new IllegalStateException("Publication unexpected not connected");
+                    throw new IllegalStateException("Publication not connected: result=" + result);
                 }
 
                 SystemTest.checkInterruptedStatus();

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -111,7 +111,8 @@ public void before()
             new AeronArchive.Context()
                 .controlResponseChannel(CONTROL_RESPONSE_URI)
                 .controlResponseStreamId(CONTROL_RESPONSE_STREAM_ID)
-                .aeron(aeron));
+                .aeron(aeron)
+                .ownsAeronClient(true));
     }
 
     @After

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -302,7 +302,7 @@ private void checkForSnapshot(final CountersReader counters, final int recoveryC
             final RecordingLog.Entry snapshotEntry = recordingLog.getSnapshot(leadershipTermId, termPosition);
             if (null == snapshotEntry)
             {
-                throw new IllegalStateException("No snapshot available for term: " + termPosition);
+                throw new IllegalStateException("No snapshot available for term position: " + termPosition);
             }
 
             baseLogPosition = snapshotEntry.logPosition;

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -99,7 +99,7 @@ public void before()
 
         archive = Archive.launch(
             new Archive.Context()
-                .fileSyncLevel(2)
+                .fileSyncLevel(0)
                 .archiveDir(TestUtil.makeTempDir())
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .errorCounter(driver.context().systemCounters().get(SystemCounterDescriptor.ERRORS))

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -19,8 +19,8 @@
 import io.aeron.CommonContext;
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.cluster.ClusterCncFile;
+import io.aeron.cluster.codecs.ClusterComponentType;
 import io.aeron.cluster.codecs.CncHeaderEncoder;
-import io.aeron.cluster.codecs.CncType;
 import io.aeron.cluster.codecs.VarAsciiEncodingEncoder;
 import org.agrona.BitUtil;
 import org.agrona.CloseHelper;
@@ -1080,7 +1080,7 @@ private void concludeCncFile()
 
                 cncFile = new ClusterCncFile(
                     new File(clusteredServiceDir, ClusterCncFile.FILENAME),
-                    CncType.CONTAINER,
+                    ClusterComponentType.CONTAINER,
                     alignedTotalCncFileLength,
                     epochClock,
                     0);
@@ -1091,6 +1091,7 @@ private void concludeCncFile()
                     .archiveStreamId(archiveContext.controlRequestStreamId())
                     .serviceControlStreamId(serviceControlStreamId)
                     .ingressStreamId(0)
+                    .memberId(-1)
                     .serviceId(serviceId)
                     .aeronDir(aeron.context().aeronDirectoryName())
                     .archiveChannel(archiveContext.controlRequestChannel())

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlAdapter.java
Patch:
@@ -85,7 +85,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     messageHeaderDecoder.blockLength(),
                     messageHeaderDecoder.version());
 
-                serviceControlListener.onActionAck(
+                serviceControlListener.onServiceAck(
                     serviceActionAckDecoder.logPosition(),
                     serviceActionAckDecoder.leadershipTermId(),
                     serviceActionAckDecoder.serviceId(),

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlListener.java
Patch:
@@ -51,7 +51,7 @@ default void onCancelTimer(long correlationId)
      * @param serviceId        that has undertaken the action.
      * @param action           undertaken.
      */
-    default void onActionAck(long logPosition, long leadershipTermId, int serviceId, ClusterAction action)
+    default void onServiceAck(long logPosition, long leadershipTermId, int serviceId, ClusterAction action)
     {
     }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/LogAppender.java
Patch:
@@ -109,7 +109,7 @@ public boolean appendMessage(final DirectBuffer buffer, final int offset, final
 
     public long appendConnectedSession(final ClusterSession session, final long nowMs)
     {
-        long result = -1;
+        long result;
         final byte[] sessionPrincipalData = session.principalData();
         final String channel = session.responseChannel();
 

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -106,7 +106,7 @@ abstract class ArchiveConductor extends SessionWorker<Session> implements Availa
             ctx.idleStrategy(),
             aeron.addExclusivePublication(ctx.recordingEventsChannel(), ctx.recordingEventsStreamId()));
 
-        catalog = new Catalog(archiveDir, archiveDirChannel, ctx.fileSyncLevel(), epochClock);
+        catalog = new Catalog(archiveDir, archiveDirChannel, ctx.fileSyncLevel(), epochClock, 0);
     }
 
     public void onStart()
@@ -777,7 +777,7 @@ private void updateClockAndCatalogTimestamp(final long nowNs)
             clockUpdateDeadlineNs = nowNs + 1_000_000;
             // TODO: update cached epochClock
             // TODO: update cached nanoClock
-            catalog.updateTimestamp(epochClock.time());
+            catalog.updateTimestampMs(epochClock.time());
         }
     }
 }

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsForUriSessionTest.java
Patch:
@@ -36,7 +36,7 @@ public class ListRecordingsForUriSessionTest
     @Before
     public void before()
     {
-        catalog = new Catalog(archiveDir, null, 0, clock);
+        catalog = new Catalog(archiveDir, null, 0, clock, 0);
         matchingRecordingIds[0] = catalog.addNewRecording(
             0L, 0L, 0, SEGMENT_FILE_SIZE, 4096, 1024, 6, 1, "channel", "channelA?tag=f", "sourceA");
         catalog.addNewRecording(

File: aeron-archive/src/test/java/io/aeron/archive/ListRecordingsSessionTest.java
Patch:
@@ -35,7 +35,7 @@ public class ListRecordingsSessionTest
     @Before
     public void before()
     {
-        catalog = new Catalog(archiveDir, null, 0, clock);
+        catalog = new Catalog(archiveDir, null, 0, clock, 0);
         recordingIds[0] = catalog.addNewRecording(
             0L, 0L, 0, SEGMENT_FILE_SIZE, 4096, 1024, 6, 1, "channelG", "channelG?tag=f", "sourceA");
         recordingIds[1] = catalog.addNewRecording(

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -587,7 +587,7 @@ private void validateArchiveFile(final int messageCount, final long recordingId)
         remaining = totalDataLength;
         final File archiveDir = archive.context().archiveDir();
 
-        try (Catalog catalog = new Catalog(archiveDir, null, 0, System::currentTimeMillis))
+        try (Catalog catalog = new Catalog(archiveDir, null, 0, System::currentTimeMillis, 0))
         {
             final RecordingFragmentReader archiveDataFileReader = new RecordingFragmentReader(
                 catalog,

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -61,7 +61,7 @@ static int send(final DatagramChannel datagramChannel,
         catch (final IOException ex)
         {
             throw new RuntimeException(
-                "Failed to send packet of length " + bytesToSend + " to " + destination, ex);
+                "Failed to send packet of " + bytesToSend + " bytes to " + destination, ex);
         }
 
         return bytesSent;

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -204,7 +204,7 @@ public int send(final ByteBuffer buffer)
                 catch (final IOException ex)
                 {
                     throw new RuntimeException(
-                        "Failed to send packet of length " + bytesToSend + " to " + connectAddress, ex);
+                        "Failed to send packet of " + bytesToSend + " bytes to " + connectAddress, ex);
                 }
             }
             else

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -203,7 +203,8 @@ public int send(final ByteBuffer buffer)
                 }
                 catch (final IOException ex)
                 {
-                    throw new RuntimeException("Failed to send packet of length: " + bytesToSend, ex);
+                    throw new RuntimeException(
+                        "Failed to send packet of length " + bytesToSend + " to " + connectAddress, ex);
                 }
             }
             else

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -588,7 +588,7 @@ private void startRecordingSession(
         if (recordingSessionByIdMap.size() >= 2 * maxConcurrentRecordings)
         {
             throw new IllegalStateException(
-                "Too many recordings, can't record: " + originalChannel + ":" + image.subscription().streamId());
+                "Too many recordings, can't record: " + image.subscription().streamId() + ":" + originalChannel);
         }
 
         final int sessionId = image.sessionId();
@@ -670,7 +670,7 @@ private void extendRecordingSession(
         if (recordingSessionByIdMap.size() >= 2 * maxConcurrentRecordings)
         {
             throw new IllegalStateException(
-                "Too many recordings, can't record: " + originalChannel + ":" + image.subscription().streamId());
+                "Too many recordings, can't record: " + image.subscription().streamId()  + ":" + originalChannel);
         }
 
         validateImageForExtendRecording(image, originalRecordingSummary);
@@ -685,7 +685,7 @@ private void extendRecordingSession(
 
         final RecordingSession session = new RecordingSession(
             recordingId,
-            recordingSummary.startPosition,
+            originalRecordingSummary.startPosition,
             originalChannel,
             recordingEventsProxy,
             image,

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -174,7 +174,7 @@ public static class Configuration
         /**
          * Channel for for sending messages to the Consensus Module. This should be IPC.
          */
-        public static final String CONSENSUS_MODULE_CHANNEL_DEFAULT = CommonContext.IPC_CHANNEL;
+        public static final String CONSENSUS_MODULE_CHANNEL_DEFAULT = "aeron:ipc?term-length=65536";
 
         /**
          * Stream id within a channel for sending messages to the Consensus Module.

File: aeron-archive/src/main/java/io/aeron/archive/RecordingSession.java
Patch:
@@ -45,6 +45,7 @@ private enum State
 
     RecordingSession(
         final long recordingId,
+        final long startPosition,
         final String originalChannel,
         final RecordingEventsProxy recordingEventsProxy,
         final Image image,
@@ -61,7 +62,8 @@ private enum State
         final int termBufferLength = image.termBufferLength();
         blockLengthLimit = Math.min(termBufferLength, MAX_BLOCK_LENGTH);
 
-        recordingWriter = new RecordingWriter(recordingId, termBufferLength, context, archiveDirChannel, position);
+        recordingWriter = new RecordingWriter(
+            recordingId, startPosition, image.joinPosition(), termBufferLength, context, archiveDirChannel, position);
     }
 
     public long sessionId()

File: aeron-archive/src/test/java/io/aeron/archive/RecordingSessionTest.java
Patch:
@@ -117,7 +117,7 @@ public void after()
     public void shouldRecordFragmentsFromImage() throws Exception
     {
         final RecordingSession session = new RecordingSession(
-            RECORDING_ID, CHANNEL, recordingEventsProxy, image, position, ARCHIVE_CHANNEL, context);
+            RECORDING_ID, START_POSITION, CHANNEL, recordingEventsProxy, image, position, ARCHIVE_CHANNEL, context);
 
         assertEquals(RECORDING_ID, session.sessionId());
 

File: aeron-archive/src/test/java/io/aeron/archive/ReplaySessionTest.java
Patch:
@@ -108,7 +108,7 @@ public void before()
         recordingSummary.sessionId = SESSION_ID;
 
         final RecordingWriter writer = new RecordingWriter(
-            RECORDING_ID, TERM_BUFFER_LENGTH, context, null, position);
+            RECORDING_ID, START_POSITION, START_POSITION, TERM_BUFFER_LENGTH, context, null, position);
 
         final UnsafeBuffer buffer = new UnsafeBuffer(allocateDirectAligned(TERM_BUFFER_LENGTH, 64));
 
@@ -337,7 +337,8 @@ public void shouldReplayFromActiveRecording()
         when(mockCatalog.stopPosition(recordingId)).thenReturn(START_POSITION + FRAME_LENGTH * 4);
         position.setOrdered(START_POSITION);
 
-        final RecordingWriter writer = new RecordingWriter(recordingId, TERM_BUFFER_LENGTH, context, null, position);
+        final RecordingWriter writer = new RecordingWriter(
+            recordingId, START_POSITION, START_POSITION, TERM_BUFFER_LENGTH, context, null, position);
 
         when(epochClock.time()).thenReturn(TIME);
 

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Real Logic Ltd.
+ * Copyright 2014-2018 Real Logic Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,12 +40,13 @@
 public class BasicArchiveTest
 {
     private static final int FRAGMENT_LIMIT = 10;
+    private static final int TERM_BUFFER_LENGTH = 64 * 1024;
 
     private static final int RECORDING_STREAM_ID = 33;
     private static final String RECORDING_CHANNEL = new ChannelUriStringBuilder()
         .media("udp")
         .endpoint("localhost:3333")
-        .termLength(64 * 1024)
+        .termLength(TERM_BUFFER_LENGTH)
         .build();
 
     private static final int REPLAY_STREAM_ID = 66;

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -403,7 +403,7 @@ public void conclude()
             }
             else if (segmentFileLength < TERM_MIN_LENGTH || segmentFileLength > TERM_MAX_LENGTH)
             {
-                throw new ConfigurationException("Segment file not in valid range: " + segmentFileLength);
+                throw new ConfigurationException("Segment file length not in valid range: " + segmentFileLength);
             }
         }
 

File: aeron-driver/src/main/java/io/aeron/driver/media/MultiDestination.java
Patch:
@@ -118,7 +118,7 @@ int send(
                 }
                 catch (final IOException ex)
                 {
-                    throw new RuntimeException("Failed to send: " + bytesToSend, ex);
+                    throw new RuntimeException("Failed to send packet of length: " + bytesToSend, ex);
                 }
 
                 minBytesSent = Math.min(minBytesSent, bytesSent);

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -203,7 +203,7 @@ public int send(final ByteBuffer buffer)
                 }
                 catch (final IOException ex)
                 {
-                    throw new RuntimeException("Failed to send: " + bytesToSend, ex);
+                    throw new RuntimeException("Failed to send packet of length: " + bytesToSend, ex);
                 }
             }
             else

File: aeron-system-tests/src/test/java/io/aeron/BufferClaimMessageTest.java
Patch:
@@ -56,6 +56,7 @@ public void shouldReceivePublishedMessageWithInterleavedAbort(final String chann
         final BufferClaim bufferClaim = new BufferClaim();
         final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocate(MESSAGE_LENGTH));
         final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .threadingMode(ThreadingMode.SHARED);
 
         try (MediaDriver ignore = MediaDriver.launch(ctx);

File: aeron-system-tests/src/test/java/io/aeron/ControlledMessageTest.java
Patch:
@@ -36,8 +36,9 @@ public class ControlledMessageTest
     @Test(timeout = 10000)
     public void shouldReceivePublishedMessage()
     {
-        final MediaDriver.Context ctx = new MediaDriver.Context();
-        ctx.threadingMode(ThreadingMode.SHARED);
+        final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
+            .threadingMode(ThreadingMode.SHARED);
 
         try (MediaDriver ignore = MediaDriver.launch(ctx);
             Aeron aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/CounterTest.java
Patch:
@@ -55,6 +55,7 @@ private void launch()
 
         driverContext =
             new MediaDriver.Context()
+                .errorHandler(Throwable::printStackTrace)
                 .threadingMode(ThreadingMode.SHARED);
 
         driver = MediaDriver.launch(driverContext);

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationTest.java
Patch:
@@ -61,7 +61,9 @@ public void shouldPublishFromIndependentExclusivePublications(final String chann
         final AvailableImageHandler availableImageHandler = (image) -> imageCounter.getAndIncrement();
 
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .threadingMode(ThreadingMode.SHARED);
+
         final Aeron.Context clientCtx = new Aeron.Context().availableImageHandler(availableImageHandler);
 
         try (MediaDriver ignore = MediaDriver.launch(driverCtx);

File: aeron-system-tests/src/test/java/io/aeron/FlowControlStrategiesTest.java
Patch:
@@ -74,11 +74,13 @@ private void launch()
 
         driverAContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirA)
+            .errorHandler(Throwable::printStackTrace)
             .sharedIdleStrategy(new YieldingIdleStrategy())
             .threadingMode(ThreadingMode.SHARED);
 
         driverBContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirB)
+            .errorHandler(Throwable::printStackTrace)
             .sharedIdleStrategy(new YieldingIdleStrategy())
             .threadingMode(ThreadingMode.SHARED);
 

File: aeron-system-tests/src/test/java/io/aeron/FragmentedMessageTest.java
Patch:
@@ -57,6 +57,7 @@ public void shouldReceivePublishedMessage(final String channel)
         final FragmentAssembler assembler = new FragmentAssembler(mockFragmentHandler);
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .aeronDirectoryName(CommonContext.generateRandomDirName())
+            .errorHandler(Throwable::printStackTrace)
             .threadingMode(ThreadingMode.SHARED);
 
         try (MediaDriver ignore = MediaDriver.launch(ctx);

File: aeron-system-tests/src/test/java/io/aeron/GapFillLossTest.java
Patch:
@@ -53,6 +53,7 @@ public void shouldGapFillWhenLossOccurs() throws Exception
         srcBuffer.setMemory(0, MSG_LENGTH, (byte)7);
 
         final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .threadingMode(ThreadingMode.SHARED)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH);
 

File: aeron-system-tests/src/test/java/io/aeron/MaxPositionPublicationTest.java
Patch:
@@ -47,7 +47,8 @@ public void shouldPublishFromIndependentExclusivePublications()
             .validate()
             .build();
 
-        final MediaDriver.Context driverCtx = new MediaDriver.Context();
+        final MediaDriver.Context driverCtx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace);
 
         try (MediaDriver ignore = MediaDriver.launch(driverCtx);
             Aeron aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -45,6 +45,7 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntact() throws Excepti
         final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(MESSAGE_LENGTH));
         srcBuffer.setMemory(0, MESSAGE_LENGTH, (byte)7);
         final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH);
 
         try (MediaDriver ignore = MediaDriver.launch(ctx);

File: aeron-system-tests/src/test/java/io/aeron/MultiDestinationCastTest.java
Patch:
@@ -79,11 +79,13 @@ private void launch()
         buffer.putInt(0, 1);
 
         final MediaDriver.Context driverAContext = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirA)
             .threadingMode(ThreadingMode.SHARED);
 
         driverBContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
+            .errorHandler(Throwable::printStackTrace)
             .aeronDirectoryName(baseDirB)
             .threadingMode(ThreadingMode.SHARED);
 

File: aeron-system-tests/src/test/java/io/aeron/MultiDriverTest.java
Patch:
@@ -71,11 +71,13 @@ private void launch()
         buffer.putInt(0, 1);
 
         final MediaDriver.Context driverAContext = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirA)
             .threadingMode(THREADING_MODE);
 
         final MediaDriver.Context driverBContext = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .aeronDirectoryName(baseDirB)
             .threadingMode(THREADING_MODE);

File: aeron-system-tests/src/test/java/io/aeron/MultiSubscriberTest.java
Patch:
@@ -37,7 +37,8 @@ public class MultiSubscriberTest
     @Test(timeout = 10000)
     public void shouldReceiveMessageOnSeparateSubscriptions()
     {
-        final MediaDriver.Context ctx = new MediaDriver.Context();
+        final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace);
 
         final FragmentHandler mockFragmentHandlerOne = mock(FragmentHandler.class);
         final FragmentHandler mockFragmentHandlerTwo = mock(FragmentHandler.class);

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -87,6 +87,7 @@ private void launch(final String channel)
     {
         context
             .threadingMode(THREADING_MODE)
+            .errorHandler(Throwable::printStackTrace)
             .publicationConnectionTimeoutNs(TimeUnit.MILLISECONDS.toNanos(500))
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100));
 

File: aeron-system-tests/src/test/java/io/aeron/PublicationUnblockTest.java
Patch:
@@ -51,6 +51,7 @@ public void shouldUnblockNonCommittedMessage(final String channel)
         final FragmentHandler mockFragmentHandler = mock(FragmentHandler.class);
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.SHARED)
+            .errorHandler(Throwable::printStackTrace)
             .timerIntervalNs(TimeUnit.MILLISECONDS.toNanos(100))
             .publicationUnblockTimeoutNs(TimeUnit.MILLISECONDS.toNanos(10));
 

File: aeron-system-tests/src/test/java/io/aeron/PublishFromArbitraryPositionTest.java
Patch:
@@ -72,9 +72,11 @@ public void shouldPublishFromArbitraryJoinPosition() throws Exception
             .mtu(mtu)
             .media("udp")
             .build();
+
         final int expectedNumberOfFragments = 10 + rnd.nextInt(10000);
 
         final MediaDriver.Context driverCtx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .termBufferSparseFile(true);
 
         try (MediaDriver ignore = MediaDriver.launch(driverCtx);

File: aeron-system-tests/src/test/java/io/aeron/SpySimulatedConnectionTest.java
Patch:
@@ -77,6 +77,7 @@ private void launch()
     {
         driverContext.publicationTermBufferLength(TERM_BUFFER_LENGTH)
             .sharedIdleStrategy(new YieldingIdleStrategy())
+            .errorHandler(Throwable::printStackTrace)
             .threadingMode(ThreadingMode.SHARED);
 
         driver = MediaDriver.launch(driverContext);

File: aeron-system-tests/src/test/java/io/aeron/SpySubscriptionTest.java
Patch:
@@ -49,11 +49,11 @@ public class SpySubscriptionTest
     @Test(timeout = 10000)
     public void shouldReceivePublishedMessage(final String channel)
     {
-        final MediaDriver.Context ctx = new MediaDriver.Context();
-        final Aeron.Context aeronCtx = new Aeron.Context();
+        final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace);
 
         try (MediaDriver ignore = MediaDriver.launch(ctx);
-            Aeron aeron = Aeron.connect(aeronCtx);
+            Aeron aeron = Aeron.connect();
             Publication publication = aeron.addPublication(channel, STREAM_ID);
             Subscription subscription = aeron.addSubscription(channel, STREAM_ID);
             Subscription spy = aeron.addSubscription(spyForChannel(channel), STREAM_ID))

File: aeron-system-tests/src/test/java/io/aeron/TermBufferLengthTest.java
Patch:
@@ -46,6 +46,7 @@ public class TermBufferLengthTest
     public void shouldHaveCorrectTermBufferLength(final String channel)
     {
         final MediaDriver.Context ctx = new MediaDriver.Context()
+            .errorHandler(Throwable::printStackTrace)
             .publicationTermBufferLength(TEST_TERM_LENGTH * 2)
             .ipcTermBufferLength(TEST_TERM_LENGTH * 2);
 

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -77,7 +77,9 @@ public void before()
                 .fileSyncLevel(0)
                 .threadingMode(ArchiveThreadingMode.SHARED));
 
-        aeron = Aeron.connect(new Aeron.Context().aeronDirectoryName(aeronDirectoryName));
+        aeron = Aeron.connect(
+            new Aeron.Context()
+                .aeronDirectoryName(aeronDirectoryName));
 
         aeronArchive = AeronArchive.connect(
             new AeronArchive.Context()

File: aeron-cluster/src/main/java/io/aeron/cluster/client/AeronCluster.java
Patch:
@@ -136,8 +136,8 @@ public void close()
 
             if (!ctx.ownsAeronClient())
             {
-                subscription.close();
-                publication.close();
+                CloseHelper.close(subscription);
+                CloseHelper.close(publication);
             }
 
             ctx.close();
@@ -878,7 +878,7 @@ public void close()
         {
             if (ownsAeronClient)
             {
-                aeron.close();
+                CloseHelper.close(aeron);
             }
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -1069,7 +1069,7 @@ public void close()
         {
             if (ownsAeronClient)
             {
-                aeron.close();
+                CloseHelper.close(aeron);
             }
         }
     }

File: aeron-cluster/src/main/java/io/aeron/cluster/SequencerAgent.java
Patch:
@@ -231,12 +231,12 @@ public void onServiceActionAck(
 
                 case SHUTDOWN:
                     state(ConsensusModule.State.CLOSED);
-                    ctx.shutdownSignalBarrier().signal();
+                    ctx.terminationHook().run();
                     break;
 
                 case ABORT:
                     state(ConsensusModule.State.CLOSED);
-                    ctx.shutdownSignalBarrier().signal();
+                    ctx.terminationHook().run();
                     break;
             }
         }

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -511,13 +511,13 @@ private void executeAction(final ServiceAction action, final long position)
                 onTakeSnapshot(position);
                 consensusModule.sendAcknowledgment(ServiceAction.SHUTDOWN, position, messageIndex, timestampMs);
                 state = State.CLOSED;
-                ctx.shutdownSignalBarrier().signal();
+                ctx.terminationHook().run();
                 break;
 
             case ABORT:
                 consensusModule.sendAcknowledgment(ServiceAction.ABORT, position, messageIndex, timestampMs);
                 state = State.CLOSED;
-                ctx.shutdownSignalBarrier().signal();
+                ctx.terminationHook().run();
                 break;
         }
     }

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -599,9 +599,10 @@ public class Configuration
     public static final String MTU_LENGTH_PROP_NAME = "aeron.mtu.length";
 
     /**
-     * Default length is greater than typical Ethernet MTU so will fragment to save on system calls.
+     * The default is conservative to avoid fragmentation on IPv4 or IPv6 over Ethernet with PPPoE header.
+     * On networks that suffer little congestion then a larger value can be used to reduce syscall costs.
      */
-    public static final int MTU_LENGTH_DEFAULT = 4096;
+    public static final int MTU_LENGTH_DEFAULT = 1440;
 
     /**
      * Length of the MTU to use for sending messages.

File: aeron-system-tests/src/test/java/io/aeron/PubAndSubTest.java
Patch:
@@ -796,7 +796,7 @@ public void shouldFragmentExactMessageLengthsCorrectly(final String channel)
     {
         final int termBufferLength = 64 * 1024;
         final int numFragmentsPerMessage = 2;
-        final int mtuLength = 4096;
+        final int mtuLength = context.mtuLength();
         final int frameLength = mtuLength - HEADER_LENGTH;
         final int messageLength = frameLength * numFragmentsPerMessage;
         final int numMessagesToSend = 2;

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -552,6 +552,8 @@ public void conclude()
             if (null == archiveContext)
             {
                 archiveContext = new AeronArchive.Context()
+                    .aeron(aeron)
+                    .ownsAeronClient(false)
                     .lock(new NoOpLock());
             }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -422,6 +422,7 @@ public void conclude()
             {
                 archiveContext = new AeronArchive.Context()
                     .aeron(aeron)
+                    .ownsAeronClient(false)
                     .lock(new NoOpLock());
             }
 

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleAdapter.java
Patch:
@@ -84,7 +84,7 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     messageHeaderDecoder.blockLength(),
                     messageHeaderDecoder.version());
 
-                sequencerAgent.onActionAck(
+                sequencerAgent.onServiceActionAck(
                     serviceActionAckDecoder.serviceId(),
                     serviceActionAckDecoder.logPosition(),
                     serviceActionAckDecoder.messageIndex(),

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -251,7 +251,6 @@ public ClusterSession newClusterSession(
     public ConsensusModuleAdapter newConsensusModuleAdapter(final SequencerAgent sequencerAgent)
     {
         return new ConsensusModuleAdapter(
-            FRAGMENT_POLL_LIMIT,
             ctx.aeron().addSubscription(ctx.consensusModuleChannel(), ctx.consensusModuleStreamId()),
             sequencerAgent);
     }

File: aeron-archive/src/main/java/io/aeron/archive/status/RecordingPos.java
Patch:
@@ -175,7 +175,7 @@ public static int findActiveCounterIdBySession(final CountersReader countersRead
      *
      * @param countersReader to search within.
      * @param counterId      for the active recording.
-     * @return the counter id if found otherwise {@link #NULL_COUNTER_ID}.
+     * @return the counter id if found otherwise {@link #NULL_RECORDING_ID}.
      */
     public static long getRecordingId(final CountersReader countersReader, final int counterId)
     {

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -896,7 +896,8 @@ Context interServiceTimeout(final long interServiceTimeout)
          * When exceeded, {@link #errorHandler} will be called and the active {@link Publication}s and {@link Image}s
          * closed.
          * <p>
-         * This value is controlled by the driver and included in the CnC file.
+         * This value is controlled by the driver and included in the CnC file. It can be configured by adjusting
+         * the aeron.client.liveness.timeout property on the media driver.
          *
          * @return the timeout in nanoseconds between service calls in nanoseconds.
          */

File: aeron-driver/src/main/java/io/aeron/driver/ext/CubicCongestionControl.java
Patch:
@@ -101,6 +101,7 @@ public class CubicCongestionControl implements CongestionControl
         windowUpdateTimeout = rttInNs;
 
         rttIndicator = PerImageIndicator.allocate(
+            context.tempBuffer(),
             "rcv-cc-cubic-rtt",
             countersManager,
             registrationId,
@@ -109,6 +110,7 @@ public class CubicCongestionControl implements CongestionControl
             udpChannel.originalUriString());
 
         windowIndicator = PerImageIndicator.allocate(
+            context.tempBuffer(),
             "rcv-cc-cubic-wnd",
             countersManager,
             registrationId,

File: aeron-driver/src/main/java/io/aeron/driver/status/PublisherLimit.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
 
@@ -35,13 +36,14 @@ public class PublisherLimit
     public static final String NAME = "pub-lmt";
 
     public static UnsafeBufferPosition allocate(
+        final MutableDirectBuffer tempBuffer,
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,
         final int streamId,
         final String channel)
     {
         return StreamPositionCounter.allocate(
-            NAME, PUBLISHER_LIMIT_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
+            tempBuffer, NAME, PUBLISHER_LIMIT_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiverHwm.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
 
@@ -35,13 +36,14 @@ public class ReceiverHwm
     public static final String NAME = "rcv-hwm";
 
     public static UnsafeBufferPosition allocate(
+        final MutableDirectBuffer tempBuffer,
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,
         final int streamId,
         final String channel)
     {
         return StreamPositionCounter.allocate(
-            NAME, RECEIVER_HWM_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
+            tempBuffer, NAME, RECEIVER_HWM_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiverPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
 
@@ -35,13 +36,14 @@ public class ReceiverPos
     public static final String NAME = "rcv-pos";
 
     public static UnsafeBufferPosition allocate(
+        final MutableDirectBuffer tempBuffer,
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,
         final int streamId,
         final String channel)
     {
         return StreamPositionCounter.allocate(
-            NAME, RECEIVER_POS_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
+            tempBuffer, NAME, RECEIVER_POS_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/status/SenderLimit.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
 
@@ -34,13 +35,14 @@ public class SenderLimit
     public static final String NAME = "snd-lmt";
 
     public static UnsafeBufferPosition allocate(
+        final MutableDirectBuffer tempBuffer,
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,
         final int streamId,
         final String channel)
     {
         return StreamPositionCounter.allocate(
-            NAME, SENDER_LIMIT_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
+            tempBuffer, NAME, SENDER_LIMIT_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/status/SenderPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
 
@@ -34,13 +35,14 @@ public class SenderPos
     public static final String NAME = "snd-pos";
 
     public static UnsafeBufferPosition allocate(
+        final MutableDirectBuffer tempBuffer,
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,
         final int streamId,
         final String channel)
     {
         return StreamPositionCounter.allocate(
-            NAME, SENDER_POSITION_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
+            tempBuffer, NAME, SENDER_POSITION_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/status/SubscriberPos.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.status.CountersManager;
 import org.agrona.concurrent.status.UnsafeBufferPosition;
 
@@ -35,6 +36,7 @@ public class SubscriberPos
     public static final String NAME = "sub-pos";
 
     public static UnsafeBufferPosition allocate(
+        final MutableDirectBuffer tempBuffer,
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,
@@ -43,6 +45,7 @@ public static UnsafeBufferPosition allocate(
         final long joinPosition)
     {
         return StreamPositionCounter.allocate(
+            tempBuffer,
             NAME,
             SUBSCRIBER_POSITION_TYPE_ID,
             countersManager,

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeRestartTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.agrona.DirectBuffer;
 import org.agrona.ExpandableArrayBuffer;
 import org.agrona.concurrent.NoOpLock;
-import org.agrona.concurrent.status.AtomicCounter;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -39,7 +38,6 @@
 import static org.agrona.BitUtil.SIZE_OF_INT;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
-import static org.mockito.Mockito.mock;
 
 public class ClusterNodeRestartTest
 {
@@ -171,7 +169,6 @@ public void onSessionMessage(
         return ClusteredServiceContainer.launch(
             new ClusteredServiceContainer.Context()
                 .clusteredService(service)
-                .errorCounter(mock(AtomicCounter.class))
                 .errorHandler(Throwable::printStackTrace)
                 .deleteDirOnStart(initialLaunch));
     }

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -149,6 +149,7 @@ public void onMessage(
     public void shouldScheduleEventInService()
     {
         container = launchScheduledService();
+
         final AeronCluster aeronCluster = connectToCluster();
         final Aeron aeron = aeronCluster.context().aeron();
 

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestListener.java
Patch:
@@ -54,5 +54,7 @@ void onListRecordingsForUri(
         int streamId,
         String channel);
 
+    void onListRecording(long controlSessionId, long correlationId, long recordingId);
+
     void onStopReplay(long controlSessionId, long correlationId, long replaySessionId);
 }

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingsForUriSession.java
Patch:
@@ -73,7 +73,7 @@ protected int sendDescriptors()
 
             if (decoder.streamId() == streamId &&
                 decoder.strippedChannel().equals(channel) &&
-                isDescriptorValid(descriptorBuffer))
+                Catalog.isValidDescriptor(descriptorBuffer))
             {
                 final int bytesSent = controlSession.sendDescriptor(correlationId, descriptorBuffer, proxy);
                 if (bytesSent == 0)

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingsSession.java
Patch:
@@ -51,7 +51,7 @@ protected int sendDescriptors()
                 break;
             }
 
-            if (isDescriptorValid(descriptorBuffer))
+            if (Catalog.isValidDescriptor(descriptorBuffer))
             {
                 final int bytesSent = controlSession.sendDescriptor(correlationId, descriptorBuffer, proxy);
                 if (bytesSent == 0)

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceAgent.java
Patch:
@@ -142,6 +142,8 @@ public void onClose()
                 CloseHelper.close(session.responsePublication());
             }
         }
+
+        CloseHelper.close(aeronArchive);
     }
 
     public int doWork() throws Exception

File: aeron-cluster/src/main/java/io/aeron/cluster/service/ClusteredServiceContainer.java
Patch:
@@ -203,7 +203,7 @@ public static class Context implements AutoCloseable
         private CountedErrorHandler countedErrorHandler;
         private Aeron aeron;
         private AeronArchive.Context archiveContext;
-        private boolean ownsAeronClient = true;
+        private boolean ownsAeronClient;
 
         private ClusteredService clusteredService;
 
@@ -247,6 +247,8 @@ public void conclude()
                         .epochClock(epochClock)
                         .useConductorAgentInvoker(true)
                         .clientLock(new NoOpLock()));
+
+                ownsAeronClient = true;
             }
 
             if (null == archiveContext)

File: aeron-client/src/main/java/io/aeron/Image.java
Patch:
@@ -399,7 +399,7 @@ public int boundedControlledPoll(
         int initialOffset = (int)initialPosition & termLengthMask;
         int resultingOffset = initialOffset;
         final UnsafeBuffer termBuffer = activeTermBuffer(initialPosition);
-        final int endOffset = Math.min(termBuffer.capacity(), (int)(maxPosition - initialPosition));
+        final int endOffset = Math.min(termBuffer.capacity(), (int)(maxPosition - initialPosition + initialOffset));
         header.buffer(termBuffer);
 
         try

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -525,7 +525,7 @@ private Counter newRecordingPositionCounter(
         final String trimmedLabel = label.length() > MAX_LABEL_LENGTH ? label.substring(0, MAX_LABEL_LENGTH) : label;
 
         tempBuffer.putLong(0, recordingId);
-        tempBuffer.putStringAscii(SIZE_OF_LONG, trimmedLabel);
+        tempBuffer.putStringWithoutLengthAscii(SIZE_OF_LONG, trimmedLabel);
 
         return aeron.addCounter(
             Archive.Configuration.ARCHIVE_RECORDING_POSITION_TYPE_ID,

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.function.Supplier;
 
 import static io.aeron.driver.status.SystemCounterDescriptor.SYSTEM_COUNTER_TYPE_ID;
-import static org.agrona.BitUtil.SIZE_OF_INT;
 import static org.agrona.SystemUtil.getDurationInNanos;
 
 public final class ConsensusModule implements AutoCloseable
@@ -189,8 +188,8 @@ public void conclude()
                 if (null == errorCounter)
                 {
                     final String errorsLabel = "Cluster errors";
-                    final UnsafeBuffer buffer = new UnsafeBuffer(new byte[SIZE_OF_INT + errorsLabel.length()]);
-                    buffer.putStringAscii(0, errorsLabel);
+                    final UnsafeBuffer buffer = new UnsafeBuffer(new byte[errorsLabel.length()]);
+                    buffer.putStringWithoutLengthAscii(0, errorsLabel);
 
                     errorCounter = aeron.addCounter(
                         SYSTEM_COUNTER_TYPE_ID, buffer, 0, 0, buffer, 0, buffer.capacity());

File: aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModule.java
Patch:
@@ -363,7 +363,7 @@ public Context maxActiveSessions(final int maxActiveSessions)
          */
         public int maxActiveSessions()
         {
-            return ingressStreamId;
+            return maxActiveSessions;
         }
 
         /**

File: aeron-client/src/main/java/io/aeron/AvailableCounterHandler.java
Patch:
@@ -16,13 +16,13 @@
 package io.aeron;
 
 /**
- * Interface for notification of new counters becoming available under a {@link Aeron}.
+ * Interface for notification of{@link Counter}s becoming available via a {@link Aeron} client.
  */
 @FunctionalInterface
 public interface AvailableCounterHandler
 {
     /**
-     * Method called by Aeron to deliver notification of a new counter being available.
+     * Method called by Aeron to deliver notification of a {@link Counter} being available.
      *
      * @param registrationId for the counter
      * @param counterId      that is available

File: aeron-client/src/main/java/io/aeron/UnavailableCounterHandler.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron;
 
 /**
- * Interface for notification of ounters being removed under a {@link Aeron}.
+ * Interface for notification of {@link Counter}s being removed via an {@link Aeron} client.
  */
 @FunctionalInterface
 public interface UnavailableCounterHandler

File: aeron-client/src/main/java/io/aeron/status/ReadableCounter.java
Patch:
@@ -22,7 +22,7 @@
 import static org.agrona.BitUtil.SIZE_OF_LONG;
 
 /**
- * Readonly View of a {@link io.aeron.Counter}.
+ * Readonly View of an associated {@link io.aeron.Counter}.
  */
 public class ReadableCounter implements AutoCloseable
 {

File: aeron-samples/src/main/java/io/aeron/samples/SimplePublisher.java
Patch:
@@ -25,8 +25,7 @@
 
 /**
  * A very simple Aeron publisher application
- * Publishes a fixed size message on a fixed channel and stream. Upon completion
- * of message send, it lingers for 5 seconds before exiting.
+ * Publishes a fixed size message on a fixed channel and stream.
  */
 public class SimplePublisher
 {

File: aeron-samples/src/main/java/io/aeron/samples/SimplePublisher.java
Patch:
@@ -66,6 +66,7 @@ public static void main(final String[] args) throws Exception
                 if (System.nanoTime() >= deadlineNs)
                 {
                     System.out.println("Failed to connect to subscriber");
+                    return;
                 }
 
                 Thread.sleep(1);

File: aeron-samples/src/main/java/io/aeron/samples/archive/EmbeddedRecordingThroughput.java
Patch:
@@ -103,6 +103,7 @@ public EmbeddedRecordingThroughput()
     public void close()
     {
         CloseHelper.close(aeronArchive);
+        CloseHelper.close(aeron);
         CloseHelper.close(archivingMediaDriver);
 
         archivingMediaDriver.archive().context().deleteArchiveDirectory();

File: aeron-samples/src/main/java/io/aeron/samples/archive/EmbeddedReplayThroughput.java
Patch:
@@ -111,6 +111,7 @@ public EmbeddedReplayThroughput()
     public void close()
     {
         CloseHelper.close(aeronArchive);
+        CloseHelper.close(aeron);
         CloseHelper.close(archivingMediaDriver);
 
         archivingMediaDriver.archive().context().deleteArchiveDirectory();

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.function.Supplier;
 
 import static io.aeron.driver.status.SystemCounterDescriptor.SYSTEM_COUNTER_TYPE_ID;
+import static org.agrona.BitUtil.SIZE_OF_INT;
 import static org.agrona.SystemUtil.getSizeAsInt;
 import static org.agrona.SystemUtil.loadPropertiesFiles;
 
@@ -297,7 +298,8 @@ public void conclude()
                 {
                     final String archiveErrorsLabel = "Archive errors";
                     final int length = archiveErrorsLabel.length();
-                    final UnsafeBuffer buffer = new UnsafeBuffer(new byte[length]);
+                    final UnsafeBuffer buffer = new UnsafeBuffer(new byte[SIZE_OF_INT + length]);
+                    buffer.putStringAscii(0, archiveErrorsLabel);
 
                     errorCounter = aeron.addCounter(
                         SYSTEM_COUNTER_TYPE_ID, buffer, 0, 0, buffer, 0, length);

File: aeron-cluster/src/test/java/io/aeron/cluster/ClusterNodeTest.java
Patch:
@@ -26,6 +26,7 @@
 import io.aeron.cluster.service.ClusteredServiceAgent;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.logbuffer.Header;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
@@ -54,14 +55,13 @@ public void before()
         driver = MediaDriver.launch(
             new MediaDriver.Context()
                 .threadingMode(ThreadingMode.DEDICATED)
-                .useConcurrentCountersManager(true)
                 .spiesSimulateConnection(true)
                 .errorHandler(Throwable::printStackTrace)
                 .dirDeleteOnStart(true));
 
         clusterNode = ClusterNode.launch(
             new ClusterNode.Context()
-                .countersManager(driver.context().countersManager())
+                .errorCounter(driver.context().systemCounters().get(SystemCounterDescriptor.ERRORS))
                 .errorHandler(driver.context().errorHandler()));
     }
 

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -25,6 +25,7 @@
 import io.aeron.archive.codecs.SourceLocation;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
 import org.agrona.CloseHelper;
@@ -92,7 +93,6 @@ public void before() throws Exception
         driver = MediaDriver.launch(
             new MediaDriver.Context()
                 .threadingMode(ThreadingMode.DEDICATED)
-                .useConcurrentCountersManager(true)
                 .spiesSimulateConnection(true)
                 .errorHandler(Throwable::printStackTrace)
                 .dirDeleteOnStart(true));
@@ -102,7 +102,7 @@ public void before() throws Exception
                 .fileSyncLevel(2)
                 .archiveDir(TestUtil.makeTempDir())
                 .threadingMode(ArchiveThreadingMode.SHARED)
-                .countersManager(driver.context().countersManager())
+                .errorCounter(driver.context().systemCounters().get(SystemCounterDescriptor.ERRORS))
                 .errorHandler(driver.context().errorHandler()));
 
         aeron = Aeron.connect();

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveReplayLoadTest.java
Patch:
@@ -28,6 +28,7 @@
 import io.aeron.driver.Configuration;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.logbuffer.Header;
@@ -108,7 +109,6 @@ public void before() throws Exception
         driver = MediaDriver.launch(
             new MediaDriver.Context()
                 .threadingMode(ThreadingMode.DEDICATED)
-                .useConcurrentCountersManager(true)
                 .spiesSimulateConnection(true)
                 .errorHandler(Throwable::printStackTrace)
                 .dirDeleteOnStart(true));
@@ -118,7 +118,7 @@ public void before() throws Exception
                 .archiveDir(TestUtil.makeTempDir())
                 .fileSyncLevel(0)
                 .threadingMode(ArchiveThreadingMode.SHARED)
-                .countersManager(driver.context().countersManager())
+                .errorCounter(driver.context().systemCounters().get(SystemCounterDescriptor.ERRORS))
                 .errorHandler(driver.context().errorHandler()));
 
         aeron = Aeron.connect();

File: aeron-system-tests/src/test/java/io/aeron/archive/ArchiveTest.java
Patch:
@@ -22,6 +22,7 @@
 import io.aeron.archive.codecs.SourceLocation;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.logbuffer.Header;
 import io.aeron.protocol.DataHeaderFlyweight;
@@ -142,8 +143,7 @@ public void before() throws Exception
             .threadingMode(threadingMode)
             .spiesSimulateConnection(true)
             .errorHandler(Throwable::printStackTrace)
-            .dirDeleteOnStart(true)
-            .useConcurrentCountersManager(true);
+            .dirDeleteOnStart(true);
 
         driver = MediaDriver.launch(driverCtx);
 
@@ -153,7 +153,7 @@ public void before() throws Exception
             .archiveDir(TestUtil.makeTempDir())
             .segmentFileLength(termLength << rnd.nextInt(4))
             .threadingMode(archiveThreadingMode)
-            .countersManager(driverCtx.countersManager())
+            .errorCounter(driverCtx.systemCounters().get(SystemCounterDescriptor.ERRORS))
             .errorHandler(driverCtx.errorHandler());
 
         archive = Archive.launch(archiverCtx);

File: aeron-system-tests/src/test/java/io/aeron/archive/BasicArchiveTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.aeron.archive.client.AeronArchive;
 import io.aeron.driver.MediaDriver;
 import io.aeron.driver.ThreadingMode;
+import io.aeron.driver.status.SystemCounterDescriptor;
 import io.aeron.logbuffer.FragmentHandler;
 import org.agrona.CloseHelper;
 import org.agrona.ExpandableArrayBuffer;
@@ -63,8 +64,7 @@ public void before() throws Exception
                 .termBufferSparseFile(true)
                 .threadingMode(ThreadingMode.SHARED)
                 .errorHandler(Throwable::printStackTrace)
-                .dirDeleteOnStart(true)
-                .useConcurrentCountersManager(true));
+                .dirDeleteOnStart(true));
 
         archive = Archive.launch(
             new Archive.Context()
@@ -73,7 +73,7 @@ public void before() throws Exception
                 .threadingMode(ArchiveThreadingMode.SHARED)
                 .mediaDriverAgentInvoker(driver.sharedAgentInvoker())
                 .errorHandler(driver.context().errorHandler())
-                .countersManager(driver.context().countersManager()));
+                .errorCounter(driver.context().systemCounters().get(SystemCounterDescriptor.ERRORS)));
 
         aeron = Aeron.connect();
 

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -488,7 +488,7 @@ private long pollForConnected(final long expectedCorrelationId)
             {
                 if (nanoClock.nanoTime() > deadlineNs)
                 {
-                    throw new TimeoutException("Waiting for response: correlationId=" + expectedCorrelationId);
+                    throw new TimeoutException("Waiting for correlationId=" + expectedCorrelationId);
                 }
 
                 idleStrategy.idle();
@@ -532,7 +532,7 @@ private void pollForResponse(final long expectedCorrelationId)
 
                 if (nanoClock.nanoTime() > deadlineNs)
                 {
-                    throw new TimeoutException("Waiting for response: correlationId=" + expectedCorrelationId);
+                    throw new TimeoutException("Waiting for correlationId=" + expectedCorrelationId);
                 }
 
                 idleStrategy.idle();

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -78,7 +78,7 @@ public int poll()
     /**
      * Control session id of the last polled message or -1 if poll returned nothing.
      *
-     * @return correlation id of the last polled message or -1 if unrecognised template.
+     * @return control session id of the last polled message or -1 if unrecognised template.
      */
     public long controlSessionId()
     {

File: aeron-client/src/main/java/io/aeron/CncFileDescriptor.java
Patch:
@@ -68,7 +68,7 @@ public class CncFileDescriptor
 {
     public static final String CNC_FILE = "cnc.dat";
 
-    public static final int CNC_VERSION = 8;
+    public static final int CNC_VERSION = 9;
 
     public static final int CNC_VERSION_FIELD_OFFSET;
     public static final int TO_DRIVER_BUFFER_LENGTH_FIELD_OFFSET;

File: aeron-client/src/main/java/io/aeron/ConcurrentPublication.java
Patch:
@@ -19,6 +19,7 @@
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.ReadablePosition;
+import org.agrona.concurrent.status.StatusIndicatorReader;
 
 import static io.aeron.logbuffer.LogBufferDescriptor.*;
 
@@ -45,6 +46,7 @@ public class ConcurrentPublication extends Publication
         final int streamId,
         final int sessionId,
         final ReadablePosition positionLimit,
+        final StatusIndicatorReader channelStatusIndicator,
         final LogBuffers logBuffers,
         final long originalRegistrationId,
         final long registrationId)
@@ -55,6 +57,7 @@ public class ConcurrentPublication extends Publication
             streamId,
             sessionId,
             positionLimit,
+            channelStatusIndicator,
             logBuffers,
             originalRegistrationId,
             registrationId,

File: aeron-client/src/main/java/io/aeron/ExclusivePublication.java
Patch:
@@ -22,6 +22,7 @@
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.ReadablePosition;
+import org.agrona.concurrent.status.StatusIndicatorReader;
 
 import static io.aeron.logbuffer.LogBufferDescriptor.*;
 
@@ -58,6 +59,7 @@ public class ExclusivePublication extends Publication
         final int streamId,
         final int sessionId,
         final ReadablePosition positionLimit,
+        final StatusIndicatorReader channelStatusIndicator,
         final LogBuffers logBuffers,
         final long originalRegistrationId,
         final long registrationId)
@@ -68,6 +70,7 @@ public class ExclusivePublication extends Publication
             streamId,
             sessionId,
             positionLimit,
+            channelStatusIndicator,
             logBuffers,
             originalRegistrationId,
             registrationId,

File: aeron-client/src/test/java/io/aeron/PublicationTest.java
Patch:
@@ -19,6 +19,7 @@
 import io.aeron.logbuffer.FrameDescriptor;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.ReadablePosition;
+import org.agrona.concurrent.status.StatusIndicatorReader;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -54,6 +55,7 @@ public class PublicationTest
     private final ClientConductor conductor = mock(ClientConductor.class);
     private final LogBuffers logBuffers = mock(LogBuffers.class);
     private final ReadablePosition publicationLimit = mock(ReadablePosition.class);
+    private final StatusIndicatorReader statusIndicatorReader = mock(StatusIndicatorReader.class);
     private ConcurrentPublication publication;
 
     @Before
@@ -82,6 +84,7 @@ public void setUp()
             STREAM_ID_1,
             SESSION_ID_1,
             publicationLimit,
+            statusIndicatorReader,
             logBuffers,
             CORRELATION_ID,
             CORRELATION_ID);

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -42,13 +42,15 @@ public class Receiver implements Agent, Consumer<ReceiverCmd>
     private final NanoClock clock;
     private final ArrayList<PublicationImage> publicationImages = new ArrayList<>();
     private final ArrayList<PendingSetupMessageFromSource> pendingSetupMessages = new ArrayList<>();
+    private final DriverConductorProxy conductorProxy;
 
     public Receiver(final MediaDriver.Context ctx)
     {
         dataTransportPoller = ctx.dataTransportPoller();
         commandQueue = ctx.receiverCommandQueue();
         totalBytesReceived = ctx.systemCounters().get(BYTES_RECEIVED);
         clock = ctx.nanoClock();
+        conductorProxy = ctx.driverConductorProxy();
     }
 
     public void onClose()
@@ -124,7 +126,7 @@ public void onNewPublicationImage(final ReceiveChannelEndpoint channelEndpoint,
 
     public void onRegisterReceiveChannelEndpoint(final ReceiveChannelEndpoint channelEndpoint)
     {
-        channelEndpoint.openChannel();
+        channelEndpoint.openChannel(conductorProxy);
         channelEndpoint.registerForRead(dataTransportPoller);
         channelEndpoint.indicateActive();
 

File: aeron-driver/src/main/java/io/aeron/driver/Sender.java
Patch:
@@ -61,6 +61,7 @@ public class Sender extends SenderRhsPadding implements Agent, Consumer<SenderCm
     private final OneToOneConcurrentArrayQueue<SenderCmd> commandQueue;
     private final AtomicCounter totalBytesSent;
     private final NanoClock nanoClock;
+    private final DriverConductorProxy conductorProxy;
 
     private NetworkPublication[] networkPublications = EMPTY_PUBLICATIONS;
 
@@ -72,6 +73,7 @@ public Sender(final MediaDriver.Context ctx)
         this.nanoClock = ctx.nanoClock();
         this.statusMessageReadTimeoutNs = ctx.statusMessageTimeoutNs() / 2;
         this.dutyCycleRatio = Configuration.sendToStatusMessagePollRatio();
+        this.conductorProxy = ctx.driverConductorProxy();
     }
 
     public void onClose()
@@ -106,7 +108,7 @@ public String roleName()
 
     public void onRegisterSendChannelEndpoint(final SendChannelEndpoint channelEndpoint)
     {
-        channelEndpoint.openChannel();
+        channelEndpoint.openChannel(conductorProxy);
         channelEndpoint.registerForRead(controlTransportPoller);
         channelEndpoint.indicateActive();
     }

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiveChannelStatus.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.agrona.concurrent.status.CountersManager;
 

File: aeron-driver/src/main/java/io/aeron/driver/status/SendChannelStatus.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.concurrent.status.AtomicCounter;
 import org.agrona.concurrent.status.CountersManager;
 

File: aeron-driver/src/main/java/io/aeron/driver/status/StatusUtil.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.status;
 
+import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.collections.MutableInteger;
 import org.agrona.concurrent.status.CountersReader;
 import org.agrona.concurrent.status.StatusIndicator;

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -17,7 +17,7 @@
 
 import io.aeron.CncFileDescriptor;
 import io.aeron.CommonContext;
-import io.aeron.driver.status.ChannelEndpointStatus;
+import io.aeron.status.ChannelEndpointStatus;
 import org.agrona.DirectBuffer;
 import org.agrona.IoUtil;
 import org.agrona.SystemUtil;

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -101,7 +101,7 @@ private AeronArchive(final Context ctx)
                 CloseHelper.quietClose(publication);
             }
 
-            ctx.close();
+            CloseHelper.quietClose(ctx);
 
             throw ex;
         }

File: aeron-client/src/main/java/io/aeron/ConcurrentPublication.java
Patch:
@@ -30,7 +30,7 @@
  * <p>
  * The APIs used for try claim and offer are non-blocking and thread safe.
  * <p>
- * <b>Note:</b> Publication instances are threadsafe and can be shared between publishing threads.
+ * <b>Note:</b> Instances are threadsafe and can be shared between publishing threads.
  *
  * @see Aeron#addPublication(String, int)
  * @see BufferClaim

File: aeron-client/src/main/java/io/aeron/ExclusivePublication.java
Patch:
@@ -36,9 +36,9 @@
  * {@link ExclusivePublication}s have the potential to provide greater throughput than the default {@link Publication}
  * which supports concurrent access.
  * <p>
- * The APIs used for try claim and offer are non-blocking.
+ * The APIs used for tryClaim and offer are non-blocking.
  * <p>
- * <b>Note:</b> Instances are NOT threadsafe for offer and try claim methods but are for the others.
+ * <b>Note:</b> Instances are NOT threadsafe for offer and tryClaim methods but are for the others.
  *
  * @see Aeron#addExclusivePublication(String, int)
  * @see ExclusiveBufferClaim

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -880,7 +880,7 @@ public void conclude()
             if (null == archiveProxy)
             {
                 archiveProxy = new ArchiveProxy(
-                    aeron.addPublication(controlRequestChannel, controlRequestStreamId),
+                    aeron.addExclusivePublication(controlRequestChannel, controlRequestStreamId),
                     idleStrategy,
                     messageTimeoutNs,
                     ArchiveProxy.DEFAULT_MAX_RETRY_ATTEMPTS);

File: aeron-archive/src/main/java/io/aeron/archive/ControlSessionDemuxer.java
Patch:
@@ -178,7 +178,7 @@ public void onListRecordings(
         controlSession.onListRecordings(correlationId, fromRecordingId, recordCount);
     }
 
-    void notifyControlSessionClosed(final ControlSession controlSession)
+    void removeControlSession(final ControlSession controlSession)
     {
         controlSessionByIdMap.remove(controlSession.sessionId());
     }

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -331,7 +331,7 @@ private void checkForBlockedPublisher(final long timeNs)
         {
             if (timeNs > (timeOfLastConsumerPositionUpdateNs + unblockTimeoutNs))
             {
-                if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPosition))
+                if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPosition, termBufferLength))
                 {
                     unblockedPublications.orderedIncrement();
                 }

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -604,7 +604,7 @@ private void checkForBlockedPublisher(final long timeNs, final long senderPositi
         {
             if (timeNs > (timeOfLastActivityNs + unblockTimeoutNs))
             {
-                if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, senderPosition))
+                if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, senderPosition, termBufferLength))
                 {
                     unblockedPublications.orderedIncrement();
                 }
@@ -691,7 +691,7 @@ public void onTimeEvent(final long timeNs, final long timeMs, final DriverConduc
                 final long producerPosition = producerPosition();
                 if (producerPosition > senderPosition)
                 {
-                    if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, senderPosition))
+                    if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, senderPosition, termBufferLength))
                     {
                         unblockedPublications.orderedIncrement();
                         timeOfLastActivityNs = timeNs;

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -223,13 +223,13 @@ public void close()
     }
 
     /**
-     * Add a {@link Publication} for publishing messages to subscribers.
+     * Add a {@link Publication} for publishing messages to subscribers. The publication returned is threadsafe.
      *
      * @param channel  for receiving the messages known to the media layer.
      * @param streamId within the channel scope.
-     * @return the new Publication.
+     * @return the a new {@link ConcurrentPublication}.
      */
-    public Publication addPublication(final String channel, final int streamId)
+    public ConcurrentPublication addPublication(final String channel, final int streamId)
     {
         clientLock.lock();
         try

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -158,15 +158,15 @@ void handleError(final Throwable ex)
         errorHandler.onError(ex);
     }
 
-    Publication addPublication(final String channel, final int streamId)
+    ConcurrentPublication addPublication(final String channel, final int streamId)
     {
         ensureOpen();
 
         stashedChannel = channel;
         final long registrationId = driverProxy.addPublication(channel, streamId);
         awaitResponse(registrationId);
 
-        return (Publication)resourceByRegIdMap.get(registrationId);
+        return (ConcurrentPublication)resourceByRegIdMap.get(registrationId);
     }
 
     ExclusivePublication addExclusivePublication(final String channel, final int streamId)

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -753,6 +753,6 @@ static int segmentFileIndex(final long startPosition, final long position, final
 
     static String segmentFileName(final long recordingId, final int segmentIndex)
     {
-        return recordingId + '-' + segmentIndex + Configuration.RECORDING_SEGMENT_POSTFIX;
+        return recordingId + "-" + segmentIndex + Configuration.RECORDING_SEGMENT_POSTFIX;
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -771,6 +771,7 @@ private RawLog newNetworkPublicationLog(
         termLength(logMetaData, rawLog.termLength());
         pageSize(logMetaData, context.filePageSize());
         correlationId(logMetaData, registrationId);
+        endOfStreamPosition(logMetaData, Long.MAX_VALUE);
 
         initialisePositionCounters(initialTermId, params, logMetaData);
 

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -758,6 +758,8 @@ public int decRef()
             {
                 isEndOfStream = true;
             }
+
+            LogBufferDescriptor.endOfStreamPosition(metaDataBuffer, producerPosition());
         }
 
         return count;

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -327,7 +327,7 @@ private void checkForBlockedPublisher(final long timeNs)
     {
         final long consumerPosition = this.consumerPosition;
 
-        if (consumerPosition == lastConsumerPosition && isProducerPositionDifferent(consumerPosition))
+        if (consumerPosition == lastConsumerPosition && isPossiblyBlocked(consumerPosition))
         {
             if (timeNs > (timeOfLastConsumerPositionUpdateNs + unblockTimeoutNs))
             {
@@ -344,14 +344,14 @@ private void checkForBlockedPublisher(final long timeNs)
         }
     }
 
-    private boolean isProducerPositionDifferent(final long consumerPosition)
+    private boolean isPossiblyBlocked(final long consumerPosition)
     {
         final int producerTermCount = activeTermCount(metaDataBuffer);
         final int expectedTermCount = (int)(consumerPosition >> positionBitsToShift);
 
         if (producerTermCount != expectedTermCount)
         {
-            return false;
+            return true;
         }
 
         final long rawTail = rawTailVolatile(metaDataBuffer, indexByTermCount(producerTermCount));

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -600,7 +600,7 @@ private void cleanBuffer(final long publisherLimit)
 
     private void checkForBlockedPublisher(final long timeNs, final long senderPosition)
     {
-        if (senderPosition == lastSenderPosition && isProducerPositionDifferent(senderPosition))
+        if (senderPosition == lastSenderPosition && isPossiblyBlocked(senderPosition))
         {
             if (timeNs > (timeOfLastActivityNs + unblockTimeoutNs))
             {
@@ -617,14 +617,14 @@ private void checkForBlockedPublisher(final long timeNs, final long senderPositi
         }
     }
 
-    private boolean isProducerPositionDifferent(final long consumerPosition)
+    private boolean isPossiblyBlocked(final long consumerPosition)
     {
         final int producerTermCount = activeTermCount(metaDataBuffer);
         final int expectedTermCount = (int)(consumerPosition >> positionBitsToShift);
 
         if (producerTermCount != expectedTermCount)
         {
-            return false;
+            return true;
         }
 
         final long rawTail = rawTailVolatile(metaDataBuffer, indexByTermCount(producerTermCount));

File: aeron-driver/src/test/java/io/aeron/driver/buffer/RawLogFactoryTest.java
Patch:
@@ -40,6 +40,7 @@ public class RawLogFactoryTest
     private static final int TERM_BUFFER_LENGTH = Configuration.TERM_BUFFER_LENGTH_DEFAULT;
     private static final int TERM_BUFFER_MAX_LENGTH = Configuration.TERM_BUFFER_LENGTH_MAX_DEFAULT;
     private static final boolean PRE_ZERO_LOG = false;
+    private static final boolean PERFORM_STORAGE_CHECKS = false;
     private RawLogFactory rawLogFactory;
     private UdpChannel udpChannel = UdpChannel.parse(CHANNEL);
 
@@ -51,6 +52,7 @@ public void createDataDir()
             DATA_DIR.getAbsolutePath(),
             TERM_BUFFER_MAX_LENGTH,
             PRE_ZERO_LOG,
+            PERFORM_STORAGE_CHECKS,
             mock(DistinctErrorLog.class));
     }
 

File: aeron-client/src/test/java/io/aeron/logbuffer/TermAppenderTest.java
Patch:
@@ -25,6 +25,7 @@
 import static io.aeron.logbuffer.LogBufferDescriptor.TERM_TAIL_COUNTERS_OFFSET;
 import static io.aeron.logbuffer.LogBufferDescriptor.packTail;
 import static io.aeron.logbuffer.LogBufferDescriptor.rawTailVolatile;
+import static io.aeron.logbuffer.TermAppender.FAILED;
 import static io.aeron.protocol.DataHeaderFlyweight.RESERVED_VALUE_OFFSET;
 import static io.aeron.protocol.DataHeaderFlyweight.createDefaultHeader;
 import static java.nio.ByteBuffer.allocateDirect;
@@ -33,7 +34,6 @@
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.*;
 import static io.aeron.logbuffer.FrameDescriptor.*;
-import static io.aeron.logbuffer.TermAppender.TRIPPED;
 import static io.aeron.protocol.DataHeaderFlyweight.HEADER_LENGTH;
 import static org.agrona.BitUtil.*;
 
@@ -116,7 +116,7 @@ public void shouldAppendFrameTwiceToLog()
     }
 
     @Test
-    public void shouldPadLogAndTripWhenAppendingWithInsufficientRemainingCapacity()
+    public void shouldPadLogWhenAppendingWithInsufficientRemainingCapacity()
     {
         final int msgLength = 120;
         final int headerLength = DEFAULT_HEADER.capacity();
@@ -128,7 +128,7 @@ public void shouldPadLogAndTripWhenAppendingWithInsufficientRemainingCapacity()
         logMetaDataBuffer.putLong(TERM_TAIL_COUNTER_OFFSET, packTail(TERM_ID, tailValue));
 
         assertThat(termAppender.appendUnfragmentedMessage(headerWriter, buffer, 0, msgLength, RVS, TERM_ID),
-            is(TRIPPED));
+            is(FAILED));
 
         assertThat(rawTailVolatile(logMetaDataBuffer, PARTITION_INDEX),
             is(packTail(TERM_ID, tailValue + requiredFrameSize)));

File: aeron-client/src/main/java/io/aeron/logbuffer/LogBufferDescriptor.java
Patch:
@@ -281,7 +281,7 @@ public static void correlationId(final UnsafeBuffer logMetaDataBuffer, final lon
      * Get whether the log is considered connected or not by the driver.
      *
      * @param logMetaDataBuffer containing the meta data.
-     * @return wehther the log is considered connected or not by the driver.
+     * @return whether the log is considered connected or not by the driver.
      */
     public static boolean isConnected(final UnsafeBuffer logMetaDataBuffer)
     {
@@ -292,7 +292,7 @@ public static boolean isConnected(final UnsafeBuffer logMetaDataBuffer)
      * Set whether the log is considered connected or not by the driver.
      *
      * @param logMetaDataBuffer containing the meta data.
-     * @param isConnected      or not
+     * @param isConnected       or not
      */
     public static void isConnected(final UnsafeBuffer logMetaDataBuffer, final boolean isConnected)
     {

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -25,7 +25,6 @@
 import io.aeron.protocol.SetupFlyweight;
 import io.aeron.protocol.StatusMessageFlyweight;
 import org.agrona.collections.ArrayUtil;
-import org.agrona.concurrent.EpochClock;
 import org.agrona.concurrent.NanoClock;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.AtomicCounter;

File: aeron-agent/src/main/java/io/aeron/agent/EventCode.java
Patch:
@@ -98,7 +98,7 @@ public long tagBit()
 
     public static EventCode get(final int id)
     {
-        if (id < 0 || id > EVENT_CODE_BY_ID.length)
+        if (id < 0 || id >= EVENT_CODE_BY_ID.length)
         {
             throw new IllegalArgumentException("No EventCode for ID: " + id);
         }

File: aeron-agent/src/main/java/io/aeron/agent/CmdInterceptor.java
Patch:
@@ -66,7 +66,7 @@ public static void logCmd(final int msgTypeId, final DirectBuffer buffer, final
                 break;
 
             case ON_ERROR:
-                // TODO: add event code and dissector
+                LOGGER.log(CMD_OUT_ERROR, buffer, index, length);
                 break;
 
             case ON_OPERATION_SUCCESS:

File: aeron-agent/src/main/java/io/aeron/agent/EventLogger.java
Patch:
@@ -122,6 +122,7 @@ private void logString(final EventCode code, final String value)
     {
         final MutableDirectBuffer encodedBuffer = ENCODING_BUFFER.get();
         final int encodingLength = EventEncoder.encode(encodedBuffer, value);
+
         ringBuffer.write(code.id(), encodedBuffer, 0, encodingLength);
     }
 }

File: aeron-client/src/main/java/io/aeron/Subscription.java
Patch:
@@ -409,7 +409,7 @@ void addImage(final Image image)
     {
         if (isClosed)
         {
-            clientConductor.lingerResource(image.managedResource());
+            clientConductor.releaseImage(image);
         }
         else
         {
@@ -434,7 +434,7 @@ Image removeImage(final long correlationId)
         if (null != removedImage)
         {
             images = ArrayUtil.remove(oldArray, removedImage);
-            clientConductor.lingerResource(removedImage.managedResource());
+            clientConductor.releaseImage(removedImage);
         }
 
         return removedImage;
@@ -447,7 +447,7 @@ private void closeImages()
 
         for (final Image image : images)
         {
-            clientConductor.lingerResource(image.managedResource());
+            clientConductor.releaseImage(image);
 
             try
             {

File: aeron-client/src/test/java/io/aeron/ImageTest.java
Patch:
@@ -88,7 +88,7 @@ public void shouldHandleClosedImage()
     {
         final Image image = createImage();
 
-        image.managedResource();
+        image.close();
 
         assertTrue(image.isClosed());
         assertThat(image.poll(mockFragmentHandler, Integer.MAX_VALUE), is(0));

File: aeron-client/src/main/java/io/aeron/logbuffer/LogBufferDescriptor.java
Patch:
@@ -471,7 +471,7 @@ public static int computeTermOffsetFromPosition(final long position, final int p
      */
     public static long computeLogLength(final int termLength)
     {
-        return (termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH;
+        return ((long)termLength * PARTITION_COUNT) + LOG_META_DATA_LENGTH;
     }
 
     /**

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -76,7 +76,7 @@ abstract class ArchiveConductor extends SessionWorker<Session>
 
     ArchiveConductor(final Aeron aeron, final Archive.Context ctx)
     {
-        super("archive-conductor", ctx.errorHandler());
+        super("archive-conductor", ctx.countedErrorHandler());
 
         this.aeron = aeron;
         this.ctx = ctx;

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -126,7 +126,8 @@ public void openDatagramChannel(final AtomicCounter statusIndicator)
         catch (final IOException ex)
         {
             statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED);
-            throw new RuntimeException("Erroneous channel: " + udpChannel.originalUriString(), ex);
+            throw new RuntimeException(
+                "Channel error: " + ex.getMessage() + " : " + udpChannel.originalUriString(), ex);
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -108,7 +108,7 @@ public DriverConductor(final Context ctx)
 
         clientRequestAdapter = new ClientRequestAdapter(
             context.systemCounters().get(ERRORS),
-            ctx.errorLog(),
+            ctx.errorHandler(),
             toDriverCommands,
             clientProxy,
             this);

File: aeron-archive/src/main/java/io/aeron/archive/Archive.java
Patch:
@@ -48,6 +48,7 @@ private Archive(final Context ctx)
         this.ctx = ctx;
 
         ctx.aeronContext
+            .errorHandler(ctx.errorHandler())
             .driverAgentInvoker(ctx.mediaDriverAgentInvoker())
             .clientLock(new NoOpLock());
 

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -116,12 +116,11 @@ enum State
             return;
         }
 
-        // TODO: need to consider the start and stop states for a replay of a stream that is live recording.
         final long stopPosition = descriptorDecoder.stopPosition();
-        if (replayPosition - stopPosition > 0)
+        if (replayPosition - stopPosition >= 0)
         {
             final String errorMessage = "requested replay start position(=" + replayPosition +
-                ") is after recording stop position(=" + stopPosition + ")";
+                ") must be before current highest recorded position(=" + stopPosition + ")";
             closeOnError(new IllegalArgumentException(errorMessage), errorMessage);
             cursor = null;
             replayPublication = null;

File: aeron-archive/src/main/java/io/aeron/archive/RecordingFragmentReader.java
Patch:
@@ -85,7 +85,7 @@ class RecordingFragmentReader implements AutoCloseable
 
         if (!openRecordingSegment())
         {
-            throw new IllegalStateException("First file must be available");
+            throw new IllegalStateException("segment file must be available for requested position: " + position);
         }
 
         final long termStartPosition = (startPosition / termLength) * termLength;
@@ -105,7 +105,7 @@ class RecordingFragmentReader implements AutoCloseable
             flyweight.termOffset() != termOffset)
         {
             close();
-            throw new IllegalArgumentException("fromPosition:" + fromPosition + " is not aligned to fragment");
+            throw new IllegalArgumentException("fromPosition is not aligned to fragment: " + fromPosition);
         }
 
         replayPosition = fromPosition;

File: aeron-driver/src/main/java/io/aeron/driver/PublicationParams.java
Patch:
@@ -68,7 +68,7 @@ static void validateMtuForMaxMessage(final PublicationParams params, final boole
         if (params.mtuLength > maxMessageLength)
         {
             throw new IllegalStateException("MTU greater than max message length for term length: mtu=" +
-                params.mtuLength + " maxMessageLength=" + maxMessageLength);
+                params.mtuLength + " maxMessageLength=" + maxMessageLength + " termLength=" + termLength);
         }
     }
 

File: aeron-agent/src/main/java/io/aeron/agent/EventLogAgent.java
Patch:
@@ -134,7 +134,7 @@ private static void agent(final boolean shouldRedefine, final Instrumentation in
                         .on(named("cleanupPublication")))
                     .visit(to(CleanupInterceptor.DriverConductorInterceptor.CleanupSubscriptionLink.class)
                         .on(named("cleanupSubscriptionLink"))))
-            .type(nameEndsWith("DriverAdapter"))
+            .type(nameEndsWith("ClientRequestAdapter"))
             .transform((builder, typeDescription, classLoader, javaModule) ->
                 builder
                     .visit(to(CmdInterceptor.class).on(named("onMessage"))))

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -639,7 +639,8 @@ public void onTimeEvent(final long timeNs, final long timeMs, final DriverConduc
                 break;
 
             case LINGER:
-                if (timeNs > (timeOfLastActivityNs + PUBLICATION_LINGER_NS))
+                if (!flowControl.shouldLinger(timeNs, producerPosition())
+                    || timeNs > (timeOfLastActivityNs + PUBLICATION_LINGER_NS))
                 {
                     conductor.cleanupPublication(this);
                     status = Status.CLOSING;

File: aeron-archive/src/main/java/io/aeron/archive/ReplaySession.java
Patch:
@@ -177,7 +177,6 @@ enum State
 
     public void close()
     {
-        System.out.println(epochClock.time() + " | closed replay");
         state = State.CLOSED;
 
         CloseHelper.quietClose(replayPublication);

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -141,7 +141,7 @@ public void archive() throws IOException, InterruptedException
                 startDrainingSubscriber(aeron, PUBLISH_URI, PUBLISH_STREAM_ID);
                 aeronArchive.startRecording(PUBLISH_URI, PUBLISH_STREAM_ID, SourceLocation.LOCAL);
 
-                long start;
+                final long start;
                 try (ExclusivePublication publication = aeron.addExclusivePublication(PUBLISH_URI, PUBLISH_STREAM_ID))
                 {
                     awaitConnected(publication);

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -284,7 +284,7 @@ private void publishDataToBeRecorded(final ExclusivePublication publication, fin
         final long position = publication.position();
         final int lastTermOffset = computeTermOffsetFromPosition(position, positionBitsToShift);
         final int lastTermId = computeTermIdFromPosition(position, positionBitsToShift, initialTermId);
-        totalRecordingLength = (lastTermId - startTermId) * termLength + (lastTermOffset - startTermOffset);
+        totalRecordingLength = ((lastTermId - startTermId) * (long)termLength) + (lastTermOffset - startTermOffset);
 
         assertThat(position - startPosition, is(totalRecordingLength));
     }

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveReplayLoadTest.java
Patch:
@@ -210,7 +210,7 @@ private void publishDataToRecorded(final Publication publication, final int mess
         final int termOffset = computeTermOffsetFromPosition(finalPosition, positionBitsToShift);
         final int termId = computeTermIdFromPosition(finalPosition, positionBitsToShift, initialTermId);
 
-        expectedRecordingLength = (termId - initialTermId) * termLength + (termOffset - initialTermOffset);
+        expectedRecordingLength = ((termId - initialTermId) * (long)termLength) + (termOffset - initialTermOffset);
 
         assertThat(finalPosition - startPosition, is(expectedRecordingLength));
     }

File: aeron-archive/src/main/java/io/aeron/archive/client/ControlResponsePoller.java
Patch:
@@ -51,7 +51,7 @@ public ControlResponsePoller(final Subscription subscription, final int fragment
     }
 
     /**
-     * Poll for recording events and dispatch them to the {@link RecordingEventsListener} for this instance.
+     * Poll for recording events.
      *
      * @return the number of fragments read during the operation. Zero if no events are available.
      */

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -968,7 +968,7 @@ private void connectToDriver()
                 cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer);
 
                 int cncVersion;
-                while (0 == (cncVersion = cncMetaDataBuffer.getInt(CncFileDescriptor.cncVersionOffset(0))))
+                while (0 == (cncVersion = cncMetaDataBuffer.getIntVolatile(CncFileDescriptor.cncVersionOffset(0))))
                 {
                     if (epochClock.time() > (startTimeMs + driverTimeoutMs()))
                     {

File: aeron-archive/src/test/java/io/aeron/archive/TestUtil.java
Patch:
@@ -213,6 +213,7 @@ public static TestWatcher newWatcher(final Class clazz, final long seed)
     {
         return new TestWatcher()
         {
+            @SuppressWarnings("unused")
             protected void failed(final Throwable t, final Description description)
             {
                 System.err.println(clazz.getName() + " failed with random seed: " + seed);

File: aeron-archive/src/test/java/io/aeron/archive/TestUtil.java
Patch:
@@ -232,7 +232,7 @@ public static void startChannelDrainingSubscription(final Aeron aeron, final Str
             {
                 try (Subscription subscription = aeron.addSubscription(channel, streamId))
                 {
-                    while (subscription.imageCount() == 0)
+                    while (subscription.hasNoImages())
                     {
                         LockSupport.parkNanos(1);
                     }
@@ -255,5 +255,4 @@ public static void startChannelDrainingSubscription(final Aeron aeron, final Str
         t.setName("eager-subscriber");
         t.start();
     }
-
 }

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -125,9 +125,9 @@ public void after() throws Exception
     public void archive() throws IOException, InterruptedException
     {
         try (Publication controlRequest = aeron.addPublication(
-            archive.context().controlChannel(), archive.context().controlStreamId());
+                archive.context().controlChannel(), archive.context().controlStreamId());
              Subscription recordingEvents = aeron.addSubscription(
-                 archive.context().recordingEventsChannel(), archive.context().recordingEventsStreamId()))
+                archive.context().recordingEventsChannel(), archive.context().recordingEventsStreamId()))
         {
             final ArchiveProxy archiveProxy = new ArchiveProxy(controlRequest);
             initRecordingStartIndicator(recordingEvents);
@@ -143,6 +143,7 @@ public void archive() throws IOException, InterruptedException
 
             long start;
             final long duration = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(TEST_DURATION_SEC);
+
             startChannelDrainingSubscription(aeron, PUBLISH_URI, PUBLISH_STREAM_ID);
             final String channel = PUBLISH_URI;
 

File: aeron-archive/src/test/java/io/aeron/archive/workloads/ArchiveReplayLoadTest.java
Patch:
@@ -273,7 +273,7 @@ private void validateReplay(final ArchiveProxy archiveProxy, final int messageCo
                 int numFragments = replay.poll(validateFragmentHandler, 128);
                 if (0 == numFragments && replay.hasNoImages() && remaining > 0)
                 {
-                    System.err.println("Unexpected close of image");
+                    System.err.println("Unexpected close of image: remaining=" + remaining);
                     break;
                 }
             }

File: aeron-samples/src/main/java/io/aeron/samples/SampleConfiguration.java
Patch:
@@ -15,8 +15,6 @@
  */
 package io.aeron.samples;
 
-import java.util.concurrent.TimeUnit;
-
 /**
  * Configuration used for samples all in one place.
  */
@@ -63,7 +61,7 @@ public class SampleConfiguration
         STREAM_ID = Integer.getInteger(STREAM_ID_PROP, 10);
         PING_CHANNEL = System.getProperty(PING_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40123");
         PONG_CHANNEL = System.getProperty(PONG_CHANNEL_PROP, "aeron:udp?endpoint=localhost:40124");
-        LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, TimeUnit.SECONDS.toMillis(5));
+        LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, 0);
         PING_STREAM_ID = Integer.getInteger(PING_STREAM_ID_PROP, 10);
         PONG_STREAM_ID = Integer.getInteger(PONG_STREAM_ID_PROP, 10);
         FRAGMENT_COUNT_LIMIT = Integer.getInteger(FRAME_COUNT_LIMIT_PROP, 20);

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestAdapter.java
Patch:
@@ -82,7 +82,8 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                 listener.onStartRecording(
                     startRecordingRequestDecoder.correlationId(),
                     startRecordingRequestDecoder.channel(),
-                    startRecordingRequestDecoder.streamId());
+                    startRecordingRequestDecoder.streamId(),
+                    startRecordingRequestDecoder.sourceLocation());
                 break;
 
             case StopRecordingRequestDecoder.TEMPLATE_ID:

File: aeron-archive/src/main/java/io/aeron/archive/ControlRequestListener.java
Patch:
@@ -15,13 +15,15 @@
  */
 package io.aeron.archive;
 
+import io.aeron.archive.codecs.SourceLocation;
+
 interface ControlRequestListener
 {
     void onConnect(String channel, int streamId);
 
     void onStopRecording(long correlationId, String channel, int streamId);
 
-    void onStartRecording(long correlationId, String channel, int streamId);
+    void onStartRecording(long correlationId, String channel, int streamId, SourceLocation sourceLocation);
 
     void onStartReplay(
         long correlationId,

File: aeron-archive/src/main/java/io/aeron/archive/ArchiveConductor.java
Patch:
@@ -394,7 +394,7 @@ void stopReplay(final long correlationId, final Publication controlPublication,
             controlSessionProxy.sendResponse(
                 correlationId,
                 ControlResponseCode.REPLAY_UNKNOWN,
-                null,
+                "Failed to abort replayId:" + replayId,
                 controlPublication);
         }
     }

File: aeron-archive/src/main/java/io/aeron/archive/ListRecordingsSession.java
Patch:
@@ -16,7 +16,8 @@
 package io.aeron.archive;
 
 import io.aeron.Publication;
-import io.aeron.archive.codecs.ControlResponseCode;
+
+import static io.aeron.archive.codecs.ControlResponseCode.RECORDING_NOT_FOUND;
 
 class ListRecordingsSession extends AbstractListRecordingsSession
 {
@@ -74,7 +75,7 @@ protected int init()
     {
         if (fromId >= catalog.nextRecordingId())
         {
-            sendError(ControlResponseCode.RECORDING_NOT_FOUND, "Requested start id exceeds max known recording id");
+            sendError(RECORDING_NOT_FOUND, "Requested start id exceeds max allocated recording id");
             state = State.INACTIVE;
         }
         else

File: aeron-archive/src/main/java/io/aeron/archive/Catalog.java
Patch:
@@ -188,7 +188,7 @@ UnsafeBuffer wrapDescriptor(final long recordingId)
             return null;
         }
 
-        return new UnsafeBuffer(indexMappedBBuffer, (int) (recordingId * RECORD_LENGTH), RECORD_LENGTH);
+        return new UnsafeBuffer(indexMappedBBuffer, (int)(recordingId * RECORD_LENGTH), RECORD_LENGTH);
     }
 
     long nextRecordingId()
@@ -266,7 +266,6 @@ private boolean consumeDescriptor(
 
     private void refreshDescriptor(final RecordingDescriptorEncoder encoder, final RecordingDescriptorDecoder decoder)
     {
-        // clean shutdown of recordings will fill in the stopTimestamp, check for it
         if (decoder.stopTimestamp() == NULL_TIME)
         {
             final long stopPosition = decoder.stopPosition();
@@ -314,7 +313,7 @@ private void refreshDescriptor(final RecordingDescriptorEncoder encoder, final R
 
                     if (lastFragmentSegmentOffset != stoppedSegmentOffset)
                     {
-                        // process has failed between transfering the data to updating th stop position, we cant trust
+                        // process has failed between transferring the data to updating th stop position, we cant trust
                         // the last fragment, so take the position of the previous fragment as the stop position
                         encoder.stopPosition(stopPosition + (lastFragmentSegmentOffset - stoppedSegmentOffset));
                     }

File: aeron-archive/src/main/java/io/aeron/archive/client/ArchiveProxy.java
Patch:
@@ -51,7 +51,7 @@ public class ArchiveProxy
 
     /**
      * Create a proxy with a {@link Publication} for sending control message requests.
-     *
+     * <p>
      * This provides a default {@link IdleStrategy} of a {@link YieldingIdleStrategy} when offers are back pressured
      * with a defaults of {@link AeronArchive.Configuration#MESSAGE_TIMEOUT_DEFAULT_NS} and
      * {@link #DEFAULT_MAX_RETRY_ATTEMPTS}.
@@ -218,7 +218,7 @@ public boolean listRecordings(final long fromRecordingId, final int recordCount,
      * @param correlationId   for this request.
      * @return true if successfully offered otherwise false.
      */
-    public boolean listRecordingsForChannelUri(
+    public boolean listRecordingsForUri(
         final long fromRecordingId,
         final int recordCount,
         final String channel,

File: aeron-archive/src/main/java/io/aeron/archive/client/AeronArchive.java
Patch:
@@ -150,7 +150,7 @@ public void startRecording(final String channel, final int streamId)
         if (code != ControlResponseCode.OK)
         {
             throw new IllegalStateException(
-                "Response code=" + code + " message=" + controlResponsePoller.controlResponseDecoder().errorMessage());
+                "Response code=" + code + " error=" + controlResponsePoller.controlResponseDecoder().errorMessage());
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1070,8 +1070,8 @@ private IpcPublication addIpcPublication(
             PublisherLimit.allocate(countersManager, registrationId, sessionId, streamId, channel),
             rawLog,
             publicationUnblockTimeoutNs,
+            nanoClock.nanoTime(),
             context.systemCounters(),
-            nanoClock,
             isExclusive);
 
         ipcPublications.add(publication);

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -564,10 +564,9 @@ private void cleanBuffer(final long publisherLimit)
 
     private void checkForBlockedPublisher(final long timeNs, final long senderPosition)
     {
-        if (senderPosition == lastSenderPosition)
+        if (senderPosition == lastSenderPosition && producerPosition() > senderPosition)
         {
-            if (timeNs > (timeOfLastActivityNs + unblockTimeoutNs) &&
-                producerPosition() > senderPosition)
+            if (timeNs > (timeOfLastActivityNs + unblockTimeoutNs))
             {
                 if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, senderPosition))
                 {

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -1071,6 +1071,7 @@ private IpcPublication addIpcPublication(
             rawLog,
             publicationUnblockTimeoutNs,
             context.systemCounters(),
+            nanoClock,
             isExclusive);
 
         ipcPublications.add(publication);

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -198,6 +198,7 @@ public NetworkPublication(
 
         lastSenderPosition = senderPosition.get();
         cleanPosition = lastSenderPosition;
+        timeOfLastActivityNs = nowNs;
     }
 
     public void close()
@@ -565,8 +566,8 @@ private void checkForBlockedPublisher(final long timeNs, final long senderPositi
     {
         if (senderPosition == lastSenderPosition)
         {
-            if (producerPosition() > senderPosition &&
-                timeNs > (timeOfLastActivityNs + unblockTimeoutNs))
+            if (timeNs > (timeOfLastActivityNs + unblockTimeoutNs) &&
+                producerPosition() > senderPosition)
             {
                 if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, senderPosition))
                 {

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiverSystemTest.java
Patch:
@@ -60,7 +60,7 @@ public class ArchiverSystemTest
 
     private final MediaDriver.Context driverCtx = new MediaDriver.Context();
     private final Archiver.Context archiverCtx = new Archiver.Context();
-    private final UnsafeBuffer buffer = new UnsafeBuffer(new byte[4096]);
+    private final UnsafeBuffer buffer = new UnsafeBuffer(BufferUtil.allocateDirectAligned(4096, 32));
     private final Random rnd = new Random();
     private final long seed = System.nanoTime();
     private final File archiveDir = TestUtil.makeTempDir();

File: aeron-archiver/src/test/java/io/aeron/archiver/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -29,6 +29,7 @@
 import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
+import org.agrona.BufferUtil;
 import org.agrona.CloseHelper;
 import org.agrona.IoUtil;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -63,7 +64,7 @@ public class ArchiveRecordingLoadTest
     private static final int MESSAGE_COUNT = 2000000;
     private final MediaDriver.Context driverCtx = new MediaDriver.Context();
     private final Archiver.Context archiverCtx = new Archiver.Context();
-    private final UnsafeBuffer buffer = new UnsafeBuffer(new byte[4096]);
+    private final UnsafeBuffer buffer = new UnsafeBuffer(BufferUtil.allocateDirectAligned(4096, 32));
     private final Random rnd = new Random();
     private final long seed = System.nanoTime();
     private final File archiveDir = TestUtil.makeTempDir();

File: aeron-archiver/src/test/java/io/aeron/archiver/workloads/ArchiveReplayLoadTest.java
Patch:
@@ -31,6 +31,7 @@
 import io.aeron.logbuffer.Header;
 import io.aeron.logbuffer.LogBufferDescriptor;
 import io.aeron.protocol.DataHeaderFlyweight;
+import org.agrona.BufferUtil;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.IoUtil;
@@ -70,7 +71,7 @@ public class ArchiveReplayLoadTest
     private static final int MESSAGE_COUNT = 2000000;
     private final MediaDriver.Context driverCtx = new MediaDriver.Context();
     private final Archiver.Context archiverCtx = new Archiver.Context();
-    private final UnsafeBuffer buffer = new UnsafeBuffer(new byte[4096]);
+    private final UnsafeBuffer buffer = new UnsafeBuffer(BufferUtil.allocateDirectAligned(4096, 32));
     private final Random rnd = new Random();
     private final long seed = System.nanoTime();
     private final File archiveDir = TestUtil.makeTempDir();

File: aeron-client/src/main/java/io/aeron/protocol/HeaderFlyweight.java
Patch:
@@ -37,8 +37,6 @@
  */
 public class HeaderFlyweight extends UnsafeBuffer
 {
-    public static final byte[] EMPTY_BUFFER = new byte[0];
-
     /**
      * header type PAD
      */
@@ -91,7 +89,6 @@ public class HeaderFlyweight extends UnsafeBuffer
 
     public HeaderFlyweight()
     {
-        super(EMPTY_BUFFER);
     }
 
     public HeaderFlyweight(final UnsafeBuffer buffer)

File: aeron-archiver/src/main/java/io/aeron/archiver/RecordingFragmentReader.java
Patch:
@@ -114,6 +114,7 @@ interface SimplifiedControlledPoll
             flyweight.streamId() != descriptorDecoder.streamId() ||
             flyweight.termOffset() != termOffset)
         {
+            close();
             throw new IllegalArgumentException("fromPosition:" + fromPosition + " is not aligned to fragment");
         }
 

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveConductor.java
Patch:
@@ -343,7 +343,6 @@ void startReplay(
 
         final int newId = replaySessionId++;
         final ReplaySession replaySession = new ReplaySession(
-            recordingId,
             position,
             length,
             newReplayPublication,

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -63,7 +63,6 @@ enum State
 
     private final ExclusiveBufferClaim bufferClaim = new ExclusiveBufferClaim();
     private final RecordingFragmentReader.SimplifiedControlledPoll fragmentPoller = this::onFragment;
-    private final RecordingDescriptorDecoder descriptorDecoder;
 
     private final long replaySessionId;
     private final long correlationId;
@@ -78,7 +77,6 @@ enum State
     private long lingerSinceMs;
 
     ReplaySession(
-        final long recordingId,
         final long replayPosition,
         final long replayLength,
         final ArchiveConductor.ReplayPublicationSupplier supplier,
@@ -99,7 +97,7 @@ enum State
         this.epochClock = epochClock;
         this.lingerSinceMs = epochClock.time();
 
-        descriptorDecoder = new RecordingDescriptorDecoder().wrap(
+        final RecordingDescriptorDecoder descriptorDecoder = new RecordingDescriptorDecoder().wrap(
             descriptorBuffer,
             Catalog.CATALOG_FRAME_LENGTH,
             RecordingDescriptorDecoder.BLOCK_LENGTH,

File: aeron-archiver/src/test/java/io/aeron/archiver/ReplaySessionTest.java
Patch:
@@ -247,7 +247,6 @@ public void shouldNotReplayPartialUnalignedDataFromFile()
     {
         final long correlationId = 1L;
         final ReplaySession replaySession = new ReplaySession(
-            (long)RECORDING_ID,
             RECORDING_POSITION + 1,
             (long)FRAME_LENGTH,
             mockReplyPubSupplier,
@@ -552,7 +551,6 @@ private ReplaySession replaySession(
             eq(TERM_BUFFER_LENGTH))).thenReturn(replay);
 
         return new ReplaySession(
-            recordingId,
             recordingPosition,
             length,
             conductor,

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveConductor.java
Patch:
@@ -216,7 +216,7 @@ void stopRecording(
                 controlSessionProxy.sendError(
                     correlationId,
                     ControlResponseCode.ERROR,
-                    "No recording found for: " + key,
+                    "No recording subscription found for: " + key,
                     controlPublication);
             }
         }
@@ -277,7 +277,7 @@ void startRecordingSubscription(
                 controlSessionProxy.sendError(
                     correlationId,
                     ControlResponseCode.ERROR,
-                    "Subscription is already being recorded: " + key,
+                    "Recording already setup for subscription: " + key,
                     controlPublication);
             }
         }

File: aeron-archiver/src/main/java/io/aeron/archiver/Archiver.java
Patch:
@@ -194,7 +194,7 @@ private static int segmentFileLength()
 
         private static boolean forceWrites()
         {
-            return Boolean.valueOf(System.getProperty(FORCE_WRITES_PROP_NAME, "true"));
+            return Boolean.valueOf(System.getProperty(FORCE_WRITES_PROP_NAME, "false"));
         }
 
         private static ArchiverThreadingMode threadingMode()

File: aeron-archiver/src/main/java/io/aeron/archiver/RecordingWriter.java
Patch:
@@ -520,7 +520,7 @@ static class RecordingContext
     {
         private File archiveDir;
         private EpochClock epochClock;
-        private boolean forceWrites = true;
+        private boolean forceWrites = false;
         private int segmentFileLength = 1024 * 1024 * 1024;
 
         RecordingContext archiveDir(final File archiveDir)

File: aeron-archiver/src/test/java/io/aeron/archiver/ReplaySessionTest.java
Patch:
@@ -73,8 +73,7 @@ public void before() throws Exception
         epochClock = mock(EpochClock.class);
         try (RecordingWriter writer = new RecordingWriter(new RecordingWriter.RecordingContext()
             .archiveDir(archiveDir)
-            .epochClock(epochClock)
-            .forceWrites(true),
+            .epochClock(epochClock),
             RECORDING_ID,
             TERM_BUFFER_LENGTH,
             MTU_LENGTH,
@@ -449,7 +448,7 @@ public void shouldReplayDataFromFileWhileBeingWritten()
         try (RecordingWriter writer = new RecordingWriter(new RecordingWriter.RecordingContext()
             .archiveDir(archiveDir)
             .epochClock(epochClock)
-            .forceWrites(true),
+            .forceWrites(false),
             recordingId,
             TERM_BUFFER_LENGTH,
             MTU_LENGTH,

File: aeron-client/src/main/java/io/aeron/DriverProxy.java
Patch:
@@ -46,7 +46,7 @@ public class DriverProxy
     private final DestinationMessageFlyweight destinationMessage = new DestinationMessageFlyweight();
     private final RingBuffer toDriverCommandBuffer;
 
-    public DriverProxy(final RingBuffer toDriverCommandBuffer)
+    public DriverProxy(final RingBuffer toDriverCommandBuffer, final long clientId)
     {
         this.toDriverCommandBuffer = toDriverCommandBuffer;
 
@@ -56,7 +56,6 @@ public DriverProxy(final RingBuffer toDriverCommandBuffer)
         removeMessage.wrap(buffer, 0);
         destinationMessage.wrap(buffer, 0);
 
-        final long clientId = toDriverCommandBuffer.nextCorrelationId();
         correlatedMessage.clientId(clientId);
     }
 

File: aeron-client/src/test/java/io/aeron/DriverProxyTest.java
Patch:
@@ -36,9 +36,10 @@ public class DriverProxyTest
 
     private static final int STREAM_ID = 1;
     private static final long CORRELATION_ID = 3;
+    private static final long CLIENT_ID = 7;
     private final RingBuffer conductorBuffer = new ManyToOneRingBuffer(
         new UnsafeBuffer(ByteBuffer.allocateDirect(TRAILER_LENGTH + 1024)));
-    private final DriverProxy conductor = new DriverProxy(conductorBuffer);
+    private final DriverProxy conductor = new DriverProxy(conductorBuffer, CLIENT_ID);
 
     @Test
     public void threadSendsAddChannelMessage()

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -152,7 +152,7 @@ public void setUp() throws Exception
         ctx.clientLivenessTimeoutNs(CLIENT_LIVENESS_TIMEOUT_NS);
         ctx.receiveChannelEndpointThreadLocals(new ReceiveChannelEndpointThreadLocals(ctx));
 
-        driverProxy = new DriverProxy(fromClientCommands);
+        driverProxy = new DriverProxy(fromClientCommands, fromClientCommands.nextCorrelationId());
         driverConductor = new DriverConductor(ctx);
 
         doAnswer(closeChannelEndpointAnswer).when(receiverProxy).closeReceiveChannelEndpoint(any());
@@ -1069,7 +1069,8 @@ public void shouldNotTimeoutSpyWithKeepalive() throws Exception
     @Test
     public void shouldTimeoutNetworkPublicationWithSpy() throws Exception
     {
-        final DriverProxy spyDriverProxy = new DriverProxy(fromClientCommands);
+        final long clientId = fromClientCommands.nextCorrelationId();
+        final DriverProxy spyDriverProxy = new DriverProxy(fromClientCommands, clientId);
 
         driverProxy.addPublication(CHANNEL_4000, STREAM_ID_1);
         spyDriverProxy.addSubscription(spyForChannel(CHANNEL_4000), STREAM_ID_1);

File: aeron-driver/src/test/java/io/aeron/driver/IpcPublicationTest.java
Patch:
@@ -41,6 +41,7 @@
 
 public class IpcPublicationTest
 {
+    private static final long CLIENT_ID = 7L;
     private static final int STREAM_ID = 10;
     private static final int TERM_BUFFER_LENGTH = Configuration.TERM_BUFFER_LENGTH_DEFAULT;
     private static final int BUFFER_LENGTH = 16 * 1024;
@@ -83,7 +84,7 @@ public void setUp() throws Exception
 
         ctx.countersValuesBuffer(counterBuffer);
 
-        driverProxy = new DriverProxy(fromClientCommands);
+        driverProxy = new DriverProxy(fromClientCommands, CLIENT_ID);
         driverConductor = new DriverConductor(ctx);
 
         driverProxy.addPublication(CommonContext.IPC_CHANNEL, STREAM_ID);

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveConductor.java
Patch:
@@ -185,7 +185,7 @@ void stopRecording(
                 .prefix(channelUri.prefix())
                 .media(channelUri.media())
                 .endpoint(channelUri.get(CommonContext.ENDPOINT_PARAM_NAME))
-                .controlEndpoint(channelUri.get(CommonContext.INTERFACE_PARAM_NAME));
+                .controlEndpoint(channelUri.get(CommonContext.MDC_CONTROL_PARAM_NAME));
 
             final String minimalChannel = channelBuilder.build();
             final String key = "channel=" + minimalChannel + " streamId=" + streamId;
@@ -248,7 +248,7 @@ void startRecordingSubscription(
                 .prefix(channelUri.prefix())
                 .media(channelUri.media())
                 .endpoint(channelUri.get(CommonContext.ENDPOINT_PARAM_NAME))
-                .controlEndpoint(channelUri.get(CommonContext.INTERFACE_PARAM_NAME));
+                .controlEndpoint(channelUri.get(CommonContext.MDC_CONTROL_PARAM_NAME));
 
             final String minimalChannel = channelBuilder.build();
             final String key = "channel=" + minimalChannel + " streamId=" + streamId;

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -460,7 +460,7 @@ public String build()
     {
         sb.setLength(0);
 
-        if (null != prefix)
+        if (null != prefix && !"".equals(prefix))
         {
             sb.append(prefix).append(':');
         }

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -111,7 +111,7 @@ public ChannelUriStringBuilder validate()
      */
     public ChannelUriStringBuilder prefix(final String prefix)
     {
-        if (null != prefix && !prefix.equals(SPY_QUALIFIER))
+        if (null != prefix && !prefix.equals("") && !prefix.equals(SPY_QUALIFIER))
         {
             throw new IllegalArgumentException("Invalid prefix: " + prefix);
         }

File: aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java
Patch:
@@ -18,6 +18,7 @@
 import io.aeron.logbuffer.FrameDescriptor;
 import io.aeron.logbuffer.LogBufferDescriptor;
 
+import static io.aeron.ChannelUri.SPY_QUALIFIER;
 import static io.aeron.CommonContext.*;
 import static io.aeron.logbuffer.FrameDescriptor.FRAME_ALIGNMENT;
 
@@ -110,7 +111,7 @@ public ChannelUriStringBuilder validate()
      */
     public ChannelUriStringBuilder prefix(final String prefix)
     {
-        if (null != prefix && !prefix.equals("aeron-spy"))
+        if (null != prefix && !prefix.equals(SPY_QUALIFIER))
         {
             throw new IllegalArgumentException("Invalid prefix: " + prefix);
         }

File: aeron-driver/src/main/java/io/aeron/driver/DriverAdapter.java
Patch:
@@ -123,8 +123,7 @@ public void onMessage(
                     }
                     else if (channel.startsWith(SPY_PREFIX))
                     {
-                        conductor.onAddSpySubscription(
-                            channel.substring(SPY_PREFIX.length()), streamId, correlationId, clientId);
+                        conductor.onAddSpySubscription(channel, streamId, correlationId, clientId);
                     }
                     else
                     {

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveConductor.java
Patch:
@@ -59,7 +59,7 @@ abstract class ArchiveConductor extends SessionWorker<Session>
 
     private final Subscription controlSubscription;
     private final Catalog catalog;
-    private final ControlSessionProxy controlSessionProxy;
+    protected final ControlSessionProxy controlSessionProxy;
     private final NotificationsProxy notificationsProxy;
     private final int maxConcurrentRecordings;
     private final int maxConcurrentReplays;

File: aeron-archiver/src/test/java/io/aeron/archiver/RecordingWriterTest.java
Patch:
@@ -22,7 +22,6 @@
 
 public class RecordingWriterTest
 {
-
     private static final int RECORDING_ID = 1;
     private static final int TERM_BUFFER_LENGTH = 16 * 1024;
     private static final int MTU_LENGTH = 4 * 1024;
@@ -85,6 +84,7 @@ public void shouldInitMetaData() throws IOException
             assertEquals(SOURCE, descriptorDecoder.sourceIdentity());
             when(epochClock.time()).thenReturn(43L);
         }
+
         final RecordingDescriptorDecoder descriptorDecoder = loadMetaData();
         assertEquals(RECORDING_ID, descriptorDecoder.recordingId());
         assertEquals(TERM_BUFFER_LENGTH, descriptorDecoder.termBufferLength());

File: aeron-archiver/src/test/java/io/aeron/archiver/ReplaySessionTest.java
Patch:
@@ -256,7 +256,6 @@ public void shouldReplayPartialUnalignedDataFromFile()
             REPLAY_STREAM_ID,
             ByteBuffer.allocate(Catalog.RECORD_LENGTH));
 
-
         when(mockReplayPub.isClosed()).thenReturn(false);
         when(mockControlPub.isClosed()).thenReturn(false);
 

File: aeron-archiver/src/test/java/io/aeron/archiver/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -74,7 +74,8 @@ public class ArchiveRecordingLoadTest
         protected void failed(final Throwable t, final Description description)
         {
             System.err.println(
-                "ArchiveAndReplaySystemTest failed with random seed: " + ArchiveRecordingLoadTest.this.seed);
+                ArchiveRecordingLoadTest.class.getName() +
+                    " failed with random seed: " + ArchiveRecordingLoadTest.this.seed);
         }
     };
     private long correlationId;

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiverSystemTest.java
Patch:
@@ -120,7 +120,7 @@ public void before() throws Exception
 
 
 
-        requestedJoinPosition = (termId - requestedInitialTermId) * termLength + termOffset;
+        requestedJoinPosition = ((termId - requestedInitialTermId) * (long)termLength) + termOffset;
 
         driverCtx
             .termBufferSparseFile(true)

File: aeron-driver/src/main/java/io/aeron/driver/LossDetector.java
Patch:
@@ -109,7 +109,7 @@ public void onGap(final int termId, final int offset, final int length)
      *
      * @param rebuildOffset value to be packed.
      * @param lossFound     value to be packed.
-     * @return a long with both ints packed into it.
+     * @return a long with rebuildOffset and lossFound packed into it.
      */
     public static long pack(final int rebuildOffset, final boolean lossFound)
     {

File: aeron-driver/src/main/java/io/aeron/driver/IpcPublication.java
Patch:
@@ -92,6 +92,8 @@ public IpcPublication(
         this.unblockedPublications = systemCounters.get(UNBLOCKED_PUBLICATIONS);
 
         consumerPosition = producerPosition();
+        lastConsumerPosition = consumerPosition;
+        cleanPosition = consumerPosition;
     }
 
     public int sessionId()
@@ -179,7 +181,6 @@ int updatePublishersLimit()
             consumerPosition = maxSubscriberPosition;
         }
 
-
         return workCount;
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -191,6 +191,9 @@ public NetworkPublication(
 
         positionBitsToShift = Integer.numberOfTrailingZeros(termLength);
         termWindowLength = Configuration.publicationTermWindowLength(termLength);
+
+        lastSenderPosition = senderPosition.get();
+        cleanPosition = lastSenderPosition;
     }
 
     public void close()

File: aeron-system-tests/src/test/java/io/aeron/ExclusivePublicationPublishFromArbitraryPositionTest.java
Patch:
@@ -21,7 +21,6 @@
 import io.aeron.protocol.DataHeaderFlyweight;
 import org.agrona.BitUtil;
 import org.agrona.concurrent.UnsafeBuffer;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestWatcher;
@@ -33,7 +32,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
-@Ignore
 public class ExclusivePublicationPublishFromArbitraryPositionTest
 {
     @Rule

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -507,16 +507,16 @@ void incRef()
     private long newPosition(final int index, final int currentTail, final long position, final long result)
     {
         long newPosition = ADMIN_ACTION;
-        final int termOffset = TermAppender.termOffset(result);
+        final int termOffset = termOffset(result);
         if (termOffset > 0)
         {
             newPosition = (position - currentTail) + termOffset;
         }
         else if (termOffset == TermAppender.TRIPPED)
         {
             final int nextIndex = nextPartitionIndex(index);
-            termAppenders[nextIndex].tailTermId(TermAppender.termId(result) + 1);
-            LogBufferDescriptor.activePartitionIndexOrdered(logMetaDataBuffer, nextIndex);
+            initialiseTailWithTermId(logMetaDataBuffer, nextIndex, termId(result) + 1);
+            activePartitionIndexOrdered(logMetaDataBuffer, nextIndex);
         }
 
         return newPosition;

File: aeron-system-tests/src/test/java/io/aeron/FlowControlStrategiesTest.java
Patch:
@@ -439,7 +439,7 @@ public void shouldRemoveDeadPreferredReceiverWithPreferredMulticastFlowControlSt
         final int numMessagesToSend = NUM_MESSAGES_PER_TERM * 3;
         int numMessagesLeftToSend = numMessagesToSend;
         int numFragmentsReadFromA = 0, numFragmentsReadFromB = 0;
-        boolean isBclosed = false;
+        boolean isBClosed = false;
 
         driverBContext.imageLivenessTimeoutNs(TimeUnit.MILLISECONDS.toNanos(500));
         driverAContext.multicastFlowControlSupplier(
@@ -475,10 +475,10 @@ public void shouldRemoveDeadPreferredReceiverWithPreferredMulticastFlowControlSt
             {
                 numFragmentsReadFromB += subscriptionB.poll(fragmentHandlerB, 10);
             }
-            else if (!isBclosed)
+            else if (!isBClosed)
             {
                 subscriptionB.close();
-                isBclosed = true;
+                isBClosed = true;
             }
         }
 

File: aeron-archiver/src/main/java/io/aeron/archiver/RecordingFragmentReader.java
Patch:
@@ -99,7 +99,9 @@ private RecordingFragmentReader(
 
         final long fromPosition = position == NULL_POSITION ? joinPosition : position;
         segmentFileIndex = segmentFileIndex(joinPosition, fromPosition, segmentFileLength);
-        final long recordingOffset = fromPosition & (segmentFileLength - 1);
+        final long initialRecordingTermPosition = (joinPosition / termBufferLength) * termBufferLength;
+        final long recordingOffset = (fromPosition - initialRecordingTermPosition)
+            & (segmentFileLength - 1);
         openRecordingFile();
 
         recordingTermStartOffset = (int)(recordingOffset - (recordingOffset & (termBufferLength - 1)));

File: aeron-archiver/src/main/java/io/aeron/archiver/RecordingSession.java
Patch:
@@ -153,7 +153,7 @@ private int record()
                     recordingWriter.endPosition());
             }
 
-            if (image.isClosed())
+            if (image.isClosed() || recordingWriter.isClosed())
             {
                 state = State.INACTIVE;
             }

File: aeron-client/src/main/java/io/aeron/CommonContext.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron;
 
 import org.agrona.IoUtil;
+import org.agrona.SystemUtil;
 import org.agrona.concurrent.AtomicBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.errors.ErrorLogReader;
@@ -154,7 +155,7 @@ public class CommonContext implements AutoCloseable
     {
         String baseDirName = null;
 
-        if ("Linux".equalsIgnoreCase(System.getProperty("os.name")))
+        if (SystemUtil.osName().contains("linux"))
         {
             final File devShmDir = new File("/dev/shm");
 

File: aeron-archiver/src/main/java/io/aeron/archiver/Archiver.java
Patch:
@@ -290,7 +290,7 @@ public Context(final Aeron.Context clientContext)
             forceDataWrites(Configuration.forceWrites());
             threadingMode(Configuration.threadingMode());
             maxConcurrentRecordings(Configuration.maxConcurrentRecordings());
-            maxConcurrentRecordings(Configuration.maxConcurrentReplays());
+            maxConcurrentReplays(Configuration.maxConcurrentReplays());
         }
 
         void conclude()

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -195,10 +195,11 @@ public void close()
             {
                 conductorInvoker.close();
             }
+
+            ctx.close();
         }
         finally
         {
-            ctx.close();
             clientLock.unlock();
         }
     }

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -149,6 +149,8 @@ public static Aeron connect(final Context ctx)
             final Aeron aeron = new Aeron(ctx);
             if (ctx.useConductorAgentInvoker())
             {
+                aeron.conductorInvoker.start();
+
                 return aeron;
             }
 

File: aeron-client/src/main/java/io/aeron/Aeron.java
Patch:
@@ -41,6 +41,9 @@
  * Use an {@link Aeron.Context} to configure the Aeron object.
  * <p>
  * A client application requires only one Aeron object per Media Driver.
+ * <p>
+ * <b>Note:</b> If {@link Aeron.Context#errorHandler(ErrorHandler)} is not set and a {@link DriverTimeoutException}
+ * occurs then the process will face the wraith of {@link System#exit(int)}. See {@link #DEFAULT_ERROR_HANDLER}.
  */
 public final class Aeron implements AutoCloseable
 {

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiverSystemTest.java
Patch:
@@ -183,7 +183,7 @@ public void onStart(
 
             waitFor(() -> client.pollEvents(new FailRecordingEventsListener()
             {
-                public void onStop(final long rId, long lastPosition)
+                public void onStop(final long rId, final long lastPosition)
                 {
                     assertThat(rId, is(recordingId));
                 }

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiverSystemTest.java
Patch:
@@ -183,7 +183,7 @@ public void onStart(
 
             waitFor(() -> client.pollEvents(new FailRecordingEventsListener()
             {
-                public void onStop(final long rId)
+                public void onStop(final long rId, long lastPosition)
                 {
                     assertThat(rId, is(recordingId));
                 }

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -71,7 +71,7 @@ public SendChannelEndpoint(
         UdpDestinationTracker destinationTracker = null;
         if (udpChannel.hasExplicitControl())
         {
-            final String mode = udpChannel.aeronUri().get(CommonContext.MDC_CONTROL_MODE);
+            final String mode = udpChannel.aeronUri().get(CommonContext.MDC_CONTROL_MODE_PARAM_NAME);
             if (CommonContext.MDC_CONTROL_MODE_MANUAL.equals(mode))
             {
                 destinationTracker = new UdpDestinationTracker(this::presend);

File: aeron-archiver/src/main/java/io/aeron/archiver/Archiver.java
Patch:
@@ -159,8 +159,8 @@ public static class Context
         private Supplier<IdleStrategy> idleStrategySupplier;
         private EpochClock epochClock;
         private int segmentFileLength = 128 * 1024 * 1024;
-        private boolean forceMetadataUpdates = true;
-        private boolean forceWrites = true;
+        private boolean forceMetadataUpdates = false;
+        private boolean forceWrites = false;
         private ArchiverThreadingMode threadingMode = ArchiverThreadingMode.SHARED;
         private ThreadFactory threadFactory = Thread::new;
 

File: aeron-client/src/test/java/io/aeron/ClientConductorTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.nio.channels.FileChannel;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
-import java.util.function.Function;
+import java.util.function.ToIntFunction;
 
 import static java.lang.Boolean.TRUE;
 import static java.nio.ByteBuffer.allocateDirect;
@@ -548,12 +548,12 @@ public void shouldTimeoutInterServiceIfTooLongBetweenDoWorkCalls() throws Except
     }
 
     private void whenReceiveBroadcastOnMessage(
-        final int msgTypeId, final MutableDirectBuffer buffer, final Function<MutableDirectBuffer, Integer> filler)
+        final int msgTypeId, final MutableDirectBuffer buffer, final ToIntFunction<MutableDirectBuffer> filler)
     {
         doAnswer(
             (invocation) ->
             {
-                final int length = filler.apply(buffer);
+                final int length = filler.applyAsInt(buffer);
                 conductor.driverListenerAdapter().onMessage(msgTypeId, buffer, 0, length);
 
                 return 1;

File: aeron-archiver/src/test/java/io/aeron/archiver/workloads/ArchiveReplayLoadTest.java
Patch:
@@ -162,7 +162,7 @@ public void replay() throws IOException, InterruptedException
             final long requestStopCorrelationId = this.correlationId++;
             waitFor(() -> client.stopRecording(recordingId, requestStopCorrelationId));
             waitForOk(client, reply, requestStopCorrelationId);
-            final long duration = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(TEST_DURATION_SEC);;
+            final long duration = System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(TEST_DURATION_SEC);
             int i = 0;
             while (System.currentTimeMillis() < duration)
             {

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiveAndReplaySystemTest.java
Patch:
@@ -182,7 +182,6 @@ public void after() throws Exception
         driverCtx.deleteAeronDirectory();
     }
 
-    @Ignore
     @Test(timeout = 10000)
     public void recordAndReplay() throws IOException, InterruptedException
     {

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -208,7 +208,7 @@ public void onStatusMessage(
 
         if (null != multiDestinationTracker)
         {
-            multiDestinationTracker.destinationActivity(msg.receiverId(), srcAddress);
+            multiDestinationTracker.destinationActivity(msg, srcAddress);
 
             if (0 == msg.sessionId() && 0 == msg.streamId() && SEND_SETUP_FLAG == (msg.flags() & SEND_SETUP_FLAG))
             {

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpDestinationTracker.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver.media;
 
+import io.aeron.protocol.StatusMessageFlyweight;
 import org.agrona.LangUtil;
 import org.agrona.collections.ArrayListUtil;
 import org.agrona.concurrent.NanoClock;
@@ -97,13 +98,14 @@ public int sendToDestinations(final DatagramChannel sendDatagramChannel, final B
         return minByteSent;
     }
 
-    public void destinationActivity(final long receiverId, final InetSocketAddress destAddress)
+    public void destinationActivity(final StatusMessageFlyweight msg, final InetSocketAddress destAddress)
     {
         if (destinationTimeoutNs > 0)
         {
             final ArrayList<Destination> destinationList = this.destinationList;
             final long nowNs = nanoClock.nanoTime();
             boolean isExisting = false;
+            final long receiverId = msg.receiverId();
 
             for (int i = 0, size = destinationList.size(); i < size; i++)
             {

File: aeron-driver/src/main/java/io/aeron/driver/status/SystemCounterDescriptor.java
Patch:
@@ -16,8 +16,7 @@
 package io.aeron.driver.status;
 
 import org.agrona.collections.Int2ObjectHashMap;
-import org.agrona.concurrent.status.AtomicCounter;
-import org.agrona.concurrent.status.CountersManager;
+import org.agrona.concurrent.status.*;
 
 /**
  * System wide counters for monitoring. These are separate from counters used for position tracking on streams.
@@ -49,7 +48,7 @@ public enum SystemCounterDescriptor
     CONTROLLABLE_IDLE_STRATEGY(22, "ControllableIdleStrategy status"),
     LOSS_GAP_FILLS(23, "Loss gap fills");
     /**
-     * All system counters have the same type id, i.e. system counters are the same type. Others types can exist.
+     * All system counters have the same type id, i.e. system counters are the same type. Other types can exist.
      */
     public static final int SYSTEM_COUNTER_TYPE_ID = 0;
 

File: aeron-client/src/main/java/io/aeron/ExclusivePublication.java
Patch:
@@ -16,8 +16,7 @@
 package io.aeron;
 
 import io.aeron.logbuffer.*;
-import org.agrona.DirectBuffer;
-import org.agrona.ManagedResource;
+import org.agrona.*;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.ReadablePosition;
 
@@ -389,7 +388,6 @@ else if (conductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuf
      * available.
      * <p>
      * <b>Note:</b> This method can only be used for message lengths less than MTU length minus header.
-     * <p>
      * <pre>{@code
      *     final ExclusiveBufferClaim bufferClaim = new ExclusiveBufferClaim();
      *

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -16,8 +16,7 @@
 package io.aeron;
 
 import io.aeron.logbuffer.*;
-import org.agrona.DirectBuffer;
-import org.agrona.ManagedResource;
+import org.agrona.*;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.agrona.concurrent.status.ReadablePosition;
 
@@ -373,7 +372,6 @@ else if (conductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuf
      * Once the message has been written then {@link BufferClaim#commit()} should be called thus making it available.
      * <p>
      * <b>Note:</b> This method can only be used for message lengths less than MTU length minus header.
-     * <p>
      * <pre>{@code
      *     final BufferClaim bufferClaim = new BufferClaim(); // Can be stored and reused to avoid allocation
      *

File: aeron-client/src/main/java/io/aeron/command/ErrorResponseFlyweight.java
Patch:
@@ -16,12 +16,10 @@
 package io.aeron.command;
 
 import io.aeron.ErrorCode;
-import org.agrona.BitUtil;
-import org.agrona.MutableDirectBuffer;
+import org.agrona.*;
 
 /**
  * Control message flyweight for any errors sent from driver to clients
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/command/ImageBuffersReadyFlyweight.java
Patch:
@@ -26,7 +26,6 @@
  * NOTE: Layout should be SBE compliant
  *
  * @see ControlProtocolEvents
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/command/ImageMessageFlyweight.java
Patch:
@@ -21,7 +21,6 @@
 
 /**
  * Control message flyweight for any message that needs to represent a connection
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/command/PublicationBuffersReadyFlyweight.java
Patch:
@@ -24,7 +24,6 @@
  * Message to denote that new buffers have been setup for a publication.
  *
  * @see ControlProtocolEvents
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/command/PublicationMessageFlyweight.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * Control message for adding or removing a publication
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/command/RemoveMessageFlyweight.java
Patch:
@@ -19,7 +19,6 @@
 
 /**
  * Control message for removing a Publication or Subscription.
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/command/SubscriptionMessageFlyweight.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * Control message for adding or removing a subscription.
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/logbuffer/FrameDescriptor.java
Patch:
@@ -15,8 +15,7 @@
  */
 package io.aeron.logbuffer;
 
-import io.aeron.protocol.DataHeaderFlyweight;
-import io.aeron.protocol.HeaderFlyweight;
+import io.aeron.protocol.*;
 import org.agrona.concurrent.UnsafeBuffer;
 
 import java.nio.ByteOrder;
@@ -28,7 +27,6 @@
  * <p>
  * All messages are logged in frames that have a minimum header layout as follows plus a reserve then
  * the encoded message follows:
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/logbuffer/TermUnblocker.java
Patch:
@@ -47,7 +47,6 @@ public enum Status
 
     /**
      * Attempt to unblock the current term at the current offset.
-     * <p>
      * <ol>
      * <li>Current position length is &gt; 0, then return</li>
      * <li>Current position length is 0, scan forward by frame alignment until, one of the following:

File: aeron-client/src/main/java/io/aeron/protocol/HeaderFlyweight.java
Patch:
@@ -24,7 +24,6 @@
 
 /**
  * Flyweight for general Aeron network protocol header
- * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-agent/src/main/java/io/aeron/agent/EventConfiguration.java
Patch:
@@ -38,9 +38,9 @@ public class EventConfiguration
     /**
      * Event tags system property name. This is either:
      * <ul>
-     *   <li>A comma separated list of EventCodes to enable</li>
-     *   <li>"all" which enables all the codes</li>
-     *   <li>"admin" which enables the codes specified by {@link #ADMIN_ONLY_EVENT_CODES}</li>
+     * <li>A comma separated list of EventCodes to enable</li>
+     * <li>"all" which enables all the codes</li>
+     * <li>"admin" which enables the codes specified by {@link #ADMIN_ONLY_EVENT_CODES}</li>
      * </ul>
      */
     public static final String ENABLED_EVENT_CODES_PROP_NAME = "aeron.event.log";

File: aeron-agent/src/main/java/io/aeron/agent/EventDissector.java
Patch:
@@ -68,19 +68,19 @@ public static String dissectAsFrame(final EventCode code, final MutableDirectBuf
 
             case HeaderFlyweight.HDR_TYPE_SM:
                 final StatusMessageFlyweight smFrame = SM_HEADER;
-                smFrame.wrap(buffer,  frameOffset, buffer.capacity() - frameOffset);
+                smFrame.wrap(buffer, frameOffset, buffer.capacity() - frameOffset);
                 builder.append(dissect(smFrame));
                 break;
 
             case HeaderFlyweight.HDR_TYPE_NAK:
                 final NakFlyweight nakFrame = NAK_HEADER;
-                nakFrame.wrap(buffer,  frameOffset, buffer.capacity() - frameOffset);
+                nakFrame.wrap(buffer, frameOffset, buffer.capacity() - frameOffset);
                 builder.append(dissect(nakFrame));
                 break;
 
             case HeaderFlyweight.HDR_TYPE_SETUP:
                 final SetupFlyweight setupFrame = SETUP_HEADER;
-                setupFrame.wrap(buffer,  frameOffset, buffer.capacity() - frameOffset);
+                setupFrame.wrap(buffer, frameOffset, buffer.capacity() - frameOffset);
                 builder.append(dissect(setupFrame));
                 break;
 

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiveAndReplaySystemTest.java
Patch:
@@ -295,9 +295,7 @@ public void onRecordingDescriptor(
         }, 1) != 0);
     }
 
-    private int prepAndSendMessages(
-        final ArchiveClient client,
-        final Publication publication)
+    private int prepAndSendMessages(final ArchiveClient client, final Publication publication)
         throws InterruptedException
     {
         final int messageCount = 5000 + rnd.nextInt(10000);

File: aeron-archiver/src/test/java/io/aeron/archiver/RecordingSessionTest.java
Patch:
@@ -168,8 +168,6 @@ public void shouldRecordFragmentsFromImage() throws Exception
 
         assertNotEquals("Expect some work", 0, session.doWork());
 
-
-
         metaData = ArchiveUtil.loadRecordingDescriptor(recordingMetaFile);
 
         assertEquals(42L, metaData.startTime());

File: aeron-archiver/src/test/java/io/aeron/archiver/workloads/ArchiveRecordingLoadTest.java
Patch:
@@ -262,7 +262,7 @@ private void offer(
         final UnsafeBuffer buffer,
         final int length)
     {
-        final long limit = System.currentTimeMillis() + (long) TestUtil.TIMEOUT;
+        final long limit = System.currentTimeMillis() + (long)TestUtil.TIMEOUT;
         if (publication.offer(buffer, 0, length) < 0)
         {
             slowOffer(publication, buffer, length, limit);

File: aeron-client/src/main/java/io/aeron/BufferBuilder.java
Patch:
@@ -24,10 +24,10 @@
 
 /**
  * Reusable Builder for appending a sequence of buffer fragments which grows internal capacity as needed.
- *
+ * <p>
  * The underlying buffer can be byte[] backed or a direct {@link ByteBuffer} if the isDirect param to the constructor
  * is true.
- *
+ * <p>
  * Similar in concept to {@link StringBuilder}.
  */
 public class BufferBuilder
@@ -157,7 +157,7 @@ public BufferBuilder compact()
      *
      * @param srcBuffer from which to copy.
      * @param srcOffset in the source buffer from which to copy.
-     * @param length in bytes to copy from the source buffer.
+     * @param length    in bytes to copy from the source buffer.
      * @return the builder for fluent API usage.
      */
     public BufferBuilder append(final DirectBuffer srcBuffer, final int srcOffset, final int length)

File: aeron-client/src/main/java/io/aeron/CncFileDescriptor.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Description of the command and control file used between driver and clients
- *
+ * <p>
  * File Layout
  * <pre>
  *  +----------------------------+
@@ -43,7 +43,7 @@
  *  |          Error Log         |
  *  +----------------------------+
  * </pre>
- *
+ * <p>
  * Meta Data Layout (CnC Version 6)
  * <pre>
  *  +----------------------------+

File: aeron-client/src/main/java/io/aeron/ImageControlledFragmentAssembler.java
Patch:
@@ -25,10 +25,10 @@
  * A {@link ControlledFragmentHandler} that sits in a chain-of-responsibility pattern that reassembles fragmented
  * messages so that the next handler in the chain only sees whole messages. This is for a single session on an
  * {@link Image} and not for multiple session {@link Image}s in a {@link Subscription}.
- *
+ * <p>
  * Unfragmented messages are delegated without copy. Fragmented messages are copied to a temporary
  * buffer for reassembly before delegation.
- *
+ * <p>
  * The {@link Header} passed to the delegate on assembling a message will be that of the last fragment.
  *
  * @see Image#controlledPoll(ControlledFragmentHandler, int)

File: aeron-client/src/main/java/io/aeron/ImageFragmentAssembler.java
Patch:
@@ -25,10 +25,10 @@
  * A {@link FragmentHandler} that sits in a chain-of-responsibility pattern that reassembles fragmented messages
  * so that the next handler in the chain only sees whole messages. This is for a single session on an {@link Image}
  * and not for multiple session {@link Image}s in a {@link Subscription}.
- *
+ * <p>
  * Unfragmented messages are delegated without copy. Fragmented messages are copied to a temporary
  * buffer for reassembly before delegation.
- *
+ * <p>
  * The {@link Header} passed to the delegate on assembling a message will be that of the last fragment.
  */
 public class ImageFragmentAssembler implements FragmentHandler
@@ -75,7 +75,7 @@ public ImageFragmentAssembler(
     /**
      * Get the delegate unto which assembled messages are delegated.
      *
-     * @return  the delegate unto which assembled messages are delegated.
+     * @return the delegate unto which assembled messages are delegated.
      */
     public FragmentHandler delegate()
     {

File: aeron-client/src/main/java/io/aeron/LogBuffers.java
Patch:
@@ -56,7 +56,7 @@ public LogBuffers(final String logFileName, final FileChannel.MapMode mapMode)
             if (logLength < Integer.MAX_VALUE)
             {
                 final MappedByteBuffer mappedBuffer = fileChannel.map(mapMode, 0, logLength);
-                mappedByteBuffers = new MappedByteBuffer[]{ mappedBuffer };
+                mappedByteBuffers = new MappedByteBuffer[]{mappedBuffer};
 
                 for (int i = 0; i < PARTITION_COUNT; i++)
                 {

File: aeron-client/src/main/java/io/aeron/ReservedValueSupplier.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Supplies the reserved value field for a data frame header. The returned value will be set in the header as
  * {@link java.nio.ByteOrder#LITTLE_ENDIAN} format.
- *
+ * <p>
  * This will be called as the last action of encoding a data frame right before the length is set. All other fields
  * in the header plus the body of the frame will have been written at the point of supply.
  */

File: aeron-client/src/main/java/io/aeron/logbuffer/FrameDescriptor.java
Patch:
@@ -25,10 +25,10 @@
 
 /**
  * Description of the structure for message framing in a log buffer.
- *
+ * <p>
  * All messages are logged in frames that have a minimum header layout as follows plus a reserve then
  * the encoded message follows:
- *
+ * <p>
  * <pre>
  *   0                   1                   2                   3
  *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
@@ -46,7 +46,7 @@
  * ...                                                              |
  *  +---------------------------------------------------------------+
  * </pre>
- *
+ * <p>
  * The (B)egin and (E)nd flags are used for message fragmentation. R is for reserved bit.
  * Both (B)egin and (E)nd flags are set for a message that does not span frames.
  */

File: aeron-client/src/main/java/io/aeron/logbuffer/Header.java
Patch:
@@ -212,7 +212,7 @@ public byte flags()
 
     /**
      * Get the value stored in the reserve space at the end of a data frame header.
-     *
+     * <p>
      * Note: The value is in {@link ByteOrder#LITTLE_ENDIAN} format.
      *
      * @return the value stored in the reserve space at the end of a data frame header.

File: aeron-client/src/main/java/io/aeron/logbuffer/HeaderWriter.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * Utility for applying a header to a message in a term buffer.
- *
+ * <p>
  * This class is designed to be thread safe to be used across multiple producers and makes the header
  * visible in the correct order for consumers.
  */

File: aeron-client/src/main/java/io/aeron/logbuffer/LogBufferDescriptor.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Layout description for log buffers which contains partitions of terms with associated term meta data,
  * plus ending with overall log meta data.
- *
+ * <p>
  * <pre>
  *  +----------------------------+
  *  |           Term 0           |
@@ -137,7 +137,7 @@ public class LogBufferDescriptor
 
     /**
      * Total length of the log meta data buffer in bytes.
-     *
+     * <p>
      * <pre>
      *   0                   1                   2                   3
      *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/io/aeron/logbuffer/RawBlockHandler.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Function for handling a raw block of fragments from the log that are contained in the underlying file.
- *
+ * <p>
  * If the underlying buffer is to be modified in the callback handler then the file needs to be mapped as
  * {@link java.nio.channels.FileChannel.MapMode#READ_WRITE} via
  * {@link io.aeron.Aeron.Context#imageMapMode(java.nio.channels.FileChannel.MapMode)}.

File: aeron-client/src/main/java/io/aeron/logbuffer/TermGapFiller.java
Patch:
@@ -28,7 +28,7 @@ public class TermGapFiller
 {
     /**
      * Try to gap fill the current term at a given offset if the gap contains no data.
-     *
+     * <p>
      * Note: the gap offset plus gap length must end on a {@link FrameDescriptor#FRAME_ALIGNMENT} boundary.
      *
      * @param logMetaDataBuffer containing the default headers

File: aeron-client/src/main/java/io/aeron/logbuffer/TermGapScanner.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Scans for gaps in the sequence of bytes in a replicated term buffer between the completed rebuild and the
  * high-water-mark. This can be used for detecting loss and generating a NAK message to the source.
- *
+ * <p>
  * <b>Note:</b> This class is threadsafe to be used across multiple threads.
  */
 public class TermGapScanner

File: aeron-client/src/main/java/io/aeron/logbuffer/TermReader.java
Patch:
@@ -24,15 +24,15 @@
 
 /**
  * A term buffer reader.
- *
+ * <p>
  * <b>Note:</b> Reading from the term is thread safe, but each thread needs its own instance of this class.
  */
 public class TermReader
 {
     /**
      * Reads data from a term in a log buffer and updates a passed {@link Position} so progress is not lost in the
      * event of an exception.
-     *
+     * <p>
      * If a fragmentsLimit of 0 or less is passed then at least one read will be attempted.
      *
      * @param termBuffer         to be read for fragments.
@@ -102,7 +102,7 @@ public static int read(
 
     /**
      * Reads data from a term in a log buffer.
-     *
+     * <p>
      * If a fragmentsLimit of 0 or less is passed then at least one read will be attempted.
      * Note: this method has users outside of Aeron
      *

File: aeron-client/src/main/java/io/aeron/logbuffer/TermRebuilder.java
Patch:
@@ -27,7 +27,7 @@ public class TermRebuilder
 {
     /**
      * Insert a packet of frames into the log at the appropriate termOffset as indicated by the term termOffset header.
-     *
+     * <p>
      * If the packet has already been inserted then this is a noop.
      *
      * @param termBuffer into which the packet should be inserted.

File: aeron-client/src/main/java/io/aeron/logbuffer/TermScanner.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Scans a term buffer for an availability range of messages.
- *
+ * <p>
  * This can be used to concurrently read a term buffer which is being appended to.
  */
 public final class TermScanner

File: aeron-client/src/main/java/io/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * HeaderFlyweight for Data Header
- *
+ * <p>
  * <a href="https://github.com/real-logic/Aeron/wiki/Protocol-Specification#data-frame">Data Frame</a>
  */
 public class DataHeaderFlyweight extends HeaderFlyweight

File: aeron-client/src/main/java/io/aeron/protocol/NakFlyweight.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Flyweight for a Nak Packet
- *
+ * <p>
  * <a href="https://github.com/real-logic/Aeron/wiki/Protocol-Specification#data-recovery-via-retransmit-request">
  * Data Recovery</a>
  */

File: aeron-client/src/main/java/io/aeron/protocol/RttMeasurementFlyweight.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Flyweight for an RTT Measurement Packet
- *
+ * <p>
  * <a href="https://github.com/real-logic/Aeron/wiki/Protocol-Specification#rtt-measurement-header">
  * RTT Measurement Header</a>
  */

File: aeron-client/src/test/java/io/aeron/logbuffer/TermAppenderTest.java
Patch:
@@ -163,7 +163,7 @@ public void shouldFragmentMessageOverTwoFrames()
         final int frameLength = headerLength + 1;
         final int requiredCapacity = align(headerLength + 1, FRAME_ALIGNMENT) + MAX_FRAME_LENGTH;
         final UnsafeBuffer buffer = new UnsafeBuffer(new byte[msgLength]);
-        int tail  = 0;
+        int tail = 0;
 
         logMetaDataBuffer.putLong(TERM_TAIL_COUNTER_OFFSET, pack(TERM_ID, tail));
 

File: aeron-client/src/test/java/io/aeron/logbuffer/TermBlockScannerTest.java
Patch:
@@ -120,7 +120,7 @@ public void shouldFailToReadFirstMessageBecauseOfLimit()
         final int offset = 0;
         final int messageLength = 50;
         final int alignedMessageLength = BitUtil.align(messageLength, FRAME_ALIGNMENT);
-        final int limit = alignedMessageLength  - 1;
+        final int limit = alignedMessageLength - 1;
 
         when(termBuffer.getIntVolatile(lengthOffset(offset))).thenReturn(messageLength);
 

File: aeron-client/src/test/java/io/aeron/logbuffer/TermReaderTest.java
Patch:
@@ -40,6 +40,7 @@ public class TermReaderTest
     private final ErrorHandler errorHandler = mock(ErrorHandler.class);
     private final FragmentHandler handler = mock(FragmentHandler.class);
     private final Position subscriberPosition = mock(Position.class);
+
     @Before
     public void setUp()
     {

File: aeron-driver/src/main/java/io/aeron/driver/CongestionControl.java
Patch:
@@ -42,7 +42,7 @@ public interface CongestionControl extends AutoCloseable
     /**
      * Called by {@link DriverConductor} upon execution of {@link PublicationImage#trackRebuild(long, long)} to
      * pass on current status.
-     *
+     * <p>
      * The return value must be packed using {@link CongestionControlUtil#packOutcome(int, boolean)}.
      *
      * @param nowNs                   in nanoseconds

File: aeron-driver/src/main/java/io/aeron/driver/DataPacketDispatcher.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * Handling of dispatching data packets to {@link PublicationImage}s streams.
- *
+ * <p>
  * All methods should be called via {@link Receiver} thread
  */
 public class DataPacketDispatcher implements DataPacketHandler, SetupMessageHandler

File: aeron-driver/src/main/java/io/aeron/driver/FlowControl.java
Patch:
@@ -32,7 +32,7 @@ public interface FlowControl
      * @param senderLimit         the current sender position limit.
      * @param initialTermId       for the term buffers.
      * @param positionBitsToShift in use for the length of each term buffer.
-     * @param nowNs                 current nano clock time (in nanoseconds). {@link System#nanoTime()}
+     * @param nowNs               current nano clock time (in nanoseconds). {@link System#nanoTime()}
      * @return the new position limit to be employed by the sender.
      */
     long onStatusMessage(
@@ -54,7 +54,7 @@ long onStatusMessage(
     /**
      * Perform any maintenance needed by the flow control strategy and return current position
      *
-     * @param nowNs         time in nanoseconds.
+     * @param nowNs       time in nanoseconds.
      * @param senderLimit for the current sender position.
      * @return the position limit to be employed by the sender.
      */

File: aeron-driver/src/main/java/io/aeron/driver/LossDetector.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Detecting and handling of gaps in a message stream.
- *
+ * <p>
  * Each detector only notifies a single run of a gap in a message stream.
  */
 public class LossDetector implements TermGapScanner.GapHandler
@@ -50,7 +50,7 @@ public LossDetector(final FeedbackDelayGenerator delayGenerator, final LossHandl
 
     /**
      * Scan for gaps and handle received data.
-     *
+     * <p>
      * The handler keeps track from scan to scan what is a gap and what must have been repaired.
      *
      * @param termBuffer          to scan

File: aeron-driver/src/main/java/io/aeron/driver/MaxMulticastFlowControl.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Default multicast sender flow control strategy.
- *
+ * <p>
  * Max of right edges.
  * No tracking of receivers.
  */

File: aeron-driver/src/main/java/io/aeron/driver/MinMulticastFlowControl.java
Patch:
@@ -26,9 +26,9 @@
 
 /**
  * Minimum multicast sender flow control strategy.
- *
+ * <p>
  * Flow control is set to minimum of tracked receivers.
- *
+ * <p>
  * Tracking of receivers is done as long as they continue to send Status Messages. Once SMs stop, the receiver tracking
  * for that receiver will timeout after a given number of nanoseconds.
  */

File: aeron-driver/src/main/java/io/aeron/driver/PreferredMulticastFlowControl.java
Patch:
@@ -28,9 +28,9 @@
 
 /**
  * Minimum multicast sender flow control strategy only for preferred members.
- *
+ * <p>
  * Flow control is set to minimum of tracked preferred receivers.
- *
+ * <p>
  * Tracking of preferred receivers is done as long as they continue to send Status Messages. Once SMs stop, the receiver
  * tracking for that receiver will timeout after a given number of nanoseconds.
  */

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -369,9 +369,9 @@ Status status()
 
     /**
      * Set status of the image.
-     *
+     * <p>
      * Set by {@link Receiver} for INIT to ACTIVE to INACTIVE
-     *
+     * <p>
      * Set by {@link DriverConductor} for INACTIVE to LINGER
      *
      * @param status of the image

File: aeron-driver/src/main/java/io/aeron/driver/RetransmitHandler.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Tracking and handling of retransmit request, NAKs, for senders, and receivers.
- *
+ * <p>
  * A max number of retransmits is permitted by {@link Configuration#MAX_RETRANSMITS_DEFAULT}. Additional received NAKs
  * will be ignored if this maximum is reached.
  */
@@ -108,7 +108,7 @@ public void onNak(
 
     /**
      * Called to indicate a retransmission is received that may obviate the need to send one ourselves.
-     *
+     * <p>
      * NOTE: Currently only called from unit tests. Would be used for retransmitting from receivers for NAK suppression
      *
      * @param termId     of the data

File: aeron-driver/src/main/java/io/aeron/driver/Subscribable.java
Patch:
@@ -31,7 +31,7 @@ public interface Subscribable
 
     /**
      * Remove a subscriber identified by its position.
-     *
+     * <p>
      * <b>Note:</b> The {@link Subscribable} is responsible for calling {@link ReadablePosition#close()} on
      * removed positions.
      *

File: aeron-driver/src/main/java/io/aeron/driver/ThreadingMode.java
Patch:
@@ -22,7 +22,7 @@ public enum ThreadingMode
 {
     /**
      * No threads are started in the {@link MediaDriver}.
-     *
+     * <p>
      * All 3 {@link org.agrona.concurrent.Agent}s will be composed a {@link org.agrona.concurrent.CompositeAgent} and
      * made runnable via an {@link org.agrona.concurrent.AgentInvoker} in the {@link MediaDriver.Context}.
      */

File: aeron-driver/src/main/java/io/aeron/driver/buffer/FileMappingConvention.java
Patch:
@@ -21,11 +21,11 @@
 
 /**
  * Encodes the file mapping convention used by the media driver for log buffer backing files.
- *
+ * <p>
  * Root directory is the "aeron.dir"
  * Source publications are under "${aeron.dir}/publications"
  * Rebuilt publications are under "${aeron.dir}/images"
- *
+ * <p>
  * Both publications and images share the same structure of "sessionId/streamId/consumptionTermId".
  */
 class FileMappingConvention

File: aeron-driver/src/main/java/io/aeron/driver/ext/CubicCongestionControlConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public class CubicCongestionControlConfiguration
 
     /**
      * Property name for accounting for TCP behavior in low RTT values after a loss.
-     *
+     * <p>
      * WARNING: Be aware that throughput utilization becomes important. Turning this on may drastically be off the
      * necessary throughput if utilization is low.
      */

File: aeron-driver/src/main/java/io/aeron/driver/uri/AeronUri.java
Patch:
@@ -22,15 +22,15 @@
 
 /**
  * Parser for Aeron URI used for configuring channels. The format is:
- *
+ * <p>
  * <pre>
  * aeron-uri = "aeron:" media [ "?" param *( "|" param ) ]
  * media     = *( "[^?:]" )
  * param     = key "=" value
  * key       = *( "[^=]" )
  * value     = *( "[^|]" )
  * </pre>
- *
+ * <p>
  * Multiple params with the same key are allowed, the last value specified takes precedence.
  */
 public class AeronUri

File: aeron-driver/src/main/java/io/aeron/driver/uri/UriUtil.java
Patch:
@@ -29,7 +29,7 @@ public class UriUtil
      *
      * @param uri         with query string.
      * @param queryParams to be populated.
-     * @param <M> container for the params
+     * @param <M>         container for the params
      * @return the queryParams that has been populated.
      * @throws URISyntaxException if a parsing exception occurs on the query string.
      */

File: aeron-driver/src/test/java/io/aeron/driver/ReceiverTest.java
Patch:
@@ -58,7 +58,7 @@ public class ReceiverTest
     private static final InetSocketAddress SOURCE_ADDRESS = new InetSocketAddress("localhost", 45679);
 
     private static final ReadablePosition POSITION = mock(ReadablePosition.class);
-    private static final ReadablePosition[] POSITIONS = new ReadablePosition[]{ POSITION };
+    private static final ReadablePosition[] POSITIONS = new ReadablePosition[]{POSITION};
 
     private final FeedbackDelayGenerator mockFeedbackDelayGenerator = mock(FeedbackDelayGenerator.class);
     private final DataTransportPoller mockDataTransportPoller = mock(DataTransportPoller.class);

File: aeron-driver/src/test/java/io/aeron/driver/RetransmitHandlerTest.java
Patch:
@@ -44,7 +44,7 @@ public class RetransmitHandlerTest
 {
     private static final int MTU_LENGTH = 1024;
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
-    private static final byte[] DATA = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
+    private static final byte[] DATA = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
     private static final int MESSAGE_LENGTH = DataHeaderFlyweight.HEADER_LENGTH + DATA.length;
     private static final int ALIGNED_FRAME_LENGTH = align(MESSAGE_LENGTH, FrameDescriptor.FRAME_ALIGNMENT);
     private static final int SESSION_ID = 0x5E55101D;

File: aeron-driver/src/test/java/io/aeron/driver/uri/AeronUriTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldAllowReturnDefaultIfParamNotSpecified() throws Exception
         assertThat(uri.get("interface", "192.168.0.0"), is("192.168.0.0"));
     }
 
-    private void assertParseWithParams(final String uriStr, final String...params)
+    private void assertParseWithParams(final String uriStr, final String... params)
     {
         if (params.length % 2 != 0)
         {

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedBufferClaimIpcThroughput.java
Patch:
@@ -158,6 +158,7 @@ public void run()
     public static final class Subscriber implements Runnable, FragmentHandler
     {
         private static final long TOTAL_BYTES_OFFSET;
+
         static
         {
             try

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedExclusiveIpcThroughput.java
Patch:
@@ -152,6 +152,7 @@ public void run()
     public static final class Subscriber implements Runnable, FragmentHandler
     {
         private static final long TOTAL_BYTES_OFFSET;
+
         static
         {
             try

File: aeron-samples/src/main/java/io/aeron/samples/EmbeddedIpcThroughput.java
Patch:
@@ -152,6 +152,7 @@ public void run()
     public static final class Subscriber implements Runnable, FragmentHandler
     {
         private static final long TOTAL_BYTES_OFFSET;
+
         static
         {
             try

File: aeron-samples/src/main/java/io/aeron/samples/Ping.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  * Ping component of Ping-Pong latency test.
- *
+ * <p>
  * Initiates and records times.
  */
 public class Ping

File: aeron-samples/src/main/java/io/aeron/samples/Pong.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * Pong component of Ping-Pong.
- *
+ * <p>
  * Echoes back messages
  */
 public class Pong

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -193,6 +193,7 @@ public int send(final ByteBuffer buffer)
     /*
      * Method used as a hook for logging.
      */
+    @SuppressWarnings("unused")
     protected void presend(final ByteBuffer buffer, final InetSocketAddress address)
     {
     }

File: aeron-archiver/src/main/java/io/aeron/archiver/Archiver.java
Patch:
@@ -127,7 +127,7 @@ void conclude()
 
             if (idleStrategy == null)
             {
-                idleStrategy = new SleepingIdleStrategy(Aeron.IDLE_SLEEP_NS);
+                idleStrategy = new SleepingMillisIdleStrategy(Aeron.IDLE_SLEEP_MS);
             }
 
             if (epochClock == null)

File: aeron-archiver/src/main/java/io/aeron/archiver/ControlRequestAdapter.java
Patch:
@@ -105,7 +105,8 @@ public void onFragment(final DirectBuffer buffer, final int offset, final int le
                     headerDecoder.version());
 
                 listener.onAbortReplay(
-                    abortReplayRequestDecoder.correlationId());
+                    abortReplayRequestDecoder.correlationId(),
+                    abortReplayRequestDecoder.replayId());
                 break;
 
             case ListRecordingsRequestDecoder.TEMPLATE_ID:

File: aeron-archiver/src/main/java/io/aeron/archiver/ControlRequestListener.java
Patch:
@@ -25,7 +25,7 @@ interface ControlRequestListener
 
     void onListRecordings(long correlationId, long fromId, long toId);
 
-    void onAbortReplay(long correlationId);
+    void onAbortReplay(long correlationId, long replyId);
 
     void onStartReplay(
         long correlationId,

File: aeron-archiver/src/main/java/io/aeron/archiver/Recorder.java
Patch:
@@ -76,8 +76,8 @@ private Recorder(final Builder builder)
         if (((termsMask + 1) & termsMask) != 0)
         {
             throw new IllegalArgumentException(
-                "It is assumed the termBufferLength is a power of 2 <= 1GB and that" +
-                    "therefore the number of terms in a file is also a power of 2");
+                "It is assumed the termBufferLength is a power of 2, and that the number of terms" +
+                    "in a file is also a power of 2");
         }
 
         final String recordingMetaFileName = ArchiveUtil.recordingMetaFileName(recordingId);

File: aeron-archiver/src/main/java/io/aeron/archiver/client/ResponseListener.java
Patch:
@@ -15,9 +15,12 @@
  */
 package io.aeron.archiver.client;
 
+import io.aeron.archiver.codecs.ControlResponseCode;
+
 public interface ResponseListener
 {
     void onResponse(
+        ControlResponseCode code,
         String errorMessage,
         long correlationId);
 

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiveAndReplaySystemTest.java
Patch:
@@ -17,9 +17,9 @@
 
 import io.aeron.*;
 import io.aeron.archiver.client.*;
-import io.aeron.archiver.codecs.RecordingDescriptorDecoder;
+import io.aeron.archiver.codecs.*;
 import io.aeron.driver.*;
-import io.aeron.logbuffer.*;
+import io.aeron.logbuffer.Header;
 import io.aeron.protocol.DataHeaderFlyweight;
 import org.agrona.*;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -65,7 +65,7 @@ public void onStop(final long recordingId)
 
     public static class FailResponseListener implements ResponseListener
     {
-        public void onResponse(final String errorMessage, final long correlationId)
+        public void onResponse(final ControlResponseCode code, final String errorMessage, final long correlationId)
         {
             fail();
         }

File: aeron-archiver/src/main/java/io/aeron/archiver/Recorder.java
Patch:
@@ -115,7 +115,7 @@ private Recorder(final Builder builder)
     }
 
     static void initDescriptor(
-        final RecordingDescriptorEncoder descriptor,
+        final RecordingDescriptorEncoder recordingDescriptorEncoder,
         final long recordingId,
         final int termBufferLength,
         final int segmentFileLength,
@@ -127,7 +127,7 @@ static void initDescriptor(
         final String channel,
         final int streamId)
     {
-        descriptor
+        recordingDescriptorEncoder
             .recordingId(recordingId)
             .termBufferLength(termBufferLength)
             .startTime(-1)
@@ -225,7 +225,6 @@ private void prepareRecording(
             newRecordingSegmentFile();
 
             segmentPosition = termOffset;
-            metaDataEncoder.joiningPosition(termOffset);
             recordingFileChannel.position(segmentPosition);
             metaDataEncoder.startTime(epochClock.time());
         }

File: aeron-archiver/src/test/java/io/aeron/archiver/ReplaySessionTest.java
Patch:
@@ -118,7 +118,6 @@ public void teardown()
         IoUtil.delete(archiveDir, false);
     }
 
-    @Ignore
     @Test
     public void shouldReplayDataFromFile()
     {

File: aeron-archiver/src/main/java/io/aeron/archiver/ClientSessionProxy.java
Patch:
@@ -34,15 +34,15 @@ class ClientSessionProxy
         this.idleStrategy = idleStrategy;
     }
 
-    void sendResponse(final ExclusivePublication reply, final String err, final long correlationId)
+    void sendResponse(final ExclusivePublication reply, final String errorMessage, final long correlationId)
     {
         responseEncoder
             .wrapAndApplyHeader(buffer, 0, messageHeaderEncoder)
             .correlationId(correlationId);
 
-        if (!Strings.isEmpty(err))
+        if (!Strings.isEmpty(errorMessage))
         {
-            responseEncoder.err(err);
+            responseEncoder.errorMessage(errorMessage);
         }
 
         final int length = HEADER_LENGTH + responseEncoder.encodedLength();

File: aeron-archiver/src/main/java/io/aeron/archiver/client/ArchiveClient.java
Patch:
@@ -206,7 +206,7 @@ private void handleArchiverResponse(
             messageHeaderDecoder.version());
 
         responseListener.onResponse(
-            archiverResponseDecoder.err(),
+            archiverResponseDecoder.errorMessage(),
             archiverResponseDecoder.correlationId());
     }
 

File: aeron-archiver/src/main/java/io/aeron/archiver/client/ResponseListener.java
Patch:
@@ -18,7 +18,7 @@
 public interface ResponseListener
 {
     void onResponse(
-        String err,
+        String errorMessage,
         long correlationId);
 
     void onReplayStarted(

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiveAndReplaySystemTest.java
Patch:
@@ -71,7 +71,7 @@ public void onStop(final int recordingId)
 
     public static class FailResponseListener implements ResponseListener
     {
-        public void onResponse(final String err, final long correlationId)
+        public void onResponse(final String errorMessage, final long correlationId)
         {
             fail();
         }

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -94,12 +94,10 @@ public int doWork()
         {
             workDone += replay();
         }
-
         else if (state == State.INIT)
         {
             workDone += init();
         }
-
         else if (state == State.LINGER)
         {
             workDone += linger();

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveConductor.java
Patch:
@@ -130,7 +130,6 @@ public void onClose()
         CloseHelper.close(catalog);
     }
 
-
     void removeReplaySession(final int sessionId)
     {
         replaySession2IdMap.remove(sessionId);

File: aeron-archiver/src/main/java/io/aeron/archiver/ClientSessionProxy.java
Patch:
@@ -13,7 +13,6 @@
  * limitations under the License.
  *
  */
-
 package io.aeron.archiver;
 
 import io.aeron.*;

File: aeron-archiver/src/main/java/io/aeron/archiver/NotificationsProxy.java
Patch:
@@ -36,7 +36,6 @@ class NotificationsProxy
         this.recordingNotifications = recordingNotifications;
     }
 
-
     int recordingStarted(
         final int recordingId,
         final String source,

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -28,7 +28,8 @@
  * The {@link ArchiveConductor} will initiate a session on receiving a ReplayRequest
  * (see {@link io.aeron.archiver.codecs.ReplayRequestDecoder}). The session will:
  * <ul>
- * <li>Validate request parameters and respond with error, or OK message(see {@link ControlResponseDecoder})</li>
+ * <li>Validate request parameters and respond with error,
+ *     or OK message(see {@link io.aeron.archiver.codecs.ControlResponseDecoder})</li>
  * <li>Stream archived data into the replay {@link Publication}</li>
  * </ul>
  */

File: aeron-archiver/src/main/java/io/aeron/archiver/client/ArchiveClient.java
Patch:
@@ -22,7 +22,6 @@
 
 public class ArchiveClient
 {
-
     private static final int HEADER_LENGTH = MessageHeaderEncoder.ENCODED_LENGTH;
 
     private final MutableDirectBuffer buffer = new ExpandableArrayBuffer();
@@ -158,10 +157,8 @@ public int pollResponses(
                         break;
 
                     case ReplayAbortedDecoder.TEMPLATE_ID:
-                    {
                         handleReplayAborted(responseListener, buffer, offset);
                         break;
-                    }
 
                     case ReplayStartedDecoder.TEMPLATE_ID:
                         handleReplayStarted(responseListener, buffer, offset);

File: aeron-archiver/src/main/java/io/aeron/archiver/RecordingChunkReader.java
Patch:
@@ -22,7 +22,7 @@
 import java.nio.channels.FileChannel;
 import java.util.Objects;
 
-import static io.aeron.archiver.ArchiveUtil.offsetInArchivedFile;
+import static io.aeron.archiver.ArchiveUtil.offsetInRecordedFile;
 import static io.aeron.archiver.ArchiveUtil.recordingDataFileIndex;
 import static java.lang.Math.min;
 import static java.nio.channels.FileChannel.MapMode.READ_ONLY;
@@ -65,7 +65,7 @@ class RecordingChunkReader implements AutoCloseable
 
         transmitted = 0;
         fileIndex = recordingDataFileIndex(initialTermId, termBufferLength, termId, archiveFileSize);
-        final int archiveOffset = offsetInArchivedFile(
+        final int archiveOffset = offsetInRecordedFile(
             termOffset,
             termId,
             initialTermId,

File: aeron-archiver/src/main/java/io/aeron/archiver/RecordingFragmentReader.java
Patch:
@@ -98,7 +98,7 @@ class RecordingFragmentReader implements AutoCloseable
     private void initCursorState() throws IOException
     {
         recordingFileIndex = recordingDataFileIndex(initialTermId, termBufferLength, fromTermId, recordingFileLength);
-        final int archiveOffset = offsetInArchivedFile(
+        final int archiveOffset = offsetInRecordedFile(
             fromTermOffset, fromTermId, initialTermId, termBufferLength, recordingFileLength);
         recordingTermStartOffset = archiveOffset - fromTermOffset;
         openRecordingFile();

File: aeron-archiver/src/test/java/io/aeron/archiver/RecordingSessionTest.java
Patch:
@@ -53,7 +53,7 @@ public class RecordingSessionTest
     private final ClientProxy proxy;
 
     private final Image image;
-    private final RecordingIndex index;
+    private final ArchiveIndex index;
 
     private FileChannel mockLogBufferChannel;
     private UnsafeBuffer mockLogBufferMapped;
@@ -62,7 +62,7 @@ public class RecordingSessionTest
     public RecordingSessionTest() throws IOException
     {
         proxy = mock(ClientProxy.class);
-        index = mock(RecordingIndex.class);
+        index = mock(ArchiveIndex.class);
         when(
             index.addNewRecording(
                 eq(source),
@@ -123,7 +123,7 @@ public void shouldRecordFragmentsFromImage() throws Exception
             proxy, index, image, builder);
 
         // pre-init
-        assertEquals(RecordingIndex.NULL_STREAM_INDEX, session.recordingId());
+        assertEquals(ArchiveIndex.NULL_STREAM_INDEX, session.recordingId());
 
         session.doWork();
 

File: aeron-client/src/main/java/io/aeron/ClientConductor.java
Patch:
@@ -352,8 +352,6 @@ public void onAvailableImage(
                             sourceIdentity,
                             correlationId);
 
-                        subscription.addImage(image);
-
                         try
                         {
                             final AvailableImageHandler handler = subscription.availableImageHandler();
@@ -366,6 +364,8 @@ public void onAvailableImage(
                         {
                             errorHandler.onError(ex);
                         }
+
+                        subscription.addImage(image);
                     }
                 }
             });

File: aeron-driver/src/main/java/io/aeron/driver/ext/CubicCongestionControl.java
Patch:
@@ -158,7 +158,7 @@ public void onRttMeasurement(final long nowNs, final long rttInNanos, final Inet
 
     public long onTrackRebuild(
         final long nowNs,
-        final long newConsumptiopnPosition,
+        final long newConsumptionPosition,
         final long lastSmPosition,
         final long hwmPosition,
         final long startingRebuildPosition,

File: aeron-driver/src/main/java/io/aeron/driver/status/SubscriberPos.java
Patch:
@@ -50,6 +50,6 @@ public static UnsafeBufferPosition allocate(
             sessionId,
             streamId,
             channel,
-            joiningPosition > 0 ? ("@" + joiningPosition) : "@0");
+            joiningPosition == 0 ? "@0" : ("@" + joiningPosition));
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -126,7 +126,7 @@ public void openDatagramChannel(final AtomicCounter statusIndicator)
         catch (final IOException ex)
         {
             statusIndicator.setOrdered(ChannelEndpointStatus.ERRORED);
-            throw new RuntimeException("Channel: " + udpChannel.originalUriString(), ex);
+            throw new RuntimeException("Erroneous channel: " + udpChannel.originalUriString(), ex);
         }
     }
 

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveIndex.java
Patch:
@@ -58,7 +58,7 @@ class ArchiveIndex implements AutoCloseable
         try
         {
             final File indexFile = new File(archiveFolder, INDEX_FILE_NAME);
-            channel = FileChannel.open(indexFile.toPath(), CREATE, READ, WRITE, DSYNC);
+            channel = FileChannel.open(indexFile.toPath(), CREATE, READ, WRITE);
             final ArchiveDescriptorDecoder decoder = new ArchiveDescriptorDecoder();
 
             while (channel.read(byteBuffer) != -1)

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveStreamWriter.java
Patch:
@@ -134,7 +134,7 @@ private void newArchiveFile(final int termId)
 
         try
         {
-            archiveFile = new RandomAccessFile(file, "rwd");
+            archiveFile = new RandomAccessFile(file, "rw");
             archiveFile.setLength(ArchiveFileUtil.ARCHIVE_FILE_SIZE);
             archiveFileChannel = archiveFile.getChannel();
         }

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveIndex.java
Patch:
@@ -157,7 +157,7 @@ int addNewStreamInstance(
 
     public void close()
     {
-        CloseHelper.quietClose(archiveIndexFileChannel);
+        CloseHelper.close(archiveIndexFileChannel);
     }
 
     boolean readArchiveDescriptor(final int streamInstanceId, final ByteBuffer buffer)

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveStreamChunkReader.java
Patch:
@@ -166,7 +166,7 @@ public void close()
     private void closeResources()
     {
         IoUtil.unmap(termBuffer.byteBuffer());
-        CloseHelper.quietClose(dataChannel);
+        CloseHelper.close(dataChannel);
     }
 
     interface ChunkHandler

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveStreamFragmentReader.java
Patch:
@@ -198,7 +198,7 @@ private void unmapTermBuffer()
     private void closeArchiveFile()
     {
         unmapTermBuffer();
-        CloseHelper.quietClose(currentDataChannel);
+        CloseHelper.close(currentDataChannel);
     }
 
     private void openArchiveFile() throws IOException

File: aeron-archiver/src/main/java/io/aeron/archiver/ListDescriptorsSession.java
Patch:
@@ -123,7 +123,7 @@ public int doWork()
 
     private int close()
     {
-        CloseHelper.quietClose(reply);
+        CloseHelper.close(reply);
         state = State.DONE;
 
         return 1;

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -266,9 +266,9 @@ private int replay()
 
     private int close()
     {
-        CloseHelper.quietClose(replay);
-        CloseHelper.quietClose(control);
-        CloseHelper.quietClose(cursor);
+        CloseHelper.close(replay);
+        CloseHelper.close(control);
+        CloseHelper.close(cursor);
         this.state = State.DONE;
 
         return 1;

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchiveAndReplaySystemTest.java
Patch:
@@ -104,9 +104,9 @@ public void setUp() throws Exception
     @After
     public void closeEverything() throws Exception
     {
-        CloseHelper.quietClose(publishingClient);
-        CloseHelper.quietClose(archiver);
-        CloseHelper.quietClose(driver);
+        CloseHelper.close(publishingClient);
+        CloseHelper.close(archiver);
+        CloseHelper.close(driver);
 
         if (null != archiveFolder)
         {

File: aeron-archiver/src/test/java/io/aeron/archiver/ArchivingSessionTest.java
Patch:
@@ -100,7 +100,7 @@ public void setupMockTermBuff() throws IOException
     public void teardownMockTermBuff()
     {
         IoUtil.unmap(mockLogBufferMapped.byteBuffer());
-        CloseHelper.quietClose(mockLogBufferChannel);
+        CloseHelper.close(mockLogBufferChannel);
         IoUtil.delete(tempFolderForTest, false);
         IoUtil.delete(termFile, false);
     }

File: aeron-driver/src/main/java/io/aeron/driver/DriverConductor.java
Patch:
@@ -132,8 +132,6 @@ public DriverConductor(final Context ctx)
 
     public void onClose()
     {
-        sendChannelEndpointByChannelMap.values().forEach(SendChannelEndpoint::close);
-        receiveChannelEndpointByChannelMap.values().forEach(ReceiveChannelEndpoint::close);
         networkPublications.forEach(NetworkPublication::close);
         publicationImages.forEach(PublicationImage::close);
         ipcPublications.forEach(IpcPublication::close);

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -163,7 +163,7 @@ private void checkPendingSetupMessages(final long nowNs)
                 else if (pending.shouldElicitSetupMessage())
                 {
                     pending.channelEndpoint().sendSetupElicitingStatusMessage(
-                            pending.controlAddress(), pending.sessionId(), pending.streamId());
+                        pending.controlAddress(), pending.sessionId(), pending.streamId());
                     pending.timeOfStatusMessage(nowNs);
                 }
             }

File: aeron-client/src/main/java/io/aeron/AvailableImageHandler.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron;
 
 /**
- * Interface for delivery of new image events to a {@link Aeron} instance.
+ * Interface for notification of new {@link Image}s becoming available under a {@link Subscription}.
  */
 @FunctionalInterface
 public interface AvailableImageHandler

File: aeron-client/src/main/java/io/aeron/UnavailableImageHandler.java
Patch:
@@ -16,13 +16,13 @@
 package io.aeron;
 
 /**
- * Interface for delivery of inactive image events to a {@link Subscription}.
+ * Interface for delivery of inactive image notification to a {@link Subscription}.
  */
 @FunctionalInterface
 public interface UnavailableImageHandler
 {
     /**
-     * Method called by Aeron to deliver notification that an Image is no longer available for polling.
+     * Method called by Aeron to deliver notification that an {@link Image} is no longer available for polling.
      *
      * @param image the image that has become unavailable.
      */

File: aeron-archiver/src/main/java/io/aeron/archiver/Archiver.java
Patch:
@@ -125,7 +125,7 @@ void conclude()
             }
             if (idleStrategy == null)
             {
-                idleStrategy = clientContext.idleStrategy();
+                idleStrategy = new SleepingIdleStrategy(Aeron.IDLE_SLEEP_NS);
             }
             if (epochClock == null)
             {

File: aeron-client/src/test/java/io/aeron/ImageTest.java
Patch:
@@ -69,7 +69,6 @@ public class ImageTest
     private final Subscription subscription = mock(Subscription.class);
 
     private UnsafeBuffer[] termBuffers = new UnsafeBuffer[PARTITION_COUNT];
-    private UnsafeBuffer logMetaDataBuffer;
 
     @Before
     public void setUp()
@@ -81,7 +80,7 @@ public void setUp()
             termBuffers[i] = new UnsafeBuffer(allocateDirect(TERM_BUFFER_LENGTH));
         }
 
-        logMetaDataBuffer = new UnsafeBuffer(allocateDirect(LOG_META_DATA_LENGTH));
+        final UnsafeBuffer logMetaDataBuffer = new UnsafeBuffer(allocateDirect(LOG_META_DATA_LENGTH));
 
         when(logBuffers.termBuffers()).thenReturn(termBuffers);
         when(logBuffers.termLength()).thenReturn(TERM_BUFFER_LENGTH);

File: aeron-driver/src/main/java/io/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -203,8 +203,7 @@ public void onStatusMessage(
         final int length,
         final InetSocketAddress srcAddress)
     {
-        final NetworkPublication publication = publicationBySessionAndStreamId.get(
-            msg.sessionId(), msg.streamId());
+        final NetworkPublication publication = publicationBySessionAndStreamId.get(msg.sessionId(), msg.streamId());
 
         if (null != multiDestinationTracker)
         {

File: aeron-archiver/src/main/java/io/aeron/archiver/StreamInstance.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.Objects;
 
+// TODO: maybe remove
 class StreamInstance
 {
     private final String source;

File: aeron-archiver/src/main/java/io/aeron/archiver/StreamInstanceArchiveFragmentReader.java
Patch:
@@ -17,7 +17,7 @@
 package io.aeron.archiver;
 
 
-import io.aeron.archiver.messages.ArchiveMetaFileFormatDecoder;
+import io.aeron.archiver.messages.ArchiveDescriptorDecoder;
 import io.aeron.logbuffer.*;
 import io.aeron.protocol.DataHeaderFlyweight;
 import org.agrona.*;
@@ -54,7 +54,7 @@ class StreamInstanceArchiveFragmentReader
         this.archiveFolder = archiveFolder;
         final String archiveMetaFileName = ArchiveFileUtil.archiveMetaFileName(streamInstanceId);
         final File archiveMetaFile = new File(archiveFolder, archiveMetaFileName);
-        final ArchiveMetaFileFormatDecoder metaDecoder =
+        final ArchiveDescriptorDecoder metaDecoder =
             ArchiveFileUtil.archiveMetaFileFormatDecoder(archiveMetaFile);
         termBufferLength = metaDecoder.termBufferLength();
         initialTermId = metaDecoder.initialTermId();
@@ -82,7 +82,7 @@ class StreamInstanceArchiveFragmentReader
         this.length = length;
         final String archiveMetaFileName = ArchiveFileUtil.archiveMetaFileName(streamInstanceId);
         final File archiveMetaFile = new File(archiveFolder, archiveMetaFileName);
-        final ArchiveMetaFileFormatDecoder metaDecoder =
+        final ArchiveDescriptorDecoder metaDecoder =
             ArchiveFileUtil.archiveMetaFileFormatDecoder(archiveMetaFile);
         termBufferLength = metaDecoder.termBufferLength();
         initialTermId = metaDecoder.initialTermId();

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiverConductor.java
Patch:
@@ -148,6 +148,7 @@ public void onClose()
 
         archiverNotifications.close();
         serviceRequests.close();
+        CloseHelper.quietClose(archiveIndex);
     }
 
     private void handleNewImageNotification(final Image image)

File: aeron-archiver/src/main/java/io/aeron/archiver/StreamInstanceArchiveWriter.java
Patch:
@@ -264,7 +264,8 @@ private void writePrologue(
 
         if (archivePosition == ArchiveFileUtil.ARCHIVE_FILE_SIZE)
         {
-            archiveFileChannel.close();
+            CloseHelper.quietClose(archiveFileChannel);
+            CloseHelper.quietClose(archiveFile);
             archivePosition = 0;
             // TODO: allocate ahead files, will also give early indication to low storage
             newArchiveFile(termId + 1);

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -305,7 +305,6 @@ else if (result == Publication.CLOSED || result == Publication.NOT_CONNECTED)
 
     private int close()
     {
-        System.out.println("ReplaySession.close");
         // TODO: how do we gracefully timeout or terminate this? need to add a LINGER state etc.
         CloseHelper.quietClose(reply);
         CloseHelper.quietClose(cursor);

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiverConductor.java
Patch:
@@ -252,7 +252,6 @@ private void onReplayRequest(final DirectBuffer buffer, final int offset, final
         replaySessions.add(replaySession);
     }
 
-
     private void onArchiveStartRequest(final DirectBuffer buffer, final int offset)
     {
         archiveStartRequestDecoder.wrap(

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiverWithEmbeddedDriver.java
Patch:
@@ -31,7 +31,7 @@ public static void main(final String[] args) throws Exception
     {
         loadPropertiesFiles(args);
 
-        try (MediaDriver driver = MediaDriver.launch())
+        try (MediaDriver ignore = MediaDriver.launch())
         {
             Archiver.setup();
         }

File: aeron-archiver/src/main/java/io/aeron/archiver/StreamInstance.java
Patch:
@@ -35,7 +35,6 @@ class StreamInstance
         this.streamId = streamId;
     }
 
-
     public String source()
     {
         return source;
@@ -81,6 +80,7 @@ public boolean equals(final Object o)
         {
             return false;
         }
+
         return channel.equals(that.channel);
     }
 

File: aeron-archiver/src/test/java/io/aeron/archiver/ImageArchivingSessionTest.java
Patch:
@@ -156,8 +156,8 @@ public void shouldRecordSingleFragmentFromImage() throws IOException
         final File archiveDataFile = new File(tempFolderForTest,
             archiveDataFileName(session.streamInstanceId(), 0));
         assertTrue(archiveDataFile.exists());
-        final StreamInstanceArchiveFragementReader
-            reader = new StreamInstanceArchiveFragementReader(session.streamInstanceId(), tempFolderForTest);
+        final StreamInstanceArchiveFragmentReader
+            reader = new StreamInstanceArchiveFragmentReader(session.streamInstanceId(), tempFolderForTest);
         final int polled = reader.poll((buffer, offset, length, header) ->
         {
             Assert.assertEquals(100, header.frameLength());

File: aeron-archiver/src/test/java/io/aeron/archiver/ReplaySessionTest.java
Patch:
@@ -112,8 +112,8 @@ public void setup() throws Exception
                 return true;
             }, 1024);
         }
-        final StreamInstanceArchiveFragementReader reader =
-            new StreamInstanceArchiveFragementReader(STREAM_INSTANCE_ID, archiveFolder);
+        final StreamInstanceArchiveFragmentReader reader =
+            new StreamInstanceArchiveFragmentReader(STREAM_INSTANCE_ID, archiveFolder);
 
         final int polled = reader.poll((b, offset, length, h) ->
         {

File: aeron-driver/src/main/java/io/aeron/driver/NetworkPublication.java
Patch:
@@ -559,7 +559,7 @@ private void cleanBuffer(final long publisherLimit)
     public void onTimeEvent(final long timeNs, final DriverConductor conductor)
     {
         if (isUnreferencedAndPotentiallyInactive(timeNs) &&
-            spiesHaveConsumed() &&
+            haveSpiesCaughtUpWithTheSender() &&
             timeNs > (timeOfLastActivity + PUBLICATION_LINGER_NS))
         {
             hasReachedEndOfLife = true;
@@ -587,7 +587,7 @@ public void onTimeEvent(final long timeNs, final DriverConductor conductor)
         }
     }
 
-    private boolean spiesHaveConsumed()
+    private boolean haveSpiesCaughtUpWithTheSender()
     {
         if (hasSpies())
         {

File: aeron-driver/src/main/java/io/aeron/driver/media/ControlTransportPoller.java
Patch:
@@ -135,15 +135,15 @@ private int poll(final SendChannelEndpoint channelEndpoint)
                 switch (frameType(unsafeBuffer, 0))
                 {
                     case HDR_TYPE_NAK:
-                        channelEndpoint.onNakMessage(nakMessage, srcAddress);
+                        channelEndpoint.onNakMessage(nakMessage, unsafeBuffer, byteReceived, srcAddress);
                         break;
 
                     case HDR_TYPE_SM:
-                        channelEndpoint.onStatusMessage(statusMessage, srcAddress);
+                        channelEndpoint.onStatusMessage(statusMessage, unsafeBuffer, byteReceived, srcAddress);
                         break;
 
                     case HDR_TYPE_RTTM:
-                        channelEndpoint.onRttMeasurement(rttMeasurement, srcAddress);
+                        channelEndpoint.onRttMeasurement(rttMeasurement, unsafeBuffer, byteReceived, srcAddress);
                         break;
                 }
             }

File: aeron-driver/src/main/java/io/aeron/driver/media/DataTransportPoller.java
Patch:
@@ -139,11 +139,11 @@ private int poll(final ReceiveChannelEndpoint channelEndpoint)
                         break;
 
                     case HDR_TYPE_SETUP:
-                        channelEndpoint.onSetupMessage(setupMessage, unsafeBuffer, srcAddress);
+                        channelEndpoint.onSetupMessage(setupMessage, unsafeBuffer, length, srcAddress);
                         break;
 
                     case HDR_TYPE_RTTM:
-                        channelEndpoint.onRttMeasurement(rttMeasurement, unsafeBuffer, srcAddress);
+                        channelEndpoint.onRttMeasurement(rttMeasurement, unsafeBuffer, length, srcAddress);
                         break;
                 }
             }

File: aeron-client/src/main/java/io/aeron/ActiveSubscriptions.java
Patch:
@@ -62,6 +62,6 @@ public void close()
             .stream()
             .flatMap(Collection::stream)
             .collect(toList())
-            .forEach(Subscription::close);
+            .forEach(Subscription::release);
     }
 }

File: aeron-archiver/src/main/java/io/aeron/archiver/ArchiveFileUtil.java
Patch:
@@ -76,8 +76,9 @@ static ArchiveMetaFileFormatDecoder archiveMetaFileFormatDecoder(final File meta
         try (RandomAccessFile randomAccessFile = new RandomAccessFile(metaFile, "rw");
              FileChannel metadataFileChannel = randomAccessFile.getChannel();)
         {
-            final MappedByteBuffer metaDataBuffer = metadataFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, 64);
-            return new ArchiveMetaFileFormatDecoder().wrap(new UnsafeBuffer(metaDataBuffer), 0, 64, 0);
+            final MappedByteBuffer metaDataBuffer = metadataFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, 4096);
+            final ArchiveMetaFileFormatDecoder decoder = new ArchiveMetaFileFormatDecoder();
+            return decoder.wrap(new UnsafeBuffer(metaDataBuffer), 0, ArchiveMetaFileFormatDecoder.BLOCK_LENGTH, 0);
         }
     }
 

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -179,6 +179,7 @@ int doWork(final ReplaySession session)
                     }
                     else if (session.channelIndex == ArchiveFileUtil.ARCHIVE_FILE_SIZE)
                     {
+                        session.channelIndex = 0;
                         session.archiveFileIndex++;
                         session.archiveFileRollover();
                     }

File: aeron-archiver/src/test/java/io/aeron/archiver/SystemTest.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.locks.LockSupport;
 
+@Ignore
 public class SystemTest
 {
     private static final boolean DEBUG = false;

File: aeron-archiver/src/main/java/io/aeron/archiver/ReplaySession.java
Patch:
@@ -63,8 +63,8 @@ else if (session.replay.isClosed() || session.control.isClosed())
             int doWork(ReplaySession session)
             {
                 final Publication control = session.control;
-                final String streamInstanceName = session.streamInstance.name();
-                final String archiveMetaFileName = ArchiveFileUtil.archiveMetaFileName(streamInstanceName);
+                final int streamInstanceId = session.archiverConductor.findStreamInstanceId(session.streamInstance);
+                final String archiveMetaFileName = ArchiveFileUtil.archiveMetaFileName(streamInstanceId);
                 final File archiveMetaFile = new File(session.archiverConductor.archiveFolder(), archiveMetaFileName);
                 if (!archiveMetaFile.exists())
                 {
@@ -107,7 +107,7 @@ int doWork(ReplaySession session)
 
 
                 final int termBufferLength = archiveMetaFileFormatDecoder.termBufferLength();
-                final String archiveDataFileName = ArchiveFileUtil.archiveDataFileName(streamInstanceName, initialTermId,
+                final String archiveDataFileName = ArchiveFileUtil.archiveDataFileName(streamInstanceId, initialTermId,
                                                                                        termBufferLength, termId);
                 final File archiveDataFile = new File(session.archiverConductor.archiveFolder(), archiveDataFileName);
 

File: aeron-driver/src/main/java/io/aeron/driver/buffer/MappedRawLog.java
Patch:
@@ -119,7 +119,7 @@ public void close()
 
         if (!logFile.delete())
         {
-            errorLog.record(new IllegalStateException(String.format("could not delete file %s", logFile)));
+            errorLog.record(new IllegalStateException("Unable to delete " + logFile));
         }
     }
 

File: aeron-driver/src/main/java/io/aeron/driver/StaticWindowCongestionControl.java
Patch:
@@ -35,7 +35,6 @@ public StaticWindowCongestionControl(
         ccOutcome = CongestionControlUtil.packOutcome(Math.min(termLength / 2, context.initialWindowLength()), false);
     }
 
-
     public boolean shouldMeasureRtt(final long now)
     {
         return false;
@@ -47,7 +46,7 @@ public void onRttMeasurement(final long now, final long rttInNanos, final InetSo
 
     public long onTrackRebuild(
         final long now,
-        final long newConsumptiopnPosition,
+        final long newConsumptionPosition,
         final long lastSmPosition,
         final long hwmPosition,
         final long startingRebuildPosition,

File: aeron-driver/src/main/java/io/aeron/driver/DefaultCongestionControlSupplier.java
Patch:
@@ -28,6 +28,6 @@ public CongestionControl newInstance(
         NanoClock clock,
         MediaDriver.Context context)
     {
-        return null;
+        return new StaticWindowCongestionControl(udpChannel, streamId, sessionId, termLength, clock, context);
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/Receiver.java
Patch:
@@ -34,7 +34,6 @@
  */
 public class Receiver implements Agent, Consumer<ReceiverCmd>
 {
-    private final long statusMessageTimeout;
     private final DataTransportPoller dataTransportPoller;
     private final OneToOneConcurrentArrayQueue<ReceiverCmd> commandQueue;
     private final AtomicCounter totalBytesReceived;
@@ -44,7 +43,6 @@ public class Receiver implements Agent, Consumer<ReceiverCmd>
 
     public Receiver(final MediaDriver.Context ctx)
     {
-        statusMessageTimeout = ctx.statusMessageTimeout();
         dataTransportPoller = ctx.dataTransportPoller();
         commandQueue = ctx.receiverCommandQueue();
         totalBytesReceived = ctx.systemCounters().get(BYTES_RECEIVED);
@@ -72,8 +70,9 @@ public int doWork() throws Exception
             }
             else
             {
-                workCount += image.sendPendingStatusMessage(now, statusMessageTimeout);
+                workCount += image.sendPendingStatusMessage();
                 workCount += image.processPendingLoss();
+                workCount += image.initiateAnyRttMeasurements(now);
             }
         }
 

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -135,7 +135,8 @@ public void setUp() throws Exception
             .countersManager(countersManager)
             .nanoClock(nanoClock)
             .sendChannelEndpointSupplier(Configuration.sendChannelEndpointSupplier())
-            .receiveChannelEndpointSupplier(Configuration.receiveChannelEndpointSupplier());
+            .receiveChannelEndpointSupplier(Configuration.receiveChannelEndpointSupplier())
+            .congestControlSupplier(Configuration.congestionControlSupplier());
 
         ctx.toDriverCommands(fromClientCommands);
         ctx.clientProxy(mockClientProxy);

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -110,9 +110,9 @@ public void setUp() throws Exception
         // System GC required in order to ensure that the direct byte buffers get cleaned and avoid OOM.
         System.gc();
 
-        when(mockRawLogFactory.newNetworkPublication(anyString(), anyInt(), anyInt(), anyInt(), anyInt()))
+        when(mockRawLogFactory.newNetworkPublication(anyString(), anyInt(), anyInt(), anyLong(), anyInt()))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH));
-        when(mockRawLogFactory.newNetworkedImage(anyString(), anyInt(), anyInt(), anyInt(), eq(TERM_BUFFER_LENGTH)))
+        when(mockRawLogFactory.newNetworkedImage(anyString(), anyInt(), anyInt(), anyLong(), eq(TERM_BUFFER_LENGTH)))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH));
         when(mockRawLogFactory.newDirectPublication(anyInt(), anyInt(), anyLong(), anyInt()))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH));

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -342,8 +342,8 @@ public class Configuration
 
     private static final String DEFAULT_IDLE_STRATEGY = "org.agrona.concurrent.BackoffIdleStrategy";
 
-    static final long AGENT_IDLE_MAX_SPINS = 20;
-    static final long AGENT_IDLE_MAX_YIELDS = 50;
+    static final long AGENT_IDLE_MAX_SPINS = 100;
+    static final long AGENT_IDLE_MAX_YIELDS = 100;
     static final long AGENT_IDLE_MIN_PARK_NS = TimeUnit.NANOSECONDS.toNanos(1);
     static final long AGENT_IDLE_MAX_PARK_NS = TimeUnit.MICROSECONDS.toNanos(100);
 

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -46,9 +46,6 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntact() throws Excepti
     {
         srcBuffer.setMemory(0, MESSAGE_LENGTH, (byte)7);
         final MediaDriver.Context ctx = new MediaDriver.Context()
-            .conductorIdleStrategy(new YieldingIdleStrategy())
-            .senderIdleStrategy(new YieldingIdleStrategy())
-            .receiverIdleStrategy(new YieldingIdleStrategy())
             .publicationTermBufferLength(TERM_BUFFER_LENGTH);
 
         try (MediaDriver ignore = MediaDriver.launch(ctx);

File: aeron-driver/src/main/java/io/aeron/driver/PublicationImage.java
Patch:
@@ -362,7 +362,7 @@ int trackRebuild(final long now)
         if (minSubscriberPosition > (newStatusMessagePosition + currentGain))
         {
             newStatusMessagePosition = minSubscriberPosition;
-            cleanBuffer(minSubscriberPosition);
+            cleanBufferTo(minSubscriberPosition - (termLengthMask + 1));
         }
 
         final long rebuildPosition = Math.max(this.rebuildPosition.getVolatile(), maxSubscriberPosition);
@@ -629,10 +629,10 @@ private boolean isFlowControlOverRun(final long windowPosition, final long propo
         return isFlowControlOverRun;
     }
 
-    private void cleanBuffer(final long minConsumerPosition)
+    private void cleanBufferTo(final long cleanToPosition)
     {
         final long cleanPosition = this.cleanPosition;
-        final int bytesForCleaning = (int)(minConsumerPosition - cleanPosition);
+        final int bytesForCleaning = (int)(cleanToPosition - cleanPosition);
         final UnsafeBuffer dirtyTerm = termBuffers[indexByPosition(cleanPosition, positionBitsToShift)];
         final int termOffset = (int)cleanPosition & termLengthMask;
         final int bufferCapacity = dirtyTerm.capacity();

File: aeron-system-tests/src/test/java/io/aeron/MemoryOrderingTest.java
Patch:
@@ -16,6 +16,7 @@
 package io.aeron;
 
 import io.aeron.driver.MediaDriver;
+import io.aeron.driver.ThreadingMode;
 import io.aeron.logbuffer.FragmentHandler;
 import io.aeron.logbuffer.Header;
 import org.agrona.DirectBuffer;
@@ -37,6 +38,8 @@ public class MemoryOrderingTest
     public static final int BURST_LENGTH = 5;
     public static final int INTER_BURST_DURATION_NS = 10_000;
 
+    final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(MESSAGE_LENGTH));
+
     volatile String failedMessage = null;
 
     @Ignore
@@ -50,7 +53,6 @@ public void shouldReceiveMessagesInOrderWithFirstLongWordIntact() throws Excepti
              final Publication publication = aeron.addPublication(CHANNEL, STREAM_ID);
              final Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID))
         {
-            final UnsafeBuffer srcBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(MESSAGE_LENGTH));
             final BusySpinIdleStrategy idleStrategy = new BusySpinIdleStrategy();
 
             final Thread subscriberThread = new Thread(new Subscriber(subscription));

File: aeron-driver/src/main/java/io/aeron/driver/status/ChannelEndpointStatus.java
Patch:
@@ -89,7 +89,6 @@ public static AtomicCounter allocate(
 
                 buffer.putInt(CHANNEL_OFFSET, length);
                 buffer.putBytes(CHANNEL_OFFSET + SIZE_OF_INT, channelBytes, 0, length);
-            }
-        );
+            });
     }
 }

File: aeron-driver/src/main/java/io/aeron/driver/status/PublisherLimit.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.driver.status;
 
 import org.agrona.concurrent.status.CountersManager;
-import org.agrona.concurrent.status.Position;
+import org.agrona.concurrent.status.UnsafeBufferPosition;
 
 /**
  * The limit as a position in bytes applied to publishers on a session-channel-stream tuple. Publishers will experience
@@ -34,7 +34,7 @@ public class PublisherLimit
      */
     public static final String NAME = "pub-lmt";
 
-    public static Position allocate(
+    public static UnsafeBufferPosition allocate(
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiverHwm.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.driver.status;
 
 import org.agrona.concurrent.status.CountersManager;
-import org.agrona.concurrent.status.Position;
+import org.agrona.concurrent.status.UnsafeBufferPosition;
 
 /**
  * The highest position the Receiver has observed on a session-channel-stream tuple while rebuilding the stream.
@@ -34,7 +34,7 @@ public class ReceiverHwm
      */
     public static final String NAME = "rcv-hwm";
 
-    public static Position allocate(
+    public static UnsafeBufferPosition allocate(
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiverPos.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.driver.status;
 
 import org.agrona.concurrent.status.CountersManager;
-import org.agrona.concurrent.status.Position;
+import org.agrona.concurrent.status.UnsafeBufferPosition;
 
 /**
  * The highest position the Receiver has rebuilt up to on a session-channel-stream tuple while rebuilding the stream.
@@ -34,7 +34,7 @@ public class ReceiverPos
      */
     public static final String NAME = "rcv-pos";
 
-    public static Position allocate(
+    public static UnsafeBufferPosition allocate(
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,

File: aeron-driver/src/main/java/io/aeron/driver/status/SenderPos.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.driver.status;
 
 import org.agrona.concurrent.status.CountersManager;
-import org.agrona.concurrent.status.Position;
+import org.agrona.concurrent.status.UnsafeBufferPosition;
 
 /**
  * The position the Sender has reached for sending data to the media on a session-channel-stream tuple.
@@ -33,7 +33,7 @@ public class SenderPos
      */
     public static final String NAME = "snd-pos";
 
-    public static Position allocate(
+    public static UnsafeBufferPosition allocate(
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,

File: aeron-driver/src/main/java/io/aeron/driver/status/SubscriberPos.java
Patch:
@@ -16,7 +16,7 @@
 package io.aeron.driver.status;
 
 import org.agrona.concurrent.status.CountersManager;
-import org.agrona.concurrent.status.Position;
+import org.agrona.concurrent.status.UnsafeBufferPosition;
 
 /**
  * The position an individual Subscriber has reached on a session-channel-stream tuple. It is possible to have multiple
@@ -34,7 +34,7 @@ public class SubscriberPos
      */
     public static final String NAME = "sub-pos";
 
-    public static Position allocate(
+    public static UnsafeBufferPosition allocate(
         final CountersManager countersManager,
         final long registrationId,
         final int sessionId,

File: aeron-client/src/main/java/io/aeron/CncFileDescriptor.java
Patch:
@@ -66,7 +66,7 @@ public class CncFileDescriptor
 {
     public static final String CNC_FILE = "cnc.dat";
 
-    public static final int CNC_VERSION = 4;
+    public static final int CNC_VERSION = 5;
 
     public static final int CNC_VERSION_FIELD_OFFSET;
     public static final int CNC_METADATA_OFFSET;
@@ -152,13 +152,13 @@ public static void fillMetaData(
         final long clientLivenessTimeout,
         final int errorLogBufferLength)
     {
-        cncMetaDataBuffer.putInt(cncVersionOffset(0), CNC_VERSION);
         cncMetaDataBuffer.putInt(toDriverBufferLengthOffset(0), toDriverBufferLength);
         cncMetaDataBuffer.putInt(toClientsBufferLengthOffset(0), toClientsBufferLength);
         cncMetaDataBuffer.putInt(countersMetaDataBufferLengthOffset(0), counterMetaDataBufferLength);
         cncMetaDataBuffer.putInt(countersValuesBufferLengthOffset(0), counterValuesBufferLength);
         cncMetaDataBuffer.putLong(clientLivenessTimeoutOffset(0), clientLivenessTimeout);
         cncMetaDataBuffer.putInt(errorLogBufferLengthOffset(0), errorLogBufferLength);
+        cncMetaDataBuffer.putIntVolatile(cncVersionOffset(0), CNC_VERSION);
     }
 
     public static UnsafeBuffer createMetaDataBuffer(final ByteBuffer buffer)

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package io.aeron.driver;
 
+import io.aeron.CommonContext;
 import io.aeron.DriverProxy;
 import io.aeron.driver.buffer.RawLogFactory;
 import io.aeron.driver.media.ReceiveChannelEndpoint;
@@ -909,7 +910,7 @@ public void shouldBeAbleToAddNetworkPublicationThenSingleSpyThenRemoveSpy() thro
     }
 
     @Test
-    public void shouldTimeouSpy() throws Exception
+    public void shouldTimeoutSpy() throws Exception
     {
         driverProxy.addPublication(CHANNEL_4000, STREAM_ID_1);
         final long idSpy = driverProxy.addSubscription(spyForChannel(CHANNEL_4000), STREAM_ID_1);
@@ -994,7 +995,7 @@ private long doWorkUntil(final BooleanSupplier condition) throws Exception
 
     private static String spyForChannel(final String channel)
     {
-        return "aeron-spy:" + channel;
+        return CommonContext.SPY_PREFIX + channel;
     }
 
     private static long networkPublicationCorrelationId(final NetworkPublication publication)

File: aeron-client/src/main/java/io/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -224,12 +224,11 @@ public String toString()
         final StringBuilder sb = new StringBuilder();
         final String formattedFlags = String.format("%1$8s", Integer.toBinaryString(flags())).replace(' ', '0');
 
-        sb.append("Data Header{")
+        sb.append("DATA Header{")
             .append("frame_length=").append(frameLength())
             .append(" version=").append(version())
             .append(" flags=").append(formattedFlags)
             .append(" type=").append(headerType())
-            .append(" frame_length=").append(frameLength())
             .append(" term_offset=").append(termOffset())
             .append(" session_id=").append(sessionId())
             .append(" stream_id=").append(streamId())

File: aeron-driver/src/main/java/io/aeron/driver/status/ReceiveChannelStatus.java
Patch:
@@ -26,7 +26,7 @@ public class ReceiveChannelStatus
     /**
      * Type id of a receive channel status indicator.
      */
-    public static final int RECEIVE_CHANNEL_STATUS_TYPE_ID = 6;
+    public static final int RECEIVE_CHANNEL_STATUS_TYPE_ID = 7;
 
     /**
      * Human readable name for the counter.

File: aeron-driver/src/main/java/io/aeron/driver/status/SendChannelStatus.java
Patch:
@@ -26,7 +26,7 @@ public class SendChannelStatus
     /**
      * Type id of a send channel status indicator.
      */
-    public static final int SEND_CHANNEL_STATUS_TYPE_ID = 5;
+    public static final int SEND_CHANNEL_STATUS_TYPE_ID = 6;
 
     /**
      * Human readable name for the counter.

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -34,9 +34,9 @@
 import static io.aeron.CncFileDescriptor.*;
 import static io.aeron.driver.status.PublisherLimit.PUBLISHER_LIMIT_TYPE_ID;
 import static io.aeron.driver.status.ReceiveChannelStatus.RECEIVE_CHANNEL_STATUS_TYPE_ID;
+import static io.aeron.driver.status.ReceiverPos.RECEIVER_POS_TYPE_ID;
 import static io.aeron.driver.status.SendChannelStatus.SEND_CHANNEL_STATUS_TYPE_ID;
 import static io.aeron.driver.status.StreamPositionCounter.*;
-import static io.aeron.driver.status.SubscriberPos.SUBSCRIBER_POSITION_TYPE_ID;
 import static io.aeron.driver.status.SystemCounterDescriptor.SYSTEM_COUNTER_TYPE_ID;
 
 /**
@@ -251,7 +251,7 @@ private boolean filter(final int typeId, final DirectBuffer keyBuffer)
         {
             return false;
         }
-        else if (typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= SUBSCRIBER_POSITION_TYPE_ID)
+        else if (typeId >= PUBLISHER_LIMIT_TYPE_ID && typeId <= RECEIVER_POS_TYPE_ID)
         {
             if (!match(identityFilter, () -> Long.toString(keyBuffer.getLong(REGISTRATION_ID_OFFSET))) ||
                 !match(sessionFilter, () -> Integer.toString(keyBuffer.getInt(SESSION_ID_OFFSET))) ||

File: aeron-driver/src/main/java/io/aeron/driver/RetransmitHandler.java
Patch:
@@ -175,7 +175,7 @@ public int processTimeouts(final long now, final RetransmitSender retransmitSend
 
     private boolean isInvalid(final int termOffset)
     {
-        final boolean isInvalid = termOffset >= (capacity - DataHeaderFlyweight.HEADER_LENGTH);
+        final boolean isInvalid = (termOffset > (capacity - DataHeaderFlyweight.HEADER_LENGTH)) || (termOffset < 0);
 
         if (isInvalid)
         {
@@ -210,7 +210,7 @@ private RetransmitAction assignRetransmitAction()
             }
         }
 
-        throw new IllegalStateException("no more INACTIVE RetransmitActions");
+        throw new IllegalStateException("Maximum number of INACTIVE RetransmitActions reached");
     }
 
     private enum State

File: aeron-driver/src/main/java/io/aeron/driver/Configuration.java
Patch:
@@ -52,7 +52,7 @@ public class Configuration
     public static final String TERM_BUFFER_LENGTH_PROP_NAME = "aeron.term.buffer.length";
 
     /**
-     * Length (in bytes) of the log buffers for terms for incoming images.
+     * Length (in bytes) of the log buffers for terms.
      */
     public static final String TERM_BUFFER_MAX_LENGTH_PROP_NAME = "aeron.term.buffer.max.length";
 
@@ -167,9 +167,9 @@ public class Configuration
     public static final int TERM_BUFFER_LENGTH_DEFAULT = 16 * 1024 * 1024;
 
     /**
-     * Default term max buffer length.
+     * Default term max buffer length. The maximum possible term length is 1GB.
      */
-    public static final int TERM_BUFFER_LENGTH_MAX_DEFAULT = 16 * 1024 * 1024;
+    public static final int TERM_BUFFER_LENGTH_MAX_DEFAULT = 1024 * 1024 * 1024;
 
     /**
      * Default buffer length for conductor buffers between the client and the media driver conductor.

File: aeron-driver/src/test/java/io/aeron/driver/DirectPublicationTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() throws Exception
         final CountersManager countersManager = new CountersManager(
             new UnsafeBuffer(ByteBuffer.allocateDirect(BUFFER_LENGTH * 2)), counterBuffer);
 
-        when(mockRawLogFactory.newDirectPublication(anyInt(), anyInt(), anyLong()))
+        when(mockRawLogFactory.newDirectPublication(anyInt(), anyInt(), anyLong(), anyInt()))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH, TERM_META_DATA_LENGTH));
 
         final MediaDriver.Context ctx = new MediaDriver.Context()

File: aeron-driver/src/test/java/io/aeron/driver/DriverConductorTest.java
Patch:
@@ -110,11 +110,11 @@ public void setUp() throws Exception
         // System GC required in order to ensure that the direct byte buffers get cleaned and avoid OOM.
         System.gc();
 
-        when(mockRawLogFactory.newNetworkPublication(anyObject(), anyInt(), anyInt(), anyInt()))
+        when(mockRawLogFactory.newNetworkPublication(anyObject(), anyInt(), anyInt(), anyInt(), anyInt()))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH, TERM_META_DATA_LENGTH));
         when(mockRawLogFactory.newNetworkedImage(anyObject(), anyInt(), anyInt(), anyInt(), eq(TERM_BUFFER_LENGTH)))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH, TERM_META_DATA_LENGTH));
-        when(mockRawLogFactory.newDirectPublication(anyInt(), anyInt(), anyLong()))
+        when(mockRawLogFactory.newDirectPublication(anyInt(), anyInt(), anyLong(), anyInt()))
             .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_LENGTH, TERM_META_DATA_LENGTH));
 
         currentTime = 0;

File: aeron-driver/src/test/java/io/aeron/driver/buffer/RawLogFactoryTest.java
Patch:
@@ -51,9 +51,8 @@ public void createDataDir()
         IoUtil.ensureDirectoryExists(DATA_DIR, "data");
         rawLogFactory = new RawLogFactory(
             DATA_DIR.getAbsolutePath(),
-            TERM_BUFFER_LENGTH,
             TERM_BUFFER_MAX_LENGTH,
-            TERM_BUFFER_LENGTH, PRE_ZERO_LOG,
+            PRE_ZERO_LOG,
             mock(DistinctErrorLog.class));
     }
 
@@ -67,7 +66,8 @@ public void cleanupFiles() throws IOException
     public void shouldCreateCorrectLengthAndZeroedFilesForPublication() throws Exception
     {
         final String canonicalForm = udpChannel.canonicalForm();
-        final RawLog rawLog = rawLogFactory.newNetworkPublication(canonicalForm, SESSION_ID, STREAM_ID, CREATION_ID);
+        final RawLog rawLog = rawLogFactory.newNetworkPublication(
+            canonicalForm, SESSION_ID, STREAM_ID, CREATION_ID, TERM_BUFFER_LENGTH);
 
         rawLog.stream().forEach(
             (partition) ->

File: aeron-driver/src/main/java/io/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -17,7 +17,6 @@
 
 import io.aeron.driver.*;
 import io.aeron.driver.exceptions.ConfigurationException;
-import io.aeron.driver.status.ChannelEndpointStatusIndicator;
 import io.aeron.protocol.*;
 import org.agrona.BitUtil;
 import org.agrona.LangUtil;
@@ -96,8 +95,6 @@ public ReceiveChannelEndpoint(
         this.dispatcher = dispatcher;
         this.statusIndicator = statusIndicator;
 
-        statusIndicator.setOrdered(ChannelEndpointStatusIndicator.STATUS_INITIALIZING);
-
         statusMessageShortSends = context.systemCounters().get(STATUS_MESSAGE_SHORT_SENDS);
         nakMessageShortSends = context.systemCounters().get(NAK_MESSAGE_SHORT_SENDS);
         possibleTtlAsymmetry = context.systemCounters().get(POSSIBLE_TTL_ASYMMETRY);

File: aeron-samples/src/main/java/io/aeron/samples/AeronStat.java
Patch:
@@ -226,7 +226,7 @@ private static void checkForHelp(final String[] args)
         {
             if ("-?".equals(arg) || "-h".equals(arg) || "-help".equals(arg))
             {
-                System.out.println(
+                System.out.format(
                     "Usage: [-Daeron.dir=<directory containing CnC file>] AeronStat%n" +
                         "\tfilter by optional regex patterns:%n" +
                         "\t[type=<pattern>]%n" +

File: aeron-driver/src/main/java/io/aeron/driver/MediaDriver.java
Patch:
@@ -538,7 +538,7 @@ public Context conclude()
                             if (!errorLog.record(throwable))
                             {
                                 System.err.println("Error Log is full, consider increasing " + ERROR_BUFFER_LENGTH_PROP_NAME);
-                                throwable.printStackTrace();
+                                throwable.printStackTrace(System.err);
                             }
                         };
                 }

File: aeron-client/src/main/java/io/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -49,6 +49,8 @@ public class DataHeaderFlyweight extends HeaderFlyweight
      */
     public static final short BEGIN_AND_END_FLAGS = BEGIN_FLAG | END_FLAG;
 
+    public static final long DEFAULT_RESERVE_VALUE = 0L;
+
     public static final int TERM_OFFSET_FIELD_OFFSET = 8;
     public static final int SESSION_ID_FIELD_OFFSET = 12;
     public static final int STREAM_ID_FIELD_OFFSET = 16;
@@ -213,6 +215,7 @@ public static UnsafeBuffer createDefaultHeader(final int sessionId, final int st
         buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, ByteOrder.LITTLE_ENDIAN);
         buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, ByteOrder.LITTLE_ENDIAN);
         buffer.putInt(TERM_ID_FIELD_OFFSET, termId, ByteOrder.LITTLE_ENDIAN);
+        buffer.putLong(RESERVED_SPACE_OFFSET, DEFAULT_RESERVE_VALUE);
 
         return buffer;
     }

File: aeron-driver/src/test/java/io/aeron/driver/SenderTest.java
Patch:
@@ -60,9 +60,8 @@ public class SenderTest
     private static final int INITIAL_TERM_ID = 3;
     private static final byte[] PAYLOAD = "Payload is here!".getBytes();
 
-    private static final UnsafeBuffer HEADER =
-        DataHeaderFlyweight.createDefaultHeader(SESSION_ID, STREAM_ID, INITIAL_TERM_ID);
-    public static final int FRAME_LENGTH = HEADER.capacity() + PAYLOAD.length;
+    private static final UnsafeBuffer HEADER = DataHeaderFlyweight.createDefaultHeader(SESSION_ID, STREAM_ID, INITIAL_TERM_ID);
+    private static final int FRAME_LENGTH = HEADER.capacity() + PAYLOAD.length;
     private static final int ALIGNED_FRAME_LENGTH = align(FRAME_LENGTH, FRAME_ALIGNMENT);
 
     private final ControlTransportPoller mockTransportPoller = mock(ControlTransportPoller.class);

File: aeron-client/src/main/java/io/aeron/logbuffer/FrameDescriptor.java
Patch:
@@ -55,7 +55,7 @@ public class FrameDescriptor
     /**
      * Alignment as a multiple of bytes for each frame. The length field will store the unaligned length in bytes.
      */
-    public static final int FRAME_ALIGNMENT = 8;
+    public static final int FRAME_ALIGNMENT = 32;
 
     /**
      * Beginning fragment of a frame.

File: aeron-driver/src/test/java/io/aeron/driver/LossDetectorTest.java
Patch:
@@ -289,7 +289,7 @@ public void shouldHandleHwmGreaterThanCompletedBuffer()
 
         handler.scan(termBuffer, rebuildPosition, hwmPosition, currentTime, MASK, POSITION_BITS_TO_SHIFT, TERM_ID);
 
-        verify(nakMessageSender).onLossDetected(TERM_ID, offsetOfMessage(1), TERM_BUFFER_LENGTH - (int) rebuildPosition);
+        verify(nakMessageSender).onLossDetected(TERM_ID, offsetOfMessage(1), TERM_BUFFER_LENGTH - (int)rebuildPosition);
     }
 
     @Test

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -267,8 +267,8 @@ public long offer(final DirectBuffer buffer)
      * @param buffer containing message.
      * @param offset offset in the buffer at which the encoded message begins.
      * @param length in bytes of the encoded message.
-     * @return The new stream position, otherwise a negative error value {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED} or
-     * {@link #ADMIN_ACTION}.
+     * @return The new stream position, otherwise a negative error value {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED},
+     * {@link #ADMIN_ACTION} or {@link #CLOSED}.
      */
     public long offer(final DirectBuffer buffer, final int offset, final int length)
     {

File: aeron-client/src/main/java/io/aeron/Subscription.java
Patch:
@@ -32,7 +32,7 @@
  * receive whole messages, whether or not they were fragmented, then the Subscriber
  * should be created with a {@link FragmentAssembler} or a custom implementation.
  * <p>
- * It is an applications responsibility to {@link #poll} the Subscriber for new messages.
+ * It is an application's responsibility to {@link #poll} the Subscriber for new messages.
  * <p>
  * Subscriptions are not threadsafe and should not be shared between subscribers.
  *
@@ -83,7 +83,7 @@ public int streamId()
      * Poll the {@link Image}s under the subscription for available message fragments.
      * <p>
      * Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
-     * as a series of fragments ordered withing a session.
+     * as a series of fragments ordered within a session.
      *
      * To assemble messages that span multiple fragments then use {@link FragmentAssembler}.
      *
@@ -122,7 +122,7 @@ public int poll(final FragmentHandler fragmentHandler, final int fragmentLimit)
      * they will even if BREAK or ABORT is returned from the fragment handler.
      * <p>
      * Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
-     * as a series of fragments ordered withing a session.
+     * as a series of fragments ordered within a session.
      *
      * To assemble messages that span multiple fragments then use {@link ControlledFragmentAssembler}.
      *

File: aeron-client/src/main/java/io/aeron/Publication.java
Patch:
@@ -267,8 +267,8 @@ public long offer(final DirectBuffer buffer)
      * @param buffer containing message.
      * @param offset offset in the buffer at which the encoded message begins.
      * @param length in bytes of the encoded message.
-     * @return The new stream position, otherwise a negative error value {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED} or
-     * {@link #ADMIN_ACTION}.
+     * @return The new stream position, otherwise a negative error value {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED},
+     * {@link #ADMIN_ACTION} or {@link #CLOSED}.
      */
     public long offer(final DirectBuffer buffer, final int offset, final int length)
     {

File: aeron-client/src/main/java/io/aeron/Subscription.java
Patch:
@@ -32,7 +32,7 @@
  * receive whole messages, whether or not they were fragmented, then the Subscriber
  * should be created with a {@link FragmentAssembler} or a custom implementation.
  * <p>
- * It is an applications responsibility to {@link #poll} the Subscriber for new messages.
+ * It is an application's responsibility to {@link #poll} the Subscriber for new messages.
  * <p>
  * Subscriptions are not threadsafe and should not be shared between subscribers.
  *
@@ -83,7 +83,7 @@ public int streamId()
      * Poll the {@link Image}s under the subscription for available message fragments.
      * <p>
      * Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
-     * as a series of fragments ordered withing a session.
+     * as a series of fragments ordered within a session.
      *
      * To assemble messages that span multiple fragments then use {@link FragmentAssembler}.
      *
@@ -122,7 +122,7 @@ public int poll(final FragmentHandler fragmentHandler, final int fragmentLimit)
      * they will even if BREAK or ABORT is returned from the fragment handler.
      * <p>
      * Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
-     * as a series of fragments ordered withing a session.
+     * as a series of fragments ordered within a session.
      *
      * To assemble messages that span multiple fragments then use {@link ControlledFragmentAssembler}.
      *

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -555,7 +555,8 @@ public Context conclude()
                     publicationTermBufferLength,
                     maxImageTermBufferLength,
                     ipcPublicationTermBufferLength,
-                    termBufferSparseFile));
+                    termBufferSparseFile,
+                    errorLog));
 
                 concludeIdleStrategies();
             }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/event/EventCode.java
Patch:
@@ -43,7 +43,6 @@ public enum EventCode
     CMD_OUT_ON_UNAVAILABLE_IMAGE(17, EventDissector::dissectAsCommand),
     FRAME_IN_DROPPED(18, EventDissector::dissectAsFrame),
     FRAME_OUT_DROPPED(19, EventDissector::dissectAsFrame),
-    ERROR_DELETING_FILE(20, EventDissector::dissectAsString),
 
     SEND_CHANNEL_CREATION(23, EventDissector::dissectAsString),
     RECEIVE_CHANNEL_CREATION(24, EventDissector::dissectAsString),

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/event/EventConfigurationTest.java
Patch:
@@ -31,7 +31,7 @@ public class EventConfigurationTest
     @Test
     public void nullPropertyShouldDefaultToProductionEventCodes()
     {
-        assertThat(getEnabledEventCodes(null), is(PRODUCTION_LOGGER_EVENT_CODES));
+        assertThat(getEnabledEventCodes(null), is(EnumSet.noneOf(EventCode.class)));
     }
 
     @Test(expected = IllegalArgumentException.class)

File: aeron-agent/src/main/java/uk/co/real_logic/aeron/agent/EventLogAgent.java
Patch:
@@ -144,7 +144,7 @@ public static void agentmain(final String agentArgs, final Instrumentation instr
     {
     }
 
-    static class SenderProxyInterceptor
+    public static class SenderProxyInterceptor
     {
         public static void registerSendChannelEndpoint(final SendChannelEndpoint channelEndpoint)
         {
@@ -159,7 +159,7 @@ public static void closeSendChannelEndpoint(final SendChannelEndpoint channelEnd
         }
     }
 
-    static class ReceiverProxyInterceptor
+    public static class ReceiverProxyInterceptor
     {
         public static void registerReceiveChannelEndpoint(final ReceiveChannelEndpoint channelEndpoint)
         {
@@ -174,7 +174,7 @@ public static void closeReceiveChannelEndpoint(final ReceiveChannelEndpoint chan
         }
     }
 
-    static class DriverConductorInterceptor
+    public static class DriverConductorInterceptor
     {
         public static void cleanupImageInterceptor(final PublicationImage image)
         {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/event/EventCode.java
Patch:
@@ -34,7 +34,6 @@ public enum EventCode
     CMD_OUT_AVAILABLE_IMAGE(8, EventDissector::dissectAsCommand),
     INVOCATION(9, EventDissector::dissectAsInvocation),
 
-    MALFORMED_FRAME_LENGTH(11, EventDissector::dissectAsCommand),
     CMD_OUT_ON_OPERATION_SUCCESS(12, EventDissector::dissectAsCommand),
     CMD_IN_KEEPALIVE_CLIENT(13, EventDissector::dissectAsCommand),
     REMOVE_PUBLICATION_CLEANUP(14, EventDissector::dissectAsString),
@@ -46,8 +45,6 @@ public enum EventCode
     FRAME_OUT_DROPPED(19, EventDissector::dissectAsFrame),
     ERROR_DELETING_FILE(20, EventDissector::dissectAsString),
 
-    INVALID_VERSION(22, EventDissector::dissectAsCommand),
-
     SEND_CHANNEL_CREATION(23, EventDissector::dissectAsString),
     RECEIVE_CHANNEL_CREATION(24, EventDissector::dissectAsString),
     SEND_CHANNEL_CLOSE(25, EventDissector::dissectAsString),

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/event/EventConfiguration.java
Patch:
@@ -47,11 +47,9 @@ public class EventConfiguration
     public static final String ENABLED_LOGGER_EVENT_CODES_PROPERTY_NAME = "aeron.event.log";
 
     public static final Set<EventCode> PRODUCTION_LOGGER_EVENT_CODES = EnumSet.of(
-        EventCode.MALFORMED_FRAME_LENGTH,
         EventCode.ERROR_DELETING_FILE);
 
     public static final Set<EventCode> ADMIN_ONLY_EVENT_CODES = EnumSet.of(
-        EventCode.MALFORMED_FRAME_LENGTH,
         EventCode.CMD_IN_ADD_PUBLICATION,
         EventCode.CMD_IN_ADD_SUBSCRIPTION,
         EventCode.CMD_IN_KEEPALIVE_CLIENT,

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/DebugReceiveChannelEndpoint.java
Patch:
@@ -17,6 +17,7 @@
 
 import uk.co.real_logic.aeron.driver.DataPacketDispatcher;
 import uk.co.real_logic.aeron.driver.MediaDriver;
+import uk.co.real_logic.aeron.driver.event.EventLogger;
 import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.media.UdpChannel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -34,6 +35,7 @@ public class DebugReceiveChannelEndpoint extends ReceiveChannelEndpoint
     private final LossGenerator dataLossGenerator;
     private final LossGenerator controlLossGenerator;
     private final UnsafeBuffer controlBuffer = new UnsafeBuffer(ByteBuffer.allocate(0));
+    private final EventLogger logger = EventLogger.LOGGER;
 
     public DebugReceiveChannelEndpoint(
         final UdpChannel udpChannel,

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/DebugSendChannelEndpoint.java
Patch:
@@ -16,6 +16,7 @@
 package uk.co.real_logic.aeron.driver.ext;
 
 import uk.co.real_logic.aeron.driver.MediaDriver;
+import uk.co.real_logic.aeron.driver.event.EventLogger;
 import uk.co.real_logic.aeron.driver.media.SendChannelEndpoint;
 import uk.co.real_logic.aeron.driver.media.UdpChannel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -33,6 +34,7 @@ public class DebugSendChannelEndpoint extends SendChannelEndpoint
     private final LossGenerator dataLossGenerator;
     private final LossGenerator controlLossGenerator;
     private final UnsafeBuffer dataBuffer = new UnsafeBuffer(ByteBuffer.allocate(0));
+    private final EventLogger logger = EventLogger.LOGGER;
 
     public DebugSendChannelEndpoint(final UdpChannel udpChannel, final MediaDriver.Context context)
     {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/stats/SenderPos.java
Patch:
@@ -23,7 +23,7 @@ public class SenderPos
     /**
      * Type id of a sender position counter.
      */
-    public static final int SENDER_POSITION_TYPE_ID = 4;
+    public static final int SENDER_POSITION_TYPE_ID = 2;
 
     public static Position allocate(
         final CountersManager countersManager,
@@ -33,6 +33,6 @@ public static Position allocate(
         final String channel)
     {
         return StreamPositionCounter.allocate(
-            "sender hwm", SENDER_POSITION_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
+            "sender pos", SENDER_POSITION_TYPE_ID, countersManager, registrationId, sessionId, streamId, channel);
     }
 }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -554,7 +554,7 @@ public Context conclude()
                         {
                             if (!errorLog.record(throwable))
                             {
-                                System.err.println("Error Log is full, consider increasing " + ERROR_BUFFER_LENGTH);
+                                System.err.println("Error Log is full, consider increasing " + ERROR_BUFFER_LENGTH_PROP_NAME);
                                 throwable.printStackTrace();
                             }
                         };

File: aeron-client/src/main/java/uk/co/real_logic/aeron/CommonContext.java
Patch:
@@ -301,12 +301,12 @@ public boolean isDriverActive(final long driverTimeoutMs, final Consumer<String>
     }
 
     /**
-     * Read the error log and
+     * Read the error log to a given {@link PrintStream}
      *
      * @param stream to write the error log contents to.
      * @return the number of observations from the error log
      */
-    public int printErrorLog(final PrintStream stream)
+    public int saveErrorLog(final PrintStream stream)
     {
         final File dirFile = new File(aeronDirectoryName);
         int result = 0;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -398,7 +398,7 @@ private void ensureDirectoryIsRecreated(final Context ctx)
 
                 try (final PrintStream stream = new PrintStream(errorLogFile, "UTF-8"))
                 {
-                    observations = ctx.printErrorLog(stream);
+                    observations = ctx.saveErrorLog(stream);
                 }
                 catch (final Exception ex)
                 {
@@ -534,7 +534,7 @@ public Context conclude()
 
                 toDriverCommands(new ManyToOneRingBuffer(createToDriverBuffer(cncByteBuffer, cncMetaDataBuffer)));
 
-                if (null != errorLog)
+                if (null == errorLog)
                 {
                     errorLog = new DistinctErrorLog(
                         new UnsafeBuffer(CncFileDescriptor.createErrorLogBuffer(cncByteBuffer, cncMetaDataBuffer)), epochClock);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/DebugChannelEndpointConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.ext;
 
 import static java.lang.Long.getLong;
 import static java.lang.System.getProperty;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/DebugReceiveChannelEndpoint.java
Patch:
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.ext;
 
+import uk.co.real_logic.aeron.driver.DataPacketDispatcher;
+import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.media.UdpChannel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/DebugSendChannelEndpoint.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.ext;
 
+import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.aeron.driver.media.SendChannelEndpoint;
 import uk.co.real_logic.aeron.driver.media.UdpChannel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/DebugSendChannelEndpointSupplier.java
Patch:
@@ -13,8 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.ext;
 
+import uk.co.real_logic.aeron.driver.MediaDriver;
+import uk.co.real_logic.aeron.driver.SendChannelEndpointSupplier;
 import uk.co.real_logic.aeron.driver.media.SendChannelEndpoint;
 import uk.co.real_logic.aeron.driver.media.UdpChannel;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/LossGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.ext;
 
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ext/RandomLossGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.ext;
 
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/ReceiverTest.java
Patch:
@@ -154,7 +154,6 @@ public void setUp() throws Exception
 
         context.eventLogger(mockLogger);
         context.systemCounters(mockSystemCounters);
-        context.dataLossGenerator((address, buffer, length) -> false);
 
         receiveChannelEndpoint = new ReceiveChannelEndpoint(
             UdpChannel.parse(URI),

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/LogInspector.java
Patch:
@@ -144,14 +144,14 @@ private static char[] bytesToAscii(final DirectBuffer buffer, final int offset,
 
         for (int i = 0; i < length; i++)
         {
-            int b = buffer.getByte(offset + i) & 0xFF;
+            byte b = buffer.getByte(offset + i);
 
             if (b < 0)
             {
                 b = 0;
             }
 
-            chars[i] = (char)b;
+            chars[i] = (char) (b & 0xFF);
         }
 
         return chars;

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/LogInspector.java
Patch:
@@ -144,14 +144,14 @@ private static char[] bytesToAscii(final DirectBuffer buffer, final int offset,
 
         for (int i = 0; i < length; i++)
         {
-            int b = buffer.getByte(offset + i) & 0xFF;
+            byte b = buffer.getByte(offset + i);
 
             if (b < 0)
             {
                 b = 0;
             }
 
-            chars[i] = (char)b;
+            chars[i] = (char) (b & 0xFF);
         }
 
         return chars;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -491,11 +491,13 @@ private void onClientCommand(final int msgTypeId, final MutableDirectBuffer buff
         catch (final ControlProtocolException ex)
         {
             clientProxy.onError(ex.errorCode(), ex.getMessage(), correlationId);
+            context.systemCounters().errors().increment();
             errorLog.record(ex);
         }
         catch (final Exception ex)
         {
             clientProxy.onError(GENERIC_ERROR, ex.getMessage(), correlationId);
+            context.systemCounters().errors().increment();
             errorLog.record(ex);
         }
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -537,7 +537,8 @@ public Context conclude()
                         {
                             if (!errorLog.record(throwable))
                             {
-                                eventLogger.logException(throwable);
+                                System.err.println("Error Log is full, consider increasing " + ERROR_BUFFER_LENGTH);
+                                throwable.printStackTrace();
                             }
                         };
                 }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/event/EventCode.java
Patch:
@@ -33,7 +33,6 @@ public enum EventCode
     CMD_OUT_PUBLICATION_READY(7, EventDissector::dissectAsCommand),
     CMD_OUT_AVAILABLE_IMAGE(8, EventDissector::dissectAsCommand),
     INVOCATION(9, EventDissector::dissectAsInvocation),
-    EXCEPTION(10, EventDissector::dissectAsException),
 
     MALFORMED_FRAME_LENGTH(11, EventDissector::dissectAsCommand),
     CMD_OUT_ON_OPERATION_SUCCESS(12, EventDissector::dissectAsCommand),

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/ReceiveChannelEndpoint.java
Patch:
@@ -61,6 +61,7 @@ public ReceiveChannelEndpoint(
             udpChannel.remoteData(),
             udpChannel.remoteData(),
             null,
+            context.errorLog(),
             context.eventLogger());
 
         smHeader

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -57,6 +57,7 @@ public SendChannelEndpoint(final UdpChannel udpChannel, final MediaDriver.Contex
             udpChannel.remoteControl(),
             udpChannel.localControl(),
             udpChannel.remoteData(),
+            context.errorLog(),
             context.eventLogger());
 
         this.nakMessagesReceived = context.systemCounters().nakMessagesReceived();

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/SubscriptionMessageFlyweight.java
Patch:
@@ -33,8 +33,8 @@
  * +---------------------------------------------------------------+
  * |                           Stream Id                           |
  * +---------------------------------------------------------------+
- * |      Channel Length         |   Channel                     ...
- * |                                                             ...
+ * |       Channel Length         |   Channel                     ...
+ * |                                                              ...
  * +---------------------------------------------------------------+
  */
 public class SubscriptionMessageFlyweight extends CorrelatedMessageFlyweight

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ClientProxy.java
Patch:
@@ -58,15 +58,15 @@ public ClientProxy(final BroadcastTransmitter transmitter, final EventLogger log
         imageMessage.wrap(buffer, 0);
     }
 
-    public void onError(final ErrorCode errorCode, String errorMessage, final CorrelatedMessageFlyweight offender)
+    public void onError(final ErrorCode errorCode, String errorMessage, final long correlationId)
     {
         if (null == errorMessage)
         {
             errorMessage = "";
         }
 
         errorResponse
-            .offendingCommandCorrelationId(offender.correlationId())
+            .offendingCommandCorrelationId(correlationId)
             .errorCode(errorCode)
             .errorMessage(errorMessage);
 

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DirectPublicationTest.java
Patch:
@@ -73,12 +73,13 @@ public void setUp() throws Exception
             .toDriverCommands(fromClientCommands)
             .rawLogBuffersFactory(mockRawLogFactory)
             .clientProxy(mock(ClientProxy.class))
-            .eventLogger(mock(EventLogger.class))
             .toConductorFromReceiverCommandQueue(mock(OneToOneConcurrentArrayQueue.class))
             .toConductorFromSenderCommandQueue(mock(OneToOneConcurrentArrayQueue.class))
             .toEventReader(mock(ManyToOneRingBuffer.class))
             .epochClock(new SystemEpochClock())
             .countersManager(countersManager)
+            .eventLogger(mock(EventLogger.class))
+            .systemCounters(mock(SystemCounters.class))
             .nanoClock(nanoClock);
 
         ctx.counterValuesBuffer(counterBuffer);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/AeronStat.java
Patch:
@@ -51,7 +51,7 @@ public AeronStat()
 
         if (CncFileDescriptor.CNC_VERSION != cncVersion)
         {
-            throw new IllegalStateException("CNC version not supported: version=" + cncVersion);
+            throw new IllegalStateException("CNC version not supported: file version=" + cncVersion);
         }
 
         final AtomicBuffer labelsBuffer = CncFileDescriptor.createCounterLabelsBuffer(cncByteBuffer, metaDataBuffer);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Publication.java
Patch:
@@ -362,7 +362,7 @@ public long tryClaim(final int length, final BufferClaim bufferClaim)
                 final long result = termAppender.claim(headerWriter, length, bufferClaim);
                 newPosition = newPosition(partitionIndex, (int)termOffset, position, result);
             }
-            else if (!clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer)))
+            else if (clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer)))
             {
                 newPosition = BACK_PRESSURED;
             }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -506,7 +506,7 @@ public Context conclude()
                     }
                     else
                     {
-                        preZeroTermBuffers = Boolean.FALSE;
+                        preZeroTermBuffers = Boolean.TRUE;
                     }
                 }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -65,7 +65,7 @@ public class Configuration
     /**
      * Property name for length of the memory mapped buffers for the counters file
      */
-    public static final String COUNTER_VALUES_BUFFER_LENGTH_PROP_NAME = "aeron.dir.counters.length";
+    public static final String COUNTER_VALUES_BUFFER_LENGTH_PROP_NAME = "aeron.counters.buffer.length";
 
     /**
      * Property name for length of the initial window which must be sufficient for Bandwidth Delay Produce (BDP).

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/UdpChannel.java
Patch:
@@ -17,9 +17,9 @@
 
 import uk.co.real_logic.aeron.ErrorCode;
 import uk.co.real_logic.aeron.driver.UriUtil;
+import uk.co.real_logic.aeron.driver.exceptions.InvalidChannelException;
 import uk.co.real_logic.aeron.driver.uri.AeronUri;
 import uk.co.real_logic.aeron.driver.uri.InterfaceSearchAddress;
-import uk.co.real_logic.aeron.driver.exceptions.InvalidChannelException;
 import uk.co.real_logic.agrona.BitUtil;
 
 import java.net.*;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -506,7 +506,7 @@ public Context conclude()
                     }
                     else
                     {
-                        preZeroTermBuffers = Boolean.TRUE;
+                        preZeroTermBuffers = Boolean.FALSE;
                     }
                 }
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Publication.java
Patch:
@@ -351,7 +351,7 @@ public long tryClaim(final int length, final BufferClaim bufferClaim)
                 final long result = termAppender.claim(headerWriter, length, bufferClaim);
                 newPosition = newPosition(partitionIndex, (int)termOffset, position, result);
             }
-            else if (clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer)))
+            else if (!clientConductor.isPublicationConnected(timeOfLastStatusMessage(logMetaDataBuffer)))
             {
                 newPosition = NOT_CONNECTED;
             }

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/TransferToPing.java
Patch:
@@ -36,7 +36,7 @@ public class TransferToPing
 {
     private static final String LOCALHOST = "localhost";
 
-	public static void main(final String[] args) throws IOException
+    public static void main(final String[] args) throws IOException
     {
         final Histogram histogram = new Histogram(TimeUnit.SECONDS.toNanos(10), 3);
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/TransferToPong.java
Patch:
@@ -32,7 +32,7 @@ public class TransferToPong
 {
     private static final String LOCALHOST = "localhost";
 
-	public static void main(final String[] args) throws IOException
+    public static void main(final String[] args) throws IOException
     {
         final FileChannel receiveFileChannel = Common.createTmpFileChannel();
         final ByteBuffer receiveByteBuffer = receiveFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, MTU_LENGTH_DEFAULT);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/ImageMessageFlyweight.java
Patch:
@@ -118,7 +118,7 @@ public String channel()
         final int length = buffer.getInt(offset + CHANNEL_OFFSET, ByteOrder.LITTLE_ENDIAN);
         lengthOfChannel = SIZE_OF_INT + length;
 
-        return buffer.getStringUtf8(CHANNEL_OFFSET, length);
+        return buffer.getStringUtf8(offset + CHANNEL_OFFSET, length);
     }
 
     /**

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/SendChannelEndpoint.java
Patch:
@@ -55,7 +55,6 @@ public SendChannelEndpoint(
             udpChannel.remoteControl(),
             udpChannel.localControl(),
             udpChannel.remoteData(),
-            context.controlLossGenerator(),
             context.eventLogger());
 
         this.nakMessagesReceived = context.systemCounters().nakMessagesReceived();
@@ -149,7 +148,6 @@ public int pollForData()
         {
             final ByteBuffer receiveByteBuffer = receiveByteBuffer();
             final int length = receiveByteBuffer.position();
-            logger().logFrameIn(receiveByteBuffer, 0, length, srcAddress);
 
             final UnsafeBuffer receiveBuffer = receiveBuffer();
             if (isValidFrame(receiveBuffer, length))
@@ -161,7 +159,7 @@ public int pollForData()
         return bytesReceived;
     }
 
-    private int dispatch(final UnsafeBuffer buffer, final int length, final InetSocketAddress srcAddress)
+    protected int dispatch(final UnsafeBuffer buffer, final int length, final InetSocketAddress srcAddress)
     {
         int framesRead = 0;
         switch (frameType(buffer, 0))

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/FragmentedMessageTest.java
Patch:
@@ -21,10 +21,10 @@
 import org.junit.experimental.theories.Theory;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
-import uk.co.real_logic.aeron.logbuffer.FragmentHandler;
-import uk.co.real_logic.aeron.logbuffer.Header;
 import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.aeron.driver.ThreadingMode;
+import uk.co.real_logic.aeron.logbuffer.FragmentHandler;
+import uk.co.real_logic.aeron.logbuffer.Header;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import static org.hamcrest.CoreMatchers.is;

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/MultiDriverTest.java
Patch:
@@ -17,11 +17,11 @@
 
 import org.junit.After;
 import org.junit.Test;
+import uk.co.real_logic.aeron.driver.MediaDriver;
+import uk.co.real_logic.aeron.driver.ThreadingMode;
 import uk.co.real_logic.aeron.logbuffer.FragmentHandler;
 import uk.co.real_logic.aeron.logbuffer.Header;
 import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
-import uk.co.real_logic.aeron.driver.MediaDriver;
-import uk.co.real_logic.aeron.driver.ThreadingMode;
 import uk.co.real_logic.agrona.IoUtil;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/MultiSubscriberTest.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
+import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.aeron.logbuffer.FragmentHandler;
 import uk.co.real_logic.aeron.logbuffer.Header;
-import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import static org.hamcrest.CoreMatchers.is;

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PongTest.java
Patch:
@@ -18,11 +18,11 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import uk.co.real_logic.aeron.driver.MediaDriver;
+import uk.co.real_logic.aeron.driver.ThreadingMode;
 import uk.co.real_logic.aeron.logbuffer.FragmentHandler;
 import uk.co.real_logic.aeron.logbuffer.Header;
 import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
-import uk.co.real_logic.aeron.driver.MediaDriver;
-import uk.co.real_logic.aeron.driver.ThreadingMode;
 import uk.co.real_logic.agrona.BitUtil;
 import uk.co.real_logic.agrona.DirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NetworkPublication.java
Patch:
@@ -280,7 +280,7 @@ public boolean isUnreferencedAndFlushed(final long now)
         {
             final long senderPosition = this.senderPosition.getVolatile();
             final int activeIndex = indexByPosition(senderPosition, positionBitsToShift);
-            isFlushed = (int)(senderPosition & termLengthMask) >= logPartitions[activeIndex].tailVolatile();
+            isFlushed = (int)(senderPosition & termLengthMask) >= logPartitions[activeIndex].tailOffsetVolatile();
 
             if (isActive && isFlushed)
             {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -486,7 +486,7 @@ public static FlowControl unicastFlowControlStrategy()
         FlowControl flowControl = null;
         try
         {
-             flowControl = (FlowControl)Class.forName(UNICAST_FLOW_CONTROL_STRATEGY).newInstance();
+            flowControl = (FlowControl)Class.forName(UNICAST_FLOW_CONTROL_STRATEGY).newInstance();
         }
         catch (final Exception ex)
         {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/UdpChannel.java
Patch:
@@ -154,7 +154,7 @@ private static void validateConfiguration(final AeronUri uri)
 
     private static void validateMedia(final AeronUri uri)
     {
-        if (!UDP_MEDIA_ID.equals(uri.getMedia()))
+        if (!UDP_MEDIA_ID.equals(uri.media()))
         {
             throw new IllegalArgumentException("Udp channel only supports udp media: " + uri);
         }

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/uri/AeronUriTest.java
Patch:
@@ -91,8 +91,8 @@ private void assertParseWithParams(String uriStr, String...params)
     private void assertParseWithMedia(String uriStr, String media)
     {
         final AeronUri uri = AeronUri.parse(uriStr);
-        assertThat(uri.getScheme(), is("aeron"));
-        assertThat(uri.getMedia(), is(media));
+        assertThat(uri.scheme(), is("aeron"));
+        assertThat(uri.media(), is(media));
     }
 
     private static void assertInvalid(String string)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -312,7 +312,7 @@ private static void validateSufficientSocketBufferLengths(final Context ctx)
             if (maxSoSndBuf < Configuration.SOCKET_SNDBUF_LENGTH)
             {
                 System.err.format(
-                    "WARNING: Could not get desired SO_SNDBUF, increase %s: attempted=%d, actual=%d\n",
+                    "WARNING: Could not get desired SO_SNDBUF, adjust OS buffer to match %s: attempted=%d, actual=%d\n",
                     Configuration.SOCKET_SNDBUF_LENGTH_PROP_NAME,
                     Configuration.SOCKET_SNDBUF_LENGTH,
                     maxSoSndBuf);
@@ -324,7 +324,7 @@ private static void validateSufficientSocketBufferLengths(final Context ctx)
             if (maxSoRcvBuf < Configuration.SOCKET_RCVBUF_LENGTH)
             {
                 System.err.format(
-                    "WARNING: Could not get desired SO_RCVBUF, increase %s: attempted=%d, actual=%d\n",
+                    "WARNING: Could not get desired SO_RCVBUF, adjust OS buffer to match %s: attempted=%d, actual=%d\n",
                     Configuration.SOCKET_RCVBUF_LENGTH_PROP_NAME,
                     Configuration.SOCKET_RCVBUF_LENGTH,
                     maxSoRcvBuf);
@@ -336,7 +336,7 @@ private static void validateSufficientSocketBufferLengths(final Context ctx)
             if (ctx.mtuLength() > soSndBuf)
             {
                 throw new ConfigurationException(String.format(
-                    "MTU greater than socket SO_SNDBUF, increase %s: mtuLength=%d, SO_SNDBUF=%d",
+                    "MTU greater than socket SO_SNDBUF, adjust %s to match MTU: mtuLength=%d, SO_SNDBUF=%d",
                     Configuration.SOCKET_SNDBUF_LENGTH_PROP_NAME,
                     ctx.mtuLength(),
                     soSndBuf));

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -65,7 +65,7 @@ public class Configuration
     public static final String COUNTER_VALUES_BUFFER_LENGTH_PROP_NAME = "aeron.dir.counters.length";
 
     /**
-     * Property name for length of the initial window
+     * Property name for length of the initial window  which must be sufficient for Bandwidth Delay Produce (BDP).
      */
     public static final String INITIAL_WINDOW_LENGTH_PROP_NAME = "aeron.rcv.initial.window.length";
 
@@ -75,12 +75,12 @@ public class Configuration
     public static final String STATUS_MESSAGE_TIMEOUT_PROP_NAME = "aeron.rcv.status.message.timeout";
 
     /**
-     * Property name for SO_RCVBUF setting on UDP sockets
+     * Property name for SO_RCVBUF setting on UDP sockets which must be sufficient for Bandwidth Delay Produce (BDP).
      */
     public static final String SOCKET_RCVBUF_LENGTH_PROP_NAME = "aeron.socket.so_rcvbuf";
 
     /**
-     * Property name for SO_SNDBUF setting on UDP sockets
+     * Property name for SO_SNDBUF setting on UDP sockets  which must be sufficient for Bandwidth Delay Produce (BDP).
      */
     public static final String SOCKET_SNDBUF_LENGTH_PROP_NAME = "aeron.socket.so_sndbuf";
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/Pong.java
Patch:
@@ -84,7 +84,7 @@ public static void main(final String[] args) throws Exception
     public static void pingHandler(
         final Publication pongPublication, final DirectBuffer buffer, final int offset, final int length)
     {
-        if (pongPublication.offer(buffer, offset, length) < 0L)
+        if (pongPublication.offer(buffer, offset, length) > 0L)
         {
             return;
         }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/TermReader.java
Patch:
@@ -78,9 +78,9 @@ public static long read(
             }
             while (fragmentsRead < fragmentsLimit && offset < capacity);
         }
-        catch (final Exception ex)
+        catch (final Throwable t)
         {
-            errorHandler.onError(ex);
+            errorHandler.onError(t);
         }
 
         return pack(offset, fragmentsRead);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Publication.java
Patch:
@@ -254,7 +254,8 @@ public long offer(final DirectBuffer buffer)
      * @param buffer containing message.
      * @param offset offset in the buffer at which the encoded message begins.
      * @param length in bytes of the encoded message.
-     * @return The new stream position, otherwise {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED} or {@link #ADMIN_ACTION}.
+     * @return The new stream position, otherwise a negative error value {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED} or
+     * {@link #ADMIN_ACTION}.
      */
     public long offer(final DirectBuffer buffer, final int offset, final int length)
     {

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/TermAppender.java
Patch:
@@ -65,7 +65,7 @@ public class TermAppender
 
     private final UnsafeBuffer termBuffer;
     private final UnsafeBuffer metaDataBuffer;
-    private final MutableDirectBuffer defaultHeader;
+    private final UnsafeBuffer defaultHeader;
 
     /**
      * Construct a view over a term buffer and state buffer for appending frames.
@@ -75,7 +75,7 @@ public class TermAppender
      * @param defaultHeader  to be applied for each frame logged.
      */
     public TermAppender(
-        final UnsafeBuffer termBuffer, final UnsafeBuffer metaDataBuffer, final MutableDirectBuffer defaultHeader)
+        final UnsafeBuffer termBuffer, final UnsafeBuffer metaDataBuffer, final UnsafeBuffer defaultHeader)
     {
         this.termBuffer = termBuffer;
         this.metaDataBuffer = metaDataBuffer;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -15,7 +15,6 @@
  */
 package uk.co.real_logic.aeron.protocol;
 
-import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import java.nio.ByteOrder;
@@ -165,7 +164,7 @@ public int dataOffset()
      * @param termId    for the header
      * @return byte array containing the header
      */
-    public static MutableDirectBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId)
+    public static UnsafeBuffer createDefaultHeader(final int sessionId, final int streamId, final int termId)
     {
         final UnsafeBuffer buffer = new UnsafeBuffer(new byte[HEADER_LENGTH]);
 

File: aeron-client/src/test/java/uk/co/real_logic/aeron/logbuffer/TermAppenderTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
-import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import java.nio.ByteBuffer;
@@ -39,7 +38,7 @@ public class TermAppenderTest
     private static final int META_DATA_BUFFER_LENGTH = TERM_META_DATA_LENGTH;
     private static final int MAX_FRAME_LENGTH = 1024;
     private static final int MAX_PAYLOAD_LENGTH = MAX_FRAME_LENGTH - HEADER_LENGTH;
-    private static final MutableDirectBuffer DEFAULT_HEADER = new UnsafeBuffer(ByteBuffer.allocateDirect(HEADER_LENGTH));
+    private static final UnsafeBuffer DEFAULT_HEADER = new UnsafeBuffer(ByteBuffer.allocateDirect(HEADER_LENGTH));
 
     private final UnsafeBuffer termBuffer = spy(new UnsafeBuffer(ByteBuffer.allocateDirect(TERM_BUFFER_LENGTH)));
     private final UnsafeBuffer metaDataBuffer = mock(UnsafeBuffer.class);

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/SenderTest.java
Patch:
@@ -29,7 +29,6 @@
 import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.aeron.protocol.HeaderFlyweight;
 import uk.co.real_logic.aeron.protocol.SetupFlyweight;
-import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 import uk.co.real_logic.agrona.concurrent.OneToOneConcurrentArrayQueue;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -61,7 +60,7 @@ public class SenderTest
     private static final int INITIAL_TERM_ID = 3;
     private static final byte[] PAYLOAD = "Payload is here!".getBytes();
 
-    private static final MutableDirectBuffer HEADER =
+    private static final UnsafeBuffer HEADER =
         DataHeaderFlyweight.createDefaultHeader(SESSION_ID, STREAM_ID, INITIAL_TERM_ID);
     private static final int ALIGNED_FRAME_LENGTH = align(HEADER.capacity() + PAYLOAD.length, FRAME_ALIGNMENT);
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/TermAppender.java
Patch:
@@ -330,12 +330,12 @@ private void applyDefaultHeader(
         if (ByteOrder.nativeOrder() == LITTLE_ENDIAN)
         {
             lengthVersionFlagsType = defaultHeaderVersionFlagsType | ((-frameLength) & 0xFFFF_FFFFL);
-            termOffsetAndSessionId = defaultHeaderSessionId | (frameOffset & 0xFFFF_FFFFL);
+            termOffsetAndSessionId = defaultHeaderSessionId | frameOffset;
         }
         else
         {
             lengthVersionFlagsType = (((reverseBytes(-frameLength)) & 0xFFFF_FFFFL) << 32) | defaultHeaderVersionFlagsType;
-            termOffsetAndSessionId = (((reverseBytes(frameOffset)) & 0xFFFF_FFFFL) << 32) | defaultHeaderSessionId;
+            termOffsetAndSessionId = (((long)reverseBytes(frameOffset)) << 32) | defaultHeaderSessionId;
         }
 
         buffer.putLongOrdered(frameOffset + FRAME_LENGTH_FIELD_OFFSET, lengthVersionFlagsType);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Publication.java
Patch:
@@ -228,7 +228,7 @@ public long offer(final DirectBuffer buffer)
      * @param buffer containing message.
      * @param offset offset in the buffer at which the encoded message begins.
      * @param length in bytes of the encoded message.
-     * @return The new stream position on success, otherwise {@link #BACK_PRESSURED} or {@link #NOT_CONNECTED}.
+     * @return The new stream position, otherwise {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED} or {@link #ADMIN_ACTION}.
      * @throws IllegalStateException if the publication is closed.
      */
     public long offer(final DirectBuffer buffer, final int offset, final int length)
@@ -266,7 +266,7 @@ else if (0 == limit)
      * <pre>{@code
      *     final BufferClaim bufferClaim = new BufferClaim(); // Can be stored and reused to avoid allocation
      *
-     *     if (publication.tryClaim(messageLength, bufferClaim))
+     *     if (publication.tryClaim(messageLength, bufferClaim) > 0L)
      *     {
      *         try
      *         {
@@ -284,7 +284,7 @@ else if (0 == limit)
      *
      * @param length      of the range to claim, in bytes..
      * @param bufferClaim to be populated if the claim succeeds.
-     * @return The new stream position on success, otherwise {@link #BACK_PRESSURED} or {@link #NOT_CONNECTED}.
+     * @return The new stream position, otherwise {@link #NOT_CONNECTED}, {@link #BACK_PRESSURED} or {@link #ADMIN_ACTION}.
      * @throws IllegalArgumentException if the length is greater than max payload length within an MTU.
      * @throws IllegalStateException if the publication is closed.
      * @see BufferClaim#commit()

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/LogBufferDescriptor.java
Patch:
@@ -269,12 +269,12 @@ public static int mtuLength(final UnsafeBuffer logMetaDataBuffer)
     /**
      * Set the MTU length used for this log.
      *
-     * @param logMetaDaraBuffer containing the meta data.
+     * @param logMetaDataBuffer containing the meta data.
      * @param mtuLength         value to be set.
      */
-    public static void mtuLength(final UnsafeBuffer logMetaDaraBuffer, final int mtuLength)
+    public static void mtuLength(final UnsafeBuffer logMetaDataBuffer, final int mtuLength)
     {
-        logMetaDaraBuffer.putInt(LOG_MTU_LENGTH_OFFSET, mtuLength);
+        logMetaDataBuffer.putInt(LOG_MTU_LENGTH_OFFSET, mtuLength);
     }
 
     /**

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/FragmentedMessageTest.java
Patch:
@@ -66,7 +66,7 @@ public void shouldReceivePublishedMessage(final String channel, final ThreadingM
         final FragmentAssembler adapter = new FragmentAssembler(mockFragmentHandler);
 
         try (final MediaDriver ignore = MediaDriver.launch(ctx);
-             final Aeron client = Aeron.connect(new Aeron.Context());
+             final Aeron client = Aeron.connect();
              final Publication publication = client.addPublication(channel, STREAM_ID);
              final Subscription subscription = client.addSubscription(channel, STREAM_ID))
         {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -157,7 +157,7 @@ private MediaDriver(final Context ctx)
         ctx.fromSenderDriverConductorProxy().driverConductor(conductor);
         ctx.toDriverCommands().consumerHeartbeatTime(ctx.epochClock().time());
 
-        final AtomicCounter errorCounter = ctx.systemCounters().driverExceptions();
+        final AtomicCounter errorCounter = ctx.systemCounters().errors();
         final ErrorHandler errorHandler = ctx.errorHandler();
 
         switch (ctx.threadingMode)

File: aeron-client/src/main/java/uk/co/real_logic/aeron/ClientConductor.java
Patch:
@@ -216,7 +216,8 @@ public void onAvailableImage(
                             logBuffersFactory.map(logFileName),
                             errorHandler,
                             correlationId,
-                            sourceIdentity);
+                            sourceIdentity,
+                            subscription);
 
                         subscription.addImage(image);
 

File: aeron-client/src/test/java/uk/co/real_logic/aeron/PublicationTest.java
Patch:
@@ -95,6 +95,7 @@ public void shouldEnsureThePublicationIsOpenBeforeReadingPosition()
     public void shouldEnsureThePublicationIsOpenBeforeOffer()
     {
         publication.close();
+        assertTrue(publication.isClosed());
         publication.offer(atomicSendBuffer);
     }
 

File: aeron-client/src/test/java/uk/co/real_logic/aeron/SubscriptionTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.nio.ByteBuffer;
 
+import static junit.framework.TestCase.assertTrue;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Matchers.any;
@@ -57,11 +58,11 @@ public void setUp()
         subscription = new Subscription(conductor, CHANNEL, STREAM_ID_1, SUBSCRIPTION_CORRELATION_ID);
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void shouldEnsureTheSubscriptionIsOpenWhenPolling()
     {
         subscription.close();
-        subscription.poll(fragmentHandler, FRAGMENT_COUNT_LIMIT);
+        assertTrue(subscription.isClosed());
     }
 
     @Test

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -98,8 +98,8 @@ public class Configuration
     /**
      * Property name for window limit on subscription side
      */
-    public static final String SUBSCRIPTION_TERM_WINDOW_ENGTH_PROP_NAME = "aeron.subscription.term.window.length";
-    public static final int SUBSCRIPTION_TERM_WINDOW_LENGTH = getInteger(SUBSCRIPTION_TERM_WINDOW_ENGTH_PROP_NAME, 0);
+    public static final String SUBSCRIPTION_TERM_WINDOW_LENGTH_PROP_NAME = "aeron.subscription.term.window.length";
+    public static final int SUBSCRIPTION_TERM_WINDOW_LENGTH = getInteger(SUBSCRIPTION_TERM_WINDOW_LENGTH_PROP_NAME, 0);
 
     /**
      * Property name for client liveness timeout

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedBufferClaimIpcThroughput.java
Patch:
@@ -52,10 +52,8 @@ public static void main(final String[] args) throws Exception
             .threadingMode(ThreadingMode.SHARED)
             .sharedIdleStrategy(new NoOpIdleStrategy());
 
-        final Aeron.Context context = new Aeron.Context();
-
         try (final MediaDriver ignore = MediaDriver.launch(ctx);
-             final Aeron aeron = Aeron.connect(context);
+             final Aeron aeron = Aeron.connect();
              final Publication publication = aeron.addPublication(CHANNEL, STREAM_ID);
              final Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedIpcThroughput.java
Patch:
@@ -51,10 +51,8 @@ public static void main(final String[] args) throws Exception
             .threadingMode(ThreadingMode.SHARED)
             .sharedIdleStrategy(new NoOpIdleStrategy());
 
-        final Aeron.Context context = new Aeron.Context();
-
         try (final MediaDriver ignore = MediaDriver.launch(ctx);
-             final Aeron aeron = Aeron.connect(context);
+             final Aeron aeron = Aeron.connect();
              final Publication publication = aeron.addPublication(CHANNEL, STREAM_ID);
              final Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID))
         {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DirectPublication.java
Patch:
@@ -34,6 +34,7 @@ public class DirectPublication implements DriverManagedResource
 {
     private final long correlationId;
     private final long tripGain;
+    private long tripLimit;
     private final int sessionId;
     private final int streamId;
     private final int termWindowLength;
@@ -42,9 +43,8 @@ public class DirectPublication implements DriverManagedResource
     private final LogBufferPartition[] logPartitions;
     private final UnsafeBuffer logMetaDataBuffer;
     private final ArrayList<ReadablePosition> subscriberPositions = new ArrayList<>();
-    private final Position publisherLimit;
 
-    private long tripLimit;
+    private final Position publisherLimit;
     private int refCount = 0;
     private boolean reachedEndOfLife = false;
 
@@ -70,7 +70,7 @@ public DirectPublication(
         this.positionBitsToShift = Integer.numberOfTrailingZeros(termLength);
         this.rawLog = rawLog;
         this.publisherLimit = publisherLimit;
-        this.tripGain = this.termWindowLength / 4;
+        this.tripGain = this.termWindowLength / 8;
         this.tripLimit = 0;
 
         this.logMetaDataBuffer = rawLog.logMetaData();

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedBufferClaimIpcThroughput.java
Patch:
@@ -152,7 +152,8 @@ public void run()
                 }
             }
 
-            System.out.format("Publisher back pressure ratio: %f\n", (totalMessageCount / (double)backPressureCount));
+            final double backPressureRatio = backPressureCount / (double)totalMessageCount;
+            System.out.format("Publisher back pressure ratio: %f\n", backPressureRatio);
         }
     }
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedIpcThroughput.java
Patch:
@@ -145,7 +145,8 @@ public void run()
                 }
             }
 
-            System.out.format("Publisher back pressure ratio: %f\n", (totalMessageCount / (double)backPressureCount));
+            final double backPressureRatio = backPressureCount / (double)totalMessageCount;
+            System.out.format("Publisher back pressure ratio: %f\n", backPressureRatio);
         }
     }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/AeronClient.java
Patch:
@@ -80,12 +80,12 @@ public void delete()
         // nothing to do
     }
 
-    public int incrRef()
+    public int incRef()
     {
         return 0;
     }
 
-    public int decrRef()
+    public int decRef()
     {
         return 0;
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DirectPublication.java
Patch:
@@ -209,12 +209,12 @@ public void delete()
         close();
     }
 
-    public int incrRef()
+    public int incRef()
     {
         return ++refCount;
     }
 
-    public int decrRef()
+    public int decRef()
     {
         return --refCount;
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NetworkPublication.java
Patch:
@@ -469,7 +469,7 @@ public void delete()
         // close is done once sender thread has removed
     }
 
-    public int decrRef()
+    public int decRef()
     {
         final int count = --refCount;
 
@@ -481,7 +481,7 @@ public int decrRef()
         return count;
     }
 
-    public int incrRef()
+    public int incRef()
     {
         return ++refCount;
     }

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedBufferClaimIpcThroughput.java
Patch:
@@ -147,7 +147,8 @@ public void run()
                         }
                     }
 
-                    bufferClaim.buffer().putInt(0, i); // Example field write
+                    final int offset = bufferClaim.offset();
+                    bufferClaim.buffer().putInt(offset, i); // Example field write
                     // Real app would write whatever fields are required via a flyweight like SBE
 
                     bufferClaim.commit();

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -117,8 +117,8 @@ public DriverConductor(final Context ctx)
         mtuLength = ctx.mtuLength();
         initialWindowLength = ctx.initialWindowLength();
         termBufferLength = ctx.termBufferLength();
-        unicastFlowControl = ctx.unicastSenderFlowControl();
-        multicastFlowControl = ctx.multicastSenderFlowControl();
+        unicastFlowControl = ctx.unicastSenderFlowControlSupplier();
+        multicastFlowControl = ctx.multicastSenderFlowControlSupplier();
         countersManager = ctx.countersManager();
         countersBuffer = ctx.counterValuesBuffer();
         epochClock = ctx.epochClock();

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -117,8 +117,8 @@ public void setUp() throws Exception
             new UnsafeBuffer(ByteBuffer.allocateDirect(BUFFER_LENGTH)), counterBuffer);
 
         final MediaDriver.Context ctx = new MediaDriver.Context()
-            .unicastSenderFlowControl(UnicastFlowControl::new)
-            .multicastSenderFlowControl(MaxMulticastFlowControl::new)
+            .unicastSenderFlowControlSupplier(UnicastFlowControl::new)
+            .multicastSenderFlowControlSupplier(MaxMulticastFlowControl::new)
                 // TODO: remove
             .toConductorFromReceiverCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))
             .toConductorFromSenderCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Receiver.java
Patch:
@@ -61,7 +61,7 @@ public int doWork() throws Exception
         for (int i = images.size() - 1; i >= 0; i--)
         {
             final NetworkedImage image = images.get(i);
-            if (!image.checkForActivity(now, Configuration.IMAGE_LIVENESS_TIMEOUT_NS))
+            if (!image.checkForActivity(now))
             {
                 image.removeFromDispatcher();
                 images.remove(i);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -236,12 +236,12 @@ public Context conclude()
 
                 if (null == newImageHandler)
                 {
-                    newImageHandler = (image, channel, streamId, sessionId, joiningPosition, sourceIdentity) -> { };
+                    newImageHandler = (image, subscription, joiningPosition, sourceIdentity) -> { };
                 }
 
                 if (null == inactiveImageHandler)
                 {
-                    inactiveImageHandler = (image, channel, streamId, sessionId, position) -> { };
+                    inactiveImageHandler = (image, subscription, position) -> { };
                 }
             }
             catch (final Exception ex)

File: aeron-client/src/main/java/uk/co/real_logic/aeron/ClientConductor.java
Patch:
@@ -217,8 +217,7 @@ public void onNewImage(
 
                         subscription.addImage(image);
 
-                        newImageHandler.onNewImage(
-                            image, subscription.channel(), streamId, sessionId, joiningPosition, sourceIdentity);
+                        newImageHandler.onNewImage(image, subscription, joiningPosition, sourceIdentity);
                     }
                 }
             });
@@ -238,7 +237,7 @@ public void onInactiveImage(final int streamId, final int sessionId, final long
                 final Image image = subscription.removeImage(correlationId);
                 if (null != image)
                 {
-                    inactiveImageHandler.onInactiveImage(image, subscription.channel(), streamId, sessionId, position);
+                    inactiveImageHandler.onInactiveImage(image, subscription, position);
                 }
             });
     }

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/MultiDriverTest.java
Patch:
@@ -128,7 +128,7 @@ public void shouldJoinExistingStreamWithLockStepSendingReceiving() throws Except
         final int numMessagesToSendPostJoin = NUM_MESSAGES_PER_TERM;
         final CountDownLatch newImageLatch = new CountDownLatch(1);
 
-        aeronBContext.newImageHandler((image, channel, streamId, sessionId, position, info) -> newImageLatch.countDown());
+        aeronBContext.newImageHandler((image, subscription, position, info) -> newImageLatch.countDown());
 
         launch();
 

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubAndSubTest.java
Patch:
@@ -615,7 +615,7 @@ public void shouldReceivePublishedMessageOneForOneWithReSubscription(final Strin
 
         context.termBufferLength(termBufferLength);
         subscribingAeronContext.newImageHandler(
-            (image, channelStr, streamId, sessionId, position, info) ->
+            (image, subscription, position, info) ->
             {
                 if (2 == stage[0])
                 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -681,9 +681,7 @@ private void onCheckPublications(final long now)
                 logger.logPublicationRemoval(
                     channelEndpoint.originalUriString(), publication.sessionId(), publication.streamId());
 
-                channelEndpoint.removePublication(publication);
                 publications.remove(i);
-
                 senderProxy.removePublication(publication);
 
                 if (channelEndpoint.sessionCount() == 0)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -747,6 +747,8 @@ private void onCheckNetworkedImages(final long now)
                             image.streamId(),
                             image.rebuildPosition(),
                             image.channelUriString());
+
+                        receiverProxy.removeCooldown(image.channelEndpoint(), image.sessionId(), image.streamId());
                     }
                     break;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/FileBlockHandler.java
Patch:
@@ -27,8 +27,8 @@ public interface FileBlockHandler
      * Notification of an available block of fragments.
      *
      * @param fileChannel containing the block of fragments.
-     * @param offset      at which the block begins.
-     * @param length      of the block in bytes.
+     * @param offset      at which the block begins, including any frame headers.
+     * @param length      of the block in bytes, including any frame headers.
      * @param sessionId   of the stream of fragments.
      * @param termId      of the stream of fragments.
      */

File: aeron-client/src/test/java/uk/co/real_logic/aeron/SubscriptionTest.java
Patch:
@@ -127,4 +127,5 @@ public void shouldReadDataFromMultipleSources()
 
         assertThat(subscription.poll(fragmentHandler, FRAGMENT_COUNT_LIMIT), is(2));
     }
+
 }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Connection.java
Patch:
@@ -132,7 +132,7 @@ public int poll(final FragmentHandler fragmentHandler, final int fragmentLimit)
      * @param blockLengthLimit up to which a block may be in length.
      * @return the number of bytes that have been consumed.
      */
-    public int poll(final BlockHandler blockHandler, final int blockLengthLimit)
+    public int blockPoll(final BlockHandler blockHandler, final int blockLengthLimit)
     {
         final long position = subscriberPosition.get();
         final int termOffset = (int)position & termLengthMask;
@@ -167,7 +167,7 @@ public int poll(final BlockHandler blockHandler, final int blockLengthLimit)
      * @param blockLengthLimit up to which a block may be in length.
      * @return the number of bytes that have been consumed.
      */
-    public int poll(final FileBlockHandler fileBlockHandler, final int blockLengthLimit)
+    public int filePoll(final FileBlockHandler fileBlockHandler, final int blockLengthLimit)
     {
         final long position = subscriberPosition.get();
         final int termOffset = (int)position & termLengthMask;

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedPingPong.java
Patch:
@@ -64,7 +64,7 @@ public static void main(final String[] args) throws Exception
             .senderIdleStrategy(new NoOpIdleStrategy())
             .dirsDeleteOnExit(true);
 
-        try (final MediaDriver ignored = MediaDriver.launchEmbedded(ctx))
+        try (final MediaDriver ignored = MediaDriver.launch(ctx))
         {
             final Thread pongThread = startPong(ignored.contextDirName());
             pongThread.start();

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronThroughput.java
Patch:
@@ -113,7 +113,7 @@ public static void main(final String[] args) throws Exception
         final FragmentHandler rateReporterHandler = rateReporterHandler(reporter);
         final ExecutorService executor = Executors.newFixedThreadPool(2);
 
-        final String embeddedDirName = CommonContext.generateEmbeddedDirName();
+        final String embeddedDirName = CommonContext.generateRandomDirName();
         ctx.dirName(embeddedDirName);
         final Aeron.Context context = new Aeron.Context();
         context.dirName(embeddedDirName);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/ConnectionBuffersReadyFlyweight.java
Patch:
@@ -302,7 +302,7 @@ public ConnectionBuffersReadyFlyweight sourceIdentity(final String value)
     public int length()
     {
         final int sourceIdentityOffset = sourceIdentityOffset();
-        return sourceIdentityOffset + buffer().getInt(sourceIdentityOffset, LITTLE_ENDIAN);
+        return sourceIdentityOffset + buffer().getInt(sourceIdentityOffset, LITTLE_ENDIAN) + SIZE_OF_INT;
     }
 
     private int subscriberPositionOffset(final int index)

File: aeron-client/src/main/java/uk/co/real_logic/aeron/ClientConductor.java
Patch:
@@ -145,7 +145,7 @@ public synchronized Subscription addSubscription(final String channel, final int
         final long correlationId = driverProxy.addSubscription(channel, streamId);
         final long timeout = timerWheel.clock().nanoTime() + driverTimeoutNs;
 
-        final Subscription subscription = new Subscription(this, channel, streamId, correlationId, errorHandler);
+        final Subscription subscription = new Subscription(this, channel, streamId, correlationId);
         activeSubscriptions.add(subscription);
 
         doWorkUntil(correlationId, timeout, channel);
@@ -209,7 +209,8 @@ public void onNewConnection(
                                     joiningPosition,
                                     correlationId,
                                     new UnsafeBufferPosition(counterValuesBuffer, msg.subscriberPositionId(i)),
-                                    logBuffersFactory.map(logFileName)));
+                                    logBuffersFactory.map(logFileName),
+                                    errorHandler));
 
                             if (null != newConnectionHandler)
                             {

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ErrorCodeTest.java
Patch:
@@ -26,7 +26,7 @@ public class ErrorCodeTest
     public void errorCodesShouldBeIndexes()
     {
         final ErrorCode[] values = ErrorCode.values();
-        for (short i = 0; i < values.length; i++)
+        for (int i = 0; i < values.length; i++)
         {
             assertThat(ErrorCode.get(i).value(), is(i));
         }

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -324,7 +324,7 @@ public void shouldErrorOnRemoveChannelOnUnknownSessionId() throws Exception
         driverConductor.doWork();
 
         verify(senderProxy).newPublication(any(), any(), any());
-        verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());
+        verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any());
         verify(mockClientProxy, never()).operationSucceeded(anyLong());
         verify(mockConductorLogger).logException(any());
     }
@@ -339,7 +339,7 @@ public void shouldErrorOnRemoveChannelOnUnknownStreamId() throws Exception
 
         verify(senderProxy).newPublication(any(), any(), any());
         verify(senderProxy, never()).removePublication(any());
-        verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());
+        verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any());
         verify(mockClientProxy, never()).operationSucceeded(anyLong());
         verify(mockConductorLogger).logException(any());
     }
@@ -354,7 +354,7 @@ public void shouldErrorOnAddSubscriptionWithInvalidUri() throws Exception
 
         verify(senderProxy, never()).newPublication(any(), any(), any());
 
-        verify(mockClientProxy).onError(eq(INVALID_CHANNEL), argThat(not(isEmptyOrNullString())), any(), anyInt());
+        verify(mockClientProxy).onError(eq(INVALID_CHANNEL), argThat(not(isEmptyOrNullString())), any());
         verify(mockClientProxy, never()).operationSucceeded(anyLong());
         verify(mockConductorLogger).logException(any());
     }

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -23,6 +23,7 @@
 import uk.co.real_logic.aeron.protocol.ErrorFlyweight;
 import uk.co.real_logic.aeron.exceptions.DriverTimeoutException;
 import uk.co.real_logic.aeron.exceptions.RegistrationException;
+import uk.co.real_logic.agrona.ErrorHandler;
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.TimerWheel;
 import uk.co.real_logic.agrona.concurrent.EpochClock;
@@ -31,7 +32,6 @@
 import uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver;
 
 import java.nio.ByteBuffer;
-import java.util.function.Consumer;
 import java.util.function.Function;
 
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -83,7 +83,7 @@ public class ClientConductorTest
 
     private final EpochClock epochClock = new SystemEpochClock();
     private final TimerWheel timerWheel = mock(TimerWheel.class);
-    private final Consumer<Throwable> mockClientErrorHandler = Throwable::printStackTrace;
+    private final ErrorHandler mockClientErrorHandler = Throwable::printStackTrace;
 
     private DriverProxy driverProxy;
     private ClientConductor conductor;

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ConnectionTest.java
Patch:
@@ -22,12 +22,12 @@
 import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.aeron.protocol.HeaderFlyweight;
 import uk.co.real_logic.aeron.logbuffer.*;
+import uk.co.real_logic.agrona.ErrorHandler;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 import uk.co.real_logic.agrona.concurrent.status.AtomicLongPosition;
 import uk.co.real_logic.agrona.concurrent.status.Position;
 
 import java.nio.ByteBuffer;
-import java.util.function.Consumer;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
@@ -63,7 +63,7 @@ public class ConnectionTest
     private final FragmentHandler mockFragmentHandler = mock(FragmentHandler.class);
     private final Position position = spy(new AtomicLongPosition());
     private final LogBuffers logBuffers = mock(LogBuffers.class);
-    private final Consumer<Throwable> errorHandler = mock(Consumer.class);
+    private final ErrorHandler errorHandler = mock(ErrorHandler.class);
 
     private UnsafeBuffer[] atomicBuffers = new UnsafeBuffer[(PARTITION_COUNT * 2) + 1];
     private UnsafeBuffer[] termBuffers = new UnsafeBuffer[PARTITION_COUNT];

File: aeron-client/src/test/java/uk/co/real_logic/aeron/SubscriptionTest.java
Patch:
@@ -21,10 +21,10 @@
 import uk.co.real_logic.aeron.logbuffer.FrameDescriptor;
 import uk.co.real_logic.aeron.logbuffer.Header;
 import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
+import uk.co.real_logic.agrona.ErrorHandler;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import java.nio.ByteBuffer;
-import java.util.function.Consumer;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -42,7 +42,7 @@ public class SubscriptionTest
     private static final int HEADER_LENGTH = DataHeaderFlyweight.HEADER_LENGTH;
 
     private final UnsafeBuffer atomicReadBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(READ_BUFFER_CAPACITY));
-    private final Consumer<Throwable> errorHandler = mock(Consumer.class);
+    private final ErrorHandler errorHandler = mock(ErrorHandler.class);
     private final ClientConductor conductor = mock(ClientConductor.class);
     private final FragmentHandler fragmentHandler = mock(FragmentHandler.class);
     private final Connection connectionOneMock = mock(Connection.class);

File: aeron-client/src/test/java/uk/co/real_logic/aeron/logbuffer/TermReaderTest.java
Patch:
@@ -20,10 +20,9 @@
 import org.mockito.InOrder;
 import org.mockito.Mockito;
 import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
+import uk.co.real_logic.agrona.ErrorHandler;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
-import java.util.function.Consumer;
-
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.*;
@@ -39,7 +38,7 @@ public class TermReaderTest
 
     private final Header header = new Header(INITIAL_TERM_ID, TERM_BUFFER_CAPACITY);
     private final UnsafeBuffer termBuffer = mock(UnsafeBuffer.class);
-    private final Consumer<Throwable> errorHandler = mock(Consumer.class);
+    private final ErrorHandler errorHandler = mock(ErrorHandler.class);
     private final FragmentHandler handler = Mockito.mock(FragmentHandler.class);
 
     @Before

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/ReceiverTest.java
Patch:
@@ -34,6 +34,7 @@
 import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.media.TransportPoller;
 import uk.co.real_logic.aeron.driver.media.UdpChannel;
+import uk.co.real_logic.agrona.ErrorHandler;
 import uk.co.real_logic.agrona.TimerWheel;
 import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 import uk.co.real_logic.agrona.concurrent.NanoClock;
@@ -49,7 +50,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Consumer;
 
 import static java.lang.Integer.numberOfTrailingZeros;
 import static junit.framework.TestCase.assertTrue;
@@ -91,8 +91,7 @@ public class ReceiverTest
     private final ByteBuffer setupFrameBuffer = ByteBuffer.allocateDirect(SetupFlyweight.HEADER_LENGTH);
     private final UnsafeBuffer setupBuffer = new UnsafeBuffer(setupFrameBuffer);
 
-    @SuppressWarnings("unchecked")
-    private final Consumer<Throwable> mockErrorHandler = mock(Consumer.class);
+    private final ErrorHandler mockErrorHandler = mock(ErrorHandler.class);
 
     private final DataHeaderFlyweight dataHeader = new DataHeaderFlyweight();
     private final StatusMessageFlyweight statusHeader = new StatusMessageFlyweight();

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -632,7 +632,7 @@ private void onAddSubscription(final String channel, final int streamId, final l
 
         connections
             .stream()
-            .filter((connection) -> connection.matches(channelEndpoint, streamId))
+            .filter((connection) -> connection.matches(channelEndpoint, streamId) && (connection.subscriberCount() > 0))
             .forEach(
                 (connection) ->
                 {

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -565,6 +565,8 @@ public void shouldAlwaysGiveNetworkConnectionCorrelationIdToClientCallbacks() th
 
         final NetworkConnection networkConnection = captor.getValue();
 
+        networkConnection.status(NetworkConnection.Status.ACTIVE);
+
         writeSubscriptionMessage(
             ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, fromClientCommands.nextCorrelationId());
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -647,7 +647,7 @@ private void onAddSubscription(final String channel, final int streamId, final l
                         connection.sessionId(),
                         connection.rebuildPosition(),
                         connection.rawLog(),
-                        correlationId,
+                        connection.correlationId(),
                         Collections.singletonList(new SubscriberPosition(subscription, position)),
                         generateSourceIdentity(connection.sourceAddress()));
                 });

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/UdpChannelTransport.java
Patch:
@@ -89,8 +89,8 @@ public UdpChannelTransport(
         }
         catch (final IOException ex)
         {
-            throw new RuntimeException(
-                String.format("channel \"%s\" : %s", udpChannel.originalUriString(), ex.toString()), ex);
+            throw new RuntimeException(String.format(
+                "channel \"%s\" : %s", udpChannel.originalUriString(), ex.toString()), ex);
         }
     }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -633,7 +633,8 @@ private void onAddSubscription(final String channel, final int streamId, final l
 
         connections
             .stream()
-            .filter((connection) -> connection.matches(channelEndpoint, streamId) && connection.status() == NetworkConnection.Status.ACTIVE)
+            .filter((connection) -> connection.matches(channelEndpoint, streamId) &&
+                    connection.status() == NetworkConnection.Status.ACTIVE)
             .forEach(
                 (connection) ->
                 {

File: aeron-client/src/main/java/uk/co/real_logic/aeron/BufferBuilder.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
+import uk.co.real_logic.agrona.BitUtil;
 import uk.co.real_logic.agrona.DirectBuffer;
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
-import uk.co.real_logic.agrona.BitUtil;
 
 import java.util.Arrays;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/CncFileDescriptor.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
 import uk.co.real_logic.agrona.BitUtil;
 import uk.co.real_logic.agrona.DirectBuffer;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/CommonContext.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
 import uk.co.real_logic.agrona.IoUtil;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/DriverListener.java
Patch:
@@ -15,8 +15,7 @@
  */
 package uk.co.real_logic.aeron;
 
-import uk.co.real_logic.aeron.common.ErrorCode;
-import uk.co.real_logic.aeron.common.command.ConnectionBuffersReadyFlyweight;
+import uk.co.real_logic.aeron.command.ConnectionBuffersReadyFlyweight;
 
 /**
  * Callback interface for receiving messages from the driver.

File: aeron-client/src/main/java/uk/co/real_logic/aeron/ErrorCode.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
 /**
  * Error codes between media driver and client and the on-wire protocol.

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Flyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/ConnectionMessageFlyweight.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
-import uk.co.real_logic.aeron.common.Flyweight;
+import uk.co.real_logic.aeron.Flyweight;
 
 import java.nio.ByteOrder;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/ControlProtocolEvents.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
 /**
  * List of event types used in the control protocol between the

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/CorrelatedMessageFlyweight.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
-import uk.co.real_logic.aeron.common.Flyweight;
+import uk.co.real_logic.aeron.Flyweight;
 
 import java.nio.ByteOrder;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/PublicationBuffersReadyFlyweight.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
-import uk.co.real_logic.aeron.common.Flyweight;
+import uk.co.real_logic.aeron.Flyweight;
 
 import java.nio.ByteOrder;
 
@@ -26,7 +26,7 @@
 /**
  * Message to denote that new buffers have been setup for a publication.
  *
- * @see uk.co.real_logic.aeron.common.command.ControlProtocolEvents
+ * @see ControlProtocolEvents
  *
  * 0                   1                   2                   3
  * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/PublicationMessageFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
 import java.nio.ByteOrder;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/RemoveMessageFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
@@ -61,6 +61,6 @@ public RemoveMessageFlyweight registrationId(final long registrationId)
 
     public static int length()
     {
-        return CorrelatedMessageFlyweight.LENGTH + SIZE_OF_LONG;
+        return LENGTH + SIZE_OF_LONG;
     }
 }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/command/SubscriptionMessageFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.command;
+package uk.co.real_logic.aeron.command;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_INT;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/exceptions/RegistrationException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package uk.co.real_logic.aeron.exceptions;
 
-import uk.co.real_logic.aeron.common.ErrorCode;
+import uk.co.real_logic.aeron.ErrorCode;
 
 /**
  * Caused when a error occurs during addition or release of {@link uk.co.real_logic.aeron.Publication}s

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/BufferClaim.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.concurrent.logbuffer;
+package uk.co.real_logic.aeron.logbuffer;
 
-import uk.co.real_logic.aeron.common.protocol.DataHeaderFlyweight;
+import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.AtomicBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/logbuffer/TermRebuilder.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.concurrent.logbuffer;
+package uk.co.real_logic.aeron.logbuffer;
 
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.FrameDescriptor.*;
+import static uk.co.real_logic.aeron.logbuffer.FrameDescriptor.frameLengthOrdered;
 
 /**
  * Rebuild a term buffer based on incoming frames that can be out-of-order.

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/DataHeaderFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.protocol;
+package uk.co.real_logic.aeron.protocol;
 
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -169,9 +169,9 @@ public static MutableDirectBuffer createDefaultHeader(final int sessionId, final
     {
         final UnsafeBuffer buffer = new UnsafeBuffer(new byte[HEADER_LENGTH]);
 
-        buffer.putByte(VERSION_FIELD_OFFSET, HeaderFlyweight.CURRENT_VERSION);
+        buffer.putByte(VERSION_FIELD_OFFSET, CURRENT_VERSION);
         buffer.putByte(FLAGS_FIELD_OFFSET, (byte) BEGIN_AND_END_FLAGS);
-        buffer.putShort(TYPE_FIELD_OFFSET, (short)HeaderFlyweight.HDR_TYPE_DATA, ByteOrder.LITTLE_ENDIAN);
+        buffer.putShort(TYPE_FIELD_OFFSET, (short)HDR_TYPE_DATA, ByteOrder.LITTLE_ENDIAN);
         buffer.putInt(SESSION_ID_FIELD_OFFSET, sessionId, ByteOrder.LITTLE_ENDIAN);
         buffer.putInt(STREAM_ID_FIELD_OFFSET, streamId, ByteOrder.LITTLE_ENDIAN);
         buffer.putInt(TERM_ID_FIELD_OFFSET, termId, ByteOrder.LITTLE_ENDIAN);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/ErrorFlyweight.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.protocol;
+package uk.co.real_logic.aeron.protocol;
 
-import uk.co.real_logic.aeron.common.ErrorCode;
-import uk.co.real_logic.aeron.common.Flyweight;
+import uk.co.real_logic.aeron.ErrorCode;
+import uk.co.real_logic.aeron.Flyweight;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/HeaderFlyweight.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.protocol;
+package uk.co.real_logic.aeron.protocol;
 
-import uk.co.real_logic.aeron.common.Flyweight;
+import uk.co.real_logic.aeron.Flyweight;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_SHORT;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/NakFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.protocol;
+package uk.co.real_logic.aeron.protocol;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/SetupFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.protocol;
+package uk.co.real_logic.aeron.protocol;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/protocol/StatusMessageFlyweight.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.protocol;
+package uk.co.real_logic.aeron.protocol;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 

File: aeron-client/src/test/java/uk/co/real_logic/aeron/BufferBuilderTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
 import org.junit.Test;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -26,7 +26,7 @@
 import static org.hamcrest.Matchers.lessThan;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertThat;
-import static uk.co.real_logic.aeron.common.BufferBuilder.INITIAL_CAPACITY;
+import static uk.co.real_logic.aeron.BufferBuilder.INITIAL_CAPACITY;
 
 public class BufferBuilderTest
 {

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ErrorCodeTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron;
 
 import org.junit.Test;
 

File: aeron-client/src/test/java/uk/co/real_logic/aeron/logbuffer/TermGapScannerTest.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.concurrent.logbuffer;
+package uk.co.real_logic.aeron.logbuffer;
 
 import org.junit.Before;
 import org.junit.Test;
-import uk.co.real_logic.aeron.common.protocol.DataHeaderFlyweight;
+import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import static org.hamcrest.Matchers.is;

File: aeron-client/src/test/java/uk/co/real_logic/aeron/logbuffer/TermRebuilderTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.concurrent.logbuffer;
+package uk.co.real_logic.aeron.logbuffer;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -26,7 +26,7 @@
 import static java.lang.Integer.valueOf;
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static org.mockito.Mockito.*;
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.FrameDescriptor.*;
+import static uk.co.real_logic.aeron.logbuffer.FrameDescriptor.*;
 
 public class TermRebuilderTest
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataPacketHandler.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver;
 
+import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
-import uk.co.real_logic.aeron.common.protocol.DataHeaderFlyweight;
 
 import java.net.InetSocketAddress;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductorProxy.java
Patch:
@@ -16,9 +16,10 @@
 package uk.co.real_logic.aeron.driver;
 
 import uk.co.real_logic.aeron.driver.cmd.CloseResourceCmd;
-import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 import uk.co.real_logic.aeron.driver.cmd.CreateConnectionCmd;
 import uk.co.real_logic.aeron.driver.cmd.DriverConductorCmd;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
+import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 
 import java.net.InetSocketAddress;
 import java.util.Queue;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/FeedbackDelayGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 /**
  * Feedback delay generator.

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/LossDetector.java
Patch:
@@ -15,14 +15,13 @@
  */
 package uk.co.real_logic.aeron.driver;
 
-import uk.co.real_logic.aeron.common.FeedbackDelayGenerator;
 import uk.co.real_logic.agrona.TimerWheel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import java.util.concurrent.TimeUnit;
 
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.TermGapScanner.GapHandler;
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.TermGapScanner.scanForGap;
+import static uk.co.real_logic.aeron.logbuffer.TermGapScanner.GapHandler;
+import static uk.co.real_logic.aeron.logbuffer.TermGapScanner.scanForGap;
 
 /**
  * Detecting and handling of gaps in a stream

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MaxMulticastFlowControl.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.net.InetSocketAddress;
 
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.computePosition;
+import static uk.co.real_logic.aeron.logbuffer.LogBufferDescriptor.computePosition;
 
 /**
  * Default multicast sender flow control strategy.

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NakMessageHandler.java
Patch:
@@ -15,7 +15,7 @@
  */
 package uk.co.real_logic.aeron.driver;
 
-import uk.co.real_logic.aeron.common.protocol.NakFlyweight;
+import uk.co.real_logic.aeron.protocol.NakFlyweight;
 
 @FunctionalInterface
 public interface NakMessageHandler

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NetworkInterfaceShim.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 import java.net.InterfaceAddress;
 import java.net.NetworkInterface;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/OptimalMulticastDelayGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 /**
  * Feedback delay used for NAKs as well as for some retransmission use cases.

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/PendingSetupMessageFromSource.java
Patch:
@@ -15,6 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver;
 
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
+
 public class PendingSetupMessageFromSource
 {
     private final int sessionId;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/RateReporter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 import java.util.concurrent.locks.LockSupport;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiverProxy.java
Patch:
@@ -15,8 +15,9 @@
  */
 package uk.co.real_logic.aeron.driver;
 
-import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 import uk.co.real_logic.aeron.driver.cmd.*;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
+import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 
 import java.util.Queue;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/RetransmitHandler.java
Patch:
@@ -15,8 +15,7 @@
  */
 package uk.co.real_logic.aeron.driver;
 
-import uk.co.real_logic.aeron.common.FeedbackDelayGenerator;
-import uk.co.real_logic.aeron.common.protocol.DataHeaderFlyweight;
+import uk.co.real_logic.aeron.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.agrona.TimerWheel;
 import uk.co.real_logic.agrona.collections.Long2ObjectHashMap;
 import uk.co.real_logic.agrona.concurrent.AtomicCounter;
@@ -26,7 +25,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.IntStream;
 
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.computePosition;
+import static uk.co.real_logic.aeron.logbuffer.LogBufferDescriptor.computePosition;
 
 /**
  * Tracking and handling of retransmit request, NAKs, for senders and receivers

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/SenderProxy.java
Patch:
@@ -16,6 +16,7 @@
 package uk.co.real_logic.aeron.driver;
 
 import uk.co.real_logic.aeron.driver.cmd.*;
+import uk.co.real_logic.aeron.driver.media.SendChannelEndpoint;
 import uk.co.real_logic.agrona.concurrent.AtomicCounter;
 
 import java.util.Queue;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/SetupMessageHandler.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver;
 
+import uk.co.real_logic.aeron.protocol.SetupFlyweight;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
-import uk.co.real_logic.aeron.common.protocol.SetupFlyweight;
 
 import java.net.InetSocketAddress;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/StaticDelayGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 /**
  * Delay generator that simply returns a constant value (such as 0)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/StatusMessageHandler.java
Patch:
@@ -15,7 +15,7 @@
  */
 package uk.co.real_logic.aeron.driver;
 
-import uk.co.real_logic.aeron.common.protocol.StatusMessageFlyweight;
+import uk.co.real_logic.aeron.protocol.StatusMessageFlyweight;
 
 import java.net.InetSocketAddress;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Strings.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 /**
  * Utility functions for using Strings.

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UnicastFlowControl.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.net.InetSocketAddress;
 
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.computePosition;
+import static uk.co.real_logic.aeron.logbuffer.LogBufferDescriptor.computePosition;
 
 public class UnicastFlowControl implements FlowControl
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UriUtil.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 import java.net.URI;
 import java.net.URISyntaxException;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
Patch:
@@ -15,9 +15,9 @@
  */
 package uk.co.real_logic.aeron.driver.buffer;
 
-import uk.co.real_logic.aeron.common.event.EventCode;
+import uk.co.real_logic.aeron.driver.event.EventCode;
+import uk.co.real_logic.aeron.driver.event.EventLogger;
 import uk.co.real_logic.agrona.IoUtil;
-import uk.co.real_logic.aeron.common.event.EventLogger;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
 import java.io.File;
@@ -29,7 +29,7 @@
 import java.util.stream.Stream;
 
 import static java.nio.channels.FileChannel.MapMode.READ_WRITE;
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.*;
+import static uk.co.real_logic.aeron.logbuffer.LogBufferDescriptor.*;
 
 /**
  * Encapsulates responsibility for mapping the files into memory used by the log partitions.

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/RawLogFactory.java
Patch:
@@ -15,14 +15,14 @@
  */
 package uk.co.real_logic.aeron.driver.buffer;
 
+import uk.co.real_logic.aeron.driver.event.EventLogger;
 import uk.co.real_logic.agrona.IoUtil;
-import uk.co.real_logic.aeron.common.event.EventLogger;
 import uk.co.real_logic.agrona.LangUtil;
 
 import java.io.File;
 import java.nio.channels.FileChannel;
 
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.*;
+import static uk.co.real_logic.aeron.logbuffer.LogBufferDescriptor.computeLogLength;
 import static uk.co.real_logic.aeron.driver.buffer.FileMappingConvention.streamLocation;
 
 /**

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/AddSubscriptionCmd.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver.cmd;
 
-import uk.co.real_logic.aeron.driver.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Receiver;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 
 public class AddSubscriptionCmd implements ReceiverCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CloseReceiveChannelEndpointCmd.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver.cmd;
 
-import uk.co.real_logic.aeron.driver.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Receiver;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 
 public class CloseReceiveChannelEndpointCmd implements ReceiverCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CloseSendChannelEndpointCmd.java
Patch:
@@ -16,8 +16,8 @@
 
 package uk.co.real_logic.aeron.driver.cmd;
 
-import uk.co.real_logic.aeron.driver.SendChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Sender;
+import uk.co.real_logic.aeron.driver.media.SendChannelEndpoint;
 
 public class CloseSendChannelEndpointCmd implements SenderCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CreateConnectionCmd.java
Patch:
@@ -16,7 +16,7 @@
 package uk.co.real_logic.aeron.driver.cmd;
 
 import uk.co.real_logic.aeron.driver.DriverConductor;
-import uk.co.real_logic.aeron.driver.ReceiveChannelEndpoint;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 
 import java.net.InetSocketAddress;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/NewConnectionCmd.java
Patch:
@@ -16,8 +16,8 @@
 package uk.co.real_logic.aeron.driver.cmd;
 
 import uk.co.real_logic.aeron.driver.NetworkConnection;
-import uk.co.real_logic.aeron.driver.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Receiver;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 
 public class NewConnectionCmd implements ReceiverCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/NewPublicationCmd.java
Patch:
@@ -15,10 +15,10 @@
  */
 package uk.co.real_logic.aeron.driver.cmd;
 
+import uk.co.real_logic.aeron.driver.FlowControl;
 import uk.co.real_logic.aeron.driver.NetworkPublication;
 import uk.co.real_logic.aeron.driver.RetransmitHandler;
 import uk.co.real_logic.aeron.driver.Sender;
-import uk.co.real_logic.aeron.driver.FlowControl;
 
 public class NewPublicationCmd implements SenderCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/RegisterReceiveChannelEndpointCmd.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver.cmd;
 
-import uk.co.real_logic.aeron.driver.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Receiver;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 
 public class RegisterReceiveChannelEndpointCmd implements ReceiverCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/RegisterSendChannelEndpointCmd.java
Patch:
@@ -16,8 +16,8 @@
 
 package uk.co.real_logic.aeron.driver.cmd;
 
-import uk.co.real_logic.aeron.driver.SendChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Sender;
+import uk.co.real_logic.aeron.driver.media.SendChannelEndpoint;
 
 public class RegisterSendChannelEndpointCmd implements SenderCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/RemoveSubscriptionCmd.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.driver.cmd;
 
-import uk.co.real_logic.aeron.driver.ReceiveChannelEndpoint;
 import uk.co.real_logic.aeron.driver.Receiver;
+import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;
 
 public class RemoveSubscriptionCmd implements ReceiverCmd
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/event/EventCode.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.event;
+package uk.co.real_logic.aeron.driver.event;
 
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.collections.Int2ObjectHashMap;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/event/EventLogger.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.event;
+package uk.co.real_logic.aeron.driver.event;
 
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -23,7 +23,7 @@
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 
-import static uk.co.real_logic.aeron.common.event.EventCode.*;
+import static uk.co.real_logic.aeron.driver.event.EventCode.*;
 
 /**
  * Event logger interface for applications/libraries

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/exceptions/ControlProtocolException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package uk.co.real_logic.aeron.driver.exceptions;
 
-import uk.co.real_logic.aeron.common.ErrorCode;
+import uk.co.real_logic.aeron.ErrorCode;
 
 public class ControlProtocolException extends IllegalArgumentException
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/exceptions/InvalidChannelException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package uk.co.real_logic.aeron.driver.exceptions;
 
-import uk.co.real_logic.aeron.common.ErrorCode;
+import uk.co.real_logic.aeron.ErrorCode;
 
 public class InvalidChannelException extends ControlProtocolException
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/NioSelectedKeySet.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.media;
 
 import uk.co.real_logic.agrona.BitUtil;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/media/TransportPoller.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.driver;
+package uk.co.real_logic.aeron.driver.media;
 
 import uk.co.real_logic.agrona.LangUtil;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/uri/AeronUri.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.uri;
+package uk.co.real_logic.aeron.driver.uri;
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/uri/InterfaceSearchAddress.java
Patch:
@@ -13,17 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.uri;
+package uk.co.real_logic.aeron.driver.uri;
 
-import static uk.co.real_logic.aeron.common.Strings.parseIntOrDefault;
+import uk.co.real_logic.aeron.driver.Strings;
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.UnknownHostException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import uk.co.real_logic.aeron.common.Strings;
+import static uk.co.real_logic.aeron.driver.Strings.parseIntOrDefault;
 
 public class InterfaceSearchAddress
 {

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/OptimalMulticastDelayGeneratorTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common;
+package uk.co.real_logic.aeron.driver;
 
 import org.junit.Test;
 

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/buffer/FileMappingConventionTest.java
Patch:
@@ -16,7 +16,7 @@
 package uk.co.real_logic.aeron.driver.buffer;
 
 import org.junit.Test;
-import uk.co.real_logic.aeron.driver.UdpChannel;
+import uk.co.real_logic.aeron.driver.media.UdpChannel;
 
 import java.io.File;
 import java.io.IOException;

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/event/EventCodeTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.event;
+package uk.co.real_logic.aeron.driver.event;
 
 import org.junit.Test;
 

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/event/EventCodecTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.event;
+package uk.co.real_logic.aeron.driver.event;
 
 import org.junit.Test;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/uri/AeronUriTest.java
Patch:
@@ -13,15 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron.common.uri;
+package uk.co.real_logic.aeron.driver.uri;
+
+import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
-import org.junit.Test;
-
 public class AeronUriTest
 {
     @Test

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/LowLatencyMediaDriver.java
Patch:
@@ -17,9 +17,9 @@
 
 import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.aeron.driver.ThreadingMode;
-import uk.co.real_logic.agrona.concurrent.SigIntBarrier;
 import uk.co.real_logic.agrona.concurrent.BackoffIdleStrategy;
 import uk.co.real_logic.agrona.concurrent.NoOpIdleStrategy;
+import uk.co.real_logic.agrona.concurrent.SigIntBarrier;
 
 /**
  * Sample setup for a {@link MediaDriver} that is configured for low latency communications.

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/SimplePublisher.java
Patch:
@@ -15,12 +15,12 @@
  */
 package uk.co.real_logic.aeron.samples;
 
-import java.nio.ByteBuffer;
-
 import uk.co.real_logic.aeron.Aeron;
 import uk.co.real_logic.aeron.Publication;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
+import java.nio.ByteBuffer;
+
 /**
  * A very simple Aeron publisher application
  * Publishes a fixed size message on a fixed channel and stream. Upon completion
@@ -62,7 +62,7 @@ public static void main(final String[] args) throws Exception
 
             if (result < 0L)
             {
-                if (result == Publication.BACK_PRESSURE)
+                if (result == Publication.BACK_PRESSURED)
                 {
                     System.out.println(" Offer failed due to back pressure");
                 }

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/HackSelectReceiveSendUdpPong.java
Patch:
@@ -15,8 +15,8 @@
  */
 package uk.co.real_logic.aeron.samples.raw;
 
+import uk.co.real_logic.aeron.driver.media.NioSelectedKeySet;
 import uk.co.real_logic.agrona.concurrent.SigInt;
-import uk.co.real_logic.aeron.driver.NioSelectedKeySet;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
@@ -28,8 +28,8 @@
 import java.util.function.ToIntFunction;
 
 import static java.nio.channels.SelectionKey.OP_READ;
-import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 import static uk.co.real_logic.aeron.driver.Configuration.MTU_LENGTH_DEFAULT;
+import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 
 /**
  * Benchmark used to calculate latency of underlying system.

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/ReceiveSendUdpPong.java
Patch:
@@ -23,9 +23,9 @@
 import java.nio.channels.DatagramChannel;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 import static uk.co.real_logic.aeron.driver.Configuration.MTU_LENGTH_DEFAULT;
 import static uk.co.real_logic.aeron.samples.raw.Common.init;
+import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 
 /**
  * Benchmark used to calculate latency of underlying system.

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/ReceiveWriteUdpPong.java
Patch:
@@ -23,9 +23,9 @@
 import java.nio.channels.DatagramChannel;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 import static uk.co.real_logic.aeron.driver.Configuration.MTU_LENGTH_DEFAULT;
 import static uk.co.real_logic.aeron.samples.raw.Common.init;
+import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 
 /**
  * Benchmark used to calculate latency of underlying system.

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/SendHackSelectReceiveUdpPing.java
Patch:
@@ -16,8 +16,8 @@
 package uk.co.real_logic.aeron.samples.raw;
 
 import org.HdrHistogram.Histogram;
+import uk.co.real_logic.aeron.driver.media.NioSelectedKeySet;
 import uk.co.real_logic.agrona.concurrent.SigInt;
-import uk.co.real_logic.aeron.driver.NioSelectedKeySet;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
@@ -31,8 +31,8 @@
 import java.util.function.ToIntFunction;
 
 import static java.nio.channels.SelectionKey.OP_READ;
-import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 import static uk.co.real_logic.aeron.driver.Configuration.MTU_LENGTH_DEFAULT;
+import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 
 /**
  * Benchmark used to calculate latency of underlying system.

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/SendReceiveUdpPing.java
Patch:
@@ -16,8 +16,8 @@
 package uk.co.real_logic.aeron.samples.raw;
 
 import org.HdrHistogram.Histogram;
-import uk.co.real_logic.agrona.concurrent.SigInt;
 import uk.co.real_logic.agrona.BitUtil;
+import uk.co.real_logic.agrona.concurrent.SigInt;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/TransferToPing.java
Patch:
@@ -18,7 +18,7 @@
 import org.HdrHistogram.Histogram;
 import uk.co.real_logic.agrona.concurrent.SigInt;
 
-import java.io.*;
+import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.nio.channels.DatagramChannel;

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/WriteReceiveUdpPing.java
Patch:
@@ -15,8 +15,8 @@
 package uk.co.real_logic.aeron.samples.raw;
 
 import org.HdrHistogram.Histogram;
-import uk.co.real_logic.agrona.concurrent.SigInt;
 import uk.co.real_logic.agrona.BitUtil;
+import uk.co.real_logic.agrona.concurrent.SigInt;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MediaDriverTool.java
Patch:
@@ -15,11 +15,12 @@
  */
 package uk.co.real_logic.aeron.tools;
 
-import java.util.logging.Logger;
 import org.apache.commons.cli.ParseException;
 import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.agrona.concurrent.SigIntBarrier;
 
+import java.util.logging.Logger;
+
 public class MediaDriverTool
 {
     private static final Logger LOG = Logger.getLogger(MediaDriverTool.class.getName());

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MessageStream.java
Patch:
@@ -15,12 +15,12 @@
  */
 package uk.co.real_logic.aeron.tools;
 
-import java.io.InputStream;
-import java.util.zip.CRC32;
-
 import uk.co.real_logic.agrona.DirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
+import java.io.InputStream;
+import java.util.zip.CRC32;
+
 public class MessageStream
 {
     /* Message header offsets for verifiable message headers. */

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/RateController.java
Patch:
@@ -15,12 +15,12 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import uk.co.real_logic.agrona.concurrent.SystemNanoClock;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.locks.LockSupport;
 
-import uk.co.real_logic.agrona.concurrent.SystemNanoClock;
-
 public class RateController
 {
     private static final long WARMUP_IDLES = 5000;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/RateReporter.java
Patch:
@@ -15,10 +15,10 @@
  */
 package uk.co.real_logic.aeron.tools;
 
-import java.util.ArrayList;
-
 import uk.co.real_logic.agrona.concurrent.SystemNanoClock;
 
+import java.util.ArrayList;
+
 
 public class RateReporter implements RateController.Callback, Runnable
 {

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/MessageSizePatternTest.java
Patch:
@@ -15,14 +15,14 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import org.junit.Test;
+
 import static org.hamcrest.CoreMatchers.both;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.hamcrest.core.Is.is;
 
-import org.junit.Test;
-
 public class MessageSizePatternTest
 {
     MessageSizePattern p;

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/MessagesAtBitsPerSecondTest.java
Patch:
@@ -15,11 +15,11 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import org.junit.Test;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Test;
-
 public class MessagesAtBitsPerSecondTest
 {
     RateController rc;

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/MessagesAtMessagesPerSecondTest.java
Patch:
@@ -15,11 +15,11 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import org.junit.Test;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Test;
-
 public class MessagesAtMessagesPerSecondTest
 {
     RateController rc;

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/SecondsAtBitsPerSecondTest.java
Patch:
@@ -15,11 +15,11 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import org.junit.Test;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Test;
-
 public class SecondsAtBitsPerSecondTest
 {
     private RateController rc;

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/SecondsAtMessagesPerSecondTest.java
Patch:
@@ -15,11 +15,11 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import org.junit.Test;
+
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.Test;
-
 public class SecondsAtMessagesPerSecondTest
 {
     RateController rc;

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/ThwackerOptionsTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package uk.co.real_logic.aeron.tools;
 
-import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
-
 import org.apache.commons.cli.ParseException;
 import org.junit.Before;
 import org.junit.Test;
 
+import static org.hamcrest.core.Is.is;
+import static org.junit.Assert.assertThat;
+
 public class ThwackerOptionsTest
 {
     private ThwackerOptions opts;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogBufferDescriptor.java
Patch:
@@ -131,7 +131,7 @@ public class LogBufferDescriptor
     /**
      * Offset at which the default frame headers begin.
      */
-    public static final int LOG_DEFAULT_FRAME_HEADERS_OFFSET = CACHE_LINE_LENGTH;
+    public static final int LOG_DEFAULT_FRAME_HEADERS_OFFSET;
 
     /**
      * Offset at which the default frame headers begin.
@@ -149,6 +149,7 @@ public class LogBufferDescriptor
         LOG_MTU_LENGTH_OFFSET = LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET + SIZE_OF_INT;
 
         offset += (CACHE_LINE_LENGTH * 2);
+        LOG_DEFAULT_FRAME_HEADERS_OFFSET = offset;
 
         LOG_META_DATA_LENGTH = offset + (LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH * 3);
     }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronPong.java
Patch:
@@ -95,8 +95,8 @@ private void parseArgs(final String[] args) throws ParseException
     {
         options = new Options();
         options.addOption("c", "claim", false, "Use Try/Claim");
-        options.addOption("", "pongChannel", false, "Pong channel");
-        options.addOption("", "pingChannel", false, "Ping channel");
+        options.addOption("", "pongChannel", true, "Pong channel");
+        options.addOption("", "pingChannel", true, "Ping channel");
 
         final CommandLineParser parser = new GnuParser();
         final CommandLine command = parser.parse(options, args);

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronLatencyUnderLoadPublisher.java
Patch:
@@ -224,6 +224,7 @@ private void connectionHandler(
         final long position,
         final String sourceInfo)
     {
+        System.out.println(channel + " " + streamId);
         if (channel.equals(reflectChannel) && subStreamId == streamId)
         {
             connectionLatch.countDown();

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronLatencyUnderLoadSubscriber.java
Patch:
@@ -39,7 +39,8 @@ public class AeronLatencyUnderLoadSubscriber
     private Aeron.Context ctx = null;
     private FragmentAssemblyAdapter dataHandler = null;
     private Aeron aeron = null;
-    private final int pubStreamId = 10;
+    private final int pubStreamId = 11;
+    private final int subStreamId = 10;
     private volatile boolean running = true;
 
     public AeronLatencyUnderLoadSubscriber(final String[] args)
@@ -57,7 +58,7 @@ public AeronLatencyUnderLoadSubscriber(final String[] args)
         aeron = Aeron.connect(ctx);
         System.out.println("Reflect: " + reflectChannel + " Pub: " + pubChannel);
         pub = aeron.addPublication(reflectChannel, pubStreamId);
-        final int subStreamId = 10;
+
         final Subscription sub = aeron.addSubscription(pubChannel, subStreamId, dataHandler);
         bufferClaim = new BufferClaim();
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/DriverListener.java
Patch:
@@ -24,6 +24,7 @@
 interface DriverListener
 {
     void onNewPublication(
+        String channel,
         int streamId,
         int sessionId,
         int publicationLimitId,
@@ -48,6 +49,4 @@ void onError(
         ErrorCode errorCode,
         String message,
         long correlationId);
-
-    void operationSucceeded(long correlationId);
 }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/DriverProxy.java
Patch:
@@ -62,9 +62,9 @@ public DriverProxy(final RingBuffer toDriverCommandBuffer)
         clientId = toDriverCommandBuffer.nextCorrelationId();
     }
 
-    public long timeOfLastDriverKeepaliveNs()
+    public long timeOfLastDriverKeepalive()
     {
-        return toDriverCommandBuffer.consumerHeartbeatTimeNs();
+        return toDriverCommandBuffer.consumerHeartbeatTime();
     }
 
     public long addPublication(final String channel, final int streamId, final int sessionId)

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ConnectionTest.java
Patch:
@@ -177,7 +177,7 @@ private void insertDataFrame(final int activeTermId, final int termOffset)
         rcvBuffer.putBytes(dataHeader.dataOffset(), DATA);
 
         final int activeIndex = indexByTerm(INITIAL_TERM_ID, activeTermId);
-        TermRebuilder.insert(termBuffers[activeIndex], termOffset, rcvBuffer, 0, ALIGNED_FRAME_LENGTH);
+        TermRebuilder.insert(termBuffers[activeIndex], termOffset, rcvBuffer, ALIGNED_FRAME_LENGTH);
     }
 
     private int offsetOfFrame(final int index)

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/Header.java
Patch:
@@ -160,7 +160,7 @@ public final void buffer(final UnsafeBuffer buffer)
      */
     public int frameLength()
     {
-        return buffer.getInt(offset + DataHeaderFlyweight.FRAME_LENGTH_FIELD_OFFSET, ByteOrder.LITTLE_ENDIAN);
+        return buffer.getInt(offset, ByteOrder.LITTLE_ENDIAN);
     }
 
     /**

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/TermReader.java
Patch:
@@ -89,7 +89,7 @@ public int read(int termOffset, final DataHandler handler, final int framesCount
         do
         {
             final int frameLength = frameLengthVolatile(termBuffer, termOffset);
-            if (0 == frameLength)
+            if (frameLength <= 0)
             {
                 break;
             }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/TermScanner.java
Patch:
@@ -50,7 +50,7 @@ public int scanForAvailability(final UnsafeBuffer termBuffer, final int offset,
         {
             final int frameOffset = offset + available;
             final int frameLength = frameLengthVolatile(termBuffer, frameOffset);
-            if (0 == frameLength)
+            if (frameLength <= 0)
             {
                 break;
             }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCode.java
Patch:
@@ -45,9 +45,7 @@ public enum EventCode
     CMD_OUT_ON_INACTIVE_CONNECTION(17, EventCodec::dissectAsCommand),
     FRAME_IN_DROPPED(18, EventCodec::dissectAsFrame),
     ERROR_DELETING_FILE(19, EventCodec::dissectAsString),
-    FRAME_OUT_INCOMPLETE_SEND(20, EventCodec::dissectAsString),
 
-    FLOW_CONTROL_OVERRUN(21, EventCodec::dissectAsString),
     INVALID_VERSION(22, EventCodec::dissectAsCommand),
 
     CHANNEL_CREATION(23, EventCodec::dissectAsString);

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/ErrorFlyweight.java
Patch:
@@ -62,7 +62,7 @@ public ErrorFlyweight errorCode(final ErrorCode code)
      */
     public int offendingHeaderFrameLength()
     {
-        return (int)uint32Get(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
+        return buffer().getInt(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
     }
 
     /**
@@ -73,7 +73,7 @@ public int offendingHeaderFrameLength()
      */
     public ErrorFlyweight offendingHeaderFrameLength(final int length)
     {
-        uint32Put(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, length, LITTLE_ENDIAN);
+        buffer().putInt(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, length, LITTLE_ENDIAN);
 
         return this;
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NetworkPublication.java
Patch:
@@ -99,7 +99,7 @@ public NetworkPublication(
         termLengthMask = termLength - 1;
         senderPositionLimit = initialPositionLimit;
 
-        timeOfLastSendOrHeartbeat = clock.time();
+        timeOfLastSendOrHeartbeat = clock.nanoTime();
 
         positionBitsToShift = Integer.numberOfTrailingZeros(termLength);
         this.initialTermId = initialTermId;
@@ -129,7 +129,7 @@ public int send()
             final long senderPosition = this.senderPosition.get();
             final int activeTermId = computeTermIdFromPosition(senderPosition, positionBitsToShift, initialTermId);
             final int termOffset = (int)senderPosition & termLengthMask;
-            final long now = clock.time();
+            final long now = clock.nanoTime();
 
             if (shouldSendSetupFrame)
             {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Receiver.java
Patch:
@@ -53,7 +53,7 @@ public int doWork() throws Exception
         int workCount = commandQueue.drain(this);
         final int bytesReceived = transportPoller.pollTransports();
 
-        final long now = clock.time();
+        final long now = clock.nanoTime();
         for (int i = connections.size() - 1; i >= 0; i--)
         {
             final NetworkConnection connection = connections.get(i);
@@ -79,7 +79,7 @@ public int doWork() throws Exception
     public void addPendingSetupMessage(final int sessionId, final int streamId, final ReceiveChannelEndpoint channelEndpoint)
     {
         final PendingSetupMessageFromSource cmd = new PendingSetupMessageFromSource(sessionId, streamId, channelEndpoint);
-        cmd.timeOfStatusMessage(clock.time());
+        cmd.timeOfStatusMessage(clock.nanoTime());
         pendingSetupMessages.add(cmd);
     }
 
@@ -90,7 +90,7 @@ public void onAddSubscription(final ReceiveChannelEndpoint channelEndpoint, fina
 
     public void onRemoveSubscription(final ReceiveChannelEndpoint channelEndpoint, final int streamId)
     {
-        channelEndpoint.dispatcher().onRemoveSubscription(streamId);
+        channelEndpoint.dispatcher().removeSubscription(streamId);
     }
 
     public void onNewConnection(final ReceiveChannelEndpoint channelEndpoint, final NetworkConnection connection)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/SenderProxy.java
Patch:
@@ -68,15 +68,15 @@ public void closeSendChannelEndpoint(final SendChannelEndpoint channelEndpoint)
         }
     }
 
-    public void closePublication(final NetworkPublication publication)
+    public void removePublication(final NetworkPublication publication)
     {
         if (isSharedThread())
         {
-            sender.onClosePublication(publication);
+            sender.onRemovePublication(publication);
         }
         else
         {
-            offer(new ClosePublicationCmd(publication));
+            offer(new RemovePublicationCmd(publication));
         }
     }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/FileMappingConvention.java
Patch:
@@ -26,7 +26,7 @@
  * Senders are under "${aeron.data.dir}/publications"
  * Receivers are under "${aeron.data.dir}/subscriptions"
  *
- * Both publications and subscriptions share the same structure of "sessionId/streamId/termId".
+ * Both publications and subscriptions share the same structure of "sessionId/streamId/consumptionTermId".
  */
 class FileMappingConvention
 {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/RemovePublicationCmd.java
Patch:
@@ -18,17 +18,17 @@
 import uk.co.real_logic.aeron.driver.NetworkPublication;
 import uk.co.real_logic.aeron.driver.Sender;
 
-public class ClosePublicationCmd implements SenderCmd
+public class RemovePublicationCmd implements SenderCmd
 {
     private final NetworkPublication publication;
 
-    public ClosePublicationCmd(final NetworkPublication publication)
+    public RemovePublicationCmd(final NetworkPublication publication)
     {
         this.publication = publication;
     }
 
     public void execute(final Sender sender)
     {
-        sender.onClosePublication(publication);
+        sender.onRemovePublication(publication);
     }
 }

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/SelectorAndTransportTest.java
Patch:
@@ -45,7 +45,7 @@ public class SelectorAndTransportTest
     private static final UdpChannel SRC_DST = UdpChannel.parse("udp://localhost:" + SRC_PORT + "@localhost:" + RCV_PORT);
     private static final UdpChannel RCV_DST = UdpChannel.parse("udp://localhost:" + RCV_PORT);
 
-    private static final LossGenerator NO_LOSS = (address, length) -> false;
+    private static final LossGenerator NO_LOSS = (address, header, length) -> false;
 
     private final ByteBuffer byteBuffer = ByteBuffer.allocateDirect(256);
     private final UnsafeBuffer buffer = new UnsafeBuffer(byteBuffer);
@@ -243,9 +243,9 @@ public void shouldHandleSmFrameFromReceiverToSender() throws Exception
         statusMessage.wrap(buffer, 0);
         statusMessage.streamId(STREAM_ID)
                      .sessionId(SESSION_ID)
-                     .termId(TERM_ID)
+                     .consumptionTermId(TERM_ID)
                      .receiverWindowLength(1000)
-                     .rebuildTermOffset(0)
+                     .consumptionTermOffset(0)
                      .version(HeaderFlyweight.CURRENT_VERSION)
                      .flags((short)0)
                      .headerType(HeaderFlyweight.HDR_TYPE_SM)

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedThroughput.java
Patch:
@@ -31,8 +31,8 @@
 
 public class EmbeddedThroughput
 {
-    private static final int STREAM_ID = SampleConfiguration.STREAM_ID;
     private static final String CHANNEL = SampleConfiguration.CHANNEL;
+    private static final int STREAM_ID = SampleConfiguration.STREAM_ID;
     private static final int MESSAGE_LENGTH = SampleConfiguration.MESSAGE_LENGTH;
     private static final long NUMBER_OF_MESSAGES = SampleConfiguration.NUMBER_OF_MESSAGES;
     private static final long LINGER_TIMEOUT_MS = SampleConfiguration.LINGER_TIMEOUT_MS;
@@ -52,7 +52,7 @@ public static void main(final String[] args) throws Exception
 
         final RateReporter reporter = new RateReporter(TimeUnit.SECONDS.toNanos(1), SamplesUtil::printRate);
         final DataHandler rateReporterHandler = rateReporterHandler(reporter);
-        final ExecutorService executor = Executors.newFixedThreadPool(3);
+        final ExecutorService executor = Executors.newFixedThreadPool(2);
 
         final Aeron.Context context = new Aeron.Context();
         final String embeddedDirName = CommonContext.generateEmbeddedDirName();
@@ -64,7 +64,7 @@ public static void main(final String[] args) throws Exception
         final AtomicBoolean running = new AtomicBoolean(true);
 
         try (final MediaDriver ignore = MediaDriver.launch(ctx);
-             final Aeron aeron = Aeron.connect(context, executor);
+             final Aeron aeron = Aeron.connect(context);
              final Publication publication = aeron.addPublication(CHANNEL, STREAM_ID);
              final Subscription subscription = aeron.addSubscription(CHANNEL, STREAM_ID, rateReporterHandler))
         {

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/LowLatencyMediaDriver.java
Patch:
@@ -21,15 +21,16 @@
 import uk.co.real_logic.agrona.concurrent.BackoffIdleStrategy;
 import uk.co.real_logic.agrona.concurrent.NoOpIdleStrategy;
 
+/**
+ * Sample setup for a {@link MediaDriver} that is configured for low latency communications.
+ */
 public class LowLatencyMediaDriver
 {
     public static void main(final String[] args) throws Exception
     {
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.DEDICATED)
             .conductorIdleStrategy(new BackoffIdleStrategy(1, 1, 1, 1))
-            .sharedNetworkIdleStrategy(new NoOpIdleStrategy())
-            .sharedIdleStrategy(new NoOpIdleStrategy())
             .receiverIdleStrategy(new NoOpIdleStrategy())
             .senderIdleStrategy(new NoOpIdleStrategy());
 

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/RateReporter.java
Patch:
@@ -145,7 +145,7 @@ public void close()
 
     public void run()
     {
-        final ArrayList<RateControllerInterval> intervals = new ArrayList<RateControllerInterval>();
+        final ArrayList<RateControllerInterval> intervals = new ArrayList<>();
 
         intervals.add(new MessagesAtMessagesPerSecondInterval(Long.MAX_VALUE, 1));
 
@@ -154,7 +154,7 @@ public void run()
         try
         {
             rateController = new RateController(this, intervals);
-            lastReportTimeNanos = CLOCK.time() - 1000000000; /* Subtract a second so the first print is correct. */
+            lastReportTimeNanos = CLOCK.nanoTime() - 1000000000; /* Subtract a second so the first print is correct. */
             while (!shuttingDown && rateController.next())
             {
                 /* rateController will call onNext to report the interval's rates. */
@@ -173,7 +173,7 @@ public void run()
      */
     public int onNext()
     {
-        final long currentTimeNanos = CLOCK.time();
+        final long currentTimeNanos = CLOCK.nanoTime();
         final long verifiableMessages = app.verifiableMessages();
         final long nonVerifiableMessages = app.nonVerifiableMessages();
         final long totalMessages = verifiableMessages + nonVerifiableMessages;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronPing.java
Patch:
@@ -74,8 +74,9 @@ public AeronPing(final String[] args)
         {
             e.printStackTrace();
         }
+
         ctx = new Aeron.Context()
-                .newConnectionHandler(this);
+            .newConnectionHandler(this);
         dataHandler = new FragmentAssemblyAdapter(this::pongHandler);
         aeron = Aeron.connect(ctx);
         pub = aeron.addPublication(pingChannel, pingStreamId);

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsDriver.java
Patch:
@@ -39,7 +39,7 @@ public StatsDriver(final String[] args)
         {
             parseArgs(args);
             running = new AtomicBoolean(true);
-            stats = new Stats(output, null);
+            stats = new Stats(output);
 
             final Runnable task = new Runnable()
             {

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronPong.java
Patch:
@@ -95,8 +95,8 @@ private void parseArgs(final String[] args) throws ParseException
     {
         options = new Options();
         options.addOption("c", "claim", false, "Use Try/Claim");
-        options.addOption("", "pongChannel", false, "Pong channel");
-        options.addOption("", "pingChannel", false, "Ping channel");
+        options.addOption("", "pongChannel", true, "Pong channel");
+        options.addOption("", "pingChannel", true, "Ping channel");
 
         final CommandLineParser parser = new GnuParser();
         final CommandLine command = parser.parse(options, args);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/LogInspector.java
Patch:
@@ -104,7 +104,7 @@ public static void main(final String[] args) throws Exception
                     out.println(dataHeaderFlyweight.toString());
 
                     final int frameLength = dataHeaderFlyweight.frameLength();
-                    if (frameLength <= 0)
+                    if (frameLength < DataHeaderFlyweight.HEADER_LENGTH)
                     {
                         try
                         {

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/Ping.java
Patch:
@@ -106,7 +106,7 @@ public static void main(final String[] args) throws Exception
 
                     System.out.println("Pinging " + NUMBER_OF_MESSAGES + " messages");
 
-                    sendPingAndReceivePong(pingPublication, pongSubscription, WARMUP_NUMBER_OF_MESSAGES);
+                    sendPingAndReceivePong(pingPublication, pongSubscription, NUMBER_OF_MESSAGES);
                 }
 
                 System.out.println("Histogram of RTT latencies in microseconds.");

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/ErrorFlyweight.java
Patch:
@@ -62,7 +62,7 @@ public ErrorFlyweight errorCode(final ErrorCode code)
      */
     public int offendingHeaderFrameLength()
     {
-        return (int)uint32Get(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
+        return buffer().getInt(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
     }
 
     /**
@@ -73,7 +73,7 @@ public int offendingHeaderFrameLength()
      */
     public ErrorFlyweight offendingHeaderFrameLength(final int length)
     {
-        uint32Put(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, length, LITTLE_ENDIAN);
+        buffer().putInt(offset() + OFFENDING_HDR_FRAME_LENGTH_FIELD_OFFSET, length, LITTLE_ENDIAN);
 
         return this;
     }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/HeaderFlyweight.java
Patch:
@@ -135,7 +135,7 @@ public HeaderFlyweight headerType(final int type)
      */
     public int frameLength()
     {
-        return (int)uint32Get(offset() + FRAME_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
+        return buffer().getInt(offset() + FRAME_LENGTH_FIELD_OFFSET, LITTLE_ENDIAN);
     }
 
     /**
@@ -146,7 +146,7 @@ public int frameLength()
      */
     public HeaderFlyweight frameLength(final int length)
     {
-        uint32Put(offset() + FRAME_LENGTH_FIELD_OFFSET, length, LITTLE_ENDIAN);
+        buffer().putInt(offset() + FRAME_LENGTH_FIELD_OFFSET, length, LITTLE_ENDIAN);
 
         return this;
     }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/TermRebuilder.java
Patch:
@@ -37,9 +37,8 @@ public class TermRebuilder
     public static void insert(
         final UnsafeBuffer termBuffer, final int termOffset, final UnsafeBuffer packet, final int packetOffset, final int length)
     {
-        final int lengthOffset = lengthOffset(packetOffset);
-        final int frameLength = packet.getInt(lengthOffset, LITTLE_ENDIAN);
-        packet.putIntOrdered(lengthOffset, 0);
+        final int frameLength = packet.getInt(0, LITTLE_ENDIAN);
+        packet.putIntOrdered(0, 0);
 
         termBuffer.putBytes(termOffset, packet, packetOffset, length);
         frameLengthOrdered(termBuffer, termOffset, frameLength);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NetworkConnection.java
Patch:
@@ -29,7 +29,6 @@
 import java.net.InetSocketAddress;
 import java.util.List;
 
-import static uk.co.real_logic.aeron.common.concurrent.logbuffer.FrameDescriptor.lengthOffset;
 import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.*;
 import static uk.co.real_logic.aeron.driver.NetworkConnection.Status.ACTIVE;
 
@@ -514,7 +513,7 @@ public long rebuildPosition()
 
     private boolean isHeartbeat(final UnsafeBuffer buffer, final int length)
     {
-        return length == DataHeaderFlyweight.HEADER_LENGTH && buffer.getInt(lengthOffset(0)) == 0;
+        return length == DataHeaderFlyweight.HEADER_LENGTH && buffer.getInt(0) == 0;
     }
 
     private void hwmCandidate(final long proposedPosition)

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronPing.java
Patch:
@@ -74,8 +74,9 @@ public AeronPing(final String[] args)
         {
             e.printStackTrace();
         }
+
         ctx = new Aeron.Context()
-                .newConnectionHandler(this);
+            .newConnectionHandler(this);
         dataHandler = new FragmentAssemblyAdapter(this::pongHandler);
         aeron = Aeron.connect(ctx);
         pub = aeron.addPublication(pingChannel, pingStreamId);

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/DataHeaderFlyweight.java
Patch:
@@ -185,7 +185,8 @@ public String toString()
         final String formattedFlags = String.format("%1$8s", Integer.toBinaryString(flags())).replace(' ', '0');
 
         sb.append("Data Header{")
-            .append("version=").append(version())
+            .append("frame_length=").append(frameLength())
+            .append(" version=").append(version())
             .append(" flags=").append(formattedFlags)
             .append(" type=").append(headerType())
             .append(" frame_length=").append(frameLength())

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -337,7 +337,7 @@ public class Configuration
     public static final String THREADING_MODE_PROP_NAME = "aeron.threading.mode";
     public static final String THREADING_MODE_DEFAULT = DEDICATED.name();
 
-    /** Disable the NAKs from media driver (used for QA only)*/
+    /** Disable sending NAKs from the media driver. */
     public static final String DO_NOT_SEND_NAK_PROP_NAME = "aeron.driver.disable.naks";
 
     /**

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsDriver.java
Patch:
@@ -39,7 +39,7 @@ public StatsDriver(final String[] args)
         {
             parseArgs(args);
             running = new AtomicBoolean(true);
-            stats = new Stats(output, null);
+            stats = new Stats(output);
 
             final Runnable task = new Runnable()
             {

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -331,7 +331,6 @@ private void sendPublicationReady(final int sessionId, final int streamId, final
                         .sessionId(sessionId)
                         .correlationId(correlationId);
 
-        publicationReady.channel(CHANNEL);
         publicationReady.logFileName(sessionId + "-log");
 
         toClientTransmitter.transmit(ON_PUBLICATION_READY, atomicSendBuffer, 0, publicationReady.length());
@@ -343,7 +342,6 @@ private void sendConnectionReady(final int sessionId, final int streamId, final
                        .sessionId(sessionId)
                        .correlationId(correlationId);
 
-        connectionReady.channel(CHANNEL);
         connectionReady.logFileName(sessionId + "-log");
         connectionReady.sourceInfo(SOURCE_NAME);
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ClientProxy.java
Patch:
@@ -98,7 +98,6 @@ public void onConnectionReady(
             .streamId(streamId)
             .joiningPosition(joiningPosition)
             .correlationId(correlationId)
-            .channel(channel)
             .logFileName(rawLog.logFileName())
             .sourceInfo(sourceInfo);
 
@@ -116,7 +115,6 @@ public void onConnectionReady(
     }
 
     public void onPublicationReady(
-        final String channel,
         final int streamId,
         final int sessionId,
         final RawLog rawLog,
@@ -130,7 +128,6 @@ public void onPublicationReady(
             .correlationId(correlationId)
             .publicationLimitCounterId(positionCounterId);
 
-        publicationReady.channel(channel);
         publicationReady.logFileName(rawLog.logFileName());
 
         logger.log(CMD_OUT_PUBLICATION_READY, tmpBuffer, 0, publicationReady.length());

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -484,7 +484,6 @@ private void onAddPublication(
         publication.incRef();
 
         clientProxy.onPublicationReady(
-            channel,
             streamId,
             sessionId,
             publication.rawLog(),

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -162,8 +162,7 @@ public void shouldBeAbleToAddSinglePublication() throws Exception
         verifySenderNotifiedOfNewPublication();
 
         verify(mockClientProxy).onPublicationReady(
-            eq(CHANNEL_URI + 4000), eq(2), anyInt(),
-            any(), anyLong(), anyInt());
+            eq(2), anyInt(), any(), anyLong(), anyInt());
     }
 
     @Test

File: aeron-client/src/main/java/uk/co/real_logic/aeron/DriverListener.java
Patch:
@@ -24,15 +24,13 @@
 interface DriverListener
 {
     void onNewPublication(
-        String channel,
         int streamId,
         int sessionId,
         int publicationLimitId,
         String logFileName,
         long correlationId);
 
     void onNewConnection(
-        String channel,
         int streamId,
         int sessionId,
         long initialPosition,
@@ -41,7 +39,6 @@ void onNewConnection(
         long correlationId);
 
     void onInactiveConnection(
-        String channel,
         int streamId,
         int sessionId,
         long position,

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -313,7 +313,7 @@ public void clientNotifiedOfInactiveConnections()
         assertFalse(subscription.hasNoConnections());
 
         final long position = 0L;
-        conductor.onInactiveConnection(CHANNEL, STREAM_ID_1, SESSION_ID_1, position, CORRELATION_ID);
+        conductor.onInactiveConnection(STREAM_ID_1, SESSION_ID_1, position, CORRELATION_ID);
 
         verify(mockInactiveConnectionHandler).onInactiveConnection(CHANNEL, STREAM_ID_1, SESSION_ID_1, position);
         assertTrue(subscription.hasNoConnections());

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Subscription.java
Patch:
@@ -95,7 +95,7 @@ public int poll(final int fragmentCountLimit)
     {
         ensureOpen();
 
-        if (connections.size() >= ++roundRobinIndex)
+        if (++roundRobinIndex >= connections.size())
         {
             roundRobinIndex = 0;
         }

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -72,14 +72,14 @@ public class ClientConductorTest
     private final ConnectionBuffersReadyFlyweight connectionReady = new ConnectionBuffersReadyFlyweight();
     private final ErrorFlyweight errorHeader = new ErrorFlyweight();
 
-    private final ByteBuffer sendBuffer = ByteBuffer.allocate(SEND_BUFFER_CAPACITY);
+    private final ByteBuffer sendBuffer = ByteBuffer.allocateDirect(SEND_BUFFER_CAPACITY);
     private final UnsafeBuffer atomicSendBuffer = new UnsafeBuffer(sendBuffer);
 
     private final UnsafeBuffer toClientBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(BROADCAST_BUFFER_LENGTH));
     private final CopyBroadcastReceiver toClientReceiver = new CopyBroadcastReceiver(new BroadcastReceiver(toClientBuffer));
     private final BroadcastTransmitter toClientTransmitter = new BroadcastTransmitter(toClientBuffer);
 
-    private final UnsafeBuffer counterValuesBuffer = new UnsafeBuffer(new byte[COUNTER_BUFFER_LENGTH]);
+    private final UnsafeBuffer counterValuesBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(COUNTER_BUFFER_LENGTH));
 
     private final TimerWheel timerWheel = mock(TimerWheel.class);
     private final Consumer<Throwable> mockClientErrorHandler = Throwable::printStackTrace;

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ConnectionTest.java
Patch:
@@ -59,7 +59,7 @@ public class ConnectionTest
     private static final int MESSAGE_LENGTH = DataHeaderFlyweight.HEADER_LENGTH + DATA.length;
     private static final int ALIGNED_FRAME_LENGTH = align(MESSAGE_LENGTH, FrameDescriptor.FRAME_ALIGNMENT);
 
-    private final UnsafeBuffer rcvBuffer = new UnsafeBuffer(new byte[ALIGNED_FRAME_LENGTH]);
+    private final UnsafeBuffer rcvBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(ALIGNED_FRAME_LENGTH));
     private final DataHeaderFlyweight dataHeader = new DataHeaderFlyweight();
     private final DataHandler mockDataHandler = mock(DataHandler.class);
     private final Position position = spy(new AtomicLongPosition());

File: aeron-client/src/test/java/uk/co/real_logic/aeron/PublicationTest.java
Patch:
@@ -42,11 +42,11 @@ public class PublicationTest
     private static final int CORRELATION_ID = 2000;
     private static final int SEND_BUFFER_CAPACITY = 1024;
 
-    private final ByteBuffer sendBuffer = ByteBuffer.allocate(SEND_BUFFER_CAPACITY);
+    private final ByteBuffer sendBuffer = ByteBuffer.allocateDirect(SEND_BUFFER_CAPACITY);
     private final UnsafeBuffer atomicSendBuffer = new UnsafeBuffer(sendBuffer);
     private final DataHeaderFlyweight dataHeaderFlyweight = new DataHeaderFlyweight();
 
-    private final UnsafeBuffer logMetaDataBuffer = spy(new UnsafeBuffer(new byte[LOG_META_DATA_LENGTH]));
+    private final UnsafeBuffer logMetaDataBuffer = spy(new UnsafeBuffer(ByteBuffer.allocateDirect(LOG_META_DATA_LENGTH)));
 
     private Publication publication;
     private ReadOnlyPosition limit;

File: aeron-client/src/test/java/uk/co/real_logic/aeron/SubscriptionTest.java
Patch:
@@ -47,7 +47,7 @@ public class SubscriptionTest
     private static final int FRAGMENT_COUNT_LIMIT = Integer.MAX_VALUE;
     private static final int HEADER_LENGTH = DataHeaderFlyweight.HEADER_LENGTH;
 
-    private final ByteBuffer readBuffer = ByteBuffer.allocate(READ_BUFFER_CAPACITY);
+    private final ByteBuffer readBuffer = ByteBuffer.allocateDirect(READ_BUFFER_CAPACITY);
     private final UnsafeBuffer atomicReadBuffer = new UnsafeBuffer(readBuffer);
     private final ClientConductor conductor = mock(ClientConductor.class);
     private final Position position = mock(AtomicLongPosition.class);

File: aeron-common/src/test/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/TermAppenderTest.java
Patch:
@@ -21,6 +21,8 @@
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 
+import java.nio.ByteBuffer;
+
 import static java.nio.ByteOrder.LITTLE_ENDIAN;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
@@ -35,7 +37,7 @@ public class TermAppenderTest
     private static final int TERM_BUFFER_LENGTH = LogBufferDescriptor.TERM_MIN_LENGTH;
     private static final int META_DATA_BUFFER_LENGTH = TERM_META_DATA_LENGTH;
     private static final int MAX_FRAME_LENGTH = 1024;
-    private static final MutableDirectBuffer DEFAULT_HEADER = new UnsafeBuffer(new byte[HEADER_LENGTH]);
+    private static final MutableDirectBuffer DEFAULT_HEADER = new UnsafeBuffer(ByteBuffer.allocateDirect(HEADER_LENGTH));
 
     private final UnsafeBuffer termBuffer = mock(UnsafeBuffer.class);
     private final UnsafeBuffer metaDataBuffer = mock(UnsafeBuffer.class);

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/LogBufferHelper.java
Patch:
@@ -38,7 +38,7 @@ public static RawLog newTestLogBuffers(final int termLength, final int metaDataL
                 newTestLogBuffer(termLength, metaDataLength),
             };
 
-            private final UnsafeBuffer logMetaData = new UnsafeBuffer(new byte[LOG_META_DATA_LENGTH]);
+            private final UnsafeBuffer logMetaData = new UnsafeBuffer(ByteBuffer.allocateDirect(LOG_META_DATA_LENGTH));
 
             public Stream<RawLogPartition> stream()
             {

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/ReceiverTest.java
Patch:
@@ -80,9 +80,9 @@ public class ReceiverTest
     private final SystemCounters mockSystemCounters = mock(SystemCounters.class);
     private final RawLogFactory mockRawLogFactory = mock(RawLogFactory.class);
     private final Position mockHighestReceivedPosition = spy(new AtomicLongPosition());
-    private final ByteBuffer dataFrameBuffer = ByteBuffer.allocate(2 * 1024);
+    private final ByteBuffer dataFrameBuffer = ByteBuffer.allocateDirect(2 * 1024);
     private final UnsafeBuffer dataBuffer = new UnsafeBuffer(dataFrameBuffer);
-    private final ByteBuffer setupFrameBuffer = ByteBuffer.allocate(SetupFlyweight.HEADER_LENGTH);
+    private final ByteBuffer setupFrameBuffer = ByteBuffer.allocateDirect(SetupFlyweight.HEADER_LENGTH);
     private final UnsafeBuffer setupBuffer = new UnsafeBuffer(setupFrameBuffer);
 
     private final DataHeaderFlyweight dataHeader = new DataHeaderFlyweight();

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/LogBufferHelper.java
Patch:
@@ -80,7 +80,7 @@ public void close()
     private static RawLogPartition newTestLogBuffer(final int termBufferLength, final int metaDataBufferLength)
     {
         return new RawLogPartition(
-            new UnsafeBuffer(ByteBuffer.allocate(termBufferLength)),
-            new UnsafeBuffer(ByteBuffer.allocate(metaDataBufferLength)));
+            new UnsafeBuffer(ByteBuffer.allocateDirect(termBufferLength)),
+            new UnsafeBuffer(ByteBuffer.allocateDirect(metaDataBufferLength)));
     }
 }

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -75,7 +75,7 @@ public class ClientConductorTest
     private final ByteBuffer sendBuffer = ByteBuffer.allocate(SEND_BUFFER_CAPACITY);
     private final UnsafeBuffer atomicSendBuffer = new UnsafeBuffer(sendBuffer);
 
-    private final UnsafeBuffer toClientBuffer = new UnsafeBuffer(new byte[BROADCAST_BUFFER_LENGTH]);
+    private final UnsafeBuffer toClientBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(BROADCAST_BUFFER_LENGTH));
     private final CopyBroadcastReceiver toClientReceiver = new CopyBroadcastReceiver(new BroadcastReceiver(toClientBuffer));
     private final BroadcastTransmitter toClientTransmitter = new BroadcastTransmitter(toClientBuffer);
 

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MessageStream.java
Patch:
@@ -86,7 +86,7 @@ public MessageStream(final int minSize, final int maxSize, final boolean verifia
     public MessageStream(final int minSize, final int maxSize, final boolean verifiable,
         final InputStream inputStream) throws Exception
     {
-        if (this.inputStream == null)
+        if (inputStream == null)
         {
             // When no input stream is supplied, use random generator.
             this.inputStream = new RandomInputStream();

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MessageStream.java
Patch:
@@ -86,7 +86,7 @@ public MessageStream(final int minSize, final int maxSize, final boolean verifia
     public MessageStream(final int minSize, final int maxSize, final boolean verifiable,
         final InputStream inputStream) throws Exception
     {
-        if (this.inputStream == null)
+        if (inputStream == null)
         {
             // When no input stream is supplied, use random generator.
             this.inputStream = new RandomInputStream();

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/NetworkUtil.java
Patch:
@@ -133,7 +133,7 @@ else if (a.length == 16)
 
             return
                 (upperMask & toLong(a, 0)) == (upperMask & toLong(b, 0)) &&
-                (lowerMask & toLong(b, 8)) == (lowerMask & toLong(b, 8));
+                (lowerMask & toLong(a, 8)) == (lowerMask & toLong(b, 8));
         }
 
         throw new IllegalArgumentException("How many bytes does an IP address have again?");

File: aeron-common/src/test/java/uk/co/real_logic/aeron/common/NetworkUtilTest.java
Patch:
@@ -141,15 +141,15 @@ public void shouldFilterBySubnetAndFindMultipleResultsOrderedByMatchLength() thr
     }
 
     @Test
-    public void shouldFilerBySubnetAndFindOneIpV6Result() throws Exception
+    public void shouldFilterBySubnetAndFindOneIpV6Result() throws Exception
     {
         final NetworkInterfaceStub stub = new NetworkInterfaceStub();
 
         final NetworkInterface ifc1 = stub.add("fe80:0:0:0001:0002:0:0:1/80");
         stub.add("fe80:0:0:0002:0003:0:0:1/80");
 
         final Collection<NetworkInterface> filteredBySubnet =
-            filterBySubnet(stub, getByName("fe80:0:0:0001:0:0:0:0"), 80);
+            filterBySubnet(stub, getByName("fe80:0:0:0001:0002:0:0:0"), 80);
 
         assertThat(filteredBySubnet.size(), is(1));
         assertThat(first(filteredBySubnet), is(ifc1));

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/NetworkUtil.java
Patch:
@@ -133,7 +133,7 @@ else if (a.length == 16)
 
             return
                 (upperMask & toLong(a, 0)) == (upperMask & toLong(b, 0)) &&
-                (lowerMask & toLong(b, 8)) == (lowerMask & toLong(b, 8));
+                (lowerMask & toLong(a, 8)) == (lowerMask & toLong(b, 8));
         }
 
         throw new IllegalArgumentException("How many bytes does an IP address have again?");

File: aeron-common/src/test/java/uk/co/real_logic/aeron/common/NetworkUtilTest.java
Patch:
@@ -141,15 +141,15 @@ public void shouldFilterBySubnetAndFindMultipleResultsOrderedByMatchLength() thr
     }
 
     @Test
-    public void shouldFilerBySubnetAndFindOneIpV6Result() throws Exception
+    public void shouldFilterBySubnetAndFindOneIpV6Result() throws Exception
     {
         final NetworkInterfaceStub stub = new NetworkInterfaceStub();
 
         final NetworkInterface ifc1 = stub.add("fe80:0:0:0001:0002:0:0:1/80");
         stub.add("fe80:0:0:0002:0003:0:0:1/80");
 
         final Collection<NetworkInterface> filteredBySubnet =
-            filterBySubnet(stub, getByName("fe80:0:0:0001:0:0:0:0"), 80);
+            filterBySubnet(stub, getByName("fe80:0:0:0001:0002:0:0:0"), 80);
 
         assertThat(filteredBySubnet.size(), is(1));
         assertThat(first(filteredBySubnet), is(ifc1));

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/SimplePublisher.java
Patch:
@@ -36,7 +36,7 @@ public static void main(final String[] args) throws Exception
         final UnsafeBuffer buffer = new UnsafeBuffer(ByteBuffer.allocateDirect(512));
 
         // An end-point identifier to send the message to
-        final String channel = new String("udp://localhost:40123");
+        final String channel = "udp://localhost:40123";
 
         // A unique identifier for a stream within a channel. A value of 0 is reserved.
         final int streamId = 10;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -173,7 +173,7 @@ public class Configuration
     public static final int COUNTER_VALUES_BUFFER_LENGTH = getInteger(
         COUNTER_VALUES_BUFFER_LENGTH_PROP_NAME, COUNTER_VALUES_BUFFER_LENGTH_DEFAULT);
 
-    public static final int COUNTER_LABELS_BUFFER_LENGTH = COUNTER_VALUES_BUFFER_LENGTH * 16;
+    public static final int COUNTER_LABELS_BUFFER_LENGTH = COUNTER_VALUES_BUFFER_LENGTH;
 
     /**
      * Default group size estimate for NAK delay randomization

File: aeron-client/src/main/java/uk/co/real_logic/aeron/ActiveSubscriptions.java
Patch:
@@ -54,7 +54,7 @@ public synchronized void add(final Subscription subscription)
             getOrDefault(subscriptionByChannelMap, subscription.channel(), SUPPLIER);
 
         final List<Subscription> subscriptions =
-            subscriptionByStreamIdMap.getOrDefault(subscription.streamId(), ArrayList::new);
+            subscriptionByStreamIdMap.computeIfAbsent(subscription.streamId(), ignore -> new ArrayList<>());
 
         subscriptions.add(subscription);
     }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/perf_tools/AeronLatencyUnderLoadPublisher.java
Patch:
@@ -194,9 +194,7 @@ public void run()
         {
             e.printStackTrace();
         }
-        pub.close();
-        sub.close();
-        ctx.close();
+
         aeron.close();
 
         try

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsCSVOutput.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.File;
 import java.io.FileWriter;
+import java.io.IOException;
 
 public class StatsCSVOutput implements StatsOutput
 {
@@ -44,7 +45,7 @@ public StatsCSVOutput(final String file)
             outFile.createNewFile();
             out = new FileWriter(outFile);
         }
-        catch (final Exception e)
+        catch (final IOException e)
         {
             e.printStackTrace();
         }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MediaDriverTool.java
Patch:
@@ -15,16 +15,16 @@
  */
 package uk.co.real_logic.aeron.tools;
 
+import java.util.logging.Logger;
+
 import org.apache.commons.cli.ParseException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import uk.co.real_logic.aeron.driver.MediaDriver;
 import uk.co.real_logic.agrona.concurrent.SigIntBarrier;
 
 public class MediaDriverTool
 {
-    private static final Logger LOG = LoggerFactory.getLogger(MediaDriverTool.class);
+    private static final Logger LOG = Logger.getLogger(MediaDriverTool.class.getName());
 
     public static void main(final String[] args)
     {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/FlowControl.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Strategy for applying flow control to the {@link Sender}.
  */
-public interface SenderFlowControl
+public interface FlowControl
 {
     /**
      * Update the sender flow control strategy based on a status message from the receiver.

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MaxMulticastFlowControl.java
Patch:
@@ -25,7 +25,7 @@
  * Max of right edges.
  * No tracking of receivers.
  */
-public class MaxMulticastSenderFlowControl implements SenderFlowControl
+public class MaxMulticastFlowControl implements FlowControl
 {
     private long positionLimit = 0;
     private int positionBitsToShift;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/RetransmitHandler.java
Patch:
@@ -172,7 +172,7 @@ private long determineLingerTimeout()
 
     private void perform(final RetransmitAction action)
     {
-        retransmitSender.send(action.termId, action.termOffset, action.length);
+        retransmitSender.resend(action.termId, action.termOffset, action.length);
     }
 
     private enum State

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/RetransmitSender.java
Patch:
@@ -28,5 +28,5 @@ public interface RetransmitSender
      * @param termOffset for the NAK
      * @param length     for the NAK
      */
-    void send(int termId, int termOffset, int length);
+    void resend(int termId, int termOffset, int length);
 }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Sender.java
Patch:
@@ -72,7 +72,7 @@ public void onCloseSendChannelEndpoint(final SendChannelEndpoint channelEndpoint
     public void onNewPublication(
         final NetworkPublication publication,
         final RetransmitHandler retransmitHandler,
-        final SenderFlowControl senderFlowControl)
+        final FlowControl flowControl)
     {
         final NetworkPublication[] oldPublications = publications;
         final int length = oldPublications.length;
@@ -83,7 +83,7 @@ public void onNewPublication(
 
         publications = newPublications;
 
-        publication.sendChannelEndpoint().addToDispatcher(publication, retransmitHandler, senderFlowControl);
+        publication.sendChannelEndpoint().addToDispatcher(publication, retransmitHandler, flowControl);
     }
 
     public void onClosePublication(final NetworkPublication publication)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UnicastFlowControl.java
Patch:
@@ -19,7 +19,7 @@
 
 import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.computePosition;
 
-public class UnicastSenderFlowControl implements SenderFlowControl
+public class UnicastFlowControl implements FlowControl
 {
     private long positionLimit = 0;
     private int positionBitsToShift;

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -118,8 +118,8 @@ public void setUp() throws Exception
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .receiverNioSelector(transportPoller)
             .senderNioSelector(transportPoller)
-            .unicastSenderFlowControl(UnicastSenderFlowControl::new)
-            .multicastSenderFlowControl(MaxMulticastSenderFlowControl::new)
+            .unicastSenderFlowControl(UnicastFlowControl::new)
+            .multicastSenderFlowControl(MaxMulticastFlowControl::new)
             .conductorTimerWheel(wheel)
             // TODO: remove
             .conductorCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/PublisherStats.java
Patch:
@@ -27,7 +27,8 @@ public PublisherStats(final String channel)
 
     public void setLimit(final long limit)
     {
-        if (limit != this.limit) {
+        if (limit != this.limit)
+        {
             this.limit = limit;
             active = true;
         }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsConsoleOutput.java
Patch:
@@ -30,7 +30,8 @@ public void format(final String[] keys, final long[] vals) throws Exception
         System.out.format("%1$tH:%1$tM:%1$tS - Aeron Stats\n", new Date());
         System.out.println("===============================");
 
-        for (int i = 0; i < keys.length; i++) {
+        for (int i = 0; i < keys.length; i++)
+        {
             System.out.println(keys[i] + ": " + vals[i]);
         }
     }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/PublisherStats.java
Patch:
@@ -27,7 +27,8 @@ public PublisherStats(final String channel)
 
     public void setLimit(final long limit)
     {
-        if (limit != this.limit) {
+        if (limit != this.limit)
+        {
             this.limit = limit;
             active = true;
         }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsConsoleOutput.java
Patch:
@@ -30,7 +30,8 @@ public void format(final String[] keys, final long[] vals) throws Exception
         System.out.format("%1$tH:%1$tM:%1$tS - Aeron Stats\n", new Date());
         System.out.println("===============================");
 
-        for (int i = 0; i < keys.length; i++) {
+        for (int i = 0; i < keys.length; i++)
+        {
             System.out.println(keys[i] + ": " + vals[i]);
         }
     }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsOutput.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface StatsOutput
 {
-  void format(String[] keys, long[] vals) throws Exception;
-  void close() throws Exception;
+    void format(String[] keys, long[] vals) throws Exception;
+
+    void close() throws Exception;
 }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsOutput.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface StatsOutput
 {
-  void format(String[] keys, long[] vals) throws Exception;
-  void close() throws Exception;
+    void format(String[] keys, long[] vals) throws Exception;
+
+    void close() throws Exception;
 }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/StatsOutput.java
Patch:
@@ -17,6 +17,7 @@
 
 public interface StatsOutput
 {
-  void format(String[] keys, long[] vals) throws Exception;
-  void close() throws Exception;
+    void format(String[] keys, long[] vals) throws Exception;
+
+    void close() throws Exception;
 }

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/PublisherTool.java
Patch:
@@ -100,7 +100,7 @@ public PublisherTool(final PubSubOptions options)
         numThreads = Math.min(options.getThreads(), options.getNumberOfStreams());
         if (numThreads < options.getThreads())
         {
-            LOG.warn(options.getThreads() + " threads were requested, but only " + options.getChannels().size() +
+            LOG.warn(options.getThreads() + " threads were requested, but only " + options.getNumberOfStreams() +
                     " channel(s) were specified; using " + numThreads + " thread(s) instead.");
         }
         pubThreads = new Thread[numThreads];

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -18,7 +18,8 @@
 import static java.lang.Boolean.getBoolean;
 import static java.lang.Integer.getInteger;
 import static uk.co.real_logic.aeron.driver.Configuration.CONDUCTOR_BUFFER_LENGTH;
-import static uk.co.real_logic.aeron.driver.Configuration.COUNTER_BUFFERS_LENGTH;
+import static uk.co.real_logic.aeron.driver.Configuration.COUNTER_LABELS_BUFFER_LENGTH;
+import static uk.co.real_logic.aeron.driver.Configuration.COUNTER_VALUES_BUFFER_LENGTH;
 import static uk.co.real_logic.aeron.driver.Configuration.MTU_LENGTH_DEFAULT;
 import static uk.co.real_logic.aeron.driver.Configuration.MTU_LENGTH_PROP_NAME;
 import static uk.co.real_logic.aeron.driver.Configuration.TO_CLIENTS_BUFFER_LENGTH;
@@ -52,11 +53,11 @@
 import uk.co.real_logic.agrona.concurrent.CountersManager;
 import uk.co.real_logic.agrona.concurrent.IdleStrategy;
 import uk.co.real_logic.agrona.concurrent.OneToOneConcurrentArrayQueue;
+import uk.co.real_logic.agrona.concurrent.SigIntBarrier;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 import uk.co.real_logic.agrona.concurrent.broadcast.BroadcastTransmitter;
 import uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer;
 import uk.co.real_logic.agrona.concurrent.ringbuffer.RingBuffer;
-import uk.co.real_logic.agrona.concurrent.SigIntBarrier;
 
 /**
  * Main class for JVM-based media driver

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/Common.java
Patch:
@@ -67,8 +67,9 @@ public static void init(final DatagramChannel channel) throws IOException
         channel.configureBlocking(false);
         channel.setOption(StandardSocketOptions.SO_REUSEADDR, true);
     }
-    
-    public static void init(final DatagramChannel channel, InetSocketAddress sendAddress) throws IOException
+
+    public static void init(final DatagramChannel channel, final InetSocketAddress sendAddress)
+        throws IOException
     {
         channel.configureBlocking(false);
         channel.setOption(StandardSocketOptions.SO_REUSEADDR, true);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/ReceiveWriteUdpPong.java
Patch:
@@ -15,7 +15,7 @@
  */
 package uk.co.real_logic.aeron.samples.raw;
 
-import uk.co.real_logic.aeron.common.concurrent.SigInt;
+import uk.co.real_logic.agrona.concurrent.SigInt;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/WriteReceiveUdpPing.java
Patch:
@@ -15,7 +15,7 @@
 package uk.co.real_logic.aeron.samples.raw;
 
 import org.HdrHistogram.Histogram;
-import uk.co.real_logic.aeron.common.concurrent.SigInt;
+import uk.co.real_logic.agrona.concurrent.SigInt;
 import uk.co.real_logic.agrona.BitUtil;
 
 import java.io.IOException;
@@ -34,7 +34,7 @@
  *
  * @see ReceiveWriteUdpPong
  */
-public class WriteReceiveUdpPing 
+public class WriteReceiveUdpPing
 {
     public static void main(final String[] args) throws IOException
     {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -366,15 +366,15 @@ public Context conclude()
                     cncFile(),
                     CncFileDescriptor.computeCncFileLength(
                         CONDUCTOR_BUFFER_LENGTH + TO_CLIENTS_BUFFER_LENGTH +
-                            COUNTER_BUFFERS_LENGTH + COUNTER_BUFFERS_LENGTH));
+                            COUNTER_LABELS_BUFFER_LENGTH + COUNTER_VALUES_BUFFER_LENGTH));
 
                 cncMetaDataBuffer = CncFileDescriptor.createMetaDataBuffer(cncByteBuffer);
                 CncFileDescriptor.fillMetaData(
                     cncMetaDataBuffer,
                     CONDUCTOR_BUFFER_LENGTH,
                     TO_CLIENTS_BUFFER_LENGTH,
-                    COUNTER_BUFFERS_LENGTH,
-                    COUNTER_BUFFERS_LENGTH);
+                    COUNTER_LABELS_BUFFER_LENGTH,
+                    COUNTER_VALUES_BUFFER_LENGTH);
 
                 final BroadcastTransmitter transmitter =
                     new BroadcastTransmitter(CncFileDescriptor.createToClientsBuffer(cncByteBuffer, cncMetaDataBuffer));

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/PubSubOptions.java
Patch:
@@ -1441,7 +1441,7 @@ private double parseDoubleBetweenZeroAndMaxLong(final String doubleStr) throws P
             "    Send 60 messages at a rate of 1 message per second" + NL +
             NL +
             "-c udp://224.10.10.12:30000#1-10 -r 1Mbps -s 100-200 -m 1000000 -t 2" + NL +
-            "    Create 10 multicast channels on port 30000 using session ID 1 through 10." + NL +
+            "    Create 10 multicast channels on port 30000 using stream ID 1 through 10." + NL +
             "    These channels will be split Round-Robin across 2 threads that will each" + NL +
             "    send messages sized between 100 and 200 bytes at a rate of 1Mbps. After a" + NL +
             "    total of 1 million messages have been sent, the program will exit.";
@@ -1583,7 +1583,7 @@ private double parseDoubleBetweenZeroAndMaxLong(final String doubleStr) throws P
             "--verify (yes|no)" + NL +                                                  // |
             "    Each message will reserve space for checksum data that can be used to" + NL +
             "    verify both the individual message and the stream up to that point." + NL +
-            "    The default behavior is 'yes', and will use the first 12 bytes of the" + NL +
+            "    The default behavior is 'yes', and will use the first 16 bytes of the" + NL +
             "    message payload to store verification data. To send messages with less" + NL +
             "    than 16 bytes of payload this option must be set to 'no'. Subscribers" + NL +
             "    can detect that a message is verifiable. The checksums are not written" + NL +

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConnection.java
Patch:
@@ -469,7 +469,6 @@ public int sendPendingNak()
 
             if (changeNumber == beginLossChange)
             {
-                System.out.format("NAK %d %d %d\n", termId, termOffset, length);
                 channelEndpoint.sendNakMessage(controlAddress, sessionId, streamId, termId, termOffset, length);
                 lastChangeNumber = changeNumber;
                 systemCounters.nakMessagesSent().orderedIncrement();

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/LossDetector.java
Patch:
@@ -50,9 +50,7 @@ public class LossDetector
      * @param nakMessageSender to call when sending a NAK is indicated
      */
     public LossDetector(
-        final TimerWheel wheel,
-        final FeedbackDelayGenerator delayGenerator,
-        final NakMessageSender nakMessageSender)
+        final TimerWheel wheel, final FeedbackDelayGenerator delayGenerator, final NakMessageSender nakMessageSender)
     {
         this.wheel = wheel;
         this.timer = wheel.newBlankTimer();

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -223,7 +223,7 @@ public void onRetransmit(final int termId, int termOffset, final int length)
                     break;
                 }
 
-                bytesSent += available + scanner.padding();
+                bytesSent = available + scanner.padding();
                 remainingBytes -= bytesSent;
             }
             while (remainingBytes > 0);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -223,7 +223,7 @@ public void onRetransmit(final int termId, int termOffset, final int length)
                     break;
                 }
 
-                bytesSent += available + scanner.padding();
+                bytesSent = available + scanner.padding();
                 remainingBytes -= bytesSent;
             }
             while (remainingBytes > 0);

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/PubSubOptions.java
Patch:
@@ -79,7 +79,7 @@ public class PubSubOptions
                 "null", // output
                 "max", // rate
                 "0", // seed
-                "1", // session
+                "default", // session (aeron will generate a random session id)
                 "32", // size
                 "1", // threads
                 "yes" // verify

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -395,7 +395,7 @@ public static SenderFlowControl unicastSenderFlowControlStrategy()
         SenderFlowControl senderFlowControl = null;
         try
         {
-             senderFlowControl= (SenderFlowControl)Class.forName(SENDER_UNICAST_FLOW_CONTROL_STRATEGY).newInstance();
+             senderFlowControl = (SenderFlowControl)Class.forName(SENDER_UNICAST_FLOW_CONTROL_STRATEGY).newInstance();
         }
         catch (final Exception ex)
         {

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/BasicPublisher.java
Patch:
@@ -43,10 +43,11 @@ public static void main(final String[] args) throws Exception
 
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launchEmbedded() : null;
         final Aeron.Context ctx = new Aeron.Context();
-        if(EMBEDDED_MEDIA_DRIVER)
+        if (EMBEDDED_MEDIA_DRIVER)
         {
             ctx.dirName(driver.contextDirName());
         }
+
         try (final Aeron aeron = Aeron.connect(ctx);
              final Publication publication = aeron.addPublication(CHANNEL, STREAM_ID))
         {

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/BasicSubscriber.java
Patch:
@@ -45,7 +45,8 @@ public static void main(final String[] args) throws Exception
         final Aeron.Context ctx = new Aeron.Context()
             .newConnectionHandler(SamplesUtil::printNewConnection)
             .inactiveConnectionHandler(SamplesUtil::printInactiveConnection);
-        if(EMBEDDED_MEDIA_DRIVER)
+
+        if (EMBEDDED_MEDIA_DRIVER)
         {
             ctx.dirName(driver.contextDirName());
         }

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/Pong.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Pong component of Ping-Pong.
- *
+ * <p>
  * Echoes back messages
  */
 public class Pong
@@ -45,10 +45,11 @@ public static void main(final String[] args) throws Exception
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launchEmbedded() : null;
 
         final Aeron.Context ctx = new Aeron.Context();
-        if(EMBEDDED_MEDIA_DRIVER)
+        if (EMBEDDED_MEDIA_DRIVER)
         {
             ctx.dirName(driver.contextDirName());
         }
+
         final BusySpinIdleStrategy idleStrategy = new BusySpinIdleStrategy();
 
         System.out.println("Subscribing Ping at " + PING_CHANNEL + " on stream Id " + PING_STREAM_ID);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/RateSubscriber.java
Patch:
@@ -47,7 +47,8 @@ public static void main(final String[] args) throws Exception
         final Aeron.Context ctx = new Aeron.Context()
             .newConnectionHandler(SamplesUtil::printNewConnection)
             .inactiveConnectionHandler(SamplesUtil::printInactiveConnection);
-        if(EMBEDDED_MEDIA_DRIVER)
+
+        if (EMBEDDED_MEDIA_DRIVER)
         {
             ctx.dirName(driver.contextDirName());
         }

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/StreamingPublisher.java
Patch:
@@ -62,9 +62,9 @@ public static void main(final String[] args) throws Exception
         }
 
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launchEmbedded() : null;
-
         final Aeron.Context context = new Aeron.Context();
-        if(EMBEDDED_MEDIA_DRIVER)
+
+        if (EMBEDDED_MEDIA_DRIVER)
         {
             context.dirName(driver.contextDirName());
         }

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/SendReceiveUdpPing.java
Patch:
@@ -70,7 +70,7 @@ public static void main(final String[] args) throws IOException
 
             histogram.reset();
             System.gc();
-            LockSupport.parkNanos(1000 * 1000 * 1000);
+            LockSupport.parkNanos(1000_000_000);
         }
     }
 
@@ -103,7 +103,7 @@ private static void measureRoundTrip(
                     return;
                 }
 
-                for (int i = receiveChannels.length - 1; i >=0; i--)
+                for (int i = receiveChannels.length - 1; i >= 0; i--)
                 {
                     if (null != receiveChannels[i].receive(buffer))
                     {

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PongTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import uk.co.real_logic.aeron.common.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.agrona.BitUtil;
 import uk.co.real_logic.agrona.DirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
@@ -133,7 +134,7 @@ public void playPingPong()
 
         verify(pongHandler).onData(
             any(UnsafeBuffer.class),
-            eq(Header.LENGTH),
+            eq(DataHeaderFlyweight.HEADER_LENGTH),
             eq(BitUtil.SIZE_OF_INT),
             any(Header.class));
     }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogRebuilder.java
Patch:
@@ -42,7 +42,7 @@ public static void insert(
     {
         final int lengthOffset = lengthOffset(srcOffset);
         final int frameLength = packet.getInt(lengthOffset, LITTLE_ENDIAN);
-        packet.putInt(lengthOffset, 0, LITTLE_ENDIAN);
+        packet.putIntOrdered(lengthOffset, 0);
 
         termBuffer.putBytes(termOffset, packet, srcOffset, length);
         frameLengthOrdered(termBuffer, termOffset, frameLength);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConnection.java
Patch:
@@ -41,7 +41,6 @@ class DriverConnectionConductorFields extends DriverConnectionPadding1
 {
     protected long completedPosition;
     protected long subscribersPosition;
-    protected long lastSmTimestamp;
     protected long timeOfLastStatusChange;
 }
 
@@ -53,6 +52,7 @@ class DriverConnectionPadding2 extends DriverConnectionConductorFields
 class DriverConnectionHotFields extends DriverConnectionPadding2
 {
     protected long timeOfLastPacket;
+    protected long lastStatusMessageTimestamp;
     protected long lastStatusMessagePosition;
 }
 
@@ -392,15 +392,15 @@ public int sendPendingStatusMessage(final long now, final long statusMessageTime
         if (ACTIVE == status)
         {
             final long statusMessagePosition = this.statusMessagePosition;
-            if ((statusMessagePosition != lastStatusMessagePosition) || now > (lastSmTimestamp + statusMessageTimeout))
+            if ((statusMessagePosition != lastStatusMessagePosition) || now > (lastStatusMessageTimestamp + statusMessageTimeout))
             {
                 final int activeTermId = computeTermIdFromPosition(statusMessagePosition, positionBitsToShift, initialTermId);
                 final int termOffset = (int)statusMessagePosition & termLengthMask;
 
                 channelEndpoint.sendStatusMessage(
                     controlAddress, sessionId, streamId, activeTermId, termOffset, currentWindowLength, (byte)0);
 
-                lastSmTimestamp = now;
+                lastStatusMessageTimestamp = now;
                 lastStatusMessagePosition = statusMessagePosition;
                 systemCounters.statusMessagesSent().orderedIncrement();
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/FragmentAssemblyAdapter.java
Patch:
@@ -34,7 +34,7 @@
  *
  * Session based buffers will be allocated and grown as necessary based on the length of messages to be assembled.
  *
- * When sessions go inactive {@link InactiveConnectionHandler}, it is possible to free the buffer by calling
+ * When sessions go inactive see {@link InactiveConnectionHandler}, it is possible to free the buffer by calling
  * {@link #freeSessionBuffer(int)}.
  */
 public class FragmentAssemblyAdapter implements DataHandler

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/uri/AeronUri.java
Patch:
@@ -32,6 +32,7 @@
  * value     = *( "[^|]" )
  * </pre>
  *
+ * <p>
  * Multiple params with the same key are allowed, the last value specified 'wins'.
  */
 public class AeronUri

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/TermGapScanner.java
Patch:
@@ -79,7 +79,7 @@ public static boolean scanForGap(
             while (completedOffset < limit)
             {
                 completedOffset += FRAME_ALIGNMENT;
-                final int frameLength = termBuffer.getInt(completedOffset);
+                final int frameLength = termBuffer.getIntVolatile(completedOffset);
 
                 if (0 != frameLength)
                 {

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/uri/SocketAddressUtil.java
Patch:
@@ -26,7 +26,8 @@
 public class SocketAddressUtil
 {
     private static final Pattern IPV4_ADDRESS_PATTERN = Pattern.compile("([^:]+)(?::([0-9]+))?");
-    private static final Pattern IPV6_ADDRESS_PATTERN = Pattern.compile("\\[([0-9A-Fa-f:]+)\\](?::([0-9]+))?");
+    private static final Pattern IPV6_ADDRESS_PATTERN =
+            Pattern.compile("\\[([0-9A-Fa-f:]+)(?:%[a-zA-Z0-9_.~-]+)?\\](?::([0-9]+))?");
 
     private static InetSocketAddress parse(CharSequence cs, BiFunction<String, String, InetSocketAddress> consumer)
     {

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/uri/SocketAddressUtil.java
Patch:
@@ -26,7 +26,8 @@
 public class SocketAddressUtil
 {
     private static final Pattern IPV4_ADDRESS_PATTERN = Pattern.compile("([^:]+)(?::([0-9]+))?");
-    private static final Pattern IPV6_ADDRESS_PATTERN = Pattern.compile("\\[([0-9A-Fa-f:]+)\\](?::([0-9]+))?");
+    private static final Pattern IPV6_ADDRESS_PATTERN =
+            Pattern.compile("\\[([0-9A-Fa-f:]+)(?:%[a-zA-Z0-9_.~-]+)?\\](?::([0-9]+))?");
 
     private static InetSocketAddress parse(CharSequence cs, BiFunction<String, String, InetSocketAddress> consumer)
     {

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/MultiDriverTest.java
Patch:
@@ -115,13 +115,15 @@ public void closeEverything()
     }
 
     @Test(timeout = 10000)
-    public void shouldSpinUpAndShutdown()
+    public void shouldSpinUpAndShutdown() throws Exception
     {
         launch();
 
         publication = clientA.addPublication(MULTICAST_URI, STREAM_ID, SESSION_ID);
         subscriptionA = clientA.addSubscription(MULTICAST_URI, STREAM_ID, dataHandlerA);
         subscriptionB = clientB.addSubscription(MULTICAST_URI, STREAM_ID, dataHandlerB);
+
+        Thread.sleep(20); // allow for connections to be established
     }
 
     @Test(timeout = 10000)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannel.java
Patch:
@@ -161,7 +161,7 @@ private static void validateUnicastXorMulticast(AeronUri uri)
             final String msg =
                 "URI must contain either a unicast configuration (%s) or a multicast configuration (%s) not both";
             throw new IllegalArgumentException(
-                format(msg, Arrays.toString(MULTICAST_KEYS), Arrays.toString(UNICAST_KEYS)));
+                format(msg, Arrays.toString(UNICAST_KEYS), Arrays.toString(MULTICAST_KEYS)));
         }
     }
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/MultiplePublisherWithFrag.java
Patch:
@@ -44,8 +44,6 @@ public static void main(final String[] args) throws Exception
     {
         System.out.println("Publishing to " + CHANNEL + " on stream Id " + STREAM_ID);
 
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
         // Create a context for client connection
         final Aeron.Context ctx = new Aeron.Context();

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/AeronStat.java
Patch:
@@ -35,8 +35,6 @@ public class AeronStat
 {
     public static void main(final String[] args) throws Exception
     {
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final File cncFile = CommonContext.newDefaultCncFile();
 
         System.out.println("Command `n Control file " + cncFile);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/BasicPublisher.java
Patch:
@@ -41,8 +41,6 @@ public static void main(final String[] args) throws Exception
     {
         System.out.println("Publishing to " + CHANNEL + " on stream Id " + STREAM_ID);
 
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
         final Aeron.Context ctx = new Aeron.Context();
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/BasicSubscriber.java
Patch:
@@ -40,8 +40,6 @@ public static void main(final String[] args) throws Exception
     {
         System.out.println("Subscribing to " + CHANNEL + " on stream Id " + STREAM_ID);
 
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final Aeron.Context ctx = new Aeron.Context()

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedPingPong.java
Patch:
@@ -53,8 +53,6 @@ public class EmbeddedPingPong
 
     public static void main(final String[] args) throws Exception
     {
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.DEDICATED)
             .conductorIdleStrategy(new BackoffIdleStrategy(1, 1, 1, 1))

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/EmbeddedThroughput.java
Patch:
@@ -44,8 +44,6 @@ public class EmbeddedThroughput
 
     public static void main(final String[] args) throws Exception
     {
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final RateReporter reporter = new RateReporter(TimeUnit.SECONDS.toNanos(1), SamplesUtil::printRate);
         final DataHandler rateReporterHandler = rateReporterHandler(reporter);
         final ExecutorService executor = Executors.newFixedThreadPool(3);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/LowLatencyMediaDriver.java
Patch:
@@ -25,8 +25,6 @@ public class LowLatencyMediaDriver
 {
     public static void main(final String[] args) throws Exception
     {
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .threadingMode(ThreadingMode.DEDICATED)
             .conductorIdleStrategy(new BackoffIdleStrategy(1, 1, 1, 1))

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/Ping.java
Patch:
@@ -58,8 +58,6 @@ public class Ping
 
     public static void main(final String[] args) throws Exception
     {
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
         final Aeron.Context ctx = new Aeron.Context()
             .newConnectionHandler(Ping::newPongConnectionHandler);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/Pong.java
Patch:
@@ -42,8 +42,6 @@ public class Pong
 
     public static void main(final String[] args) throws Exception
     {
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final Aeron.Context ctx = new Aeron.Context();

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/RateSubscriber.java
Patch:
@@ -41,8 +41,6 @@ public static void main(final String[] args) throws Exception
     {
         System.out.println("Subscribing to " + CHANNEL + " on stream Id " + STREAM_ID);
 
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
         final ExecutorService executor = Executors.newFixedThreadPool(2);
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/StreamingPublisher.java
Patch:
@@ -61,8 +61,6 @@ public static void main(final String[] args) throws Exception
             throw new IllegalArgumentException(String.format("Message length must be at least %d bytes", SIZE_OF_LONG));
         }
 
-        SamplesUtil.useSharedMemoryOnLinux();
-
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final Aeron.Context context = new Aeron.Context();

File: aeron-tools/src/test/java/uk/co/real_logic/aeron/tools/RandomInputStreamTest.java
Patch:
@@ -31,7 +31,7 @@ public void readByteArraySmall() throws Exception
     {
         byte[] array = new byte[1];
         int read = stream.read(array);
-        assertThat(read, is(1));
+        assertThat(read, both(greaterThanOrEqualTo(0)).and(lessThanOrEqualTo(1)));
     }
 
     @Test

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/ReceiverTest.java
Patch:
@@ -41,8 +41,7 @@
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.nio.channels.DatagramChannel;
-import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
@@ -73,7 +72,7 @@ public class ReceiverTest
     private static final InetSocketAddress SOURCE_ADDRESS = new InetSocketAddress("localhost", 45679);
 
     private static final PositionIndicator POSITION_INDICATOR = mock(PositionIndicator.class);
-    private static final List<PositionIndicator> POSITION_INDICATORS = new ArrayList<>(Arrays.asList(POSITION_INDICATOR));
+    private static final List<PositionIndicator> POSITION_INDICATORS = Collections.singletonList(POSITION_INDICATOR);
 
     private final LossHandler mockLossHandler = mock(LossHandler.class);
     private final TransportPoller mockTransportPoller = mock(TransportPoller.class);

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/RateController.java
Patch:
@@ -35,8 +35,8 @@ public class RateController
     private long messagesSent;
     private long bytesSent;
 
-    private final int iterations;
-    private int currentIteration;
+    private final long iterations;
+    private long currentIteration;
 
     public boolean next()
     {
@@ -552,7 +552,7 @@ public void stop()
 
     }
 
-    public RateController(final Callback callback, List<RateControllerInterval> intervals, int iterations) throws Exception
+    public RateController(final Callback callback, List<RateControllerInterval> intervals, long iterations) throws Exception
     {
         if (iterations <= 0)
         {

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/BufferVisualization.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.awt.Color;
 import java.awt.Dimension;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/DriverStats.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.io.File;
 import java.nio.MappedByteBuffer;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/LogAnalyzer.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import javafx.application.Application;
 import javafx.event.ActionEvent;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/LogAnalyzerWorkerThread.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 /**
  * Created by philip on 3/26/15.

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/LogModel.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.PARTITION_COUNT;
 import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.activeTermId;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/NavigationModel.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.util.Observable;
 

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/NavigationPanel.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.io.File;
 import java.util.Observable;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/StatsPanel.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.awt.BorderLayout;
 import java.awt.event.ActionEvent;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/TermMetadataModel.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.util.Observable;
 

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/log_analysis/TermMetadataPanel.java
Patch:
@@ -1,4 +1,4 @@
-package uk.co.real_logic.aeron.tools.uk.co.real_logic.aeron.tools.log_analysis;
+package uk.co.real_logic.aeron.tools.log_analysis;
 
 import java.awt.Dimension;
 import java.util.Observable;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/NavigationPanel.java
Patch:
@@ -1,6 +1,5 @@
 package uk.co.real_logic.aeron.tools;
 
-import java.awt.Dimension;
 import java.io.File;
 import java.util.Observable;
 import java.util.Observer;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannelTransport.java
Patch:
@@ -61,7 +61,7 @@ public UdpChannelTransport(
 
         try
         {
-            datagramChannel = DatagramChannel.open();
+            datagramChannel = DatagramChannel.open(udpChannel.protocolFamily());
             if (udpChannel.isMulticast())
             {
                 final NetworkInterface localInterface = udpChannel.localInterface();

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpChannelTransport.java
Patch:
@@ -61,7 +61,7 @@ public UdpChannelTransport(
 
         try
         {
-            datagramChannel = DatagramChannel.open();
+            datagramChannel = DatagramChannel.open(udpChannel.protocolFamily());
             if (udpChannel.isMulticast())
             {
                 final NetworkInterface localInterface = udpChannel.localInterface();

File: aeron-client/src/main/java/uk/co/real_logic/aeron/FragmentAssemblyAdapter.java
Patch:
@@ -34,7 +34,7 @@
  *
  * Session based buffers will be allocated and grown as necessary based on the length of messages to be assembled.
  *
- * When sessions go inactive {@see InactiveConnectionHandler}, it is possible to free the buffer by calling
+ * When sessions go inactive {@link InactiveConnectionHandler}, it is possible to free the buffer by calling
  * {@link #freeSessionBuffer(int)}.
  */
 public class FragmentAssemblyAdapter implements DataHandler

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/NetworkUtil.java
Patch:
@@ -46,7 +46,7 @@ public class NetworkUtil
      * @param subnetPrefix
      * @return {@link NetworkInterface}s that match the supplied criteria, ordered by the length
      * of the subnet prefix.  Empty if none match.
-     * @throws SocketException
+     * @throws SocketException Exception.
      */
     public static Collection<NetworkInterface> filterBySubnet(InetAddress address, int subnetPrefix)
         throws SocketException

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/uri/AeronUri.java
Patch:
@@ -32,7 +32,7 @@
  * value     = *( "[^|]" )
  * </pre>
  *
- * <li>Multiple params with the same key are allowed, the last value specified 'wins'.</li>
+ * Multiple params with the same key are allowed, the last value specified 'wins'.
  */
 public class AeronUri
 {

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/PublisherTool.java
Patch:
@@ -390,12 +390,12 @@ public int onNext()
 			int length = -1;
 			boolean sendSucceeded = false;
 			final Publication pub = publications[currentPublicationIndex];
+			final MessageStream ms = messageStreams[currentPublicationIndex];
 			currentPublicationIndex++;
 			if (currentPublicationIndex == publications.length)
 			{
 				currentPublicationIndex = 0;
 			}
-			final MessageStream ms = messageStreams[currentPublicationIndex];
 			if (!ms.isActive())
 			{
 				/* I guess we're out of bytes - probably should only happen if we're sending a file. */

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
Patch:
@@ -148,7 +148,7 @@ public ByteBuffer[] sliceTerms()
             final MappedByteBuffer buffer = mappedBuffers[0];
             for (int i = 0; i < PARTITION_COUNT; i++)
             {
-                buffer.limit((termLength * i) + (termLength - 1))
+                buffer.limit((termLength * i) + termLength)
                       .position(termLength * i);
 
                 terms[i] = buffer.slice();

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogAppender.java
Patch:
@@ -229,7 +229,8 @@ private ActionStatus appendFragmentedMessage(final DirectBuffer srcBuffer, final
         final int numMaxPayloads = length / maxPayloadLength;
         final int remainingPayload = length % maxPayloadLength;
         final int headerLength = this.headerLength;
-        final int requiredCapacity = align(remainingPayload + headerLength, FRAME_ALIGNMENT) + (numMaxPayloads * maxFrameLength);
+        final int lastFrameLength = (remainingPayload > 0) ? align(remainingPayload + headerLength, FRAME_ALIGNMENT) : 0;
+        final int requiredCapacity = (numMaxPayloads * maxFrameLength) + lastFrameLength;
         int frameOffset = getTailAndAdd(requiredCapacity);
 
         final UnsafeBuffer termBuffer = termBuffer();

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MessagesAtMessagesPerSecondInterval.java
Patch:
@@ -7,14 +7,14 @@ public class MessagesAtMessagesPerSecondInterval extends RateControllerInterval
 	/* The rate we _want_ to achieve, if possible.  Might not be able
 	 * to hit it exactly due to receiver pacing, etc.  But it's what
 	 * we're aiming for. */
-	private final long goalMessagesPerSecond;
+	private final double goalMessagesPerSecond;
 	/* Number of messages to send; for this interval type, this is a
 	 * hard number, not just a goal.  We _have_ to send this many
 	 * messages, no matter how long it takes or how slowly we end up
 	 * sending them. */
 	private final long messages;
 
-	public MessagesAtMessagesPerSecondInterval(long messages, long messagesPerSecond)
+	public MessagesAtMessagesPerSecondInterval(long messages, double messagesPerSecond)
 	{
 		this.goalMessagesPerSecond = messagesPerSecond;
 		this.messages = messages;

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/SecondsAtMessagesPerSecondInterval.java
Patch:
@@ -7,11 +7,11 @@ public class SecondsAtMessagesPerSecondInterval extends RateControllerInterval
 	/* The rate we _want_ to achieve, if possible.  Might not be able
 	 * to hit it exactly due to receiver pacing, etc.  But it's what
 	 * we're aiming for. */
-	private final long goalMessagesPerSecond;
+	private final double goalMessagesPerSecond;
 	/* Number of seconds (can be fractional) to run for, in total. */
 	private final double seconds;
 
-	public SecondsAtMessagesPerSecondInterval(double seconds, long messagesPerSecond)
+	public SecondsAtMessagesPerSecondInterval(double seconds, double messagesPerSecond)
 	{
 		this.goalMessagesPerSecond = messagesPerSecond;
 		this.seconds = seconds;

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/BasicPublisherWithFragmentation.java
Patch:
@@ -20,6 +20,7 @@
 import uk.co.real_logic.agrona.CloseHelper;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 import uk.co.real_logic.aeron.driver.MediaDriver;
+import uk.co.real_logic.aeron.tools.*;
 
 import java.nio.ByteBuffer;
 import java.util.concurrent.TimeUnit;
@@ -54,6 +55,7 @@ public static void main(final String[] args) throws Exception
         {
             for (int i = 0; i < 5; i++)
             {
+            	MessageStream msgStream = new MessageStream(12, 1024 * 1024 * 2);
                 final String message = "Hello World! " + i;
                 BUFFER.putBytes(0, message.getBytes());
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -471,7 +471,7 @@ private void onAddSubscription(final String channel, final int streamId, final l
             if (connection.matches(channelEndpoint, streamId))
             {
                 final int subscriberPositionCounterId = allocatePositionCounter(
-                    "subscriber", channel, connection.sessionId(), streamId);
+                    "subscriber pos", channel, connection.sessionId(), streamId);
                 final BufferPositionIndicator indicator = new BufferPositionIndicator(
                     countersBuffer, subscriberPositionCounterId, countersManager);
                 final String sourceInfo = generateSourceInfo(connection.sourceAddress());

File: aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/MessageSizePattern.java
Patch:
@@ -2,13 +2,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Random;
 
 /**
  * Create a pattern for determining message payload size. Use the constructors to start the pattern,
  * then use the addPatternEntry overloads to add more if necessary.
  * #getNext() will return the next size in the pattern.
- * Not thread safe, use the copy constructor to duplicate the pattern other threads.
+ * Not thread safe, use the copy constructor to duplicate the pattern for other threads.
  */
 public class MessageSizePattern
 {
@@ -34,7 +33,7 @@ final private class MessageSizeEntry
     /* minimum size starts at max value so it can be set lower */
     private int patternMinSize = Integer.MAX_VALUE;
     /* maximum size starts at min value so it can be set higher */
-    private int patternMaxSize = Integer.MIN_VALUE;
+    private int patternMaxSize = 0;
     private final List<MessageSizeEntry> entries = new ArrayList<MessageSizeEntry>();
 
     /**

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/StreamingPublisher.java
Patch:
@@ -52,7 +52,7 @@ public static void main(final String[] args) throws Exception
     {
         if (MESSAGE_LENGTH < BitUtil.SIZE_OF_LONG)
         {
-            throw new IllegalArgumentException(String.format("Message length must be at least %d bytes", MESSAGE_LENGTH));
+            throw new IllegalArgumentException(String.format("Message length must be at least %d bytes", BitUtil.SIZE_OF_LONG));
         }
 
         SamplesUtil.useSharedMemoryOnLinux();

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/StreamingPublisher.java
Patch:
@@ -52,7 +52,7 @@ public static void main(final String[] args) throws Exception
     {
         if (MESSAGE_LENGTH < BitUtil.SIZE_OF_LONG)
         {
-            throw new IllegalArgumentException(String.format("Message length must be at least %d bytes", MESSAGE_LENGTH));
+            throw new IllegalArgumentException(String.format("Message length must be at least %d bytes", BitUtil.SIZE_OF_LONG));
         }
 
         SamplesUtil.useSharedMemoryOnLinux();

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/StreamingPublisher.java
Patch:
@@ -110,13 +110,13 @@ public static void main(final String[] args) throws Exception
     }
 
     public static void printRate(
-        final double messagesPerSec, final double bytesPerSec, final long totalMessages, final long totalBytes)
+        final double messagesPerSec, final double bytesPerSec, final long totalFragments, final long totalBytes)
     {
         if (printingActive)
         {
             System.out.format(
-                "%.02g msgs/sec, %.02g bytes/sec, totals %d messages %d MB\n",
-                messagesPerSec, bytesPerSec, totalMessages, totalBytes / (1024 * 1024));
+                "%.02g msgs/sec, %.02g bytes/sec, totals %d message fragments %d MB\n",
+                messagesPerSec, bytesPerSec, totalFragments, totalBytes / (1024 * 1024));
         }
     }
 }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Connection.java
Patch:
@@ -60,7 +60,7 @@ public Connection(
         final int currentTermId = computeTermIdFromPosition(initialPosition, positionBitsToShift, initialTermId);
         final int initialTermOffset = computeTermOffsetFromPosition(initialPosition, positionBitsToShift);
         this.activeTermId = currentTermId;
-        this.activeIndex = partitionIndex(initialTermId, currentTermId);
+        this.activeIndex = indexByTerm(initialTermId, currentTermId);
 
         logReaders[activeIndex].seek(initialTermOffset);
         subscriberPosition.position(initialPosition);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Publication.java
Patch:
@@ -137,7 +137,7 @@ public boolean offer(final DirectBuffer buffer, final int offset, final int leng
         boolean succeeded = false;
         final int initialTermId = initialTermId(logMetaDataBuffer);
         final int activeTermId = activeTermId(logMetaDataBuffer);
-        final int activeIndex = partitionIndex(initialTermId, activeTermId);
+        final int activeIndex = indexByTerm(initialTermId, activeTermId);
         final LogAppender logAppender = logAppenders[activeIndex];
         final int currentTail = logAppender.tailVolatile();
 
@@ -197,7 +197,7 @@ public boolean tryClaim(final int length, final BufferClaim bufferClaim)
         boolean succeeded = false;
         final int initialTermId = initialTermId(logMetaDataBuffer);
         final int activeTermId = activeTermId(logMetaDataBuffer);
-        final int activeIndex = partitionIndex(initialTermId, activeTermId);
+        final int activeIndex = indexByTerm(initialTermId, activeTermId);
         final LogAppender logAppender = logAppenders[activeIndex];
         final int currentTail = logAppender.tailVolatile();
 

File: aeron-client/src/test/java/uk/co/real_logic/aeron/SubscriptionTest.java
Patch:
@@ -36,7 +36,7 @@ public class SubscriptionTest
     private static final int SESSION_ID_1 = 13;
     private static final int SESSION_ID_2 = 14;
     private static final int TERM_ID_1 = 1;
-    private static final int ACTIVE_INDEX = LogBufferDescriptor.partitionIndex(TERM_ID_1, TERM_ID_1);
+    private static final int ACTIVE_INDEX = LogBufferDescriptor.indexByTerm(TERM_ID_1, TERM_ID_1);
     private static final long SUBSCRIPTION_CORRELATION_ID = 100;
     private static final long CONNECTION_CORRELATION_ID = 101;
     private static final int READ_BUFFER_CAPACITY = 1024;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogReader.java
Patch:
@@ -81,9 +81,9 @@ public int read(final DataHandler handler, final int framesCountLimit)
     {
         int framesCounter = 0;
         int offset = this.offset;
-        final int capacity = capacity();
-        final UnsafeBuffer termBuffer = termBuffer();
         final Header header = this.header;
+        final UnsafeBuffer termBuffer = termBuffer();
+        final int capacity = termBuffer.capacity();
 
         while (offset < capacity && framesCounter < framesCountLimit)
         {

File: aeron-common/src/test/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogAppenderTest.java
Patch:
@@ -206,7 +206,7 @@ public void shouldTripWhenAppendingToLogAtCapacity()
         final int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT);
 
         when(metaDataBuffer.getAndAddInt(TERM_TAIL_COUNTER_OFFSET, alignedFrameLength))
-            .thenReturn(logAppender.capacity());
+            .thenReturn(TERM_BUFFER_CAPACITY);
 
         assertThat(logAppender.append(buffer, 0, msgLength), is(TRIPPED));
 
@@ -225,8 +225,8 @@ public void shouldFailWhenTheLogIsAlreadyTripped()
         final int alignedFrameLength = align(frameLength, FRAME_ALIGNMENT);
 
         when(metaDataBuffer.getAndAddInt(TERM_TAIL_COUNTER_OFFSET, alignedFrameLength))
-            .thenReturn(logAppender.capacity())
-            .thenReturn(logAppender.capacity() + alignedFrameLength);
+            .thenReturn(TERM_BUFFER_CAPACITY)
+            .thenReturn(TERM_BUFFER_CAPACITY + alignedFrameLength);
 
         assertThat(logAppender.append(buffer, 0, msgLength), is(TRIPPED));
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConnection.java
Patch:
@@ -288,7 +288,7 @@ public int scanForGaps()
             final int activeTermId = computeTermIdFromPosition(completedPosition, positionBitsToShift, initialTermId);
 
             return lossHandler.scan(
-                rebuilders[partitionIndex(initialTermId, activeTermId)].termBuffer(),
+                rebuilders[indexByTerm(initialTermId, activeTermId)].termBuffer(),
                 completedPosition,
                 hwmPosition.position(),
                 termLengthMask,
@@ -332,7 +332,7 @@ public int insertPacket(final int termId, final int termOffset, final UnsafeBuff
         }
 
         final int activeTermId = computeTermIdFromPosition(completedPosition, positionBitsToShift, initialTermId);
-        final int activeIndex = partitionIndex(initialTermId, activeTermId);
+        final int activeIndex = indexByTerm(initialTermId, activeTermId);
 
         if (termId == activeTermId)
         {
@@ -404,7 +404,7 @@ public int sendPendingStatusMessages(final long now)
         {
             final long position = subscribersPosition.get();
             final int currentSmTermId = computeTermIdFromPosition(position, positionBitsToShift, initialTermId);
-            final int currentSmTail = computeTermOffsetFromPosition(position, positionBitsToShift);
+            final int currentSmTail = (int)position & termLengthMask;
 
             if (0 == lastSmTimestamp || currentSmTermId != lastSmTermId ||
                 (position - lastSmPosition) > currentGain || now > (lastSmTimestamp + statusMessageTimeout))

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/ReceiverTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import uk.co.real_logic.aeron.common.HeapPositionReporter;
 import uk.co.real_logic.aeron.common.TimerWheel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 import uk.co.real_logic.agrona.concurrent.AtomicCounter;
@@ -64,7 +65,7 @@ public class ReceiverTest
     private static final int TERM_ID = 3;
     private static final int SESSION_ID = 1;
     private static final int INITIAL_TERM_OFFSET = 0;
-    private static final int ACTIVE_INDEX = partitionIndex(TERM_ID, TERM_ID);
+    private static final int ACTIVE_INDEX = indexByTerm(TERM_ID, TERM_ID);
     private static final byte[] FAKE_PAYLOAD = "Hello there, message!".getBytes();
     private static final int INITIAL_WINDOW_LENGTH = Configuration.INITIAL_WINDOW_LENGTH_DEFAULT;
     private static final long STATUS_MESSAGE_TIMEOUT = Configuration.STATUS_MESSAGE_TIMEOUT_DEFAULT_NS;

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/SenderTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.stubbing.Answer;
+import uk.co.real_logic.aeron.common.HeapPositionReporter;
 import uk.co.real_logic.aeron.common.TimerWheel;
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/ReceiverTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import uk.co.real_logic.aeron.common.HeapPositionReporter;
 import uk.co.real_logic.aeron.common.TimerWheel;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;
 import uk.co.real_logic.agrona.concurrent.AtomicCounter;

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/SenderTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.stubbing.Answer;
+import uk.co.real_logic.aeron.common.HeapPositionReporter;
 import uk.co.real_logic.aeron.common.TimerWheel;
 import uk.co.real_logic.agrona.MutableDirectBuffer;
 import uk.co.real_logic.agrona.concurrent.UnsafeBuffer;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogBufferDescriptor.java
Patch:
@@ -344,7 +344,7 @@ public static int computeTermIdFromPosition(final long position, final int posit
      */
     public static int computeTermOffsetFromPosition(final long position, final int positionBitsToShift)
     {
-        final int mask = (int)((1L << positionBitsToShift) - 1);
+        final long mask = (1L << positionBitsToShift) - 1L;
 
         return (int)(position & mask);
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/LossHandler.java
Patch:
@@ -75,7 +75,7 @@ public LossHandler(
 
         final int capacity = termBuffers[0].capacity();
         this.positionBitsToShift = Integer.numberOfTrailingZeros(capacity);
-        this.mask = (int)((long)capacity - 1);
+        this.mask = capacity - 1;
 
         this.initialTermId = initialTermId;
     }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogBufferDescriptor.java
Patch:
@@ -133,7 +133,7 @@ public class LogBufferDescriptor
     public static final int LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH = CACHE_LINE_LENGTH;
 
     /**
-     * Total length of the log meta buffer in bytes.
+     * Total length of the log meta data buffer in bytes.
      *
      * <pre>
      *   0                   1                   2                   3

File: aeron-client/src/main/java/uk/co/real_logic/aeron/LogBuffers.java
Patch:
@@ -33,8 +33,6 @@
  */
 class LogBuffers implements AutoCloseable
 {
-    private static final int ONE_GIG = 1 << 30;
-
     private final MappedByteBuffer[] mappedByteBuffers;
     private final UnsafeBuffer[] atomicBuffers = new UnsafeBuffer[(PARTITION_COUNT * 2) + 1];
 
@@ -45,7 +43,7 @@ public LogBuffers(final String logFileName)
             final long logLength = logChannel.size();
             final int termLength = computeTermLength(logLength);
 
-            if (termLength < ONE_GIG)
+            if (logLength < Integer.MAX_VALUE)
             {
                 final MappedByteBuffer mappedBuffer = logChannel.map(READ_WRITE, 0, logLength);
                 mappedByteBuffers = new MappedByteBuffer[]{ mappedBuffer };

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -124,7 +124,6 @@ public DriverPublication(
         termCapacity = logScanners[0].capacity();
         senderLimit = new AtomicLong(initialPositionLimit);
         activeTermId = initialTermId;
-        initialTermId(rawLog.logMetaData(), initialTermId);
 
         timeOfLastSendOrHeartbeat = clock.time();
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedRawLog.java
Patch:
@@ -132,7 +132,7 @@ public void writeBufferLocations(final BuffersReadyFlyweight buffersReadyFlyweig
         {
             final int index = i + PARTITION_COUNT;
             buffersReadyFlyweight.bufferOffset(index, metaDataSectionOffset + (i * TERM_META_DATA_LENGTH));
-            buffersReadyFlyweight.bufferLength(index, termLength);
+            buffersReadyFlyweight.bufferLength(index, TERM_META_DATA_LENGTH);
             buffersReadyFlyweight.bufferLocation(index, absoluteFilePath);
         }
 

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/buffer/RawLogFactoryTest.java
Patch:
@@ -32,7 +32,7 @@
 import static org.junit.Assert.assertThat;
 import static org.mockito.Mockito.mock;
 
-public class RawLogPartitionFactoryTest
+public class RawLogFactoryTest
 {
     private static final String CHANNEL = "udp://localhost:4321";
     private static final int SESSION_ID = 100;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/command/PublicationBuffersReadyFlyweight.java
Patch:
@@ -26,7 +26,7 @@
 import static uk.co.real_logic.agrona.BitUtil.SIZE_OF_LONG;
 
 /**
- * Message to denote that new buffers have been added for a subscription.
+ * Message to denote that new buffers have been setup for a publication.
  *
  * @see uk.co.real_logic.aeron.common.command.ControlProtocolEvents
  *

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCode.java
Patch:
@@ -49,7 +49,9 @@ public enum EventCode
     FRAME_OUT_INCOMPLETE_SEND(20, EventCodec::dissectAsString),
 
     FLOW_CONTROL_OVERRUN(21, EventCodec::dissectAsString),
-    INVALID_VERSION(22, EventCodec::dissectAsCommand);
+    INVALID_VERSION(22, EventCodec::dissectAsCommand),
+
+    CHANNEL_CREATION(23, EventCodec::dissectAsString);
 
     private static final Int2ObjectHashMap<EventCode> EVENT_CODE_BY_ID_MAP = new Int2ObjectHashMap<>();
 

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventConfiguration.java
Patch:
@@ -69,7 +69,8 @@ public class EventConfiguration
         CMD_OUT_ON_OPERATION_SUCCESS,
         ERROR_DELETING_FILE,
         FRAME_OUT_INCOMPLETE_SEND,
-        FLOW_CONTROL_OVERRUN);
+        FLOW_CONTROL_OVERRUN,
+        CHANNEL_CREATION);
 
     public static final Set<EventCode> ALL_LOGGER_EVENT_CODES = EnumSet.allOf(EventCode.class);
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -351,6 +351,8 @@ private void onAddPublication(
         final String channel, final int sessionId, final int streamId, final long correlationId, final long clientId)
     {
         final UdpChannel udpChannel = UdpChannel.parse(channel);
+        logger.logChannelCreated(udpChannel.description());
+
         SendChannelEndpoint channelEndpoint = sendChannelEndpointByChannelMap.get(udpChannel.canonicalForm());
         if (null == channelEndpoint)
         {

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/NetworkInterfaceShim.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Enumeration;
 import java.util.List;
 
-public interface NetworkInterfaceShim
+interface NetworkInterfaceShim
 {
     Enumeration<NetworkInterface> getNetworkInterfaces() throws SocketException;
     List<InterfaceAddress> getInterfaceAddresses(NetworkInterface ifc);

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/TransferToPing.java
Patch:
@@ -40,15 +40,15 @@ public static void main(final String[] args) throws IOException
         final FileChannel sendFileChannel = Common.createTmpFileChannel();
         final ByteBuffer sendByteBuffer = sendFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, MTU_LENGTH_DEFAULT);
         final DatagramChannel sendDatagramChannel = DatagramChannel.open();
-        sendDatagramChannel.bind(new InetSocketAddress("localhost", 40123));
         init(sendDatagramChannel);
+        sendDatagramChannel.bind(new InetSocketAddress("localhost", 40123));
         sendDatagramChannel.connect(new InetSocketAddress("localhost", 40124));
 
         final FileChannel receiveFileChannel = Common.createTmpFileChannel();
         final ByteBuffer receiveByteBuffer = receiveFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, MTU_LENGTH_DEFAULT);
         final DatagramChannel receiveDatagramChannel = DatagramChannel.open();
-        receiveDatagramChannel.bind(new InetSocketAddress("localhost", 40126));
         init(receiveDatagramChannel);
+        receiveDatagramChannel.bind(new InetSocketAddress("localhost", 40126));
         receiveDatagramChannel.connect(new InetSocketAddress("localhost", 40125));
 
         final AtomicBoolean running = new AtomicBoolean(true);
@@ -119,7 +119,7 @@ private static void measureRoundTrip(
                 throw new IllegalStateException("Data Loss:" + sequenceNumber + " to " + receivedSequenceNumber);
             }
 
-            final long duration = System.nanoTime() - receiveByteBuffer.get(SIZE_OF_LONG);
+            final long duration = System.nanoTime() - receiveByteBuffer.getLong(SIZE_OF_LONG);
             histogram.recordValue(duration);
         }
 

File: aeron-samples/src/main/java/uk/co/real_logic/aeron/samples/raw/TransferToPong.java
Patch:
@@ -35,15 +35,15 @@ public static void main(final String[] args) throws IOException
         final FileChannel receiveFileChannel = Common.createTmpFileChannel();
         final ByteBuffer receiveByteBuffer = receiveFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, MTU_LENGTH_DEFAULT);
         final DatagramChannel receiveDatagramChannel = DatagramChannel.open();
-        receiveDatagramChannel.bind(new InetSocketAddress("localhost", 40124));
         init(receiveDatagramChannel);
+        receiveDatagramChannel.bind(new InetSocketAddress("localhost", 40124));
         receiveDatagramChannel.connect(new InetSocketAddress("localhost", 40123));
 
         final FileChannel sendFileChannel = Common.createTmpFileChannel();
         final ByteBuffer sendByteBuffer = sendFileChannel.map(FileChannel.MapMode.READ_WRITE, 0, MTU_LENGTH_DEFAULT);
         final DatagramChannel sendDatagramChannel = DatagramChannel.open();
-        sendDatagramChannel.bind(new InetSocketAddress("localhost", 40125));
         init(sendDatagramChannel);
+        sendDatagramChannel.bind(new InetSocketAddress("localhost", 40125));
         sendDatagramChannel.connect(new InetSocketAddress("localhost", 40126));
 
         final AtomicBoolean running = new AtomicBoolean(true);

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/CommonContext.java
Patch:
@@ -58,7 +58,7 @@ public class CommonContext implements AutoCloseable
 
     /** Length of the maximum transport unit of the media driver's protocol */
     private static final String MTU_LENGTH_PROP_NAME = "aeron.mtu.length";
-    private static final int MTU_LENGTH_DEFAULT = 1280;
+    private static final int MTU_LENGTH_DEFAULT = 4096;
 
     /** Name of the default multicast interface */
     public static final String MULTICAST_DEFAULT_INTERFACE_PROP_NAME = "aeron.multicast.default.interface";

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -232,7 +232,7 @@ public class Configuration
     /**
      * 0 means use OS default.
      */
-    public static final int SOCKET_RCVBUF_SZ_DEFAULT = 0;
+    public static final int SOCKET_RCVBUF_SZ_DEFAULT = 128 * 1024;
     public static final int SOCKET_RCVBUF_SZ = getInteger(SOCKET_RCVBUF_SZ_PROP_NAME, SOCKET_RCVBUF_SZ_DEFAULT);
 
     /**

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiveChannelEndpoint.java
Patch:
@@ -168,7 +168,7 @@ public void validateWindowSizeMax(final int windowSizeMax)
         if (windowSizeMax > soRcvbuf)
         {
             throw new ConfigurationException(
-                String.format("Max Window Size greater than socket SO_RCVBUF: windowSizeMac=%d, SO_RCVBUF=%d",
+                String.format("Max Window Size greater than socket SO_RCVBUF: windowSizeMax=%d, SO_RCVBUF=%d",
                     windowSizeMax, soRcvbuf));
         }
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/NioSelector.java
Patch:
@@ -43,7 +43,8 @@ public class NioSelector implements AutoCloseable
             final Class<?> selectorImplClass =
                 Class.forName("sun.nio.ch.SelectorImpl", false, ClassLoader.getSystemClassLoader());
 
-            if (selectorImplClass.isAssignableFrom(Selector.class))
+            // grab a selector. This must be the same type we will grab in the constructor.
+            if (selectorImplClass.isAssignableFrom(Selector.open().getClass()))
             {
                 selectKeysField = selectorImplClass.getDeclaredField("selectedKeys");
                 selectKeysField.setAccessible(true);

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCode.java
Patch:
@@ -47,7 +47,8 @@ public enum EventCode
     ERROR_DELETING_FILE(19, EventCodec::dissectAsString),
     FRAME_OUT_INCOMPLETE_SEND(20, EventCodec::dissectAsString),
 
-    FLOW_CONTROL_OVERRUN(21, EventCodec::dissectAsString);
+    FLOW_CONTROL_OVERRUN(21, EventCodec::dissectAsString),
+    INVALID_VERSION(22, EventCodec::dissectAsCommand);
 
     private static final Int2ObjectHashMap<EventCode> EVENT_CODE_BY_ID_MAP = new Int2ObjectHashMap<>();
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ReceiverUdpChannelTransport.java
Patch:
@@ -88,7 +88,7 @@ private int onReadDataFrames()
             {
                 logger.log(EventCode.FRAME_IN, readByteBuffer, 0, readByteBuffer.position(), srcAddress);
 
-                if (isValidFrame(length))
+                if (isFrameValid(length))
                 {
                     switch (header.headerType())
                     {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/SenderUdpChannelTransport.java
Patch:
@@ -87,7 +87,7 @@ private int onReadControlFrames()
             {
                 logger.log(EventCode.FRAME_IN, readByteBuffer, 0, readByteBuffer.position(), srcAddress);
 
-                if (isValidFrame(length))
+                if (isFrameValid(length))
                 {
                     switch (header.headerType())
                     {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java
Patch:
@@ -58,7 +58,7 @@ public void onRemoveSubscription(final int streamId)
         final Int2ObjectHashMap<DriverConnection> connectionBySessionIdMap = connectionsByStreamIdMap.remove(streamId);
         if (null == connectionBySessionIdMap)
         {
-            throw new UnknownSubscriptionException("No connectionBySessionIdMap registered on " + streamId);
+            throw new UnknownSubscriptionException("No subscription registered on stream " + streamId);
         }
 
         for (final DriverConnection connection : connectionBySessionIdMap.values())
@@ -76,7 +76,7 @@ public void addConnection(final DriverConnection connection)
         final Int2ObjectHashMap<DriverConnection> connectionBySessionIdMap = connectionsByStreamIdMap.get(streamId);
         if (null == connectionBySessionIdMap)
         {
-            throw new IllegalStateException("No connectionBySessionIdMap registered on " + streamId);
+            throw new IllegalStateException("No subscription registered on stream " + streamId);
         }
 
         connectionBySessionIdMap.put(sessionId, connection);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/RetransmitHandler.java
Patch:
@@ -93,7 +93,7 @@ public void close()
     /**
      * Called on reception of a NAK to start retransmits handling.
      *
-     * @param termId     from the NAK and the term registrationId of the buffer to retransmit from
+     * @param termId     from the NAK and the term id of the buffer to retransmit from
      * @param termOffset from the NAK and the offset of the data to retransmit
      * @param length     of the missing data
      */

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/ErrorCode.java
Patch:
@@ -22,10 +22,10 @@ public enum ErrorCode
 {
     GENERIC_ERROR(0),
     INVALID_CHANNEL(1),
-    SUBSCRIBER_NOT_REGISTERED(2),
+    UNKNOWN_SUBSCRIPTION(2),
     GENERIC_ERROR_MESSAGE(3),
     GENERIC_ERROR_SUBSCRIPTION_MESSAGE(4),
-    PUBLICATION_UNKNOWN(5);
+    UNKNOWN_PUBLICATION(5);
 
     private final short value;
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/RetransmitHandler.java
Patch:
@@ -93,7 +93,7 @@ public void close()
     /**
      * Called on reception of a NAK to start retransmits handling.
      *
-     * @param termId     from the NAK and the term id of the buffer to retransmit from
+     * @param termId     from the NAK and the term registrationId of the buffer to retransmit from
      * @param termOffset from the NAK and the offset of the data to retransmit
      * @param length     of the missing data
      */

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpTransport.java
Patch:
@@ -183,7 +183,7 @@ private UdpTransport(
         catch (final IOException ex)
         {
             throw new RuntimeException(
-                String.format("channel \"%s\" : %s", udpChannel.originalUriAsString(), ex.toString()), ex);
+                String.format("channel \"%s\" : %s", udpChannel.originalUriString(), ex.toString()), ex);
         }
     }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/CloseSubscriptionCmd.java
Patch:
@@ -2,9 +2,6 @@
 
 import uk.co.real_logic.aeron.driver.DriverSubscription;
 
-/**
- * .
- */
 public class CloseSubscriptionCmd
 {
     private final DriverSubscription subscription;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/NewConnectionCmd.java
Patch:
@@ -29,7 +29,7 @@ public NewConnectionCmd(final ReceiveChannelEndpoint channelEndpoint, final Driv
         this.connection = connection;
     }
 
-    public ReceiveChannelEndpoint receiveChannelEndpoint()
+    public ReceiveChannelEndpoint channelEndpoint()
     {
         return channelEndpoint;
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/cmd/RemoveConnectionCmd.java
Patch:
@@ -29,7 +29,7 @@ public RemoveConnectionCmd(final ReceiveChannelEndpoint channelEndpoint, final D
         this.connection = connection;
     }
 
-    public ReceiveChannelEndpoint receiveChannelEndpoint()
+    public ReceiveChannelEndpoint channelEndpoint()
     {
         return channelEndpoint;
     }

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -42,7 +42,7 @@
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.*;
 import static uk.co.real_logic.aeron.common.ErrorCode.INVALID_CHANNEL;
-import static uk.co.real_logic.aeron.common.ErrorCode.PUBLICATION_UNKNOWN;
+import static uk.co.real_logic.aeron.common.ErrorCode.UNKNOWN_PUBLICATION;
 import static uk.co.real_logic.aeron.common.command.ControlProtocolEvents.ADD_PUBLICATION;
 import static uk.co.real_logic.aeron.common.command.ControlProtocolEvents.REMOVE_PUBLICATION;
 import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.STATE_BUFFER_LENGTH;
@@ -308,7 +308,7 @@ public void shouldErrorOnRemoveChannelOnUnknownSessionId() throws Exception
 
         verifySenderNotifiedOfNewPublication();
 
-        verify(mockClientProxy).onError(eq(PUBLICATION_UNKNOWN), argThat(not(isEmptyOrNullString())), any(), anyInt());
+        verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());
         verifyNeverSucceeds();
         verifyExceptionLogged();
     }
@@ -322,7 +322,7 @@ public void shouldErrorOnRemoveChannelOnUnknownStreamId() throws Exception
         driverConductor.doWork();
 
         verifyPublicationClosed(never());
-        verify(mockClientProxy).onError(eq(PUBLICATION_UNKNOWN), argThat(not(isEmptyOrNullString())), any(), anyInt());
+        verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());
         verifyNeverSucceeds();
         verifyExceptionLogged();
     }

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/Ping.java
Patch:
@@ -51,7 +51,7 @@ public class Ping
     private static final Histogram HISTOGRAM = new Histogram(TimeUnit.SECONDS.toNanos(10), 3);
     private static final CountDownLatch PONG_CONNECTION_LATCH = new CountDownLatch(1);
 
-    private static long numPongsReceived;
+    private static int numPongsReceived;
 
     public static void main(final String[] args) throws Exception
     {
@@ -144,7 +144,7 @@ private static void pongHandler(
         numPongsReceived++;
     }
 
-    private static void runSubscriber(final Subscription pongSubscription, final long numMessages)
+    private static void runSubscriber(final Subscription pongSubscription, final int numMessages)
     {
         final IdleStrategy idleStrategy = new BusySpinIdleStrategy();
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -211,8 +211,8 @@ public int streamId()
 
     public void updatePositionLimitFromStatusMessage(final long limit)
     {
-        positionLimit.lazySet(limit);
         statusMessagesReceivedCount++;
+        positionLimit.lazySet(limit);
     }
 
     /**

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpTransport.java
Patch:
@@ -182,7 +182,8 @@ private UdpTransport(
         }
         catch (final IOException ex)
         {
-            throw new RuntimeException(ex);
+            throw new RuntimeException(
+                String.format("channel \"%s\" : %s", udpChannel.originalUriAsString(), ex.toString()), ex);
         }
     }
 

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/AeronStat.java
Patch:
@@ -32,6 +32,8 @@ public class AeronStat
 {
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final File labelsFile = CommonContext.newDefaultLabelsFile();
         final File valuesFile = CommonContext.newDefaultValuesFile();
 

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExamplePublisher.java
Patch:
@@ -39,6 +39,8 @@ public class ExamplePublisher
 
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final Aeron.Context ctx = new Aeron.Context();

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExampleSubscriber.java
Patch:
@@ -38,6 +38,8 @@ public class ExampleSubscriber
 
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final Aeron.Context ctx = new Aeron.Context()

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/Ping.java
Patch:
@@ -58,6 +58,8 @@ public class Ping
 
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
         final ExecutorService executor = Executors.newSingleThreadExecutor();
         final Aeron.Context ctx = new Aeron.Context();

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/Pong.java
Patch:
@@ -44,6 +44,8 @@ public class Pong
 
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final Aeron.Context ctx = new Aeron.Context();

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/RateSubscriber.java
Patch:
@@ -42,6 +42,8 @@ public class RateSubscriber
 
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
         final ExecutorService executor = Executors.newFixedThreadPool(2);
 

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/StreamingPublisher.java
Patch:
@@ -46,6 +46,8 @@ public class StreamingPublisher
 
     public static void main(final String[] args) throws Exception
     {
+        ExamplesUtil.useSharedMemoryOnLinux();
+
         final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null;
 
         final ExecutorService executor = Executors.newFixedThreadPool(2);

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -280,7 +280,7 @@ public void clientNotifiedOfInactiveConnections()
 
         assertFalse(subscription.hasNoConnections());
 
-        conductor.onInactiveConnection(CHANNEL, STREAM_ID_1, SESSION_ID_1, null);
+        conductor.onInactiveConnection(CHANNEL, STREAM_ID_1, SESSION_ID_1, null, CORRELATION_ID);
 
         verify(mockInactiveConnectionHandler).onInactiveConnection(CHANNEL, STREAM_ID_1, SESSION_ID_1);
         assertTrue(subscription.hasNoConnections());

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ConnectionTest.java
Patch:
@@ -55,6 +55,7 @@ public class ConnectionTest
 
     private static final int MESSAGE_LENGTH = DataHeaderFlyweight.HEADER_LENGTH + DATA.length;
     private static final int ALIGNED_FRAME_LENGTH = align(MESSAGE_LENGTH, FrameDescriptor.FRAME_ALIGNMENT);
+    private static final long CORRELATION_ID = 0xC044E1AL;
     private static final int SESSION_ID = 0x5E55101D;
     private static final int STREAM_ID = 0xC400E;
     private static final int INITIAL_TERM_ID = 0xEE81D;
@@ -170,7 +171,8 @@ public void shouldReportCorrectPositionOnReceptionWithNonZeroPositionInNonInitia
     public Connection createConnection(final long initialPosition)
     {
         return new Connection(
-            readers, SESSION_ID, INITIAL_TERM_ID, initialPosition, mockDataHandler, mockPositionReporter, managedBuffers);
+            readers, SESSION_ID, INITIAL_TERM_ID, initialPosition, CORRELATION_ID,
+            mockDataHandler, mockPositionReporter, managedBuffers);
     }
 
     private void insertDataFrame(final int offset)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ClientProxy.java
Patch:
@@ -111,10 +111,11 @@ public void operationSucceeded(final long correlationId)
         transmitter.transmit(ON_OPERATION_SUCCESS, tmpBuffer, 0, CorrelatedMessageFlyweight.LENGTH);
     }
 
-    public void onInactiveConnection(final int sessionId, final int streamId, final String channel)
+    public void onInactiveConnection(final long correlationId, final int sessionId, final int streamId, final String channel)
     {
         connectionMessage.wrap(tmpBuffer, 0);
-        connectionMessage.sessionId(sessionId)
+        connectionMessage.correlationId(correlationId)
+                         .sessionId(sessionId)
                          .streamId(streamId)
                          .channel(channel);
 

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -94,7 +94,7 @@ public class DriverConductorTest
     @Before
     public void setUp() throws Exception
     {
-        when(mockTermBuffersFactory.newPublication(anyObject(), anyInt(), anyInt()))
+        when(mockTermBuffersFactory.newPublication(anyObject(), anyInt(), anyInt(), anyInt()))
             .thenReturn(BufferAndFrameHelper.newTestTermBuffers(TERM_BUFFER_SZ, STATE_BUFFER_LENGTH));
 
         currentTime = 0;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/collections/Int2ObjectHashMap.java
Patch:
@@ -566,8 +566,8 @@ private abstract class AbstractIterator<T> implements Iterator<T>
         private int posCounter;
         private int stopCounter;
         private boolean isPositionValid = false;
-        private final int[] keys = Int2ObjectHashMap.this.keys;
-        private final Object[] values = Int2ObjectHashMap.this.values;
+        protected final int[] keys = Int2ObjectHashMap.this.keys;
+        protected final Object[] values = Int2ObjectHashMap.this.values;
 
         protected AbstractIterator()
         {

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/collections/Long2ObjectHashMap.java
Patch:
@@ -566,8 +566,8 @@ private abstract class AbstractIterator<T> implements Iterator<T>
         private int posCounter;
         private int stopCounter;
         private boolean isPositionValid = false;
-        private final long[] keys = Long2ObjectHashMap.this.keys;
-        private final Object[] values = Long2ObjectHashMap.this.values;
+        protected final long[] keys = Long2ObjectHashMap.this.keys;
+        protected final Object[] values = Long2ObjectHashMap.this.values;
 
         protected AbstractIterator()
         {

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -127,7 +127,7 @@ public void close()
      */
     public Publication addPublication(final String channel, final int streamId)
     {
-        return conductor.addPublication(channel, streamId, 0);
+        return addPublication(channel, streamId, 0);
     }
 
     /**

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Signal.java
Patch:
@@ -42,6 +42,7 @@ public synchronized void await(final long awaitTimeout)
     {
         if (signalRaised)
         {
+            signalRaised = false;
             return;
         }
 

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/Ping.java
Patch:
@@ -122,7 +122,7 @@ public static void main(final String[] args) throws Exception
             future.get();
         }
 
-        System.out.println("Done playing... Histogram of latencies in microseconds.");
+        System.out.println("Done playing... Histogram of RTT latencies in microseconds.");
 
         histogram.outputPercentileDistribution(System.out, 1000.0);
 

File: aeron-client/src/main/java/uk/co/real_logic/aeron/DriverProxy.java
Patch:
@@ -74,7 +74,7 @@ public long removePublication(final long registrationId)
         removeMessage.correlationId(correlationId);
         removeMessage.registrationCorrelationId(registrationId);
 
-        if (!driverCommandBuffer.write(REMOVE_PUBLICATION, writeBuffer, 0, removeMessage.length()))
+        if (!driverCommandBuffer.write(REMOVE_PUBLICATION, writeBuffer, 0, RemoveMessageFlyweight.length()))
         {
             throw new IllegalStateException("could not write publication message");
         }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/SubscriptionMap.java
Patch:
@@ -15,7 +15,6 @@
  */
 package uk.co.real_logic.aeron;
 
-import uk.co.real_logic.aeron.Subscription;
 import uk.co.real_logic.aeron.common.collections.Int2ObjectHashMap;
 
 import java.util.HashMap;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/SystemCounters.java
Patch:
@@ -107,7 +107,7 @@ public AtomicCounter heartbeatsSent()
 
     public AtomicCounter flowControlUnderRuns()
     {
-        return flowControlOverRuns;
+        return flowControlUnderRuns;
     }
 
     public AtomicCounter flowControlOverRuns()

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -165,11 +165,13 @@ public void onClose()
         systemCounters.close();
     }
 
+    // TODO fix test to use proper collaboration assertions.
     public List<DriverSubscription> subscriptions()
     {
         return subscriptions;
     }
 
+    // TODO fix test to use proper collaboration assertions.
     public List<DriverPublication> publications()
     {
         return publications;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -118,7 +118,7 @@ public class DriverConductor extends Agent
 
     private final Consumer<Object> onReceiverCommandFunc;
     private final MessageHandler onClientCommandFunc;
-    private ToIntFunction<DriverConnection> sendPendingStatusMessagesFunc;
+    private final ToIntFunction<DriverConnection> sendPendingStatusMessagesFunc;
 
     public DriverConductor(final Context ctx)
     {

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Receiver.java
Patch:
@@ -30,7 +30,7 @@ public class Receiver extends Agent
     private final NioSelector nioSelector;
     private final OneToOneConcurrentArrayQueue<Object> commandQueue;
     private final EventLogger logger;
-    private final Consumer<Object> onConductorCommand;
+    private final Consumer<Object> onConductorCommandFunc;
 
     public Receiver(final MediaDriver.Context ctx)
     {
@@ -39,7 +39,7 @@ public Receiver(final MediaDriver.Context ctx)
         this.nioSelector = ctx.receiverNioSelector();
         this.commandQueue = ctx.receiverCommandQueue();
         this.logger = ctx.eventLogger();
-        onConductorCommand = this::onConductorCommand;
+        onConductorCommandFunc = this::onConductorCommand;
     }
 
     private void onConductorCommand(final Object obj)
@@ -83,7 +83,7 @@ public int doWork() throws Exception
 
     private int processConductorCommands()
     {
-        return commandQueue.drain(onConductorCommand);
+        return commandQueue.drain(onConductorCommandFunc);
     }
 
     /**

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Sender.java
Patch:
@@ -34,7 +34,7 @@ public class Sender extends Agent
     private final EventLogger logger;
     private int roundRobinIndex = 0;
 
-    private Consumer<Object> processConductorCommands;
+    private Consumer<Object> processConductorCommandsFunc;
 
     public Sender(final MediaDriver.Context ctx)
     {
@@ -43,7 +43,7 @@ public Sender(final MediaDriver.Context ctx)
         this.publications = ctx.publications();
         this.commandQueue = ctx.senderCommandQueue();
         this.logger = ctx.eventLogger();
-        processConductorCommands = this::processConductorCommands;
+        processConductorCommandsFunc = this::processConductorCommands;
     }
 
     public int doWork()
@@ -56,7 +56,7 @@ public int doWork()
 
         int workCount = 0;
 
-        workCount += commandQueue.drain(processConductorCommands);
+        workCount += commandQueue.drain(processConductorCommandsFunc);
         workCount += publications.doAction(roundRobinIndex, DriverPublication::send);
 
         return  workCount;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/protocol/HeaderFlyweight.java
Patch:
@@ -44,6 +44,8 @@
  */
 public class HeaderFlyweight extends Flyweight
 {
+    /** header type PAD */
+    public static final int HDR_TYPE_PAD = 0x00;
     /** header type DATA */
     public static final int HDR_TYPE_DATA = 0x01;
     /** header type NAK */

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java
Patch:
@@ -19,6 +19,7 @@
 import uk.co.real_logic.aeron.common.concurrent.AtomicBuffer;
 import uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor;
 import uk.co.real_logic.aeron.common.protocol.DataHeaderFlyweight;
+import uk.co.real_logic.aeron.common.protocol.HeaderFlyweight;
 import uk.co.real_logic.aeron.driver.exceptions.UnknownSubscriptionException;
 
 import java.net.InetSocketAddress;
@@ -119,9 +120,8 @@ public void onDataFrame(final DataHeaderFlyweight headerFlyweight,
                 {
                     connection.insertIntoTerm(headerFlyweight, buffer, length);
                 }
-                else if (headerFlyweight.hasPaddingFlag())
+                else if (headerFlyweight.headerType() == HeaderFlyweight.HDR_TYPE_PAD)
                 {
-                    headerFlyweight.headerType(LogBufferDescriptor.PADDING_FRAME_TYPE);
                     connection.insertIntoTerm(headerFlyweight, buffer, length);
                 }
                 else

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpTransport.java
Patch:
@@ -249,7 +249,7 @@ private int onReadDataFrames()
             return 0;
         }
 
-        if (header.headerType() == HeaderFlyweight.HDR_TYPE_DATA)
+        if (header.headerType() == HeaderFlyweight.HDR_TYPE_DATA || header.headerType() == HeaderFlyweight.HDR_TYPE_PAD)
         {
             dataFrameHandler.onFrame(dataHeader, readBuffer, length, srcAddress);
             return 1;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventReader.java
Patch:
@@ -79,6 +79,7 @@ public EventReader(final Context context)
 
     public int read(final Consumer<String> handler, final int limit)
     {
+        // Capturing Lambda: allocates
         return ringBuffer.read(
             (typeId, buffer, index, length) ->
                 handler.accept(EventCode.get(typeId).decode(buffer, index, length)), limit);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -280,11 +280,10 @@ public void onRetransmit(final int termId, final int termOffset, final int lengt
             scanner.seek(termOffset);
 
             int remainingBytes = length;
-            int sent = 0;
+            int sent;
             do
             {
                 sent = scanner.scanNext(this::onSendRetransmit, Math.min(remainingBytes, mtuLength));
-
                 remainingBytes -= sent;
             }
             while (remainingBytes > 0 && sent > 0);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -172,7 +172,7 @@ public class Configuration
     /**
      * Default max backoff for NAK delay randomization in msec
      */
-    public static final int NAK_MAX_BACKOFF_DEFAULT = 60;
+    public static final long NAK_MAX_BACKOFF_DEFAULT = TimeUnit.MILLISECONDS.toNanos(60);
 
     /**
      * Default Unicast NAK delay in nanoseconds

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConnection.java
Patch:
@@ -262,6 +262,7 @@ public void insertIntoTerm(final DataHeaderFlyweight header, final AtomicBuffer
 
         if (isFlowControlUnderRun(packetPosition, currentPosition) || isFlowControlOverRun(proposedPosition))
         {
+            System.out.println("dropping due to overrun or underrun");
             return;
         }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -47,7 +47,7 @@ public class DriverPublication implements AutoCloseable
     public static final long INITIAL_HEARTBEAT_TIMEOUT_NS = MILLISECONDS.toNanos(INITIAL_HEARTBEAT_TIMEOUT_MS);
 
     /** Heartbeat after data sent */
-    public static final int HEARTBEAT_TIMEOUT_MS = 500;
+    public static final int HEARTBEAT_TIMEOUT_MS = 200;
     public static final long HEARTBEAT_TIMEOUT_NS = MILLISECONDS.toNanos(HEARTBEAT_TIMEOUT_MS);
 
     /** Publication is still active. */
@@ -363,8 +363,8 @@ private void sendTransmissionUnit(final AtomicBuffer buffer, final int offset, f
     private void onSendRetransmit(final AtomicBuffer buffer, final int offset, final int length)
     {
         final ByteBuffer termRetransmitBuffer = sendBuffers[retransmitIndex];
-        termRetransmitBuffer.position(offset);
         termRetransmitBuffer.limit(offset + length);
+        termRetransmitBuffer.position(offset);
 
         try
         {

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCode.java
Patch:
@@ -47,6 +47,7 @@ public enum EventCode
     REMOVE_SUBSCRIPTION_CLEANUP(20, EventCodec::dissectAsString),
     REMOVE_CONNECTION_CLEANUP(21, EventCodec::dissectAsString),
     CMD_OUT_ON_INACTIVE_CONNECTION(22, EventCodec::dissectAsCommand),
+    FRAME_IN_DROPPED(23, EventCodec::dissectAsFrame),
 
     ERROR_DELETING_FILE(24, EventCodec::dissectAsString);
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DataFrameDispatcher.java
Patch:
@@ -127,7 +127,7 @@ else if ((headerFlyweight.flags() & DataHeaderFlyweight.PADDING_FLAG) == DataHea
                 else
                 {
                     // this is a 0 length data frame, so pass on the info, but no need to insert it
-                    connection.highestPositionCandidate(headerFlyweight);
+                    connection.highestPositionCandidate(headerFlyweight.termId(), headerFlyweight.termOffset());
                 }
             }
             else if (null == initialisationInProgressMap.get(sessionId))

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/Configuration.java
Patch:
@@ -136,7 +136,7 @@ public class Configuration
     /**
      * Size of the memory mapped buffers for the counters file
      */
-    public static final int COUNTERS_BUFFER_SZ_DEFAULT = 1024 * 1024;
+    public static final int COUNTERS_BUFFER_SZ_DEFAULT = 64 * 1024 * 1024;
     public static final int COUNTER_BUFFERS_SZ = getInteger(COUNTER_BUFFERS_SZ_PROP_NAME, COUNTERS_BUFFER_SZ_DEFAULT);
 
     /**

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -68,6 +68,7 @@ public class DriverConductorTest
     private static final long CORRELATION_ID_3 = 1431;
     private static final long CORRELATION_ID_4 = 1432;
     private static final long CLIENT_ID = 1433;
+    public static final int BUFFER_SIZE = 1024 * 1024;
 
     private final ByteBuffer toDriverBuffer =
         ByteBuffer.allocate(Configuration.COMMAND_BUFFER_SZ + RingBufferDescriptor.TRAILER_LENGTH);
@@ -102,8 +103,8 @@ public void setUp() throws Exception
 
         currentTime = 0;
 
-        final AtomicBuffer counterBuffer = new AtomicBuffer(new byte[4096]);
-        final CountersManager countersManager = new CountersManager(new AtomicBuffer(new byte[8192]), counterBuffer);
+        final AtomicBuffer counterBuffer = new AtomicBuffer(new byte[BUFFER_SIZE]);
+        final CountersManager countersManager = new CountersManager(new AtomicBuffer(new byte[BUFFER_SIZE]), counterBuffer);
 
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .receiverNioSelector(nioSelector)

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/StatusInfo.java
Patch:
@@ -52,7 +52,7 @@ public static void main(final String[] args) throws Exception
                     final int offset = CountersManager.counterOffset(id);
                     final long value = valuesBuffer.getLongVolatile(offset);
 
-                    System.out.println(String.format("[%f] %d[%d]: <<%s>> = %d", timestamp, id, offset, label, value));
+                    System.out.println(String.format("[%f] %d[%d]: <%s>: %,d", timestamp, id, offset, label, value));
                 });
 
             Thread.sleep(1000);

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -164,7 +164,7 @@ public int send()
                 final int scanLimit = Math.min(availableWindow, mtuLength);
 
                 LogScanner scanner = logScanners[activeIndex];
-                workCount += scanner.scanNext(this::onSendFrame, scanLimit);
+                workCount += scanner.scanNext(this::sendTransmissionUnit, scanLimit);
 
                 if (scanner.isComplete())
                 {
@@ -257,7 +257,7 @@ public void status(final int status)
 
     public boolean isFlushed()
     {
-        return status() != ACTIVE && logScanners[activeIndex].isFlushed();
+        return status() != ACTIVE && logScanners[activeIndex].remaining() == 0;
     }
 
     public int statusMessagesSeenCount()
@@ -323,7 +323,7 @@ else if (termId == activeTermId.get() - 1)
     /**
      * Function used as a callback for {@link LogScanner.AvailabilityHandler}
      */
-    private void onSendFrame(final AtomicBuffer buffer, final int offset, final int length)
+    private void sendTransmissionUnit(final AtomicBuffer buffer, final int offset, final int length)
     {
         // at this point sendBuffer wraps the same underlying
         // ByteBuffer as the buffer parameter

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedTermBuffers.java
Patch:
@@ -38,7 +38,7 @@
 class MappedTermBuffers implements TermBuffers
 {
     private static final String LOG_SUFFIX = "-log";
-    private static final String STATE_SUFFIX = "-status";
+    private static final String STATE_SUFFIX = "-state";
 
     private final FileChannel logTemplate;
     private final int logBufferLength;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCode.java
Patch:
@@ -47,7 +47,9 @@ public enum EventCode
     REMOVE_PUBLICATION_TIMEOUT(20, EventCodec::dissectAsString),
     REMOVE_SUBSCRIPTION_TIMEOUT(21, EventCodec::dissectAsString),
     REMOVE_CONNECTION_TIMEOUT(22, EventCodec::dissectAsString),
-    CMD_OUT_ON_INACTIVE_CONNECTION(23, EventCodec::dissectAsCommand);
+    CMD_OUT_ON_INACTIVE_CONNECTION(23, EventCodec::dissectAsCommand),
+
+    ERROR_DELETING_FILE(24, EventCodec::dissectAsString);
 
     private static final Int2ObjectHashMap<EventCode> EVENT_CODE_BY_ID_MAP = new Int2ObjectHashMap<>();
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -587,7 +587,7 @@ public Context conclude() throws IOException
             receiverProxy(new ReceiverProxy(receiverCommandQueue()));
             driverConductorProxy(new DriverConductorProxy(conductorCommandQueue));
 
-            termBuffersFactory(new TermBuffersFactory(dataDirName(), termBufferSize));
+            termBuffersFactory(new TermBuffersFactory(dataDirName(), termBufferSize, eventLogger));
 
             if (countersManager() == null)
             {

File: aeron-driver/src/test/java/uk/co/real_logic/aeron/driver/DriverConductorTest.java
Patch:
@@ -101,7 +101,7 @@ public void setUp() throws Exception
 
         final AtomicBuffer counterBuffer = new AtomicBuffer(new byte[4096]);
         final CountersManager countersManager =
-            new CountersManager(new AtomicBuffer(new byte[4096]), counterBuffer);
+            new CountersManager(new AtomicBuffer(new byte[8192]), counterBuffer);
 
         final MediaDriver.Context ctx = new MediaDriver.Context()
             .receiverNioSelector(nioSelector)

File: aeron-benchmarks/src/main/java/uk/co/real_logic/aeron/benchmarks/ClientAdminSoakTestRunner.java
Patch:
@@ -86,7 +86,6 @@ private static void exchangeMessagesBetweenClients(final Aeron publishingClient,
     {
         publishingBuffer.setMemory(0, publishingBuffer.capacity(), (byte) 0);
 
-
         try (final Publication publication = publishingClient.addPublication(CHANNEL, STREAM_ID, 0))
         {
             AtomicInteger receivedCount = new AtomicInteger(0);

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Connection.java
Patch:
@@ -94,7 +94,7 @@ public int poll(final int fragmentCountLimit)
         final int messagesRead = logReader.read(this::onFrame, fragmentCountLimit);
         if (messagesRead > 0)
         {
-            positionReporter.position(calculatePosition(this.activeTermId.get(), logReader.tail(), positionBitsToShift, initialTermId));
+            positionReporter.position(calculatePosition(this.activeTermId.get(), logReader.cursor(), positionBitsToShift, initialTermId));
         }
 
         return messagesRead;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -163,6 +163,7 @@ public int send()
                 activeIndex = TermHelper.rotateNext(activeIndex);
                 activeTermId.lazySet(activeTermId.get() + 1);
                 scanner = logScanners[activeIndex];
+                scanner.seek(0);
             }
 
             limitReporter.position(calculatePosition(scanner.offset()) + scanner.capacity());
@@ -194,12 +195,12 @@ public int streamId()
      * This is performed on the {@link DriverConductor} thread
      */
     public void onStatusMessage(final int termId,
-                                final long highestContiguousSequenceNumber,
+                                final int highestContiguousTermOffset,
                                 final int receiverWindowSize,
                                 final InetSocketAddress address)
     {
         positionLimit.lazySet(
-            controlStrategy.onStatusMessage(termId, highestContiguousSequenceNumber, receiverWindowSize, address));
+            controlStrategy.onStatusMessage(termId, highestContiguousTermOffset, receiverWindowSize, address));
         statusMessagesSeen++;
     }
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/SenderControlStrategy.java
Patch:
@@ -25,7 +25,7 @@ public interface SenderControlStrategy
      * @return the calculated rightEdgeOfWindow
      */
     long onStatusMessage(final int termId,
-                         final long highestContiguousSequenceNumber,
+                         final int highestContiguousTermOffset,
                          final int receiverWindowSize,
                          final InetSocketAddress address);
 
@@ -36,5 +36,6 @@ long onStatusMessage(final int termId,
      * @param termBufferCapacity to use as the size of each term buffer
      * @return limit to which the position can go.
      */
-    long initialPositionLimit(final int initialTermId, final int termBufferCapacity);
+    long initialPositionLimit(final int initialTermId,
+                              final int termBufferCapacity);
 }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
Patch:
@@ -116,10 +116,11 @@ public static int encode(final AtomicBuffer encodingBuffer, final StackTraceElem
     public static int encode(final AtomicBuffer encodingBuffer, final Exception ex)
     {
         final StackTraceElement stack = ex.getStackTrace()[0];
+        final String msg = (null != ex.getMessage() ? ex.getMessage() : "exception message not set");
 
         int relativeOffset = LOG_HEADER_LENGTH;
         relativeOffset += encodingBuffer.putString(relativeOffset, ex.getClass().getName(), LITTLE_ENDIAN);
-        relativeOffset += encodingBuffer.putString(relativeOffset, ex.getMessage(), LITTLE_ENDIAN);
+        relativeOffset += encodingBuffer.putString(relativeOffset, msg, LITTLE_ENDIAN);
         relativeOffset = putStackTraceElement(encodingBuffer, stack, relativeOffset);
 
         final int recordLength = relativeOffset - LOG_HEADER_LENGTH;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverPublication.java
Patch:
@@ -157,13 +157,14 @@ public int send()
             final int availableWindow = (int)(positionLimit.get() - nextOffsetPosition);
             final int scanLimit = Math.min(availableWindow, mtuLength);
 
-            final LogScanner scanner = logScanners[activeIndex];
+            LogScanner scanner = logScanners[activeIndex];
             workCount += scanner.scanNext(this::onSendFrame, scanLimit);
 
             if (scanner.isComplete())
             {
                 activeIndex = TermHelper.rotateNext(activeIndex);
                 activeTermId.lazySet(activeTermId.get() + 1);
+                scanner = logScanners[activeIndex];
             }
 
             limitReporter.position(calculatePosition(scanner.tail()) + scanner.capacity());

File: aeron-client/src/main/java/uk/co/real_logic/aeron/conductor/DriverBroadcastReceiver.java
Patch:
@@ -70,7 +70,7 @@ public int receive(final DriverListener listener, final long activeCorrelationId
                                 listener.onNewPublication(
                                     channel, sessionId, streamId, termId, positionCounterId, logBuffersMessage);
                             }
-                            else
+                            else if (msgTypeId == ON_NEW_CONNECTED_SUBSCRIPTION)
                             {
                                 listener.onNewConnection(channel, sessionId, streamId, termId, logBuffersMessage);
                             }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
Patch:
@@ -443,8 +443,8 @@ private static String dissect(final LogBuffersMessageFlyweight command)
                         command.bufferLength(i), command.bufferOffset(i)))
                 .collect(Collectors.joining("\n    "));
 
-        return String.format("%s %x:%x:%x [%x]\n    %s", command.channel(), command.sessionId(),
-                command.streamId(), command.termId(), command.correlationId(), locations);
+        return String.format("%s %x:%x:%x %x [%x]\n    %s", command.channel(), command.sessionId(),
+                command.streamId(), command.termId(), command.positionCounterId(), command.correlationId(), locations);
     }
 
     private static String dissect(final CorrelatedMessageFlyweight command)

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/ClientProxy.java
Patch:
@@ -77,14 +77,14 @@ public void onNewTermBuffers(final int msgTypeId,
                                  final String channel,
                                  final TermBuffers termBuffers,
                                  final long correlationId,
-                                 final int positionCounterOffset)
+                                 final int positionCounterId)
     {
         logBuffersMessage.wrap(tmpBuffer, 0);
         logBuffersMessage.sessionId(sessionId)
                          .streamId(streamId)
                          .correlationId(correlationId)
                          .termId(termId)
-                         .positionCounterOffset(positionCounterOffset);
+                         .positionCounterId(positionCounterId);
         termBuffers.appendBufferLocationsTo(logBuffersMessage);
         logBuffersMessage.channel(channel);
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -779,6 +779,6 @@ private void onRemovedSubscription(final SubscriptionRemovedCmd cmd)
 
     private int allocatePositionCounter(final String type, final String dirName, final int sessionId, final int streamId)
     {
-        return countersManager.allocate(String.format("%s: %s %d %d", type, dirName, sessionId, streamId));
+        return countersManager.allocate(String.format("%s: %s %x %x", type, dirName, sessionId, streamId));
     }
 }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Connection.java
Patch:
@@ -94,7 +94,7 @@ public int poll(final int fragmentCountLimit)
         final int messagesRead = logReader.read(this::onFrame, fragmentCountLimit);
         if (messagesRead > 0)
         {
-            positionReporter.position(calculatePosition(activeTermId, logReader.tail(), positionBitsToShift, initialTermId));
+            positionReporter.position(calculatePosition(this.activeTermId.get(), logReader.tail(), positionBitsToShift, initialTermId));
         }
 
         return messagesRead;

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java
Patch:
@@ -512,8 +512,8 @@ private void onHeartbeatPublication(final PublicationMessageFlyweight publicatio
             }
 
             // sessionId and streamId must be specific to a client publication, so correlation Id should not be needed.
-
-            // TODO: keep publication alive for this correlationId by passing timerWheel.now() to it as last active time
+            // keep publication alive for this correlationId by passing timerWheel.now() to it as last active time
+            publication.keepHeartBeatAliveUntil(timerWheel.now());
         }
         catch (final Exception ex)
         {

File: aeron-client/src/main/java/uk/co/real_logic/aeron/conductor/DriverBroadcastReceiver.java
Patch:
@@ -128,8 +128,8 @@ private void onError(final AtomicBuffer buffer, final int index,
 
     private long correlationId(final AtomicBuffer buffer, final int offset)
     {
-        publicationMessage.wrap(buffer, offset);
+        correlatedMessage.wrap(buffer, offset);
 
-        return publicationMessage.correlationId();
+        return correlatedMessage.correlationId();
     }
 }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -220,7 +220,6 @@ public void onNewPublication(final String channel,
         correlationSignal.signal();
     }
 
-    // TODO: as this can come in async and accesses the subscriptionMap, shouldn't it be protected (synchronized)?
     public void onNewConnection(final String channel,
                                 final int sessionId,
                                 final int streamId,

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConnection.java
Patch:
@@ -99,7 +99,7 @@ public DriverConnection(final UdpChannel udpChannel,
 
         final int termCapacity = rebuilders[0].capacity();
         this.bufferLimit = termCapacity / 2;
-        this.currentWindowSize = initialWindowSize;
+        this.currentWindowSize = Math.min(bufferLimit, initialWindowSize);
         this.currentWindowGain = currentWindowSize / 4;
         this.positionBitsToShift = Integer.numberOfTrailingZeros(termCapacity);
         this.initialTermId = initialTermId;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/CommonContext.java
Patch:
@@ -54,6 +54,9 @@ public class CommonContext implements AutoCloseable
     private static final String MTU_LENGTH_PROP_NAME = "aeron.mtu.length";
     private static final int MTU_LENGTH_DEFAULT = 1280;
 
+    /** Name of the default multicast interface */
+    public static final String MULTICAST_DEFAULT_INTERFACE_PROP_NAME = "aeron.multicast.default.interface";
+
     public static final String TO_DRIVER_FILE = "to-driver";
     public static final String TO_CLIENTS_FILE = "to-clients";
 

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConnection.java
Patch:
@@ -98,11 +98,11 @@ public DriverConnection(final UdpChannel udpChannel,
 
         final int termCapacity = rebuilders[0].capacity();
         this.currentWindowSize = initialWindowSize;
-        this.currentWindowGain = currentWindowSize << 2; // window / 4
+        this.currentWindowGain = currentWindowSize / 4;
         this.bufferLimit = termCapacity / 2;
         this.positionBitsToShift = Integer.numberOfTrailingZeros(termCapacity);
         this.initialTermId = initialTermId;
-        this.termSizeSmGain = termCapacity / 4;
+        this.termSizeSmGain = termCapacity / 4;  // TODO: remove. unneeded.
     }
 
     public int sessionId()

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/LossHandler.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * Tracking and handling of gaps in a channel
+ * Tracking and handling of gaps in a stream
  * <p>
  * This handler only sends a single NAK at a time.
  */

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/MediaDriver.java
Patch:
@@ -265,7 +265,7 @@ public MediaDriver() throws Exception
     }
 
     /**
-     * Initialize a media driver with the given paramters.
+     * Initialize a media driver with the given parameters.
      *
      * @param context for the media driver parameters
      * @throws Exception

File: aeron-client/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -71,7 +71,8 @@ private Aeron(final ClientContext ctx)
                                         correlationSignal,
                                         ctx.errorHandler,
                                         ctx.newSourceHandler,
-                                        AWAIT_TIMEOUT);
+                                        AWAIT_TIMEOUT,
+                                        ctx.mtuLength());
 
         this.savedCtx = ctx;
     }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpTransport.java
Patch:
@@ -188,7 +188,7 @@ private UdpTransport(final UdpDestination destination,
      */
     public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress) throws Exception
     {
-        logger.log(EventCode.FRAME_OUT, buffer, buffer.position(), buffer.limit(), remoteAddress);
+        logger.log(EventCode.FRAME_OUT, buffer, buffer.position(), buffer.remaining(), remoteAddress);
 
         return channel.send(buffer, remoteAddress);
     }

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubMulticastTest.java
Patch:
@@ -97,9 +97,7 @@ public void setupClientAndMediaDriver() throws Exception
 
     private Aeron.ClientContext newAeronContext()
     {
-        Aeron.ClientContext ctx = new Aeron.ClientContext();
-
-        return ctx;
+        return new Aeron.ClientContext();
     }
 
     @After

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
Patch:
@@ -68,13 +68,13 @@ public static int encode(final AtomicBuffer encodingBuffer, final AtomicBuffer b
     }
 
     public static int encode(final AtomicBuffer encodingBuffer, final ByteBuffer buffer,
-                             final int bufferLength, final InetSocketAddress dstAddr)
+                             final int offset, final int bufferLength, final InetSocketAddress dstAddr)
     {
         final int captureLength = determineCaptureLength(bufferLength);
         int relativeOffset = encodeLogHeader(encodingBuffer, captureLength, bufferLength);
 
         relativeOffset += encodeSocketAddress(encodingBuffer, relativeOffset, dstAddr);
-        encodingBuffer.putBytes(relativeOffset, buffer, 0, captureLength);
+        encodingBuffer.putBytes(relativeOffset, buffer, offset, captureLength);
         relativeOffset += captureLength;
 
         return relativeOffset;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventConfiguration.java
Patch:
@@ -81,7 +81,7 @@ public class EventConfiguration
     /**
      * Maximum length of an event in bytes
      */
-    public final static int MAX_EVENT_LENGTH = 1024;
+    public final static int MAX_EVENT_LENGTH = 2048;
 
     private static Pattern COMMA = Pattern.compile(",");
 

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventLogger.java
Patch:
@@ -93,12 +93,13 @@ public void log(final EventCode code, final AtomicBuffer buffer, final int offse
         }
     }
 
-    public void log(final EventCode code, final ByteBuffer buffer, final int length, final InetSocketAddress dstAddr)
+    public void log(final EventCode code, final ByteBuffer buffer, final int offset,
+                    final int length, final InetSocketAddress dstAddr)
     {
         if (isEnabled(code))
         {
             final AtomicBuffer encodedBuffer = encodingBuffer.get();
-            final int encodedLength = EventCodec.encode(encodedBuffer, buffer, length, dstAddr);
+            final int encodedLength = EventCodec.encode(encodedBuffer, buffer, offset, length, dstAddr);
 
             ringBuffer.write(code.id(), encodedBuffer, 0, encodedLength);
         }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpTransport.java
Patch:
@@ -181,7 +181,7 @@ private UdpTransport(final UdpDestination destination,
      */
     public int sendTo(final ByteBuffer buffer, final InetSocketAddress remoteAddress) throws Exception
     {
-        logger.log(EventCode.FRAME_OUT, buffer, buffer.remaining(), remoteAddress);
+        logger.log(EventCode.FRAME_OUT, buffer, buffer.position(), buffer.limit(), remoteAddress);
 
         return channel.send(buffer, remoteAddress);
     }
@@ -304,7 +304,7 @@ private InetSocketAddress receiveFrame()
 
             if (null != srcAddress)
             {
-                logger.log(EventCode.FRAME_IN, readByteBuffer, readByteBuffer.position(), srcAddress);
+                logger.log(EventCode.FRAME_IN, readByteBuffer, 0, readByteBuffer.position(), srcAddress);
             }
 
             return srcAddress;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogAppender.java
Patch:
@@ -50,8 +50,8 @@ public class LogAppender extends LogBuffer
     public enum AppendStatus
     {
         SUCCESS,
+        TRIPPED,
         FAILURE,
-        TRIPPED
     }
 
     /**

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExampleConfiguration.java
Patch:
@@ -28,13 +28,15 @@ public class ExampleConfiguration
     public static final String MESSAGE_LENGTH_PROP = "aeron.example.messageLength";
     public static final String NUMBER_OF_MESSAGES_PROP = "aeron.example.numberOfMessages";
     public static final String LINGER_TIMEOUT_MS_PROP = "aeron.example.lingerTimeout";
+    public static final String EMBEDDED_MEDIA_DRIVER_PROP = "aeron.example.embeddedMediaDriver";
 
     public static final String DESTINATION;
     public static final int CHANNEL_ID;
     public static final int FRAME_COUNT_LIMIT;
     public static final int MESSAGE_LENGTH;
     public static final long NUMBER_OF_MESSAGES;
     public static final long LINGER_TIMEOUT_MS;
+    public static final boolean EMBEDDED_MEDIA_DRIVER;
 
     static
     {
@@ -44,5 +46,6 @@ public class ExampleConfiguration
         MESSAGE_LENGTH = Integer.getInteger(MESSAGE_LENGTH_PROP, 256);
         NUMBER_OF_MESSAGES = Long.getLong(NUMBER_OF_MESSAGES_PROP, 100);
         LINGER_TIMEOUT_MS = Long.getLong(LINGER_TIMEOUT_MS_PROP, TimeUnit.SECONDS.toMillis(5));
+        EMBEDDED_MEDIA_DRIVER = Boolean.getBoolean(EMBEDDED_MEDIA_DRIVER_PROP);
     }
 }

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogRebuilder.java
Patch:
@@ -63,8 +63,9 @@ public void insert(final AtomicBuffer packet, final int srcOffset, final int len
         {
             logBuffer().putBytes(termOffset, packet, srcOffset, length);
 
+            final int capacity = capacity();
             int alignedFrameLength;
-            while ((alignedFrameLength = alignedFrameLength(tail)) != 0)
+            while ((tail < capacity) && (alignedFrameLength = alignedFrameLength(tail)) != 0)
             {
                 tail += alignedFrameLength;
             }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/MappedTermBuffers.java
Patch:
@@ -136,7 +136,7 @@ private FileChannel openBufferFile(final File file) throws FileNotFoundException
     private MappedByteBuffer mapBufferFile(final FileChannel channel, final long bufferSize)
         throws IOException
     {
-        reset(channel, logTemplate, logBufferLength);
+        reset(channel, logTemplate, bufferSize);
 
         return channel.map(READ_WRITE, 0, bufferSize);
     }

File: aeron-client/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -203,7 +203,8 @@ public void onNewConnectedSubscription(final String destination,
                                            final long sessionId,
                                            final long channelId,
                                            final long initialTermId,
-                                           final LogBuffersMessageFlyweight message) throws IOException
+                                           final LogBuffersMessageFlyweight message)
+        throws IOException
     {
         final Subscription subscription = subscriptionMap.get(destination, channelId);
         if (null != subscription && !subscription.isConnected(sessionId))
@@ -222,7 +223,7 @@ public void onNewConnectedSubscription(final String destination,
             }
 
             final PositionReporter positionReporter =
-                new BufferPositionReporter(counterValuesBuffer, message.positionCounterOffset());
+                new BufferPositionReporter(counterValuesBuffer, message.positionCounterId());
             subscription.onTermBuffersMapped(sessionId, initialTermId, logs, positionReporter, managedBuffers);
 
             if (null != newSourceHandler)

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/command/LogBuffersMessageFlyweight.java
Patch:
@@ -239,7 +239,7 @@ public LogBuffersMessageFlyweight termId(final long termId)
      *
      * @return position counter offset field
      */
-    public int positionCounterOffset()
+    public int positionCounterId()
     {
         return atomicBuffer().getInt(offset() + POSITION_COUNTER_ID_OFFSET, LITTLE_ENDIAN);
     }

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubAndSubTest.java
Patch:
@@ -107,7 +107,6 @@ public void shouldSpinUpAndShutdown(final String destination) throws Exception
         setup(destination);
     }
 
-    @Ignore
     @Theory
     @Test(timeout = 1000)
     public void shouldReceivePublishedMessage(final String destination) throws Exception

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverSubscriptionDispatcher.java
Patch:
@@ -112,7 +112,8 @@ else if (null == initialisationInProgressMap.get(sessionId))
                 final InetSocketAddress controlAddress =
                     transport.isMulticast() ? udpDestination.remoteControl() : srcAddress;
 
-                initialisationInProgressMap.put(sessionId, INIT_IN_PROGRESS); // TODO: need to clean up on timeout - how can this fail?
+                // TODO: need to clean up on timeout - how can this fail?
+                initialisationInProgressMap.put(sessionId, INIT_IN_PROGRESS);
 
                 conductorProxy.createConnectedSubscription(subscription.udpDestination(),
                                                            sessionId,

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExamplePublisher.java
Patch:
@@ -32,7 +32,7 @@ public class ExamplePublisher
     public static final String DESTINATION = ExampleConfiguration.DESTINATION;
     public static final long NUMBER_OF_MESSAGES = ExampleConfiguration.NUMBER_OF_MESSAGES;
 
-    private static final AtomicBuffer buffer = new AtomicBuffer(ByteBuffer.allocateDirect(256));
+    private static final AtomicBuffer BUFFER = new AtomicBuffer(ByteBuffer.allocateDirect(256));
 
     public static void main(final String[] args)
     {
@@ -49,10 +49,10 @@ public static void main(final String[] args)
             for (int i = 0; i < NUMBER_OF_MESSAGES; i++)
             {
                 final String message = "Hello World! " + i;
-                buffer.putBytes(0, message.getBytes());
+                BUFFER.putBytes(0, message.getBytes());
 
                 System.out.print("offering " + i + "/" + NUMBER_OF_MESSAGES);
-                final boolean result = publication.offer(buffer, 0, message.getBytes().length);
+                final boolean result = publication.offer(BUFFER, 0, message.getBytes().length);
 
                 if (!result)
                 {

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/SystemTestHelper.java
Patch:
@@ -20,7 +20,8 @@
 
 public class SystemTestHelper
 {
-    public static void executeUntil(final BooleanSupplier condition, final IntConsumer body, final int maxIterations, final long timeout)
+    public static void executeUntil(final BooleanSupplier condition, final IntConsumer body,
+                                    final int maxIterations, final long timeout)
     {
         final long start = System.nanoTime();
         long end;

File: aeron-client/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -64,7 +64,7 @@ public class ClientConductor extends Agent implements DriverListener
 
     private final NewSourceHandler newSourceHandler;
 
-    private long activeCorrelationId; // Guarded by this
+    private long activeCorrelationId = -1; // Guarded by this
     private Publication addedPublication; // Guarded by this
     private boolean operationSucceeded = false; // Guarded by this
     private RegistrationException registrationException; // Guarded by this

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/UdpTransport.java
Patch:
@@ -132,8 +132,7 @@ public UdpTransport(final UdpDestination destination,
                         final EventLogger logger)
         throws Exception
     {
-        this(destination, null, smFrameHandler, nakFrameHandler, logger, destination.remoteControl(),
-             destination.localControl());
+        this(destination, null, smFrameHandler, nakFrameHandler, logger, destination.remoteControl(), destination.localControl());
     }
 
     private UdpTransport(final UdpDestination destination,

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/SystemTestHelper.java
Patch:
@@ -20,8 +20,7 @@
 
 public class SystemTestHelper
 {
-    public static void executeUntil(final BooleanSupplier condition, final IntConsumer body,
-                                    final int maxIterations, final long timeout)
+    public static void executeUntil(final BooleanSupplier condition, final IntConsumer body, final int maxIterations, final long timeout)
     {
         final long start = System.nanoTime();
         long end;

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/event/EventCodec.java
Patch:
@@ -100,7 +100,7 @@ public static int encode(final AtomicBuffer encodingBuffer, final String value)
     public static int encode(final AtomicBuffer encodingBuffer, final StackTraceElement stack)
     {
         final int relativeOffset = putStackTraceElement(encodingBuffer, stack, LOG_HEADER_LENGTH);
-        final int captureLength = relativeOffset - LOG_HEADER_LENGTH;
+        final int captureLength = relativeOffset;
         encodeLogHeader(encodingBuffer, captureLength, captureLength);
         return relativeOffset;
     }
@@ -217,7 +217,7 @@ public static String dissectAsInvocation(final EventCode code, final AtomicBuffe
         int relativeOffset = dissectLogHeader(code, buffer, initialOffset, builder);
         builder.append(": ");
 
-        readStackTraceElement(buffer, relativeOffset, builder);
+        readStackTraceElement(buffer, initialOffset + relativeOffset, builder);
 
         return builder.toString();
     }

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubAndSubTest.java
Patch:
@@ -105,8 +105,6 @@ public void shouldSpinUpAndShutdown(final String destination) throws Exception
         EventLogger.logInvocation();
 
         setup(destination);
-
-        Thread.sleep(100);
     }
 
     @Theory

File: aeron-client/src/test/java/uk/co/real_logic/aeron/PublicationTest.java
Patch:
@@ -44,7 +44,7 @@ public class PublicationTest
     private ManagedBuffer[] managedBuffers;
 
     @Before
-    public void setup()
+    public void setUp()
     {
         final ClientConductor conductor = mock(ClientConductor.class);
         limit = mock(PositionIndicator.class);

File: aeron-client/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -170,7 +170,6 @@ public void releasingPublicationShouldPurgeCache() throws Exception
 
         willNotifyOperationSucceeded();
         firstPublication.release();
-        // verifyBuffersReleased(SESSION_ID_1);
 
         willNotifyNewBuffer();
         Publication secondPublication = addPublication();

File: aeron-common/src/main/java/uk/co/real_logic/aeron/common/concurrent/logbuffer/LogScanner.java
Patch:
@@ -38,7 +38,7 @@ public class LogScanner extends LogBuffer
     @FunctionalInterface
     public interface AvailabilityHandler
     {
-        void onAvailable(final int offset, final int length);
+        void onAvailable(AtomicBuffer buffer, int offset, int length);
     }
 
     private final int alignedHeaderLength;
@@ -128,7 +128,7 @@ public int scanNext(final AvailabilityHandler handler, final int bytesLimit)
                 if (length > 0)
                 {
                     this.offset += (length + padding);
-                    handler.onAvailable(offset, length);
+                    handler.onAvailable(logBuffer(), offset, length);
                 }
             }
         }

File: aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/buffer/TermBuffers.java
Patch:
@@ -26,6 +26,8 @@ public interface TermBuffers extends AutoCloseable
 {
     Stream<? extends RawLog> stream();
 
+    RawLog[] buffers();
+
     void appendBufferLocationsTo(final LogBuffersMessageFlyweight logBuffersMessage);
 
     void close();

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExamplePublisher.java
Patch:
@@ -30,6 +30,7 @@ public class ExamplePublisher
 {
     public static final int CHANNEL_ID = Configuration.CHANNEL_ID;
     public static final String DESTINATION = Configuration.DESTINATION;
+    public static final long NUMBER_OF_MESSAGES = Configuration.NUMBER_OF_MESSAGES;
 
     private static final AtomicBuffer buffer = new AtomicBuffer(ByteBuffer.allocateDirect(256));
 
@@ -45,12 +46,12 @@ public static void main(final String[] args)
 
             final Publication publication = aeron.addPublication(DESTINATION, CHANNEL_ID, 0);
 
-            for (int i = 0; i < 10; i++)
+            for (int i = 0; i < NUMBER_OF_MESSAGES; i++)
             {
                 final String message = "Hello World! " + i;
                 buffer.putBytes(0, message.getBytes());
 
-                System.out.print("offering " + i);
+                System.out.print("offering " + i + "/" + NUMBER_OF_MESSAGES);
                 final boolean result = publication.offer(buffer, 0, message.getBytes().length);
 
                 if (!result)

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/RateSubscriber.java
Patch:
@@ -37,7 +37,7 @@ public static void main(final String[] args)
         final Aeron.ClientContext aeronContext = new Aeron.ClientContext();
 
         try (final MediaDriver driver = ExampleUtil.createEmbeddedMediaDriver();
-             final Aeron aeron = ExampleUtil.createAeron(aeronContext))
+             final Aeron aeron = ExampleUtil.createAeron(aeronContext, executor))
         {
             System.out.println("Subscribing to " + DESTINATION + " on channel Id " + CHANNEL_ID);
 
@@ -47,7 +47,6 @@ public static void main(final String[] args)
                     ExampleUtil.rateReporterHandler(reporter));
 
             executor.execute(() -> ExampleUtil.subscriberLoop(FRAME_COUNT_LIMIT).accept(subscription));
-            executor.execute(aeron);
 
             // run the rate reporter loop
             reporter.run();

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -450,7 +450,7 @@ private void onCreateConnectedSubscription(final CreateConnectedSubscriptionCmd
             while (!receiverProxy.newConnectedSubscription(newConnectedSubscriptionCmd))
             {
                 // TODO: count errors
-                System.out.println("Error adding to connected subscription");
+                System.out.println("Error adding a connected subscription");
             }
         }
         catch (final Exception ex)

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/MediaDriverBroadcastReceiver.java
Patch:
@@ -104,7 +104,7 @@ private void handleErrorResponse(final AtomicBuffer buffer,
             // Publication errors
             case PUBLICATION_CHANNEL_ALREADY_EXISTS:
             case GENERIC_ERROR_MESSAGE:
-            case INVALID_DESTINATION_IN_PUBLICATION:
+            case INVALID_DESTINATION:
             case PUBLICATION_CHANNEL_UNKNOWN:
                 final long correlationId = correlationId(buffer, errorHeader.offendingHeaderOffset());
                 if (correlationId == activeCorrelationId)

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubAndSubTest.java
Patch:
@@ -71,13 +71,12 @@ private void setup(final String destination) throws Exception
         publishingClient = Aeron.newSingleMediaDriver(new Aeron.ClientContext());
         subscribingClient = Aeron.newSingleMediaDriver(new Aeron.ClientContext());
 
-        subscription = subscribingClient.addSubscription(destination, CHANNEL_ID, dataHandler);
-
         driver.invokeEmbedded();
         publishingClient.invoke(executorService);
         subscribingClient.invoke(executorService);
 
         publication = publishingClient.addPublication(destination, CHANNEL_ID, SESSION_ID);
+        subscription = subscribingClient.addSubscription(destination, CHANNEL_ID, dataHandler);
     }
 
     @After

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/SubUnicastTest.java
Patch:
@@ -103,14 +103,14 @@ public void setupClientAndMediaDriver() throws Exception
 
         consumingClient = Aeron.newSingleMediaDriver(newAeronContext());
 
-        subscription = consumingClient.addSubscription(DESTINATION, CHANNEL_ID, saveFrames);
-
         payload.putBytes(0, PAYLOAD);
 
         executorService = Executors.newSingleThreadExecutor();
 
         driver.invokeEmbedded();
         consumingClient.invoke(executorService);
+
+        subscription = consumingClient.addSubscription(DESTINATION, CHANNEL_ID, saveFrames);
     }
 
     private Aeron.ClientContext newAeronContext()

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/ErrorCode.java
Patch:
@@ -21,7 +21,7 @@
 public enum ErrorCode
 {
     GENERIC_ERROR(0),
-    INVALID_DESTINATION_IN_PUBLICATION(1),
+    INVALID_DESTINATION(1),
     SUBSCRIBER_NOT_REGISTERED(2),
     PUBLICATION_CHANNEL_ALREADY_EXISTS(3),
     GENERIC_ERROR_MESSAGE(4),

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Publication.java
Patch:
@@ -17,6 +17,7 @@
 
 import uk.co.real_logic.aeron.conductor.ClientConductor;
 import uk.co.real_logic.aeron.conductor.LogInformation;
+import uk.co.real_logic.aeron.util.TermHelper;
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
 import uk.co.real_logic.aeron.util.concurrent.logbuffer.LogAppender;
 import uk.co.real_logic.aeron.util.protocol.DataHeaderFlyweight;
@@ -223,7 +224,6 @@ private boolean checkLimit(final int currentTail)
 
     private long position(final int currentTail)
     {
-        // TODO: we need to deal with termId wrapping and going negative.
-        return ((activeTermId.get() << positionBitsToShift) - initialPosition) + currentTail;
+        return TermHelper.calculatePosition(currentTail, activeTermId.get(), positionBitsToShift, initialPosition);
     }
 }

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -65,7 +65,6 @@ public class ClientConductor extends Agent implements MediaDriverListener
     private Publication addedPublication; // Guarded by this
     private boolean operationSucceeded = false; // Guarded by this
     private RegistrationException registrationException; // Guarded by this
-    private BufferPositionIndicator senderPostionLimit;
 
     public ClientConductor(final MediaDriverBroadcastReceiver mediaDriverBroadcastReceiver,
                            final BufferLifecycleStrategy bufferLifecycleStrategy,
@@ -228,7 +227,9 @@ public void onNewConnectedSubscription(final String destination,
                 logInformation[i * 2 + 1] = stateBuffer;
             }
 
-            subscription.onLogBufferMapped(sessionId, initialTermId, logs);
+            final PositionReporter positionReporter =
+                new BufferPositionReporter(counterValuesBuffer, message.positionCounterOffset());
+            subscription.onLogBufferMapped(sessionId, initialTermId, logs, positionReporter);
         }
     }
 

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/DriverPublication.java
Patch:
@@ -374,7 +374,6 @@ private void sendHeartbeat()
 
     private long position(final int currentTail)
     {
-        // TODO: we need to deal with termId wrapping and going negative.
-        return ((activeTermId.get() << positionBitsToShift) - initialPosition) + currentTail;
+        return TermHelper.calculatePosition(currentTail, activeTermId.get(), positionBitsToShift, initialPosition);
     }
 }

File: aeron-core/src/test/java/uk/co/real_logic/aeron/AeronTest.java
Patch:
@@ -99,8 +99,7 @@ public void setUp() throws Exception
             new Aeron.ClientContext()
                 .toClientBuffer(toClientReceiver)
                 .toDriverBuffer(toDriverBuffer)
-                .bufferUsageStrategy(mockBufferUsage)
-                .invalidDestinationHandler(invalidDestination);
+                .bufferUsageStrategy(mockBufferUsage);
 
         ctx.counterLabelsBuffer(counterLabelsBuffer)
            .counterValuesBuffer(counterValuesBuffer);

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExamplePublisher.java
Patch:
@@ -38,7 +38,7 @@ public class ExamplePublisher
     public static void main(final String[] args)
     {
         final ExecutorService executor = Executors.newSingleThreadExecutor();
-        final Aeron.ClientContext context = new Aeron.ClientContext().errorHandler(ExampleUtil::printError);
+        final Aeron.ClientContext context = new Aeron.ClientContext();
 
         try (final MediaDriver driver = ExampleUtil.createEmbeddedMediaDriver();
              final Aeron aeron = ExampleUtil.createAeron(context, executor))

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExampleSubscriber.java
Patch:
@@ -34,7 +34,7 @@ public class ExampleSubscriber
     public static void main(final String[] args)
     {
         final ExecutorService executor = Executors.newFixedThreadPool(1);
-        final Aeron.ClientContext aeronContext = new Aeron.ClientContext().errorHandler(ExampleUtil::printError);
+        final Aeron.ClientContext aeronContext = new Aeron.ClientContext();
 
         try (final MediaDriver driver = ExampleUtil.createEmbeddedMediaDriver();
              final Aeron aeron = ExampleUtil.createAeron(aeronContext))

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/RateSubscriber.java
Patch:
@@ -36,7 +36,7 @@ public class RateSubscriber
     public static void main(final String[] args)
     {
         final ExecutorService executor = Executors.newFixedThreadPool(2);
-        final Aeron.ClientContext aeronContext = new Aeron.ClientContext().errorHandler(ExampleUtil::printError);
+        final Aeron.ClientContext aeronContext = new Aeron.ClientContext();
 
         try (final MediaDriver driver = ExampleUtil.createEmbeddedMediaDriver();
              final Aeron aeron = ExampleUtil.createAeron(aeronContext))

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/StreamingPublisher.java
Patch:
@@ -18,7 +18,6 @@
 import uk.co.real_logic.aeron.Aeron;
 import uk.co.real_logic.aeron.Publication;
 import uk.co.real_logic.aeron.mediadriver.MediaDriver;
-import uk.co.real_logic.aeron.util.BitUtil;
 import uk.co.real_logic.aeron.util.RateReporter;
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
 
@@ -43,7 +42,7 @@ public class StreamingPublisher
     public static void main(final String[] args)
     {
         final ExecutorService executor = Executors.newFixedThreadPool(2);
-        final Aeron.ClientContext context = new Aeron.ClientContext().errorHandler(ExampleUtil::printError);
+        final Aeron.ClientContext context = new Aeron.ClientContext();
 
         try (final MediaDriver driver = ExampleUtil.createEmbeddedMediaDriver();
              final Aeron aeron = ExampleUtil.createAeron(context, executor))

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/event/EventLogger.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Event logger interface for applications/libraries
  */
-public class EventLogger
+public class EventLogger // TODO: We should inject loggers rather than use static fields.
 {
     private final static boolean ON;
     private final static ManyToOneRingBuffer ringBuffer;

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/status/StatusBufferManager.java
Patch:
@@ -28,7 +28,6 @@
  */
 public class StatusBufferManager
 {
-
     private final AtomicBuffer descriptorBuffer;
     private final int counterCapacity;
 
@@ -45,7 +44,7 @@ public StatusBufferManager(final AtomicBuffer descriptorBuffer, final AtomicBuff
         idCounter = 1;
     }
 
-    public int registerCounter(String label)
+    public int registerCounter(final String label)
     {
         if (counterOffset(idCounter) >= counterCapacity)
         {
@@ -77,5 +76,4 @@ public void listDescriptors(final BiConsumer<Integer, String> consumer)
             offset += SIZE_OF_INT + length;
         }
     }
-
 }

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/BufferLifecycleStrategy.java
Patch:
@@ -15,16 +15,14 @@
  */
 package uk.co.real_logic.aeron.conductor;
 
-import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
-
 import java.io.IOException;
 
 /**
  * Interface for encapsulating the strategy of mapping ByteBuffers for Session, Channel, and Term.
  */
 public interface BufferLifecycleStrategy
 {
-    AtomicBuffer newBuffer(final String location, final int offset, final int length) throws IOException;
+    LogInformation newBuffer(final String location, final int offset, final int length) throws IOException;
 
     int releaseBuffers(final String location, final int offset, final int length);
 

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/MappedBufferLifecycleStrategy.java
Patch:
@@ -42,7 +42,7 @@ public MappedBufferLifecycleStrategy()
         buffers = new ArrayList<>();
     }
 
-    public AtomicBuffer newBuffer(final String location, final int offset, final int length) throws IOException
+    public LogInformation newBuffer(final String location, final int offset, final int length) throws IOException
     {
         final MappedByteBuffer buffer = mapExistingFile(new File(location), "Term Buffer");
         if (requiresIndirection(buffer, offset, length))
@@ -53,7 +53,7 @@ public AtomicBuffer newBuffer(final String location, final int offset, final int
 
         buffers.add(new LocatedBuffer(location, buffer));
 
-        return new AtomicBuffer(buffer);
+        return new LogInformation(location, offset, length, new AtomicBuffer(buffer), this);
     }
 
     private boolean requiresIndirection(final ByteBuffer buffer, final int offset, final int length)

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -82,7 +82,7 @@ public ClientConductor(final MediaDriverBroadcastReceiver mediaDriverBroadcastRe
                            final long publicationWindow)
     {
         super(new BackoffIdleStrategy(AGENT_IDLE_MAX_SPINS, AGENT_IDLE_MAX_YIELDS,
-                                    AGENT_IDLE_MIN_PARK_NS, AGENT_IDLE_MAX_PARK_NS));
+                                      AGENT_IDLE_MIN_PARK_NS, AGENT_IDLE_MAX_PARK_NS));
 
         this.counterValuesBuffer = counterValuesBuffer;
         this.correlationSignal = correlationSignal;
@@ -99,7 +99,7 @@ public int doWork()
         {
             return mediaDriverBroadcastReceiver.receive(this, activeCorrelationId);
         }
-        catch (Exception ex)
+        catch (final Exception ex)
         {
             LOGGER.logException(ex);
             return 0;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/DataFrameHandler.java
Patch:
@@ -69,7 +69,7 @@ public Long2ObjectHashMap<DriverSubscription> subscriptionMap()
         return subscriptionByChannelIdMap;
     }
 
-    public void addSubscriptions(final long channelId)
+    public void addSubscription(final long channelId)
     {
         DriverSubscription subscription = subscriptionByChannelIdMap.get(channelId);
 
@@ -82,7 +82,7 @@ public void addSubscriptions(final long channelId)
         subscription.incRef();
     }
 
-    public void removeSubscriptions(final long channelId)
+    public void removeSubscription(final long channelId)
     {
         final DriverSubscription subscription = subscriptionByChannelIdMap.get(channelId);
 

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Receiver.java
Patch:
@@ -131,7 +131,7 @@ private void onAddSubscription(final String destination, final long channelId) t
             frameHandlerByDestinationMap.put(udpDestination, frameHandler);
         }
 
-        frameHandler.addSubscriptions(channelId);
+        frameHandler.addSubscription(channelId);
     }
 
     private void onRemoveSubscription(final String destination, final long channelId)
@@ -144,7 +144,7 @@ private void onRemoveSubscription(final String destination, final long channelId
             throw new SubscriptionNotRegisteredException("destination unknown for receiver remove: " + destination);
         }
 
-        frameHandler.removeSubscriptions(channelId);
+        frameHandler.removeSubscription(channelId);
 
         if (0 == frameHandler.subscribedChannelCount())
         {

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/ReceiverTest.java
Patch:
@@ -29,7 +29,6 @@
 import uk.co.real_logic.aeron.util.concurrent.OneToOneConcurrentArrayQueue;
 import uk.co.real_logic.aeron.util.concurrent.logbuffer.LogBufferDescriptor;
 import uk.co.real_logic.aeron.util.concurrent.logbuffer.LogReader;
-import uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferDescriptor;
 import uk.co.real_logic.aeron.util.event.EventLogger;
 import uk.co.real_logic.aeron.util.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.aeron.util.protocol.HeaderFlyweight;
@@ -50,7 +49,7 @@ public class ReceiverTest
 {
     public static final EventLogger LOGGER = new EventLogger(ReceiverTest.class);
 
-    public static final long LOG_BUFFER_SIZE = (64 * 1024) + RingBufferDescriptor.TRAILER_LENGTH;
+    public static final long LOG_BUFFER_SIZE = 64 * 1024;
     private static final String URI = "udp://localhost:45678";
     private static final UdpDestination UDP_DESTINATION = UdpDestination.parse(URI);
     private static final long CHANNEL_ID = 10;

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/SenderTest.java
Patch:
@@ -25,7 +25,6 @@
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
 import uk.co.real_logic.aeron.util.concurrent.logbuffer.LogAppender;
 import uk.co.real_logic.aeron.util.concurrent.logbuffer.LogBufferDescriptor;
-import uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferDescriptor;
 import uk.co.real_logic.aeron.util.event.EventLogger;
 import uk.co.real_logic.aeron.util.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.aeron.util.protocol.HeaderFlyweight;
@@ -49,7 +48,7 @@ public class SenderTest
 {
     public static final EventLogger LOGGER = new EventLogger(SenderTest.class);
 
-    public static final long LOG_BUFFER_SIZE = (64 * 1024) + RingBufferDescriptor.TRAILER_LENGTH;
+    public static final long LOG_BUFFER_SIZE = 64 * 1024;
     public static final int MAX_FRAME_LENGTH = 1024;
     public static final long SESSION_ID = 1L;
     public static final long CHANNEL_ID = 2L;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -93,7 +93,7 @@ public MediaConductor(final MediaDriverContext ctx)
 
         this.driverCommandBuffer = ctx.driverCommandBuffer();
         this.receiverProxy = ctx.receiverProxy();
-        this.termBufferManager = ctx.bufferManagement();
+        this.termBufferManager = ctx.termBufferManager();
         this.nioSelector = ctx.conductorNioSelector();
         this.mtuLength = ctx.mtuLength();
         this.unicastSenderFlowControl = ctx.unicastSenderFlowControl();

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/MediaConductorTest.java
Patch:
@@ -108,7 +108,7 @@ public void setUp() throws Exception
             .receiverCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))
             .connectedSubscriptions(new AtomicArray<>())
             .publications(publications)
-            .bufferManagement(mockTermBufferManager)
+            .termBufferManager(mockTermBufferManager)
             .statusBufferManager(mock(StatusBufferManager.class));
 
         ctx.fromClientCommands(fromClientCommands);

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/ReceiverTest.java
Patch:
@@ -89,7 +89,7 @@ public void setUp() throws Exception
             .driverCommandBuffer(MediaDriver.COMMAND_BUFFER_SZ)
             .receiverNioSelector(mockNioSelector)
             .conductorNioSelector(mockNioSelector)
-            .bufferManagement(mockTermBufferManager)
+            .termBufferManager(mockTermBufferManager)
             .conductorTimerWheel(new TimerWheel(MediaDriver.MEDIA_CONDUCTOR_TICK_DURATION_US,
                                  TimeUnit.MICROSECONDS,
                                  MediaDriver.MEDIA_CONDUCTOR_TICKS_PER_WHEEL))

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/buffer/TermBufferManagerTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import uk.co.real_logic.aeron.mediadriver.MediaDriver;
 import uk.co.real_logic.aeron.mediadriver.UdpDestination;
 import uk.co.real_logic.aeron.util.IoUtil;
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
@@ -62,9 +63,9 @@ public void mappedFilesAreCorrectSizeAndZeroed() throws Exception
             {
                 final AtomicBuffer log = logBuffer.logBuffer();
 
-                assertThat(log.capacity(), is(TermBufferManager.LOG_BUFFER_SIZE));
+                assertThat(log.capacity(), is(MediaDriver.TERM_BUFFER_SZ));
                 assertThat(log.getByte(0), is((byte)0));
-                assertThat(log.getByte(TermBufferManager.LOG_BUFFER_SIZE - 1), is((byte)0));
+                assertThat(log.getByte(MediaDriver.TERM_BUFFER_SZ - 1), is((byte)0));
 
                 final AtomicBuffer state = logBuffer.stateBuffer();
 

File: aeron-core/src/main/java/uk/co/real_logic/aeron/ConnectedSubscription.java
Patch:
@@ -81,7 +81,7 @@ public int poll(final int frameCountLimit)
 
     private void onFrame(final AtomicBuffer buffer, final int offset, final int length)
     {
-        final int flags = buffer.getByte(flagsOffset(offset)) & 0xFF;
+        final byte flags = buffer.getByte(flagsOffset(offset));
 
         dataHandler.onData(buffer, offset + HEADER_LENGTH, length - HEADER_LENGTH, sessionId, flags);
     }

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Subscription.java
Patch:
@@ -41,7 +41,7 @@ public interface DataHandler
          * @param sessionId for the data source
          * @param flags     for the status of the frame
          */
-        void onData(AtomicBuffer buffer, int offset, int length, long sessionId, int flags);
+        void onData(AtomicBuffer buffer, int offset, int length, long sessionId, byte flags);
     }
 
     /**

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExampleSubscriber.java
Patch:
@@ -118,7 +118,7 @@ public void onData(final AtomicBuffer buffer,
                            final int offset,
                            final int length,
                            final long sessionId,
-                           final int flags)
+                           final byte flags)
         {
             final byte[] data = new byte[length];
             buffer.getBytes(offset, data);

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/MediaDriverProxy.java
Patch:
@@ -33,7 +33,7 @@
 public class MediaDriverProxy
 {
     /** Maximum size of the write buffer */
-    public static final int MSG_BUFFER_CAPACITY = 1024;
+    public static final int MSG_BUFFER_CAPACITY = 4096;
 
     private final AtomicBuffer writeBuffer = new AtomicBuffer(ByteBuffer.allocateDirect(MSG_BUFFER_CAPACITY));
     private final PublicationMessageFlyweight publicationMessage = new PublicationMessageFlyweight();
@@ -93,8 +93,8 @@ private long sendPublicationMessage(final String destination,
 
     private void sendSubscriptionMessage(final int msgTypeId, final String destination, final long channelId)
     {
-        // TODO: remove array from the protocol
-        subscriptionMessage.channelIds(new long[] { channelId});
+        // TODO: remove arrays from the protocol
+        subscriptionMessage.channelIds(new long[]{channelId});
         subscriptionMessage.destination(destination);
 
         if (!mediaDriverCommandBuffer.write(msgTypeId, writeBuffer, 0, subscriptionMessage.length()))

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/DataFrameHandler.java
Patch:
@@ -146,7 +146,7 @@ public void onDataFrame(final DataHeaderFlyweight header,
             else
             {
                 subscription.newConnectedSubscription(sessionId, srcAddress);
-                conductorProxy.createTermBuffers(destination(), sessionId, channelId, termId);
+                conductorProxy.createLogBuffers(destination(), sessionId, channelId, termId);
             }
         }
     }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/DriverPublication.java
Patch:
@@ -209,7 +209,7 @@ public boolean heartbeatCheck()
     /**
      * This is performed on the Media Conductor thread
      */
-    public int backgroundCleaning()
+    public int cleanLogBuffer()
     {
         for (final LogBuffer logBuffer : scanners)
         {

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/DriverSubscription.java
Patch:
@@ -62,7 +62,7 @@ public DriverConnectedSubscription getConnectedSubscription(final long sessionId
     public DriverConnectedSubscription newConnectedSubscription(final long sessionId, final InetSocketAddress srcAddress)
     {
         final DriverConnectedSubscription connectedSubscription
-            = new DriverConnectedSubscription(sessionId, channelId, srcAddress);
+            = new DriverConnectedSubscription(destination.clientAwareUri(), sessionId, channelId, srcAddress);
         connectedSubscriptions.add(connectedSubscription);
 
         return connectionBySessionIdMap.put(sessionId, connectedSubscription);
@@ -76,7 +76,7 @@ public long channelId()
     public void close()
     {
         connectionBySessionIdMap.forEach(
-            (sessionId, connectedSubscription) -> conductorProxy.removeTermBuffers(destination, sessionId, channelId)
+            (sessionId, connectedSubscription) -> conductorProxy.removeLogBuffers(destination, sessionId, channelId)
         );
     }
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -125,8 +125,8 @@ public int doWork()
             LOGGER.logException(ex);
         }
 
-        workCount += publications.doAction(DriverPublication::backgroundCleaning);
-        workCount += connectedSubscriptions.doAction(DriverConnectedSubscription::processBufferRotation);
+        workCount += publications.doAction(DriverPublication::cleanLogBuffer);
+        workCount += connectedSubscriptions.doAction(DriverConnectedSubscription::cleanLogBuffer);
         workCount += connectedSubscriptions.doAction(DriverConnectedSubscription::scanForGaps);
         workCount += connectedSubscriptions.doAction((subscription) -> subscription.sendAnyPendingSm(timerWheel.now()));
 

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -66,7 +66,7 @@ private Aeron(final ClientContext ctx)
         final ConductorErrorHandler errorHandler = new ConductorErrorHandler(ctx.invalidDestinationHandler);
         final MediaDriverProxy mediaDriverProxy = new MediaDriverProxy(ctx.toDriverBuffer);
         final Signal correlationSignal = new Signal();
-        final MediaDriverReceiver receiver = new MediaDriverReceiver(ctx.toClientBuffer);
+        final MediaDriverBroadcastReceiver receiver = new MediaDriverBroadcastReceiver(ctx.toClientBuffer);
 
         conductor = new ClientConductor(
             receiver,

File: aeron-core/src/test/java/uk/co/real_logic/aeron/ClientConductorTest.java
Patch:
@@ -94,7 +94,7 @@ public class ClientConductorTest
     private ClientConductor conductor;
     private ConductorErrorHandler errorHandler;
     private AtomicArray<Subscription> subscriberChannels;
-    private MediaDriverReceiver receiver;
+    private MediaDriverBroadcastReceiver receiver;
 
     @Before
     public void setUp() throws Exception
@@ -137,7 +137,7 @@ public void setUp() throws Exception
                 return null;
             }).when(signal).await(anyLong());
 
-        receiver = new MediaDriverReceiver(toClientReceiver);
+        receiver = new MediaDriverBroadcastReceiver(toClientReceiver);
 
         conductor = new ClientConductor(
             receiver,

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ClientProxy.java
Patch:
@@ -103,6 +103,6 @@ public void operationSucceeded(final long correlationId)
     {
         correlatedMessage.wrap(tmpBuffer, 0);
         correlatedMessage.correlationId(correlationId);
-        transmitter.transmit(OPERATION_SUCCEEDED, tmpBuffer, 0, CorrelatedMessageFlyweight.length);
+        transmitter.transmit(ON_OPERATION_SUCCESS, tmpBuffer, 0, CorrelatedMessageFlyweight.length);
     }
 }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/ControlProtocolEvents.java
Patch:
@@ -45,7 +45,7 @@ public class ControlProtocolEvents
     /** New publication Buffer Notification */
     public static final int ON_NEW_PUBLICATION = 0x0A;
     /** Operation Succeeded */
-    public static final int OPERATION_SUCCEEDED = 0x0B;
+    public static final int ON_OPERATION_SUCCESS = 0x0B;
 
     // Within Media Driver between threads
 

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/logbuffer/StateViewer.java
Patch:
@@ -77,5 +77,4 @@ public int highWaterMark()
     {
         return buffer.getInt(HIGH_WATER_MARK_OFFSET);
     }
-
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -349,7 +349,6 @@ private void onRemovePublication(final PublicationMessageFlyweight publicationMe
                                                    "session and publication unknown for destination");
             }
 
-            bufferManagement.removePublication(srcDestination, sessionId, channelId);
             publications.remove(publication);
 
             if (frameHandler.sessionCount() == 0)
@@ -358,6 +357,8 @@ private void onRemovePublication(final PublicationMessageFlyweight publicationMe
                 frameHandler.close();
             }
 
+            bufferManagement.removePublication(srcDestination, sessionId, channelId);
+
             clientProxy.operationSucceeded(publicationMessage.correlationId());
         }
         catch (final ControlProtocolException ex)

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubAndSubTest.java
Patch:
@@ -93,12 +93,13 @@ private Aeron.ClientContext newAeronContext()
     @After
     public void closeEverything() throws Exception
     {
+        publication.release();
+
         subscribingClient.shutdown();
         publishingClient.shutdown();
         driver.shutdown();
 
         subscription.release();
-        // TODO: publication.release();
         subscribingClient.close();
         publishingClient.close();
         driver.close();

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubMulticastTest.java
Patch:
@@ -117,7 +117,7 @@ private Aeron.ClientContext newAeronContext()
     @After
     public void closeEverything() throws Exception
     {
-        // TODO: publication.release();
+        publication.release();
 
         producingClient.shutdown();
         driver.shutdown();

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubUnicastTest.java
Patch:
@@ -110,7 +110,8 @@ private Aeron.ClientContext newAeronContext()
     @After
     public void closeEverything() throws Exception
     {
-        // TODO: publication.release();
+        publication.release();
+
         producingClient.shutdown();
         driver.shutdown();
 

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -263,6 +263,7 @@ public void onError(final ErrorCode errorCode, final String message)
     public void operationSucceeded()
     {
         operationSucceeded = true;
+        correlationSignal.signal();
     }
 
     private void checkRegistrationException()

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ClientProxy.java
Patch:
@@ -31,6 +31,7 @@
 
 import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.ERROR_RESPONSE;
 import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.ON_NEW_PUBLICATION;
+import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.OPERATION_SUCCEEDED;
 
 /**
  * Proxy for communicating from the media driver to the client conductor.
@@ -105,6 +106,6 @@ public void operationSucceeded(final long correlationId)
     {
         correlatedMessage.wrap(tmpBuffer, 0);
         correlatedMessage.correlationId(correlationId);
-        transmitter.transmit(ControlProtocolEvents.OPERATION_SUCCEEDED, tmpBuffer, 0, CorrelatedMessageFlyweight.length);
+        transmitter.transmit(OPERATION_SUCCEEDED, tmpBuffer, 0, CorrelatedMessageFlyweight.length);
     }
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -358,7 +358,6 @@ private void onRemovePublication(final PublicationMessageFlyweight publicationMe
                 frameHandler.close();
             }
 
-            System.out.println("ACK");
             clientProxy.operationSucceeded(publicationMessage.correlationId());
         }
         catch (final ControlProtocolException ex)

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/MediaDriverListener.java
Patch:
@@ -29,4 +29,7 @@ void onNewConnectedSubscription(
 
 
     void onError(ErrorCode errorCode, String message);
+
+    void operationSucceeded();
+
 }

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubAndSubTest.java
Patch:
@@ -98,7 +98,7 @@ public void closeEverything() throws Exception
         driver.shutdown();
 
         subscription.release();
-        publication.release();
+        // TODO: publication.release();
         subscribingClient.close();
         publishingClient.close();
         driver.close();

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubMulticastTest.java
Patch:
@@ -117,11 +117,12 @@ private Aeron.ClientContext newAeronContext()
     @After
     public void closeEverything() throws Exception
     {
+        // TODO: publication.release();
+
         producingClient.shutdown();
         driver.shutdown();
 
         receiverChannel.close();
-        publication.release();
         producingClient.close();
         driver.close();
         executorService.shutdown();

File: aeron-system-tests/src/test/java/uk/co/real_logic/aeron/PubUnicastTest.java
Patch:
@@ -110,11 +110,11 @@ private Aeron.ClientContext newAeronContext()
     @After
     public void closeEverything() throws Exception
     {
+        // TODO: publication.release();
         producingClient.shutdown();
         driver.shutdown();
 
         receiverChannel.close();
-        publication.release();
         producingClient.close();
         driver.close();
         executorService.shutdown();

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/ControlProtocolEvents.java
Patch:
@@ -44,6 +44,8 @@ public class ControlProtocolEvents
     public static final int ON_NEW_CONNECTED_SUBSCRIPTION = 0x09;
     /** New publication Buffer Notification */
     public static final int ON_NEW_PUBLICATION = 0x0A;
+    /** Operation Succeeded */
+    public static final int OPERATION_SUCCEEDED = 0x0B;
 
     // Within Media Driver between threads
 

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -274,7 +274,7 @@ private void handleErrorResponse(final AtomicBuffer buffer, final int index, fin
             // Publication errors
             case PUBLICATION_CHANNEL_ALREADY_EXISTS:
             case GENERIC_ERROR_MESSAGE:
-            case INVALID_DESTINATION_IN_PUBLICATION:
+            //case INVALID_DESTINATION_IN_PUBLICATION:
             case PUBLICATION_CHANNEL_UNKNOWN:
                 if (correlationId(buffer, errorHeader.offendingHeaderOffset()) == activeCorrelationId)
                 {

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -211,6 +211,7 @@ private boolean handleMessagesFromMediaDriver()
                             newBufferMessage.wrap(buffer, index);
 
                             final String destination = newBufferMessage.destination();
+
                             final long sessionId = newBufferMessage.sessionId();
                             final long channelId = newBufferMessage.channelId();
                             final long termId = newBufferMessage.termId();

File: aeron-core/src/test/java/uk/co/real_logic/aeron/AeronTest.java
Patch:
@@ -366,9 +366,7 @@ private void writePackets(final LogAppender logAppender, final int events)
         }
     }
 
-    private void sendNewBufferNotification(final int msgTypeId,
-                                           final long sessionId,
-                                           final long termId)
+    private void sendNewBufferNotification(final int msgTypeId, final long sessionId, final long termId)
     {
         newBufferMessage.channelId(CHANNEL_ID_1)
                         .sessionId(sessionId)

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/broadcast/BroadcastTransmitter.java
Patch:
@@ -82,12 +82,12 @@ public int maxMsgLength()
      *
      * @param msgTypeId type of the message to be transmitted.
      * @param srcBuffer containing the encoded message to be transmitted.
-     * @param index index in the source buffer at which the encoded message begins.
+     * @param srcIndex srcIndex in the source buffer at which the encoded message begins.
      * @param length in bytes of the encoded message.
      * @throws IllegalArgumentException of the msgTypeId is not valid,
      *                                  or if the message length is greater than {@link #maxMsgLength()}.
      */
-    public void transmit(final int msgTypeId, final AtomicBuffer srcBuffer, final int index, final int length)
+    public void transmit(final int msgTypeId, final AtomicBuffer srcBuffer, final int srcIndex, final int length)
     {
         checkMsgTypeId(msgTypeId);
         checkMessageLength(length);
@@ -110,7 +110,7 @@ public void transmit(final int msgTypeId, final AtomicBuffer srcBuffer, final in
         buffer.putInt(msgLengthOffset(recordOffset), length);
         buffer.putInt(msgTypeOffset(recordOffset), msgTypeId);
 
-        buffer.putBytes(msgOffset(recordOffset), srcBuffer, index, length);
+        buffer.putBytes(msgOffset(recordOffset), srcBuffer, srcIndex, length);
 
         buffer.putLong(latestCounterIndex, tail);
         buffer.putLongOrdered(tailCounterIndex, tail + recordLength);

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -173,7 +173,7 @@ public class MediaDriver implements AutoCloseable
      */
     public static final int MEDIA_CONDUCTOR_TICK_DURATION_US = 10 * 1000;
 
-    public static final long AGENT_IDLE_MAX_SPINS = 5000;
+    public static final long AGENT_IDLE_MAX_SPINS = 100;
     public static final long AGENT_IDLE_MAX_YIELDS = 100;
     public static final long AGENT_IDLE_MIN_PARK_NS = TimeUnit.NANOSECONDS.toNanos(10);
     public static final long AGENT_IDLE_MAX_PARK_NS = TimeUnit.MICROSECONDS.toNanos(100);

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -335,11 +335,10 @@ public synchronized void releasePublication(final Publication publication)
             final long channelId = publication.channelId();
             final long sessionId = publication.sessionId();
 
-            // TODO: reference count the instance
             activeCorrelationId = mediaDriverProxy.removePublication(destination, channelId, sessionId);
 
             // TODO: wait for response from media driver
-
+            
             // TODO:
             // bufferUsage.releasePublisherBuffers(destination, channelId, sessionId);
         }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/ringbuffer/ManyToOneRingBuffer.java
Patch:
@@ -197,7 +197,7 @@ private int claimCapacity(final int requiredCapacity)
             padding = 0;
             tailIndex = (int)tail & mask;
 
-            if (tailIndex > headIndex)
+            if (tailIndex >= headIndex)
             {
                 final int bufferEndSize = capacity - tailIndex;
                 if (requiredCapacity > bufferEndSize)

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/MediaConductorTest.java
Patch:
@@ -106,7 +106,8 @@ public void setUp() throws Exception
             .receiverCommandBuffer(MediaDriver.COMMAND_BUFFER_SZ)
             .receiverNioSelector(nioSelector)
             .conductorNioSelector(nioSelector)
-            .senderFlowControl(UnicastSenderControlStrategy::new)
+            .unicastSenderFlowControl(UnicastSenderControlStrategy::new)
+            .multicastSenderFlowControl(DefaultMulticastSenderControlStrategy::new)
             .conductorTimerWheel(new TimerWheel(MEDIA_CONDUCTOR_TICK_DURATION_US,
                                                 TimeUnit.MICROSECONDS,
                                                 MEDIA_CONDUCTOR_TICKS_PER_WHEEL))

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -232,16 +232,16 @@ private boolean handleMessagesFromMediaDriver()
                 {
                     switch (msgTypeId)
                     {
-                        case NEW_SUBSCRIPTION_BUFFER_NOTIFICATION:
-                        case NEW_PUBLICATION_BUFFER_NOTIFICATION:
+                        case NEW_SUBSCRIPTION_BUFFER_EVENT:
+                        case NEW_PUBLICATION_BUFFER_EVENT:
                             newBufferMessage.wrap(buffer, index);
 
                             final long sessionId = newBufferMessage.sessionId();
                             final long channelId = newBufferMessage.channelId();
                             final long termId = newBufferMessage.termId();
                             final String destination = newBufferMessage.destination();
 
-                            if (msgTypeId == NEW_PUBLICATION_BUFFER_NOTIFICATION)
+                            if (msgTypeId == NEW_PUBLICATION_BUFFER_EVENT)
                             {
                                 onNewPublicationBuffers(destination, sessionId, channelId, termId);
                             }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ClientProxy.java
Patch:
@@ -28,7 +28,7 @@
 import java.nio.ByteBuffer;
 
 import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.ERROR_RESPONSE;
-import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.NEW_PUBLICATION_BUFFER_NOTIFICATION;
+import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.NEW_PUBLICATION_BUFFER_EVENT;
 
 /**
  * Proxy for communicating from the media driver to the client conductor.
@@ -87,7 +87,7 @@ public void onNewBuffers(final int msgTypeId,
         bufferRotator.appendBufferLocationsTo(newBufferMessage);
         newBufferMessage.destination(destination);
 
-        LOGGER.log(msgTypeId == NEW_PUBLICATION_BUFFER_NOTIFICATION ?
+        LOGGER.log(msgTypeId == NEW_PUBLICATION_BUFFER_EVENT ?
                        EventCode.CMD_OUT_NEW_PUBLICATION_BUFFER_NOTIFICATION :
                        EventCode.CMD_OUT_NEW_SUBSCRIPTION_BUFFER_NOTIFICATION,
                    tmpBuffer, 0, newBufferMessage.length());

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -278,7 +278,7 @@ else if (!frameHandler.destination().equals(srcDestination))
                                           mtuLength);
 
             frameHandler.addPublication(publication);
-            clientProxy.onNewBuffers(NEW_PUBLICATION_BUFFER_NOTIFICATION, sessionId, channelId,
+            clientProxy.onNewBuffers(NEW_PUBLICATION_BUFFER_EVENT, sessionId, channelId,
                     initialTermId, destination, bufferRotator);
             publications.add(publication);
         }
@@ -358,7 +358,7 @@ private void onCreateSubscriptionTermBuffer(final QualifiedMessageFlyweight qual
             final BufferRotator bufferRotator =
                 bufferManagement.addSubscriberChannel(rcvDestination, sessionId, channelId);
 
-            clientProxy.onNewBuffers(NEW_SUBSCRIPTION_BUFFER_NOTIFICATION, sessionId, channelId, termId,
+            clientProxy.onNewBuffers(NEW_SUBSCRIPTION_BUFFER_EVENT, sessionId, channelId, termId,
                     destination, bufferRotator);
 
             final NewReceiveBufferEvent event =

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/MediaConductorTest.java
Patch:
@@ -148,7 +148,7 @@ public void shouldBeAbleToAddSingleChannel() throws Exception
         assertThat(publications.get(0).sessionId(), is(1L));
         assertThat(publications.get(0).channelId(), is(2L));
 
-        verify(mockClientProxy).onNewBuffers(eq(ControlProtocolEvents.NEW_PUBLICATION_BUFFER_NOTIFICATION),
+        verify(mockClientProxy).onNewBuffers(eq(ControlProtocolEvents.NEW_PUBLICATION_BUFFER_EVENT),
                 eq(1L), eq(2L), anyLong(), eq(DESTINATION_URI + 4000), any());
 
     }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/ControlProtocolEvents.java
Patch:
@@ -39,11 +39,11 @@ public class ControlProtocolEvents
     /** Error Response */
     public static final int ERROR_RESPONSE = 0x07;
     /** Error Notification */
-    public static final int ERROR_NOTIFICATION = 0x08;
+    public static final int ERROR_EVENT = 0x08;
     /** New subscription Buffer Notification */
-    public static final int NEW_SUBSCRIPTION_BUFFER_NOTIFICATION = 0x09;
+    public static final int NEW_SUBSCRIPTION_BUFFER_EVENT = 0x09;
     /** New publication Buffer Notification */
-    public static final int NEW_PUBLICATION_BUFFER_NOTIFICATION = 0x0A;
+    public static final int NEW_PUBLICATION_BUFFER_EVENT = 0x0A;
 
     // Within Media Driver between threads
 

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UdpDestinationTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
+import java.net.NetworkInterface;
 import java.net.UnknownHostException;
 import java.util.HashMap;
 import java.util.Map;
@@ -79,6 +80,7 @@ public void shouldParseValidMulticastAddress() throws Exception
         assertThat(dst.remoteControl(), isMulticastAddress("224.10.9.10", 40124));
         assertThat(dst.localData(), is(new InetSocketAddress("localhost", 0)));
         assertThat(dst.remoteData(), isMulticastAddress("224.10.9.9", 40124));
+        assertThat(dst.localInterface(), is(NetworkInterface.getByInetAddress(InetAddress.getByName("localhost"))));
     }
 
     private Matcher<InetSocketAddress> isMulticastAddress(String addressName, int port) throws UnknownHostException

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -222,13 +222,13 @@ public ClientContext init() throws IOException
             {
                 if (toClientBuffer == null)
                 {
-                    defaultToClientBuffer = IoUtil.mapExistingFile(toClientsPath(), TO_CLIENTS_FILE);
+                    defaultToClientBuffer = IoUtil.mapExistingFile(toClientsFile(), TO_CLIENTS_FILE);
                     toClientBuffer = new CopyBroadcastReceiver(new BroadcastReceiver(new AtomicBuffer(defaultToClientBuffer)));
                 }
 
                 if (toDriverBuffer == null)
                 {
-                    defaultToDriverBuffer = IoUtil.mapExistingFile(toDriverPath(), TO_DRIVER_FILE);
+                    defaultToDriverBuffer = IoUtil.mapExistingFile(toDriverFile(), TO_DRIVER_FILE);
                     toDriverBuffer = new ManyToOneRingBuffer(new AtomicBuffer(defaultToDriverBuffer));
                 }
 

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -462,10 +462,10 @@ public MediaDriverContext init() throws IOException
             super.init();
 
             clientProxy(new ClientProxy(new BroadcastTransmitter(
-                    new AtomicBuffer(mapNewFile(toClientsPath(), TO_CLIENTS_FILE, TO_CLIENTS_BUFFER_SZ)))));
+                    new AtomicBuffer(mapNewFile(toClientsFile(), TO_CLIENTS_BUFFER_SZ)))));
 
             fromClientCommands(new ManyToOneRingBuffer(
-                    new AtomicBuffer(mapNewFile(toDriverPath(), TO_DRIVER_FILE, CONDUCTOR_BUFFER_SZ))));
+                    new AtomicBuffer(mapNewFile(toDriverFile(), CONDUCTOR_BUFFER_SZ))));
 
             receiverProxy(new ReceiverProxy(receiverCommandBuffer(), newReceiveBufferEventQueue()));
             mediaConductorProxy(new MediaConductorProxy(mediaCommandBuffer()));

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/SharedDirectoriesExternalResource.java
Patch:
@@ -149,7 +149,7 @@ private AtomicBuffer createTermFile(final File rootDir,
         final File termLocation = termLocation(rootDir, sessionId, channelId, termId, true, destination, type);
         IoUtil.delete(termLocation, true);
 
-        final MappedByteBuffer buffer = mapNewFile(termLocation, "Term Buffer", LogBufferDescriptor.LOG_MIN_SIZE);
+        final MappedByteBuffer buffer = mapNewFile(termLocation, LogBufferDescriptor.LOG_MIN_SIZE);
         mappedByteBuffers.add(buffer);
 
         return new AtomicBuffer(buffer);

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/buffer/MappedBufferManagement.java
Patch:
@@ -51,8 +51,8 @@ class MappedBufferManagement implements BufferManagement
     MappedBufferManagement(final String dataDir)
     {
         fileConvention = new FileMappingConvention(dataDir);
-        senderDir = fileConvention.senderDir();
-        receiverDir = fileConvention.receiverDir();
+        senderDir = fileConvention.publicationsDir();
+        receiverDir = fileConvention.subscriptionsDir();
         srcTermMap = new UdpChannelMap<>();
         rcvTermMap = new UdpChannelMap<>();
         IoUtil.ensureDirectoryExists(senderDir, "sender");

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -248,7 +248,8 @@ private boolean handleMessagesFromMediaDriver()
                             if (msgTypeId == NEW_PUBLICATION_BUFFER_NOTIFICATION)
                             {
                                 onNewSenderBuffer(destination, sessionId, channelId, termId);
-                            } else
+                            }
+                            else
                             {
                                 onNewReceiverBuffer(destination, sessionId, channelId, termId);
                             }

File: aeron-core/src/test/java/uk/co/real_logic/aeron/AeronTest.java
Patch:
@@ -58,6 +58,7 @@
 import static uk.co.real_logic.aeron.util.SharedDirectoriesExternalResource.mapLoggers;
 import static uk.co.real_logic.aeron.util.command.ControlProtocolEvents.*;
 import static uk.co.real_logic.aeron.util.command.NewBufferMessageFlyweight.PAYLOAD_BUFFER_COUNT;
+import static uk.co.real_logic.aeron.util.concurrent.logbuffer.LogAppender.AppendStatus.SUCCESS;
 import static uk.co.real_logic.aeron.util.concurrent.logbuffer.LogBufferDescriptor.LOG_MIN_SIZE;
 import static uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferTestUtil.assertMsgRead;
 import static uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferTestUtil.skip;
@@ -507,7 +508,7 @@ private void writePackets(final LogAppender logAppender, final int events)
             (i) ->
             {
                 atomicSendBuffer.putInt(0, PACKET_VALUE);
-                assertTrue(logAppender.append(atomicSendBuffer, 0, bytesToSend));
+                assertThat(logAppender.append(atomicSendBuffer, 0, bytesToSend), is(SUCCESS));
             }
         );
     }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/AtomicArray.java
Patch:
@@ -29,7 +29,7 @@ public class AtomicArray<T>
     private final AtomicReference<Object[]> arrayRef = new AtomicReference<>(EMPTY_ARRAY);
 
     @FunctionalInterface
-    public interface BooleanFunction<T>
+    public interface ToBooleanFunction<T>
     {
         /**
          * Applies this function to the given argument.
@@ -79,15 +79,15 @@ public void forEach(final Consumer<T> func)
      * @param func  to call and pass each element to
      * @return true if side effects have occurred otherwise false.
      */
-    public boolean forEach(int start, final BooleanFunction<T> func)
+    public boolean forEach(int start, final ToBooleanFunction<T> func)
     {
         @SuppressWarnings("unchecked")
         final T[] array = (T[])arrayRef.get();
 
         return forEach(start, func, array);
     }
 
-    private boolean forEach(int start, final BooleanFunction<T> func, final T[] array)
+    private boolean forEach(int start, final ToBooleanFunction<T> func, final T[] array)
     {
         if (array.length == 0)
         {

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -448,6 +448,6 @@ private void onHeartbeatCheck()
     private long generateTermId()
     {
         // term Id can be psuedo-random. Doesn't have to be perfect. But must be in the range.
-        return (int)(Math.random() * 0x100000000L);
+        return (int)(Math.random() * (double)0x7FFFFFFF);
     }
 }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/IoUtil.java
Patch:
@@ -17,7 +17,9 @@
 
 import sun.nio.ch.FileChannelImpl;
 
-import java.io.*;
+import java.io.File;
+import java.io.IOException;
+import java.io.RandomAccessFile;
 import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Receiver.java
Patch:
@@ -44,7 +44,7 @@ public class Receiver extends Agent
 
     public Receiver(final MediaDriver.Context context) throws Exception
     {
-        super(MediaDriver.AGENT_SLEEP_NANOS);
+        super(MediaDriver.AGENT_SLEEP_NS);
 
         this.commandBuffer = context.receiverCommandBuffer();
         this.conductorProxy = context.mediaConductorProxy();
@@ -58,7 +58,7 @@ public boolean doWork()
         boolean hasDoneWork = false;
         try
         {
-            hasDoneWork |= nioSelector.processKeys();
+            hasDoneWork = nioSelector.processKeys();
             hasDoneWork |= processCommandBuffer();
             hasDoneWork |= processNewBufferEventQueue();
         }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Sender.java
Patch:
@@ -18,7 +18,7 @@
 import uk.co.real_logic.aeron.util.Agent;
 import uk.co.real_logic.aeron.util.AtomicArray;
 
-import static uk.co.real_logic.aeron.mediadriver.MediaDriver.AGENT_SLEEP_NANOS;
+import static uk.co.real_logic.aeron.mediadriver.MediaDriver.AGENT_SLEEP_NS;
 
 /**
  * Agent to take data in sender buffers and demux onto sending sockets
@@ -31,7 +31,7 @@ public class Sender extends Agent
 
     public Sender(final MediaDriver.Context ctx)
     {
-        super(AGENT_SLEEP_NANOS);
+        super(AGENT_SLEEP_NS);
     }
 
     public boolean doWork()

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/LossHandler.java
Patch:
@@ -186,11 +186,12 @@ private void onScanComplete()
         }
         else if (scanCursor == 0)
         {
+            // nothing missing, so cancel if running.
             timer.cancel();
         }
-        else
+        else if (!scanGaps[0].isFor(activeGap.termId, activeGap.termOffset))
         {
-            // replace old gap with new gap and reschedule
+            // not the old gap, so replace old gap with new gap and reschedule
             activeGap.reset(scanGaps[0].termId, scanGaps[0].termOffset, scanGaps[0].length);
             scheduleTimer();
             nakSentTimestamp = wheel.now();

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Receiver.java
Patch:
@@ -224,6 +224,8 @@ private void onNewReceiveBuffers(final NewReceiveBufferEvent e)
         final LossHandler lossHandler = new LossHandler(scanners, conductorTimerWheel,
             MediaConductor.NAK_UNICAST_DELAY_GENERATOR);
 
+        lossHandler.currentTermId(e.termId());
+
         frameHandler.onSubscriptionReady(e, lossHandler);
     }
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -101,7 +101,7 @@ public boolean doWork()
         boolean hasDoneWork = false;
         try
         {
-            nioSelector.processKeys(); // TODO: determine if work has been done
+            hasDoneWork |= nioSelector.processKeys();
         }
         catch (final Exception ex)
         {

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ReadHandler.java
Patch:
@@ -23,5 +23,5 @@ public interface ReadHandler
     /**
      * Handler method for OP_READs.
      */
-    void onRead() throws Exception;
+    boolean onRead() throws Exception;
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Receiver.java
Patch:
@@ -56,7 +56,7 @@ public boolean doWork()
         boolean hasDoneWork = false;
         try
         {
-            nioSelector.processKeys(); // TODO: determine if work is done
+            hasDoneWork |= nioSelector.processKeys();
             hasDoneWork |= processCommandBuffer();
             hasDoneWork |= processNewBufferEventQueue();
         }

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderTest.java
Patch:
@@ -263,6 +263,7 @@ public void shouldErrorOnRemoveChannelOnUnknownSession() throws Exception
     }
 
     @Test(timeout = 1000)
+    @Ignore("moved to SenderTest")
     public void shouldBeAbleToSendOnChannel() throws Exception
     {
         successfullyAddChannel();
@@ -280,6 +281,7 @@ public void shouldBeAbleToSendOnChannel() throws Exception
     }
 
     @Test(timeout = 1000)
+    @Ignore("moved to SenderTest")
     public void shouldNotSend0LengthDataFrameAfterReceivingStatusMessage() throws Exception
     {
         successfullyAddChannel();
@@ -341,6 +343,7 @@ public void shouldNotBeAbleToSendAfterUsingUpYourWindow() throws Exception
     }
 
     @Test(timeout = 1000)
+    @Ignore("moved to SenderTest")
     public void shouldSend0LengthDataOnChannelWhenTimeoutWithoutStatusMessage() throws Exception
     {
         successfullyAddChannel();

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/protocol/DataHeaderFlyweight.java
Patch:
@@ -59,7 +59,7 @@ public class DataHeaderFlyweight extends HeaderFlyweight
     /** Default header for a Data Frame (for ease of use with LogAppender) */
     public static final byte[] DEFAULT_HEADER =
         {
-            HeaderFlyweight.CURRENT_VERSION, 0, 0, HeaderFlyweight.HDR_TYPE_DATA,
+            HeaderFlyweight.CURRENT_VERSION, 0, HeaderFlyweight.HDR_TYPE_DATA, 0,
             0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0,

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExamplePublisher.java
Patch:
@@ -56,7 +56,7 @@ public static void main(final String[] args)
                 buffer.putByte(0, (byte)i);
 
                 System.out.print("offering " + i);
-                final boolean result = channel.offer(buffer);
+                final boolean result = channel.offer(buffer, 0, 14);
 
                 if (false == result)
                 {

File: aeron-examples/src/main/java/uk/co/real_logic/aeron/examples/ExampleSubscriber.java
Patch:
@@ -121,6 +121,7 @@ public void onData(final AtomicBuffer buffer,
                            final long sessionId,
                            final Subscriber.MessageFlags flags)
         {
+            System.out.println("ExampleDataHandler Message " + sessionId);
         }
     }
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -399,6 +399,8 @@ private void onCreateSubscriberTermBufferEvent(final QualifiedMessageFlyweight q
             final BufferRotator buffer =
                 bufferManagement.addSubscriberChannel(rcvDestination, sessionId, channelId);
 
+            sendNewBufferNotification(sessionId, channelId, termId, false, destination, buffer);
+
             final RcvBufferState bufferState = new RcvBufferState(rcvDestination, sessionId, channelId, termId, buffer);
             while (!receiver.sendBuffer(bufferState))
             {

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastReceiverTest.java
Patch:
@@ -53,6 +53,7 @@
 import static uk.co.real_logic.aeron.util.concurrent.logbuffer.FrameDescriptor.FRAME_ALIGNMENT;
 import static uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferDescriptor.TRAILER_LENGTH;
 import static uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferTestUtil.assertEventRead;
+import static uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBufferTestUtil.skip;
 import static uk.co.real_logic.aeron.util.protocol.DataHeaderFlyweight.HEADER_LENGTH;
 
 public class UnicastReceiverTest
@@ -122,6 +123,7 @@ public void setUp() throws Exception
     @After
     public void tearDown() throws Exception
     {
+        skip(buffers.toClient(), 10);
         senderChannel.close();
         receiver.close();
         receiver.nioSelector().selectNowWithNoProcessing();

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -36,7 +36,7 @@ public final class Aeron implements AutoCloseable
     private static final int COMMAND_BUFFER_SIZE = 4096 + TRAILER_LENGTH;
 
     private final ManyToOneRingBuffer clientConductorCommandBuffer =
-        new ManyToOneRingBuffer(new AtomicBuffer(ByteBuffer.allocate(COMMAND_BUFFER_SIZE)));
+        new ManyToOneRingBuffer(new AtomicBuffer(ByteBuffer.allocateDirect(COMMAND_BUFFER_SIZE)));
 
     private final AtomicArray<Channel> channels = new AtomicArray<>();
     private final AtomicArray<SubscriberChannel> receivers = new AtomicArray<>();

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/broadcast/Receiver.java
Patch:
@@ -92,9 +92,9 @@ public long lappedCount()
     /**
      * Type of the message received.
      *
-     * @return type of the message received.
+     * @return typeId of the message received.
      */
-    public int type()
+    public int typeId()
     {
         return buffer.getInt(msgTypeOffset(recordOffset));
     }
@@ -134,7 +134,7 @@ public AtomicBuffer buffer()
      *
      * If loss has occurred then {@link #lappedCount()} will be incremented.
      *
-     * @return true if transmission is available with {@link #offset()}, {@link #length()} and {@link #type()}
+     * @return true if transmission is available with {@link #offset()}, {@link #length()} and {@link #typeId()}
      *         set for the next message to be consumed. If no transmission is available then false.
      */
     public boolean receiveNext()

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/logbuffer/LogAppender.java
Patch:
@@ -35,8 +35,8 @@
  * A default message header is applied to each message with the fields filled in for fragment flags, sequence number,
  * and frame length as appropriate.
  *
- * A message of type {@link LogBufferDescriptor#PADDING_FRAME_TYPE} is appended at the end of the buffer if claimed space
- * is not sufficiently large to accommodate the message about to be written.
+ * A message of type {@link LogBufferDescriptor#PADDING_FRAME_TYPE} is appended at the end of the buffer if claimed
+ * space is not sufficiently large to accommodate the message about to be written.
  */
 public class LogAppender
 {

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -214,8 +214,10 @@ public MediaConductor mediaConductor()
     public void close() throws Exception
     {
         receiver.close();
+        receiver.nioSelector().selectNowWithNoProcessing();
         sender.close();
         mediaConductor.close();
+        mediaConductor.nioSelector().selectNowWithNoProcessing();
         conductorShmBuffers.close();
         bufferManagement.close();
         countersCreator.close();

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -171,7 +171,7 @@ public Subscriber newSubscriber(final Subscriber.Context context)
     public Subscriber newSubscriber(final Consumer<Subscriber.Context> block)
     {
         final Subscriber.Context context = new Subscriber.Context();
-        block.accept(new Subscriber.Context());
+        block.accept(context);
 
         return newSubscriber(context);
     }

File: aeron-core/src/main/java/uk/co/real_logic/aeron/SubscriberSession.java
Patch:
@@ -17,6 +17,7 @@
 
 import uk.co.real_logic.aeron.util.BitUtil;
 import uk.co.real_logic.aeron.util.concurrent.logbuffer.LogReader;
+import uk.co.real_logic.aeron.util.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.aeron.util.status.PositionReporter;
 
 import java.util.concurrent.atomic.AtomicLong;
@@ -33,7 +34,7 @@
  */
 public class SubscriberSession
 {
-    private static final int HEADER_LENGTH = BitUtil.align(BASE_HEADER_LENGTH, WORD_ALIGNMENT);
+    private static final int HEADER_LENGTH = BitUtil.align(DataHeaderFlyweight.HEADER_LENGTH, WORD_ALIGNMENT);
 
     private final LogReader[] logReaders;
     private final long sessionId;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaConductor.java
Patch:
@@ -23,6 +23,7 @@
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
 import uk.co.real_logic.aeron.util.concurrent.ringbuffer.ManyToOneRingBuffer;
 import uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBuffer;
+import uk.co.real_logic.aeron.util.protocol.DataHeaderFlyweight;
 import uk.co.real_logic.aeron.util.protocol.ErrorHeaderFlyweight;
 
 import java.nio.ByteBuffer;
@@ -42,7 +43,7 @@
 public class MediaConductor extends Agent
 {
     public static final int WRITE_BUFFER_CAPACITY = 512;
-    public static final int HEADER_LENGTH = BASE_HEADER_LENGTH + SIZE_OF_INT;
+    public static final int HEADER_LENGTH = DataHeaderFlyweight.HEADER_LENGTH;
 
     public static final int HEARTBEAT_TIMEOUT_MILLISECONDS = 100;
 

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -165,7 +165,7 @@ public MediaDriver() throws Exception
                 .receiverCommandBuffer(COMMAND_BUFFER_SZ)
                 .rcvNioSelector(nioSelector)
                 .adminNioSelector(new NioSelector())
-                .senderFlowControl(DefaultSenderControlStrategy::new)
+                .senderFlowControl(UnicastSenderControlStrategy::new)
                 .conductorByteBuffers(conductorByteBuffers)
                 .bufferManagement(bufferManagement)
                 .mtuLength(CommonConfiguration.MTU_LENGTH);

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderControlStrategy.java
Patch:
@@ -15,15 +15,16 @@
  */
 package uk.co.real_logic.aeron.mediadriver;
 
-public class DefaultSenderControlStrategy implements SenderControlStrategy
+public class UnicastSenderControlStrategy implements SenderControlStrategy
 {
     private int rightEdgeOfWindow;
 
-    public DefaultSenderControlStrategy()
+    public UnicastSenderControlStrategy()
     {
         rightEdgeOfWindow = 0;
     }
 
+    /** {@inheritDoc} */
     public int onStatusMessage(final long termId, final long highestContiguousSequenceNumber, final long receiverWindow)
     {
         // TODO: review this logic

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/MediaConductorTest.java
Patch:
@@ -75,7 +75,7 @@ public void setUp()
             .receiverCommandBuffer(COMMAND_BUFFER_SZ)
             .rcvNioSelector(new NioSelector())
             .adminNioSelector(new NioSelector())
-            .senderFlowControl(DefaultSenderControlStrategy::new)
+            .senderFlowControl(UnicastSenderControlStrategy::new)
             .conductorByteBuffers(new ConductorByteBuffers(adminPath, COMMAND_BUFFER_SZ + TRAILER_LENGTH))
             .bufferManagement(newMappedBufferManager(adminPath));
 

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastReceiverTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() throws Exception
             .receiverCommandBuffer(COMMAND_BUFFER_SZ)
             .rcvNioSelector(nioSelector)
             .adminNioSelector(new NioSelector())
-            .senderFlowControl(DefaultSenderControlStrategy::new)
+            .senderFlowControl(UnicastSenderControlStrategy::new)
             .conductorByteBuffers(new ConductorByteBuffers(buffers.adminDirName()))
             .bufferManagement(bufferManagement);
 

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderTest.java
Patch:
@@ -119,7 +119,7 @@ public void setUp() throws Exception
             .receiverCommandBuffer(COMMAND_BUFFER_SZ)
             .rcvNioSelector(new NioSelector())
             .adminNioSelector(new NioSelector())
-            .senderFlowControl(DefaultSenderControlStrategy::new)
+            .senderFlowControl(UnicastSenderControlStrategy::new)
             .conductorByteBuffers(buffers.mediaDriverBuffers())
             .bufferManagement(bufferManagement)
             .conductorTimerWheel(timerWheel);

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/MappingBufferUsageStrategy.java
Patch:
@@ -29,9 +29,9 @@
 import static uk.co.real_logic.aeron.util.IoUtil.mapExistingFile;
 
 /**
- * Buffer usage where each Term is a memory mapped file.
+ * Default mapping buffer usage strategy for the client
  *
- * Not threadsafe - Methods only called from MediaConductor.
+ * Not thread-safe - Methods only called from ClientConductor
  */
 public class MappingBufferUsageStrategy implements BufferUsageStrategy
 {

File: aeron-core/src/test/java/uk/co/real_logic/aeron/AeronTest.java
Patch:
@@ -73,7 +73,7 @@ public class AeronTest
     private static final long SESSION_ID = 3L;
     private static final long SESSION_ID_2 = 5L;
     private static final int PACKET_VALUE = 37;
-    private static final int SEND_BUFFER_CAPACITY = 512;
+    private static final int SEND_BUFFER_CAPACITY = 1024;
     private static final int CONDUCTOR_BUFFER_SIZE = (4 * 1024) + BufferDescriptor.TRAILER_LENGTH;
 
     @ClassRule

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/NewBufferMessageFlyweight.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see uk.co.real_logic.aeron.util.command.ControlProtocolEvents
  *
- *  * 0                   1                   2                   3
+ * 0                   1                   2                   3
  * 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  * |                          Session ID                           |

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderTest.java
Patch:
@@ -71,7 +71,7 @@ public class UnicastSenderTest
     private static final long CHANNEL_ID = 0xA;
     private static final long SESSION_ID = 0xdeadbeefL;
 
-    public static final int BUFFER_SIZE = 256;
+    public static final int BUFFER_SIZE = 512;
     public static final int VALUE = 37;
 
     @Rule
@@ -155,6 +155,7 @@ public void shouldBeAbleToAddChannel() throws Exception
             assertThat(eventTypeId, is(NEW_SEND_BUFFER_NOTIFICATION));
 
             bufferMessage.wrap(buffer, index);
+
             assertThat(bufferMessage.sessionId(), is(SESSION_ID));
             assertThat(bufferMessage.channelId(), is(CHANNEL_ID));
             assertThat(bufferMessage.destination(), is(URI));

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -112,7 +112,7 @@ public ClientConductor(final RingBuffer commandBuffer,
     public void process()
     {
         handleCommandBuffer();
-        handleReceiveBuffer();
+        handleMessagesFromMediaDriver();
         processBufferCleaningScan();
     }
 
@@ -236,7 +236,7 @@ private void removePublisher(final String destination, final long channelId, fin
         // bufferUsage.releasePublisherBuffers(destination, channelId, sessionId);
     }
 
-    private void handleReceiveBuffer()
+    private void handleMessagesFromMediaDriver()
     {
         fromMediaDriverBuffer.read(
             (eventTypeId, buffer, index, length) ->

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/NewBufferMessageFlyweight.java
Patch:
@@ -265,7 +265,7 @@ public NewBufferMessageFlyweight destination(final String value)
      */
     public int length()
     {
-        return locationPointer(PAYLOAD_BUFFER_COUNT + 1);
+        return locationPointer(DESTINATION_INDEX + 1);
     }
 
 }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/AtomicBuffer.java
Patch:
@@ -834,7 +834,6 @@ public void putBytes(final int index, final AtomicBuffer srcBuffer, final int sr
     public String getString(final int offset, final ByteOrder byteOrder)
     {
         final int length = getInt(offset, byteOrder);
-        System.out.println("Read length: " + length + " @ " + offset);
         return getString(offset, length);
     }
 

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/ClientConductor.java
Patch:
@@ -293,7 +293,7 @@ private void onNewSenderBufferNotification(final long sessionId,
     {
         onNewBufferNotification(sessionId,
                                 sendNotifiers.get(destination, sessionId, channelId),
-                                (i) -> newAppender(i),
+                                this::newAppender,
                                 LogAppender[]::new,
                                 (chan, buffers) ->
                                 {

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/NewBufferMessageFlyweight.java
Patch:
@@ -15,7 +15,6 @@
  */
 package uk.co.real_logic.aeron.util.command;
 
-import uk.co.real_logic.aeron.util.BufferRotationDescriptor;
 import uk.co.real_logic.aeron.util.Flyweight;
 
 import static java.nio.ByteOrder.LITTLE_ENDIAN;

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/FlyweightTest.java
Patch:
@@ -259,7 +259,8 @@ public void newBufferMessagesSupportMultipleVariableLengthFields()
                        .location(0, "def")
                        .location(1, "ghi")
                        .location(2, "jkl")
-                       .destination("abc");
+                       .destination("abc")
+                       ;
 
         assertLengthFindsNonZeroedBytes(encodeNewBuffer.length());
         decodeNewBuffer.wrap(aBuff, 0);
@@ -288,7 +289,7 @@ private void assertLengthFindsNonZeroedBytes(final int length)
         IntStream.range(aBuff.capacity() - 1, length)
                  .forEach(i ->
                  {
-                     assertThat(aBuff.getByte(i), is(0));
+                     assertThat(aBuff.getByte(i), is((byte) 0));
                  });
     }
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -49,8 +49,8 @@
  *     <li><code>aeron.data.dir</code>: Use value as directory name for data buffers.</li>
  *     <li><code>aeron.rcv.buffer.size</code>: Use int value as size of buffer for receiving from network.</li>
  *     <li><code>aeron.command.buffer.size</code>: Use int value as size of the command buffers between threads.</li>
- *     <li><code>aeron.conductor.buffer.size</code>: Use int value as size of the conductor buffers between the media driver
-       and the client.</li>
+ *     <li><code>aeron.conductor.buffer.size</code>: Use int value as size of the conductor buffers between the media
+ *          driver and the client.</li>
  *     <li><code>aeron.select.timeout</code>: use int value as default timeout for NIO select calls</li>
  * </ul>
  */

File: aeron-core/src/main/java/uk/co/real_logic/aeron/conductor/MediaConductorProxy.java
Patch:
@@ -72,7 +72,7 @@ private void sendChannelMessage(final String destination,
         channelMessage.sessionId(sessionId);
         channelMessage.channelId(channelId);
         channelMessage.destination(destination);
-        conductorBuffer.write(eventTypeId, writeBuffer, 0, channelMessage.length());
+        conductorBuffer.write(eventTypeId, writeBuffer, 0, channelMessage.length()); // TODO: need to check return!
     }
 
     public void sendAddSubscriber(final String destination, final long[] channelIds)

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Receiver.java
Patch:
@@ -51,9 +51,9 @@ public Receiver(final MediaDriver.Context context) throws Exception
     {
         super(SELECT_TIMEOUT);
 
-        commandBuffer = context.receiverThreadCommandBuffer();
+        commandBuffer = context.receiverCommandBuffer();
         adminThreadCursor =
-            new MediaConductorCursor(context.adminThreadCommandBuffer(), context.adminNioSelector());
+            new MediaConductorCursor(context.conductorCommandBuffer(), context.adminNioSelector());
         nioSelector = context.rcvNioSelector();
         frameHandlerFactory = context.rcvFrameHandlerFactory();
     }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/Sender.java
Patch:
@@ -35,7 +35,7 @@ public Sender(final MediaDriver.Context ctx)
     {
         super(SELECT_TIMEOUT);
 
-        adminThreadCommandBuffer = ctx.adminThreadCommandBuffer();
+        adminThreadCommandBuffer = ctx.conductorCommandBuffer();
     }
 
     public void process()

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/TemplateFileResource.java
Patch:
@@ -30,7 +30,7 @@ public class TemplateFileResource extends ExternalResource
 
     protected void before() throws Throwable
     {
-        directory = new File(IoUtil.tmpDir(), "mapped-buffers");
+        directory = new File(IoUtil.tmpDirName(), "mapped-buffers");
         IoUtil.ensureDirectoryExists(directory, "mapped-buffers");
         directory.deleteOnExit();
         templateFile = IoUtil.createEmptyFile(new File(directory, "template"), BUFFER_SIZE);

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/buffer/MappedBufferManagementTest.java
Patch:
@@ -34,7 +34,7 @@ public class MappedBufferManagementTest
     private static final String DESTINATION_URI = "udp://localhost:4321";
     private static final long SESSION_ID = 100;
     private static final long CHANNEL_ID = 100;
-    private static final File DATA_DIR = new File(IoUtil.tmpDir(), "DATA_DIR");
+    private static final File DATA_DIR = new File(IoUtil.tmpDirName(), "DATA_DIR_NAME");
     private MappedBufferManagement strategy;
     private UdpDestination destination = UdpDestination.parse(DESTINATION_URI);
 

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/command/ChannelMessageFlyweight.java
Patch:
@@ -119,5 +119,4 @@ public int length()
     {
         return DESTINATION_OFFSET + lengthOfDestination;
     }
-
 }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/status/BufferMapper.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.IOException;
 import java.nio.MappedByteBuffer;
 
-import static uk.co.real_logic.aeron.util.CommonConfiguration.COUNTERS_DIR;
+import static uk.co.real_logic.aeron.util.CommonConfiguration.COUNTERS_DIR_NAME;
 
 /**
  * Common Class
@@ -42,7 +42,7 @@ static interface Mapper
 
     public BufferMapper(final Mapper descriptorMapper, final Mapper counterMapper)
     {
-        final File directory = new File(COUNTERS_DIR);
+        final File directory = new File(COUNTERS_DIR_NAME);
         try
         {
             descriptor = descriptorMapper.map(new File(directory, "descriptor"), "descriptor");

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/CountersResource.java
Patch:
@@ -21,7 +21,7 @@
 import java.io.File;
 import java.io.IOException;
 
-import static uk.co.real_logic.aeron.util.CommonConfiguration.COUNTERS_DIR;
+import static uk.co.real_logic.aeron.util.CommonConfiguration.COUNTERS_DIR_NAME;
 import static uk.co.real_logic.aeron.util.IoUtil.ensureDirectoryExists;
 
 /**
@@ -30,7 +30,7 @@
 public class CountersResource extends ExternalResource
 {
     private static final long BUFFER_SIZE = 1024L;
-    private final File file = new File(COUNTERS_DIR);
+    private final File file = new File(COUNTERS_DIR_NAME);
 
     private StatusBufferCreator creator;
 

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/ReceiverTest.java
Patch:
@@ -38,7 +38,7 @@ public class ReceiverTest
     private RcvFrameHandlerFactory frameHandlerFactory;
 
     @Before
-    public void setup() throws Exception
+    public void setUp() throws Exception
     {
         final BufferManagementStrategy bufferManagementStrategy = mock(BufferManagementStrategy.class);
         frameHandlerFactory = mock(RcvFrameHandlerFactory.class);

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/SenderChannel.java
Patch:
@@ -209,13 +209,13 @@ public void onFlowControlTimer()
 
         // used for both initial setup 0 length data as well as heartbeats
 
-        // send 0 length data frame with current sequenceNumber
+        // send 0 length data frame with current termOffset
         dataHeader.wrap(scratchAtomicBuffer, 0);
 
         dataHeader.sessionId(sessionId)
                   .channelId(channelId)
                   .termId(currentTermId.get())
-                  .sequenceNumber(0)
+                  .termOffset(0)
                   .frameLength(DataHeaderFlyweight.HEADER_LENGTH)
                   .headerType(HeaderFlyweight.HDR_TYPE_DATA)
                   .flags(DataHeaderFlyweight.BEGIN_AND_END_FLAGS)

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastReceiverTest.java
Patch:
@@ -416,7 +416,7 @@ private void sendDataFrame(final UdpDestination destination,
         final DataHeaderFlyweight dataHeaderFlyweight = new DataHeaderFlyweight();
         dataHeaderFlyweight.wrap(writeBuffer, 0);
 
-        dataHeaderFlyweight.sequenceNumber(seqNum)
+        dataHeaderFlyweight.termOffset(seqNum)
                 .sessionId(SESSION_ID)
                 .channelId(channelId)
                 .termId(termId)

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderTest.java
Patch:
@@ -345,7 +345,8 @@ public void shouldSend0LengthDataOnChannelWhenTimeoutWithoutStatusMessage() thro
 
         assertNotReceivedPacket();
 
-        advanceTimeMilliseconds(FLOW_CONTROL_TIMEOUT_IN_MILLISECONDS + 10);  // should send 0 length data after 100 msec, so give a bit more time
+        // should send 0 length data after 100 msec, so give a bit more time
+        advanceTimeMilliseconds(FLOW_CONTROL_TIMEOUT_IN_MILLISECONDS + 10);
 
         assertReceivedZeroLengthPacket();
     }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/protocol/StatusMessageFlyweight.java
Patch:
@@ -140,5 +140,4 @@ public StatusMessageFlyweight receiverWindow(final long receiverWindow)
         uint32Put(offset() + RECEIVER_WINDOW_FIELD_OFFSET, receiverWindow, LITTLE_ENDIAN);
         return this;
     }
-
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -24,7 +24,6 @@
 import uk.co.real_logic.aeron.util.concurrent.ringbuffer.ManyToOneRingBuffer;
 import uk.co.real_logic.aeron.util.concurrent.ringbuffer.RingBuffer;
 
-import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/buffer/MappedBufferManagementStrategyTest.java
Patch:
@@ -28,7 +28,6 @@
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
-import static uk.co.real_logic.aeron.util.IoUtil.checkFileExists;
 
 public class MappedBufferManagementStrategyTest
 {

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/SharedDirectories.java
Patch:
@@ -23,7 +23,6 @@
 import java.io.File;
 import java.io.IOException;
 import java.nio.MappedByteBuffer;
-import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -33,7 +32,6 @@
 import static uk.co.real_logic.aeron.util.FileMappingConvention.Type.LOG;
 import static uk.co.real_logic.aeron.util.FileMappingConvention.Type.STATE;
 import static uk.co.real_logic.aeron.util.FileMappingConvention.termLocation;
-import static uk.co.real_logic.aeron.util.IoUtil.createEmptyFile;
 import static uk.co.real_logic.aeron.util.IoUtil.mapNewFile;
 
 public class SharedDirectories extends ExternalResource

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastReceiverTest.java
Patch:
@@ -126,7 +126,6 @@ public void tearDown() throws Exception
         mediaConductor.close();
         mediaConductor.nioSelector().selectNowWithNoProcessing();
         bufferManagementStrategy.close();
-        directory.unmapBuffers();
     }
 
     @Test(timeout = 1000)

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderTest.java
Patch:
@@ -72,6 +72,7 @@ public class UnicastSenderTest
     private static final String URI = "udp://" + HOST + ":" + PORT;
     private static final long CHANNEL_ID = 0xA;
     private static final long SESSION_ID = 0xdeadbeefL;
+
     public static final int BUFFER_SIZE = 256;
     public static final int VALUE = 37;
 

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/IoUtil.java
Patch:
@@ -183,7 +183,7 @@ public static void unmap(final MappedByteBuffer buffer)
         {
             return;
         }
-        
+
         try
         {
             final Method method = FileChannelImpl.class.getDeclaredMethod("unmap", MappedByteBuffer.class);

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/ConductorBuffers.java
Patch:
@@ -67,6 +67,7 @@ protected void after()
     {
         // Force unmapping of byte buffers to allow deletion
         creatingStrategy.close();
+        mappingStrategy.close();
     }
 
     public RingBuffer toMediaDriver()

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Channel.java
Patch:
@@ -172,7 +172,7 @@ public void initialTerm(final long sessionId, final long termId)
     /**
      * This is performed on the Client Conductor's thread
      */
-    public void scanForBufferRotation()
+    public void processBufferScan()
     {
         long currentTermId = this.currentTermId.get();
         if (currentTermId == UNKNOWN_TERM_ID)

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/SenderChannel.java
Patch:
@@ -130,7 +130,7 @@ public void process()
             final int rightEdge = activeFlowControlState.rightEdgeOfWindowAtomic();
 
             // if we can't send, then break out of the loop
-            if (frameSequenceNumber + frameLength > rightEdge)
+            if ((frameSequenceNumber + frameLength) > rightEdge)
             {
                 return;
             }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ReceiverThread.java
Patch:
@@ -145,9 +145,9 @@ public NioSelector nioSelector()
         return nioSelector;
     }
 
-    public void addBuffer(final RcvBufferState buffer)
+    public boolean sendBuffer(final RcvBufferState buffer)
     {
-        buffers.add(buffer);
+        return buffers.offer(buffer);
     }
 
     public RcvFrameHandler frameHandler(final UdpDestination destination)

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/AdminBuffers.java
Patch:
@@ -65,7 +65,6 @@ protected void before() throws Exception
 
     protected void after()
     {
-        System.out.println(this.getClass().getName() + " after");
         // Force unmapping of byte buffers to allow deletion
         IoUtil.unmap((java.nio.MappedByteBuffer) toMediaDriver);
         IoUtil.unmap((java.nio.MappedByteBuffer) toApi);

File: aeron-core/src/main/java/uk/co/real_logic/aeron/admin/ClientAdminThread.java
Patch:
@@ -294,9 +294,9 @@ void onNewBufferNotification(final long termId,
     }
 
     public LogAppender newAppender(final String destination,
-                                final long sessionId,
-                                final long channelId,
-                                final int index) throws IOException
+                                   final long sessionId,
+                                   final long channelId,
+                                   final int index) throws IOException
     {
         final AtomicBuffer logBuffer = bufferUsage.newSenderLogBuffer(destination, sessionId, channelId, index);
         final AtomicBuffer stateBuffer = bufferUsage.newSenderStateBuffer(destination, sessionId, channelId, index);

File: aeron-core/src/test/java/uk/co/real_logic/aeron/admin/ClientAdminThreadCursorTest.java
Patch:
@@ -33,11 +33,11 @@
 
 public class ClientAdminThreadCursorTest
 {
-
     private static final long[] CHANNEL_IDS = { 1L, 3L, 4L };
     private static final long SESSION_ID = 1L;
     public static final String DESTINATION = "udp://localhost:40123@localhost:40124";
-    private final RingBuffer sendBuffer = new ManyToOneRingBuffer(new AtomicBuffer(ByteBuffer.allocateDirect(TRAILER_LENGTH + 1024)));
+    private final RingBuffer sendBuffer =
+        new ManyToOneRingBuffer(new AtomicBuffer(ByteBuffer.allocateDirect(TRAILER_LENGTH + 1024)));
     private final ClientAdminThreadCursor thread = new ClientAdminThreadCursor(sendBuffer);
 
     @Test

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/ErrorCode.java
Patch:
@@ -25,7 +25,8 @@ public enum ErrorCode
     RECEIVER_NOT_REGISTERED(2),
     CHANNEL_ALREADY_EXISTS(3),
     GENERIC_ERROR_CHANNEL_MESSAGE(4),
-    GENERIC_ERROR_RECEIVER_MESSAGE(5)
+    GENERIC_ERROR_RECEIVER_MESSAGE(5),
+    CHANNEL_UNKNOWN(6)
     ;
 
     private final short value;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ControlProtocolException.java
Patch:
@@ -17,11 +17,11 @@
 
 import uk.co.real_logic.aeron.util.ErrorCode;
 
-public class ChannelMessageException extends IllegalArgumentException
+public class ControlProtocolException extends IllegalArgumentException
 {
     private final ErrorCode code;
 
-    public ChannelMessageException(final ErrorCode code, final String msg)
+    public ControlProtocolException(final ErrorCode code, final String msg)
     {
         super(msg);
         this.code = code;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ReceiverThread.java
Patch:
@@ -77,13 +77,11 @@ public void process()
                 catch (final InvalidDestinationException e)
                 {
                     // TODO: log this
-                    e.printStackTrace();
                     onError(INVALID_DESTINATION, length);
                 }
                 catch (final ReceiverNotRegisteredException e)
                 {
                     // TODO: log this
-                    e.printStackTrace();
                     onError(RECEIVER_NOT_REGISTERED, length);
                 }
                 catch (final Exception e)

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/UnicastSenderTest.java
Patch:
@@ -146,7 +146,6 @@ public void shouldBeAbleToRemoveChannel() throws Exception
         assertNull(mediaDriverAdminThread.frameHandler(UdpDestination.parse(URI)));
     }
 
-    @Ignore
     @Test
     public void shouldErrorOnAddChannelOnExistingSession() throws Exception
     {

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/ErrorCode.java
Patch:
@@ -23,7 +23,9 @@ public enum ErrorCode
     GENERIC_ERROR(0),
     INVALID_DESTINATION(1),
     RECEIVER_NOT_REGISTERED(2),
-    CHANNEL_ALREADY_EXISTS(3)
+    CHANNEL_ALREADY_EXISTS(3),
+    GENERIC_ERROR_CHANNEL_MESSAGE(4),
+    GENERIC_ERROR_RECEIVER_MESSAGE(5)
     ;
 
     private final short value;

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/ErrorCode.java
Patch:
@@ -23,6 +23,7 @@ public enum ErrorCode
     GENERIC_ERROR(0),
     INVALID_DESTINATION(1),
     RECEIVER_NOT_REGISTERED(2),
+    CHANNEL_ALREADY_EXISTS(3)
     ;
 
     private final short value;

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/SenderThread.java
Patch:
@@ -33,13 +33,13 @@ public SenderThread(final MediaDriver.TopologyBuilder builder)
     {
         this.adminThreadCommandBuffer = builder.adminThreadCommandBuffer();
         this.channels = new AtomicArray<>();
-        counter = 0;
+        this.counter = 0;
     }
 
     public void process()
     {
         counter++;
-        if (counter == Integer.MAX_VALUE)
+        if (counter == channels.length())
         {
             counter = 0;
         }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/Directories.java
Patch:
@@ -23,12 +23,12 @@ public class Directories
     /** Directory of the data buffers */
     public static final String DATA_DIR_PROPERTY_NAME = "aeron.data.dir";
     /** Default directory for data buffers */
-    public static final String DATA_DIR_PROPERTY_NAME_DEFAULT = "/tmp/aeron/data";
+    public static final String DATA_DIR_PROPERTY_NAME_DEFAULT = System.getProperty("java.io.tmpdir") + "/aeron/data";
 
     /** Directory of the admin buffers */
     public static final String ADMIN_DIR_PROPERTY_NAME = "aeron.admin.dir";
     /** Default directory for admin buffers */
-    public static final String ADMIN_DIR_PROPERTY_NAME_DEFAULT = "/tmp/aeron/admin";
+    public static final String ADMIN_DIR_PROPERTY_NAME_DEFAULT = System.getProperty("java.io.tmpdir") + "/aeron/admin";
 
     public static final String DATA_DIR = System.getProperty(DATA_DIR_PROPERTY_NAME, DATA_DIR_PROPERTY_NAME_DEFAULT);
     public static final String ADMIN_DIR = System.getProperty(ADMIN_DIR_PROPERTY_NAME, ADMIN_DIR_PROPERTY_NAME_DEFAULT);

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ReceiverNotRegisteredException.java
Patch:
@@ -15,10 +15,10 @@
  */
 package uk.co.real_logic.aeron.mediadriver;
 
-public class DestinationUnknownException extends IllegalArgumentException
+public class ReceiverNotRegisteredException extends IllegalArgumentException
 {
-    public DestinationUnknownException(final String s)
+    public ReceiverNotRegisteredException(final String message)
     {
-        super(s);
+        super(message);
     }
 }

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/ReceiverThread.java
Patch:
@@ -80,7 +80,7 @@ public void process()
                     e.printStackTrace();
                     onError(INVALID_DESTINATION, length);
                 }
-                catch (final DestinationUnknownException e)
+                catch (final ReceiverNotRegisteredException e)
                 {
                     // TODO: log this
                     e.printStackTrace();
@@ -187,7 +187,7 @@ private void onRemoveReceiverEvent(final String destination, final long[] channe
 
         if (null == rcv)
         {
-            throw new DestinationUnknownException("destination unknown for receiver remove: " + destination);
+            throw new ReceiverNotRegisteredException("destination unknown for receiver remove: " + destination);
         }
 
         rcv.removeChannels(channelIdList);

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/ErrorCodeTest.java
Patch:
@@ -29,7 +29,7 @@ public void errorCodesShouldBeIndexes()
         final ErrorCode[] values = ErrorCode.values();
         for (short i = 0; i < values.length; i++)
         {
-            assertThat(ErrorCode.get(i), is(i));
+            assertThat(ErrorCode.get(i).value(), is(i));
         }
     }
 

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/AdminBuffers.java
Patch:
@@ -54,7 +54,7 @@ protected void before() throws Exception
         final File dir = new File(adminDir);
         if (dir.exists())
         {
-            IoUtil.delete(dir, false);
+            IoUtil.delete(dir, true);
         }
         IoUtil.ensureDirectoryExists(dir, "admin dir");
         creatingStrategy = new CreatingAdminBufferStrategy(adminDir, bufferSize);

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/SharedDirectory.java
Patch:
@@ -35,7 +35,7 @@ protected void before() throws Throwable
         dataDir = new File(Directories.DATA_DIR);
         if (dataDir.exists())
         {
-            IoUtil.delete(dataDir, false);
+            IoUtil.delete(dataDir, true);
         }
         IoUtil.ensureDirectoryExists(dataDir, "data dir");
         mapping = new FileMappingConvention(dataDir.getAbsolutePath());

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/BitUtil.java
Patch:
@@ -134,6 +134,6 @@ public static long generateConsistentHash(final byte[] bytes) throws Exception
 
     public static boolean isEven(int number)
     {
-        return (number % 2) != 0;
+        return (number % 2) == 0;
     }
 }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/logbuffer/BaseMessageHeaderFlyweight.java
Patch:
@@ -30,8 +30,8 @@
  * the encoded message follows:
  *
  * <pre>
- *  0                   1                   2                   3
- *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+ *   0                   1                   2                   3
+ *   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  *  |  Version      |B|E| Flags     |             Type              |
  *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------------------------------+

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/MediaDriver.java
Patch:
@@ -18,6 +18,7 @@
 import uk.co.real_logic.aeron.mediadriver.buffer.BasicBufferManagementStrategy;
 import uk.co.real_logic.aeron.mediadriver.buffer.BufferManagementStrategy;
 import uk.co.real_logic.aeron.util.AdminBufferStrategy;
+import uk.co.real_logic.aeron.util.CreatingAdminBufferStrategy;
 import uk.co.real_logic.aeron.util.Directories;
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
 import uk.co.real_logic.aeron.util.concurrent.ringbuffer.ManyToOneRingBuffer;

File: aeron-mediadriver/src/test/java/uk/co/real_logic/aeron/mediadriver/MediaDriverAdminThreadTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import uk.co.real_logic.aeron.mediadriver.buffer.BasicBufferManagementStrategy;
+import uk.co.real_logic.aeron.util.CreatingAdminBufferStrategy;
 import uk.co.real_logic.aeron.util.IoUtil;
 import uk.co.real_logic.aeron.util.MappingAdminBufferStrategy;
 import uk.co.real_logic.aeron.util.command.ChannelMessageFlyweight;

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/CreatingAdminBufferStrategy.java
Patch:
@@ -1,6 +1,4 @@
-package uk.co.real_logic.aeron.mediadriver;
-
-import uk.co.real_logic.aeron.util.AdminBufferStrategy;
+package uk.co.real_logic.aeron.util;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/AtomicArray.java
Patch:
@@ -49,7 +49,7 @@ public void mark()
     {
         lastMark = arrayRef.get();
     }
-    
+
     /**
      * Return the length of the {@link java.lang.Object} array
      * @return the length of the {@link java.lang.Object} array

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/FrameHandler.java
Patch:
@@ -44,7 +44,7 @@ default void onDataFrame(final DataHeaderFlyweight header, final InetSocketAddre
     }
 
     /**
-     * Handle a Control Frame, such as a NAK, CONN, SM, etc.
+     * Handle a Control Frame, such as a CONN, SM, etc.
      *
      * @param header of the Frame
      * @param srcAddr of the Frame
@@ -55,7 +55,7 @@ default void onControlFrame(final HeaderFlyweight header, final InetSocketAddres
     }
 
     /**
-     * Handle a Control Frame, such as a NAK, CONN, SM, etc.
+     * Handle a Nak Frame
      *
      * @param nak the nak Frame
      * @param srcAddr of the Frame

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/BitUtil.java
Patch:
@@ -111,7 +111,7 @@ public static String toHex(final byte[] buffer) throws Exception
     /**
      * Generate a consistent hash of the bytes that is represented as a long.
      *
-     * Not guaranteed to be unique. But should be reasonably unique and
+     * Not guaranteed to be unique. But should be reasonably unique and consistent.
      *
      * @param bytes bytes to hash over
      * @return long representation of hash

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/protocol/DataHeaderFlyweight.java
Patch:
@@ -41,6 +41,9 @@
  */
 public class DataHeaderFlyweight extends HeaderFlyweight
 {
+    /** Size of the Data Header */
+    public static final int HEADER_LENGTH = 24;
+
     private static final int SESSION_ID_FIELD_OFFSET = 8;
     private static final int CHANNEL_ID_FIELD_OFFSET = 12;
     private static final int TERM_ID_FIELD_OFFSET = 16;

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/protocol/HeaderFlyweight.java
Patch:
@@ -49,6 +49,8 @@ public class HeaderFlyweight extends Flyweight
     public static final int HDR_TYPE_NAK = 0x01;
     /** header type SM */
     public static final int HDR_TYPE_SM = 0x02;
+    /** header type ERR */
+    public static final int HDR_TYPE_ERR = 0x03;
     /** header type EXT */
     public static final int HDR_TYPE_EXT = 0xFFFF;
 

File: aeron-util/src/test/java/uk/co/real_logic/aeron/util/FlyweightTest.java
Patch:
@@ -87,7 +87,7 @@ public void shouldWriteAndReadMultipleFramesCorrectly()
 
         encodeHeader.reset(aBuff, 8);
         encodeHeader.version((byte)2);
-        encodeHeader.headerType((short)HeaderFlyweight.HDR_TYPE_CONN);
+        encodeHeader.headerType((short)HeaderFlyweight.HDR_TYPE_SM);
         encodeHeader.frameLength(8);
         encodeHeader.sessionId(0x11223344L);
 
@@ -99,7 +99,7 @@ public void shouldWriteAndReadMultipleFramesCorrectly()
 
         decodeHeader.reset(aBuff, 8);
         assertThat(decodeHeader.version(), is((byte)2));
-        assertThat(decodeHeader.headerType(), is((short)HeaderFlyweight.HDR_TYPE_CONN));
+        assertThat(decodeHeader.headerType(), is((short)HeaderFlyweight.HDR_TYPE_SM));
         assertThat(decodeHeader.frameLength(), is(8));
         assertThat(decodeHeader.sessionId(), is(0x11223344L));
     }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/concurrent/logbuffer/RecordDescriptor.java
Patch:
@@ -31,6 +31,9 @@ public class RecordDescriptor
     /** Word alignment for fields. */
     public static final int WORD_ALIGNMENT = BitUtil.SIZE_OF_LONG;
 
+    /** Type of the field used to store record length */
+    public static final Class<Integer> LENGTH_FIELD_TYPE = int.class;
+
     /**
      * Calculate the maximum supported message length for a buffer of given capacity.
      *

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/SenderThread.java
Patch:
@@ -35,7 +35,7 @@ public SenderThread(final MediaDriver.TopologyBuilder builder)
         this.commandBuffer = builder.senderThreadCommandBuffer();
         this.adminThreadCommandBuffer = builder.adminThreadCommandBuffer();
         this.bufferManagementStrategy = builder.bufferManagementStrategy();
-        this.channels = new AtomicArray<>(SenderChannel.class);
+        this.channels = new AtomicArray<>();
     }
 
     @Override

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/SenderThread.java
Patch:
@@ -48,12 +48,12 @@ public void process()
         // TODO: handle commands added to command buffer (call onNewSenderTerm, onStatusMessage, etc.)
     }
 
-    public void addBuffer(final SenderChannel channel)
+    public void addChannel(final SenderChannel channel)
     {
         channels.add(channel);
     }
 
-    public void removeBuffer(final SenderChannel channel)
+    public void removeChannel(final SenderChannel channel)
     {
         channels.remove(channel);
     }

File: aeron-core/src/main/java/uk/co/real_logic/aeron/admin/BufferUsageStrategy.java
Patch:
@@ -25,5 +25,5 @@
  */
 public interface BufferUsageStrategy
 {
-    ByteBuffer onTermAdded(final long channelId, final long termId, boolean isSender) throws Exception;
+    ByteBuffer onTermAdded(final long sessionId, final long channelId, final long termId, boolean isSender) throws Exception;
 }

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/AtomicArray.java
Patch:
@@ -55,7 +55,7 @@ public void forEach(final Consumer<T> func)
         {
             for (final T element : array)
             {
-                if (null == element)
+                if (null != element)
                 {
                     func.accept(element);
                 }

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -22,7 +22,6 @@
 import uk.co.real_logic.aeron.util.AdminBufferStrategy;
 import uk.co.real_logic.aeron.util.BasicAdminBufferStrategy;
 import uk.co.real_logic.aeron.util.Directories;
-import uk.co.real_logic.aeron.util.collections.CollectionUtil;
 import uk.co.real_logic.aeron.util.collections.Long2ObjectHashMap;
 import uk.co.real_logic.aeron.util.concurrent.AtomicBuffer;
 import uk.co.real_logic.aeron.util.concurrent.ringbuffer.ManyToOneRingBuffer;

File: aeron-core/src/main/java/uk/co/real_logic/aeron/admin/ClientAdminThread.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package uk.co.real_logic.aeron;
+package uk.co.real_logic.aeron.admin;
 
 import uk.co.real_logic.aeron.util.ClosableThread;
 import uk.co.real_logic.aeron.util.command.MediaDriverFacade;

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Aeron.java
Patch:
@@ -125,7 +125,7 @@ public Source[] newSources(final Source.Builder[] builders)
      */
     public Receiver newReceiver(final Receiver.Builder builder)
     {
-        return new Receiver(this, builder);
+        return new Receiver(builder);
     }
 
     /**
@@ -138,7 +138,7 @@ public Receiver newReceiver(final Consumer<Receiver.Builder> block)
         Receiver.Builder builder = new Receiver.Builder();
         block.accept(builder);
 
-        return new Receiver(this, builder);
+        return new Receiver(builder);
     }
 
     public static class Builder

File: aeron-core/src/main/java/uk/co/real_logic/aeron/Receiver.java
Patch:
@@ -44,7 +44,7 @@ public Receiver(final Builder builder)
         this.mediaDriver = builder.mediaDriver;
 
         long[] channels = channelMap.keySet().stream().mapToLong(x -> x).toArray();
-        mediaDriver.sendAddReceiver(destination.destination(), channels);
+        this.mediaDriver.sendAddReceiver(destination.destination(), channels);
     }
 
     public void close()

File: aeron-core/src/test/java/uk/co/real_logic/aeron/admin/ClientAdminThreadTest.java
Patch:
@@ -37,7 +37,7 @@ public class ClientAdminThreadTest
 
     public static final String DESTINATION = "udp://localhost:40123@localhost:40124";
     private final RingBuffer sendBuffer = new ManyToOneRingBuffer(new AtomicBuffer(ByteBuffer.allocateDirect(TRAILER_SIZE + 1024)));
-    private final ClientAdminThread thread = new ClientAdminThread(null, null, sendBuffer);
+    private final ClientAdminThread thread = new ClientAdminThread(null, null, sendBuffer, null);
 
     @Test
     public void threadSendsAddChannelMessage()

File: aeron-core/src/test/java/uk/co/real_logic/aeron/BufferExhaustionPredictorTest.java
Patch:
@@ -34,13 +34,14 @@ public static Collection<Object[]> data()
     {
         Object[][] data = new Object[][]
         {
-            { 10, new long[] {1, 1, 1}, false },
             { 10, new long[] {30, 30, 30}, true },
             { 100, new long[] {30, 10, 20}, true },
+            { 10, new long[] {1, 1, 1}, false },
         };
         return Arrays.asList(data);
     }
 
+    private final BufferExhaustionPredictor predictor = new BufferExhaustionPredictor(100);
     private final long period;
     private final long[] amounts;
     private final boolean result;
@@ -55,7 +56,6 @@ public BufferExhaustionPredictorTest(final long period, final long[] amounts, fi
     @Test
     public void canPredictExhaustion()
     {
-        BufferExhaustionPredictor predictor = new BufferExhaustionPredictor(100);
         long currentTime = System.nanoTime();
         long startTime = currentTime - period;
         for (int i = 0; i < amounts.length; i++)

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/collections/TripletMap.java
Patch:
@@ -22,8 +22,7 @@
  */
 public class TripletMap<V>
 {
-    final Long2ObjectHashMap<Long2ObjectHashMap<Long2ObjectHashMap<V>>> map =
-        new Long2ObjectHashMap<>();
+    private final Long2ObjectHashMap<Long2ObjectHashMap<Long2ObjectHashMap<V>>> map = new Long2ObjectHashMap<>();
 
     public V get(final long sessionId, final long channelId, final long termId)
     {

File: aeron-core/src/main/java/uk/co/real_logic/aeron/AdminThread.java
Patch:
@@ -27,9 +27,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static uk.co.real_logic.aeron.util.protocol.HeaderFlyweight.HDR_TYPE_ADD_CHANNEL;
-import static uk.co.real_logic.aeron.util.protocol.HeaderFlyweight.HDR_TYPE_REMOVE_CHANNEL;
-import static uk.co.real_logic.aeron.util.protocol.HeaderFlyweight.HDR_TYPE_REMOVE_RECEIVER;
+import static uk.co.real_logic.aeron.util.protocol.HeaderFlyweight.*;
 
 /**
  * Admin thread to take responses and notifications from mediadriver and act on them. As well as pass commands to the mediadriver.
@@ -124,6 +122,7 @@ public void sendRequestTerm(final long sessionId, final long channelId, final lo
     {
         requestTermMessage.reset(sendBuffer);
         requestTermMessage.currentVersion();
+        requestTermMessage.headerType(HDR_TYPE_REQUEST_TERM);
         requestTermMessage.sessionId(sessionId);
         requestTermMessage.channelId(channelId);
         requestTermMessage.termId(termId);

File: aeron-mediadriver/src/main/java/uk/co/real_logic/aeron/mediadriver/AdminThread.java
Patch:
@@ -104,6 +104,7 @@ public void onAddChannel(final String destination, final long sessionId, final l
             }
 
             // TODO: look in the termBufferMap for channelId, then sessionId, then termId
+            // TODO: must error check if new channel or not. And sessionId collision
 
             final ByteBuffer termBuffer = bufferManagementStrategy.addSenderChannel(sessionId, channelId, termId);
 

File: aeron-util/src/main/java/uk/co/real_logic/aeron/util/DataHeaderFlyweight.java
Patch:
@@ -49,7 +49,7 @@ public class DataHeaderFlyweight extends HeaderFlyweight
      */
     public long channelId()
     {
-        return CodecUtil.uint32Get(directBuffer, CHANNEL_ID_FIELD_OFFSET, ByteOrder.LITTLE_ENDIAN);
+        return CodecUtil.uint32Get(directBuffer, offset + CHANNEL_ID_FIELD_OFFSET, ByteOrder.LITTLE_ENDIAN);
     }
 
     /**
@@ -59,7 +59,7 @@ public long channelId()
      */
     public HeaderFlyweight channelId(final long channelId)
     {
-        CodecUtil.uint32Put(directBuffer, CHANNEL_ID_FIELD_OFFSET, channelId, ByteOrder.LITTLE_ENDIAN);
+        CodecUtil.uint32Put(directBuffer, offset + CHANNEL_ID_FIELD_OFFSET, channelId, ByteOrder.LITTLE_ENDIAN);
         return this;
     }
 

