File: vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java
Patch:
@@ -3,7 +3,7 @@
 import com.vip.vjtools.vjkit.base.annotation.Nullable;
 
 /**
- * 参数校验统一使用Apache Common Lange Validate, 补充一些缺少的.
+ * 参数校验统一使用Apache Common Lang Validate, 补充一些缺少的.
  * 
  * 为什么不用Guava的{@code com.google.common.base.Preconditions} , 一是少打几个字而已, 二是Validate的方法多，比如noNullElements()判断多个元素都不为空
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/base/ValueValidator.java
Patch:
@@ -7,7 +7,7 @@
  * 
  * 提供对配置值进行校验，并根据结果决定是否使用默认值。
  * 
- * Guva, Commons Lang里的Validate类用于判断并抛异常。
+ * Guava, Commons Lang里的Validate类用于判断并抛异常。
  * 
  * 而ValueValidator的行为是取默认值，多用于配置值的处理。
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/ListUtil.java
Patch:
@@ -212,7 +212,7 @@ public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
 	}
 
 	/**
-	 * 升序排序, 采用JDK认为最优的排序算法, 使用Comparetor.
+	 * 升序排序, 采用JDK认为最优的排序算法, 使用Comparator.
 	 * 
 	 * @see java.util.Collections#sort(List, Comparator)
 	 */

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/MapUtil.java
Patch:
@@ -116,7 +116,7 @@ public static <K, V> HashMap<K, V> newHashMap() {
 	 * 
 	 * 加载因子也是HashMap中减少Hash冲突的重要一环，如果读写频繁，总记录数不多的Map，可以比默认值0.75进一步降低，建议0.5
 	 * 
-	 * @see com.google.common.collect.Maps#newHashMap(int)
+	 * @see com.google.common.collect.Maps#newHashMap
 	 */
 	public static <K, V> HashMap<K, V> newHashMapWithCapacity(int expectedSize, float loadFactor) {
 		int finalSize = (int) (expectedSize / loadFactor + 1.0F);
@@ -216,12 +216,12 @@ public static <K, V> ConcurrentSkipListMap<K, V> newConcurrentSortedMap() {
 
 	/**
 	 * 返回一个空的结构特殊的Map，节约空间.
-	 * 
+	 *
 	 * 注意返回的Map不可写, 写入会抛出UnsupportedOperationException.
 	 * 
 	 * @see java.util.Collections#emptyMap()
 	 */
-	public static final <K, V> Map<K, V> emptyMap() {
+	public static <K, V> Map<K, V> emptyMap() {
 		return Collections.emptyMap();
 	}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/SetUtil.java
Patch:
@@ -92,7 +92,7 @@ public static <T> ConcurrentHashSet<T> newConcurrentHashSet() {
 	 * 
 	 * @see java.util.Collections#emptySet()
 	 */
-	public static final <T> Set<T> emptySet() {
+	public static <T> Set<T> emptySet() {
 		return Collections.emptySet();
 	}
 
@@ -114,7 +114,7 @@ public static <T> Set<T> emptySetIfNull(final Set<T> set) {
 	 * 
 	 * @see java.util.Collections#singleton(Object)
 	 */
-	public static final <T> Set<T> singletonSet(T o) {
+	public static <T> Set<T> singletonSet(T o) {
 		return Collections.singleton(o);
 	}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/type/ConcurrentHashSet.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * JDK并没有提供ConcurrenHashSet，考虑到JDK的HashSet也是基于HashMap实现的，因此ConcurrenHashSet也由ConcurrenHashMap完成。
+ * JDK并没有提供ConcurrentHashSet，考虑到JDK的HashSet也是基于HashMap实现的，因此ConcurrentHashSet也由ConcurrentHashMap完成。
  * 
  * 虽然也可以通过Collections.newSetFromMap(new ConcurrentHashMap())，
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/Concurrents.java
Patch:
@@ -57,7 +57,7 @@ public static Semaphore fairSemaphore(int permits) {
 	/**
 	 * 返回令牌桶算法的RateLimiter默认版，默认令牌桶大小等于期望的QPS，且刚启动时桶为空。
 	 * 
-	 * @permitsPerSecond 每秒允许的请求数，可看成QPS，同时将QPS平滑到毫秒级别上，请求到达速度不平滑时依赖缓冲能力.
+	 * @param permitsPerSecond 每秒允许的请求数，可看成QPS，同时将QPS平滑到毫秒级别上，请求到达速度不平滑时依赖缓冲能力.
 	 */
 	public static RateLimiter rateLimiter(int permitsPerSecond) {
 		return RateLimiter.create(permitsPerSecond);

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/AbortPolicyWithReport.java
Patch:
@@ -18,7 +18,7 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {
 
 	private final String threadName;
 
-	private ThreadDumpper dummper = new ThreadDumpper();
+	private ThreadDumpper dumpper = new ThreadDumpper();
 
 	public AbortPolicyWithReport(String threadName) {
 		this.threadName = threadName;
@@ -34,7 +34,7 @@ public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
 				e.getLargestPoolSize(), e.getTaskCount(), e.getCompletedTaskCount(), e.isShutdown(), e.isTerminated(),
 				e.isTerminating());
 		logger.warn(msg);
-		dummper.tryThreadDump(null);
+		dumpper.tryThreadDump(null);
 		throw new RejectedExecutionException(msg);
 	}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/ThreadPoolUtil.java
Patch:
@@ -49,7 +49,7 @@ public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int
 	}
 
 	/**
-	 * @see gracefulShutdown
+	 * @see #gracefulShutdown
 	 */
 	public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeout,
 			TimeUnit timeUnit) {
@@ -70,7 +70,7 @@ public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix)
 	/**
 	 * 可设定是否daemon, daemon线程在主线程已执行完毕时, 不会阻塞应用不退出, 而非daemon线程则会阻塞.
 	 * 
-	 * @see buildThreadFactory
+	 * @see #buildThreadFactory
 	 */
 	public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix, @NotNull boolean daemon) {
 		return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + "-%d").setDaemon(daemon).build();
@@ -86,7 +86,7 @@ public static Runnable safeRunnable(@NotNull Runnable runnable) {
 	}
 
 	/**
-	 * 保证不会有Exception抛出到线程池的Runnable包裹类，防止用户没有捕捉异常导致中断了线程池中的线程, 使得SchedulerService无法执行. 在无法控制第三方包的Runnalbe实现时，使用本类进行包裹.
+	 * 保证不会有Exception抛出到线程池的Runnable包裹类，防止用户没有捕捉异常导致中断了线程池中的线程, 使得SchedulerService无法执行. 在无法控制第三方包的Runnable实现时，使用本类进行包裹.
 	 */
 	private static class SafeRunnable implements Runnable {
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/id/IdUtil.java
Patch:
@@ -5,7 +5,7 @@
 
 public class IdUtil {
 	/*
-	 * 返回使用ThreadLocalRandm的UUID，比默认的UUID性能更优
+	 * 返回使用ThreadLocalRandom的UUID，比默认的UUID性能更优
 	 */
 	public static UUID fastUUID() {
 		ThreadLocalRandom random = ThreadLocalRandom.current();

File: vjkit/src/main/java/com/vip/vjtools/vjkit/io/FilePathUtil.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 关于文件路径的工具集. 这个类只适合处理纯字符串的路径，如果是File对象或者Path对象的路径处理，建议直接使用Path类的方法。
  * 
- * @see {@link java.nio.file.Path}
+ * @see java.nio.file.Path
  */
 public class FilePathUtil {
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/io/ResourceUtil.java
Patch:
@@ -25,7 +25,7 @@
  * 
  * 不指定contextClass时，按URLClassLoader的实现, 从jar file中查找resourceName，
  * 
- * 所以resourceName无需以"/"打头即表示jar file中的根目录，带了"/" 反而导致JarFile.getEntry(resouceName)时没有返回.
+ * 所以resourceName无需以"/"打头即表示jar file中的根目录，带了"/" 反而导致JarFile.getEntry(resourceName)时没有返回.
  * 
  * 指定contextClass时，class.getResource()会先对name进行处理再交给classLoader，打头的"/"的会被去除，不以"/"打头则表示与该contextClass package的相对路径,
  * 会先转为绝对路径.

File: vjkit/src/main/java/com/vip/vjtools/vjkit/logging/PerformanceUtil.java
Patch:
@@ -86,7 +86,7 @@ public static void removeAll() {
 	/**
 	 * 当处理时间超过预定的阈值时发出警告信息
 	 * @param logger
-	 * @param key
+	 * @param duration
 	 * @param threshold 阈值（单位：ms）
 	 */
 	public static void slowLog(Logger logger, long duration, long threshold) {
@@ -165,7 +165,7 @@ public static void endWithSlowLog(Logger logger, long threshold, String context)
 
 	/**
 	 * 记录结束时间并当处理时间超过预定的阈值时发出警告信息，最后清除
-	 * @param log
+	 * @param logger
 	 * @param key
 	 * @param threshold 阈值（单位：ms）
 	*  @param context 需要记录的context信息，如请求的json等

File: vjkit/src/main/java/com/vip/vjtools/vjkit/mapper/BeanMapper.java
Patch:
@@ -9,7 +9,7 @@
 import com.vip.vjtools.vjkit.collection.ArrayUtil;
 
 /**
- * 实现深度的BeanOfClasssA<->BeanOfClassB复制
+ * 实现深度的BeanOfClassA<->BeanOfClassB复制
  * 
  * 不要使用Apache Common BeanUtils进行类复制，每次就行反射查询对象的属性列表, 非常缓慢.
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/mapper/JsonMapper.java
Patch:
@@ -109,7 +109,7 @@ public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
 	}
 
 	/**
-	 * 反序列化复杂Collection如List<Bean>, contructCollectionType()或contructMapType()构造类型, 然后调用本函数.
+	 * 反序列化复杂Collection如List<Bean>, constructCollectionType()或constructMapType()构造类型, 然后调用本函数.
 	 * 
 	 * @see #createCollectionType(Class, Class...)
 	 */

File: vjkit/src/main/java/com/vip/vjtools/vjkit/number/RandomUtil.java
Patch:
@@ -100,7 +100,7 @@ public static int nextInt(int min, int max) {
 	 * 
 	 * JDK本身不具有控制两端范围的nextInt，因此参考Commons Lang RandomUtils的实现, 不直接复用是因为要传入Random实例
 	 * 
-	 * @see org.apache.commons.lang3.RandomUtils#nextInt(long, long)
+	 * @see org.apache.commons.lang3.RandomUtils#nextInt(int, int)
 	 */
 	public static int nextInt(Random random, int min, int max) {
 		Validate.isTrue(max >= min, "Start value must be smaller or equal to end value.");

File: vjkit/src/main/java/com/vip/vjtools/vjkit/text/MoreStringUtil.java
Patch:
@@ -29,7 +29,7 @@ public class MoreStringUtil {
 	/**
 	 * 高性能的Split，针对char的分隔符号，比JDK String自带的高效.
 	 * 
-	 * copy from Commons Lange 3.5 StringUtils 并做优化
+	 * copy from Commons Lang 3.5 StringUtils 并做优化
 	 * 
 	 * @see #split(String, char, int)
 	 */
@@ -40,7 +40,7 @@ public static List<String> split(@Nullable final String str, final char separato
 	/**
 	 * 高性能的Split，针对char的分隔符号，比JDK String自带的高效.
 	 * 
-	 * copy from Commons Lange 3.5 StringUtils, 做如下优化:
+	 * copy from Commons Lang 3.5 StringUtils, 做如下优化:
 	 * 
 	 * 1. 最后不做数组转换，直接返回List.
 	 * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/text/StringBuilderHolder.java
Patch:
@@ -36,7 +36,7 @@ protected StringBuilder initialValue() {
 	 * 
 	 * 用于StringBuilder在使用过程中，会调用其他可能也使用StringBuilderHolder的子函数.
 	 * 
-	 * @param initSize StringBulder的初始大小, 建议512,如果容量不足将进行扩容，扩容后的数组将一直保留.
+	 * @param initSize StringBuilder的初始大小, 建议512,如果容量不足将进行扩容，扩容后的数组将一直保留.
 	 */
 	public StringBuilderHolder(int initSize) {
 		this.initSize = initSize;

File: vjkit/src/main/java/com/vip/vjtools/vjkit/text/WildcardMatcher.java
Patch:
@@ -157,7 +157,7 @@ public static int matchOne(String src, String... patterns) {
 
 	/**
 	 * Matches path to at least one pattern. Returns index of matched pattern or <code>-1</code> otherwise.
-	 * @see #matchPath(String, String, char)
+	 * @see #matchPath
 	 */
 	public static int matchPathOne(String platformDependentPath, String... patterns) {
 		for (int i = 0; i < patterns.length; i++) {

File: vjkit/src/main/java/com/vip/vjtools/vjkit/time/ClockUtil.java
Patch:
@@ -141,7 +141,7 @@ public long currentTimeMillis() {
 		}
 
 		/**
-		 * 获取nanotime
+		 * 获取nanoTime
 		 */
 		@Override
 		public long nanoTime() {
@@ -177,7 +177,7 @@ public void decreaseTime(int millis) {
 		}
 
 		/**
-		 * 设置nanotime.
+		 * 设置nanoTime.
 		 */
 		public void setNanoTime(long nanoTime) {
 			this.nanoTme = nanoTime;

File: vjkit/src/test/java/com/vip/vjtools/vjkit/io/FileUtilTest.java
Patch:
@@ -136,15 +136,15 @@ public void testAsInputStream() throws Exception {
 	public void testAsOututStream() throws Exception {
 
 		Path tempPath = FileUtil.createTempFile();
-		try (OutputStream os = FileUtil.asOututStream(tempPath.toString())) {
+		try (OutputStream os = FileUtil.asOutputStream(tempPath.toString())) {
 			assertThat(os).isNotNull();
 		}
 
-		try (OutputStream os = FileUtil.asOututStream(tempPath);) {
+		try (OutputStream os = FileUtil.asOutputStream(tempPath);) {
 			assertThat(os).isNotNull();
 		}
 
-		try (OutputStream os = FileUtil.asOututStream(tempPath.toFile())) {
+		try (OutputStream os = FileUtil.asOutputStream(tempPath.toFile())) {
 			assertThat(os).isNotNull();
 		}
 	}

File: vjkit/src/main/java/com/vip/vjtools/vjkit/time/DateUtil.java
Patch:
@@ -192,7 +192,7 @@ public static Date setMilliseconds(@NotNull final Date date, int amount) {
 
 	///// 获取日期的位置//////
 	/**
-	 * 获得日期是一周的第几天. 已改为中国习惯，1 是Monday，而不是Sundays.
+	 * 获得日期是一周的第几天. 已改为中国习惯，1 是Monday，而不是Sunday.
 	 */
 	public static int getDayOfWeek(@NotNull final Date date) {
 		int result = getWithMondayFirst(date, Calendar.DAY_OF_WEEK);

File: vjkit/src/main/java/com/vip/vjtools/vjkit/base/MoreValidate.java
Patch:
@@ -3,7 +3,7 @@
 import com.vip.vjtools.vjkit.base.annotation.Nullable;
 
 /**
- * 参数校验统一使用Apache Common Lange Validate, 补充一些缺少的.
+ * 参数校验统一使用Apache Common Lang Validate, 补充一些缺少的.
  * 
  * 为什么不用Guava的{@code com.google.common.base.Preconditions} , 一是少打几个字而已, 二是Validate的方法多，比如noNullElements()判断多个元素都不为空
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/base/ValueValidator.java
Patch:
@@ -7,7 +7,7 @@
  * 
  * 提供对配置值进行校验，并根据结果决定是否使用默认值。
  * 
- * Guva, Commons Lang里的Validate类用于判断并抛异常。
+ * Guava, Commons Lang里的Validate类用于判断并抛异常。
  * 
  * 而ValueValidator的行为是取默认值，多用于配置值的处理。
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/ListUtil.java
Patch:
@@ -212,7 +212,7 @@ public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
 	}
 
 	/**
-	 * 升序排序, 采用JDK认为最优的排序算法, 使用Comparetor.
+	 * 升序排序, 采用JDK认为最优的排序算法, 使用Comparator.
 	 * 
 	 * @see java.util.Collections#sort(List, Comparator)
 	 */

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/MapUtil.java
Patch:
@@ -116,7 +116,7 @@ public static <K, V> HashMap<K, V> newHashMap() {
 	 * 
 	 * 加载因子也是HashMap中减少Hash冲突的重要一环，如果读写频繁，总记录数不多的Map，可以比默认值0.75进一步降低，建议0.5
 	 * 
-	 * @see com.google.common.collect.Maps#newHashMap(int)
+	 * @see com.google.common.collect.Maps#newHashMap
 	 */
 	public static <K, V> HashMap<K, V> newHashMapWithCapacity(int expectedSize, float loadFactor) {
 		int finalSize = (int) (expectedSize / loadFactor + 1.0F);
@@ -216,12 +216,12 @@ public static <K, V> ConcurrentSkipListMap<K, V> newConcurrentSortedMap() {
 
 	/**
 	 * 返回一个空的结构特殊的Map，节约空间.
-	 * 
+	 *
 	 * 注意返回的Map不可写, 写入会抛出UnsupportedOperationException.
 	 * 
 	 * @see java.util.Collections#emptyMap()
 	 */
-	public static final <K, V> Map<K, V> emptyMap() {
+	public static <K, V> Map<K, V> emptyMap() {
 		return Collections.emptyMap();
 	}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/SetUtil.java
Patch:
@@ -92,7 +92,7 @@ public static <T> ConcurrentHashSet<T> newConcurrentHashSet() {
 	 * 
 	 * @see java.util.Collections#emptySet()
 	 */
-	public static final <T> Set<T> emptySet() {
+	public static <T> Set<T> emptySet() {
 		return Collections.emptySet();
 	}
 
@@ -114,7 +114,7 @@ public static <T> Set<T> emptySetIfNull(final Set<T> set) {
 	 * 
 	 * @see java.util.Collections#singleton(Object)
 	 */
-	public static final <T> Set<T> singletonSet(T o) {
+	public static <T> Set<T> singletonSet(T o) {
 		return Collections.singleton(o);
 	}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/collection/type/ConcurrentHashSet.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * JDK并没有提供ConcurrenHashSet，考虑到JDK的HashSet也是基于HashMap实现的，因此ConcurrenHashSet也由ConcurrenHashMap完成。
+ * JDK并没有提供ConcurrentHashSet，考虑到JDK的HashSet也是基于HashMap实现的，因此ConcurrentHashSet也由ConcurrentHashMap完成。
  * 
  * 虽然也可以通过Collections.newSetFromMap(new ConcurrentHashMap())，
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/Concurrents.java
Patch:
@@ -57,7 +57,7 @@ public static Semaphore fairSemaphore(int permits) {
 	/**
 	 * 返回令牌桶算法的RateLimiter默认版，默认令牌桶大小等于期望的QPS，且刚启动时桶为空。
 	 * 
-	 * @permitsPerSecond 每秒允许的请求数，可看成QPS，同时将QPS平滑到毫秒级别上，请求到达速度不平滑时依赖缓冲能力.
+	 * @param permitsPerSecond 每秒允许的请求数，可看成QPS，同时将QPS平滑到毫秒级别上，请求到达速度不平滑时依赖缓冲能力.
 	 */
 	public static RateLimiter rateLimiter(int permitsPerSecond) {
 		return RateLimiter.create(permitsPerSecond);

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/AbortPolicyWithReport.java
Patch:
@@ -18,7 +18,7 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {
 
 	private final String threadName;
 
-	private ThreadDumpper dummper = new ThreadDumpper();
+	private ThreadDumpper dumpper = new ThreadDumpper();
 
 	public AbortPolicyWithReport(String threadName) {
 		this.threadName = threadName;
@@ -34,7 +34,7 @@ public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {
 				e.getLargestPoolSize(), e.getTaskCount(), e.getCompletedTaskCount(), e.isShutdown(), e.isTerminated(),
 				e.isTerminating());
 		logger.warn(msg);
-		dummper.tryThreadDump(null);
+		dumpper.tryThreadDump(null);
 		throw new RejectedExecutionException(msg);
 	}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/ThreadPoolUtil.java
Patch:
@@ -49,7 +49,7 @@ public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int
 	}
 
 	/**
-	 * @see gracefulShutdown
+	 * @see #gracefulShutdown
 	 */
 	public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeout,
 			TimeUnit timeUnit) {
@@ -70,7 +70,7 @@ public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix)
 	/**
 	 * 可设定是否daemon, daemon线程在主线程已执行完毕时, 不会阻塞应用不退出, 而非daemon线程则会阻塞.
 	 * 
-	 * @see buildThreadFactory
+	 * @see #buildThreadFactory
 	 */
 	public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix, @NotNull boolean daemon) {
 		return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + "-%d").setDaemon(daemon).build();
@@ -86,7 +86,7 @@ public static Runnable safeRunnable(@NotNull Runnable runnable) {
 	}
 
 	/**
-	 * 保证不会有Exception抛出到线程池的Runnable包裹类，防止用户没有捕捉异常导致中断了线程池中的线程, 使得SchedulerService无法执行. 在无法控制第三方包的Runnalbe实现时，使用本类进行包裹.
+	 * 保证不会有Exception抛出到线程池的Runnable包裹类，防止用户没有捕捉异常导致中断了线程池中的线程, 使得SchedulerService无法执行. 在无法控制第三方包的Runnable实现时，使用本类进行包裹.
 	 */
 	private static class SafeRunnable implements Runnable {
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/id/IdUtil.java
Patch:
@@ -5,7 +5,7 @@
 
 public class IdUtil {
 	/*
-	 * 返回使用ThreadLocalRandm的UUID，比默认的UUID性能更优
+	 * 返回使用ThreadLocalRandom的UUID，比默认的UUID性能更优
 	 */
 	public static UUID fastUUID() {
 		ThreadLocalRandom random = ThreadLocalRandom.current();

File: vjkit/src/main/java/com/vip/vjtools/vjkit/io/FilePathUtil.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 关于文件路径的工具集. 这个类只适合处理纯字符串的路径，如果是File对象或者Path对象的路径处理，建议直接使用Path类的方法。
  * 
- * @see {@link java.nio.file.Path}
+ * @see java.nio.file.Path
  */
 public class FilePathUtil {
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/io/ResourceUtil.java
Patch:
@@ -25,7 +25,7 @@
  * 
  * 不指定contextClass时，按URLClassLoader的实现, 从jar file中查找resourceName，
  * 
- * 所以resourceName无需以"/"打头即表示jar file中的根目录，带了"/" 反而导致JarFile.getEntry(resouceName)时没有返回.
+ * 所以resourceName无需以"/"打头即表示jar file中的根目录，带了"/" 反而导致JarFile.getEntry(resourceName)时没有返回.
  * 
  * 指定contextClass时，class.getResource()会先对name进行处理再交给classLoader，打头的"/"的会被去除，不以"/"打头则表示与该contextClass package的相对路径,
  * 会先转为绝对路径.

File: vjkit/src/main/java/com/vip/vjtools/vjkit/logging/PerformanceUtil.java
Patch:
@@ -86,7 +86,7 @@ public static void removeAll() {
 	/**
 	 * 当处理时间超过预定的阈值时发出警告信息
 	 * @param logger
-	 * @param key
+	 * @param duration
 	 * @param threshold 阈值（单位：ms）
 	 */
 	public static void slowLog(Logger logger, long duration, long threshold) {
@@ -165,7 +165,7 @@ public static void endWithSlowLog(Logger logger, long threshold, String context)
 
 	/**
 	 * 记录结束时间并当处理时间超过预定的阈值时发出警告信息，最后清除
-	 * @param log
+	 * @param logger
 	 * @param key
 	 * @param threshold 阈值（单位：ms）
 	*  @param context 需要记录的context信息，如请求的json等

File: vjkit/src/main/java/com/vip/vjtools/vjkit/mapper/BeanMapper.java
Patch:
@@ -9,7 +9,7 @@
 import com.vip.vjtools.vjkit.collection.ArrayUtil;
 
 /**
- * 实现深度的BeanOfClasssA<->BeanOfClassB复制
+ * 实现深度的BeanOfClassA<->BeanOfClassB复制
  * 
  * 不要使用Apache Common BeanUtils进行类复制，每次就行反射查询对象的属性列表, 非常缓慢.
  * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/mapper/JsonMapper.java
Patch:
@@ -109,7 +109,7 @@ public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
 	}
 
 	/**
-	 * 反序列化复杂Collection如List<Bean>, contructCollectionType()或contructMapType()构造类型, 然后调用本函数.
+	 * 反序列化复杂Collection如List<Bean>, constructCollectionType()或constructMapType()构造类型, 然后调用本函数.
 	 * 
 	 * @see #createCollectionType(Class, Class...)
 	 */

File: vjkit/src/main/java/com/vip/vjtools/vjkit/number/RandomUtil.java
Patch:
@@ -100,7 +100,7 @@ public static int nextInt(int min, int max) {
 	 * 
 	 * JDK本身不具有控制两端范围的nextInt，因此参考Commons Lang RandomUtils的实现, 不直接复用是因为要传入Random实例
 	 * 
-	 * @see org.apache.commons.lang3.RandomUtils#nextInt(long, long)
+	 * @see org.apache.commons.lang3.RandomUtils#nextInt(int, int)
 	 */
 	public static int nextInt(Random random, int min, int max) {
 		Validate.isTrue(max >= min, "Start value must be smaller or equal to end value.");

File: vjkit/src/main/java/com/vip/vjtools/vjkit/text/MoreStringUtil.java
Patch:
@@ -29,7 +29,7 @@ public class MoreStringUtil {
 	/**
 	 * 高性能的Split，针对char的分隔符号，比JDK String自带的高效.
 	 * 
-	 * copy from Commons Lange 3.5 StringUtils 并做优化
+	 * copy from Commons Lang 3.5 StringUtils 并做优化
 	 * 
 	 * @see #split(String, char, int)
 	 */
@@ -40,7 +40,7 @@ public static List<String> split(@Nullable final String str, final char separato
 	/**
 	 * 高性能的Split，针对char的分隔符号，比JDK String自带的高效.
 	 * 
-	 * copy from Commons Lange 3.5 StringUtils, 做如下优化:
+	 * copy from Commons Lang 3.5 StringUtils, 做如下优化:
 	 * 
 	 * 1. 最后不做数组转换，直接返回List.
 	 * 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/text/StringBuilderHolder.java
Patch:
@@ -36,7 +36,7 @@ protected StringBuilder initialValue() {
 	 * 
 	 * 用于StringBuilder在使用过程中，会调用其他可能也使用StringBuilderHolder的子函数.
 	 * 
-	 * @param initSize StringBulder的初始大小, 建议512,如果容量不足将进行扩容，扩容后的数组将一直保留.
+	 * @param initSize StringBuilder的初始大小, 建议512,如果容量不足将进行扩容，扩容后的数组将一直保留.
 	 */
 	public StringBuilderHolder(int initSize) {
 		this.initSize = initSize;

File: vjkit/src/main/java/com/vip/vjtools/vjkit/text/WildcardMatcher.java
Patch:
@@ -157,7 +157,7 @@ public static int matchOne(String src, String... patterns) {
 
 	/**
 	 * Matches path to at least one pattern. Returns index of matched pattern or <code>-1</code> otherwise.
-	 * @see #matchPath(String, String, char)
+	 * @see #matchPath
 	 */
 	public static int matchPathOne(String platformDependentPath, String... patterns) {
 		for (int i = 0; i < patterns.length; i++) {

File: vjkit/src/main/java/com/vip/vjtools/vjkit/time/ClockUtil.java
Patch:
@@ -141,7 +141,7 @@ public long currentTimeMillis() {
 		}
 
 		/**
-		 * 获取nanotime
+		 * 获取nanoTime
 		 */
 		@Override
 		public long nanoTime() {
@@ -177,7 +177,7 @@ public void decreaseTime(int millis) {
 		}
 
 		/**
-		 * 设置nanotime.
+		 * 设置nanoTime.
 		 */
 		public void setNanoTime(long nanoTime) {
 			this.nanoTme = nanoTime;

File: vjkit/src/test/java/com/vip/vjtools/vjkit/io/FileUtilTest.java
Patch:
@@ -136,15 +136,15 @@ public void testAsInputStream() throws Exception {
 	public void testAsOututStream() throws Exception {
 
 		Path tempPath = FileUtil.createTempFile();
-		try (OutputStream os = FileUtil.asOututStream(tempPath.toString())) {
+		try (OutputStream os = FileUtil.asOutputStream(tempPath.toString())) {
 			assertThat(os).isNotNull();
 		}
 
-		try (OutputStream os = FileUtil.asOututStream(tempPath);) {
+		try (OutputStream os = FileUtil.asOutputStream(tempPath);) {
 			assertThat(os).isNotNull();
 		}
 
-		try (OutputStream os = FileUtil.asOututStream(tempPath.toFile())) {
+		try (OutputStream os = FileUtil.asOutputStream(tempPath.toFile())) {
 			assertThat(os).isNotNull();
 		}
 	}

File: vjkit/src/main/java/com/vip/vjtools/vjkit/time/DateUtil.java
Patch:
@@ -192,7 +192,7 @@ public static Date setMilliseconds(@NotNull final Date date, int amount) {
 
 	///// 获取日期的位置//////
 	/**
-	 * 获得日期是一周的第几天. 已改为中国习惯，1 是Monday，而不是Sundays.
+	 * 获得日期是一周的第几天. 已改为中国习惯，1 是Monday，而不是Sunday.
 	 */
 	public static int getDayOfWeek(@NotNull final Date date) {
 		int result = getWithMondayFirst(date, Calendar.DAY_OF_WEEK);

File: vjmap/src/main/java/com/vip/vjtools/vjmap/VJMap.java
Patch:
@@ -44,7 +44,7 @@ public static void runSurviorAccessor(int age, int minAge, boolean orderByName,
 		List<ClassStats> list = accessor.caculateHistogram(age, minAge);
 
 		ResultPrinter resultPrinter = new ResultPrinter();
-		resultPrinter.printSurvivor(tty, list, orderByName, minSize, minAge);
+		resultPrinter.printSurvivor(tty, list, orderByName, minSize, age, minAge);
 	}
 
 	public static void runOldGenAccessor(boolean orderByName, long minSize) {

File: vjmap/src/main/java/com/vip/vjtools/vjmap/oops/SurvivorAccessor.java
Patch:
@@ -113,7 +113,7 @@ public List<ClassStats> caculateHistogram(int excactAge, int minAge) {
 
 		tty.printf("%n#age    #count  #bytes%n");
 
-		for (int i = 0; i <= maxAge; i++) {
+		for (int i = 1; i <= maxAge; i++) {
 			tty.printf("%3d: %9d %7s%n", i, ageCount[i], FormatUtils.toFloatUnit(ageSize[i]));
 		}
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/limiter/Sampler.java
Patch:
@@ -1,4 +1,4 @@
-package com.vip.vjtools.vjkit.concurrent;
+package com.vip.vjtools.vjkit.concurrent.limiter;
 
 import org.apache.commons.lang3.Validate;
 

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/limiter/TimeIntervalLimiter.java
Patch:
@@ -1,4 +1,4 @@
-package com.vip.vjtools.vjkit.concurrent;
+package com.vip.vjtools.vjkit.concurrent.limiter;
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/AbortPolicyWithReport.java
Patch:
@@ -20,7 +20,6 @@ public class AbortPolicyWithReport extends ThreadPoolExecutor.AbortPolicy {
 
 	private ThreadDumpper dummper = new ThreadDumpper();
 
-
 	public AbortPolicyWithReport(String threadName) {
 		this.threadName = threadName;
 	}

File: vjkit/src/main/java/com/vip/vjtools/vjkit/number/RandomUtil.java
Patch:
@@ -32,8 +32,9 @@ public static Random threadLocalRandom() {
 		return ThreadLocalRandom.current();
 	}
 
+
 	/**
-	 * 使用性能更好的SHA1PRNG, Tomcat的sessionId生成也用此算法.
+	 * SecureRandom使用性能更好的SHA1PRNG, Tomcat的sessionId生成也用此算法.
 	 * 
 	 * 但JDK7中，需要在启动参数加入 -Djava.security=file:/dev/./urandom （中间那个点很重要）
 	 * 

File: vjkit/src/test/java/com/vip/vjtools/vjkit/concurrent/limiter/RateLimiterUtilTest.java
Patch:
@@ -1,11 +1,12 @@
-package com.vip.vjtools.vjkit.concurrent;
+package com.vip.vjtools.vjkit.concurrent.limiter;
 
 import java.lang.reflect.Field;
 
 import org.junit.Assert;
 import org.junit.Test;
 
 import com.google.common.util.concurrent.RateLimiter;
+import com.vip.vjtools.vjkit.concurrent.limiter.RateLimiterUtil;
 
 public class RateLimiterUtilTest {
 	@Test

File: vjkit/src/test/java/com/vip/vjtools/vjkit/concurrent/type/BasicFutureTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.vip.vjtools.vjkit.concurrent;
+package com.vip.vjtools.vjkit.concurrent.type;
 
 import static org.assertj.core.api.Assertions.*;
 

File: vjkit/src/test/java/com/vip/vjtools/vjkit/concurrent/type/ThreadLocalContextTest.java
Patch:
@@ -1,10 +1,12 @@
-package com.vip.vjtools.vjkit.concurrent;
+package com.vip.vjtools.vjkit.concurrent.type;
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.CyclicBarrier;
 
 import org.junit.Test;
 
+import com.vip.vjtools.vjkit.concurrent.Concurrents;
+import com.vip.vjtools.vjkit.concurrent.ThreadUtil;
 import com.vip.vjtools.vjkit.concurrent.type.ThreadLocalContext;
 import com.vip.vjtools.vjkit.number.RandomUtil;
 

File: vjtop/src/main/java/com/vip/vjtools/vjtop/Utils.java
Patch:
@@ -21,7 +21,7 @@ public class Utils {
 	private static final long GB_SIZE = MB_SIZE * 1024;
 	private static final long TB_SIZE = GB_SIZE * 1024;
 
-	private static final String[] RED_ANSI = new String[] { "\033[31m\033[01m", "\033[0m" };
+	public static final String[] RED_ANSI = new String[] { "\033[31m\033[01m", "\033[0m" };
 	private static final String[] YELLOW_ANSI = new String[] { "\033[33m\033[01m", "\033[0m" };
 	private static final String[] NORMAL_ANSI = new String[] { "", "" };
 	public static boolean isWindows = System.getProperty("os.name").toLowerCase(Locale.US).contains("windows");

File: vjtop/src/main/java/com/vip/vjtools/vjtop/Utils.java
Patch:
@@ -206,11 +206,11 @@ public static String join(List<String> list, String delim) {
 	/**
 	 * calculates a "load", given on two deltas
 	 */
-	public static double calcLoad(double deltaTime, double deltaUptime) {
-		if (deltaTime <= 0 || deltaUptime == 0) {
+	public static double calcLoad(double deltaCpuTime, long deltaUptime) {
+		if (deltaCpuTime <= 0 || deltaUptime == 0) {
 			return 0.0;
 		}
-		return Math.min(99.99, deltaTime / deltaUptime);
+		return deltaCpuTime * 100d / deltaUptime;
 	}
 
 	/**

File: vjtop/src/main/java/com/vip/vjtools/vjtop/WarningRule.java
Patch:
@@ -30,7 +30,7 @@ public void updateProcessor(int processors) {
 
 	public void updateInterval(int intervalSeconds) {
 		newThread.yellow = 1;
-		newThread.red = intervalSeconds + 1;
+		newThread.red = intervalSeconds * 2;
 
 		ygcTime.yellow = intervalSeconds * 1000 * 5 / 100; // 5% interval
 		ygcTime.red = intervalSeconds * 1000 * 10 / 100; // 10% interval

File: vjmap/src/main/java/com/vip/vjtools/vjmap/VJMap.java
Patch:
@@ -13,7 +13,7 @@
 
 public class VJMap {
 
-	public static final String VERSION = "1.0.2";
+	public static final String VERSION = "1.0.1";
 
 	public static void runHeapVisitor(int pid, boolean orderByName, long minSize) {
 		ObjectHeap heap = VM.getVM().getObjectHeap();
@@ -104,7 +104,7 @@ public static void main(String[] args) {
 			} else if (modeFlag.startsWith("-address")) {
 				printGenAddress();
 			} else if (modeFlag.startsWith("-version")) {
-				System.out.println("vjmap version:"＋VERSION);
+				System.out.println("vjmap version:" + VERSION);
 				return;
 			} else {
 				printHelp();

File: vjtop/src/main/java/com/vip/vjtools/vjtop/VJTop.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class VJTop {
 
-	public static final String VERSION = "1.0.2";
+	public static final String VERSION = "1.0.1";
 
 	public static final int DEFAULT_INTERVAL = 10;
 

File: vjkit/src/test/java/com/vip/vjtools/vjkit/base/PropertiesUtilTest.java
Patch:
@@ -10,7 +10,7 @@ public class PropertiesUtilTest {
 
 	@Test
 	public void loadProperties() {
-		Properties p1 = PropertiesUtil.loadFromFile("classpath://application.properties");
+		Properties p1 = PropertiesUtil.loadFromFile("classpath:application.properties");
 		assertThat(p1.get("springside.min")).isEqualTo("1");
 		assertThat(p1.get("springside.max")).isEqualTo("10");
 
@@ -32,8 +32,6 @@ public void loadProperties() {
 		assertThat(PropertiesUtil.getString(p2, "springside.maxA", "")).isEqualTo("");
 
 		assertThat(PropertiesUtil.getBoolean(p2, "isOpen", false)).isTrue();
-		
-		
 	}
 
 }

File: vjkit/src/main/java/com/vip/vjtools/vjkit/concurrent/threadpool/ThreadPoolBuilder.java
Patch:
@@ -43,7 +43,7 @@ public static FixedThreadPoolBuilder fixedPool() {
 	}
 
 	/**
-	 * @see CacheedThreadPoolBuilder
+	 * @see CachedThreadPoolBuilder
 	 */
 	public static CachedThreadPoolBuilder cachedPool() {
 		return new CachedThreadPoolBuilder();

