File: metrics-jetty12-ee10/src/test/java/io/dropwizard/metrics/jetty12/ee10/InstrumentedEE10HandlerTest.java
Patch:
@@ -223,7 +223,7 @@ public void onError(Throwable throwable) {
                                         }
                                     }
                             );
-                            servletContextRequest.getHttpOutput().run();
+                            servletContextRequest.getHttpOutput().writeCallback();
                         } catch (IOException e) {
                             context.complete();
                             servletContextRequest.getServletChannel().handle();

File: metrics-core/src/main/java/com/codahale/metrics/NoopMetricRegistry.java
Patch:
@@ -432,7 +432,7 @@ public <T> T timeSupplier(Supplier<T> event) {
          */
         @Override
         public void time(Runnable event) {
-            // NOP
+            event.run();
         }
 
         /**

File: metrics-jetty12-ee10/src/test/java/io/dropwizard/metrics/jetty12/ee10/InstrumentedEE10HandlerTest.java
Patch:
@@ -226,20 +226,20 @@ public void onWritePossible() throws IOException {
                                             servletOutputStream.write("some content from the async\n"
                                                     .getBytes(StandardCharsets.UTF_8));
                                             context.complete();
-                                            servletContextRequest.getServletChannel().sendResponseAndComplete();
+                                            servletContextRequest.getServletChannel().handle();
                                         }
 
                                         @Override
                                         public void onError(Throwable throwable) {
                                             context.complete();
-                                            servletContextRequest.getServletChannel().sendResponseAndComplete();
+                                            servletContextRequest.getServletChannel().handle();
                                         }
                                     }
                             );
                             servletContextRequest.getHttpOutput().run();
                         } catch (IOException e) {
                             context.complete();
-                            servletContextRequest.getServletChannel().sendResponseAndComplete();
+                            servletContextRequest.getServletChannel().handle();
                         }
                     });
                     t.start();

File: metrics-jetty12-ee10/src/test/java/io/dropwizard/metrics/jetty12/ee10/InstrumentedEE10HandlerTest.java
Patch:
@@ -118,6 +118,7 @@ public void createsAndRemovesMetricsForTheHandler() throws Exception {
     }
 
     @Test
+    @Ignore("flaky on virtual machines")
     public void responseTimesAreRecordedForBlockingResponses() throws Exception {
 
         final ContentResponse response = client.GET(uri("/blocking"));

File: metrics-jersey2/src/main/java/com/codahale/metrics/jersey2/InstrumentedResourceMethodApplicationListener.java
Patch:
@@ -308,7 +308,7 @@ public void onEvent(RequestEvent event) {
                     ContainerResponse containerResponse = event.getContainerResponse();
                     if (containerResponse == null && event.getException() != null) {
                         metric.mark(500);
-                    } else {
+                    } else if (containerResponse != null) {
                         metric.mark(containerResponse.getStatus());
                     }
                 }

File: metrics-jersey3/src/main/java/com/codahale/metrics/jersey3/InstrumentedResourceMethodApplicationListener.java
Patch:
@@ -309,7 +309,7 @@ public void onEvent(RequestEvent event) {
                     ContainerResponse containerResponse = event.getContainerResponse();
                     if (containerResponse == null && event.getException() != null) {
                         metric.mark(500);
-                    } else {
+                    } else if (containerResponse != null) {
                         metric.mark(containerResponse.getStatus());
                     }
                 }

File: metrics-jersey31/src/main/java/io/dropwizard/metrics/jersey31/InstrumentedResourceMethodApplicationListener.java
Patch:
@@ -308,7 +308,7 @@ public void onEvent(RequestEvent event) {
                     ContainerResponse containerResponse = event.getContainerResponse();
                     if (containerResponse == null && event.getException() != null) {
                         metric.mark(500);
-                    } else {
+                    } else if (containerResponse != null) {
                         metric.mark(containerResponse.getStatus());
                     }
                 }

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/MemoryUsageGaugeSet.java
Patch:
@@ -47,8 +47,8 @@ public Map<String, Metric> getMetrics() {
                 mxBean.getNonHeapMemoryUsage().getInit());
         gauges.put("total.used", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getUsed() +
                 mxBean.getNonHeapMemoryUsage().getUsed());
-        gauges.put("total.max", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getMax() +
-                mxBean.getNonHeapMemoryUsage().getMax());
+        gauges.put("total.max", (Gauge<Long>) () -> mxBean.getNonHeapMemoryUsage().getMax() == -1 ?
+                -1 : mxBean.getHeapMemoryUsage().getMax() + mxBean.getNonHeapMemoryUsage().getMax());
         gauges.put("total.committed", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getCommitted() +
                 mxBean.getNonHeapMemoryUsage().getCommitted());
 
@@ -72,7 +72,7 @@ protected Ratio getRatio() {
             @Override
             protected Ratio getRatio() {
                 final MemoryUsage usage = mxBean.getNonHeapMemoryUsage();
-                return Ratio.of(usage.getUsed(), usage.getMax());
+                return Ratio.of(usage.getUsed(), usage.getMax() == -1 ? usage.getCommitted() : usage.getMax());
             }
         });
 

File: metrics-caffeine3/src/test/java/io/dropwizard/metrics/caffeine3/MetricsStatsCounterTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.Test;
 
 /**
- * An example of exporting stats to Dropwizard Metrics (http://metrics.dropwizard.io).
+ * An example of exporting stats to  <a href="https://metrics.dropwizard.io">Dropwizard Metrics</a>.
  *
  * @author ben.manes@gmail.com (Ben Manes)
  * @author John Karp
@@ -52,7 +52,7 @@ public void basicUsage() {
 
     // Perform application work
     for (int i = 0; i < 4; i++) {
-      cache.get(1);
+      Integer unused = cache.get(1);
     }
 
     assertEquals(3L, cache.stats().hitCount());

File: metrics-core/src/main/java/com/codahale/metrics/NoopMetricRegistry.java
Patch:
@@ -116,9 +116,9 @@ public Timer timer(String name, MetricSupplier<Timer> supplier) {
      * {@inheritDoc}
      */
     @Override
-    @SuppressWarnings("rawtypes")
-    public Gauge gauge(String name, MetricSupplier<Gauge> supplier) {
-        return NoopGauge.INSTANCE;
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    public <T extends Gauge> T gauge(String name, MetricSupplier<T> supplier) {
+        return (T) NoopGauge.INSTANCE;
     }
 
     /**

File: metrics-servlets/src/main/java/com/codahale/metrics/servlets/CpuProfileServlet.java
Patch:
@@ -39,6 +39,7 @@ protected void doGet(HttpServletRequest req,
         if (req.getParameter("frequency") != null) {
             try {
                 frequency = Integer.parseInt(req.getParameter("frequency"));
+                frequency = Math.min(Math.max(frequency, 1), 1000);
             } catch (NumberFormatException e) {
                 frequency = 100;
             }

File: metrics-core/src/main/java/com/codahale/metrics/CachedGauge.java
Patch:
@@ -34,7 +34,7 @@ protected CachedGauge(long timeout, TimeUnit timeoutUnit) {
      */
     protected CachedGauge(Clock clock, long timeout, TimeUnit timeoutUnit) {
         this.clock = clock;
-        this.reloadAt = new AtomicLong(0);
+        this.reloadAt = new AtomicLong(clock.getTick());
         this.timeoutNS = timeoutUnit.toNanos(timeout);
         this.value = new AtomicReference<>();
     }

File: metrics-core/src/test/java/com/codahale/metrics/CsvReporterTest.java
Patch:
@@ -205,7 +205,7 @@ public void itFormatsWithCustomSeparator() throws Exception {
 
         assertThat(fileContents("test.meter.csv"))
                 .isEqualTo(csv(
-                        "t,count,mean_rate,m1_rate,m5_rate,m15_rate,rate_unit",
+                        "t|count|mean_rate|m1_rate|m5_rate|m15_rate|rate_unit",
                         "19910191|1|2.000000|3.000000|4.000000|5.000000|events/second"
                 ));
     }

File: metrics-json/src/main/java/com/codahale/metrics/json/HealthCheckModule.java
Patch:
@@ -50,6 +50,7 @@ public void serialize(HealthCheck.Result result,
         private void serializeThrowable(JsonGenerator json, Throwable error, String name) throws IOException {
             if (error != null) {
                 json.writeObjectFieldStart(name);
+                json.writeStringField("type", error.getClass().getTypeName());
                 json.writeStringField("message", error.getMessage());
                 json.writeArrayFieldStart("stack");
                 for (StackTraceElement element : error.getStackTrace()) {

File: metrics-graphite/src/test/java/com/codahale/metrics/graphite/PickledGraphiteTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.Socket;
@@ -163,7 +164,7 @@ private String unpickleOutput() throws Exception {
             bindings.put("payload", payload.substring(nextIndex));
             unpickleScript.eval(bindings);
             result.addAll(result.size(), (PyList) bindings.get("metrics"));
-            nextIndex += (Integer) bindings.get("batchLength");
+            nextIndex += ((BigInteger) bindings.get("batchLength")).intValue();
         }
 
         for (Object aResult : result) {

File: metrics-collectd/src/test/java/com/codahale/metrics/collectd/Receiver.java
Patch:
@@ -45,7 +45,7 @@ public void dispatch(Notification notification) {
     }
 
     public ValueList next() throws InterruptedException {
-        return queue.poll(1, TimeUnit.SECONDS);
+        return queue.poll(2, TimeUnit.SECONDS);
     }
 
     @Override

File: metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java
Patch:
@@ -213,7 +213,8 @@ public void onComplete(AsyncEvent event) throws IOException {
                 final HttpServletRequest request = (HttpServletRequest) state.getRequest();
                 final HttpServletResponse response = (HttpServletResponse) state.getResponse();
                 updateResponses(request, response, startTime, true);
-                if (state.getHttpChannelState().getState() != DISPATCHED_HACK) {
+                if (state.getHttpChannelState().getState() != DISPATCHED_HACK &&
+                        state.getHttpChannelState().isSuspended()) {
                     activeSuspended.dec();
                 }
             }

File: metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java
Patch:
@@ -213,7 +213,8 @@ public void onComplete(AsyncEvent event) throws IOException {
                 final HttpServletRequest request = (HttpServletRequest) state.getRequest();
                 final HttpServletResponse response = (HttpServletResponse) state.getResponse();
                 updateResponses(request, response, startTime, true);
-                if (state.getHttpChannelState().getState() != DISPATCHED_HACK) {
+                if (state.getHttpChannelState().getState() != DISPATCHED_HACK &&
+                        state.getHttpChannelState().isSuspended()) {
                     activeSuspended.dec();
                 }
             }

File: metrics-jmx/src/test/java/com/codahale/metrics/jmx/JmxReporterTest.java
Patch:
@@ -148,10 +148,10 @@ public void registersMBeansForMetricObjectsUsingProvidedObjectNameFactory() thro
 
     @Test
     public void registersMBeansForGauges() throws Exception {
-        final AttributeList attributes = getAttributes("gauges", "gauge", "Value");
+        final AttributeList attributes = getAttributes("gauges", "gauge", "Value", "Number");
 
         assertThat(values(attributes))
-                .contains(entry("Value", 1));
+                .contains(entry("Value", 1), entry("Number", 1));
     }
 
     @Test
@@ -258,7 +258,7 @@ public void cleansUpAfterItselfWhenStopped() throws Exception {
         reporter.stop();
 
         try {
-            getAttributes("gauges", "gauge", "Value");
+            getAttributes("gauges", "gauge", "Value", "Number");
             failBecauseExceptionWasNotThrown(InstanceNotFoundException.class);
         } catch (InstanceNotFoundException e) {
 

File: metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java
Patch:
@@ -99,7 +99,7 @@ public void update(long value, long timestamp) {
             final double priority = itemWeight / ThreadLocalRandom.current().nextDouble();
 
             final long newCount = count.incrementAndGet();
-            if (newCount <= size) {
+            if (newCount <= size || values.isEmpty()) {
                 values.put(priority, sample);
             } else {
                 Double first = values.firstKey();

File: metrics-servlets/src/main/java/com/codahale/metrics/servlets/CpuProfileServlet.java
Patch:
@@ -2,14 +2,14 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.time.Duration;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.joda.time.Duration;
 import com.papertrail.profiler.CpuProfile;
 
 /**
@@ -62,7 +62,7 @@ protected void doGet(HttpServletRequest req,
     protected void doProfile(OutputStream out, int duration, int frequency, Thread.State state) throws IOException {
         if (lock.tryLock()) {
             try {
-                CpuProfile profile = CpuProfile.record(Duration.standardSeconds(duration),
+                CpuProfile profile = CpuProfile.record(Duration.ofSeconds(duration),
                         frequency, state);
                 if (profile == null) {
                     throw new RuntimeException("could not create CpuProfile");

File: metrics-graphite/src/test/java/com/codahale/metrics/graphite/GraphiteRabbitMQTest.java
Patch:
@@ -121,7 +121,7 @@ public void shouldFailWhenGraphiteHostUnavailable() {
             unavailableGraphite.connect();
             failBecauseExceptionWasNotThrown(UnknownHostException.class);
         } catch (Exception e) {
-            assertThat(e.getMessage()).startsWith("some-unknown-host");
+            assertThat(e.getMessage()).contains("some-unknown-host");
         }
     }
 }

File: metrics-servlets/src/test/java/com/codahale/metrics/servlets/MetricsServletContextListenerTest.java
Patch:
@@ -51,7 +51,9 @@ protected String getAllowedOrigin() {
 
     @Before
     public void setUp() {
-        when(clock.getTick()).thenReturn(100L, 200L, 300L, 400L);
+        // provide ticks for the setup (calls getTick 6 times). The serialization in the tests themselves
+        // will call getTick again several times and always get the same value (the last specified here)
+        when(clock.getTick()).thenReturn(100L, 100L, 200L, 300L, 300L, 400L);
 
         registry.register("g1", (Gauge<Long>) () -> 100L);
         registry.counter("c").inc();

File: metrics-servlets/src/test/java/com/codahale/metrics/servlets/MetricsServletTest.java
Patch:
@@ -39,7 +39,9 @@ protected void setUp(ServletTester tester) {
 
     @Before
     public void setUp() {
-        when(clock.getTick()).thenReturn(100L, 200L, 300L, 400L);
+        // provide ticks for the setup (calls getTick 6 times). The serialization in the tests themselves
+        // will call getTick again several times and always get the same value (the last specified here)
+        when(clock.getTick()).thenReturn(100L, 100L, 200L, 300L, 300L, 400L);
 
         registry.register("g1", (Gauge<Long>) () -> 100L);
         registry.counter("c").inc();

File: metrics-healthchecks/src/test/java/com/codahale/metrics/health/HealthCheckTest.java
Patch:
@@ -241,6 +241,8 @@ public void canHaveUserSuppliedClockForTimestamp() {
 
         assertThat(result.isHealthy()).isTrue();
 
+        assertThat(result.getTime()).isEqualTo(clock.getTime());
+
         assertThat(result.getTimestamp())
                 .isEqualTo(DATE_TIME_FORMATTER.format(dateTime));
     }

File: metrics-jcstress/src/main/java/com/codahale/metrics/SlidingTimeWindowArrayReservoirTrimReadTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.openjdk.jcstress.annotations.JCStressTest;
 import org.openjdk.jcstress.annotations.Outcome;
 import org.openjdk.jcstress.annotations.State;
-import org.openjdk.jcstress.infra.results.StringResult1;
+import org.openjdk.jcstress.infra.results.L_Result;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
@@ -53,7 +53,7 @@ public long getTick() {
     }
 
     @Actor
-    public void actor1(StringResult1 r) {
+    public void actor1(L_Result r) {
         Snapshot snapshot = reservoir.getSnapshot();
         String stringValues = Arrays.toString(snapshot.getValues());
         r.r1 = stringValues;

File: metrics-jcstress/src/main/java/com/codahale/metrics/SlidingTimeWindowArrayReservoirWriteReadAllocate.java
Patch:
@@ -6,7 +6,7 @@
 import org.openjdk.jcstress.annotations.JCStressTest;
 import org.openjdk.jcstress.annotations.Outcome;
 import org.openjdk.jcstress.annotations.State;
-import org.openjdk.jcstress.infra.results.StringResult1;
+import org.openjdk.jcstress.infra.results.L_Result;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
@@ -36,7 +36,7 @@ public void actor2() {
     }
 
     @Arbiter
-    public void arbiter(StringResult1 r) {
+    public void arbiter(L_Result r) {
         Snapshot snapshot = reservoir.getSnapshot();
         long[] values = snapshot.getValues();
         String stringValues = Arrays.toString(Arrays.copyOfRange(values, values.length - 3, values.length));

File: metrics-jcstress/src/main/java/com/codahale/metrics/SlidingTimeWindowArrayReservoirWriteReadTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.openjdk.jcstress.annotations.JCStressTest;
 import org.openjdk.jcstress.annotations.Outcome;
 import org.openjdk.jcstress.annotations.State;
-import org.openjdk.jcstress.infra.results.StringResult1;
+import org.openjdk.jcstress.infra.results.L_Result;
 
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
@@ -36,7 +36,7 @@ public void actor2() {
     }
 
     @Actor
-    public void actor3(StringResult1 r) {
+    public void actor3(L_Result r) {
         Snapshot snapshot = reservoir.getSnapshot();
         String stringValues = Arrays.toString(snapshot.getValues());
         r.r1 = stringValues;

File: metrics-core/src/main/java/com/codahale/metrics/Reporter.java
Patch:
@@ -1,8 +1,10 @@
 package com.codahale.metrics;
 
+import java.io.Closeable;
+
 /*
  * A tag interface to indicate that a class is a Reporter.
  */
-public interface Reporter {
+public interface Reporter extends Closeable {
 
 }

File: metrics-collectd/src/main/java/com/codahale/metrics/collectd/CollectdReporter.java
Patch:
@@ -153,6 +153,7 @@ public void start(long period, TimeUnit unit) {
     }
 
     @Override
+    @SuppressWarnings("rawtypes")
     public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,
             SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers) {
         MetaData.Builder metaData = new MetaData.Builder(hostName, clock.getTime() / 1000, period)
@@ -205,6 +206,7 @@ private void write(MetaData metaData, Number... values) {
         }
     }
 
+    @SuppressWarnings("rawtypes")
     private void serializeGauge(MetaData.Builder metaData, Gauge metric) {
         if (metric.getValue() instanceof Number) {
             write(metaData.typeInstance("value").get(), (Number) metric.getValue());

File: metrics-collectd/src/test/java/com/codahale/metrics/collectd/CollectdReporterTest.java
Patch:
@@ -177,7 +177,7 @@ public void reportsHistograms() throws Exception {
                 map());
 
         for (int i = 1; i <= 11; i++) {
-            assertThat(receiver.next().getValues()).containsExactly(new Double(i));
+            assertThat(receiver.next().getValues()).containsExactly((double) i);
         }
     }
 

File: metrics-collectd/src/test/java/com/codahale/metrics/collectd/PacketWriterTest.java
Patch:
@@ -147,7 +147,7 @@ private void verifyPacket(byte[] packetArr) {
         assertThat(hostLength).isEqualTo((short) 28);
         byte[] host = new byte[hostLength - 5];
         packet.get(host, 0, host.length);
-        assertThat(new String(host)).isEqualTo("nw-1.alpine.example.com");
+        assertThat(new String(host, UTF_8)).isEqualTo("nw-1.alpine.example.com");
         assertThat(packet.get()).isEqualTo((byte) 0);
 
         short timestampType = packet.getShort();
@@ -162,7 +162,7 @@ private void verifyPacket(byte[] packetArr) {
         assertThat(typeLength).isEqualTo((short) 10);
         byte[] type = new byte[typeLength - 5];
         packet.get(type, 0, type.length);
-        assertThat(new String(type)).isEqualTo("gauge");
+        assertThat(new String(type, UTF_8)).isEqualTo("gauge");
         assertThat(packet.get()).isEqualTo((byte) 0);
 
         short typeInstanceType = packet.getShort();
@@ -171,7 +171,7 @@ private void verifyPacket(byte[] packetArr) {
         assertThat(typeInstanceLength).isEqualTo((short) 10);
         byte[] typeInstance = new byte[typeInstanceLength - 5];
         packet.get(typeInstance, 0, typeInstance.length);
-        assertThat(new String(typeInstance)).isEqualTo("value");
+        assertThat(new String(typeInstance, UTF_8)).isEqualTo("value");
         assertThat(packet.get()).isEqualTo((byte) 0);
 
         short periodType = packet.getShort();

File: metrics-core/src/test/java/com/codahale/metrics/ConsoleReporterTest.java
Patch:
@@ -20,7 +20,7 @@
 
 public class ConsoleReporterTest {
     private final Locale locale = Locale.US;
-    private final TimeZone timeZone = TimeZone.getTimeZone("PST");
+    private final TimeZone timeZone = TimeZone.getTimeZone("America/Los_Angeles");
 
     private final MetricRegistry registry = mock(MetricRegistry.class);
     private final Clock clock = mock(Clock.class);

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/PickledGraphite.java
Patch:
@@ -16,6 +16,7 @@
 import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -57,7 +58,7 @@ static class MetricTuple {
 
     private int batchSize;
     // graphite expects a python-pickled list of nested tuples.
-    private List<MetricTuple> metrics = new LinkedList<>();
+    private List<MetricTuple> metrics = new ArrayList<>();
 
     private final String hostname;
     private final int port;

File: metrics-httpclient/src/test/java/com/codahale/metrics/httpclient/InstrumentedHttpClientConnectionManagerTest.java
Patch:
@@ -17,7 +17,6 @@ public void shouldRemoveGauges() {
         Assert.assertEquals(0, metricRegistry.getGauges().size());
 
         // should be able to create another one with the same name ("")
-        try (InstrumentedHttpClientConnectionManager unused = new InstrumentedHttpClientConnectionManager(metricRegistry)) {
-        }
+        new InstrumentedHttpClientConnectionManager(metricRegistry).close();
     }
 }

File: metrics-jdbi3/src/test/java/com/codahale/metrics/jdbi3/strategies/SmartNameStrategyTest.java
Patch:
@@ -18,6 +18,7 @@ public class SmartNameStrategyTest extends AbstractStrategyTest {
     private InstrumentedTimingCollector collector;
 
     @Before
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         collector = new InstrumentedTimingCollector(registry, smartNameStrategy);

File: metrics-core/src/test/java/com/codahale/metrics/ClockTest.java
Patch:
@@ -17,7 +17,7 @@ public void userTimeClock() {
 
         assertThat((double) clock.getTick())
                 .isEqualTo(System.nanoTime(),
-                        offset(100000.0));
+                        offset(1000000.0));
     }
 
     @Test

File: metrics-core/src/test/java/com/codahale/metrics/InstrumentedThreadFactoryTest.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -25,7 +26,6 @@ public class InstrumentedThreadFactoryTest {
      * TODO: Try not using real threads in a unit test?
      */
     @Test
-    @SuppressWarnings("unused")
     public void reportsThreadInformation() throws Exception {
         final CountDownLatch allTasksAreCreated = new CountDownLatch(THREAD_COUNT);
         final CountDownLatch allTasksAreCounted = new CountDownLatch(1);
@@ -39,7 +39,7 @@ public void reportsThreadInformation() throws Exception {
 
         // generate demand so the executor service creates the threads through our factory.
         for (int i = 0; i < THREAD_COUNT + 1; i++) {
-            executor.submit(() -> {
+            Future<?> t = executor.submit(() -> {
                 allTasksAreCreated.countDown();
 
                 // This asserts that all threads have wait wail the testing thread notifies all.
@@ -52,6 +52,7 @@ public void reportsThreadInformation() throws Exception {
                     Thread.currentThread().interrupt();
                 }
             });
+            assertThat(t).isNotNull();
         }
 
         allTasksAreCreated.await(1, TimeUnit.SECONDS);

File: metrics-graphite/src/test/java/com/codahale/metrics/graphite/PickledGraphiteTest.java
Patch:
@@ -72,7 +72,7 @@ public void setUp() throws Exception {
         ScriptEngine engine = new ScriptEngineManager().getEngineByName("python");
         Compilable compilable = (Compilable) engine;
         try (InputStream is = PickledGraphiteTest.class.getResource("/upickle.py").openStream()) {
-            unpickleScript = compilable.compile(new InputStreamReader(is));
+            unpickleScript = compilable.compile(new InputStreamReader(is, UTF_8));
         }
     }
 

File: metrics-jersey2/src/test/java/com/codahale/metrics/jersey2/exception/mapper/TestExceptionMapper.java
Patch:
@@ -8,6 +8,7 @@
 
 @Provider
 public class TestExceptionMapper implements ExceptionMapper<TestException> {
+    @Override
     public Response toResponse(TestException exception) {
         return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
     }

File: metrics-jersey2/src/test/java/com/codahale/metrics/jersey2/SingletonMetricsResponseMeteredPerClassJerseyTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import static com.codahale.metrics.MetricRegistry.name;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 /**
  * Tests registering {@link InstrumentedResourceMethodApplicationListener} as a singleton
@@ -111,6 +112,7 @@ public void responseMeteredUnmappedExceptionPerClassMethodsAreMetered() {
             target("responseMeteredRuntimeExceptionPerClass")
                     .request()
                     .get();
+            fail("expected RuntimeException");
         } catch (Exception e) {
             assertThat(e.getCause()).isInstanceOf(RuntimeException.class);
         }

File: metrics-core/src/test/java/com/codahale/metrics/HistogramTest.java
Patch:
@@ -3,7 +3,9 @@
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class HistogramTest {
     private final Reservoir reservoir = mock(Reservoir.class);

File: metrics-core/src/test/java/com/codahale/metrics/InstrumentedExecutorServiceTest.java
Patch:
@@ -40,7 +40,7 @@ public void reportsTasksInformation() throws Exception {
             assertThat(completed.getCount()).isEqualTo(0);
             assertThat(duration.getCount()).isEqualTo(0);
             assertThat(idle.getCount()).isEqualTo(1);
-    });
+        });
 
         theFuture.get();
 

File: metrics-core/src/test/java/com/codahale/metrics/Slf4jReporterTest.java
Patch:
@@ -8,7 +8,9 @@
 import java.util.TreeMap;
 import java.util.concurrent.TimeUnit;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class Slf4jReporterTest {
     private final Logger logger = mock(Logger.class);

File: metrics-healthchecks/src/test/java/com/codahale/metrics/health/HealthCheckRegistryTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
         when(hc1.execute()).thenReturn(r1);
         when(hc2.execute()).thenReturn(r2);
         when(executorService.scheduleAtFixedRate(any(AsyncHealthCheckDecorator.class), eq(0L), eq(10L), eq(TimeUnit.SECONDS)))
-                .thenReturn(af);
+            .thenReturn(af);
 
         registry.register("hc1", hc1);
         registry.register("hc2", hc2);
@@ -165,7 +165,7 @@ public void runsRegisteredHealthChecksInParallelWithNonMatchingFilter() throws E
     public void runsRegisteredHealthChecksInParallelWithFilter() throws Exception {
         final ExecutorService executor = Executors.newFixedThreadPool(10);
         final Map<String, HealthCheck.Result> results = registry.runHealthChecks(executor,
-                (name, healthCheck) -> "hc2".equals(name));
+            (name, healthCheck) -> "hc2".equals(name));
 
         executor.shutdown();
         executor.awaitTermination(1, TimeUnit.SECONDS);
@@ -201,7 +201,7 @@ public void doesNotRunNonexistentHealthChecks() throws Exception {
             failBecauseExceptionWasNotThrown(NoSuchElementException.class);
         } catch (NoSuchElementException e) {
             assertThat(e.getMessage())
-                    .isEqualTo("No health check named what exists");
+                .isEqualTo("No health check named what exists");
         }
 
     }

File: metrics-httpasyncclient/src/test/java/com/codahale/metrics/httpasyncclient/HttpClientTestBase.java
Patch:
@@ -18,7 +18,7 @@ public abstract class HttpClientTestBase {
     /**
      * {@link HttpRequestHandler} that responds with a {@code 200 OK}.
      */
-    public static HttpRequestHandler STATUS_OK = (request, response, context) -> response.setStatusCode(200);
+    public static final HttpRequestHandler STATUS_OK = (request, response, context) -> response.setStatusCode(200);
 
     private HttpServer server;
 

File: metrics-httpclient/src/test/java/com/codahale/metrics/httpclient/HttpClientMetricNameStrategiesTest.java
Patch:
@@ -11,7 +11,9 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 
-import static com.codahale.metrics.httpclient.HttpClientMetricNameStrategies.*;
+import static com.codahale.metrics.httpclient.HttpClientMetricNameStrategies.HOST_AND_METHOD;
+import static com.codahale.metrics.httpclient.HttpClientMetricNameStrategies.METHOD_ONLY;
+import static com.codahale.metrics.httpclient.HttpClientMetricNameStrategies.QUERYLESS_URL_AND_METHOD;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 

File: metrics-jmx/src/test/java/com/codahale/metrics/jmx/DefaultObjectNameFactoryTest.java
Patch:
@@ -1,11 +1,10 @@
 package com.codahale.metrics.jmx;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.Test;
 
 import javax.management.ObjectName;
 
-import com.codahale.metrics.jmx.DefaultObjectNameFactory;
-import org.junit.Test;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class DefaultObjectNameFactoryTest {
 

File: metrics-log4j2/src/test/java/com/codahale/metrics/log4j2/InstrumentedAppenderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
-import com.codahale.metrics.log4j2.InstrumentedAppender;
 
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;

File: metrics-core/src/main/java/com/codahale/metrics/CachedGauge.java
Patch:
@@ -54,7 +54,7 @@ public T getValue() {
     }
 
     private boolean shouldLoad() {
-        for (; ; ) {
+        for ( ;; ) {
             final long time = clock.getTick();
             final long current = reloadAt.get();
             if (current > time) {

File: metrics-core/src/main/java/com/codahale/metrics/InstrumentedThreadFactory.java
Patch:
@@ -10,7 +10,7 @@
  * "your-thread-delegate.created", "your-thread-delegate.running", etc.
  */
 public class InstrumentedThreadFactory implements ThreadFactory {
-    private static final AtomicLong nameCounter = new AtomicLong();
+    private static final AtomicLong NAME_COUNTER = new AtomicLong();
 
     private final ThreadFactory delegate;
     private final Meter created;
@@ -24,7 +24,7 @@ public class InstrumentedThreadFactory implements ThreadFactory {
      * @param registry {@link MetricRegistry} that will contain the metrics.
      */
     public InstrumentedThreadFactory(ThreadFactory delegate, MetricRegistry registry) {
-        this(delegate, registry, "instrumented-thread-delegate-" + nameCounter.incrementAndGet());
+        this(delegate, registry, "instrumented-thread-delegate-" + NAME_COUNTER.incrementAndGet());
     }
 
     /**

File: metrics-core/src/main/java/com/codahale/metrics/Meter.java
Patch:
@@ -99,7 +99,7 @@ public double getMeanRate() {
         if (getCount() == 0) {
             return 0.0;
         } else {
-            final double elapsed = (clock.getTick() - startTime);
+            final double elapsed = clock.getTick() - startTime;
             return getCount() / elapsed * TimeUnit.SECONDS.toNanos(1);
         }
     }

File: metrics-core/src/main/java/com/codahale/metrics/Slf4jReporter.java
Patch:
@@ -26,7 +26,7 @@ public static Builder forRegistry(MetricRegistry registry) {
         return new Builder(registry);
     }
 
-    public enum LoggingLevel {TRACE, DEBUG, INFO, WARN, ERROR}
+    public enum LoggingLevel { TRACE, DEBUG, INFO, WARN, ERROR }
 
     /**
      * A builder for {@link Slf4jReporter} instances. Defaults to logging to {@code metrics}, not

File: metrics-core/src/main/java/com/codahale/metrics/SlidingTimeWindowArrayReservoir.java
Patch:
@@ -76,7 +76,7 @@ public Snapshot getSnapshot() {
     }
 
     private long getTick() {
-        for (; ; ) {
+        for ( ;; ) {
             final long oldTick = lastTick.get();
             final long tick = (clock.getTick() - startTick) * COLLISION_BUFFER;
             // ensure the tick is strictly incrementing even if there are duplicate ticks

File: metrics-core/src/main/java/com/codahale/metrics/SlidingTimeWindowReservoir.java
Patch:
@@ -68,7 +68,7 @@ public Snapshot getSnapshot() {
     }
 
     private long getTick() {
-        for (; ; ) {
+        for ( ;; ) {
             final long oldTick = lastTick.get();
             final long tick = clock.getTick() * COLLISION_BUFFER;
             // ensure the tick is strictly incrementing even if there are duplicate ticks

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheck.java
Patch:
@@ -177,7 +177,7 @@ public boolean equals(Object o) {
 
         @Override
         public int hashCode() {
-            int result = (healthy ? 1 : 0);
+            int result = healthy ? 1 : 0;
             result = PRIME * result + (message != null ? message.hashCode() : 0);
             result = PRIME * result + (error != null ? error.hashCode() : 0);
             result = PRIME * result + (timestamp != null ? timestamp.hashCode() : 0);

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheckRegistry.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.SortedSet;
 import java.util.TreeMap;
 import java.util.TreeSet;
-import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CopyOnWriteArrayList;

File: metrics-log4j2/src/main/java/com/codahale/metrics/log4j2/InstrumentedAppender.java
Patch:
@@ -24,8 +24,6 @@
 @Plugin(name = "MetricsAppender", category = "Core", elementType = "appender")
 public class InstrumentedAppender extends AbstractAppender {
 
-    private static final long serialVersionUID = 1L;
-
     private transient final MetricRegistry registry;
 
     private transient Meter all;

File: metrics-core/src/main/java/com/codahale/metrics/InstrumentedScheduledExecutorService.java
Patch:
@@ -93,7 +93,7 @@ public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDela
     @Override
     public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit) {
         scheduledRepetitively.mark();
-        return delegate.scheduleAtFixedRate(new InstrumentedRunnable(command), initialDelay, delay, unit);
+        return delegate.scheduleWithFixedDelay(new InstrumentedRunnable(command), initialDelay, delay, unit);
     }
 
     /**

File: metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
Patch:
@@ -121,8 +121,7 @@ protected ScheduledReporter(MetricRegistry registry,
                                 TimeUnit durationUnit,
                                 ScheduledExecutorService executor,
                                 boolean shutdownExecutorOnStop) {
-       this(registry, name, filter, rateUnit, durationUnit, executor, shutdownExecutorOnStop,
-               Collections.<MetricAttribute>emptySet());
+       this(registry, name, filter, rateUnit, durationUnit, executor, shutdownExecutorOnStop, Collections.emptySet());
     }
 
     protected ScheduledReporter(MetricRegistry registry,
@@ -142,7 +141,7 @@ protected ScheduledReporter(MetricRegistry registry,
         this.durationFactor = durationUnit.toNanos(1);
         this.durationUnit = durationUnit.toString().toLowerCase(Locale.US);
         this.disabledMetricAttributes = disabledMetricAttributes != null ? disabledMetricAttributes :
-                Collections.<MetricAttribute>emptySet();
+                Collections.emptySet();
     }
 
     /**

File: metrics-graphite/src/test/java/com/codahale/metrics/graphite/GraphiteReporterTest.java
Patch:
@@ -27,7 +27,7 @@ public class GraphiteReporterTest {
                                                               .convertRatesTo(TimeUnit.SECONDS)
                                                               .convertDurationsTo(TimeUnit.MILLISECONDS)
                                                               .filter(MetricFilter.ALL)
-                                                              .disabledMetricAttributes(Collections.<MetricAttribute>emptySet())
+                                                              .disabledMetricAttributes(Collections.emptySet())
                                                               .build(graphite);
 
     @Before

File: metrics-healthchecks/src/test/java/com/codahale/metrics/health/jvm/ThreadDeadlockHealthCheckTest.java
Patch:
@@ -18,7 +18,7 @@ public void isHealthyIfNoThreadsAreDeadlocked() throws Exception {
         final ThreadDeadlockDetector detector = mock(ThreadDeadlockDetector.class);
         final ThreadDeadlockHealthCheck healthCheck = new ThreadDeadlockHealthCheck(detector);
 
-        when(detector.getDeadlockedThreads()).thenReturn(Collections.<String>emptySet());
+        when(detector.getDeadlockedThreads()).thenReturn(Collections.emptySet());
 
         assertThat(healthCheck.execute().isHealthy())
                 .isTrue();

File: metrics-json/src/main/java/com/codahale/metrics/json/MetricsModule.java
Patch:
@@ -238,7 +238,7 @@ public Version version() {
 
     @Override
     public void setupModule(SetupContext context) {
-        context.addSerializers(new SimpleSerializers(Arrays.<JsonSerializer<?>>asList(
+        context.addSerializers(new SimpleSerializers(Arrays.asList(
                 new GaugeSerializer(),
                 new CounterSerializer(),
                 new HistogramSerializer(showSamples),

File: metrics-jmx/src/main/java/com/codahale/metrics/jmx/JmxReporter.java
Patch:
@@ -691,11 +691,11 @@ private static class MetricTimeUnits {
         }
 
         public TimeUnit durationFor(String name) {
-            return durationOverrides.containsKey(name) ? durationOverrides.get(name) : defaultDuration;
+            return durationOverrides.getOrDefault(name, defaultDuration);
         }
 
         public TimeUnit rateFor(String name) {
-            return rateOverrides.containsKey(name) ? rateOverrides.get(name) : defaultRate;
+            return rateOverrides.getOrDefault(name, defaultRate);
         }
     }
 

File: metrics-core/src/main/java/com/codahale/metrics/ChunkedAssociativeLongArray.java
Patch:
@@ -21,7 +21,7 @@ class ChunkedAssociativeLongArray {
      * So if you have constant or slowly changing load ChunkedAssociativeLongArray will never
      * throw away old chunks or allocate new ones which makes this data structure almost garbage free.
      */
-    private final ArrayDeque<SoftReference<Chunk>> chunksCache = new ArrayDeque<SoftReference<Chunk>>();
+    private final ArrayDeque<SoftReference<Chunk>> chunksCache = new ArrayDeque<>();
 
     /*
      * Why LinkedList if we are creating fast data structure with low GC overhead?
@@ -33,7 +33,7 @@ class ChunkedAssociativeLongArray {
      *
      * LinkedList gives us O(1) complexity for all this operations and that is not the case with ArrayList.
      */
-    private final LinkedList<Chunk> chunks = new LinkedList<Chunk>();
+    private final LinkedList<Chunk> chunks = new LinkedList<>();
 
     ChunkedAssociativeLongArray() {
         this(DEFAULT_CHUNK_SIZE);
@@ -61,7 +61,7 @@ private Chunk allocateChunk() {
 
     private void freeChunk(Chunk chunk) {
         if (chunksCache.size() < MAX_CACHE_SIZE) {
-            chunksCache.add(new SoftReference<Chunk>(chunk));
+            chunksCache.add(new SoftReference<>(chunk));
         }
     }
 

File: metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java
Patch:
@@ -64,7 +64,7 @@ public ExponentiallyDecayingReservoir(int size, double alpha) {
      * @param clock the clock used to timestamp samples and track rescaling
      */
     public ExponentiallyDecayingReservoir(int size, double alpha, Clock clock) {
-        this.values = new ConcurrentSkipListMap<Double, WeightedSample>();
+        this.values = new ConcurrentSkipListMap<>();
         this.lock = new ReentrantReadWriteLock();
         this.alpha = alpha;
         this.size = size;
@@ -170,7 +170,7 @@ private void rescale(long now, long next) {
                 if (Double.compare(scalingFactor, 0) == 0) {
                     values.clear();
                 } else {
-                    final ArrayList<Double> keys = new ArrayList<Double>(values.keySet());
+                    final ArrayList<Double> keys = new ArrayList<>(values.keySet());
                     for (Double key : keys) {
                         final WeightedSample sample = values.remove(key);
                         final WeightedSample newSample = new WeightedSample(sample.value, sample.weight * scalingFactor);

File: metrics-core/src/main/java/com/codahale/metrics/InstrumentedExecutorService.java
Patch:
@@ -85,7 +85,7 @@ public <T> Future<T> submit(Runnable runnable, T result) {
     @Override
     public <T> Future<T> submit(Callable<T> task) {
         submitted.mark();
-        return delegate.submit(new InstrumentedCallable<T>(task));
+        return delegate.submit(new InstrumentedCallable<>(task));
     }
 
     /**
@@ -129,9 +129,9 @@ public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, Ti
     }
 
     private <T> Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks) {
-        final List<InstrumentedCallable<T>> instrumented = new ArrayList<InstrumentedCallable<T>>(tasks.size());
+        final List<InstrumentedCallable<T>> instrumented = new ArrayList<>(tasks.size());
         for (Callable<T> task : tasks) {
-            instrumented.add(new InstrumentedCallable<T>(task));
+            instrumented.add(new InstrumentedCallable<>(task));
         }
         return instrumented;
     }

File: metrics-core/src/main/java/com/codahale/metrics/InstrumentedScheduledExecutorService.java
Patch:
@@ -75,7 +75,7 @@ public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)
     @Override
     public <V> ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit) {
         scheduledOnce.mark();
-        return delegate.schedule(new InstrumentedCallable<V>(callable), delay, unit);
+        return delegate.schedule(new InstrumentedCallable<>(callable), delay, unit);
     }
 
     /**
@@ -142,7 +142,7 @@ public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedE
     @Override
     public <T> Future<T> submit(Callable<T> task) {
         submitted.mark();
-        return delegate.submit(new InstrumentedCallable<T>(task));
+        return delegate.submit(new InstrumentedCallable<>(task));
     }
 
     /**
@@ -204,7 +204,7 @@ public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, Ti
     }
 
     private <T> Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks) {
-        final List<InstrumentedCallable<T>> instrumented = new ArrayList<InstrumentedCallable<T>>(tasks.size());
+        final List<InstrumentedCallable<T>> instrumented = new ArrayList<>(tasks.size());
         for (Callable<T> task : tasks) {
             instrumented.add(new InstrumentedCallable<>(task));
         }

File: metrics-core/src/main/java/com/codahale/metrics/SharedMetricRegistries.java
Patch:
@@ -10,9 +10,9 @@
  */
 public class SharedMetricRegistries {
     private static final ConcurrentMap<String, MetricRegistry> REGISTRIES =
-            new ConcurrentHashMap<String, MetricRegistry>();
+            new ConcurrentHashMap<>();
 
-    private static AtomicReference<String> defaultRegistryName = new AtomicReference<String>();
+    private static AtomicReference<String> defaultRegistryName = new AtomicReference<>();
 
     /* Visible for testing */
     static void setDefaultRegistryName(AtomicReference<String> defaultRegistryName) {

File: metrics-core/src/main/java/com/codahale/metrics/SlidingTimeWindowReservoir.java
Patch:
@@ -41,7 +41,7 @@ public SlidingTimeWindowReservoir(long window, TimeUnit windowUnit) {
      */
     public SlidingTimeWindowReservoir(long window, TimeUnit windowUnit, Clock clock) {
         this.clock = clock;
-        this.measurements = new ConcurrentSkipListMap<Long, Long>();
+        this.measurements = new ConcurrentSkipListMap<>();
         this.window = windowUnit.toNanos(window) * COLLISION_BUFFER;
         this.lastTick = new AtomicLong(clock.getTick() * COLLISION_BUFFER);
         this.count = new AtomicLong();

File: metrics-core/src/test/java/com/codahale/metrics/SharedMetricRegistriesTest.java
Patch:
@@ -10,7 +10,7 @@
 public class SharedMetricRegistriesTest {
     @Before
     public void setUp() throws Exception {
-        SharedMetricRegistries.setDefaultRegistryName(new AtomicReference<String>());
+        SharedMetricRegistries.setDefaultRegistryName(new AtomicReference<>());
         SharedMetricRegistries.clear();
     }
 

File: metrics-core/src/test/java/com/codahale/metrics/UniformSnapshotTest.java
Patch:
@@ -96,7 +96,7 @@ public void canAlsoBeCreatedFromACollectionOfLongs() throws Exception {
 
     @Test
     public void correctlyCreatedFromCollectionWithWeakIterator() throws Exception {
-        final ConcurrentSkipListSet<Long> values = new ConcurrentSkipListSet<Long>();
+        final ConcurrentSkipListSet<Long> values = new ConcurrentSkipListSet<>();
 
         // Create a latch to make sure that the background thread has started and
         // pushed some data to the collection.

File: metrics-core/src/test/java/com/codahale/metrics/WeightedSnapshotTest.java
Patch:
@@ -20,7 +20,7 @@ private static List<WeightedSample> weightedArray(long[] values, double[] weight
             throw new IllegalArgumentException("Mismatched lengths: " + values.length + " vs " + weights.length);
         }
         
-        final List<WeightedSample> samples = new ArrayList<WeightedSnapshot.WeightedSample>();
+        final List<WeightedSample> samples = new ArrayList<>();
         for (int i = 0; i < values.length; i++) {
             samples.add(new WeightedSnapshot.WeightedSample(values[i], weights[i]));
         }

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/PickledGraphite.java
Patch:
@@ -57,7 +57,7 @@ static class MetricTuple {
 
     private int batchSize;
     // graphite expects a python-pickled list of nested tuples.
-    private List<MetricTuple> metrics = new LinkedList<MetricTuple>();
+    private List<MetricTuple> metrics = new LinkedList<>();
 
     private final String hostname;
     private final int port;

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheck.java
Patch:
@@ -222,7 +222,7 @@ public static class ResultBuilder {
 
         protected ResultBuilder() {
             this.healthy = true;
-            this.details = new LinkedHashMap<String, Object>();
+            this.details = new LinkedHashMap<>();
         }
 
         /**
@@ -290,7 +290,7 @@ public ResultBuilder withMessage(String message, Object... args) {
          */
         public ResultBuilder withDetail(String key, Object data) {
             if (this.details == null) {
-                this.details = new LinkedHashMap<String, Object>();
+                this.details = new LinkedHashMap<>();
             }
             this.details.put(key, data);
             return this;

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/SharedHealthCheckRegistries.java
Patch:
@@ -10,9 +10,9 @@
  */
 public class SharedHealthCheckRegistries {
     private static final ConcurrentMap<String, HealthCheckRegistry> REGISTRIES =
-            new ConcurrentHashMap<String, HealthCheckRegistry>();
+            new ConcurrentHashMap<>();
 
-    private static AtomicReference<String> defaultRegistryName = new AtomicReference<String>();
+    private static AtomicReference<String> defaultRegistryName = new AtomicReference<>();
 
     /* Visible for testing */
     static void setDefaultRegistryName(AtomicReference<String> defaultRegistryName) {

File: metrics-healthchecks/src/test/java/com/codahale/metrics/health/SharedHealthCheckRegistriesTest.java
Patch:
@@ -16,7 +16,7 @@ public class SharedHealthCheckRegistriesTest {
 
     @Before
     public void setUp() {
-        SharedHealthCheckRegistries.setDefaultRegistryName(new AtomicReference<String>());
+        SharedHealthCheckRegistries.setDefaultRegistryName(new AtomicReference<>());
         SharedHealthCheckRegistries.clear();
     }
 

File: metrics-healthchecks/src/test/java/com/codahale/metrics/health/jvm/ThreadDeadlockHealthCheckTest.java
Patch:
@@ -26,7 +26,7 @@ public void isHealthyIfNoThreadsAreDeadlocked() throws Exception {
 
     @Test
     public void isUnhealthyIfThreadsAreDeadlocked() throws Exception {
-        final Set<String> threads = new TreeSet<String>();
+        final Set<String> threads = new TreeSet<>();
         threads.add("one");
         threads.add("two");
 

File: metrics-jcache/src/main/java/com/codahale/metrics/jcache/JCacheGaugeSet.java
Patch:
@@ -41,7 +41,7 @@ public Map<String, Metric> getMetrics() {
         Set<ObjectInstance> cacheBeans = getCacheBeans();
         List<String> availableStatsNames = retrieveStatsNames();
 
-        Map<String, Metric> gauges = new HashMap<String, Metric>(cacheBeans.size() * availableStatsNames.size());
+        Map<String, Metric> gauges = new HashMap<>(cacheBeans.size() * availableStatsNames.size());
 
         for (ObjectInstance cacheBean : cacheBeans) {
             ObjectName objectName = cacheBean.getObjectName();
@@ -68,7 +68,7 @@ private Set<ObjectInstance> getCacheBeans() {
 
     private List<String> retrieveStatsNames() {
         Method[] methods = CacheStatisticsMXBean.class.getDeclaredMethods();
-        List<String> availableStatsNames = new ArrayList<String>(methods.length);
+        List<String> availableStatsNames = new ArrayList<>(methods.length);
 
         for (Method method : methods) {
             String methodName = method.getName();

File: metrics-jdbi/src/main/java/com/codahale/metrics/jdbi/strategies/DelegatingStatementNameStrategy.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.List;
 
 public abstract class DelegatingStatementNameStrategy implements StatementNameStrategy {
-    private final List<StatementNameStrategy> strategies = new ArrayList<StatementNameStrategy>();
+    private final List<StatementNameStrategy> strategies = new ArrayList<>();
 
     protected DelegatingStatementNameStrategy(StatementNameStrategy... strategies) {
         registerStrategies(strategies);

File: metrics-jdbi/src/main/java/com/codahale/metrics/jdbi/strategies/ShortNameStrategy.java
Patch:
@@ -13,7 +13,7 @@
  * by class name and method; a shortening strategy is applied to make the JMX output nicer.
  */
 public final class ShortNameStrategy extends DelegatingStatementNameStrategy {
-    private final ConcurrentMap<String, String> shortClassNames = new ConcurrentHashMap<String, String>();
+    private final ConcurrentMap<String, String> shortClassNames = new ConcurrentHashMap<>();
 
     private final String baseJmxName;
 

File: metrics-jmx/src/main/java/com/codahale/metrics/jmx/JmxReporter.java
Patch:
@@ -501,7 +501,7 @@ private JmxListener(MBeanServer mBeanServer, String name, MetricFilter filter, M
             this.name = name;
             this.filter = filter;
             this.timeUnits = timeUnits;
-            this.registered = new ConcurrentHashMap<ObjectName, ObjectName>();
+            this.registered = new ConcurrentHashMap<>();
             this.objectNameFactory = objectNameFactory;
         }
 

File: metrics-jmx/src/test/java/com/codahale/metrics/jmx/JmxReporterTest.java
Patch:
@@ -294,7 +294,7 @@ private AttributeList getAttributes(String name, String... attributeNames) throw
     }
 
     private SortedMap<String, Object> values(AttributeList attributes) {
-        final TreeMap<String, Object> values = new TreeMap<String, Object>();
+        final TreeMap<String, Object> values = new TreeMap<>();
         for (Object o : attributes) {
             final Attribute attribute = (Attribute) o;
             values.put(attribute.getName(), attribute.getValue());

File: metrics-json/src/test/java/com/codahale/metrics/json/HealthCheckModuleTest.java
Patch:
@@ -89,7 +89,7 @@ public void serializesAnUnhealthyResultWithNestedExceptions() throws Exception {
 
     @Test
     public void serializeResultWithDetail() throws Exception {
-        Map<String, Object> complex = new LinkedHashMap<String, Object>();
+        Map<String, Object> complex = new LinkedHashMap<>();
         complex.put("field", "value");
 
         HealthCheck.Result result = HealthCheck.Result.builder()

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/BufferPoolMetricSet.java
Patch:
@@ -33,7 +33,7 @@ public BufferPoolMetricSet(MBeanServer mBeanServer) {
 
     @Override
     public Map<String, Metric> getMetrics() {
-        final Map<String, Metric> gauges = new HashMap<String, Metric>();
+        final Map<String, Metric> gauges = new HashMap<>();
         for (String pool : POOLS) {
             for (int i = 0; i < ATTRIBUTES.length; i++) {
                 final String attribute = ATTRIBUTES[i];

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/JvmAttributeGaugeSet.java
Patch:
@@ -34,7 +34,7 @@ public JvmAttributeGaugeSet(RuntimeMXBean runtime) {
 
     @Override
     public Map<String, Metric> getMetrics() {
-        final Map<String, Metric> gauges = new HashMap<String, Metric>();
+        final Map<String, Metric> gauges = new HashMap<>();
 
         gauges.put("name", (Gauge<String>) runtime::getName);
         gauges.put("vendor", (Gauge<String>) () -> String.format(Locale.US,

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/MemoryUsageGaugeSet.java
Patch:
@@ -37,7 +37,7 @@ public MemoryUsageGaugeSet(MemoryMXBean mxBean,
 
     @Override
     public Map<String, Metric> getMetrics() {
-        final Map<String, Metric> gauges = new HashMap<String, Metric>();
+        final Map<String, Metric> gauges = new HashMap<>();
 
         gauges.put("total.init", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getInit() +
                 mxBean.getNonHeapMemoryUsage().getInit());

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadDeadlockDetector.java
Patch:
@@ -40,7 +40,7 @@ public ThreadDeadlockDetector(ThreadMXBean threads) {
     public Set<String> getDeadlockedThreads() {
         final long[] ids = threads.findDeadlockedThreads();
         if (ids != null) {
-            final Set<String> deadlocks = new HashSet<String>();
+            final Set<String> deadlocks = new HashSet<>();
             for (ThreadInfo info : threads.getThreadInfo(ids, MAX_STACK_TRACE_DEPTH)) {
                 final StringBuilder stackTrace = new StringBuilder();
                 for (StackTraceElement element : info.getStackTrace()) {

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadStatesGaugeSet.java
Patch:
@@ -46,7 +46,7 @@ public ThreadStatesGaugeSet(ThreadMXBean threads,
 
     @Override
     public Map<String, Metric> getMetrics() {
-        final Map<String, Metric> gauges = new HashMap<String, Metric>();
+        final Map<String, Metric> gauges = new HashMap<>();
 
         for (final Thread.State state : Thread.State.values()) {
             gauges.put(name(state.toString().toLowerCase(), "count"),

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/JmxAttributeGaugeTest.java
Patch:
@@ -19,7 +19,7 @@ public class JmxAttributeGaugeTest {
 
     private static MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
 
-    private static List<ObjectName> registeredMBeans = new ArrayList<ObjectName>();
+    private static List<ObjectName> registeredMBeans = new ArrayList<>();
 
     public interface JmxTestMBean {
         Long getValue();

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/ThreadStatesGaugeSetTest.java
Patch:
@@ -26,7 +26,7 @@ public class ThreadStatesGaugeSetTest {
     private final ThreadInfo timedWaitingThread = mock(ThreadInfo.class);
     private final ThreadInfo terminatedThread = mock(ThreadInfo.class);
 
-    private final Set<String> deadlocks = new HashSet<String>();
+    private final Set<String> deadlocks = new HashSet<>();
 
     @Before
     public void setUp() throws Exception {

File: metrics-servlet/src/main/java/com/codahale/metrics/servlet/AbstractInstrumentedFilter.java
Patch:
@@ -62,7 +62,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
             metricName = getClass().getName();
         }
 
-        this.metersByStatusCode = new ConcurrentHashMap<Integer, Meter>(meterNamesByStatusCode
+        this.metersByStatusCode = new ConcurrentHashMap<>(meterNamesByStatusCode
                 .size());
         for (Entry<Integer, String> entry : meterNamesByStatusCode.entrySet()) {
             metersByStatusCode.put(entry.getKey(),

File: metrics-servlet/src/main/java/com/codahale/metrics/servlet/InstrumentedFilter.java
Patch:
@@ -36,7 +36,7 @@ public InstrumentedFilter() {
     }
 
     private static Map<Integer, String> createMeterNamesByStatusCode() {
-        final Map<Integer, String> meterNamesByStatusCode = new HashMap<Integer, String>(6);
+        final Map<Integer, String> meterNamesByStatusCode = new HashMap<>(6);
         meterNamesByStatusCode.put(OK, NAME_PREFIX + "ok");
         meterNamesByStatusCode.put(CREATED, NAME_PREFIX + "created");
         meterNamesByStatusCode.put(NO_CONTENT, NAME_PREFIX + "noContent");

File: metrics-core/src/test/java/com/codahale/metrics/InstrumentedThreadFactoryTest.java
Patch:
@@ -26,6 +26,7 @@ public class InstrumentedThreadFactoryTest {
      * TODO: Try not using real threads in a unit test?
      */
     @Test
+    @SuppressWarnings("unused")
     public void reportsThreadInformation() throws Exception {
         final CountDownLatch allTasksAreCreated = new CountDownLatch(THREAD_COUNT);
         final CountDownLatch allTasksAreCounted = new CountDownLatch(1);

File: metrics-core/src/test/java/com/codahale/metrics/MetricRegistryListenerTest.java
Patch:
@@ -6,7 +6,7 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 public class MetricRegistryListenerTest {
-    private final Gauge gauge = mock(Gauge.class);
+    private final Gauge<String> gauge = () -> "";
     private final Counter counter = mock(Counter.class);
     private final Histogram histogram = mock(Histogram.class);
     private final Meter meter = mock(Meter.class);

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/ThreadDeadlockDetectorTest.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Locale;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: metrics-jmx/src/test/java/com/codahale/metrics/JmxReporterTest.java
Patch:
@@ -14,6 +14,7 @@
 import static org.assertj.core.api.Assertions.*;
 import static org.mockito.Mockito.*;
 
+@SuppressWarnings("rawtypes")
 public class JmxReporterTest {
     private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
     private final String name = UUID.randomUUID().toString().replaceAll("[{\\-}]", "");

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/BufferPoolMetricSetTest.java
Patch:
@@ -12,6 +12,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@SuppressWarnings("rawtypes")
 public class BufferPoolMetricSetTest {
     private final MBeanServer mBeanServer = mock(MBeanServer.class);
     private final BufferPoolMetricSet buffers = new BufferPoolMetricSet(mBeanServer);

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/ClassLoadingGaugeSetTest.java
Patch:
@@ -10,6 +10,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@SuppressWarnings("rawtypes")
 public class ClassLoadingGaugeSetTest {
 
     private final ClassLoadingMXBean cl = mock(ClassLoadingMXBean.class);

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/MemoryUsageGaugeSetTest.java
Patch:
@@ -13,6 +13,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+@SuppressWarnings("rawtypes")
 public class MemoryUsageGaugeSetTest {
     private final MemoryUsage heap = mock(MemoryUsage.class);
     private final MemoryUsage nonHeap = mock(MemoryUsage.class);

File: metrics-jmx/src/test/java/com/codahale/metrics/CpuTimeClockTest.java
Patch:
@@ -15,7 +15,7 @@ public void cpuTimeClock() throws Exception {
 
         assertThat((double) clock.getTime())
                 .isEqualTo(System.currentTimeMillis(),
-                        offset(100.0));
+                        offset(200.0));
 
         assertThat((double) clock.getTick())
                 .isEqualTo(ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime(),

File: metrics-json/src/main/java/com/codahale/metrics/json/MetricsModule.java
Patch:
@@ -17,6 +17,7 @@
 public class MetricsModule extends Module {
     static final Version VERSION = new Version(3, 1, 3, "", "com.codahale.metrics", "metrics-json");
 
+    @SuppressWarnings("rawtypes")
     private static class GaugeSerializer extends StdSerializer<Gauge> {
 
         private static final long serialVersionUID = 1L;

File: metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java
Patch:
@@ -240,7 +240,7 @@ public boolean isInstance(Metric metric) {
      * @param supplier a MetricSupplier that can be used to manufacture a Gauge
      * @return a new or pre-existing {@link Gauge}
      */
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings("rawtypes")
     public Gauge gauge(String name, final MetricSupplier<Gauge> supplier) {
         return getOrAdd(name, new MetricBuilder<Gauge>() {
             @Override

File: metrics-core/src/main/java/com/codahale/metrics/EWMA.java
Patch:
@@ -88,7 +88,8 @@ public void tick() {
         final long count = uncounted.sumThenReset();
         final double instantRate = count / interval;
         if (initialized) {
-            rate += (alpha * (instantRate - rate));
+            final double oldRate = this.rate;
+            rate = oldRate + (alpha * (instantRate - oldRate));
         } else {
             rate = instantRate;
             initialized = true;

File: metrics-core/src/main/java/com/codahale/metrics/InstrumentedScheduledExecutorService.java
Patch:
@@ -206,7 +206,7 @@ public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, Ti
     private <T> Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks) {
         final List<InstrumentedCallable<T>> instrumented = new ArrayList<InstrumentedCallable<T>>(tasks.size());
         for (Callable<T> task : tasks) {
-            instrumented.add(new InstrumentedCallable(task));
+            instrumented.add(new InstrumentedCallable<>(task));
         }
         return instrumented;
     }

File: metrics-core/src/main/java/com/codahale/metrics/WeightedSnapshot.java
Patch:
@@ -99,7 +99,7 @@ public double getValue(double quantile) {
             return values[values.length - 1];
         }
 
-        return values[(int) posx];
+        return values[posx];
     }
 
     /**

File: metrics-core/src/main/java/com/codahale/metrics/CsvReporter.java
Patch:
@@ -185,6 +185,7 @@ private CsvReporter(MetricRegistry registry,
     }
 
     @Override
+    @SuppressWarnings("rawtypes")
     public void report(SortedMap<String, Gauge> gauges,
                        SortedMap<String, Counter> counters,
                        SortedMap<String, Histogram> histograms,
@@ -276,7 +277,7 @@ private void reportCounter(long timestamp, String name, Counter counter) {
         report(timestamp, name, "count", "%d", counter.getCount());
     }
 
-    private void reportGauge(long timestamp, String name, Gauge gauge) {
+    private void reportGauge(long timestamp, String name, Gauge<?> gauge) {
         report(timestamp, name, "value", "%s", gauge.getValue());
     }
 

File: metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
Patch:
@@ -265,6 +265,7 @@ public void report() {
      * @param meters     all of the meters in the registry
      * @param timers     all of the timers in the registry
      */
+    @SuppressWarnings("rawtypes")
     public abstract void report(SortedMap<String, Gauge> gauges,
                                 SortedMap<String, Counter> counters,
                                 SortedMap<String, Histogram> histograms,

File: metrics-core/src/main/java/com/codahale/metrics/Slf4jReporter.java
Patch:
@@ -210,6 +210,7 @@ private Slf4jReporter(MetricRegistry registry,
     }
 
     @Override
+    @SuppressWarnings("rawtypes")
     public void report(SortedMap<String, Gauge> gauges,
                        SortedMap<String, Counter> counters,
                        SortedMap<String, Histogram> histograms,
@@ -302,7 +303,7 @@ private void logCounter(String name, Counter counter) {
         loggerProxy.log(marker, "type={}, name={}, count={}", "COUNTER", prefix(name), counter.getCount());
     }
 
-    private void logGauge(String name, Gauge gauge) {
+    private void logGauge(String name, Gauge<?> gauge) {
         loggerProxy.log(marker, "type={}, name={}, value={}", "GAUGE", prefix(name), gauge.getValue());
     }
 

File: metrics-core/src/test/java/com/codahale/metrics/ScheduledReporterTest.java
Patch:
@@ -206,6 +206,7 @@ public DummyReporter(MetricRegistry registry, String name, MetricFilter filter,
         }
 
         @Override
+        @SuppressWarnings("rawtypes")
         public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters, SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters, SortedMap<String, Timer> timers) {
             // nothing doing!
         }

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteReporter.java
Patch:
@@ -228,6 +228,7 @@ protected GraphiteReporter(MetricRegistry registry,
     }
 
     @Override
+    @SuppressWarnings("rawtypes")
     public void report(SortedMap<String, Gauge> gauges,
                        SortedMap<String, Counter> counters,
                        SortedMap<String, Histogram> histograms,

File: metrics-logback/src/test/java/com/codahale/metrics/logback/InstrumentedAppenderTest.java
Patch:
@@ -121,7 +121,7 @@ public void usesDefaultRegistry() throws Exception {
       when(event.getLevel()).thenReturn(Level.INFO);
       shared.doAppend(event);
 
-      assertThat(SharedMetricRegistries.names().contains(InstrumentedAppender.DEFAULT_REGISTRY));
+      assertThat(SharedMetricRegistries.names()).contains(InstrumentedAppender.DEFAULT_REGISTRY);
       assertThat(registry.meter(METRIC_NAME_PREFIX + ".info").getCount())
               .isEqualTo(1);
     }
@@ -135,7 +135,7 @@ public void usesRegistryFromProperty() throws Exception {
       when(event.getLevel()).thenReturn(Level.INFO);
       shared.doAppend(event);
 
-      assertThat(SharedMetricRegistries.names().contains("something_else"));
+      assertThat(SharedMetricRegistries.names()).contains("something_else");
       assertThat(registry.meter(METRIC_NAME_PREFIX + ".info").getCount())
               .isEqualTo(1);
     }

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteSanitize.java
Patch:
@@ -8,7 +8,7 @@ class GraphiteSanitize {
     private static final String DASH = "-";
 
     /**
-     * Trims the string and peplaces all whitespace characters with the provided symbol
+     * Trims the string and replaces all whitespace characters with the provided symbol
      */
     static String sanitize(String string) {
         return WHITESPACE.matcher(string.trim()).replaceAll(DASH);

File: metrics-core/src/main/java/com/codahale/metrics/LongAdderProxy.java
Patch:
@@ -97,7 +97,7 @@ private static Provider getLongAdderProvider() {
             final JdkProvider jdkProvider = new JdkProvider();
             jdkProvider.get(); // To trigger a possible `NoClassDefFoundError` exception
             return jdkProvider;
-        } catch (NoClassDefFoundError e) {
+        } catch (Throwable e) {
             return new InternalLongAdderProvider();
         }
     }

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheckRegistry.java
Patch:
@@ -35,6 +35,7 @@
  */
 public class HealthCheckRegistry {
     private static final Logger LOGGER = LoggerFactory.getLogger(HealthCheckRegistry.class);
+    private static final int ASYNC_EXECUTOR_POOL_SIZE = 2;
 
     private final ConcurrentMap<String, HealthCheck> healthChecks;
     private final List<HealthCheckRegistryListener> listeners;
@@ -45,7 +46,7 @@ public class HealthCheckRegistry {
      * Creates a new {@link HealthCheckRegistry}.
      */
     public HealthCheckRegistry() {
-        this(Runtime.getRuntime().availableProcessors());
+        this(ASYNC_EXECUTOR_POOL_SIZE);
     }
 
     /**

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheck.java
Patch:
@@ -16,7 +16,7 @@ public abstract class HealthCheck {
      * or unhealthy (with either an error message or a thrown exception and optional details).
      */
     public static class Result {
-        private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
+        private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd'T'HH:mm:ss.SSSXXX";
         private static final int PRIME = 31;
 
         /**
@@ -115,7 +115,7 @@ private Result(boolean isHealthy, String message, Throwable error, Map<String, O
             this.message = message;
             this.error = error;
             this.details = details == null ? null : Collections.unmodifiableMap(details);
-            timestamp = DATE_FORMAT.format(new Date());
+            timestamp = new SimpleDateFormat(DATE_FORMAT_PATTERN).format(new Date());
         }
 
         /**

File: metrics-core/src/main/java/com/codahale/metrics/JmxReporter.java
Patch:
@@ -341,7 +341,7 @@ private JmxMeter(Metered metric, ObjectName objectName, TimeUnit rateUnit) {
             super(objectName);
             this.metric = metric;
             this.rateFactor = rateUnit.toSeconds(1);
-            this.rateUnit = "events/" + calculateRateUnit(rateUnit);
+            this.rateUnit = ("events/" + calculateRateUnit(rateUnit)).intern();
         }
 
         @Override

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheckRegistry.java
Patch:
@@ -133,6 +133,7 @@ public Result call() throws Exception {
                 results.put(entry.getKey(), entry.getValue().get());
             } catch (Exception e) {
                 LOGGER.warn("Error executing health check {}", entry.getKey(), e);
+                results.put(entry.getKey(), HealthCheck.Result.unhealthy(e));
             }
         }
         return Collections.unmodifiableSortedMap(results);

File: metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadDump.java
Patch:
@@ -32,7 +32,7 @@ public void dump(OutputStream out) {
 
         for (int ti = threads.length - 1; ti >= 0; ti--) {
             final ThreadInfo t = threads[ti];
-            writer.printf("%s id=%d state=%s",
+            writer.printf("\"%s\" id=%d state=%s",
                           t.getThreadName(),
                           t.getThreadId(),
                           t.getThreadState());

File: metrics-jvm/src/test/java/com/codahale/metrics/jvm/ThreadDumpTest.java
Patch:
@@ -43,7 +43,7 @@ public void dumpsAllThreads() throws Exception {
         threadDump.dump(output);
 
         assertThat(output.toString())
-                .isEqualTo(String.format("runnable id=100 state=RUNNABLE%n" +
+                .isEqualTo(String.format("\"runnable\" id=100 state=RUNNABLE%n" +
                                                  "    at Blah.blee(Blah.java:100)%n" +
                                                  "%n" +
                                                  "%n"));

File: metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java
Patch:
@@ -227,6 +227,7 @@ public void handle(String path,
             // new request
             activeRequests.inc();
             start = request.getTimeStamp();
+            state.addListener(listener);
         } else {
             // resumed request
             start = System.currentTimeMillis();
@@ -246,9 +247,6 @@ public void handle(String path,
             dispatches.update(dispatched, TimeUnit.MILLISECONDS);
 
             if (state.isSuspended()) {
-                if (state.isInitial()) {
-                    state.addListener(listener);
-                }
                 activeSuspended.inc();
             } else if (state.isInitial()) {
                 updateResponses(httpRequest, httpResponse, start);

File: metrics-core/src/main/java/com/codahale/metrics/MetricAttribute.java
Patch:
@@ -1,9 +1,9 @@
 package com.codahale.metrics;
 
 /**
- * Represents types of metrics which can be reported.
+ * Represents attributes of metrics which can be reported.
  */
-public enum MetricType {
+public enum MetricAttribute {
 
     MAX("max"),
     MEAN("mean"),
@@ -23,7 +23,7 @@ public enum MetricType {
 
     private final String code;
 
-    MetricType(String code) {
+    MetricAttribute(String code) {
         this.code = code;
     }
 

File: metrics-core/src/main/java/com/codahale/metrics/Counter.java
Patch:
@@ -4,10 +4,10 @@
  * An incrementing and decrementing counter metric.
  */
 public class Counter implements Metric, Counting {
-    private final LongAdder count;
+    private final LongAdderAdapter count;
 
     public Counter() {
-        this.count = new LongAdder();
+        this.count = LongAdderProxy.create();
     }
 
     /**

File: metrics-core/src/main/java/com/codahale/metrics/EWMA.java
Patch:
@@ -26,7 +26,7 @@ public class EWMA {
     private volatile boolean initialized = false;
     private volatile double rate = 0.0;
 
-    private final LongAdder uncounted = new LongAdder();
+    private final LongAdderAdapter uncounted = LongAdderProxy.create();
     private final double alpha, interval;
 
     /**

File: metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java
Patch:
@@ -95,7 +95,7 @@ public void update(long value, long timestamp) {
         try {
             final double itemWeight = weight(timestamp - startTime);
             final WeightedSample sample = new WeightedSample(value, itemWeight);
-            final double priority = itemWeight / ThreadLocalRandom.current().nextDouble();
+            final double priority = itemWeight / ThreadLocalRandomProxy.current().nextDouble();
             
             final long newCount = count.incrementAndGet();
             if (newCount <= size) {

File: metrics-core/src/main/java/com/codahale/metrics/Histogram.java
Patch:
@@ -8,7 +8,7 @@
  */
 public class Histogram implements Metric, Sampling, Counting {
     private final Reservoir reservoir;
-    private final LongAdder count;
+    private final LongAdderAdapter count;
 
     /**
      * Creates a new {@link Histogram} with the given reservoir.
@@ -17,7 +17,7 @@ public class Histogram implements Metric, Sampling, Counting {
      */
     public Histogram(Reservoir reservoir) {
         this.reservoir = reservoir;
-        this.count = new LongAdder();
+        this.count = LongAdderProxy.create();
     }
 
     /**

File: metrics-core/src/main/java/com/codahale/metrics/Meter.java
Patch:
@@ -16,7 +16,7 @@ public class Meter implements Metered {
     private final EWMA m5Rate = EWMA.fiveMinuteEWMA();
     private final EWMA m15Rate = EWMA.fifteenMinuteEWMA();
 
-    private final LongAdder count = new LongAdder();
+    private final LongAdderAdapter count = LongAdderProxy.create();
     private final long startTime;
     private final AtomicLong lastTick;
     private final Clock clock;

File: metrics-core/src/main/java/com/codahale/metrics/UniformReservoir.java
Patch:
@@ -70,7 +70,7 @@ public void update(long value) {
     private static long nextLong(long n) {
         long bits, val;
         do {
-            bits = ThreadLocalRandom.current().nextLong() & (~(1L << BITS_PER_LONG));
+            bits = ThreadLocalRandomProxy.current().nextLong() & (~(1L << BITS_PER_LONG));
             val = bits % n;
         } while (bits - val + (n - 1) < 0L);
         return val;

File: metrics-servlets/src/main/java/com/codahale/metrics/servlets/MetricsServlet.java
Patch:
@@ -167,7 +167,7 @@ protected void doGet(HttpServletRequest req,
         }
         resp.setHeader("Cache-Control", "must-revalidate,no-cache,no-store");
         resp.setStatus(HttpServletResponse.SC_OK);
-        
+
         final OutputStream output = resp.getOutputStream();
         try {
             if (jsonpParamName != null && req.getParameter(jsonpParamName) != null) {

File: metrics-json/src/test/java/com/codahale/metrics/json/HealthCheckModuleTest.java
Patch:
@@ -92,7 +92,8 @@ public void serializeResultWithDetail() throws Exception {
         Map<String, Object> complex = new LinkedHashMap<String, Object>();
         complex.put("field", "value");
 
-        HealthCheck.Result result = HealthCheck.Result.healthyBuilder()
+        HealthCheck.Result result = HealthCheck.Result.builder()
+            .healthy()
             .withDetail("boolean", true)
             .withDetail("integer", 1)
             .withDetail("long", 2L)

File: metrics-servlets/src/main/java/com/codahale/metrics/servlets/CpuProfileServlet.java
Patch:
@@ -12,7 +12,7 @@
 import com.papertrail.profiler.CpuProfile;
 
 /**
- * An HTTP servlets which outputs a {@link https://github.com/gperftools/gperftools} parseable response.
+ * An HTTP servlets which outputs a <a href="https://github.com/gperftools/gperftools">pprof</a> parseable response.
  */
 public class CpuProfileServlet extends HttpServlet {
     private static final long serialVersionUID = -668666696530287501L;

File: metrics-servlets/src/test/java/com/codahale/metrics/servlets/AdminServletTest.java
Patch:
@@ -50,6 +50,8 @@ public void returnsA200() throws Exception {
                                 "    <li><a href=\"/context/admin/ping\">Ping</a></li>%n" +
                                 "    <li><a href=\"/context/admin/threads\">Threads</a></li>%n" +
                                 "    <li><a href=\"/context/admin/healthcheck?pretty=true\">Healthcheck</a></li>%n" +
+                                "    <li><a href=\"/context/admin/pprof\">CPU Profile</a></li>%n" +
+                                "    <li><a href=\"/context/admin/pprof?state=blocked\">CPU Contention</a></li>%n" +
                                 "  </ul>%n" +
                                 "</body>%n" +
                                 "</html>%n"

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/Graphite.java
Patch:
@@ -104,7 +104,7 @@ public Graphite(InetSocketAddress address, SocketFactory socketFactory, Charset
 
     @Override
     public void connect() throws IllegalStateException, IOException {
-        if (socket != null) {
+        if (isConnected()) {
             throw new IllegalStateException("Already connected");
         }
         InetSocketAddress address = this.address;

File: metrics-core/src/main/java/com/codahale/metrics/WeightedSnapshot.java
Patch:
@@ -79,7 +79,7 @@ public int compare(WeightedSample o1, WeightedSample o2) {
      */
     @Override
     public double getValue(double quantile) {
-        if (quantile < 0.0 || quantile > 1.0) {
+        if (quantile < 0.0 || quantile > 1.0 || Double.isNaN( quantile )) {
             throw new IllegalArgumentException(quantile + " is not in [0..1]");
         }
 

File: metrics-core/src/main/java/com/codahale/metrics/JmxReporter.java
Patch:
@@ -28,7 +28,7 @@ public static Builder forRegistry(MetricRegistry registry) {
     }
 
     /**
-     * A builder for {@link CsvReporter} instances. Defaults to using the default MBean server and
+     * A builder for {@link JmxReporter} instances. Defaults to using the default MBean server and
      * not filtering metrics.
      */
     public static class Builder {

File: metrics-log4j2/src/main/java/com/codahale/metrics/log4j2/InstrumentedAppender.java
Patch:
@@ -1,4 +1,4 @@
-package log4j2;
+package com.codahale.metrics.log4j2;
 
 import com.codahale.metrics.Meter;
 import com.codahale.metrics.MetricRegistry;

File: metrics-log4j2/src/test/java/com/codahale/metrics/log4j2/InstrumentedAppenderTest.java
Patch:
@@ -1,8 +1,9 @@
-package log4j2;
+package com.codahale.metrics.log4j2;
 
 import com.codahale.metrics.MetricRegistry;
 import com.codahale.metrics.SharedMetricRegistries;
-import log4j2.InstrumentedAppender;
+import com.codahale.metrics.log4j2.InstrumentedAppender;
+
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.LogEvent;
 import org.junit.After;

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteRabbitMQ.java
Patch:
@@ -111,9 +111,9 @@ public void configure(Socket socket) throws IOException {
 
     @Override
     public void connect() throws IllegalStateException, IOException {
-    		if (isConnected()) {
+        if (isConnected()) {
             throw new IllegalStateException("Already connected");
-    		}
+        }
 
         connection = connectionFactory.newConnection();
         channel = connection.createChannel();

File: metrics-servlets/src/test/java/com/codahale/metrics/servlets/MetricsServletTest.java
Patch:
@@ -27,8 +27,8 @@ public class MetricsServletTest extends AbstractServletTest {
     @Override
     protected void setUp(ServletTester tester) {
         tester.setAttribute("com.codahale.metrics.servlets.MetricsServlet.registry", registry);
-        tester.addServlet(MetricsServlet.class, "/metrics")
-                    .setInitParameter("com.codahale.metrics.servlets.MetricsServlet.allowedOrigin", "*");
+        tester.addServlet(MetricsServlet.class, "/metrics");
+        tester.getContext().setInitParameter("com.codahale.metrics.servlets.MetricsServlet.allowedOrigin", "*");
     }
 
     @Before

File: metrics-core/src/main/java/com/codahale/metrics/InstrumentedExecutorService.java
Patch:
@@ -131,7 +131,7 @@ public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, Ti
     private <T> Collection<? extends Callable<T>> instrument(Collection<? extends Callable<T>> tasks) {
         final List<InstrumentedCallable<T>> instrumented = new ArrayList<InstrumentedCallable<T>>(tasks.size());
         for (Callable<T> task : tasks) {
-            instrumented.add(new InstrumentedCallable(task));
+            instrumented.add(new InstrumentedCallable<T>(task));
         }
         return instrumented;
     }

File: metrics-core/src/test/java/com/codahale/metrics/MetricRegistryTest.java
Patch:
@@ -319,7 +319,7 @@ public void concatenatesStringsToFormADottedName() throws Exception {
     @Test
     @SuppressWarnings("NullArgumentToVariableArgMethod")
     public void elidesNullValuesFromNamesWhenOnlyOneNullPassedIn() throws Exception {
-        assertThat(name("one", null))
+        assertThat(name("one", (String)null))
                 .isEqualTo("one");
     }
 

File: metrics-graphite/src/main/java/com/codahale/metrics/graphite/Graphite.java
Patch:
@@ -80,7 +80,6 @@ public void send(String name, String value, long timestamp) throws IOException {
             writer.write(' ');
             writer.write(Long.toString(timestamp));
             writer.write('\n');
-            writer.flush();
             this.failures = 0;
         } catch (IOException e) {
             failures++;
@@ -95,6 +94,9 @@ public int getFailures() {
 
     @Override
     public void close() throws IOException {
+        if (writer != null) {
+            writer.flush();
+        }
         if (socket != null) {
             socket.close();
         }

File: metrics-graphite/src/test/java/com/codahale/metrics/graphite/GraphiteTest.java
Patch:
@@ -67,6 +67,7 @@ public void doesNotAllowDoubleConnections() throws Exception {
     public void writesValuesToGraphite() throws Exception {
         graphite.connect();
         graphite.send("name", "value", 100);
+        graphite.close();
 
         assertThat(output.toString())
                 .isEqualTo("name value 100\n");
@@ -76,6 +77,7 @@ public void writesValuesToGraphite() throws Exception {
     public void sanitizesNames() throws Exception {
         graphite.connect();
         graphite.send("name woo", "value", 100);
+        graphite.close();
 
         assertThat(output.toString())
                 .isEqualTo("name-woo value 100\n");
@@ -85,6 +87,7 @@ public void sanitizesNames() throws Exception {
     public void sanitizesValues() throws Exception {
         graphite.connect();
         graphite.send("name", "value woo", 100);
+        graphite.close();
 
         assertThat(output.toString())
                 .isEqualTo("name value-woo 100\n");

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Counted.java
Patch:
@@ -27,17 +27,18 @@
 public @interface Counted {
 
     /**
-     * The name of the counter.
+     * @return The name of the counter.
      */
     String name() default "";
 
     /**
-     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
+     * @return If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;
 
     /**
+     * @return 
      * If {@code false} (default), the counter is decremented when the annotated
      * method returns, counting current invocations of the annotated method.
      * If {@code true}, the counter increases monotonically, counting total

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/ExceptionMetered.java
Patch:
@@ -43,19 +43,19 @@
     String DEFAULT_NAME_SUFFIX = "exceptions";
 
     /**
-     * The name of the meter. If not specified, the meter will be given a name based on the method
+     * @return The name of the meter. If not specified, the meter will be given a name based on the method
      * it decorates and the suffix "Exceptions".
      */
     String name() default "";
 
     /**
-     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
+     * @return If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;
 
     /**
-     * The type of exceptions that the meter will catch and count.
+     * @return The type of exceptions that the meter will catch and count.
      */
     Class<? extends Throwable> cause() default Exception.class;
 }

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Gauge.java
Patch:
@@ -23,12 +23,12 @@
 @Target({ ElementType.METHOD, ElementType.FIELD })
 public @interface Gauge {
     /**
-     * The gauge's name.
+     * @return The gauge's name.
      */
     String name() default "";
 
     /**
-     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
+     * @return If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Metered.java
Patch:
@@ -23,12 +23,12 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface Metered {
     /**
-     * The name of the meter.
+     * @return The name of the meter.
      */
     String name() default "";
 
     /**
-     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
+     * @return If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Metric.java
Patch:
@@ -50,12 +50,12 @@
 public @interface Metric {
 
     /**
-     * The name of the metric.
+     * @return The name of the metric.
      */
     String name() default "";
 
     /**
-     * If {@code true}, use the given name as an absolute name. If {@code false},
+     * @return If {@code true}, use the given name as an absolute name. If {@code false},
      * use the given name relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Timed.java
Patch:
@@ -23,12 +23,12 @@
 @Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface Timed {
     /**
-     * The name of the timer.
+     * @return The name of the timer.
      */
     String name() default "";
 
     /**
-     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
+     * @return If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java
Patch:
@@ -58,6 +58,7 @@ public ExponentiallyDecayingReservoir(int size, double alpha) {
      * @param size  the number of samples to keep in the sampling reservoir
      * @param alpha the exponential decay factor; the higher this is, the more biased the reservoir
      *              will be towards newer values
+     * @param clock the clock used to timestamp samples and track rescaling
      */
     public ExponentiallyDecayingReservoir(int size, double alpha, Clock clock) {
         this.values = new ConcurrentSkipListMap<Double, Long>();

File: metrics-core/src/main/java/com/codahale/metrics/JvmAttributeGaugeSet.java
Patch:
@@ -22,6 +22,7 @@ public JvmAttributeGaugeSet() {
 
     /**
      * Creates a new set of gauges with the given {@link RuntimeMXBean}.
+     * @param runtime JVM management interface with access to system properties
      */
     public JvmAttributeGaugeSet(RuntimeMXBean runtime) {
         this.runtime = runtime;

File: metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
Patch:
@@ -67,6 +67,8 @@ public Thread newThread(Runnable r) {
      *                 reporter will report
      * @param name     the reporter's name
      * @param filter   the filter for which metrics to report
+     * @param rateUnit a unit of time 
+     * @param durationUnit a unit of time
      */
     protected ScheduledReporter(MetricRegistry registry,
                                 String name,

File: metrics-core/src/main/java/com/codahale/metrics/Timer.java
Patch:
@@ -26,8 +26,8 @@ private Context(Timer timer, Clock clock) {
         }
 
         /**
-         * Stops recording the elapsed time, updates the timer and returns the elapsed time in
-         * nanoseconds.
+         * Stops recording the elapsed time and updates the timer.
+         * @return the elapsed time in nanoseconds
          */
         public long stop() {
             final long elapsed = clock.getTick() - startTime;

File: metrics-ehcache/src/main/java/com/codahale/metrics/ehcache/InstrumentedEhcache.java
Patch:
@@ -22,6 +22,7 @@ public class InstrumentedEhcache extends EhcacheDecoratorAdapter {
      * and a set of gauges for Ehcache's built-in statistics:
      * <p/>
      * <table>
+     * <caption>Ehcache timered metrics</caption>
      * <tr>
      * <td>{@code hits}</td>
      * <td>The number of times a requested item was found in the

File: metrics-ganglia/src/main/java/com/codahale/metrics/ganglia/GangliaReporter.java
Patch:
@@ -125,7 +125,7 @@ public Builder filter(MetricFilter filter) {
          * Builds a {@link GangliaReporter} with the given properties, announcing metrics to the
          * given {@link GMetric} client.
          *
-         * @param ganglia the client to use for announcing metrics
+         * @param gmetric the client to use for announcing metrics
          * @return a {@link GangliaReporter}
          */
         public GangliaReporter build(GMetric gmetric) {
@@ -136,7 +136,7 @@ public GangliaReporter build(GMetric gmetric) {
          * Builds a {@link GangliaReporter} with the given properties, announcing metrics to the
          * given {@link GMetric} client.
          *
-         * @param ganglia the clients to use for announcing metrics
+         * @param gmetrics the clients to use for announcing metrics
          * @return a {@link GangliaReporter}
          */
         public GangliaReporter build(GMetric... gmetrics) {

File: metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheckRegistry.java
Patch:
@@ -82,7 +82,7 @@ public SortedMap<String, HealthCheck.Result> runHealthChecks() {
 
     /**
      * Runs the registered health checks in parallel and returns a map of the results.
-     *
+     * @param   executor object to launch and track health checks progress
      * @return a map of the health check results
      */
     public SortedMap<String, HealthCheck.Result> runHealthChecks(ExecutorService executor) {

File: metrics-servlet/src/main/java/com/codahale/metrics/servlet/InstrumentedFilterContextListener.java
Patch:
@@ -12,7 +12,7 @@
  */
 public abstract class InstrumentedFilterContextListener implements ServletContextListener {
     /**
-     * Returns the {@link MetricRegistry} to inject into the servlet context.
+     * @return the {@link MetricRegistry} to inject into the servlet context.
      */
     protected abstract MetricRegistry getMetricRegistry();
 

File: metrics-servlets/src/main/java/com/codahale/metrics/servlets/AdminServletContextListener.java
Patch:
@@ -19,17 +19,17 @@
 @Deprecated
 public abstract class AdminServletContextListener implements ServletContextListener {
     /**
-     * Returns the {@link MetricRegistry} to inject into the servlet context.
+     * @return the {@link MetricRegistry} to inject into the servlet context.
      */
     protected abstract MetricRegistry getMetricRegistry();
 
     /**
-     * Returns the {@link HealthCheckRegistry} to inject into the servlet context.
+     * @return the {@link HealthCheckRegistry} to inject into the servlet context.
      */
     protected abstract HealthCheckRegistry getHealthCheckRegistry();
 
     /**
-     * Returns the {@link ExecutorService} to inject into the servlet context, or {@code null} if
+     * @return the {@link ExecutorService} to inject into the servlet context, or {@code null} if
      * the health checks should be run in the servlet worker thread.
      */
     protected ExecutorService getExecutorService() {

File: metrics-servlets/src/main/java/com/codahale/metrics/servlets/HealthCheckServlet.java
Patch:
@@ -19,12 +19,12 @@
 public class HealthCheckServlet extends HttpServlet {
     public static abstract class ContextListener implements ServletContextListener {
         /**
-         * Returns the {@link HealthCheckRegistry} to inject into the servlet context.
+         * @return the {@link HealthCheckRegistry} to inject into the servlet context.
          */
         protected abstract HealthCheckRegistry getHealthCheckRegistry();
 
         /**
-         * Returns the {@link ExecutorService} to inject into the servlet context, or {@code null}
+         * @return the {@link ExecutorService} to inject into the servlet context, or {@code null}
          * if the health checks should be run in the servlet worker thread.
          */
         protected ExecutorService getExecutorService() {

File: metrics-logback/src/test/java/com/codahale/metrics/logback/InstrumentedAppenderTest.java
Patch:
@@ -118,6 +118,7 @@ public void usesDefaultRegistry() throws Exception {
       SharedMetricRegistries.add(InstrumentedAppender.DEFAULT_REGISTRY, registry);
       final InstrumentedAppender shared = new InstrumentedAppender();
       shared.start();
+      when(event.getLevel()).thenReturn(Level.INFO);
       shared.doAppend(event);
 
       assertThat(SharedMetricRegistries.names().contains(InstrumentedAppender.DEFAULT_REGISTRY));
@@ -131,6 +132,7 @@ public void usesRegistryFromProperty() throws Exception {
       System.setProperty(InstrumentedAppender.REGISTRY_PROPERTY_NAME, "something_else");
       final InstrumentedAppender shared = new InstrumentedAppender();
       shared.start();
+      when(event.getLevel()).thenReturn(Level.INFO);
       shared.doAppend(event);
 
       assertThat(SharedMetricRegistries.names().contains("something_else"));

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Counted.java
Patch:
@@ -23,7 +23,7 @@
  * @since 4.0.0
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface Counted {
 
     /**

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/ExceptionMetered.java
Patch:
@@ -35,7 +35,7 @@
  * thrown.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface ExceptionMetered {
     /**
      * The default suffix for meter names.

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Metered.java
Patch:
@@ -20,7 +20,7 @@
  * {@code #fancyName(String)} method is invoked, the meter will be marked.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface Metered {
     /**
      * The name of the meter.

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Timed.java
Patch:
@@ -20,7 +20,7 @@
  * {@code #fancyName(String)} method is invoked, the method's execution will be timed.
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.METHOD)
+@Target({ ElementType.TYPE, ElementType.METHOD })
 public @interface Timed {
     /**
      * The name of the timer.

File: metrics-ganglia/src/main/java/com/codahale/metrics/ganglia/GangliaReporter.java
Patch:
@@ -294,7 +294,7 @@ private void reportGauge(String name, Gauge gauge) {
 
     private static final double MIN_VAL = 1E-300;
     private void announce(String name, String group, double value, String units) throws GangliaException {
-        if (value < MIN_VAL) value = 0.0;
+        if (Math.abs(value) < MIN_VAL) value = 0.0;
         for (GMetric gmetric: gmetrics) {
             gmetric.announce(name, Double.toString(value), GMetricType.DOUBLE, units, GMetricSlope.BOTH,
                 tMax, dMax, group);

File: metrics-ganglia/src/main/java/com/codahale/metrics/ganglia/GangliaReporter.java
Patch:
@@ -294,7 +294,7 @@ private void reportGauge(String name, Gauge gauge) {
 
     private static final double MIN_VAL = 1E-300;
     private void announce(String name, String group, double value, String units) throws GangliaException {
-        if (value < MIN_VAL) value = 0.0;
+        if (Math.abs(value) < MIN_VAL) value = 0.0;
         for (GMetric gmetric: gmetrics) {
             gmetric.announce(name, Double.toString(value), GMetricType.DOUBLE, units, GMetricSlope.BOTH,
                 tMax, dMax, group);

File: metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
Patch:
@@ -67,9 +67,8 @@ protected ScheduledReporter(MetricRegistry registry,
                                 MetricFilter filter,
                                 TimeUnit rateUnit,
                                 TimeUnit durationUnit) {
-        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(name + '-'
-                + FACTORY_ID.incrementAndGet()));
-		this(registry, name, filter, rateUnit, durationUnit, executor);
+		this(registry, name, filter, rateUnit, durationUnit,
+                Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(name + '-' + FACTORY_ID.incrementAndGet())));
     }
 	
     /**

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/ExceptionMetered.java
Patch:
@@ -49,7 +49,7 @@
     String name() default "";
 
     /**
-     * If {@code true}, use the given name an as absolute name. If {@code false}, use the given name
+     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Gauge.java
Patch:
@@ -28,7 +28,7 @@
     String name() default "";
 
     /**
-     * If {@code true}, use the given name an as absolute name. If {@code false}, use the given name
+     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Metered.java
Patch:
@@ -28,7 +28,7 @@
     String name() default "";
 
     /**
-     * If {@code true}, use the given name an as absolute name. If {@code false}, use the given name
+     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Timed.java
Patch:
@@ -28,7 +28,7 @@
     String name() default "";
 
     /**
-     * If {@code true}, use the given name an as absolute name. If {@code false}, use the given name
+     * If {@code true}, use the given name as an absolute name. If {@code false}, use the given name
      * relative to the annotated class.
      */
     boolean absolute() default false;

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/ExceptionMetered.java
Patch:
@@ -10,7 +10,7 @@
  * <p/>
  * Given a method like this:
  * <pre><code>
- *     \@ExceptionMetered(name = "fancyName", cause=IllegalArgumentException.class)
+ *     {@literal @}ExceptionMetered(name = "fancyName", cause=IllegalArgumentException.class)
  *     public String fancyName(String name) {
  *         return "Sir Captain " + name;
  *     }
@@ -25,7 +25,7 @@
  * <p/>
  * For instance, given a declaration of
  * <pre><code>
- *     \@ExceptionMetered
+ *     {@literal @}ExceptionMetered
  *     public String fancyName(String name) {
  *         return "Sir Captain " + name;
  *     }

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Gauge.java
Patch:
@@ -10,7 +10,7 @@
  * <p/>
  * Given a method like this:
  * <pre><code>
- *     \@Gauge(name = "queueSize")
+ *     {@literal @}Gauge(name = "queueSize")
  *     public int getQueueSize() {
  *         return queue.size;
  *     }

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Metered.java
Patch:
@@ -10,7 +10,7 @@
  * <p/>
  * Given a method like this:
  * <pre><code>
- *     \@Metered(name = "fancyName")
+ *     {@literal @}Metered(name = "fancyName")
  *     public String fancyName(String name) {
  *         return "Sir Captain " + name;
  *     }

File: metrics-annotation/src/main/java/com/codahale/metrics/annotation/Timed.java
Patch:
@@ -10,7 +10,7 @@
  * <p/>
  * Given a method like this:
  * <pre><code>
- *     \@Timed(name = "fancyName")
+ *     {@literal @}Timed(name = "fancyName")
  *     public String fancyName(String name) {
  *         return "Sir Captain " + name;
  *     }

File: metrics-core/src/main/java/com/codahale/metrics/JmxReporter.java
Patch:
@@ -618,7 +618,7 @@ public void onTimerRemoved(String name) {
             try {
                 final ObjectName objectName = createName("timers", name);
                 mBeanServer.unregisterMBean(objectName);
-                registered.add(objectName);
+                registered.remove(objectName);
             } catch (InstanceNotFoundException e) {
                 LOGGER.debug("Unable to unregister timer", e);
             } catch (MBeanRegistrationException e) {

File: metrics-json/src/main/java/com/codahale/metrics/json/MetricsModule.java
Patch:
@@ -158,8 +158,8 @@ public void serialize(Timer timer,
             }
 
             json.writeNumberField("stddev", snapshot.getStdDev() * durationFactor);
-            json.writeNumberField("m15_rate", timer.getOneMinuteRate() * rateFactor);
-            json.writeNumberField("m1_rate", timer.getFifteenMinuteRate() * rateFactor);
+            json.writeNumberField("m15_rate", timer.getFifteenMinuteRate() * rateFactor);
+            json.writeNumberField("m1_rate", timer.getOneMinuteRate() * rateFactor);
             json.writeNumberField("m5_rate", timer.getFiveMinuteRate() * rateFactor);
             json.writeNumberField("mean_rate", timer.getMeanRate() * rateFactor);
             json.writeStringField("duration_units", durationUnit);

File: metrics-json/src/main/java/com/codahale/metrics/json/MetricsModule.java
Patch:
@@ -158,8 +158,8 @@ public void serialize(Timer timer,
             }
 
             json.writeNumberField("stddev", snapshot.getStdDev() * durationFactor);
-            json.writeNumberField("m15_rate", timer.getOneMinuteRate() * rateFactor);
-            json.writeNumberField("m1_rate", timer.getFifteenMinuteRate() * rateFactor);
+            json.writeNumberField("m15_rate", timer.getFifteenMinuteRate() * rateFactor);
+            json.writeNumberField("m1_rate", timer.getOneMinuteRate() * rateFactor);
             json.writeNumberField("m5_rate", timer.getFiveMinuteRate() * rateFactor);
             json.writeNumberField("mean_rate", timer.getMeanRate() * rateFactor);
             json.writeStringField("duration_units", durationUnit);

File: metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java
Patch:
@@ -44,6 +44,8 @@ public Thread newThread(Runnable r) {
         }
     }
 
+    private static final AtomicInteger FACTORY_ID = new AtomicInteger();
+
     private final MetricRegistry registry;
     private final ScheduledExecutorService executor;
     private final MetricFilter filter;
@@ -67,7 +69,7 @@ protected ScheduledReporter(MetricRegistry registry,
                                 TimeUnit durationUnit) {
         this.registry = registry;
         this.filter = filter;
-        this.executor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(name));
+        this.executor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(name + '-' + FACTORY_ID.incrementAndGet()));
         this.rateFactor = rateUnit.toSeconds(1);
         this.rateUnit = calculateRateUnit(rateUnit);
         this.durationFactor = 1.0 / durationUnit.toNanos(1);

File: metrics-json/src/main/java/com/codahale/metrics/json/MetricsModule.java
Patch:
@@ -103,8 +103,8 @@ public void serialize(Meter meter,
                               SerializerProvider provider) throws IOException {
             json.writeStartObject();
             json.writeNumberField("count", meter.getCount());
-            json.writeNumberField("m15_rate", meter.getOneMinuteRate() * rateFactor);
-            json.writeNumberField("m1_rate", meter.getFifteenMinuteRate() * rateFactor);
+            json.writeNumberField("m15_rate", meter.getFifteenMinuteRate() * rateFactor);
+            json.writeNumberField("m1_rate", meter.getOneMinuteRate() * rateFactor);
             json.writeNumberField("m5_rate", meter.getFiveMinuteRate() * rateFactor);
             json.writeNumberField("mean_rate", meter.getMeanRate() * rateFactor);
             json.writeStringField("units", rateUnit);

File: metrics-json/src/test/java/com/codahale/metrics/json/MetricsModuleTest.java
Patch:
@@ -107,9 +107,9 @@ public void serializesMeters() throws Exception {
         final Meter meter = mock(Meter.class);
         when(meter.getCount()).thenReturn(1L);
         when(meter.getMeanRate()).thenReturn(2.0);
-        when(meter.getOneMinuteRate()).thenReturn(3.0);
+        when(meter.getOneMinuteRate()).thenReturn(5.0);
         when(meter.getFiveMinuteRate()).thenReturn(4.0);
-        when(meter.getFifteenMinuteRate()).thenReturn(5.0);
+        when(meter.getFifteenMinuteRate()).thenReturn(3.0);
 
         assertThat(mapper.writeValueAsString(meter))
                 .isEqualTo("{" +

File: metrics-servlet/src/main/java/com/codahale/metrics/servlet/InstrumentedFilter.java
Patch:
@@ -8,11 +8,11 @@
  * to capture information about. <p>Use it in your servlet.xml like this:</p>
  * <pre>{@code
  * <filter>
- *     <filter-name>webappMetricsFilter</filter-name>
- *     <filter-class>com.codahale.metrics.servlet.DefaultWebappMetricsFilter</filter-class>
+ *     <filter-name>instrumentedFilter</filter-name>
+ *     <filter-class>com.codahale.metrics.servlet.InstrumentedFilter</filter-class>
  * </filter>
  * <filter-mapping>
- *     <filter-name>webappMetricsFilter</filter-name>
+ *     <filter-name>instrumentedFilter</filter-name>
  *     <url-pattern>/*</url-pattern>
  * </filter-mapping>
  * }</pre>

File: metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java
Patch:
@@ -184,7 +184,6 @@ public void handle(String path,
                 }
                 activeSuspended.inc();
             } else if (state.isInitial()) {
-                requests.update(dispatched, TimeUnit.MILLISECONDS);
                 updateResponses(request);
             }
             // else onCompletion will handle it.

File: metrics-servlets/src/test/java/com/codahale/metrics/servlets/MetricsServletTest.java
Patch:
@@ -20,7 +20,7 @@ public class MetricsServletTest extends AbstractServletTest {
     protected void setUp(ServletTester tester) {
         tester.setAttribute("com.codahale.metrics.servlets.MetricsServlet.registry", registry);
         tester.addServlet(MetricsServlet.class, "/metrics")
-                    .setInitParameter("com.codahale.metrics.servlets.MetricsServlet.corsAllowedOrigins", "*");;
+                    .setInitParameter("com.codahale.metrics.servlets.MetricsServlet.allowedOrigin", "*");
     }
 
     @Before

File: metrics-core/src/main/java/com/codahale/metrics/Gauge.java
Patch:
@@ -7,7 +7,7 @@
  * <pre><code>
  * final Queue&lt;String&gt; queue = new ConcurrentLinkedQueue&lt;String&gt;();
  * final Gauge&lt;Integer&gt; queueDepth = new Gauge&lt;Integer&gt;() {
- *     public Integer value() {
+ *     public Integer getValue() {
  *         return queue.size();
  *     }
  * };

File: metrics-core/src/main/java/com/codahale/metrics/Gauge.java
Patch:
@@ -7,7 +7,7 @@
  * <pre><code>
  * final Queue&lt;String&gt; queue = new ConcurrentLinkedQueue&lt;String&gt;();
  * final Gauge&lt;Integer&gt; queueDepth = new Gauge&lt;Integer&gt;() {
- *     public Integer value() {
+ *     public Integer getValue() {
  *         return queue.size();
  *     }
  * };

File: metrics-core/src/main/java/com/codahale/metrics/Counter.java
Patch:
@@ -36,7 +36,7 @@ public void dec() {
     /**
      * Decrement the counter by {@code n}.
      *
-     * @param n the amount by which the counter will be increased
+     * @param n the amount by which the counter will be decreased
      */
     public void dec(long n) {
         count.add(-n);

File: metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedConnectionFactory.java
Patch:
@@ -5,14 +5,16 @@
 import org.eclipse.jetty.io.EndPoint;
 import org.eclipse.jetty.server.ConnectionFactory;
 import org.eclipse.jetty.server.Connector;
+import org.eclipse.jetty.util.component.ContainerLifeCycle;
 
-public class InstrumentedConnectionFactory implements ConnectionFactory {
+public class InstrumentedConnectionFactory extends ContainerLifeCycle implements ConnectionFactory {
     private final ConnectionFactory connectionFactory;
     private final Timer timer;
 
     public InstrumentedConnectionFactory(ConnectionFactory connectionFactory, Timer timer) {
         this.connectionFactory = connectionFactory;
         this.timer = timer;
+        addBean(connectionFactory);
     }
 
     @Override

File: metrics-log4j/src/main/java/com/yammer/metrics/log4j/InstrumentedAppender.java
Patch:
@@ -58,6 +58,8 @@ protected void append(LoggingEvent event) {
             case Level.FATAL_INT:
                 fatal.mark();
                 break;
+            default:
+                break;
         }
     }
 

File: metrics-logback/src/main/java/com/yammer/metrics/logback/InstrumentedAppender.java
Patch:
@@ -53,6 +53,8 @@ protected void append(ILoggingEvent event) {
             case Level.ERROR_INT:
                 error.mark();
                 break;
+            default:
+                break;
         }
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/MetricRegistry.java
Patch:
@@ -396,7 +396,7 @@ public boolean isInstance(Metric metric) {
         MetricBuilder<Histogram> HISTOGRAMS = new MetricBuilder<Histogram>() {
             @Override
             public Histogram newMetric() {
-                return new Histogram(SampleType.BIASED);
+                return new Histogram(ExponentiallyDecayingSample.create());
             }
 
             @Override

File: metrics-core/src/main/java/com/yammer/metrics/Timer.java
Patch:
@@ -16,7 +16,7 @@ public class Timer implements Metered, Sampling, Summarizable {
      * Creates a new {@link Timer}.
      */
     public Timer() {
-        this(SampleType.BIASED.newSample());
+        this(ExponentiallyDecayingSample.create());
     }
 
     /**

File: metrics-core/src/test/java/com/yammer/metrics/tests/HistogramTest.java
Patch:
@@ -1,15 +1,15 @@
 package com.yammer.metrics.tests;
 
 import com.yammer.metrics.Histogram;
-import com.yammer.metrics.SampleType;
 import com.yammer.metrics.Snapshot;
+import com.yammer.metrics.UniformSample;
 import org.junit.Test;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.offset;
 
 public class HistogramTest {
-    private final Histogram histogram = new Histogram(SampleType.UNIFORM);
+    private final Histogram histogram = new Histogram(UniformSample.create());
 
     @Test
     public void anEmptyHistogram() throws Exception {

File: metrics-core/src/test/java/com/yammer/metrics/tests/TimerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.yammer.metrics.tests;
 
 import com.yammer.metrics.Clock;
-import com.yammer.metrics.SampleType;
+import com.yammer.metrics.ExponentiallyDecayingSample;
 import com.yammer.metrics.Snapshot;
 import com.yammer.metrics.Timer;
 import org.junit.Test;
@@ -22,7 +22,7 @@ public long getTick() {
             return val += 50000000;
         }
     };
-    private final Timer timer = new Timer(SampleType.BIASED.newSample(), clock);
+    private final Timer timer = new Timer(ExponentiallyDecayingSample.create(), clock);
 
     @Test
     public void aBlankTimer() throws Exception {

File: metrics-servlets/src/test/java/com/yammer/metrics/servlets/tests/MetricsServletTest.java
Patch:
@@ -35,7 +35,8 @@ public Long getValue() {
         registry.counter("c").inc();
         registry.histogram("h").update(1);
         registry.register("m", new Meter(clock)).mark();
-        registry.register("t", new Timer(SampleType.BIASED.newSample(), clock)).update(1, TimeUnit.SECONDS);
+        registry.register("t", new Timer(ExponentiallyDecayingSample.create(), clock))
+                .update(1, TimeUnit.SECONDS);
 
         request.setMethod("GET");
         request.setURI("/metrics");

File: metrics-core/src/test/java/com/yammer/metrics/tests/MetricFilterTest.java
Patch:
@@ -5,13 +5,12 @@
 import org.junit.Test;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.mock;
 
 public class MetricFilterTest {
     @Test
     public void theAllFilterMatchesAllMetrics() throws Exception {
-        assertThat(MetricFilter.ALL.matches(anyString(), any(Metric.class)))
+        assertThat(MetricFilter.ALL.matches("", mock(Metric.class)))
                 .isTrue();
     }
 }

File: metrics-jetty8/src/main/java/com/yammer/metrics/jetty8/InstrumentedHandler.java
Patch:
@@ -50,7 +50,7 @@ public class InstrumentedHandler extends HandlerWrapper {
      * @param underlying the handler about which metrics will be collected
      */
     public InstrumentedHandler(MetricRegistry registry, Handler underlying) {
-    	this(registry, underlying, underlying.getClass());
+    	this(registry, underlying, underlying.getClass().getName());
     }
 
     /**

File: metrics-jersey/src/main/java/com/yammer/metrics/jersey/InstrumentedResourceMethodDispatchProvider.java
Patch:
@@ -67,6 +67,8 @@ private ExceptionMeteredRequestDispatcher(RequestDispatcher underlying,
         public void dispatch(Object resource, HttpContext httpContext) {
             try {
                 underlying.dispatch(resource, httpContext);
+            } catch (Error e) {
+                throw e;
             } catch (Throwable e) {
                 if (exceptionClass.isAssignableFrom(e.getClass()) ||
                         (e.getCause() != null && exceptionClass.isAssignableFrom(e.getCause().getClass()))) {

File: metrics-core/src/main/java/com/yammer/metrics/JmxReporter.java
Patch:
@@ -335,9 +335,9 @@ public void onCounterAdded(String name, Counter counter) {
                 final ObjectName objectName = createName("counters", name);
                 mBeanServer.registerMBean(new JmxCounter(counter, objectName), objectName);
             } catch (InstanceAlreadyExistsException e) {
-                LOGGER.debug("Unable to register gauge", e);
+                LOGGER.debug("Unable to register counter", e);
             } catch (JMException e) {
-                LOGGER.warn("Unable to register gauge", e);
+                LOGGER.warn("Unable to register counter", e);
             }
         }
 

File: metrics-core/src/main/java/com/yammer/metrics/Snapshot.java
Patch:
@@ -1,6 +1,7 @@
 package com.yammer.metrics;
 
 import java.io.*;
+import java.nio.charset.Charset;
 import java.util.*;
 
 import static java.lang.Math.floor;
@@ -9,6 +10,7 @@
  * A statistical snapshot of a {@link Snapshot}.
  */
 public class Snapshot {
+    private static final Charset UTF_8 = Charset.forName("UTF-8");
     private static final double MEDIAN_Q = 0.5;
     private static final double P75_Q = 0.75;
     private static final double P95_Q = 0.95;
@@ -150,7 +152,7 @@ public long[] getValues() {
      * @param output an output stream
      */
     public void dump(OutputStream output) {
-        final PrintWriter out = new PrintWriter(output);
+        final PrintWriter out = new PrintWriter(new OutputStreamWriter(output, UTF_8));
         try {
             for (long value : values) {
                 out.printf("%d%n", value);

File: metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java
Patch:
@@ -139,7 +139,7 @@ private void reportHistogram(String name, Histogram histogram) {
     private void reportCounter(String name, Counter counter) {
         final String group = group(name);
         try {
-            announce(name, group, counter.getCount(), "");
+            announce(name(name, "count"), group, counter.getCount(), "");
         } catch (GangliaException e) {
             LOGGER.warn("Unable to report counter {}", name, e);
         }

File: metrics-ganglia/src/test/java/com/yammer/metrics/ganglia/tests/GangliaReporterTest.java
Patch:
@@ -118,7 +118,7 @@ public void reportsCounterValues() throws Exception {
                         this.<Meter>map(),
                         this.<Timer>map());
 
-        verify(ganglia).announce("test.counter", "100", GMetricType.DOUBLE, "", GMetricSlope.BOTH, 60, 0, "test");
+        verify(ganglia).announce("test.counter.count", "100", GMetricType.DOUBLE, "", GMetricSlope.BOTH, 60, 0, "test");
         verifyNoMoreInteractions(ganglia);
     }
 

File: metrics-core/src/main/java/com/yammer/metrics/Clock.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.core;
+package com.yammer.metrics;
 
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadMXBean;
@@ -30,13 +30,12 @@ public long getTime() {
      *
      * @return the default {@link Clock} instance
      *
-     * @see com.yammer.metrics.core.Clock.UserTimeClock
+     * @see Clock.UserTimeClock
      */
     public static Clock defaultClock() {
         return DEFAULT;
     }
 
-
     /**
      * A clock implementation which returns the current time in epoch nanoseconds.
      */

File: metrics-core/src/main/java/com/yammer/metrics/Counter.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.core;
+package com.yammer.metrics;
 
 import java.util.concurrent.atomic.AtomicLong;
 
@@ -8,7 +8,7 @@
 public class Counter implements Metric {
     private final AtomicLong count;
 
-    Counter() {
+    public Counter() {
         this.count = new AtomicLong(0);
     }
 

File: metrics-core/src/main/java/com/yammer/metrics/EWMA.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.stats;
+package com.yammer.metrics;
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;

File: metrics-core/src/main/java/com/yammer/metrics/ExponentiallyDecayingSample.java
Patch:
@@ -1,6 +1,4 @@
-package com.yammer.metrics.stats;
-
-import com.yammer.metrics.core.Clock;
+package com.yammer.metrics;
 
 import java.util.ArrayList;
 import java.util.concurrent.ConcurrentSkipListMap;

File: metrics-core/src/main/java/com/yammer/metrics/Gauge.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.core;
+package com.yammer.metrics;
 
 
 /**
@@ -15,7 +15,7 @@
  *
  * @param <T> the type of the metric's value
  */
-public abstract class Gauge<T> implements Metric {
+public interface Gauge<T> extends Metric {
     /**
      * Returns the metric's current value.
      *

File: metrics-core/src/main/java/com/yammer/metrics/Metric.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.core;
+package com.yammer.metrics;
 
 /**
  * A tag interface to indicate that a class is a metric.

File: metrics-core/src/main/java/com/yammer/metrics/Sample.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.stats;
+package com.yammer.metrics;
 
 /**
  * A statistically representative sample of a data stream.

File: metrics-core/src/main/java/com/yammer/metrics/Sampling.java
Patch:
@@ -1,6 +1,4 @@
-package com.yammer.metrics.core;
-
-import com.yammer.metrics.stats.Snapshot;
+package com.yammer.metrics;
 
 /**
  * An object which samples values.

File: metrics-core/src/main/java/com/yammer/metrics/Summarizable.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.core;
+package com.yammer.metrics;
 
 /**
  * An object which can produce statistical summaries.

File: metrics-core/src/main/java/com/yammer/metrics/ThreadLocalRandom.java
Patch:
@@ -6,7 +6,7 @@
  * http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/ThreadLocalRandom.java?view=markup
  */
 
-package com.yammer.metrics.stats;
+package com.yammer.metrics;
 
 import java.util.Random;
 

File: metrics-core/src/main/java/com/yammer/metrics/UniformSample.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.stats;
+package com.yammer.metrics;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -74,7 +74,7 @@ private static long nextLong(long n) {
 
     @Override
     public Snapshot getSnapshot() {
-        final int s = size();
+        final int s = (int) size();
         final List<Long> copy = new ArrayList<Long>(s);
         for (int i = 0; i < s; i++) {
             copy.add(values.get(i));

File: metrics-core/src/main/java/com/yammer/metrics/reporting/AbstractPollingReporter.java
Patch:
@@ -60,7 +60,7 @@ protected AbstractPollingReporter(MetricsRegistry registry, String name) {
      * @param unit      the unit for {@code period}
      */
     public void start(long period, TimeUnit unit) {
-        executor.scheduleWithFixedDelay(this, period, period, unit);
+        executor.scheduleAtFixedRate(this, period, period, unit);
     }
 
     @Override

File: metrics-core/src/main/java/com/yammer/metrics/reporting/AbstractPollingReporter.java
Patch:
@@ -32,7 +32,7 @@ protected AbstractPollingReporter(MetricsRegistry registry, String name) {
      * @param unit      the unit for {@code period}
      */
     public void start(long period, TimeUnit unit) {
-        executor.scheduleWithFixedDelay(this, period, period, unit);
+        executor.scheduleAtFixedRate(this, period, period, unit);
     }
 
     /**

File: metrics-core/src/test/java/com/yammer/metrics/reporting/tests/CsvReporterTest.java
Patch:
@@ -43,8 +43,8 @@ public String[] expectedMeterResult() {
 
     @Override
     public String[] expectedTimerResult() {
-        return new String[]{"# time,min,max,mean,median,stddev,95%,99%,99.9%",
-                            "5,1.0,3.0,2.0,0.4995,1.5,0.9499499999999999,0.98999,0.998999\n"};
+        return new String[]{"# time,count,1 min rate,mean rate,5 min rate,15 min rate,min,max,mean,median,stddev,95%,99%,99.9%",
+                            "5,1,1.0,2.0,5.0,15.0,1.0,3.0,2.0,0.4995,1.5,0.9499499999999999,0.98999,0.998999\n"};
     }
 
     @Override

File: metrics-core/src/main/java/com/yammer/metrics/reporting/JmxReporter.java
Patch:
@@ -412,7 +412,7 @@ private ObjectName createObjectName(MetricName name) throws MalformedObjectNameE
         }
         if (!name.getName().isEmpty()) {
             nameBuilder.append(",name=");
-            nameBuilder.append(name);
+            nameBuilder.append(name.getName());
         }
         return new ObjectName(nameBuilder.toString());
     }

File: metrics-web/src/main/java/com/yammer/metrics/web/WebappMetricsFilter.java
Patch:
@@ -113,7 +113,8 @@ private void markMeterForStatusCode(int status) {
     }
 
     private static class StatusExposingServletResponse extends HttpServletResponseWrapper {
-        private int httpStatus;
+        // The Servlet spec says: calling setStatus is optional, if no status is set, the default is 200.
+        private int httpStatus = 200;
 
         public StatusExposingServletResponse(HttpServletResponse response) {
             super(response);

File: metrics-web/src/main/java/com/yammer/metrics/web/WebappMetricsFilter.java
Patch:
@@ -113,7 +113,7 @@ private void markMeterForStatusCode(int status) {
     }
 
     private static class StatusExposingServletResponse extends HttpServletResponseWrapper {
-	// The Servlet spec says: calling setStatus is optional, if no status is set, the default is 200.
+        // The Servlet spec says: calling setStatus is optional, if no status is set, the default is 200.
         private int httpStatus = 200;
 
         public StatusExposingServletResponse(HttpServletResponse response) {

File: metrics-web/src/main/java/com/yammer/metrics/web/WebappMetricsFilter.java
Patch:
@@ -113,7 +113,8 @@ private void markMeterForStatusCode(int status) {
     }
 
     private static class StatusExposingServletResponse extends HttpServletResponseWrapper {
-        private int httpStatus;
+	// The Servlet spec says: calling setStatus is optional, if no status is set, the default is 200.
+        private int httpStatus = 200;
 
         public StatusExposingServletResponse(HttpServletResponse response) {
             super(response);

File: metrics-core/src/main/java/com/yammer/metrics/reporting/JmxReporter.java
Patch:
@@ -396,7 +396,7 @@ public void onMetricAdded(MetricName name, Metric metric) {
             try {
                 dispatcher.dispatch(metric, name, this, new Context(name, createObjectName(name)));
             } catch (Exception e) {
-                LOGGER.warn("Error processing {}", name, e);
+                LOGGER.warn("Error processing " + name, e);
             }
         }
     }
@@ -490,9 +490,9 @@ private void unregisterBean(ObjectName name) {
             // This is often thrown when the process is shutting down. An application with lots of
             // metrics will often begin unregistering metrics *after* JMX itself has cleared,
             // resulting in a huge dump of exceptions as the process is exiting.
-            LOGGER.trace("Error unregistering {}", name, e);
+            LOGGER.trace("Error unregistering " + name, e);
         } catch (MBeanRegistrationException e) {
-            LOGGER.debug("Error unregistering {}", name, e);
+            LOGGER.debug("Error unregistering " + name, e);
         }
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/util/DeathRattleExceptionHandler.java
Patch:
@@ -50,6 +50,6 @@ public DeathRattleExceptionHandler(Counter counter) {
     @Override
     public void uncaughtException(Thread t, Throwable e) {
         counter.inc();
-        LOGGER.error("Uncaught exception on thread {}", t, e);
+        LOGGER.error("Uncaught exception on thread " + t, e);
     }
 }

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/MetricsServlet.java
Patch:
@@ -296,7 +296,7 @@ public void writeRegularMetrics(JsonGenerator json, String classPrefix, boolean
                         try {
                             dispatcher.dispatch(subEntry.getValue(), subEntry.getKey(), this, new Context(json, showFullSamples));
                         } catch (Exception e) {
-                            LOGGER.warn("Error writing out {}", subEntry.getKey(), e);
+                            LOGGER.warn("Error writing out " + subEntry.getKey(), e);
                         }
                     }
                 }

File: metrics-core/src/main/java/com/yammer/metrics/core/Meter.java
Patch:
@@ -86,7 +86,6 @@ private void tickIfNecessary() {
         final long age = newTick - oldTick;
         if (age > TICK_INTERVAL && lastTick.compareAndSet(oldTick, newTick)) {
             final long requiredTicks = age / TICK_INTERVAL;
-            System.out.println("requiredTicks = " + requiredTicks);
             for (long i = 0; i < requiredTicks; i++) {
                 tick();
             }

File: metrics-core/src/main/java/com/yammer/metrics/Metrics.java
Patch:
@@ -338,7 +338,6 @@ public static MetricsRegistry defaultRegistry() {
      */
     public static void shutdown() {
         try {
-            DEFAULT_REGISTRY.shutdown();
             JmxReporter.shutdownDefault();
             Runtime.getRuntime().removeShutdownHook(SHUTDOWN_HOOK);
         } catch (IllegalStateException ignored) {}

File: metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java
Patch:
@@ -28,7 +28,7 @@
  * from Hadoop.
  */
 public class GangliaReporter extends AbstractPollingReporter implements MetricProcessor<String> {
-    /* for use as units parameter to sendMetricData() */
+    /* for use as metricType parameter to sendMetricData() */
     public static final String GANGLIA_INT_TYPE = "int32";
     public static final String GANGLIA_DOUBLE_TYPE = "double";
     public static final String GANGLIA_STRING_TYPE = "string";

File: metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaMessage.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.ganglia;
 
 import java.io.IOException;
 import java.net.DatagramPacket;

File: metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaMessageBuilder.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.ganglia;
 
 import java.net.DatagramSocket;
 import java.net.InetSocketAddress;

File: metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java
Patch:
@@ -1,7 +1,8 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.ganglia;
 
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.*;
+import com.yammer.metrics.reporting.AbstractPollingReporter;
 import com.yammer.metrics.stats.Snapshot;
 import com.yammer.metrics.core.MetricPredicate;
 import org.slf4j.Logger;

File: metrics-ganglia/src/test/java/com/yammer/metrics/ganglia/GangliaMessageBuilderTest.java
Patch:
@@ -1,5 +1,6 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.ganglia;
 
+import com.yammer.metrics.ganglia.GangliaMessageBuilder;
 import org.junit.Test;
 
 import java.net.SocketException;

File: metrics-ganglia/src/test/java/com/yammer/metrics/ganglia/GangliaMessageTest.java
Patch:
@@ -1,5 +1,6 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.ganglia;
 
+import com.yammer.metrics.ganglia.GangliaMessage;
 import org.junit.Test;
 
 import static org.junit.Assert.assertArrayEquals;

File: metrics-graphite/src/main/java/com/yammer/metrics/graphite/GraphiteReporter.java
Patch:
@@ -1,7 +1,8 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.graphite;
 
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.*;
+import com.yammer.metrics.reporting.AbstractPollingReporter;
 import com.yammer.metrics.stats.Snapshot;
 import com.yammer.metrics.core.MetricPredicate;
 import org.slf4j.Logger;

File: metrics-graphite/src/main/java/com/yammer/metrics/graphite/SocketProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.graphite;
 
 import java.net.Socket;
 

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/AdminServlet.java
Patch:
@@ -1,7 +1,6 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.servlet;
 
 import javax.servlet.ServletConfig;
-import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/HealthCheckServlet.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.servlet;
 
 import com.yammer.metrics.HealthChecks;
 import com.yammer.metrics.core.HealthCheck;
@@ -18,7 +18,7 @@
  * and prints the results as a {@code text/plain} entity. Only responds to {@code GET} requests.
  * <p/>
  * If the servlet context has an attribute named
- * {@code com.yammer.metrics.reporting.HealthCheckServlet.registry} which is a
+ * {@code com.yammer.metrics.servlet.HealthCheckServlet.registry} which is a
  * {@link HealthCheckRegistry} instance, {@link HealthCheckServlet} will use it instead of
  * {@link HealthChecks}.
  */

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/MetricsServlet.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.servlet;
 
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.*;
@@ -27,7 +27,7 @@
  * requests.
  * <p/>
  * If the servlet context has an attribute named
- * {@code com.yammer.metrics.reporting.MetricsServlet.registry} which is a
+ * {@code com.yammer.metrics.servlet.MetricsServlet.registry} which is a
  * {@link MetricsRegistry} instance, {@link MetricsServlet} will use it instead of {@link Metrics}.
  * <p/>
  * {@link MetricsServlet} also takes an initialization parameter, {@code show-jvm-metrics}, which

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/MetricsServletContextListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.servlet;
 
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.MetricsRegistry;

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/PingServlet.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.servlet;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;

File: metrics-servlet/src/main/java/com/yammer/metrics/servlet/ThreadDumpServlet.java
Patch:
@@ -1,4 +1,4 @@
-package com.yammer.metrics.reporting;
+package com.yammer.metrics.servlet;
 
 import com.yammer.metrics.core.VirtualMachineMetrics;
 

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/experiments/ExampleServer.java
Patch:
@@ -12,7 +12,7 @@
 import com.yammer.metrics.jetty.InstrumentedHandler;
 import com.yammer.metrics.jetty.InstrumentedQueuedThreadPool;
 import com.yammer.metrics.jetty.InstrumentedSelectChannelConnector;
-import com.yammer.metrics.reporting.AdminServlet;
+import com.yammer.metrics.servlet.AdminServlet;
 
 public class ExampleServer {
     private static final Counter COUNTER_1 = Metrics.newCounter(ExampleServer.class, "wah", "doody");

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/tests/AdminServletTest.java
Patch:
@@ -1,6 +1,6 @@
-package com.yammer.metrics.reporting.tests;
+package com.yammer.metrics.servlet.tests;
 
-import com.yammer.metrics.reporting.*;
+import com.yammer.metrics.servlet.*;
 import org.junit.Before;
 import org.junit.Test;
 

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/tests/HealthCheckServletTest.java
Patch:
@@ -1,8 +1,8 @@
-package com.yammer.metrics.reporting.tests;
+package com.yammer.metrics.servlet.tests;
 
 import com.yammer.metrics.core.HealthCheck;
 import com.yammer.metrics.core.HealthCheckRegistry;
-import com.yammer.metrics.reporting.HealthCheckServlet;
+import com.yammer.metrics.servlet.HealthCheckServlet;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.invocation.InvocationOnMock;

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/tests/MetricsServletContextListenerTest.java
Patch:
@@ -1,8 +1,8 @@
-package com.yammer.metrics.reporting.tests;
+package com.yammer.metrics.servlet.tests;
 
 import com.yammer.metrics.core.MetricsRegistry;
-import com.yammer.metrics.reporting.MetricsServlet;
-import com.yammer.metrics.reporting.MetricsServletContextListener;
+import com.yammer.metrics.servlet.MetricsServlet;
+import com.yammer.metrics.servlet.MetricsServletContextListener;
 import org.junit.Test;
 
 import javax.servlet.ServletContext;

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/tests/PingServletTest.java
Patch:
@@ -1,6 +1,6 @@
-package com.yammer.metrics.reporting.tests;
+package com.yammer.metrics.servlet.tests;
 
-import com.yammer.metrics.reporting.PingServlet;
+import com.yammer.metrics.servlet.PingServlet;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/tests/ThreadDumpServletTest.java
Patch:
@@ -1,7 +1,7 @@
-package com.yammer.metrics.reporting.tests;
+package com.yammer.metrics.servlet.tests;
 
 import com.yammer.metrics.core.VirtualMachineMetrics;
-import com.yammer.metrics.reporting.ThreadDumpServlet;
+import com.yammer.metrics.servlet.ThreadDumpServlet;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/AdminServletTest.java
Patch:
@@ -42,10 +42,9 @@ public class AdminServletTest {
 
     @Before
     public void setUp() throws Exception {
-        when(request.getContextPath()).thenReturn("/context");
-
         when(config.getServletContext()).thenReturn(context);
 
+        when(request.getContextPath()).thenReturn("/context");
         when(request.getMethod()).thenReturn("GET");
         when(request.getServletPath()).thenReturn("/admin");
         when(response.getWriter()).thenReturn(new PrintWriter(new OutputStreamWriter(output)));
@@ -103,6 +102,7 @@ public void rendersAnHTMLPageOnMissingURI() throws Exception {
                               "</ul>\n</body>\n</html>\n"));
     }
 
+    @Test
     public void displaysServiceNameIfSet() throws Exception {
         when(request.getPathInfo()).thenReturn("/");
 

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/AdminServlet.java
Patch:
@@ -80,7 +80,7 @@ public void init(ServletConfig config) throws ServletException {
         pingServlet.init(config);
         threadDumpServlet.init(config);
 
-        final ServletContext context = config.getServletContext();
+        //final ServletContext context = config.getServletContext();
         this.metricsUri = getParam(config.getInitParameter("metrics-uri"), this.metricsUri);
         this.pingUri = getParam(config.getInitParameter("ping-uri"), this.pingUri);
         this.threadsUri = getParam(config.getInitParameter("threads-uri"), this.threadsUri);

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/AdminServletTest.java
Patch:
@@ -42,7 +42,7 @@ public class AdminServletTest {
 
     @Before
     public void setUp() throws Exception {
-        when(context.getContextPath()).thenReturn("/context");
+        when(request.getContextPath()).thenReturn("/context");
 
         when(config.getServletContext()).thenReturn(context);
 

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/AdminServletTest.java
Patch:
@@ -42,7 +42,7 @@ public class AdminServletTest {
 
     @Before
     public void setUp() throws Exception {
-        when(context.getContextPath()).thenReturn("/context");
+        when(request.getContextPath()).thenReturn("/context");
 
         when(config.getServletContext()).thenReturn(context);
 

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/AdminServlet.java
Patch:
@@ -80,7 +80,7 @@ public void init(ServletConfig config) throws ServletException {
         pingServlet.init(config);
         threadDumpServlet.init(config);
 
-        final ServletContext context = config.getServletContext();
+        //final ServletContext context = config.getServletContext();
         this.metricsUri = getParam(config.getInitParameter("metrics-uri"), this.metricsUri);
         this.pingUri = getParam(config.getInitParameter("ping-uri"), this.pingUri);
         this.threadsUri = getParam(config.getInitParameter("threads-uri"), this.threadsUri);

File: contribs/metrics-sigar/src/main/java/com/yammer/metrics/sigar/CpuMetrics.java
Patch:
@@ -55,12 +55,12 @@ public static CpuTime fromSigarBean(CpuPerc cp) {
 
     public void registerGauges(MetricsRegistry registry) {
         registry.newGauge(getClass(), "total-cores", new Gauge<Integer>() {
-            public Integer value() {
+            public Integer getValue() {
                 return totalCoreCount();
             }
         });
         registry.newGauge(getClass(), "physical-cpus", new Gauge<Integer>() {
-            public Integer value() {
+            public Integer getValue() {
                 return physicalCpuCount();
             }
         });

File: contribs/metrics-sigar/src/main/java/com/yammer/metrics/sigar/SigarMetrics.java
Patch:
@@ -32,7 +32,7 @@ public void registerGauges() {
 
     public void registerGauges(MetricsRegistry registry) {
         registry.newGauge(getClass(), "pid", new Gauge<Long>() {
-          public Long value() {
+          public Long getValue() {
             return pid();
           }
         });     

File: contribs/metrics-sigar/src/main/java/com/yammer/metrics/sigar/UlimitMetrics.java
Patch:
@@ -92,12 +92,12 @@ public Ulimit ulimit() {
 
     public void registerGauges(MetricsRegistry registry) {
         registry.newGauge(getClass(), "ulimit-open-files", new Gauge<Long>() {
-            public Long value() {
+            public Long getValue() {
                 return ulimit().openFiles();
             }
         });
         registry.newGauge(getClass(), "ulimit-stack-size", new Gauge<Long>() {
-            public Long value() {
+            public Long getValue() {
                 return ulimit().stackSize();
             }
         });

File: metrics-sigar/src/main/java/com/yammer/metrics/sigar/CpuMetrics.java
Patch:
@@ -148,7 +148,7 @@ public List<CpuTime> cpus() {
     private CpuInfo cpuInfo() {
         try {
             CpuInfo[] infos = sigar.getCpuInfoList();
-            if (infos == null | infos.length == 0) {
+            if (infos == null || infos.length == 0) {
                 return null;
             }
             return infos[0];

File: metrics-sigar/src/main/java/com/yammer/metrics/sigar/AbstractSigarMetric.java
Patch:
@@ -2,12 +2,10 @@
 
 import org.hyperic.sigar.Sigar;
 
-abstract class AbstractSigarMetric {
+abstract class AbstractSigarMetric implements CanRegisterGauges {
     protected final Sigar sigar;
 
     protected AbstractSigarMetric(Sigar sigar) {
         this.sigar = sigar;
     }
-
-    protected abstract void registerGauges();
 }

File: metrics-sigar/src/main/java/com/yammer/metrics/sigar/CpuMetrics.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.Gauge;
+import com.yammer.metrics.core.MetricsRegistry;
 
 import org.hyperic.sigar.CpuInfo;
 import org.hyperic.sigar.CpuPerc;
@@ -51,9 +52,8 @@ public static CpuTime fromSigarBean(CpuPerc cp) {
         public double irq() { return irq; }
     }
 
-    @Override
-    protected void registerGauges() {
-        Metrics.newGauge(getClass(), "total-cores", new Gauge<Integer>() {
+    public void registerGauges(MetricsRegistry registry) {
+        registry.newGauge(getClass(), "total-cores", new Gauge<Integer>() {
             public Integer value() {
                 return totalCoreCount();
             }

File: metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java
Patch:
@@ -134,7 +134,7 @@ public CsvReporter(MetricsRegistry metricsRegistry,
      * @throws IOException if there is an error opening the stream
      */
     protected PrintStream createStreamForMetric(MetricName metricName) throws IOException {
-        final File newFile = new File(outputDir, metricName.getName() + ".csv");
+        final File newFile = new File(outputDir, metricName.toString() + ".csv");
         if (newFile.createNewFile()) {
             return new PrintStream(new FileOutputStream(newFile));
         }

File: metrics-guice/src/main/java/com/yammer/metrics/guice/InstrumentationModule.java
Patch:
@@ -1,6 +1,7 @@
 package com.yammer.metrics.guice;
 
 import com.google.inject.AbstractModule;
+import com.google.inject.Scopes;
 import com.google.inject.matcher.Matchers;
 import com.yammer.metrics.HealthChecks;
 import com.yammer.metrics.Metrics;
@@ -36,7 +37,7 @@ protected void configure() {
      * Override to provide a custom binding for {@link JmxReporter}
      */
     protected void bindJmxReporter() {
-        bind(JmxReporter.class).toInstance(JmxReporter.getDefault());
+        bind(JmxReporter.class).toProvider(JmxReporterProvider.class).in(Scopes.SINGLETON);
     }
 
     /**

File: metrics-guice/src/main/java/com/yammer/metrics/guice/InstrumentationModule.java
Patch:
@@ -1,6 +1,7 @@
 package com.yammer.metrics.guice;
 
 import com.google.inject.AbstractModule;
+import com.google.inject.Scopes;
 import com.google.inject.matcher.Matchers;
 import com.yammer.metrics.HealthChecks;
 import com.yammer.metrics.Metrics;
@@ -36,7 +37,7 @@ protected void configure() {
      * Override to provide a custom binding for {@link JmxReporter}
      */
     protected void bindJmxReporter() {
-        bind(JmxReporter.class).toInstance(JmxReporter.getDefault());
+        bind(JmxReporter.class).toProvider(JmxReporterProvider.class).in(Scopes.SINGLETON);
     }
 
     /**

File: metrics-spring/src/main/java/com/yammer/metrics/spring/config/MetricsRegistryBeanDefinitionParser.java
Patch:
@@ -15,11 +15,11 @@ protected Class<?> getBeanClass(Element element) {
     }
 
     @Override
-    protected void doParse(Element element, BeanDefinitionBuilder builder) {
+    protected void doParse(Element element, BeanDefinitionBuilder builder) {
         String clock = element.getAttribute("clock");
         if (StringUtils.hasText(clock)) {
             builder.addConstructorArgReference(clock);
         }
-    }
+    }
 
 }

File: metrics-spring/src/test/java/com/yammer/metrics/spring/AutowiredCollaborator.java
Patch:
@@ -6,9 +6,9 @@ public class AutowiredCollaborator {
 
     @Autowired
     private ProxyTargetClass dependency;
-
+
     public ProxyTargetClass getDependency() {
         return dependency;
-    }
+    }
 
 }
\ No newline at end of file

File: metrics-spring/src/test/java/com/yammer/metrics/spring/BogusException.java
Patch:
@@ -1,3 +1,3 @@
-package com.yammer.metrics.spring;
-
+package com.yammer.metrics.spring;
+
 public class BogusException extends Throwable {}
\ No newline at end of file

File: metrics-guice/src/main/java/com/yammer/metrics/guice/InstrumentationModule.java
Patch:
@@ -36,7 +36,7 @@ protected void configure() {
      * Override to provide a custom binding for {@link JmxReporter}
      */
     protected void bindJmxReporter() {
-        bind(JmxReporter.class).toProvider(JmxReporterProvider.class).asEagerSingleton();
+        bind(JmxReporter.class).toInstance(JmxReporter.getDefault());
     }
 
     /**

File: metrics-guice/src/main/java/com/yammer/metrics/guice/InstrumentationModule.java
Patch:
@@ -36,7 +36,7 @@ protected void configure() {
      * Override to provide a custom binding for {@link JmxReporter}
      */
     protected void bindJmxReporter() {
-        bind(JmxReporter.class).toProvider(JmxReporterProvider.class).asEagerSingleton();
+        bind(JmxReporter.class).toInstance(JmxReporter.getDefault());
     }
 
     /**

File: metrics-spring/src/main/java/com/yammer/metrics/spring/config/MetricsRegistryBeanDefinitionParser.java
Patch:
@@ -15,11 +15,11 @@ protected Class<?> getBeanClass(Element element) {
     }
 
     @Override
-    protected void doParse(Element element, BeanDefinitionBuilder builder) {
+    protected void doParse(Element element, BeanDefinitionBuilder builder) {
         String clock = element.getAttribute("clock");
         if (StringUtils.hasText(clock)) {
             builder.addConstructorArgReference(clock);
         }
-    }
+    }
 
 }

File: metrics-spring/src/test/java/com/yammer/metrics/spring/AutowiredCollaborator.java
Patch:
@@ -6,9 +6,9 @@ public class AutowiredCollaborator {
 
     @Autowired
     private ProxyTargetClass dependency;
-
+
     public ProxyTargetClass getDependency() {
         return dependency;
-    }
+    }
 
 }
\ No newline at end of file

File: metrics-spring/src/test/java/com/yammer/metrics/spring/BogusException.java
Patch:
@@ -1,3 +1,3 @@
-package com.yammer.metrics.spring;
-
+package com.yammer.metrics.spring;
+
 public class BogusException extends Throwable {}
\ No newline at end of file

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/HistogramTest.java
Patch:
@@ -101,7 +101,7 @@ public void aHistogramWith1000Elements() throws Exception {
                    histogram.stdDev(),
                    is(closeTo(288.8194360957494, 0.0001)));
         
-        assertThat("the histogram has a sum of 499500",
+        assertThat("the histogram has a sum of 500500",
                    histogram.sum(),
                    is(closeTo(500500, 0.1)));
 

File: metrics-spring/src/test/java/com/yammer/metrics/spring/BogusException.java
Patch:
@@ -0,0 +1,3 @@
+package com.yammer.metrics.spring;
+
+public class BogusException extends Throwable {}
\ No newline at end of file

File: metrics-spring/src/test/java/com/yammer/metrics/spring/ProxyTargetClass.java
Patch:
@@ -1,10 +1,7 @@
 package com.yammer.metrics.spring;
 
-import org.springframework.stereotype.Component;
-
 import com.yammer.metrics.annotation.Timed;
 
-@Component
 public class ProxyTargetClass implements UselessInterface {
 
 	@Timed

File: metrics-spring/src/test/java/com/yammer/metrics/spring/ProxyTargetClassTest.java
Patch:
@@ -21,6 +21,7 @@ public void negativeContextLoadingTest() {
     public void positiveContextLoadingTest() {
         ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("classpath:proxy-target-class.xml");
         assertNotNull("Expected to be able to get ProxyTargetClass by class.",ctx.getBean(ProxyTargetClass.class));
+        assertNotNull("Expected to be able to get ProxyTargetClass from AutowiredCollaborator.",ctx.getBean(AutowiredCollaborator.class).getDependency());
 	}
 
 }
\ No newline at end of file

File: metrics-spring/src/test/java/com/yammer/metrics/spring/UselessInterface.java
Patch:
@@ -3,5 +3,4 @@
 /**
  * Empty interface to trick Spring.
  */
-public interface UselessInterface {
-}
+public interface UselessInterface {}
\ No newline at end of file

File: metrics-jersey/src/test/java/com/yammer/metrics/jersey/tests/MetricsJerseyTest.java
Patch:
@@ -57,7 +57,7 @@ public void meteredMethodsAreMetered() {
     @Test
     public void exceptionMeteredMethodsAreExceptionMetered() {
         final Meter meter = Metrics.newMeter(InstrumentedResource.class, "exceptionMeteredExceptions", "blah", TimeUnit.SECONDS);
-
+        
         assertThat(resource().path("exception-metered").get(String.class),
                    is("fuh"));
 

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/AdminServletTest.java
Patch:
@@ -70,7 +70,7 @@ public void rendersAnHTMLPageOnRoot() throws Exception {
         verify(response).setStatus(200);
         verify(response).setContentType("text/html");
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n        " +
                               "\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  " +
                               "<title>Metrics</title>\n</head>\n<body>\n  " +
@@ -91,7 +91,7 @@ public void rendersAnHTMLPageOnMissingURI() throws Exception {
         verify(response).setStatus(200);
         verify(response).setContentType("text/html");
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n        " +
                               "\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  " +
                               "<title>Metrics</title>\n</head>\n<body>\n  " +

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/HealthCheckServletTest.java
Patch:
@@ -47,7 +47,7 @@ public void returnsNotImplementedIfNoHealthChecksAreRegistered() throws Exceptio
 
         servlet.service(request, response);
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("! No health checks registered.\n"));
 
         verify(response).setStatus(501);
@@ -89,7 +89,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
 
         servlet.service(request, response);
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is(
                            "! one: ERROR\n" +
                                    "!  msg\n" +

File: metrics-jersey/src/test/java/com/yammer/metrics/jersey/tests/MetricsJerseyTest.java
Patch:
@@ -57,7 +57,7 @@ public void meteredMethodsAreMetered() {
     @Test
     public void exceptionMeteredMethodsAreExceptionMetered() {
         final Meter meter = Metrics.newMeter(InstrumentedResource.class, "exceptionMeteredExceptions", "blah", TimeUnit.SECONDS);
-
+        
         assertThat(resource().path("exception-metered").get(String.class),
                    is("fuh"));
 

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/AdminServletTest.java
Patch:
@@ -70,7 +70,7 @@ public void rendersAnHTMLPageOnRoot() throws Exception {
         verify(response).setStatus(200);
         verify(response).setContentType("text/html");
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n        " +
                               "\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  " +
                               "<title>Metrics</title>\n</head>\n<body>\n  " +
@@ -91,7 +91,7 @@ public void rendersAnHTMLPageOnMissingURI() throws Exception {
         verify(response).setStatus(200);
         verify(response).setContentType("text/html");
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n        " +
                               "\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  " +
                               "<title>Metrics</title>\n</head>\n<body>\n  " +

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/HealthCheckServletTest.java
Patch:
@@ -47,7 +47,7 @@ public void returnsNotImplementedIfNoHealthChecksAreRegistered() throws Exceptio
 
         servlet.service(request, response);
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("! No health checks registered.\n"));
 
         verify(response).setStatus(501);
@@ -89,7 +89,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
 
         servlet.service(request, response);
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is(
                            "! one: ERROR\n" +
                                    "!  msg\n" +

File: metrics-annotation/src/main/java/com/yammer/metrics/annotation/Gauge.java
Patch:
@@ -22,5 +22,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface Gauge {
+    String group() default "";
+    String type() default "";
     String name() default "";
 }

File: metrics-jersey/src/test/java/com/yammer/metrics/jersey/tests/MetricsJerseyTest.java
Patch:
@@ -6,6 +6,7 @@
 import com.sun.jersey.test.framework.LowLevelAppDescriptor;
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.Meter;
+import com.yammer.metrics.core.MetricsRegistry;
 import com.yammer.metrics.core.Timer;
 import com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchAdapter;
 import com.yammer.metrics.jersey.tests.resources.InstrumentedResource;
@@ -57,7 +58,7 @@ public void meteredMethodsAreMetered() {
     @Test
     public void exceptionMeteredMethodsAreExceptionMetered() {
         final Meter meter = Metrics.newMeter(InstrumentedResource.class, "exceptionMeteredExceptions", "blah", TimeUnit.SECONDS);
-
+        
         assertThat(resource().path("exception-metered").get(String.class),
                    is("fuh"));
 

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/AdminServletTest.java
Patch:
@@ -70,7 +70,7 @@ public void rendersAnHTMLPageOnRoot() throws Exception {
         verify(response).setStatus(200);
         verify(response).setContentType("text/html");
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n        " +
                               "\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  " +
                               "<title>Metrics</title>\n</head>\n<body>\n  " +
@@ -91,7 +91,7 @@ public void rendersAnHTMLPageOnMissingURI() throws Exception {
         verify(response).setStatus(200);
         verify(response).setContentType("text/html");
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n        " +
                               "\"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  " +
                               "<title>Metrics</title>\n</head>\n<body>\n  " +

File: metrics-servlet/src/test/java/com/yammer/metrics/reporting/tests/HealthCheckServletTest.java
Patch:
@@ -47,7 +47,7 @@ public void returnsNotImplementedIfNoHealthChecksAreRegistered() throws Exceptio
 
         servlet.service(request, response);
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is("! No health checks registered.\n"));
 
         verify(response).setStatus(501);
@@ -89,7 +89,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
 
         servlet.service(request, response);
 
-        assertThat(output.toString(),
+        assertThat(output.toString().replaceAll("\r\n", "\n"),
                    is(
                            "! one: ERROR\n" +
                                    "!  msg\n" +

File: metrics-graphite/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -340,7 +340,7 @@ private void printVmMetrics(long epoch) {
         sendFloat(epoch, "jvm.memory", "heap_usage", vm.heapUsage());
         sendFloat(epoch, "jvm.memory", "non_heap_usage", vm.nonHeapUsage());
         for (Entry<String, Double> pool : vm.memoryPoolUsage().entrySet()) {
-            sendFloat(epoch, "jvm.memory.memory_pool_usages", pool.getKey(), pool.getValue());
+            sendFloat(epoch, "jvm.memory.memory_pool_usages", sanitizeString(pool.getKey()), pool.getValue());
         }
 
         sendInt(epoch, "jvm", "daemon_thread_count", vm.daemonThreadCount());

File: metrics-graphite/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -353,7 +353,7 @@ private void printVmMetrics(long epoch) {
         }
 
         for (Entry<String, VirtualMachineMetrics.GarbageCollectorStats> entry : vm.garbageCollectors().entrySet()) {
-            final String name = "jvm.gc." + entry.getKey();
+            final String name = "jvm.gc." + sanitizeString(entry.getKey());
             sendInt(epoch, name, "time", entry.getValue().getTime(TimeUnit.MILLISECONDS));
             sendInt(epoch, name, "runs", entry.getValue().getRuns());
         }

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -345,7 +345,7 @@ public void threadDump(OutputStream out) {
         final ThreadInfo[] threads = this.threads.dumpAllThreads(true, true);
         final PrintWriter writer = new PrintWriter(out, true);
 
-        for (int ti = threads.length - 1; ti > 0; ti--) {
+        for (int ti = threads.length - 1; ti >= 0; ti--) {
             final ThreadInfo t = threads[ti];
             writer.printf("%s id=%d state=%s",
                           t.getThreadName(),

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -345,7 +345,7 @@ public void threadDump(OutputStream out) {
         final ThreadInfo[] threads = this.threads.dumpAllThreads(true, true);
         final PrintWriter writer = new PrintWriter(out, true);
 
-        for (int ti = threads.length - 1; ti > 0; ti--) {
+        for (int ti = threads.length - 1; ti >= 0; ti--) {
             final ThreadInfo t = threads[ti];
             writer.printf("%s id=%d state=%s",
                           t.getThreadName(),

File: metrics-ganglia/src/test/java/com/yammer/metrics/reporting/GangliaMessageBuilderTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-public class GangliaMessageBuilderTests {
+public class GangliaMessageBuilderTest {
     @Test
     public void providesCorrectHostAndPort() throws SocketException {
         final String hostName = "hostName";

File: metrics-ganglia/src/main/java/com/yammer/metrics/reporting/GangliaReporter.java
Patch:
@@ -165,7 +165,7 @@ public GangliaReporter(String gangliaHost, int port) throws IOException {
      *
      * @param gangliaHost          is ganglia server
      * @param port                 is port on which ganglia server is running
-     * @param compressPackageNames
+     * @param compressPackageNames whether or not Metrics' package names will be shortened
      * @throws java.io.IOException if there is an error connecting to the ganglia server
      */
     public GangliaReporter(String gangliaHost, int port, boolean compressPackageNames) throws IOException {

File: metrics-core/src/main/java/com/yammer/metrics/core/HealthCheck.java
Patch:
@@ -163,6 +163,8 @@ public String getName() {
     public Result execute() {
         try {
             return check();
+        } catch (Error e) {
+            throw e;
         } catch (Throwable e) {
             return Result.unhealthy(e);
         }

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -283,7 +283,8 @@ public void writeRegularMetrics(JsonGenerator json, String classPrefix, boolean
                         try {
                             subEntry.getValue().processWith(this, subEntry.getKey(), new Context(json, showFullSamples));
                         }
-                        catch(Exception ignored) {
+                        catch(Exception e) {
+                            LOGGER.warn("Error writing out " + subEntry.getKey(), e);
                         }
                     }
                 }

File: metrics-core/src/main/java/com/yammer/metrics/core/Timer.java
Patch:
@@ -26,7 +26,7 @@ public class Timer implements Metered, Stoppable, Sampling, Summarizable {
      * @param rateUnit     the scale unit for this timer's rate metrics
      */
     Timer(ScheduledExecutorService tickThread, TimeUnit durationUnit, TimeUnit rateUnit) {
-        this(tickThread, durationUnit, rateUnit, Clock.DEFAULT);
+        this(tickThread, durationUnit, rateUnit, Clock.defaultClock());
     }
 
     /**

File: metrics-core/src/main/java/com/yammer/metrics/reporting/ConsoleReporter.java
Patch:
@@ -72,7 +72,7 @@ public ConsoleReporter(PrintStream out) {
      *                        output
      */
     public ConsoleReporter(MetricsRegistry metricsRegistry, PrintStream out, MetricPredicate predicate) {
-        this(metricsRegistry, out, predicate, Clock.DEFAULT, TimeZone.getDefault());
+        this(metricsRegistry, out, predicate, Clock.defaultClock(), TimeZone.getDefault());
     }
 
     /**

File: metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java
Patch:
@@ -68,7 +68,7 @@ public CsvReporter(File outputDir, MetricsRegistry metricsRegistry) {
     public CsvReporter(MetricsRegistry metricsRegistry,
                        MetricPredicate predicate,
                        File outputDir) {
-        this(metricsRegistry, predicate, outputDir, Clock.DEFAULT);
+        this(metricsRegistry, predicate, outputDir, Clock.defaultClock());
     }
 
     /**

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/ClockTest.java
Patch:
@@ -35,7 +35,7 @@ public void userTimeClock() throws Exception {
 
     @Test
     public void defaultsToUserTime() throws Exception {
-        assertThat(Clock.DEFAULT,
+        assertThat(Clock.defaultClock(),
                    is(instanceOf(Clock.UserTimeClock.class)));
     }
 }

File: metrics-graphite/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -106,7 +106,7 @@ public static void enable(MetricsRegistry metricsRegistry, long period, TimeUnit
                                                                    predicate,
                                                                    new DefaultSocketProvider(host,
                                                                                              port),
-                                                                   Clock.DEFAULT);
+                                                                   Clock.defaultClock());
             reporter.start(period, unit);
         } catch (Exception e) {
             LOG.error("Error creating/starting Graphite reporter:", e);
@@ -139,7 +139,7 @@ public GraphiteReporter(MetricsRegistry metricsRegistry, String host, int port,
              prefix,
              MetricPredicate.ALL,
              new DefaultSocketProvider(host, port),
-             Clock.DEFAULT);
+             Clock.defaultClock());
     }
 
     /**

File: metrics-core/src/main/java/com/yammer/metrics/Metrics.java
Patch:
@@ -85,7 +85,7 @@ public static <T> Gauge<T> newGauge(MetricName metricName,
      *             instead
      */
     @Deprecated
-    @SuppressWarnings({"UnusedDeclaration", "deprecation"})
+    @SuppressWarnings({ "UnusedDeclaration", "deprecation" })
     public static JmxGauge newJmxGauge(Class<?> klass,
                                        String name,
                                        String objectName,
@@ -108,7 +108,7 @@ public static JmxGauge newJmxGauge(Class<?> klass,
      *             instead
      */
     @Deprecated
-    @SuppressWarnings({"UnusedDeclaration", "deprecation"})
+    @SuppressWarnings({ "UnusedDeclaration", "deprecation" })
     public static JmxGauge newJmxGauge(Class<?> klass,
                                        String name,
                                        String scope,
@@ -130,7 +130,7 @@ public static JmxGauge newJmxGauge(Class<?> klass,
      *             instead
      */
     @Deprecated
-    @SuppressWarnings({"UnusedDeclaration", "deprecation"})
+    @SuppressWarnings({ "UnusedDeclaration", "deprecation" })
     public static JmxGauge newJmxGauge(MetricName metricName,
                                        String objectName,
                                        String attribute) throws MalformedObjectNameException {

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricsRegistry.java
Patch:
@@ -79,7 +79,7 @@ public <T> Gauge<T> newGauge(MetricName metricName,
      * @deprecated use {@link #newGauge(Class, String, Gauge)} and {@link JmxGauge} instead
      */
     @Deprecated
-    @SuppressWarnings({"UnusedDeclaration", "deprecation"})
+    @SuppressWarnings({"UnusedDeclaration", "deprecation" })
     public JmxGauge newJmxGauge(Class<?> klass,
                                 String name,
                                 String objectName,

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -95,7 +95,7 @@ public MetricsServlet(MetricsRegistry metricsRegistry, HealthCheckRegistry healt
     }
 
     public MetricsServlet(MetricsRegistry metricsRegistry, HealthCheckRegistry healthCheckRegistry, JsonFactory factory, String healthcheckUri, String metricsUri, String pingUri, String threadsUri, boolean showJvmMetrics) {
-        this(metricsRegistry, healthCheckRegistry, VirtualMachineMetrics.INSTANCE, factory, metricsUri, pingUri, threadsUri, healthcheckUri, showJvmMetrics);
+        this(metricsRegistry, healthCheckRegistry, VirtualMachineMetrics.INSTANCE, factory, healthcheckUri, metricsUri, pingUri, threadsUri, showJvmMetrics);
     }
 
     public MetricsServlet(MetricsRegistry metricsRegistry, HealthCheckRegistry healthCheckRegistry, VirtualMachineMetrics vm, JsonFactory factory, String healthcheckUri, String metricsUri, String pingUri, String threadsUri, boolean showJvmMetrics) {

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -95,7 +95,7 @@ public MetricsServlet(MetricsRegistry metricsRegistry, HealthCheckRegistry healt
     }
 
     public MetricsServlet(MetricsRegistry metricsRegistry, HealthCheckRegistry healthCheckRegistry, JsonFactory factory, String healthcheckUri, String metricsUri, String pingUri, String threadsUri, boolean showJvmMetrics) {
-        this(metricsRegistry, healthCheckRegistry, VirtualMachineMetrics.INSTANCE, factory, metricsUri, pingUri, threadsUri, healthcheckUri, showJvmMetrics);
+        this(metricsRegistry, healthCheckRegistry, VirtualMachineMetrics.INSTANCE, factory, healthcheckUri, metricsUri, pingUri, threadsUri, showJvmMetrics);
     }
 
     public MetricsServlet(MetricsRegistry metricsRegistry, HealthCheckRegistry healthCheckRegistry, VirtualMachineMetrics vm, JsonFactory factory, String healthcheckUri, String metricsUri, String pingUri, String threadsUri, boolean showJvmMetrics) {

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricName.java
Patch:
@@ -40,7 +40,7 @@ public MetricName(String group, String type, String name) {
      * @param scope the scope of the {@link Metric}
      */
     public MetricName(Class<?> klass, String name, String scope) {
-        this(klass.getPackage() == null ? "": klass.getPackage().getName(),
+        this(klass.getPackage() == null ? "" : klass.getPackage().getName(),
              klass.getSimpleName().replaceAll("\\$$", ""),
              name,
              scope);

File: metrics-core/src/main/java/com/yammer/metrics/reporting/CsvReporter.java
Patch:
@@ -96,8 +96,8 @@ public PrintStream getStream(String header) throws IOException {
         }
     }
 
-    public static interface Context {
-        public PrintStream getStream(String header) throws IOException;
+    public interface Context {
+        PrintStream getStream(String header) throws IOException;
     }
 
     @Override

File: metrics-core/src/main/java/com/yammer/metrics/reporting/JmxReporter.java
Patch:
@@ -23,7 +23,7 @@ public interface MetricMBean {
         ObjectName objectName();
     }
 
-    private static abstract class AbstractBean implements MetricMBean {
+    private abstract static class AbstractBean implements MetricMBean {
         private final ObjectName objectName;
 
         protected AbstractBean(ObjectName objectName) {

File: metrics-core/src/main/java/com/yammer/metrics/util/MetricPredicate.java
Patch:
@@ -11,7 +11,7 @@ public interface MetricPredicate {
     /**
      * A predicate which matches all inputs.
      */
-    public static final MetricPredicate ALL = new MetricPredicate() {
+    static final MetricPredicate ALL = new MetricPredicate() {
         @Override
         public boolean matches(MetricName name, Metric metric) {
             return true;

File: metrics-core/src/main/java/com/yammer/metrics/core/Counter.java
Patch:
@@ -36,7 +36,7 @@ public void dec() {
     }
 
     /**
-     * Decrement the counter by {@code n}
+     * Decrement the counter by {@code n}.
      *
      * @param n the amount by which the counter will be increased
      */

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/ClockTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ClockTest {
     @Test
     public void cpuTimeClock() throws Exception {
-        final Clock.CpuTime clock = new Clock.CpuTime();
+        final Clock.CpuTimeClock clock = new Clock.CpuTimeClock();
 
         assertThat((double) clock.time(),
                    is(closeTo(System.currentTimeMillis(), 100)));
@@ -24,7 +24,7 @@ public void cpuTimeClock() throws Exception {
 
     @Test
     public void userTimeClock() throws Exception {
-        final Clock.UserTime clock = new Clock.UserTime();
+        final Clock.UserTimeClock clock = new Clock.UserTimeClock();
 
         assertThat((double) clock.time(),
                    is(closeTo(System.currentTimeMillis(), 100)));
@@ -36,6 +36,6 @@ public void userTimeClock() throws Exception {
     @Test
     public void defaultsToUserTime() throws Exception {
         assertThat(Clock.DEFAULT,
-                   is(instanceOf(Clock.UserTime.class)));
+                   is(instanceOf(Clock.UserTimeClock.class)));
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -45,6 +45,7 @@ public double totalInit() {
         return getMemoryMXBean().getHeapMemoryUsage().getInit() +
                 getMemoryMXBean().getNonHeapMemoryUsage().getInit();
     }
+
     /**
      * Returns the total memory currently used by the current JVM.
      *
@@ -53,7 +54,8 @@ public double totalInit() {
     public double totalUsed() {
         return getMemoryMXBean().getHeapMemoryUsage().getUsed() +
                 getMemoryMXBean().getNonHeapMemoryUsage().getUsed();
-  	}
+    }
+
     /**
      * Returns the total memory currently used by the current JVM.
      *

File: metrics-core/src/main/java/com/yammer/metrics/reporting/ConsoleReporter.java
Patch:
@@ -228,7 +228,8 @@ private String abbrev(TimeUnit unit) {
                 return "h";
             case DAYS:
                 return "d";
+            default:
+                throw new IllegalArgumentException("Unrecognized TimeUnit: " + unit);
         }
-        throw new IllegalArgumentException("Unrecognized TimeUnit: " + unit);
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/util/ThreadPools.java
Patch:
@@ -21,7 +21,7 @@ public ScheduledExecutorService newScheduledThreadPool(int poolSize, String name
             // instead of just doing the usual putIfAbsent dance, we lock the
             // damn thing, check to see if anyone else put a thread pool in
             // there while we weren't watching.
-            synchronized (threadPools) {
+            synchronized (this) {
                 final ScheduledExecutorService lastChance = threadPools.get(name);
                 if (lastChance == null) {
                     final ScheduledExecutorService service =
@@ -42,7 +42,7 @@ public ScheduledExecutorService newScheduledThreadPool(int poolSize, String name
      * Shuts down all thread pools created by this class in an orderly fashion.
      */
     public void shutdown() {
-        synchronized (threadPools) {
+        synchronized (this) {
             for (ExecutorService executor : threadPools.values()) {
                 executor.shutdown();
             }

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -31,7 +31,7 @@ public long getTime(TimeUnit unit) {
         }
     }
 
-    public static VirtualMachineMetrics INSTANCE = new VirtualMachineMetrics();
+    public static final VirtualMachineMetrics INSTANCE = new VirtualMachineMetrics();
 
     private VirtualMachineMetrics() { /* unused */ }
 

File: metrics-core/src/main/java/com/yammer/metrics/util/DeadlockHealthCheck.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Set;
 
 /**
- * A {@link com.yammer.metrics.core.HealthCheck} implementation which returns a list of deadlocked threads, if any.
+ * A {@link HealthCheck} implementation which returns a list of deadlocked threads, if any.
  */
 public class DeadlockHealthCheck extends HealthCheck {
     private final VirtualMachineMetrics vm;

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -67,7 +67,7 @@ public double totalMax() {
      *
      * @return total Heap and non-heap memory currently committed to the JVM in bytes.
      */
-    public double totalCommited() {
+    public double totalCommitted() {
         return getMemoryMXBean().getHeapMemoryUsage().getCommitted() +
                 getMemoryMXBean().getNonHeapMemoryUsage().getCommitted();
     }
@@ -103,7 +103,7 @@ public double heapMax() {
      *
      * @return Heap memory currently committed to the JVM in bytes.
      */
-    public double heapCommited() {
+    public double heapCommitted() {
         return getMemoryMXBean().getHeapMemoryUsage().getCommitted() +
                 getMemoryMXBean().getNonHeapMemoryUsage().getCommitted();
     }

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -356,12 +356,12 @@ private void writeVmMetrics(JsonGenerator json) throws IOException {
                 json.writeNumberField("totalInit", vm.totalInit());
                 json.writeNumberField("totalUsed", vm.totalUsed());
                 json.writeNumberField("totalMax", vm.totalMax());
-                json.writeNumberField("totalCommited", vm.totalCommited());
+                json.writeNumberField("totalCommitted", vm.totalCommitted());
 
                 json.writeNumberField("heapInit", vm.heapInit());
                 json.writeNumberField("heapUsed", vm.heapUsed());
                 json.writeNumberField("heapMax", vm.heapMax());
-                json.writeNumberField("heapCommited", vm.heapCommited());
+                json.writeNumberField("heapCommitted", vm.heapCommitted());
 
                 json.writeNumberField("heap_usage", vm.heapUsage());
                 json.writeNumberField("non_heap_usage", vm.nonHeapUsage());

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -1,6 +1,5 @@
 package com.yammer.metrics.core;
 
-import java.io.IOException;
 import java.io.OutputStream;
 import java.io.PrintWriter;
 import java.lang.Thread.State;
@@ -295,9 +294,8 @@ public Map<State, Double> threadStatePercentages() {
      * Dumps all of the threads' current information to an output stream.
      *
      * @param out an output stream
-     * @throws IOException if something goes wrong
      */
-    public void threadDump(OutputStream out) throws IOException {
+    public void threadDump(OutputStream out) {
         final ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads(true, true);
         final PrintWriter writer = new PrintWriter(out, true);
 

File: metrics-core/src/main/java/com/yammer/metrics/core/Metered.java
Patch:
@@ -2,6 +2,9 @@
 
 import java.util.concurrent.TimeUnit;
 
+/**
+ * An object which maintains mean and exponentially-weighted rate.
+ */
 public interface Metered extends Metric {
     /**
      * Returns the meter's rate unit.

File: metrics-core/src/main/java/com/yammer/metrics/core/Histogram.java
Patch:
@@ -244,15 +244,15 @@ private double variance() {
     private void setMax(long potentialMax) {
         boolean done = false;
         while (!done) {
-            long currentMax = _max.get();
+            final long currentMax = _max.get();
             done = currentMax >= potentialMax || _max.compareAndSet(currentMax, potentialMax);
         }
     }
 
     private void setMin(long potentialMin) {
         boolean done = false;
         while (!done) {
-            long currentMin = _min.get();
+            final long currentMin = _min.get();
             done = currentMin <= potentialMin || _min.compareAndSet(currentMin, potentialMin);
         }
     }

File: metrics-core/src/main/java/com/yammer/metrics/core/Gauge.java
Patch:
@@ -5,13 +5,12 @@
  * A gauge metric is an instantaneous reading of a particular value. To instrument a queue's depth,
  * for example:<br>
  * <pre><code>
- * Queue<String> queue = new ConcurrentLinkedQueue<String>();
- * Gauge<Integer> queueDepth = new Gauge<Integer>() {
+ * final Queue&lt;String&gt; queue = new ConcurrentLinkedQueue&lt;String&gt;();
+ * final Gauge&lt;Integer&gt; queueDepth = new Gauge&lt;Integer&gt;() {
  *     public Integer value() {
  *         return queue.size();
  *     }
  * };
- * <p/>
  * </code></pre>
  *
  * @param <T> the type of the metric's value

File: metrics-core/src/main/java/com/yammer/metrics/core/Clock.java
Patch:
@@ -43,11 +43,11 @@ public long tick() {
      * Another implementation, uses {@link ThreadMXBean#getCurrentThreadCpuTime()}
      */
     public static class CpuTime extends Clock {
-        private static final ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
+        private static final ThreadMXBean THREAD_MX_BEAN = ManagementFactory.getThreadMXBean();
 
         @Override
         public long tick() {
-            return threadMxBean.getCurrentThreadCpuTime();
+            return THREAD_MX_BEAN.getCurrentThreadCpuTime();
         }
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/util/NamedThreadFactory.java
Patch:
@@ -19,7 +19,7 @@ public NamedThreadFactory(String name) {
 
     @Override
     public Thread newThread(Runnable r) {
-        Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
+        final Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
         t.setDaemon(true);
         if (t.getPriority() != Thread.NORM_PRIORITY) {
             t.setPriority(Thread.NORM_PRIORITY);

File: metrics-core/src/main/java/com/yammer/metrics/core/Gauge.java
Patch:
@@ -6,7 +6,7 @@
  * for example:<br>
  * <pre><code>
  * Queue<String> queue = new ConcurrentLinkedQueue<String>();
- * GaugeMetric<Integer> queueDepth = new GaugeMetric<Integer>() {
+ * Gauge<Integer> queueDepth = new Gauge<Integer>() {
  *     public Integer value() {
  *         return queue.size();
  *     }

File: metrics-core/src/main/java/com/yammer/metrics/core/LoggerMemoryLeakFix.java
Patch:
@@ -13,7 +13,7 @@
  * in the way it handles references to logger instances in Java 1.6.0_24 which get garbage collected. Come and gather
  * all around me and listen to my tale of woe.</p>
  *
- * <p>The {@link VirtualMachineMetrics.GcMonitor} class does rather a lot of JMX-bothering on a regular basis. Every five
+ * <p>The {@link VirtualMachineMetrics} class does rather a lot of JMX-bothering on a regular basis. Every five
  * seconds, it gets GC information via JMX and calculates information about it. That is good. We like that. But as it
  * does so, JMX does all sorts of tracing behind the scenes from
  * {@link com.sun.jmx.mbeanserver.JmxMBeanServer#getAttribute(javax.management.ObjectName, String)}

File: metrics-annotation/src/main/java/com/yammer/metrics/annotation/ExceptionMetered.java
Patch:
@@ -11,7 +11,7 @@
  * <p/>
  * Given a method like this:
  * <pre><code>
- *     ExceptionMetered(name = "fancyName", eventType = "namings", rateUnit = TimeUnit.SECONDS,
+ *     \@ExceptionMetered(name = "fancyName", eventType = "namings", rateUnit = TimeUnit.SECONDS,
  * cause=IllegalArgumentException.class)
  *     public String fancyName(String name) {
  *         return "Sir Captain " + name;
@@ -30,7 +30,7 @@
  * <p/>
  * For instance, given a declaration of
  * <pre><code>
- *     ExceptionMetered
+ *     \@ExceptionMetered
  *     public String fancyName(String name) {
  *         return "Sir Captain " + name;
  *     }

File: metrics-annotation/src/main/java/com/yammer/metrics/annotation/Gauge.java
Patch:
@@ -10,7 +10,7 @@
  * <p/>
  * Given a method like this:
  * <pre><code>
- *     @Gauge(name = "queueSize")
+ *     \@Gauge(name = "queueSize")
  *     public int getQueueSize() {
  *         return queue.size;
  *     }

File: metrics-aop/src/test/java/com/yammer/metrics/aop/benchmarks/BasicBenchmark.java
Patch:
@@ -3,7 +3,7 @@
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.annotation.Timed;
 import com.yammer.metrics.core.TimerContext;
-import com.yammer.metrics.core.TimerMetric;
+import com.yammer.metrics.core.Timer;
 import com.yammer.metrics.reporting.ConsoleReporter;
 
 import java.util.concurrent.TimeUnit;
@@ -12,7 +12,7 @@
 
 public class BasicBenchmark {
     public static class Fixture {
-        private static final TimerMetric TIMER = Metrics.newTimer(Fixture.class, "regular");
+        private static final Timer TIMER = Metrics.newTimer(Fixture.class, "regular");
         
         public String regular() {
             final TimerContext context = TIMER.time();

File: metrics-core/src/main/java/com/yammer/metrics/core/Clock.java
Patch:
@@ -4,7 +4,7 @@
 import java.lang.management.ThreadMXBean;
 
 /**
- * An abstraction for how time passes. It is passed to {@link TimerMetric} to track timing.
+ * An abstraction for how time passes. It is passed to {@link Timer} to track timing.
  */
 public abstract class Clock {
 

File: metrics-core/src/main/java/com/yammer/metrics/core/Counter.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * An incrementing and decrementing counter metric.
  */
-public class CounterMetric implements Metric {
+public class Counter implements Metric {
     private final AtomicLong count = new AtomicLong(0);
 
     /**

File: metrics-core/src/main/java/com/yammer/metrics/core/Gauge.java
Patch:
@@ -16,7 +16,7 @@
  *
  * @param <T> the type of the metric's value
  */
-public abstract class GaugeMetric<T> implements Metric {
+public abstract class Gauge<T> implements Metric {
     /**
      * Returns the metric's current value.
      *

File: metrics-core/src/main/java/com/yammer/metrics/core/JmxGauge.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * A gauge which exposes an attribute of a JMX MBean.
  */
-public class JmxGauge extends GaugeMetric<Object> {
+public class JmxGauge extends Gauge<Object> {
     private static final MBeanServer SERVER = ManagementFactory.getPlatformMBeanServer();
     private ObjectName name;
     private String attribute;

File: metrics-core/src/main/java/com/yammer/metrics/util/DeathRattleExceptionHandler.java
Patch:
@@ -1,6 +1,6 @@
 package com.yammer.metrics.util;
 
-import com.yammer.metrics.core.CounterMetric;
+import com.yammer.metrics.core.Counter;
 
 /**
  * When a thread throws an Exception that was not caught, a DeathRattleExceptionHandler will
@@ -31,9 +31,9 @@
  * </pre>
  */
 public class DeathRattleExceptionHandler implements Thread.UncaughtExceptionHandler {
-    final private CounterMetric deathRattle;
+    final private Counter deathRattle;
 
-    public DeathRattleExceptionHandler(CounterMetric deathRattle) {
+    public DeathRattleExceptionHandler(Counter deathRattle) {
         this.deathRattle = deathRattle;
     }
 

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/CounterTest.java
Patch:
@@ -1,13 +1,13 @@
 package com.yammer.metrics.core.tests;
 
-import com.yammer.metrics.core.CounterMetric;
+import com.yammer.metrics.core.Counter;
 import org.junit.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 
-public class CounterMetricTest {
-    final CounterMetric counter = new CounterMetric();
+public class CounterTest {
+    final Counter counter = new Counter();
 
     @Test
     public void startsAtZero() throws Exception {

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/GaugeTest.java
Patch:
@@ -1,13 +1,13 @@
 package com.yammer.metrics.core.tests;
 
-import com.yammer.metrics.core.GaugeMetric;
+import com.yammer.metrics.core.Gauge;
 import org.junit.Test;
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 
-public class GaugeMetricTest {
-    final GaugeMetric<String> gauge = new GaugeMetric<String>() {
+public class GaugeTest {
+    final Gauge<String> gauge = new Gauge<String>() {
         @Override
         public String value() {
             return "woo";

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/MeterTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.yammer.metrics.core.tests;
 
-import com.yammer.metrics.core.MeterMetric;
+import com.yammer.metrics.core.Meter;
 import org.junit.After;
 import org.junit.Test;
 
@@ -12,9 +12,9 @@
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 
-public class MeterMetricTest {
+public class MeterTest {
     final ScheduledExecutorService pool = Executors.newSingleThreadScheduledExecutor();
-    final MeterMetric meter = MeterMetric.newMeter(pool, "thangs", TimeUnit.SECONDS);
+    final Meter meter = Meter.newMeter(pool, "thangs", TimeUnit.SECONDS);
 
     @After
     public void tearDown() throws Exception {

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/TimerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.yammer.metrics.core.tests;
 
 import com.yammer.metrics.core.TimerContext;
-import com.yammer.metrics.core.TimerMetric;
+import com.yammer.metrics.core.Timer;
 import org.junit.After;
 import org.junit.Test;
 
@@ -15,9 +15,9 @@
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
 
-public class TimerMetricTest {
+public class TimerTest {
     final ScheduledExecutorService pool = Executors.newSingleThreadScheduledExecutor();
-    final TimerMetric timer = new TimerMetric(pool, TimeUnit.MILLISECONDS, TimeUnit.SECONDS);
+    final Timer timer = new Timer(pool, TimeUnit.MILLISECONDS, TimeUnit.SECONDS);
 
     @After
     public void tearDown() throws Exception {

File: metrics-guice/src/main/java/com/yammer/metrics/guice/GaugeInjectionListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.inject.TypeLiteral;
 import com.google.inject.spi.InjectionListener;
-import com.yammer.metrics.core.GaugeMetric;
+import com.yammer.metrics.core.Gauge;
 import com.yammer.metrics.core.MetricsRegistry;
 
 import java.lang.reflect.Method;
@@ -26,7 +26,7 @@ public GaugeInjectionListener(MetricsRegistry metricsRegistry, TypeLiteral<I> li
 
     @Override
     public void afterInjection(final I i) {
-        metricsRegistry.newGauge(literal.getRawType(), name, new GaugeMetric<Object>() {
+        metricsRegistry.newGauge(literal.getRawType(), name, new Gauge<Object>() {
             @Override
             public Object value() {
                 try {

File: metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java
Patch:
@@ -1,7 +1,7 @@
 package com.yammer.metrics.httpclient;
 
 import com.yammer.metrics.Metrics;
-import com.yammer.metrics.core.GaugeMetric;
+import com.yammer.metrics.core.Gauge;
 import org.apache.http.conn.scheme.SchemeRegistry;
 import org.apache.http.impl.conn.SchemeRegistryFactory;
 import org.apache.http.impl.conn.tsccm.ConnPoolByRoute;
@@ -28,7 +28,7 @@ public InstrumentedClientConnManager(SchemeRegistry registry,
         super(registry, connTTL, connTTLTimeUnit);
         Metrics.newGauge(InstrumentedClientConnManager.class,
                          "connections",
-                         new GaugeMetric<Integer>() {
+                         new Gauge<Integer>() {
                              @Override
                              public Integer value() {
                                  // this acquires a lock on the connection pool; remove if contention sucks

File: metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedConnByRoute.java
Patch:
@@ -1,7 +1,7 @@
 package com.yammer.metrics.httpclient;
 
 import com.yammer.metrics.Metrics;
-import com.yammer.metrics.core.MeterMetric;
+import com.yammer.metrics.core.Meter;
 import org.apache.http.conn.ClientConnectionOperator;
 import org.apache.http.conn.params.ConnPerRoute;
 import org.apache.http.impl.conn.tsccm.BasicPoolEntry;
@@ -14,7 +14,7 @@
  * A route-specific connection pool which monitors the rate at which connections are created.
  */
 public class InstrumentedConnByRoute extends ConnPoolByRoute {
-    private static final MeterMetric NEW_CONNECTIONS = Metrics.newMeter(InstrumentedConnByRoute.class,
+    private static final Meter NEW_CONNECTIONS = Metrics.newMeter(InstrumentedConnByRoute.class,
                                                                         "new-connections",
                                                                         "connections",
                                                                         TimeUnit.SECONDS);

File: metrics-jdbi/src/main/java/com/yammer/metrics/jdbi/InstrumentedTimingCollector.java
Patch:
@@ -1,7 +1,7 @@
 package com.yammer.metrics.jdbi;
 
 import com.yammer.metrics.core.MetricsRegistry;
-import com.yammer.metrics.core.TimerMetric;
+import com.yammer.metrics.core.Timer;
 import com.yammer.metrics.jdbi.strategies.SmartNameStrategy;
 import com.yammer.metrics.jdbi.strategies.StatementNameStrategy;
 
@@ -41,11 +41,11 @@ public InstrumentedTimingCollector(MetricsRegistry registry,
 
     @Override
     public void collect(long elapsedTime, StatementContext ctx) {
-        final TimerMetric timer = getTimer(ctx);
+        final Timer timer = getTimer(ctx);
         timer.update(elapsedTime, TimeUnit.NANOSECONDS);
     }
 
-    private TimerMetric getTimer(StatementContext ctx) {
+    private Timer getTimer(StatementContext ctx) {
         return registry.newTimer(statementNameStrategy.getStatementName(ctx),
                                  durationUnit,
                                  rateUnit);

File: metrics-servlet/src/test/java/com/yammer/metrics/servlet/reporting/tests/MetricsServletJsonTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.yammer.metrics.servlet.reporting.tests;
 
-import com.yammer.metrics.core.GaugeMetric;
+import com.yammer.metrics.core.Gauge;
 import com.yammer.metrics.core.HealthCheckRegistry;
 import com.yammer.metrics.core.MetricsRegistry;
 import com.yammer.metrics.reporting.MetricsServlet;
@@ -26,7 +26,7 @@ public void counter() throws IOException {
 
     @Test
     public void gauge() throws IOException {
-        registry.newGauge(Object.class, "test", new GaugeMetric<String>() {
+        registry.newGauge(Object.class, "test", new Gauge<String>() {
             @Override
             public String value() {
                 return "foo";

File: metrics-core/src/test/java/com/yammer/metrics/reporting/tests/AbstractPollingReporterTest.java
Patch:
@@ -51,7 +51,7 @@ protected final <T extends Metric> void assertReporterOutput(Callable<T> action,
             registry.add(new MetricName(Object.class, "metric"), metric);
             reporter.run();
             out.flush();
-            final String[] lines = out.toString().split("\n");
+            final String[] lines = out.toString().split("\r?\n|\r");
             // Assertions: first check that the line count matches then compare line by line ignoring leading and trailing whitespace
             assertEquals("Line count mismatch, was:\n" + Arrays.toString(lines) + "\nexpected:\n" + Arrays
                     .toString(expected) + "\n", expected.length,

File: metrics-core/src/test/java/com/yammer/metrics/reporting/tests/ConsoleReporterTest.java
Patch:
@@ -8,6 +8,7 @@
 
 import java.io.OutputStream;
 import java.io.PrintStream;
+import java.util.Locale;
 import java.util.TimeZone;
 
 public class ConsoleReporterTest extends AbstractPollingReporterTest {
@@ -18,7 +19,8 @@ protected AbstractPollingReporter createReporter(MetricsRegistry registry, Outpu
                                    new PrintStream(out),
                                    MetricPredicate.ALL,
                                    clock,
-                                   TimeZone.getTimeZone("UTC"));
+                                   TimeZone.getTimeZone("UTC"),
+                                   Locale.US);
     }
 
     @Override

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricName.java
Patch:
@@ -40,7 +40,7 @@ public MetricName(String group, String type, String name) {
      * @param scope the scope of the {@link Metric}
      */
     public MetricName(Class<?> klass, String name, String scope) {
-        this(klass.getPackage().getName(),
+        this(klass.getPackage() == null ? "": klass.getPackage().getName(),
              klass.getSimpleName().replaceAll("\\$$", ""),
              name,
              scope);

File: metrics-ganglia/src/test/java/com/yammer/metrics/reporting/GangliaReporterTest.java
Patch:
@@ -103,16 +103,15 @@ public void testSanitizeName_badCharacters() throws IOException {
 
     @Test
     public void testCompressPackageName() throws IOException {
-        String metricName = "some.long.package.name.thisIsAC>&!>leanMetric Name";
-        String expectedMetricName = "s.l.p.name.thisIsAC____leanMetric_Name";
+        MetricName metricName = new MetricName("some.long.package.name.thisIs", "AC>&!>lean", "Metric Name");
+        String expectedMetricName = "s.l.p.n.t.AC____lean.Metric_Name";
         GangliaReporter gangliaReporter = new GangliaReporter("localhost", 5555, true);
         String cleanMetricName = gangliaReporter.sanitizeName(metricName);
         assertEquals("clean metric name did not match expected value",
                      expectedMetricName,
                      cleanMetricName);
     }
 
-
     protected String getFromFile(String fileName) {
         try {
             return IOUtils.toString(new FileInputStream(getClass().getClassLoader()

File: metrics-ganglia/src/test/java/com/yammer/metrics/reporting/GangliaReporterTest.java
Patch:
@@ -103,16 +103,15 @@ public void testSanitizeName_badCharacters() throws IOException {
 
     @Test
     public void testCompressPackageName() throws IOException {
-        String metricName = "some.long.package.name.thisIsAC>&!>leanMetric Name";
-        String expectedMetricName = "s.l.p.name.thisIsAC____leanMetric_Name";
+        MetricName metricName = new MetricName("some.long.package.name.thisIs", "AC>&!>lean", "Metric Name");
+        String expectedMetricName = "s.l.p.n.t.AC____lean.Metric_Name";
         GangliaReporter gangliaReporter = new GangliaReporter("localhost", 5555, true);
         String cleanMetricName = gangliaReporter.sanitizeName(metricName);
         assertEquals("clean metric name did not match expected value",
                      expectedMetricName,
                      cleanMetricName);
     }
 
-
     protected String getFromFile(String fileName) {
         try {
             return IOUtils.toString(new FileInputStream(getClass().getClassLoader()

File: metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java
Patch:
@@ -55,7 +55,7 @@ public void clear() {
             this.startTime = tick();
             nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);
         } finally {
-            lockForRescale();
+            unlockForRescale();
         }
     }
 

File: metrics-core/src/main/java/com/yammer/metrics/HealthChecks.java
Patch:
@@ -34,6 +34,7 @@ public static Map<String, Result> runHealthChecks() {
 
     /**
      * Returns the (static) default registry.
+     *
      * @return the registry
      */
     public static HealthCheckRegistry defaultRegistry() {

File: metrics-core/src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java
Patch:
@@ -3,8 +3,7 @@
 import java.util.Set;
 
 /**
- * A {@link HealthCheck} implementation which returns a list of deadlocked
- * threads, if any.
+ * A {@link HealthCheck} implementation which returns a list of deadlocked threads, if any.
  */
 public class DeadlockHealthCheck extends HealthCheck {
     @Override

File: metrics-core/src/main/java/com/yammer/metrics/core/Metric.java
Patch:
@@ -1,10 +1,8 @@
 package com.yammer.metrics.core;
 
-
 /**
  * A tag interface to indicate that a class is a metric.
  */
 public interface Metric {
-
     <T> void processWith(MetricsProcessor<T> reporter, MetricName name, T context) throws Exception;
 }

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricsProcessor.java
Patch:
@@ -1,7 +1,7 @@
 package com.yammer.metrics.core;
 
 public interface MetricsProcessor<T> {
-    
+
     public void processMeter(MetricName name, Metered meter, T context) throws Exception;
 
     public void processCounter(MetricName name, CounterMetric counter, T context) throws Exception;
@@ -12,4 +12,4 @@ public interface MetricsProcessor<T> {
 
     public void processGauge(MetricName name, GaugeMetric<?> gauge, T context) throws Exception;
 
-}
\ No newline at end of file
+}

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricsRegistryListener.java
Patch:
@@ -10,7 +10,7 @@ public interface MetricsRegistryListener extends EventListener {
     /**
      * Called when a metric has been added to the {@link MetricsRegistry}.
      *
-     * @param name the name of the {@link Metric}
+     * @param name   the name of the {@link Metric}
      * @param metric the {@link Metric}
      */
     public void onMetricAdded(MetricName name, Metric metric);
@@ -19,7 +19,6 @@ public interface MetricsRegistryListener extends EventListener {
      * Called when a metric has been removed from the {@link MetricsRegistry}.
      *
      * @param name the name of the {@link com.yammer.metrics.core.Metric}
-     *
      */
     public void onMetricRemoved(MetricName name);
 }

File: metrics-core/src/main/java/com/yammer/metrics/core/Percentiled.java
Patch:
@@ -5,7 +5,7 @@ public interface Percentiled {
     /**
      * Returns the duration at the given percentile.
      *
-     * @param percentile    a percentile ({@code 0..1})
+     * @param percentile a percentile ({@code 0..1})
      * @return the duration at the given percentile
      */
     public double percentile(double percentile);
@@ -18,4 +18,4 @@ public interface Percentiled {
      */
     public Double[] percentiles(Double... percentiles);
 
-}
\ No newline at end of file
+}

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/CounterMetricTest.java
Patch:
@@ -56,7 +56,7 @@ public void decrementsByAnArbitraryDelta() throws Exception {
     public void isZeroAfterBeingCleared() throws Exception {
         counter.inc(3);
         counter.clear();
-        
+
         assertThat("the counter's value after being cleared is zero",
                    counter.count(),
                    is(0L));

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/HistogramMetricTest.java
Patch:
@@ -46,7 +46,7 @@ public void anEmptyHistogram() throws Exception {
         assertThat("the histogram has a 99th percentile of zero",
                    percentiles[2],
                    is(closeTo(0.0, 0.0001)));
-        
+
         assertThat("the histogram is empty",
                    histogram.values().isEmpty(),
                    is(true));

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/TimerMetricTest.java
Patch:
@@ -47,7 +47,7 @@ public void aBlankTimer() throws Exception {
         assertThat("the timer has a max duration of zero",
                    timer.max(),
                    is(closeTo(0.0, 0.001)));
-        
+
         assertThat("the timer has a min duration of zero",
                    timer.min(),
                    is(closeTo(0.0, 0.001)));
@@ -165,7 +165,7 @@ public String call() throws Exception {
         assertThat("returns the result of the callable",
                    value,
                    is("one"));
-        
+
         assertThat("records the duration of the Callable#call()",
                    timer.max(),
                    is(closeTo(50, 5)));

File: metrics-graphite/src/main/java/com/yammer/metrics/reporting/SocketProvider.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.net.Socket;
 
-public interface SocketProvider
-{
+public interface SocketProvider {
     Socket get() throws Exception;
 }

File: metrics-guice/src/main/java/com/yammer/metrics/guice/Gauge.java
Patch:
@@ -16,8 +16,8 @@
  *     }
  * </code></pre>
  * <p/>
- * A gauge for the defining class with the name {@code queueSize} will be
- * created which uses the annotated method's return value as its value.
+ * A gauge for the defining class with the name {@code queueSize} will be created which uses the
+ * annotated method's return value as its value.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: metrics-guice/src/main/java/com/yammer/metrics/guice/MeteredInterceptor.java
Patch:
@@ -5,9 +5,9 @@
 import org.aopalliance.intercept.MethodInvocation;
 
 /**
- * A method interceptor which creates a meter for the declaring class with the
- * given name (or the method's name, if none was provided), and which measures
- * the rate at which the annotated method is invoked.
+ * A method interceptor which creates a meter for the declaring class with the given name (or the
+ * method's name, if none was provided), and which measures the rate at which the annotated method
+ * is invoked.
  */
 public class MeteredInterceptor implements MethodInterceptor {
     private final MeterMetric meter;

File: metrics-guice/src/main/java/com/yammer/metrics/guice/TimedInterceptor.java
Patch:
@@ -7,9 +7,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * A method interceptor which creates a timer for the declaring class with the
- * given name (or the method's name, if none was provided), and which times
- * the execution of the annotated method.
+ * A method interceptor which creates a timer for the declaring class with the given name (or the
+ * method's name, if none was provided), and which times the execution of the annotated method.
  */
 public class TimedInterceptor implements MethodInterceptor {
     private final TimerMetric timer;

File: metrics-guice/src/test/java/com/yammer/metrics/guice/tests/GaugeTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertThat;
 
 public class GaugeTest {
-	
+
     @Test
     @SuppressWarnings("unchecked")
     public void aGaugeAnnotatedMethod() throws Exception {
@@ -41,15 +41,15 @@ public void aGaugeAnnotatedMethod() throws Exception {
                    ((GaugeMetric<String>) metric).value(),
                    is("poop"));
     }
-    
+
 
     @Test
     @SuppressWarnings("unchecked")
     public void aGaugeAnnotatedMethodWithDefaultName() throws Exception {
         final Injector injector = Guice.createInjector(new InstrumentationModule());
         final InstrumentedWithGauge instance = injector.getInstance(InstrumentedWithGauge.class);
         final MetricsRegistry registry = injector.getInstance(MetricsRegistry.class);
-        
+
         instance.doAnotherThing();
 
         final Metric metric = registry.allMetrics().get(new MetricName(InstrumentedWithGauge.class,

File: metrics-guice/src/test/java/com/yammer/metrics/guice/tests/InstrumentedWithMetered.java
Patch:
@@ -9,10 +9,12 @@ public class InstrumentedWithMetered {
     public String doAThing() {
         return "poop";
     }
+
     @Metered
     String doAThingWithDefaultScope() {
         return "defaultResult";
     }
+
     @Metered
     protected String doAThingWithProtectedScope() {
         return "defaultProtected";

File: metrics-guice/src/test/java/com/yammer/metrics/guice/tests/InstrumentedWithTimed.java
Patch:
@@ -9,10 +9,12 @@ public class InstrumentedWithTimed {
     public String doAThing() {
         return "poop";
     }
+
     @Timed
     String doAThingWithDefaultScope() {
         return "defaultResult";
     }
+
     @Timed
     protected String doAThingWithProtectedScope() {
         return "defaultProtected";

File: metrics-guice/src/test/java/com/yammer/metrics/guice/tests/MyException.java
Patch:
@@ -1,6 +1,5 @@
 package com.yammer.metrics.guice.tests;
 
-@SuppressWarnings("serial")
 public class MyException extends RuntimeException {
 
-}
\ No newline at end of file
+}

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServletContextListener.java
Patch:
@@ -8,8 +8,8 @@
 import javax.servlet.ServletContextListener;
 
 /**
- * A servlet context listener which shuts down the various thread pools when
- * the context is destroyed.
+ * A servlet context listener which shuts down the various thread pools when the context is
+ * destroyed.
  */
 public class MetricsServletContextListener implements ServletContextListener {
     @SuppressWarnings("deprecation")
@@ -18,7 +18,7 @@ public void contextDestroyed(ServletContextEvent sce) {
         // for backwards compatibility
         Utils.shutdownThreadPools();
         ServletContext context = sce.getServletContext();
-        MetricsRegistry metricsRegistry = (MetricsRegistry)context.getAttribute(MetricsServlet.ATTR_NAME_METRICS_REGISTRY);
+        MetricsRegistry metricsRegistry = (MetricsRegistry) context.getAttribute(MetricsServlet.ATTR_NAME_METRICS_REGISTRY);
         if (metricsRegistry != null) {
             metricsRegistry.threadPools().shutdownThreadPools();
         }

File: metrics-web/src/main/java/com/yammer/metrics/web/DefaultWebappMetricsFilter.java
Patch:
@@ -5,8 +5,7 @@
 
 /**
  * Implementation of the {@link WebappMetricsFilter} which provides a default set of response codes
- * to capture information about.
- * <p>Use it in your web.xml like this:</p>
+ * to capture information about. <p>Use it in your web.xml like this:</p>
  * <pre>{@code
  * <filter>
  *     <filter-name>webappMetricsFilter</filter-name>

File: metrics-web/src/main/java/com/yammer/metrics/web/WebappMetricsFilter.java
Patch:
@@ -34,7 +34,8 @@ public abstract class WebappMetricsFilter implements Filter {
      */
     public WebappMetricsFilter(Map<Integer, String> meterNamesByStatusCode,
                                String otherMetricName) {
-        this.metersByStatusCode = new ConcurrentHashMap<Integer, MeterMetric>(meterNamesByStatusCode.size());
+        this.metersByStatusCode = new ConcurrentHashMap<Integer, MeterMetric>(meterNamesByStatusCode
+                                                                                      .size());
         for (Entry<Integer, String> entry : meterNamesByStatusCode.entrySet()) {
             metersByStatusCode.put(entry.getKey(),
                                    Metrics.newMeter(WebappMetricsFilter.class,

File: metrics-ganglia/src/main/java/com/yammer/metrics/reporting/GangliaReporter.java
Patch:
@@ -39,7 +39,7 @@
 
 /**
  * A simple reporter which sends out application metrics to a
- * <a href="hhttp://ganglia.sourceforge.net/">Ganglia</a> server periodically.
+ * <a href="http://ganglia.sourceforge.net/">Ganglia</a> server periodically.
  * <p/>
  * NOTE: this reporter only works with Ganglia 3.1 and greater.  The message protocol
  * for earlier versions of Ganglia is different.

File: metrics-core/src/main/java/com/yammer/metrics/core/Metric.java
Patch:
@@ -1,8 +1,10 @@
 package com.yammer.metrics.core;
 
+
 /**
  * A tag interface to indicate that a class is a metric.
  */
 public interface Metric {
 
+    <T> void processWith(MetricsProcessor<T> reporter, MetricName name, T context) throws Exception;
 }

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricName.java
Patch:
@@ -1,5 +1,6 @@
 package com.yammer.metrics.core;
 
+
 /**
  * A value class encapsulating a metric's owning class and name.
  */

File: metrics-core/src/main/java/com/yammer/metrics/core/MetricsRegistryListener.java
Patch:
@@ -13,8 +13,7 @@ public interface MetricsRegistryListener extends EventListener {
      * @param name the name of the {@link Metric}
      * @param metric the {@link Metric}
      */
-    public void onMetricAdded(MetricName name,
-                              Metric metric);
+    public void onMetricAdded(MetricName name, Metric metric);
 
     /**
      * Called when a metric has been removed from the {@link MetricsRegistry}.

File: metrics-core/src/main/java/com/yammer/metrics/reporting/AbstractPollingReporter.java
Patch:
@@ -1,10 +1,10 @@
 package com.yammer.metrics.reporting;
 
-import com.yammer.metrics.core.MetricsRegistry;
-
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import com.yammer.metrics.core.MetricsRegistry;
+
 public abstract class AbstractPollingReporter extends AbstractReporter implements Runnable {
     private final ScheduledExecutorService executor;
 

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/HistogramMetricTest.java
Patch:
@@ -33,7 +33,7 @@ public void anEmptyHistogram() throws Exception {
                    histogram.stdDev(),
                    is(closeTo(0.0, 0.0001)));
 
-        final double[] percentiles = histogram.percentiles(0.5, 0.75, 0.99);
+        final Double[] percentiles = histogram.percentiles(0.5, 0.75, 0.99);
 
         assertThat("the histogram has a median of zero",
                    percentiles[0],
@@ -79,7 +79,7 @@ public void aHistogramWith10000Elements() throws Exception {
                    histogram.stdDev(),
                    is(closeTo(2886.8956799071675, 0.0001)));
 
-        final double[] percentiles = histogram.percentiles(0.5, 0.75, 0.99);
+        final Double[] percentiles = histogram.percentiles(0.5, 0.75, 0.99);
 
         assertThat("the histogram has a median of 5000.5",
                    percentiles[0],

File: metrics-core/src/test/java/com/yammer/metrics/core/tests/TimerMetricTest.java
Patch:
@@ -60,7 +60,7 @@ public void aBlankTimer() throws Exception {
                    timer.stdDev(),
                    is(closeTo(0.0, 0.001)));
 
-        final double[] percentiles = timer.percentiles(0.5, 0.75, 0.99);
+        final Double[] percentiles = timer.percentiles(0.5, 0.75, 0.99);
 
         assertThat("the timer has a median duration of zero",
                    percentiles[0],
@@ -123,7 +123,7 @@ public void timingASeriesOfEvents() throws Exception {
                    timer.stdDev(),
                    is(closeTo(11.401, 0.001)));
 
-        final double[] percentiles = timer.percentiles(0.5, 0.75, 0.99);
+        final Double[] percentiles = timer.percentiles(0.5, 0.75, 0.99);
 
         assertThat("the timer has a median duration of 20",
                    percentiles[0],

File: metrics-guice/src/main/java/com/yammer/metrics/guice/GaugeInjectionListener.java
Patch:
@@ -1,11 +1,11 @@
 package com.yammer.metrics.guice;
 
+import java.lang.reflect.Method;
+
 import com.google.inject.TypeLiteral;
 import com.google.inject.spi.InjectionListener;
-import com.yammer.metrics.core.MetricsRegistry;
 import com.yammer.metrics.core.GaugeMetric;
-
-import java.lang.reflect.Method;
+import com.yammer.metrics.core.MetricsRegistry;
 
 /**
  * An injection listener which creates a gauge for the declaring class with the

File: metrics-jetty/src/main/java/com/yammer/metrics/jetty/InstrumentedQueuedThreadPool.java
Patch:
@@ -1,9 +1,10 @@
 package com.yammer.metrics.jetty;
 
+import org.eclipse.jetty.util.thread.QueuedThreadPool;
+
 import com.yammer.metrics.Metrics;
 import com.yammer.metrics.core.GaugeMetric;
 import com.yammer.metrics.core.MetricsRegistry;
-import org.eclipse.jetty.util.thread.QueuedThreadPool;
 
 public class InstrumentedQueuedThreadPool extends QueuedThreadPool {
     public InstrumentedQueuedThreadPool() {

File: metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java
Patch:
@@ -51,15 +51,15 @@ public ExponentiallyDecayingSample(int reservoirSize, double alpha) {
 
     @Override
     public void clear() {
-	lockForRegularUsage();
+        lockForRescale();
         try {
            values.clear();
            count.set(0);
            this.startTime = tick();
            nextScaleTime.set(System.nanoTime() + RESCALE_THRESHOLD);
         } finally {
-            unlockForRegularUsage();
-	}
+            lockForRescale();
+        }
     }
 
     @Override

File: metrics-ganglia/src/main/java/com/yammer/metrics/reporting/GangliaReporter.java
Patch:
@@ -411,6 +411,7 @@ protected String sanitizeName(String metricName) {
             char p = metricName.charAt(i);
             if (!(p >= 'A' && p <= 'Z')
                     && !(p >= 'a' && p <= 'z')
+                    && !(p >= '0' && p <= '9')
                     && (p != '_')
                     && (p != '-')
                     && (p != '.')

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -183,7 +183,7 @@ private void handleHealthCheck(HttpServletResponse resp) throws IOException {
 
         final PrintWriter writer = resp.getWriter();
         if (results.isEmpty()) {
-            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+            resp.setStatus(HttpServletResponse.SC_NOT_IMPLEMENTED);
             writer.println("! No health checks registered.");
         } else {
             if (allHealthy) {

File: metrics-web/src/main/java/com/yammer/metrics/web/WebappMetricsFilter.java
Patch:
@@ -19,7 +19,6 @@
  * codes being returned.
  */
 public abstract class WebappMetricsFilter implements Filter {
-
     private final Map<Integer, MeterMetric> metersByStatusCode;
     private final MeterMetric otherMeterMetric;
     private final CounterMetric activeRequests;

File: metrics-core/src/main/java/com/yammer/metrics/reporting/AbstractPollingReporter.java
Patch:
@@ -1,9 +1,7 @@
 package com.yammer.metrics.reporting;
 
 import com.yammer.metrics.core.MetricsRegistry;
-import com.yammer.metrics.util.NamedThreadFactory;
 
-import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
@@ -12,7 +10,7 @@ public abstract class AbstractPollingReporter extends AbstractReporter implement
 
     protected AbstractPollingReporter(MetricsRegistry registry, String name) {
         super(registry);
-        this.executor = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(name));
+        this.executor = registry.threadPools().newScheduledThreadPool(1, name);
     }
 
     public void start(long pollingTime, TimeUnit pollingTimeUnit) {

File: metrics-logback/src/main/java/com/yammer/metrics/logback/InstrumentedAppender.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * A Logback {@link Appender} which has six meters, one for each logging
- * level and one for the total number of statements being logged.
+ * A Logback {@link AppenderBase} which has six meters, one for each logging level and one for the
+ * total number of statements being logged.
  */
 public class InstrumentedAppender extends AppenderBase<ILoggingEvent> {
     static final MeterMetric ALL_METER = Metrics.newMeter(InstrumentedAppender.class, "all", "statements", TimeUnit.SECONDS);

File: metrics-guice/src/main/java/com/yammer/metrics/guice/InstrumentationModule.java
Patch:
@@ -27,5 +27,6 @@ protected void configure() {
         bindListener(Matchers.any(), new MeteredListener(metricsRegistry));
         bindListener(Matchers.any(), new TimedListener(metricsRegistry));
         bindListener(Matchers.any(), new GaugeListener(metricsRegistry));
+        bindListener(Matchers.any(), new ExceptionMeteredListener(metricsRegistry));
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/util/DeathRattleExceptionHandler.java
Patch:
@@ -19,15 +19,15 @@
  * CounterMetric c = Metrics.newCounter(MyRunnable.class, "thread-deaths")
  * Thread.UncaughtExceptionHandler exHandler = new DeathRattleExceptionHandler(c)
  * Thread myThread = new Thread(myRunnable, "MyRunnable")
- * myThread.setExceptionHandler(exHandler)
+ * myThread.setUncaughtExceptionHandler(exHandler)
  * </pre>
  *
  * Setting the global default exception handler should be done first, like so:
  *
  * <pre>
  * CounterMetric c = Metrics.newCounter(MyMainClass.class, "unhandled-thread-deaths")
  * Thread.UncaughtExceptionHandler ohNoIDidntKnowAboutThis = new DeathRattleExceptionHandler(c)
- * Thread.setDefaultExceptionHandler(ohNoIDidntKnowAboutThis)
+ * Thread.setDefaultUncaughtExceptionHandler(ohNoIDidntKnowAboutThis)
  * </pre>
  */
 public class DeathRattleExceptionHandler implements Thread.UncaughtExceptionHandler {

File: metrics-core/src/main/java/com/yammer/metrics/util/DeathRattleExceptionHandler.java
Patch:
@@ -19,15 +19,15 @@
  * CounterMetric c = Metrics.newCounter(MyRunnable.class, "thread-deaths")
  * Thread.UncaughtExceptionHandler exHandler = new DeathRattleExceptionHandler(c)
  * Thread myThread = new Thread(myRunnable, "MyRunnable")
- * myThread.setExceptionHandler(exHandler)
+ * myThread.setUncaughtExceptionHandler(exHandler)
  * </pre>
  *
  * Setting the global default exception handler should be done first, like so:
  *
  * <pre>
  * CounterMetric c = Metrics.newCounter(MyMainClass.class, "unhandled-thread-deaths")
  * Thread.UncaughtExceptionHandler ohNoIDidntKnowAboutThis = new DeathRattleExceptionHandler(c)
- * Thread.setDefaultExceptionHandler(ohNoIDidntKnowAboutThis)
+ * Thread.setDefaultUncaughtExceptionHandler(ohNoIDidntKnowAboutThis)
  * </pre>
  */
 public class DeathRattleExceptionHandler implements Thread.UncaughtExceptionHandler {

File: metrics-guice/src/main/java/com/yammer/metrics/guice/JmxReporterProvider.java
Patch:
@@ -5,6 +5,8 @@
 import com.yammer.metrics.core.MetricsRegistry;
 import com.yammer.metrics.reporting.JmxReporter;
 
+import java.util.concurrent.TimeUnit;
+
 public class JmxReporterProvider implements Provider<JmxReporter>
 {
     private final MetricsRegistry metricsRegistry;
@@ -17,7 +19,7 @@ public JmxReporterProvider(MetricsRegistry metricsRegistry) {
     @Override
     public JmxReporter get() {
         JmxReporter reporter = new JmxReporter(metricsRegistry);
-        reporter.start();
+        reporter.start(1, TimeUnit.MINUTES);
         return reporter;
     }
 }

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -151,7 +151,7 @@ public static long daemonThreadCount() {
     public static Map<String, GarbageCollector> garbageCollectors() {
         final Map<String, GarbageCollector> gcs = new HashMap<String, GarbageCollector>();
         for (GarbageCollectorMXBean bean : getGarbageCollectorMXBeans()) {
-            gcs.put(bean.getName(), new GarbageCollector(bean.getCollectionCount(), bean.getCollectionCount()));
+            gcs.put(bean.getName(), new GarbageCollector(bean.getCollectionCount(), bean.getCollectionTime()));
         }
         return gcs;
     }

File: metrics-core/src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -151,7 +151,7 @@ public static long daemonThreadCount() {
     public static Map<String, GarbageCollector> garbageCollectors() {
         final Map<String, GarbageCollector> gcs = new HashMap<String, GarbageCollector>();
         for (GarbageCollectorMXBean bean : getGarbageCollectorMXBeans()) {
-            gcs.put(bean.getName(), new GarbageCollector(bean.getCollectionCount(), bean.getCollectionCount()));
+            gcs.put(bean.getName(), new GarbageCollector(bean.getCollectionCount(), bean.getCollectionTime()));
         }
         return gcs;
     }

File: metrics-graphite/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -298,11 +298,11 @@ private void printTimer(TimerMetric timer, String name, long epoch) {
     }
 
     private void printDoubleField(String name, double value, long epoch) {
-        sendToGraphite(String.format("%s%s %2.2f %d\n", prefix, sanitizedName(name), value, epoch));
+        sendToGraphite(String.format("%s%s %2.2f %d\n", prefix, sanitizeName(name), value, epoch));
     }
 
     private void printLongField(String name, long value, long epoch) {
-        sendToGraphite(String.format("%s%s %d %d\n", prefix, sanitizedName(name), value, epoch));
+        sendToGraphite(String.format("%s%s %d %d\n", prefix, sanitizeName(name), value, epoch));
     }
 
     private void printVmMetrics(long epoch) throws IOException {

File: metrics-core/src/main/java/com/yammer/metrics/Metrics.java
Patch:
@@ -16,7 +16,7 @@
 public class Metrics {
     private static final MetricsRegistry DEFAULT_REGISTRY = new MetricsRegistry();
     static {{
-        JmxReporter.INSTANCE.start();
+        JmxReporter.startDefault(DEFAULT_REGISTRY);
         // make sure we initialize this so it can monitor GC etc
         VirtualMachineMetrics.daemonThreadCount();
     }}

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -36,7 +36,7 @@ public class MetricsServlet extends HttpServlet {
                                            "<body>\n" +
                                            "  <h1>Operational Menu</h1>\n" +
                                            "  <ul>\n" +
-                                           "    <li><a href=\"{0}{1}\">Metrics</a></li>\n" +
+                                           "    <li><a href=\"{0}{1}?pretty=true\">Metrics</a></li>\n" +
                                            "    <li><a href=\"{2}{3}\">Ping</a></li>\n" +
                                            "    <li><a href=\"{4}{5}\">Threads</a></li>\n" +
                                            "    <li><a href=\"{6}{7}\">Healthcheck</a></li>\n" +

File: metrics-servlet/src/main/java/com/yammer/metrics/reporting/MetricsServlet.java
Patch:
@@ -268,11 +268,11 @@ private void writeGauge(JsonGenerator json, GaugeMetric gauge) throws IOExceptio
         {
             json.writeStringField("type", "gauge");
             json.writeFieldName("value");
-            final Object value = gauge.value();
             try {
+                final Object value = gauge.value();
                 json.writeObject(value);
-            } catch (JsonMappingException e) {
-                json.writeString("unknown value type: " + value.getClass());
+            } catch (Exception e) {
+                json.writeString("error reading gauge: " + e.getMessage());
             }
         }
         json.writeEndObject();

File: core/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -99,7 +99,7 @@ private void sendToGraphite(StringBuffer line){
 
 	private void printGauge(GaugeMetric<?> gauge, String name, long epoch) {
 		StringBuffer line = new StringBuffer();
-		line.append(String.format("%s.%s %d %d\n", name,"value",gauge.value(), epoch));
+		line.append(String.format("%s.%s %s %d\n", name,"value",gauge.value(), epoch));
 		sendToGraphite(line);
 	}
 

File: src/main/java/com/yammer/metrics/core/MetricsServlet.java
Patch:
@@ -96,7 +96,7 @@ public void init(ServletConfig config) throws ServletException {
 	@Override
 	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
 		final String uri = req.getPathInfo();
-		if (uri.equals("/")) {
+		if (uri == null || uri.equals("/")) {
 			handleHome(resp);
 		} else if (uri.startsWith(metricsUri)) {
 			handleMetrics(req.getParameter("class"), Boolean.parseBoolean(req.getParameter("full-samples")), resp);

File: src/main/java/com/yammer/metrics/core/ExponentiallyDecayingSample.java
Patch:
@@ -37,7 +37,6 @@ public class ExponentiallyDecayingSample implements Sample {
 	 *                      reservoir
 	 * @param alpha the exponential decay factor; the higher this is, the more
 	 *              biased the sample will be towards newer values
-	 * @return a new sample
 	 */
 	public ExponentiallyDecayingSample(int reservoirSize, double alpha) {
 		this.values = new ConcurrentSkipListMap<Double, Long>();

File: src/main/java/com/yammer/metrics/core/UniformSample.java
Patch:
@@ -53,9 +53,9 @@ public void update(long value) {
 		if (c <= values.length()) {
 			values.set((int) c - 1, value);
 		} else {
-			final int r = (int) (Math.abs(RANDOM.nextLong()) % c);
+			final long r = Math.abs(RANDOM.nextLong()) % c;
 			if (r < values.length()) {
-				values.set(r, value);
+				values.set((int) r, value);
 			}
 		}
 	}

File: src/main/java/com/yammer/metrics/core/ExponentiallyDecayingSample.java
Patch:
@@ -113,7 +113,7 @@ public void update(long value, long timestamp) {
 		final double priority = weight(timestamp - startTime) / random;
 		final long newCount = count.incrementAndGet();
 
-		if (newCount < reservoirSize) {
+		if (newCount <= reservoirSize) {
 			values.put(new Value(newCount, value, priority));
 		} else {
 			if (values.peek().priority < priority) {

File: src/main/java/com/yammer/metrics/core/UniformSample.java
Patch:
@@ -50,7 +50,7 @@ public int size() {
 	@Override
 	public void update(long value) {
 		final long c = count.incrementAndGet();
-		if (c < values.length()) {
+		if (c <= values.length()) {
 			values.set((int) c - 1, value);
 		} else {
 			final int r = (int) (Math.abs(RANDOM.nextLong()) % c);

File: src/main/java/com/yammer/metrics/core/TimerMetric.java
Patch:
@@ -179,9 +179,6 @@ private void update(long duration) {
 	}
 
 	private double convertFromNS(double ns) {
-		if (count() <= 0) {
-			return 0.0;
-		}
 		return ns / TimeUnit.NANOSECONDS.convert(1, durationUnit);
 	}
 

File: src/test/java/com/yammer/metrics/examples/ExampleRunner.java
Patch:
@@ -35,8 +35,6 @@ public void run() {
 
 	public static void main(String[] args) throws Exception {
 		Metrics.enableConsoleReporting(10, TimeUnit.SECONDS);
-		Metrics.enableHttpReporting(8081);
-		Metrics.enableJmxReporting();
 
 		System.err.println("Scanning all files on your hard drive...");
 

File: src/main/java/com/yammer/metrics/core/NamedThreadFactory.java
Patch:
@@ -16,7 +16,7 @@ class NamedThreadFactory implements ThreadFactory {
 	public NamedThreadFactory(String name) {
 		final SecurityManager s = System.getSecurityManager();
 		this.group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
-		this.namePrefix = name + "-" + "-thread-";
+		this.namePrefix = name + "-thread-";
 	}
 
 	@Override

File: src/main/java/com/yammer/metrics/core/MeterMetric.java
Patch:
@@ -41,7 +41,8 @@ public static MeterMetric newMeter(String eventType, TimeUnit scaleUnit) {
 	 * @param intervalUnit the unit of {@code interval}
 	 * @param eventType the plural name of the event the meter is measuring
 	 *                  (e.g., {@code "requests"})
-	 *@param scaleUnit the scale unit of the new meter  @return a new {@link MeterMetric}
+	 * @param scaleUnit the scale unit of the new meter  @return a new {@link MeterMetric}
+	 * @return a new {@link MeterMetric}
 	 */
 	public static MeterMetric newMeter(long interval, TimeUnit intervalUnit, String eventType, TimeUnit scaleUnit) {
 		final MeterMetric meter = new MeterMetric(eventType, scaleUnit);

File: src/main/java/com/yammer/metrics/core/ConsoleReporter.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class ConsoleReporter implements Runnable {
 	private static final ScheduledExecutorService TICK_THREAD =
-			Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("meter-tick"));
+			Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory("console-reporter"));
 	private final PrintStream out;
 	private final Map<MetricName,Metric> metrics;
 	private ScheduledFuture<?> future;

File: src/main/java/com/yammer/metrics/core/HttpReporter.java
Patch:
@@ -4,7 +4,6 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
-import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.Map;
@@ -191,7 +190,8 @@ private void writeVmMetrics(JsonGenerator json) throws IOException {
 	private void writeMeter(JsonGenerator json, MeterMetric meter) throws IOException {
 		json.writeStartObject();
 		{
-			json.writeStringField("unit", meter.getUnit().toString().toLowerCase());
+			json.writeStringField("event_type", meter.getEventType());
+			json.writeStringField("unit", meter.getScaleUnit().toString().toLowerCase());
 			json.writeNumberField("count", meter.count());
 			json.writeNumberField("mean", meter.meanRate());
 			json.writeNumberField("m1", meter.oneMinuteRate());

File: src/main/java/com/yammer/metrics/core/VirtualMachineMetrics.java
Patch:
@@ -68,7 +68,7 @@ public void run() {
 		private void collectGcThroughput(String name, Object gcInfo) throws Exception {
 			MeterMetric meter = gcMeters.get(name);
 			if (meter == null) {
-				meter = MeterMetric.newMeter(TimeUnit.SECONDS);
+				meter = MeterMetric.newMeter("bytes", TimeUnit.SECONDS);
 				gcMeters.put(name, meter);
 			}
 

File: src/main/java/com/yammer/metrics/core/MetricsFactory.java
Patch:
@@ -72,7 +72,7 @@ public static TimerMetric newTimer(Class<?> klass, String name, TimeUnit latency
 	 * Enables the HTTP/JSON reporter on the given port.
 	 *
 	 * @param port the port on which the HTTP server will listen
-	 * @throws IOException
+	 * @throws IOException if there is a problem listening on the given port
 	 * @see HttpReporter
 	 */
 	public static void enableHttpReporting(int port) throws IOException {

File: src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java
Patch:
@@ -68,7 +68,7 @@ public void update(long value) {
 	 * Adds an old value with a fixed timestamp to the sample.
 	 *
 	 * @param value the value to be added
-	 * @param timestamp the epoch timestamp of {@code value} in milliseconds
+	 * @param timestamp the epoch timestamp of {@code value} in seconds
 	 */
 	public void update(long value, long timestamp) {
 		lock.readLock().lock();

File: src/main/java/com/yammer/metrics/Metrics.java
Patch:
@@ -21,6 +21,7 @@ public class Metrics {
 	private static final ConcurrentMap<MetricName, Metric> METRICS = new ConcurrentHashMap<MetricName, Metric>();
 	static {{
 		JmxReporter.INSTANCE.start();
+		VirtualMachineMetrics.daemonThreadCount(); // make sure we initialize this
 	}}
 
 	private Metrics() { /* unused */ }

File: src/main/java/com/yammer/metrics/core/DeadlockHealthCheck.java
Patch:
@@ -10,7 +10,7 @@ public class DeadlockHealthCheck extends HealthCheck {
 	@Override
 	public Result check() throws Exception {
 		final Set<String> threads = VirtualMachineMetrics.deadlockedThreads();
-		if (threads.isEmpty()) {
+		if (!threads.isEmpty()) {
 			final StringBuilder builder = new StringBuilder("Deadlocked threads detected:\n");
 			for (String thread : threads) {
 				builder.append(thread).append('\n');

File: graphite/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * A simple reporters which sends out application metrics to a
+ * A simple reporter which sends out application metrics to a
  * <a href="http://graphite.wikidot.com/faq">Graphite</a> server periodically.
  *
  * @author Mahesh Tiyyagura <tmahesh@gmail.com>
@@ -24,7 +24,7 @@ public class GraphiteReporter implements Runnable {
     private final Writer writer;
 
     /**
-     * Enables the graphite reporter sends data to graphite server with the
+     * Enables the graphite reporter to send data to graphite server with the
      * specified period.
      *
      * @param period the period between successive outputs

File: graphite/src/main/java/com/yammer/metrics/reporting/GraphiteReporter.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * A simple reporters which sends out application metrics to a
+ * A simple reporter which sends out application metrics to a
  * <a href="http://graphite.wikidot.com/faq">Graphite</a> server periodically.
  *
  * @author Mahesh Tiyyagura <tmahesh@gmail.com>
@@ -24,7 +24,7 @@ public class GraphiteReporter implements Runnable {
     private final Writer writer;
 
     /**
-     * Enables the graphite reporter sends data to graphite server with the
+     * Enables the graphite reporter to send data to graphite server with the
      * specified period.
      *
      * @param period the period between successive outputs

File: ehcache/src/main/java/com/yammer/metrics/ehcache/InstrumentedEhcache.java
Patch:
@@ -60,7 +60,7 @@ public class InstrumentedEhcache implements Ehcache {
      * <tr>
      * <td>{@code misses}</td>
      * <td>Number of times a requested item was not found in the
-     * cache<./td>
+     * cache.</td>
      * </tr>
      * <tr>
      * <td>{@code in-memory-misses}</td>

