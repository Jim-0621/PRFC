File: src/main/java/edu/princeton/cs/algs4/GrayscalePicture.java
Patch:
@@ -467,7 +467,7 @@ public void actionPerformed(ActionEvent e) {
         String selectedDirectory = chooser.getDirectory();
         String selectedFilename = chooser.getFile();
         if (selectedDirectory != null && selectedFilename != null) {
-            StdDraw.save(selectedDirectory + selectedFilename);
+            save(selectedDirectory + selectedFilename);
         }
     }
 

File: src/main/java/edu/princeton/cs/algs4/Picture.java
Patch:
@@ -688,7 +688,7 @@ public void actionPerformed(ActionEvent e) {
         String selectedDirectory = chooser.getDirectory();
         String selectedFilename = chooser.getFile();
         if (selectedDirectory != null && selectedFilename != null) {
-            StdDraw.save(selectedDirectory + selectedFilename);
+            save(selectedDirectory + selectedFilename);
         }
     }
 

File: src/main/java/edu/princeton/cs/algs4/AcyclicLP.java
Patch:
@@ -4,7 +4,7 @@
  *  Dependencies: EdgeWeightedDigraph.java DirectedEdge.java Topological.java
  *  Data files:   https://algs4.cs.princeton.edu/44sp/tinyEWDAG.txt
  *
- *  Computes longeset paths in an edge-weighted acyclic digraph.
+ *  Computes longest paths in an edge-weighted acyclic digraph.
  *
  *  Remark: should probably check that graph is a DAG before running
  *

File: src/main/java/edu/princeton/cs/algs4/AdjMatrixEdgeWeightedDigraph.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.NoSuchElementException;
 
 /**
- *  The {@code AdjMatrixEdgeWeightedDigraph} class represents a edge-weighted
+ *  The {@code AdjMatrixEdgeWeightedDigraph} class represents an edge-weighted
  *  digraph of vertices named 0 through <em>V</em> - 1, where each
  *  directed edge is of type {@link DirectedEdge} and has a real-valued weight.
  *  It supports the following two primary operations: add a directed edge

File: src/main/java/edu/princeton/cs/algs4/AllowFilter.java
Patch:
@@ -5,8 +5,8 @@
  *  Data files:   https://algs4.cs.princeton.edu/35applications/tinyTale.txt
  *                https://algs4.cs.princeton.edu/35applications/allowlist.txt
  *
- *  Read in a allowlist of words from a file. Then read in a list of
- *  words from standard input and print out all those words that
+ *  Reads an allowlist of words from a file. Then readsa list of
+ *  words from standard input and prints all those words that
  *  are in the first file.
  *
  *  % more tinyTale.txt
@@ -34,7 +34,7 @@
  *  The {@code AllowFilter} class provides a client for reading in an <em>allowlist</em>
  *  of words from a file; then, reading in a sequence of words from standard input,
  *  printing out each word that appears in the file.
- *  It is useful as a test client for various symbol table implementations.
+ *  It is useful as a test client for various symbol-table implementations.
  *  <p>
  *  For additional documentation,
  *  see <a href="https://algs4.cs.princeton.edu/35applications">Section 3.5</a> of

File: src/main/java/edu/princeton/cs/algs4/AmericanFlag.java
Patch:
@@ -38,7 +38,7 @@
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne
  *  and <a href = "http://static.usenix.org/publications/compsystems/1993/win_mcilroy.pdf">
  *  Engineering Radix Sort</a> by McIlroy and Bostic.
- *  For a version that uses only one auxilary array, see {@link AmericanFlagX}.
+ *  For a version that uses only one auxiliary array, see {@link AmericanFlagX}.
  *
  *  @author Robert Sedgewick
  *  @author Kevin Wayne
@@ -160,7 +160,7 @@ private static boolean less(String v, String w, int d) {
 
    /**
      * Rearranges the array of 32-bit integers in ascending order.
-     * Currently assumes that the integers are nonnegative.
+     * Currently, assumes that the integers are nonnegative.
      *
      * @param a the array to be sorted
      */

File: src/main/java/edu/princeton/cs/algs4/AmericanFlagX.java
Patch:
@@ -38,7 +38,7 @@
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne
  *  and <a href = "http://static.usenix.org/publications/compsystems/1993/win_mcilroy.pdf">
  *  Engineering Radix Sort</a> by McIlroy and Bostic.
- *  For a version that uses two auxilary arrays, see {@link AmericanFlag}.
+ *  For a version that uses two auxiliary arrays, see {@link AmericanFlag}.
  *
  *  @author Ivan Pesin
  */
@@ -109,7 +109,7 @@ public static void sort(String[] a, int lo, int hi) {
             }
 
             // permute data in place
-            // for details and proof see Knuth Theorem 5.1.2B and ch 5.2 excercise 13.
+            // for details and proof see Knuth Theorem 5.1.2B and ch 5.2 exercise 13.
             for (int r = hi; r >= lo; r--) {
 
                 // locate element that must be shifted right of r

File: src/main/java/edu/princeton/cs/algs4/Arbitrage.java
Patch:
@@ -40,7 +40,7 @@
  *  opportunity exists) under the assumption that all arithmetic
  *  performed is without floating-point rounding error or arithmetic
  *  overflow. Since the code computes the logarithms of the edge weights,
- *  floating-point rounding error will be present and it may fail on
+ *  floating-point rounding error will be present, and it may fail on
  *  some pathological inputs.
  *  <p>
  *  For additional documentation,

File: src/main/java/edu/princeton/cs/algs4/AssignmentProblem.java
Patch:
@@ -37,7 +37,7 @@
  *  @author Kevin Wayne
  */
 public class AssignmentProblem {
-    private static final double FLOATING_POINT_EPSILON = 1E-14;
+    private static final double FLOATING_POINT_EPSILON = 1.0E-14;
     private static final int UNMATCHED = -1;
 
     private int n;              // number of rows and columns
@@ -90,7 +90,7 @@ public AssignmentProblem(double[][] weight) {
         assert certifySolution();
     }
 
-    // find shortest augmenting path and upate
+    // find shortest augmenting path and update
     private void augment() {
 
         // build residual graph
@@ -131,7 +131,7 @@ private void augment() {
     }
 
     // reduced cost of i-j
-    // (subtracting off minWeight reweights all weights to be non-negative)
+    // (subtracting off minWeight re-weights all weights to be non-negative)
     private double reducedCost(int i, int j) {
         double reducedCost = (weight[i][j] - minWeight) + px[i] - py[j];
 

File: src/main/java/edu/princeton/cs/algs4/BST.java
Patch:
@@ -505,7 +505,7 @@ private boolean isBST() {
 
     // is the tree rooted at x a BST with all keys strictly between min and max
     // (if min or max is null, treat as empty constraint)
-    // Credit: Bob Dondero's elegant solution
+    // Credit: elegant solution due to Bob Dondero
     private boolean isBST(Node x, Key min, Key max) {
         if (x == null) return true;
         if (min != null && x.key.compareTo(min) <= 0) return false;

File: src/main/java/edu/princeton/cs/algs4/Bag.java
Patch:
@@ -50,7 +50,7 @@
  *  @author Robert Sedgewick
  *  @author Kevin Wayne
  *
- *  @param <Item> the generic type of an item in this bag
+ *  @param <Item> the generic type of each item in this bag
  */
 public class Bag<Item> implements Iterable<Item> {
     private Node<Item> first;    // beginning of bag

File: src/main/java/edu/princeton/cs/algs4/BellmanFordSP.java
Patch:
@@ -133,7 +133,7 @@ public boolean hasNegativeCycle() {
     /**
      * Returns a negative cycle reachable from the source vertex {@code s}, or {@code null}
      * if there is no such cycle.
-     * @return a negative cycle reachable from the soruce vertex {@code s}
+     * @return a negative cycle reachable from the source vertex {@code s}
      *    as an iterable of edges, and {@code null} if there is no such cycle
      */
     public Iterable<DirectedEdge> negativeCycle() {
@@ -202,7 +202,7 @@ public Iterable<DirectedEdge> pathTo(int v) {
     }
 
     // check optimality conditions: either
-    // (i) there exists a negative cycle reacheable from s
+    // (i) there exists a negative cycle reachable from s
     //     or
     // (ii)  for all edges e = v->w:            distTo[w] <= distTo[v] + e.weight()
     // (ii') for all edges e = v->w on the SPT: distTo[w] == distTo[v] + e.weight()

File: src/main/java/edu/princeton/cs/algs4/BinaryInsertion.java
Patch:
@@ -69,7 +69,7 @@ public static void sort(Comparable[] a) {
                 else                 lo = mid + 1;
             }
 
-            // insetion sort with "half exchanges"
+            // insertion sort with "half exchanges"
             // (insert a[i] at index j and shift a[j], ..., a[i-1] to right)
             for (int j = i; j > lo; --j)
                 a[j] = a[j-1];

File: src/main/java/edu/princeton/cs/algs4/BipartiteMatching.java
Patch:
@@ -23,7 +23,7 @@
  *  A <em>vertex cover</em> in a graph is a subset of its vertices such that
  *  every edge is incident to at least one vertex. A <em>minimum vertex cover</em>
  *  is a vertex cover with the minimum number of vertices.
- *  By Konig's theorem, in any biparite
+ *  By Konig's theorem, in any bipartite
  *  graph, the maximum number of edges in matching equals the minimum number
  *  of vertices in a vertex cover.
  *  The maximum matching problem in <em>nonbipartite</em> graphs is

File: src/main/java/edu/princeton/cs/algs4/BlockFilter.java
Patch:
@@ -5,8 +5,8 @@
  *  Data files:   https://algs4.cs.princeton.edu/35applications/tinyTale.txt
  *                https://algs4.cs.princeton.edu/35applications/blocklist.txt
  *
- *  Read in a blocklist of words from a file. Then read in a list of
- *  words from standard input and print out all those words that
+ *  Reads a blocklist of words from a file. Then reads a list of
+ *  words from standard input and print all those words that
  *  are not in the first file.
  *
  *  % more tinyTale.txt
@@ -34,7 +34,7 @@
  *  The {@code BlockFilter} class provides a client for reading in a <em>blocklist</em>
  *  of words from a file; then, reading in a sequence of words from standard input,
  *  printing out each word that <em>does not</em> appear in the file.
- *  It is useful as a test client for various symbol table implementations.
+ *  It is useful as a test client for various symbol-table implementations.
  *  <p>
  *  For additional documentation,
  *  see <a href="https://algs4.cs.princeton.edu/35applications">Section 3.5</a> of

File: src/main/java/edu/princeton/cs/algs4/BoruvkaMST.java
Patch:
@@ -58,7 +58,7 @@
  *  @author Kevin Wayne
  */
 public class BoruvkaMST {
-    private static final double FLOATING_POINT_EPSILON = 1E-12;
+    private static final double FLOATING_POINT_EPSILON = 1.0E-12;
 
     private Bag<Edge> mst = new Bag<Edge>();    // edges in MST
     private double weight;                      // weight of MST

File: src/main/java/edu/princeton/cs/algs4/BoyerMoore.java
Patch:
@@ -88,7 +88,7 @@ public BoyerMoore(char[] pattern, int R) {
     }
 
     /**
-     * Returns the index of the first occurrrence of the pattern string
+     * Returns the index of the first occurrence of the pattern string
      * in the text string.
      *
      * @param  txt the text string
@@ -114,7 +114,7 @@ public int search(String txt) {
 
 
     /**
-     * Returns the index of the first occurrrence of the pattern string
+     * Returns the index of the first occurrence of the pattern string
      * in the text string.
      *
      * @param  text the text string

File: src/main/java/edu/princeton/cs/algs4/CC.java
Patch:
@@ -24,7 +24,7 @@
  *  0 1 2 3 4 5 6 7 8 9 10 ...
  *
  *  Note: This implementation uses a recursive DFS. To avoid needing
- *        a potentially very large stack size, replace with a non-recurisve
+ *        a potentially very large stack size, replace with a nonrecursive
  *        DFS ala NonrecursiveDFS.java.
  *
  ******************************************************************************/

File: src/main/java/edu/princeton/cs/algs4/Count.java
Patch:
@@ -5,12 +5,12 @@
  *  Data files:   https://algs4.cs.princeton.edu/50strings/abra.txt
  *                https://algs4.cs.princeton.edu/50strings/pi.txt
  *
- *  Create an alphabet specified on the command line, read in a 
+ *  Create an alphabet specified on the command line, read in a
  *  sequence of characters over that alphabet (ignoring characters
  *  not in the alphabet), computes the frequency of occurrence of
  *  each character, and print out the results.
  *
- *  %  java Count ABCDR < abra.txt 
+ *  %  java Count ABCDR < abra.txt
  *  A 5
  *  B 2
  *  C 1
@@ -54,7 +54,7 @@ private Count() { }
     /**
      * Reads in text from standard input; calculates the frequency of
      * occurrence of each character over the alphabet specified as a
-     * commmand-line argument; and prints the frequencies to standard
+     * command-line argument; and prints the frequencies to standard
      * output.
      *
      * @param args the command-line arguments

File: src/main/java/edu/princeton/cs/algs4/Counter.java
Patch:
@@ -82,9 +82,7 @@ public String toString() {
      */
     @Override
     public int compareTo(Counter that) {
-        if      (this.count < that.count) return -1;
-        else if (this.count > that.count) return +1;
-        else                              return  0;
+        return Integer.compare(this.count, that.count);
     }
 
 

File: src/main/java/edu/princeton/cs/algs4/Cycle.java
Patch:
@@ -34,7 +34,7 @@
  *  <em>E</em> is the number of edges.
  *  (The depth-first search part takes only <em>O</em>(<em>V</em>) time;
  *  however, checking for self-loops and parallel edges takes
- *  &Theta;(<em>V</em> + <em>E</em>) time in the worst case.)
+ *  &Theta;(<em>V</em> + <em>E</em>) time in the worst case.
  *  Each instance method takes &Theta;(1) time.
  *  It uses &Theta;(<em>V</em>) extra space (not including the graph).
  *

File: src/main/java/edu/princeton/cs/algs4/Digraph.java
Patch:
@@ -47,7 +47,7 @@
  *  It uses &Theta;(<em>E</em> + <em>V</em>) space, where <em>E</em> is
  *  the number of edges and <em>V</em> is the number of vertices.
  *  The <code>reverse()</code> method takes &Theta;(<em>E</em> + <em>V</em>) time
- *  and space; all other instancce methods take &Theta;(1) time. (Though, iterating over
+ *  and space; all other instance methods take &Theta;(1) time. (Though, iterating over
  *  the vertices returned by {@link #adj(int)} takes time proportional
  *  to the outdegree of the vertex.)
  *  Constructing an empty digraph with <em>V</em> vertices takes

File: src/main/java/edu/princeton/cs/algs4/DigraphGenerator.java
Patch:
@@ -72,7 +72,7 @@ public static Digraph simple(int V, int E) {
      * Returns a random simple digraph on {@code V} vertices, with an
      * edge between any two vertices with probability {@code p}. This is sometimes
      * referred to as the Erdos-Renyi random digraph model.
-     * This implementations takes time propotional to V^2 (even if {@code p} is small).
+     * This implementations takes time proportional to V^2 (even if {@code p} is small).
      * @param V the number of vertices
      * @param p the probability of choosing an edge
      * @return a random simple digraph on {@code V} vertices, with an edge between
@@ -408,7 +408,7 @@ public static Digraph eulerianPath(int V, int E) {
      * assigned integer labels between {@code 0} and {@code c-1} (corresponding to
      * strong components). Then, a strong component is creates among the vertices
      * with the same label. Next, random edges (either between two vertices with
-     * the same labels or from a vetex with a smaller label to a vertex with a
+     * the same labels or from a vertex with a smaller label to a vertex with a
      * larger label). The number of components will be equal to the number of
      * distinct labels that are assigned to vertices.
      *

File: src/main/java/edu/princeton/cs/algs4/DijkstraAllPairsSP.java
Patch:
@@ -36,7 +36,7 @@ public class DijkstraAllPairsSP {
     private DijkstraSP[] all;
 
     /**
-     * Computes a shortest paths tree from each vertex to to every other vertex in
+     * Computes a shortest paths tree from each vertex to every other vertex in
      * the edge-weighted digraph {@code G}.
      * @param G the edge-weighted digraph
      * @throws IllegalArgumentException if an edge weight is negative

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianCycle.java
Patch:
@@ -39,7 +39,7 @@
  *  @author Nate Liu
  */
 public class DirectedEulerianCycle {
-    private Stack<Integer> cycle = null;  // Eulerian cycle; null if no such cylce
+    private Stack<Integer> cycle = null;  // Eulerian cycle; null if no such cycle
 
     /**
      * Computes an Eulerian cycle in the specified digraph, if one exists.
@@ -144,7 +144,7 @@ private static boolean satisfiesNecessaryAndSufficientConditions(Digraph G) {
             for (int w : G.adj(v))
                 H.addEdge(v, w);
 
-        // check that all non-isolated vertices are conneted
+        // check that all non-isolated vertices are connected
         int s = nonIsolatedVertex(G);
         BreadthFirstPaths bfs = new BreadthFirstPaths(H, s);
         for (int v = 0; v < G.V(); v++)

File: src/main/java/edu/princeton/cs/algs4/DoublingRatio.java
Patch:
@@ -47,7 +47,7 @@ public static double timeTrial(int n) {
             a[i] = StdRandom.uniformInt(-MAXIMUM_INTEGER, MAXIMUM_INTEGER);
         }
         Stopwatch timer = new Stopwatch();
-        ThreeSum.count(a);
+        int ignore = ThreeSum.count(a);
         return timer.elapsedTime();
     }
 

File: src/main/java/edu/princeton/cs/algs4/DoublingTest.java
Patch:
@@ -45,7 +45,7 @@ public static double timeTrial(int n) {
             a[i] = StdRandom.uniformInt(-MAXIMUM_INTEGER, MAXIMUM_INTEGER);
         }
         Stopwatch timer = new Stopwatch();
-        ThreeSum.count(a);
+        int ignore = ThreeSum.count(a);
         return timer.elapsedTime();
     }
 

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java
Patch:
@@ -15,11 +15,11 @@
 import java.util.NoSuchElementException;
 
 /**
- *  The {@code EdgeWeightedDigraph} class represents a edge-weighted
+ *  The {@code EdgeWeightedDigraph} class represents an edge-weighted
  *  digraph of vertices named 0 through <em>V</em> - 1, where each
  *  directed edge is of type {@link DirectedEdge} and has a real-valued weight.
  *  It supports the following two primary operations: add a directed edge
- *  to the digraph and iterate over all of edges incident from a given vertex.
+ *  to the digraph and iterate over all edges incident from a given vertex.
  *  It also provides methods for returning the indegree or outdegree of a
  *  vertex, the number of vertices <em>V</em> in the digraph, and
  *  the number of edges <em>E</em> in the digraph.

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedGraph.java
Patch:
@@ -47,7 +47,7 @@
  *  the edges returned by {@link #adj(int)} takes time proportional
  *  to the degree of the vertex.)
  *  Constructing an empty edge-weighted graph with <em>V</em> vertices takes
- *  &Theta;(<em>V</em>) time; constructing a edge-weighted graph with
+ *  &Theta;(<em>V</em>) time; constructing an edge-weighted graph with
  *  <em>E</em> edges and <em>V</em> vertices takes
  *  &Theta;(<em>E</em> + <em>V</em>) time.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/EulerianCycle.java
Patch:
@@ -7,9 +7,9 @@
  *
  *  Runs in O(E + V) time.
  *
- *  This implementation is tricker than the one for digraphs because
+ *  This implementation is trickier than the one for digraphs because
  *  when we use edge v-w from v's adjacency list, we must be careful
- *  not to use the second copy of the edge from w's adjaceny list.
+ *  not to use the second copy of the edge from w's adjacency list.
  *
  ******************************************************************************/
 
@@ -75,7 +75,7 @@ public EulerianCycle(Graph G) {
         if (G.E() == 0) return;
 
         // necessary condition: all vertices have even degree
-        // (this test is needed or it might find an Eulerian path instead of cycle)
+        // (this test is needed, or it might find an Eulerian path instead of cycle)
         for (int v = 0; v < G.V(); v++)
             if (G.degree(v) % 2 != 0)
                 return;

File: src/main/java/edu/princeton/cs/algs4/FarthestPair.java
Patch:
@@ -4,7 +4,7 @@
  *  Dependencies: GrahamScan.java Point2D.java
  *  Data files:   https://algs4.cs.princeton.edu/99hull/rs1423.txt
  *                https://algs4.cs.princeton.edu/99hull/kw1260.txt
- *  
+ *
  *  Given a set of n points in the plane, find the farthest pair
  *  (equivalently, compute the diameter of the set of points).
  *
@@ -134,7 +134,7 @@ public Point2D other() {
     }
 
     /**
-     * Returns the Eucliden distance between the farthest pair of points.
+     * Returns the Euclidean distance between the farthest pair of points.
      * This quantity is also known as the <em>diameter</em> of the set of points.
      *
      * @return the Euclidean distance between the farthest pair of points

File: src/main/java/edu/princeton/cs/algs4/FloydWarshall.java
Patch:
@@ -53,7 +53,7 @@ public class FloydWarshall {
     private DirectedEdge[][] edgeTo;   // edgeTo[v][w] = last edge on shortest v->w path
 
     /**
-     * Computes a shortest paths tree from each vertex to to every other vertex in
+     * Computes a shortest paths tree from each vertex to every other vertex in
      * the edge-weighted digraph {@code G}. If no such shortest path exists for
      * some pair of vertices, it computes a negative cycle.
      * @param G the edge-weighted digraph

File: src/main/java/edu/princeton/cs/algs4/GaussJordanElimination.java
Patch:
@@ -41,7 +41,7 @@
  *  where <em>A</em> is an <em>n</em>-by-<em>n</em> matrix
  *  and <em>b</em> is a length <em>n</em> vector.
  *  If no solution exists, it finds a solution <em>y</em> to
- *  <em>yA</em> = 0, <em>yb</em> &ne; 0, which
+ *  <em>yA</em> = 0, <em>yb</em> &ne; 0,
  *  which serves as a certificate of infeasibility.
  *  <p>
  *  This implementation uses Gauss-Jordan elimination with partial pivoting.
@@ -329,7 +329,7 @@ private static void test3() {
         test("test 3", A, b);
     }
 
-    // 5-by-5 singluar: infinitely many solutions
+    // 5-by-5 singular: infinitely many solutions
     private static void test4() {
         double[][] A = {
             {  2, -3, -1,  2,  3 },

File: src/main/java/edu/princeton/cs/algs4/GaussianElimination.java
Patch:
@@ -62,7 +62,7 @@
  *  @author Kevin Wayne
  */
 public class GaussianElimination {
-    private static final double EPSILON = 1e-8;
+    private static final double EPSILON = 1.0E-8;
 
     private final int m;      // number of rows
     private final int n;      // number of columns

File: src/main/java/edu/princeton/cs/algs4/GrahamScan.java
Patch:
@@ -1,16 +1,16 @@
 /******************************************************************************
- *  Compilation:  javac GrahamaScan.java
+ *  Compilation:  javac GrahamScan.java
  *  Execution:    java GrahamScan < input.txt
  *  Dependencies: Point2D.java
  *  Data files:   https://algs4.cs.princeton.edu/99hull/rs1423.txt
  *                https://algs4.cs.princeton.edu/99hull/kw1260.txt
- * 
+ *
  *  Create points from standard input and compute the convex hull using
  *  Graham scan algorithm.
  *
  *  May be floating-point issues if x- and y-coordinates are not integers.
  *
- *  % java GrahamScan < input100.txt 
+ *  % java GrahamScan < input100.txt
  *  (7486.0, 422.0)
  *  (29413.0, 596.0)
  *  (32011.0, 3140.0)

File: src/main/java/edu/princeton/cs/algs4/GraphGenerator.java
Patch:
@@ -377,7 +377,7 @@ public static Graph tree(int V) {
         for (int i = 0; i < V-2; i++)
             prufer[i] = StdRandom.uniformInt(V);
 
-        // degree of vertex v = 1 + number of times it appers in Prufer sequence
+        // degree of vertex v = 1 + number of times it appears in Prufer sequence
         int[] degree = new int[V];
         for (int v = 0; v < V; v++)
             degree[v] = 1;

File: src/main/java/edu/princeton/cs/algs4/HexDump.java
Patch:
@@ -49,7 +49,7 @@ private HexDump() { }
 
     /**
      * Reads in a sequence of bytes from standard input and writes
-     * them to standard output using hexademical notation, k hex digits
+     * them to standard output using hexadecimal notation, k hex digits
      * per line, where k is given as a command-line integer (defaults
      * to 16 if no integer is specified); also writes the number
      * of bits.

File: src/main/java/edu/princeton/cs/algs4/HopcroftKarp.java
Patch:
@@ -26,7 +26,7 @@
  *  A <em>vertex cover</em> in a graph is a subset of its vertices such that
  *  every edge is incident to at least one vertex. A <em>minimum vertex cover</em>
  *  is a vertex cover with the minimum number of vertices.
- *  By Konig's theorem, in any biparite
+ *  By Konig's theorem, in any bipartite
  *  graph, the maximum number of edges in matching equals the minimum number
  *  of vertices in a vertex cover.
  *  The maximum matching problem in <em>nonbipartite</em> graphs is

File: src/main/java/edu/princeton/cs/algs4/Huffman.java
Patch:
@@ -116,7 +116,7 @@ else if (code.charAt(j) == '1') {
     // build the Huffman trie given frequencies
     private static Node buildTrie(int[] freq) {
 
-        // initialze priority queue with singleton trees
+        // initialize priority queue with singleton trees
         MinPQ<Node> pq = new MinPQ<Node>();
         for (char c = 0; c < R; c++)
             if (freq[c] > 0)

File: src/main/java/edu/princeton/cs/algs4/KMP.java
Patch:
@@ -48,7 +48,7 @@
 public class KMP {
     private final int R;       // the radix
     private final int m;       // length of pattern
-    private int[][] dfa;       // the KMP automoton
+    private int[][] dfa;       // the KMP automaton
 
     /**
      * Preprocesses the pattern string.
@@ -93,7 +93,7 @@ public KMP(char[] pattern, int R) {
     }
 
     /**
-     * Returns the index of the first occurrrence of the pattern string
+     * Returns the index of the first occurrence of the pattern string
      * in the text string.
      *
      * @param  txt the text string
@@ -113,7 +113,7 @@ public int search(String txt) {
     }
 
     /**
-     * Returns the index of the first occurrrence of the pattern string
+     * Returns the index of the first occurrence of the pattern string
      * in the text string.
      *
      * @param  text the text string

File: src/main/java/edu/princeton/cs/algs4/KruskalMST.java
Patch:
@@ -48,7 +48,7 @@
  *  weight of a minimum spanning tree and the {@code edges()} method
  *  returns its edges.
  *  <p>
- *  This implementation uses <em>Krusal's algorithm</em> and the
+ *  This implementation uses <em>Kruskal's algorithm</em> and the
  *  union-find data type.
  *  The constructor takes &Theta;(<em>E</em> log <em>E</em>) time in
  *  the worst case.
@@ -71,7 +71,7 @@
  *  @author Kevin Wayne
  */
 public class KruskalMST {
-    private static final double FLOATING_POINT_EPSILON = 1E-12;
+    private static final double FLOATING_POINT_EPSILON = 1.0E-12;
 
     private double weight;                        // weight of MST
     private Queue<Edge> mst = new Queue<Edge>();  // edges in MST

File: src/main/java/edu/princeton/cs/algs4/LSD.java
Patch:
@@ -87,7 +87,7 @@ public static void sort(String[] a, int w) {
      */
     public static void sort(int[] a) {
         final int BITS = 32;                 // each int is 32 bits
-        final int R = 1 << BITS_PER_BYTE;    // each bytes is between 0 and 255
+        final int R = 1 << BITS_PER_BYTE;    // each byte is between 0 and 255
         final int MASK = R - 1;              // 0xFF
         final int w = BITS / BITS_PER_BYTE;  // each int is 4 bytes
 

File: src/main/java/edu/princeton/cs/algs4/LazyPrimMST.java
Patch:
@@ -70,7 +70,7 @@
  *  @author Kevin Wayne
  */
 public class LazyPrimMST {
-    private static final double FLOATING_POINT_EPSILON = 1E-12;
+    private static final double FLOATING_POINT_EPSILON = 1.0E-12;
 
     private double weight;       // total weight of MST
     private Queue<Edge> mst;     // edges in the MST

File: src/main/java/edu/princeton/cs/algs4/LinearProbingHashST.java
Patch:
@@ -200,7 +200,7 @@ public void delete(Key key) {
         // rehash all keys in same cluster
         i = (i + 1) % m;
         while (keys[i] != null) {
-            // delete keys[i] an vals[i] and reinsert
+            // delete keys[i] and vals[i] and reinsert
             Key   keyToRehash = keys[i];
             Value valToRehash = vals[i];
             keys[i] = null;
@@ -233,7 +233,7 @@ public Iterable<Key> keys() {
     }
 
     // integrity check - don't check after each put() because
-    // integrity not maintained during a delete()
+    // integrity not maintained during a call to delete()
     private boolean check() {
 
         // check that hash table is at most 50% full

File: src/main/java/edu/princeton/cs/algs4/LongestRepeatedSubstring.java
Patch:
@@ -6,8 +6,8 @@
  *                https://algs4.cs.princeton.edu/63suffix/tinyTale.txt
  *                https://algs4.cs.princeton.edu/63suffix/mobydick.txt
  *
- *  Reads a text string from stdin, replaces all consecutive blocks of
- *  whitespace with a single space, and then computes the longest
+ *  Reads a text string from standard input, replaces all consecutive blocks
+ *  of whitespace with a single space, and then computes the longest
  *  repeated substring in that text using a suffix array.
  *
  *  % java LongestRepeatedSubstring < tinyTale.txt

File: src/main/java/edu/princeton/cs/algs4/MSD.java
Patch:
@@ -81,7 +81,7 @@ private static void sort(String[] a, int lo, int hi, int d, String[] aux) {
             count[c+2]++;
         }
 
-        // transform counts to indicies
+        // transform counts to indices
         for (int r = 0; r < R+1; r++)
             count[r+1] += count[r];
 
@@ -157,7 +157,7 @@ private static void sort(int[] a, int lo, int hi, int d, int[] aux) {
             count[c + 1]++;
         }
 
-        // transform counts to indicies
+        // transform counts to indices
         for (int r = 0; r < R; r++)
             count[r+1] += count[r];
 

File: src/main/java/edu/princeton/cs/algs4/MergeBU.java
Patch:
@@ -60,7 +60,7 @@ private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int
         // merge back to a[]
         int i = lo, j = mid+1;
         for (int k = lo; k <= hi; k++) {
-            if      (i > mid)              a[k] = aux[j++];  // this copying is unneccessary
+            if      (i > mid)              a[k] = aux[j++];  // this copying is unnecessary
             else if (j > hi)               a[k] = aux[i++];
             else if (less(aux[j], aux[i])) a[k] = aux[j++];
             else                           a[k] = aux[i++];

File: src/main/java/edu/princeton/cs/algs4/NFA.java
Patch:
@@ -36,7 +36,7 @@
  *  <em>closure</em>, <em>binary or</em>, and <em>parentheses</em>.
  *  It does not support <em>mutiway or</em>, <em>character classes</em>,
  *  <em>metacharacters</em> (either in the text or pattern),
- *  <em>capturing capabilities</em>, <em>greedy</em> or <em>relucantant</em>
+ *  <em>capturing capabilities</em>, <em>greedy</em> or <em>reluctant</em>
  *  modifiers, and other features in industrial-strength implementations
  *  such as {@link java.util.regex.Pattern} and {@link java.util.regex.Matcher}.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/NonrecursiveDirectedDFS.java
Patch:
@@ -6,7 +6,7 @@
  *                https://algs4.cs.princeton.edu/42digraph/mediumDG.txt
  *                https://algs4.cs.princeton.edu/42digraph/largeDG.txt
  *
- *  Run nonrecurisve depth-first search on an directed graph.
+ *  Run nonrecurisve depth-first search on a directed graph.
  *  Runs in O(E + V) time.
  *
  *  Explores the vertices in exactly the same order as DirectedDFS.java.

File: src/main/java/edu/princeton/cs/algs4/PatriciaSET.java
Patch:
@@ -81,7 +81,7 @@
  *  implementation performs well, the source code was written with an emphasis
  *  on clarity, and not performance. PATRICIA performs admirably when its
  *  bit-testing loops are well tuned. Consider using the source code as a guide,
- *  should you need to produce an optimized implementation, for anther key type,
+ *  should you need to produce an optimized implementation, for another key type,
  *  or in another programming language.
  *  <p>
  *  Other resources for PATRICIA:<br>

File: src/main/java/edu/princeton/cs/algs4/PatriciaST.java
Patch:
@@ -84,7 +84,7 @@
  *  implementation performs well, the source code was written with an emphasis
  *  on clarity, and not performance. PATRICIA performs admirably when its
  *  bit-testing loops are well tuned. Consider using the source code as a guide,
- *  should you need to produce an optimized implementation, for anther key type,
+ *  should you need to produce an optimized implementation, for another key type,
  *  or in another programming language.
  *  <p>
  *  Other resources for PATRICIA:<br>

File: src/main/java/edu/princeton/cs/algs4/Polynomial.java
Patch:
@@ -146,7 +146,7 @@ public Polynomial compose(Polynomial that) {
     /**
      * Compares this polynomial to the specified polynomial.
      *
-     * @param  other the other polynoimal
+     * @param  other the other polynomial
      * @return {@code true} if this polynomial equals {@code other};
      *         {@code false} otherwise
      */
@@ -195,7 +195,7 @@ public int evaluate(int x) {
      * @param  that the other point
      * @return the value {@code 0} if this polynomial is equal to the argument
      *         polynomial (precisely when {@code equals()} returns {@code true});
-     *         a negative integer if this polynomialt is less than the argument
+     *         a negative integer if this polynomial is less than the argument
      *         polynomial; and a positive integer if this polynomial is greater than the
      *         argument point
      */

File: src/main/java/edu/princeton/cs/algs4/PrimMST.java
Patch:
@@ -73,7 +73,7 @@
  *  @author Kevin Wayne
  */
 public class PrimMST {
-    private static final double FLOATING_POINT_EPSILON = 1E-12;
+    private static final double FLOATING_POINT_EPSILON = 1.0E-12;
 
     private Edge[] edgeTo;        // edgeTo[v] = shortest edge from tree vertex to non-tree vertex
     private double[] distTo;      // distTo[v] = weight of shortest such edge

File: src/main/java/edu/princeton/cs/algs4/Queue.java
Patch:
@@ -37,7 +37,7 @@
  *  @author Robert Sedgewick
  *  @author Kevin Wayne
  *
- *  @param <Item> the generic type of an item in this queue
+ *  @param <Item> the generic type of each item in this queue
  */
 public class Queue<Item> implements Iterable<Item> {
     private Node<Item> first;    // beginning of queue

File: src/main/java/edu/princeton/cs/algs4/QuickFindUF.java
Patch:
@@ -129,8 +129,8 @@ public boolean connected(int p, int q) {
     }
 
     /**
-     * Merges the set containing element {@code p} with the
-     * the set containing element {@code q}.
+     * Merges the set containing element {@code p} with the set
+     * containing element {@code q}.
      *
      * @param  p one element
      * @param  q the other element

File: src/main/java/edu/princeton/cs/algs4/QuickUnionUF.java
Patch:
@@ -129,8 +129,8 @@ public boolean connected(int p, int q) {
     }
 
     /**
-     * Merges the set containing element {@code p} with the
-     * the set containing element {@code q}.
+     * Merges the set containing element {@code p} with the set
+     * containing element {@code q}.
      *
      * @param  p one element
      * @param  q the other element

File: src/main/java/edu/princeton/cs/algs4/RabinKarp.java
Patch:
@@ -106,7 +106,7 @@ private boolean check(String txt, int i) {
     //}
 
     /**
-     * Returns the index of the first occurrrence of the pattern string
+     * Returns the index of the first occurrence of the pattern string
      * in the text string.
      *
      * @param  txt the text string

File: src/main/java/edu/princeton/cs/algs4/RedBlackBST.java
Patch:
@@ -660,7 +660,7 @@ private boolean isBST() {
 
     // is the tree rooted at x a BST with all keys strictly between min and max
     // (if min or max is null, treat as empty constraint)
-    // Credit: Bob Dondero's elegant solution
+    // Credit: elegant solution due to Bob Dondero
     private boolean isBST(Node x, Key min, Key max) {
         if (x == null) return true;
         if (min != null && x.key.compareTo(min) <= 0) return false;

File: src/main/java/edu/princeton/cs/algs4/SET.java
Patch:
@@ -46,7 +46,7 @@
  *  @author Robert Sedgewick
  *  @author Kevin Wayne
  *
- *  @param <Key> the generic type of a key in this set
+ *  @param <Key> the generic type of each key in this set
  */
 
 public class SET<Key extends Comparable<Key>> implements Iterable<Key> {

File: src/main/java/edu/princeton/cs/algs4/SparseVector.java
Patch:
@@ -18,7 +18,7 @@
  *  dot product, scalar product, unit vector, and Euclidean norm.
  *  <p>
  *  The implementation is a symbol table of indices and values for which the vector
- *  coordinates are nonzero. This makes it efficient when most of the vector coordindates
+ *  coordinates are nonzero. This makes it efficient when most of the vector coordinates
   * are zero.
  *  <p>
  *  For additional documentation,
@@ -187,7 +187,7 @@ public SparseVector plus(SparseVector that) {
    /**
      * Returns a string representation of this vector.
      * @return a string representation of this vector, which consists of the
-     *         the vector entries, separates by commas, enclosed in parentheses
+     *         vector entries, separates by commas, enclosed in parentheses
      */
     public String toString() {
         StringBuilder s = new StringBuilder();

File: src/main/java/edu/princeton/cs/algs4/Stack.java
Patch:
@@ -45,7 +45,7 @@
  *  @author Robert Sedgewick
  *  @author Kevin Wayne
  *
- *  @param <Item> the generic type of an item in this stack
+ *  @param <Item> the generic type each item in this stack
  */
 public class Stack<Item> implements Iterable<Item> {
     private Node<Item> first;     // top of stack

File: src/main/java/edu/princeton/cs/algs4/StopwatchCPU.java
Patch:
@@ -1,6 +1,6 @@
 /******************************************************************************
  *  Compilation:  javac StopwatchCPU.java
- *  Execution:    java StopwtachCPU n
+ *  Execution:    java StopwatchCPU n
  *  Dependencies: none
  *
  *  A version of Stopwatch.java that measures CPU time on a single

File: src/main/java/edu/princeton/cs/algs4/SymbolDigraph.java
Patch:
@@ -141,7 +141,7 @@ public String nameOf(int v) {
     }
 
     /**
-     * Returns the digraph assoicated with the symbol graph. It is the client's responsibility
+     * Returns the digraph associated with the symbol graph. It is the client's responsibility
      * not to mutate the digraph.
      *
      * @return the digraph associated with the symbol digraph
@@ -153,7 +153,7 @@ public Digraph G() {
     }
 
     /**
-     * Returns the digraph assoicated with the symbol graph. It is the client's responsibility
+     * Returns the digraph associated with the symbol graph. It is the client's responsibility
      * not to mutate the digraph.
      *
      * @return the digraph associated with the symbol digraph
@@ -182,7 +182,7 @@ public static void main(String[] args) {
         while (!StdIn.isEmpty()) {
             String t = StdIn.readLine();
             for (int v : graph.adj(sg.index(t))) {
-                StdOut.println("   " + sg.name(v));
+                StdOut.println("   " + sg.nameOf(v));
             }
         }
     }

File: src/main/java/edu/princeton/cs/algs4/SymbolGraph.java
Patch:
@@ -168,7 +168,7 @@ public String nameOf(int v) {
     }
 
     /**
-     * Returns the graph assoicated with the symbol graph. It is the client's responsibility
+     * Returns the graph associated with the symbol graph. It is the client's responsibility
      * not to mutate the graph.
      * @return the graph associated with the symbol graph
      * @deprecated Replaced by {@link #graph()}.
@@ -179,7 +179,7 @@ public Graph G() {
     }
 
     /**
-     * Returns the graph assoicated with the symbol graph. It is the client's responsibility
+     * Returns the graph associated with the symbol graph. It is the client's responsibility
      * not to mutate the graph.
      * @return the graph associated with the symbol graph
      */
@@ -210,7 +210,7 @@ public static void main(String[] args) {
             if (sg.contains(source)) {
                 int s = sg.index(source);
                 for (int v : graph.adj(s)) {
-                    StdOut.println("   " + sg.name(v));
+                    StdOut.println("   " + sg.nameOf(v));
                 }
             }
             else {

File: src/main/java/edu/princeton/cs/algs4/TST.java
Patch:
@@ -39,7 +39,7 @@
 package edu.princeton.cs.algs4;
 
 /**
- *  The {@code TST} class represents an symbol table of key-value
+ *  The {@code TST} class represents a symbol table of key-value
  *  pairs, with string keys and generic values.
  *  It supports the usual <em>put</em>, <em>get</em>, <em>contains</em>,
  *  <em>delete</em>, <em>size</em>, and <em>is-empty</em> methods.
@@ -139,7 +139,7 @@ public void put(String key, Value val) {
             throw new IllegalArgumentException("calls put() with null key");
         }
         if (!contains(key)) n++;
-        else if(val == null) n--;       // delete existing key
+        else if (val == null) n--;       // delete existing key
         root = put(root, key, val, 0);
     }
 

File: src/main/java/edu/princeton/cs/algs4/Topological.java
Patch:
@@ -91,9 +91,9 @@ public Topological(EdgeWeightedDigraph G) {
     }
 
     /**
-     * Returns a topological order if the digraph has a topologial order,
+     * Returns a topological order if the digraph has a topological order,
      * and {@code null} otherwise.
-     * @return a topological order of the vertices (as an interable) if the
+     * @return a topological order of the vertices (as an iterable) if the
      *    digraph has a topological order (or equivalently, if the digraph is a DAG),
      *    and {@code null} otherwise
      */
@@ -122,7 +122,7 @@ public boolean isDAG() {
     }
 
     /**
-     * The the rank of vertex {@code v} in the topological order;
+     * The rank of vertex {@code v} in the topological order;
      * -1 if the digraph is not a DAG
      *
      * @param v the vertex

File: src/main/java/edu/princeton/cs/algs4/TrieSET.java
Patch:
@@ -4,7 +4,7 @@
  *  Dependencies: StdIn.java
  *  Data files:   https://algs4.cs.princeton.edu/52trie/shellsST.txt
  *
- *  An set for extended ASCII strings, implemented  using a 256-way trie.
+ *  A set for extended ASCII strings, implemented  using a 256-way trie.
  *
  *  Sample client reads in a list of words from standard input and
  *  prints out each word, removing any duplicates.
@@ -201,7 +201,7 @@ public String longestPrefixOf(String query) {
     // returns the length of the longest string key in the subtrie
     // rooted at x that is a prefix of the query string,
     // assuming the first d character match and we have already
-    // found a prefix match of length length
+    // found a prefix match of the specified length
     private int longestPrefixOf(Node x, String query, int d, int length) {
         if (x == null) return length;
         if (x.isString) length = d;

File: src/main/java/edu/princeton/cs/algs4/TrieST.java
Patch:
@@ -21,7 +21,7 @@
 package edu.princeton.cs.algs4;
 
 /**
- *  The {@code TrieST} class represents an symbol table of key-value
+ *  The {@code TrieST} class represents a symbol table of key-value
  *  pairs, with string keys and generic values.
  *  It supports the usual <em>put</em>, <em>get</em>, <em>contains</em>,
  *  <em>delete</em>, <em>size</em>, and <em>is-empty</em> methods.

File: src/main/java/edu/princeton/cs/algs4/TwoPersonZeroSumGame.java
Patch:
@@ -5,7 +5,7 @@
  *
  *  Solve an m-by-n two-person zero-sum game by reducing it to
  *  linear programming. Assuming A is a strictly positive payoff
- *  matrix, the optimal row and column player strategies are x* an y*,
+ *  matrix, the optimal row and column player strategies are x* and y*,
  *  scaled to be probability distributions.
  *
  *  (P)  max  y^T 1         (D)  min   1^T x
@@ -51,7 +51,7 @@
  *  @author Kevin Wayne
  */
 public class TwoPersonZeroSumGame {
-    private static final double EPSILON = 1E-8;
+    private static final double EPSILON = 1.0E-8;
 
     private final int m;            // number of rows
     private final int n;            // number of columns

File: src/main/java/edu/princeton/cs/algs4/UF.java
Patch:
@@ -147,8 +147,8 @@ public boolean connected(int p, int q) {
     }
 
     /**
-     * Merges the set containing element {@code p} with the
-     * the set containing element {@code q}.
+     * Merges the set containing element {@code p} with the set
+     * containing element {@code q}.
      *
      * @param  p one element
      * @param  q the other element

File: src/main/java/edu/princeton/cs/algs4/Vector.java
Patch:
@@ -59,7 +59,7 @@ public Vector(int d) {
     /**
      * Initializes a vector from either an array or a vararg list.
      * The vararg syntax supports a constructor that takes a variable number of
-     * arugments such as Vector x = new Vector(1.0, 2.0, 3.0, 4.0).
+     * arguments such as Vector x = new Vector(1.0, 2.0, 3.0, 4.0).
      *
      * @param a  the array or vararg list
      */
@@ -212,7 +212,7 @@ public Vector direction() {
     /**
      * Returns a string representation of this vector.
      *
-     * @return a string representation of this vector, which consists of the
+     * @return a string representation of this vector, which consists of
      *         the vector entries, separates by single spaces
      */
     public String toString() {

File: src/main/java/edu/princeton/cs/algs4/WeightedQuickUnionUF.java
Patch:
@@ -133,8 +133,8 @@ private void validate(int p) {
     }
 
     /**
-     * Merges the set containing element {@code p} with the
-     * the set containing element {@code q}.
+     * Merges the set containing element {@code p} with the set
+     * containing element {@code q}.
      *
      * @param  p one element
      * @param  q the other element

File: src/main/java/edu/princeton/cs/algs4/Accumulator.java
Patch:
@@ -22,7 +22,7 @@
  *  to floating-point roundoff error than the more straightforward
  *  implementation based on saving the sum of the squares of the numbers.
  *  This technique is due to
- *  <a href = "https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm">B. P. Welford</a>.
+ *  <a href = "https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm">B. P. Welford</a>.
  *  Each operation takes constant time in the worst case.
  *  The amount of memory is constant - the data values are not stored.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/BinaryIn.java
Patch:
@@ -217,7 +217,7 @@ public char readChar() {
      * as an <em>r</em>-bit character.
      *
      * @param  r number of bits to read
-     * @return the next {@code r} bits of data from this binary input streamt as a {@code char}
+     * @return the next {@code r} bits of data from this binary input stream as a {@code char}
      * @throws NoSuchElementException if there are fewer than {@code r} bits available
      * @throws IllegalArgumentException unless {@code 1 <= r <= 16}
      */

File: src/main/java/edu/princeton/cs/algs4/BinaryStdOut.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  *  <i>Binary standard output</i>. This class provides methods for converting
- *  primtive type variables ({@code boolean}, {@code byte}, {@code char},
+ *  primitive type variables ({@code boolean}, {@code byte}, {@code char},
  *  {@code int}, {@code long}, {@code float}, and {@code double})
  *  to sequences of bits and writing them to standard output.
  *  Uses big-endian (most-significant byte first).
@@ -230,7 +230,7 @@ public static void write(short x) {
    /**
      * Writes the 8-bit char to standard output.
      * @param x the {@code char} to write.
-     * @throws IllegalArgumentException if {@code x} is not betwen 0 and 255.
+     * @throws IllegalArgumentException if {@code x} is not between 0 and 255.
      */
     public static void write(char x) {
         if (x < 0 || x >= 256) throw new IllegalArgumentException("Illegal 8-bit char = " + x);
@@ -271,7 +271,7 @@ public static void write(String s) {
    /**
      * Writes the string of <em>r</em>-bit characters to standard output.
      * @param s the {@code String} to write.
-     * @param r the number of relevants bits in each character.
+     * @param r the number of relevant bits in each character.
      * @throws IllegalArgumentException if r is not between 1 and 16.
      * @throws IllegalArgumentException if any character in the string is not
      * between 0 and 2<sup>r</sup> - 1.

File: src/main/java/edu/princeton/cs/algs4/GrayscalePicture.java
Patch:
@@ -1,6 +1,6 @@
 /******************************************************************************
  *  Compilation:  javac GrayscalePicture.java
- *  Execution:    java GrayscalePicture imagename
+ *  Execution:    java GrayscalePicture filename
  *  Dependencies: none
  *
  *  Data type for manipulating individual pixels of a grayscale image. The
@@ -161,7 +161,7 @@ public GrayscalePicture(String name) {
             width  = image.getWidth(null);
             height = image.getHeight(null);
 
-            // convert to grayscale inplace
+            // convert to grayscale in-place
             for (int col = 0; col < width; col++) {
                 for (int row = 0; row < height; row++) {
                     Color color = new Color(image.getRGB(col, row));
@@ -398,7 +398,7 @@ public String toString() {
         sb.append(width +"-by-" + height + " grayscale picture (grayscale values given in hex)\n");
         for (int row = 0; row < height; row++) {
             for (int col = 0; col < width; col++) {
-                int gray = 0;
+                int gray;
                 if (isOriginUpperLeft) gray = 0xFF & image.getRGB(col, row);
                 else                   gray = 0xFF & image.getRGB(col, height - row - 1);
                 sb.append(String.format("%3d ", gray));

File: src/main/java/edu/princeton/cs/algs4/In.java
Patch:
@@ -40,7 +40,7 @@
  *  <p>
  *  Like {@link Scanner}, reading a token also consumes preceding Java
  *  whitespace, reading a full line consumes
- *  the following end-of-line delimeter, while reading a character consumes
+ *  the following end-of-line delimiter, while reading a character consumes
  *  nothing extra.
  *  <p>
  *  Whitespace is defined in {@link Character#isWhitespace(char)}. Newlines
@@ -227,7 +227,7 @@ public boolean exists()  {
    /**
      * Returns true if input stream is empty (except possibly whitespace).
      * Use this to know whether the next call to {@link #readString()},
-     * {@link #readDouble()}, etc will succeed.
+     * {@link #readDouble()}, etc. will succeed.
      *
      * @return {@code true} if this input stream is empty (except possibly whitespace);
      *         {@code false} otherwise
@@ -529,7 +529,7 @@ public String[] readAllLines() {
         while (hasNextLine()) {
             lines.add(readLine());
         }
-        return lines.toArray(new String[lines.size()]);
+        return lines.toArray(new String[0]);
     }
 
 

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -244,7 +244,7 @@ private StdIn() { }
    /**
      * Returns true if standard input is empty (except possibly for whitespace).
      * Use this method to know whether the next call to {@link #readString()},
-     * {@link #readDouble()}, etc will succeed.
+     * {@link #readDouble()}, etc. will succeed.
      *
      * @return {@code true} if standard input is empty (except possibly
      *         for whitespace); {@code false} otherwise
@@ -331,7 +331,7 @@ public static String readAll() {
             return "";
 
         String result = scanner.useDelimiter(EVERYTHING_PATTERN).next();
-        // not that important to reset delimeter, since now scanner is empty
+        // not that important to reset delimiter, since now scanner is empty
         scanner.useDelimiter(WHITESPACE_PATTERN); // but let's do it anyway
         return result;
     }
@@ -541,7 +541,7 @@ public static String[] readAllLines() {
         while (hasNextLine()) {
             lines.add(readLine());
         }
-        return lines.toArray(new String[lines.size()]);
+        return lines.toArray(new String[0]);
     }
 
     /**

File: src/main/java/edu/princeton/cs/algs4/StdOut.java
Patch:
@@ -301,7 +301,7 @@ public static void printf(Locale locale, String format, Object... args) {
     }
 
    /**
-     * Unit tests some of the methods in {@code StdOut}.
+     * Unit tests some methods in {@code StdOut}.
      *
      * @param args the command-line arguments
      */

File: src/main/java/edu/princeton/cs/algs4/StdPicture.java
Patch:
@@ -114,7 +114,7 @@
  *
  *  <p><b>Transparency.</b>
  *  The {@code StdPicture} class supports transparent images, using the
- *  ARGB color model. The folowing methods are useful for this:
+ *  ARGB color model. The following methods are useful for this:
  *  <ul>
  *  <li> {@link #getAlpha(int col, int row)}
  *  <li> {@link #setARGB(int col, int row, int r, int g, int b, int a)}

File: src/main/java/edu/princeton/cs/algs4/StdRandom.java
Patch:
@@ -475,7 +475,7 @@ public static int discrete(int[] frequencies) {
         if (sum >= Integer.MAX_VALUE)
             throw new IllegalArgumentException("sum of frequencies overflows an int");
 
-        // pick index i with probabilitity proportional to frequency
+        // pick index i with probability proportional to frequency
         double r = uniformInt((int) sum);
         sum = 0;
         for (int i = 0; i < frequencies.length; i++) {

File: src/main/java/edu/princeton/cs/algs4/StdStats.java
Patch:
@@ -27,7 +27,7 @@
  *         max   5.000
  *     std dev   1.581
  *
- *  Should these funtions use varargs instead of array arguments?
+ *  Should these functions use varargs instead of array arguments?
  *
  ******************************************************************************/
 

File: src/main/java/edu/princeton/cs/algs4/BellmanFordSP.java
Patch:
@@ -4,7 +4,9 @@
  *  Dependencies: EdgeWeightedDigraph.java DirectedEdge.java Queue.java
  *                EdgeWeightedDirectedCycle.java
  *  Data files:   https://algs4.cs.princeton.edu/44sp/tinyEWDn.txt
- *                https://algs4.cs.princeton.edu/44sp/mediumEWDnc.txt
+ *                https://algs4.cs.princeton.edu/44sp/tinyEWDnc.txt
+ *                https://algs4.cs.princeton.edu/44sp/mediumEWD.txt
+ *                https://algs4.cs.princeton.edu/44sp/largeEWD.txt
  *
  *  Bellman-Ford shortest path algorithm. Computes the shortest path tree in
  *  edge-weighted digraph G from vertex s, or finds a negative cost cycle

File: src/main/java/edu/princeton/cs/algs4/QuickFindUF.java
Patch:
@@ -69,7 +69,7 @@ public class QuickFindUF {
     /**
      * Initializes an empty union-find data structure with
      * {@code n} elements {@code 0} through {@code n-1}. 
-     * Initially, each elements is in its own set.
+     * Initially, each element is in its own set.
      *
      * @param  n the number of elements
      * @throws IllegalArgumentException if {@code n < 0}

File: src/main/java/edu/princeton/cs/algs4/QuickUnionUF.java
Patch:
@@ -68,7 +68,7 @@ public class QuickUnionUF {
     /**
      * Initializes an empty union-find data structure with
      * {@code n} elements {@code 0} through {@code n-1}. 
-     * Initially, each elements is in its own set.
+     * Initially, each element is in its own set.
      *
      * @param  n the number of elements
      * @throws IllegalArgumentException if {@code n < 0}

File: src/main/java/edu/princeton/cs/algs4/UF.java
Patch:
@@ -89,7 +89,7 @@ public class UF {
     /**
      * Initializes an empty union-find data structure with
      * {@code n} elements {@code 0} through {@code n-1}.
-     * Initially, each elements is in its own set.
+     * Initially, each element is in its own set.
      *
      * @param  n the number of elements
      * @throws IllegalArgumentException if {@code n < 0}

File: src/main/java/edu/princeton/cs/algs4/WeightedQuickUnionUF.java
Patch:
@@ -70,7 +70,7 @@ public class WeightedQuickUnionUF {
     /**
      * Initializes an empty union-find data structure with
      * {@code n} elements {@code 0} through {@code n-1}. 
-     * Initially, each elements is in its own set.
+     * Initially, each element is in its own set.
      *
      * @param  n the number of elements
      * @throws IllegalArgumentException if {@code n < 0}

File: src/main/java/edu/princeton/cs/algs4/NFA.java
Patch:
@@ -124,6 +124,8 @@ public boolean recognizes(String txt) {
                 if ((regexp.charAt(v) == txt.charAt(i)) || regexp.charAt(v) == '.')
                     match.add(v+1); 
             }
+            if (match.isEmpty()) continue;
+
             dfs = new DirectedDFS(graph, match); 
             pc = new Bag<Integer>();
             for (int v = 0; v < graph.V(); v++)

File: src/main/java/edu/princeton/cs/algs4/FibonacciMinPQ.java
Patch:
@@ -27,6 +27,8 @@
  *  The delete-the-minimum operation takes amortized logarithmic time.
  *  The insert, min-key, is-empty, size, union and constructor take constant time.
  *
+ *   WARNING: THIS VERSION HAS AT LEAST ONE BUG.
+ *
  *  @author Tristan Claverie
  */
 public class FibonacciMinPQ<Key> implements Iterable<Key> {

File: src/main/java/edu/princeton/cs/algs4/Polynomial.java
Patch:
@@ -29,6 +29,9 @@
  *  It includes methods for addition, subtraction, multiplication, composition,
  *  differentiation, and evaluation.
  *  <p>
+ *  This computes correct results if all arithmetic performed is
+ *  without overflow.
+ *  <p> 
  *  For additional documentation,
  *  see <a href="https://algs4.cs.princeton.edu/99scientific">Section 9.9</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.

File: src/main/java/edu/princeton/cs/algs4/MinPQ.java
Patch:
@@ -176,7 +176,7 @@ public Key delMin() {
         Key min = pq[1];
         exch(1, n--);
         sink(1);
-        pq[n+1] = null;     // to avoid loiterig and help with garbage collection
+        pq[n+1] = null;     // to avoid loitering and help with garbage collection
         if ((n > 0) && (n == (pq.length - 1) / 4)) resize(pq.length / 2);
         assert isMinHeap();
         return min;

File: src/main/java/edu/princeton/cs/algs4/Quick.java
Patch:
@@ -32,9 +32,9 @@
  *  The {@code Quick} class provides static methods for sorting an
  *  array and selecting the ith smallest element in an array using quicksort.
  *  <p>
- *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/23quick">Section 2.3</a> of
- *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
+ *  For additional documentation, see
+ *  <a href="https://algs4.cs.princeton.edu/23quicksort">Section 2.3</a>   
+ *  of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick
  *  @author Kevin Wayne

File: src/main/java/edu/princeton/cs/algs4/Quick3way.java
Patch:
@@ -27,9 +27,9 @@
  *  The {@code Quick3way} class provides static methods for sorting an
  *  array using quicksort with 3-way partitioning.
  *  <p>
- *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/23quick">Section 2.3</a> of
- *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
+ *  For additional documentation, see
+ *  <a href="https://algs4.cs.princeton.edu/23quicksort">Section 2.3</a>
+ *  of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick
  *  @author Kevin Wayne

File: src/main/java/edu/princeton/cs/algs4/QuickBentleyMcIlroy.java
Patch:
@@ -22,9 +22,9 @@
  *  an array using an optimized version of quicksort (using Bentley-McIlroy
  *  3-way partitioning, Tukey's ninther, and cutoff to insertion sort).
  *  <p>
- *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/23quick">Section 2.3</a> of
- *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
+ *  For additional documentation, see
+ *  <a href="https://algs4.cs.princeton.edu/23quicksort">Section 2.3</a>   
+ *  of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick
  *  @author Kevin Wayne

File: src/main/java/edu/princeton/cs/algs4/QuickX.java
Patch:
@@ -18,9 +18,9 @@
  *  algorithm, median-of-3 to choose the partitioning element, and cutoff
  *  to insertion sort).
  *  <p>
- *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/23quick">Section 2.3</a> of
- *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
+ *  For additional documentation, see
+ *  <a href="https://algs4.cs.princeton.edu/23quicksort">Section 2.3</a>   
+ *  of <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick
  *  @author Kevin Wayne

File: src/main/java/edu/princeton/cs/algs4/QuickBentleyMcIlroy.java
Patch:
@@ -10,7 +10,7 @@
  *  and cuts off to insertion sort.
  *
  *  Reference: Engineering a Sort Function by Jon L. Bentley
- *  and M. Douglas McIlroy. Softwae-Practice and Experience,
+ *  and M. Douglas McIlroy. Software-Practice and Experience,
  *  Vol. 23 (11), 1249-1265 (November 1993).
  *
  ******************************************************************************/

File: src/main/java/edu/princeton/cs/algs4/MaxPQ.java
Patch:
@@ -143,7 +143,7 @@ public Key max() {
         return pq[1];
     }
 
-    // helper function to double the size of the heap array
+    // resize the underlying array to have the given capacity
     private void resize(int capacity) {
         assert capacity > n;
         Key[] temp = (Key[]) new Object[capacity];

File: src/main/java/edu/princeton/cs/algs4/MinPQ.java
Patch:
@@ -140,7 +140,7 @@ public Key min() {
         return pq[1];
     }
 
-    // helper function to double the size of the heap array
+    // resize the underlying array to have the given capacity
     private void resize(int capacity) {
         assert capacity > n;
         Key[] temp = (Key[]) new Object[capacity];

File: src/main/java/edu/princeton/cs/algs4/DirectedCycle.java
Patch:
@@ -60,7 +60,7 @@ public DirectedCycle(Digraph G) {
             if (!marked[v] && cycle == null) dfs(G, v);
     }
 
-    // check that algorithm computes either the topological order or finds a directed cycle
+    // run DFS and find a directed cycle (if one exists)
     private void dfs(Digraph G, int v) {
         onStack[v] = true;
         marked[v] = true;

File: src/main/java/edu/princeton/cs/algs4/BTree.java
Patch:
@@ -67,7 +67,7 @@ private Node(int k) {
     // external nodes: only use key and value
     private static class Entry {
         private Comparable key;
-        private final Object val;
+        private Object val;
         private Node next;     // helper field to iterate over array entries
         public Entry(Comparable key, Object val, Node next) {
             this.key  = key;
@@ -184,6 +184,7 @@ private Node insert(Node h, Key key, Value val, int ht) {
                     Node u = insert(h.children[j++].next, key, val, ht-1);
                     if (u == null) return null;
                     t.key = u.children[0].key;
+                    t.val = null;
                     t.next = u;
                     break;
                 }

File: src/main/java/edu/princeton/cs/algs4/IndexFibonacciMinPQ.java
Patch:
@@ -32,6 +32,8 @@
  *  The delete, increase-key, delete-the-minimum, change-key take amortized logarithmic time.
  *  Construction takes time proportional to the specified capacity
  *
+ *   WARNING: THIS VERSION HAS AT LEAST ONE BUG.
+ *
  *  @author Tristan Claverie
  */
 public class IndexFibonacciMinPQ<Key> implements Iterable<Integer> {

File: src/main/java/edu/princeton/cs/algs4/QuickFindUF.java
Patch:
@@ -23,7 +23,7 @@
  *  <em>n</em> elements, with each element in exactly one set.
  *  The elements are named 0 through <em>n</em>–1.
  *  Initially, there are <em>n</em> sets, with each element in its
- *  own set. The <em>cannonical elemement</em> of a set
+ *  own set. The <em>canonical element</em> of a set
  *  (also known as the <em>root</em>, <em>identifier</em>,
  *  <em>leader</em>, or <em>set representative</em>)
  *  is one distinguished element in the set. Here is a summary of

File: src/main/java/edu/princeton/cs/algs4/QuickUnionUF.java
Patch:
@@ -23,7 +23,7 @@
  *  <em>n</em> elements, with each element in exactly one set.
  *  The elements are named 0 through <em>n</em>–1.
  *  Initially, there are <em>n</em> sets, with each element in its
- *  own set. The <em>cannonical elemement</em> of a set
+ *  own set. The <em>canonical element</em> of a set
  *  (also known as the <em>root</em>, <em>identifier</em>,
  *  <em>leader</em>, or <em>set representative</em>)
  *  is one distinguished element in the set. Here is a summary of

File: src/main/java/edu/princeton/cs/algs4/UF.java
Patch:
@@ -35,7 +35,7 @@
  *  <em>n</em> elements, with each element in exactly one set.
  *  The elements are named 0 through <em>n</em>–1.
  *  Initially, there are <em>n</em> sets, with each element in its
- *  own set. The <em>cannonical elemement</em> of a set
+ *  own set. The <em>canonical element</em> of a set
  *  (also known as the <em>root</em>, <em>identifier</em>,
  *  <em>leader</em>, or <em>set representative</em>)
  *  is one distinguished element in the set. Here is a summary of
@@ -66,7 +66,7 @@
  *  The <em>count</em> operation takes &Theta;(1) time.
  *  Moreover, starting from an empty data structure with <em>n</em> sites,
  *  any intermixed sequence of <em>m</em> <em>union</em> and <em>find</em>
- *  operations takes <em>O</em>(m &alpha;(<em>n</em>)) time,
+ *  operations takes <em>O</em>(<em>m</em> &alpha;(<em>n</em>)) time,
  *  where &alpha;(<em>n</em>) is the inverse of
  *  <a href = "https://en.wikipedia.org/wiki/Ackermann_function#Inverse">Ackermann's function</a>.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/WeightedQuickUnionUF.java
Patch:
@@ -23,7 +23,7 @@
  *  <em>n</em> elements, with each element in exactly one set.
  *  The elements are named 0 through <em>n</em>–1.
  *  Initially, there are <em>n</em> sets, with each element in its
- *  own set. The <em>cannonical elemement</em> of a set
+ *  own set. The <em>canonical element</em> of a set
  *  (also known as the <em>root</em>, <em>identifier</em>,
  *  <em>leader</em>, or <em>set representative</em>)
  *  is one distinguished element in the set. Here is a summary of

File: src/main/java/edu/princeton/cs/algs4/DigraphGenerator.java
Patch:
@@ -136,11 +136,10 @@ public static Digraph dag(int V, int E) {
         return G;
     }
 
-    // tournament
     /**
      * Returns a random tournament digraph on {@code V} vertices. A tournament digraph
-     * is a DAG in which for every two vertices, there is one directed edge.
-     * A tournament is an oriented complete graph.
+     * is a digraph in which, for every pair of vertices, there is one and only one
+     * directed edge connecting them. A tournament is an oriented complete graph.
      * @param V the number of vertices
      * @return a random tournament digraph on {@code V} vertices
      */

File: src/main/java/edu/princeton/cs/algs4/Draw.java
Patch:
@@ -1619,7 +1619,7 @@ public void keyReleased(KeyEvent e) {
 
         // notify all listeners
         for (DrawListener listener : listeners)
-            listener.keyPressed(e.getKeyCode());
+            listener.keyReleased(e.getKeyCode());
     }
 
 

File: src/main/java/edu/princeton/cs/algs4/TST.java
Patch:
@@ -139,6 +139,7 @@ public void put(String key, Value val) {
             throw new IllegalArgumentException("calls put() with null key");
         }
         if (!contains(key)) n++;
+        else if(val == null) n--;       // delete existing key
         root = put(root, key, val, 0);
     }
 

File: src/main/java/edu/princeton/cs/algs4/Draw.java
Patch:
@@ -296,6 +296,7 @@ private void init() {
         frame.setResizable(false);
         // frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            // closes all windows
         frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);      // closes only current window
+        frame.setFocusTraversalKeysEnabled(false);  // to recognize VK_TAB with isKeyPressed()
         frame.setTitle(name);
         frame.setJMenuBar(createMenuBar());
         frame.pack();

File: src/main/java/edu/princeton/cs/algs4/Genome.java
Patch:
@@ -22,7 +22,7 @@
  *  and expanding a genomic sequence using a 2-bit code.
  *  <p>
  *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/55compress">Section 5.5</a> of
+ *  see <a href="https://algs4.cs.princeton.edu/55compression">Section 5.5</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick

File: src/main/java/edu/princeton/cs/algs4/HexDump.java
Patch:
@@ -31,7 +31,7 @@
  *  of a binary file in hexadecimal.
  *  <p>
  *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/55compress">Section 5.5</a> of
+ *  see <a href="https://algs4.cs.princeton.edu/55compression">Section 5.5</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *  <p>
  *  See also {@link BinaryDump} and {@link PictureDump}.

File: src/main/java/edu/princeton/cs/algs4/Huffman.java
Patch:
@@ -28,7 +28,7 @@
  *  ASCII alphabet.
  *  <p>
  *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/55compress">Section 5.5</a> of
+ *  see <a href="https://algs4.cs.princeton.edu/55compression">Section 5.5</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick

File: src/main/java/edu/princeton/cs/algs4/IndexMaxPQ.java
Patch:
@@ -30,7 +30,7 @@
  *  <em>change-key</em>, <em>decrease-key</em>, and <em>increase-key</em>
  *  operations take logarithmic time.
  *  The <em>is-empty</em>, <em>size</em>, <em>max-index</em>, <em>max-key</em>,
- *  and <em>key-of</em> operations take constant time.
+ *  <em>contains</em>, and <em>key-of</em> operations take constant time.
  *  Construction takes time proportional to the specified capacity.
  *  <p>
  *  For additional documentation, see <a href="https://algs4.cs.princeton.edu/24pq">Section 2.4</a> of

File: src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java
Patch:
@@ -30,7 +30,7 @@
  *  <em>change-key</em>, <em>decrease-key</em>, and <em>increase-key</em>
  *  operations take logarithmic time.
  *  The <em>is-empty</em>, <em>size</em>, <em>min-index</em>, <em>min-key</em>,
- *  and <em>key-of</em> operations take constant time.
+ *  <em>contains</em>, and <em>key-of</em> operations take constant time.
  *  Construction takes time proportional to the specified capacity.
  *  <p>
  *  For additional documentation, see <a href="https://algs4.cs.princeton.edu/24pq">Section 2.4</a> of

File: src/main/java/edu/princeton/cs/algs4/KruskalMST.java
Patch:
@@ -1,7 +1,7 @@
 /******************************************************************************
  *  Compilation:  javac KruskalMST.java
  *  Execution:    java  KruskalMST filename.txt
- *  Dependencies: EdgeWeightedGraph.java Edge.java Queue.java
+ *  Dependencies: EdgeWeightedGraph.java Edge.java Queue.java MinPQ.java
  *                UF.java In.java StdOut.java
  *  Data files:   https://algs4.cs.princeton.edu/43mst/tinyEWG.txt
  *                https://algs4.cs.princeton.edu/43mst/mediumEWG.txt

File: src/main/java/edu/princeton/cs/algs4/LZW.java
Patch:
@@ -26,7 +26,7 @@
  *  ASCII alphabet with 12-bit codewords.
  *  <p>
  *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/55compress">Section 5.5</a> of
+ *  see <a href="https://algs4.cs.princeton.edu/55compression">Section 5.5</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick  

File: src/main/java/edu/princeton/cs/algs4/PictureDump.java
Patch:
@@ -24,7 +24,7 @@
  *  of a binary file as a black-and-white picture.
  *  <p>
  *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/55compress">Section 5.5</a> of
+ *  see <a href="https://algs4.cs.princeton.edu/55compression">Section 5.5</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *  <p>
  *  See also {@link BinaryDump} and {@link HexDump}.

File: src/main/java/edu/princeton/cs/algs4/RunLength.java
Patch:
@@ -30,7 +30,7 @@
  *  run lengths.
  *  <p>
  *  For additional documentation,
- *  see <a href="https://algs4.cs.princeton.edu/55compress">Section 5.5</a> of
+ *  see <a href="https://algs4.cs.princeton.edu/55compression">Section 5.5</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
  *
  *  @author Robert Sedgewick

File: src/main/java/edu/princeton/cs/algs4/StdDraw.java
Patch:
@@ -699,6 +699,7 @@ private static void init() {
 
         frame.setContentPane(draw);
         frame.addKeyListener(std);    // JLabel cannot get keyboard focus
+        frame.setFocusTraversalKeysEnabled(false);  // allow VK_TAB with isKeyPressed()
         frame.setResizable(false);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            // closes all windows
         // frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);      // closes only current window

File: src/main/java/edu/princeton/cs/algs4/StdRandom.java
Patch:
@@ -355,7 +355,7 @@ public static double cauchy() {
      */
     public static int discrete(double[] probabilities) {
         if (probabilities == null) throw new IllegalArgumentException("argument array is null");
-        double EPSILON = 1E-14;
+        double EPSILON = 1.0E-14;
         double sum = 0.0;
         for (int i = 0; i < probabilities.length; i++) {
             if (!(probabilities[i] >= 0.0))

File: src/main/java/edu/princeton/cs/algs4/Bipartite.java
Patch:
@@ -9,7 +9,6 @@
  *  Given a graph, find either (i) a bipartition or (ii) an odd-length cycle.
  *  Runs in O(E + V) time.
  *
- *
  ******************************************************************************/
 
 package edu.princeton.cs.algs4;

File: src/main/java/edu/princeton/cs/algs4/CollisionSystem.java
Patch:
@@ -33,7 +33,7 @@
  *  @author Kevin Wayne
  */
 public class CollisionSystem {
-    private final static double HZ = 0.5;    // number of redraw events per clock tick
+    private static final double HZ = 0.5;    // number of redraw events per clock tick
 
     private MinPQ<Event> pq;          // the priority queue
     private double t  = 0.0;          // simulation clock time

File: src/main/java/edu/princeton/cs/algs4/DoublingRatio.java
Patch:
@@ -12,7 +12,6 @@
  *     4000     4.5   8.0
  *     8000    35.7   8.0
  *     4000     3.9   6.6
-
  *  ...
  *
  ******************************************************************************/

File: src/main/java/edu/princeton/cs/algs4/GrahamScan.java
Patch:
@@ -65,7 +65,7 @@ public GrahamScan(Point2D[] points) {
             if (points[i] == null)
                 throw new IllegalArgumentException("points[" + i + "] is null");
             a[i] = points[i];
-         }
+        }
 
         // preprocess so that a[0] has lowest y-coordinate; break ties by x-coordinate
         // a[0] is an extreme point of the convex hull

File: src/main/java/edu/princeton/cs/algs4/Polynomial.java
Patch:
@@ -219,7 +219,7 @@ public String toString() {
         String s = coef[degree] + "x^" + degree;
         for (int i = degree - 1; i >= 0; i--) {
             if      (coef[i] == 0) continue;
-            else if (coef[i]  > 0) s = s + " + " + ( coef[i]);
+            else if (coef[i]  > 0) s = s + " + " + (coef[i]);
             else if (coef[i]  < 0) s = s + " - " + (-coef[i]);
             if      (i == 1) s = s + "x";
             else if (i >  1) s = s + "x^" + i;
@@ -262,8 +262,7 @@ public static void main(String[] args) {
         StdOut.println("p(3)        = " + p.evaluate(3));
         StdOut.println("p'(x)       = " + p.differentiate());
         StdOut.println("p''(x)      = " + p.differentiate().differentiate());
-   }
-
+    }
 }
 
 /******************************************************************************

File: src/main/java/edu/princeton/cs/algs4/RectHV.java
Patch:
@@ -50,7 +50,7 @@ public RectHV(double xmin, double ymin, double xmax, double ymax) {
         if (Double.isNaN(ymin) || Double.isNaN(ymax)) {
             throw new IllegalArgumentException("y-coordinate is NaN: " + toString());
         }
-	if (xmax < xmin) {
+        if (xmax < xmin) {
             throw new IllegalArgumentException("xmax < xmin: " + toString());
         }
         if (ymax < ymin) {

File: src/main/java/edu/princeton/cs/algs4/StdAudio.java
Patch:
@@ -276,7 +276,7 @@ public static synchronized void play(final String filename) {
                 public void run() {
                     stream(filename);
                 }
-           }).start();
+            }).start();
         }
 
         // let's try Applet.newAudioClip() instead
@@ -298,7 +298,7 @@ private static void playApplet(String filename) {
         URL url = null;
         try {
             File file = new File(filename);
-            if(file.canRead()) url = file.toURI().toURL();
+            if (file.canRead()) url = file.toURI().toURL();
         }
         catch (MalformedURLException e) {
             throw new IllegalArgumentException("could not play '" + filename + "'", e);

File: src/main/java/edu/princeton/cs/algs4/SymbolDigraph.java
Patch:
@@ -164,7 +164,7 @@ public Digraph digraph() {
 
     // throw an IllegalArgumentException unless {@code 0 <= v < V}
     private void validateVertex(int v) {
-         int V = graph.V();
+        int V = graph.V();
         if (v < 0 || v >= V)
             throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
     }

File: src/main/java/edu/princeton/cs/algs4/SymbolGraph.java
Patch:
@@ -189,7 +189,7 @@ public Graph graph() {
 
     // throw an IllegalArgumentException unless {@code 0 <= v < V}
     private void validateVertex(int v) {
-         int V = graph.V();
+        int V = graph.V();
         if (v < 0 || v >= V)
             throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
     }

File: src/main/java/edu/princeton/cs/algs4/AcyclicLP.java
Patch:
@@ -63,7 +63,7 @@ public AcyclicLP(EdgeWeightedDigraph G, int s) {
             distTo[v] = Double.NEGATIVE_INFINITY;
         distTo[s] = 0.0;
 
-        // relax vertices in toplogical order
+        // relax vertices in topological order
         Topological topological = new Topological(G);
         if (!topological.hasOrder())
             throw new IllegalArgumentException("Digraph is not acyclic.");

File: src/main/java/edu/princeton/cs/algs4/AcyclicSP.java
Patch:
@@ -62,7 +62,7 @@ public AcyclicSP(EdgeWeightedDigraph G, int s) {
             distTo[v] = Double.POSITIVE_INFINITY;
         distTo[s] = 0.0;
 
-        // visit vertices in toplogical order
+        // visit vertices in topological order
         Topological topological = new Topological(G);
         if (!topological.hasOrder())
             throw new IllegalArgumentException("Digraph is not acyclic.");

File: src/main/java/edu/princeton/cs/algs4/AVLTreeST.java
Patch:
@@ -811,7 +811,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/AcyclicLP.java
Patch:
@@ -158,7 +158,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/AcyclicSP.java
Patch:
@@ -157,7 +157,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/AdjMatrixEdgeWeightedDigraph.java
Patch:
@@ -192,7 +192,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Alphabet.java
Patch:
@@ -256,7 +256,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Arbitrage.java
Patch:
@@ -88,7 +88,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/AssignmentProblem.java
Patch:
@@ -306,7 +306,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Average.java
Patch:
@@ -59,7 +59,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BST.java
Patch:
@@ -544,7 +544,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BTree.java
Patch:
@@ -289,7 +289,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Bag.java
Patch:
@@ -152,7 +152,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BellmanFordSP.java
Patch:
@@ -298,7 +298,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinaryDump.java
Patch:
@@ -74,7 +74,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinaryIn.java
Patch:
@@ -379,7 +379,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinaryInsertion.java
Patch:
@@ -120,7 +120,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinaryOut.java
Patch:
@@ -341,7 +341,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinarySearch.java
Patch:
@@ -107,7 +107,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinarySearchST.java
Patch:
@@ -430,7 +430,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinaryStdIn.java
Patch:
@@ -299,7 +299,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinaryStdOut.java
Patch:
@@ -299,7 +299,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BinomialMinPQ.java
Patch:
@@ -304,7 +304,7 @@ public int compare(Key key1, Key key2) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Bipartite.java
Patch:
@@ -213,7 +213,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BipartiteMatching.java
Patch:
@@ -345,7 +345,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BipartiteX.java
Patch:
@@ -227,7 +227,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BlackFilter.java
Patch:
@@ -67,7 +67,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BoruvkaMST.java
Patch:
@@ -196,7 +196,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BoyerMoore.java
Patch:
@@ -174,7 +174,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java
Patch:
@@ -225,7 +225,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BreadthFirstPaths.java
Patch:
@@ -287,7 +287,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/CC.java
Patch:
@@ -235,7 +235,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/CPM.java
Patch:
@@ -99,7 +99,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Cat.java
Patch:
@@ -63,7 +63,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ClosestPair.java
Patch:
@@ -207,7 +207,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/CollisionSystem.java
Patch:
@@ -223,7 +223,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Complex.java
Patch:
@@ -262,7 +262,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Count.java
Patch:
@@ -75,7 +75,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Counter.java
Patch:
@@ -117,7 +117,7 @@ public static void main(String[] args) {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Cycle.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  *  The {@code Cycle} class represents a data type for 
- *  determining whether an undirected graph has a cycle.
+ *  determining whether an undirected graph has a simple cycle.
  *  The <em>hasCycle</em> operation determines whether the graph has
  *  a cycle and, if so, the <em>cycle</em> operation returns one.
  *  <p>
@@ -174,7 +174,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Date.java
Patch:
@@ -215,7 +215,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DeDup.java
Patch:
@@ -63,7 +63,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DegreesOfSeparation.java
Patch:
@@ -129,7 +129,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DepthFirstDirectedPaths.java
Patch:
@@ -149,7 +149,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DepthFirstOrder.java
Patch:
@@ -243,7 +243,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DepthFirstPaths.java
Patch:
@@ -147,7 +147,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DepthFirstSearch.java
Patch:
@@ -115,7 +115,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Digraph.java
Patch:
@@ -258,7 +258,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DigraphGenerator.java
Patch:
@@ -503,7 +503,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DijkstraAllPairsSP.java
Patch:
@@ -101,7 +101,7 @@ private void validateVertex(int v) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DijkstraSP.java
Patch:
@@ -238,7 +238,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DijkstraUndirectedSP.java
Patch:
@@ -250,7 +250,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedCycle.java
Patch:
@@ -22,7 +22,7 @@
  *  The {@code DirectedCycle} class represents a data type for 
  *  determining whether a digraph has a directed cycle.
  *  The <em>hasCycle</em> operation determines whether the digraph has
- *  a directed cycle and, and of so, the <em>cycle</em> operation
+ *  a simple directed cycle and, if so, the <em>cycle</em> operation
  *  returns one.
  *  <p>
  *  This implementation uses depth-first search.
@@ -156,7 +156,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedCycleX.java
Patch:
@@ -14,7 +14,7 @@
  *  The {@code DirectedCycleX} class represents a data type for 
  *  determining whether a digraph has a directed cycle.
  *  The <em>hasCycle</em> operation determines whether the digraph has
- *  a directed cycle and, and of so, the <em>cycle</em> operation
+ *  a simple directed cycle and, if so, the <em>cycle</em> operation
  *  returns one.
  *  <p>
  *  This implementation uses a nonrecursive, queue-based algorithm.
@@ -170,7 +170,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedDFS.java
Patch:
@@ -156,7 +156,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedEdge.java
Patch:
@@ -90,7 +90,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianCycle.java
Patch:
@@ -251,7 +251,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianPath.java
Patch:
@@ -253,7 +253,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DoublingRatio.java
Patch:
@@ -71,7 +71,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DoublingTest.java
Patch:
@@ -64,7 +64,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Draw.java
Patch:
@@ -1427,7 +1427,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/DrawListener.java
Patch:
@@ -57,7 +57,7 @@ public interface DrawListener {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Edge.java
Patch:
@@ -117,7 +117,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java
Patch:
@@ -256,7 +256,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedDirectedCycle.java
Patch:
@@ -195,7 +195,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedGraph.java
Patch:
@@ -262,7 +262,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/EulerianCycle.java
Patch:
@@ -290,7 +290,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/EulerianPath.java
Patch:
@@ -283,7 +283,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FFT.java
Patch:
@@ -276,7 +276,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FarthestPair.java
Patch:
@@ -169,7 +169,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FenwickTree.java
Patch:
@@ -191,7 +191,7 @@ else if (line[0].equals("rsq")) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FibonacciMinPQ.java
Patch:
@@ -328,7 +328,7 @@ public int compare(Key key1, Key key2) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FileIndex.java
Patch:
@@ -81,7 +81,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FlowEdge.java
Patch:
@@ -204,7 +204,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FlowNetwork.java
Patch:
@@ -193,7 +193,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FloydWarshall.java
Patch:
@@ -276,7 +276,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FordFulkerson.java
Patch:
@@ -271,7 +271,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/FrequencyCounter.java
Patch:
@@ -86,7 +86,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GREP.java
Patch:
@@ -65,7 +65,7 @@ public static void main(String[] args) {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GabowSCC.java
Patch:
@@ -198,7 +198,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GaussJordanElimination.java
Patch:
@@ -404,7 +404,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GaussianElimination.java
Patch:
@@ -355,7 +355,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Genome.java
Patch:
@@ -84,7 +84,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GlobalMincut.java
Patch:
@@ -298,7 +298,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GrahamScan.java
Patch:
@@ -158,7 +158,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Graph.java
Patch:
@@ -239,7 +239,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/GraphGenerator.java
Patch:
@@ -470,7 +470,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Heap.java
Patch:
@@ -101,7 +101,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/HexDump.java
Patch:
@@ -80,7 +80,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/HopcroftKarp.java
Patch:
@@ -395,7 +395,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Huffman.java
Patch:
@@ -213,7 +213,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/In.java
Patch:
@@ -779,7 +779,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/IndexBinomialMinPQ.java
Patch:
@@ -502,7 +502,7 @@ public int compare(Key key1, Key key2) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/IndexFibonacciMinPQ.java
Patch:
@@ -469,7 +469,7 @@ public int compare(Key key1, Key key2) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/IndexMaxPQ.java
Patch:
@@ -374,7 +374,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java
Patch:
@@ -364,7 +364,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java
Patch:
@@ -371,7 +371,7 @@ public int compare(Key key1, Key key2) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Insertion.java
Patch:
@@ -209,7 +209,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/InsertionX.java
Patch:
@@ -122,7 +122,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Interval1D.java
Patch:
@@ -255,7 +255,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Interval2D.java
Patch:
@@ -144,7 +144,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Inversions.java
Patch:
@@ -175,7 +175,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/KMP.java
Patch:
@@ -175,7 +175,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/KWIK.java
Patch:
@@ -92,7 +92,7 @@ public static void main(String[] args) {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Knuth.java
Patch:
@@ -122,7 +122,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/KosarajuSharirSCC.java
Patch:
@@ -220,7 +220,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/KruskalMST.java
Patch:
@@ -193,7 +193,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LSD.java
Patch:
@@ -155,7 +155,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LZW.java
Patch:
@@ -109,7 +109,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LazyPrimMST.java
Patch:
@@ -209,7 +209,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LinearProbingHashST.java
Patch:
@@ -263,7 +263,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LinearRegression.java
Patch:
@@ -154,7 +154,7 @@ public String toString() {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LinkedBag.java
Patch:
@@ -152,7 +152,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LinkedQueue.java
Patch:
@@ -205,7 +205,7 @@ else if (!queue.isEmpty())
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LinkedStack.java
Patch:
@@ -196,7 +196,7 @@ else if (!stack.isEmpty())
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LongestCommonSubstring.java
Patch:
@@ -106,7 +106,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LongestRepeatedSubstring.java
Patch:
@@ -89,7 +89,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LookupCSV.java
Patch:
@@ -75,7 +75,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/LookupIndex.java
Patch:
@@ -92,7 +92,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/MSD.java
Patch:
@@ -225,7 +225,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/MaxPQ.java
Patch:
@@ -295,7 +295,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Merge.java
Patch:
@@ -174,7 +174,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/MergeBU.java
Patch:
@@ -115,7 +115,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/MergeX.java
Patch:
@@ -231,7 +231,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/MinPQ.java
Patch:
@@ -286,7 +286,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Multiway.java
Patch:
@@ -81,7 +81,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/MultiwayMinPQ.java
Patch:
@@ -305,7 +305,7 @@ public int compare(Key key1, Key key2) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/NFA.java
Patch:
@@ -154,7 +154,7 @@ public static void main(String[] args) {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/NonrecursiveDFS.java
Patch:
@@ -133,7 +133,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/NonrecursiveDirectedDFS.java
Patch:
@@ -121,7 +121,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Out.java
Patch:
@@ -319,7 +319,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Particle.java
Patch:
@@ -228,7 +228,7 @@ public double kineticEnergy() {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/PatriciaSET.java
Patch:
@@ -434,7 +434,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/PatriciaST.java
Patch:
@@ -453,7 +453,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Picture.java
Patch:
@@ -464,7 +464,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/PictureDump.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Point2D.java
Patch:
@@ -372,7 +372,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Polynomial.java
Patch:
@@ -267,7 +267,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/PrimMST.java
Patch:
@@ -223,7 +223,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Queue.java
Patch:
@@ -180,7 +180,7 @@ else if (!queue.isEmpty())
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Quick.java
Patch:
@@ -188,7 +188,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Quick3string.java
Patch:
@@ -151,7 +151,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Quick3way.java
Patch:
@@ -124,7 +124,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/QuickBentleyMcIlroy.java
Patch:
@@ -178,7 +178,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/QuickFindUF.java
Patch:
@@ -191,7 +191,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/QuickUnionUF.java
Patch:
@@ -187,7 +187,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/QuickX.java
Patch:
@@ -151,7 +151,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/RabinKarp.java
Patch:
@@ -171,7 +171,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/RandomSeq.java
Patch:
@@ -70,7 +70,7 @@ else if (args.length == 3) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/RectHV.java
Patch:
@@ -224,7 +224,7 @@ public void draw() {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/RedBlackBST.java
Patch:
@@ -721,7 +721,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ResizingArrayBag.java
Patch:
@@ -116,7 +116,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ResizingArrayQueue.java
Patch:
@@ -161,7 +161,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ResizingArrayStack.java
Patch:
@@ -169,7 +169,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/RunLength.java
Patch:
@@ -103,7 +103,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SET.java
Patch:
@@ -332,7 +332,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ST.java
Patch:
@@ -231,7 +231,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SegmentTree.java
Patch:
@@ -337,7 +337,7 @@ else if (line[0].equals("rmq")) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Selection.java
Patch:
@@ -150,7 +150,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SeparateChainingHashST.java
Patch:
@@ -206,7 +206,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SequentialSearchST.java
Patch:
@@ -210,7 +210,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Shell.java
Patch:
@@ -126,7 +126,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SparseVector.java
Patch:
@@ -221,7 +221,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Stack.java
Patch:
@@ -191,7 +191,7 @@ else if (!stack.isEmpty())
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StaticSETofInts.java
Patch:
@@ -81,7 +81,7 @@ public int rank(int key) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdArrayIO.java
Patch:
@@ -286,7 +286,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdAudio.java
Patch:
@@ -427,7 +427,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdDraw.java
Patch:
@@ -1899,7 +1899,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -648,7 +648,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdOut.java
Patch:
@@ -320,7 +320,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdRandom.java
Patch:
@@ -650,7 +650,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StdStats.java
Patch:
@@ -535,7 +535,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Stopwatch.java
Patch:
@@ -86,7 +86,7 @@ public static void main(String[] args) {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/StopwatchCPU.java
Patch:
@@ -88,7 +88,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SuffixArray.java
Patch:
@@ -221,7 +221,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SuffixArrayX.java
Patch:
@@ -271,7 +271,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SymbolDigraph.java
Patch:
@@ -67,7 +67,7 @@ public SymbolDigraph(String filename, String delimiter) {
             }
         }
 
-        // inverted index to get string keys in an aray
+        // inverted index to get string keys in an array
         keys = new String[st.size()];
         for (String name : st.keys()) {
             keys[st.get(name)] = name;
@@ -189,7 +189,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/SymbolGraph.java
Patch:
@@ -92,9 +92,8 @@ public SymbolGraph(String filename, String delimiter) {
                     st.put(a[i], st.size());
             }
         }
-        StdOut.println("Done reading " + filename);
 
-        // inverted index to get string keys in an aray
+        // inverted index to get string keys in an array
         keys = new String[st.size()];
         for (String name : st.keys()) {
             keys[st.get(name)] = name;
@@ -222,7 +221,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TST.java
Patch:
@@ -297,7 +297,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TarjanSCC.java
Patch:
@@ -193,7 +193,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ThreeSum.java
Patch:
@@ -107,7 +107,7 @@ public static void main(String[] args)  {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/ThreeSumFast.java
Patch:
@@ -126,7 +126,7 @@ public static void main(String[] args)  {
 } 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TopM.java
Patch:
@@ -70,7 +70,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Topological.java
Patch:
@@ -161,7 +161,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TopologicalX.java
Patch:
@@ -319,7 +319,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Transaction.java
Patch:
@@ -220,7 +220,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TransitiveClosure.java
Patch:
@@ -120,7 +120,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TrieSET.java
Patch:
@@ -286,7 +286,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TrieST.java
Patch:
@@ -309,7 +309,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/TwoPersonZeroSumGame.java
Patch:
@@ -353,7 +353,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/UF.java
Patch:
@@ -216,7 +216,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Vector.java
Patch:
@@ -251,7 +251,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/WeightedQuickUnionUF.java
Patch:
@@ -199,7 +199,7 @@ public static void main(String[] args) {
 
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/WhiteFilter.java
Patch:
@@ -67,7 +67,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/Whitelist.java
Patch:
@@ -68,7 +68,7 @@ public static void main(String[] args) {
 }
 
 /******************************************************************************
- *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.
+ *  Copyright 2002-2018, Robert Sedgewick and Kevin Wayne.
  *
  *  This file is part of algs4.jar, which accompanies the textbook
  *

File: src/main/java/edu/princeton/cs/algs4/BST.java
Patch:
@@ -339,10 +339,11 @@ private Node ceiling(Node x, Key key) {
     } 
 
     /**
-     * Return the kth smallest key in the symbol table.
+     * Return the key in the symbol table whose rank is {@code k}.
+     * This is the (k+1)st smallest key in the symbol table.
      *
      * @param  k the order statistic
-     * @return the {@code k}th smallest key in the symbol table
+     * @return the key in the symbol table of rank {@code k}
      * @throws IllegalArgumentException unless {@code k} is between 0 and
      *        <em>n</em>–1
      */

File: src/main/java/edu/princeton/cs/algs4/Topological.java
Patch:
@@ -1,5 +1,5 @@
 /******************************************************************************
- *  Compilation:  javac Topoological.java
+ *  Compilation:  javac Topological.java
  *  Execution:    java  Topological filename.txt delimiter
  *  Dependencies: Digraph.java DepthFirstOrder.java DirectedCycle.java
  *                EdgeWeightedDigraph.java EdgeWeightedDirectedCycle.java

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianCycle.java
Patch:
@@ -127,7 +127,7 @@ private static int nonIsolatedVertex(Digraph G) {
     //    - indegree(v) = outdegree(v) for every vertex
     //    - the graph is connected, when viewed as an undirected graph
     //      (ignoring isolated vertices)
-    private static boolean hasEulerianCycle(Digraph G) {
+    private static boolean satisfiesNecessaryAndSufficientConditions(Digraph G) {
 
         // Condition 0: at least 1 edge
         if (G.E() == 0) return false;
@@ -160,7 +160,7 @@ private boolean certifySolution(Digraph G) {
         if (hasEulerianCycle() == (cycle() == null)) return false;
 
         // hashEulerianCycle() returns correct value
-        if (hasEulerianCycle() != hasEulerianCycle(G)) return false;
+        if (hasEulerianCycle() != satisfiesNecessaryAndSufficientConditions(G)) return false;
 
         // nothing else to check if no Eulerian cycle
         if (cycle == null) return true;

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianPath.java
Patch:
@@ -134,8 +134,7 @@ private static int nonIsolatedVertex(Digraph G) {
     //      (and one vertex v may have indegree(v) = outdegree(v) + 1)
     //    - the graph is connected, when viewed as an undirected graph
     //      (ignoring isolated vertices)
-    // This method is solely for unit testing.
-    private static boolean hasEulerianPath(Digraph G) {
+    private static boolean satisfiesNecessaryAndSufficientConditions(Digraph G) {
         if (G.E() == 0) return true;
 
         // Condition 1: indegree(v) == outdegree(v) for every vertex,
@@ -169,7 +168,7 @@ private boolean check(Digraph G) {
         if (hasEulerianPath() == (path() == null)) return false;
 
         // hashEulerianPath() returns correct value
-        if (hasEulerianPath() != hasEulerianPath(G)) return false;
+        if (hasEulerianPath() != satisfiesNecessaryAndSufficientConditions(G)) return false;
 
         // nothing else to check if no Eulerian path
         if (path == null) return true;

File: src/main/java/edu/princeton/cs/algs4/EulerianCycle.java
Patch:
@@ -170,7 +170,7 @@ private static int nonIsolatedVertex(Graph G) {
     //    - at least one edge
     //    - degree(v) is even for every vertex v
     //    - the graph is connected (ignoring isolated vertices)
-    private static boolean hasEulerianCycle(Graph G) {
+    private static boolean satisfiesNecessaryAndSufficientConditions(Graph G) {
 
         // Condition 0: at least 1 edge
         if (G.E() == 0) return false;
@@ -197,7 +197,7 @@ private boolean certifySolution(Graph G) {
         if (hasEulerianCycle() == (cycle() == null)) return false;
 
         // hashEulerianCycle() returns correct value
-        if (hasEulerianCycle() != hasEulerianCycle(G)) return false;
+        if (hasEulerianCycle() != satisfiesNecessaryAndSufficientConditions(G)) return false;
 
         // nothing else to check if no Eulerian cycle
         if (cycle == null) return true;

File: src/main/java/edu/princeton/cs/algs4/EulerianPath.java
Patch:
@@ -175,7 +175,7 @@ private static int nonIsolatedVertex(Graph G) {
     //    - degree(v) is even for every vertex, except for possibly two
     //    - the graph is connected (ignoring isolated vertices)
     // This method is solely for unit testing.
-    private static boolean hasEulerianPath(Graph G) {
+    private static boolean satisfiesNecessaryAndSufficientConditions(Graph G) {
         if (G.E() == 0) return true;
 
         // Condition 1: degree(v) is even except for possibly two
@@ -202,7 +202,7 @@ private boolean certifySolution(Graph G) {
         if (hasEulerianPath() == (path() == null)) return false;
 
         // hashEulerianPath() returns correct value
-        if (hasEulerianPath() != hasEulerianPath(G)) return false;
+        if (hasEulerianPath() != satisfiesNecessaryAndSufficientConditions(G)) return false;
 
         // nothing else to check if no Eulerian path
         if (path == null) return true;

File: src/main/java/edu/princeton/cs/algs4/GlobalMincut.java
Patch:
@@ -138,7 +138,6 @@ public double weight() {
      *             {@code 0} and {@code (G.V() - 1)}
      */
     public boolean cut(int v) {
-        int V = cut.length;
         validateVertex(v);
         return cut[v];
     }

File: src/main/java/edu/princeton/cs/algs4/LinearProgramming.java
Patch:
@@ -361,7 +361,7 @@ public static void main(String[] args) {
             test3();
         }
         catch (ArithmeticException e) {
-            e.printStackTrace();
+            System.out.println(e);
         }
 
         StdOut.println("----- test 4 --------------------");

File: src/main/java/edu/princeton/cs/algs4/Picture.java
Patch:
@@ -83,7 +83,6 @@ public Picture(int width, int height) {
         this.height = height;
         image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
         // set to TYPE_INT_ARGB to support transparency
-        filename = width + "-by-" + height;
     }
 
    /**
@@ -217,7 +216,8 @@ public void show() {
             frame.setContentPane(getJLabel());
             // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
             frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
-            frame.setTitle(filename);
+            if (filename == null) frame.setTitle(width + "-by-" + height);
+            else                  frame.setTitle(filename);
             frame.setResizable(false);
             frame.pack();
             frame.setVisible(true);

File: src/main/java/edu/princeton/cs/algs4/StdAudio.java
Patch:
@@ -269,7 +269,7 @@ public static synchronized void play(final String filename) {
         try {
             // check if file format is supported
             // (if not, will throw an UnsupportedAudioFileException)
-            AudioInputStream ais = AudioSystem.getAudioInputStream(is);
+            AudioSystem.getAudioInputStream(is);
 
             new Thread(new Runnable() {
                 @Override

File: src/main/java/edu/princeton/cs/algs4/SuffixArray.java
Patch:
@@ -137,11 +137,11 @@ public int index(int i) {
      */
     public int lcp(int i) {
         if (i < 1 || i >= suffixes.length) throw new IndexOutOfBoundsException();
-        return lcp(suffixes[i], suffixes[i-1]);
+        return lcpSuffix(suffixes[i], suffixes[i-1]);
     }
 
     // longest common prefix of s and t
-    private static int lcp(Suffix s, Suffix t) {
+    private static int lcpSuffix(Suffix s, Suffix t) {
         int n = Math.min(s.length(), t.length());
         for (int i = 0; i < n; i++) {
             if (s.charAt(i) != t.charAt(i)) return i;

File: src/main/java/edu/princeton/cs/algs4/Inversions.java
Patch:
@@ -70,7 +70,7 @@ private static long count(int[] a, int[] b, int[] aux, int lo, int hi) {
      * @param  a the array
      * @return the number of inversions in the array. An inversion is a pair of 
      *         indicies {@code i} and {@code j} such that {@code i < j}
-     *         and {@code a[i]} > {@code a[j]}.
+     *         and {@code a[i] > a[j]}.
      */
     public static long count(int[] a) {
         int[] b   = new int[a.length];

File: src/main/java/edu/princeton/cs/algs4/GlobalMincut.java
Patch:
@@ -130,6 +130,7 @@ public double weight() {
      * vertices of the minimum cut; or {@code false} if the vertex {@code v} is
      * on the second subset.
      * 
+     * @param v the vertex to check
      * @return {@code true} if the vertex {@code v} is on the first subset of
      *         vertices of the minimum cut; or {@code false} if the vertex
      *         {@code v} is on the second subset.

File: src/main/java/edu/princeton/cs/algs4/Inversions.java
Patch:
@@ -13,7 +13,7 @@
  *  The {@code Inversions} class provides static methods to count the 
  *  number of <em>inversions</em> in either an array of integers or comparables.
  *  An inversion in an array {@code a[]} is a pair of indicies {@code i} and
- *  {@code j} such that {@code i} < {@code j} and {@code a[i] > a[j]}.
+ *  {@code j} such that {@code i < j} and {@code a[i] > a[j]}.
  *  <p>
  *  This implementation uses a generalization of mergesort. The <em>count</em>
  *  operation takes time proportional to <em>n</em> log <em>n</em>,
@@ -121,6 +121,7 @@ private static <Key extends Comparable<Key>> long count(Key[] a, Key[] b, Key[]
      * Returns the number of inversions in the comparable array.
      * The argument array is not modified.
      * @param  a the array
+     * @param <Key> the inferred type of the elements in the array
      * @return the number of inversions in the array. An inversion is a pair of 
      *         indicies {@code i} and {@code j} such that {@code i < j}
      *         and {@code a[i].compareTo(a[j]) > 0}.

File: src/main/java/edu/princeton/cs/algs4/In.java
Patch:
@@ -248,7 +248,7 @@ public boolean hasNextLine() {
     }
 
     /**
-     * Returns true if this input stream has more inputy (including whitespace).
+     * Returns true if this input stream has more input (including whitespace).
      * Use this method to know whether the next call to {@link #readChar()} will succeed.
      * This method is functionally equivalent to {@link #hasNextLine()}.
      * 

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -122,7 +122,7 @@
  *  </ul>
  *  <p>
  *  The first three methods read of all of remaining token on standard input
- *  and dconverts the tokens to values of
+ *  and converts the tokens to values of
  *  the specified type, as in the corresponding
  *  {@code readDouble}, {@code readInt}, and {@code readString()} methods.
  *  The {@code readAllLines()} method reads all remaining lines on standard
@@ -245,7 +245,7 @@ public static boolean hasNextLine() {
     }
 
     /**
-     * Returns true if standard input has more inputy (including whitespace).
+     * Returns true if standard input has more input (including whitespace).
      * Use this method to know whether the next call to {@link #readChar()} will succeed.
      * This method is functionally equivalent to {@link #hasNextLine()}.
      *

File: src/main/java/edu/princeton/cs/algs4/Interval1D.java
Patch:
@@ -195,8 +195,8 @@ public int compare(Interval1D a, Interval1D b) {
     // ascending order of max endpoint, breaking ties by min endpoint
     private static class MaxEndpointComparator implements Comparator<Interval1D> {
         public int compare(Interval1D a, Interval1D b) {
-            if      (a.min < b.max) return -1;
-            else if (a.min > b.max) return +1;
+            if      (a.max < b.max) return -1;
+            else if (a.max > b.max) return +1;
             else if (a.min < b.min) return -1;
             else if (a.min > b.min) return +1;
             else                    return  0;

File: src/main/java/edu/princeton/cs/algs4/BST.java
Patch:
@@ -133,6 +133,7 @@ public Value get(Key key) {
     }
 
     private Value get(Node x, Key key) {
+        if (key == null) throw new IllegalArgumentException("called get() with a null key");
         if (x == null) return null;
         int cmp = key.compareTo(x.key);
         if      (cmp < 0) return get(x.left, key);
@@ -151,7 +152,7 @@ private Value get(Node x, Key key) {
      * @throws IllegalArgumentException if {@code key} is {@code null}
      */
     public void put(Key key, Value val) {
-        if (key == null) throw new IllegalArgumentException("first argument to put() is null");
+        if (key == null) throw new IllegalArgumentException("calledput() with a null key");
         if (val == null) {
             delete(key);
             return;
@@ -215,7 +216,7 @@ private Node deleteMax(Node x) {
      * @throws IllegalArgumentException if {@code key} is {@code null}
      */
     public void delete(Key key) {
-        if (key == null) throw new IllegalArgumentException("argument to delete() is null");
+        if (key == null) throw new IllegalArgumentException("called delete() with a null key");
         root = delete(root, key);
         assert check();
     }

File: src/main/java/edu/princeton/cs/algs4/BinaryInsertion.java
Patch:
@@ -2,8 +2,8 @@
  *  Compilation:  javac BinaryInsertion.java
  *  Execution:    java BinaryInsertion < input.txt
  *  Dependencies: StdOut.java StdIn.java
- *  Data files:   http://algs4.cs.princeton.edu/21sort/tiny.txt
- *                http://algs4.cs.princeton.edu/21sort/words3.txt
+ *  Data files:   http://algs4.cs.princeton.edu/21elementary/tiny.txt
+ *                http://algs4.cs.princeton.edu/21elementary/words3.txt
  *  
  *  Sorts a sequence of strings from standard input using 
  *  binary insertion sort with half exchanges.

File: src/main/java/edu/princeton/cs/algs4/Insertion.java
Patch:
@@ -2,8 +2,8 @@
  *  Compilation:  javac Insertion.java
  *  Execution:    java Insertion < input.txt
  *  Dependencies: StdOut.java StdIn.java
- *  Data files:   http://algs4.cs.princeton.edu/21sort/tiny.txt
- *                http://algs4.cs.princeton.edu/21sort/words3.txt
+ *  Data files:   http://algs4.cs.princeton.edu/21elementary/tiny.txt
+ *                http://algs4.cs.princeton.edu/21elementary/words3.txt
  *  
  *  Sorts a sequence of strings from standard input using insertion sort.
  *

File: src/main/java/edu/princeton/cs/algs4/InsertionX.java
Patch:
@@ -2,8 +2,8 @@
  *  Compilation:  javac InsertionX.java
  *  Execution:    java InsertionX < input.txt
  *  Dependencies: StdOut.java StdIn.java
- *  Data files:   http://algs4.cs.princeton.edu/21sort/tiny.txt
- *                http://algs4.cs.princeton.edu/21sort/words3.txt
+ *  Data files:   http://algs4.cs.princeton.edu/21elementary/tiny.txt
+ *                http://algs4.cs.princeton.edu/21elementary/words3.txt
  *  
  *  Sorts a sequence of strings from standard input using an optimized
  *  version of insertion sort that uses half exchanges instead of 

File: src/main/java/edu/princeton/cs/algs4/Selection.java
Patch:
@@ -2,8 +2,8 @@
  *  Compilation:  javac Selection.java
  *  Execution:    java  Selection < input.txt
  *  Dependencies: StdOut.java StdIn.java
- *  Data files:   http://algs4.cs.princeton.edu/21sort/tiny.txt
- *                http://algs4.cs.princeton.edu/21sort/words3.txt
+ *  Data files:   http://algs4.cs.princeton.edu/21elementary/tiny.txt
+ *                http://algs4.cs.princeton.edu/21elementary/words3.txt
  *   
  *  Sorts a sequence of strings from standard input using selection sort.
  *   

File: src/main/java/edu/princeton/cs/algs4/Shell.java
Patch:
@@ -2,8 +2,8 @@
  *  Compilation:  javac Shell.java
  *  Execution:    java Shell < input.txt
  *  Dependencies: StdOut.java StdIn.java
- *  Data files:   http://algs4.cs.princeton.edu/21sort/tiny.txt
- *                http://algs4.cs.princeton.edu/21sort/words3.txt
+ *  Data files:   http://algs4.cs.princeton.edu/21elementary/tiny.txt
+ *                http://algs4.cs.princeton.edu/21elementary/words3.txt
  *   
  *  Sorts a sequence of strings from standard input using shellsort.
  *

File: src/main/java/edu/princeton/cs/algs4/GrahamScan.java
Patch:
@@ -70,7 +70,7 @@ public GrahamScan(Point2D[] points) {
         // preprocess so that a[0] has lowest y-coordinate; break ties by x-coordinate
         // a[0] is an extreme point of the convex hull
         // (alternatively, could do easily in linear time)
-        Arrays.sort(points);
+        Arrays.sort(a);
 
         // sort by polar angle with respect to base point a[0],
         // breaking ties by distance to a[0]

File: src/main/java/edu/princeton/cs/algs4/Bag.java
Patch:
@@ -40,6 +40,7 @@
  *  This implementation uses a singly-linked list with a static nested class Node.
  *  See {@link LinkedBag} for the version from the
  *  textbook that uses a non-static nested class.
+ *  See {@link ResizingArrayBag} for a version that uses a resizing array.
  *  The <em>add</em>, <em>isEmpty</em>, and <em>size</em> operations
  *  take constant time. Iteration takes time proportional to the number of items.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/Queue.java
Patch:
@@ -27,6 +27,7 @@
  *  This implementation uses a singly-linked list with a static nested class for
  *  linked-list nodes. See {@link LinkedQueue} for the version from the
  *  textbook that uses a non-static nested class.
+ *  See {@link ResizingArrayQueue} for a version that uses a resizing array.
  *  The <em>enqueue</em>, <em>dequeue</em>, <em>peek</em>, <em>size</em>, and <em>is-empty</em>
  *  operations all take constant time in the worst case.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/Stack.java
Patch:
@@ -34,6 +34,7 @@
  *  This implementation uses a singly-linked list with a static nested class for
  *  linked-list nodes. See {@link LinkedStack} for the version from the
  *  textbook that uses a non-static nested class.
+ *  See {@link ResizingArrayStack} for a version that uses a resizing array.
  *  The <em>push</em>, <em>pop</em>, <em>peek</em>, <em>size</em>, and <em>is-empty</em>
  *  operations all take constant time in the worst case.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/StdDraw.java
Patch:
@@ -355,7 +355,7 @@
  *  <li> Wait for a short while.
  *  </ul>
  *  <p>
- *  The {@link #clear()}, {@link #show()}, and {@link #pause(int dt)} methods
+ *  The {@link #clear()}, {@link #show()}, and {@link #pause(int t)} methods
  *  support the first, third, and fourth of these steps, respectively.
  *  <p>
  *  For example, this code fragment animates two balls moving in a circle.
@@ -1523,7 +1523,7 @@ public static void textRight(double x, double y, String text) {
      * Copies the offscreen buffer to the onscreen buffer, pauses for t milliseconds
      * and enables double buffering.
      * @param t number of milliseconds
-     * @deprecated replaced by {@link #enableDoubleBuffering}, {@link #show()}, and {@link #pause}
+     * @deprecated replaced by {@link #enableDoubleBuffering()}, {@link #show()}, and {@link #pause(int t)}
      */
     @Deprecated
     public static void show(int t) {

File: src/main/java/edu/princeton/cs/algs4/StdRandom.java
Patch:
@@ -473,7 +473,7 @@ public static void shuffle(Object[] a, int lo, int hi) {
             throw new IndexOutOfBoundsException("invalid subarray range: [" + lo + ", " + hi + ")");
         }
         for (int i = lo; i < hi; i++) {
-            int r = i + uniform(hi-i+1);     // between i and hi
+            int r = i + uniform(hi-i);     // between i and hi-1
             Object temp = a[i];
             a[i] = a[r];
             a[r] = temp;
@@ -495,7 +495,7 @@ public static void shuffle(double[] a, int lo, int hi) {
             throw new IndexOutOfBoundsException("invalid subarray range: [" + lo + ", " + hi + ")");
         }
         for (int i = lo; i < hi; i++) {
-            int r = i + uniform(hi-i+1);     // between i and hi
+            int r = i + uniform(hi-i);     // between i and hi-1
             double temp = a[i];
             a[i] = a[r];
             a[r] = temp;
@@ -517,7 +517,7 @@ public static void shuffle(int[] a, int lo, int hi) {
             throw new IndexOutOfBoundsException("invalid subarray range: [" + lo + ", " + hi + ")");
         }
         for (int i = lo; i < hi; i++) {
-            int r = i + uniform(hi-i+1);     // between i and hi
+            int r = i + uniform(hi-i);     // between i and hi-1
             int temp = a[i];
             a[i] = a[r];
             a[r] = temp;

File: src/main/java/edu/princeton/cs/algs4/BST.java
Patch:
@@ -329,9 +329,9 @@ private Node ceiling(Node x, Key key) {
      * Return the kth smallest key in the symbol table.
      *
      * @param  k the order statistic
-     * @return the kth smallest key in the symbol table
+     * @return the {@code k}th smallest key in the symbol table
      * @throws IllegalArgumentException unless {@code k} is between 0 and
-     *        <em>N</em> &minus; 1
+     *        <em>n</em>–1
      */
     public Key select(int k) {
         if (k < 0 || k >= size()) throw new IllegalArgumentException();

File: src/main/java/edu/princeton/cs/algs4/BinarySearchST.java
Patch:
@@ -289,9 +289,9 @@ public Key max() {
      * Return the kth smallest key in this symbol table.
      *
      * @param  k the order statistic
-     * @return the kth smallest key in this symbol table
+     * @return the {@code k}th smallest key in this symbol table
      * @throws IllegalArgumentException unless {@code k} is between 0 and
-     *        <em>n</em> &minus; 1
+     *        <em>n</em>–1
      */
     public Key select(int k) {
         if (k < 0 || k >= n) return null;

File: src/main/java/edu/princeton/cs/algs4/QuickFindUF.java
Patch:
@@ -21,7 +21,7 @@
  *  returns the total number of components.
  *  <p>
  *  The union–find data type models connectivity among a set of <em>n</em>
- *  sites, named 0 through <em>n</em>&minus;1.
+ *  sites, named 0 through <em>n</em>–1.
  *  The <em>is-connected-to</em> relation must be an 
  *  <em>equivalence relation</em>:
  *  <ul>
@@ -37,7 +37,7 @@
  *  <em>equivalence classes</em> (or <em>components</em>). In this case,
  *  two sites are in the same component if and only if they are connected.
  *  Both sites and components are identified with integers between 0 and
- *  <em>n</em>&minus;1. 
+ *  <em>n</em>–1. 
  *  Initially, there are <em>n</em> components, with each site in its
  *  own component.  The <em>component identifier</em> of a component
  *  (also known as the <em>root</em>, <em>canonical element</em>, <em>leader</em>,

File: src/main/java/edu/princeton/cs/algs4/QuickUnionUF.java
Patch:
@@ -21,7 +21,7 @@
  *  returns the total number of components.
  *  <p>
  *  The union–find data type models connectivity among a set of <em>n</em>
- *  sites, named 0 through <em>n</em>&minus;1.
+ *  sites, named 0 through <em>n</em>–1.
  *  The <em>is-connected-to</em> relation must be an 
  *  <em>equivalence relation</em>:
  *  <ul>
@@ -37,7 +37,7 @@
  *  <em>equivalence classes</em> (or <em>components</em>). In this case,
  *  two sites are in the same component if and only if they are connected.
  *  Both sites and components are identified with integers between 0 and
- *  <em>n</em>&minus;1. 
+ *  <em>n</em>–1. 
  *  Initially, there are <em>n</em> components, with each site in its
  *  own component.  The <em>component identifier</em> of a component
  *  (also known as the <em>root</em>, <em>canonical element</em>, <em>leader</em>,

File: src/main/java/edu/princeton/cs/algs4/RedBlackBST.java
Patch:
@@ -517,9 +517,9 @@ private Node ceiling(Node x, Key key) {
     /**
      * Return the kth smallest key in the symbol table.
      * @param k the order statistic
-     * @return the kth smallest key in the symbol table
+     * @return the {@code k}th smallest key in the symbol table
      * @throws IllegalArgumentException unless {@code k} is between 0 and
-     *     <em>N</em> &minus; 1
+     *     <em>n</em>–1
      */
     public Key select(int k) {
         if (k < 0 || k >= size()) throw new IllegalArgumentException();

File: src/main/java/edu/princeton/cs/algs4/StdDraw.java
Patch:
@@ -1181,7 +1181,7 @@ public static void filledRectangle(double x, double y, double halfWidth, double
      * Draws a polygon with the vertices 
      * (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>),
      * (<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>), ...,
-     * (<em>x</em><sub><em>n</em>&minus;1</sub>, <em>y</em><sub><em>n</em>&minus;1</sub>).
+     * (<em>x</em><sub><em>n</em>–1</sub>, <em>y</em><sub><em>n</em>–1</sub>).
      *
      * @param  x an array of all the <em>x</em>-coordinates of the polygon
      * @param  y an array of all the <em>y</em>-coordinates of the polygon
@@ -1208,7 +1208,7 @@ public static void polygon(double[] x, double[] y) {
      * Draws a polygon with the vertices 
      * (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>),
      * (<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>), ...,
-     * (<em>x</em><sub><em>n</em>&minus;1</sub>, <em>y</em><sub><em>n</em>&minus;1</sub>).
+     * (<em>x</em><sub><em>n</em>–1</sub>, <em>y</em><sub><em>n</em>–1</sub>).
      *
      * @param  x an array of all the <em>x</em>-coordinates of the polygon
      * @param  y an array of all the <em>y</em>-coordinates of the polygon

File: src/main/java/edu/princeton/cs/algs4/StdStats.java
Patch:
@@ -438,7 +438,7 @@ private static int sum(int[] a) {
 
    /**
      * Plots the points (0, <em>a</em><sub>0</sub>), (1, <em>a</em><sub>1</sub>), ...,
-     * (<em>n</em>&minus;1, <em>a</em><sub><em>n</em>&minus;1</sub>) to standard draw.
+     * (<em>n</em>–1, <em>a</em><sub><em>n</em>–1</sub>) to standard draw.
      *
      * @param a the array of values
      */

File: src/main/java/edu/princeton/cs/algs4/UF.java
Patch:
@@ -33,7 +33,7 @@
  *  returns the total number of components.
  *  <p>
  *  The union–find data type models connectivity among a set of <em>n</em>
- *  sites, named 0 through <em>n</em>&minus;1.
+ *  sites, named 0 through <em>n</em>–1.
  *  The <em>is-connected-to</em> relation must be an 
  *  <em>equivalence relation</em>:
  *  <ul>
@@ -49,7 +49,7 @@
  *  <em>equivalence classes</em> (or <em>components</em>). In this case,
  *  two sites are in the same component if and only if they are connected.
  *  Both sites and components are identified with integers between 0 and
- *  <em>n</em>&minus;1. 
+ *  <em>n</em>–1. 
  *  Initially, there are <em>n</em> components, with each site in its
  *  own component.  The <em>component identifier</em> of a component
  *  (also known as the <em>root</em>, <em>canonical element</em>, <em>leader</em>,

File: src/main/java/edu/princeton/cs/algs4/WeightedQuickUnionUF.java
Patch:
@@ -21,7 +21,7 @@
  *  returns the total number of components.
  *  <p>
  *  The union–find data type models connectivity among a set of <em>n</em>
- *  sites, named 0 through <em>n</em>&minus;1.
+ *  sites, named 0 through <em>n</em>–1.
  *  The <em>is-connected-to</em> relation must be an 
  *  <em>equivalence relation</em>:
  *  <ul>
@@ -37,7 +37,7 @@
  *  <em>equivalence classes</em> (or <em>components</em>). In this case,
  *  two sites are in the same component if and only if they are connected.
  *  Both sites and components are identified with integers between 0 and
- *  <em>n</em>&minus;1. 
+ *  <em>n</em>–1. 
  *  Initially, there are <em>n</em> components, with each site in its
  *  own component.  The <em>component identifier</em> of a component
  *  (also known as the <em>root</em>, <em>canonical element</em>, <em>leader</em>,

File: src/main/java/edu/princeton/cs/algs4/Accumulator.java
Patch:
@@ -68,6 +68,7 @@ public double mean() {
      * @return the sample variance of the data values
      */
     public double var() {
+        if (n <= 1) return Double.NaN;
         return sum / (n - 1);
     }
 

File: src/main/java/edu/princeton/cs/algs4/In.java
Patch:
@@ -240,7 +240,7 @@ public boolean isEmpty() {
      * next call to {@link #readLine()} will succeed.
      * This method is functionally equivalent to {@link #hasNextChar()}.
      *
-     * @return {@code true} if this input stream is empty;
+     * @return {@code true} if this input stream has more input (including whitespace);
      *         {@code false} otherwise
      */
     public boolean hasNextLine() {

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -237,7 +237,7 @@ public static boolean isEmpty() {
      * next call to {@link #readLine()} will succeed.
      * This method is functionally equivalent to {@link #hasNextChar()}.
      *
-     * @return {@code true} if standard input is empty;
+     * @return {@code true} if standard input has more input (including whitespace);
      *         {@code false} otherwise
      */
     public static boolean hasNextLine() {

File: src/main/java/edu/princeton/cs/algs4/AVLTreeST.java
Patch:
@@ -38,7 +38,7 @@
  *  value with a key that is already in the symbol table, the convention is to
  *  replace the old value with the new value. Unlike {@link java.util.Map}, this
  *  class uses the convention that values cannot be {@code null}
- *  &mdash;setting the value associated with a key to {@code null} is
+ *  —setting the value associated with a key to {@code null} is
  *  equivalent to deleting the key from the symbol table.
  *  <p>
  *  This symbol table implementation uses internally an

File: src/main/java/edu/princeton/cs/algs4/Accumulator.java
Patch:
@@ -103,7 +103,7 @@ public static void main(String[] args) {
             stats.addDataValue(x);
         }
 
-        StdOut.printf("N      = %d\n",   stats.count());
+        StdOut.printf("n      = %d\n",   stats.count());
         StdOut.printf("mean   = %.5f\n", stats.mean());
         StdOut.printf("stddev = %.5f\n", stats.stddev());
         StdOut.printf("var    = %.5f\n", stats.var());

File: src/main/java/edu/princeton/cs/algs4/BST.java
Patch:
@@ -39,7 +39,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>
@@ -414,8 +414,8 @@ private void keys(Node x, Queue<Key> queue, Key lo, Key hi) {
      *
      * @param  lo minimum endpoint
      * @param  hi maximum endpoint
-     * @return the number of keys in the sybol table between {@code lo} 
-     *         (inclusive) and {@code hi} (exclusive)
+     * @return the number of keys in the symbol table between {@code lo} 
+     *         (inclusive) and {@code hi} (inclusive)
      * @throws NullPointerException if either {@code lo} or {@code hi}
      *         is {@code null}
      */

File: src/main/java/edu/princeton/cs/algs4/BTree.java
Patch:
@@ -24,7 +24,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/Interval1D.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  *  The {@code Interval1D} class represents a one-dimensional interval.
- *  The interval is <em>closed</em>&mdash;it contains both endpoints.
+ *  The interval is <em>closed</em>—it contains both endpoints.
  *  Intervals are immutable: their values cannot be changed after they are created.
  *  The class {@code Interval1D} includes methods for checking whether
  *  an interval contains a point and determining whether two intervals intersect.

File: src/main/java/edu/princeton/cs/algs4/LinearProbingHashST.java
Patch:
@@ -20,7 +20,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>
@@ -213,7 +213,7 @@ public void delete(Key key) {
      * To iterate over all of the keys in the symbol table named {@code st},
      * use the foreach notation: {@code for (Key key : st.keys())}.
      *
-     * @return all keys in this sybol table
+     * @return all keys in this symbol table
      */
     public Iterable<Key> keys() {
         Queue<Key> queue = new Queue<Key>();

File: src/main/java/edu/princeton/cs/algs4/PatriciaST.java
Patch:
@@ -36,7 +36,7 @@
  *  <em>associative array</em> abstraction: when associating a value with a key
  *  that is already in the symbol table, the convention is to replace the old
  *  value with the new value. Unlike {@link java.util.Map}, this class uses the
- *  convention that values cannot be {@code null}&mdash;setting the value
+ *  convention that values cannot be {@code null}—setting the value
  *  associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>
@@ -278,7 +278,7 @@ int size() {
      * To iterate over all of the keys in the symbol table named
      * {@code st}, use the foreach notation:
      * {@code for (Key key : st.keys())}.
-     * @return all keys in the sybol table as an {@code Iterable}
+     * @return all keys in the symbol table as an {@code Iterable}
      */
     public Iterable<String> keys() {
         Queue<String> queue = new Queue<String>();

File: src/main/java/edu/princeton/cs/algs4/QuickFindUF.java
Patch:
@@ -61,7 +61,7 @@
  *  <p>
  *  The component identifier of a component can change
  *  only when the component itself changes during a call to
- *  <em>union</em>&mdash;it cannot change during a call
+ *  <em>union</em>—it cannot change during a call
  *  to <em>find</em>, <em>connected</em>, or <em>count</em>.
  *  <p>
  *  This implementation uses quick find.

File: src/main/java/edu/princeton/cs/algs4/QuickUnionUF.java
Patch:
@@ -61,7 +61,7 @@
  *  <p>
  *  The component identifier of a component can change
  *  only when the component itself changes during a call to
- *  <em>union</em>&mdash;it cannot change during a call
+ *  <em>union</em>—it cannot change during a call
  *  to <em>find</em>, <em>connected</em>, or <em>count</em>.
  *  <p>
  *  This implementation uses quick union.

File: src/main/java/edu/princeton/cs/algs4/RectHV.java
Patch:
@@ -12,7 +12,7 @@
 /**
  *  The {@code RectHV} class is an immutable data type to encapsulate a
  *  two-dimensional axis-aligned rectagle with real-value coordinates.
- *  The rectangle is <em>closed</em>&mdash;it includes the points on the boundary.
+ *  The rectangle is <em>closed</em>—it includes the points on the boundary.
  *  <p>
  *  For additional documentation, 
  *  see <a href="http://algs4.cs.princeton.edu/12oop">Section 1.2</a> of 

File: src/main/java/edu/princeton/cs/algs4/ST.java
Patch:
@@ -27,7 +27,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/SeparateChainingHashST.java
Patch:
@@ -20,7 +20,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>

File: src/main/java/edu/princeton/cs/algs4/SequentialSearchST.java
Patch:
@@ -183,7 +183,7 @@ private Node delete(Node x, Key key) {
      * To iterate over all of the keys in the symbol table named {@code st},
      * use the foreach notation: {@code for (Key key : st.keys())}.
      *
-     * @return all keys in the sybol table
+     * @return all keys in the symbol table
      */
     public Iterable<Key> keys()  {
         Queue<Key> queue = new Queue<Key>();

File: src/main/java/edu/princeton/cs/algs4/StdArrayIO.java
Patch:
@@ -2,6 +2,9 @@
  *  Compilation:  javac StdArrayIO.java
  *  Execution:    java StdArrayIO < input.txt
  *  Dependencies: StdOut.java
+ *  Data files:    http://introcs.cs.princeton.edu/java/22library/tinyDouble1D.txt
+ *                 http://introcs.cs.princeton.edu/java/22library/tinyDouble2D.txt
+ *                 http://introcs.cs.princeton.edu/java/22library/tinyBoolean2D.txt
  *
  *  A library for reading in 1D and 2D arrays of integers, doubles,
  *  and booleans from standard input and printing them out to

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -77,7 +77,7 @@
  *  As an example, the following code fragment reads characters from standard input,
  *  one character at a time, and prints it to standard output.
  *  <pre>
- *  while (!StdIn.hasNextChar()) {
+ *  while (StdIn.hasNextChar()) {
  *      char c = StdIn.readChar();
  *      StdOut.print(c);
  *  }

File: src/main/java/edu/princeton/cs/algs4/TST.java
Patch:
@@ -51,7 +51,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>
@@ -178,7 +178,7 @@ public String longestPrefixOf(String query) {
      * Returns all keys in the symbol table as an {@code Iterable}.
      * To iterate over all of the keys in the symbol table named {@code st},
      * use the foreach notation: {@code for (Key key : st.keys())}.
-     * @return all keys in the sybol table as an {@code Iterable}
+     * @return all keys in the symbol table as an {@code Iterable}
      */
     public Iterable<String> keys() {
         Queue<String> queue = new Queue<String>();

File: src/main/java/edu/princeton/cs/algs4/TrieST.java
Patch:
@@ -33,7 +33,7 @@
  *  when associating a value with a key that is already in the symbol table,
  *  the convention is to replace the old value with the new value.
  *  Unlike {@link java.util.Map}, this class uses the convention that
- *  values cannot be {@code null}&mdash;setting the
+ *  values cannot be {@code null}—setting the
  *  value associated with a key to {@code null} is equivalent to deleting the key
  *  from the symbol table.
  *  <p>
@@ -143,7 +143,7 @@ public boolean isEmpty() {
      * Returns all keys in the symbol table as an {@code Iterable}.
      * To iterate over all of the keys in the symbol table named {@code st},
      * use the foreach notation: {@code for (Key key : st.keys())}.
-     * @return all keys in the sybol table as an {@code Iterable}
+     * @return all keys in the symbol table as an {@code Iterable}
      */
     public Iterable<String> keys() {
         return keysWithPrefix("");

File: src/main/java/edu/princeton/cs/algs4/UF.java
Patch:
@@ -73,7 +73,7 @@
  *  <p>
  *  The component identifier of a component can change
  *  only when the component itself changes during a call to
- *  <em>union</em>&mdash;it cannot change during a call
+ *  <em>union</em>—it cannot change during a call
  *  to <em>find</em>, <em>connected</em>, or <em>count</em>.
  *  <p>
  *  This implementation uses weighted quick union by rank with path compression

File: src/main/java/edu/princeton/cs/algs4/WeightedQuickUnionUF.java
Patch:
@@ -61,7 +61,7 @@
  *  <p>
  *  The component identifier of a component can change
  *  only when the component itself changes during a call to
- *  <em>union</em>&mdash;it cannot change during a call
+ *  <em>union</em>—it cannot change during a call
  *  to <em>find</em>, <em>connected</em>, or <em>count</em>.
  *  <p>
  *  This implementation uses weighted quick union by size (without path compression).

File: src/main/java/edu/princeton/cs/algs4/Accumulator.java
Patch:
@@ -93,6 +93,8 @@ public int count() {
      * adds them to the accumulator; and prints the mean,
      * sample standard deviation, and sample variance to standard
      * output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Accumulator stats = new Accumulator();

File: src/main/java/edu/princeton/cs/algs4/AcyclicLP.java
Patch:
@@ -118,6 +118,8 @@ public Iterable<DirectedEdge> pathTo(int v) {
 
     /**
      * Unit tests the {@code AcyclicLP} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/AcyclicSP.java
Patch:
@@ -116,6 +116,8 @@ public Iterable<DirectedEdge> pathTo(int v) {
 
     /**
      * Unit tests the {@code AcyclicSP} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Alphabet.java
Patch:
@@ -237,6 +237,8 @@ public String toChars(int[] indices) {
 
     /**
      * Unit tests the {@code Alphabet} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int[]  encoded1 = Alphabet.BASE64.toIndices("NowIsTheTimeForAllGoodMen");

File: src/main/java/edu/princeton/cs/algs4/Arbitrage.java
Patch:
@@ -50,6 +50,8 @@ private Arbitrage() { }
     /**
      *  Reads the currency exchange table from standard input and
      *  prints an arbitrage opportunity to standard output (if one exists).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/AssignmentProblem.java
Patch:
@@ -259,6 +259,8 @@ private boolean certifySolution() {
      * Takes a command-line argument n; creates a random n-by-n matrix;
      * solves the n-by-n assignment problem; and prints the optimal
      * solution.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Average.java
Patch:
@@ -36,6 +36,8 @@ private Average() { }
     /**
      * Reads in a sequence of real numbers from standard input and prints
      * out their average to standard output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         int count = 0;       // number input values

File: src/main/java/edu/princeton/cs/algs4/BTree.java
Patch:
@@ -247,6 +247,8 @@ private boolean eq(Comparable k1, Comparable k2) {
 
     /**
      * Unit tests the {@code BTree} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         BTree<String, String> st = new BTree<String, String>();

File: src/main/java/edu/princeton/cs/algs4/Bag.java
Patch:
@@ -132,6 +132,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code Bag} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Bag<String> bag = new Bag<String>();

File: src/main/java/edu/princeton/cs/algs4/BellmanFordSP.java
Patch:
@@ -247,6 +247,8 @@ private boolean check(EdgeWeightedDigraph G, int s) {
 
     /**
      * Unit tests the {@code BellmanFordSP} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BinaryDump.java
Patch:
@@ -49,6 +49,8 @@ private BinaryDump() { }
      * where k is given as a command-line integer (defaults
      * to 16 if no integer is specified); also writes the number
      * of bits.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int bitsPerLine = 16;

File: src/main/java/edu/princeton/cs/algs4/BinaryIn.java
Patch:
@@ -361,6 +361,8 @@ public byte readByte() {
      * Unit tests the {@code BinaryIn} data type.
      * Reads the name of a file or URL (first command-line argument)
      * and writes it to a file (second command-line argument).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         BinaryIn  in  = new BinaryIn(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BinaryInsertion.java
Patch:
@@ -109,6 +109,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; insertion sorts them;
      * and prints them to standard output in ascending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/BinaryOut.java
Patch:
@@ -320,6 +320,8 @@ public void write(String s, int r) {
    /**
      * Test client. Read bits from standard input and write to the file
      * specified on command line.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/BinarySearch.java
Patch:
@@ -85,6 +85,8 @@ public static int rank(int key, int[] a) {
      * Reads in a sequence of integers from the whitelist file, specified as
      * a command-line argument; reads in integers from standard input;
      * prints to standard output those integers that do <em>not</em> appear in the file.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/BinaryStdIn.java
Patch:
@@ -245,7 +245,7 @@ public static long readLong() {
      * Reads the next 64 bits from standard input and return as a 64-bit double.
      *
      * @return the next 64 bits of data from standard input as a {@code double}
-     * @throws RuntimeExceptionArgument if there are fewer than 64 bits available on standard input
+     * @throws RuntimeException if there are fewer than 64 bits available on standard input
      */
     public static double readDouble() {
         return Double.longBitsToDouble(readLong());
@@ -277,6 +277,8 @@ public static byte readByte() {
    /**
      * Test client. Reads in a binary input file from standard input and writes
      * it to standard output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/BinaryStdOut.java
Patch:
@@ -268,6 +268,8 @@ public static void write(String s, int r) {
 
    /**
      * Test client.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int m = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Bipartite.java
Patch:
@@ -164,6 +164,8 @@ private boolean check(Graph G) {
 
     /**
      * Unit tests the {@code Bipartite} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V1 = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BipartiteMatching.java
Patch:
@@ -307,6 +307,8 @@ private boolean certifySolution(Graph G) {
      * creates a random bipartite graph with {@code V1} + {@code V2} vertices
      * and {@code E} edges; computes a maximum matching and minimum vertex cover;
      * and prints the results.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V1 = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BipartiteX.java
Patch:
@@ -178,6 +178,8 @@ private boolean check(Graph G) {
 
     /**
      * Unit tests the {@code BipartiteX} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V1 = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BoruvkaMST.java
Patch:
@@ -180,6 +180,8 @@ private boolean check(EdgeWeightedGraph G) {
 
     /**
      * Unit tests the {@code BoruvkaMST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BoyerMoore.java
Patch:
@@ -143,6 +143,8 @@ public int search(char[] text) {
      * Takes a pattern string and an input string as command-line arguments;
      * searches for the pattern string in the text string; and prints
      * the first occurrence of the pattern string in the text string.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String pat = args[0];

File: src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java
Patch:
@@ -157,6 +157,8 @@ public Iterable<Integer> pathTo(int v) {
 
     /**
      * Unit tests the {@code BreadthFirstDirectedPaths} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/BreadthFirstPaths.java
Patch:
@@ -220,6 +220,8 @@ private boolean check(Graph G, int s) {
 
     /**
      * Unit tests the {@code BreadthFirstPaths} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/CC.java
Patch:
@@ -153,6 +153,8 @@ public boolean areConnected(int v, int w) {
 
     /**
      * Unit tests the {@code CC} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/CPM.java
Patch:
@@ -56,6 +56,8 @@ private CPM() { }
     /**
      *  Reads the precedence constraints from standard input
      *  and prints a feasible schedule to standard output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Cat.java
Patch:
@@ -46,6 +46,8 @@ private Cat() { }
      * Reads in a sequence of text files specified as the first command-line
      * arguments, concatenates them, and writes the results to the file
      * specified as the last command-line argument.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         Out out = new Out(args[args.length - 1]);

File: src/main/java/edu/princeton/cs/algs4/ClosestPair.java
Patch:
@@ -184,6 +184,8 @@ private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int
      * their <em>x</em>- and <em>y</em>-coordinates) from standard input;
      * computes a closest pair of points; and prints the pair to standard
      * output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = StdIn.readInt();

File: src/main/java/edu/princeton/cs/algs4/CollisionSystem.java
Patch:
@@ -170,6 +170,8 @@ public boolean isValid() {
      * Reads in the particle collision system from a standard input
      * (or generates {@code N} random particles if a command-line integer
      * is specified); simulates the system.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Complex.java
Patch:
@@ -237,6 +237,8 @@ public Complex tan() {
 
     /**
      * Unit tests the {@code Complex} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Complex a = new Complex(5.0, 6.0);

File: src/main/java/edu/princeton/cs/algs4/Count.java
Patch:
@@ -56,6 +56,8 @@ private Count() { }
      * occurrence of each character over the alphabet specified as a
      * commmand-line argument; and prints the frequencies to standard
      * output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Alphabet alphabet = new Alphabet(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Counter.java
Patch:
@@ -91,6 +91,8 @@ public int compareTo(Counter that) {
     /**
      * Reads two command-line integers n and trials; creates n counters;
      * increments trials counters at random; and prints results.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         int n = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Cycle.java
Patch:
@@ -151,6 +151,8 @@ else if (w != u) {
 
     /**
      * Unit tests the {@code Cycle} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Date.java
Patch:
@@ -188,6 +188,8 @@ public int hashCode() {
 
     /**
      * Unit tests the {@code Date} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Date today = new Date(2, 25, 2004);

File: src/main/java/edu/princeton/cs/algs4/DegreesOfSeparation.java
Patch:
@@ -88,6 +88,8 @@ private DegreesOfSeparation() { }
      *  Each line in the file contains the name of a vertex, followed by a
      *  list of the names of the vertices adjacent to that vertex,
      *  separated by the delimiter.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String filename  = args[0];

File: src/main/java/edu/princeton/cs/algs4/DepthFirstDirectedPaths.java
Patch:
@@ -102,6 +102,8 @@ public Iterable<Integer> pathTo(int v) {
 
     /**
      * Unit tests the {@code DepthFirstDirectedPaths} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DepthFirstOrder.java
Patch:
@@ -45,7 +45,6 @@
  *  Afterwards, the <em>preorder</em>, <em>postorder</em>, and <em>reverse postorder</em>
  *  operation takes take time proportional to <em>V</em>.
  *  <p>
- *  <p>
  *  For additional documentation,
  *  see <a href="http://algs4.cs.princeton.edu/42digraph">Section 4.2</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
@@ -196,6 +195,8 @@ private boolean check(Digraph G) {
 
     /**
      * Unit tests the {@code DepthFirstOrder} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DepthFirstPaths.java
Patch:
@@ -102,6 +102,8 @@ public Iterable<Integer> pathTo(int v) {
 
     /**
      * Unit tests the {@code DepthFirstPaths} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DepthFirstSearch.java
Patch:
@@ -83,6 +83,8 @@ public int count() {
 
     /**
      * Unit tests the {@code DepthFirstSearch} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DijkstraAllPairsSP.java
Patch:
@@ -38,7 +38,7 @@ public class DijkstraAllPairsSP {
      * the edge-weighted digraph {@code G}.
      * @param G the edge-weighted digraph
      * @throws IllegalArgumentException if an edge weight is negative
-     * @throws IllegalArgumentException unless 0 <= {@code s} <= {@code V} - 1
+     * @throws IllegalArgumentException unless {@code 0 <= s < V}
      */
     public DijkstraAllPairsSP(EdgeWeightedDigraph G) {
         all  = new DijkstraSP[G.V()];

File: src/main/java/edu/princeton/cs/algs4/DijkstraSP.java
Patch:
@@ -63,7 +63,7 @@ public class DijkstraSP {
      * @param  G the edge-weighted digraph
      * @param  s the source vertex
      * @throws IllegalArgumentException if an edge weight is negative
-     * @throws IllegalArgumentException unless 0 <= {@code s} <= {@code V} - 1
+     * @throws IllegalArgumentException unless {@code 0 <= s < V}
      */
     public DijkstraSP(EdgeWeightedDigraph G, int s) {
         for (DirectedEdge e : G.edges()) {
@@ -193,6 +193,8 @@ private boolean check(EdgeWeightedDigraph G, int s) {
 
     /**
      * Unit tests the {@code DijkstraSP} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DijkstraUndirectedSP.java
Patch:
@@ -205,6 +205,8 @@ private boolean check(EdgeWeightedGraph G, int s) {
 
     /**
      * Unit tests the {@code DijkstraUndirectedSP} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DirectedCycle.java
Patch:
@@ -131,6 +131,8 @@ private boolean check() {
 
     /**
      * Unit tests the {@code DirectedCycle} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DirectedDFS.java
Patch:
@@ -99,6 +99,8 @@ public int count() {
 
     /**
      * Unit tests the {@code DirectedDFS} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/DirectedEdge.java
Patch:
@@ -80,6 +80,8 @@ public String toString() {
 
     /**
      * Unit tests the {@code DirectedEdge} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         DirectedEdge e = new DirectedEdge(12, 34, 5.67);

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianCycle.java
Patch:
@@ -198,6 +198,8 @@ private static void unitTest(Digraph G, String description) {
 
     /**
      * Unit tests the {@code DirectedEulerianCycle} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianPath.java
Patch:
@@ -206,6 +206,8 @@ private static void unitTest(Digraph G, String description) {
 
     /**
      * Unit tests the {@code DirectedEulerianPath} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/DoublingRatio.java
Patch:
@@ -54,6 +54,8 @@ public static double timeTrial(int n) {
      * Prints table of running times to call {@code ThreeSum.count()}
      * for arrays of size 250, 500, 1000, 2000, and so forth, along
      * with ratios of running times between successive array sizes.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         double prev = timeTrial(125);

File: src/main/java/edu/princeton/cs/algs4/DoublingTest.java
Patch:
@@ -52,6 +52,8 @@ public static double timeTrial(int n) {
     /**
      * Prints table of running times to call {@code ThreeSum.count()}
      * for arrays of size 250, 500, 1000, 2000, and so forth.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         for (int n = 250; true; n += n) {

File: src/main/java/edu/princeton/cs/algs4/Draw.java
Patch:
@@ -1339,6 +1339,8 @@ public void keyReleased(KeyEvent e) {
 
     /**
      * Test client.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Edge.java
Patch:
@@ -107,6 +107,8 @@ public String toString() {
 
     /**
      * Unit tests the {@code Edge} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Edge e = new Edge(12, 34, 5.67);

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedDirectedCycle.java
Patch:
@@ -142,6 +142,8 @@ private boolean check(EdgeWeightedDigraph G) {
 
     /**
      * Unit tests the {@code EdgeWeightedDirectedCycle} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/EulerianCycle.java
Patch:
@@ -242,6 +242,8 @@ private static void unitTest(Graph G, String description) {
 
     /**
      * Unit tests the {@code EulerianCycle} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/EulerianPath.java
Patch:
@@ -240,6 +240,8 @@ private static void unitTest(Graph G, String description) {
 
     /**
      * Unit tests the {@code EulerianPath} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int V = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/FFT.java
Patch:
@@ -242,6 +242,8 @@ private static void show(Complex[] x, String title) {
 
     /**
      * Unit tests the {@code FFT} class.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         int n = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/FarthestPair.java
Patch:
@@ -146,6 +146,8 @@ public double distance() {
      * their <em>x</em>- and <em>y</em>-coordinates) from standard input;
      * computes a farthest pair of points; and prints the pair to standard
      * output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = StdIn.readInt();

File: src/main/java/edu/princeton/cs/algs4/FloydWarshall.java
Patch:
@@ -193,6 +193,8 @@ private boolean check(AdjMatrixEdgeWeightedDigraph G) {
 
     /**
      * Unit tests the {@code FloydWarshall} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/FrequencyCounter.java
Patch:
@@ -49,6 +49,8 @@ private FrequencyCounter() { }
      * the threshold) that occurs most frequently to standard output.
      * It also prints out the number of words whose length exceeds
      * the threshold and the number of distinct such words.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int distinct = 0, words = 0;

File: src/main/java/edu/princeton/cs/algs4/GREP.java
Patch:
@@ -49,6 +49,8 @@ private GREP() { }
      * reads in lines from standard input; writes to standard output
      * those lines that contain a substring matching the regular
      * expression.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         String regexp = "(.*" + args[0] + ".*)";

File: src/main/java/edu/princeton/cs/algs4/GabowSCC.java
Patch:
@@ -151,6 +151,8 @@ private boolean check(Digraph G) {
 
     /**
      * Unit tests the {@code GabowSCC} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/GaussJordanElimination.java
Patch:
@@ -173,7 +173,7 @@ else if (Math.abs(a[i][n+n]) > EPSILON)
      * <em>yb</em> &ne; 0.
      *      
      * @return a solution <em>y</em> to the linear system of equations
-     *         <em>yA</em> = 0, <em>yb</em> &ne 0; {@code null} if no such solution
+     *         <em>yA</em> = 0, <em>yb</em> &ne; 0; {@code null} if no such solution
      */
     public double[] dual() {
         double[] y = new double[n];
@@ -360,6 +360,8 @@ private static void test6() {
 
     /**
      * Unit tests the {@code GaussJordanElimination} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/GaussianElimination.java
Patch:
@@ -325,6 +325,8 @@ private static void test9() {
 
     /**
      * Unit tests the {@code GaussianElimination} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         test1();

File: src/main/java/edu/princeton/cs/algs4/Genome.java
Patch:
@@ -72,6 +72,8 @@ public static void expand() {
     /**
      * Sample client that calls {@code compress()} if the command-line
      * argument is "-" an {@code expand()} if it is "+".
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         if      (args[0].equals("-")) compress();

File: src/main/java/edu/princeton/cs/algs4/GrahamScan.java
Patch:
@@ -133,6 +133,8 @@ private boolean isConvex() {
      * their <em>x</em>- and <em>y</em>-coordinates) from standard input;
      * computes their convex hull; and prints out the points on the
      * convex hull to standard output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = StdIn.readInt();

File: src/main/java/edu/princeton/cs/algs4/Heap.java
Patch:
@@ -106,6 +106,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; heapsorts them; 
      * and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/HexDump.java
Patch:
@@ -53,6 +53,8 @@ private HexDump() { }
      * per line, where k is given as a command-line integer (defaults
      * to 16 if no integer is specified); also writes the number
      * of bits.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int bytesPerLine = 16;

File: src/main/java/edu/princeton/cs/algs4/HopcroftKarp.java
Patch:
@@ -355,6 +355,8 @@ private boolean certifySolution(Graph G) {
      * creates a random bipartite graph with {@code V1} + {@code V2} vertices
      * and {@code E} edges; computes a maximum matching and minimum vertex cover;
      * and prints the results.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Huffman.java
Patch:
@@ -201,6 +201,8 @@ private static Node readTrie() {
     /**
      * Sample client that calls {@code compress()} if the command-line
      * argument is "-" an {@code expand()} if it is "+".
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         if      (args[0].equals("-")) compress();

File: src/main/java/edu/princeton/cs/algs4/In.java
Patch:
@@ -558,6 +558,8 @@ public static String[] readStrings() {
     
    /**
      * Unit tests the {@code In} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in;

File: src/main/java/edu/princeton/cs/algs4/Insertion.java
Patch:
@@ -198,6 +198,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; insertion sorts them;
      * and prints them to standard output in ascending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/InsertionX.java
Patch:
@@ -110,6 +110,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; insertion sorts them;
      * and prints them to standard output in ascending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/Interval1D.java
Patch:
@@ -16,7 +16,7 @@
  *  The {@code Interval1D} class represents a one-dimensional interval.
  *  The interval is <em>closed</em>&mdash;it contains both endpoints.
  *  Intervals are immutable: their values cannot be changed after they are created.
- *  The class <@code>Interval1D</@code> includes methods for checking whether
+ *  The class {@code Interval1D} includes methods for checking whether
  *  an interval contains a point and determining whether two intervals intersect.
  *  <p>
  *  For additional documentation, 
@@ -219,6 +219,8 @@ public int compare(Interval1D a, Interval1D b) {
 
     /**
      * Unit tests the {@code Interval1D} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Interval1D[] intervals = new Interval1D[4];

File: src/main/java/edu/princeton/cs/algs4/KMP.java
Patch:
@@ -144,6 +144,8 @@ public int search(char[] text) {
      * Takes a pattern string and an input string as command-line arguments;
      * searches for the pattern string in the text string; and prints
      * the first occurrence of the pattern string in the text string.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String pat = args[0];

File: src/main/java/edu/princeton/cs/algs4/KWIK.java
Patch:
@@ -61,6 +61,8 @@ private KWIK() { }
      * use queries, printing all occurrences of the given query
      * string in the text string with k characters of surrounding
      * context on either side.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Knuth.java
Patch:
@@ -87,6 +87,8 @@ public static void shuffle(Object[] a) {
     /**
      * Reads in a sequence of strings from standard input, shuffles
      * them, and prints out the results.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/KosarajuSharirSCC.java
Patch:
@@ -173,6 +173,8 @@ private boolean check(Digraph G) {
 
     /**
      * Unit tests the {@code KosarajuSharirSCC} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/KruskalMST.java
Patch:
@@ -176,6 +176,8 @@ private boolean check(EdgeWeightedGraph G) {
 
     /**
      * Unit tests the {@code KruskalMST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/LSD.java
Patch:
@@ -133,6 +133,8 @@ public static void sort(int[] a) {
      * Reads in a sequence of fixed-length strings from standard input;
      * LSD radix sorts them;
      * and prints them to standard output in ascending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/LZW.java
Patch:
@@ -97,6 +97,8 @@ public static void expand() {
     /**
      * Sample client that calls {@code compress()} if the command-line
      * argument is "-" an {@code expand()} if it is "+".
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         if      (args[0].equals("-")) compress();

File: src/main/java/edu/princeton/cs/algs4/LazyPrimMST.java
Patch:
@@ -193,6 +193,8 @@ private boolean check(EdgeWeightedGraph G) {
     
     /**
      * Unit tests the {@code LazyPrimMST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/LinearProbingHashST.java
Patch:
@@ -246,6 +246,8 @@ else if (get(keys[i]) != vals[i]) {
 
     /**
      * Unit tests the {@code LinearProbingHashST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         LinearProbingHashST<String, Integer> st = new LinearProbingHashST<String, Integer>();

File: src/main/java/edu/princeton/cs/algs4/LinkedBag.java
Patch:
@@ -119,6 +119,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code LinkedBag} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         LinkedBag<String> bag = new LinkedBag<String>();

File: src/main/java/edu/princeton/cs/algs4/LinkedQueue.java
Patch:
@@ -188,6 +188,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code LinkedQueue} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         LinkedQueue<String> queue = new LinkedQueue<String>();

File: src/main/java/edu/princeton/cs/algs4/LinkedStack.java
Patch:
@@ -178,6 +178,8 @@ else if (n == 1) {
 
     /**
      * Unit tests the {@code LinkedStack} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         LinkedStack<String> stack = new LinkedStack<String>();

File: src/main/java/edu/princeton/cs/algs4/LongestCommonSubstring.java
Patch:
@@ -92,6 +92,8 @@ public static String lcs(String s, String t) {
      * Reads in two strings from files specified as command-line arguments;
      * computes the longest common substring; and prints the results to
      * standard output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in1 = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/LongestRepeatedSubstring.java
Patch:
@@ -79,6 +79,8 @@ public static String lrs(String text) {
 
     /**
      * Unit tests the {@code lrs()} method.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String text = StdIn.readAll().replaceAll("\\s+", " ");

File: src/main/java/edu/princeton/cs/algs4/MSD.java
Patch:
@@ -212,6 +212,8 @@ private static void exch(int[] a, int i, int j) {
      * Reads in a sequence of extended ASCII strings from standard input;
      * MSD radix sorts them;
      * and prints them to standard output in ascending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/MaxPQ.java
Patch:
@@ -279,6 +279,8 @@ public Key next() {
 
     /**
      * Unit tests the {@code MaxPQ} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         MaxPQ<String> pq = new MaxPQ<String>();

File: src/main/java/edu/princeton/cs/algs4/Merge.java
Patch:
@@ -163,6 +163,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; mergesorts them; 
      * and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/MergeBU.java
Patch:
@@ -104,6 +104,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; bottom-up
      * mergesorts them; and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/MinPQ.java
Patch:
@@ -268,6 +268,8 @@ public Key next() {
 
     /**
      * Unit tests the {@code MinPQ} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         MinPQ<String> pq = new MinPQ<String>();

File: src/main/java/edu/princeton/cs/algs4/Multiway.java
Patch:
@@ -68,6 +68,8 @@ private static void merge(In[] streams) {
      *  merges them together into a sorted output; and writes
      *  the results to standard output.
      *  Note: this client does not check that the input files are sorted.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = args.length;

File: src/main/java/edu/princeton/cs/algs4/NFA.java
Patch:
@@ -141,6 +141,8 @@ public boolean recognizes(String txt) {
 
     /**
      * Unit tests the {@code NFA} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String regexp = "(" + args[0] + ")";

File: src/main/java/edu/princeton/cs/algs4/NonrecursiveDFS.java
Patch:
@@ -103,6 +103,8 @@ public boolean marked(int v) {
 
     /**
      * Unit tests the {@code NonrecursiveDFS} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/NonrecursiveDirectedDFS.java
Patch:
@@ -93,6 +93,8 @@ public boolean marked(int v) {
 
     /**
      * Unit tests the {@code NonrecursiveDirectedDFS} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Out.java
Patch:
@@ -299,6 +299,8 @@ public void printf(Locale locale, String format, Object... args) {
 
    /**
      * A test client.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Out out;

File: src/main/java/edu/princeton/cs/algs4/PatriciaSET.java
Patch:
@@ -352,6 +352,8 @@ private static int firstDifferingBit(String k1, String k2) {
      * first parameter indicates the size of the dataset. The second parameter
      * controls the number of passes (a new random dataset becomes generated at
      * the start of each pass).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         PatriciaSET set = new PatriciaSET();

File: src/main/java/edu/princeton/cs/algs4/PatriciaST.java
Patch:
@@ -367,6 +367,8 @@ private static int firstDifferingBit(String k1, String k2) {
      * first parameter indicates the size of the dataset. The second parameter
      * controls the number of passes (a new random dataset becomes generated at
      * the start of each pass).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         PatriciaST<Integer> st = new PatriciaST<Integer>();

File: src/main/java/edu/princeton/cs/algs4/Picture.java
Patch:
@@ -357,6 +357,8 @@ public void actionPerformed(ActionEvent e) {
      * Unit tests this {@code Picture} data type.
      * Reads a picture specified by the command-line argument,
      * and shows it in a window on the screen.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Picture picture = new Picture(args[0]);

File: src/main/java/edu/princeton/cs/algs4/PictureDump.java
Patch:
@@ -42,6 +42,8 @@ private PictureDump() { }
      * them to standard drawing output as a width-by-height picture,
      * using black for 1 and white for 0 (and red for any leftover
      * pixels).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int width = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/PrimMST.java
Patch:
@@ -206,6 +206,8 @@ private boolean check(EdgeWeightedGraph G) {
 
     /**
      * Unit tests the {@code PrimMST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/Queue.java
Patch:
@@ -160,6 +160,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code Queue} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Queue<String> queue = new Queue<String>();

File: src/main/java/edu/princeton/cs/algs4/Quick3string.java
Patch:
@@ -132,6 +132,8 @@ private static boolean isSorted(String[] a) {
      * Reads in a sequence of fixed-length strings from standard input;
      * 3-way radix quicksorts them;
      * and prints them to standard output in ascending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Quick3way.java
Patch:
@@ -111,6 +111,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; 3-way
      * quicksorts them; and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/QuickX.java
Patch:
@@ -162,6 +162,8 @@ private static void show(Comparable[] a) {
      * Reads in a sequence of strings from standard input; quicksorts them
      * (using an optimized version of quicksort); 
      * and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/RabinKarp.java
Patch:
@@ -147,6 +147,8 @@ private static long longRandomPrime() {
      * Takes a pattern string and an input string as command-line arguments;
      * searches for the pattern string in the text string; and prints
      * the first occurrence of the pattern string in the text string.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String pat = args[0];

File: src/main/java/edu/princeton/cs/algs4/RandomSeq.java
Patch:
@@ -35,6 +35,8 @@ private RandomSeq() { }
     /**
      * Reads in two command-line arguments lo and hi and prints n uniformly
      * random real numbers in [lo, hi) to standard output.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/RectHV.java
Patch:
@@ -37,8 +37,7 @@ public final class RectHV {
      * @throws IllegalArgumentException if any of {@code xmin},
      *         {@code xmax}, {@code ymin}, or {@code ymax}
      *         is {@code Double.NaN}.
-     * @throws IllegalArgumentException if {@code xmax} <
-     *         {@code xmin} or {@code ymax} < {@code ymin}.
+     * @throws IllegalArgumentException if {@code xmax < xmin} or {@code ymax < ymin}.
      */
     public RectHV(double xmin, double ymin, double xmax, double ymax) {
         if (Double.isNaN(xmin) || Double.isNaN(xmax))

File: src/main/java/edu/princeton/cs/algs4/ResizingArrayBag.java
Patch:
@@ -98,6 +98,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code ResizingArrayBag} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         ResizingArrayBag<String> bag = new ResizingArrayBag<String>();

File: src/main/java/edu/princeton/cs/algs4/ResizingArrayQueue.java
Patch:
@@ -145,6 +145,8 @@ public Item next() {
 
    /**
      * Unit tests the {@code ResizingArrayQueue} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         ResizingArrayQueue<String> queue = new ResizingArrayQueue<String>();

File: src/main/java/edu/princeton/cs/algs4/ResizingArrayStack.java
Patch:
@@ -147,6 +147,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code Stack} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         ResizingArrayStack<String> stack = new ResizingArrayStack<String>();

File: src/main/java/edu/princeton/cs/algs4/RunLength.java
Patch:
@@ -91,6 +91,8 @@ public static void compress() {
     /**
      * Sample client that calls {@code compress()} if the command-line
      * argument is "-" an {@code expand()} if it is "+".
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         if      (args[0].equals("-")) compress();

File: src/main/java/edu/princeton/cs/algs4/ST.java
Patch:
@@ -216,6 +216,8 @@ public Key floor(Key key) {
 
     /**
      * Unit tests the {@code ST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         ST<String, Integer> st = new ST<String, Integer>();

File: src/main/java/edu/princeton/cs/algs4/Selection.java
Patch:
@@ -139,6 +139,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; selection sorts them; 
      * and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/SeparateChainingHashST.java
Patch:
@@ -187,6 +187,8 @@ public Iterable<Key> keys() {
 
     /**
      * Unit tests the {@code SeparateChainingHashST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) { 
         SeparateChainingHashST<String, Integer> st = new SeparateChainingHashST<String, Integer>();

File: src/main/java/edu/princeton/cs/algs4/SequentialSearchST.java
Patch:
@@ -195,6 +195,8 @@ public Iterable<Key> keys()  {
 
     /**
      * Unit tests the {@code SequentialSearchST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         SequentialSearchST<String, Integer> st = new SequentialSearchST<String, Integer>();

File: src/main/java/edu/princeton/cs/algs4/Shell.java
Patch:
@@ -114,6 +114,8 @@ private static void show(Comparable[] a) {
     /**
      * Reads in a sequence of strings from standard input; Shellsorts them; 
      * and prints them to standard output in ascending order. 
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();

File: src/main/java/edu/princeton/cs/algs4/SparseVector.java
Patch:
@@ -200,6 +200,8 @@ public String toString() {
 
     /**
      * Unit tests the {@code SparseVector} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         SparseVector a = new SparseVector(10);

File: src/main/java/edu/princeton/cs/algs4/Stack.java
Patch:
@@ -170,6 +170,8 @@ public Item next() {
 
     /**
      * Unit tests the {@code Stack} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Stack<String> stack = new Stack<String>();

File: src/main/java/edu/princeton/cs/algs4/StdArrayIO.java
Patch:
@@ -259,6 +259,8 @@ public static void print(boolean[][] a) {
 
    /**
      * Unit tests {@code StdArrayIO}.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/StdAudio.java
Patch:
@@ -310,6 +310,8 @@ private static double[] note(double hz, double duration, double amplitude) {
 
     /**
      * Test client - play an A major scale to standard audio.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         

File: src/main/java/edu/princeton/cs/algs4/StdDraw.java
Patch:
@@ -295,7 +295,7 @@
  *  or rescale it to fit inside a width-by-height pixel bounding box.
  *  <p>
  *  <b>Saving to a file.</b>
- *  You save your image to a file using the <em>File -> Save</em> menu option.
+ *  You save your image to a file using the <em>File → Save</em> menu option.
  *  You can also save a file programatically using the following method:
  *  <ul>
  *  <li> {@link #save(String filename)}
@@ -1812,6 +1812,8 @@ public void keyReleased(KeyEvent e) {
 
     /**
      * Test client.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         StdDraw.square(.2, .8, .1);

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -20,7 +20,6 @@
  *  The {@code StdIn} class provides static methods for reading strings
  *  and numbers from standard input.
  *  These functions fall into one of four categories:
- *  <p>
  *  <ul>
  *  <li>those for reading individual tokens from standard input, one at a time,
  *      and converting each to a number, string, or boolean
@@ -536,6 +535,8 @@ public static String[] readStrings() {
 
     /**
      * Interactive test of basic functionality.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/StdOut.java
Patch:
@@ -305,6 +305,8 @@ public static void printf(Locale locale, String format, Object... args) {
 
    /**
      * Unit tests some of the methods in {@code StdOut}.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/StdRandom.java
Patch:
@@ -506,6 +506,8 @@ public static void shuffle(int[] a, int lo, int hi) {
 
     /**
      * Unit test.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/StdStats.java
Patch:
@@ -451,6 +451,8 @@ public static void plotBars(double[] a) {
    /**
      * Unit tests {@code StdStats}.
      * Convert command-line arguments to array of doubles and call various methods.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         double[] a = StdArrayIO.readDouble1D();

File: src/main/java/edu/princeton/cs/algs4/Stopwatch.java
Patch:
@@ -59,6 +59,8 @@ public double elapsedTime() {
      * It prints to standard output the sum and the amount of time to
      * compute the sum. Note that the discrete sum can be approximated by
      * an integral - the sum should be approximately 2/3 * (n^(3/2) - 1).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/StopwatchCPU.java
Patch:
@@ -61,6 +61,8 @@ public double elapsedTime() {
      * It prints to standard output the sum and the amount of time to
      * compute the sum. Note that the discrete sum can be approximated by
      * an integral - the sum should be approximately 2/3 * (n^(3/2) - 1).
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int n = Integer.parseInt(args[0]);

File: src/main/java/edu/princeton/cs/algs4/SymbolGraph.java
Patch:
@@ -187,6 +187,8 @@ public Graph graph() {
 
     /**
      * Unit tests the {@code SymbolGraph} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         String filename  = args[0];

File: src/main/java/edu/princeton/cs/algs4/TST.java
Patch:
@@ -242,6 +242,8 @@ private void collect(Node<Value> x, StringBuilder prefix, int i, String pattern,
 
     /**
      * Unit tests the {@code TST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/TarjanSCC.java
Patch:
@@ -146,6 +146,8 @@ private boolean check(Digraph G) {
 
     /**
      * Unit tests the {@code TarjanSCC} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/TopM.java
Patch:
@@ -41,6 +41,8 @@ private TopM() { }
      *  Reads a sequence of transactions from standard input; takes a
      *  command-line integer m; prints to standard output the m largest
      *  transactions in descending order.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         int m = Integer.parseInt(args[0]); 

File: src/main/java/edu/princeton/cs/algs4/Transaction.java
Patch:
@@ -180,6 +180,8 @@ public int compare(Transaction v, Transaction w) {
 
     /**
      * Unit tests the {@code Transaction} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         Transaction[] a = new Transaction[4];

File: src/main/java/edu/princeton/cs/algs4/TransitiveClosure.java
Patch:
@@ -79,6 +79,8 @@ public boolean reachable(int v, int w) {
 
     /**
      * Unit tests the {@code TransitiveClosure} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/TrieSET.java
Patch:
@@ -238,6 +238,8 @@ private Node delete(Node x, String key, int d) {
 
     /**
      * Unit tests the {@code TrieSET} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         TrieSET set = new TrieSET();

File: src/main/java/edu/princeton/cs/algs4/TrieST.java
Patch:
@@ -263,6 +263,8 @@ private Node delete(Node x, String key, int d) {
 
     /**
      * Unit tests the {@code TrieST} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
 

File: src/main/java/edu/princeton/cs/algs4/Vector.java
Patch:
@@ -224,6 +224,8 @@ public String toString() {
 
     /**
      * Unit tests the {@code Vector} data type.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         double[] xdata = { 1.0, 2.0, 3.0, 4.0 };

File: src/main/java/edu/princeton/cs/algs4/Whitelist.java
Patch:
@@ -50,6 +50,8 @@ private Whitelist() { }
      * Reads in a sequence of integers from the whitelist file, specified as
      * a command-line argument. Reads in integers from standard input and
      * prints to standard output those integers that are not in the file.
+     *
+     * @param args the command-line arguments
      */
     public static void main(String[] args) {
         In in = new In(args[0]);

File: src/main/java/edu/princeton/cs/algs4/IndexMaxPQ.java
Patch:
@@ -186,7 +186,7 @@ public void changeKey(int i, Key key) {
      * @param  i the index of the key to change
      * @param  key change the key associated with index {@code i} to this key
      * @throws IndexOutOfBoundsException unless 0 &le; {@code i} &lt; {@code maxN}
-     * @deprecated Replaced by {@link #changeKey(int, Key)}.
+     * @deprecated Replaced by {@code changeKey(int, Key)}.
      */
     @Deprecated
     public void change(int i, Key key) {

File: src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java
Patch:
@@ -191,7 +191,7 @@ public void changeKey(int i, Key key) {
      * @param  i the index of the key to change
      * @param  key change the key associated with index {@code i} to this key
      * @throws IndexOutOfBoundsException unless 0 &le; {@code i} &lt; {@code maxN}
-     * @deprecated Replaced by {@link #changeKey(int, Key)}.
+     * @deprecated Replaced by {@code changeKey(int, Key)}.
      */
     @Deprecated
     public void change(int i, Key key) {

File: src/main/java/edu/princeton/cs/algs4/DegreesOfSeparation.java
Patch:
@@ -103,16 +103,16 @@ public static void main(String[] args) {
             return;
         }
 
-        int s = sg.index(source);
+        int s = sg.indexOf(source);
         BreadthFirstPaths bfs = new BreadthFirstPaths(G, s);
 
         while (!StdIn.isEmpty()) {
             String sink = StdIn.readLine();
             if (sg.contains(sink)) {
-                int t = sg.index(sink);
+                int t = sg.indexOf(sink);
                 if (bfs.hasPathTo(t)) {
                     for (int v : bfs.pathTo(t)) {
-                        StdOut.println("   " + sg.name(v));
+                        StdOut.println("   " + sg.nameOf(v));
                     }
                 }
                 else {

File: src/main/java/edu/princeton/cs/algs4/Digraph.java
Patch:
@@ -214,13 +214,13 @@ public int indegree(int v) {
      * @return the reverse of the digraph
      */
     public Digraph reverse() {
-        Digraph R = new Digraph(V);
+        Digraph reverse = new Digraph(V);
         for (int v = 0; v < V; v++) {
             for (int w : adj(v)) {
-                R.addEdge(w, v);
+                reverse.addEdge(w, v);
             }
         }
-        return R;
+        return reverse;
     }
 
     /**

File: src/main/java/edu/princeton/cs/algs4/DirectedCycle.java
Patch:
@@ -71,7 +71,7 @@ private void dfs(Digraph G, int v) {
             // short circuit if directed cycle found
             if (cycle != null) return;
 
-            //found new vertex, so recur
+            // found new vertex, so recur
             else if (!marked[w]) {
                 edgeTo[w] = v;
                 dfs(G, w);

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java
Patch:
@@ -70,7 +70,7 @@ public EdgeWeightedDigraph(int V, int E) {
         for (int i = 0; i < E; i++) {
             int v = StdRandom.uniform(V);
             int w = StdRandom.uniform(V);
-            double weight = .01 * StdRandom.uniform(100);
+            double weight = 0.01 * StdRandom.uniform(100);
             DirectedEdge e = new DirectedEdge(v, w, weight);
             addEdge(e);
         }

File: src/main/java/edu/princeton/cs/algs4/InsertionX.java
Patch:
@@ -46,11 +46,11 @@ private InsertionX() { }
      * @param a the array to be sorted
      */
     public static void sort(Comparable[] a) {
-        int N = a.length;
+        int n = a.length;
 
         // put smallest element in position to serve as sentinel
         int exchanges = 0;
-        for (int i = N-1; i > 0; i--) {
+        for (int i = n-1; i > 0; i--) {
             if (less(a[i], a[i-1])) {
                 exch(a, i, i-1);
                 exchanges++;
@@ -60,7 +60,7 @@ public static void sort(Comparable[] a) {
 
 
         // insertion sort with half-exchanges
-        for (int i = 2; i < N; i++) {
+        for (int i = 2; i < n; i++) {
             Comparable v = a[i];
             int j = i;
             while (less(v, a[j-1])) {

File: src/main/java/edu/princeton/cs/algs4/LongestRepeatedSubstring.java
Patch:
@@ -63,10 +63,10 @@ private LongestRepeatedSubstring() { }
      *         the empty string if no such string
      */
     public static String lrs(String text) {
-        int N = text.length();
+        int n = text.length();
         SuffixArray sa = new SuffixArray(text);
         String lrs = "";
-        for (int i = 1; i < N; i++) {
+        for (int i = 1; i < n; i++) {
             int length = sa.lcp(i);
             if (length > lrs.length()) {
                 // lrs = sa.select(i).substring(0, length);

File: src/main/java/edu/princeton/cs/algs4/Particle.java
Patch:
@@ -66,8 +66,8 @@ public Particle(double rx, double ry, double vx, double vy, double radius, doubl
     public Particle() {
         rx     = StdRandom.uniform(0.0, 1.0);
         ry     = StdRandom.uniform(0.0, 1.0);
-        vx     = StdRandom.uniform(-.005, 0.005);
-        vy     = StdRandom.uniform(-.005, 0.005);
+        vx     = StdRandom.uniform(-0.005, 0.005);
+        vy     = StdRandom.uniform(-0.005, 0.005);
         radius = 0.01;
         mass   = 0.5;
         color  = Color.BLACK;

File: src/main/java/edu/princeton/cs/algs4/Topological.java
Patch:
@@ -1,6 +1,6 @@
 /******************************************************************************
  *  Compilation:  javac Topoological.java
- *  Execution:    java  Topological filename.txt separator
+ *  Execution:    java  Topological filename.txt delimiter
  *  Dependencies: Digraph.java DepthFirstOrder.java DirectedCycle.java
  *                EdgeWeightedDigraph.java EdgeWeightedDirectedCycle.java
  *                SymbolDigraph.java
@@ -141,7 +141,7 @@ public static void main(String[] args) {
         SymbolDigraph sg = new SymbolDigraph(filename, delimiter);
         Topological topological = new Topological(sg.digraph());
         for (int v : topological.order()) {
-            StdOut.println(sg.name(v));
+            StdOut.println(sg.nameOf(v));
         }
     }
 

File: src/main/java/edu/princeton/cs/algs4/Transaction.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
-
 /**
  *  The <tt>Transaction</tt> class is an immutable data type to encapsulate a
  *  commercial transaction with a customer name, date, and amount.
@@ -137,11 +136,12 @@ public boolean equals(Object other) {
      * @return a hash code for this transaction
      */
     public int hashCode() {
-        int hash = 17;
+        int hash = 1;
         hash = 31*hash + who.hashCode();
         hash = 31*hash + when.hashCode();
         hash = 31*hash + ((Double) amount).hashCode();
         return hash;
+        // return Objects.hash(who, when, amount);
     }
 
     /**

File: src/main/java/edu/princeton/cs/algs4/BinarySearch.java
Patch:
@@ -31,7 +31,7 @@
  *  The <tt>BinarySearch</tt> class provides a static method for binary
  *  searching for an integer in a sorted array of integers.
  *  <p>
- *  The <em>rank</em> operations takes logarithmic time in the worst case.
+ *  The <em>indexOf</em> operations takes logarithmic time in the worst case.
  *  <p>
  *  For additional documentation, see <a href="http://algs4.cs.princeton.edu/11model">Section 1.1</a> of
  *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.

File: src/main/java/edu/princeton/cs/algs4/BreadthFirstPaths.java
Patch:
@@ -199,7 +199,7 @@ private boolean check(Graph G, int s) {
             }
         }
 
-        // check that v = edgeTo[w] satisfies distTo[w] + distTo[v] + 1
+        // check that v = edgeTo[w] satisfies distTo[w] = distTo[v] + 1
         // provided v is reachable from s
         for (int w = 0; w < G.V(); w++) {
             if (!hasPathTo(w) || w == s) continue;

File: src/main/java/edu/princeton/cs/algs4/DepthFirstOrder.java
Patch:
@@ -74,6 +74,8 @@ public DepthFirstOrder(Digraph G) {
         marked    = new boolean[G.V()];
         for (int v = 0; v < G.V(); v++)
             if (!marked[v]) dfs(G, v);
+
+        assert check(G);
     }
 
     /**

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianCycle.java
Patch:
@@ -2,6 +2,8 @@
  *  Compilation:  javac DirectedEulerianCycle.java
  *  Execution:    java DirectedEulerianCycle V E
  *  Dependencies: Digraph.java Stack.java StdOut.java
+ *                BreadthFirstPaths.java
+ *                DigraphGenerator.java StdRandom.java
  *
  *  Find an Eulerian cycle in a digraph, if one exists.
  *

File: src/main/java/edu/princeton/cs/algs4/DirectedEulerianPath.java
Patch:
@@ -2,6 +2,8 @@
  *  Compilation:  javac DirectedEulerianPath.java
  *  Execution:    java DirectedEulerianPath V E
  *  Dependencies: Digraph.java Stack.java StdOut.java
+ *                BreadthFirstPaths.java
+ *                DigraphGenerator.java StdRandom.java
  *
  *  Find an Eulerian path in a digraph, if one exists.
  *

File: src/main/java/edu/princeton/cs/algs4/Edge.java
Patch:
@@ -93,9 +93,7 @@ public int other(int vertex) {
      */
     @Override
     public int compareTo(Edge that) {
-        if      (this.weight() < that.weight()) return -1;
-        else if (this.weight() > that.weight()) return +1;
-        else                                    return  0;
+        return Double.compare(this.weight, that.weight);
     }
 
     /**

File: src/main/java/edu/princeton/cs/algs4/EulerianPath.java
Patch:
@@ -9,8 +9,6 @@
 
 package edu.princeton.cs.algs4;
 
-import java.util.Iterator;
-
 /**
  *  The <tt>EulerianPath</tt> class represents a data type
  *  for finding an Eulerian path in a graph.

File: src/main/java/edu/princeton/cs/algs4/FloydWarshall.java
Patch:
@@ -93,6 +93,7 @@ public FloydWarshall(AdjMatrixEdgeWeightedDigraph G) {
                 }
             }
         }
+        assert check(G);
     }
 
     /**
@@ -170,7 +171,7 @@ public Iterable<DirectedEdge> path(int s, int t) {
     }
 
     // check optimality conditions
-    private boolean check(EdgeWeightedDigraph G, int s) {
+    private boolean check(AdjMatrixEdgeWeightedDigraph G) {
 
         // no negative cycle
         if (!hasNegativeCycle()) {

File: src/main/java/edu/princeton/cs/algs4/Graph.java
Patch:
@@ -1,7 +1,7 @@
 /******************************************************************************
  *  Compilation:  javac Graph.java        
  *  Execution:    java Graph input.txt
- *  Dependencies: Bag.java In.java StdOut.java
+ *  Dependencies: Bag.java Stack.java In.java StdOut.java
  *  Data files:   http://algs4.cs.princeton.edu/41graph/tinyG.txt
  *
  *  A graph, implemented using an array of sets.

File: src/main/java/edu/princeton/cs/algs4/Heap.java
Patch:
@@ -111,6 +111,7 @@ public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();
         Heap.sort(a);
         show(a);
+        assert isSorted(a);
     }
 }
 

File: src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java
Patch:
@@ -347,6 +347,7 @@ public boolean hasNext() {
 		}
 		
 		public Integer next() {
+                        if (!hasNext()) throw new NoSuchElementException();
 			return clone.delMin();
 		}
 		

File: src/main/java/edu/princeton/cs/algs4/LinearRegression.java
Patch:
@@ -28,7 +28,7 @@
 public class LinearRegression {
     private final int N;
     private final double intercept, slope;
-    private final double R2;
+    private final double r2;
     private final double svar, svar0, svar1;
 
    /**
@@ -74,7 +74,7 @@ public LinearRegression(double[] x, double[] y) {
         }
 
         int degreesOfFreedom = N-2;
-        R2    = ssr / yybar;
+        r2    = ssr / yybar;
         svar  = rss / degreesOfFreedom;
         svar1 = svar / xxbar;
         svar0 = svar/N + xbar*xbar*svar1;
@@ -105,7 +105,7 @@ public double slope() {
      *         which is a real number between 0 and 1
      */
     public double R2() {
-        return R2;
+        return r2;
     }
 
    /**

File: src/main/java/edu/princeton/cs/algs4/MultiwayMinPQ.java
Patch:
@@ -277,6 +277,7 @@ public boolean hasNext() {
 		}
 		
 		public Key next() {
+                        if (!hasNext()) throw new NoSuchElementException();
 			return data.delMin();
 		}
 		

File: src/main/java/edu/princeton/cs/algs4/Queue.java
Patch:
@@ -36,7 +36,7 @@
  *  @author Robert Sedgewick
  *  @author Kevin Wayne
  *
- *  @param <Item> the generic type of an item in this bag
+ *  @param <Item> the generic type of an item in this queue
  */
 public class Queue<Item> implements Iterable<Item> {
     private Node<Item> first;    // beginning of queue

File: src/main/java/edu/princeton/cs/algs4/Quick.java
Patch:
@@ -163,6 +163,7 @@ public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();
         Quick.sort(a);
         show(a);
+        assert isSorted(a);
 
         // shuffle
         StdRandom.shuffle(a);

File: src/main/java/edu/princeton/cs/algs4/QuickX.java
Patch:
@@ -159,6 +159,7 @@ private static void show(Comparable[] a) {
     public static void main(String[] args) {
         String[] a = StdIn.readAllStrings();
         QuickX.sort(a);
+        assert isSorted(a);
         show(a);
     }
 

File: src/main/java/edu/princeton/cs/algs4/StdIn.java
Patch:
@@ -104,7 +104,7 @@
  *  As an example, the following code fragment reads text from standard input,
  *  one line at a time, and prints it to standard output.
  *  <pre>
- *  while (!StdIn.hasNextLine()) {
+ *  while (StdIn.hasNextLine()) {
  *      String line = StdIn.readLine();
  *      StdOut.println(line);
  *  }

File: src/main/java/edu/princeton/cs/algs4/LinearRegression.java
Patch:
@@ -46,12 +46,11 @@ public LinearRegression(double[] x, double[] y) {
 
         // first pass
         double sumx = 0.0, sumy = 0.0, sumx2 = 0.0;
-        for (int i = 0; i < N; i++)
+        for (int i = 0; i < N; i++) {
             sumx  += x[i];
-        for (int i = 0; i < N; i++)
             sumx2 += x[i]*x[i];
-        for (int i = 0; i < N; i++)
             sumy  += y[i];
+        }
         double xbar = sumx / N;
         double ybar = sumy / N;
 

File: src/main/java/edu/princeton/cs/algs4/StdDraw.java
Patch:
@@ -631,7 +631,8 @@ public static void setCanvasSize() {
      *         {@code height} are positive
      */
     public static void setCanvasSize(int canvasWidth, int canvasHeight) {
-        if (width <= 0 || height <= 0) throw new IllegalArgumentException("width and height must be positive");
+        if (canvasWidth <= 0 || canvasHeight <= 0)
+            throw new IllegalArgumentException("width and height must be positive");
         width = canvasWidth;
         height = canvasHeight;
         init();

File: src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java
Patch:
@@ -159,6 +159,7 @@ public void addEdge(DirectedEdge e) {
         validateVertex(v);
         validateVertex(w);
         adj[v].add(e);
+        indegree[w]++;
         E++;
     }
 

