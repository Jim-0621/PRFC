File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/PojoTest.java
Patch:
@@ -428,7 +428,7 @@ public void testModelPropertyExampleJson() {
                 "  type: object\n" +
                 "  properties:\n" +
                 "    exampleJson:\n" +
-                "      $ref: '#/components/schemas/ExampleJson'\n" +
+                "      $ref: \"#/components/schemas/ExampleJson\"\n" +
                 "  example:\n" +
                 "    id: 19877734";
         SerializationMatchers.assertEqualsToYaml(readAll(modelWithPropertyExampleOverrideJson.class), yaml);
@@ -464,7 +464,7 @@ public void testModelPropertyImplExampleJson() {
                 "  type: object\n" +
                 "  properties:\n" +
                 "    exampleJson:\n" +
-                "      $ref: '#/components/schemas/ExampleJson'\n";
+                "      $ref: \"#/components/schemas/ExampleJson\"\n";
         SerializationMatchers.assertEqualsToYaml(readAll(modelWithPropertyImplExampleOverrideJson.class), yaml);
     }
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/JsonDeserializationTest.java
Patch:
@@ -291,10 +291,10 @@ public void testDeserializeRefCallback() throws Exception {
                 "          description: voila!\n" +
                 "      callbacks:\n" +
                 "        testCallback1:\n" +
-                "          $ref: '#/components/callbacks/Callback'\n" +
+                "          $ref: \"#/components/callbacks/Callback\"\n" +
                 "      callbacks:\n" +
                 "        testCallback1:\n" +
-                "          $ref: '#/components/callbacks/Callback'\n" +
+                "          $ref: \"#/components/callbacks/Callback\"\n" +
                 "components:\n" +
                 "  callbacks:\n" +
                 "    Callback:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2189Test.java
Patch:
@@ -40,7 +40,7 @@ public void testTicket2189() {
                       "SubClass:\n" +
                       "  type: object\n" +
                       "  allOf:\n" +
-                      "  - $ref: '#/components/schemas/BaseClass'\n" +
+                      "  - $ref: \"#/components/schemas/BaseClass\"\n" +
                       "  - type: object\n" +
                       "    properties:\n" +
                       "      subClassProperty:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2740CyclicTest.java
Patch:
@@ -25,7 +25,7 @@ public void testCyclicBean() throws Exception {
                 "    type: array\n" +
                 "    description: Other related things\n" +
                 "    items:\n" +
-                "      $ref: '#/components/schemas/MyThing'\n" +
+                "      $ref: \"#/components/schemas/MyThing\"\n" +
                 "description: Thing");
     }
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2862SubtypeTest.java
Patch:
@@ -26,7 +26,7 @@ public void testSubType() throws Exception {
                 "Ticket2862ModelImpl:\n" +
                 "  type: string\n" +
                 "  allOf:\n" +
-                "  - $ref: '#/components/schemas/Ticket2862Model'\n" +
+                "  - $ref: \"#/components/schemas/Ticket2862Model\"\n" +
                 "  enum:\n" +
                 "  - VALUE1\n" +
                 "  - VALUE2\n");

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2884Test.java
Patch:
@@ -56,7 +56,7 @@ public void test2884_null() {
         Assert.assertNotNull(o);
         Assert.assertTrue(o.get$ref().contains(Ticket2884ModelClass.class.getSimpleName()));
         SerializationMatchers.assertEqualsToYaml(schema.schema.getProperties(), "Ticket2884ModelClass:\n" +
-                "  $ref: '#/components/schemas/Ticket2884ModelClass'");
+                "  $ref: \"#/components/schemas/Ticket2884ModelClass\"");
 
     }
 }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2915Test.java
Patch:
@@ -37,9 +37,9 @@ public void testPropertyName() throws Exception {
                 "    name:\n" +
                 "      type: string\n" +
                 "    perServing:\n" +
-                "      $ref: '#/components/schemas/QuantitativeValue'\n" +
+                "      $ref: \"#/components/schemas/QuantitativeValue\"\n" +
                 "    per100Gram:\n" +
-                "      $ref: '#/components/schemas/QuantitativeValue'\n" +
+                "      $ref: \"#/components/schemas/QuantitativeValue\"\n" +
                 "  description: Nutritional value specification");
     }
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2992Test.java
Patch:
@@ -42,11 +42,11 @@ public void testLocalTime() throws Exception {
                 "    name:\n" +
                 "      type: string\n" +
                 "    a:\n" +
-                "      $ref: '#/components/schemas/LocalTime'\n" +
+                "      $ref: \"#/components/schemas/LocalTime\"\n" +
                 "    b:\n" +
-                "      $ref: '#/components/schemas/LocalTime'\n" +
+                "      $ref: \"#/components/schemas/LocalTime\"\n" +
                 "    c:\n" +
-                "      $ref: '#/components/schemas/LocalTime'\n" +
+                "      $ref: \"#/components/schemas/LocalTime\"\n" +
                 "    d:\n" +
                 "      type: string\n" +
                 "      format: date-time\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket3030Test.java
Patch:
@@ -31,7 +31,7 @@ public void testTicket3030() throws Exception {
         String yaml = "Child:\n" +
                 "  type: object\n" +
                 "  allOf:\n" +
-                "  - $ref: '#/components/schemas/Parent'\n" +
+                "  - $ref: \"#/components/schemas/Parent\"\n" +
                 "  - type: object\n" +
                 "    properties:\n" +
                 "      property:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket3063Test.java
Patch:
@@ -48,7 +48,7 @@ public void testTicket3063() throws Exception {
                 "  type: object\n" +
                 "  description: SubClass\n" +
                 "  allOf:\n" +
-                "  - $ref: '#/components/schemas/BaseClass'\n" +
+                "  - $ref: \"#/components/schemas/BaseClass\"\n" +
                 "  - type: object\n" +
                 "    properties:\n" +
                 "      additionalPropertyWhichShouldBeThere:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket3624Test.java
Patch:
@@ -29,12 +29,12 @@ public void testSelfReferencingOptional() throws Exception {
                 "  type: object\n" +
                 "  properties:\n" +
                 "    model:\n" +
-                "      $ref: '#/components/schemas/Model'\n" +
+                "      $ref: \"#/components/schemas/Model\"\n" +
                 "ModelContainer:\n" +
                 "  type: object\n" +
                 "  properties:\n" +
                 "    model:\n" +
-                "      $ref: '#/components/schemas/Model'\n");
+                "      $ref: \"#/components/schemas/Model\"\n");
 
     }
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket3703Test.java
Patch:
@@ -25,12 +25,12 @@ public void testSelfReferencingOptional() throws Exception {
                 "  type: object\n" +
                 "  properties:\n" +
                 "    model:\n" +
-                "      $ref: '#/components/schemas/Model'\n" +
+                "      $ref: \"#/components/schemas/Model\"\n" +
                 "ModelContainer:\n" +
                 "  type: object\n" +
                 "  properties:\n" +
                 "    model:\n" +
-                "      $ref: '#/components/schemas/Model'\n" +
+                "      $ref: \"#/components/schemas/Model\"\n" +
                 "    bytes:\n" +
                 "      type: string\n" +
                 "      format: byte");

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket3853Test.java
Patch:
@@ -40,7 +40,7 @@ public void testTicket3853() {
                 "io.swagger.v3.core.resolving.Ticket3853Test$SubClass:\n" +
                 "  type: object\n" +
                 "  allOf:\n" +
-                "  - $ref: '#/components/schemas/io.swagger.v3.core.resolving.Ticket3853Test$BaseClass'\n" +
+                "  - $ref: \"#/components/schemas/io.swagger.v3.core.resolving.Ticket3853Test$BaseClass\"\n" +
                 "  - type: object\n" +
                 "    properties:\n" +
                 "      subClassProperty:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket4239Test.java
Patch:
@@ -60,7 +60,7 @@ public void testJsonValueSchemaAnnotation() {
         SerializationMatchers.assertEqualsToYaml(context.getDefinedModels(), "A1_Output:\n" +
             "  type: object\n" +
             "  allOf:\n" +
-            "  - $ref: '#/components/schemas/A_Output'\n" +
+            "  - $ref: \"#/components/schemas/A_Output\"\n" +
             "  - type: object\n" +
             "    properties:\n" +
             "      a1_out:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/serialization/SchemaSerializationTest.java
Patch:
@@ -54,7 +54,7 @@ public void serializeRefSchema3_1() {
                 "        tag:\n" +
                 "          type: string\n" +
                 "    AnotherPet:\n" +
-                "      $ref: '#/components/schemas/Pet'\n" +
+                "      $ref: \"#/components/schemas/Pet\"\n" +
                 "      description: Another Pet for petstore referencing Pet schema\n" +
                 "      properties:\n" +
                 "        category:\n" +
@@ -76,6 +76,6 @@ public void serializeRefSchema3_1() {
                 "          type: string\n" +
                 "      format: whatever\n" +
                 "    AnotherPet:\n" +
-                "      $ref: '#/components/schemas/Pet'\n");
+                "      $ref: \"#/components/schemas/Pet\"\n");
     }
 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ContainerTypeSchemaTicket2636Test.java
Patch:
@@ -27,7 +27,7 @@ public void testContainerTypeSchemaTicket2636() throws Exception {
                 "        content:\n" +
                 "          application/json:\n" +
                 "            schema:\n" +
-                "              $ref: '#/components/schemas/MyModel'\n" +
+                "              $ref: \"#/components/schemas/MyModel\"\n" +
                 "        required: true\n" +
                 "      responses:\n" +
                 "        \"200\":\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/EnumTest.java
Patch:
@@ -42,7 +42,7 @@ public void testEnum() throws IOException {
             "              schema:\n" +
             "                type: array\n" +
             "                items:\n" +
-            "                  $ref: '#/components/schemas/TaskDTO'\n" +
+            "                  $ref: \"#/components/schemas/TaskDTO\"\n" +
             "        \"404\":\n" +
             "          description: User not found\n" +
             "components:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/SchemaResolutionAllOfTest.java
Patch:
@@ -24,7 +24,7 @@ public void testSchemaResolutionAllOf() {
                 "          content:\n" +
                 "            '*/*':\n" +
                 "              schema:\n" +
-                "                $ref: '#/components/schemas/InlineSchemaFirst'\n" +
+                "                $ref: \"#/components/schemas/InlineSchemaFirst\"\n" +
                 "  /test/inlineSchemaSecond:\n" +
                 "    get:\n" +
                 "      operationId: inlineSchemaFirst_1\n" +
@@ -34,7 +34,7 @@ public void testSchemaResolutionAllOf() {
                 "            schema:\n" +
                 "              allOf:\n" +
                 "              - description: InlineSchemaSecond API\n" +
-                "              - $ref: '#/components/schemas/InlineSchemaFirst'\n" +
+                "              - $ref: \"#/components/schemas/InlineSchemaFirst\"\n" +
                 "      responses:\n" +
                 "        default:\n" +
                 "          description: default response\n" +
@@ -46,7 +46,7 @@ public void testSchemaResolutionAllOf() {
                 "      type: object\n" +
                 "      properties:\n" +
                 "        property1:\n" +
-                "          $ref: '#/components/schemas/InlineSchemaPropertyFirst'\n" +
+                "          $ref: \"#/components/schemas/InlineSchemaPropertyFirst\"\n" +
                 "    InlineSchemaPropertyFirst:\n" +
                 "      type: object\n" +
                 "      properties:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -52,7 +52,7 @@ public void testSimpleCallback() {
                 "          content:\n" +
                 "            '*/*':\n" +
                 "              schema:\n" +
-                "                $ref: '#/components/schemas/SubscriptionResponse'\n" +
+                "                $ref: \"#/components/schemas/SubscriptionResponse\"\n" +
                 "      callbacks:\n" +
                 "        subscription:\n" +
                 "          http://$request.query.url:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/examples/ExamplesTest.java
Patch:
@@ -359,7 +359,7 @@ public void testFullExample() {
                 "        required: true\n" +
                 "        style: simple\n" +
                 "        schema:\n" +
-                "          $ref: '#/components/schemas/SubscriptionResponse'\n" +
+                "          $ref: \"#/components/schemas/SubscriptionResponse\"\n" +
                 "        examples:\n" +
                 "          subscriptionId_1:\n" +
                 "            summary: Subscription number 12345\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/MergedOperationTest.java
Patch:
@@ -61,7 +61,7 @@ public void testAnnotatedParameters() {
                         "          content:\n" +
                         "            '*/*':\n" +
                         "              schema:\n" +
-                        "                $ref: '#/components/schemas/SimpleResponse'\n" +
+                        "                $ref: \"#/components/schemas/SimpleResponse\"\n" +
                         "components:\n" +
                         "  schemas:\n" +
                         "    SimpleResponse:\n" +
@@ -108,7 +108,7 @@ public void testPartiallyAnnotatedMethod() {
                 "          content:\n" +
                 "            '*/*':\n" +
                 "              schema:\n" +
-                "                $ref: '#/components/schemas/SimpleResponse'\n" +
+                "                $ref: \"#/components/schemas/SimpleResponse\"\n" +
                 "components:\n" +
                 "  schemas:\n" +
                 "    SimpleResponse:\n" +
@@ -146,7 +146,7 @@ public void testRequestBody() {
                 "        content:\n" +
                 "          '*/*':\n" +
                 "            schema:\n" +
-                "              $ref: '#/components/schemas/InputValue'\n" +
+                "              $ref: \"#/components/schemas/InputValue\"\n" +
                 "      responses:\n" +
                 "        \"201\":\n" +
                 "          description: value successfully processed\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/RefParameter3074Resource.java
Patch:
@@ -23,12 +23,12 @@ public class RefParameter3074Resource {
             "            content:\n" +
             "              application/json:\n" +
             "                schema:\n" +
-            "                   $ref: '#/components/schemas/Employee'\n" +
+            "                   $ref: \"#/components/schemas/Employee\"\n" +
             "          \"500\":\n" +
             "            content:\n" +
             "              application/json:\n" +
             "                schema:\n" +
-            "                  $ref: '#/components/schemas/Error'\n" +
+            "                  $ref: \"#/components/schemas/Error\"\n" +
             "components:\n" +
             "  schemas:\n" +
             "    Employee:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -518,7 +518,7 @@ public ExtensionUser setUser(
                     "        content:\n" +
                     "          '*/*':\n" +
                     "            schema:\n" +
-                    "              $ref: '#/components/schemas/ExtensionUser'\n" +
+                    "              $ref: \"#/components/schemas/ExtensionUser\"\n" +
                     "        x-extension:\n" +
                     "          name: param\n" +
                     "        x-extension2:\n" +
@@ -529,7 +529,7 @@ public ExtensionUser setUser(
                     "          content:\n" +
                     "            '*/*':\n" +
                     "              schema:\n" +
-                    "                $ref: '#/components/schemas/ExtensionUser'\n" +
+                    "                $ref: \"#/components/schemas/ExtensionUser\"\n" +
                     "              x-content:\n" +
                     "                name: Josh\n" +
                     "              x-content-extensions:\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -126,9 +126,8 @@ public static boolean hasSchemaAnnotation(io.swagger.v3.oas.annotations.media.Sc
                 && schema.patternProperties().length == 0
                 && schema.properties().length == 0
                 && StringUtils.isBlank(schema._const())
-
-
                 && schema.additionalProperties().equals(io.swagger.v3.oas.annotations.media.Schema.AdditionalPropertiesValue.USE_ADDITIONAL_PROPERTIES_ANNOTATION)
+                && schema.additionalPropertiesSchema().equals(Void.class)
                 ) {
             return false;
         }

File: modules/swagger-gradle-plugin/src/main/java/io/swagger/v3/plugins/gradle/tasks/ResolveTask.java
Patch:
@@ -131,7 +131,7 @@ public enum Format {JSON, YAML, JSONANDYAML}
 
     @Input
     @Optional
-    private String openAPIVersion;
+    private Property<String> openAPIVersion = getProject().getObjects().property(String.class);;
 
     @Input
     @Optional

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1163,6 +1163,7 @@ protected Type findJsonValueType(final BeanDescription beanDesc) {
             if (jsonValueMember != null) {
                 return jsonValueMember.getType();
             }
+            return null;
         } catch (Exception e) {
             LOGGER.warn("jackson BeanDescription.findJsonValueAccessor not found, this could lead to inaccurate result, please update jackson to 2.9+");
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1112,7 +1112,7 @@ private Stream<Annotation> extractGenericTypeArgumentAnnotations(BeanPropertyDef
 
     private Stream<Annotation> getRecordComponentAnnotations(BeanPropertyDefinition propDef) {
         try {
-            Method accessor = propDef.getPrimaryMember().getDeclaringClass().getDeclaredMethod(propDef.getName());
+            Method accessor = propDef.getPrimaryMember().getDeclaringClass().getDeclaredMethod(propDef.getPrimaryMember().getName());
             return getGenericTypeArgumentAnnotations(accessor.getAnnotatedReturnType());
         } catch (NoSuchMethodException e) {
             LOGGER.error("Accessor for record component not found");

File: modules/swagger-core/src/main/java/io/swagger/v3/core/converter/ModelConverters.java
Patch:
@@ -81,7 +81,8 @@ public static ModelConverters getInstance(boolean openapi31, Schema.SchemaResolu
         synchronized (ModelConverters.class) {
             if (openapi31) {
                 if (SINGLETON31 == null) {
-                    SINGLETON31 = new ModelConverters(openapi31, Schema.SchemaResolution.DEFAULT);
+                    boolean applySchemaResolution = Boolean.parseBoolean(System.getProperty(Schema.APPLY_SCHEMA_RESOLUTION_PROPERTY, "false")) || Boolean.parseBoolean(System.getenv(Schema.APPLY_SCHEMA_RESOLUTION_PROPERTY));
+                    SINGLETON31 = new ModelConverters(openapi31, applySchemaResolution ? schemaResolution : Schema.SchemaResolution.DEFAULT);
                     init(SINGLETON31);
                 }
                 return SINGLETON31;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -46,6 +46,7 @@ public String toString() {
     }
 
     public static final String SCHEMA_RESOLUTION_PROPERTY = "schema-resolution";
+    public static final String APPLY_SCHEMA_RESOLUTION_PROPERTY = "apply-schema-resolution";
     public enum SchemaResolution {
         @JsonProperty("default")
         DEFAULT("default"),

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -368,7 +368,9 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
             if (xml != null) {
                 model.xml(xml);
             }
-            applyBeanValidatorAnnotations(model, annotatedType.getCtxAnnotations(), null, false);
+            if (!type.isEnumType()){
+                applyBeanValidatorAnnotations(model, annotatedType.getCtxAnnotations(), null, false);
+            }
             resolveSchemaMembers(model, annotatedType, context, next);
             if (resolvedArrayAnnotation != null) {
                 ArraySchema schema = new ArraySchema();

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -849,21 +849,21 @@ public static Optional<Schema> getSchemaFromAnnotation(
             Class<?>[] schemaImplementations = schema.oneOf();
             for (Class<?> schemaImplementation : schemaImplementations) {
                 Schema oneOfSchemaObject = resolveSchemaFromType(schemaImplementation, components, jsonViewAnnotation, openapi31, null, null, context);
-                ((ComposedSchema) schemaObject).addOneOfItem(oneOfSchemaObject);
+                schemaObject.addOneOfItem(oneOfSchemaObject);
             }
         }
         if (schema.anyOf().length > 0) {
             Class<?>[] schemaImplementations = schema.anyOf();
             for (Class<?> schemaImplementation : schemaImplementations) {
                 Schema anyOfSchemaObject = resolveSchemaFromType(schemaImplementation, components, jsonViewAnnotation, openapi31, null, null, context);
-                ((ComposedSchema) schemaObject).addAnyOfItem(anyOfSchemaObject);
+                schemaObject.addAnyOfItem(anyOfSchemaObject);
             }
         }
         if (schema.allOf().length > 0) {
             Class<?>[] schemaImplementations = schema.allOf();
             for (Class<?> schemaImplementation : schemaImplementations) {
                 Schema allOfSchemaObject = resolveSchemaFromType(schemaImplementation, components, jsonViewAnnotation, openapi31, null, null, context);
-                ((ComposedSchema) schemaObject).addAllOfItem(allOfSchemaObject);
+                schemaObject.addAllOfItem(allOfSchemaObject);
             }
         }
         if (schema.additionalProperties().equals(io.swagger.v3.oas.annotations.media.Schema.AdditionalPropertiesValue.TRUE)) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -85,7 +85,7 @@ public OpenAPI filter(OpenAPI openAPI, OpenAPISpecFilter filter, Map<String, Lis
 
         if (filteredOpenAPI.getWebhooks() != null) {
             for (String resourcePath : filteredOpenAPI.getWebhooks().keySet()) {
-                PathItem pathItem = filteredOpenAPI.getPaths().get(resourcePath);
+                PathItem pathItem = filteredOpenAPI.getWebhooks().get(resourcePath);
 
                 PathItem filteredPathItem = filterPathItem(filter, pathItem, resourcePath, params, cookies, headers);
                 PathItem clonedPathItem = cloneFilteredPathItem(filter,filteredPathItem, resourcePath, params, cookies, headers, allowedTags, filteredTags);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -85,7 +85,7 @@ public OpenAPI filter(OpenAPI openAPI, OpenAPISpecFilter filter, Map<String, Lis
 
         if (filteredOpenAPI.getWebhooks() != null) {
             for (String resourcePath : filteredOpenAPI.getWebhooks().keySet()) {
-                PathItem pathItem = filteredOpenAPI.getPaths().get(resourcePath);
+                PathItem pathItem = filteredOpenAPI.getWebhooks().get(resourcePath);
 
                 PathItem filteredPathItem = filterPathItem(filter, pathItem, resourcePath, params, cookies, headers);
                 PathItem clonedPathItem = cloneFilteredPathItem(filter,filteredPathItem, resourcePath, params, cookies, headers, allowedTags, filteredTags);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/OpenAPI30To31.java
Patch:
@@ -10,7 +10,7 @@ public class OpenAPI30To31 {
 
     public void process(OpenAPI openAPI) {
         openAPI.openapi("3.1.0")
-                .jsonSchemaDialect("https://json-schema.org/draft/2020-12/schema")
+                .jsonSchemaDialect("https://spec.openapis.org/oas/3.1/dialect/base")
                 .specVersion(SpecVersion.V31);
 
         removeReservedExtensionsName(openAPI.getExtensions());

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket4679Test.java
Patch:
@@ -15,6 +15,7 @@ public class Ticket4679Test extends SwaggerTestBase{
     public void testCustomSchemaImplementation() {
 
         String expectedYaml = "ModelWithCustomSchemaImplementationInProperty:\n" +
+                "  type: object\n" +
                 "  properties:\n" +
                 "    exampleField:\n" +
                 "      type: integer\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket4679Test.java
Patch:
@@ -15,6 +15,7 @@ public class Ticket4679Test extends SwaggerTestBase{
     public void testCustomSchemaImplementation() {
 
         String expectedYaml = "ModelWithCustomSchemaImplementationInProperty:\n" +
+                "  type: object\n" +
                 "  properties:\n" +
                 "    exampleField:\n" +
                 "      type: integer\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -683,6 +683,9 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                                             !(a instanceof io.swagger.v3.oas.annotations.media.ArraySchema)) {
                                 ctxAnnotations31List.add(a);
                             }
+                            if ((ctxSchema != null) && (!ctxSchema.implementation().equals(Void.class) || StringUtils.isNotEmpty(ctxSchema.type()))) {
+                                    ctxAnnotations31List.add(a);
+                                }
                         }
                         ctxAnnotation31 = ctxAnnotations31List.toArray(new Annotation[ctxAnnotations31List.size()]);
                     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -683,6 +683,9 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                                             !(a instanceof io.swagger.v3.oas.annotations.media.ArraySchema)) {
                                 ctxAnnotations31List.add(a);
                             }
+                            if ((ctxSchema != null) && (!ctxSchema.implementation().equals(Void.class) || StringUtils.isNotEmpty(ctxSchema.type()))) {
+                                    ctxAnnotations31List.add(a);
+                                }
                         }
                         ctxAnnotation31 = ctxAnnotations31List.toArray(new Annotation[ctxAnnotations31List.size()]);
                     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -507,7 +507,7 @@ public static Optional<Schema> getArraySchema(io.swagger.v3.oas.annotations.medi
             arraySchemaObject = new ArraySchema();
         } else {
             if (existingSchema == null) {
-                arraySchemaObject = new JsonSchema();
+                arraySchemaObject = new ArraySchema();
             } else {
                 arraySchemaObject = existingSchema;
             }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/ext/OpenAPIExtensions.java
Patch:
@@ -28,7 +28,7 @@ public static Iterator<OpenAPIExtension> chain() {
 
     static {
         extensions = new ArrayList<>();
-        ServiceLoader<OpenAPIExtension> loader = ServiceLoader.load(OpenAPIExtension.class);
+        ServiceLoader<OpenAPIExtension> loader = ServiceLoader.load(OpenAPIExtension.class, OpenAPIExtensions.class.getClassLoader());
         for (OpenAPIExtension ext : loader) {
             LOGGER.debug("adding extension {}", ext);
             extensions.add(ext);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -308,6 +308,8 @@ private void addSchemaRef(Schema schema, Set<String> referencedDefinitions) {
         if (schema instanceof ArraySchema &&
                 ((ArraySchema) schema).getItems() != null) {
             addSchemaRef(((ArraySchema) schema).getItems(), referencedDefinitions);
+        } else if (schema.getTypes() != null && schema.getTypes().contains("array") && schema.getItems() != null) {
+            addSchemaRef(schema.getItems(), referencedDefinitions);
         } else if (schema instanceof ComposedSchema) {
             ComposedSchema composedSchema = (ComposedSchema) schema;
             if (composedSchema.getAllOf() != null) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -1411,7 +1411,7 @@ public static void setHeaderExplode (Header header, io.swagger.v3.oas.annotation
     }
 
     private static boolean isHeaderExplodable(io.swagger.v3.oas.annotations.headers.Header h, Header header) {
-        io.swagger.v3.oas.annotations.media.Schema schema = h.schema();
+        io.swagger.v3.oas.annotations.media.Schema schema = hasArrayAnnotation(h.array()) ? h.array().schema() : h.schema();
         boolean explode = true;
         if (schema != null) {
             Class implementation = schema.implementation();

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ParameterProcessor.java
Patch:
@@ -234,7 +234,7 @@ public static void setParameterExplode(Parameter parameter, io.swagger.v3.oas.an
     }
 
     private static boolean isExplodable(io.swagger.v3.oas.annotations.Parameter p, Parameter parameter) {
-        io.swagger.v3.oas.annotations.media.Schema schema = p.schema();
+        io.swagger.v3.oas.annotations.media.Schema schema = AnnotationsUtils.hasArrayAnnotation(p.array()) ? p.array().schema() : p.schema();
         boolean explode = true;
         if ("form".equals(parameter.getIn())){
             return true;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -582,6 +582,7 @@ public void testOperationWithResponseMultipleHeadersImplementationSchema() {
                 "            Rate-Limit-Limit:\n" +
                 "              description: The number of allowed requests in the current period\n" +
                 "              style: simple\n" +
+                "              explode: true\n" +
                 "              schema:\n" +
                 "                maxItems: 10\n" +
                 "                minItems: 1\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -1411,7 +1411,7 @@ public static void setHeaderExplode (Header header, io.swagger.v3.oas.annotation
     }
 
     private static boolean isHeaderExplodable(io.swagger.v3.oas.annotations.headers.Header h, Header header) {
-        io.swagger.v3.oas.annotations.media.Schema schema = h.schema();
+        io.swagger.v3.oas.annotations.media.Schema schema = hasArrayAnnotation(h.array()) ? h.array().schema() : h.schema();
         boolean explode = true;
         if (schema != null) {
             Class implementation = schema.implementation();

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ParameterProcessor.java
Patch:
@@ -234,7 +234,7 @@ public static void setParameterExplode(Parameter parameter, io.swagger.v3.oas.an
     }
 
     private static boolean isExplodable(io.swagger.v3.oas.annotations.Parameter p, Parameter parameter) {
-        io.swagger.v3.oas.annotations.media.Schema schema = p.schema();
+        io.swagger.v3.oas.annotations.media.Schema schema = AnnotationsUtils.hasArrayAnnotation(p.array()) ? p.array().schema() : p.schema();
         boolean explode = true;
         if ("form".equals(parameter.getIn())){
             return true;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -582,6 +582,7 @@ public void testOperationWithResponseMultipleHeadersImplementationSchema() {
                 "            Rate-Limit-Limit:\n" +
                 "              description: The number of allowed requests in the current period\n" +
                 "              style: simple\n" +
+                "              explode: true\n" +
                 "              schema:\n" +
                 "                maxItems: 10\n" +
                 "                minItems: 1\n" +

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/ArraySchema.java
Patch:
@@ -39,9 +39,10 @@
      *
      * @since 2.2.12
      *
+     * @deprecated since 2.2.21, use {@link #schema()} instead. Marked for removal in future versions.
      * @return items
      */
-
+    @Deprecated
     Schema items() default @Schema;
 
     /**

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/v31/model/AnnotatedArray.java
Patch:
@@ -12,7 +12,7 @@
         unevaluatedItems = @Schema(
                 types = { "number" }
         ),
-        items = @Schema(
+        schema = @Schema(
                 types = { "string" }
         ),
         prefixItems = {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/AnnotationsUtilsHeadersTest.java
Patch:
@@ -46,7 +46,7 @@ public void extensionsTest(String methodName,
                         .flatMap(response -> Arrays.stream(response.headers())).toArray(Header[]::new);
 
         final Optional<Map<String, io.swagger.v3.oas.models.headers.Header>> optionalMap =
-                AnnotationsUtils.getHeaders(headers, null);
+                AnnotationsUtils.getHeaders(headers, null, null);
 
         Assert.assertEquals(optionalMap, expected);
     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -93,7 +93,7 @@ public static Optional<ApiResponses> getApiResponses(final io.swagger.v3.oas.ann
 
             AnnotationsUtils.getContent(response.content(), classProduces == null ? new String[0] : classProduces.value(),
                     methodProduces == null ? new String[0] : methodProduces.value(), null, components, jsonViewAnnotation, openapi31).ifPresent(apiResponseObject::content);
-            AnnotationsUtils.getHeaders(response.headers(), jsonViewAnnotation).ifPresent(apiResponseObject::headers);
+            AnnotationsUtils.getHeaders(response.headers(), components, jsonViewAnnotation).ifPresent(apiResponseObject::headers);
             if (StringUtils.isNotBlank(apiResponseObject.getDescription()) || apiResponseObject.getContent() != null || apiResponseObject.getHeaders() != null) {
 
                 Map<String, Link> links = AnnotationsUtils.getLinks(response.links());

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/resources/BidimensionalArray.java
Patch:
@@ -19,7 +19,7 @@ public class BidimensionalArray {
 
 
     @ArraySchema(maxItems = 2)
-    @JsonIgnoreProperties({"empty"})
+    @JsonIgnoreProperties({"empty", "first", "last"})
     public static interface Foo<T> extends List<T> {
 
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ReflectionUtils.java
Patch:
@@ -34,7 +34,7 @@ public static Type typeFromString(String type) {
         try {
             return loadClassByName(type);
         } catch (Exception e) {
-            LOGGER.error(String.format("Failed to resolve '%s' into class", type), e);
+            LOGGER.warn(String.format("Failed to resolve '%s' into class", type), e);
         }
         return null;
     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -1200,7 +1200,7 @@ protected Operation parseMethod(
             Content content = resolveEmptyContent(classProduces, methodProduces);
 
             ApiResponse apiResponseObject = new ApiResponse().description(DEFAULT_DESCRIPTION).content(content);
-            operation.setResponses(new ApiResponses()._default(apiResponseObject));
+            operation.setResponses(new ApiResponses().addApiResponse(defaultResponseKey, apiResponseObject));
         }
         if (returnTypeSchema != null) {
             resolveResponseSchemaFromReturnType(operation, classResponses, returnTypeSchema, classProduces, methodProduces);
@@ -1296,8 +1296,8 @@ protected void resolveResponseSchemaFromReturnType(
                             }
                             opResponse.content(content);
                         }
+                        opResponse.getContent().putAll(reresolvedMediaTypes);
                     }
-                    opResponse.getContent().putAll(reresolvedMediaTypes);
                 }
             }
         }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiContext.java
Patch:
@@ -630,6 +630,9 @@ private OpenAPIConfiguration mergeParentConfiguration(OpenAPIConfiguration confi
         if (merged.isConvertToOpenAPI31() == null) {
             merged.setConvertToOpenAPI31(parentConfig.isConvertToOpenAPI31());
         }
+        if (merged.getDefaultResponseCode() == null) {
+            merged.setDefaultResponseCode(parentConfig.getDefaultResponseCode());
+        }
 
         return merged;
     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -62,10 +62,10 @@ public static Optional<RequestBody> getRequestBody(io.swagger.v3.oas.annotations
     }
 
     public static Optional<ApiResponses> getApiResponses(final io.swagger.v3.oas.annotations.responses.ApiResponse[] responses, Produces classProduces, Produces methodProduces, Components components, JsonView jsonViewAnnotation) {
-        return getApiResponses(responses, classProduces, methodProduces, components, jsonViewAnnotation, false);
+        return getApiResponses(responses, classProduces, methodProduces, components, jsonViewAnnotation, false, ApiResponses.DEFAULT);
     }
 
-    public static Optional<ApiResponses> getApiResponses(final io.swagger.v3.oas.annotations.responses.ApiResponse[] responses, Produces classProduces, Produces methodProduces, Components components, JsonView jsonViewAnnotation, boolean openapi31) {
+    public static Optional<ApiResponses> getApiResponses(final io.swagger.v3.oas.annotations.responses.ApiResponse[] responses, Produces classProduces, Produces methodProduces, Components components, JsonView jsonViewAnnotation, boolean openapi31, String defaultResponseKey) {
         if (responses == null) {
             return Optional.empty();
         }
@@ -103,7 +103,7 @@ public static Optional<ApiResponses> getApiResponses(final io.swagger.v3.oas.ann
                 if (StringUtils.isNotBlank(response.responseCode())) {
                     apiResponsesObject.addApiResponse(response.responseCode(), apiResponseObject);
                 } else {
-                    apiResponsesObject._default(apiResponseObject);
+                    apiResponsesObject.addApiResponse(defaultResponseKey, apiResponseObject);
                 }
             }
         }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponses.java
Patch:
@@ -28,15 +28,17 @@ public ApiResponses addApiResponse(String name, ApiResponse item) {
      *
      * @return ApiResponse _default
      **/
-
+    @Deprecated
     public ApiResponse getDefault() {
         return this.get(DEFAULT);
     }
 
+    @Deprecated
     public void setDefault(ApiResponse _default) {
         addApiResponse(DEFAULT, _default);
     }
 
+    @Deprecated
     public ApiResponses _default(ApiResponse _default) {
         setDefault(_default);
         return this;

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/mixin/OpenAPIMixin.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import io.swagger.v3.core.jackson.PathsSerializer;
 import io.swagger.v3.oas.models.PathItem;
@@ -12,6 +13,7 @@
 public abstract class OpenAPIMixin {
 
     @JsonAnyGetter
+    @JsonInclude
     public abstract Map<String, Object> getExtensions();
 
     @JsonAnySetter

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/SwaggerConfiguration.java
Patch:
@@ -307,7 +307,7 @@ public void setSkipResolveAppPath(Boolean skipResolveAppPath) {
      * @since 2.1.15
      */
     public SwaggerConfiguration skipResolveAppPath(Boolean skipResolveAppPath) {
-        setAlwaysResolveAppPath(skipResolveAppPath);
+        setSkipResolveAppPath(skipResolveAppPath);
         return this;
     }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -2879,7 +2879,7 @@ protected boolean hiddenByJsonView(Annotation[] annotations,
             return false;
 
         Class<?>[] filters = jsonView.value();
-        boolean containsJsonViewAnnotation = false;
+        boolean containsJsonViewAnnotation = !type.isIncludePropertiesWithoutJSONView();
         for (Annotation ant : annotations) {
             if (ant instanceof JsonView) {
                 containsJsonViewAnnotation = true;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/DefaultParameterExtension.java
Patch:
@@ -140,7 +140,8 @@ public ResolvedParameter extractParameters(List<Annotation> annotations,
                     components,
                     classConsumes == null ? new String[0] : classConsumes.value(),
                     methodConsumes == null ? new String[0] : methodConsumes.value(),
-                    jsonViewAnnotation);
+                    jsonViewAnnotation,
+                    openapi31);
             if (processedParameter != null) {
                 extractParametersResult.parameters.add(processedParameter);
             }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -2152,7 +2152,7 @@ protected Map<String, Object> resolveExtensions(Annotated a, Annotation[] annota
         if (schema != null &&
                 schema.extensions() != null &&
                 schema.extensions().length > 0) {
-            return AnnotationsUtils.getExtensions(schema.extensions());
+            return AnnotationsUtils.getExtensions(openapi31, schema.extensions());
         }
         return null;
     }
@@ -2346,7 +2346,7 @@ protected Map<String, Object> resolveExtensions(AnnotatedType a, io.swagger.v3.o
         if (arraySchema != null &&
                 arraySchema.extensions() != null &&
                 arraySchema.extensions().length > 0) {
-            return AnnotationsUtils.getExtensions(arraySchema.extensions());
+            return AnnotationsUtils.getExtensions(openapi31, arraySchema.extensions());
         }
         return null;
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ParameterProcessor.java
Patch:
@@ -154,7 +154,7 @@ public static Parameter applyAnnotations(
                 }
 
                 if (p.extensions().length > 0) {
-                    Map<String, Object> extensionMap = AnnotationsUtils.getExtensions(p.extensions());
+                    Map<String, Object> extensionMap = AnnotationsUtils.getExtensions(openapi31, p.extensions());
                     if (extensionMap != null && ! extensionMap.isEmpty()) {
                         extensionMap.forEach(parameter::addExtension);
                     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -42,7 +42,7 @@ public static Optional<RequestBody> getRequestBody(io.swagger.v3.oas.annotations
             isEmpty = false;
         }
         if (requestBody.extensions().length > 0) {
-            Map<String, Object> extensions = AnnotationsUtils.getExtensions(requestBody.extensions());
+            Map<String, Object> extensions = AnnotationsUtils.getExtensions(openapi31, requestBody.extensions());
             if (extensions != null) {
                 extensions.forEach(requestBodyObject::addExtension);
             }
@@ -85,7 +85,7 @@ public static Optional<ApiResponses> getApiResponses(final io.swagger.v3.oas.ann
                 apiResponseObject.setDescription(response.description());
             }
             if (response.extensions().length > 0) {
-                Map<String, Object> extensions = AnnotationsUtils.getExtensions(response.extensions());
+                Map<String, Object> extensions = AnnotationsUtils.getExtensions(openapi31, response.extensions());
                 if (extensions != null) {
                     extensions.forEach(apiResponseObject::addExtension);
                 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -335,7 +335,7 @@ public OpenAPI read(Class<?> cls,
             // OpenApiDefinition extensions
             if (openAPIDefinition.extensions().length > 0) {
                 openAPI.setExtensions(AnnotationsUtils
-                        .getExtensions(openAPIDefinition.extensions()));
+                        .getExtensions(config.isOpenAPI31(), openAPIDefinition.extensions()));
             }
 
         }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiContext.java
Patch:
@@ -612,6 +612,9 @@ private OpenAPIConfiguration mergeParentConfiguration(OpenAPIConfiguration confi
         if (merged.isAlwaysResolveAppPath() == null) {
             merged.setAlwaysResolveAppPath(parentConfig.isAlwaysResolveAppPath());
         }
+        if (merged.isSkipResolveAppPath() == null) {
+            merged.setSkipResolveAppPath(parentConfig.isSkipResolveAppPath());
+        }
         if (merged.isReadAllResources() == null) {
             merged.setReadAllResources(parentConfig.isReadAllResources());
         }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -12,7 +12,6 @@
 import io.swagger.v3.core.jackson.ModelResolver;
 import io.swagger.v3.core.model.ApiDescription;
 import io.swagger.v3.core.util.PrimitiveType;
-import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.jaxrs2.matchers.SerializationMatchers;
 import io.swagger.v3.jaxrs2.petstore31.PetResource;
 import io.swagger.v3.jaxrs2.petstore31.TagResource;
@@ -3463,6 +3462,7 @@ public void testSiblings() {
                 "          type: integer\n" +
                 "          format: int64\n" +
                 "    Pet:\n" +
+                "      description: Pet\n" +
                 "      properties:\n" +
                 "        category:\n" +
                 "          $ref: '#/components/schemas/Category'\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/SiblingsResource.java
Patch:
@@ -1,6 +1,7 @@
 package io.swagger.v3.jaxrs2.resources;
 
 import io.swagger.v3.jaxrs2.resources.siblings.Pet;
+import io.swagger.v3.oas.annotations.media.Schema;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
@@ -12,6 +13,7 @@
 @Path("/test")
 public class SiblingsResource {
     @GET
+    @Schema(description = "Cart Pet")
     public Pet getCart() {
         return null;
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/siblings/Pet.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 
+@Schema(description = "Pet")
 public class Pet {
     private Category category;
 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -1315,7 +1315,7 @@ private void setPathItemOperation(PathItem pathItemObject, String method, Operat
         }
     }
 
-    private void setOperationObjectFromApiOperationAnnotation(
+    protected void setOperationObjectFromApiOperationAnnotation(
             Operation operation,
             io.swagger.v3.oas.annotations.Operation apiOperation,
             Produces methodProduces,

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiScanner.java
Patch:
@@ -3,6 +3,7 @@
 import io.github.classgraph.ClassGraph;
 import io.github.classgraph.ScanResult;
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.Webhooks;
 import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;
 import io.swagger.v3.oas.integration.api.OpenApiScanner;
 import org.apache.commons.lang3.StringUtils;
@@ -70,6 +71,7 @@ public Set<Class<?>> classes() {
         final Set<Class<?>> classes;
         try (ScanResult scanResult = graph.scan()) {
             classes = new HashSet<>(scanResult.getClassesWithAnnotation(OpenAPIDefinition.class.getName()).loadClasses());
+            classes.addAll(new HashSet<>(scanResult.getClassesWithAnnotation(Webhooks.class.getName()).loadClasses()));
         }
 
 

File: modules/swagger-jaxrs2-servlet-initializer-v2/src/main/java/io/swagger/v3/jaxrs2/integration/servlet/SwaggerServletInitializer.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.swagger.v3.jaxrs2.integration.JaxrsOpenApiContextBuilder;
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.Webhooks;
 import io.swagger.v3.oas.integration.IgnoredPackages;
 import io.swagger.v3.oas.integration.OpenApiConfigurationException;
 import io.swagger.v3.oas.integration.SwaggerConfiguration;
@@ -21,7 +22,7 @@
  *
  * @since 2.1.2
  */
-@HandlesTypes({Path.class, OpenAPIDefinition.class, ApplicationPath.class})
+@HandlesTypes({Path.class, OpenAPIDefinition.class, ApplicationPath.class, Webhooks.class})
 public class SwaggerServletInitializer implements ServletContainerInitializer {
 
     static final Set<String> ignored = new HashSet();

File: modules/swagger-jaxrs2-servlet-initializer/src/main/java/io/swagger/v3/jaxrs2/integration/SwaggerServletInitializer.java
Patch:
@@ -1,6 +1,7 @@
 package io.swagger.v3.jaxrs2.integration;
 
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.Webhooks;
 import io.swagger.v3.oas.integration.IgnoredPackages;
 import io.swagger.v3.oas.integration.OpenApiConfigurationException;
 import io.swagger.v3.oas.integration.SwaggerConfiguration;
@@ -21,7 +22,7 @@
  * swagger-jaxrs2-servlet-initializer-v2
  */
 @Deprecated
-@HandlesTypes({Path.class, OpenAPIDefinition.class, ApplicationPath.class})
+@HandlesTypes({Path.class, OpenAPIDefinition.class, ApplicationPath.class, Webhooks.class})
 public class SwaggerServletInitializer implements ServletContainerInitializer {
 
     static final Set<String> ignored = new HashSet();

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsAnnotationScanner.java
Patch:
@@ -4,6 +4,7 @@
 import io.github.classgraph.ScanResult;
 import io.swagger.v3.jaxrs2.integration.api.JaxrsOpenApiScanner;
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.Webhooks;
 import io.swagger.v3.oas.integration.IgnoredPackages;
 import io.swagger.v3.oas.integration.SwaggerConfiguration;
 import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;
@@ -93,6 +94,7 @@ public Set<Class<?>> classes() {
         try (ScanResult scanResult = graph.scan()) {
             classes = new HashSet<>(scanResult.getClassesWithAnnotation(javax.ws.rs.Path.class.getName()).loadClasses());
             classes.addAll(new HashSet<>(scanResult.getClassesWithAnnotation(OpenAPIDefinition.class.getName()).loadClasses()));
+            classes.addAll(new HashSet<>(scanResult.getClassesWithAnnotation(Webhooks.class.getName()).loadClasses()));
             if (Boolean.TRUE.equals(openApiConfiguration.isAlwaysResolveAppPath())) {
                 classes.addAll(new HashSet<>(scanResult.getClassesWithAnnotation(ApplicationPath.class.getName()).loadClasses()));
             }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonNumberValueEnum.java
Patch:
@@ -1,14 +1,16 @@
 package io.swagger.v3.core.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import io.swagger.v3.oas.annotations.Hidden;
 
 /**
  * Enum holds values different from names.  Schema model will derive Integer value from jackson annotation JsonValue on public method.
  */
 public enum JacksonNumberValueEnum {
     FIRST(2),
     SECOND(4),
-    THIRD(6);
+    THIRD(6),
+    @Hidden HIDDEN(-1);
 
     private final int value;
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonNumberValueFieldEnum.java
Patch:
@@ -1,14 +1,16 @@
 package io.swagger.v3.core.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import io.swagger.v3.oas.annotations.Hidden;
 
 /**
  * Enum holds values different from names. Schema model will derive Integer value from jackson annotation JsonValue on private field.
  */
 public enum JacksonNumberValueFieldEnum {
     FIRST(2),
     SECOND(4),
-    THIRD(6);
+    THIRD(6),
+    @Hidden HIDDEN(-1);
 
     @JsonValue
     private final int value;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonPropertyEnum.java
Patch:
@@ -1,10 +1,12 @@
 package io.swagger.v3.core.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.swagger.v3.oas.annotations.Hidden;
 
 public enum JacksonPropertyEnum {
     @JsonProperty("p1") PRIVATE,
     @JsonProperty("p2") PUBLIC,
     SYSTEM,
-    INVITE_ONLY
+    INVITE_ONLY,
+    @Hidden HIDDEN
 }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonValueEnum.java
Patch:
@@ -1,14 +1,16 @@
 package io.swagger.v3.core.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import io.swagger.v3.oas.annotations.Hidden;
 
 /**
  * Enum holds values different from names. Schema model will derive String value from jackson annotation JsonValue on public method.
  */
 public enum JacksonValueEnum {
     FIRST("one"),
     SECOND("two"),
-    THIRD("three");
+    THIRD("three"),
+    @Hidden HIDDEN("hidden");
 
     private final String value;
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonValueFieldEnum.java
Patch:
@@ -1,14 +1,16 @@
 package io.swagger.v3.core.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import io.swagger.v3.oas.annotations.Hidden;
 
 /**
  * Enum holds values different from names.  Schema model will derive String value from jackson annotation JsonValue on private field.
  */
 public enum JacksonValueFieldEnum {
     FIRST("one"),
     SECOND("two"),
-    THIRD("three");
+    THIRD("three"),
+    @Hidden HIDDEN("hidden");
 
     @JsonValue
     private final String value;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonValuePrivateEnum.java
Patch:
@@ -1,14 +1,16 @@
 package io.swagger.v3.core.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonValue;
+import io.swagger.v3.oas.annotations.Hidden;
 
 /**
  * Enum holds values different from names.  Schema model will derive String value from jackson annotation JsonValue on private method.
  */
 public enum JacksonValuePrivateEnum {
     FIRST("one"),
     SECOND("two"),
-    THIRD("three");
+    THIRD("three"),
+    @Hidden HIDDEN("hidden");
 
     private final String value;
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -108,7 +108,7 @@ public static boolean hasSchemaAnnotation(io.swagger.v3.oas.annotations.media.Sc
                 && schema.unevaluatedProperties().equals(Void.class)
                 && schema.types().length == 0
                 && schema.exclusiveMinimumValue() == 0
-                && schema.exclusiveMaximumValue() == Integer.MAX_VALUE
+                && schema.exclusiveMaximumValue() == 0
                 && StringUtils.isBlank(schema.$id())
                 && StringUtils.isBlank(schema.$schema())
                 && StringUtils.isBlank(schema.$anchor())

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/info/Info.java
Patch:
@@ -70,10 +70,10 @@
     Extension[] extensions() default {};
 
     /**
-     * A summary of application.
+     * A short API summary.
      *
      * @since 2.2.1 / OpenAPI 3.1
-     * @return the application's summary
+     * @return API summary
      **/
     @OpenAPI31
     String summary() default "";

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/info/License.java
Patch:
@@ -11,7 +11,7 @@
  * The annotation may be used in {@link Info#license()} to define a license for the OpenAPI spec.
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#licenseObject">License (OpenAPI 3.0 pecification)</a>
- * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.1.0.md#licenseObject">License (OpenAPI 3.1 specification)</a>
+ * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.1.0/versions/3.1.0.md#licenseObject">License (OpenAPI 3.1 specification)</a>
  * @see io.swagger.v3.oas.annotations.OpenAPIDefinition
  * @see Info
  **/
@@ -28,7 +28,7 @@
     /**
      * A URL to the license used for the API. MUST be in the format of a URL.
      *
-     * @return the URL of the license
+     * @return URL to the license
      **/
     String url() default "";
 

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/ArraySchema.java
Patch:
@@ -37,7 +37,6 @@
     /**
      * The schemas of the items in the array
      *
-     * @since 2.2.1 / OpenAPI 3.1
      * @return items
      */
     @OpenAPI31

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/DependentRequired.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @see Schema
  *
- * @since 2.1.8
+ * @since 2.2.1 / OpenAPI 3.1
  **/
 @Target({FIELD, METHOD, PARAMETER, TYPE, ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/DependentRequiredMap.java
Patch:
@@ -16,6 +16,7 @@
 /**
  * Container for repeatable {@link DependentRequired} annotation
  *
+ * @since 2.2.1 / OpenAPI 3.1
  * @see DependentRequired
  */
 @Target({FIELD, METHOD, PARAMETER, TYPE, ANNOTATION_TYPE})

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/DependentSchema.java
Patch:
@@ -19,7 +19,7 @@
  *
  * @see Schema
  *
- * @since 2.1.8
+ * @since 2.2.1 / OpenAPI 3.1
  **/
 @Target({FIELD, METHOD, PARAMETER, TYPE, ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/BeanValidationsModel.java
Patch:
@@ -37,7 +37,7 @@ public class BeanValidationsModel {
     protected Integer birthYear;
 
     @Size(min = 2, max = 10)
-    private List<String> items;
+    private List<@Size(min = 3, max = 4) String> items;
 
     private Optional<@Size(min= 1, max=10) String> optionalValue;
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/BeanValidatorTest.java
Patch:
@@ -43,6 +43,8 @@ public void readBeanValidatorTest() {
         final ArraySchema items = (ArraySchema) properties.get("items");
         Assert.assertEquals((int) items.getMinItems(), 2);
         Assert.assertEquals((int) items.getMaxItems(), 10);
+        Assert.assertEquals((int) items.getItems().getMinLength(), 3);
+        Assert.assertEquals((int) items.getItems().getMaxLength(), 4);
 
         final StringSchema optionalValue = (StringSchema) properties.get("optionalValue");
         Assert.assertEquals((int) optionalValue.getMinLength(), 1);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -804,7 +804,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                     .collect(Collectors.toList());
             allOfFiltered.forEach(c -> {
                 Schema allOfRef = context.resolve(new AnnotatedType().type(c).jsonViewAnnotation(annotatedType.getJsonViewAnnotation()));
-                Schema refSchema = new Schema().$ref(allOfRef.getName());
+                Schema refSchema = new Schema().$ref(Components.COMPONENTS_SCHEMAS_REF + allOfRef.getName());
                 if (StringUtils.isBlank(allOfRef.getName())) {
                     refSchema = allOfRef;
                 }
@@ -826,7 +826,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
             anyOfFiltered.forEach(c -> {
                 Schema anyOfRef = context.resolve(new AnnotatedType().type(c).jsonViewAnnotation(annotatedType.getJsonViewAnnotation()));
                 if (StringUtils.isNotBlank(anyOfRef.getName())) {
-                    composedSchema.addAnyOfItem(new Schema().$ref(anyOfRef.getName()));
+                    composedSchema.addAnyOfItem(new Schema().$ref(Components.COMPONENTS_SCHEMAS_REF + anyOfRef.getName()));
                 } else {
                     composedSchema.addAnyOfItem(anyOfRef);
                 }
@@ -848,7 +848,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                     if (StringUtils.isBlank(oneOfRef.getName())) {
                         composedSchema.addOneOfItem(oneOfRef);
                     } else {
-                        composedSchema.addOneOfItem(new Schema().$ref(oneOfRef.getName()));
+                        composedSchema.addOneOfItem(new Schema().$ref(Components.COMPONENTS_SCHEMAS_REF + oneOfRef.getName()));
                     }
                     // remove shared properties defined in the parent
                     if (isSubtype(beanDesc.getClassInfo(), c)) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -188,7 +188,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
             if (!annotatedType.isSkipSchemaName() && resolvedSchemaAnnotation != null && !resolvedSchemaAnnotation.name().isEmpty()) {
                 name = resolvedSchemaAnnotation.name();
             }
-            if (StringUtils.isBlank(name) && !ReflectionUtils.isSystemType(type)) {
+            if (StringUtils.isBlank(name) && (type.isEnumType() || !ReflectionUtils.isSystemType(type))) {
                 name = _typeName(type, beanDesc);
             }
         }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/links/LinkParameter.java
Patch:
@@ -7,7 +7,6 @@
 /**
  * LinkParameter
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#linkOParametersbject"
  */
 
 public class LinkParameter {

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -1,7 +1,6 @@
 package io.swagger.v3.oas.models.media;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.sun.org.apache.xpath.internal.operations.Bool;
 import io.swagger.v3.oas.models.annotations.OpenAPI30;
 import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.Components;
@@ -49,6 +48,7 @@ public class Schema<T> {
     private Integer maxProperties = null;
     private Integer minProperties = null;
     private List<String> required = null;
+    @OpenAPI30
     private String type = null;
     private Schema not = null;
     private Map<String, Schema> properties = null;

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ReferenceTypeUtils.java
Patch:
@@ -24,8 +24,10 @@ public static boolean _isReferenceType(JavaType jtype) {
      */
     public static AnnotatedType unwrapReference(AnnotatedType type) {
 
-        if (type == null || type.getType() == null) {
+        if (type == null) {
             return type;
+        } else if (type.getType() == null) {
+            return null;
         }
         try {
             final JavaType jtype;

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ReferenceTypeUtils.java
Patch:
@@ -24,7 +24,7 @@ public static boolean _isReferenceType(JavaType jtype) {
      */
     public static AnnotatedType unwrapReference(AnnotatedType type) {
 
-        if (type == null) {
+        if (type == null || type.getType() == null) {
             return type;
         }
         try {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ReferenceTypeUtils.java
Patch:
@@ -13,8 +13,8 @@ public abstract class ReferenceTypeUtils {
 
     public static boolean _isReferenceType(JavaType jtype) {
 
-        return Arrays.asList("com.google.common.base.Optional", "java.util.Optional", "java.util.concurrent.atomic.AtomicReference")
-                .contains(jtype.getRawClass().getCanonicalName());
+        return Arrays.asList("com.google.common.base.Optional", "java.util.Optional")
+                .contains(jtype.getRawClass().getCanonicalName()) || jtype.isReferenceType();
     }
 
     /**

File: modules/swagger-core/src/main/java/io/swagger/v3/core/converter/ModelConverterContextImpl.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.core.converter;
 
-import io.swagger.v3.core.util.OptionalUtils;
+import io.swagger.v3.core.util.ReferenceTypeUtils;
 import io.swagger.v3.oas.models.media.Schema;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
@@ -76,7 +76,7 @@ public Map<String, Schema> getDefinedModels() {
     @Override
     public Schema resolve(AnnotatedType type) {
 
-        AnnotatedType aType = OptionalUtils.unwrapOptional(type);
+        AnnotatedType aType = ReferenceTypeUtils.unwrapReference(type);
         if (aType != null) {
             return resolve(aType);
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -34,7 +34,7 @@
 import io.swagger.v3.core.util.Constants;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.ObjectMapperFactory;
-import io.swagger.v3.core.util.OptionalUtils;
+import io.swagger.v3.core.util.ReferenceTypeUtils;
 import io.swagger.v3.core.util.PrimitiveType;
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.Hidden;
@@ -497,7 +497,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                     .type("object")
                     .name(name);
         } else {
-            AnnotatedType aType = OptionalUtils.unwrapOptional(annotatedType);
+            AnnotatedType aType = ReferenceTypeUtils.unwrapReference(annotatedType);
             if (aType != null) {
                 model = context.resolve(aType);
                 return model;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonNumberValueEnum.java
Patch:
@@ -2,6 +2,9 @@
 
 import com.fasterxml.jackson.annotation.JsonValue;
 
+/**
+ * Enum holds values different from names.  Schema model will derive Integer value from jackson annotation JsonValue on public method.
+ */
 public enum JacksonNumberValueEnum {
     FIRST(2),
     SECOND(4),

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/JacksonValueEnum.java
Patch:
@@ -2,6 +2,9 @@
 
 import com.fasterxml.jackson.annotation.JsonValue;
 
+/**
+ * Enum holds values different from names. Schema model will derive String value from jackson annotation JsonValue on public method.
+ */
 public enum JacksonValueEnum {
     FIRST("one"),
     SECOND("two"),

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Schema.java
Patch:
@@ -164,9 +164,9 @@
     /**
      * Mandates that the annotated item is required or not.
      *
-     * @deprecated As of 2.3.1, replaced by {@link #requiredMode()}
+     * @deprecated since 2.2.5, replaced by {@link #requiredMode()}
      *
-     * @return whether or not this schema is required
+     * @return whether this schema is required
      **/
     @Deprecated
     boolean required() default false;
@@ -178,6 +178,7 @@
      * RequiredMode.REQUIRED: will force the item to be considered as required regardless of heuristics.
      * RequiredMode.NOT_REQUIRED: will force the item to be considered as not required regardless of heuristics.
      *
+     * @since 2.2.5
      * @return the requiredMode for this schema (property)
      *
      */

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/mixin/DateSchemaMixin.java
Patch:
@@ -15,4 +15,7 @@ public abstract class DateSchemaMixin {
 
     @JsonIgnore
     public abstract Map<String, Object> getJsonSchema();
+
+    @JsonIgnore
+    public abstract Boolean getBooleanSchemaValue();
 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/mixin/Schema31Mixin.java
Patch:
@@ -59,6 +59,9 @@ public abstract class Schema31Mixin {
     @JsonIgnore
     public abstract Object getJsonSchemaImpl();
 
+    @JsonIgnore
+    public abstract Boolean getBooleanSchemaValue();
+
     public static class TypeSerializer extends JsonSerializer<Set<String>> {
 
         @Override

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/mixin/SchemaMixin.java
Patch:
@@ -108,4 +108,7 @@ public abstract class SchemaMixin {
 
     @JsonIgnore
     public abstract Object getConst();
+
+    @JsonIgnore
+    public abstract Boolean getBooleanSchemaValue();
 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ModelDeserializer.java
Patch:
@@ -125,6 +125,9 @@ private Schema deserializeObjectSchema(JsonNode node) {
     }
 
     private Schema deserializeJsonSchema(JsonNode node) {
+        if (node.isBoolean()) {
+            return new Schema().booleanSchemaValue(node.booleanValue());
+        }
         JsonNode additionalProperties = node.get("additionalProperties");
         JsonNode type = node.get("type");
         Schema schema = null;

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -867,7 +867,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
             StringUtils.isNotBlank(model.getName()))
         {
             if (context.getDefinedModels().containsKey(model.getName())) {
-                model = new Schema().$ref(constructRef(model.getName()));
+                model = new Schema().name(model.getName()).$ref(constructRef(model.getName()));
             }
         } else if (model != null && model.get$ref() != null) {
             model = new Schema().$ref(StringUtils.isNotEmpty(model.get$ref()) ? model.get$ref() : model.getName());

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Components.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.callbacks.Callback;
 import io.swagger.v3.oas.models.examples.Example;
 import io.swagger.v3.oas.models.headers.Header;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/ExternalDocumentation.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.v3.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.security.SecurityRequirement;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Operation.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.callbacks.Callback;
 import io.swagger.v3.oas.models.parameters.Parameter;
 import io.swagger.v3.oas.models.parameters.RequestBody;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/PathItem.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.parameters.Parameter;
 import io.swagger.v3.oas.models.servers.Server;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Paths.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.LinkedHashMap;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/annotations/OpenAPI30.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.v3.oas.annotations;
+package io.swagger.v3.oas.models.annotations;
 
 import java.lang.annotation.Inherited;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/annotations/OpenAPI31.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.v3.oas.annotations;
+package io.swagger.v3.oas.models.annotations;
 
 import java.lang.annotation.Inherited;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/callbacks/Callback.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.callbacks;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.PathItem;
 
 import java.util.LinkedHashMap;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/examples/Example.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.examples;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 /**
  * Example

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/info/Contact.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.info;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/info/Info.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.info;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/info/License.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.info;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/links/Link.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.links;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.headers.Header;
 import io.swagger.v3.oas.models.servers.Server;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/links/LinkParameter.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.links;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Discriminator.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.media;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Encoding.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.media;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.headers.Header;
 
 import java.util.LinkedHashMap;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/EncodingProperty.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.media;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.headers.Header;
 
 import java.util.LinkedHashMap;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/MediaType.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.media;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.examples.Example;
 
 import java.util.LinkedHashMap;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -1,8 +1,8 @@
 package io.swagger.v3.oas.models.media;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import io.swagger.v3.oas.annotations.OpenAPI30;
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI30;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.ExternalDocumentation;
 import io.swagger.v3.oas.models.SpecVersion;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/XML.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.media;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/Parameter.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.parameters;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.examples.Example;
 import io.swagger.v3.oas.models.media.Content;
 import io.swagger.v3.oas.models.media.Schema;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/RequestBody.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.parameters;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.media.Content;
 
 /**

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponse.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.responses;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.headers.Header;
 import io.swagger.v3.oas.models.links.Link;
 import io.swagger.v3.oas.models.media.Content;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponses.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.responses;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.LinkedHashMap;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/security/OAuthFlow.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.security;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/security/OAuthFlows.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.security;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/security/SecurityScheme.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.security;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 /**
  * SecurityScheme

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/servers/Server.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.servers;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/servers/ServerVariable.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.servers;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 
 import java.util.ArrayList;
 import java.util.List;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/tags/Tag.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.v3.oas.models.tags;
 
-import io.swagger.v3.oas.annotations.OpenAPI31;
+import io.swagger.v3.oas.models.annotations.OpenAPI31;
 import io.swagger.v3.oas.models.ExternalDocumentation;
 
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -1965,7 +1965,8 @@ public boolean equals(java.lang.Object o) {
                 Objects.equals(this.dependentSchemas, schema.dependentSchemas) &&
                 Objects.equals(this.$comment, schema.$comment) &&
                 Objects.equals(this.examples, schema.examples) &&
-                Objects.equals(this.prefixItems, schema.prefixItems)
+                Objects.equals(this.prefixItems, schema.prefixItems) &&
+                Objects.equals(this.items, schema.items)
 
                 ;
     }
@@ -1979,7 +1980,7 @@ public int hashCode() {
                 discriminator, _enum, _default, patternProperties, $id, $anchor, $schema, types, allOf, anyOf, oneOf, _const,
                 contentEncoding, contentMediaType, contentSchema, propertyNames, unevaluatedProperties, maxContains,
                 minContains, additionalItems, unevaluatedItems, _if, _else, then, dependentRequired, dependentSchemas,
-                $comment, examples, prefixItems);
+                $comment, examples, prefixItems, items);
     }
 
     public java.util.Map<String, Object> getExtensions() {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1428,7 +1428,7 @@ private boolean resolveSubtypes(Schema model, BeanDescription bean, ModelConvert
             } else {
                 composedSchema = (ComposedSchema) subtypeModel;
             }
-            Schema refSchema = new Schema().$ref(model.getName());
+            Schema refSchema = new Schema().$ref(Components.COMPONENTS_SCHEMAS_REF + model.getName());
             // allOf could have already being added during type resolving when @Schema(allOf..) is declared
             if (composedSchema.getAllOf() == null || !composedSchema.getAllOf().contains(refSchema)) {
                 composedSchema.addAllOfItem(refSchema);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/mixin/InfoMixin.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.Map;
 
-public abstract class LinkMixin {
+public abstract class InfoMixin {
 
     @JsonAnyGetter
     public abstract Map<String, Object> getExtensions();

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/mixin/Schema31Mixin.java
Patch:
@@ -52,7 +52,7 @@ public abstract class Schema31Mixin {
     @JsonIgnore
     public abstract boolean getExampleSetFlag();
 
-    @JsonInclude(JsonInclude.Include.CUSTOM)
+    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
     public abstract Object getExample();
 
     @JsonIgnore

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ApiResponsesDeserializer.java
Patch:
@@ -30,12 +30,12 @@ public ApiResponses deserialize(JsonParser jp, DeserializationContext ctxt)
         }
         ApiResponses result = new ApiResponses();
         JsonNode node = jp.getCodec().readTree(jp);
-        ObjectNode objectNode = (ObjectNode)node;
+        ObjectNode objectNode = (ObjectNode) node;
         Map<String, Object> extensions = new LinkedHashMap<>();
         for (Iterator<String> it = objectNode.fieldNames(); it.hasNext(); ) {
             String childName = it.next();
             JsonNode child = objectNode.get(childName);
-            // if name start with `x-` consider it an extesion
+            // if name start with `x-` consider it an extension
             if (childName.startsWith("x-")) {
                 extensions.put(childName, mapper.convertValue(child, Object.class));
             } else {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/SwaggerSerializerTest.java
Patch:
@@ -105,7 +105,7 @@ public void convertSpec() throws IOException {
                 .addLink("myLink", new Link()
                         .description("a link")
                         .operationId("theLinkedOperationId")
-                        .addParameters("userId", "gah")
+                        .addParameter("userId", "gah")
                 )
                 .content(new Content()
                         .addMediaType("application/json", new MediaType()

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Components.java
Patch:
@@ -326,7 +326,7 @@ public Components pathItems(Map<String, PathItem> pathItems) {
     }
 
     @OpenAPI31
-    public Components addPathItems(String key, PathItem pathItem) {
+    public Components addPathItem(String key, PathItem pathItem) {
         if (this.pathItems == null) {
             this.pathItems = new LinkedHashMap<>();
         }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java
Patch:
@@ -401,7 +401,7 @@ public String toString() {
         sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
         sb.append("    components: ").append(toIndentedString(components)).append("\n");
         if (specVersion == SpecVersion.V31) sb.append("    webhooks: ").append(toIndentedString(webhooks)).append("\n");
-        sb.append("    jsonSchemaDialect: ").append(toIndentedString(jsonSchemaDialect)).append("\n");
+        if (specVersion == SpecVersion.V31) sb.append("    jsonSchemaDialect: ").append(toIndentedString(jsonSchemaDialect)).append("\n");
         sb.append("}");
         return sb.toString();
     }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Operation.java
Patch:
@@ -238,7 +238,7 @@ public Operation callbacks(Map<String, Callback> callbacks) {
         return this;
     }
 
-    public Operation addCallbacks(String key, Callback callback) {
+    public Operation addCallback(String key, Callback callback) {
         if (this.callbacks == null) {
             this.callbacks = new LinkedHashMap<>();
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ObjectMapperFactory.java
Patch:
@@ -159,7 +159,6 @@ public JsonSerializer<?> modifySerializer(
         sourceMixins.put(Example.class, ExampleMixin.class);
         sourceMixins.put(ExternalDocumentation.class, ExtensionsMixin.class);
         sourceMixins.put(Header.class, ExtensionsMixin.class);
-        sourceMixins.put(License.class, ExtensionsMixin.class);
         sourceMixins.put(Link.class, ExtensionsMixin.class);
         sourceMixins.put(LinkParameter.class, ExtensionsMixin.class);
         sourceMixins.put(MediaType.class, MediaTypeMixin.class);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ObjectMapperFactory.java
Patch:
@@ -159,7 +159,6 @@ public JsonSerializer<?> modifySerializer(
         sourceMixins.put(Example.class, ExampleMixin.class);
         sourceMixins.put(ExternalDocumentation.class, ExtensionsMixin.class);
         sourceMixins.put(Header.class, ExtensionsMixin.class);
-        sourceMixins.put(Info.class, ExtensionsMixin.class);
         sourceMixins.put(License.class, ExtensionsMixin.class);
         sourceMixins.put(Link.class, ExtensionsMixin.class);
         sourceMixins.put(LinkParameter.class, ExtensionsMixin.class);
@@ -188,6 +187,7 @@ public JsonSerializer<?> modifySerializer(
             sourceMixins.put(OpenAPI.class, OpenAPIMixin.class);
             sourceMixins.put(Discriminator.class, DiscriminatorMixin.class);
         } else {
+            sourceMixins.put(Info.class, ExtensionsMixin.class);
             sourceMixins.put(Schema.class, Schema31Mixin.class);
             sourceMixins.put(DateSchema.class, DateSchemaMixin.class);
             sourceMixins.put(Discriminator.class, Discriminator31Mixin.class);

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/SwaggerSerializerTest.java
Patch:
@@ -102,10 +102,10 @@ public void convertSpec() throws IOException {
 
         final ApiResponse errorResponse = new ApiResponse()
                 .description("error response")
-                .link("myLink", new Link()
+                .addLink("myLink", new Link()
                         .description("a link")
                         .operationId("theLinkedOperationId")
-                        .parameters("userId", "gah")
+                        .addParameters("userId", "gah")
                 )
                 .content(new Content()
                         .addMediaType("application/json", new MediaType()

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponse.java
Patch:
@@ -110,15 +110,15 @@ public ApiResponse content(Content content) {
      * @return Link links
      **/
 
-    public java.util.Map<String, Link> getLinks() {
+    public Map<String, Link> getLinks() {
         return links;
     }
 
     public void setLinks(Map<String, Link> links) {
         this.links = links;
     }
 
-    public ApiResponse link(Map<String, Link> links) {
+    public ApiResponse links(Map<String, Link> links) {
         this.links = links;
         return this;
     }

File: modules/swagger-models/src/test/java/io/swagger/test/SimpleBuilderTest.java
Patch:
@@ -112,7 +112,7 @@ public void testBuilder() throws Exception {
                                                                 new MediaType().schema(new Schema()
                                                                         .$ref("#/components/schemas/Address")))
                                                 )
-                                                .link("funky", new Link()
+                                                .addLink("funky", new Link()
                                                         .operationId("getFunky")))
                                 )
                         )

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ReflectionUtils.java
Patch:
@@ -385,7 +385,7 @@ public static Annotation[][] getParameterAnnotations(Method method) {
         Annotation[][] methodAnnotations = method.getParameterAnnotations();
         Method overriddenmethod = getOverriddenMethod(method);
 
-        if (overriddenmethod != null) {
+        while (overriddenmethod != null) {
             Annotation[][] overriddenAnnotations = overriddenmethod
                     .getParameterAnnotations();
 
@@ -404,6 +404,8 @@ public static Annotation[][] getParameterAnnotations(Method method) {
                 }
 
             }
+
+            overriddenmethod = getOverriddenMethod(overriddenmethod);
         }
         return methodAnnotations;
     }

File: modules/swagger-gradle-plugin/src/test/java/io/swagger/v3/plugins/gradle/SwaggerResolveTest.java
Patch:
@@ -85,7 +85,7 @@ public void testSwaggerResolveTask() throws IOException {
                 "    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version:'2.1.10-SNAPSHOT'\n" +
                 "    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.1'\n" +
                 "    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'\n" +
-                "    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version:'2.14.0'\n" +
+                "    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version:'2.27.2'\n" +
                 "    testCompile 'junit:junit:4+'\n" +
                 "\n" +
                 "\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -376,6 +376,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                     .resolveAsRef(annotatedType.isResolveAsRef())
                     .jsonViewAnnotation(annotatedType.getJsonViewAnnotation())
                     .propertyName(annotatedType.getPropertyName())
+                    .ctxAnnotations(annotatedType.getCtxAnnotations())
                     .skipOverride(true);
             return context.resolve(aType);
         }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -130,7 +130,7 @@ public void maintainPropertyNames() {
     public void serializeParameterizedType() {
         final Map<String, Schema> schemas = readAll(Employee.class);
 
-        final Schema employee = (Schema) schemas.get("employee");
+        final Schema employee = (Schema) schemas.get("employee").getProperties().get("employee");
         final Map<String, Schema> props = employee.getProperties();
         final Iterator<String> et = props.keySet().iterator();
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2915Test.java
Patch:
@@ -5,7 +5,6 @@
 import io.swagger.v3.core.jackson.ModelResolver;
 import io.swagger.v3.core.matchers.SerializationMatchers;
 import io.swagger.v3.core.resolving.resources.TestObject2915;
-import io.swagger.v3.core.resolving.resources.Ticket2862Model;
 import io.swagger.v3.oas.models.media.Schema;
 import org.testng.annotations.Test;
 

File: modules/swagger-maven-plugin/src/main/java/io/swagger/v3/plugin/maven/SwaggerMojo.java
Patch:
@@ -120,10 +120,12 @@ public void execute() throws MojoExecutionException, MojoFailureException {
             if (openapiJson != null) {
                 path = Paths.get(outputPath, outputFileName + ".json");
                 Files.write(path, openapiJson.getBytes(Charset.forName(encoding)));
+                getLog().info( "JSON output: " + path.toFile().getCanonicalPath());
             }
             if (openapiYaml != null) {
                 path = Paths.get(outputPath, outputFileName + ".yaml");
                 Files.write(path, openapiYaml.getBytes(Charset.forName(encoding)));
+                getLog().info( "YAML output: " + path.toFile().getCanonicalPath());
             }
 
         } catch (OpenApiConfigurationException e) {

File: modules/swagger-maven-plugin/src/main/java/io/swagger/v3/plugin/maven/SwaggerMojo.java
Patch:
@@ -120,10 +120,12 @@ public void execute() throws MojoExecutionException, MojoFailureException {
             if (openapiJson != null) {
                 path = Paths.get(outputPath, outputFileName + ".json");
                 Files.write(path, openapiJson.getBytes(Charset.forName(encoding)));
+                getLog().info( "JSON output: " + path.toFile().getCanonicalPath());
             }
             if (openapiYaml != null) {
                 path = Paths.get(outputPath, outputFileName + ".yaml");
                 Files.write(path, openapiYaml.getBytes(Charset.forName(encoding)));
+                getLog().info( "YAML output: " + path.toFile().getCanonicalPath());
             }
 
         } catch (OpenApiConfigurationException e) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -39,6 +39,7 @@
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.annotations.media.DiscriminatorMapping;
+import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.ExternalDocumentation;
 import io.swagger.v3.oas.models.media.ArraySchema;
 import io.swagger.v3.oas.models.media.ComposedSchema;
@@ -340,7 +341,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                 // Store off the ref and add the enum as a top-level model
                 context.defineModel(name, model, annotatedType, null);
                 // Return the model as a ref only property
-                model = new Schema().$ref(name);
+                model = new Schema().$ref(Components.COMPONENTS_SCHEMAS_REF + name);
             }
             return model;
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -53,7 +53,7 @@
 public abstract class AnnotationsUtils {
 
     private static Logger LOGGER = LoggerFactory.getLogger(AnnotationsUtils.class);
-    public static final String COMPONENTS_REF = "#/components/schemas/";
+    public static final String COMPONENTS_REF = Components.COMPONENTS_SCHEMAS_REF;
 
     public static boolean hasSchemaAnnotation(io.swagger.v3.oas.annotations.media.Schema schema) {
         if (schema == null) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/RefUtils.java
Patch:
@@ -1,13 +1,14 @@
 package io.swagger.v3.core.util;
 
+import io.swagger.v3.oas.models.Components;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 
 public class RefUtils {
 
     public static String constructRef(String simpleRef) {
-        return "#/components/schemas/" + simpleRef;
+        return Components.COMPONENTS_SCHEMAS_REF + simpleRef;
     }
 
     public static String constructRef(String simpleRef, String prefix) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -16,7 +16,7 @@
 
 public class OperationParser {
 
-    public static final String COMPONENTS_REF = "#/components/schemas/";
+    public static final String COMPONENTS_REF = Components.COMPONENTS_SCHEMAS_REF;
 
     public static Optional<RequestBody> getRequestBody(io.swagger.v3.oas.annotations.parameters.RequestBody requestBody, Consumes classConsumes, Consumes methodConsumes, Components components, JsonView jsonViewAnnotation) {
         if (requestBody == null) {

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -17,6 +17,7 @@
 package io.swagger.v3.oas.models.media;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.ExternalDocumentation;
 
 import java.math.BigDecimal;
@@ -608,7 +609,7 @@ public Schema format(String format) {
 
     public void set$ref(String $ref) {
         if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
-            $ref = "#/components/schemas/" + $ref;
+            $ref = Components.COMPONENTS_SCHEMAS_REF + $ref;
         }
         this.$ref = $ref;
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -39,6 +39,7 @@
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.annotations.media.DiscriminatorMapping;
+import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.ExternalDocumentation;
 import io.swagger.v3.oas.models.media.ArraySchema;
 import io.swagger.v3.oas.models.media.ComposedSchema;
@@ -340,7 +341,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                 // Store off the ref and add the enum as a top-level model
                 context.defineModel(name, model, annotatedType, null);
                 // Return the model as a ref only property
-                model = new Schema().$ref(name);
+                model = new Schema().$ref(Components.COMPONENTS_SCHEMAS_REF + name);
             }
             return model;
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -53,7 +53,7 @@
 public abstract class AnnotationsUtils {
 
     private static Logger LOGGER = LoggerFactory.getLogger(AnnotationsUtils.class);
-    public static final String COMPONENTS_REF = "#/components/schemas/";
+    public static final String COMPONENTS_REF = Components.COMPONENTS_SCHEMAS_REF;
 
     public static boolean hasSchemaAnnotation(io.swagger.v3.oas.annotations.media.Schema schema) {
         if (schema == null) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/RefUtils.java
Patch:
@@ -1,13 +1,14 @@
 package io.swagger.v3.core.util;
 
+import io.swagger.v3.oas.models.Components;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 
 public class RefUtils {
 
     public static String constructRef(String simpleRef) {
-        return "#/components/schemas/" + simpleRef;
+        return Components.COMPONENTS_SCHEMAS_REF + simpleRef;
     }
 
     public static String constructRef(String simpleRef, String prefix) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -16,7 +16,7 @@
 
 public class OperationParser {
 
-    public static final String COMPONENTS_REF = "#/components/schemas/";
+    public static final String COMPONENTS_REF = Components.COMPONENTS_SCHEMAS_REF;
 
     public static Optional<RequestBody> getRequestBody(io.swagger.v3.oas.annotations.parameters.RequestBody requestBody, Consumes classConsumes, Consumes methodConsumes, Components components, JsonView jsonViewAnnotation) {
         if (requestBody == null) {

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -17,6 +17,7 @@
 package io.swagger.v3.oas.models.media;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.ExternalDocumentation;
 
 import java.math.BigDecimal;
@@ -608,7 +609,7 @@ public Schema format(String format) {
 
     public void set$ref(String $ref) {
         if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
-            $ref = "#/components/schemas/" + $ref;
+            $ref = Components.COMPONENTS_SCHEMAS_REF + $ref;
         }
         this.$ref = $ref;
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/OptionalUtils.java
Patch:
@@ -42,7 +42,7 @@ public static AnnotatedType unwrapOptional(AnnotatedType type) {
                         .name(type.getName())
                         .parent(type.getParent())
                         .jsonUnwrappedHandler(type.getJsonUnwrappedHandler())
-                        .skipOverride(true)
+                        .skipOverride(type.isSkipOverride())
                         .schemaProperty(type.isSchemaProperty())
                         .ctxAnnotations(type.getCtxAnnotations())
                         .resolveAsRef(type.isResolveAsRef())

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -2248,7 +2248,7 @@ public void testTicket3587() {
         SerializationMatchers.assertEqualsToYamlExact(openAPI, yaml);
     }
 
-    @Test(description = "Optional hanlding")
+    @Test(description = "Optional handling")
     public void testTicket3624() {
         Reader reader = new Reader(new OpenAPI());
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/util/reflection/ReflectionUtilsTest.java
Patch:
@@ -52,7 +52,7 @@ public void isOverriddenMethodTest() throws NoSuchMethodException {
 
         for (Method method : IParent.class.getMethods()) {
             if ("parametrizedMethod5".equals(method.getName())) {
-                Assert.assertTrue(ReflectionUtils.isOverriddenMethod(method, IParent.class));
+                Assert.assertFalse(ReflectionUtils.isOverriddenMethod(method, IParent.class));
             } else if ("parametrizedMethod2".equals(method.getName())) {
                 Assert.assertFalse(ReflectionUtils.isOverriddenMethod(method, IParent.class));
             } else {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/util/reflection/ReflectionUtilsTest.java
Patch:
@@ -52,7 +52,7 @@ public void isOverriddenMethodTest() throws NoSuchMethodException {
 
         for (Method method : IParent.class.getMethods()) {
             if ("parametrizedMethod5".equals(method.getName())) {
-                Assert.assertTrue(ReflectionUtils.isOverriddenMethod(method, IParent.class));
+                Assert.assertFalse(ReflectionUtils.isOverriddenMethod(method, IParent.class));
             } else if ("parametrizedMethod2".equals(method.getName())) {
                 Assert.assertFalse(ReflectionUtils.isOverriddenMethod(method, IParent.class));
             } else {

File: modules/swagger-gradle-plugin/src/test/java/io/swagger/v3/plugins/gradle/SwaggerResolveTest.java
Patch:
@@ -82,7 +82,7 @@ public void testSwaggerResolveTask() throws IOException {
                 "    mavenCentral()\n" +
                 "}\n" +
                 "dependencies {  \n" +
-                "    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version:'2.0.8'\n" +
+                "    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version:'2.1.4-SNAPSHOT'\n" +
                 "    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.1'\n" +
                 "    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'\n" +
                 "    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version:'2.14.0'\n" +

File: modules/swagger-gradle-plugin/src/test/java/io/swagger/v3/plugins/gradle/SwaggerResolveTest.java
Patch:
@@ -82,7 +82,7 @@ public void testSwaggerResolveTask() throws IOException {
                 "    mavenCentral()\n" +
                 "}\n" +
                 "dependencies {  \n" +
-                "    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version:'2.0.8'\n" +
+                "    compile group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version:'2.1.4-SNAPSHOT'\n" +
                 "    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.1'\n" +
                 "    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'\n" +
                 "    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version:'2.14.0'\n" +

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -688,7 +688,9 @@ public Object getExample() {
 
     public void setExample(Object example) {
         this.example = cast(example);
-        exampleSetFlag = true;
+        if (!(example != null && this.example == null)) {
+            exampleSetFlag = true;
+        }
     }
 
     public Schema example(Object example) {

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -688,7 +688,9 @@ public Object getExample() {
 
     public void setExample(Object example) {
         this.example = cast(example);
-        exampleSetFlag = true;
+        if (!(example != null && this.example == null)) {
+            exampleSetFlag = true;
+        }
     }
 
     public Schema example(Object example) {

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/tags/Tags.java
Patch:
@@ -37,7 +37,7 @@
     /**
      * An array of Tag annotation objects which hold metadata for the API
      *
-     * @return rray of Tags
+     * @return array of Tags
      */
     Tag[] value() default {};
 

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/tags/Tags.java
Patch:
@@ -37,7 +37,7 @@
     /**
      * An array of Tag annotation objects which hold metadata for the API
      *
-     * @return rray of Tags
+     * @return array of Tags
      */
     Tag[] value() default {};
 

File: modules/swagger-gradle-plugin/src/main/java/io/swagger/v3/plugins/gradle/tasks/ResolveTask.java
Patch:
@@ -111,16 +111,16 @@ public void setOutputFileName(String outputFileName) {
     /**
      * @deprecated Use {@linkplain #getOutputDir()} instead.
      */
-    @Internal
     @Deprecated
+    @Input
+    @Optional
     public String getOutputPath() {
         return outputPath;
     }
 
     /**
      * @deprecated Use {@linkplain #setOutputDir(File)} instead.
      */
-    @Internal
     @Deprecated
     public void setOutputPath(String outputPath) {
         this.outputPath = outputPath;

File: modules/swagger-gradle-plugin/src/main/java/io/swagger/v3/plugins/gradle/SwaggerPlugin.java
Patch:
@@ -16,7 +16,7 @@ public void apply(Project project) {
         config.defaultDependencies(new Action<DependencySet>() {
             public void execute(DependencySet dependencies) {
                 dependencies.add(project.getDependencies().create("org.apache.commons:commons-lang3:3.7"));
-                dependencies.add(project.getDependencies().create("io.swagger.core.v3:swagger-jaxrs2:2.1.3"));
+                dependencies.add(project.getDependencies().create("io.swagger.core.v3:swagger-jaxrs2:2.1.4-SNAPSHOT"));
                 dependencies.add(project.getDependencies().create("javax.ws.rs:javax.ws.rs-api:2.1"));
                 dependencies.add(project.getDependencies().create("javax.servlet:javax.servlet-api:3.1.0"));
             }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -28,9 +28,9 @@ public void testSimpleCallback() {
         String extractedYAML = openApiYAML.substring(start, end);
         String expectedYAML = "/test:\n" +
                 "    post:\n" +
-                "      description: subscribes a client to updates relevant to the requestor's account,\n" +
-                "        as identified by the input token.  The supplied url will be used as the delivery\n" +
-                "        address for response payloads\n" +
+                "      description: \"subscribes a client to updates relevant to the requestor's account,\\\n" +
+                "        \\ as identified by the input token.  The supplied url will be used as the\\\n" +
+                "        \\ delivery address for response payloads\"\n" +
                 "      operationId: subscribe\n" +
                 "      parameters:\n" +
                 "      - name: x-auth-token\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/examples/ExamplesTest.java
Patch:
@@ -349,9 +349,9 @@ public void testFullExample() {
         String extractedYAML = openApiYAML.substring(start, end);
         String expectedYAML = "/test:\n" +
                 "    post:\n" +
-                "      description: subscribes a client to updates relevant to the requestor's account,\n" +
-                "        as identified by the input token.  The supplied url will be used as the delivery\n" +
-                "        address for response payloads\n" +
+                "      description: \"subscribes a client to updates relevant to the requestor's account,\\\n" +
+                "        \\ as identified by the input token.  The supplied url will be used as the\\\n" +
+                "        \\ delivery address for response payloads\"\n" +
                 "      operationId: subscribe\n" +
                 "      parameters:\n" +
                 "      - name: subscriptionId\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -197,7 +197,7 @@ public void testOperationWithResponseExamples() {
                 "                basic:\n" +
                 "                  summary: shows a basic example\n" +
                 "                  description: basic\n" +
-                "                  value: '{id: 19877734}'\n" +
+                "                  value: \"{id: 19877734}\"\n" +
                 "      deprecated: true\n";
         assertEquals(extractedYAML, expectedYAML);
     }
@@ -229,7 +229,7 @@ public void testOperationWithParameterExample() {
                 "                basic:\n" +
                 "                  summary: shows a basic example\n" +
                 "                  description: basic\n" +
-                "                  value: '{id: 19877734}'\n" +
+                "                  value: \"{id: 19877734}\"\n" +
                 "      deprecated: true\n";
         assertEquals(extractedYAML, expectedYAML);
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/MergedOperationTest.java
Patch:
@@ -92,7 +92,7 @@ public void testPartiallyAnnotatedMethod() {
                 "      - name: id\n" +
                 "        in: query\n" +
                 "        schema:\n" +
-                "          pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\n" +
+                "          pattern: \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\n" +
                 "          type: string\n" +
                 "          description: a GUID for the user in uuid-v4 format\n" +
                 "          format: uuid\n" +

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Schema.java
Patch:
@@ -237,7 +237,7 @@
     /**
      * Allows to specify the access mode (AccessMode.READ_ONLY, READ_WRITE)
      *
-     * AccessMode.READ_ONLY: value will only be written to during a request but not returned during a response.
+     * AccessMode.READ_ONLY: value will not be written to during a request but may be returned during a response.
      * AccessMode.WRITE_ONLY: value will only be written to during a request but not returned during a response.
      * AccessMode.READ_WRITE: value will be written to during a request and returned during a response.
      *

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ParameterProcessor.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -107,7 +107,7 @@ public static Parameter applyAnnotations(
                     parameter.setAllowReserved(p.allowReserved());
                 }
 
-                Map<String, Example> exampleMap = new HashMap<>();
+                Map<String, Example> exampleMap = new LinkedHashMap<>();
                 final Object exampleValue;
                 if (p.examples().length == 1 && StringUtils.isBlank(p.examples()[0].name())) {
                     Optional<Example> exampleOptional = AnnotationsUtils.getExample(p.examples()[0], true);

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/JsonDeserializationTest.java
Patch:
@@ -256,6 +256,7 @@ public void deserializeLongSchema() throws IOException {
         assertEquals(s.getEnum().get(0), 2147483647);
         assertEquals(s.getEnum().get(1), 3147483647L);
         assertEquals(s.getEnum().get(2), 31474836475505055L);
+        assertEquals(s.getEnum().get(3), -9223372036854775808L);
     }
 
     @Test

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/SwaggerSerializers.java
Patch:
@@ -31,7 +31,7 @@ public boolean isWriteable(Class type, Type genericType, Annotation[] annotation
 
     @Override
     public long getSize(OpenAPI data, Class type, Type genericType, Annotation[] annotations, MediaType mediaType) {
-        return -1;
+        return -1L;
     }
 
     @Override
@@ -58,7 +58,7 @@ public void writeTo(OpenAPI data,
             }
         } else if (mediaType.isCompatible(MediaType.APPLICATION_XML_TYPE)) {
             headers.remove("Content-Type");
-            headers.add("Content-Type", "application/json");
+            headers.add("Content-Type", MediaType.APPLICATION_JSON);
             if (prettyPrint) {
                 out.write(Json.pretty().writeValueAsBytes(data));
             } else {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/ext/OpenAPIExtensions.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.ServiceLoader;
 
 public class OpenAPIExtensions {
-    private static Logger LOGGER = LoggerFactory.getLogger(OpenAPIExtensions.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(OpenAPIExtensions.class);
 
     private static List<OpenAPIExtension> extensions = null;
 
@@ -30,7 +30,7 @@ public static Iterator<OpenAPIExtension> chain() {
         extensions = new ArrayList<>();
         ServiceLoader<OpenAPIExtension> loader = ServiceLoader.load(OpenAPIExtension.class);
         for (OpenAPIExtension ext : loader) {
-            LOGGER.debug("adding extension " + ext);
+            LOGGER.debug("adding extension {}", ext);
             extensions.add(ext);
         }
         extensions.add(new DefaultParameterExtension());

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsApplicationAndAnnotationScanner.java
Patch:
@@ -8,7 +8,7 @@ public class JaxrsApplicationAndAnnotationScanner extends JaxrsAnnotationScanner
     @Override
     public Set<Class<?>> classes() {
         Set<Class<?>> classes = super.classes();
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
         if (application != null) {
             Set<Class<?>> clzs = application.getClasses();
             if (clzs != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsApplicationAndResourcePackagesAnnotationScanner.java
Patch:
@@ -15,7 +15,7 @@ public JaxrsApplicationAndResourcePackagesAnnotationScanner() {
     @Override
     public Set<Class<?>> classes() {
         Set<Class<?>> classes = super.classes();
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
         if (application != null) {
             Set<Class<?>> clzs = application.getClasses();
             if (clzs != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsApplicationScanner.java
Patch:
@@ -7,7 +7,7 @@ public class JaxrsApplicationScanner extends JaxrsAnnotationScanner<JaxrsApplica
 
     @Override
     public Set<Class<?>> classes() {
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
         if (application != null) {
             Set<Class<?>> clzs = application.getClasses();
             if (clzs != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -103,9 +103,7 @@ public static String getInitParam(ServletConfig sc, String paramKey) {
         if (!isServletConfigAvailable(sc)) {
             return null;
         }
-        return sc.getInitParameter(paramKey) == null ?
-                sc.getInitParameter(paramKey) :
-                sc.getInitParameter(paramKey);
+        return sc.getInitParameter(paramKey);
     }
 
     public static Boolean getBooleanInitParam(ServletConfig sc, String paramKey) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/SwaggerLoader.java
Patch:
@@ -229,21 +229,21 @@ public Map<String, String> resolve() throws Exception{
             String openapiJson = null;
             String openapiYaml = null;
             if ("JSON".equals(outputFormat) || "JSONANDYAML".equals(outputFormat)) {
-                if (prettyPrint) {
+                if (prettyPrint != null && prettyPrint) {
                     openapiJson = Json.pretty(openAPI);
                 } else {
                     openapiJson = Json.mapper().writeValueAsString(openAPI);
                 }
             }
             if ("YAML".equals(outputFormat) || "JSONANDYAML".equals(outputFormat)) {
-                if (prettyPrint) {
+                if (prettyPrint != null && prettyPrint) {
                     openapiYaml = Yaml.pretty(openAPI);
                 } else {
                     openapiYaml = Yaml.mapper().writeValueAsString(openAPI);
                 }
 
             }
-            HashMap<String, String> map = new HashMap();
+            Map<String, String> map = new HashMap<>();
             map.put("JSON", openapiJson);
             map.put("YAML", openapiYaml);
             return map;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/api/JaxrsOpenApiScanner.java
Patch:
@@ -3,11 +3,8 @@
 import io.swagger.v3.oas.integration.api.OpenApiScanner;
 
 import javax.ws.rs.core.Application;
-import java.util.Map;
 
 public interface JaxrsOpenApiScanner extends OpenApiScanner {
 
     void setApplication(Application application);
-
-    Map<String, Object> resources();
 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/util/ReaderUtils.java
Patch:
@@ -60,15 +60,15 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Compone
             final Annotation[][] annotations = constructor.getParameterAnnotations();
 
             int paramsCount = 0;
-            final List<Parameter> parameters = new ArrayList<Parameter>();
+            final List<Parameter> parameters = new ArrayList<>();
             for (int i = 0; i < genericParameterTypes.length; i++) {
                 final List<Annotation> tmpAnnotations = Arrays.asList(annotations[i]);
                 if (isContext(tmpAnnotations)) {
                     paramsCount++;
                 } else {
                     final Type genericParameterType = genericParameterTypes[i];
                     final List<Parameter> tmpParameters = collectParameters(genericParameterType, tmpAnnotations, components, classConsumes, jsonViewAnnotation);
-                    if (tmpParameters.size() >= 1) {
+                    if (! tmpParameters.isEmpty()) {
                         for (Parameter tmpParameter : tmpParameters) {
                             Parameter processedParameter = ParameterProcessor.applyAnnotations(
                                     tmpParameter,
@@ -104,7 +104,7 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Compone
      * @return the collection of supported parameters
      */
     public static List<Parameter> collectFieldParameters(Class<?> cls, Components components, javax.ws.rs.Consumes classConsumes, JsonView jsonViewAnnotation) {
-        final List<Parameter> parameters = new ArrayList<Parameter>();
+        final List<Parameter> parameters = new ArrayList<>();
         for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
             final List<Annotation> annotations = Arrays.asList(field.getAnnotations());
             final Type genericType = field.getGenericType();

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Components.java
Patch:
@@ -26,7 +26,6 @@
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import io.swagger.v3.oas.models.security.SecurityScheme;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java
Patch:
@@ -122,7 +122,7 @@ public OpenAPI servers(List<Server> servers) {
 
     public OpenAPI addServersItem(Server serversItem) {
         if (this.servers == null) {
-            this.servers = new ArrayList<Server>();
+            this.servers = new ArrayList<>();
         }
         this.servers.add(serversItem);
         return this;
@@ -149,7 +149,7 @@ public OpenAPI security(List<SecurityRequirement> security) {
 
     public OpenAPI addSecurityItem(SecurityRequirement securityItem) {
         if (this.security == null) {
-            this.security = new ArrayList<SecurityRequirement>();
+            this.security = new ArrayList<>();
         }
         this.security.add(securityItem);
         return this;
@@ -176,7 +176,7 @@ public OpenAPI tags(List<Tag> tags) {
 
     public OpenAPI addTagsItem(Tag tagsItem) {
         if (this.tags == null) {
-            this.tags = new ArrayList<Tag>();
+            this.tags = new ArrayList<>();
         }
         this.tags.add(tagsItem);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/PathItem.java
Patch:
@@ -359,7 +359,7 @@ public PathItem servers(List<Server> servers) {
 
     public PathItem addServersItem(Server serversItem) {
         if (this.servers == null) {
-            this.servers = new ArrayList<Server>();
+            this.servers = new ArrayList<>();
         }
         this.servers.add(serversItem);
         return this;
@@ -386,7 +386,7 @@ public PathItem parameters(List<Parameter> parameters) {
 
     public PathItem addParametersItem(Parameter parametersItem) {
         if (this.parameters == null) {
-            this.parameters = new ArrayList<Parameter>();
+            this.parameters = new ArrayList<>();
         }
         this.parameters.add(parametersItem);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/callbacks/Callback.java
Patch:
@@ -46,7 +46,7 @@ public Callback() {
      * @since 2.0.3
      */
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/callbacks/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/examples/Example.java
Patch:
@@ -109,7 +109,7 @@ public Example externalValue(String externalValue) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/examples/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/headers/Header.java
Patch:
@@ -20,7 +20,6 @@
 import io.swagger.v3.oas.models.media.Content;
 import io.swagger.v3.oas.models.media.Schema;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -297,7 +296,7 @@ public Header extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/headers/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/links/Link.java
Patch:
@@ -17,10 +17,8 @@
 package io.swagger.v3.oas.models.links;
 
 import io.swagger.v3.oas.models.headers.Header;
-import io.swagger.v3.oas.models.parameters.RequestBody;
 import io.swagger.v3.oas.models.servers.Server;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -238,7 +236,7 @@ public int hashCode() {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/links/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ArraySchema.java
Patch:
@@ -29,6 +29,7 @@ public ArraySchema() {
         super("array", null);
     }
 
+    @Override
     public ArraySchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/BinarySchema.java
Patch:
@@ -29,13 +29,15 @@ public BinarySchema() {
         super("string", "binary");
     }
 
+    @Override
     public BinarySchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public BinarySchema format(String format) {
-        super.setFormat(format);;
+        super.setFormat(format);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/BooleanSchema.java
Patch:
@@ -30,6 +30,7 @@ public BooleanSchema() {
         super("boolean", null);
     }
 
+    @Override
     public BooleanSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ByteArraySchema.java
Patch:
@@ -29,11 +29,13 @@ public ByteArraySchema() {
         super("string", "byte");
     }
 
+    @Override
     public ByteArraySchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public ByteArraySchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateSchema.java
Patch:
@@ -30,11 +30,13 @@ public DateSchema() {
         super("string", "date");
     }
 
+    @Override
     public DateSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public DateSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateTimeSchema.java
Patch:
@@ -32,11 +32,13 @@ public DateTimeSchema() {
         super("string", "date-time");
     }
 
+    @Override
     public DateTimeSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public DateTimeSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Discriminator.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.v3.oas.models.media;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/EmailSchema.java
Patch:
@@ -28,11 +28,13 @@ public EmailSchema() {
         super("string", "email");
     }
 
+    @Override
     public EmailSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public EmailSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/EncodingProperty.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.swagger.v3.oas.models.headers.Header;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/FileSchema.java
Patch:
@@ -28,11 +28,13 @@ public FileSchema() {
         super("string", "binary");
     }
 
+    @Override
     public FileSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public FileSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/IntegerSchema.java
Patch:
@@ -29,11 +29,13 @@ public IntegerSchema() {
         super("integer", "int32");
     }
 
+    @Override
     public IntegerSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public IntegerSchema format(String format) {
         super.setFormat(format);
         return this;
@@ -49,7 +51,7 @@ protected Number cast(Object value) {
         if (value != null) {
             try {
                 Number casted = NumberFormat.getInstance().parse(value.toString());
-                if (casted.longValue() <= Integer.MAX_VALUE) {
+                if (Integer.MIN_VALUE <= casted.longValue() && casted.longValue() <= Integer.MAX_VALUE) {
                     return Integer.parseInt(value.toString());
                 } else {
                     return Long.parseLong(value.toString());

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/MapSchema.java
Patch:
@@ -28,6 +28,7 @@ public MapSchema() {
         super("object", null);
     }
 
+    @Override
     public MapSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/MediaType.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.swagger.v3.oas.models.examples.Example;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/NumberSchema.java
Patch:
@@ -30,6 +30,7 @@ public NumberSchema() {
         super("number", null);
     }
 
+    @Override
     public NumberSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ObjectSchema.java
Patch:
@@ -28,11 +28,13 @@ public ObjectSchema() {
         super("object", null);
     }
 
+    @Override
     public ObjectSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public ObjectSchema example(Object example) {
         if (example != null) {
             super.setExample(example.toString());

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/PasswordSchema.java
Patch:
@@ -28,11 +28,13 @@ public PasswordSchema() {
         super("string", "password");
     }
 
+    @Override
     public PasswordSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public PasswordSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/StringSchema.java
Patch:
@@ -29,6 +29,7 @@ public StringSchema() {
         super("string", null);
     }
 
+    @Override
     public StringSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/UUIDSchema.java
Patch:
@@ -30,11 +30,13 @@ public UUIDSchema() {
         super("string", "uuid");
     }
 
+    @Override
     public UUIDSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public UUIDSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/Parameter.java
Patch:
@@ -20,7 +20,6 @@
 import io.swagger.v3.oas.models.media.Content;
 import io.swagger.v3.oas.models.media.Schema;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -336,7 +335,7 @@ public Parameter content(Content content) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/parameters/" + $ref;
         }
         this.$ref = $ref;
@@ -428,7 +427,7 @@ public String toString() {
      * Convert the given object to string with each line indented by 4 spaces
      * (except the first line).
      */
-    private String toIndentedString(java.lang.Object o) {
+    static String toIndentedString(java.lang.Object o) {
         if (o == null) {
             return "null";
         }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/RequestBody.java
Patch:
@@ -116,7 +116,7 @@ public RequestBody extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/requestBodies/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponse.java
Patch:
@@ -20,7 +20,6 @@
 import io.swagger.v3.oas.models.links.Link;
 import io.swagger.v3.oas.models.media.Content;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -136,7 +135,7 @@ public ApiResponse link(String name, Link link) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/responses/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/security/SecurityScheme.java
Patch:
@@ -263,7 +263,7 @@ public SecurityScheme extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/securitySchemes/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/servers/ServerVariable.java
Patch:
@@ -53,7 +53,7 @@ public ServerVariable _enum(List<String> _enum) {
 
     public ServerVariable addEnumItem(String _enumItem) {
         if (this._enum == null) {
-            this._enum = new ArrayList<String>();
+            this._enum = new ArrayList<>();
         }
         this._enum.add(_enumItem);
         return this;

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ParameterProcessor.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -107,7 +107,7 @@ public static Parameter applyAnnotations(
                     parameter.setAllowReserved(p.allowReserved());
                 }
 
-                Map<String, Example> exampleMap = new HashMap<>();
+                Map<String, Example> exampleMap = new LinkedHashMap<>();
                 final Object exampleValue;
                 if (p.examples().length == 1 && StringUtils.isBlank(p.examples()[0].name())) {
                     Optional<Example> exampleOptional = AnnotationsUtils.getExample(p.examples()[0], true);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ParameterProcessor.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -107,7 +107,7 @@ public static Parameter applyAnnotations(
                     parameter.setAllowReserved(p.allowReserved());
                 }
 
-                Map<String, Example> exampleMap = new HashMap<>();
+                Map<String, Example> exampleMap = new LinkedHashMap<>();
                 final Object exampleValue;
                 if (p.examples().length == 1 && StringUtils.isBlank(p.examples()[0].name())) {
                     Optional<Example> exampleOptional = AnnotationsUtils.getExample(p.examples()[0], true);

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/JsonDeserializationTest.java
Patch:
@@ -256,6 +256,7 @@ public void deserializeLongSchema() throws IOException {
         assertEquals(s.getEnum().get(0), 2147483647);
         assertEquals(s.getEnum().get(1), 3147483647L);
         assertEquals(s.getEnum().get(2), 31474836475505055L);
+        assertEquals(s.getEnum().get(3), -9223372036854775808L);
     }
 
     @Test

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/IntegerSchema.java
Patch:
@@ -51,7 +51,7 @@ protected Number cast(Object value) {
         if (value != null) {
             try {
                 Number casted = NumberFormat.getInstance().parse(value.toString());
-                if (casted.longValue() <= Integer.MAX_VALUE) {
+                if (Integer.MIN_VALUE <= casted.longValue() && casted.longValue() <= Integer.MAX_VALUE) {
                     return Integer.parseInt(value.toString());
                 } else {
                     return Long.parseLong(value.toString());

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Schema.java
Patch:
@@ -237,7 +237,7 @@
     /**
      * Allows to specify the access mode (AccessMode.READ_ONLY, READ_WRITE)
      *
-     * AccessMode.READ_ONLY: value will only be written to during a request but not returned during a response.
+     * AccessMode.READ_ONLY: value will not be written to during a request but may be returned during a response.
      * AccessMode.WRITE_ONLY: value will only be written to during a request but not returned during a response.
      * AccessMode.READ_WRITE: value will be written to during a request and returned during a response.
      *

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiContext.java
Patch:
@@ -122,6 +122,7 @@ public T openApiConfiguration(OpenAPIConfiguration openApiConfiguration) {
         return (T) this;
     }
 
+    @Override
     public String getConfigLocation() {
         return configLocation;
     }
@@ -240,8 +241,7 @@ public void setConfiguration(OpenAPIConfiguration openApiConfiguration) {
 
                 @Override
                 public OpenAPI read(Set<Class<?>> classes, Map<String, Object> resources) {
-                    OpenAPI openApi = openApiConfiguration.getOpenAPI();
-                    return openApi;
+                    return openApiConfiguration.getOpenAPI();
                 }
             };
         }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiScanner.java
Patch:
@@ -35,9 +35,9 @@ public void setConfiguration(OpenAPIConfiguration openApiConfiguration) {
     public Set<Class<?>> classes() {
         ClassGraph graph = new ClassGraph().enableAllInfo();
 
-        Set<String> acceptablePackages = new HashSet<String>();
+        Set<String> acceptablePackages = new HashSet<>();
 
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
 
         boolean allowAllPackages = false;
 
@@ -97,7 +97,7 @@ protected boolean isIgnored(String classOrPackageName) {
         if (StringUtils.isBlank(classOrPackageName)) {
             return true;
         }
-        return ignored.stream().anyMatch(i -> classOrPackageName.startsWith(i));
+        return ignored.stream().anyMatch(classOrPackageName::startsWith);
     }
 
 }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/OpenApiContextLocator.java
Patch:
@@ -9,7 +9,7 @@ public class OpenApiContextLocator {
 
     private static OpenApiContextLocator instance;
 
-    private ConcurrentMap<String, OpenApiContext> map = new ConcurrentHashMap<String, OpenApiContext>();
+    private ConcurrentMap<String, OpenApiContext> map = new ConcurrentHashMap<>();
 
     private OpenApiContextLocator() {
     }

File: modules/swagger-jaxrs2-servlet-initializer-v2/src/main/java/io/swagger/v3/jaxrs2/integration/servlet/SwaggerServletInitializer.java
Patch:
@@ -32,8 +32,9 @@ public class SwaggerServletInitializer implements ServletContainerInitializer {
     public SwaggerServletInitializer() {
     }
 
+    @Override
     public void onStartup(Set<Class<?>> classes, ServletContext servletContext) throws ServletException {
-        if (classes != null && classes.size() != 0) {
+        if (classes != null && ! classes.isEmpty()) {
             Set<Class<?>> resources = new LinkedHashSet();
             classes.stream()
                     .filter(c -> ignored.stream().noneMatch(i -> c.getName().startsWith(i)))
@@ -42,7 +43,7 @@ public void onStartup(Set<Class<?>> classes, ServletContext servletContext) thro
                 // init context
                 try {
                     SwaggerConfiguration oasConfig = new SwaggerConfiguration()
-                            .resourceClasses(resources.stream().map(c -> c.getName()).collect(Collectors.toSet()));
+                            .resourceClasses(resources.stream().map(Class::getName).collect(Collectors.toSet()));
 
                     new JaxrsOpenApiContextBuilder()
                             .openApiConfiguration(oasConfig)

File: modules/swagger-jaxrs2-servlet-initializer/src/main/java/io/swagger/v3/jaxrs2/integration/SwaggerServletInitializer.java
Patch:
@@ -32,8 +32,9 @@ public class SwaggerServletInitializer implements ServletContainerInitializer {
     public SwaggerServletInitializer() {
     }
 
+    @Override
     public void onStartup(Set<Class<?>> classes, ServletContext servletContext) throws ServletException {
-        if (classes != null && classes.size() != 0) {
+        if (classes != null && ! classes.isEmpty()) {
             Set<Class<?>> resources = new LinkedHashSet();
             classes.stream()
                     .filter(c -> ignored.stream().noneMatch(i -> c.getName().startsWith(i)))
@@ -42,7 +43,7 @@ public void onStartup(Set<Class<?>> classes, ServletContext servletContext) thro
                 // init context
                 try {
                     SwaggerConfiguration oasConfig = new SwaggerConfiguration()
-                            .resourceClasses(resources.stream().map(c -> c.getName()).collect(Collectors.toSet()));
+                            .resourceClasses(resources.stream().map(Class::getName).collect(Collectors.toSet()));
 
                     new JaxrsOpenApiContextBuilder()
                             .openApiConfiguration(oasConfig)

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/SwaggerSerializers.java
Patch:
@@ -31,7 +31,7 @@ public boolean isWriteable(Class type, Type genericType, Annotation[] annotation
 
     @Override
     public long getSize(OpenAPI data, Class type, Type genericType, Annotation[] annotations, MediaType mediaType) {
-        return -1;
+        return -1L;
     }
 
     @Override
@@ -58,7 +58,7 @@ public void writeTo(OpenAPI data,
             }
         } else if (mediaType.isCompatible(MediaType.APPLICATION_XML_TYPE)) {
             headers.remove("Content-Type");
-            headers.add("Content-Type", "application/json");
+            headers.add("Content-Type", MediaType.APPLICATION_JSON);
             if (prettyPrint) {
                 out.write(Json.pretty().writeValueAsBytes(data));
             } else {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/ext/OpenAPIExtensions.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.ServiceLoader;
 
 public class OpenAPIExtensions {
-    private static Logger LOGGER = LoggerFactory.getLogger(OpenAPIExtensions.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(OpenAPIExtensions.class);
 
     private static List<OpenAPIExtension> extensions = null;
 
@@ -30,7 +30,7 @@ public static Iterator<OpenAPIExtension> chain() {
         extensions = new ArrayList<>();
         ServiceLoader<OpenAPIExtension> loader = ServiceLoader.load(OpenAPIExtension.class);
         for (OpenAPIExtension ext : loader) {
-            LOGGER.debug("adding extension " + ext);
+            LOGGER.debug("adding extension {}", ext);
             extensions.add(ext);
         }
         extensions.add(new DefaultParameterExtension());

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsApplicationAndAnnotationScanner.java
Patch:
@@ -8,7 +8,7 @@ public class JaxrsApplicationAndAnnotationScanner extends JaxrsAnnotationScanner
     @Override
     public Set<Class<?>> classes() {
         Set<Class<?>> classes = super.classes();
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
         if (application != null) {
             Set<Class<?>> clzs = application.getClasses();
             if (clzs != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsApplicationAndResourcePackagesAnnotationScanner.java
Patch:
@@ -15,7 +15,7 @@ public JaxrsApplicationAndResourcePackagesAnnotationScanner() {
     @Override
     public Set<Class<?>> classes() {
         Set<Class<?>> classes = super.classes();
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
         if (application != null) {
             Set<Class<?>> clzs = application.getClasses();
             if (clzs != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsApplicationScanner.java
Patch:
@@ -7,7 +7,7 @@ public class JaxrsApplicationScanner extends JaxrsAnnotationScanner<JaxrsApplica
 
     @Override
     public Set<Class<?>> classes() {
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
         if (application != null) {
             Set<Class<?>> clzs = application.getClasses();
             if (clzs != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -103,9 +103,7 @@ public static String getInitParam(ServletConfig sc, String paramKey) {
         if (!isServletConfigAvailable(sc)) {
             return null;
         }
-        return sc.getInitParameter(paramKey) == null ?
-                sc.getInitParameter(paramKey) :
-                sc.getInitParameter(paramKey);
+        return sc.getInitParameter(paramKey);
     }
 
     public static Boolean getBooleanInitParam(ServletConfig sc, String paramKey) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/SwaggerLoader.java
Patch:
@@ -229,21 +229,21 @@ public Map<String, String> resolve() throws Exception{
             String openapiJson = null;
             String openapiYaml = null;
             if ("JSON".equals(outputFormat) || "JSONANDYAML".equals(outputFormat)) {
-                if (prettyPrint) {
+                if (prettyPrint != null && prettyPrint) {
                     openapiJson = Json.pretty(openAPI);
                 } else {
                     openapiJson = Json.mapper().writeValueAsString(openAPI);
                 }
             }
             if ("YAML".equals(outputFormat) || "JSONANDYAML".equals(outputFormat)) {
-                if (prettyPrint) {
+                if (prettyPrint != null && prettyPrint) {
                     openapiYaml = Yaml.pretty(openAPI);
                 } else {
                     openapiYaml = Yaml.mapper().writeValueAsString(openAPI);
                 }
 
             }
-            HashMap<String, String> map = new HashMap();
+            Map<String, String> map = new HashMap<>();
             map.put("JSON", openapiJson);
             map.put("YAML", openapiYaml);
             return map;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/api/JaxrsOpenApiScanner.java
Patch:
@@ -3,11 +3,8 @@
 import io.swagger.v3.oas.integration.api.OpenApiScanner;
 
 import javax.ws.rs.core.Application;
-import java.util.Map;
 
 public interface JaxrsOpenApiScanner extends OpenApiScanner {
 
     void setApplication(Application application);
-
-    Map<String, Object> resources();
 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/util/ReaderUtils.java
Patch:
@@ -60,15 +60,15 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Compone
             final Annotation[][] annotations = constructor.getParameterAnnotations();
 
             int paramsCount = 0;
-            final List<Parameter> parameters = new ArrayList<Parameter>();
+            final List<Parameter> parameters = new ArrayList<>();
             for (int i = 0; i < genericParameterTypes.length; i++) {
                 final List<Annotation> tmpAnnotations = Arrays.asList(annotations[i]);
                 if (isContext(tmpAnnotations)) {
                     paramsCount++;
                 } else {
                     final Type genericParameterType = genericParameterTypes[i];
                     final List<Parameter> tmpParameters = collectParameters(genericParameterType, tmpAnnotations, components, classConsumes, jsonViewAnnotation);
-                    if (tmpParameters.size() >= 1) {
+                    if (! tmpParameters.isEmpty()) {
                         for (Parameter tmpParameter : tmpParameters) {
                             Parameter processedParameter = ParameterProcessor.applyAnnotations(
                                     tmpParameter,
@@ -104,7 +104,7 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Compone
      * @return the collection of supported parameters
      */
     public static List<Parameter> collectFieldParameters(Class<?> cls, Components components, javax.ws.rs.Consumes classConsumes, JsonView jsonViewAnnotation) {
-        final List<Parameter> parameters = new ArrayList<Parameter>();
+        final List<Parameter> parameters = new ArrayList<>();
         for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
             final List<Annotation> annotations = Arrays.asList(field.getAnnotations());
             final Type genericType = field.getGenericType();

File: modules/swagger-maven-plugin/src/main/java/io/swagger/v3/plugin/maven/IncludeProjectDependenciesComponentConfigurator.java
Patch:
@@ -54,7 +54,7 @@ private void addProjectDependenciesToClassRealm(ExpressionEvaluator expressionEv
 
     private URL[] buildURLs(List<String> runtimeClasspathElements) throws ComponentConfigurationException {
         // Add the projects classes and dependencies
-        List<URL> urls = new ArrayList<URL>(runtimeClasspathElements.size());
+        List<URL> urls = new ArrayList<>(runtimeClasspathElements.size());
         for (String element : runtimeClasspathElements) {
             try {
                 final URL url = new File(element).toURI().toURL();

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/Components.java
Patch:
@@ -26,7 +26,6 @@
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import io.swagger.v3.oas.models.security.SecurityScheme;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/OpenAPI.java
Patch:
@@ -122,7 +122,7 @@ public OpenAPI servers(List<Server> servers) {
 
     public OpenAPI addServersItem(Server serversItem) {
         if (this.servers == null) {
-            this.servers = new ArrayList<Server>();
+            this.servers = new ArrayList<>();
         }
         this.servers.add(serversItem);
         return this;
@@ -149,7 +149,7 @@ public OpenAPI security(List<SecurityRequirement> security) {
 
     public OpenAPI addSecurityItem(SecurityRequirement securityItem) {
         if (this.security == null) {
-            this.security = new ArrayList<SecurityRequirement>();
+            this.security = new ArrayList<>();
         }
         this.security.add(securityItem);
         return this;
@@ -176,7 +176,7 @@ public OpenAPI tags(List<Tag> tags) {
 
     public OpenAPI addTagsItem(Tag tagsItem) {
         if (this.tags == null) {
-            this.tags = new ArrayList<Tag>();
+            this.tags = new ArrayList<>();
         }
         this.tags.add(tagsItem);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/PathItem.java
Patch:
@@ -359,7 +359,7 @@ public PathItem servers(List<Server> servers) {
 
     public PathItem addServersItem(Server serversItem) {
         if (this.servers == null) {
-            this.servers = new ArrayList<Server>();
+            this.servers = new ArrayList<>();
         }
         this.servers.add(serversItem);
         return this;
@@ -386,7 +386,7 @@ public PathItem parameters(List<Parameter> parameters) {
 
     public PathItem addParametersItem(Parameter parametersItem) {
         if (this.parameters == null) {
-            this.parameters = new ArrayList<Parameter>();
+            this.parameters = new ArrayList<>();
         }
         this.parameters.add(parametersItem);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/callbacks/Callback.java
Patch:
@@ -46,7 +46,7 @@ public Callback() {
      * @since 2.0.3
      */
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/callbacks/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/examples/Example.java
Patch:
@@ -109,7 +109,7 @@ public Example externalValue(String externalValue) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/examples/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/headers/Header.java
Patch:
@@ -20,7 +20,6 @@
 import io.swagger.v3.oas.models.media.Content;
 import io.swagger.v3.oas.models.media.Schema;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -297,7 +296,7 @@ public Header extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/headers/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/links/Link.java
Patch:
@@ -17,10 +17,8 @@
 package io.swagger.v3.oas.models.links;
 
 import io.swagger.v3.oas.models.headers.Header;
-import io.swagger.v3.oas.models.parameters.RequestBody;
 import io.swagger.v3.oas.models.servers.Server;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -238,7 +236,7 @@ public int hashCode() {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/links/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ArraySchema.java
Patch:
@@ -29,6 +29,7 @@ public ArraySchema() {
         super("array", null);
     }
 
+    @Override
     public ArraySchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/BinarySchema.java
Patch:
@@ -29,13 +29,15 @@ public BinarySchema() {
         super("string", "binary");
     }
 
+    @Override
     public BinarySchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public BinarySchema format(String format) {
-        super.setFormat(format);;
+        super.setFormat(format);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/BooleanSchema.java
Patch:
@@ -30,6 +30,7 @@ public BooleanSchema() {
         super("boolean", null);
     }
 
+    @Override
     public BooleanSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ByteArraySchema.java
Patch:
@@ -29,11 +29,13 @@ public ByteArraySchema() {
         super("string", "byte");
     }
 
+    @Override
     public ByteArraySchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public ByteArraySchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateSchema.java
Patch:
@@ -30,11 +30,13 @@ public DateSchema() {
         super("string", "date");
     }
 
+    @Override
     public DateSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public DateSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateTimeSchema.java
Patch:
@@ -32,11 +32,13 @@ public DateTimeSchema() {
         super("string", "date-time");
     }
 
+    @Override
     public DateTimeSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public DateTimeSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Discriminator.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.v3.oas.models.media;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/EmailSchema.java
Patch:
@@ -28,11 +28,13 @@ public EmailSchema() {
         super("string", "email");
     }
 
+    @Override
     public EmailSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public EmailSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/EncodingProperty.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.swagger.v3.oas.models.headers.Header;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/FileSchema.java
Patch:
@@ -28,11 +28,13 @@ public FileSchema() {
         super("string", "binary");
     }
 
+    @Override
     public FileSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public FileSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/IntegerSchema.java
Patch:
@@ -29,11 +29,13 @@ public IntegerSchema() {
         super("integer", "int32");
     }
 
+    @Override
     public IntegerSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public IntegerSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/MapSchema.java
Patch:
@@ -28,6 +28,7 @@ public MapSchema() {
         super("object", null);
     }
 
+    @Override
     public MapSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/MediaType.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.swagger.v3.oas.models.examples.Example;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/NumberSchema.java
Patch:
@@ -30,6 +30,7 @@ public NumberSchema() {
         super("number", null);
     }
 
+    @Override
     public NumberSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ObjectSchema.java
Patch:
@@ -28,11 +28,13 @@ public ObjectSchema() {
         super("object", null);
     }
 
+    @Override
     public ObjectSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public ObjectSchema example(Object example) {
         if (example != null) {
             super.setExample(example.toString());

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/PasswordSchema.java
Patch:
@@ -28,11 +28,13 @@ public PasswordSchema() {
         super("string", "password");
     }
 
+    @Override
     public PasswordSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public PasswordSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/StringSchema.java
Patch:
@@ -29,6 +29,7 @@ public StringSchema() {
         super("string", null);
     }
 
+    @Override
     public StringSchema type(String type) {
         super.setType(type);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/UUIDSchema.java
Patch:
@@ -30,11 +30,13 @@ public UUIDSchema() {
         super("string", "uuid");
     }
 
+    @Override
     public UUIDSchema type(String type) {
         super.setType(type);
         return this;
     }
 
+    @Override
     public UUIDSchema format(String format) {
         super.setFormat(format);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/Parameter.java
Patch:
@@ -20,7 +20,6 @@
 import io.swagger.v3.oas.models.media.Content;
 import io.swagger.v3.oas.models.media.Schema;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -336,7 +335,7 @@ public Parameter content(Content content) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/parameters/" + $ref;
         }
         this.$ref = $ref;
@@ -428,7 +427,7 @@ public String toString() {
      * Convert the given object to string with each line indented by 4 spaces
      * (except the first line).
      */
-    private String toIndentedString(java.lang.Object o) {
+    static String toIndentedString(java.lang.Object o) {
         if (o == null) {
             return "null";
         }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/RequestBody.java
Patch:
@@ -116,7 +116,7 @@ public RequestBody extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/requestBodies/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponse.java
Patch:
@@ -20,7 +20,6 @@
 import io.swagger.v3.oas.models.links.Link;
 import io.swagger.v3.oas.models.media.Content;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -136,7 +135,7 @@ public ApiResponse link(String name, Link link) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/responses/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/security/SecurityScheme.java
Patch:
@@ -263,7 +263,7 @@ public SecurityScheme extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+        if ($ref != null && ($ref.indexOf('.') == -1 && $ref.indexOf('/') == -1)) {
             $ref = "#/components/securitySchemes/" + $ref;
         }
         this.$ref = $ref;

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/servers/ServerVariable.java
Patch:
@@ -53,7 +53,7 @@ public ServerVariable _enum(List<String> _enum) {
 
     public ServerVariable addEnumItem(String _enumItem) {
         if (this._enum == null) {
-            this._enum = new ArrayList<String>();
+            this._enum = new ArrayList<>();
         }
         this._enum.add(_enumItem);
         return this;

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiContext.java
Patch:
@@ -122,6 +122,7 @@ public T openApiConfiguration(OpenAPIConfiguration openApiConfiguration) {
         return (T) this;
     }
 
+    @Override
     public String getConfigLocation() {
         return configLocation;
     }
@@ -240,8 +241,7 @@ public void setConfiguration(OpenAPIConfiguration openApiConfiguration) {
 
                 @Override
                 public OpenAPI read(Set<Class<?>> classes, Map<String, Object> resources) {
-                    OpenAPI openApi = openApiConfiguration.getOpenAPI();
-                    return openApi;
+                    return openApiConfiguration.getOpenAPI();
                 }
             };
         }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiScanner.java
Patch:
@@ -35,9 +35,9 @@ public void setConfiguration(OpenAPIConfiguration openApiConfiguration) {
     public Set<Class<?>> classes() {
         ClassGraph graph = new ClassGraph().enableAllInfo();
 
-        Set<String> acceptablePackages = new HashSet<String>();
+        Set<String> acceptablePackages = new HashSet<>();
 
-        Set<Class<?>> output = new HashSet<Class<?>>();
+        Set<Class<?>> output = new HashSet<>();
 
         boolean allowAllPackages = false;
 
@@ -97,7 +97,7 @@ protected boolean isIgnored(String classOrPackageName) {
         if (StringUtils.isBlank(classOrPackageName)) {
             return true;
         }
-        return ignored.stream().anyMatch(i -> classOrPackageName.startsWith(i));
+        return ignored.stream().anyMatch(classOrPackageName::startsWith);
     }
 
 }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/OpenApiContextLocator.java
Patch:
@@ -9,7 +9,7 @@ public class OpenApiContextLocator {
 
     private static OpenApiContextLocator instance;
 
-    private ConcurrentMap<String, OpenApiContext> map = new ConcurrentHashMap<String, OpenApiContext>();
+    private ConcurrentMap<String, OpenApiContext> map = new ConcurrentHashMap<>();
 
     private OpenApiContextLocator() {
     }

File: modules/swagger-jaxrs2-servlet-initializer-v2/src/main/java/io/swagger/v3/jaxrs2/integration/servlet/SwaggerServletInitializer.java
Patch:
@@ -32,8 +32,9 @@ public class SwaggerServletInitializer implements ServletContainerInitializer {
     public SwaggerServletInitializer() {
     }
 
+    @Override
     public void onStartup(Set<Class<?>> classes, ServletContext servletContext) throws ServletException {
-        if (classes != null && classes.size() != 0) {
+        if (classes != null && ! classes.isEmpty()) {
             Set<Class<?>> resources = new LinkedHashSet();
             classes.stream()
                     .filter(c -> ignored.stream().noneMatch(i -> c.getName().startsWith(i)))
@@ -42,7 +43,7 @@ public void onStartup(Set<Class<?>> classes, ServletContext servletContext) thro
                 // init context
                 try {
                     SwaggerConfiguration oasConfig = new SwaggerConfiguration()
-                            .resourceClasses(resources.stream().map(c -> c.getName()).collect(Collectors.toSet()));
+                            .resourceClasses(resources.stream().map(Class::getName).collect(Collectors.toSet()));
 
                     new JaxrsOpenApiContextBuilder()
                             .openApiConfiguration(oasConfig)

File: modules/swagger-jaxrs2-servlet-initializer/src/main/java/io/swagger/v3/jaxrs2/integration/SwaggerServletInitializer.java
Patch:
@@ -32,8 +32,9 @@ public class SwaggerServletInitializer implements ServletContainerInitializer {
     public SwaggerServletInitializer() {
     }
 
+    @Override
     public void onStartup(Set<Class<?>> classes, ServletContext servletContext) throws ServletException {
-        if (classes != null && classes.size() != 0) {
+        if (classes != null && ! classes.isEmpty()) {
             Set<Class<?>> resources = new LinkedHashSet();
             classes.stream()
                     .filter(c -> ignored.stream().noneMatch(i -> c.getName().startsWith(i)))
@@ -42,7 +43,7 @@ public void onStartup(Set<Class<?>> classes, ServletContext servletContext) thro
                 // init context
                 try {
                     SwaggerConfiguration oasConfig = new SwaggerConfiguration()
-                            .resourceClasses(resources.stream().map(c -> c.getName()).collect(Collectors.toSet()));
+                            .resourceClasses(resources.stream().map(Class::getName).collect(Collectors.toSet()));
 
                     new JaxrsOpenApiContextBuilder()
                             .openApiConfiguration(oasConfig)

File: modules/swagger-maven-plugin/src/main/java/io/swagger/v3/plugin/maven/IncludeProjectDependenciesComponentConfigurator.java
Patch:
@@ -54,7 +54,7 @@ private void addProjectDependenciesToClassRealm(ExpressionEvaluator expressionEv
 
     private URL[] buildURLs(List<String> runtimeClasspathElements) throws ComponentConfigurationException {
         // Add the projects classes and dependencies
-        List<URL> urls = new ArrayList<URL>(runtimeClasspathElements.size());
+        List<URL> urls = new ArrayList<>(runtimeClasspathElements.size());
         for (String element : runtimeClasspathElements) {
             try {
                 final URL url = new File(element).toURI().toURL();

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -88,7 +88,7 @@
 
 public class ModelResolver extends AbstractModelConverter implements ModelConverter {
     Logger LOGGER = LoggerFactory.getLogger(ModelResolver.class);
-    private static List<String> NOT_NULL_ANNOTATIONS = Arrays.asList("NotNull", "NonNull", "NotBlank", "NotEmpty");
+    public static List<String> NOT_NULL_ANNOTATIONS = Arrays.asList("NotNull", "NonNull", "NotBlank", "NotEmpty");
 
     public static final String SET_PROPERTY_OF_COMPOSED_MODEL_AS_SIBLING = "composed-model-properties-as-sibiling";
     public static final String SET_PROPERTY_OF_ENUMS_AS_REF = "enums-as-ref";

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/JsonDeserializationTest.java
Patch:
@@ -256,6 +256,7 @@ public void deserializeLongSchema() throws IOException {
         assertEquals(s.getEnum().get(0), 2147483647);
         assertEquals(s.getEnum().get(1), 3147483647L);
         assertEquals(s.getEnum().get(2), 31474836475505055L);
+        assertEquals(s.getEnum().get(3), -9223372036854775808L);
     }
 
     @Test

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/IntegerSchema.java
Patch:
@@ -49,7 +49,7 @@ protected Number cast(Object value) {
         if (value != null) {
             try {
                 Number casted = NumberFormat.getInstance().parse(value.toString());
-                if (casted.longValue() <= Integer.MAX_VALUE) {
+                if (Integer.MIN_VALUE <= casted.longValue() && casted.longValue() <= Integer.MAX_VALUE) {
                     return Integer.parseInt(value.toString());
                 } else {
                     return Long.parseLong(value.toString());

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/SwaggerAnnotationIntrospector.java
Patch:
@@ -60,6 +60,9 @@ public Boolean hasRequiredMarker(AnnotatedMember m) {
         }
         ArraySchema arraySchema = m.getAnnotation(ArraySchema.class);
         if (arraySchema != null) {
+            if (arraySchema.arraySchema().required()) {
+                return arraySchema.arraySchema().required();
+            }
             if (arraySchema.schema().required()) {
                 return arraySchema.schema().required();
             }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -705,7 +705,6 @@ public void test1(A a) {
     public void test2497() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(ResponseContentWithArrayResource.class);
-
         Paths paths = openAPI.getPaths();
         assertEquals(paths.size(), 1);
         PathItem pathItem = paths.get("/user");
@@ -715,6 +714,8 @@ public void test2497() {
         ArraySchema schema = (ArraySchema) operation.getResponses().get("200").getContent().values().iterator().next().getSchema();
         assertNotNull(schema);
         assertEquals(schema.getItems().get$ref(), "#/components/schemas/User");
+
+        assertEquals(openAPI.getComponents().getSchemas().get("User").getRequired().get(0), "issue3438");
     }
 
     @Test(description = "test resource with subresources")
@@ -2058,7 +2059,7 @@ public void testTicket3082() {
                 "          type: string\n";
         SerializationMatchers.assertEqualsToYaml(openAPI, yaml);
     }
-    
+
     @Test(description = "Filter class return type")
     public void testTicket3074() {
         Reader reader = new Reader(new OpenAPI());

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/ResponseContentWithArrayResource.java
Patch:
@@ -36,5 +36,8 @@ public List<User> getUsers() {
 
     class User {
         public String foo;
+
+        @ArraySchema(arraySchema = @Schema(required = true), schema = @Schema(type = "string"))
+        public List<String> issue3438;
     }
 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/SwaggerAnnotationIntrospector.java
Patch:
@@ -60,6 +60,9 @@ public Boolean hasRequiredMarker(AnnotatedMember m) {
         }
         ArraySchema arraySchema = m.getAnnotation(ArraySchema.class);
         if (arraySchema != null) {
+            if (arraySchema.arraySchema().required()) {
+                return arraySchema.arraySchema().required();
+            }
             if (arraySchema.schema().required()) {
                 return arraySchema.schema().required();
             }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -705,7 +705,6 @@ public void test1(A a) {
     public void test2497() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(ResponseContentWithArrayResource.class);
-
         Paths paths = openAPI.getPaths();
         assertEquals(paths.size(), 1);
         PathItem pathItem = paths.get("/user");
@@ -715,6 +714,8 @@ public void test2497() {
         ArraySchema schema = (ArraySchema) operation.getResponses().get("200").getContent().values().iterator().next().getSchema();
         assertNotNull(schema);
         assertEquals(schema.getItems().get$ref(), "#/components/schemas/User");
+
+        assertEquals(openAPI.getComponents().getSchemas().get("User").getRequired().get(0), "issue3438");
     }
 
     @Test(description = "test resource with subresources")
@@ -2058,7 +2059,7 @@ public void testTicket3082() {
                 "          type: string\n";
         SerializationMatchers.assertEqualsToYaml(openAPI, yaml);
     }
-    
+
     @Test(description = "Filter class return type")
     public void testTicket3074() {
         Reader reader = new Reader(new OpenAPI());

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/ResponseContentWithArrayResource.java
Patch:
@@ -36,5 +36,8 @@ public List<User> getUsers() {
 
     class User {
         public String foo;
+
+        @ArraySchema(arraySchema = @Schema(required = true), schema = @Schema(type = "string"))
+        public List<String> issue3438;
     }
 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -291,11 +291,10 @@ private void addSchemaRef(Schema schema, Set<String> referencedDefinitions) {
             referencedDefinitions.add(schema.get$ref());
             return;
         }
-        if (schema.getDiscriminator() != null) {
+        if (schema.getDiscriminator() != null && schema.getDiscriminator().getMapping() != null) {
             for (Map.Entry<String, String> mapping: schema.getDiscriminator().getMapping().entrySet()) {
                 referencedDefinitions.add(mapping.getValue());
             }
-            return;
         }
 
         if (schema.getProperties() != null) {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/filter/SpecFilterTest.java
Patch:
@@ -268,6 +268,8 @@ public void shouldRemoveBrokenNestedRefs() throws IOException {
         assertNotNull(filtered.getComponents().getSchemas().get("oneOfNestedParentB"));
         assertNotNull(filtered.getComponents().getSchemas().get("discriminatorParent"));
         assertNotNull(filtered.getComponents().getSchemas().get("discriminatorMatchedChildA"));
+        assertNotNull(filtered.getComponents().getSchemas().get("discriminatorRefProperty"));
+        assertNotNull(filtered.getComponents().getSchemas().get("discriminatorParentRefProperty"));
         assertNotNull(filtered.getComponents().getSchemas().get("discriminatorMatchedChildB"));
     }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.core.util.Constants;
 import io.swagger.v3.core.util.Json;
+import io.swagger.v3.core.util.ObjectMapperFactory;
 import io.swagger.v3.core.util.PrimitiveType;
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.media.DiscriminatorMapping;
@@ -1424,7 +1425,8 @@ protected Object resolveExample(Annotated a, Annotation[] annotations, io.swagge
         if (schema != null) {
             if (!schema.example().isEmpty()) {
                 try {
-                    return Json.mapper().readTree(schema.example());
+                    ObjectMapper mapper = ObjectMapperFactory.buildStrictGenericObjectMapper();
+                    return mapper.readTree(schema.example());
                 } catch (IOException e) {
                     return schema.example();
                 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.core.util.Constants;
 import io.swagger.v3.core.util.Json;
+import io.swagger.v3.core.util.ObjectMapperFactory;
 import io.swagger.v3.core.util.PrimitiveType;
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.media.DiscriminatorMapping;
@@ -1424,7 +1425,8 @@ protected Object resolveExample(Annotated a, Annotation[] annotations, io.swagge
         if (schema != null) {
             if (!schema.example().isEmpty()) {
                 try {
-                    return Json.mapper().readTree(schema.example());
+                    ObjectMapper mapper = ObjectMapperFactory.buildStrictGenericObjectMapper();
+                    return mapper.readTree(schema.example());
                 } catch (IOException e) {
                     return schema.example();
                 }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/JsonDeserializationTest.java
Patch:
@@ -281,7 +281,7 @@ public void testDeserializeRefCallback() throws Exception {
                 "      summary: Simple get operation\n" +
                 "      operationId: getWithNoParameters\n" +
                 "      responses:\n" +
-                "        200:\n" +
+                "        \"200\":\n" +
                 "          description: voila!\n" +
                 "      callbacks:\n" +
                 "        testCallback1:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/properties/ArrayPropertyDeserializerTest.java
Patch:
@@ -16,7 +16,7 @@ public class ArrayPropertyDeserializerTest {
     private static final String yaml =
             "      operationId: something\n" +
                     "      responses:\n" +
-                    "        200:\n" +
+                    "        \"200\":\n" +
                     "          content:\n" +
                     "            '*/*':\n" +
                     "              examples:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/properties/MapPropertyDeserializerTest.java
Patch:
@@ -205,7 +205,7 @@ public void testMapDeserializationVendorExtensions() throws Exception {
     public void testIssue1261InlineSchemaExample() throws Exception {
         Operation operation = Yaml.mapper().readValue(
                 "      responses:\n" +
-                        "        200:\n" +
+                        "        \"200\":\n" +
                         "          content:\n" +
                         "            '*/*':\n" +
                         "              description: OK\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ContainerTypeSchemaTicket2636Test.java
Patch:
@@ -31,7 +31,7 @@ public void testContainerTypeSchemaTicket2636() throws Exception {
                 "              $ref: '#/components/schemas/MyModel'\n" +
                 "        required: true\n" +
                 "      responses:\n" +
-                "        200:\n" +
+                "        \"200\":\n" +
                 "          description: voila!\n" +
                 "components:\n" +
                 "  schemas:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/EnumTest.java
Patch:
@@ -38,14 +38,14 @@ public void testEnum() throws IOException {
             "          - A\n" +
             "          - B\n" +
             "      responses:\n" +
-            "        200:\n" +
+            "        \"200\":\n" +
             "          content:\n" +
             "            application/json:\n" +
             "              schema:\n" +
             "                type: array\n" +
             "                items:\n" +
             "                  $ref: '#/components/schemas/TaskDTO'\n" +
-            "        404:\n" +
+            "        \"404\":\n" +
             "          description: User not found\n" +
             "components:\n" +
             "  schemas:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/MergedOperationTest.java
Patch:
@@ -148,7 +148,7 @@ public void testRequestBody() {
                 "            schema:\n" +
                 "              $ref: '#/components/schemas/InputValue'\n" +
                 "      responses:\n" +
-                "        201:\n" +
+                "        \"201\":\n" +
                 "          description: value successfully processed\n" +
                 "components:\n" +
                 "  schemas:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/RefParameter3074Resource.java
Patch:
@@ -19,12 +19,12 @@ public class RefParameter3074Resource {
             "        summary: Get an employee\n" +
             "        operationId: getEmployee\n" +
             "        responses:\n" +
-            "          200:\n" +
+            "          \"200\":\n" +
             "            content:\n" +
             "              application/json:\n" +
             "                schema:\n" +
             "                   $ref: '#/components/schemas/Employee'\n" +
-            "          500:\n" +
+            "          \"500\":\n" +
             "            content:\n" +
             "              application/json:\n" +
             "                schema:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -497,10 +497,10 @@ public ExtensionUser setUser(
                     "                  description: the generated UUID\n" +
                     "                  format: uuid\n" +
                     "              responses:\n" +
-                    "                200:\n" +
+                    "                \"200\":\n" +
                     "                  description: Return this code if the callback was received and processed\n" +
                     "                    successfully\n" +
-                    "                205:\n" +
+                    "                \"205\":\n" +
                     "                  description: Return this code to unsubscribe from future data updates\n" +
                     "                default:\n" +
                     "                  description: All other response codes will disable this callback\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/JsonDeserializationTest.java
Patch:
@@ -281,7 +281,7 @@ public void testDeserializeRefCallback() throws Exception {
                 "      summary: Simple get operation\n" +
                 "      operationId: getWithNoParameters\n" +
                 "      responses:\n" +
-                "        200:\n" +
+                "        \"200\":\n" +
                 "          description: voila!\n" +
                 "      callbacks:\n" +
                 "        testCallback1:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/properties/ArrayPropertyDeserializerTest.java
Patch:
@@ -16,7 +16,7 @@ public class ArrayPropertyDeserializerTest {
     private static final String yaml =
             "      operationId: something\n" +
                     "      responses:\n" +
-                    "        200:\n" +
+                    "        \"200\":\n" +
                     "          content:\n" +
                     "            '*/*':\n" +
                     "              examples:\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/properties/MapPropertyDeserializerTest.java
Patch:
@@ -205,7 +205,7 @@ public void testMapDeserializationVendorExtensions() throws Exception {
     public void testIssue1261InlineSchemaExample() throws Exception {
         Operation operation = Yaml.mapper().readValue(
                 "      responses:\n" +
-                        "        200:\n" +
+                        "        \"200\":\n" +
                         "          content:\n" +
                         "            '*/*':\n" +
                         "              description: OK\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ContainerTypeSchemaTicket2636Test.java
Patch:
@@ -31,7 +31,7 @@ public void testContainerTypeSchemaTicket2636() throws Exception {
                 "              $ref: '#/components/schemas/MyModel'\n" +
                 "        required: true\n" +
                 "      responses:\n" +
-                "        200:\n" +
+                "        \"200\":\n" +
                 "          description: voila!\n" +
                 "components:\n" +
                 "  schemas:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/EnumTest.java
Patch:
@@ -38,14 +38,14 @@ public void testEnum() throws IOException {
             "          - A\n" +
             "          - B\n" +
             "      responses:\n" +
-            "        200:\n" +
+            "        \"200\":\n" +
             "          content:\n" +
             "            application/json:\n" +
             "              schema:\n" +
             "                type: array\n" +
             "                items:\n" +
             "                  $ref: '#/components/schemas/TaskDTO'\n" +
-            "        404:\n" +
+            "        \"404\":\n" +
             "          description: User not found\n" +
             "components:\n" +
             "  schemas:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/MergedOperationTest.java
Patch:
@@ -148,7 +148,7 @@ public void testRequestBody() {
                 "            schema:\n" +
                 "              $ref: '#/components/schemas/InputValue'\n" +
                 "      responses:\n" +
-                "        201:\n" +
+                "        \"201\":\n" +
                 "          description: value successfully processed\n" +
                 "components:\n" +
                 "  schemas:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/RefParameter3074Resource.java
Patch:
@@ -19,12 +19,12 @@ public class RefParameter3074Resource {
             "        summary: Get an employee\n" +
             "        operationId: getEmployee\n" +
             "        responses:\n" +
-            "          200:\n" +
+            "          \"200\":\n" +
             "            content:\n" +
             "              application/json:\n" +
             "                schema:\n" +
             "                   $ref: '#/components/schemas/Employee'\n" +
-            "          500:\n" +
+            "          \"500\":\n" +
             "            content:\n" +
             "              application/json:\n" +
             "                schema:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -497,10 +497,10 @@ public ExtensionUser setUser(
                     "                  description: the generated UUID\n" +
                     "                  format: uuid\n" +
                     "              responses:\n" +
-                    "                200:\n" +
+                    "                \"200\":\n" +
                     "                  description: Return this code if the callback was received and processed\n" +
                     "                    successfully\n" +
-                    "                205:\n" +
+                    "                \"205\":\n" +
                     "                  description: Return this code to unsubscribe from future data updates\n" +
                     "                default:\n" +
                     "                  description: All other response codes will disable this callback\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -317,7 +317,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
          */
         Schema resolvedModel = context.resolve(annotatedType);
         if (resolvedModel != null) {
-            if (name.equals(resolvedModel.getName())) {
+            if (name != null && name.equals(resolvedModel.getName())) {
                 return resolvedModel;
             }
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -317,7 +317,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
          */
         Schema resolvedModel = context.resolve(annotatedType);
         if (resolvedModel != null) {
-            if (name.equals(resolvedModel.getName())) {
+            if (name != null && name.equals(resolvedModel.getName())) {
                 return resolvedModel;
             }
         }

File: modules/swagger-gradle-plugin/src/test/java/io/swagger/v3/plugins/gradle/SwaggerResolveTest.java
Patch:
@@ -77,7 +77,8 @@ public void testSwaggerResolveTask() throws IOException {
                 "sourceSets {\n" +
                 "    test {\n" +
                 "        java {\n" +
-                "            srcDirs = ['" + new File("src/test/javatest").getAbsolutePath() + "']\n" +
+                "            srcDirs('" + new File("src/test/java").getAbsolutePath() + "')\n" +
+                "            exclude('**/*Test.java')\n" +
                 "        }\n" +
                 "    }\n" +
                 "}\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1640,7 +1640,7 @@ protected void resolveDiscriminatorProperty(JavaType type, ModelConverterContext
                 if (modelToUpdate.getProperties() == null || !modelToUpdate.getProperties().keySet().contains(typeInfoProp)) {
                     Schema discriminatorSchema = new StringSchema().name(typeInfoProp);
                     modelToUpdate.addProperties(typeInfoProp, discriminatorSchema);
-                    if (modelToUpdate.getRequired() == null || !model.getRequired().contains(typeInfoProp)) {
+                    if (modelToUpdate.getRequired() == null || !modelToUpdate.getRequired().contains(typeInfoProp)) {
                         modelToUpdate.addRequiredItem(typeInfoProp);
                     }
                 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1640,7 +1640,7 @@ protected void resolveDiscriminatorProperty(JavaType type, ModelConverterContext
                 if (modelToUpdate.getProperties() == null || !modelToUpdate.getProperties().keySet().contains(typeInfoProp)) {
                     Schema discriminatorSchema = new StringSchema().name(typeInfoProp);
                     modelToUpdate.addProperties(typeInfoProp, discriminatorSchema);
-                    if (modelToUpdate.getRequired() == null || !model.getRequired().contains(typeInfoProp)) {
+                    if (modelToUpdate.getRequired() == null || !modelToUpdate.getRequired().contains(typeInfoProp)) {
                         modelToUpdate.addRequiredItem(typeInfoProp);
                     }
                 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ObjectMapperFactory.java
Patch:
@@ -13,10 +13,10 @@
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import io.swagger.v3.core.jackson.SchemaSerializer;
 import io.swagger.v3.core.jackson.mixin.ComponentsMixin;
 import io.swagger.v3.core.jackson.mixin.DateSchemaMixin;
-import io.swagger.v3.core.jackson.mixin.DateTimeSchemaMixin;
 import io.swagger.v3.core.jackson.mixin.ExtensionsMixin;
 import io.swagger.v3.core.jackson.mixin.OpenAPIMixin;
 import io.swagger.v3.core.jackson.mixin.OperationMixin;
@@ -96,6 +96,7 @@ public JsonSerializer<?> modifySerializer(
 
         Module deserializerModule = new DeserializationModule();
         mapper.registerModule(deserializerModule);
+        mapper.registerModule(new JavaTimeModule());
 
         Map<Class<?>, Class<?>> sourceMixins = new LinkedHashMap<>();
 
@@ -131,7 +132,6 @@ public JsonSerializer<?> modifySerializer(
         sourceMixins.put(XML.class, ExtensionsMixin.class);
         sourceMixins.put(Schema.class, ExtensionsMixin.class);
         sourceMixins.put(DateSchema.class, DateSchemaMixin.class);
-        sourceMixins.put(DateTimeSchema.class, DateTimeSchemaMixin.class);
 
         mapper.setMixIns(sourceMixins);
         mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/Ticket2340Resource.java
Patch:
@@ -3,8 +3,8 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.swagger.v3.oas.annotations.parameters.RequestBody;
 
+import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
@@ -14,9 +14,10 @@
 public class Ticket2340Resource {
 
     @Produces({ MediaType.APPLICATION_JSON })
+    @Consumes({ MediaType.APPLICATION_JSON })
     @Path("/test")
     @POST
-    public String getBook(@RequestBody Animal animal) {
+    public String getAnimal(Animal animal) {
         return "ok";
     }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ObjectMapperFactory.java
Patch:
@@ -13,10 +13,10 @@
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import io.swagger.v3.core.jackson.SchemaSerializer;
 import io.swagger.v3.core.jackson.mixin.ComponentsMixin;
 import io.swagger.v3.core.jackson.mixin.DateSchemaMixin;
-import io.swagger.v3.core.jackson.mixin.DateTimeSchemaMixin;
 import io.swagger.v3.core.jackson.mixin.ExtensionsMixin;
 import io.swagger.v3.core.jackson.mixin.OpenAPIMixin;
 import io.swagger.v3.core.jackson.mixin.OperationMixin;
@@ -96,6 +96,7 @@ public JsonSerializer<?> modifySerializer(
 
         Module deserializerModule = new DeserializationModule();
         mapper.registerModule(deserializerModule);
+        mapper.registerModule(new JavaTimeModule());
 
         Map<Class<?>, Class<?>> sourceMixins = new LinkedHashMap<>();
 
@@ -131,7 +132,6 @@ public JsonSerializer<?> modifySerializer(
         sourceMixins.put(XML.class, ExtensionsMixin.class);
         sourceMixins.put(Schema.class, ExtensionsMixin.class);
         sourceMixins.put(DateSchema.class, DateSchemaMixin.class);
-        sourceMixins.put(DateTimeSchema.class, DateTimeSchemaMixin.class);
 
         mapper.setMixIns(sourceMixins);
         mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/Ticket2340Resource.java
Patch:
@@ -3,8 +3,8 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 import com.fasterxml.jackson.annotation.JsonTypeName;
-import io.swagger.v3.oas.annotations.parameters.RequestBody;
 
+import javax.ws.rs.Consumes;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
@@ -14,9 +14,10 @@
 public class Ticket2340Resource {
 
     @Produces({ MediaType.APPLICATION_JSON })
+    @Consumes({ MediaType.APPLICATION_JSON })
     @Path("/test")
     @POST
-    public String getBook(@RequestBody Animal animal) {
+    public String getAnimal(Animal animal) {
         return "ok";
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateSchema.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.swagger.v3.oas.models.media;
 
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Objects;
 
@@ -50,6 +51,8 @@ protected Date cast(Object value) {
             try {
                 if (value instanceof Date) {
                     return (Date) value;
+                } else if (value instanceof String) {
+                    return new SimpleDateFormat("yyyy-MM-dd Z").parse((String)value + " UTC");
                 }
             } catch (Exception e) {
             }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateTimeSchema.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.swagger.v3.oas.models.media;
 
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
 import java.util.Objects;
@@ -51,6 +52,8 @@ protected Date cast(Object value) {
             try {
                 if (value instanceof Date) {
                     return (Date) value;
+                } else if (value instanceof String) {
+                    return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX").parse((String) value);
                 }
             } catch (Exception e) {
             }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -691,7 +691,7 @@ public void setExample(Object example) {
     }
 
     public Schema example(Object example) {
-        this.example = cast(example);
+        setExample(example);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateSchema.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.swagger.v3.oas.models.media;
 
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Objects;
 
@@ -50,6 +51,8 @@ protected Date cast(Object value) {
             try {
                 if (value instanceof Date) {
                     return (Date) value;
+                } else if (value instanceof String) {
+                    return new SimpleDateFormat("yyyy-MM-dd Z").parse((String)value + " UTC");
                 }
             } catch (Exception e) {
             }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/DateTimeSchema.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.swagger.v3.oas.models.media;
 
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
 import java.util.Objects;
@@ -51,6 +52,8 @@ protected Date cast(Object value) {
             try {
                 if (value instanceof Date) {
                     return (Date) value;
+                } else if (value instanceof String) {
+                    return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX").parse((String) value);
                 }
             } catch (Exception e) {
             }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/Schema.java
Patch:
@@ -691,7 +691,7 @@ public void setExample(Object example) {
     }
 
     public Schema example(Object example) {
-        this.example = cast(example);
+        setExample(example);
         return this;
     }
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/ComposedSchemaTest.java
Patch:
@@ -123,5 +123,4 @@ public void readComposedSchema_ticket2616() {
         model = schemas.get("objects");
         Assert.assertNull(model);
     }
-
 }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -1148,7 +1148,7 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
         } else {
             Optional<Schema> schemaFromAnnotation = AnnotationsUtils.getSchemaFromAnnotation(schemaAnnotation, components, jsonViewAnnotation);
             if (schemaFromAnnotation.isPresent()) {
-                if (StringUtils.isBlank(schemaFromAnnotation.get().get$ref()) && StringUtils.isBlank(schemaFromAnnotation.get().getType())) {
+                if (StringUtils.isBlank(schemaFromAnnotation.get().get$ref()) && StringUtils.isBlank(schemaFromAnnotation.get().getType()) && !(schemaFromAnnotation.get() instanceof ComposedSchema)) {
                     // default to string
                     schemaFromAnnotation.get().setType("string");
                 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -420,7 +420,6 @@ public void testGetResponsesWithComposition() {
                 "          content:\n" +
                 "            application/json:\n" +
                 "              schema:\n" +
-                "                type: string\n" +
                 "                allOf:\n" +
                 "                - $ref: '#/components/schemas/MultipleSub1Bean'\n" +
                 "                - $ref: '#/components/schemas/MultipleSub2Bean'\n" +
@@ -443,7 +442,6 @@ public void testGetResponsesWithComposition() {
                 "          content:\n" +
                 "            application/json:\n" +
                 "              schema:\n" +
-                "                type: string\n" +
                 "                anyOf:\n" +
                 "                - $ref: '#/components/schemas/MultipleSub1Bean'\n" +
                 "                - $ref: '#/components/schemas/MultipleSub2Bean'\n" +
@@ -466,7 +464,6 @@ public void testGetResponsesWithComposition() {
                 "          content:\n" +
                 "            application/json:\n" +
                 "              schema:\n" +
-                "                type: string\n" +
                 "                oneOf:\n" +
                 "                - $ref: '#/components/schemas/MultipleSub1Bean'\n" +
                 "                - $ref: '#/components/schemas/MultipleSub2Bean'\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -1148,7 +1148,7 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
         } else {
             Optional<Schema> schemaFromAnnotation = AnnotationsUtils.getSchemaFromAnnotation(schemaAnnotation, components, jsonViewAnnotation);
             if (schemaFromAnnotation.isPresent()) {
-                if (StringUtils.isBlank(schemaFromAnnotation.get().get$ref()) && StringUtils.isBlank(schemaFromAnnotation.get().getType())) {
+                if (StringUtils.isBlank(schemaFromAnnotation.get().get$ref()) && StringUtils.isBlank(schemaFromAnnotation.get().getType()) && !(schemaFromAnnotation.get() instanceof ComposedSchema)) {
                     // default to string
                     schemaFromAnnotation.get().setType("string");
                 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -420,7 +420,6 @@ public void testGetResponsesWithComposition() {
                 "          content:\n" +
                 "            application/json:\n" +
                 "              schema:\n" +
-                "                type: string\n" +
                 "                allOf:\n" +
                 "                - $ref: '#/components/schemas/MultipleSub1Bean'\n" +
                 "                - $ref: '#/components/schemas/MultipleSub2Bean'\n" +
@@ -443,7 +442,6 @@ public void testGetResponsesWithComposition() {
                 "          content:\n" +
                 "            application/json:\n" +
                 "              schema:\n" +
-                "                type: string\n" +
                 "                anyOf:\n" +
                 "                - $ref: '#/components/schemas/MultipleSub1Bean'\n" +
                 "                - $ref: '#/components/schemas/MultipleSub2Bean'\n" +
@@ -466,7 +464,6 @@ public void testGetResponsesWithComposition() {
                 "          content:\n" +
                 "            application/json:\n" +
                 "              schema:\n" +
-                "                type: string\n" +
                 "                oneOf:\n" +
                 "                - $ref: '#/components/schemas/MultipleSub1Bean'\n" +
                 "                - $ref: '#/components/schemas/MultipleSub2Bean'\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -55,8 +55,8 @@ public OpenAPI filter(OpenAPI openAPI, OpenAPISpecFilter filter, Map<String, Lis
         final Set<String> filteredTags = new HashSet<>();
 
         Paths clonedPaths = new Paths();
-        for (String resourcePath : openAPI.getPaths().keySet()) {
-            PathItem pathItem = openAPI.getPaths().get(resourcePath);
+        for (String resourcePath : filteredOpenAPI.getPaths().keySet()) {
+            PathItem pathItem = filteredOpenAPI.getPaths().get(resourcePath);
 
             PathItem filteredPathItem = filterPathItem(filter, pathItem, resourcePath, params, cookies, headers);
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -55,8 +55,8 @@ public OpenAPI filter(OpenAPI openAPI, OpenAPISpecFilter filter, Map<String, Lis
         final Set<String> filteredTags = new HashSet<>();
 
         Paths clonedPaths = new Paths();
-        for (String resourcePath : openAPI.getPaths().keySet()) {
-            PathItem pathItem = openAPI.getPaths().get(resourcePath);
+        for (String resourcePath : filteredOpenAPI.getPaths().keySet()) {
+            PathItem pathItem = filteredOpenAPI.getPaths().get(resourcePath);
 
             PathItem filteredPathItem = filterPathItem(filter, pathItem, resourcePath, params, cookies, headers);
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/PrimitiveType.java
Patch:
@@ -212,7 +212,7 @@ public Schema createProperty() {
         dms.put("string_date-time", "date-time");
         dms.put("string_partial-time", "partial-time");
         dms.put("string_password", "password");
-        dms.put("boolean", "boolean");
+        dms.put("boolean_", "boolean");
         dms.put("object_", "object");
         datatypeMappings = Collections.unmodifiableMap(dms);
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/PrimitiveType.java
Patch:
@@ -212,7 +212,7 @@ public Schema createProperty() {
         dms.put("string_date-time", "date-time");
         dms.put("string_partial-time", "partial-time");
         dms.put("string_password", "password");
-        dms.put("boolean", "boolean");
+        dms.put("boolean_", "boolean");
         dms.put("object_", "object");
         datatypeMappings = Collections.unmodifiableMap(dms);
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -635,7 +635,9 @@ public static Optional<Server> getServer(io.swagger.v3.oas.annotations.servers.S
                 serverVariableObject.setDefault(serverVariable.defaultValue());
             }
             if (serverVariable.allowableValues() != null && serverVariable.allowableValues().length > 0) {
-                serverVariableObject.setEnum(Arrays.asList(serverVariable.allowableValues()));
+                if (StringUtils.isNotBlank(serverVariable.allowableValues()[0])) {
+                    serverVariableObject.setEnum(Arrays.asList(serverVariable.allowableValues()));
+                }
             }
             if (serverVariable.extensions() != null && serverVariable.extensions().length > 0) {
                 Map<String, Object> extensions = AnnotationsUtils.getExtensions(serverVariable.extensions());

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -387,8 +387,6 @@ public ExtensionUser setUser(
                     "servers:\n" +
                     "- variables:\n" +
                     "    aa:\n" +
-                    "      enum:\n" +
-                    "      - \"\"\n" +
                     "      default: aa\n" +
                     "      x-servervar:\n" +
                     "        name: Josh\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -635,7 +635,9 @@ public static Optional<Server> getServer(io.swagger.v3.oas.annotations.servers.S
                 serverVariableObject.setDefault(serverVariable.defaultValue());
             }
             if (serverVariable.allowableValues() != null && serverVariable.allowableValues().length > 0) {
-                serverVariableObject.setEnum(Arrays.asList(serverVariable.allowableValues()));
+                if (StringUtils.isNotBlank(serverVariable.allowableValues()[0])) {
+                    serverVariableObject.setEnum(Arrays.asList(serverVariable.allowableValues()));
+                }
             }
             if (serverVariable.extensions() != null && serverVariable.extensions().length > 0) {
                 Map<String, Object> extensions = AnnotationsUtils.getExtensions(serverVariable.extensions());

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -387,8 +387,6 @@ public ExtensionUser setUser(
                     "servers:\n" +
                     "- variables:\n" +
                     "    aa:\n" +
-                    "      enum:\n" +
-                    "      - \"\"\n" +
                     "      default: aa\n" +
                     "      x-servervar:\n" +
                     "        name: Josh\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/BeanParamTest.java
Patch:
@@ -33,7 +33,7 @@ public void shouldSerializeTypeParameter() {
         Parameter param = getOperationParams.get(0);
         Assert.assertEquals(param.getName(), "listOfStrings");
         Schema<?> schema = param.getSchema();
-        // These are the a checks:
+        // These are the important checks:
         Assert.assertEquals(schema.getClass(), ArraySchema.class);
         Assert.assertEquals(((ArraySchema) schema).getItems().getType(), "string");   
     }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ArraySchema.java
Patch:
@@ -77,7 +77,6 @@ public String toString() {
         sb.append("class ArraySchema {\n");
         sb.append("    ").append(toIndentedString(super.toString())).append("\n");
         sb.append("    items: ").append(toIndentedString(items)).append("\n");
-        sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
         sb.append("}");
         return sb.toString();
     }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/media/ArraySchema.java
Patch:
@@ -77,7 +77,6 @@ public String toString() {
         sb.append("class ArraySchema {\n");
         sb.append("    ").append(toIndentedString(super.toString())).append("\n");
         sb.append("    items: ").append(toIndentedString(items)).append("\n");
-        sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
         sb.append("}");
         return sb.toString();
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/ExtensionUser.java
Patch:
@@ -108,10 +108,8 @@ public void setPhone(String phone) {
     }
 
     @XmlElement(name = "userStatus")
-    //@Schema(description = "User Status", type = "string", allowableValues = {"1-registered", "2-active", "3-closed"})
     @Schema(
             description = "User Status",
-            allowableValues = "1-registered,2-active,3-closed",
             extensions = {
                     @Extension(name = "x-userStatus", properties = {
                             @ExtensionProperty(name = "name", value = "Josh")}),

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/User.java
Patch:
@@ -96,8 +96,7 @@ public void setPhone(String phone) {
     }
 
     @XmlElement(name = "userStatus")
-    //@Schema(description = "User Status", type = "string", allowableValues = {"1-registered", "2-active", "3-closed"})
-    @Schema(description = "User Status", allowableValues = "1-registered,2-active,3-closed")
+    @Schema(description = "User Status") //, allowableValues = {"1","2","3"})
     public int getUserStatus() {
         return userStatus;
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/ExtensionUser.java
Patch:
@@ -108,10 +108,8 @@ public void setPhone(String phone) {
     }
 
     @XmlElement(name = "userStatus")
-    //@Schema(description = "User Status", type = "string", allowableValues = {"1-registered", "2-active", "3-closed"})
     @Schema(
             description = "User Status",
-            allowableValues = "1-registered,2-active,3-closed",
             extensions = {
                     @Extension(name = "x-userStatus", properties = {
                             @ExtensionProperty(name = "name", value = "Josh")}),

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/User.java
Patch:
@@ -96,8 +96,7 @@ public void setPhone(String phone) {
     }
 
     @XmlElement(name = "userStatus")
-    //@Schema(description = "User Status", type = "string", allowableValues = {"1-registered", "2-active", "3-closed"})
-    @Schema(description = "User Status", allowableValues = "1-registered,2-active,3-closed")
+    @Schema(description = "User Status") //, allowableValues = {"1","2","3"})
     public int getUserStatus() {
         return userStatus;
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -254,7 +254,7 @@ protected Map<String, Schema> filterComponentsSchema(OpenAPISpecFilter filter, M
                         if (property != null) {
                             Optional<Schema> filteredProperty = filter.filterSchemaProperty(property, definition, (String) propName, params, cookies, headers);
                             if (filteredProperty.isPresent()) {
-                                clonedProperties.put((String) propName, property);
+                                clonedProperties.put((String) propName, filteredProperty.get());
                             }
                         }
                     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/filter/SpecFilter.java
Patch:
@@ -254,7 +254,7 @@ protected Map<String, Schema> filterComponentsSchema(OpenAPISpecFilter filter, M
                         if (property != null) {
                             Optional<Schema> filteredProperty = filter.filterSchemaProperty(property, definition, (String) propName, params, cookies, headers);
                             if (filteredProperty.isPresent()) {
-                                clonedProperties.put((String) propName, property);
+                                clonedProperties.put((String) propName, filteredProperty.get());
                             }
                         }
                     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/converter/ModelConverters.java
Patch:
@@ -26,7 +26,7 @@ public class ModelConverters {
     private final Set<String> skippedClasses = new HashSet<String>();
 
     public ModelConverters() {
-        converters = new CopyOnWriteArrayList<ModelConverter>();
+        converters = new CopyOnWriteArrayList<>();
         converters.add(new ModelResolver(Json.mapper()));
     }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -499,7 +499,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
 
             AnnotatedMember member = propDef.getPrimaryMember();
             if (member == null) {
-                final BeanDescription deserBeanDesc = Json.mapper().getDeserializationConfig().introspect(type);
+                final BeanDescription deserBeanDesc = _mapper.getDeserializationConfig().introspect(type);
                 List<BeanPropertyDefinition> deserProperties = deserBeanDesc.findProperties();
                 for (BeanPropertyDefinition prop : deserProperties) {
                     if (StringUtils.isNotBlank(prop.getInternalName()) && prop.getInternalName().equals(propDef.getInternalName())) {
@@ -1374,7 +1374,7 @@ protected io.swagger.v3.oas.annotations.media.Schema.AccessMode resolveAccessMod
 
 
         if (access == null) {
-            final BeanDescription beanDesc = Json.mapper().getDeserializationConfig().introspect(type);
+            final BeanDescription beanDesc = _mapper.getDeserializationConfig().introspect(type);
             List<BeanPropertyDefinition> properties = beanDesc.findProperties();
             for (BeanPropertyDefinition prop : properties) {
                 if (StringUtils.isNotBlank(prop.getInternalName()) && prop.getInternalName().equals(propDef.getInternalName())) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/converter/ModelConverters.java
Patch:
@@ -26,7 +26,7 @@ public class ModelConverters {
     private final Set<String> skippedClasses = new HashSet<String>();
 
     public ModelConverters() {
-        converters = new CopyOnWriteArrayList<ModelConverter>();
+        converters = new CopyOnWriteArrayList<>();
         converters.add(new ModelResolver(Json.mapper()));
     }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -499,7 +499,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
 
             AnnotatedMember member = propDef.getPrimaryMember();
             if (member == null) {
-                final BeanDescription deserBeanDesc = Json.mapper().getDeserializationConfig().introspect(type);
+                final BeanDescription deserBeanDesc = _mapper.getDeserializationConfig().introspect(type);
                 List<BeanPropertyDefinition> deserProperties = deserBeanDesc.findProperties();
                 for (BeanPropertyDefinition prop : deserProperties) {
                     if (StringUtils.isNotBlank(prop.getInternalName()) && prop.getInternalName().equals(propDef.getInternalName())) {
@@ -1374,7 +1374,7 @@ protected io.swagger.v3.oas.annotations.media.Schema.AccessMode resolveAccessMod
 
 
         if (access == null) {
-            final BeanDescription beanDesc = Json.mapper().getDeserializationConfig().introspect(type);
+            final BeanDescription beanDesc = _mapper.getDeserializationConfig().introspect(type);
             List<BeanPropertyDefinition> properties = beanDesc.findProperties();
             for (BeanPropertyDefinition prop : properties) {
                 if (StringUtils.isNotBlank(prop.getInternalName()) && prop.getInternalName().equals(propDef.getInternalName())) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -1094,8 +1094,10 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
                     schemaMap.forEach((key, schema) -> {
                         components.addSchemas(key, schema);
                     });
-                    if (resolvedSchema.schema != null) {
+                    if (resolvedSchema.schema != null && StringUtils.isNotBlank(resolvedSchema.schema.getName())) {
                         schemaObject.set$ref(COMPONENTS_REF + resolvedSchema.schema.getName());
+                    } else if (resolvedSchema.schema != null){
+                        schemaObject = resolvedSchema.schema;
                     }
                 }
             }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -1094,8 +1094,10 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
                     schemaMap.forEach((key, schema) -> {
                         components.addSchemas(key, schema);
                     });
-                    if (resolvedSchema.schema != null) {
+                    if (resolvedSchema.schema != null && StringUtils.isNotBlank(resolvedSchema.schema.getName())) {
                         schemaObject.set$ref(COMPONENTS_REF + resolvedSchema.schema.getName());
+                    } else if (resolvedSchema.schema != null){
+                        schemaObject = resolvedSchema.schema;
                     }
                 }
             }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -618,7 +618,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
 
                 if (property != null) {
                     if (property.get$ref() == null) {
-                        if (!"object".equals(property.getType())) {
+                        if (!"object".equals(property.getType()) || (property instanceof MapSchema)) {
                             try {
                                 String cloneName = property.getName();
                                 property = Json.mapper().readValue(Json.pretty(property), Schema.class);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -618,7 +618,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
 
                 if (property != null) {
                     if (property.get$ref() == null) {
-                        if (!"object".equals(property.getType())) {
+                        if (!"object".equals(property.getType()) || (property instanceof MapSchema)) {
                             try {
                                 String cloneName = property.getName();
                                 property = Json.mapper().readValue(Json.pretty(property), Schema.class);

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/headers/Header.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * The annotation may be used to add one or more headers to the definition of a response or as attribute of content
- * encoding by definining it as field {@link io.swagger.v3.oas.annotations.responses.ApiResponse#headers()} or {@link io.swagger.v3.oas.annotations.media.Content#encoding()}.
+ * encoding by defining it as field {@link io.swagger.v3.oas.annotations.responses.ApiResponse#headers()} or {@link io.swagger.v3.oas.annotations.media.Content#encoding()}.
  * <p>Please note that request headers are defined as Header {@link io.swagger.v3.oas.annotations.Parameter}.</p>
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#headerObject">Header (OpenAPI specification)</a>

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Content.java
Patch:
@@ -25,7 +25,7 @@
 import java.lang.annotation.Target;
 
 /**
- * The annotation may be used to define the content/media type  of a parameter, request or response, by definining it as
+ * The annotation may be used to define the content/media type  of a parameter, request or response, by defining it as
  * field {@link io.swagger.v3.oas.annotations.Parameter#content()}, {@link io.swagger.v3.oas.annotations.parameters.RequestBody#content()} or {@link io.swagger.v3.oas.annotations.responses.ApiResponse#content()}.
  * <p>If {@link Content#schema()} is defined, swagger-jaxrs2 reader engine will consider it along with
  * JAX-RS annotations, element type and context as input to resolve the annotated element into an OpenAPI schema

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Encoding.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The annotation may be used to add encoding details to the definition of a parameter, request or response content,
- * by definining it as field {@link Content#encoding()}
+ * by defining it as field {@link Content#encoding()}
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#encodingObject">Encoding (OpenAPI specification)</a>
  * @see Content

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/ExampleObject.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The annotation may be used to add one or more examples to the definition of a parameter, request or response content,
- * by definining it as field {@link io.swagger.v3.oas.annotations.Parameter#examples()} or {@link Content#examples()}
+ * by defining it as field {@link io.swagger.v3.oas.annotations.Parameter#examples()} or {@link Content#examples()}
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#exampleObject">Example (OpenAPI specification)</a>
  **/

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/PetResourceTest.java
Patch:
@@ -250,7 +250,7 @@ private static List<Class> findClasses(final File directory, final String packag
     }
 
     /**
-     * Compare a class that were read and parsed to a yaml aginst a yaml file.
+     * Compare a class that were read and parsed to a yaml against a yaml file.
      *
      * @param clazz  to read.
      * @param source where is the yaml.
@@ -264,4 +264,4 @@ private void compare(final Class clazz, final String source) {
             fail();
         }
     }
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -394,7 +394,7 @@ public void testCompletePetResource() throws IOException {
                 "  /pet/findByTags:\n" +
                 "    get:\n" +
                 "      summary: Finds Pets by tags\n" +
-                "      description: Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.\n" +
+                "      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n" +
                 "      operationId: findPetsByTags\n" +
                 "      parameters:\n" +
                 "      - name: tags\n" +
@@ -557,7 +557,7 @@ public void testCompletePetResource() throws IOException {
                 "  /pet/findByStatus:\n" +
                 "    get:\n" +
                 "      summary: Finds Pets by status\n" +
-                "      description: Multiple status values can be provided with comma seperated strings\n" +
+                "      description: Multiple status values can be provided with comma separated strings\n" +
                 "      operationId: findPetsByStatus\n" +
                 "      parameters:\n" +
                 "      - name: status\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/petstore/PetResource.java
Patch:
@@ -130,7 +130,7 @@ public Response updatePet(
     @Path("/findByStatus")
     @Produces("application/xml")
     @Operation(summary = "Finds Pets by status",
-            description = "Multiple status values can be provided with comma seperated strings",
+            description = "Multiple status values can be provided with comma separated strings",
             responses = {
                     @ApiResponse(
                             content = @Content(mediaType = "application/json",
@@ -150,7 +150,7 @@ public Response findPetsByStatus(
     @Path("/findByTags")
     @Produces("application/json")
     @Operation(summary = "Finds Pets by tags",
-            description = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+            description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
             responses = {
                     @ApiResponse(description = "Pets matching criteria",
                             content = @Content(schema = @Schema(implementation = Pet.class))

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/PetResource.java
Patch:
@@ -131,7 +131,7 @@ public Response updatePet(
     @Path("/findByStatus")
     @Produces("application/xml")
     @Operation(summary = "Finds Pets by status",
-            description = "Multiple status values can be provided with comma seperated strings",
+            description = "Multiple status values can be provided with comma separated strings",
             responses = {
                     @ApiResponse(
                             content = @Content(mediaType = "application/json",
@@ -170,7 +170,7 @@ public Response findPetsByCategory(
     @Path("/findByTags")
     @Produces("application/json")
     @Operation(summary = "Finds Pets by tags",
-            description = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+            description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
             responses = {
                     @ApiResponse(description = "Pets matching criteria",
                             content = @Content(schema = @Schema(implementation = Pet.class))

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/PetResourceSlashesinPath.java
Patch:
@@ -131,7 +131,7 @@ public Response updatePet(
     @Path("/findByStatus")
     @Produces("application/xml")
     @Operation(summary = "Finds Pets by status",
-            description = "Multiple status values can be provided with comma seperated strings",
+            description = "Multiple status values can be provided with comma separated strings",
             responses = {
                     @ApiResponse(
                             content = @Content(mediaType = "application/json",
@@ -151,7 +151,7 @@ public Response findPetsByStatus(
     @Path("/findByTags")
     @Produces("application/json")
     @Operation(summary = "Finds Pets by tags",
-            description = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+            description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
             responses = {
                     @ApiResponse(description = "Pets matching criteria",
                             content = @Content(schema = @Schema(implementation = Pet.class))

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/ResolvedParameter.java
Patch:
@@ -8,5 +8,5 @@
 public class ResolvedParameter {
     public List<Parameter> parameters = new ArrayList<>();
     public Parameter requestBody;
-    public Parameter formParameter;
+    public List<Parameter> formParameters = new ArrayList<>();
 }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiContextBuilder.java
Patch:
@@ -28,6 +28,7 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             OpenApiContext rootCtx = OpenApiContextLocator.getInstance().getOpenApiContext(OpenApiContext.OPENAPI_CONTEXT_ID_DEFAULT);
             ctx = new GenericOpenApiContext()
                     .openApiConfiguration(openApiConfiguration)
+                    .id(ctxId)
                     .parent(rootCtx);
 
             if (ctx.getConfigLocation() == null && configLocation != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/JaxrsOpenApiContextBuilder.java
Patch:
@@ -28,6 +28,7 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
                     .servletConfig(servletConfig)
                     .app(application)
                     .openApiConfiguration(openApiConfiguration)
+                    .id(ctxId)
                     .parent(rootCtx);
 
             if (ctx.getConfigLocation() == null && configLocation != null) {

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/GenericOpenApiContextBuilder.java
Patch:
@@ -28,6 +28,7 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             OpenApiContext rootCtx = OpenApiContextLocator.getInstance().getOpenApiContext(OpenApiContext.OPENAPI_CONTEXT_ID_DEFAULT);
             ctx = new GenericOpenApiContext()
                     .openApiConfiguration(openApiConfiguration)
+                    .id(ctxId)
                     .parent(rootCtx);
 
             if (ctx.getConfigLocation() == null && configLocation != null) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/CallbackDeserializer.java
Patch:
@@ -28,6 +28,8 @@ public Callback deserialize(JsonParser jp, DeserializationContext ctxt)
             // if name start with `x-` consider it an extesion
             if (childName.startsWith("x-")) {
                 extensions.put(childName, Json.mapper().convertValue(child, Object.class));
+            } else if (childName.equals("$ref")) {
+                result.$ref(child.asText());
             } else {
                 result.put(childName, Json.mapper().convertValue(child, PathItem.class));
             }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/CallbackDeserializer.java
Patch:
@@ -28,6 +28,8 @@ public Callback deserialize(JsonParser jp, DeserializationContext ctxt)
             // if name start with `x-` consider it an extesion
             if (childName.startsWith("x-")) {
                 extensions.put(childName, Json.mapper().convertValue(child, Object.class));
+            } else if (childName.equals("$ref")) {
+                result.$ref(child.asText());
             } else {
                 result.put(childName, Json.mapper().convertValue(child, PathItem.class));
             }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/SecurityParser.java
Patch:
@@ -17,7 +17,7 @@
 
 public class SecurityParser {
 
-    static class SecuritySchemePair {
+    public static class SecuritySchemePair {
         public String key;
         public SecurityScheme securityScheme;
     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/SecurityParser.java
Patch:
@@ -17,7 +17,7 @@
 
 public class SecurityParser {
 
-    static class SecuritySchemePair {
+    public static class SecuritySchemePair {
         public String key;
         public SecurityScheme securityScheme;
     }

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/headers/Header.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * The annotation may be used to add one or more headers to the definition of a response or as attribute of content
- * encoding by definining it as field {@link io.swagger.v3.oas.annotations.responses.ApiResponse#headers()} or {@link io.swagger.v3.oas.annotations.media.Content#encoding()}.
+ * encoding by defining it as field {@link io.swagger.v3.oas.annotations.responses.ApiResponse#headers()} or {@link io.swagger.v3.oas.annotations.media.Content#encoding()}.
  * <p>Please note that request headers are defined as Header {@link io.swagger.v3.oas.annotations.Parameter}.</p>
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#headerObject">Header (OpenAPI specification)</a>

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Content.java
Patch:
@@ -25,7 +25,7 @@
 import java.lang.annotation.Target;
 
 /**
- * The annotation may be used to define the content/media type  of a parameter, request or response, by definining it as
+ * The annotation may be used to define the content/media type  of a parameter, request or response, by defining it as
  * field {@link io.swagger.v3.oas.annotations.Parameter#content()}, {@link io.swagger.v3.oas.annotations.parameters.RequestBody#content()} or {@link io.swagger.v3.oas.annotations.responses.ApiResponse#content()}.
  * <p>If {@link Content#schema()} is defined, swagger-jaxrs2 reader engine will consider it along with
  * JAX-RS annotations, element type and context as input to resolve the annotated element into an OpenAPI schema

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/Encoding.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The annotation may be used to add encoding details to the definition of a parameter, request or response content,
- * by definining it as field {@link Content#encoding()}
+ * by defining it as field {@link Content#encoding()}
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#encodingObject">Encoding (OpenAPI specification)</a>
  * @see Content

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/media/ExampleObject.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * The annotation may be used to add one or more examples to the definition of a parameter, request or response content,
- * by definining it as field {@link io.swagger.v3.oas.annotations.Parameter#examples()} or {@link Content#examples()}
+ * by defining it as field {@link io.swagger.v3.oas.annotations.Parameter#examples()} or {@link Content#examples()}
  *
  * @see <a target="_new" href="https://github.com/OAI/OpenAPI-Specification/blob/3.0.1/versions/3.0.1.md#exampleObject">Example (OpenAPI specification)</a>
  **/

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/PetResourceTest.java
Patch:
@@ -250,7 +250,7 @@ private static List<Class> findClasses(final File directory, final String packag
     }
 
     /**
-     * Compare a class that were read and parsed to a yaml aginst a yaml file.
+     * Compare a class that were read and parsed to a yaml against a yaml file.
      *
      * @param clazz  to read.
      * @param source where is the yaml.
@@ -264,4 +264,4 @@ private void compare(final Class clazz, final String source) {
             fail();
         }
     }
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -394,7 +394,7 @@ public void testCompletePetResource() throws IOException {
                 "  /pet/findByTags:\n" +
                 "    get:\n" +
                 "      summary: Finds Pets by tags\n" +
-                "      description: Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.\n" +
+                "      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n" +
                 "      operationId: findPetsByTags\n" +
                 "      parameters:\n" +
                 "      - name: tags\n" +
@@ -557,7 +557,7 @@ public void testCompletePetResource() throws IOException {
                 "  /pet/findByStatus:\n" +
                 "    get:\n" +
                 "      summary: Finds Pets by status\n" +
-                "      description: Multiple status values can be provided with comma seperated strings\n" +
+                "      description: Multiple status values can be provided with comma separated strings\n" +
                 "      operationId: findPetsByStatus\n" +
                 "      parameters:\n" +
                 "      - name: status\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/petstore/PetResource.java
Patch:
@@ -130,7 +130,7 @@ public Response updatePet(
     @Path("/findByStatus")
     @Produces("application/xml")
     @Operation(summary = "Finds Pets by status",
-            description = "Multiple status values can be provided with comma seperated strings",
+            description = "Multiple status values can be provided with comma separated strings",
             responses = {
                     @ApiResponse(
                             content = @Content(mediaType = "application/json",
@@ -150,7 +150,7 @@ public Response findPetsByStatus(
     @Path("/findByTags")
     @Produces("application/json")
     @Operation(summary = "Finds Pets by tags",
-            description = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+            description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
             responses = {
                     @ApiResponse(description = "Pets matching criteria",
                             content = @Content(schema = @Schema(implementation = Pet.class))

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/PetResource.java
Patch:
@@ -131,7 +131,7 @@ public Response updatePet(
     @Path("/findByStatus")
     @Produces("application/xml")
     @Operation(summary = "Finds Pets by status",
-            description = "Multiple status values can be provided with comma seperated strings",
+            description = "Multiple status values can be provided with comma separated strings",
             responses = {
                     @ApiResponse(
                             content = @Content(mediaType = "application/json",
@@ -170,7 +170,7 @@ public Response findPetsByCategory(
     @Path("/findByTags")
     @Produces("application/json")
     @Operation(summary = "Finds Pets by tags",
-            description = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+            description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
             responses = {
                     @ApiResponse(description = "Pets matching criteria",
                             content = @Content(schema = @Schema(implementation = Pet.class))

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/PetResourceSlashesinPath.java
Patch:
@@ -131,7 +131,7 @@ public Response updatePet(
     @Path("/findByStatus")
     @Produces("application/xml")
     @Operation(summary = "Finds Pets by status",
-            description = "Multiple status values can be provided with comma seperated strings",
+            description = "Multiple status values can be provided with comma separated strings",
             responses = {
                     @ApiResponse(
                             content = @Content(mediaType = "application/json",
@@ -151,7 +151,7 @@ public Response findPetsByStatus(
     @Path("/findByTags")
     @Produces("application/json")
     @Operation(summary = "Finds Pets by tags",
-            description = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+            description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
             responses = {
                     @ApiResponse(description = "Pets matching criteria",
                             content = @Content(schema = @Schema(implementation = Pet.class))

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -808,7 +808,7 @@ private boolean isSubtype(AnnotatedClass childClass, Class<?> parentClass) {
     }
 
 
-    private boolean _isOptionalType(JavaType propType) {
+    protected boolean _isOptionalType(JavaType propType) {
         return Arrays.asList("com.google.common.base.Optional", "java.util.Optional")
                 .contains(propType.getRawClass().getCanonicalName());
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -808,7 +808,7 @@ private boolean isSubtype(AnnotatedClass childClass, Class<?> parentClass) {
     }
 
 
-    private boolean _isOptionalType(JavaType propType) {
+    protected boolean _isOptionalType(JavaType propType) {
         return Arrays.asList("com.google.common.base.Optional", "java.util.Optional")
                 .contains(propType.getRawClass().getCanonicalName());
     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/SecurityParser.java
Patch:
@@ -75,7 +75,9 @@ public static Optional<SecuritySchemePair> getSecurityScheme(io.swagger.v3.oas.a
         if (StringUtils.isNotBlank(securityScheme.paramName())) {
             securitySchemeObject.setName(securityScheme.paramName());
         }
-
+        if (StringUtils.isNotBlank(securityScheme.ref())) {
+            securitySchemeObject.set$ref(securityScheme.ref());
+        }
         if (StringUtils.isNotBlank(securityScheme.name())) {
             key = securityScheme.name();
         }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/PathItem.java
Patch:
@@ -429,7 +429,7 @@ public PathItem extensions(java.util.Map<String, Object> extensions) {
     }
 
     public PathItem $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/examples/Example.java
Patch:
@@ -116,7 +116,7 @@ public Example externalValue(String externalValue) {
     }
 
     public Example $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/headers/Header.java
Patch:
@@ -303,7 +303,7 @@ public Header extensions(java.util.Map<String, Object> extensions) {
     }
 
     public Header $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/links/Link.java
Patch:
@@ -244,7 +244,7 @@ public int hashCode() {
     }
 
     public Link $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/Parameter.java
Patch:
@@ -342,7 +342,7 @@ public Parameter content(Content content) {
     }
 
     public Parameter $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/parameters/RequestBody.java
Patch:
@@ -123,7 +123,7 @@ public RequestBody extensions(java.util.Map<String, Object> extensions) {
     }
 
     public RequestBody $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/security/SecurityScheme.java
Patch:
@@ -270,7 +270,7 @@ public SecurityScheme extensions(java.util.Map<String, Object> extensions) {
     }
 
     public SecurityScheme $ref(String $ref) {
-        this.$ref = $ref;
+        set$ref($ref);
         return this;
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/RefParameterResource.java
Patch:
@@ -17,7 +17,7 @@ public class RefParameterResource {
             operationId = "sendPayload",
             deprecated = true
     )
-    public void sendPayload(@Parameter(ref = "Id") @QueryParam("number") final int id) {
+    public void sendPayload(@Parameter(ref = "id") @QueryParam("id") final int id) {
     }
 
 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/SimpleParameterResource.java
Patch:
@@ -19,7 +19,7 @@ public class SimpleParameterResource {
     )
     public void sendPayload(@Parameter(description = "Id Description",
             required = true,
-            example = "1") @QueryParam("number") final int id) {
+            example = "1") @QueryParam("id") final int id) {
     }
 
 }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/PathItem.java
Patch:
@@ -425,9 +425,6 @@ public PathItem extensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
-        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
-            $ref = "#/components/callbacks/" + $ref;
-        }
         this.$ref = $ref;
     }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1108,7 +1108,8 @@ private boolean resolveSubtypes(Schema model, BeanDescription bean, ModelConvert
 
             final Schema subtypeModel = context.resolve(new AnnotatedType().type(subtypeType));
 
-            if (subtypeModel.getName().equals(model.getName())) {
+            if (    StringUtils.isBlank(subtypeModel.getName()) ||
+                    subtypeModel.getName().equals(model.getName())) {
                 subtypeModel.setName(_typeNameResolver.nameForType(_mapper.constructType(subtypeType),
                         TypeNameResolver.Options.SKIP_API_MODEL));
             }
@@ -1153,6 +1154,7 @@ private boolean resolveSubtypes(Schema model, BeanDescription bean, ModelConvert
                         .xml(subtypeModel.getXml())
                         .extensions(subtypeModel.getExtensions());
 
+                composedSchema.setEnum(subtypeModel.getEnum());
             } else {
                 composedSchema = (ComposedSchema) subtypeModel;
             }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -1108,7 +1108,8 @@ private boolean resolveSubtypes(Schema model, BeanDescription bean, ModelConvert
 
             final Schema subtypeModel = context.resolve(new AnnotatedType().type(subtypeType));
 
-            if (subtypeModel.getName().equals(model.getName())) {
+            if (    StringUtils.isBlank(subtypeModel.getName()) ||
+                    subtypeModel.getName().equals(model.getName())) {
                 subtypeModel.setName(_typeNameResolver.nameForType(_mapper.constructType(subtypeType),
                         TypeNameResolver.Options.SKIP_API_MODEL));
             }
@@ -1153,6 +1154,7 @@ private boolean resolveSubtypes(Schema model, BeanDescription bean, ModelConvert
                         .xml(subtypeModel.getXml())
                         .extensions(subtypeModel.getExtensions());
 
+                composedSchema.setEnum(subtypeModel.getEnum());
             } else {
                 composedSchema = (ComposedSchema) subtypeModel;
             }

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponse.java
Patch:
@@ -143,7 +143,6 @@ public ApiResponse link(String name, Link link) {
 
     public ApiResponse $ref(String $ref) {
         set$ref($ref);
-        this.$ref = $ref;
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/v3/oas/models/responses/ApiResponse.java
Patch:
@@ -143,7 +143,6 @@ public ApiResponse link(String name, Link link) {
 
     public ApiResponse $ref(String $ref) {
         set$ref($ref);
-        this.$ref = $ref;
         return this;
     }
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/PojoTest.java
Patch:
@@ -543,7 +543,7 @@ public void testExampleArray() {
     }
 
     static class modelExampleArray {
-        @ArraySchema(schema = @Schema(example = "[\"abc-123\", \"zz-aa-bb\"]"))
+        @ArraySchema(arraySchema = @Schema(example = "[\"abc-123\", \"zz-aa-bb\"]"))
         private String[] ids;
 
         public String[] getIds() {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/PojoTest.java
Patch:
@@ -543,7 +543,7 @@ public void testExampleArray() {
     }
 
     static class modelExampleArray {
-        @ArraySchema(schema = @Schema(example = "[\"abc-123\", \"zz-aa-bb\"]"))
+        @ArraySchema(arraySchema = @Schema(example = "[\"abc-123\", \"zz-aa-bb\"]"))
         private String[] ids;
 
         public String[] getIds() {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -301,11 +301,11 @@ public OpenAPI read(Class<?> cls,
         // class security schemes
         if (apiSecurityScheme != null) {
             for (io.swagger.v3.oas.annotations.security.SecurityScheme securitySchemeAnnotation : apiSecurityScheme) {
-                Optional<SecurityScheme> securityScheme = SecurityParser.getSecurityScheme(securitySchemeAnnotation);
+                Optional<SecurityParser.SecuritySchemePair> securityScheme = SecurityParser.getSecurityScheme(securitySchemeAnnotation);
                 if (securityScheme.isPresent()) {
                     Map<String, SecurityScheme> securitySchemeMap = new HashMap<>();
-                    if (StringUtils.isNotBlank(securityScheme.get().getName())) {
-                        securitySchemeMap.put(securityScheme.get().getName(), securityScheme.get());
+                    if (StringUtils.isNotBlank(securityScheme.get().key)) {
+                        securitySchemeMap.put(securityScheme.get().key, securityScheme.get().securityScheme);
                         if (components.getSecuritySchemes() != null && components.getSecuritySchemes().size() != 0) {
                             components.getSecuritySchemes().putAll(securitySchemeMap);
                         } else {

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -598,7 +598,6 @@ public ExtensionUser setUser(
                     "    myOauth2Security:\n" +
                     "      type: oauth2\n" +
                     "      description: myOauthSecurity Description\n" +
-                    "      name: myOauth2Security\n" +
                     "      in: header\n" +
                     "      flows:\n" +
                     "        implicit:\n" +

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -301,11 +301,11 @@ public OpenAPI read(Class<?> cls,
         // class security schemes
         if (apiSecurityScheme != null) {
             for (io.swagger.v3.oas.annotations.security.SecurityScheme securitySchemeAnnotation : apiSecurityScheme) {
-                Optional<SecurityScheme> securityScheme = SecurityParser.getSecurityScheme(securitySchemeAnnotation);
+                Optional<SecurityParser.SecuritySchemePair> securityScheme = SecurityParser.getSecurityScheme(securitySchemeAnnotation);
                 if (securityScheme.isPresent()) {
                     Map<String, SecurityScheme> securitySchemeMap = new HashMap<>();
-                    if (StringUtils.isNotBlank(securityScheme.get().getName())) {
-                        securitySchemeMap.put(securityScheme.get().getName(), securityScheme.get());
+                    if (StringUtils.isNotBlank(securityScheme.get().key)) {
+                        securitySchemeMap.put(securityScheme.get().key, securityScheme.get().securityScheme);
                         if (components.getSecuritySchemes() != null && components.getSecuritySchemes().size() != 0) {
                             components.getSecuritySchemes().putAll(securitySchemeMap);
                         } else {

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/extensions/ExtensionsResource.java
Patch:
@@ -598,7 +598,6 @@ public ExtensionUser setUser(
                     "    myOauth2Security:\n" +
                     "      type: oauth2\n" +
                     "      description: myOauthSecurity Description\n" +
-                    "      name: myOauth2Security\n" +
                     "      in: header\n" +
                     "      flows:\n" +
                     "        implicit:\n" +

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -364,7 +364,7 @@ public static Optional<ArraySchema> getArraySchema(io.swagger.v3.oas.annotations
         if (arraySchema.schema() != null) {
             if (arraySchema.schema().implementation().equals(Void.class)) {
                 getSchemaFromAnnotation(arraySchema.schema(), components, jsonViewAnnotation).ifPresent(schema -> {
-                    if (StringUtils.isNotBlank(schema.getType())) {
+                    if (StringUtils.isNotBlank(schema.getType()) || StringUtils.isNotBlank(schema.get$ref())) {
                         arraySchemaObject.setItems(schema);
                     }
                 });
@@ -1089,7 +1089,7 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
             } else {
                 Optional<ArraySchema> arraySchemaFromAnnotation = AnnotationsUtils.getArraySchema(arrayAnnotation, components, jsonViewAnnotation);
                 if (arraySchemaFromAnnotation.isPresent()) {
-                    if (StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().get$ref()) && StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().getType())) {
+                    if (arraySchemaFromAnnotation.get().getItems() != null && StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().get$ref()) && StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().getType())) {
                         // default to string
                         arraySchemaFromAnnotation.get().getItems().setType("string");
                     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -364,7 +364,7 @@ public static Optional<ArraySchema> getArraySchema(io.swagger.v3.oas.annotations
         if (arraySchema.schema() != null) {
             if (arraySchema.schema().implementation().equals(Void.class)) {
                 getSchemaFromAnnotation(arraySchema.schema(), components, jsonViewAnnotation).ifPresent(schema -> {
-                    if (StringUtils.isNotBlank(schema.getType())) {
+                    if (StringUtils.isNotBlank(schema.getType()) || StringUtils.isNotBlank(schema.get$ref())) {
                         arraySchemaObject.setItems(schema);
                     }
                 });
@@ -1089,7 +1089,7 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
             } else {
                 Optional<ArraySchema> arraySchemaFromAnnotation = AnnotationsUtils.getArraySchema(arrayAnnotation, components, jsonViewAnnotation);
                 if (arraySchemaFromAnnotation.isPresent()) {
-                    if (StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().get$ref()) && StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().getType())) {
+                    if (arraySchemaFromAnnotation.get().getItems() != null && StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().get$ref()) && StringUtils.isBlank(arraySchemaFromAnnotation.get().getItems().getType())) {
                         // default to string
                         arraySchemaFromAnnotation.get().getItems().setType("string");
                     }

File: modules/swagger-servlet/src/main/java/io/swagger/servlet/extensions/ServletReaderExtension.java
Patch:
@@ -392,7 +392,7 @@ public void applyParameters(ReaderContext context, Operation operation, Type typ
 
     @Override
     public void applyImplicitParameters(ReaderContext context, Operation operation, Method method) {
-        final ApiImplicitParams implicitParams = method.getAnnotation(ApiImplicitParams.class);
+        final ApiImplicitParams implicitParams = ReflectionUtils.getAnnotation(method, ApiImplicitParams.class);
         if (implicitParams != null && implicitParams.value().length > 0) {
             for (ApiImplicitParam param : implicitParams.value()) {
                 final Parameter p = readImplicitParam(context.getSwagger(), param);
@@ -405,7 +405,7 @@ public void applyImplicitParameters(ReaderContext context, Operation operation,
 
     @Override
     public void applyExtensions(ReaderContext context, Operation operation, Method method) {
-        final ApiOperation apiOperation = method.getAnnotation( ApiOperation.class );
+        final ApiOperation apiOperation = ReflectionUtils.getAnnotation(method, ApiOperation.class );
         if( apiOperation != null ) {
             operation.getVendorExtensions().putAll(BaseReaderUtils.parseExtensions(apiOperation.extensions()));
         }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -5,6 +5,7 @@
 import io.swagger.v3.jaxrs2.resources.HiddenAnnotatedUserResource;
 import io.swagger.v3.jaxrs2.resources.HiddenUserResource;
 import io.swagger.v3.jaxrs2.resources.PetResource;
+import io.swagger.v3.jaxrs2.resources.PetResourceSlashesinPath;
 import io.swagger.v3.jaxrs2.resources.SimpleUserResource;
 import io.swagger.v3.jaxrs2.resources.UserResource;
 import io.swagger.v3.oas.annotations.Operation;
@@ -608,6 +609,7 @@ public void testCompletePetResource() throws IOException {
                 "        name: Pet";
 
         compareAsYaml(PetResource.class, expectedYAML);
+        compareAsYaml(PetResourceSlashesinPath.class, expectedYAML);
 
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.v3.jaxrs2;
 
-import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.jaxrs2.matchers.SerializationMatchers;
 import io.swagger.v3.jaxrs2.resources.BasicFieldsResource;
 import io.swagger.v3.jaxrs2.resources.BookStoreTicket2646;
@@ -734,7 +733,6 @@ public void testAnotherResourceWithSubresources() {
     public void testUserAnnotation() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(UserAnnotationResource.class);
-        Yaml.prettyPrint(openAPI);
         Paths paths = openAPI.getPaths();
         assertEquals(paths.size(), 1);
         PathItem pathItem = paths.get("/test/status");

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -85,7 +85,6 @@ public void testSimpleCallback() {
                 "      properties:\n" +
                 "        subscriptionId:\n" +
                 "          type: string";
-        System.out.println(expectedYAML);
         assertEquals(extractedYAML, expectedYAML);
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -574,7 +574,7 @@ public void testCompletePetResource() throws IOException {
                 "        name:\n" +
                 "          type: string\n" +
                 "      xml:\n" +
-                "        name: tag\n" +
+                "        name: Tag\n" +
                 "    Pet:\n" +
                 "      type: object\n" +
                 "      properties:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/parameters/ParametersTest.java
Patch:
@@ -32,7 +32,6 @@ public class ParametersTest extends AbstractAnnotationTest {
     public void scanClassAndFieldLevelAnnotations() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(ResourceWithKnownInjections.class);
-        Yaml.prettyPrint(openAPI);
         List<io.swagger.v3.oas.models.parameters.Parameter> resourceParameters = openAPI.getPaths().get("/resource/{id}").getGet().getParameters();
         assertNotNull(resourceParameters);
         assertEquals(resourceParameters.size(), 3);
@@ -269,7 +268,6 @@ public void testRepeatableParameters() {
     public void testJacksonFeatures() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(ResourceWithJacksonBean.class);
-        Yaml.prettyPrint(openAPI);
         io.swagger.v3.oas.models.media.Schema o = openAPI.getComponents().getSchemas().get("JacksonBean");
 
         assertEquals(o.getProperties().keySet(), Sets.newHashSet("identity", "bean", "code", "message",

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/it/OpenApiResourceIT.java
Patch:
@@ -592,7 +592,6 @@ public void testSwaggerJson() throws Exception {
                 .extract()
                 .response().body().asString();
 
-        System.out.println(formatJson(actualBody));
         compareAsJson(formatJson(actualBody), EXPECTED_JSON);
     }
 
@@ -628,7 +627,6 @@ public void testSwaggerYaml() throws Exception {
                 .contentType("application/yaml")
                 .extract().response().body().asString();
 
-        System.out.println(formatYaml(actualBody));
         compareAsYaml(formatYaml(actualBody), EXPECTED_YAML);
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.v3.jaxrs2;
 
-import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.jaxrs2.matchers.SerializationMatchers;
 import io.swagger.v3.jaxrs2.resources.BasicFieldsResource;
 import io.swagger.v3.jaxrs2.resources.BookStoreTicket2646;
@@ -734,7 +733,6 @@ public void testAnotherResourceWithSubresources() {
     public void testUserAnnotation() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(UserAnnotationResource.class);
-        Yaml.prettyPrint(openAPI);
         Paths paths = openAPI.getPaths();
         assertEquals(paths.size(), 1);
         PathItem pathItem = paths.get("/test/status");

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -85,7 +85,6 @@ public void testSimpleCallback() {
                 "      properties:\n" +
                 "        subscriptionId:\n" +
                 "          type: string";
-        System.out.println(expectedYAML);
         assertEquals(extractedYAML, expectedYAML);
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest.java
Patch:
@@ -574,7 +574,7 @@ public void testCompletePetResource() throws IOException {
                 "        name:\n" +
                 "          type: string\n" +
                 "      xml:\n" +
-                "        name: tag\n" +
+                "        name: Tag\n" +
                 "    Pet:\n" +
                 "      type: object\n" +
                 "      properties:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/parameters/ParametersTest.java
Patch:
@@ -32,7 +32,6 @@ public class ParametersTest extends AbstractAnnotationTest {
     public void scanClassAndFieldLevelAnnotations() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(ResourceWithKnownInjections.class);
-        Yaml.prettyPrint(openAPI);
         List<io.swagger.v3.oas.models.parameters.Parameter> resourceParameters = openAPI.getPaths().get("/resource/{id}").getGet().getParameters();
         assertNotNull(resourceParameters);
         assertEquals(resourceParameters.size(), 3);
@@ -269,7 +268,6 @@ public void testRepeatableParameters() {
     public void testJacksonFeatures() {
         Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(ResourceWithJacksonBean.class);
-        Yaml.prettyPrint(openAPI);
         io.swagger.v3.oas.models.media.Schema o = openAPI.getComponents().getSchemas().get("JacksonBean");
 
         assertEquals(o.getProperties().keySet(), Sets.newHashSet("identity", "bean", "code", "message",

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/it/OpenApiResourceIT.java
Patch:
@@ -592,7 +592,6 @@ public void testSwaggerJson() throws Exception {
                 .extract()
                 .response().body().asString();
 
-        System.out.println(formatJson(actualBody));
         compareAsJson(formatJson(actualBody), EXPECTED_JSON);
     }
 
@@ -628,7 +627,6 @@ public void testSwaggerYaml() throws Exception {
                 .contentType("application/yaml")
                 .extract().response().body().asString();
 
-        System.out.println(formatYaml(actualBody));
         compareAsYaml(formatYaml(actualBody), EXPECTED_YAML);
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/utils/PropertyModelConverter.java
Patch:
@@ -40,7 +40,7 @@ public Property modelToProperty(Model model){
                 List<String> required = m.getRequired();
                 if (required != null) {
                     for (String name : required) {
-                        if (m.getName().equals(name)) {
+                        if (name.equals(m.getName())) {
                             mapProperty.setRequired(true);
                         }
                     }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -394,7 +394,7 @@ public OpenAPI read(Class<?> cls,
             Map<String, String> regexMap = new LinkedHashMap<>();
             operationPath = PathUtils.parsePath(operationPath, regexMap);
             if (operationPath != null) {
-                if (ReaderUtils.isIgnored(operationPath, config)) {
+                if (config != null && ReaderUtils.isIgnored(operationPath, config)) {
                     continue;
                 }
 
@@ -1261,7 +1261,7 @@ protected boolean isOperationHidden(Method method) {
         if (hidden != null) {
             return true;
         }
-        if (!Boolean.TRUE.equals(config.isReadAllResources()) && apiOperation == null) {
+        if (config != null && !Boolean.TRUE.equals(config.isReadAllResources()) && apiOperation == null) {
             return true;
         }
         return false;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -394,7 +394,7 @@ public OpenAPI read(Class<?> cls,
             Map<String, String> regexMap = new LinkedHashMap<>();
             operationPath = PathUtils.parsePath(operationPath, regexMap);
             if (operationPath != null) {
-                if (ReaderUtils.isIgnored(operationPath, config)) {
+                if (config != null && ReaderUtils.isIgnored(operationPath, config)) {
                     continue;
                 }
 
@@ -1261,7 +1261,7 @@ protected boolean isOperationHidden(Method method) {
         if (hidden != null) {
             return true;
         }
-        if (!Boolean.TRUE.equals(config.isReadAllResources()) && apiOperation == null) {
+        if (config != null && !Boolean.TRUE.equals(config.isReadAllResources()) && apiOperation == null) {
             return true;
         }
         return false;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/properties/MapPropertyDeserializerTest.java
Patch:
@@ -10,6 +10,7 @@
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import org.testng.annotations.Test;
 
+import static io.swagger.v3.core.util.TestUtils.normalizeLineEnds;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
@@ -121,13 +122,13 @@ public void testBooleanAdditionalPropertiesSerialization() throws Exception {
         Schema responseSchema = response.getContent().get("*/*").getSchema();
 
         Schema schema = new ObjectSchema().additionalProperties(true);
-        assertEquals(Json.pretty(schema), "{\n" +
+        assertEquals(normalizeLineEnds(Json.pretty(schema)), "{\n" +
                 "  \"type\" : \"object\",\n" +
                 "  \"additionalProperties\" : true\n" +
                 "}");
 
         schema = new ObjectSchema().additionalProperties(responseSchema);
-        assertEquals(Json.pretty(schema), "{\n" +
+        assertEquals(normalizeLineEnds(Json.pretty(schema)), "{\n" +
                 "  \"type\" : \"object\",\n" +
                 "  \"additionalProperties\" : {\n" +
                 "    \"type\" : \"object\",\n" +

File: modules/swagger-core/src/test/java/io/swagger/v3/core/deserialization/properties/MapPropertyDeserializerTest.java
Patch:
@@ -10,6 +10,7 @@
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import org.testng.annotations.Test;
 
+import static io.swagger.v3.core.util.TestUtils.normalizeLineEnds;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
@@ -121,13 +122,13 @@ public void testBooleanAdditionalPropertiesSerialization() throws Exception {
         Schema responseSchema = response.getContent().get("*/*").getSchema();
 
         Schema schema = new ObjectSchema().additionalProperties(true);
-        assertEquals(Json.pretty(schema), "{\n" +
+        assertEquals(normalizeLineEnds(Json.pretty(schema)), "{\n" +
                 "  \"type\" : \"object\",\n" +
                 "  \"additionalProperties\" : true\n" +
                 "}");
 
         schema = new ObjectSchema().additionalProperties(responseSchema);
-        assertEquals(Json.pretty(schema), "{\n" +
+        assertEquals(normalizeLineEnds(Json.pretty(schema)), "{\n" +
                 "  \"type\" : \"object\",\n" +
                 "  \"additionalProperties\" : {\n" +
                 "    \"type\" : \"object\",\n" +

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -383,7 +383,7 @@ public OpenAPI read(Class<?> cls,
 
             javax.ws.rs.Path methodPath = ReflectionUtils.getAnnotation(method, javax.ws.rs.Path.class);
 
-            String operationPath = ReaderUtils.getPath(apiPath, methodPath, parentPath);
+            String operationPath = ReaderUtils.getPath(apiPath, methodPath, parentPath, isSubresource);
 
             // skip if path is the same as parent, e.g. for @ApplicationPath annotated application
             // extending resource config.

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/util/ReaderUtils.java
Patch:
@@ -159,7 +159,7 @@ public static boolean isIgnored(String path, OpenAPIConfiguration config) {
         return false;
     }
 
-    public static String getPath(javax.ws.rs.Path classLevelPath, javax.ws.rs.Path methodLevelPath, String parentPath) {
+    public static String getPath(javax.ws.rs.Path classLevelPath, javax.ws.rs.Path methodLevelPath, String parentPath, boolean isSubresource) {
         if (classLevelPath == null && methodLevelPath == null && StringUtils.isEmpty(parentPath)) {
             return null;
         }
@@ -174,7 +174,7 @@ public static String getPath(javax.ws.rs.Path classLevelPath, javax.ws.rs.Path m
 
             b.append(parentPath);
         }
-        if (classLevelPath != null) {
+        if (classLevelPath != null && !isSubresource) {
             b.append(classLevelPath.value());
         }
         if (methodLevelPath != null && !"/".equals(methodLevelPath.value())) {

File: modules/swagger-jaxrs/src/test/java/io/swagger/SimpleReaderTest.java
Patch:
@@ -682,7 +682,7 @@ public void scanClassWithReadOnlyAndEmptyValueParams() {
         Parameter readOnlyParam = swagger.getPath("/fun/readOnly").getGet().getParameters().get(0);
         assertTrue(readOnlyParam.isReadOnly());
 
-        Parameter allowEmptyParam = swagger.getPath("/fun/allowEmpty").getGet().getParameters().get(0);
+        SerializableParameter allowEmptyParam = (SerializableParameter) swagger.getPath("/fun/allowEmpty").getGet().getParameters().get(0);
         assertTrue(allowEmptyParam.getAllowEmptyValue());
     }
 }

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/Parameter.java
Patch:
@@ -37,7 +37,4 @@ public interface Parameter {
 
     void setReadOnly(Boolean readOnly);
 
-    Boolean getAllowEmptyValue();
-
-    void setAllowEmptyValue(Boolean allowEmptyValue);
 }
\ No newline at end of file

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java
Patch:
@@ -27,7 +27,7 @@
  * Operations with equivalent paths are grouped in a single Operation Object.
  * A combination of a HTTP method and a path creates a unique operation.
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiOperation {
     /**

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java
Patch:
@@ -27,7 +27,7 @@
  * Operations with equivalent paths are grouped in a single Operation Object.
  * A combination of a HTTP method and a path creates a unique operation.
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiOperation {
     /**

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/ResolvedParameter.java
Patch:
@@ -8,4 +8,5 @@
 public class ResolvedParameter {
     public List<Parameter> parameters = new ArrayList<>();
     public Parameter requestBody;
+    public Parameter formParameter;
 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/ResolvedParameter.java
Patch:
@@ -8,4 +8,5 @@
 public class ResolvedParameter {
     public List<Parameter> parameters = new ArrayList<>();
     public Parameter requestBody;
+    public Parameter formParameter;
 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/it/resources/UrlEncodedResource.java
Patch:
@@ -4,10 +4,12 @@
 import javax.ws.rs.FormParam;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
 @Path("/users")
+@Produces("application/json")
 public class UrlEncodedResource {
     @POST
     @Path("/add")

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -389,7 +389,7 @@ public Model resolve(JavaType type, ModelConverterContext context, Iterator<Mode
                 }
 
                 annotations = annotationList.toArray(new Annotation[annotationList.size()]);
-                if(hidenByJsonView(annotations, context)) {
+                if(hiddenByJsonView(annotations, context)) {
                     continue;
                 }
 
@@ -639,7 +639,7 @@ parent class @ApiModel annotation, then do the following:
      */
     private String decorateModelName(ModelConverterContext context, String originalName) {
         String name = originalName;
-        if (context.getJsonView() != null) {
+        if (context.getJsonView() != null && context.getJsonView().value().length > 0) {
             String COMBINER = "-or-";
             StringBuffer sb = new StringBuffer();
             for (Class<?> view : context.getJsonView().value()) {
@@ -651,7 +651,7 @@ private String decorateModelName(ModelConverterContext context, String originalN
         return name;
     }
 
-    private boolean hidenByJsonView(Annotation[] annotations,
+    private boolean hiddenByJsonView(Annotation[] annotations,
         ModelConverterContext context) {
         JsonView jsonView = context.getJsonView();
         if (jsonView == null)

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -841,6 +841,9 @@ private Operation parseMethod(Class<?> cls, Method method, AnnotatedMethod annot
             if (apiOperation.hidden()) {
                 return null;
             }
+            if (apiOperation.ignoreJsonView()) {
+                jsonViewAnnotation = null;
+            }
             if (!apiOperation.nickname().isEmpty()) {
                 operationId = apiOperation.nickname();
             }

File: modules/swagger-jaxrs/src/test/java/io/swagger/JsonViewTest.java
Patch:
@@ -112,7 +112,6 @@ public List<Car> getSaleSummaries() {
   public void shouldSerializeTypeParameter() throws JsonProcessingException {
     Swagger swagger = getSwagger(CarSummaryApi.class);
     String swaggerJson = Json.mapper().writeValueAsString(swagger);
-    System.out.println(swaggerJson);
     Assert.assertTrue(swaggerJson.contains("manufacture"));
     Assert.assertTrue(swaggerJson.contains("model"));
     Assert.assertTrue(swaggerJson.contains("color"));
@@ -122,7 +121,6 @@ public void shouldSerializeTypeParameter() throws JsonProcessingException {
 
     swagger = getSwagger(CarDetailApi.class);
     swaggerJson = Json.mapper().writeValueAsString(swagger);
-    System.out.println(swaggerJson);
     Assert.assertTrue(swaggerJson.contains("manufacture"));
     Assert.assertTrue(swaggerJson.contains("model"));
     Assert.assertTrue(swaggerJson.contains("color"));
@@ -133,7 +131,6 @@ public void shouldSerializeTypeParameter() throws JsonProcessingException {
 
     swagger = getSwagger(CarSaleSummaryApi.class);
     swaggerJson = Json.mapper().writeValueAsString(swagger);
-    System.out.println(swaggerJson);
     Assert.assertTrue(swaggerJson.contains("manufacture"));
     Assert.assertTrue(swaggerJson.contains("model"));
     Assert.assertTrue(swaggerJson.contains("color"));

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/encoding/EncodingTest.java
Patch:
@@ -348,7 +348,9 @@ public void testSimpleGetOperationWithoutResponses() {
                 "      operationId: getWithNoParametersAndNoResponses\n" +
                 "      responses:\n" +
                 "        default:\n" +
-                "          description: default response";
+                "          description: default response\n" +
+                "          content:\n" +
+                "            '*/*': {}";
         String extractedYAML = openApiYAML.substring(start, end);
 
         assertEquals(extractedYAML, expectedYAML);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/encoding/EncodingTest.java
Patch:
@@ -348,7 +348,9 @@ public void testSimpleGetOperationWithoutResponses() {
                 "      operationId: getWithNoParametersAndNoResponses\n" +
                 "      responses:\n" +
                 "        default:\n" +
-                "          description: default response";
+                "          description: default response\n" +
+                "          content:\n" +
+                "            '*/*': {}";
         String extractedYAML = openApiYAML.substring(start, end);
 
         assertEquals(extractedYAML, expectedYAML);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/AbstractModelConverter.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
+import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.models.media.Schema;
 
 import java.lang.annotation.Annotation;
@@ -99,11 +100,11 @@ protected String _findTypeName(JavaType type, BeanDescription beanDesc) {
             return "Array";
         }
 
-        if (type.isMapLikeType()) {
+        if (type.isMapLikeType() && ReflectionUtils.isSystemType(type)) {
             return "Map";
         }
 
-        if (type.isContainerType()) {
+        if (type.isContainerType() && ReflectionUtils.isSystemType(type)) {
             if (Set.class.isAssignableFrom(type.getRawClass())) {
                 return "Set";
             }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -24,6 +24,7 @@
 import io.swagger.v3.core.oas.models.composition.Pet;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.ResourceUtils;
+import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.models.media.ArraySchema;
 import io.swagger.v3.oas.models.media.IntegerSchema;
 import io.swagger.v3.oas.models.media.MapSchema;
@@ -176,6 +177,7 @@ public void processModelWithPairProperties() {
         final ModelWithTuple2.TupleAsMapModelConverter asMapConverter = new ModelWithTuple2.TupleAsMapModelConverter(Json.mapper());
         ModelConverters.getInstance().addConverter(asMapConverter);
         final Map<String, Schema> asMap = readAll(ModelWithTuple2.class);
+        Yaml.prettyPrint(asMap);
         ModelConverters.getInstance().removeConverter(asMapConverter);
         assertEquals(asMap.size(), 4);
         for (String item : Arrays.asList("MapOfString", "MapOfComplexLeft")) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -142,7 +142,9 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
                     schemaMap.forEach((key, schema) -> {
                         components.addSchemas(key, schema);
                     });
-                    schemaObject.set$ref(COMPONENTS_REF + resolvedSchema.schema.getName());
+                    if (resolvedSchema.schema != null) {
+                        schemaObject.set$ref(COMPONENTS_REF + resolvedSchema.schema.getName());
+                    }
                 }
             }
             if (StringUtils.isBlank(schemaObject.get$ref()) && StringUtils.isBlank(schemaObject.getType())) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/AbstractModelConverter.java
Patch:
@@ -11,6 +11,7 @@
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
+import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.models.media.Schema;
 
 import java.lang.annotation.Annotation;
@@ -99,11 +100,11 @@ protected String _findTypeName(JavaType type, BeanDescription beanDesc) {
             return "Array";
         }
 
-        if (type.isMapLikeType()) {
+        if (type.isMapLikeType() && ReflectionUtils.isSystemType(type)) {
             return "Map";
         }
 
-        if (type.isContainerType()) {
+        if (type.isContainerType() && ReflectionUtils.isSystemType(type)) {
             if (Set.class.isAssignableFrom(type.getRawClass())) {
                 return "Set";
             }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -24,6 +24,7 @@
 import io.swagger.v3.core.oas.models.composition.Pet;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.ResourceUtils;
+import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.models.media.ArraySchema;
 import io.swagger.v3.oas.models.media.IntegerSchema;
 import io.swagger.v3.oas.models.media.MapSchema;
@@ -176,6 +177,7 @@ public void processModelWithPairProperties() {
         final ModelWithTuple2.TupleAsMapModelConverter asMapConverter = new ModelWithTuple2.TupleAsMapModelConverter(Json.mapper());
         ModelConverters.getInstance().addConverter(asMapConverter);
         final Map<String, Schema> asMap = readAll(ModelWithTuple2.class);
+        Yaml.prettyPrint(asMap);
         ModelConverters.getInstance().removeConverter(asMapConverter);
         assertEquals(asMap.size(), 4);
         for (String item : Arrays.asList("MapOfString", "MapOfComplexLeft")) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -142,7 +142,9 @@ public static Optional<? extends Schema> getSchema(io.swagger.v3.oas.annotations
                     schemaMap.forEach((key, schema) -> {
                         components.addSchemas(key, schema);
                     });
-                    schemaObject.set$ref(COMPONENTS_REF + resolvedSchema.schema.getName());
+                    if (resolvedSchema.schema != null) {
+                        schemaObject.set$ref(COMPONENTS_REF + resolvedSchema.schema.getName());
+                    }
                 }
             }
             if (StringUtils.isBlank(schemaObject.get$ref()) && StringUtils.isBlank(schemaObject.getType())) {

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/TypeNameResolver.java
Patch:
@@ -45,7 +45,7 @@ protected String nameForClass(Class<?> cls, Set<Options> options) {
             return cls.getSimpleName();
         }
 
-        io.swagger.v3.oas.annotations.media.Schema mp = AnnotationsUtils.getSchemaAnnotation(cls);
+        io.swagger.v3.oas.annotations.media.Schema mp = AnnotationsUtils.getSchemaDeclaredAnnotation(cls);
 
         final String modelName = mp == null ? null : StringUtils.trimToNull(mp.name());
         return modelName == null ? cls.getSimpleName() : modelName;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -103,7 +103,8 @@ public void overrideInheritedModelName() {
 
         final Map<String, Schema> nestedSchemas = readAll(ModelWithUrlProperty.class);
         assertEquals(nestedSchemas.size(), 1);
-        assertTrue(nestedSchemas.containsKey("MyProperty"));
+        assertTrue(nestedSchemas.containsKey("ModelWithUrlProperty"));
+        assertFalse(nestedSchemas.containsKey("MyProperties"));
     }
 
     @Test(description = "it should maintain property names")

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/composition/Thing3.java
Patch:
@@ -7,7 +7,7 @@ public class Thing3 extends AbstractBaseModelWithoutFields {
 
     @Schema(description = "Additional field a")
     String a;
-    @Schema(description = "Additional field a")
+    @Schema(description = "Additional field x")
     int x;
 
     public String getA() {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/InheritedBeanTest.java
Patch:
@@ -92,8 +92,9 @@ public void testComposedUberObject() throws Exception {
         ComposedSchema cm = (ComposedSchema) uberModel;
         assertEquals(cm.getAnyOf().size(), 2);
         assertEquals(cm.getAnyOf().get(0).get$ref(), "#/components/schemas/UserObject");
-        // make sure parent properties are filtered out of subclass
-        assertNull(cm.getProperties());
+        // parent properties are filtered out of subclass when parent doesn't define subtypes
+        assertNotNull(cm.getProperties());
+        assertEquals(cm.getProperties().size(), 3);
 
         final Schema interfaceModel = context.getDefinedModels().get("UserObject");
         assertNotNull(interfaceModel);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/TypeNameResolver.java
Patch:
@@ -45,7 +45,7 @@ protected String nameForClass(Class<?> cls, Set<Options> options) {
             return cls.getSimpleName();
         }
 
-        io.swagger.v3.oas.annotations.media.Schema mp = AnnotationsUtils.getSchemaAnnotation(cls);
+        io.swagger.v3.oas.annotations.media.Schema mp = AnnotationsUtils.getSchemaDeclaredAnnotation(cls);
 
         final String modelName = mp == null ? null : StringUtils.trimToNull(mp.name());
         return modelName == null ? cls.getSimpleName() : modelName;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -103,7 +103,8 @@ public void overrideInheritedModelName() {
 
         final Map<String, Schema> nestedSchemas = readAll(ModelWithUrlProperty.class);
         assertEquals(nestedSchemas.size(), 1);
-        assertTrue(nestedSchemas.containsKey("MyProperty"));
+        assertTrue(nestedSchemas.containsKey("ModelWithUrlProperty"));
+        assertFalse(nestedSchemas.containsKey("MyProperties"));
     }
 
     @Test(description = "it should maintain property names")

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/composition/Thing3.java
Patch:
@@ -7,7 +7,7 @@ public class Thing3 extends AbstractBaseModelWithoutFields {
 
     @Schema(description = "Additional field a")
     String a;
-    @Schema(description = "Additional field a")
+    @Schema(description = "Additional field x")
     int x;
 
     public String getA() {

File: modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/InheritedBeanTest.java
Patch:
@@ -92,8 +92,9 @@ public void testComposedUberObject() throws Exception {
         ComposedSchema cm = (ComposedSchema) uberModel;
         assertEquals(cm.getAnyOf().size(), 2);
         assertEquals(cm.getAnyOf().get(0).get$ref(), "#/components/schemas/UserObject");
-        // make sure parent properties are filtered out of subclass
-        assertNull(cm.getProperties());
+        // parent properties are filtered out of subclass when parent doesn't define subtypes
+        assertNotNull(cm.getProperties());
+        assertEquals(cm.getProperties().size(), 3);
 
         final Schema interfaceModel = context.getDefinedModels().get("UserObject");
         assertNotNull(interfaceModel);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -999,7 +999,7 @@ private void removeParentProperties(Schema child, Schema parent) {
                 }
             }
         }
-        if (subtypeProps.isEmpty()) {
+        if (subtypeProps == null || subtypeProps.isEmpty()) {
             child.setProperties(null);
         }
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -999,7 +999,7 @@ private void removeParentProperties(Schema child, Schema parent) {
                 }
             }
         }
-        if (subtypeProps.isEmpty()) {
+        if (subtypeProps == null || subtypeProps.isEmpty()) {
             child.setProperties(null);
         }
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -185,7 +185,6 @@ public void testResolveDuplicatedOperationIdMethodName() {
 
     }
 
-
     @Test(description = "Test a Set of classes")
     public void testSetOfClasses() {
         Set<Class<?>> classes = new HashSet<>();
@@ -252,7 +251,8 @@ public void testGetResponses() {
 
         Method[] methods = ResponsesResource.class.getMethods();
 
-        Operation responseOperation = reader.parseMethod(methods[0], null);
+        Operation responseOperation = reader.parseMethod(Arrays.stream(methods).filter(
+                (method -> method.getName().equals("getResponses"))).findFirst().get(), null);
         assertNotNull(responseOperation);
 
         ApiResponses responses = responseOperation.getResponses();

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -185,7 +185,6 @@ public void testResolveDuplicatedOperationIdMethodName() {
 
     }
 
-
     @Test(description = "Test a Set of classes")
     public void testSetOfClasses() {
         Set<Class<?>> classes = new HashSet<>();
@@ -252,7 +251,8 @@ public void testGetResponses() {
 
         Method[] methods = ResponsesResource.class.getMethods();
 
-        Operation responseOperation = reader.parseMethod(methods[0], null);
+        Operation responseOperation = reader.parseMethod(Arrays.stream(methods).filter(
+                (method -> method.getName().equals("getResponses"))).findFirst().get(), null);
         assertNotNull(responseOperation);
 
         ApiResponses responses = responseOperation.getResponses();

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/AcceptHeaderApiListingResource.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.jaxrs.listing;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.annotations.ApiOperation;
 
 import javax.servlet.ServletConfig;
@@ -26,7 +25,7 @@ public Response getListingJson(
             @Context Application app,
             @Context ServletConfig sc,
             @Context HttpHeaders headers,
-            @Context UriInfo uriInfo) throws JsonProcessingException {
+            @Context UriInfo uriInfo) {
         return getListingJsonResponse(app, context, sc, headers, uriInfo);
     }
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.jaxrs.listing;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.annotations.ApiOperation;
 import org.apache.commons.lang3.StringUtils;
 
@@ -26,7 +25,7 @@ public Response getListing(
             @Context ServletConfig sc,
             @Context HttpHeaders headers,
             @Context UriInfo uriInfo,
-            @PathParam("type") String type) throws JsonProcessingException {
+            @PathParam("type") String type) {
         if (StringUtils.isNotBlank(type) && type.trim().equalsIgnoreCase("yaml")) {
             return getListingYamlResponse(app, context, sc, headers, uriInfo);
         } else {

File: modules/swagger-jaxrs/src/test/java/io/swagger/ApiListingResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.jaxrs.Reader;
 import io.swagger.jaxrs.listing.ApiListingResource;
 import io.swagger.models.Swagger;
@@ -25,7 +24,7 @@ public void shouldCheckModelsSet() {
     }
 
     @Test
-    public void shouldHandleNullServletConfig_issue1689() throws JsonProcessingException {
+    public void shouldHandleNullServletConfig_issue1689() {
         ApiListingResource a = new ApiListingResource();
         try {
             a.getListing(null, null, null, null, "json");
@@ -39,7 +38,7 @@ public void shouldHandleNullServletConfig_issue1689() throws JsonProcessingExcep
 
     }
     @Test
-    public void shouldHandleErrorServletConfig_issue1691() throws JsonProcessingException {
+    public void shouldHandleErrorServletConfig_issue1691() {
 
         ServletConfig sc = new ServletConfig() {
             @Override

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -22,6 +22,7 @@
 import javax.validation.constraints.Size;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAttribute;
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlSchema;
@@ -627,7 +628,7 @@ protected boolean ignore(final Annotated member, final XmlAccessorType xmlAccess
             return false;
         }
         if (xmlAccessorTypeAnnotation.value().equals(XmlAccessType.NONE)) {
-            if (!member.hasAnnotation(XmlElement.class)) {
+            if (!member.hasAnnotation(XmlElement.class) && !member.hasAnnotation(XmlAttribute.class)) {
                 return true;
             }
         }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -263,7 +263,7 @@ public void checkStringTypesHandling() {
         for (Class<?> cls : Arrays.asList(URI.class, URL.class, UUID.class)) {
             final Map<String, Schema> schemas = readAll(cls);
             assertEquals(schemas.size(), 0);
-            final Schema property = ModelConverters.getInstance().resolveProperty(cls);
+            final Schema property = ModelConverters.getInstance().resolveAnnotatedType(cls, null, "").schema;
             assertNotNull(property);
             assertEquals(property.getType(), "string");
         }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/override/CustomConverterTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.Iterator;
+import java.util.function.BiFunction;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
@@ -59,9 +60,9 @@ public Schema resolve(Type type, ModelConverterContext context, Iterator<ModelCo
         }
 
         @Override
-        public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, ModelConverterContext context, Iterator<ModelConverter> chain) {
+        public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, Schema parent, BiFunction<JavaType, Annotation[], Schema> jsonUnwrappedHandler, ModelConverterContext context, Iterator<ModelConverter> chain) {
             if (chain.hasNext()) {
-                return chain.next().resolveAnnotatedType(type, member, elementName, context, chain);
+                return chain.next().resolveAnnotatedType(type, member, elementName, parent, jsonUnwrappedHandler, context, chain);
             } else {
                 return null;
             }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/override/SamplePropertyConverter.java
Patch:
@@ -12,6 +12,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.Iterator;
+import java.util.function.BiFunction;
 
 /**
  * Sample converter implementation which turns "MyCustomClass" into a DateTime property
@@ -43,9 +44,9 @@ public Schema resolve(Type type, ModelConverterContext context, Iterator<ModelCo
     }
 
     @Override
-    public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, ModelConverterContext context, Iterator<ModelConverter> chain) {
+    public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, Schema parent, BiFunction<JavaType, Annotation[], Schema> jsonUnwrappedHandler, ModelConverterContext context, Iterator<ModelConverter> chain) {
         if (chain.hasNext()) {
-            return chain.next().resolveAnnotatedType(type, member, elementName, context, chain);
+            return chain.next().resolveAnnotatedType(type, member, elementName, parent, jsonUnwrappedHandler, context, chain);
         } else {
             return null;
         }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/ModelConverterTest.java
Patch:
@@ -263,7 +263,7 @@ public void checkStringTypesHandling() {
         for (Class<?> cls : Arrays.asList(URI.class, URL.class, UUID.class)) {
             final Map<String, Schema> schemas = readAll(cls);
             assertEquals(schemas.size(), 0);
-            final Schema property = ModelConverters.getInstance().resolveProperty(cls);
+            final Schema property = ModelConverters.getInstance().resolveAnnotatedType(cls, null, "").schema;
             assertNotNull(property);
             assertEquals(property.getType(), "string");
         }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/override/CustomConverterTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.Iterator;
+import java.util.function.BiFunction;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
@@ -59,9 +60,9 @@ public Schema resolve(Type type, ModelConverterContext context, Iterator<ModelCo
         }
 
         @Override
-        public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, ModelConverterContext context, Iterator<ModelConverter> chain) {
+        public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, Schema parent, BiFunction<JavaType, Annotation[], Schema> jsonUnwrappedHandler, ModelConverterContext context, Iterator<ModelConverter> chain) {
             if (chain.hasNext()) {
-                return chain.next().resolveAnnotatedType(type, member, elementName, context, chain);
+                return chain.next().resolveAnnotatedType(type, member, elementName, parent, jsonUnwrappedHandler, context, chain);
             } else {
                 return null;
             }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/converting/override/SamplePropertyConverter.java
Patch:
@@ -12,6 +12,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.Iterator;
+import java.util.function.BiFunction;
 
 /**
  * Sample converter implementation which turns "MyCustomClass" into a DateTime property
@@ -43,9 +44,9 @@ public Schema resolve(Type type, ModelConverterContext context, Iterator<ModelCo
     }
 
     @Override
-    public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, ModelConverterContext context, Iterator<ModelConverter> chain) {
+    public Schema resolveAnnotatedType(Type type, Annotated member, String elementName, Schema parent, BiFunction<JavaType, Annotation[], Schema> jsonUnwrappedHandler, ModelConverterContext context, Iterator<ModelConverter> chain) {
         if (chain.hasNext()) {
-            return chain.next().resolveAnnotatedType(type, member, elementName, context, chain);
+            return chain.next().resolveAnnotatedType(type, member, elementName, parent, jsonUnwrappedHandler, context, chain);
         } else {
             return null;
         }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -474,6 +474,9 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
         }
         final Type type = param.dataTypeClass() == Void.class ? ReflectionUtils.typeFromString(param.dataType())
                 : param.dataTypeClass();
+        if (type == null) {
+            LOGGER.error("no dataType defined for implicit param `{}`! resolved parameter will not have a type defined, and will therefore be not compliant with spec. see https://github.com/swagger-api/swagger-core/issues/2556.", param.name());
+        }
         return ParameterProcessor.applyAnnotations(swagger, p, (type == null) ? String.class : type,
                 Arrays.<Annotation>asList(param));
     }

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitParams.java
Patch:
@@ -22,7 +22,8 @@ public class ResourceWithImplicitParams {
             @ApiImplicitParam(name = "width", paramType = "formData", dataType = "int", allowableValues = "range[infinity,1]"),
             @ApiImplicitParam(name = "height", paramType = "query", dataType = "int", allowableValues = "range[3,4]"),
             @ApiImplicitParam(name = "body", paramType = "body", dataType = "string", required = true),
-            @ApiImplicitParam(name = "width", paramType = "unknown")
+            @ApiImplicitParam(name = "width", paramType = "unknown"),
+            @ApiImplicitParam(name = "description", paramType = "query")
     })
     @ApiOperation("Test operation with implicit parameters")
     public void testString() {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BooleanProperty.java
Patch:
@@ -41,7 +41,9 @@ public BooleanProperty example(Boolean example) {
     @Override
     public void setExample(Object example) {
         if (example instanceof String) {
-            this.example = Boolean.parseBoolean((String)example);
+            if (!((String) example).isEmpty()) {
+                this.example = Boolean.parseBoolean((String) example);
+            }
         } else {
             this.example = example;
         }

File: modules/swagger-models/src/main/java/io/swagger/models/properties/ObjectProperty.java
Patch:
@@ -135,7 +135,7 @@ public ObjectProperty xml(Xml xml) {
         return this;
     }
 
-    public ObjectProperty example(String example) {
+    public ObjectProperty example(Object example) {
         this.setExample(example);
         return this;
     }

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/parameters/RequestBody.java
Patch:
@@ -32,7 +32,7 @@
  * @see io.swagger.v3.oas.annotations.Parameter
  * @see Content
  **/
-@Target({ElementType.PARAMETER})
+@Target({ElementType.PARAMETER, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 public @interface RequestBody {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/ObjectProperty.java
Patch:
@@ -135,7 +135,7 @@ public ObjectProperty xml(Xml xml) {
         return this;
     }
 
-    public ObjectProperty example(String example) {
+    public ObjectProperty example(Object example) {
         this.setExample(example);
         return this;
     }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -474,6 +474,9 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
         }
         final Type type = param.dataTypeClass() == Void.class ? ReflectionUtils.typeFromString(param.dataType())
                 : param.dataTypeClass();
+        if (type == null) {
+            LOGGER.error("no dataType defined for implicit param `{}`! resolved parameter will not have a type defined, and will therefore be not compliant with spec. see https://github.com/swagger-api/swagger-core/issues/2556.", param.name());
+        }
         return ParameterProcessor.applyAnnotations(swagger, p, (type == null) ? String.class : type,
                 Arrays.<Annotation>asList(param));
     }

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitParams.java
Patch:
@@ -22,7 +22,8 @@ public class ResourceWithImplicitParams {
             @ApiImplicitParam(name = "width", paramType = "formData", dataType = "int", allowableValues = "range[infinity,1]"),
             @ApiImplicitParam(name = "height", paramType = "query", dataType = "int", allowableValues = "range[3,4]"),
             @ApiImplicitParam(name = "body", paramType = "body", dataType = "string", required = true),
-            @ApiImplicitParam(name = "width", paramType = "unknown")
+            @ApiImplicitParam(name = "width", paramType = "unknown"),
+            @ApiImplicitParam(name = "description", paramType = "query")
     })
     @ApiOperation("Test operation with implicit parameters")
     public void testString() {

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -474,6 +474,9 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
         }
         final Type type = param.dataTypeClass() == Void.class ? ReflectionUtils.typeFromString(param.dataType())
                 : param.dataTypeClass();
+        if (type == null) {
+            LOGGER.error("no dataType defined for implicit param `{}`! resolved parameter will not have a type defined, and will therefore be not compliant with spec. see https://github.com/swagger-api/swagger-core/issues/2556.", param.name());
+        }
         return ParameterProcessor.applyAnnotations(swagger, p, (type == null) ? String.class : type,
                 Arrays.<Annotation>asList(param));
     }

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitParams.java
Patch:
@@ -22,7 +22,8 @@ public class ResourceWithImplicitParams {
             @ApiImplicitParam(name = "width", paramType = "formData", dataType = "int", allowableValues = "range[infinity,1]"),
             @ApiImplicitParam(name = "height", paramType = "query", dataType = "int", allowableValues = "range[3,4]"),
             @ApiImplicitParam(name = "body", paramType = "body", dataType = "string", required = true),
-            @ApiImplicitParam(name = "width", paramType = "unknown")
+            @ApiImplicitParam(name = "width", paramType = "unknown"),
+            @ApiImplicitParam(name = "description", paramType = "query")
     })
     @ApiOperation("Test operation with implicit parameters")
     public void testString() {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -521,6 +521,9 @@ protected void processRequestBody(Parameter requestBodyParameter, Operation oper
                             !requestBody.getContent().isEmpty()) {
                         if (requestBodyParameter.getSchema() != null) {
                             for (MediaType mediaType : requestBody.getContent().values()) {
+                                if (mediaType.getSchema() == null) {
+                                    mediaType.setSchema(new Schema());
+                                }
                                 if (StringUtils.isBlank(mediaType.getSchema().getType())) {
                                     mediaType.getSchema().setType(requestBodyParameter.getSchema().getType());
                                 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -521,6 +521,9 @@ protected void processRequestBody(Parameter requestBodyParameter, Operation oper
                             !requestBody.getContent().isEmpty()) {
                         if (requestBodyParameter.getSchema() != null) {
                             for (MediaType mediaType : requestBody.getContent().values()) {
+                                if (mediaType.getSchema() == null) {
+                                    mediaType.setSchema(new Schema());
+                                }
                                 if (StringUtils.isBlank(mediaType.getSchema().getType())) {
                                     mediaType.getSchema().setType(requestBodyParameter.getSchema().getType());
                                 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -719,7 +719,7 @@ private Operation parseMethod(
 
         // operation id
         if (StringUtils.isBlank(operation.getOperationId())) {
-            operation.setOperationId(method.getName());
+            operation.setOperationId(getOperationId(method.getName()));
         }
 
         if (apiOperation != null) {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BooleanProperty.java
Patch:
@@ -41,7 +41,9 @@ public BooleanProperty example(Boolean example) {
     @Override
     public void setExample(Object example) {
         if (example instanceof String) {
-            this.example = Boolean.parseBoolean((String)example);
+            if (!((String) example).isEmpty()) {
+                this.example = Boolean.parseBoolean((String) example);
+            }
         } else {
             this.example = example;
         }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/Reader.java
Patch:
@@ -719,7 +719,7 @@ private Operation parseMethod(
 
         // operation id
         if (StringUtils.isBlank(operation.getOperationId())) {
-            operation.setOperationId(method.getName());
+            operation.setOperationId(getOperationId(method.getName()));
         }
 
         if (apiOperation != null) {

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/ReaderTest.java
Patch:
@@ -130,7 +130,6 @@ public void testCompleteReadClass() {
     @Test(description = "scan methods")
     public void testScanMethods() {
         Reader reader = new Reader(new OpenAPI());
-        OpenAPI openAPI = reader.read(SimpleMethods.class);
         Method[] methods = SimpleMethods.class.getMethods();
         for (final Method method : methods) {
             if (isValidRestPath(method)) {
@@ -259,8 +258,9 @@ public void testGetExternalDocs() {
     @Test(description = "Security Requirement")
     public void testSecurityRequirement() {
         Reader reader = new Reader(new OpenAPI());
-        Method[] methods = SecurityResource.class.getMethods();
-        Operation securityOperation = reader.parseMethod(methods[0], null);
+        Method[] methods = SecurityResource.class.getDeclaredMethods();
+        Operation securityOperation = reader.parseMethod(Arrays.stream(methods).filter(
+                (method -> method.getName().equals("getSecurity"))).findFirst().get(), null);
         assertNotNull(securityOperation);
         List<SecurityRequirement> securityRequirements = securityOperation.getSecurity();
         assertNotNull(securityRequirements);

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -445,7 +445,7 @@ public Schema resolve(JavaType type, ModelConverterContext context, Iterator<Mod
             final AnnotatedMember member = propDef.getPrimaryMember();
             if (member != null && !ignore(member, xmlAccessorTypeAnnotation, propName, propertiesToIgnore)) {
 
-                JavaType propType = member.getType(beanDesc.bindingsForBeanType());
+                JavaType propType = member.getType();
                 property = resolveAnnotatedType(propType, member, propName, context, model, (t, a) -> {
                     JsonUnwrapped uw = member.getAnnotation(JsonUnwrapped.class);
                     if (uw != null && uw.enabled()) {
@@ -636,7 +636,7 @@ protected Schema processAsId(String propertyName, JavaType type,
                     final String name = def.getName();
                     if (name != null && name.equals(propertyName)) {
                         final AnnotatedMember propMember = def.getPrimaryMember();
-                        final JavaType propType = propMember.getType(beanDesc.bindingsForBeanType());
+                        final JavaType propType = propMember.getType();
                         if (PrimitiveType.fromType(propType) != null) {
                             return PrimitiveType.createProperty(propType);
                         } else {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BooleanProperty.java
Patch:
@@ -41,7 +41,9 @@ public BooleanProperty example(Boolean example) {
     @Override
     public void setExample(Object example) {
         if (example instanceof String) {
-            this.example = Boolean.parseBoolean((String)example);
+            if (!((String) example).isEmpty()) {
+                this.example = Boolean.parseBoolean((String) example);
+            }
         } else {
             this.example = example;
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/ObjectMapperFactory.java
Patch:
@@ -90,7 +90,6 @@ public JsonSerializer<?> modifySerializer(
 
         Module deserializerModule = new DeserializationModule();
         mapper.registerModule(deserializerModule);
-        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
 
         List<Class<?>> mixinTargets = Arrays.asList(
                 ApiResponse.class,
@@ -130,6 +129,8 @@ public JsonSerializer<?> modifySerializer(
         mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
         mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);
         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+        mapper.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, false);
+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
 
         return mapper;
     }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/converter/ModelConverterContextImpl.java
Patch:
@@ -93,8 +93,8 @@ public Schema resolve(Type type) {
             modelByType.put(type, resolved);
 
             Schema resolvedImpl = resolved;
-            if(resolvedImpl.getTitle() != null) {
-                modelByName.put(resolvedImpl.getTitle(), resolved);
+            if(resolvedImpl.getName() != null) {
+                modelByName.put(resolvedImpl.getName(), resolved);
             }
         }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -220,7 +220,7 @@ public Schema resolveProperty(JavaType propType,
                         property = new Schema().$ref(constructRef(name));
                     }
                     else if(mi.get$ref() != null) {
-                        property = new Schema().$ref(StringUtils.isNotEmpty(mi.get$ref()) ? mi.get$ref() : mi.getTitle());
+                        property = new Schema().$ref(StringUtils.isNotEmpty(mi.get$ref()) ? mi.get$ref() : mi.getName());
                     }
                     else {
                         property = mi;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ApiFirstRequiredFieldModel.java
Patch:
@@ -10,9 +10,9 @@
 
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
-@Schema(title = "aaa")
+@Schema(name = "aaa")
 public class ApiFirstRequiredFieldModel {
-    @Schema(title = "bla", required = true)
+    @Schema(name = "bla", required = true)
     @XmlElement(name = "a")
     public String getA() {
         return "aaa";

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ModelWithAltPropertyName.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 
-@Schema(title = "sample_model")
+@Schema(name = "sample_model")
 public class ModelWithAltPropertyName {
     protected int id;
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ModelWithApiModel.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 
-@Schema(title = "MyModel")
+@Schema(name = "MyModel")
 public class ModelWithApiModel {
     public String name;
 }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ModelWithTuple2.java
Patch:
@@ -49,7 +49,7 @@ public Schema resolve(Type type, ModelConverterContext context, Iterator<ModelCo
                 final String name = "MapOf" + WordUtils.capitalize(_typeName(left));
 
                 return new MapSchema()
-                        .title(name)
+                        .name(name)
                         .additionalProperties(context.resolve(left, new Annotation[]{}));
             }
             return super.resolve(type, context, chain);

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/XmlFirstRequiredFieldModel.java
Patch:
@@ -9,7 +9,7 @@
 
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
-@Schema(title = "aaa")
+@Schema(name = "aaa")
 public class XmlFirstRequiredFieldModel {
     @XmlElement(name = "a")
     @Schema(description = "bla", required = true)

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/composition/AbstractModelWithApiModel.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import io.swagger.v3.oas.annotations.media.Schema;
 
-@Schema(title = "MyProperty")
+@Schema(name = "MyProperty")
 @JsonSubTypes({@JsonSubTypes.Type(value = ModelWithUrlProperty.class), @JsonSubTypes.Type(value = ModelWithValueProperty.class)})
 public abstract class AbstractModelWithApiModel {
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/converter/ModelConverterContextImpl.java
Patch:
@@ -93,8 +93,8 @@ public Schema resolve(Type type) {
             modelByType.put(type, resolved);
 
             Schema resolvedImpl = resolved;
-            if(resolvedImpl.getTitle() != null) {
-                modelByName.put(resolvedImpl.getTitle(), resolved);
+            if(resolvedImpl.getName() != null) {
+                modelByName.put(resolvedImpl.getName(), resolved);
             }
         }
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
Patch:
@@ -220,7 +220,7 @@ public Schema resolveProperty(JavaType propType,
                         property = new Schema().$ref(constructRef(name));
                     }
                     else if(mi.get$ref() != null) {
-                        property = new Schema().$ref(StringUtils.isNotEmpty(mi.get$ref()) ? mi.get$ref() : mi.getTitle());
+                        property = new Schema().$ref(StringUtils.isNotEmpty(mi.get$ref()) ? mi.get$ref() : mi.getName());
                     }
                     else {
                         property = mi;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ApiFirstRequiredFieldModel.java
Patch:
@@ -10,9 +10,9 @@
 
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
-@Schema(title = "aaa")
+@Schema(name = "aaa")
 public class ApiFirstRequiredFieldModel {
-    @Schema(title = "bla", required = true)
+    @Schema(name = "bla", required = true)
     @XmlElement(name = "a")
     public String getA() {
         return "aaa";

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ModelWithAltPropertyName.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 
-@Schema(title = "sample_model")
+@Schema(name = "sample_model")
 public class ModelWithAltPropertyName {
     protected int id;
 

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ModelWithApiModel.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 
-@Schema(title = "MyModel")
+@Schema(name = "MyModel")
 public class ModelWithApiModel {
     public String name;
 }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/ModelWithTuple2.java
Patch:
@@ -49,7 +49,7 @@ public Schema resolve(Type type, ModelConverterContext context, Iterator<ModelCo
                 final String name = "MapOf" + WordUtils.capitalize(_typeName(left));
 
                 return new MapSchema()
-                        .title(name)
+                        .name(name)
                         .additionalProperties(context.resolve(left, new Annotation[]{}));
             }
             return super.resolve(type, context, chain);

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/XmlFirstRequiredFieldModel.java
Patch:
@@ -9,7 +9,7 @@
 
 @XmlRootElement
 @XmlAccessorType(XmlAccessType.FIELD)
-@Schema(title = "aaa")
+@Schema(name = "aaa")
 public class XmlFirstRequiredFieldModel {
     @XmlElement(name = "a")
     @Schema(description = "bla", required = true)

File: modules/swagger-core/src/test/java/io/swagger/v3/core/oas/models/composition/AbstractModelWithApiModel.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import io.swagger.v3.oas.annotations.media.Schema;
 
-@Schema(title = "MyProperty")
+@Schema(name = "MyProperty")
 @JsonSubTypes({@JsonSubTypes.Type(value = ModelWithUrlProperty.class), @JsonSubTypes.Type(value = ModelWithValueProperty.class)})
 public abstract class AbstractModelWithApiModel {
 

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/DeserializationModule.java
Patch:
@@ -14,7 +14,6 @@ public DeserializationModule() {
 
         this.addDeserializer(Schema.class, new ModelDeserializer());
         this.addDeserializer(Parameter.class, new ParameterDeserializer());
-//        this.addDeserializer(RequestBody.class, new RequestBodyDeserializer());
         this.addDeserializer(Header.StyleEnum.class, new HeaderStyleEnumDeserializer());
         this.addDeserializer(Encoding.StyleEnum.class, new EncodingStyleEnumDeserializer());
         this.addDeserializer(EncodingProperty.StyleEnum.class, new EncodingPropertyStyleEnumDeserializer());

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/responses/ApiResponse.java
Patch:
@@ -63,7 +63,6 @@
      **/
     Link[] links() default {};
 
-    // TODO #2312 as array, according to spec
     /**
      * An array containing descriptions of potential response payloads, for different media types.
      * 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.swagger.v3.core.converter.ModelConverters;
 import io.swagger.v3.core.util.AnnotationsUtils;
-import io.swagger.v3.core.util.ParameterProcessor;
 import io.swagger.v3.oas.annotations.media.Encoding;
 import io.swagger.v3.oas.annotations.media.ExampleObject;
 import io.swagger.v3.oas.models.Components;
@@ -104,7 +103,7 @@ public static Optional<Content> getContent(io.swagger.v3.oas.annotations.media.C
                 content.addMediaType(annotationContent.mediaType(), mediaType);
             } else {
                 if (mediaType.getSchema() != null) {
-                    ParameterProcessor.applyTypes(classTypes, methodTypes, content, mediaType);
+                    AnnotationsUtils.applyTypes(classTypes, methodTypes, content, mediaType);
                 }
             }
         }

File: modules/swagger-annotations/src/main/java/io/swagger/v3/oas/annotations/responses/ApiResponse.java
Patch:
@@ -63,7 +63,6 @@
      **/
     Link[] links() default {};
 
-    // TODO #2312 as array, according to spec
     /**
      * An array containing descriptions of potential response payloads, for different media types.
      * 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/OperationParser.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.swagger.v3.core.converter.ModelConverters;
 import io.swagger.v3.core.util.AnnotationsUtils;
-import io.swagger.v3.core.util.ParameterProcessor;
 import io.swagger.v3.oas.annotations.media.Encoding;
 import io.swagger.v3.oas.annotations.media.ExampleObject;
 import io.swagger.v3.oas.models.Components;
@@ -104,7 +103,7 @@ public static Optional<Content> getContent(io.swagger.v3.oas.annotations.media.C
                 content.addMediaType(annotationContent.mediaType(), mediaType);
             } else {
                 if (mediaType.getSchema() != null) {
-                    ParameterProcessor.applyTypes(classTypes, methodTypes, content, mediaType);
+                    AnnotationsUtils.applyTypes(classTypes, methodTypes, content, mediaType);
                 }
             }
         }

File: modules/swagger-core/src/main/java/io/swagger/v3/core/util/AnnotationsUtils.java
Patch:
@@ -70,6 +70,7 @@ public static boolean hasSchemaAnnotation(io.swagger.v3.oas.annotations.media.Sc
                 && schema.not().equals(Void.class)
                 && schema.oneOf().length == 0
                 && schema.anyOf().length == 0
+                && schema.subTypes().length == 0
                 ) {
             return false;
         }

File: modules/swagger-core/src/test/java/io/swagger/v3/core/serialization/properties/PropertySerializationTest.java
Patch:
@@ -261,7 +261,7 @@ public void deserializeEnumIntegerProperty() throws IOException {
         final String json = "{\"type\":\"integer\",\"format\":\"int32\",\"enum\":[1,2]}";
         final Schema p = m.readValue(json, Schema.class);
         assertEquals(p.getType(), "integer");
-        List<Integer> _enum = ((IntegerSchema) p).getEnum();
+        List<Number> _enum = ((IntegerSchema) p).getEnum();
         assertNotNull(_enum);
         assertEquals(_enum, Arrays.asList(1, 2));
         assertEquals(p.getClass(), IntegerSchema.class);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/examples/ExamplesTest.java
Patch:
@@ -110,8 +110,6 @@ public void testSimpleCallback() {
                 "          type: integer\n" +
                 "          description: User Status\n" +
                 "          format: int32\n" +
-                "          enum:\n" +
-                "          - null\n" +
                 "      xml:\n" +
                 "        name: User\n" +
                 "    SubscriptionResponse:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/requests/RequestBodyTest.java
Patch:
@@ -150,8 +150,6 @@ public void oneRequestBodyMultipleParameters() throws IOException {
                 "          type: integer\n" +
                 "          description: User Status\n" +
                 "          format: int32\n" +
-                "          enum:\n" +
-                "          - null\n" +
                 "      xml:\n" +
                 "        name: User\n" +
                 "    Category:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/User.java
Patch:
@@ -96,6 +96,7 @@ public void setPhone(String phone) {
   }
 
   @XmlElement(name = "userStatus")
+  //@Schema(description = "User Status", type = "string", allowableValues = {"1-registered", "2-active", "3-closed"})
   @Schema(description = "User Status", allowableValues = "1-registered,2-active,3-closed")
   public int getUserStatus() {
     return userStatus;

File: modules/swagger-core/src/test/java/io/swagger/v3/core/serialization/properties/PropertySerializationTest.java
Patch:
@@ -261,7 +261,7 @@ public void deserializeEnumIntegerProperty() throws IOException {
         final String json = "{\"type\":\"integer\",\"format\":\"int32\",\"enum\":[1,2]}";
         final Schema p = m.readValue(json, Schema.class);
         assertEquals(p.getType(), "integer");
-        List<Integer> _enum = ((IntegerSchema) p).getEnum();
+        List<Number> _enum = ((IntegerSchema) p).getEnum();
         assertNotNull(_enum);
         assertEquals(_enum, Arrays.asList(1, 2));
         assertEquals(p.getClass(), IntegerSchema.class);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/examples/ExamplesTest.java
Patch:
@@ -110,8 +110,6 @@ public void testSimpleCallback() {
                 "          type: integer\n" +
                 "          description: User Status\n" +
                 "          format: int32\n" +
-                "          enum:\n" +
-                "          - null\n" +
                 "      xml:\n" +
                 "        name: User\n" +
                 "    SubscriptionResponse:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/annotations/requests/RequestBodyTest.java
Patch:
@@ -150,8 +150,6 @@ public void oneRequestBodyMultipleParameters() throws IOException {
                 "          type: integer\n" +
                 "          description: User Status\n" +
                 "          format: int32\n" +
-                "          enum:\n" +
-                "          - null\n" +
                 "      xml:\n" +
                 "        name: User\n" +
                 "    Category:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/v3/jaxrs2/resources/model/User.java
Patch:
@@ -96,6 +96,7 @@ public void setPhone(String phone) {
   }
 
   @XmlElement(name = "userStatus")
+  //@Schema(description = "User Status", type = "string", allowableValues = {"1-registered", "2-active", "3-closed"})
   @Schema(description = "User Status", allowableValues = "1-registered,2-active,3-closed")
   public int getUserStatus() {
     return userStatus;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/ObjectProperty.java
Patch:
@@ -135,7 +135,7 @@ public ObjectProperty xml(Xml xml) {
         return this;
     }
 
-    public ObjectProperty example(String example) {
+    public ObjectProperty example(Object example) {
         this.setExample(example);
         return this;
     }

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/api/OpenApiScanner.java
Patch:
@@ -10,4 +10,6 @@ public interface OpenApiScanner {
     Set<Class<?>> classes();
 
     Map<String, Object> resources();
+
+
 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/ServletOpenApiContextBuilder.java
Patch:
@@ -25,6 +25,7 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             ctx = new XmlWebOpenApiContext()
                     .servletConfig(servletConfig)
                     .openApiConfiguration(openApiConfiguration)
+                    .id(ctxId)
                     .parent(rootCtx);
 
             if (ctx.getConfigLocation() == null && configLocation != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/XmlWebOpenApiContext.java
Patch:
@@ -35,7 +35,6 @@ public T servletConfig(ServletConfig servletConfig) {
         if (!ServletConfigContextUtils.isServletConfigAvailable(servletConfig)) return (T)this;
         this.servletConfig = servletConfig;
         this.servletContext = servletConfig.getServletContext();
-        id(OPENAPI_CONTEXT_ID_PREFIX + "servlet." + servletConfig.getServletName());
         return (T)this;
     }
 

File: modules/swagger-integration/src/main/java/io/swagger/v3/oas/integration/api/OpenApiScanner.java
Patch:
@@ -10,4 +10,6 @@ public interface OpenApiScanner {
     Set<Class<?>> classes();
 
     Map<String, Object> resources();
+
+
 }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/ServletOpenApiContextBuilder.java
Patch:
@@ -25,6 +25,7 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             ctx = new XmlWebOpenApiContext()
                     .servletConfig(servletConfig)
                     .openApiConfiguration(openApiConfiguration)
+                    .id(ctxId)
                     .parent(rootCtx);
 
             if (ctx.getConfigLocation() == null && configLocation != null) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/v3/jaxrs2/integration/XmlWebOpenApiContext.java
Patch:
@@ -35,7 +35,6 @@ public T servletConfig(ServletConfig servletConfig) {
         if (!ServletConfigContextUtils.isServletConfigAvailable(servletConfig)) return (T)this;
         this.servletConfig = servletConfig;
         this.servletContext = servletConfig.getServletContext();
-        id(OPENAPI_CONTEXT_ID_PREFIX + "servlet." + servletConfig.getServletName());
         return (T)this;
     }
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithAltPropertyName.java
Patch:
@@ -7,7 +7,6 @@ public class ModelWithAltPropertyName {
     protected int id;
 
     @Schema(
-//            access = "public",
             name = "the_id",
             description = "Note, this is server generated.",
             title = "Read-only")

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -35,7 +35,8 @@
  * Describes a single operation parameter
  **/
 @Target({ ElementType.PARAMETER,
-          ElementType.METHOD })
+          ElementType.METHOD,
+          ElementType.FIELD})
 @Retention(RetentionPolicy.RUNTIME)
 @Repeatable(Parameters.class)
 @Inherited

File: modules/swagger-core/src/main/java/io/swagger/converter/ModelConverterContextImpl.java
Patch:
@@ -49,8 +49,8 @@ public void defineModel(String name, Schema model) {
 
     @Override
     public void defineModel(String name, Schema model, Type type, String prevName) {
-        if (LOGGER.isDebugEnabled()) {
-            LOGGER.debug(String.format("defineModel %s %s", name, model));
+        if (LOGGER.isTraceEnabled()) {
+            LOGGER.trace(String.format("defineModel %s %s", name, model));
         }
         modelByName.put(name, model);
 

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -284,7 +284,9 @@ else if(PrimitiveType.fromType(type) != null) {
          */
         Schema resolvedModel = context.resolve(type.getRawClass());
         if (resolvedModel != null) {
-            return resolvedModel;
+            if(name.equals(resolvedModel.getName())) {
+                return resolvedModel;
+            }
         }
         // uses raw class, as it does not consider super class while handling schema annotation for composed model props
         List<Class<?>> composedSchemaReferencedClasses = getComposedSchemaReferencedClasses(type.getRawClass());

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -122,7 +122,7 @@ public FileSchema createProperty() {
     OBJECT(Object.class) {
         @Override
         public Schema createProperty() {
-            return new Schema();
+            return new Schema().type("object");
         }
     };
 

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -122,7 +122,7 @@ public FileSchema createProperty() {
     OBJECT(Object.class) {
         @Override
         public Schema createProperty() {
-            return new Schema();
+            return new Schema().type("object");
         }
     };
 

File: modules/swagger-core/src/main/java/io/swagger/converter/ModelConverterContextImpl.java
Patch:
@@ -49,8 +49,8 @@ public void defineModel(String name, Schema model) {
 
     @Override
     public void defineModel(String name, Schema model, Type type, String prevName) {
-        if (LOGGER.isDebugEnabled()) {
-            LOGGER.debug(String.format("defineModel %s %s", name, model));
+        if (LOGGER.isTraceEnabled()) {
+            LOGGER.trace(String.format("defineModel %s %s", name, model));
         }
         modelByName.put(name, model);
 

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -284,7 +284,9 @@ else if(PrimitiveType.fromType(type) != null) {
          */
         Schema resolvedModel = context.resolve(type.getRawClass());
         if (resolvedModel != null) {
-            return resolvedModel;
+            if(name.equals(resolvedModel.getName())) {
+                return resolvedModel;
+            }
         }
         // uses raw class, as it does not consider super class while handling schema annotation for composed model props
         List<Class<?>> composedSchemaReferencedClasses = getComposedSchemaReferencedClasses(type.getRawClass());

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/OpenAPIDefinition.java
Patch:
@@ -36,7 +36,7 @@
      *
      * @return the metadata about this API
      */
-    Info info();
+    Info info() default @Info;
 
     /**
      * A list of tags used by the specification with additional metadata.

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/info/InfoTest.java
Patch:
@@ -1,6 +1,7 @@
 package io.swagger.jaxrs2.annotations.info;
 
 import io.swagger.jaxrs2.annotations.AbstractAnnotationTest;
+import io.swagger.oas.annotations.OpenAPIDefinition;
 import io.swagger.oas.annotations.info.Contact;
 import io.swagger.oas.annotations.info.Info;
 import io.swagger.oas.annotations.info.License;
@@ -31,12 +32,12 @@ public void testSimpleInfoGet() {
         assertEquals(extractedYAML, expectedYAML);
     }
 
-    @Info(
+    @OpenAPIDefinition(info = @Info(
             title = "the title",
             version = "0.0",
             description = "My API",
             license = @License(name = "Apache 2.0", url = "http://foo.bar"),
-            contact = @Contact(url = "http://gigantic-server.com", name = "Fred", email = "Fred@gigagantic-server.com")
+            contact = @Contact(url = "http://gigantic-server.com", name = "Fred", email = "Fred@gigagantic-server.com"))
     )
     static class ClassWithInfoAnnotation {
         // do something here

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/headers/Header.java
Patch:
@@ -35,7 +35,7 @@
      * 
      * @return the header's name
      **/
-    String name() default "";
+    String name();
 
     /**
      * Additional description data to provide on the purpose of the header

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/encoding/EncodingTest.java
Patch:
@@ -167,6 +167,8 @@ public void testGetOperationWithEncodingArrayInParameter() {
                               "        required: true\n" +
                               "        content:\n" +
                               "          application/json:\n" +
+                              "            schema:\n" +
+                              "              title: testEncoding2\n" +
                               "            encoding:\n" +
                               "              testEncoding:\n" +
                               "                style: form\n" +

File: modules/swagger-core/src/test/java/io/swagger/filter/resources/NoCategoryRefSchemaFilter.java
Patch:
@@ -8,9 +8,6 @@
 import java.util.Map;
 import java.util.Optional;
 
-/**
- * Does nothing
- **/
 public class NoCategoryRefSchemaFilter extends AbstractSpecFilter {
     private static final String MODEL = "Category";
 

File: modules/swagger-core/src/test/java/io/swagger/filter/resources/NoPetRefSchemaFilter.java
Patch:
@@ -8,9 +8,6 @@
 import java.util.Map;
 import java.util.Optional;
 
-/**
- * Does nothing
- **/
 public class NoPetRefSchemaFilter extends AbstractSpecFilter {
     private static final String MODEL = "Pet";
 

File: modules/swagger-core/src/test/java/io/swagger/filter/resources/NoTagRefSchemaPropertyFilter.java
Patch:
@@ -8,9 +8,6 @@
 import java.util.Map;
 import java.util.Optional;
 
-/**
- * Does nothing
- **/
 public class NoTagRefSchemaPropertyFilter extends AbstractSpecFilter {
     private static final String MODEL = "Tag";
 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/resources/AcceptHeaderOpenApiResource.java
Patch:
@@ -11,7 +11,7 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.UriInfo;
 
-@Path("/openApi")
+@Path("/openapi")
 public class AcceptHeaderOpenApiResource extends BaseOpenApiResource {
     @Context
     ServletConfig config;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/resources/OpenApiResource.java
Patch:
@@ -12,7 +12,7 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.UriInfo;
 
-@Path("/openApi.{type:json|yaml}")
+@Path("/openapi.{type:json|yaml}")
 public class OpenApiResource extends BaseOpenApiResource {
     @Context
     ServletConfig config;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/Reader.java
Patch:
@@ -66,8 +66,7 @@ public class Reader implements OpenApiReader {
     private Paths paths;
     private Set<Tag> openApiTags;
     javax.ws.rs.Consumes classConsumes;
-    javax.ws.rs.Consumes methodConsumes;
-    
+
     javax.ws.rs.Produces classProduces;
     javax.ws.rs.Produces methodProduces;
 
@@ -525,7 +524,6 @@ private void setOperationObjectFromApiOperationAnnotation(Operation operation, i
         OperationParser.getTags(apiOperation.tags()).ifPresent(tag -> openApiTags.addAll(tag));
         OperationParser.getExternalDocumentation(apiOperation.externalDocs()).ifPresent(operation::setExternalDocs);
         OperationParser.getApiResponses(apiOperation.responses(), classProduces, methodProduces, components).ifPresent(operation::setResponses);
-        OperationParser.getRequestBody(apiOperation.requestBody(), classConsumes, methodConsumes, components).ifPresent(operation::setRequestBody);
         OperationParser.getServers(apiOperation.servers()).ifPresent(operation::setServers);
         OperationParser.getParametersList(apiOperation.parameters(), classProduces, methodProduces, components).ifPresent(operation::setParameters);
     

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/Reader.java
Patch:
@@ -66,6 +66,8 @@ public class Reader implements OpenApiReader {
     private Paths paths;
     private Set<Tag> openApiTags;
     javax.ws.rs.Consumes classConsumes;
+    javax.ws.rs.Consumes methodConsumes;
+    
     javax.ws.rs.Produces classProduces;
     javax.ws.rs.Produces methodProduces;
 
@@ -523,6 +525,7 @@ private void setOperationObjectFromApiOperationAnnotation(Operation operation, i
         OperationParser.getTags(apiOperation.tags()).ifPresent(tag -> openApiTags.addAll(tag));
         OperationParser.getExternalDocumentation(apiOperation.externalDocs()).ifPresent(operation::setExternalDocs);
         OperationParser.getApiResponses(apiOperation.responses(), classProduces, methodProduces, components).ifPresent(operation::setResponses);
+        OperationParser.getRequestBody(apiOperation.requestBody(), classConsumes, methodConsumes, components).ifPresent(operation::setRequestBody);
         OperationParser.getServers(apiOperation.servers()).ifPresent(operation::setServers);
         OperationParser.getParametersList(apiOperation.parameters(), classProduces, methodProduces, components).ifPresent(operation::setParameters);
     

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/headers/Header.java
Patch:
@@ -32,6 +32,8 @@
 public @interface Header {
     /**
      * Required: The name of the header. The name is only used as the key to store this header in a map.
+     * 
+     * @return the header's name
      **/
     String name() default "";
 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/headers/Header.java
Patch:
@@ -32,6 +32,8 @@
 public @interface Header {
     /**
      * Required: The name of the header. The name is only used as the key to store this header in a map.
+     * 
+     * @return the header's name
      **/
     String name() default "";
 

File: modules/swagger-core/src/test/java/io/swagger/matchers/SerializationMatchers.java
Patch:
@@ -1,5 +1,6 @@
 package io.swagger.matchers;
 
+import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.fail;
 import io.swagger.util.Json;
 import io.swagger.util.Yaml;
@@ -35,7 +36,8 @@ private static void apply(Object objectToSerialize, String str, ObjectMapper map
             LOGGER.error("Failed to read value", e);
         }
         if (!lhs.equals(new ObjectNodeComparator(), rhs)) {
-            fail(String.format("Serialized object:\n%s\ndoes not equal to expected serialized string:\n%s", lhs, rhs));
+            assertEquals(Yaml.pretty(lhs), Yaml.pretty(rhs));
+            //fail(String.format("Serialized object:\n%s\ndoes not equal to expected serialized string:\n%s", lhs, rhs));
         }
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/examples/ExamplesTest.java
Patch:
@@ -29,7 +29,9 @@ public void testSimpleCallback() {
         String extractedYAML = openApiYAML.substring(start, end);
         String expectedYAML = "/test:\n" +
                 "    post:\n" +
-                "      description: subscribes a client to updates relevant to the requestor's account, as identified by the input token.  The supplied url will be used as the delivery address for response payloads\n" +
+                "      description: subscribes a client to updates relevant to the requestor's account,\n" +
+                "        as identified by the input token.  The supplied url will be used as the delivery\n" +
+                "        address for response payloads\n" +
                 "      operationId: subscribe\n" +
                 "      parameters:\n" +
                 "      - name: subscriptionId\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/parameters/ParametersTest.java
Patch:
@@ -29,7 +29,9 @@ public void testSimpleCallback() {
         String extractedYAML = openApiYAML.substring(start, end);
         String expectedYAML = "/test:\n" +
                 "    post:\n" +
-                "      description: subscribes a client to updates relevant to the requestor's account, as identified by the input token.  The supplied url will be used as the delivery address for response payloads\n" +
+                "      description: subscribes a client to updates relevant to the requestor's account,\n" +
+                "        as identified by the input token.  The supplied url will be used as the delivery\n" +
+                "        address for response payloads\n" +
                 "      operationId: subscribe\n" +
                 "      parameters:\n" +
                 "      - name: subscriptionId\n" +

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -284,12 +284,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.examples, header.examples) &&
         Objects.equals(this.example, header.example) &&
         Objects.equals(this.content, header.content) &&
-        Objects.equals(this.extensions, header.extensions);
+        Objects.equals(this.extensions, header.extensions) &&
+        Objects.equals(this.$ref, header.$ref);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(description, required, deprecated, allowEmptyValue, style, explode, schema, examples, example, content, extensions);
+    return Objects.hash(description, required, deprecated, allowEmptyValue, style, explode, schema, examples, example, content, extensions, $ref);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Schema.java
Patch:
@@ -782,6 +782,7 @@ public boolean equals(java.lang.Object o) {
                 Objects.equals(this.deprecated, schema.deprecated) &&
                 Objects.equals(this.xml, schema.xml) &&
                 Objects.equals(this.extensions, schema.extensions) &&
+                Objects.equals(this.discriminator, schema.discriminator) &&
                 Objects.equals(this._enum, schema._enum) &&
                 Objects.equals(this._default, schema._default);
     }
@@ -790,7 +791,7 @@ public boolean equals(java.lang.Object o) {
     public int hashCode() {
         return Objects.hash(title, multipleOf, maximum, exclusiveMaximum, minimum, exclusiveMinimum, maxLength, minLength, pattern, maxItems,
                 minItems, uniqueItems, maxProperties, minProperties, required, type, not, properties, additionalProperties, description, format, $ref,
-                nullable, readOnly, writeOnly, example, externalDocs, deprecated, xml, extensions, _enum, _default);
+                nullable, readOnly, writeOnly, example, externalDocs, deprecated, xml, extensions, discriminator, _enum, _default);
     }
 
 
@@ -842,6 +843,7 @@ public String toString() {
         sb.append("    example: ").append(toIndentedString(example)).append("\n");
         sb.append("    externalDocs: ").append(toIndentedString(externalDocs)).append("\n");
         sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
+        sb.append("    discriminator: ").append(toIndentedString(discriminator)).append("\n");
         sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
         sb.append("}");
         return sb.toString();

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -369,12 +369,13 @@ public boolean equals(java.lang.Object o) {
                 Objects.equals(this.examples, parameter.examples) &&
                 Objects.equals(this.example, parameter.example) &&
                 Objects.equals(this.content, parameter.content) &&
+                Objects.equals(this.$ref, parameter.$ref) &&
                 Objects.equals(this.extensions, parameter.extensions);
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(name, in, description, required, deprecated, allowEmptyValue, style, explode, allowReserved, schema, examples, example, content, extensions);
+        return Objects.hash(name, in, description, required, deprecated, allowEmptyValue, style, explode, allowReserved, schema, examples, example, content, $ref, extensions);
     }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Schema.java
Patch:
@@ -843,6 +843,7 @@ public String toString() {
         sb.append("    example: ").append(toIndentedString(example)).append("\n");
         sb.append("    externalDocs: ").append(toIndentedString(externalDocs)).append("\n");
         sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
+        sb.append("    discriminator: ").append(toIndentedString(discriminator)).append("\n");
         sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
         sb.append("}");
         return sb.toString();

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/operations/MergedOperationTest.java
Patch:
@@ -127,7 +127,6 @@ public SimpleResponse getSimpleResponseWithParameters(
                         required = true,
                         format = "uuid",
                         pattern = "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")
-
                 @QueryParam("id") String id,
                 @HeaderParam("x-authorized-by") String[] auth) {
             return null;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/parameters/ParametersTest.java
Patch:
@@ -39,6 +39,7 @@ public void testSimpleCallback() {
                 "      - name: formId\n" +
                 "        in: query\n" +
                 "        required: true\n" +
+                "        example: Example\n" +
                 "      - name: explodeFalse\n" +
                 "        in: query\n" +
                 "        required: true\n" +
@@ -84,7 +85,6 @@ public void testSimpleCallback() {
                 "      description: the generated id\n" +
                 "      format: id\n" +
                 "      readOnly: true";
-        System.out.println(expectedYAML);
         assertEquals(extractedYAML, expectedYAML);
     }
 
@@ -99,7 +99,8 @@ static class SimpleOperations {
                         @Parameter(in = "path", name = "subscriptionId", required = true,
                                 schema = @Schema(implementation = ParametersTest.SubscriptionResponse.class), style = "simple"),
                         @Parameter(in = "query", name = "formId", required = true,
-                                schema = @Schema(implementation = ParametersTest.SubscriptionResponse.class)),
+                                schema = @Schema(implementation = ParametersTest.SubscriptionResponse.class),
+                                example = "Example"),
                         @Parameter(in = "query", name = "explodeFalse", required = true, explode = Explode.FALSE,
                                 schema = @Schema(implementation = ParametersTest.SubscriptionResponse.class)),
                         @Parameter(in = "query", name = "explodeTrue", required = true, explode = Explode.TRUE,
@@ -128,7 +129,6 @@ static class SimpleOperations {
                 },
                 responses = {
                         @ApiResponse(
-                                responseCode = "default",
                                 description = "no description", content = @Content(
                                 mediaType = "*/*",
                                 schema =

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/PetResource.java
Patch:
@@ -46,7 +46,8 @@ public class PetResource {
     @Operation(summary = "Find pet by ID",
             description = "Returns a pet when 0 < ID <= 10.  ID > 10 or nonintegers will simulate API error conditions",
             responses = {
-                    @ApiResponse(description = "The pet", content = @Content(
+                    @ApiResponse(
+                            description = "The pet", content = @Content(
                             schema = @Schema(implementation = Pet.class)
                     )),
                     @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/pathItems/OperationsWithLinksTest.java
Patch:
@@ -220,7 +220,6 @@ public void createOperationWithLinkReferences() {
                 "                $ref: '#/components/schemas/User'\n" +
                 "          links:\n" +
                 "            user:\n" +
-                "              operationRef: '#/components/links/MyLink'\n" +
                 "              operationId: getUser\n" +
                 "              parameters:\n" +
                 "                userId: $request.query.userId\n" +

File: modules/swagger-integration/src/main/java/io/swagger/oas/integration/GenericOpenApiContext.java
Patch:
@@ -204,7 +204,7 @@ protected OpenApiScanner buildScanner(final OpenAPIConfiguration openApiConfigur
 
     protected List<ImmutablePair<String, String>> getKnownLocations() {
         return Arrays.asList(
-                new ImmutablePair<>("classpath", "openapi-configiguration.yaml"),
+                new ImmutablePair<>("classpath", "openapi-configuration.yaml"),
                 new ImmutablePair<>("classpath", "openapi-configuration.json"),
                 new ImmutablePair<>("file", "openapi-configuration.yaml"),
                 new ImmutablePair<>("file", "openapi-configuration.json"),

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -23,7 +23,7 @@ public class ServletConfigContextUtils {
     public static final String OPENAPI_CONFIGURATION_READALLRESOURCES_KEY = "openApi.configuration.readAllResources";
     public static final String OPENAPI_CONFIGURATION_RESOURCECLASSES_KEY = "openApi.configuration.resourceClasses";
     public static final String OPENAPI_CONFIGURATION_FILTER_KEY = "openApi.configuration.filterClass";
-    public static final String OPENAPI_CONFIGURATION_CACHE_TTL_KEY = "openApi.configuration.filterClass";
+    public static final String OPENAPI_CONFIGURATION_CACHE_TTL_KEY = "openApi.configuration.cacheTTL";
 
     public static Set<String> resolveResourcePackages(ServletConfig servletConfig) {
         if (!isServletConfigAvailable(servletConfig)) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/XmlWebOpenApiContext.java
Patch:
@@ -46,8 +46,8 @@ protected List<ImmutablePair<String, String>> getKnownLocations() {
 
         List<ImmutablePair<String, String>> locations = new LinkedList<>(Arrays.asList(
                 new ImmutablePair<>("servlet", ServletConfigContextUtils.OPENAPI_CONFIGURATION_LOCATION_KEY),
-                new ImmutablePair<>("file", "WEBINF/openapi-configuration.yaml"),
-                new ImmutablePair<>("file", "WEBINF/openapi-configuration.json")
+                new ImmutablePair<>("file", "WEB-INF/openapi-configuration.yaml"),
+                new ImmutablePair<>("file", "WEB-INF/openapi-configuration.json")
         ));
         locations.addAll(super.getKnownLocations());
         locations.add(new ImmutablePair<>("servlet", ""));  // get config from init params

File: modules/swagger-integration/src/main/java/io/swagger/oas/integration/GenericOpenApiContext.java
Patch:
@@ -204,7 +204,7 @@ protected OpenApiScanner buildScanner(final OpenAPIConfiguration openApiConfigur
 
     protected List<ImmutablePair<String, String>> getKnownLocations() {
         return Arrays.asList(
-                new ImmutablePair<>("classpath", "openapi-configiguration.yaml"),
+                new ImmutablePair<>("classpath", "openapi-configuration.yaml"),
                 new ImmutablePair<>("classpath", "openapi-configuration.json"),
                 new ImmutablePair<>("file", "openapi-configuration.yaml"),
                 new ImmutablePair<>("file", "openapi-configuration.json"),

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -23,7 +23,7 @@ public class ServletConfigContextUtils {
     public static final String OPENAPI_CONFIGURATION_READALLRESOURCES_KEY = "openApi.configuration.readAllResources";
     public static final String OPENAPI_CONFIGURATION_RESOURCECLASSES_KEY = "openApi.configuration.resourceClasses";
     public static final String OPENAPI_CONFIGURATION_FILTER_KEY = "openApi.configuration.filterClass";
-    public static final String OPENAPI_CONFIGURATION_CACHE_TTL_KEY = "openApi.configuration.filterClass";
+    public static final String OPENAPI_CONFIGURATION_CACHE_TTL_KEY = "openApi.configuration.cacheTTL";
 
     public static Set<String> resolveResourcePackages(ServletConfig servletConfig) {
         if (!isServletConfigAvailable(servletConfig)) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/XmlWebOpenApiContext.java
Patch:
@@ -46,8 +46,8 @@ protected List<ImmutablePair<String, String>> getKnownLocations() {
 
         List<ImmutablePair<String, String>> locations = new LinkedList<>(Arrays.asList(
                 new ImmutablePair<>("servlet", ServletConfigContextUtils.OPENAPI_CONFIGURATION_LOCATION_KEY),
-                new ImmutablePair<>("file", "WEBINF/openapi-configuration.yaml"),
-                new ImmutablePair<>("file", "WEBINF/openapi-configuration.json")
+                new ImmutablePair<>("file", "WEB-INF/openapi-configuration.yaml"),
+                new ImmutablePair<>("file", "WEB-INF/openapi-configuration.json")
         ));
         locations.addAll(super.getKnownLocations());
         locations.add(new ImmutablePair<>("servlet", ""));  // get config from init params

File: modules/swagger-integration/src/main/java/io/swagger/oas/integration/GenericOpenApiContext.java
Patch:
@@ -204,7 +204,7 @@ protected OpenApiScanner buildScanner(final OpenAPIConfiguration openApiConfigur
 
     protected List<ImmutablePair<String, String>> getKnownLocations() {
         return Arrays.asList(
-                new ImmutablePair<>("classpath", "openapi-configiguration.yaml"),
+                new ImmutablePair<>("classpath", "openapi-configuration.yaml"),
                 new ImmutablePair<>("classpath", "openapi-configuration.json"),
                 new ImmutablePair<>("file", "openapi-configuration.yaml"),
                 new ImmutablePair<>("file", "openapi-configuration.json"),

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -23,7 +23,7 @@ public class ServletConfigContextUtils {
     public static final String OPENAPI_CONFIGURATION_READALLRESOURCES_KEY = "openApi.configuration.readAllResources";
     public static final String OPENAPI_CONFIGURATION_RESOURCECLASSES_KEY = "openApi.configuration.resourceClasses";
     public static final String OPENAPI_CONFIGURATION_FILTER_KEY = "openApi.configuration.filterClass";
-    public static final String OPENAPI_CONFIGURATION_CACHE_TTL_KEY = "openApi.configuration.filterClass";
+    public static final String OPENAPI_CONFIGURATION_CACHE_TTL_KEY = "openApi.configuration.cacheTTL";
 
     public static Set<String> resolveResourcePackages(ServletConfig servletConfig) {
         if (!isServletConfigAvailable(servletConfig)) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/XmlWebOpenApiContext.java
Patch:
@@ -46,8 +46,8 @@ protected List<ImmutablePair<String, String>> getKnownLocations() {
 
         List<ImmutablePair<String, String>> locations = new LinkedList<>(Arrays.asList(
                 new ImmutablePair<>("servlet", ServletConfigContextUtils.OPENAPI_CONFIGURATION_LOCATION_KEY),
-                new ImmutablePair<>("file", "WEBINF/openapi-configuration.yaml"),
-                new ImmutablePair<>("file", "WEBINF/openapi-configuration.json")
+                new ImmutablePair<>("file", "WEB-INF/openapi-configuration.yaml"),
+                new ImmutablePair<>("file", "WEB-INF/openapi-configuration.json")
         ));
         locations.addAll(super.getKnownLocations());
         locations.add(new ImmutablePair<>("servlet", ""));  // get config from init params

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/pathItems/OperationsWithLinksTest.java
Patch:
@@ -220,7 +220,6 @@ public void createOperationWithLinkReferences() {
                 "                $ref: '#/components/schemas/User'\n" +
                 "          links:\n" +
                 "            user:\n" +
-                "              operationRef: '#/components/links/MyLink'\n" +
                 "              operationId: getUser\n" +
                 "              parameters:\n" +
                 "                userId: $request.query.userId\n" +

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -285,7 +285,7 @@ public Parameter examples(Map<String, Example> examples) {
         return this;
     }
 
-    public Parameter addExamples(String key, Example examplesItem) {
+    public Parameter addExample(String key, Example examplesItem) {
         if (this.examples == null) {
             this.examples = new HashMap<String, Example>();
         }

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -218,7 +218,7 @@ public Header examples(Map<String, Example> examples) {
     return this;
   }
 
-  public Header addExamples(String key, Example examplesItem) {
+  public Header addExample(String key, Example examplesItem) {
     if (this.examples == null) {
       this.examples = new HashMap<String, Example>();
     }

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -285,7 +285,7 @@ public Parameter examples(Map<String, Example> examples) {
         return this;
     }
 
-    public Parameter addExamples(String key, Example examplesItem) {
+    public Parameter addExample(String key, Example examplesItem) {
         if (this.examples == null) {
             this.examples = new HashMap<String, Example>();
         }

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -54,6 +54,7 @@
 import javax.validation.constraints.Size;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAttribute;
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlSchema;
@@ -617,7 +618,7 @@ protected boolean ignore(final Annotated member, final XmlAccessorType xmlAccess
             return false;
         }
         if (xmlAccessorTypeAnnotation.value().equals(XmlAccessType.NONE)) {
-            if (!member.hasAnnotation(XmlElement.class)) {
+            if (!member.hasAnnotation(XmlElement.class) && !member.hasAnnotation(XmlAttribute.class)) {
                 return true;
             }
         }

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -202,7 +202,7 @@ public static Schema fillSchema(Schema schema, Type type) {
                     Schema inner = pt.createProperty();
                     return merge(schema, inner);
                 } else {
-                    return ModelConverters.getInstance().resolveProperty(type);
+                    return merge(schema, ModelConverters.getInstance().resolveProperty(type));
                 }
             } else if ("array".equals(schema.getType())) {
                 Schema inner = fillSchema(((ArraySchema) schema).getItems(), type);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/PetResource.java
Patch:
@@ -78,6 +78,7 @@ public Response addPet(
     @POST
     @Path("/bodynoannotation")
     @Consumes({"application/json", "application/xml"})
+    @Produces({"application/json", "application/xml"})
     @Operation(summary = "Add a new pet to the store no annotation",
             responses = {
                     @ApiResponse(responseCode = "405", description = "Invalid input")

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -202,7 +202,7 @@ public static Schema fillSchema(Schema schema, Type type) {
                     Schema inner = pt.createProperty();
                     return merge(schema, inner);
                 } else {
-                    return ModelConverters.getInstance().resolveProperty(type);
+                    return merge(schema, ModelConverters.getInstance().resolveProperty(type));
                 }
             } else if ("array".equals(schema.getType())) {
                 Schema inner = fillSchema(((ArraySchema) schema).getItems(), type);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/PetResource.java
Patch:
@@ -78,6 +78,7 @@ public Response addPet(
     @POST
     @Path("/bodynoannotation")
     @Consumes({"application/json", "application/xml"})
+    @Produces({"application/json", "application/xml"})
     @Operation(summary = "Add a new pet to the store no annotation",
             responses = {
                     @ApiResponse(responseCode = "405", description = "Invalid input")

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/OperationParser.java
Patch:
@@ -352,6 +352,7 @@ public static Optional<RequestBody> getRequestBody(io.swagger.oas.annotations.pa
         if (isEmpty) {
             return Optional.empty();
         }
+
         getContents(requestBody.content(), components).ifPresent(requestBodyObject::setContent);
         return Optional.of(requestBodyObject);
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/pathItems/OperationsWithLinksTest.java
Patch:
@@ -220,7 +220,6 @@ public void createOperationWithLinkReferences() {
                 "                $ref: '#/components/schemas/User'\n" +
                 "          links:\n" +
                 "            user:\n" +
-                "              operationRef: '#/components/links/MyLink'\n" +
                 "              operationId: getUser\n" +
                 "              parameters:\n" +
                 "                userId: $request.query.userId\n" +

File: modules/swagger-integration/src/main/java/io/swagger/oas/integration/GenericOpenApiContext.java
Patch:
@@ -259,7 +259,7 @@ public T init() throws OpenApiConfigurationException{
         }
 
         if (openApiConfiguration == null) {
-            openApiConfiguration = new SwaggerConfiguration().resourcePackages(resourcePackages);
+            openApiConfiguration = new SwaggerConfiguration().resourcePackages(resourcePackages).resourceClasses(resourceClasses);
             ((SwaggerConfiguration)openApiConfiguration).setId(id);
         }
 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/JaxrsOpenApiContextBuilder.java
Patch:
@@ -36,6 +36,9 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             if (((XmlWebOpenApiContext)ctx).getResourcePackages() == null && resourcePackages != null) {
                 ((XmlWebOpenApiContext)ctx).resourcePackages(resourcePackages);
             }
+            if (((XmlWebOpenApiContext)ctx).getResourceClasses() == null && resourceClasses != null) {
+                ((XmlWebOpenApiContext)ctx).resourceClasses(resourceClasses);
+            }
             if (init) {
                 ctx.init(); // includes registering itself with OpenApiContextLocator
             }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletOpenApiContextBuilder.java
Patch:
@@ -33,6 +33,9 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             if (((XmlWebOpenApiContext)ctx).getResourcePackages() == null && resourcePackages != null) {
                 ((XmlWebOpenApiContext)ctx).resourcePackages(resourcePackages);
             }
+            if (((XmlWebOpenApiContext)ctx).getResourceClasses() == null && resourceClasses != null) {
+                ((XmlWebOpenApiContext)ctx).resourceClasses(resourceClasses);
+            }
             if (init) {
                 ctx.init(); // includes registering itself with OpenApiContextLocator
             }

File: modules/swagger-integration/src/main/java/io/swagger/oas/integration/GenericOpenApiContext.java
Patch:
@@ -259,7 +259,7 @@ public T init() throws OpenApiConfigurationException{
         }
 
         if (openApiConfiguration == null) {
-            openApiConfiguration = new SwaggerConfiguration().resourcePackages(resourcePackages);
+            openApiConfiguration = new SwaggerConfiguration().resourcePackages(resourcePackages).resourceClasses(resourceClasses);
             ((SwaggerConfiguration)openApiConfiguration).setId(id);
         }
 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/JaxrsOpenApiContextBuilder.java
Patch:
@@ -36,6 +36,9 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             if (((XmlWebOpenApiContext)ctx).getResourcePackages() == null && resourcePackages != null) {
                 ((XmlWebOpenApiContext)ctx).resourcePackages(resourcePackages);
             }
+            if (((XmlWebOpenApiContext)ctx).getResourceClasses() == null && resourceClasses != null) {
+                ((XmlWebOpenApiContext)ctx).resourceClasses(resourceClasses);
+            }
             if (init) {
                 ctx.init(); // includes registering itself with OpenApiContextLocator
             }

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletOpenApiContextBuilder.java
Patch:
@@ -33,6 +33,9 @@ public OpenApiContext buildContext(boolean init) throws OpenApiConfigurationExce
             if (((XmlWebOpenApiContext)ctx).getResourcePackages() == null && resourcePackages != null) {
                 ((XmlWebOpenApiContext)ctx).resourcePackages(resourcePackages);
             }
+            if (((XmlWebOpenApiContext)ctx).getResourceClasses() == null && resourceClasses != null) {
+                ((XmlWebOpenApiContext)ctx).resourceClasses(resourceClasses);
+            }
             if (init) {
                 ctx.init(); // includes registering itself with OpenApiContextLocator
             }

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -318,7 +318,6 @@ private static boolean hasSchemaAnnotation(io.swagger.oas.annotations.media.Sche
                 && !schema.nullable()
                 && !schema.readOnly()
                 && !schema.writeOnly()
-                && schema.examples().length == 1 && StringUtils.isBlank(schema.examples()[0])
                 && !schema.deprecated()
                 && schema.allowableValues().length == 1 && StringUtils.isBlank(schema.allowableValues()[0])
                 && StringUtils.isBlank(schema.defaultValue())

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 public class ServletConfigContextUtils {
 
-    public static final String OPENAPI_CONFIGURATION_RESOURCEPACKAGE_KEY = "openApi.configuration.resourcePackage";
+    public static final String OPENAPI_CONFIGURATION_RESOURCEPACKAGE_KEY = "openApi.configuration.resourcePackages";
     public static final String OPENAPI_CONFIGURATION_LOCATION_KEY = "openApi.configuration.location";
     public static final String JERSEY1_PACKAGE_KEY = "com.sun.jersey.config.property.packages";
     public static final String JERSEY2_PACKAGE_KEY = "jersey.config.server.provider.packages";

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/integration/ServletConfigContextUtils.java
Patch:
@@ -10,7 +10,7 @@
 
 public class ServletConfigContextUtils {
 
-    public static final String OPENAPI_CONFIGURATION_RESOURCEPACKAGE_KEY = "openApi.configuration.resourcePackage";
+    public static final String OPENAPI_CONFIGURATION_RESOURCEPACKAGE_KEY = "openApi.configuration.resourcePackages";
     public static final String OPENAPI_CONFIGURATION_LOCATION_KEY = "openApi.configuration.location";
     public static final String JERSEY1_PACKAGE_KEY = "com.sun.jersey.config.property.packages";
     public static final String JERSEY2_PACKAGE_KEY = "jersey.config.server.provider.packages";

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/OperationParser.java
Patch:
@@ -157,7 +157,6 @@ public static Optional<Schema> getSchemaFromAnnotation(io.swagger.oas.annotation
             schemaObject.setPattern(schema.pattern());
             isEmpty = false;
         }
-
         if (schema.readOnly()) {
             schemaObject.setReadOnly(schema.readOnly());
             isEmpty = false;

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -632,7 +632,7 @@ else if(PrimitiveType.fromType(type) != null) {
             }
             Class<?> not = schemaAnnotation.not();
             if (!Void.class.equals(not)) {
-                model.not((new Schema().$ref(context.resolve(not.getClass()).getName())));
+                model.not((new Schema().$ref(context.resolve(not).getName())));
             }
             if (schemaAnnotation.requiredProperties() != null &&
                     schemaAnnotation.requiredProperties().length > 0 &&

File: modules/swagger-core/src/main/java/io/swagger/util/DeserializationModule.java
Patch:
@@ -5,7 +5,7 @@
 import io.swagger.oas.models.media.Schema;
 import io.swagger.oas.models.parameters.Parameter;
 import io.swagger.oas.models.responses.ApiResponse;
-
+import io.swagger.oas.models.security.SecurityScheme;
 
 public class DeserializationModule extends SimpleModule {
 
@@ -23,8 +23,7 @@ public DeserializationModule(boolean includePathDeserializer,
         this.addDeserializer(Parameter.class, new ParameterDeserializer());
 //        this.addDeserializer(RequestBody.class, new RequestBodyDeserializer());
 
-        // TODO #2312
-//        this.addDeserializer(SecurityDefinition.class, new SecurityDefinitionDeserializer());
+        this.addDeserializer(SecurityScheme.class, new SecuritySchemeDeserializer());
     }
 
     public DeserializationModule() {

File: modules/swagger-core/src/test/java/io/swagger/deserialization/ParameterDeSerializationTest.java
Patch:
@@ -164,7 +164,7 @@ public void deserializeNumberEnumPathParameter() throws IOException {
     @Test(description = "should serialize correctly typed numeric enums")
     public void testIssue1765() throws Exception {
         String yaml =
-                "openapi: '3.0.0-rc1'\n" +
+                "openapi: '3.0.0'\n" +
                 "paths:\n" +
                 "  /test:\n" +
                 "    get:\n" +

File: modules/swagger-core/src/test/java/io/swagger/resolving/BeanValidatorTest.java
Patch:
@@ -21,6 +21,8 @@ public void readBeanValidatorTest() {
         final Schema model = schemas.get("BeanValidationsModel");
         final Map<String, Schema> properties = model.getProperties();
 
+        Assert.assertTrue(model.getRequired().contains("id"));
+
         final IntegerSchema age = (IntegerSchema) properties.get("age");
         Assert.assertEquals(age.getMinimum(), new BigDecimal(13.0));
         Assert.assertEquals(age.getMaximum(), new BigDecimal(99.0));

File: modules/swagger-core/src/test/java/io/swagger/serialization/ParameterSerializationTest.java
Patch:
@@ -180,7 +180,7 @@ public void serializeEnumPathParameter() {
     @Test(description = "should serialize correctly typed numeric enums")
     public void testIssue1765() throws Exception {
         String yaml =
-                "openapi: '3.0.0-rc1'\n" +
+                "openapi: '3.0.0'\n" +
                 "paths:\n" +
                 "  /test:\n" +
                 "    get:\n" +

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/OperationParser.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.jaxrs2;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.converter.ModelConverters;
 import io.swagger.jaxrs2.util.ReaderUtils;
 import io.swagger.oas.annotations.enums.Explode;
@@ -24,6 +23,7 @@
 import io.swagger.oas.models.servers.ServerVariables;
 import io.swagger.oas.models.tags.Tag;
 import io.swagger.util.ParameterProcessor;
+import io.swagger.util.Json;
 import org.apache.commons.lang3.StringUtils;
 
 import javax.ws.rs.Produces;
@@ -422,7 +422,7 @@ public static Optional<MediaType> getMediaType(MediaType mediaType, ExampleObjec
             }
             if (StringUtils.isNotBlank(example.value())) {
                 try {
-                    exampleObject.setValue(new ObjectMapper().readTree(example.value()));
+                    exampleObject.setValue(Json.mapper().readTree(example.value()));
                 } catch (IOException e) {
                     exampleObject.setValue(example.value());
                 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/AbstractAnnotationTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public abstract class AbstractAnnotationTest {
     public String readIntoYaml(Class<?> cls) {
-        Reader reader = new Reader(new OpenAPI(), null);
+        Reader reader = new Reader(new OpenAPI());
         OpenAPI openAPI = reader.read(cls);
 
         try {

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/operations/MergedOperationTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.testng.Assert.assertEquals;
 
-public class MergedOperationTests extends AbstractAnnotationTest {
+public class MergedOperationTest extends AbstractAnnotationTest {
     @Test(enabled = false, description = "shows a response when no annotation is present")
     public void testUnannotatedMethod() {
         String yaml = readIntoYaml(UnannotatedMethodClass.class);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/pathItems/OperationsWithLinksTest.java
Patch:
@@ -15,8 +15,8 @@
 
 import static org.testng.Assert.assertEquals;
 
-public class OperationsWithLinks extends AbstractAnnotationTest {
-    @Test(description = "Shows creating simple links")
+public class OperationsWithLinksTest extends AbstractAnnotationTest {
+    @Test(enabled = false, description = "Shows creating simple links")
     public void createOperationWithLinks() {
         String openApiYAML = readIntoYaml(ClassWithOperationAndLinks.class);
         int start = openApiYAML.indexOf("/addresses:");

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Components.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Components
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#componentsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#componentsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/ExternalDocumentation.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * ExternalDocumentation
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#externalDocumentationObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#externalDocumentationObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/OpenAPI.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * OpenAPI
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#oasObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Operation.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Operation
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#operationObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#operationObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/PathItem.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * PathItem
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#pathItemObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#pathItemObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Paths.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Paths
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#pathsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#pathsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/callbacks/Callback.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Callback
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#callbackObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#callbackObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Header
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#headerObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#headerObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Contact.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Contact
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#contactObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#contactObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#infoObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#infoObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/License.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * License
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#licenseObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#licenseObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/Link.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Link
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#linkObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#linkObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameter.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * LinkParameter
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#linkOParametersbject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#linkOParametersbject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Content.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Content
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#contentObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#contentObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Encoding.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Encoding
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#encodingObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#encodingObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/EncodingProperty.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * EncodingProperty
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#encodingPropertyObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#encodingPropertyObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/MediaType.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * MediaType
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#mediaTypeObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#mediaTypeObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Schema.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Schema
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#schemaObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#schemaObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/XML.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * XML
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#xmlObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#xmlObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Parameter
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#parameterObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#parameterObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/RequestBody.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * RequestBody
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#requestBodyObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#requestBodyObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/responses/ApiResponse.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * ApiResponse
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#responseObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#responseObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/responses/ApiResponses.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * ApiResponses
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#responsesObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#responsesObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlow.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * OAuthFlow
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#oauthFlowsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#oauthFlowsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlows.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * OAuthFlows
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#oauthFlowsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#oauthFlowsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/Scopes.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Scopes
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#scopedObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#scopedObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityRequirement.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * SecurityRequirement
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#securityRequirementObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#securityRequirementObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityScheme.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * SecurityScheme
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#securitySchemeObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#securitySchemeObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/Server.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Server
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#serverObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#serverObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariable.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * ServerVariable
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#serverVariableObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#serverVariableObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariables.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * ServerVariables
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#serverVariablesObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#serverVariablesObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/tags/Tag.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Tag
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc2/versions/3.0.md#tagObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.md#tagObject"
  */
 
 

File: modules/swagger-integration/src/main/java/io/swagger/oas/integration/ContextUtils.java
Patch:
@@ -9,6 +9,7 @@ public class ContextUtils {
 
     private static Logger LOGGER = LoggerFactory.getLogger(ContextUtils.class);
 
+    // TODO implement proper clone see #2227
     public static OpenAPIConfiguration deepCopy (OpenAPIConfiguration config) {
         if (config == null) {
             return null;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/OperationParser.java
Patch:
@@ -362,8 +362,6 @@ public static Optional<Content> getContent(io.swagger.oas.annotations.media.Cont
         MediaType mediaType = new MediaType();
         Class<?> schemaImplementation = annotationContent.schema().implementation();
         Map<String, Schema> schemaMap;
-        // TODO #2312 not handling primitive and string types correctly, as it creates
-        // anyway a ref schema
         if (schemaImplementation != Void.class) {
             Schema schemaObject = new Schema();
             if (schemaImplementation.getName().startsWith("java.lang")) {

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/Reader.java
Patch:
@@ -469,6 +469,7 @@ private List<Parameter> getParameters(Type type, List<Annotation> annotations) {
             LOGGER.debug("no parameter found, looking at body params");
             final List<Parameter> body = new ArrayList<>();
             if (!typesToSkip.contains(type)) {
+                // TODO #2312 body - passing null means returned always NULL
                 Parameter param = ParameterProcessor.applyAnnotations(openAPI, null, type, annotations);
                 if (param != null) {
                     body.add(param);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/AcceptHeaderApiListingResource.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.jaxrs.listing;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.annotations.ApiOperation;
 
 import javax.servlet.ServletConfig;
@@ -26,7 +25,7 @@ public Response getListingJson(
             @Context Application app,
             @Context ServletConfig sc,
             @Context HttpHeaders headers,
-            @Context UriInfo uriInfo) throws JsonProcessingException {
+            @Context UriInfo uriInfo) {
         return getListingJsonResponse(app, context, sc, headers, uriInfo);
     }
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger.jaxrs.listing;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.annotations.ApiOperation;
 import org.apache.commons.lang3.StringUtils;
 
@@ -26,7 +25,7 @@ public Response getListing(
             @Context ServletConfig sc,
             @Context HttpHeaders headers,
             @Context UriInfo uriInfo,
-            @PathParam("type") String type) throws JsonProcessingException {
+            @PathParam("type") String type) {
         if (StringUtils.isNotBlank(type) && type.trim().equalsIgnoreCase("yaml")) {
             return getListingYamlResponse(app, context, sc, headers, uriInfo);
         } else {

File: modules/swagger-jaxrs/src/test/java/io/swagger/ApiListingResourceTest.java
Patch:
@@ -1,6 +1,5 @@
 package io.swagger;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.jaxrs.Reader;
 import io.swagger.jaxrs.listing.ApiListingResource;
 import io.swagger.models.Swagger;
@@ -25,7 +24,7 @@ public void shouldCheckModelsSet() {
     }
 
     @Test
-    public void shouldHandleNullServletConfig_issue1689() throws JsonProcessingException {
+    public void shouldHandleNullServletConfig_issue1689() {
         ApiListingResource a = new ApiListingResource();
         try {
             a.getListing(null, null, null, null, "json");
@@ -39,7 +38,7 @@ public void shouldHandleNullServletConfig_issue1689() throws JsonProcessingExcep
 
     }
     @Test
-    public void shouldHandleErrorServletConfig_issue1691() throws JsonProcessingException {
+    public void shouldHandleErrorServletConfig_issue1691() {
 
         ServletConfig sc = new ServletConfig() {
             @Override

File: modules/swagger-models/src/main/java/io/swagger/oas/models/OpenAPI.java
Patch:
@@ -35,7 +35,7 @@
 
 
 public class OpenAPI {
-  private String openapi = "3.0.0-rc2";
+  private String openapi = "3.0.0";
   private Info info = null;
   private ExternalDocumentation externalDocs = null;
   private List<Server> servers = null;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -21,6 +21,8 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+
+import io.swagger.oas.annotations.enums.Explode;
 import io.swagger.oas.annotations.media.Content;
 import io.swagger.oas.annotations.media.Schema;
 
@@ -78,7 +80,7 @@
    * When this is true, parameter values of type array or object generate separate parameters for each value of the array or key-value pair of the map. For other types of parameters this property has no effect. When style is form, the default value is true. For all other styles, the default value is false.
    *@return whether or not to expand individual array members
    **/
-  boolean explode() default false;
+  Explode explode() default Explode.DEFAULT;
 
   /**
    * Determines whether the parameter value should allow reserved characters, as defined by RFC3986. This property only applies to parameters with an in value of query. The default value is false.

File: modules/swagger-core/src/main/java/io/swagger/util/ObjectMapperFactory.java
Patch:
@@ -66,6 +66,7 @@ public JsonSerializer<?> modifySerializer(
         mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
+        mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);
         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 
         return mapper;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.swagger.oas.annotations;
 
+import io.swagger.oas.annotations.enums.Explode;
 import io.swagger.oas.annotations.media.ArraySchema;
 import io.swagger.oas.annotations.media.Content;
 import io.swagger.oas.annotations.media.Schema;
@@ -79,7 +80,7 @@
   /**
    * 
    **/
-  boolean explode() default false;
+  Explode explode() default Explode.DEFAULT;
 
   /**
    * 

File: modules/swagger-core/src/main/java/io/swagger/util/ObjectMapperFactory.java
Patch:
@@ -66,6 +66,7 @@ public JsonSerializer<?> modifySerializer(
         mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
+        mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);
         mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 
         return mapper;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -95,6 +95,7 @@
 
   ArraySchema array() default @ArraySchema();
 
+  // TODO #2312 single object, according to spec
   /**
    * 
    **/

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/callbacks/Callback.java
Patch:
@@ -23,7 +23,6 @@
 import java.lang.annotation.Target;
 
 import io.swagger.oas.annotations.Operation;
-import java.util.List;
 
 /**
  * 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/media/Content.java
Patch:
@@ -22,8 +22,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import java.util.List;
-
 /**
  * 
  *

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/parameters/RequestBody.java
Patch:
@@ -23,7 +23,6 @@
 import java.lang.annotation.Target;
 
 import io.swagger.oas.annotations.media.Content;
-import java.util.List;
 
 /**
  * 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/responses/ApiResponse.java
Patch:
@@ -51,6 +51,7 @@
      **/
     Link[] links() default @Link();
 
+    // TODO #2312 as array, according to spec
     /**
      *
      **/

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/security/OAuthFlows.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.swagger.oas.annotations.security;
 
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/servers/Server.java
Patch:
@@ -22,8 +22,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import java.util.List;
-
 /**
  * 
  *

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/servers/ServerVariable.java
Patch:
@@ -16,14 +16,11 @@
 
 package io.swagger.oas.annotations.servers;
 
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import java.util.List;
-
 /**
  * 
  *

File: modules/swagger-core/src/main/java/io/swagger/util/DeserializationModule.java
Patch:
@@ -23,7 +23,7 @@ public DeserializationModule(boolean includePathDeserializer,
         this.addDeserializer(Parameter.class, new ParameterDeserializer());
 //        this.addDeserializer(RequestBody.class, new RequestBodyDeserializer());
 
-        // TODO
+        // TODO #2312
 //        this.addDeserializer(SecurityDefinition.class, new SecurityDefinitionDeserializer());
     }
 

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterDeserializer.java
Patch:
@@ -22,10 +22,10 @@ public Parameter deserialize(JsonParser jp, DeserializationContext ctxt)
         JsonNode node = jp.getCodec().readTree(jp);
         JsonNode sub = node.get("$ref");
         JsonNode inNode = node.get("in");
-/*
+
         if (sub != null) {
-            result = Json.mapper().convertValue(sub, RefParameter.class);
-        } else if (inNode != null)*/ {
+            result = new Parameter().$ref(sub.asText());
+        } else if (inNode != null) {
             String in = inNode.asText();
             if ("query".equals(in)) {
                 result = Json.mapper().convertValue(node, QueryParameter.class);

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -217,7 +217,7 @@ public static Schema fillSchema(Schema schema, Type type) {
         return schema;
     }
 
-    // TODO!
+    // TODO! #2312 complete merge
     public static Schema merge(Schema from, Schema to) {
         if (from == null) {
             return to;
@@ -334,7 +334,7 @@ private static Schema processSchema(io.swagger.oas.annotations.media.Schema sche
                 output = new Schema();
             }
 
-            // TODO: other types
+            // TODO: #2312 other types
         }
         if (output != null) {
             if (StringUtils.isNotBlank(schema._default())) {

File: modules/swagger-core/src/test/java/io/swagger/converting/ByteConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.converting;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.matchers.SerializationMatchers;

File: modules/swagger-core/src/test/java/io/swagger/converting/EnumPropertyTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.converting;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.matchers.SerializationMatchers;

File: modules/swagger-core/src/test/java/io/swagger/converting/GuavaTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.converting;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.matchers.SerializationMatchers;

File: modules/swagger-core/src/test/java/io/swagger/converting/ModelPropertyTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.converting;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.matchers.SerializationMatchers;

File: modules/swagger-core/src/test/java/io/swagger/converting/NumericFormatTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.converting;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.oas.models.media.Schema;

File: modules/swagger-core/src/test/java/io/swagger/converting/override/CustomConverterTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.model.override;
+package io.swagger.converting.override;
 
 import com.fasterxml.jackson.databind.JavaType;
 import io.swagger.converter.ModelConverter;

File: modules/swagger-core/src/test/java/io/swagger/converting/override/GericModelConverter.java
Patch:
@@ -1,7 +1,8 @@
-package io.swagger.model.override;
+package io.swagger.converting.override;
 
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
+import io.swagger.converting.override.resources.GenericModel;
 import io.swagger.jackson.AbstractModelConverter;
 import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;

File: modules/swagger-core/src/test/java/io/swagger/converting/override/ModelPropertyOverrideTest.java
Patch:
@@ -1,6 +1,7 @@
-package io.swagger.model.override;
+package io.swagger.converting.override;
 
 import io.swagger.converter.ModelConverters;
+import io.swagger.converting.override.resources.MyCustomClass;
 import io.swagger.matchers.SerializationMatchers;
 import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;

File: modules/swagger-core/src/test/java/io/swagger/converting/override/OverrideTest.java
Patch:
@@ -1,6 +1,7 @@
-package io.swagger.model.override;
+package io.swagger.converting.override;
 
 import io.swagger.converter.ModelConverters;
+import io.swagger.converting.override.resources.GenericModel;
 import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 

File: modules/swagger-core/src/test/java/io/swagger/converting/override/SamplePropertyConverter.java
Patch:
@@ -1,8 +1,9 @@
-package io.swagger.model.override;
+package io.swagger.converting.override;
 
 import com.fasterxml.jackson.databind.JavaType;
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
+import io.swagger.converting.override.resources.MyCustomClass;
 import io.swagger.oas.models.media.DateTimeSchema;
 import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;

File: modules/swagger-core/src/test/java/io/swagger/converting/override/resources/GenericModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.model.override;
+package io.swagger.converting.override.resources;
 
 import java.util.Collections;
 import java.util.HashMap;

File: modules/swagger-core/src/test/java/io/swagger/converting/override/resources/MyCustomClass.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.model.override;
+package io.swagger.converting.override.resources;
 
 public class MyCustomClass {
     // does nothing, really

File: modules/swagger-core/src/test/java/io/swagger/deserialization/ObjectPropertyTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.deserialization;
 
 import io.swagger.oas.models.media.ObjectSchema;
 import io.swagger.oas.models.media.Schema;

File: modules/swagger-core/src/test/java/io/swagger/deserialization/properties/ArrayPropertyDeserializerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.properties;
+package io.swagger.deserialization.properties;
 
 import io.swagger.oas.models.Operation;
 import io.swagger.oas.models.media.ArraySchema;

File: modules/swagger-core/src/test/java/io/swagger/deserialization/properties/MapPropertyDeserializerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.properties;
+package io.swagger.deserialization.properties;
 
 import io.swagger.oas.models.Operation;
 import io.swagger.oas.models.media.IntegerSchema;

File: modules/swagger-core/src/test/java/io/swagger/deserialization/properties/PropertyDeserializerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.properties;
+package io.swagger.deserialization.properties;
 
 import io.swagger.oas.models.media.IntegerSchema;
 import io.swagger.oas.models.media.Schema;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ClientOptInput.java
Patch:
@@ -16,8 +16,7 @@ public void setOpts(String opts) {
         this.opts = opts;
     }
 
-    // TODO
-    @Schema//(hidden = true)
+    @Schema(hidden = true)
     public JsonNode getModel() {
         return model;
     }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Issue534.java
Patch:
@@ -11,7 +11,7 @@ public class Issue534 {
 
     @XmlElementWrapper(name = "order_specials")
     @XmlElement(name = "order_special")
-    @Schema//(hidden = true)
+    @Schema(hidden = true)
     public List<SpecialOrderItem> getOrder_specials() {
         return null;
     }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/JCovariantGetter.java
Patch:
@@ -3,12 +3,12 @@
 import io.swagger.oas.annotations.media.Schema;
 
 public abstract class JCovariantGetter {
-    @Schema//(position = 1)
+    @Schema
     public Object getMyProperty() {
         return "42";
     }
 
-    @Schema//(position = 2)
+    @Schema
     public Object getMyOtherProperty() {
         return "42";
     }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelExampleTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.oas.models;
 
 import io.swagger.oas.models.media.IntegerSchema;
 import io.swagger.oas.models.media.ObjectSchema;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/AbstractBaseModelWithSubTypes.java
Patch:
@@ -1,10 +1,10 @@
 package io.swagger.oas.models.composition;
 
+import com.fasterxml.jackson.annotation.JsonSubTypes;
 import io.swagger.oas.annotations.media.Schema;
 
-@Schema(description = "I am an Abstract Base Model with Sub-Types",
-//        discriminator = "_type",
-        anyOf = {Thing1.class, Thing2.class})
+@JsonSubTypes({@JsonSubTypes.Type(value = Thing1.class, name = "thing3"), @JsonSubTypes.Type(value = Thing2.class, name = "thing2")})
+@Schema(description = "I am an Abstract Base Model with Sub-Types", discriminatorProperty = "_type")
 abstract public class AbstractBaseModelWithSubTypes {
 
     @Schema(description = "This value is used as a discriminator for serialization")

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/AbstractBaseModelWithoutFields.java
Patch:
@@ -1,8 +1,9 @@
 package io.swagger.oas.models.composition;
 
+import com.fasterxml.jackson.annotation.JsonSubTypes;
 import io.swagger.oas.annotations.media.Schema;
 
-@Schema(description = "I am an Abstract Base Model without any declared fields and with Sub-Types",
-        anyOf = {Thing3.class})
+@JsonSubTypes({@JsonSubTypes.Type(value = Thing3.class, name = "thing3")})
+@Schema(description = "I am an Abstract Base Model without any declared fields and with Sub-Types")
 public abstract class AbstractBaseModelWithoutFields {
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/ModelWithFieldWithSubTypes.java
Patch:
@@ -5,6 +5,7 @@
 @Schema(description = "Class that has a field that is the AbstractBaseModelWithSubTypes")
 public class ModelWithFieldWithSubTypes {
 
+    // TODO #2312 this annotation is not picked in property, as for ref properties, only ref is added. is this matching spec?
     @Schema(description = "Contained field with sub-types")
     AbstractBaseModelWithSubTypes z;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Thing1.java
Patch:
@@ -2,9 +2,7 @@
 
 import io.swagger.oas.annotations.media.Schema;
 
-@Schema(description = "Shake hands with Thing1"
-//        , parent = AbstractBaseModelWithSubTypes.class
-)
+@Schema(description = "Shake hands with Thing1", allOf = {AbstractBaseModelWithSubTypes.class})
 public class Thing1 extends AbstractBaseModelWithSubTypes {
 
     @Schema(description = "Override the abstract a")

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Thing2.java
Patch:
@@ -2,9 +2,7 @@
 
 import io.swagger.oas.annotations.media.Schema;
 
-@Schema(description = "and Thing2"
-//        , parent = AbstractBaseModelWithSubTypes.class
-)
+@Schema(description = "and Thing2", allOf = {AbstractBaseModelWithSubTypes.class})
 public class Thing2 extends AbstractBaseModelWithSubTypes {
 
     @Schema(description = "Override the abstract a")

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Thing3.java
Patch:
@@ -2,9 +2,7 @@
 
 import io.swagger.oas.annotations.media.Schema;
 
-@Schema(description = "Thing3"
-//        , parent = AbstractBaseModelWithoutFields.class
-)
+@Schema(description = "Thing3", allOf = {AbstractBaseModelWithoutFields.class})
 public class Thing3 extends AbstractBaseModelWithoutFields {
 
     @Schema(description = "Additional field a")

File: modules/swagger-core/src/test/java/io/swagger/resolving/ATMTest.java
Patch:
@@ -1,6 +1,7 @@
-package io.swagger.jackson;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverterContextImpl;
+import io.swagger.jackson.ModelResolver;
 import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 

File: modules/swagger-core/src/test/java/io/swagger/resolving/ComplexPropertyTest.java
Patch:
@@ -1,6 +1,7 @@
-package io.swagger.jackson;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverterContextImpl;
+import io.swagger.jackson.ModelResolver;
 import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 

File: modules/swagger-core/src/test/java/io/swagger/resolving/ContainerTest.java
Patch:
@@ -1,6 +1,8 @@
-package io.swagger.jackson;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverterContextImpl;
+import io.swagger.resolving.resources.InnerType;
+import io.swagger.jackson.ModelResolver;
 import io.swagger.oas.models.media.ArraySchema;
 import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;

File: modules/swagger-core/src/test/java/io/swagger/resolving/EnumTest.java
Patch:
@@ -1,8 +1,9 @@
-package io.swagger.jackson;
+package io.swagger.resolving;
 
 import com.google.common.base.Functions;
 import com.google.common.collect.Collections2;
 import io.swagger.converter.ModelConverterContextImpl;
+import io.swagger.jackson.ModelResolver;
 import io.swagger.oas.models.media.Schema;
 import io.swagger.oas.models.media.StringSchema;
 import org.testng.annotations.Test;

File: modules/swagger-core/src/test/java/io/swagger/resolving/JaxBDefaultValueTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.oas.models.ModelWithJaxBDefaultValues;

File: modules/swagger-core/src/test/java/io/swagger/resolving/ModelWithRangesTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.oas.models.ModelWithRanges;

File: modules/swagger-core/src/test/java/io/swagger/resolving/RequiredFieldModelTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.oas.models.ApiFirstRequiredFieldModel;

File: modules/swagger-core/src/test/java/io/swagger/resolving/SwaggerTestBase.java
Patch:
@@ -1,10 +1,11 @@
-package io.swagger.jackson;
+package io.swagger.resolving;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import io.swagger.jackson.ModelResolver;
 
 public abstract class SwaggerTestBase{
     static ObjectMapper mapper;

File: modules/swagger-core/src/test/java/io/swagger/resolving/XMLGregorianCalendarTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.resolving;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.oas.models.media.DateTimeSchema;

File: modules/swagger-core/src/test/java/io/swagger/resolving/resources/InnerType.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.jackson;
+package io.swagger.resolving.resources;
 
 public class InnerType {
     public int foo;

File: modules/swagger-core/src/test/java/io/swagger/serialization/ResponseExamplesTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.serialization;
 
 import io.swagger.matchers.SerializationMatchers;
 import io.swagger.oas.models.examples.Example;

File: modules/swagger-core/src/test/java/io/swagger/serialization/SecurityDefinitionTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.serialization;
 
 import io.swagger.converter.ModelConverters;
 import io.swagger.matchers.SerializationMatchers;

File: modules/swagger-core/src/test/java/io/swagger/serialization/YamlSerializerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.jackson;
+package io.swagger.serialization;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import io.swagger.util.Yaml;

File: modules/swagger-core/src/test/java/io/swagger/serialization/properties/PropertySerializationTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.properties;
+package io.swagger.serialization.properties;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.oas.models.media.ArraySchema;
@@ -299,6 +299,7 @@ public void deserializeNotReadOnlyStringProperty() throws IOException {
         assertEquals(m.writeValueAsString(p), json);
     }
 
+    // TODO #2312 test File Uploads instead
     @Test(enabled = false, description = "it should read a file property")
     public void serializeFileProperty() throws IOException {
         final String json = "{\"type\":\"file\"}";

File: modules/swagger-core/src/test/java/io/swagger/util/OutputReplacer.java
Patch:
@@ -1,7 +1,6 @@
 package io.swagger.util;
 
 import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;

File: modules/swagger-core/src/test/java/io/swagger/util/PathUtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.util;
 
 import static org.testng.Assert.assertEquals;
 

File: modules/swagger-core/src/test/java/io/swagger/util/TestUtils.java
Patch:
@@ -1,8 +1,6 @@
-package io.swagger;
+package io.swagger.util;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.swagger.util.Json;
-import io.swagger.util.Yaml;
 import org.apache.commons.io.IOUtils;
 
 import java.io.IOException;

File: modules/swagger-core/src/test/java/io/swagger/util/reflection/resources/Child.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.reflection;
+package io.swagger.util.reflection.resources;
 
 import javax.inject.Inject;
 

File: modules/swagger-core/src/test/java/io/swagger/util/reflection/resources/IGrandparent.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.reflection;
+package io.swagger.util.reflection.resources;
 
 public interface IGrandparent<T extends Number> {
     String parametrizedMethod5(T arg);

File: modules/swagger-core/src/test/java/io/swagger/util/reflection/resources/IParent.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.reflection;
+package io.swagger.util.reflection.resources;
 
 import javax.ws.rs.Path;
 

File: modules/swagger-core/src/test/java/io/swagger/util/reflection/resources/IndirectAnnotation.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.reflection;
+package io.swagger.util.reflection.resources;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: modules/swagger-core/src/test/java/io/swagger/util/reflection/resources/Parent.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.reflection;
+package io.swagger.util.reflection.resources;
 
 import io.swagger.oas.annotations.media.Schema;
 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/listing/SwaggerSerializers.java
Patch:
@@ -3,8 +3,6 @@
 import io.swagger.oas.models.OpenAPI;
 import io.swagger.util.Json;
 import io.swagger.util.Yaml;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/util/ReaderUtils.java
Patch:
@@ -10,7 +10,6 @@
 import io.swagger.oas.models.parameters.Parameter;
 import io.swagger.util.ParameterProcessor;
 import io.swagger.util.ReflectionUtils;
-import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import javax.ws.rs.DELETE;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/security/SecurityTests.java
Patch:
@@ -1,7 +1,6 @@
 package io.swagger.jaxrs2.annotations.security;
 
 import io.swagger.jaxrs2.annotations.AbstractAnnotationTest;
-import io.swagger.jaxrs2.annotations.info.InfoTest;
 import io.swagger.oas.annotations.security.OAuthFlow;
 import io.swagger.oas.annotations.security.OAuthFlows;
 import io.swagger.oas.annotations.security.Scopes;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/BasicFieldsResource.java
Patch:
@@ -2,12 +2,9 @@
 
 import io.swagger.oas.annotations.Operation;
 import io.swagger.oas.annotations.Parameter;
-import io.swagger.oas.annotations.info.Info;
 import io.swagger.oas.annotations.media.Schema;
 
-import javax.ws.rs.CookieParam;
 import javax.ws.rs.GET;
-import javax.ws.rs.HeaderParam;
 import javax.ws.rs.Path;
 import javax.ws.rs.QueryParam;
 import javax.ws.rs.core.Response;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/ResponsesResource.java
Patch:
@@ -7,7 +7,6 @@
 import io.swagger.oas.annotations.media.Content;
 import io.swagger.oas.annotations.media.Schema;
 import io.swagger.oas.annotations.responses.ApiResponse;
-import io.swagger.oas.annotations.servers.Server;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/SimpleCallbackResource.java
Patch:
@@ -5,7 +5,6 @@
 import io.swagger.oas.annotations.callbacks.Callback;
 import io.swagger.oas.annotations.media.Schema;
 import io.swagger.oas.annotations.responses.ApiResponse;
-import org.testng.xml.dom.Tag;
 
 import javax.ws.rs.HeaderParam;
 import javax.ws.rs.POST;

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/TagsResource.java
Patch:
@@ -1,7 +1,6 @@
 package io.swagger.jaxrs2.resources;
 
 import io.swagger.oas.annotations.Operation;
-import io.swagger.oas.annotations.servers.Server;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Paths.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Paths

File: modules/swagger-models/src/main/java/io/swagger/oas/models/callbacks/Callback.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Objects;
 import io.swagger.oas.models.PathItem;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Callback

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/Scopes.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Scopes

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariables.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * ServerVariables

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/media/ExampleObject.java
Patch:
@@ -24,7 +24,7 @@
 
 
 /**
- * This object illustrates an example of 
+ * This object illustrates an example of a particular content
  **/
 @Target({ ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithBooleanProperty.java
Patch:
@@ -3,9 +3,9 @@
 import io.swagger.oas.annotations.media.Schema;
 
 public class ModelWithBooleanProperty {
-    @Schema(_enum = "true")
+    @Schema(allowableValues = "true")
     public Boolean isGreat;
 
-    @Schema(_enum = {"1", "2"})
+    @Schema(allowableValues = {"1", "2"})
     public Integer intValue;
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithModelPropertyOverrides.java
Patch:
@@ -1,10 +1,9 @@
 package io.swagger.oas.models;
 
-import io.swagger.oas.annotations.media.ArraySchema;
 import io.swagger.oas.annotations.media.Schema;
 
 public class ModelWithModelPropertyOverrides {
-    @ArraySchema(schema = @Schema(implementation = Children.class))
+     @Schema(type = "array", implementation = Children.class)
     private String children;
 
     public String getChildren() {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithRanges.java
Patch:
@@ -23,7 +23,7 @@ public int getNegativeInfinityRange() {
         return 2;
     }
 
-    @Schema(description = "some string values", _enum = {"str1", "str2"})
+    @Schema(description = "some string values", allowableValues = {"str1", "str2"})
     public String getStringValues() {
         return "test";
     }

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/ExternalDocumentation.java
Patch:
@@ -33,11 +33,13 @@
 	
   /**
    * A short description of the target documentation.
+   * @return the documentation description
    **/
   String description() default "";
 
   /**
    * The URL for the target documentation. Value must be in the format of a URL.
+   * @return the documentation URL
    **/
   String url() default "";
 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/info/License.java
Patch:
@@ -33,11 +33,13 @@
 public @interface License {
   /**
    * The license name used for the API.
+   * @return the name of the license
    **/
   String name() default "";
 
   /**
    * A URL to the license used for the API. MUST be in the format of a URL.
+   * @return the URL of the license
    **/
   String url() default "";
 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/links/LinkParameter.java
Patch:
@@ -35,11 +35,13 @@
 public @interface LinkParameter {
   /**
    * The name of this link parameter.
+   * @return the parameter's name
    **/
   String name() default "";
 
   /**
    * A constant or an expression to be evaluated and passed to the linked operation.
+   * @return the parameter's value
    **/
   String expression() default "";
 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/parameters/RequestBody.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.oas.annotations.media.MediaType;
+import io.swagger.oas.annotations.media.Content;
 
 /**
  * Describes a single request body.
@@ -39,7 +39,7 @@
   /**
    * The content of the request body.
    **/
-  MediaType[] content() default {};
+  Content[] content() default {};
 
   /**
    * Determines if the request body is required in the request. Defaults to false.

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/responses/ApiResponse.java
Patch:
@@ -17,7 +17,7 @@
 package io.swagger.oas.annotations.responses;
 
 import io.swagger.oas.annotations.links.Link;
-import io.swagger.oas.annotations.media.MediaType;
+import io.swagger.oas.annotations.media.Content;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
@@ -48,8 +48,8 @@
     Link[] links() default {};
 
     /**
-     * An array containing descriptions of potential response payloads.
+     * An array containing descriptions of potential response payloads, for different media types.
      **/
-    MediaType[] content() default {};
+    Content[] content() default {};
 
 }

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/servers/ServerVariable.java
Patch:
@@ -34,7 +34,7 @@
   String name();
 
   /**
-   * An array of allowable values for this variable.  
+   * An array of allowable values for this variable.  This field map to the enum property in the OAS schema.
    **/
   String[] allowableValues() default "";
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/pathItems/OperationsWithLinks.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.jaxrs2.annotations.AbstractAnnotationTest;
 import io.swagger.oas.annotations.Operation;
 import io.swagger.oas.annotations.links.Link;
-import io.swagger.oas.annotations.links.LinkParameters;
+import io.swagger.oas.annotations.links.LinkParameter;
 import io.swagger.oas.annotations.media.Content;
 import io.swagger.oas.annotations.media.Schema;
 import io.swagger.oas.annotations.responses.ApiResponse;
@@ -72,7 +72,7 @@ static class ClassWithOperationAndLinks {
                                         @Link(
                                                 name = "address",
                                                 operationId = "getAddress",
-                                                parameters = @LinkParameters(
+                                                parameters = @LinkParameter(
                                                         name = "userId",
                                                         expression = "$request.query.userId"))
                                 })}
@@ -138,7 +138,7 @@ static class ClassWithOperationAndLinkReferences {
                                                 name = "user",
                                                 operationId = "getUser",
                                                 operationRef = "#/components/links/MyLink",
-                                                parameters = @LinkParameters(
+                                                parameters = @LinkParameter(
                                                         name = "userId",
                                                         expression = "$request.query.userId"))
                                 })}

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/security/SecurityTests.java
Patch:
@@ -4,7 +4,7 @@
 import io.swagger.jaxrs2.annotations.info.InfoTest;
 import io.swagger.oas.annotations.security.OAuthFlow;
 import io.swagger.oas.annotations.security.OAuthFlows;
-import io.swagger.oas.annotations.security.Scopes;
+import io.swagger.oas.annotations.security.OAuthScope;
 import io.swagger.oas.annotations.security.SecurityRequirement;
 import io.swagger.oas.annotations.security.SecurityScheme;
 import org.testng.annotations.Test;
@@ -89,7 +89,7 @@ static class ApiKeySchemeOnClass {
             in = "header",
             flows = @OAuthFlows(
                     implicit = @OAuthFlow(authorizationUrl = "http://url.com/auth",
-                            scopes = @Scopes(name = "write:pets", description = "modify pets in your account"))))
+                            scopes = @OAuthScope(name = "write:pets", description = "modify pets in your account"))))
     static class OAuth2SchemeOnClass {
 
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/DuplicatedSecurityResource.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.oas.annotations.Operation;
 import io.swagger.oas.annotations.security.OAuthFlow;
 import io.swagger.oas.annotations.security.OAuthFlows;
-import io.swagger.oas.annotations.security.Scopes;
+import io.swagger.oas.annotations.security.OAuthScope;
 import io.swagger.oas.annotations.security.SecurityRequirement;
 import io.swagger.oas.annotations.security.SecurityScheme;
 
@@ -18,7 +18,7 @@
         in = "header",
         description = "myOauthSecurity Description2",
         flows = @OAuthFlows(implicit = @OAuthFlow(authorizationUrl = "http://x.com",
-                scopes = @Scopes(
+                scopes = @OAuthScope(
                         name = "write:pets",
                         description = "modify pets in your account"))
         )

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/LinkParametersResource.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.oas.annotations.Operation;
 import io.swagger.oas.annotations.Parameter;
 import io.swagger.oas.annotations.links.Link;
-import io.swagger.oas.annotations.links.LinkParameters;
+import io.swagger.oas.annotations.links.LinkParameter;
 import io.swagger.oas.annotations.media.Schema;
 import io.swagger.oas.annotations.security.SecurityRequirement;
 import io.swagger.oas.annotations.servers.Server;
@@ -25,7 +25,7 @@ public class LinkParametersResource {
             operationId = "Operation Id",
             operationRef = "Operation Ref",
             parameters =
-            @LinkParameters(
+            @LinkParameter(
                     name = "Link Parameter",
                     expression = "Link Expression"
             )

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/ResponsesResource.java
Patch:
@@ -3,7 +3,7 @@
 
 import io.swagger.oas.annotations.Operation;
 import io.swagger.oas.annotations.links.Link;
-import io.swagger.oas.annotations.links.LinkParameters;
+import io.swagger.oas.annotations.links.LinkParameter;
 import io.swagger.oas.annotations.media.Content;
 import io.swagger.oas.annotations.media.Schema;
 import io.swagger.oas.annotations.responses.ApiResponse;
@@ -48,7 +48,7 @@ public class ResponsesResource {
             operationId = "Operation Id",
             operationRef = "Operation Ref",
             parameters =
-            @LinkParameters(
+            @LinkParameter(
                     name = "Link Parameter",
                     expression = "Link Expression"
             )

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/SecurityResource.java
Patch:
@@ -14,7 +14,7 @@
         in = "header",
         description = "myOauthSecurity Description",
         flows = @OAuthFlows(implicit = @OAuthFlow(authorizationUrl = "http://x.com",
-                scopes = @Scopes(
+                scopes = @OAuthScope(
                         name = "write:pets",
                         description = "modify pets in your account"))
         )

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/model/Pet.java
Patch:
@@ -66,7 +66,7 @@ public void setTags(List<Tag> tags) {
     }
 
     @XmlElement(name = "status")
-    @Schema(description = "pet status in the store", _enum = "available,pending,sold")
+    @Schema(description = "pet status in the store", allowableValues = "available,pending,sold")
     public String getStatus() {
         return status;
     }

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -95,7 +95,7 @@
   /**
    * Provides an array examples of the schema.  When associated with a specific media type, the example string shall be parsed by the consumer to be treated as an object or an array.
    **/
-  String[] examples() default {""};
+  String[] examples() default {};
 
   /**
    * Provides an example of the schema.  When associated with a specific media type, the example string shall be parsed by the consumer to be treated as an object or an array.

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/media/MediaType.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface Content {
+public @interface MediaType {
   /**
    * the media type that this content object applies to
    **/

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/parameters/RequestBody.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.oas.annotations.media.Content;
+import io.swagger.oas.annotations.media.MediaType;
 import java.util.List;
 
 /**
@@ -44,7 +44,7 @@
   /**
    * 
    **/
-  Content[] content() default @Content();
+  MediaType[] content() default @MediaType();
 
   /**
    * 

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/responses/ApiResponse.java
Patch:
@@ -17,7 +17,7 @@
 package io.swagger.oas.annotations.responses;
 
 import io.swagger.oas.annotations.links.Link;
-import io.swagger.oas.annotations.media.Content;
+import io.swagger.oas.annotations.media.MediaType;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
@@ -54,6 +54,6 @@
     /**
      *
      **/
-    Content content() default @Content();
+    MediaType content() default @MediaType();
 
 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -55,8 +55,6 @@ public void testSimpleCallback() {
                 "              - name: subscriptionId\n" +
                 "                in: path\n" +
                 "                required: true\n" +
-                "                style: SIMPLE\n" +
-                "                explode: false\n" +
                 "                schema:\n" +
                 "                  type: string\n" +
                 "                  description: the generated UUID\n" +

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.swagger.oas.annotations;
 
+import io.swagger.oas.annotations.enums.Explode;
 import io.swagger.oas.annotations.media.ArraySchema;
 import io.swagger.oas.annotations.media.Content;
 import io.swagger.oas.annotations.media.Schema;
@@ -79,7 +80,7 @@
   /**
    * 
    **/
-  boolean explode() default false;
+  Explode explode() default Explode.DEFAULT;
 
   /**
    * 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -56,6 +56,7 @@ public void testSimpleCallback() {
                 "                in: path\n" +
                 "                required: true\n" +
                 "                style: SIMPLE\n" +
+                "                explode: false\n" +
                 "                schema:\n" +
                 "                  type: string\n" +
                 "                  description: the generated UUID\n" +

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -73,7 +73,6 @@ public static Parameter applyAnnotations(OpenAPI openAPI, Parameter parameter, T
                 if (p.allowReserved()) {
                     parameter.setAllowReserved(p.allowReserved());
                 }
-                // TODO - Explode - Style behaviour
                 parameter.setStyle(StringUtils.isNoneBlank(p.style()) ? Parameter.StyleEnum.valueOf(p.style()) : null);
                 if (p.explode()) {
                     parameter.setExplode(p.explode());

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/responses/ApiResponse.java
Patch:
@@ -32,7 +32,7 @@
  **/
 
 
-@Target({ElementType.METHOD})
+@Target({ ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
 public @interface ApiResponse {
@@ -49,11 +49,11 @@
     /**
      *
      **/
-    Content content() default @Content();
+    Link[] links() default @Link();
 
     /**
      *
      **/
-    Link[] links() default @Link();
+    Content content() default @Content();
 
 }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/schemas/PojoTests.java
Patch:
@@ -1,7 +1,7 @@
-package io.swagger.oas.annotations.test.schemas;
+package io.swagger.jaxrs2.annotations.schemas;
 
+import io.swagger.jaxrs2.annotations.AbstractAnnotationTest;
 import io.swagger.oas.annotations.media.Schema;
-import io.swagger.oas.annotations.test.AbstractAnnotationTest;
 import org.testng.annotations.Test;
 
 import java.util.Date;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -310,6 +310,9 @@ public void setExtensions(java.util.Map<String, Object> extensions) {
   }
 
   public void set$ref(String $ref) {
+    if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+      $ref = "#/components/headers/" + $ref;
+    }
     this.$ref = $ref;
   }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/Link.java
Patch:
@@ -230,6 +230,9 @@ public int hashCode() {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/links/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -336,6 +336,9 @@ public Parameter content(Content content) {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/parameters/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/RequestBody.java
Patch:
@@ -109,6 +109,9 @@ public void setExtensions(java.util.Map<String, Object> extensions) {
   }
 
   public void set$ref(String $ref) {
+    if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+      $ref = "#/components/requestBodies/" + $ref;
+    }
     this.$ref = $ref;
   }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityScheme.java
Patch:
@@ -256,6 +256,9 @@ public void setExtensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/securitySchemes/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/examples/Example.java
Patch:
@@ -110,6 +110,9 @@ public Example externalValue(String externalValue) {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/examples/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -310,6 +310,9 @@ public void setExtensions(java.util.Map<String, Object> extensions) {
   }
 
   public void set$ref(String $ref) {
+    if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+      $ref = "#/components/headers/" + $ref;
+    }
     this.$ref = $ref;
   }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/Link.java
Patch:
@@ -230,6 +230,9 @@ public int hashCode() {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/links/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -336,6 +336,9 @@ public Parameter content(Content content) {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/parameters/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/RequestBody.java
Patch:
@@ -109,6 +109,9 @@ public void setExtensions(java.util.Map<String, Object> extensions) {
   }
 
   public void set$ref(String $ref) {
+    if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+      $ref = "#/components/requestBodies/" + $ref;
+    }
     this.$ref = $ref;
   }
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityScheme.java
Patch:
@@ -256,6 +256,9 @@ public void setExtensions(java.util.Map<String, Object> extensions) {
     }
 
     public void set$ref(String $ref) {
+        if ($ref != null && ($ref.indexOf(".") == -1 && $ref.indexOf("/") == -1)) {
+            $ref = "#/components/securitySchemes/" + $ref;
+        }
         this.$ref = $ref;
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -59,6 +59,7 @@ public void testSimpleCallback() {
                 "              - name: \"subscriptionId\"\n" +
                 "                in: \"path\"\n" +
                 "                required: true\n" +
+                "                style: \"SIMPLE\"\n" +
                 "                schema:\n" +
                 "                  type: \"string\"\n" +
                 "                  description: \"the generated UUID\"\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/operations/AnnotatedOperationMethodTests.java
Patch:
@@ -270,6 +270,9 @@ public void testCompleteOperation() {
                 "          application/json:\n" +
                 "            schema:\n" +
                 "              $ref: \"#/components/schemas/Pet\"\n" +
+                "          application/xml:\n" +
+                "            schema:\n" +
+                "              $ref: \"#/components/schemas/Pet\"\n" +
                 "        required: true\n" +
                 "      responses:\n" +
                 "        405:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/PetResource.java
Patch:
@@ -63,7 +63,7 @@ public Response getPetById(
     }
 
     @POST
-    @Consumes("application/json")
+    @Consumes({"application/json", "application/xml"})
     @Operation(summary = "Add a new pet to the store",
             responses = {
                     @ApiResponse(responseCode = "405", description = "Invalid input")

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/operations/AnnotatedOperationMethodTests.java
Patch:
@@ -270,6 +270,9 @@ public void testCompleteOperation() {
                 "          application/json:\n" +
                 "            schema:\n" +
                 "              $ref: \"#/components/schemas/Pet\"\n" +
+                "          application/xml:\n" +
+                "            schema:\n" +
+                "              $ref: \"#/components/schemas/Pet\"\n" +
                 "        required: true\n" +
                 "      responses:\n" +
                 "        405:\n" +

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/PetResource.java
Patch:
@@ -63,7 +63,7 @@ public Response getPetById(
     }
 
     @POST
-    @Consumes("application/json")
+    @Consumes({"application/json", "application/xml"})
     @Operation(summary = "Add a new pet to the store",
             responses = {
                     @ApiResponse(responseCode = "405", description = "Invalid input")

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Operation.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Operation Annotation
- * <p>
+ *
  * TODO: longer description
  **/
 
@@ -82,7 +82,6 @@
      **/
     ApiResponse[] responses() default @ApiResponse();
 
-
     /**
      * allows an operation to be marked as deprecated.  Alternatively use the @Deprecated annotation
      **/

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/resources/PetResource.java
Patch:
@@ -66,7 +66,6 @@ public Response getPetById(
             responses = {
                     @ApiResponse(responseCode = "405", description = "Invalid input")
             })
-    @Path("/add")
     public Response addPet(
             @Parameter(description = "Pet object that needs to be added to the store", required = true) Pet pet) {
         petData.addPet(pet);
@@ -79,7 +78,6 @@ public Response addPet(
                     @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                     @ApiResponse(responseCode = "404", description = "Pet not found"),
                     @ApiResponse(responseCode = "405", description = "Validation exception")})
-    @Path("/update")
     public Response updatePet(
             @Parameter(description = "Pet object that needs to be added to the store", required = true) Pet pet) {
         petData.addPet(pet);

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/OperationParser.java
Patch:
@@ -315,7 +315,9 @@ public static Optional<ApiResponses> getApiResponses(final io.swagger.oas.annota
             if (StringUtils.isNotBlank(response.description())) {
                 apiResponseObject.setDescription(response.description());
                 if (links != null && links.size() > 0) {
-                    apiResponseObject.setLinks(links);
+                    if ("default".equals(response.responseCode()) || "200".equals(response.responseCode())) {
+                        apiResponseObject.setLinks(links);
+                    }
                 }
             }
             if (StringUtils.isNotBlank(response.responseCode())) {

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/ReaderTest.java
Patch:
@@ -312,7 +312,6 @@ public void testSubscriptionIdParam() {
         assertEquals(Boolean.TRUE, parameter.getRequired());
         assertEquals(Boolean.TRUE, parameter.getAllowEmptyValue());
         assertEquals(Boolean.TRUE, parameter.getAllowReserved());
-        assertEquals(Boolean.FALSE, parameter.getDeprecated());
         Schema schema = parameter.getSchema();
         assertNotNull(schema);
         assertEquals(SCHEMA_TYPE, schema.getType());

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/callbacks/CallbackTest.java
Patch:
@@ -21,7 +21,7 @@ public class CallbackTest extends AbstractAnnotationTest {
     public void testSimpleCallback() {
         String openApiYAML = readIntoYaml(SimpleCallback.class);
         int start = openApiYAML.indexOf("/test:");
-        int end = openApiYAML.indexOf("components:");
+        int end = openApiYAML.length() - 1;
         String extractedYAML = openApiYAML.substring(start, end);
         String expectedYAML = "/test:\n" +
                 "    post:\n" +
@@ -74,7 +74,7 @@ public void testSimpleCallback() {
                 "                  description: \"Return this code to unsubscribe from future data updates\"\n" +
                 "                default:\n" +
                 "                  description: \"All other response codes will disable this callback\\\n" +
-                "                    \\ subscription\"\n";
+                "                    \\ subscription\"";
         assertEquals(extractedYAML, expectedYAML);
     }
 

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/info/InfoTest.java
Patch:
@@ -13,7 +13,7 @@ public class InfoTest extends AbstractAnnotationTest {
     public void testSimpleInfoGet() {
         String openApiYAML = readIntoYaml(InfoTest.ClassWithInfoAnnotation.class);
         int start = openApiYAML.indexOf("info:");
-        int end = openApiYAML.indexOf("tags:");
+        int end = openApiYAML.length() - 1;
 
         String expectedYAML = "info:\n" +
                 "  title: \"the title\"\n" +
@@ -25,8 +25,7 @@ public void testSimpleInfoGet() {
                 "  license:\n" +
                 "    name: \"Apache 2.0\"\n" +
                 "    url: \"http://foo.bar\"\n" +
-                "  version: \"0.0\"\n" +
-                "";
+                "  version: \"0.0\"";
         String extractedYAML = openApiYAML.substring(start, end);
 
         assertEquals(extractedYAML, expectedYAML);

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/operations/MergedOperationTests.java
Patch:
@@ -9,6 +9,7 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.HeaderParam;
 import javax.ws.rs.POST;
+import javax.ws.rs.Path;
 import javax.ws.rs.QueryParam;
 
 import static org.testng.Assert.assertEquals;
@@ -164,6 +165,7 @@ static class MethodWithRequestBody {
                         responseCode = "201",
                         description = "value successfully processed")
         )
+        @Path("/add")
         public void addValue(InputValue input) {
         }
     }

File: modules/swagger-jaxrs2/src/test/java/io/swagger/jaxrs2/annotations/pathItems/OperationsWithLinks.java
Patch:
@@ -12,7 +12,7 @@
 import static org.testng.Assert.assertEquals;
 
 public class OperationsWithLinks extends AbstractAnnotationTest {
-    @Test(enabled = false, description = "Shows creating simple links")
+    @Test(description = "Shows creating simple links")
     public void createOperationWithLinks() {
         String yaml = readIntoYaml(ClassWithOperationAndLinks.class);
 

File: modules/swagger-core/src/main/java/io/swagger/util/ModelDeserializer.java
Patch:
@@ -125,7 +125,7 @@ else if (sub.textValue().equals("object")) {
                 }
             }
         } else if(node.get("$ref") != null) {
-            model = new Schema().ref(node.get("$ref").asText());
+            model = new Schema().$ref(node.get("$ref").asText());
         }
         else { // assume object
             model = Json.mapper().convertValue(node, ObjectSchema.class);

File: modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest.java
Patch:
@@ -108,7 +108,7 @@ public void deserializeModel() throws IOException {
     @Test(description = "it should serialize an array model")
     public void serializeArrayModel() throws IOException {
         final ArraySchema model = new ArraySchema();
-        model.setItems(new Schema().ref("Pet"));
+        model.setItems(new Schema().$ref("Pet"));
         assertEquals(m.writeValueAsString(model), "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}");
     }
 
@@ -122,7 +122,7 @@ public void deserializeArrayModel() throws IOException {
 
     @Test(enabled = false, description = "it should not create an xml object for $ref")
     public void shouldNotCreateXmlObjectForRef() throws IOException {
-        final Schema model = new Schema().ref("Monster");
+        final Schema model = new Schema().$ref("Monster");
         model.setDescription("oops");
         model.setExternalDocs(new ExternalDocumentation()
                 .description("external docs")

File: modules/swagger-core/src/test/java/io/swagger/SecurityDefinitionTest.java
Patch:
@@ -77,11 +77,11 @@ public void createModelWithSecurityRequirements() throws IOException{
 
         final ApiResponse response = new ApiResponse()
                 .description("pets returned")
-                .content(new Content().addMediaType("*/*", new MediaType().schema(new Schema().ref("Person"))));
+                .content(new Content().addMediaType("*/*", new MediaType().schema(new Schema().$ref("Person"))));
 
         final ApiResponse errorResponse = new ApiResponse()
                 .description("error response")
-                .content(new Content().addMediaType("*/*", new MediaType().schema(new Schema().ref("Error"))));
+                .content(new Content().addMediaType("*/*", new MediaType().schema(new Schema().$ref("Error"))));
 
         get.responses(new ApiResponses()
                 .addApiResponse("200", response)

File: modules/swagger-core/src/test/java/io/swagger/SwaggerSerializerTest.java
Patch:
@@ -89,7 +89,7 @@ public void convertSpec() throws IOException {
                 .description("pets returned")
                 .content(new Content()
                     .addMediaType("application/json", new io.swagger.oas.models.media.MediaType()
-                    .schema(new Schema().ref("Person"))
+                    .schema(new Schema().$ref("Person"))
                     .example("fun")));
 
         final ApiResponse errorResponse = new ApiResponse()
@@ -101,7 +101,7 @@ public void convertSpec() throws IOException {
                 )
                 .content(new Content()
                         .addMediaType("application/json", new io.swagger.oas.models.media.MediaType()
-                        .schema(new Schema().ref("Error"))));
+                        .schema(new Schema().$ref("Error"))));
 
         get.responses(new ApiResponses()
                 .addApiResponse("200", response)
@@ -117,7 +117,7 @@ public void convertSpec() throws IOException {
                 .requestBody(new RequestBody()
                         .description("the pet to add")
                         .content(new Content().addMediaType("*/*", new MediaType()
-                        .schema(new Schema().ref("Person")))));
+                        .schema(new Schema().$ref("Person")))));
 
         swagger.paths(new Paths().addPathItem("/pets", new PathItem()
                 .get(get).post(post)));

File: modules/swagger-core/src/test/java/io/swagger/parameter/ParameterSerializationTest.java
Patch:
@@ -246,7 +246,7 @@ public void deserializeReadOnlyParameter() throws IOException {
 
     @Test(description = "it should serialize a ref BodyParameter")
     public void serializeRefBodyParameter() {
-        final Schema model = new Schema().ref("#/definitions/Cat");
+        final Schema model = new Schema().$ref("#/definitions/Cat");
         final RequestBody p = new RequestBody()
                 .content(new Content().addMediaType("*/*",
                         new MediaType().schema(model)));
@@ -257,7 +257,7 @@ public void serializeRefBodyParameter() {
 
     @Test(description = "it should serialize an array BodyParameter")
     public void serializeArrayBodyParameter() {
-        final Schema model = new ArraySchema().items(new Schema().ref("#/definitions/Cat"));
+        final Schema model = new ArraySchema().items(new Schema().$ref("#/definitions/Cat"));
         final RequestBody p = new RequestBody()
                 .content(new Content().addMediaType("*/*",
                         new MediaType().schema(model)));

File: modules/swagger-core/src/test/java/io/swagger/properties/PropertySerializationTest.java
Patch:
@@ -206,7 +206,7 @@ public void deserializeLongMapProperty() throws IOException {
 
     @Test(description = "it should serialize a RefProperty")
     public void serializeRefProperty() throws IOException {
-        final Schema p = new Schema().ref("#/definitions/Dog");
+        final Schema p = new Schema().$ref("#/definitions/Dog");
         final String json = "{\"$ref\":\"#/definitions/Dog\"}";
         assertEquals(m.writeValueAsString(p), json);
     }

File: modules/swagger-models/src/test/java/io/swagger/test/SimpleBuilderTest.java
Patch:
@@ -109,7 +109,7 @@ public void testBuilder() throws Exception {
                                                 .content(new Content()
                                                         .addMediaType("application/json",
                                                                 new MediaType().schema(new Schema()
-                                                                        .ref("#/components/schemas/Address")))
+                                                                        .$ref("#/components/schemas/Address")))
                                                 )
                                                 .link("funky", new Link()
                                                         .operationId("getFunky")))

File: modules/swagger-models/src/main/java/io/swagger/models/refs/GenericRef.java
Patch:
@@ -83,7 +83,7 @@ private static String computeSimpleRef(String ref, RefFormat format, RefType typ
         //simple refs really only apply to internal refs
         if (format == RefFormat.INTERNAL) {
             String prefix = type.getInternalPrefix();
-            result = ref.substring(prefix.length());
+            result = ref.substring(ref.lastIndexOf("/") + 1);
         }
 
         return result;

File: modules/swagger-models/src/main/java/io/swagger/models/refs/GenericRef.java
Patch:
@@ -83,7 +83,7 @@ private static String computeSimpleRef(String ref, RefFormat format, RefType typ
         //simple refs really only apply to internal refs
         if (format == RefFormat.INTERNAL) {
             String prefix = type.getInternalPrefix();
-            result = ref.substring(prefix.length());
+            result = ref.substring(ref.lastIndexOf("/") + 1);
         }
 
         return result;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Components.java
Patch:
@@ -310,12 +310,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.headers, components.headers) &&
         Objects.equals(this.securitySchemes, components.securitySchemes) &&
         Objects.equals(this.links, components.links) &&
-        Objects.equals(this.callbacks, components.callbacks);
+        Objects.equals(this.callbacks, components.callbacks) &&
+        Objects.equals(this.extensions, components.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(schemas, responses, parameters, examples, requestBodies, headers, securitySchemes, links, callbacks);
+    return Objects.hash(schemas, responses, parameters, examples, requestBodies, headers, securitySchemes, links, callbacks, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/ExternalDocumentation.java
Patch:
@@ -79,12 +79,13 @@ public boolean equals(java.lang.Object o) {
     }
     ExternalDocumentation externalDocumentation = (ExternalDocumentation) o;
     return Objects.equals(this.description, externalDocumentation.description) &&
-        Objects.equals(this.url, externalDocumentation.url);
+        Objects.equals(this.url, externalDocumentation.url) &&
+        Objects.equals(this.extensions, externalDocumentation.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(description, url);
+    return Objects.hash(description, url, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/OpenAPI.java
Patch:
@@ -266,12 +266,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.security, openAPI.security) &&
         Objects.equals(this.tags, openAPI.tags) &&
         Objects.equals(this.paths, openAPI.paths) &&
-        Objects.equals(this.components, openAPI.components);
+        Objects.equals(this.components, openAPI.components) &&
+        Objects.equals(this.extensions, openAPI.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(openapi, info, externalDocs, servers, security, tags, paths, components);
+    return Objects.hash(openapi, info, externalDocs, servers, security, tags, paths, components, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Operation.java
Patch:
@@ -329,12 +329,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.callbacks, operation.callbacks) &&
         Objects.equals(this.deprecated, operation.deprecated) &&
         Objects.equals(this.security, operation.security) &&
-        Objects.equals(this.servers, operation.servers);
+        Objects.equals(this.servers, operation.servers) &&
+        Objects.equals(this.extensions, operation.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(tags, summary, description, externalDocs, operationId, parameters, requestBody, responses, callbacks, deprecated, security, servers);
+    return Objects.hash(tags, summary, description, externalDocs, operationId, parameters, requestBody, responses, callbacks, deprecated, security, servers, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/PathItem.java
Patch:
@@ -331,12 +331,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.patch, pathItem.patch) &&
         Objects.equals(this.trace, pathItem.trace) &&
         Objects.equals(this.servers, pathItem.servers) &&
-        Objects.equals(this.parameters, pathItem.parameters);
+        Objects.equals(this.parameters, pathItem.parameters) &&
+        Objects.equals(this.extensions, pathItem.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash($ref, summary, description, get, put, post, delete, options, head, patch, trace, servers, parameters);
+    return Objects.hash($ref, summary, description, get, put, post, delete, options, head, patch, trace, servers, parameters, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/examples/Example.java
Patch:
@@ -119,12 +119,13 @@ public boolean equals(java.lang.Object o) {
     return Objects.equals(this.summary, example.summary) &&
         Objects.equals(this.description, example.description) &&
         Objects.equals(this.value, example.value) &&
-        Objects.equals(this.externalValue, example.externalValue);
+        Objects.equals(this.externalValue, example.externalValue) &&
+        Objects.equals(this.extensions, example.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(summary, description, value, externalValue);
+    return Objects.hash(summary, description, value, externalValue, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -278,12 +278,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.schema, header.schema) &&
         Objects.equals(this.examples, header.examples) &&
         Objects.equals(this.example, header.example) &&
-        Objects.equals(this.content, header.content);
+        Objects.equals(this.content, header.content) &&
+        Objects.equals(this.extensions, header.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(description, required, deprecated, allowEmptyValue, style, explode, schema, examples, example, content);
+    return Objects.hash(description, required, deprecated, allowEmptyValue, style, explode, schema, examples, example, content, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Contact.java
Patch:
@@ -100,12 +100,13 @@ public boolean equals(java.lang.Object o) {
     Contact contact = (Contact) o;
     return Objects.equals(this.name, contact.name) &&
         Objects.equals(this.url, contact.url) &&
-        Objects.equals(this.email, contact.email);
+        Objects.equals(this.email, contact.email) &&
+        Objects.equals(this.extensions, contact.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(name, url, email);
+    return Objects.hash(name, url, email, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -162,12 +162,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.termsOfService, info.termsOfService) &&
         Objects.equals(this.contact, info.contact) &&
         Objects.equals(this.license, info.license) &&
-        Objects.equals(this.version, info.version);
+        Objects.equals(this.version, info.version) &&
+        Objects.equals(this.extensions, info.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(title, description, termsOfService, contact, license, version);
+    return Objects.hash(title, description, termsOfService, contact, license, version, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/License.java
Patch:
@@ -79,12 +79,13 @@ public boolean equals(java.lang.Object o) {
     }
     License license = (License) o;
     return Objects.equals(this.name, license.name) &&
-        Objects.equals(this.url, license.url);
+        Objects.equals(this.url, license.url) &&
+        Objects.equals(this.extensions, license.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(name, url);
+    return Objects.hash(name, url, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/Link.java
Patch:
@@ -19,6 +19,7 @@
 import io.swagger.oas.models.headers.Header;
 import io.swagger.oas.models.servers.Server;
 
+import java.util.Objects;
 import java.util.HashMap;
 import java.util.Map;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/EncodingProperty.java
Patch:
@@ -178,12 +178,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.headers, encodingProperty.headers) &&
         Objects.equals(this.style, encodingProperty.style) &&
         Objects.equals(this.explode, encodingProperty.explode) &&
-        Objects.equals(this.allowReserved, encodingProperty.allowReserved);
+        Objects.equals(this.allowReserved, encodingProperty.allowReserved) &&
+        Objects.equals(this.extensions, encodingProperty.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(contentType, headers, style, explode, allowReserved);
+    return Objects.hash(contentType, headers, style, explode, allowReserved, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/MediaType.java
Patch:
@@ -133,12 +133,13 @@ public boolean equals(java.lang.Object o) {
     return Objects.equals(this.schema, mediaType.schema) &&
         Objects.equals(this.examples, mediaType.examples) &&
         Objects.equals(this.example, mediaType.example) &&
-        Objects.equals(this.encoding, mediaType.encoding);
+        Objects.equals(this.encoding, mediaType.encoding) &&
+        Objects.equals(this.extensions, mediaType.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(schema, examples, example, encoding);
+    return Objects.hash(schema, examples, example, encoding, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/XML.java
Patch:
@@ -142,12 +142,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.namespace, XML.namespace) &&
         Objects.equals(this.prefix, XML.prefix) &&
         Objects.equals(this.attribute, XML.attribute) &&
-        Objects.equals(this.wrapped, XML.wrapped);
+        Objects.equals(this.wrapped, XML.wrapped) &&
+        Objects.equals(this.extensions, XML.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(name, namespace, prefix, attribute, wrapped);
+    return Objects.hash(name, namespace, prefix, attribute, wrapped, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -357,12 +357,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.schema, parameter.schema) &&
         Objects.equals(this.examples, parameter.examples) &&
         Objects.equals(this.example, parameter.example) &&
-        Objects.equals(this.content, parameter.content);
+        Objects.equals(this.content, parameter.content) &&
+        Objects.equals(this.extensions, parameter.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(name, in, description, required, deprecated, allowEmptyValue, style, explode, allowReserved, schema, examples, example, content);
+    return Objects.hash(name, in, description, required, deprecated, allowEmptyValue, style, explode, allowReserved, schema, examples, example, content, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/RequestBody.java
Patch:
@@ -101,12 +101,13 @@ public boolean equals(java.lang.Object o) {
     RequestBody requestBody = (RequestBody) o;
     return Objects.equals(this.description, requestBody.description) &&
         Objects.equals(this.content, requestBody.content) &&
-        Objects.equals(this.required, requestBody.required);
+        Objects.equals(this.required, requestBody.required) &&
+        Objects.equals(this.extensions, requestBody.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(description, content, required);
+    return Objects.hash(description, content, required, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlow.java
Patch:
@@ -121,12 +121,13 @@ public boolean equals(java.lang.Object o) {
     return Objects.equals(this.authorizationUrl, oauthFlow.authorizationUrl) &&
         Objects.equals(this.tokenUrl, oauthFlow.tokenUrl) &&
         Objects.equals(this.refreshUrl, oauthFlow.refreshUrl) &&
-        Objects.equals(this.scopes, oauthFlow.scopes);
+        Objects.equals(this.scopes, oauthFlow.scopes) &&
+        Objects.equals(this.extensions, oauthFlow.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(authorizationUrl, tokenUrl, refreshUrl, scopes);
+    return Objects.hash(authorizationUrl, tokenUrl, refreshUrl, scopes, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlows.java
Patch:
@@ -121,12 +121,13 @@ public boolean equals(java.lang.Object o) {
     return Objects.equals(this.implicit, oauthFlows.implicit) &&
         Objects.equals(this.password, oauthFlows.password) &&
         Objects.equals(this.clientCredentials, oauthFlows.clientCredentials) &&
-        Objects.equals(this.authorizationCode, oauthFlows.authorizationCode);
+        Objects.equals(this.authorizationCode, oauthFlows.authorizationCode) &&
+        Objects.equals(this.extensions, oauthFlows.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(implicit, password, clientCredentials, authorizationCode);
+    return Objects.hash(implicit, password, clientCredentials, authorizationCode, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityScheme.java
Patch:
@@ -249,12 +249,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(this.scheme, securityScheme.scheme) &&
         Objects.equals(this.bearerFormat, securityScheme.bearerFormat) &&
         Objects.equals(this.flows, securityScheme.flows) &&
-        Objects.equals(this.openIdConnectUrl, securityScheme.openIdConnectUrl);
+        Objects.equals(this.openIdConnectUrl, securityScheme.openIdConnectUrl) &&
+        Objects.equals(this.extensions, securityScheme.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(type, description, name, in, scheme, bearerFormat, flows, openIdConnectUrl);
+    return Objects.hash(type, description, name, in, scheme, bearerFormat, flows, openIdConnectUrl, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/Server.java
Patch:
@@ -100,12 +100,13 @@ public boolean equals(java.lang.Object o) {
     Server server = (Server) o;
     return Objects.equals(this.url, server.url) &&
         Objects.equals(this.description, server.description) &&
-        Objects.equals(this.variables, server.variables);
+        Objects.equals(this.variables, server.variables) &&
+        Objects.equals(this.extensions, server.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(url, description, variables);
+    return Objects.hash(url, description, variables, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariable.java
Patch:
@@ -110,12 +110,13 @@ public boolean equals(java.lang.Object o) {
     ServerVariable serverVariable = (ServerVariable) o;
     return Objects.equals(this._enum, serverVariable._enum) &&
         Objects.equals(this._default, serverVariable._default) &&
-        Objects.equals(this.description, serverVariable.description);
+        Objects.equals(this.description, serverVariable.description) &&
+        Objects.equals(this.extensions, serverVariable.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(_enum, _default, description);
+    return Objects.hash(_enum, _default, description, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/tags/Tag.java
Patch:
@@ -101,12 +101,13 @@ public boolean equals(java.lang.Object o) {
     Tag tag = (Tag) o;
     return Objects.equals(this.name, tag.name) &&
         Objects.equals(this.description, tag.description) &&
-        Objects.equals(this.externalDocs, tag.externalDocs);
+        Objects.equals(this.externalDocs, tag.externalDocs) &&
+        Objects.equals(this.extensions, tag.extensions);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(name, description, externalDocs);
+    return Objects.hash(name, description, externalDocs, extensions);
   }
 
 

File: modules/swagger-models/src/main/java/io/swagger/models/ModelImpl.java
Patch:
@@ -229,7 +229,7 @@ public List<String> getRequired() {
 
     public void setRequired(List<String> required) {
         this.required = required;
-        if (properties != null){
+        if (required != null && properties != null){
             for (String s : required) {
                 Property p = properties.get(s);
                 if (p != null) {

File: modules/swagger-models/src/test/java/io/swagger/test/SimpleBuilderTest.java
Patch:
@@ -111,7 +111,7 @@ public void testBuilder() throws Exception {
                                                                 new MediaType().schema(new Schema()
                                                                         .ref("#/components/schemas/Address")))
                                                 )
-                                                .links(new Link()
+                                                .link("funky", new Link()
                                                         .operationId("getFunky")))
                                 )
                         )

File: modules/swagger-models/src/test/java/io/swagger/test/SimpleBuilderTest.java
Patch:
@@ -111,7 +111,7 @@ public void testBuilder() throws Exception {
                                                                 new MediaType().schema(new Schema()
                                                                         .ref("#/components/schemas/Address")))
                                                 )
-                                                .links(new Link()
+                                                .link("funky", new Link()
                                                         .operationId("getFunky")))
                                 )
                         )

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Objects;
 
 /**
- * try this at home for fun!
  *
  * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#infoObject"
  */

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Objects;
 
 /**
- * try this at home for fun!
  *
  * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#infoObject"
  */

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Objects;
 
 /**
- * try this at home for fun!
  *
  * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#infoObject"
  */

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Objects;
 
 /**
- * try this at home for fun!
  *
  * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#infoObject"
  */

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import io.swagger.oas.models.media.BinarySchema;
+import io.swagger.oas.models.media.BooleanSchema;
 import io.swagger.oas.models.media.ByteArraySchema;
 import io.swagger.oas.models.media.DateSchema;
 import io.swagger.oas.models.media.DateTimeSchema;
@@ -31,7 +32,7 @@ public Schema createProperty() {
     BOOLEAN(Boolean.class, "boolean") {
         @Override
         public Schema createProperty() {
-            return new Schema().type("boolean");
+            return new BooleanSchema();
         }
     },
     BYTE(Byte.class, "byte") {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Model1979.java
Patch:
@@ -3,7 +3,6 @@
 import io.swagger.oas.annotations.media.Schema;
 
 public class Model1979 {
-    // TODO
-    @Schema//(allowEmptyValue = true)
+    @Schema(nullable = true)
     public String id;
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithBooleanProperty.java
Patch:
@@ -3,10 +3,9 @@
 import io.swagger.oas.annotations.media.Schema;
 
 public class ModelWithBooleanProperty {
-    // TODO
-    @Schema//(allowableValues = "true")
+    @Schema(_enum = "true")
     public Boolean isGreat;
 
-    @Schema//(allowableValues = "1,2")
+    @Schema(_enum = {"1", "2"})
     public Integer intValue;
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithModelPropertyOverrides.java
Patch:
@@ -1,9 +1,10 @@
 package io.swagger.oas.models;
 
+import io.swagger.oas.annotations.media.ArraySchema;
 import io.swagger.oas.annotations.media.Schema;
 
 public class ModelWithModelPropertyOverrides {
-    @Schema(type = "List[Children]")
+    @ArraySchema(schema = @Schema(implementation = Children.class))
     private String children;
 
     public String getChildren() {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithOffset.java
Patch:
@@ -5,6 +5,6 @@
 public class ModelWithOffset {
     public String id;
 
-    @Schema(type = "java.time.OffsetDateTime")
+    @Schema(implementation = java.time.OffsetDateTime.class)
     public String offset;
 }

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/security/OAuthFlow.java
Patch:
@@ -16,7 +16,6 @@
 
 package io.swagger.oas.annotations.security;
 
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -52,6 +51,6 @@
   /**
    * 
    **/
-  Scopes scopes();
+  Scopes scopes() default @Scopes;
 
 }

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import io.swagger.oas.models.media.BinarySchema;
+import io.swagger.oas.models.media.BooleanSchema;
 import io.swagger.oas.models.media.ByteArraySchema;
 import io.swagger.oas.models.media.DateSchema;
 import io.swagger.oas.models.media.DateTimeSchema;
@@ -31,7 +32,7 @@ public Schema createProperty() {
     BOOLEAN(Boolean.class, "boolean") {
         @Override
         public Schema createProperty() {
-            return new Schema().type("boolean");
+            return new BooleanSchema();
         }
     },
     BYTE(Byte.class, "byte") {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Model1979.java
Patch:
@@ -3,7 +3,6 @@
 import io.swagger.oas.annotations.media.Schema;
 
 public class Model1979 {
-    // TODO
-    @Schema//(allowEmptyValue = true)
+    @Schema(nullable = true)
     public String id;
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithBooleanProperty.java
Patch:
@@ -3,10 +3,9 @@
 import io.swagger.oas.annotations.media.Schema;
 
 public class ModelWithBooleanProperty {
-    // TODO
-    @Schema//(allowableValues = "true")
+    @Schema(_enum = "true")
     public Boolean isGreat;
 
-    @Schema//(allowableValues = "1,2")
+    @Schema(_enum = {"1", "2"})
     public Integer intValue;
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithModelPropertyOverrides.java
Patch:
@@ -1,9 +1,10 @@
 package io.swagger.oas.models;
 
+import io.swagger.oas.annotations.media.ArraySchema;
 import io.swagger.oas.annotations.media.Schema;
 
 public class ModelWithModelPropertyOverrides {
-    @Schema(type = "List[Children]")
+    @ArraySchema(schema = @Schema(implementation = Children.class))
     private String children;
 
     public String getChildren() {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithOffset.java
Patch:
@@ -5,6 +5,6 @@
 public class ModelWithOffset {
     public String id;
 
-    @Schema(type = "java.time.OffsetDateTime")
+    @Schema(implementation = java.time.OffsetDateTime.class)
     public String offset;
 }

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java
Patch:
@@ -215,8 +215,8 @@ public Map<String, Schema> filterDefinitions(SwaggerSpecFilter filter, Map<Strin
             Schema definition = definitions.get(key);
             Map<String, Schema> clonedProperties = new LinkedHashMap<String, Schema>();
             if (definition.getProperties() != null) {
-                for (String propName : definition.getProperties().keySet()) {
-                    Schema property = definition.getProperties().get(propName);
+                for (String propName : (Set<String>)definition.getProperties().keySet()) {
+                    Schema property = (Schema)definition.getProperties().get(propName);
                     if (property != null) {
                         boolean shouldInclude = filter.isPropertyAllowed(definition, property, propName, params, cookies, headers);
                         if (shouldInclude) {

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -91,7 +91,7 @@ public Schema createProperty() {
     INTEGER(java.math.BigInteger.class) {
         @Override
         public Schema createProperty() {
-            return new NumberSchema();
+            return new IntegerSchema().format(null);
         }
     },
     DECIMAL(java.math.BigDecimal.class, "number") {
@@ -142,7 +142,7 @@ public Schema createProperty() {
 
     static {
         final Map<Class<?>, PrimitiveType> keyClasses = new HashMap<Class<?>, PrimitiveType>();
-//        addKeys(keyClasses, BOOLEAN, Boolean.class, Boolean.TYPE);
+        addKeys(keyClasses, BOOLEAN, Boolean.class, Boolean.TYPE);
         addKeys(keyClasses, STRING, String.class, Character.class, Character.TYPE);
         addKeys(keyClasses, BYTE, Byte.class, Byte.TYPE);
         addKeys(keyClasses, URL, java.net.URL.class);

File: modules/swagger-core/src/test/java/io/swagger/JaxBDefaultValueTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class JaxBDefaultValueTest {
 
-    @Test(enabled = false, description = "convert a model with Guava optionals")
+    @Test(description = "convert a model with Guava optionals")
     public void convertModelWithGuavaOptionals() {
         final Map<String, Schema> schemas = ModelConverters.getInstance().read(ModelWithJaxBDefaultValues.class);
         final Map<String, Schema> properties = schemas.get("ModelWithJaxBDefaultValues").getProperties();

File: modules/swagger-core/src/test/java/io/swagger/filter/SpecFilterTest.java
Patch:
@@ -159,7 +159,7 @@ public void filterAwayInternalModelProperties() throws IOException {
 
         final OpenAPI filtered = new SpecFilter().filter(swagger, filter, null, null, null);
         for (Map.Entry<String, Schema> entry : filtered.getComponents().getSchemas().entrySet()) {
-            for (String propName : entry.getValue().getProperties().keySet()) {
+            for (String propName : (Set<String>)entry.getValue().getProperties().keySet()) {
                 assertFalse(propName.startsWith("_"));
             }
         }

File: modules/swagger-core/src/test/java/io/swagger/jackson/ContainerTest.java
Patch:
@@ -72,7 +72,7 @@ public void testComplexMap() throws Exception {
 
         final Schema wrapperType = models.get("WrapperType");
         assertNotNull(wrapperType);
-        assertEquals(wrapperType.getProperties().get("innerType").getType(), "object");
+        assertEquals(((Schema)wrapperType.getProperties().get("innerType")).getType(), "object");
     }
 
     static class ArrayBean {

File: modules/swagger-core/src/test/java/io/swagger/jackson/XMLInfoTest.java
Patch:
@@ -70,7 +70,7 @@ public void testReadingXmlAccessorTypeNone() throws Exception {
         assertNotNull(xml);
         assertEquals(xml.getName(), "xmlDecoratedBean");
 
-        final Schema property = model.getProperties().get("a");
+        final Schema property = (Schema)model.getProperties().get("a");
         assertNotNull(property);
 
         assertNull(model.getProperties().get("b"));
@@ -85,10 +85,10 @@ public void testReadingXmlAccessorTypePublic() throws Exception {
         assertNotNull(xml);
         assertEquals(xml.getName(), "xmlDecoratedBean");
 
-        final Schema propertyA = model.getProperties().get("a");
+        final Schema propertyA = (Schema)model.getProperties().get("a");
         assertNotNull(propertyA);
 
-        Schema propertyB = model.getProperties().get("b");
+        Schema propertyB = (Schema)model.getProperties().get("b");
         assertNotNull(propertyB);
     }
 

File: modules/swagger-core/src/test/java/io/swagger/model/override/CustomConverterTest.java
Patch:
@@ -28,10 +28,10 @@ public void testCustomConverter() {
         assertNotNull(model);
         assertEquals(model.getProperties().size(), 1);
 
-        final Schema barProperty = model.getProperties().get("bar");
+        final Schema barProperty = (Schema)model.getProperties().get("bar");
         assertNull(barProperty);
 
-        final Schema titleProperty = model.getProperties().get("title");
+        final Schema titleProperty = (Schema)model.getProperties().get("title");
         assertNotNull(titleProperty);
     }
 

File: modules/swagger-core/src/test/java/io/swagger/model/override/OverrideTest.java
Patch:
@@ -26,8 +26,8 @@ public void test() {
 
         final Schema model = read.get(GenericModel.class.getSimpleName());
         assertTrue(model.getProperties().containsKey(NAME));
-        assertEquals(model.getProperties().get(NAME).getType(), "string");
+        assertEquals(((Schema)model.getProperties().get(NAME)).getType(), "string");
         assertTrue(model.getProperties().containsKey(COUNT));
-        assertEquals(model.getProperties().get(COUNT).getType(), "integer");
+        assertEquals(((Schema)model.getProperties().get(COUNT)).getType(), "integer");
     }
 }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ClientOptInput.java
Patch:
@@ -16,6 +16,7 @@ public void setOpts(String opts) {
         this.opts = opts;
     }
 
+    // TODO
     @Schema//(hidden = true)
     public JsonNode getModel() {
         return model;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Employee.java
Patch:
@@ -74,7 +74,7 @@ public void setLastName(String lastName) {
 
     @JsonProperty("department")
     @XmlElement(name = "department")
-    @Schema(type = "Link", required = true, description = "The department this employee belongs to.")
+    @Schema(type = "io.swagger.oas.models.Link", required = true, description = "The department this employee belongs to.")
     public Link<Department> getDept() {
         return dept;
     }
@@ -85,7 +85,7 @@ public void setDept(Link<Department> dept) {
 
     @JsonProperty("manager")
     @XmlElement(name = "manager")
-    @Schema(type = "Link", required = true, description = "The employee this employee reports to.")
+    @Schema(type = "io.swagger.oas.models.Link", required = true, description = "The employee this employee reports to.")
     public Link<Employee> getManager() {
         return manager;
     }

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Components.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Components
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#componentsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#componentsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/ExternalDocumentation.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * ExternalDocumentation
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#externalDocumentationObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#externalDocumentationObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/OpenAPI.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * OpenAPI
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#oasObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#oasObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Operation.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Operation
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#operationObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#operationObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/PathItem.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * PathItem
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#pathItemObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#pathItemObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Paths.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Paths
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#pathsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#pathsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/callbacks/Callback.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Callback
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#callbackObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#callbackObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/callbacks/Callbacks.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Callbacks
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#callbacksObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#callbacksObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Header
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#headerObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#headerObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Headers.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Headers
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#responseObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#responseObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Contact.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Contact
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#contactObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#contactObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * try this at home for fun!
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#infoObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#infoObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/License.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * License
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#licenseObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#licenseObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/Link.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Link
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#linkObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#linkObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameters.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * LinkParameters
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#linkOParametersbject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#linkOParametersbject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Content.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Content
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#contentObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#contentObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Encoding.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Encoding
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#encodingObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#encodingObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/EncodingProperty.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * EncodingProperty
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#encodingPropertyObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#encodingPropertyObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/MediaType.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * MediaType
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#mediaTypeObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#mediaTypeObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/XML.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * XML
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#xmlObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#xmlObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Parameter
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#parameterObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#parameterObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/RequestBody.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * RequestBody
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#requestBodyObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#requestBodyObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/responses/ApiResponse.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * ApiResponse
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#responseObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#responseObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/responses/ApiResponses.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * ApiResponses
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#responsesObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#responsesObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlow.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * OAuthFlow
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#oauthFlowsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#oauthFlowsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlows.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * OAuthFlows
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#oauthFlowsObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#oauthFlowsObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/Scopes.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Scopes
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#scopedObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#scopedObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityRequirement.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * SecurityRequirement
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#securityRequirementObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#securityRequirementObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityScheme.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * SecurityScheme
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#securitySchemeObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#securitySchemeObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/Server.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Server
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#serverObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#serverObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariable.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * ServerVariable
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#serverVariableObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#serverVariableObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariables.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * ServerVariables
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#serverVariablesObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#serverVariablesObject"
  */
 
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/tags/Tag.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Tag
  *
- * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#tagObject"
+ * @see "https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc1/versions/3.0.md#tagObject"
  */
 
 

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -91,7 +91,7 @@ public Schema createProperty() {
     INTEGER(java.math.BigInteger.class) {
         @Override
         public Schema createProperty() {
-            return new NumberSchema();
+            return new IntegerSchema().format(null);
         }
     },
     DECIMAL(java.math.BigDecimal.class, "number") {

File: modules/swagger-core/src/test/java/io/swagger/EnumPropertyTest.java
Patch:
@@ -20,11 +20,9 @@ public void testEnumProperty() {
         final Map<String, Schema> models = ModelConverters.getInstance().read(ModelWithEnumProperty.class);
         final String json = "{" +
                 "   \"ModelWithEnumProperty\":{" +
-                "   \"title\":\"ModelWithEnumProperty\"," +
                 "      \"type\":\"object\"," +
                 "      \"properties\":{" +
                 "         \"enumValue\":{" +
-                "         \"title\":\"enumValue\"," +
                 "            \"type\":\"string\"," +
                 "            \"enum\":[" +
                 "               \"PRIVATE\"," +

File: modules/swagger-core/src/test/java/io/swagger/HiddenFieldTest.java
Patch:
@@ -14,7 +14,7 @@
 
 public class HiddenFieldTest {
 
-    @Test(description = "it should ignore a hidden field")
+    @Test(enabled = false, description = "it should ignore a hidden field")
     public void testHiddenField() {
         final Map<String, Schema> models = ModelConverters.getInstance().read(ModelWithHiddenFields.class);
 

File: modules/swagger-jaxrs2/src/main/java/io/swagger/jaxrs2/Reader.java
Patch:
@@ -73,6 +73,8 @@ private Operation parseMethod(Class<?> cls, Method method, AnnotatedMethod annot
 
                 Callbacks callbacks = new Callbacks();
 
+                //TODO Callbacks functionality
+
             }
 
         }

File: modules/swagger-models/src/main/java/io/swagger/oas/models/OpenAPI.java
Patch:
@@ -102,7 +102,7 @@ public OpenAPI externalDocs(ExternalDocumentation externalDocs) {
   /**
    * Servers defined in the API
    *
-   * @return List<Server> servers
+   * @return List&lt;Server&gt; servers
    **/
 
   public List<Server> getServers() {
@@ -129,7 +129,7 @@ public OpenAPI addServersItem(Server serversItem) {
   /**
    * returns the security property from a OpenAPI instance.
    *
-   * @return List<SecurityRequirement> security
+   * @return List&lt;SecurityRequirement&gt; security
    **/
 
   public List<SecurityRequirement> getSecurity() {
@@ -156,7 +156,7 @@ public OpenAPI addSecurityItem(SecurityRequirement securityItem) {
   /**
    * returns the tags property from a OpenAPI instance.
    *
-   * @return List<Tag> tags
+   * @return List&lt;Tag&gt; tags
    **/
 
   public List<Tag> getTags() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/PathItem.java
Patch:
@@ -257,7 +257,7 @@ public PathItem trace(Operation trace) {
   /**
    * returns the servers property from a PathItem instance.
    *
-   * @return List<Server> servers
+   * @return List&lt;Server&gt; servers
    **/
 
   public List<Server> getServers() {
@@ -284,7 +284,7 @@ public PathItem addServersItem(Server serversItem) {
   /**
    * returns the parameters property from a PathItem instance.
    *
-   * @return List<Parameter> parameters
+   * @return List&lt;Parameter&gt; parameters
    **/
 
   public List<Parameter> getParameters() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Header.java
Patch:
@@ -197,7 +197,7 @@ public Header schema(Schema schema) {
   /**
    * returns the examples property from a Header instance.
    *
-   * @return List<Example> examples
+   * @return List&lt;Example&gt; examples
    **/
 
   public List<Example> getExamples() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/AllOfSchema.java
Patch:
@@ -54,7 +54,7 @@ public AllOfSchema discriminator(String discriminator) {
   /**
    * returns the allOf property from a AllOfSchema instance.
    *
-   * @return List<Schema> allOf
+   * @return List&lt;Schema&gt; allOf
    **/
 
   public List<Schema> getAllOf() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/AnyOfSchema.java
Patch:
@@ -34,7 +34,7 @@ public class AnyOfSchema extends Schema {
   /**
    * returns the anyOf property from a AnyOfSchema instance.
    *
-   * @return List<Schema> anyOf
+   * @return List&lt;Schema&gt; anyOf
    **/
 
   public List<Schema> getAnyOf() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/BinarySchema.java
Patch:
@@ -94,7 +94,7 @@ public BinarySchema _default(String _default) {
   /**
    * returns the _enum property from a BinarySchema instance.
    *
-   * @return List<byte[]> _enum
+   * @return List&lt;byte[]&gt; _enum
    **/
 
   public List<byte[]> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/BooleanSchema.java
Patch:
@@ -74,7 +74,7 @@ public BooleanSchema _default(Boolean _default) {
   /**
    * returns the _enum property from a BooleanSchema instance.
    *
-   * @return List<Boolean> _enum
+   * @return List&lt;Boolean&gt; _enum
    **/
 
   public List<Boolean> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/ByteArraySchema.java
Patch:
@@ -94,7 +94,7 @@ public ByteArraySchema _default(String _default) {
   /**
    * returns the _enum property from a ByteArraySchema instance.
    *
-   * @return List<byte[]> _enum
+   * @return List&lt;byte[]&gt; _enum
    **/
 
   public List<byte[]> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/EmailSchema.java
Patch:
@@ -94,7 +94,7 @@ public EmailSchema _default(String _default) {
   /**
    * returns the _enum property from a EmailSchema instance.
    *
-   * @return List<String> _enum
+   * @return List&lt;String&gt; _enum
    **/
 
   public List<String> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/IntegerSchema.java
Patch:
@@ -94,7 +94,7 @@ public IntegerSchema _default(Integer _default) {
   /**
    * returns the _enum property from a IntegerSchema instance.
    *
-   * @return List<Integer> _enum
+   * @return List&lt;Integer&gt; _enum
    **/
 
   public List<Integer> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/MediaType.java
Patch:
@@ -58,7 +58,7 @@ public MediaType schema(Schema schema) {
   /**
    * returns the examples property from a MediaType instance.
    *
-   * @return Map<String, Example> examples
+   * @return Map&lt;String, Example&gt; examples
    **/
 
   public Map<String, Example> getExamples() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/NumberSchema.java
Patch:
@@ -74,7 +74,7 @@ public NumberSchema _default(BigDecimal _default) {
   /**
    * returns the _enum property from a NumberSchema instance.
    *
-   * @return List<BigDecimal> _enum
+   * @return List&lt;BigDecimal&gt; _enum
    **/
 
   public List<BigDecimal> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/OneOfSchema.java
Patch:
@@ -34,7 +34,7 @@ public class OneOfSchema extends Schema {
   /**
    * returns the oneOf property from a OneOfSchema instance.
    *
-   * @return List<Schema> oneOf
+   * @return List&lt;Schema&gt; oneOf
    **/
 
   public List<Schema> getOneOf() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/PasswordSchema.java
Patch:
@@ -94,7 +94,7 @@ public PasswordSchema _default(String _default) {
   /**
    * returns the _enum property from a PasswordSchema instance.
    *
-   * @return List<String> _enum
+   * @return List&lt;String&gt; _enum
    **/
 
   public List<String> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Schema.java
Patch:
@@ -339,7 +339,7 @@ public Schema minProperties(Integer minProperties) {
   /**
    * returns the required property from a Schema instance.
    *
-   * @return List<String> required
+   * @return List&lt;String&gt; required
    **/
 
   public List<String> getRequired() {
@@ -404,7 +404,7 @@ public Schema not(Schema not) {
   /**
    * returns the properties property from a Schema instance.
    *
-   * @return Map<String, Schema> properties
+   * @return Map&lt;String, Schema&gt; properties
    **/
 
   public Map<String, Schema> getProperties() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/StringSchema.java
Patch:
@@ -74,7 +74,7 @@ public StringSchema _default(String _default) {
   /**
    * returns the _enum property from a StringSchema instance.
    *
-   * @return List<String> _enum
+   * @return List&lt;String&gt; _enum
    **/
 
   public List<String> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/UUIDSchema.java
Patch:
@@ -95,7 +95,7 @@ public UUIDSchema _default(String _default) {
   /**
    * returns the _enum property from a UUIDSchema instance.
    *
-   * @return List<UUID> _enum
+   * @return List&lt;UUID&gt; _enum
    **/
 
   public List<UUID> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/Parameter.java
Patch:
@@ -16,13 +16,13 @@
 
 package io.swagger.oas.models.parameters;
 
-import java.util.Objects;
 import io.swagger.oas.models.examples.Example;
 import io.swagger.oas.models.media.Content;
 import io.swagger.oas.models.media.Schema;
+
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * Parameter
@@ -270,7 +270,7 @@ public Parameter schema(Schema schema) {
   /**
    * returns the examples property from a Parameter instance.
    *
-   * @return Map<String, Example> examples
+   * @return Map&lt;String, Example&gt; examples
    **/
 
   public Map<String, Example> getExamples() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/responses/ApiResponses.java
Patch:
@@ -16,8 +16,9 @@
 
 package io.swagger.oas.models.responses;
 
-import java.util.LinkedHashMap;
 import java.util.Objects;
+import java.util.LinkedHashMap;
+import java.util.Map;
 
 /**
  * ApiResponses

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariable.java
Patch:
@@ -36,7 +36,7 @@ public class ServerVariable {
   /**
    * returns the _enum property from a ServerVariable instance.
    *
-   * @return List<String> _enum
+   * @return List&lt;String&gt; _enum
    **/
 
   public List<String> getEnum() {

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/ExternalDocumentation.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations;
+package io.swagger.oas.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/Parameter.java
Patch:
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations;
+package io.swagger.oas.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.annotations.media.Content;
-import io.swagger.annotations.media.Schema;
+import io.swagger.oas.annotations.media.Content;
+import io.swagger.oas.annotations.media.Schema;
 import java.util.List;
 
 /**

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/callbacks/Callback.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.callbacks;
+package io.swagger.oas.annotations.callbacks;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.annotations.Operation;
+import io.swagger.oas.annotations.Operation;
 import java.util.List;
 
 /**

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/links/Link.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.links;
+package io.swagger.oas.annotations.links;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/links/LinkParameters.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.links;
+package io.swagger.oas.annotations.links;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/media/Content.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.media;
+package io.swagger.oas.annotations.media;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/media/ExampleObject.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.media;
+package io.swagger.oas.annotations.media;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/parameters/RequestBody.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.parameters;
+package io.swagger.oas.annotations.parameters;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.annotations.media.Content;
+import io.swagger.oas.annotations.media.Content;
 import java.util.List;
 
 /**

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/servers/Server.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.servers;
+package io.swagger.oas.annotations.servers;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/main/java/io/swagger/oas/annotations/servers/ServerVariable.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.annotations.servers;
+package io.swagger.oas.annotations.servers;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;

File: modules/swagger-annotations/src/test/java/io/swagger/oas/annotations/test/AbstractAnnotationTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.annotations.test;
+package io.swagger.oas.annotations.test;
 
 public abstract class AbstractAnnotationTest {
     public String readIntoYaml(Class<?> cls) {

File: modules/swagger-annotations/src/test/java/io/swagger/oas/annotations/test/schemas/PojoTests.java
Patch:
@@ -1,7 +1,7 @@
-package io.swagger.annotations.test.schemas;
+package io.swagger.oas.annotations.test.schemas;
 
-import io.swagger.annotations.media.Schema;
-import io.swagger.annotations.test.AbstractAnnotationTest;
+import io.swagger.oas.annotations.media.Schema;
+import io.swagger.oas.annotations.test.AbstractAnnotationTest;
 import org.testng.annotations.Test;
 
 import java.util.Date;

File: modules/swagger-core/src/main/java/io/swagger/config/SwaggerConfig.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.config;
 
-import io.swagger.models.OpenAPI;
+import io.swagger.oas.models.OpenAPI;
 
 public interface SwaggerConfig {
 

File: modules/swagger-core/src/main/java/io/swagger/converter/ModelConverter.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.converter;
 
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;

File: modules/swagger-core/src/main/java/io/swagger/converter/ModelConverterContext.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.converter;
 
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;

File: modules/swagger-core/src/main/java/io/swagger/converter/ModelConverters.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.jackson.databind.type.TypeFactory;
 import io.swagger.jackson.ModelResolver;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/swagger-core/src/main/java/io/swagger/core/filter/AbstractSpecFilter.java
Patch:
@@ -1,9 +1,9 @@
 package io.swagger.core.filter;
 
 import io.swagger.model.ApiDescription;
-import io.swagger.models.Operation;
-import io.swagger.models.media.Schema;
-import io.swagger.models.parameters.Parameter;
+import io.swagger.oas.models.Operation;
+import io.swagger.oas.models.media.Schema;
+import io.swagger.oas.models.parameters.Parameter;
 
 import java.util.List;
 import java.util.Map;

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SwaggerSpecFilter.java
Patch:
@@ -1,9 +1,9 @@
 package io.swagger.core.filter;
 
 import io.swagger.model.ApiDescription;
-import io.swagger.models.Operation;
-import io.swagger.models.media.Schema;
-import io.swagger.models.parameters.Parameter;
+import io.swagger.oas.models.Operation;
+import io.swagger.oas.models.media.Schema;
+import io.swagger.oas.models.parameters.Parameter;
 
 import java.util.List;
 import java.util.Map;

File: modules/swagger-core/src/main/java/io/swagger/jackson/AbstractModelConverter.java
Patch:
@@ -11,7 +11,7 @@
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 
 import javax.xml.bind.annotation.XmlElement;
 import java.lang.reflect.Type;

File: modules/swagger-core/src/main/java/io/swagger/jackson/JAXBAnnotationsHelper.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.jackson;
 
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.apache.commons.lang3.StringUtils;
 
 import javax.xml.bind.annotation.XmlAttribute;

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.util;
 
-import io.swagger.models.OpenAPI;
-import io.swagger.models.parameters.Parameter;
+import io.swagger.oas.models.OpenAPI;
+import io.swagger.oas.models.parameters.Parameter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: modules/swagger-core/src/main/java/io/swagger/util/PathDeserializer.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonNode;
-import io.swagger.models.PathItem;
+import io.swagger.oas.models.PathItem;
 
 import java.io.IOException;
 

File: modules/swagger-core/src/main/java/io/swagger/util/SecurityDefinitionDeserializer.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonNode;
-import io.swagger.models.security.SecurityScheme;
+import io.swagger.oas.models.security.SecurityScheme;
 
 import java.io.IOException;
 

File: modules/swagger-core/src/test/java/io/swagger/deserialization/JsonDeserializationTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.swagger.deserialization;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.swagger.models.OpenAPI;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.OpenAPI;
+import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;
 import io.swagger.util.ResourceUtils;
 import org.testng.annotations.Test;

File: modules/swagger-core/src/test/java/io/swagger/filter/InternalModelPropertiesRemoverFilter.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 
 import java.util.List;
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/filter/NoGetOperationsFilter.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;
-import io.swagger.models.Operation;
+import io.swagger.oas.models.Operation;
 
 import java.util.List;
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/filter/NoUserOperationsFilter.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;
-import io.swagger.models.Operation;
+import io.swagger.oas.models.Operation;
 
 import java.util.List;
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/filter/RemoveInternalParamsFilter.java
Patch:
@@ -2,8 +2,8 @@
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;
-import io.swagger.models.Operation;
-import io.swagger.models.parameters.Parameter;
+import io.swagger.oas.models.Operation;
+import io.swagger.oas.models.parameters.Parameter;
 
 import java.util.List;
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/jackson/ATMTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.jackson;
 
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 
 import static org.testng.Assert.assertNotNull;

File: modules/swagger-core/src/test/java/io/swagger/jackson/ComplexPropertyTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.jackson;
 
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 
 import static org.testng.Assert.assertNotNull;

File: modules/swagger-core/src/test/java/io/swagger/jackson/ContainerTest.java
Patch:
@@ -1,8 +1,8 @@
 package io.swagger.jackson;
 
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.ArraySchema;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.ArraySchema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/jackson/EnumTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.google.common.base.Functions;
 import com.google.common.collect.Collections2;
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.Schema;
-import io.swagger.models.media.StringSchema;
+import io.swagger.oas.models.media.Schema;
+import io.swagger.oas.models.media.StringSchema;
 import org.testng.annotations.Test;
 
 import java.lang.annotation.Annotation;

File: modules/swagger-core/src/test/java/io/swagger/jackson/InheritedBeanTest.java
Patch:
@@ -5,8 +5,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.annotations.media.OASSchema;
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.AllOfSchema;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.AllOfSchema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 

File: modules/swagger-core/src/test/java/io/swagger/jackson/JodaTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.annotations.media.OASSchema;
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.joda.time.DateTime;
 import org.testng.annotations.Test;
 

File: modules/swagger-core/src/test/java/io/swagger/jackson/SimpleGenerationTest.java
Patch:
@@ -7,7 +7,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.annotations.media.OASSchema;
 import io.swagger.converter.ModelConverterContextImpl;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 
 import java.util.ArrayList;

File: modules/swagger-core/src/test/java/io/swagger/model/override/CustomConverterTest.java
Patch:
@@ -4,7 +4,7 @@
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
 import io.swagger.converter.ModelConverters;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;
 import org.testng.annotations.Test;
 

File: modules/swagger-core/src/test/java/io/swagger/model/override/GericModelConverter.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
 import io.swagger.jackson.AbstractModelConverter;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;
 
 import java.lang.annotation.Annotation;

File: modules/swagger-core/src/test/java/io/swagger/model/override/ModelPropertyOverrideTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.annotations.media.OASSchema;
 import io.swagger.converter.ModelConverters;
 import io.swagger.matchers.SerializationMatchers;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 
 import java.util.Map;
@@ -19,7 +19,7 @@ public void overrideTest() throws Exception {
                 "    \"type\" : \"object\"," +
                 "    \"properties\" : {" +
                 "      \"id\" : {" +
-                "        \"title\" : \"id\"" +
+                "        \"title\" : \"id\"," +
                 "        \"type\" : \"string\"" +
                 "      }," +
                 "      \"myCustomClass\" : {" +

File: modules/swagger-core/src/test/java/io/swagger/model/override/OverrideTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.model.override;
 
 import io.swagger.converter.ModelConverters;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.Schema;
 import org.testng.annotations.Test;
 
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/model/override/SamplePropertyConverter.java
Patch:
@@ -3,8 +3,8 @@
 import com.fasterxml.jackson.databind.JavaType;
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
-import io.swagger.models.media.DateTimeSchema;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.DateTimeSchema;
+import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;
 
 import java.lang.annotation.Annotation;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Address.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import javax.xml.bind.annotation.XmlElement;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ApiFirstRequiredFieldModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/BeanValidationsModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.util.List;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Car.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Cat.java
Patch:
@@ -1,7 +1,7 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
-import io.swagger.models.composition.Pet;
+import io.swagger.oas.models.composition.Pet;
 
 @OASSchema//(parent = Pet.class)
 public interface Cat extends Pet {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Children.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class Children {
     public String getName() {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ClientOptInput.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import io.swagger.annotations.media.OASSchema;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Department.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Employee.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -74,7 +74,7 @@ public void setLastName(String lastName) {
 
     @JsonProperty("department")
     @XmlElement(name = "department")
-    @OASSchema(type = "io.swagger.models.Link", required = true, description = "The department this employee belongs to.")
+    @OASSchema(type = "Link", required = true, description = "The department this employee belongs to.")
     public Link<Department> getDept() {
         return dept;
     }
@@ -85,7 +85,7 @@ public void setDept(Link<Department> dept) {
 
     @JsonProperty("manager")
     @XmlElement(name = "manager")
-    @OASSchema(type = "io.swagger.models.Link", required = true, description = "The employee this employee reports to.")
+    @OASSchema(type = "Link", required = true, description = "The employee this employee reports to.")
     public Link<Employee> getManager() {
         return manager;
     }

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Error.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class Error {
     int code;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/GuavaModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.google.common.base.Optional;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Issue534.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/JCovariantGetter.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/JacksonReadonlyModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/JodaDateTimeModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import org.joda.time.DateTime;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Link.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Manufacturers.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.util.HashSet;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Model1155.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class Model1155 {
     private boolean valid;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Model1979.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelContainingModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelPropertyName.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class ModelPropertyName {
     public boolean is_persistent() {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithAltPropertyName.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithApiModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithBooleanProperty.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithEnumArray.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.util.Set;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithEnumField.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class ModelWithEnumField {
     public TestEnum enumValue;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithEnumProperty.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class ModelWithEnumProperty {
     private TestEnum e;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithFormattedStrings.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.net.URI;
 import java.net.URL;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithJAXBAnnotations.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithJaxBDefaultValues.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithModelPropertyOverrides.java
Patch:
@@ -1,9 +1,9 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 
 public class ModelWithModelPropertyOverrides {
-    @OASSchema(type = "List[io.swagger.models.Children]")
+    @OASSchema(type = "List[Children]")
     private String children;
 
     public String getChildren() {

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithNumbers.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithOffset.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithPrimitiveArray.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class ModelWithPrimitiveArray {
     public int[] intArray;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithRanges.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ModelWithTuple2.java
Patch:
@@ -1,13 +1,13 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.annotations.media.OASSchema;
 import io.swagger.converter.ModelConverter;
 import io.swagger.converter.ModelConverterContext;
 import io.swagger.jackson.AbstractModelConverter;
-import io.swagger.models.media.MapSchema;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.MapSchema;
+import io.swagger.oas.models.media.Schema;
 import org.apache.commons.lang3.text.WordUtils;
 import org.apache.commons.lang3.tuple.Pair;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/Person.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.util.Date;
 import java.util.Map;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ReadOnlyFields.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/ReadOnlyModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/SpecialOrderItem.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 public class SpecialOrderItem {
     public String name;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/TestEnum.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import javax.xml.bind.annotation.XmlEnum;
 import javax.xml.bind.annotation.XmlEnumValue;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/XmlFirstRequiredFieldModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/AbstractBaseModelWithSubTypes.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/AbstractBaseModelWithoutFields.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/AbstractModelWithApiModel.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import io.swagger.annotations.media.OASSchema;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Animal.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonSubTypes.Type;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Human.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/ModelWithFieldWithSubTypes.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/ModelWithUrlProperty.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import java.net.MalformedURLException;
 import java.net.URL;

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/ModelWithValueProperty.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 public class ModelWithValueProperty extends AbstractModelWithApiModel {
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Pet.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Thing1.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Thing2.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/oas/models/composition/Thing3.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger.models.composition;
+package io.swagger.oas.models.composition;
 
 import io.swagger.annotations.media.OASSchema;
 

File: modules/swagger-core/src/test/java/io/swagger/properties/PropertyDeserializerTest.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.properties;
 
-import io.swagger.models.media.IntegerSchema;
-import io.swagger.models.media.Schema;
+import io.swagger.oas.models.media.IntegerSchema;
+import io.swagger.oas.models.media.Schema;
 import io.swagger.util.Json;
 import org.testng.annotations.Test;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/ExternalDocumentation.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/Paths.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models;
+package io.swagger.oas.models;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Paths

File: modules/swagger-models/src/main/java/io/swagger/oas/models/callbacks/Callback.java
Patch:
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package io.swagger.models.callbacks;
+package io.swagger.oas.models.callbacks;
 
 import java.util.Objects;
-import io.swagger.models.PathItem;
+import io.swagger.oas.models.PathItem;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Callback

File: modules/swagger-models/src/main/java/io/swagger/oas/models/callbacks/Callbacks.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.callbacks;
+package io.swagger.oas.models.callbacks;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Callbacks

File: modules/swagger-models/src/main/java/io/swagger/oas/models/examples/Example.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.examples;
+package io.swagger.oas.models.examples;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/headers/Headers.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.headers;
+package io.swagger.oas.models.headers;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Headers

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Contact.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.info;
+package io.swagger.oas.models.info;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/Info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.info;
+package io.swagger.oas.models.info;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/info/License.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.info;
+package io.swagger.oas.models.info;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/Link.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.links;
+package io.swagger.oas.models.links;
 
 import java.util.Objects;
-import io.swagger.models.headers.Headers;
+import io.swagger.oas.models.headers.Headers;
 
 /**
  * Link

File: modules/swagger-models/src/main/java/io/swagger/oas/models/links/LinkParameters.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.links;
+package io.swagger.oas.models.links;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Content.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Content

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/DateSchema.java
Patch:
@@ -14,14 +14,13 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 import java.util.Objects;
 
-
 /**
  * DateSchema
  */
@@ -93,7 +92,7 @@ public DateSchema _default(String _default) {
   /**
    * returns the _enum property from a DateSchema instance.
    *
-   * @return List<LocalDate> _enum
+   * @return List<Date> _enum
    **/
 
   public List<Date> getEnum() {

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/DateTimeSchema.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.ArrayList;
 import java.util.Date;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Encoding.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Encoding

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/EncodingProperty.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/MediaType.java
Patch:
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.Objects;
-import io.swagger.models.examples.Example;
+import io.swagger.oas.models.examples.Example;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 /**

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/NumberSchema.java
Patch:
@@ -14,14 +14,12 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.Objects;
-import io.swagger.models.ExternalDocumentation;
 import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 /**
  * NumberSchema

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/Schema.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
-import io.swagger.models.ExternalDocumentation;
+import io.swagger.oas.models.ExternalDocumentation;
 
 import java.math.BigDecimal;
 import java.util.ArrayList;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/XML.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.media;
+package io.swagger.oas.models.media;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/parameters/RequestBody.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.parameters;
+package io.swagger.oas.models.parameters;
 
 import java.util.Objects;
-import io.swagger.models.media.Content;
+import io.swagger.oas.models.media.Content;
 
 /**
  * RequestBody

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlow.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.security;
+package io.swagger.oas.models.security;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/OAuthFlows.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.security;
+package io.swagger.oas.models.security;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/Scopes.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.security;
+package io.swagger.oas.models.security;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Scopes

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityRequirement.java
Patch:
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package io.swagger.models.security;
+package io.swagger.oas.models.security;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Map;
 
 /**
  * SecurityRequirement

File: modules/swagger-models/src/main/java/io/swagger/oas/models/security/SecurityScheme.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.security;
+package io.swagger.oas.models.security;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/Server.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.servers;
+package io.swagger.oas.models.servers;
 
 import java.util.Objects;
 

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariable.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.swagger.models.servers;
+package io.swagger.oas.models.servers;
 
 import java.util.Objects;
 import java.util.ArrayList;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/servers/ServerVariables.java
Patch:
@@ -14,11 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.servers;
+package io.swagger.oas.models.servers;
 
 import java.util.Objects;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * ServerVariables

File: modules/swagger-models/src/main/java/io/swagger/oas/models/tags/Tag.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package io.swagger.models.tags;
+package io.swagger.oas.models.tags;
 
 import java.util.Objects;
-import io.swagger.models.ExternalDocumentation;
+import io.swagger.oas.models.ExternalDocumentation;
 
 /**
  * Tag

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -71,7 +71,7 @@ public ObjectMapper objectMapper() {
     protected boolean shouldIgnoreClass(Type type) {
         if (type instanceof Class) {
             Class<?> cls = (Class<?>) type;
-            if (cls.getName().equals("javax.ws.rs.ApiResponse")) {
+            if (cls.getName().equals("javax.ws.rs.Response")) {
                 return true;
             }
         } else {

File: modules/swagger-core/src/main/java/io/swagger/converter/ModelConverterContextImpl.java
Patch:
@@ -99,6 +99,9 @@ public Schema resolve(Type type) {
 //                    modelByName.put(impl.getName(), resolved);
 //                }
 //            }
+            if(resolvedImpl.getTitle() != null) {
+                modelByName.put(resolvedImpl.getTitle(), resolved);
+            }
         }
 
         return resolved;

File: modules/swagger-models/src/main/java/io/swagger/oas/models/media/MapSchema.java
Patch:
@@ -24,7 +24,7 @@
 
 
 public class MapSchema extends Schema {
-  private String type = "boolean";
+  private String type = "object";
 
   /**
    * returns the type property from a MapSchema instance.

File: modules/swagger-annotations/src/test/java/io/swagger/annotations/test/schemas/PojoTests.java
Patch:
@@ -228,6 +228,7 @@ public void setId(String id) {
         }
     }
 
+    // TODO verify that _not_ is an array or `not`
     @Test(enabled = false, description = "Shows how to restrict a particular schema")
     public void testExcludeSchema () {
         String yaml = readIntoYaml(ArbitraryDataReceiver.class);

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/OASExternalDocumentation.java
Patch:
@@ -33,7 +33,7 @@
 @Target({ ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface ExternalDocumentation {
+public @interface OASExternalDocumentation {
   /**
    * 
    **/

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/links/OASLink.java
Patch:
@@ -36,7 +36,7 @@
           ElementType.TYPE })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface Link {
+public @interface OASLink {
   /**
    * 
    **/
@@ -55,7 +55,7 @@
   /**
    * 
    **/
-  LinkParameters parameters() default @LinkParameters();
+  OASLinkParameters parameters() default @OASLinkParameters();
 
   /**
    * 

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/links/OASLinkParameters.java
Patch:
@@ -36,7 +36,7 @@
           ElementType.TYPE })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface LinkParameters {
+public @interface OASLinkParameters {
   /**
    * 
    **/

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/media/OASContent.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface Content {
+public @interface OASContent {
   /**
    * the media type that this content object applies to
    **/
@@ -43,11 +43,11 @@
   /**
    * an array of examples used to show the use of the associated schema
    **/
-  ExampleObject[] examples() default @ExampleObject();
+  OASExampleObject[] examples() default @OASExampleObject();
 
   /**
    * 
    **/
-  Schema schema() default @Schema();
+  OASSchema schema() default @OASSchema();
 
 }

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/media/OASExampleObject.java
Patch:
@@ -33,7 +33,7 @@
 @Target({ ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface ExampleObject {
+public @interface OASExampleObject {
   /**
    * a unique name to identify this particular example
    **/

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/media/OASSchema.java
Patch:
@@ -23,7 +23,7 @@
 import java.lang.annotation.Target;
 
 import io.swagger.annotations.ApiModel;
-import io.swagger.annotations.ExternalDocumentation;
+import io.swagger.annotations.OASExternalDocumentation;
 import java.util.List;
 import java.util.Map;
 
@@ -40,7 +40,7 @@
           ElementType.TYPE })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface Schema {
+public @interface OASSchema {
   /**
    * provides a java class as implementation for this schema.  When provided, additional information in the Schema annotation will augment the java class after introspection
    **/
@@ -189,7 +189,7 @@
   /**
    * 
    **/
-  ExternalDocumentation externalDocs() default @ExternalDocumentation();
+  OASExternalDocumentation externalDocs() default @OASExternalDocumentation();
 
   /**
    * 

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/parameters/OASRequestBody.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.annotations.media.Content;
+import io.swagger.annotations.media.OASContent;
 import java.util.List;
 
 /**
@@ -35,7 +35,7 @@
 @Target({ ElementType.PARAMETER })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface RequestBody {
+public @interface OASRequestBody {
   /**
    * 
    **/
@@ -44,7 +44,7 @@
   /**
    * 
    **/
-  Content[] content() default @Content();
+  OASContent[] content() default @OASContent();
 
   /**
    * 

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/responses/OASResponse.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import io.swagger.annotations.media.Content;
+import io.swagger.annotations.media.OASContent;
 
 /**
  * 
@@ -34,7 +34,7 @@
 @Target({ ElementType.METHOD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface Response {
+public @interface OASResponse {
   /**
    * 
    **/
@@ -48,6 +48,6 @@
   /**
    * 
    **/
-  Content content() default @Content();
+  OASContent content() default @OASContent();
 
 }

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/servers/OASServer.java
Patch:
@@ -34,7 +34,7 @@
 @Target({ ElementType.FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface Server {
+public @interface OASServer {
   /**
    * 
    **/
@@ -48,6 +48,6 @@
   /**
    * 
    **/
-  ServerVariable[] variables() default @ServerVariable();
+  OASServerVariable[] variables() default @OASServerVariable();
 
 }

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/servers/OASServerVariable.java
Patch:
@@ -34,7 +34,7 @@
 @Target({  })
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
-public @interface ServerVariable {
+public @interface OASServerVariable {
   /**
    * 
    **/

File: modules/swagger-models/src/main/java/io/swagger/models/Paths.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class Paths extends LinkedHashMap<String, PathItem> {
+  public Paths() { }
   private java.util.Map<String, Object> extensions = null;
 
   public Paths addPathItem(String name, PathItem item) {

File: modules/swagger-models/src/main/java/io/swagger/models/callbacks/Callback.java
Patch:
@@ -28,6 +28,7 @@
  */
 
 public class Callback extends LinkedHashMap<String, PathItem> {
+  public Callback() { }
   private java.util.Map<String, Object> extensions = null;
 
   public Callback addPathItem(String name, PathItem item) {

File: modules/swagger-models/src/main/java/io/swagger/models/callbacks/Callbacks.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class Callbacks extends LinkedHashMap<String, Callback> {
+  public Callbacks() { }
   private java.util.Map<String, Object> extensions = null;
 
   public Callbacks addCallback(String name, Callback item) {

File: modules/swagger-models/src/main/java/io/swagger/models/examples/Example.java
Patch:
@@ -20,7 +20,8 @@
  */
 
 public class Example {
-  public Example() {}
+  public Example() { }
+
 
   @Override
   public boolean equals(java.lang.Object o) {

File: modules/swagger-models/src/main/java/io/swagger/models/headers/Headers.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class Headers extends LinkedHashMap<String, Header> {
+  public Headers() { }
   private java.util.Map<String, Object> extensions = null;
 
   public Headers addHeader(String name, Header item) {

File: modules/swagger-models/src/main/java/io/swagger/models/links/LinkParameters.java
Patch:
@@ -25,6 +25,7 @@
  */
 
 public class LinkParameters {
+  public LinkParameters() { }
   private java.util.Map<String, Object> extensions = null;
 
 

File: modules/swagger-models/src/main/java/io/swagger/models/media/Content.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class Content extends LinkedHashMap<String, MediaType> {
+  public Content() { }
 
   public Content addMediaType(String name, MediaType item) {
     this.put(name, item);

File: modules/swagger-models/src/main/java/io/swagger/models/media/Encoding.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class Encoding extends LinkedHashMap<String, EncodingProperty> {
+  public Encoding() { }
 
   public Encoding addEncodingProperty(String name, EncodingProperty item) {
     this.put(name, item);

File: modules/swagger-models/src/main/java/io/swagger/models/security/Scopes.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class Scopes extends LinkedHashMap<String, String> {
+  public Scopes() { }
   private java.util.Map<String, Object> extensions = null;
 
   public Scopes addString(String name, String item) {

File: modules/swagger-models/src/main/java/io/swagger/models/security/SecurityRequirement.java
Patch:
@@ -28,6 +28,7 @@
  */
 
 public class SecurityRequirement extends LinkedHashMap<String, List> {
+  public SecurityRequirement() { }
 
   public SecurityRequirement addList(String name, List item) {
     this.put(name, item);

File: modules/swagger-models/src/main/java/io/swagger/models/servers/ServerVariables.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class ServerVariables extends LinkedHashMap<String, ServerVariable> {
+  public ServerVariables() { }
   private java.util.Map<String, Object> extensions = null;
 
   public ServerVariables addServerVariable(String name, ServerVariable item) {

File: modules/swagger-models/src/main/java/io/swagger/models/PathItem.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 public class PathItem {
-  @JsonProperty("_$ref")
+  @JsonProperty("$ref")
   private String ref = null;
   @JsonProperty("summary")
   private String summary = null;

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/ReaderTest.java
Patch:
@@ -43,12 +43,12 @@ public void readerTest1() {
 
         Assert.assertEquals(swagger.getHost(), "host");
         Assert.assertEquals(swagger.getBasePath(), "/api");
-        Assert.assertNotNull(swagger.getPath("/resources/testMethod3"));
+        Assert.assertNotNull(swagger.getPath("/resources/users"));
         Assert.assertNotNull(swagger.getDefinitions().get("SampleData"));
         Assert.assertEquals(swagger.getExternalDocs().getDescription(), "docs");
         Assert.assertEquals(swagger.getExternalDocs().getUrl(), "url_to_docs");
 
-        Path path = swagger.getPath("/resources/testMethod3");
+        Path path = swagger.getPath("/resources/users");
         Assert.assertNotNull(path);
         Operation get = path.getGet();
         Assert.assertNotNull( get );

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/extensions/PathGetterTest.java
Patch:
@@ -13,7 +13,7 @@ private Object[][] resourceWithAnnotations() {
         return new Object[][]{
                 {"testMethod1", "/tests/resources/testMethod1"},
                 {"testMethod2", "/tests/resources/testMethod2"},
-                {"testMethod3", "/tests/resources/testMethod3"},
+                {"testMethod3", "/tests/resources/users"},
                 {"testMethod4", "/tests/resources/testMethod4"},
         };
     }
@@ -23,7 +23,7 @@ private Object[][] resourceWithoutApiAnnotation() {
         return new Object[][]{
                 {"testMethod1", "/tests/testMethod1"},
                 {"testMethod2", "/tests/testMethod2"},
-                {"testMethod3", "/tests/testMethod3"},
+                {"testMethod3", "/tests/users"},
                 {"testMethod4", "/tests/testMethod4"},
         };
     }

File: modules/swagger-servlet/src/main/java/io/swagger/servlet/extensions/ServletReaderExtension.java
Patch:
@@ -222,7 +222,7 @@ public String getPath(ReaderContext context, Method method) {
         final String operationPath = apiOperation == null ? null : apiOperation.nickname();
         return PathUtils.collectPath(context.getParentPath(),
                 apiAnnotation == null ? null : apiAnnotation.value(),
-                method.getName());
+                StringUtils.isBlank(operationPath) ? method.getName() : operationPath);
     }
 
     @Override

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/BeanConfig.java
Patch:
@@ -299,7 +299,9 @@ public Set<Class<?>> classes() {
                 output.add(cls);
             } else {
                 for (String pkg : acceptablePackages) {
-                    if (cls.getPackage().getName().startsWith(pkg)) {
+                    // startsWith allows everything within a package
+                    // the dots ensures that package siblings are not considered
+                    if ((cls.getPackage().getName() + ".").startsWith(pkg + ".")) {
                         output.add(cls);
                     }
                 }

File: modules/swagger-models/src/main/java/io/swagger/models/refs/GenericRef.java
Patch:
@@ -91,7 +91,7 @@ private static String computeSimpleRef(String ref, RefFormat format, RefType typ
 
     private static RefFormat computeRefFormat(String ref) {
         RefFormat result = RefFormat.INTERNAL;
-        if (ref.startsWith("http")) {
+        if (ref.startsWith("http:") || ref.startsWith("https:")) {
             result = RefFormat.URL;
         } else if (ref.startsWith("#/")) {
             result = RefFormat.INTERNAL;

File: modules/swagger-models/src/main/java/io/swagger/models/refs/GenericRef.java
Patch:
@@ -91,7 +91,7 @@ private static String computeSimpleRef(String ref, RefFormat format, RefType typ
 
     private static RefFormat computeRefFormat(String ref) {
         RefFormat result = RefFormat.INTERNAL;
-        if (ref.startsWith("http")) {
+        if (ref.startsWith("http:") || ref.startsWith("https:")) {
             result = RefFormat.URL;
         } else if (ref.startsWith("#/")) {
             result = RefFormat.INTERNAL;

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -472,7 +472,8 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
             LOGGER.warn("Unknown implicit parameter type: [{}]", param.paramType());
             return null;
         }
-        final Type type = ReflectionUtils.typeFromString(param.dataType());
+        final Type type = param.dataTypeClass() == Void.class ? ReflectionUtils.typeFromString(param.dataType())
+                : param.dataTypeClass();
         return ParameterProcessor.applyAnnotations(swagger, p, (type == null) ? String.class : type,
                 Arrays.<Annotation>asList(param));
     }
@@ -1002,7 +1003,7 @@ private void addResponse(Operation operation, ApiResponse apiResponse) {
         Map<String, Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());
 
         Response response = new Response()
-.description(apiResponse.message()).headers(responseHeaders);
+        .description(apiResponse.message()).headers(responseHeaders);
 
         if (apiResponse.code() == 0) {
             operation.defaultResponse(response);

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java
Patch:
@@ -48,6 +48,7 @@ public Swagger filter(Swagger swagger, SwaggerSpecFilter filter, Map<String, Lis
             Path path = swagger.getPaths().get(resourcePath);
             Map<String, Operation> ops = new HashMap<String, Operation>();
             ops.put("get", path.getGet());
+            ops.put("head", path.getHead());
             ops.put("put", path.getPut());
             ops.put("post", path.getPost());
             ops.put("delete", path.getDelete());

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java
Patch:
@@ -48,6 +48,7 @@ public Swagger filter(Swagger swagger, SwaggerSpecFilter filter, Map<String, Lis
             Path path = swagger.getPaths().get(resourcePath);
             Map<String, Operation> ops = new HashMap<String, Operation>();
             ops.put("get", path.getGet());
+            ops.put("head", path.getHead());
             ops.put("put", path.getPut());
             ops.put("post", path.getPost());
             ops.put("delete", path.getDelete());

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -472,7 +472,8 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
             LOGGER.warn("Unknown implicit parameter type: [{}]", param.paramType());
             return null;
         }
-        final Type type = ReflectionUtils.typeFromString(param.dataType());
+        final Type type = param.dataTypeClass() == Void.class ? ReflectionUtils.typeFromString(param.dataType())
+                : param.dataTypeClass();
         return ParameterProcessor.applyAnnotations(swagger, p, (type == null) ? String.class : type,
                 Arrays.<Annotation>asList(param));
     }
@@ -1002,7 +1003,7 @@ private void addResponse(Operation operation, ApiResponse apiResponse) {
         Map<String, Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());
 
         Response response = new Response()
-.description(apiResponse.message()).headers(responseHeaders);
+        .description(apiResponse.message()).headers(responseHeaders);
 
         if (apiResponse.code() == 0) {
             operation.defaultResponse(response);

File: modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java
Patch:
@@ -193,6 +193,7 @@ private Map<PropertyBuilder.PropertyId, Object> argsFromNode(JsonNode node) {
         args.put(PropertyBuilder.PropertyId.MAX_LENGTH, getInteger(node, PropertyBuilder.PropertyId.MAX_LENGTH));
         args.put(PropertyBuilder.PropertyId.MINIMUM, getBigDecimal(node, PropertyBuilder.PropertyId.MINIMUM));
         args.put(PropertyBuilder.PropertyId.MAXIMUM, getBigDecimal(node, PropertyBuilder.PropertyId.MAXIMUM));
+        args.put(PropertyBuilder.PropertyId.MULTIPLE_OF, getBigDecimal(node, PropertyBuilder.PropertyId.MULTIPLE_OF));
         args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, getBoolean(node, PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM));
         args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, getBoolean(node, PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM));
         args.put(PropertyBuilder.PropertyId.UNIQUE_ITEMS, getBoolean(node, PropertyBuilder.PropertyId.UNIQUE_ITEMS));

File: modules/swagger-core/src/test/java/io/swagger/ByteConverterTest.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.Map;
 
 import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNotNull;
 
 public class ByteConverterTest {
     private static final String NEWLINE = System.getProperty("line.separator");
@@ -65,7 +66,7 @@ public void testDeserializeByteProperty() throws Exception {
                 "}";
 
         Model model = Json.mapper().readValue(json, Model.class);
-        Json.prettyPrint(model);
+        assertNotNull(model);
     }
 
     @Test

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/SwaggerJersey2JaxrsTest.java
Patch:
@@ -21,7 +21,6 @@
 import io.swagger.resources.ResourceWithFormData;
 import io.swagger.resources.ResourceWithJacksonBean;
 import io.swagger.resources.ResourceWithKnownInjections;
-import io.swagger.util.Json;
 import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
 import org.glassfish.jersey.media.multipart.FormDataParam;
 import org.testng.annotations.Test;
@@ -196,7 +195,7 @@ public void testJacksonFeatures() {
     @Test(description = "Tests issue 2031")
     public void testIssue2031() {
         final Swagger swagger = new Reader(new Swagger()).read(Resource2031.class);
-        Json.prettyPrint(swagger);
+        assertNotNull(swagger);
 
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java
Patch:
@@ -690,9 +690,9 @@ protected <N extends AbstractNumericProperty> N mergeNumeric(N property, Map<Pro
                 property.setExclusiveMaximum(value);
             }
             if (args.containsKey(PropertyId.MULTIPLE_OF)) {
-                final Double value = PropertyId.MULTIPLE_OF.findValue(args);
+                final BigDecimal value = PropertyId.MULTIPLE_OF.findValue(args);
                 if(value != null) {
-                    property.setMultipleOf(new BigDecimal(value));
+                    property.setMultipleOf(value);
                 }
             }
             return property;

File: modules/swagger-models/src/test/java/io/swagger/models/properties/PropertyBuilderTest.java
Patch:
@@ -363,7 +363,7 @@ public void testMergeWithDoubleProperty() {
         args.put(PropertyId.MAXIMUM, new BigDecimal(112.0));
         args.put(PropertyId.EXCLUSIVE_MINIMUM, true);
         args.put(PropertyId.EXCLUSIVE_MAXIMUM, true);
-        args.put(PropertyId.MULTIPLE_OF, 2.0);
+        args.put(PropertyId.MULTIPLE_OF, new BigDecimal(2.0));
         args.put(PropertyId.DEFAULT, "4");
         DoubleProperty doubleProperty = new DoubleProperty();
 

File: modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest.java
Patch:
@@ -324,7 +324,7 @@ public void testIssue2064Neg() throws Exception {
 
         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);
 
-        assertTrue(model.getUniqueItems());
+        assertFalse(model.getUniqueItems());
     }
 
     @Test
@@ -336,6 +336,6 @@ public void testIssue2064() throws Exception {
 
         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);
 
-        assertFalse(model.getUniqueItems());
+        assertTrue(model.getUniqueItems());
     }
 }
\ No newline at end of file

File: modules/swagger-core/src/test/java/io/swagger/properties/ArrayPropertyDeserializerTest.java
Patch:
@@ -1,4 +1,4 @@
-package io.swagger;
+package io.swagger.properties;
 
 import io.swagger.models.Operation;
 import io.swagger.models.Response;

File: modules/swagger-core/src/test/java/io/swagger/properties/MapPropertyDeserializerTest.java
Patch:
@@ -1,10 +1,8 @@
-package io.swagger;
+package io.swagger.properties;
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import io.swagger.models.Operation;
-import io.swagger.models.Path;
 import io.swagger.models.Response;
-import io.swagger.models.Swagger;
 import io.swagger.models.properties.IntegerProperty;
 import io.swagger.models.properties.MapProperty;
 import io.swagger.models.properties.Property;

File: modules/swagger-core/src/test/java/io/swagger/BeanValidatorTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
+import java.math.BigDecimal;
 import java.util.Map;
 
 public class BeanValidatorTest {
@@ -23,8 +24,8 @@ public void readBeanValidatorTest() {
         final Map<String, Property> properties = model.getProperties();
 
         final IntegerProperty age = (IntegerProperty) properties.get("age");
-        Assert.assertEquals(age.getMinimum(), 13.0);
-        Assert.assertEquals(age.getMaximum(), 99.0);
+        Assert.assertEquals(age.getMinimum(), new BigDecimal(13.0));
+        Assert.assertEquals(age.getMaximum(), new BigDecimal(99.0));
 
         final StringProperty password = (StringProperty) properties.get("password");
         Assert.assertEquals((int) password.getMinLength(), 6);

File: modules/swagger-hibernate-validations/src/main/java/io/swagger/validator/BeanValidator.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
-import java.util.Collection;
+import java.math.BigDecimal;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -56,8 +56,8 @@ public Property resolveProperty(Type type, ModelConverterContext context, Annota
                 if (property instanceof AbstractNumericProperty) {
                     Range range = (Range) annos.get("org.hibernate.validator.constraints.Range");
                     AbstractNumericProperty ap = (AbstractNumericProperty) property;
-                    ap.setMinimum(new Double(range.min()));
-                    ap.setMaximum(new Double(range.max()));
+                    ap.setMinimum(new BigDecimal(range.min()));
+                    ap.setMaximum(new BigDecimal(range.max()));
                 }
             }
             if (annos.containsKey("org.hibernate.validator.constraints.Length")) {

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/TestBeanParam.java
Patch:
@@ -22,8 +22,8 @@ public class TestBeanParam {
     private Integer priority1;
 
     @QueryParam("priority2")
-    @ApiParam(name = "test priority 2", defaultValue = "overridden")
-    @DefaultValue("default")
+    @ApiParam(name = "test priority 2", defaultValue = "4")
+    @DefaultValue("3")
     private Integer priority2;
 
     public Integer getOrder1() {

File: modules/swagger-core/src/test/java/io/swagger/BeanValidatorTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
+import java.math.BigDecimal;
 import java.util.Map;
 
 public class BeanValidatorTest {
@@ -23,8 +24,8 @@ public void readBeanValidatorTest() {
         final Map<String, Property> properties = model.getProperties();
 
         final IntegerProperty age = (IntegerProperty) properties.get("age");
-        Assert.assertEquals(age.getMinimum(), 13.0);
-        Assert.assertEquals(age.getMaximum(), 99.0);
+        Assert.assertEquals(age.getMinimum(), new BigDecimal(13.0));
+        Assert.assertEquals(age.getMaximum(), new BigDecimal(99.0));
 
         final StringProperty password = (StringProperty) properties.get("password");
         Assert.assertEquals((int) password.getMinLength(), 6);

File: modules/swagger-hibernate-validations/src/main/java/io/swagger/validator/BeanValidator.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
-import java.util.Collection;
+import java.math.BigDecimal;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -56,8 +56,8 @@ public Property resolveProperty(Type type, ModelConverterContext context, Annota
                 if (property instanceof AbstractNumericProperty) {
                     Range range = (Range) annos.get("org.hibernate.validator.constraints.Range");
                     AbstractNumericProperty ap = (AbstractNumericProperty) property;
-                    ap.setMinimum(new Double(range.min()));
-                    ap.setMaximum(new Double(range.max()));
+                    ap.setMinimum(new BigDecimal(range.min()));
+                    ap.setMaximum(new BigDecimal(range.max()));
                 }
             }
             if (annos.containsKey("org.hibernate.validator.constraints.Length")) {

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/TestBeanParam.java
Patch:
@@ -22,8 +22,8 @@ public class TestBeanParam {
     private Integer priority1;
 
     @QueryParam("priority2")
-    @ApiParam(name = "test priority 2", defaultValue = "overridden")
-    @DefaultValue("default")
+    @ApiParam(name = "test priority 2", defaultValue = "4")
+    @DefaultValue("3")
     private Integer priority2;
 
     public Integer getOrder1() {

File: modules/swagger-core/src/test/java/io/swagger/ParameterProcessorTest.java
Patch:
@@ -73,7 +73,7 @@ private void implicitParametrizedMethod() {
     }
 
     private void rangedParametrizedMethod(
-            @ApiParam(value = "sample param data", defaultValue = "5", allowableValues = "range[0,10]")
+            @ApiParam(value = "sample param data", defaultValue = "5", allowableValues = "range[0,10]", collectionFormat = "multi")
             @PathParam("id") Integer id,
             @ApiParam(value = "sample positive infinity data", allowableValues = "range(0, infinity)")
             @PathParam("minValue") Double minValue,
@@ -257,6 +257,7 @@ public void resourceWithParamRangeTest() throws NoSuchMethodException {
         assertEquals(param0.getDefaultValue(), "5");
         assertEquals(param0.getMinimum(), 0.0);
         assertEquals(param0.getMaximum(), 10.0);
+        assertEquals(param0.getCollectionFormat(), "multi");
 
         final PathParameter param1 = (PathParameter) ParameterProcessor.applyAnnotations(null, new PathParameter(),
                 genericParameterTypes[1], Arrays.asList(paramAnnotations[1]));

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -7,6 +7,7 @@
 import io.swagger.models.Tag;
 import io.swagger.models.parameters.*;
 import io.swagger.resources.*;
+import io.swagger.util.Json;
 import org.testng.annotations.Test;
 
 import javax.ws.rs.*;
@@ -190,10 +191,11 @@ public void scanImplicitParamOverriddenMethodTest() {
     @Test(description = "scan implicit params")
     public void scanImplicitParam() {
         Swagger swagger = getSwagger(ResourceWithImplicitParams.class);
-
+        Json.prettyPrint(swagger);
         List<Parameter> params = swagger.getPath("/testString").getPost().getParameters();
         assertNotNull(params);
         assertEquals(params.size(), 7);
+
         assertEquals(params.get(0).getName(), "sort");
         assertEquals(params.get(0).getIn(), "query");
 

File: modules/swagger-models/src/main/java/io/swagger/models/refs/GenericRef.java
Patch:
@@ -49,7 +49,7 @@ public boolean equals(Object o) {
         if (this == o) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
+        if (!(o instanceof GenericRef)) {
             return false;
         }
 
@@ -64,7 +64,7 @@ public boolean equals(Object o) {
         if (ref != null ? !ref.equals(that.ref) : that.ref != null) {
             return false;
         }
-        return !(simpleRef != null ? !simpleRef.equals(that.simpleRef) : that.simpleRef != null);
+        return simpleRef != null ? simpleRef.equals(that.simpleRef) : that.simpleRef == null;
 
     }
 

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -206,7 +206,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     try {
                         getMethod = PowerMockito.method(clazz, getterMethodName);
                     } catch (MethodNotFoundException ex) {
-                        LOGGER.log(Level.INFO, ex.getMessage(), ex);
+                        LOGGER.log(Level.INFO, ex.getMessage());
                         continue;
                     }
                     Class<?> retType = getMethod.getReturnType();
@@ -220,7 +220,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                 try {
                     Whitebox.setInternalState(instance, "_enum", (Object) null);
                 } catch (FieldNotFoundException ex) {
-                    LOGGER.log(Level.INFO, ex.getMessage(), ex);
+                    LOGGER.log(Level.INFO, ex.getMessage());
                 }
 
                 Whitebox.invokeMethod(instance, method.getName(), parametersArray);

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -7,6 +7,7 @@
 import io.swagger.models.Tag;
 import io.swagger.models.parameters.*;
 import io.swagger.resources.*;
+import io.swagger.util.Json;
 import org.testng.annotations.Test;
 
 import javax.ws.rs.*;
@@ -190,10 +191,11 @@ public void scanImplicitParamOverriddenMethodTest() {
     @Test(description = "scan implicit params")
     public void scanImplicitParam() {
         Swagger swagger = getSwagger(ResourceWithImplicitParams.class);
-
+        Json.prettyPrint(swagger);
         List<Parameter> params = swagger.getPath("/testString").getPost().getParameters();
         assertNotNull(params);
         assertEquals(params.size(), 7);
+
         assertEquals(params.get(0).getName(), "sort");
         assertEquals(params.get(0).getIn(), "query");
 

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -206,7 +206,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     try {
                         getMethod = PowerMockito.method(clazz, getterMethodName);
                     } catch (MethodNotFoundException ex) {
-                        LOGGER.log(Level.INFO, ex.getMessage(), ex);
+                        LOGGER.log(Level.INFO, ex.getMessage());
                         continue;
                     }
                     Class<?> retType = getMethod.getReturnType();

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -376,7 +376,7 @@ public AnnotationsHelper(List<Annotation> annotations, Type _type) {
                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);
                 } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {
                     try {
-                        rsDefault = (String) item.getClass().getMethod("value").invoke(item);
+                        rsDefault = (String) item.annotationType().getMethod("value").invoke(item);
                     } catch (Exception ex) {
                         LOGGER.error("Invocation of value method failed", ex);
                     }

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -376,7 +376,7 @@ public AnnotationsHelper(List<Annotation> annotations, Type _type) {
                     apiParam = new ApiImplicitParamWrapper((ApiImplicitParam) item);
                 } else if ("javax.ws.rs.DefaultValue".equals(item.annotationType().getName())) {
                     try {
-                        rsDefault = (String) item.getClass().getMethod("value").invoke(item);
+                        rsDefault = (String) item.annotationType().getMethod("value").invoke(item);
                     } catch (Exception ex) {
                         LOGGER.error("Invocation of value method failed", ex);
                     }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/DefaultParameterExtension.java
Patch:
@@ -140,7 +140,7 @@ private void handleAdditionalAnnotation(List<Parameter> parameters, Annotation a
 
                 // Gather the field's details
                 if (field != null) {
-                    paramType = field.getGenericType();
+                    paramType = field.getRawType();
 
                     for (final Annotation fieldAnnotation : field.annotations()) {
                         if (!paramAnnotations.contains(fieldAnnotation)) {
@@ -153,7 +153,7 @@ private void handleAdditionalAnnotation(List<Parameter> parameters, Annotation a
                 if (setter != null) {
                     // Do not set the param class/type from the setter if the values are already identified
                     if (paramType == null) {
-                        paramType = setter.getGenericParameterTypes() != null ? setter.getGenericParameterTypes()[0] : null;
+                        paramType = setter.getRawParameterTypes() != null ? setter.getRawParameterTypes()[0] : null;
                     }
 
                     for (final Annotation fieldAnnotation : setter.annotations()) {
@@ -167,7 +167,7 @@ private void handleAdditionalAnnotation(List<Parameter> parameters, Annotation a
                 if (getter != null) {
                     // Do not set the param class/type from the getter if the values are already identified
                     if (paramType == null) {
-                        paramType = getter.getGenericReturnType();
+                        paramType = getter.getRawReturnType();
                     }
 
                     for (final Annotation fieldAnnotation : getter.annotations()) {

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/DefaultParameterExtension.java
Patch:
@@ -140,7 +140,7 @@ private void handleAdditionalAnnotation(List<Parameter> parameters, Annotation a
 
                 // Gather the field's details
                 if (field != null) {
-                    paramType = field.getGenericType();
+                    paramType = field.getRawType();
 
                     for (final Annotation fieldAnnotation : field.annotations()) {
                         if (!paramAnnotations.contains(fieldAnnotation)) {
@@ -153,7 +153,7 @@ private void handleAdditionalAnnotation(List<Parameter> parameters, Annotation a
                 if (setter != null) {
                     // Do not set the param class/type from the setter if the values are already identified
                     if (paramType == null) {
-                        paramType = setter.getGenericParameterTypes() != null ? setter.getGenericParameterTypes()[0] : null;
+                        paramType = setter.getRawParameterTypes() != null ? setter.getRawParameterTypes()[0] : null;
                     }
 
                     for (final Annotation fieldAnnotation : setter.annotations()) {
@@ -167,7 +167,7 @@ private void handleAdditionalAnnotation(List<Parameter> parameters, Annotation a
                 if (getter != null) {
                     // Do not set the param class/type from the getter if the values are already identified
                     if (paramType == null) {
-                        paramType = getter.getGenericReturnType();
+                        paramType = getter.getRawReturnType();
                     }
 
                     for (final Annotation fieldAnnotation : getter.annotations()) {

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see ApiImplicitParam
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiImplicitParams {
     /**

File: modules/swagger-core/src/test/java/io/swagger/reflection/IParent.java
Patch:
@@ -3,6 +3,7 @@
 import javax.ws.rs.Path;
 
 @Path("parentInterfacePath")
+@IndirectAnnotation
 public interface IParent<T extends Number> extends IGrandparent<T> {
 
     public String parametrizedMethod2(T arg);

File: modules/swagger-core/src/test/java/io/swagger/reflection/Parent.java
Patch:
@@ -3,6 +3,7 @@
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponses;
 
+@IndirectAnnotation
 public class Parent<T extends Number> {
 
     public T parametrizedMethod1(T arg) {

File: modules/swagger-core/src/test/java/io/swagger/util/JsonSerializationTest.java
Patch:
@@ -64,6 +64,6 @@ public void testSerializeSecurityRequirement_UsingSpecCompliantMethods() throws
                 .security(new SecurityRequirement().requirement("api_key").requirement("basic_auth"))
                 .security(new SecurityRequirement().requirement("oauth2", Arrays.asList("hello", "world")));
         json = Json.mapper().writeValueAsString(swagger);
-        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
+        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"api_key\":[],\"basic_auth\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
     }
 }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/BaseApiListingResource.java
Patch:
@@ -91,7 +91,7 @@ private static synchronized Swagger scan(Application app, ServletContext context
         return swagger;
     }
 
-    private Swagger process(
+    protected Swagger process(
             Application app,
             ServletContext servletContext,
             ServletConfig sc,

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -43,7 +43,7 @@ public CategoryWithApiModel getCategoryWithApiModel() {
     }
 
     public void setCategoryWithApiModel(CategoryWithApiModel category) {
-        this.categoryWithApiModel = categoryWithApiModel;
+        this.categoryWithApiModel = category;
     }
 
     @XmlElement(name = "name")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BookResource.java
Patch:
@@ -15,9 +15,9 @@
 @Path("/{id}/v1/books/")
 public class BookResource extends BaseResource {
 
-    @ApiParam("Overriden description")
+    @ApiParam("Overridden description")
     @PathParam("description")
-    private String description = "Overriden";
+    private String description = "Overridden";
 
     @Override
     public String getDescription() {

File: modules/swagger-models/src/main/java/io/swagger/models/Info.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class Info {
@@ -13,7 +13,7 @@ public class Info {
     private String termsOfService;
     private Contact contact;
     private License license;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public Info version(String version) {
         this.setVersion(version);
@@ -212,4 +212,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/In.java
Patch:
@@ -3,13 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public enum In {
     HEADER, QUERY;
 
-    private static Map<String, In> names = new HashMap<String, In>();
+    private static Map<String, In> names = new LinkedHashMap<String, In>();
 
     @JsonCreator
     public static In forValue(String value) {
@@ -31,4 +31,4 @@ public String toValue() {
         names.put("header", HEADER);
         names.put("query", QUERY);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/OAuth2Definition.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.models.auth;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class OAuth2Definition extends AbstractSecuritySchemeDefinition {
@@ -77,7 +77,7 @@ public void setScopes(Map<String, String> scopes) {
 
     public void addScope(String name, String description) {
         if (this.scopes == null) {
-            this.scopes = new HashMap<String, String>();
+            this.scopes = new LinkedHashMap<String, String>();
         }
         this.scopes.put(name, description);
     }

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/BodyParameter.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.models.Model;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class BodyParameter extends AbstractParameter implements Parameter {
@@ -44,7 +44,7 @@ public void setSchema(Model schema) {
 
     public void addExample(String mediaType, String value) {
         if(examples == null) {
-            examples = new HashMap<String, String>();
+            examples = new LinkedHashMap<String, String>();
         }
         examples.put(mediaType, value);
     }
@@ -87,4 +87,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BinaryProperty.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 public class BinaryProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
     protected List<String> _enum;
     protected Integer minLength = null, maxLength = null;
     protected String pattern = null;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class DoubleProperty extends DecimalProperty {
-    private static final String FORMAT = "double";
+    public static final String FORMAT = "double";
     protected Double _default;
     protected List<Double> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class FloatProperty extends DecimalProperty {
-    private static final String FORMAT = "float";
+    public static final String FORMAT = "float";
     protected List<Float> _enum;
 
     protected Float _default;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class IntegerProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int32";
+    public static final String FORMAT = "int32";
     protected Integer _default;
     protected List<Integer> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class LongProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int64";
+    public static final String FORMAT = "int64";
     protected Long _default;
     protected List<Long> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PasswordProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class PasswordProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
 
     private static final String FORMAT = "password";
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.models.refs.RefType;
 
 public class RefProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "ref";
+    public static final String TYPE = "ref";
     private GenericRef genericRef;
 
     public RefProperty() {

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -249,7 +249,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     Object actual = Whitebox.invokeMethod(instance, getterMethodName);
                     Whitebox.invokeMethod(instance, method.getName(), parametersArray);
                     res = Whitebox.invokeMethod(instance, getterMethodName);
-                    assertEquals(actual, res, "the value must not change when passing an unkown value to " + method);
+                    assertEquals(actual, res, "the value must not change when passing an unknown value to " + method);
                 }
             }
         }

File: modules/swagger-models/src/test/java/io/swagger/models/OperationTest.java
Patch:
@@ -180,7 +180,7 @@ public void testSetSummary() {
         operation.setSummary("summary");
 
         // then
-        assertEquals(operation.getSummary(), "summary", "The get sumary must equals the set one");
+        assertEquals(operation.getSummary(), "summary", "The get summary must equal the set one");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -235,7 +235,7 @@ public void testSecurityDefinition() {
 
         // then
         assertEquals(swagger.getSecurityDefinitions().get(name), securityDefinition,
-                "Must be able to retrieve the added security definiton");
+                "Must be able to retrieve the added security definition");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/properties/PropertyBuilderTest.java
Patch:
@@ -362,6 +362,7 @@ public void testMergeWithDoubleProperty() {
         args.put(PropertyId.MAXIMUM, 112.0);
         args.put(PropertyId.EXCLUSIVE_MINIMUM, true);
         args.put(PropertyId.EXCLUSIVE_MAXIMUM, true);
+        args.put(PropertyId.MULTIPLE_OF, 2.0);
         args.put(PropertyId.DEFAULT, "4");
         DoubleProperty doubleProperty = new DoubleProperty();
 
@@ -375,6 +376,7 @@ public void testMergeWithDoubleProperty() {
         assertEquals(doubleProperty.getMaximum(), 112.0, "Must contain the maximum value passed into args");
         assertTrue(doubleProperty.exclusiveMaximum, "Must contain the exclusive minimum value passed into args");
         assertTrue(doubleProperty.exclusiveMinimum, "Must contain the exclusive maximum value passed into args");
+        assertEquals(doubleProperty.getMultipleOf(), 2.0, "Must contain the multiple of value passed into args");
 
         // given
         args.put(PropertyId.DEFAULT, null);

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ResourceWithAnnotations.java
Patch:
@@ -49,9 +49,9 @@
         produces = {"application/json", "application/xml", ""},
         schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS, SwaggerDefinition.Scheme.DEFAULT},
         securityDefinition = @SecurityDefinition(
-                basicAuthDefinions = {
+                basicAuthDefinitions = {
                         @BasicAuthDefinition(key = "basicAuth")},
-                apiKeyAuthDefintions = {
+                apiKeyAuthDefinitions = {
                         @ApiKeyAuthDefinition(key = "apiKeyAuth", name = "apiKey", in = ApiKeyAuthDefinition.ApiKeyLocation.HEADER)},
                 oAuth2Definitions = {
                         @OAuth2Definition(key = "oAuth2AccessCode", flow = OAuth2Definition.Flow.ACCESS_CODE),

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see ApiImplicitParam
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiImplicitParams {
     /**

File: modules/swagger-core/src/test/java/io/swagger/reflection/IParent.java
Patch:
@@ -3,6 +3,7 @@
 import javax.ws.rs.Path;
 
 @Path("parentInterfacePath")
+@IndirectAnnotation
 public interface IParent<T extends Number> {
 
     public String parametrizedMethod2(T arg);

File: modules/swagger-core/src/test/java/io/swagger/reflection/Parent.java
Patch:
@@ -3,6 +3,7 @@
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponses;
 
+@IndirectAnnotation
 public class Parent<T extends Number> {
 
     public T parametrizedMethod1(T arg) {

File: modules/swagger-core/src/test/java/io/swagger/util/JsonSerializationTest.java
Patch:
@@ -64,6 +64,6 @@ public void testSerializeSecurityRequirement_UsingSpecCompliantMethods() throws
                 .security(new SecurityRequirement().requirement("api_key").requirement("basic_auth"))
                 .security(new SecurityRequirement().requirement("oauth2", Arrays.asList("hello", "world")));
         json = Json.mapper().writeValueAsString(swagger);
-        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
+        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"api_key\":[],\"basic_auth\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
     }
 }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/BaseApiListingResource.java
Patch:
@@ -91,7 +91,7 @@ private static synchronized Swagger scan(Application app, ServletContext context
         return swagger;
     }
 
-    private Swagger process(
+    protected Swagger process(
             Application app,
             ServletContext servletContext,
             ServletConfig sc,

File: modules/swagger-models/src/main/java/io/swagger/models/Info.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class Info {
@@ -13,7 +13,7 @@ public class Info {
     private String termsOfService;
     private Contact contact;
     private License license;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public Info version(String version) {
         this.setVersion(version);
@@ -212,4 +212,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/In.java
Patch:
@@ -3,13 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public enum In {
     HEADER, QUERY;
 
-    private static Map<String, In> names = new HashMap<String, In>();
+    private static Map<String, In> names = new LinkedHashMap<String, In>();
 
     @JsonCreator
     public static In forValue(String value) {
@@ -31,4 +31,4 @@ public String toValue() {
         names.put("header", HEADER);
         names.put("query", QUERY);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/OAuth2Definition.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.models.auth;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class OAuth2Definition extends AbstractSecuritySchemeDefinition {
@@ -77,7 +77,7 @@ public void setScopes(Map<String, String> scopes) {
 
     public void addScope(String name, String description) {
         if (this.scopes == null) {
-            this.scopes = new HashMap<String, String>();
+            this.scopes = new LinkedHashMap<String, String>();
         }
         this.scopes.put(name, description);
     }

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/BodyParameter.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.models.Model;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class BodyParameter extends AbstractParameter implements Parameter {
@@ -44,7 +44,7 @@ public void setSchema(Model schema) {
 
     public void addExample(String mediaType, String value) {
         if(examples == null) {
-            examples = new HashMap<String, String>();
+            examples = new LinkedHashMap<String, String>();
         }
         examples.put(mediaType, value);
     }
@@ -87,4 +87,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ResourceWithAnnotations.java
Patch:
@@ -49,9 +49,9 @@
         produces = {"application/json", "application/xml", ""},
         schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS, SwaggerDefinition.Scheme.DEFAULT},
         securityDefinition = @SecurityDefinition(
-                basicAuthDefinions = {
+                basicAuthDefinitions = {
                         @BasicAuthDefinition(key = "basicAuth")},
-                apiKeyAuthDefintions = {
+                apiKeyAuthDefinitions = {
                         @ApiKeyAuthDefinition(key = "apiKeyAuth", name = "apiKey", in = ApiKeyAuthDefinition.ApiKeyLocation.HEADER)},
                 oAuth2Definitions = {
                         @OAuth2Definition(key = "oAuth2AccessCode", flow = OAuth2Definition.Flow.ACCESS_CODE),

File: modules/swagger-core/src/test/java/io/swagger/util/JsonSerializationTest.java
Patch:
@@ -64,6 +64,6 @@ public void testSerializeSecurityRequirement_UsingSpecCompliantMethods() throws
                 .security(new SecurityRequirement().requirement("api_key").requirement("basic_auth"))
                 .security(new SecurityRequirement().requirement("oauth2", Arrays.asList("hello", "world")));
         json = Json.mapper().writeValueAsString(swagger);
-        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
+        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"api_key\":[],\"basic_auth\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
     }
 }

File: modules/swagger-models/src/main/java/io/swagger/models/AbstractModel.java
Patch:
@@ -4,14 +4,14 @@
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public abstract class AbstractModel implements Model {
     private ExternalDocs externalDocs;
     private String reference;
     private String title;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     @Override
     public ExternalDocs getExternalDocs() {

File: modules/swagger-models/src/main/java/io/swagger/models/ExternalDocs.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 /**
@@ -20,7 +20,7 @@ public class ExternalDocs {
      */
     private String url;
 
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public ExternalDocs() {
     }

File: modules/swagger-models/src/main/java/io/swagger/models/Info.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class Info {
@@ -13,7 +13,7 @@ public class Info {
     private String termsOfService;
     private Contact contact;
     private License license;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public Info version(String version) {
         this.setVersion(version);
@@ -212,4 +212,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/License.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class License {
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     private String name;
     private String url;
 

File: modules/swagger-models/src/main/java/io/swagger/models/Path.java
Patch:
@@ -4,15 +4,14 @@
 import io.swagger.models.parameters.Parameter;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
 @JsonPropertyOrder({"get", "head", "post", "put", "delete", "options", "patch"})
 public class Path {
 
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     private Operation get;
     private Operation put;
     private Operation post;

File: modules/swagger-models/src/main/java/io/swagger/models/Response.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import io.swagger.models.properties.Property;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 
@@ -13,7 +12,7 @@ public class Response {
     private Property schema;
     private Map<String, Object> examples;
     private Map<String, Property> headers;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public Response schema(Property property) {
         this.setSchema(property);
@@ -27,7 +26,7 @@ public Response description(String description) {
 
     public Response example(String type, Object example) {
         if (examples == null) {
-            examples = new HashMap<String, Object>();
+            examples = new LinkedHashMap<String, Object>();
         }
         examples.put(type, example);
         return this;

File: modules/swagger-models/src/main/java/io/swagger/models/Tag.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class Tag {
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     private String name;
     private String description;
     private ExternalDocs externalDocs;

File: modules/swagger-models/src/main/java/io/swagger/models/auth/AbstractSecuritySchemeDefinition.java
Patch:
@@ -3,13 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 
 public abstract class AbstractSecuritySchemeDefinition implements SecuritySchemeDefinition {
 
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     private String description;
 

File: modules/swagger-models/src/main/java/io/swagger/models/auth/In.java
Patch:
@@ -3,13 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public enum In {
     HEADER, QUERY;
 
-    private static Map<String, In> names = new HashMap<String, In>();
+    private static Map<String, In> names = new LinkedHashMap<String, In>();
 
     @JsonCreator
     public static In forValue(String value) {
@@ -31,4 +31,4 @@ public String toValue() {
         names.put("header", HEADER);
         names.put("query", QUERY);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/OAuth2Definition.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.models.auth;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class OAuth2Definition extends AbstractSecuritySchemeDefinition {
@@ -77,7 +77,7 @@ public void setScopes(Map<String, String> scopes) {
 
     public void addScope(String name, String description) {
         if (this.scopes == null) {
-            this.scopes = new HashMap<String, String>();
+            this.scopes = new LinkedHashMap<String, String>();
         }
         this.scopes.put(name, description);
     }

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/BodyParameter.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.models.Model;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class BodyParameter extends AbstractParameter implements Parameter {
@@ -44,7 +44,7 @@ public void setSchema(Model schema) {
 
     public void addExample(String mediaType, String value) {
         if(examples == null) {
-            examples = new HashMap<String, String>();
+            examples = new LinkedHashMap<String, String>();
         }
         examples.put(mediaType, value);
     }
@@ -87,4 +87,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/properties/AbstractProperty.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import io.swagger.models.Xml;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public abstract class AbstractProperty implements Property, Cloneable {
@@ -19,7 +19,7 @@ public abstract class AbstractProperty implements Property, Cloneable {
     String title;
     Boolean readOnly;
     private String access;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     @Override
     public Property rename(String newName) {

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -13,6 +13,7 @@
 import io.swagger.models.properties.AbstractNumericProperty;
 import io.swagger.models.properties.ArrayProperty;
 import io.swagger.models.properties.FileProperty;
+import io.swagger.models.properties.LongProperty;
 import io.swagger.models.properties.Property;
 import io.swagger.models.properties.PropertyBuilder;
 import io.swagger.models.properties.StringProperty;
@@ -68,6 +69,8 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, T
             if (StringUtils.isNotEmpty(param.getDataType())) {
                 if ("java.io.File".equalsIgnoreCase(param.getDataType())) {
                     p.setProperty(new FileProperty());
+                } else if("long".equalsIgnoreCase(param.getDataType())) {
+                    p.setProperty(new LongProperty());
                 } else {
                     p.setType(param.getDataType());
                 }

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ResourceWithAnnotations.java
Patch:
@@ -49,9 +49,9 @@
         produces = {"application/json", "application/xml", ""},
         schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS, SwaggerDefinition.Scheme.DEFAULT},
         securityDefinition = @SecurityDefinition(
-                basicAuthDefinions = {
+                basicAuthDefinitions = {
                         @BasicAuthDefinition(key = "basicAuth")},
-                apiKeyAuthDefintions = {
+                apiKeyAuthDefinitions = {
                         @ApiKeyAuthDefinition(key = "apiKeyAuth", name = "apiKey", in = ApiKeyAuthDefinition.ApiKeyLocation.HEADER)},
                 oAuth2Definitions = {
                         @OAuth2Definition(key = "oAuth2AccessCode", flow = OAuth2Definition.Flow.ACCESS_CODE),

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see ApiImplicitParam
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD,ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiImplicitParams {
     /**

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/BaseApiListingResource.java
Patch:
@@ -91,7 +91,7 @@ private static synchronized Swagger scan(Application app, ServletContext context
         return swagger;
     }
 
-    private Swagger process(
+    protected Swagger process(
             Application app,
             ServletContext servletContext,
             ServletConfig sc,

File: modules/swagger-core/src/test/java/io/swagger/util/JsonSerializationTest.java
Patch:
@@ -64,6 +64,6 @@ public void testSerializeSecurityRequirement_UsingSpecCompliantMethods() throws
                 .security(new SecurityRequirement().requirement("api_key").requirement("basic_auth"))
                 .security(new SecurityRequirement().requirement("oauth2", Arrays.asList("hello", "world")));
         json = Json.mapper().writeValueAsString(swagger);
-        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
+        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"api_key\":[],\"basic_auth\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
     }
 }

File: modules/swagger-models/src/main/java/io/swagger/models/AbstractModel.java
Patch:
@@ -4,14 +4,14 @@
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public abstract class AbstractModel implements Model {
     private ExternalDocs externalDocs;
     private String reference;
     private String title;
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     @Override
     public ExternalDocs getExternalDocs() {

File: modules/swagger-models/src/main/java/io/swagger/models/ExternalDocs.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 /**
@@ -20,7 +20,7 @@ public class ExternalDocs {
      */
     private String url;
 
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public ExternalDocs() {
     }
@@ -115,4 +115,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/Info.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class Info {
@@ -13,7 +13,7 @@ public class Info {
     private String termsOfService;
     private Contact contact;
     private License license;
-    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     public Info version(String version) {
         this.setVersion(version);
@@ -212,4 +212,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/License.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class License {
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     private String name;
     private String url;
 
@@ -86,4 +86,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/Path.java
Patch:
@@ -4,15 +4,14 @@
 import io.swagger.models.parameters.Parameter;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
 @JsonPropertyOrder({"get", "head", "post", "put", "delete", "options", "patch"})
 public class Path {
 
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     private Operation get;
     private Operation put;
     private Operation post;

File: modules/swagger-models/src/main/java/io/swagger/models/Tag.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class Tag {
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     private String name;
     private String description;
     private ExternalDocs externalDocs;
@@ -122,4 +122,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/AbstractSecuritySchemeDefinition.java
Patch:
@@ -3,13 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 
 public abstract class AbstractSecuritySchemeDefinition implements SecuritySchemeDefinition {
 
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     private String description;
 

File: modules/swagger-models/src/main/java/io/swagger/models/auth/In.java
Patch:
@@ -3,13 +3,13 @@
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public enum In {
     HEADER, QUERY;
 
-    private static Map<String, In> names = new HashMap<String, In>();
+    private static Map<String, In> names = new LinkedHashMap<String, In>();
 
     @JsonCreator
     public static In forValue(String value) {
@@ -31,4 +31,4 @@ public String toValue() {
         names.put("header", HEADER);
         names.put("query", QUERY);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/auth/OAuth2Definition.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger.models.auth;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class OAuth2Definition extends AbstractSecuritySchemeDefinition {
@@ -77,7 +77,7 @@ public void setScopes(Map<String, String> scopes) {
 
     public void addScope(String name, String description) {
         if (this.scopes == null) {
-            this.scopes = new HashMap<String, String>();
+            this.scopes = new LinkedHashMap<String, String>();
         }
         this.scopes.put(name, description);
     }

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/AbstractParameter.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public abstract class AbstractParameter {
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
     protected String in;
     protected String name;
     protected String description;
@@ -150,4 +150,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/BodyParameter.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.models.Model;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class BodyParameter extends AbstractParameter implements Parameter {
@@ -44,7 +44,7 @@ public void setSchema(Model schema) {
 
     public void addExample(String mediaType, String value) {
         if(examples == null) {
-            examples = new HashMap<String, String>();
+            examples = new LinkedHashMap<String, String>();
         }
         examples.put(mediaType, value);
     }
@@ -87,4 +87,4 @@ public boolean equals(Object obj) {
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/properties/AbstractProperty.java
Patch:
@@ -4,7 +4,7 @@
 import com.fasterxml.jackson.annotation.JsonAnySetter;
 import io.swagger.models.Xml;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public abstract class AbstractProperty implements Property, Cloneable {
@@ -19,7 +19,7 @@ public abstract class AbstractProperty implements Property, Cloneable {
     String title;
     Boolean readOnly;
     private String access;
-    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
+    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
 
     @Override
     public Property rename(String newName) {

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -125,7 +125,7 @@ public BaseIntegerProperty createProperty() {
     /**
      * Generic decimal number without specific format.
      */
-    DECIMAL(java.math.BigDecimal.class) {
+    DECIMAL(java.math.BigDecimal.class, "number") {
         @Override
         public DecimalProperty createProperty() {
             return new DecimalProperty();

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -43,7 +43,7 @@ public CategoryWithApiModel getCategoryWithApiModel() {
     }
 
     public void setCategoryWithApiModel(CategoryWithApiModel category) {
-        this.categoryWithApiModel = categoryWithApiModel;
+        this.categoryWithApiModel = category;
     }
 
     @XmlElement(name = "name")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BookResource.java
Patch:
@@ -15,9 +15,9 @@
 @Path("/{id}/v1/books/")
 public class BookResource extends BaseResource {
 
-    @ApiParam("Overriden description")
+    @ApiParam("Overridden description")
     @PathParam("description")
-    private String description = "Overriden";
+    private String description = "Overridden";
 
     @Override
     public String getDescription() {

File: modules/swagger-models/src/main/java/io/swagger/models/Path.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -167,7 +168,7 @@ public List<Operation> getOperations() {
 
     @JsonIgnore
     public Map<HttpMethod, Operation> getOperationMap() {
-        Map<HttpMethod, Operation> result = new HashMap<HttpMethod, Operation>();
+        Map<HttpMethod, Operation> result = new LinkedHashMap<HttpMethod, Operation>();
 
         if (get != null) {
             result.put(HttpMethod.GET, get);

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BinaryProperty.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 public class BinaryProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
     protected List<String> _enum;
     protected Integer minLength = null, maxLength = null;
     protected String pattern = null;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class DoubleProperty extends DecimalProperty {
-    private static final String FORMAT = "double";
+    public static final String FORMAT = "double";
     protected Double _default;
     protected List<Double> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class FloatProperty extends DecimalProperty {
-    private static final String FORMAT = "float";
+    public static final String FORMAT = "float";
     protected List<Float> _enum;
 
     protected Float _default;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class IntegerProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int32";
+    public static final String FORMAT = "int32";
     protected Integer _default;
     protected List<Integer> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class LongProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int64";
+    public static final String FORMAT = "int64";
     protected Long _default;
     protected List<Long> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PasswordProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class PasswordProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
 
     private static final String FORMAT = "password";
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.models.refs.RefType;
 
 public class RefProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "ref";
+    public static final String TYPE = "ref";
     private GenericRef genericRef;
 
     public RefProperty() {

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -249,7 +249,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     Object actual = Whitebox.invokeMethod(instance, getterMethodName);
                     Whitebox.invokeMethod(instance, method.getName(), parametersArray);
                     res = Whitebox.invokeMethod(instance, getterMethodName);
-                    assertEquals(actual, res, "the value must not change when passing an unkown value to " + method);
+                    assertEquals(actual, res, "the value must not change when passing an unknown value to " + method);
                 }
             }
         }

File: modules/swagger-models/src/test/java/io/swagger/models/OperationTest.java
Patch:
@@ -180,7 +180,7 @@ public void testSetSummary() {
         operation.setSummary("summary");
 
         // then
-        assertEquals(operation.getSummary(), "summary", "The get sumary must equals the set one");
+        assertEquals(operation.getSummary(), "summary", "The get summary must equal the set one");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -235,7 +235,7 @@ public void testSecurityDefinition() {
 
         // then
         assertEquals(swagger.getSecurityDefinitions().get(name), securityDefinition,
-                "Must be able to retrieve the added security definiton");
+                "Must be able to retrieve the added security definition");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/properties/PropertyBuilderTest.java
Patch:
@@ -362,6 +362,7 @@ public void testMergeWithDoubleProperty() {
         args.put(PropertyId.MAXIMUM, 112.0);
         args.put(PropertyId.EXCLUSIVE_MINIMUM, true);
         args.put(PropertyId.EXCLUSIVE_MAXIMUM, true);
+        args.put(PropertyId.MULTIPLE_OF, 2.0);
         args.put(PropertyId.DEFAULT, "4");
         DoubleProperty doubleProperty = new DoubleProperty();
 
@@ -375,6 +376,7 @@ public void testMergeWithDoubleProperty() {
         assertEquals(doubleProperty.getMaximum(), 112.0, "Must contain the maximum value passed into args");
         assertTrue(doubleProperty.exclusiveMaximum, "Must contain the exclusive minimum value passed into args");
         assertTrue(doubleProperty.exclusiveMinimum, "Must contain the exclusive maximum value passed into args");
+        assertEquals(doubleProperty.getMultipleOf(), 2.0, "Must contain the multiple of value passed into args");
 
         // given
         args.put(PropertyId.DEFAULT, null);

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -125,7 +125,7 @@ public BaseIntegerProperty createProperty() {
     /**
      * Generic decimal number without specific format.
      */
-    DECIMAL(java.math.BigDecimal.class) {
+    DECIMAL(java.math.BigDecimal.class, "number") {
         @Override
         public DecimalProperty createProperty() {
             return new DecimalProperty();

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -43,7 +43,7 @@ public CategoryWithApiModel getCategoryWithApiModel() {
     }
 
     public void setCategoryWithApiModel(CategoryWithApiModel category) {
-        this.categoryWithApiModel = categoryWithApiModel;
+        this.categoryWithApiModel = category;
     }
 
     @XmlElement(name = "name")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BookResource.java
Patch:
@@ -15,9 +15,9 @@
 @Path("/{id}/v1/books/")
 public class BookResource extends BaseResource {
 
-    @ApiParam("Overriden description")
+    @ApiParam("Overridden description")
     @PathParam("description")
-    private String description = "Overriden";
+    private String description = "Overridden";
 
     @Override
     public String getDescription() {

File: modules/swagger-models/src/main/java/io/swagger/models/Path.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -167,7 +168,7 @@ public List<Operation> getOperations() {
 
     @JsonIgnore
     public Map<HttpMethod, Operation> getOperationMap() {
-        Map<HttpMethod, Operation> result = new HashMap<HttpMethod, Operation>();
+        Map<HttpMethod, Operation> result = new LinkedHashMap<HttpMethod, Operation>();
 
         if (get != null) {
             result.put(HttpMethod.GET, get);

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BinaryProperty.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 public class BinaryProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
     protected List<String> _enum;
     protected Integer minLength = null, maxLength = null;
     protected String pattern = null;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class DoubleProperty extends DecimalProperty {
-    private static final String FORMAT = "double";
+    public static final String FORMAT = "double";
     protected Double _default;
     protected List<Double> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class FloatProperty extends DecimalProperty {
-    private static final String FORMAT = "float";
+    public static final String FORMAT = "float";
     protected List<Float> _enum;
 
     protected Float _default;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class IntegerProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int32";
+    public static final String FORMAT = "int32";
     protected Integer _default;
     protected List<Integer> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class LongProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int64";
+    public static final String FORMAT = "int64";
     protected Long _default;
     protected List<Long> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PasswordProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class PasswordProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
 
     private static final String FORMAT = "password";
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.models.refs.RefType;
 
 public class RefProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "ref";
+    public static final String TYPE = "ref";
     private GenericRef genericRef;
 
     public RefProperty() {

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -249,7 +249,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     Object actual = Whitebox.invokeMethod(instance, getterMethodName);
                     Whitebox.invokeMethod(instance, method.getName(), parametersArray);
                     res = Whitebox.invokeMethod(instance, getterMethodName);
-                    assertEquals(actual, res, "the value must not change when passing an unkown value to " + method);
+                    assertEquals(actual, res, "the value must not change when passing an unknown value to " + method);
                 }
             }
         }

File: modules/swagger-models/src/test/java/io/swagger/models/OperationTest.java
Patch:
@@ -180,7 +180,7 @@ public void testSetSummary() {
         operation.setSummary("summary");
 
         // then
-        assertEquals(operation.getSummary(), "summary", "The get sumary must equals the set one");
+        assertEquals(operation.getSummary(), "summary", "The get summary must equal the set one");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -235,7 +235,7 @@ public void testSecurityDefinition() {
 
         // then
         assertEquals(swagger.getSecurityDefinitions().get(name), securityDefinition,
-                "Must be able to retrieve the added security definiton");
+                "Must be able to retrieve the added security definition");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/properties/PropertyBuilderTest.java
Patch:
@@ -362,6 +362,7 @@ public void testMergeWithDoubleProperty() {
         args.put(PropertyId.MAXIMUM, 112.0);
         args.put(PropertyId.EXCLUSIVE_MINIMUM, true);
         args.put(PropertyId.EXCLUSIVE_MAXIMUM, true);
+        args.put(PropertyId.MULTIPLE_OF, 2.0);
         args.put(PropertyId.DEFAULT, "4");
         DoubleProperty doubleProperty = new DoubleProperty();
 
@@ -375,6 +376,7 @@ public void testMergeWithDoubleProperty() {
         assertEquals(doubleProperty.getMaximum(), 112.0, "Must contain the maximum value passed into args");
         assertTrue(doubleProperty.exclusiveMaximum, "Must contain the exclusive minimum value passed into args");
         assertTrue(doubleProperty.exclusiveMinimum, "Must contain the exclusive maximum value passed into args");
+        assertEquals(doubleProperty.getMultipleOf(), 2.0, "Must contain the multiple of value passed into args");
 
         // given
         args.put(PropertyId.DEFAULT, null);

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BinaryProperty.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 public class BinaryProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
     protected List<String> _enum;
     protected Integer minLength = null, maxLength = null;
     protected String pattern = null;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class DoubleProperty extends DecimalProperty {
-    private static final String FORMAT = "double";
+    public static final String FORMAT = "double";
     protected Double _default;
     protected List<Double> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class FloatProperty extends DecimalProperty {
-    private static final String FORMAT = "float";
+    public static final String FORMAT = "float";
     protected List<Float> _enum;
 
     protected Float _default;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class IntegerProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int32";
+    public static final String FORMAT = "int32";
     protected Integer _default;
     protected List<Integer> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class LongProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int64";
+    public static final String FORMAT = "int64";
     protected Long _default;
     protected List<Long> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PasswordProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class PasswordProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
 
     private static final String FORMAT = "password";
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.models.refs.RefType;
 
 public class RefProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "ref";
+    public static final String TYPE = "ref";
     private GenericRef genericRef;
 
     public RefProperty() {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BinaryProperty.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 public class BinaryProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
     protected List<String> _enum;
     protected Integer minLength = null, maxLength = null;
     protected String pattern = null;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class DoubleProperty extends DecimalProperty {
-    private static final String FORMAT = "double";
+    public static final String FORMAT = "double";
     protected Double _default;
     protected List<Double> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class FloatProperty extends DecimalProperty {
-    private static final String FORMAT = "float";
+    public static final String FORMAT = "float";
     protected List<Float> _enum;
 
     protected Float _default;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class IntegerProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int32";
+    public static final String FORMAT = "int32";
     protected Integer _default;
     protected List<Integer> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class LongProperty extends BaseIntegerProperty {
-    private static final String FORMAT = "int64";
+    public static final String FORMAT = "int64";
     protected Long _default;
     protected List<Long> _enum;
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PasswordProperty.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 public class PasswordProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "string";
+    public static final String TYPE = "string";
 
     private static final String FORMAT = "password";
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.models.refs.RefType;
 
 public class RefProperty extends AbstractProperty implements Property {
-    private static final String TYPE = "ref";
+    public static final String TYPE = "ref";
     private GenericRef genericRef;
 
     public RefProperty() {

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -125,7 +125,7 @@ public BaseIntegerProperty createProperty() {
     /**
      * Generic decimal number without specific format.
      */
-    DECIMAL(java.math.BigDecimal.class) {
+    DECIMAL(java.math.BigDecimal.class, "number") {
         @Override
         public DecimalProperty createProperty() {
             return new DecimalProperty();

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -125,7 +125,7 @@ public BaseIntegerProperty createProperty() {
     /**
      * Generic decimal number without specific format.
      */
-    DECIMAL(java.math.BigDecimal.class) {
+    DECIMAL(java.math.BigDecimal.class, "number") {
         @Override
         public DecimalProperty createProperty() {
             return new DecimalProperty();

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -6,7 +6,6 @@
 import io.swagger.models.Tag;
 import io.swagger.models.parameters.*;
 import io.swagger.resources.*;
-import io.swagger.util.Json;
 import org.testng.annotations.Test;
 
 import javax.ws.rs.*;
@@ -359,7 +358,8 @@ public void scanBigDecimal() {
         Swagger swagger = getSwagger(Resource1970.class);
         assertNotNull(swagger);
 
-        Json.prettyPrint(swagger);
+        PathParameter parameter = (PathParameter)swagger.getPath("/v1/{param1}").getGet().getParameters().get(0);
+        assertEquals(parameter.getType(), "number");
     }
 
     private Swagger getSwagger(Class<?> cls) {

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1970.java
Patch:
@@ -12,9 +12,9 @@
 @Api(value = "root")
 public class Resource1970 {
     @GET
-    @Path("/{dbkey}")
+    @Path("/{param1}")
     @ApiOperation(value = "Retrieve a database resource")
-    @ApiImplicitParams({@ApiImplicitParam(name = "param1", dataType = "java.math.BigDecimal", paramType = "path", required = true)})
+    @ApiImplicitParams({@ApiImplicitParam(name = "param1", dataType = "number", paramType = "path", required = true)})
     public void numberInput() throws Exception {
         return;
     }

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -43,7 +43,7 @@ public CategoryWithApiModel getCategoryWithApiModel() {
     }
 
     public void setCategoryWithApiModel(CategoryWithApiModel category) {
-        this.categoryWithApiModel = categoryWithApiModel;
+        this.categoryWithApiModel = category;
     }
 
     @XmlElement(name = "name")

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -43,7 +43,7 @@ public CategoryWithApiModel getCategoryWithApiModel() {
     }
 
     public void setCategoryWithApiModel(CategoryWithApiModel category) {
-        this.categoryWithApiModel = categoryWithApiModel;
+        this.categoryWithApiModel = category;
     }
 
     @XmlElement(name = "name")

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ResourceWithAnnotations.java
Patch:
@@ -49,9 +49,9 @@
         produces = {"application/json", "application/xml", ""},
         schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS, SwaggerDefinition.Scheme.DEFAULT},
         securityDefinition = @SecurityDefinition(
-                basicAuthDefinions = {
+                basicAuthDefinitions = {
                         @BasicAuthDefinition(key = "basicAuth")},
-                apiKeyAuthDefintions = {
+                apiKeyAuthDefinitions = {
                         @ApiKeyAuthDefinition(key = "apiKeyAuth", name = "apiKey", in = ApiKeyAuthDefinition.ApiKeyLocation.HEADER)},
                 oAuth2Definitions = {
                         @OAuth2Definition(key = "oAuth2AccessCode", flow = OAuth2Definition.Flow.ACCESS_CODE),

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -432,7 +432,7 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
         } else if (param.paramType().equalsIgnoreCase("header")) {
             p = new HeaderParameter();
         } else {
-            LOGGER.warn("Unkown implicit parameter type: [" + param.paramType() + "]");
+            LOGGER.warn("Unknown implicit parameter type: [" + param.paramType() + "]");
             return null;
         }
         final Type type = ReflectionUtils.typeFromString(param.dataType());

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -231,7 +231,7 @@ public void scanParametersFromBaseResource(){
         Parameter description = parameters.get(0);
         assertTrue(description instanceof PathParameter);
         assertEquals(description.getName(), "description");
-        assertEquals(description.getDescription(), "Overriden description");
+        assertEquals(description.getDescription(), "Overridden description");
 
         Parameter id = parameters.get(1);
         assertTrue(id instanceof PathParameter);

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BookResource.java
Patch:
@@ -15,9 +15,9 @@
 @Path("/{id}/v1/books/")
 public class BookResource extends BaseResource {
 
-    @ApiParam("Overriden description")
+    @ApiParam("Overridden description")
     @PathParam("description")
-    private String description = "Overriden";
+    private String description = "Overridden";
 
     @Override
     public String getDescription() {

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -249,7 +249,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     Object actual = Whitebox.invokeMethod(instance, getterMethodName);
                     Whitebox.invokeMethod(instance, method.getName(), parametersArray);
                     res = Whitebox.invokeMethod(instance, getterMethodName);
-                    assertEquals(actual, res, "the value must not change when passing an unkown value to " + method);
+                    assertEquals(actual, res, "the value must not change when passing an unknown value to " + method);
                 }
             }
         }

File: modules/swagger-models/src/test/java/io/swagger/models/OperationTest.java
Patch:
@@ -180,7 +180,7 @@ public void testSetSummary() {
         operation.setSummary("summary");
 
         // then
-        assertEquals(operation.getSummary(), "summary", "The get sumary must equals the set one");
+        assertEquals(operation.getSummary(), "summary", "The get summary must equal the set one");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -235,7 +235,7 @@ public void testSecurityDefinition() {
 
         // then
         assertEquals(swagger.getSecurityDefinitions().get(name), securityDefinition,
-                "Must be able to retrieve the added security definiton");
+                "Must be able to retrieve the added security definition");
     }
 
     @Test

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -489,7 +489,7 @@ protected void readSwaggerConfig(Class<?> cls, SwaggerDefinition config) {
             io.swagger.models.auth.ApiKeyAuthDefinition apiKeyAuthDefinition = new io.swagger.models.auth.ApiKeyAuthDefinition();
 
             apiKeyAuthDefinition.setName(apiKeyAuthConfig.name());
-            apiKeyAuthDefinition.setIn(In.valueOf(apiKeyAuthConfig.in().toValue()));
+            apiKeyAuthDefinition.setIn(In.forValue(apiKeyAuthConfig.in().toValue()));
             apiKeyAuthDefinition.setDescription(apiKeyAuthConfig.description());
 
             swagger.addSecurityDefinition(apiKeyAuthConfig.key(), apiKeyAuthDefinition);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -432,7 +432,7 @@ protected Parameter readImplicitParam(ApiImplicitParam param) {
         } else if (param.paramType().equalsIgnoreCase("header")) {
             p = new HeaderParameter();
         } else {
-            LOGGER.warn("Unkown implicit parameter type: [" + param.paramType() + "]");
+            LOGGER.warn("Unknown implicit parameter type: [" + param.paramType() + "]");
             return null;
         }
         final Type type = ReflectionUtils.typeFromString(param.dataType());

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -231,7 +231,7 @@ public void scanParametersFromBaseResource(){
         Parameter description = parameters.get(0);
         assertTrue(description instanceof PathParameter);
         assertEquals(description.getName(), "description");
-        assertEquals(description.getDescription(), "Overriden description");
+        assertEquals(description.getDescription(), "Overridden description");
 
         Parameter id = parameters.get(1);
         assertTrue(id instanceof PathParameter);

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BookResource.java
Patch:
@@ -15,9 +15,9 @@
 @Path("/{id}/v1/books/")
 public class BookResource extends BaseResource {
 
-    @ApiParam("Overriden description")
+    @ApiParam("Overridden description")
     @PathParam("description")
-    private String description = "Overriden";
+    private String description = "Overridden";
 
     @Override
     public String getDescription() {

File: modules/swagger-models/src/test/java/io/swagger/TestUtils.java
Patch:
@@ -249,7 +249,7 @@ public static <T> void testCommonMethods(Class<T> clazz, Set<String> exclusions)
                     Object actual = Whitebox.invokeMethod(instance, getterMethodName);
                     Whitebox.invokeMethod(instance, method.getName(), parametersArray);
                     res = Whitebox.invokeMethod(instance, getterMethodName);
-                    assertEquals(actual, res, "the value must not change when passing an unkown value to " + method);
+                    assertEquals(actual, res, "the value must not change when passing an unknown value to " + method);
                 }
             }
         }

File: modules/swagger-models/src/test/java/io/swagger/models/OperationTest.java
Patch:
@@ -180,7 +180,7 @@ public void testSetSummary() {
         operation.setSummary("summary");
 
         // then
-        assertEquals(operation.getSummary(), "summary", "The get sumary must equals the set one");
+        assertEquals(operation.getSummary(), "summary", "The get summary must equal the set one");
     }
 
     @Test

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -235,7 +235,7 @@ public void testSecurityDefinition() {
 
         // then
         assertEquals(swagger.getSecurityDefinitions().get(name), securityDefinition,
-                "Must be able to retrieve the added security definiton");
+                "Must be able to retrieve the added security definition");
     }
 
     @Test

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -5,6 +5,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.annotation.JsonUnwrapped;
 import com.fasterxml.jackson.annotation.ObjectIdGenerator;
 import com.fasterxml.jackson.annotation.ObjectIdGenerators;
 import com.fasterxml.jackson.databind.BeanDescription;

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see ApiImplicitParam
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD,ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiImplicitParams {
     /**

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/BasicAuthDefinition.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.annotations;
 
 /**
- * Annotation used to construct OAuth security definition.
+ * Annotation used to construct Basic Auth security definition.
  */
 public @interface BasicAuthDefinition {
 

File: modules/swagger-core/src/test/java/io/swagger/util/JsonDeserializationTest.java
Patch:
@@ -51,7 +51,7 @@ private void assertIsRefResponse(Response response, String expectedRef) {
     }
 
     @Test
-    public void testDeserializeSecurityRequirement() throws Exception {
+    public void testDeserializeSecurity() throws Exception {
         final Swagger swagger = TestUtils.deserializeJsonFileFromClasspath("specFiles/securityDefinitions.json", Swagger.class);
 
         final List<SecurityRequirement> security = swagger.getSecurity();

File: modules/swagger-core/src/test/java/io/swagger/util/JsonSerializationTest.java
Patch:
@@ -64,6 +64,6 @@ public void testSerializeSecurityRequirement_UsingSpecCompliantMethods() throws
                 .security(new SecurityRequirement().requirement("api_key").requirement("basic_auth"))
                 .security(new SecurityRequirement().requirement("oauth2", Arrays.asList("hello", "world")));
         json = Json.mapper().writeValueAsString(swagger);
-        assertEquals(json, "{\"swagger\":\"2.0\",\"securityRequirement\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
+        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
     }
 }

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -82,7 +82,7 @@ public void testSetSecurityRequirement() {
         swagger.setSecurityRequirement(new ArrayList<SecurityRequirement>(Arrays.asList(requirement)));
 
         // then
-        assertTrue(swagger.getSecurityRequirement().contains(requirement),
+        assertTrue(swagger.getSecurity().contains(requirement),
                 "The newly added requiement must be contained in the requiement list");
     }
 
@@ -92,7 +92,7 @@ public void testAddSecurityDefinition() {
         swagger.addSecurityDefinition(requirement);
 
         // then
-        assertTrue(swagger.getSecurityRequirement().contains(requirement),
+        assertTrue(swagger.getSecurity().contains(requirement),
                 "The newly added requiement must be contained in the requiement list");
     }
 

File: modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/listing/ApiListingResourceJSON.java
Patch:
@@ -2,9 +2,7 @@
 
 import io.swagger.jaxrs.listing.ApiListingResource;
 
-import javax.ws.rs.Path;
-
-@Path("/")
+@Deprecated
 public class ApiListingResourceJSON
         extends ApiListingResource {
 }
\ No newline at end of file

File: modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/listing/ApiListingResourceJSON.java
Patch:
@@ -2,9 +2,7 @@
 
 import io.swagger.jaxrs.listing.ApiListingResource;
 
-import javax.ws.rs.Path;
-
-@Path("/")
+@Deprecated
 public class ApiListingResourceJSON
         extends ApiListingResource {
 }
\ No newline at end of file

File: modules/swagger-models/src/main/java/io/swagger/models/ModelImpl.java
Patch:
@@ -266,7 +266,7 @@ public Object clone() {
         cloned.type = this.type;
         cloned.name = this.name;
         cloned.required = this.required;
-        cloned.properties = this.properties;
+        if (this.properties != null) cloned.properties =  new LinkedHashMap<String, Property>(this.properties);
         cloned.isSimple = this.isSimple;
         cloned.description = this.description;
         cloned.example = this.example;

File: modules/swagger-models/src/main/java/io/swagger/models/ModelImpl.java
Patch:
@@ -266,7 +266,7 @@ public Object clone() {
         cloned.type = this.type;
         cloned.name = this.name;
         cloned.required = this.required;
-        cloned.properties = this.properties;
+        if (this.properties != null) cloned.properties =  new LinkedHashMap<String, Property>(this.properties);
         cloned.isSimple = this.isSimple;
         cloned.description = this.description;
         cloned.example = this.example;

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/SwaggerContextService.java
Patch:
@@ -80,7 +80,7 @@ public SwaggerContextService withServletConfig(ServletConfig sc) {
         return this;
     }
 
-    private static boolean isServletConfigAvailable (ServletConfig sc) {
+    public static boolean isServletConfigAvailable (ServletConfig sc) {
         if (sc == null) return false;
         // hack for quick fix for https://github.com/swagger-api/swagger-core/issues/1691
         // in v1.5.7, targeting v1.5.8; overall improved/refactored "swagger context" to be applied in later major versions

File: modules/swagger-core/src/test/java/io/swagger/util/JsonDeserializationTest.java
Patch:
@@ -51,7 +51,7 @@ private void assertIsRefResponse(Response response, String expectedRef) {
     }
 
     @Test
-    public void testDeserializeSecurityRequirement() throws Exception {
+    public void testDeserializeSecurity() throws Exception {
         final Swagger swagger = TestUtils.deserializeJsonFileFromClasspath("specFiles/securityDefinitions.json", Swagger.class);
 
         final List<SecurityRequirement> security = swagger.getSecurity();

File: modules/swagger-core/src/test/java/io/swagger/util/JsonSerializationTest.java
Patch:
@@ -64,6 +64,6 @@ public void testSerializeSecurityRequirement_UsingSpecCompliantMethods() throws
                 .security(new SecurityRequirement().requirement("api_key").requirement("basic_auth"))
                 .security(new SecurityRequirement().requirement("oauth2", Arrays.asList("hello", "world")));
         json = Json.mapper().writeValueAsString(swagger);
-        assertEquals(json, "{\"swagger\":\"2.0\",\"securityRequirement\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
+        assertEquals(json, "{\"swagger\":\"2.0\",\"security\":[{\"basic_auth\":[],\"api_key\":[]},{\"oauth2\":[\"hello\",\"world\"]}]}");
     }
 }

File: modules/swagger-models/src/test/java/io/swagger/models/SwaggerTest.java
Patch:
@@ -82,7 +82,7 @@ public void testSetSecurityRequirement() {
         swagger.setSecurityRequirement(new ArrayList<SecurityRequirement>(Arrays.asList(requirement)));
 
         // then
-        assertTrue(swagger.getSecurityRequirement().contains(requirement),
+        assertTrue(swagger.getSecurity().contains(requirement),
                 "The newly added requiement must be contained in the requiement list");
     }
 
@@ -92,7 +92,7 @@ public void testAddSecurityDefinition() {
         swagger.addSecurityDefinition(requirement);
 
         // then
-        assertTrue(swagger.getSecurityRequirement().contains(requirement),
+        assertTrue(swagger.getSecurity().contains(requirement),
                 "The newly added requiement must be contained in the requiement list");
     }
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -187,7 +187,7 @@ private Swagger read(Class<?> cls, String parentPath, String parentMethod, boole
         String[] produces = new String[0];
         final Set<Scheme> globalSchemes = EnumSet.noneOf(Scheme.class);
 
-        Api api = (Api) cls.getAnnotation(Api.class);
+        Api api = ReflectionUtils.getAnnotation(cls, Api.class);
 
         boolean hasPathAnnotation = (ReflectionUtils.getAnnotation(cls, javax.ws.rs.Path.class) != null);
         boolean hasApiAnnotation = (api != null);
@@ -410,7 +410,7 @@ private Swagger read(Class<?> cls, String parentPath, String parentMethod, boole
     }
 
     private void readImplicitParameters(Method method, Operation operation) {
-        ApiImplicitParams implicitParams = method.getAnnotation(ApiImplicitParams.class);
+        ApiImplicitParams implicitParams = ReflectionUtils.getAnnotation(method, ApiImplicitParams.class);
         if (implicitParams != null && implicitParams.value().length > 0) {
             for (ApiImplicitParam param : implicitParams.value()) {
                 Parameter p = readImplicitParam(param);
@@ -858,7 +858,7 @@ private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globa
         }
 
         Type[] genericParameterTypes = method.getGenericParameterTypes();
-        Annotation[][] paramAnnotations = method.getParameterAnnotations();
+        Annotation[][] paramAnnotations = ReflectionUtils.getParameterAnnotations(method);
         for (int i = 0; i < genericParameterTypes.length; i++) {
             final Type type = TypeFactory.defaultInstance().constructType(genericParameterTypes[i], cls);
             List<Parameter> parameters = getParameters(type, Arrays.asList(paramAnnotations[i]));

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -201,6 +201,7 @@ public ObjectProperty createProperty() {
         addKeys(externalClasses, DATE, "org.joda.time.LocalDate", "java.time.LocalDate");
         addKeys(externalClasses, DATE_TIME, "org.joda.time.DateTime", "org.joda.time.ReadableDateTime",
                 "javax.xml.datatype.XMLGregorianCalendar", "java.time.LocalDateTime", "java.time.ZonedDateTime");
+        addKeys(externalClasses, LONG, "java.time.Instant");                
         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);
 
         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -201,6 +201,7 @@ public ObjectProperty createProperty() {
         addKeys(externalClasses, DATE, "org.joda.time.LocalDate", "java.time.LocalDate");
         addKeys(externalClasses, DATE_TIME, "org.joda.time.DateTime", "org.joda.time.ReadableDateTime",
                 "javax.xml.datatype.XMLGregorianCalendar", "java.time.LocalDateTime", "java.time.ZonedDateTime");
+        addKeys(externalClasses, LONG, "java.time.Instant");                
         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);
 
         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -187,7 +187,7 @@ private Swagger read(Class<?> cls, String parentPath, String parentMethod, boole
         String[] produces = new String[0];
         final Set<Scheme> globalSchemes = EnumSet.noneOf(Scheme.class);
 
-        Api api = (Api) cls.getAnnotation(Api.class);
+        Api api = ReflectionUtils.getAnnotation(cls, Api.class);
 
         boolean hasPathAnnotation = (ReflectionUtils.getAnnotation(cls, javax.ws.rs.Path.class) != null);
         boolean hasApiAnnotation = (api != null);
@@ -410,7 +410,7 @@ private Swagger read(Class<?> cls, String parentPath, String parentMethod, boole
     }
 
     private void readImplicitParameters(Method method, Operation operation) {
-        ApiImplicitParams implicitParams = method.getAnnotation(ApiImplicitParams.class);
+        ApiImplicitParams implicitParams = ReflectionUtils.getAnnotation(method, ApiImplicitParams.class);
         if (implicitParams != null && implicitParams.value().length > 0) {
             for (ApiImplicitParam param : implicitParams.value()) {
                 Parameter p = readImplicitParam(param);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -858,7 +858,7 @@ private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globa
         }
 
         Type[] genericParameterTypes = method.getGenericParameterTypes();
-        Annotation[][] paramAnnotations = method.getParameterAnnotations();
+        Annotation[][] paramAnnotations = ReflectionUtils.getParameterAnnotations(method);
         for (int i = 0; i < genericParameterTypes.length; i++) {
             final Type type = TypeFactory.defaultInstance().constructType(genericParameterTypes[i], cls);
             List<Parameter> parameters = getParameters(type, Arrays.asList(paramAnnotations[i]));

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -844,7 +844,7 @@ private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globa
         // merge class level @ApiResponse
         for (ApiResponse apiResponse : classApiResponses) {
             String key = apiResponse.code() == 0 ? "default":String.valueOf(apiResponse.code());
-            if (operation.getResponses().containsKey(key)) continue;
+            if (operation.getResponses() != null && operation.getResponses().containsKey(key)) continue;
             addResponse(operation, apiResponse);
         }
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -844,7 +844,7 @@ private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globa
         // merge class level @ApiResponse
         for (ApiResponse apiResponse : classApiResponses) {
             String key = apiResponse.code() == 0 ? "default":String.valueOf(apiResponse.code());
-            if (operation.getResponses().containsKey(key)) continue;
+            if (operation.getResponses() != null && operation.getResponses().containsKey(key)) continue;
             addResponse(operation, apiResponse);
         }
 

File: modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -193,7 +194,7 @@ Property propertyFromNode(JsonNode node) {
             } else {
                 detailNode = node.get("properties");
                 String detailNodeType = null;
-                Map<String, Property> properties = new HashMap<String, Property>();
+                Map<String, Property> properties = new LinkedHashMap<String, Property>();
                 if(detailNode != null){
                     for(Iterator<Map.Entry<String,JsonNode>> iter = detailNode.fields(); iter.hasNext();){
                         Map.Entry<String,JsonNode> field = iter.next();

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java
Patch:
@@ -170,11 +170,12 @@ private Swagger removeBrokenReferenceDefinitions (Swagger swagger) {
 
     private void locateNestedReferencedDefinitions (Model m, Set<String> referencedDefinitions) {
 
+        if (m.getProperties() == null) return;
         for (String keyProp: m.getProperties().keySet()) {
             Property p = m.getProperties().get(keyProp);
             if (p instanceof ArrayProperty) {
                 ArrayProperty ap = (ArrayProperty) p;
-                if (ap.getItems() instanceof RefProperty) {
+                if (ap.getItems() != null && ap.getItems() instanceof RefProperty) {
                     RefProperty rp = (RefProperty) ap.getItems();
                     String simpleRef = rp.getSimpleRef();
                     referencedDefinitions.add(simpleRef);

File: modules/swagger-core/src/test/java/io/swagger/filter/SpecFilterTest.java
Patch:
@@ -120,16 +120,19 @@ public void filterAwayBrokenReferenceModelProperties() throws IOException {
         final Swagger swagger = getSwagger("specFiles/paramAndResponseRef.json");
 
         assertNotNull(swagger.getDefinitions().get("Order"));
+        assertNotNull(swagger.getDefinitions().get("NoPropertiesModel"));
 
         final NoOpOperationsFilter noOpfilter = new NoOpOperationsFilter();
         Swagger filtered = new SpecFilter().filter(swagger, noOpfilter, null, null, null);
 
         assertNotNull(filtered.getDefinitions().get("Order"));
+        assertNotNull(swagger.getDefinitions().get("NoPropertiesModel"));
 
         final RemoveUnreferencedDefinitionsFilter refFilter = new RemoveUnreferencedDefinitionsFilter();
         filtered = new SpecFilter().filter(swagger, refFilter, null, null, null);
 
         assertNull(filtered.getDefinitions().get("Order"));
+        assertNull(filtered.getDefinitions().get("NoPropertiesModel"));
 
     }
 

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java
Patch:
@@ -170,11 +170,12 @@ private Swagger removeBrokenReferenceDefinitions (Swagger swagger) {
 
     private void locateNestedReferencedDefinitions (Model m, Set<String> referencedDefinitions) {
 
+        if (m.getProperties() == null) return;
         for (String keyProp: m.getProperties().keySet()) {
             Property p = m.getProperties().get(keyProp);
             if (p instanceof ArrayProperty) {
                 ArrayProperty ap = (ArrayProperty) p;
-                if (ap.getItems() instanceof RefProperty) {
+                if (ap.getItems() != null && ap.getItems() instanceof RefProperty) {
                     RefProperty rp = (RefProperty) ap.getItems();
                     String simpleRef = rp.getSimpleRef();
                     referencedDefinitions.add(simpleRef);

File: modules/swagger-core/src/test/java/io/swagger/filter/SpecFilterTest.java
Patch:
@@ -120,16 +120,19 @@ public void filterAwayBrokenReferenceModelProperties() throws IOException {
         final Swagger swagger = getSwagger("specFiles/paramAndResponseRef.json");
 
         assertNotNull(swagger.getDefinitions().get("Order"));
+        assertNotNull(swagger.getDefinitions().get("NoPropertiesModel"));
 
         final NoOpOperationsFilter noOpfilter = new NoOpOperationsFilter();
         Swagger filtered = new SpecFilter().filter(swagger, noOpfilter, null, null, null);
 
         assertNotNull(filtered.getDefinitions().get("Order"));
+        assertNotNull(swagger.getDefinitions().get("NoPropertiesModel"));
 
         final RemoveUnreferencedDefinitionsFilter refFilter = new RemoveUnreferencedDefinitionsFilter();
         filtered = new SpecFilter().filter(swagger, refFilter, null, null, null);
 
         assertNull(filtered.getDefinitions().get("Order"));
+        assertNull(filtered.getDefinitions().get("NoPropertiesModel"));
 
     }
 

File: modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.EnumMap;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -193,7 +194,7 @@ Property propertyFromNode(JsonNode node) {
             } else {
                 detailNode = node.get("properties");
                 String detailNodeType = null;
-                Map<String, Property> properties = new HashMap<String, Property>();
+                Map<String, Property> properties = new LinkedHashMap<String, Property>();
                 if(detailNode != null){
                     for(Iterator<Map.Entry<String,JsonNode>> iter = detailNode.fields(); iter.hasNext();){
                         Map.Entry<String,JsonNode> field = iter.next();

File: modules/swagger-core/src/test/java/io/swagger/deserialization/JsonDeserializationTest.java
Patch:
@@ -36,6 +36,7 @@ public void testCompositionTest() throws IOException {
     public void testObjectProperty() throws IOException {
         final String json = "{\n" +
                 "   \"type\":\"object\",\n" +
+                "   \"title\":\"objectProperty\",\n" +
                 "   \"description\":\"top level object\",\n" +
                 "   \"properties\":{\n" +
                 "      \"property1\":{\n" +
@@ -54,7 +55,8 @@ public void testObjectProperty() throws IOException {
                 "}";
         final Property result = m.readValue(json, Property.class);
         assertTrue(result instanceof ObjectProperty);
-        assertEquals(((ObjectProperty) result).getProperties().size(), 3);
+        assertEquals(3, ((ObjectProperty) result).getProperties().size());
+        assertEquals("objectProperty", ((ObjectProperty) result).getTitle());
 
     }
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/SwaggerConfigLocator.java
Patch:
@@ -50,7 +50,7 @@ public Swagger getSwagger(String id) {
         if (value != null) {
             return value;
         }
-        return new Swagger();
+        return null;
     }
 
     public void putSwagger(String id, Swagger swagger) {

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/SwaggerContextService.java
Patch:
@@ -147,6 +147,7 @@ public Swagger getSwagger() {
         if (value == null && sc != null) {
             value = (Swagger) sc.getServletContext().getAttribute("swagger");
         }
+        if (value == null) value = new Swagger();
         return value;
     }
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/SwaggerConfigLocator.java
Patch:
@@ -50,7 +50,7 @@ public Swagger getSwagger(String id) {
         if (value != null) {
             return value;
         }
-        return new Swagger();
+        return null;
     }
 
     public void putSwagger(String id, Swagger swagger) {

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/SwaggerContextService.java
Patch:
@@ -147,6 +147,7 @@ public Swagger getSwagger() {
         if (value == null && sc != null) {
             value = (Swagger) sc.getServletContext().getAttribute("swagger");
         }
+        if (value == null) value = new Swagger();
         return value;
     }
 

File: modules/swagger-servlet/src/main/java/io/swagger/servlet/extensions/ServletReaderExtension.java
Patch:
@@ -222,7 +222,7 @@ public String getPath(ReaderContext context, Method method) {
         final String operationPath = apiOperation == null ? null : apiOperation.nickname();
         return PathUtils.collectPath(context.getParentPath(),
                 apiAnnotation == null ? null : apiAnnotation.value(),
-                StringUtils.defaultIfBlank(operationPath, method.getName()));
+                method.getName());
     }
 
     @Override

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/ReaderTest.java
Patch:
@@ -43,12 +43,12 @@ public void readerTest1() {
 
         Assert.assertEquals(swagger.getHost(), "host");
         Assert.assertEquals(swagger.getBasePath(), "/api");
-        Assert.assertNotNull(swagger.getPath("/resources/users"));
+        Assert.assertNotNull(swagger.getPath("/resources/testMethod3"));
         Assert.assertNotNull(swagger.getDefinitions().get("SampleData"));
         Assert.assertEquals(swagger.getExternalDocs().getDescription(), "docs");
         Assert.assertEquals(swagger.getExternalDocs().getUrl(), "url_to_docs");
 
-        Path path = swagger.getPath("/resources/users");
+        Path path = swagger.getPath("/resources/testMethod3");
         Assert.assertNotNull(path);
         Operation get = path.getGet();
         Assert.assertNotNull( get );

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/extensions/PathGetterTest.java
Patch:
@@ -13,7 +13,7 @@ private Object[][] resourceWithAnnotations() {
         return new Object[][]{
                 {"testMethod1", "/tests/resources/testMethod1"},
                 {"testMethod2", "/tests/resources/testMethod2"},
-                {"testMethod3", "/tests/resources/users"},
+                {"testMethod3", "/tests/resources/testMethod3"},
                 {"testMethod4", "/tests/resources/testMethod4"},
         };
     }
@@ -23,7 +23,7 @@ private Object[][] resourceWithoutApiAnnotation() {
         return new Object[][]{
                 {"testMethod1", "/tests/testMethod1"},
                 {"testMethod2", "/tests/testMethod2"},
-                {"testMethod3", "/tests/users"},
+                {"testMethod3", "/tests/testMethod3"},
                 {"testMethod4", "/tests/testMethod4"},
         };
     }

File: modules/swagger-servlet/src/main/java/io/swagger/servlet/extensions/ServletReaderExtension.java
Patch:
@@ -222,7 +222,7 @@ public String getPath(ReaderContext context, Method method) {
         final String operationPath = apiOperation == null ? null : apiOperation.nickname();
         return PathUtils.collectPath(context.getParentPath(),
                 apiAnnotation == null ? null : apiAnnotation.value(),
-                StringUtils.defaultIfBlank(operationPath, method.getName()));
+                method.getName());
     }
 
     @Override

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/ReaderTest.java
Patch:
@@ -43,12 +43,12 @@ public void readerTest1() {
 
         Assert.assertEquals(swagger.getHost(), "host");
         Assert.assertEquals(swagger.getBasePath(), "/api");
-        Assert.assertNotNull(swagger.getPath("/resources/users"));
+        Assert.assertNotNull(swagger.getPath("/resources/testMethod3"));
         Assert.assertNotNull(swagger.getDefinitions().get("SampleData"));
         Assert.assertEquals(swagger.getExternalDocs().getDescription(), "docs");
         Assert.assertEquals(swagger.getExternalDocs().getUrl(), "url_to_docs");
 
-        Path path = swagger.getPath("/resources/users");
+        Path path = swagger.getPath("/resources/testMethod3");
         Assert.assertNotNull(path);
         Operation get = path.getGet();
         Assert.assertNotNull( get );

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/extensions/PathGetterTest.java
Patch:
@@ -13,7 +13,7 @@ private Object[][] resourceWithAnnotations() {
         return new Object[][]{
                 {"testMethod1", "/tests/resources/testMethod1"},
                 {"testMethod2", "/tests/resources/testMethod2"},
-                {"testMethod3", "/tests/resources/users"},
+                {"testMethod3", "/tests/resources/testMethod3"},
                 {"testMethod4", "/tests/resources/testMethod4"},
         };
     }
@@ -23,7 +23,7 @@ private Object[][] resourceWithoutApiAnnotation() {
         return new Object[][]{
                 {"testMethod1", "/tests/testMethod1"},
                 {"testMethod2", "/tests/testMethod2"},
-                {"testMethod3", "/tests/users"},
+                {"testMethod3", "/tests/testMethod3"},
                 {"testMethod4", "/tests/testMethod4"},
         };
     }

File: modules/swagger-jaxrs/src/test/java/io/swagger/SimpleReaderTest.java
Patch:
@@ -49,9 +49,7 @@
 public class SimpleReaderTest {
 
     private Swagger getSwagger(Class<?> cls) {
-        DefaultReaderConfig config = new DefaultReaderConfig();
-        config.setScanAllResources(true);
-        return new Reader(new Swagger(), config).read(cls);
+        return new Reader(new Swagger()).read(cls);
     }
 
     private Map<String, Response> getGetResponses(Swagger swagger, String path) {

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/AnnotatedInterfaceImpl.java
Patch:
@@ -3,6 +3,8 @@
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 
+import javax.ws.rs.Path;
+
 @Api(value = "/v1/users", tags = "annotatedInterface")
 public class AnnotatedInterfaceImpl implements AnnotatedInterface {
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ApiConsumesProducesResource.java
Patch:
@@ -13,6 +13,7 @@
 import javax.ws.rs.core.Response;
 
 @Api(value = "/basic", description = "Basic resource", produces = MediaType.APPLICATION_ATOM_XML, consumes = MediaType.APPLICATION_XHTML_XML)
+@Path("/")
 public class ApiConsumesProducesResource {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BothConsumesProducesResource.java
Patch:
@@ -15,6 +15,7 @@
 @Api(value = "/basic", description = "Basic resource", produces = MediaType.APPLICATION_ATOM_XML, consumes = MediaType.APPLICATION_XHTML_XML)
 @Produces({"application/xml"})
 @Consumes({"application/yaml"})
+@Path("/")
 public class BothConsumesProducesResource {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ClassWithExamplePost.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.ArrayList;
 
 @Api("/external/info/")
+@Path("/")
 public class ClassWithExamplePost {
     @ApiOperation(value = "test")
     @POST

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/HiddenParametersResource.java
Patch:
@@ -15,6 +15,7 @@
 
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
+@Path("/")
 public class HiddenParametersResource {
     @GET
     @Path("/all-hidden/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/NoConsumesProducesResource.java
Patch:
@@ -13,6 +13,7 @@
 import javax.ws.rs.core.Response;
 
 @Api(value = "/basic", description = "Basic resource")
+@Path("/")
 public class NoConsumesProducesResource {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/RegexPathParamResource.java
Patch:
@@ -10,6 +10,7 @@
 import javax.ws.rs.core.Response;
 
 @Api(value = "/external/info/")
+@Path("/")
 public class RegexPathParamResource {
     @GET
     @ApiOperation(value = "this", tags = "tag1")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithApiOperationCode.java
Patch:
@@ -14,6 +14,7 @@
 import javax.ws.rs.core.Response;
 
 @Api
+@Path("/")
 public class ResourceWithApiOperationCode {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithApiResponseResponseContainer.java
Patch:
@@ -16,6 +16,7 @@
 import javax.ws.rs.core.Response;
 
 @Api
+@Path("/")
 public class ResourceWithApiResponseResponseContainer {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithBodyParams.java
Patch:
@@ -9,6 +9,7 @@
 import javax.ws.rs.Path;
 
 @Api
+@Path("/")
 public class ResourceWithBodyParams {
 
     @POST

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithCustomException.java
Patch:
@@ -17,6 +17,7 @@
 
 @Api(value = "/basicWithException", description = "Basic resource")
 @Produces({"application/xml"})
+@Path("/")
 public class ResourceWithCustomException {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithDeprecatedMethod.java
Patch:
@@ -7,6 +7,7 @@
 import javax.ws.rs.Path;
 
 @Api
+@Path("/")
 public class ResourceWithDeprecatedMethod {
 
     @Deprecated

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithEnums.java
Patch:
@@ -22,6 +22,7 @@
 
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
+@Path("/")
 public class ResourceWithEnums {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitFileParam.java
Patch:
@@ -9,6 +9,7 @@
 import javax.ws.rs.Path;
 
 @Api
+@Path("/")
 public class ResourceWithImplicitFileParam {
     @POST
     @Path("/testString")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitParams.java
Patch:
@@ -9,6 +9,7 @@
 import javax.ws.rs.Path;
 
 @Api
+@Path("/")
 public class ResourceWithImplicitParams {
 
     @POST

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithInnerClass.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.List;
 
 @Api("/basic")
+@Path("/")
 public class ResourceWithInnerClass {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithMapReturnValue.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 @Api(value = "/basic", description = "Basic resource")
+@Path("/")
 public class ResourceWithMapReturnValue {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithRanges.java
Patch:
@@ -17,6 +17,7 @@
 
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
+@Path("/")
 public class ResourceWithRanges {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithReferences.java
Patch:
@@ -13,6 +13,7 @@
 import javax.ws.rs.core.Response;
 
 @Api(value = "/basic")
+@Path("/")
 public class ResourceWithReferences {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithResponse.java
Patch:
@@ -15,6 +15,7 @@
 import javax.ws.rs.core.Response;
 
 @Api(value = "/basic", description = "Basic resource")
+@Path("/")
 public class ResourceWithResponse {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithResponseHeaders.java
Patch:
@@ -20,6 +20,7 @@
 
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
+@Path("/")
 public class ResourceWithResponseHeaders {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithTypedResponses.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.UUID;
 
 @Api(value = "/root")
+@Path("/")
 public class ResourceWithTypedResponses {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithValidation.java
Patch:
@@ -16,6 +16,7 @@
 
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
+@Path("/")
 public class ResourceWithValidation {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithVoidReturns.java
Patch:
@@ -16,6 +16,7 @@
 import javax.ws.rs.core.Response;
 
 @Api(value = "/basic", description = "Basic resource")
+@Path("/")
 public class ResourceWithVoidReturns {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/RsConsumesProducesResource.java
Patch:
@@ -15,6 +15,7 @@
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
 @Consumes({"application/yaml"})
+@Path("/")
 public class RsConsumesProducesResource {
 
     @GET

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleResource.java
Patch:
@@ -20,6 +20,7 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
 
+@Path("/")
 @Api(value = "/basic", description = "Basic resource")
 @Produces({"application/xml"})
 public class SimpleResource {

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleResourceWithoutAnnotations.java
Patch:
@@ -16,6 +16,7 @@
 import javax.ws.rs.core.Response;
 
 @Produces({"application/xml"})
+@Path("/")
 public class SimpleResourceWithoutAnnotations {
     @GET
     @Path("/{id}")

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleSelfReferencingSubResource.java
Patch:
@@ -6,6 +6,7 @@
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 
+@Path("/")
 public class SimpleSelfReferencingSubResource {
 
     @Path("/sub")

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithBeanParams.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 @Api(value = "/basic", description = "Basic resource")
+@Path("/")
 public class ResourceWithBeanParams {
     @GET
     @Path("/{id}")

File: modules/swagger-models/src/main/java/io/swagger/models/properties/AbstractProperty.java
Patch:
@@ -11,7 +11,7 @@ public abstract class AbstractProperty implements Property {
     String name;
     String type;
     String format;
-    String example;
+    Object example;
     Xml xml;
     boolean required;
     Integer position;
@@ -44,11 +44,11 @@ public void setName(String name) {
         this.name = name;
     }
 
-    public String getExample() {
+    public Object getExample() {
         return example;
     }
 
-    public void setExample(String example) {
+    public void setExample(Object example) {
         this.example = example;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -39,7 +39,7 @@ public DoubleProperty xml(Xml xml) {
     }
 
     public DoubleProperty example(Double example) {
-        this.setExample(String.valueOf(example));
+        this.example = example;
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -39,7 +39,7 @@ public LongProperty xml(Xml xml) {
     }
 
     public LongProperty example(Long example) {
-        this.setExample(String.valueOf(example));
+        this.example = example;
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/Property.java
Patch:
@@ -32,9 +32,9 @@ public interface Property {
 
     void setRequired(boolean required);
 
-    String getExample();
+    Object getExample();
 
-    void setExample(String example);
+    void setExample(Object example);
 
     Boolean getReadOnly();
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/AbstractProperty.java
Patch:
@@ -11,7 +11,7 @@ public abstract class AbstractProperty implements Property {
     String name;
     String type;
     String format;
-    String example;
+    Object example;
     Xml xml;
     boolean required;
     Integer position;
@@ -44,11 +44,11 @@ public void setName(String name) {
         this.name = name;
     }
 
-    public String getExample() {
+    public Object getExample() {
         return example;
     }
 
-    public void setExample(String example) {
+    public void setExample(Object example) {
         this.example = example;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java
Patch:
@@ -39,7 +39,7 @@ public DoubleProperty xml(Xml xml) {
     }
 
     public DoubleProperty example(Double example) {
-        this.setExample(String.valueOf(example));
+        this.example = example;
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java
Patch:
@@ -39,7 +39,7 @@ public LongProperty xml(Xml xml) {
     }
 
     public LongProperty example(Long example) {
-        this.setExample(String.valueOf(example));
+        this.example = example;
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/Property.java
Patch:
@@ -32,9 +32,9 @@ public interface Property {
 
     void setRequired(boolean required);
 
-    String getExample();
+    Object getExample();
 
-    void setExample(String example);
+    void setExample(Object example);
 
     Boolean getReadOnly();
 

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/BeanConfig.java
Patch:
@@ -254,8 +254,7 @@ public Set<Class<?>> classes() {
         config.setScanners(new ResourcesScanner(), new TypeAnnotationsScanner(), new SubTypesScanner());
 
         final Reflections reflections = new Reflections(config);
-        Set<Class<?>> classes = reflections.getTypesAnnotatedWith(Api.class);
-        classes.addAll(reflections.getTypesAnnotatedWith(javax.ws.rs.Path.class));
+        Set<Class<?>> classes = reflections.getTypesAnnotatedWith(javax.ws.rs.Path.class);
         classes.addAll(reflections.getTypesAnnotatedWith(SwaggerDefinition.class));
 
         Set<Class<?>> output = new HashSet<Class<?>>();

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithSubResources.java
Patch:
@@ -14,7 +14,7 @@ public class ResourceWithSubResources {
             response = Employee.class,
             responseContainer = "list",
             tags = "Employees")
-    @GET
+    @Path("{id}")
     public SubResource getTest() {
         return new SubResource();
     }

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResource.java
Patch:
@@ -9,7 +9,7 @@
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
 
-@Api(hidden = true)
+@Api
 public class SubResource {
     @ApiOperation(value = "gets an object by ID", tags = "Employees", response = Employee.class, responseContainer = "list")
     @GET

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/BeanConfig.java
Patch:
@@ -254,8 +254,7 @@ public Set<Class<?>> classes() {
         config.setScanners(new ResourcesScanner(), new TypeAnnotationsScanner(), new SubTypesScanner());
 
         final Reflections reflections = new Reflections(config);
-        Set<Class<?>> classes = reflections.getTypesAnnotatedWith(Api.class);
-        classes.addAll(reflections.getTypesAnnotatedWith(javax.ws.rs.Path.class));
+        Set<Class<?>> classes = reflections.getTypesAnnotatedWith(javax.ws.rs.Path.class);
         classes.addAll(reflections.getTypesAnnotatedWith(SwaggerDefinition.class));
 
         Set<Class<?>> output = new HashSet<Class<?>>();

File: modules/swagger-jaxrs/src/test/java/io/swagger/SimpleReaderTest.java
Patch:
@@ -46,7 +46,7 @@
 import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
 
-public class SimpleScannerTest {
+public class SimpleReaderTest {
 
     private Swagger getSwagger(Class<?> cls) {
         return new Reader(new Swagger()).read(cls);

File: modules/swagger-jaxrs/src/test/java/com/subresourcesTest/ChildResource.java
Patch:
@@ -1,4 +1,4 @@
-package com.my.project.subresourcesTest;
+package com.subresourcesTest;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/com/subresourcesTest/RootResource.java
Patch:
@@ -1,4 +1,4 @@
-package com.my.project.subresourcesTest;
+package com.subresourcesTest;
 
 import io.swagger.annotations.Api;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/BeanConfigTest.java
Patch:
@@ -1,6 +1,6 @@
 package io.swagger;
 
-import com.my.project.subresourcesTest.RootResource;
+import com.subresourcesTest.RootResource;
 import io.swagger.jaxrs.config.BeanConfig;
 import io.swagger.models.Scheme;
 import io.swagger.models.Swagger;
@@ -54,7 +54,7 @@ public void shouldDeepScanPakagesPer1011() {
     @Test
     public void testBeanConfigOnlyScansResourcesAnnoatedWithPaths() throws Exception {
         BeanConfig bc = new BeanConfig();
-        bc.setResourcePackage("com.my.project.subresourcesTest");
+        bc.setResourcePackage("com.subresourcesTest");
 
         Set<Class<?>> classes = bc.classes();
 

File: modules/swagger-core/src/main/java/io/swagger/config/SwaggerConfig.java
Patch:
@@ -3,6 +3,7 @@
 import io.swagger.models.Swagger;
 
 public interface SwaggerConfig {
+
     Swagger configure(Swagger swagger);
 
     String getFilterClass();

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/DefaultJaxrsConfig.java
Patch:
@@ -8,8 +8,9 @@ public class DefaultJaxrsConfig extends HttpServlet {
     public void init(ServletConfig servletConfig) throws javax.servlet.ServletException {
         super.init(servletConfig);
 
-        servletConfig.getServletContext().setAttribute("reader", new WebXMLReader(servletConfig));
-        servletConfig.getServletContext().setAttribute("scanner", new DefaultJaxrsScanner());
+        new SwaggerContextService().withServletConfig(servletConfig).initConfig().initScanner();
+
         ReaderConfigUtils.initReaderConfig(servletConfig);
     }
+
 }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderConfigUtils.java
Patch:
@@ -33,6 +33,7 @@ public static void initReaderConfig(ServletConfig config) {
     }
 
     public static ReaderConfig getReaderConfig(ServletContext context) {
+        if (context == null) return null;
         final Object attr = context.getAttribute(getAttributeName());
         if (attr instanceof ReaderConfig) {
             return (ReaderConfig) attr;

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/AbstractSerializableParameter.java
Patch:
@@ -185,7 +185,7 @@ public void setDefaultValue(String defaultValue) {
     }
 
     public Object getDefault() {
-        if (defaultValue == null || "".equals(defaultValue)) {
+        if (defaultValue == null || defaultValue.isEmpty()) {
             return null;
         }
         try {

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/AbstractSerializableParameter.java
Patch:
@@ -185,7 +185,7 @@ public void setDefaultValue(String defaultValue) {
     }
 
     public Object getDefault() {
-        if (defaultValue == null) {
+        if (defaultValue == null || "".equals(defaultValue)) {
             return null;
         }
         try {

File: modules/swagger-models/src/main/java/io/swagger/models/Swagger.java
Patch:
@@ -391,7 +391,7 @@ public Map<String, Object> getVendorExtensions() {
     @JsonAnySetter
     public void setVendorExtension(String name, Object value) {
         if (name.startsWith("x-")) {
-            vendorExtensions.put(name, value);
+            vendorExtension(name, value);
         }
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/StringProperty.java
Patch:
@@ -17,7 +17,6 @@ public class StringProperty extends AbstractProperty implements Property {
     protected String _default;
 
     public enum Format {
-        BYTE("byte"),
         URI("uri"),
         URL("url");
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/StringProperty.java
Patch:
@@ -17,7 +17,6 @@ public class StringProperty extends AbstractProperty implements Property {
     protected String _default;
 
     public enum Format {
-        BYTE("byte"),
         URI("uri"),
         URL("url");
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java
Patch:
@@ -95,6 +95,7 @@ public enum PropertyId {
         TYPE("type"),
         FORMAT("format"),
         READ_ONLY("readOnly"),
+        REQUIRED("required"),
         VENDOR_EXTENSIONS("vendorExtensions");
 
         private String propertyName;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java
Patch:
@@ -95,6 +95,7 @@ public enum PropertyId {
         TYPE("type"),
         FORMAT("format"),
         READ_ONLY("readOnly"),
+        REQUIRED("required"),
         VENDOR_EXTENSIONS("vendorExtensions");
 
         private String propertyName;

File: modules/swagger-servlet/src/main/java/io/swagger/servlet/Reader.java
Patch:
@@ -93,6 +93,7 @@ private void read(ReaderContext context) {
                     extension.applyTags(context, operation, method);
                     extension.applyResponses(context, operation, method);
                     extension.applyImplicitParameters(context, operation, method);
+                    extension.applyExtensions( context, operation, method );
                     for (int i = 0; i < genericParameterTypes.length; i++) {
                         extension.applyParameters(context, operation, genericParameterTypes[i], paramAnnotations[i]);
                     }

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @see ApiResponse
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiResponses {
     /**

File: modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest.java
Patch:
@@ -280,6 +280,6 @@ public void testPrimitiveModel() throws Exception {
         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);
 
         assertNotNull(model.getEnum());
-        assertTrue(model.getEnum().size() == 2);
+        assertTrue(model.getEnum().size() == 3);
     }
 }
\ No newline at end of file

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -67,9 +67,6 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, T
                     p.setType(param.getDataType());
                 }
             }
-            if (StringUtils.isNotEmpty(param.getExample())) {
-                p.setType(param.getExample());
-            }
             if (helper.getMinItems() != null) {
                 p.setMinItems(helper.getMinItems());
             }

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitFileParam.java
Patch:
@@ -13,7 +13,7 @@ public class ResourceWithImplicitFileParam {
     @POST
     @Path("/testString")
     @ApiImplicitParams({
-            @ApiImplicitParam(name = "sort", paramType = "form", dataType = "java.io.File", required = false, value = "file to upload")
+      @ApiImplicitParam(name = "sort", paramType = "form", dataType = "java.io.File", required = false, value = "file to upload")
     })
     @ApiOperation("Test operation with implicit parameters")
     public void testImplicitFileParam() {

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -67,9 +67,6 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, T
                     p.setType(param.getDataType());
                 }
             }
-            if (StringUtils.isNotEmpty(param.getDataType())) {
-                p.setType(param.getDataType());
-            }
             if (helper.getMinItems() != null) {
                 p.setMinItems(helper.getMinItems());
             }

File: modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java
Patch:
@@ -67,8 +67,8 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, T
                     p.setType(param.getDataType());
                 }
             }
-            if (StringUtils.isNotEmpty(param.getExample())) {
-                p.setType(param.getExample());
+            if (StringUtils.isNotEmpty(param.getDataType())) {
+                p.setType(param.getDataType());
             }
             if (helper.getMinItems() != null) {
                 p.setMinItems(helper.getMinItems());

File: modules/swagger-models/src/main/java/io/swagger/models/Swagger.java
Patch:
@@ -391,7 +391,7 @@ public Map<String, Object> getVendorExtensions() {
     @JsonAnySetter
     public void setVendorExtension(String name, Object value) {
         if (name.startsWith("x-")) {
-            vendorExtensions.put(name, value);
+            vendorExtension(name, value);
         }
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/SerializableParameter.java
Patch:
@@ -69,4 +69,4 @@ public interface SerializableParameter extends Parameter {
 
 	void setMinItems(Integer minItems);
 
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/AbstractSerializableParameter.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 
 @JsonPropertyOrder({"name", "in", "description", "required", "type", "items", "collectionFormat", "default",
-        "maximum", "exclusiveMaximum", "minimum", "exclusiveMinimum", "maxItems", "minItems", "maxLength","minLength","pattern","uniqueItems","multipleOf"})
+        "maximum", "exclusiveMaximum", "minimum", "exclusiveMinimum", "maxLength", "minLength", "pattern","maxItems","minItems","uniqueItems","multipleOf"})
 public abstract class AbstractSerializableParameter<T extends AbstractSerializableParameter<T>> extends AbstractParameter implements SerializableParameter {
     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSerializableParameter.class);
     protected String type;

File: modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ResourceWithAnnotations.java
Patch:
@@ -19,8 +19,6 @@
 import io.swagger.annotations.Tag;
 import io.swagger.servlet.models.SampleData;
 
-import javax.ws.rs.Path;
-
 @SwaggerDefinition(
         info = @Info(
                 description = "Test description",

File: modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java
Patch:
@@ -145,7 +145,7 @@ Property propertyFromNode(JsonNode node) {
 
         if (ObjectProperty.isType(type) || node.get("properties") != null) {
             detailNode = node.get("additionalProperties");
-            if (detailNode != null) {
+            if (detailNode != null && detailNode.getNodeType().equals(JsonNodeType.OBJECT)) {
                 Property items = propertyFromNode(detailNode);
                 if (items != null) {
                     MapProperty mapProperty = new MapProperty(items).description(description);

File: modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java
Patch:
@@ -145,7 +145,7 @@ public static boolean isConstructorCompatible(Constructor<?> constructor) {
      * @return list of Fields
      */
     public static List<Field> getDeclaredFields(Class<?> cls) {
-        if (cls.equals(Object.class)) {
+        if (cls == null || Object.class.equals(cls)) {
             return Collections.emptyList();
         }
         final List<Field> fields = new ArrayList<Field>();

File: modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java
Patch:
@@ -145,7 +145,7 @@ public static boolean isConstructorCompatible(Constructor<?> constructor) {
      * @return list of Fields
      */
     public static List<Field> getDeclaredFields(Class<?> cls) {
-        if (cls.equals(Object.class)) {
+        if (cls == null || Object.class.equals(cls)) {
             return Collections.emptyList();
         }
         final List<Field> fields = new ArrayList<Field>();

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -714,7 +714,7 @@ private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globa
                 return null;
             }
             if (!"".equals(apiOperation.nickname())) {
-                operationId = method.getName();
+                operationId = apiOperation.nickname();
             }
 
             defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -139,7 +139,8 @@ public Property resolveProperty(JavaType propType,
     }
 
     private boolean _isOptionalType(JavaType propType) {
-        return "com.google.common.base.Optional".equals(propType.getRawClass().getCanonicalName());
+        return Arrays.asList("com.google.common.base.Optional", "java.util.Optional")
+                .contains(propType.getRawClass().getCanonicalName());
     }
 
     public Model resolve(Type type, ModelConverterContext context, Iterator<ModelConverter> next) {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/ArrayProperty.java
Patch:
@@ -55,7 +55,7 @@ public Boolean getUniqueItems() {
     }
 
     public void setUniqueItems(Boolean uniqueItems) {
-        this.uniqueItems = uniqueItems ? true : null;
+        this.uniqueItems = Boolean.TRUE.equals(uniqueItems) ? true : null;
     }
 
     public Integer getMaxItems() {

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -201,9 +201,9 @@ public ObjectProperty createProperty() {
         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);
 
         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();
-        addKeys(externalClasses, DATE, "org.joda.time.LocalDate");
+        addKeys(externalClasses, DATE, "org.joda.time.LocalDate", "java.time.LocalDate");
         addKeys(externalClasses, DATE_TIME, "org.joda.time.DateTime", "org.joda.time.ReadableDateTime",
-                "javax.xml.datatype.XMLGregorianCalendar");
+                "javax.xml.datatype.XMLGregorianCalendar", "java.time.LocalDateTime");
         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);
 
         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);

File: modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java
Patch:
@@ -139,7 +139,8 @@ public Property resolveProperty(JavaType propType,
     }
 
     private boolean _isOptionalType(JavaType propType) {
-        return "com.google.common.base.Optional".equals(propType.getRawClass().getCanonicalName());
+        return Arrays.asList("com.google.common.base.Optional", "java.util.Optional")
+                .contains(propType.getRawClass().getCanonicalName());
     }
 
     public Model resolve(Type type, ModelConverterContext context, Iterator<ModelConverter> next) {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/ArrayProperty.java
Patch:
@@ -53,7 +53,7 @@ public Boolean getUniqueItems() {
     }
 
     public void setUniqueItems(Boolean uniqueItems) {
-        this.uniqueItems = uniqueItems ? true : null;
+        this.uniqueItems = Boolean.TRUE.equals(uniqueItems) ? true : null;
     }
 
     @Override

File: modules/swagger-core/src/main/java/io/swagger/util/PrimitiveType.java
Patch:
@@ -201,9 +201,9 @@ public ObjectProperty createProperty() {
         BASE_CLASSES = Collections.unmodifiableMap(baseClasses);
 
         final Map<String, PrimitiveType> externalClasses = new HashMap<String, PrimitiveType>();
-        addKeys(externalClasses, DATE, "org.joda.time.LocalDate");
+        addKeys(externalClasses, DATE, "org.joda.time.LocalDate", "java.time.LocalDate");
         addKeys(externalClasses, DATE_TIME, "org.joda.time.DateTime", "org.joda.time.ReadableDateTime",
-                "javax.xml.datatype.XMLGregorianCalendar");
+                "javax.xml.datatype.XMLGregorianCalendar", "java.time.LocalDateTime");
         EXTERNAL_CLASSES = Collections.unmodifiableMap(externalClasses);
 
         final Map<String, PrimitiveType> names = new TreeMap<String, PrimitiveType>(String.CASE_INSENSITIVE_ORDER);

File: modules/swagger-core/src/test/java/io/swagger/reflection/IParent.java
Patch:
@@ -1,5 +1,8 @@
 package io.swagger.reflection;
 
+import javax.ws.rs.Path;
+
+@Path("parentInterfacePath")
 public interface IParent<T extends Number> {
 
     public String parametrizedMethod2(T arg);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -244,7 +244,7 @@ private Swagger read(Class<?> cls, String parentPath, String parentMethod, boole
             globalParameters.addAll(ReaderUtils.collectFieldParameters(cls, swagger));
 
             // parse the method
-            final javax.ws.rs.Path apiPath = cls.getAnnotation(javax.ws.rs.Path.class);
+            final javax.ws.rs.Path apiPath = ReflectionUtils.getAnnotation(cls, javax.ws.rs.Path.class);
             Method methods[] = cls.getMethods();
             for (Method method : methods) {
                 if (ReflectionUtils.isOverriddenMethod(method, cls)) {

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -80,6 +80,8 @@ public void scanConsumesProducesValuesWithRsClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}").getProduces().get(0), TEXT_PLAIN);
         assertEquals(getPut(swagger, "/{id}/value").getConsumes().get(0), APPLICATION_XML);
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
+        assertEquals(getPut(swagger, "/split").getProduces(), Arrays.asList("image/jpeg",  "image/gif", "image/png"));
+        assertEquals(getPut(swagger, "/split").getConsumes(), Arrays.asList("image/jpeg",  "image/gif", "image/png"));
     }
 
     @Test(description = "scan consumes and produces values with both class level annotations")

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -80,6 +80,8 @@ public void scanConsumesProducesValuesWithRsClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}").getProduces().get(0), TEXT_PLAIN);
         assertEquals(getPut(swagger, "/{id}/value").getConsumes().get(0), APPLICATION_XML);
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
+        assertEquals(getPut(swagger, "/split").getProduces(), Arrays.asList("image/jpeg",  "image/gif", "image/png"));
+        assertEquals(getPut(swagger, "/split").getConsumes(), Arrays.asList("image/jpeg",  "image/gif", "image/png"));
     }
 
     @Test(description = "scan consumes and produces values with both class level annotations")

File: modules/swagger-core/src/test/java/io/swagger/reflection/IParent.java
Patch:
@@ -1,5 +1,8 @@
 package io.swagger.reflection;
 
+import javax.ws.rs.Path;
+
+@Path("parentInterfacePath")
 public interface IParent<T extends Number> {
 
     public String parametrizedMethod2(T arg);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -244,7 +244,7 @@ private Swagger read(Class<?> cls, String parentPath, String parentMethod, boole
             globalParameters.addAll(ReaderUtils.collectFieldParameters(cls, swagger));
 
             // parse the method
-            final javax.ws.rs.Path apiPath = cls.getAnnotation(javax.ws.rs.Path.class);
+            final javax.ws.rs.Path apiPath = ReflectionUtils.getAnnotation(cls, javax.ws.rs.Path.class);
             Method methods[] = cls.getMethods();
             for (Method method : methods) {
                 if (ReflectionUtils.isOverriddenMethod(method, cls)) {

File: modules/swagger-models/src/main/java/io/swagger/models/RefModel.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.models.properties.Property;
 import io.swagger.models.refs.GenericRef;
-import io.swagger.models.refs.RefConstants;
 import io.swagger.models.refs.RefFormat;
 import io.swagger.models.refs.RefType;
 
@@ -24,7 +23,7 @@ public RefModel(String ref) {
     }
 
     public RefModel asDefault(String ref) {
-        this.set$ref(RefConstants.INTERNAL_DEFINITION_PREFIX + ref);
+        this.set$ref(RefType.DEFINITION.getInternalPrefix() + ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/RefParameter.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.models.refs.GenericRef;
-import io.swagger.models.refs.RefConstants;
 import io.swagger.models.refs.RefFormat;
 import io.swagger.models.refs.RefType;
 
@@ -22,7 +21,7 @@ public static boolean isType(String type, String format) {
     }
 
     public RefParameter asDefault(String ref) {
-        this.set$ref(RefConstants.INTERNAL_PARAMETER_PREFIX + ref);
+        this.set$ref(RefType.PARAMETER.getInternalPrefix() + ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.models.refs.GenericRef;
-import io.swagger.models.refs.RefConstants;
 import io.swagger.models.refs.RefFormat;
 import io.swagger.models.refs.RefType;
 
@@ -28,7 +27,7 @@ public static boolean isType(String type, String format) {
     }
 
     public RefProperty asDefault(String ref) {
-        this.set$ref(RefConstants.INTERNAL_DEFINITION_PREFIX + ref);
+        this.set$ref(RefType.DEFINITION.getInternalPrefix() + ref);
         return this;
     }
 

File: modules/swagger-core/src/test/java/io/swagger/jackson/SimpleGenerationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.fail;
-import static org.testng.AssertJUnit.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
@@ -20,7 +20,6 @@
 import java.util.Arrays;
 import java.util.Date;
 import java.util.Map;
-import java.util.Set;
 
 public class SimpleGenerationTest extends SwaggerTestBase {
     private final ModelResolver modelResolver = new ModelResolver(new ObjectMapper());

File: modules/swagger-core/src/test/java/io/swagger/jackson/XMLInfoTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
-import static org.testng.AssertJUnit.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import org.testng.annotations.Test;

File: modules/swagger-core/src/test/java/io/swagger/jackson/SimpleGenerationTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.fail;
-import static org.testng.AssertJUnit.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
@@ -20,7 +20,6 @@
 import java.util.Arrays;
 import java.util.Date;
 import java.util.Map;
-import java.util.Set;
 
 public class SimpleGenerationTest extends SwaggerTestBase {
     private final ModelResolver modelResolver = new ModelResolver(new ObjectMapper());

File: modules/swagger-core/src/test/java/io/swagger/jackson/XMLInfoTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
-import static org.testng.AssertJUnit.assertEquals;
+import static org.testng.Assert.assertEquals;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import org.testng.annotations.Test;

File: modules/swagger-jaxrs/src/test/java/io/swagger/PostParamTest.java
Patch:
@@ -13,10 +13,10 @@
 import io.swagger.resources.PostParamResource;
 import org.testng.annotations.Test;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
+import static org.testng.Assert.assertNull;
+import static org.testng.Assert.assertTrue;
 
 public class PostParamTest {
     private static final String BODY = "body";

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -112,7 +112,7 @@ public void scanConsumesProducesValuesWithoutClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
     }
 
-    @org.junit.Test//(description = "scan class level and field level annotations")
+    @Test(description = "scan class level and field level annotations")
     public void scanClassAndFieldLevelAnnotations() {
         Swagger swagger = getSwagger(ResourceWithKnownInjections.class);
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/ResourceTest1343.java
Patch:
@@ -14,9 +14,9 @@ private Swagger getSwagger(Class<?> resource) {
         return reader.read(resource);
     }
 
-    @org.junit.Test///(description = "scan resource 1343")
+    @Test(description = "scan resource 1343")
     public void scanResource1343() {
         Swagger swagger = getSwagger(Resource1343.class);
         Json.prettyPrint(swagger);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReaderUtils.java
Patch:
@@ -82,7 +82,7 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Swagger
      */
     public static List<Parameter> collectFieldParameters(Class<?> cls, Swagger swagger) {
         final List<Parameter> parameters = new ArrayList<Parameter>();
-        for (Field field : cls.getDeclaredFields()) {
+        for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
             final List<Annotation> annotations = Arrays.asList(field.getAnnotations());
             final Type genericType = field.getGenericType();
             for (Parameter parameter : collectParameters(genericType, annotations)) {

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReaderUtils.java
Patch:
@@ -82,7 +82,7 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Swagger
      */
     public static List<Parameter> collectFieldParameters(Class<?> cls, Swagger swagger) {
         final List<Parameter> parameters = new ArrayList<Parameter>();
-        for (Field field : cls.getDeclaredFields()) {
+        for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
             final List<Annotation> annotations = Arrays.asList(field.getAnnotations());
             final Type genericType = field.getGenericType();
             for (Parameter parameter : collectParameters(genericType, annotations)) {

File: modules/swagger-models/src/main/java/io/swagger/models/properties/BaseIntegerProperty.java
Patch:
@@ -1,8 +1,8 @@
 package io.swagger.models.properties;
 
 /**
- * The <code>BaseIntegerProperty</code> class defines property for integers
- * without specific format.
+ * The <code>BaseIntegerProperty</code> class defines property for integers without specific format, or with a custom
+ * format.
  */
 public class BaseIntegerProperty extends AbstractNumericProperty {
     public static final String TYPE = "integer";
@@ -17,6 +17,6 @@ public BaseIntegerProperty(String format) {
     }
 
     public static boolean isType(String type, String format) {
-        return TYPE.equals(type) && format == null;
+        return TYPE.equals(type);
     }
 }

File: modules/swagger-models/src/main/java/io/swagger/models/properties/DecimalProperty.java
Patch:
@@ -2,6 +2,9 @@
 
 import io.swagger.models.Xml;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class DecimalProperty extends AbstractNumericProperty {
     public static final String TYPE = "number";
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/PostParamTest.java
Patch:
@@ -13,10 +13,10 @@
 import io.swagger.resources.PostParamResource;
 import org.testng.annotations.Test;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
+import static org.testng.Assert.assertNull;
+import static org.testng.Assert.assertTrue;
 
 public class PostParamTest {
     private static final String BODY = "body";

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -111,7 +111,7 @@ public void scanConsumesProducesValuesWithoutClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
     }
 
-    @org.junit.Test//(description = "scan class level and field level annotations")
+    @Test(description = "scan class level and field level annotations")
     public void scanClassAndFieldLevelAnnotations() {
         Swagger swagger = getSwagger(ResourceWithKnownInjections.class);
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/ResourceTest1343.java
Patch:
@@ -14,9 +14,9 @@ private Swagger getSwagger(Class<?> resource) {
         return reader.read(resource);
     }
 
-    @org.junit.Test///(description = "scan resource 1343")
+    @Test(description = "scan resource 1343")
     public void scanResource1343() {
         Swagger swagger = getSwagger(Resource1343.class);
         Json.prettyPrint(swagger);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs/src/test/java/io/swagger/PostParamTest.java
Patch:
@@ -13,10 +13,10 @@
 import io.swagger.resources.PostParamResource;
 import org.testng.annotations.Test;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
+import static org.testng.Assert.assertNull;
+import static org.testng.Assert.assertTrue;
 
 public class PostParamTest {
     private static final String BODY = "body";

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -111,7 +111,7 @@ public void scanConsumesProducesValuesWithoutClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
     }
 
-    @org.junit.Test//(description = "scan class level and field level annotations")
+    @Test(description = "scan class level and field level annotations")
     public void scanClassAndFieldLevelAnnotations() {
         Swagger swagger = getSwagger(ResourceWithKnownInjections.class);
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/ResourceTest1343.java
Patch:
@@ -14,9 +14,9 @@ private Swagger getSwagger(Class<?> resource) {
         return reader.read(resource);
     }
 
-    @org.junit.Test///(description = "scan resource 1343")
+    @Test(description = "scan resource 1343")
     public void scanResource1343() {
         Swagger swagger = getSwagger(Resource1343.class);
         Json.prettyPrint(swagger);
     }
-}
\ No newline at end of file
+}

File: modules/swagger-core/src/test/java/io/swagger/model/override/OverrideTest.java
Patch:
@@ -27,8 +27,8 @@ public void test() {
 
         final Model model = read.get(GenericModel.class.getSimpleName());
         assertTrue(model.getProperties().containsKey(NAME));
-        assertEquals(model.getProperties().get(NAME).getType(), "string");
+        assertEquals("string", model.getProperties().get(NAME).getType());
         assertTrue(model.getProperties().containsKey(COUNT));
-        assertEquals(model.getProperties().get(COUNT).getType(), "integer");
+        assertEquals("integer", model.getProperties().get(COUNT).getType());
     }
 }

File: modules/swagger-models/src/main/java/io/swagger/models/RefModel.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.models.properties.Property;
 import io.swagger.models.refs.GenericRef;
-import io.swagger.models.refs.RefConstants;
 import io.swagger.models.refs.RefFormat;
 import io.swagger.models.refs.RefType;
 
@@ -24,7 +23,7 @@ public RefModel(String ref) {
     }
 
     public RefModel asDefault(String ref) {
-        this.set$ref(RefConstants.INTERNAL_DEFINITION_PREFIX + ref);
+        this.set$ref(RefType.DEFINITION.getInternalPrefix() + ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/parameters/RefParameter.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.models.refs.GenericRef;
-import io.swagger.models.refs.RefConstants;
 import io.swagger.models.refs.RefFormat;
 import io.swagger.models.refs.RefType;
 
@@ -22,7 +21,7 @@ public static boolean isType(String type, String format) {
     }
 
     public RefParameter asDefault(String ref) {
-        this.set$ref(RefConstants.INTERNAL_PARAMETER_PREFIX + ref);
+        this.set$ref(RefType.PARAMETER.getInternalPrefix() + ref);
         return this;
     }
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/RefProperty.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.models.refs.GenericRef;
-import io.swagger.models.refs.RefConstants;
 import io.swagger.models.refs.RefFormat;
 import io.swagger.models.refs.RefType;
 
@@ -28,7 +27,7 @@ public static boolean isType(String type, String format) {
     }
 
     public RefProperty asDefault(String ref) {
-        this.set$ref(RefConstants.INTERNAL_DEFINITION_PREFIX + ref);
+        this.set$ref(RefType.DEFINITION.getInternalPrefix() + ref);
         return this;
     }
 

File: modules/swagger-core/src/test/java/io/swagger/models/Issue534.java
Patch:
@@ -2,8 +2,6 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import models.SpecialOrderItem;
-
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlElementWrapper;
 import java.util.List;

File: modules/swagger-core/src/test/java/io/swagger/models/SpecialOrderItem.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class SpecialOrderItem {
     public String name;

File: modules/swagger-core/src/test/java/io/swagger/models/Issue534.java
Patch:
@@ -2,8 +2,6 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import models.SpecialOrderItem;
-
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlElementWrapper;
 import java.util.List;

File: modules/swagger-core/src/test/java/io/swagger/models/SpecialOrderItem.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class SpecialOrderItem {
     public String name;

File: modules/swagger-core/src/test/java/io/swagger/jackson/SwaggerTestBase.java
Patch:
@@ -5,9 +5,8 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
-import junit.framework.TestCase;
 
-public abstract class SwaggerTestBase extends TestCase {
+public abstract class SwaggerTestBase{
     static ObjectMapper mapper;
 
     public static ObjectMapper mapper() {

File: modules/swagger-core/src/test/java/io/swagger/jackson/SwaggerTestBase.java
Patch:
@@ -5,9 +5,8 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
-import junit.framework.TestCase;
 
-public abstract class SwaggerTestBase extends TestCase {
+public abstract class SwaggerTestBase{
     static ObjectMapper mapper;
 
     public static ObjectMapper mapper() {

File: modules/swagger-core/src/test/java/io/swagger/filter/InternalModelPropertiesRemoverFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.models.Model;

File: modules/swagger-core/src/test/java/io/swagger/filter/NoGetOperationsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;

File: modules/swagger-core/src/test/java/io/swagger/filter/NoOpOperationsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 

File: modules/swagger-core/src/test/java/io/swagger/filter/NoUserOperationsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;

File: modules/swagger-core/src/test/java/io/swagger/filter/RemoveInternalParamsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;

File: modules/swagger-core/src/test/java/io/swagger/filter/InternalModelPropertiesRemoverFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.models.Model;

File: modules/swagger-core/src/test/java/io/swagger/filter/NoGetOperationsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;

File: modules/swagger-core/src/test/java/io/swagger/filter/NoOpOperationsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 

File: modules/swagger-core/src/test/java/io/swagger/filter/NoUserOperationsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;

File: modules/swagger-core/src/test/java/io/swagger/filter/RemoveInternalParamsFilter.java
Patch:
@@ -1,4 +1,4 @@
-package filter;
+package io.swagger.filter;
 
 import io.swagger.core.filter.AbstractSpecFilter;
 import io.swagger.model.ApiDescription;

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java
Patch:
@@ -1,12 +1,12 @@
 /**
  * Copyright 2015 SmartBear Software
- * <p/>
+ * <p>
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * <p/>
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReaderUtils.java
Patch:
@@ -82,7 +82,7 @@ public static List<Parameter> collectConstructorParameters(Class<?> cls, Swagger
      */
     public static List<Parameter> collectFieldParameters(Class<?> cls, Swagger swagger) {
         final List<Parameter> parameters = new ArrayList<Parameter>();
-        for (Field field : cls.getDeclaredFields()) {
+        for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
             final List<Annotation> annotations = Arrays.asList(field.getAnnotations());
             final Type genericType = field.getGenericType();
             for (Parameter parameter : collectParameters(genericType, annotations)) {

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -111,7 +111,7 @@ public void scanConsumesProducesValuesWithoutClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
     }
 
-    @Test(description = "scan class level and field level annotations")
+    @org.junit.Test//(description = "scan class level and field level annotations")
     public void scanClassAndFieldLevelAnnotations() {
         Swagger swagger = getSwagger(ResourceWithKnownInjections.class);
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -111,7 +111,7 @@ public void scanConsumesProducesValuesWithoutClassLevelAnnotations() {
         assertEquals(getPut(swagger, "/{id}/value").getProduces().get(0), TEXT_PLAIN);
     }
 
-    @Test(description = "scan class level and field level annotations")
+    @org.junit.Test//(description = "scan class level and field level annotations")
     public void scanClassAndFieldLevelAnnotations() {
         Swagger swagger = getSwagger(ResourceWithKnownInjections.class);
 

File: modules/swagger-core/src/test/java/io/swagger/models/Issue534.java
Patch:
@@ -1,7 +1,9 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 
+import models.SpecialOrderItem;
+
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlElementWrapper;
 import java.util.List;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithJAXBAnnotations.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Issue534.java
Patch:
@@ -1,7 +1,9 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 
+import models.SpecialOrderItem;
+
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlElementWrapper;
 import java.util.List;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithJAXBAnnotations.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 

File: modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java
Patch:
@@ -190,6 +190,7 @@ Property propertyFromNode(JsonNode node) {
         args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, getBoolean(node, PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM));
         args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, getBoolean(node, PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM));
         args.put(PropertyBuilder.PropertyId.UNIQUE_ITEMS, getBoolean(node, PropertyBuilder.PropertyId.UNIQUE_ITEMS));
+        args.put(PropertyBuilder.PropertyId.READ_ONLY, getBoolean(node, PropertyBuilder.PropertyId.READ_ONLY));
         args.put(PropertyBuilder.PropertyId.VENDOR_EXTENSIONS, getVendorExtensions(node));
 
         Property output = PropertyBuilder.build(type, format, args);

File: modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
- 
+
 public class ModelSerializerTest {
     private final ObjectMapper m = Json.mapper();
 
@@ -205,7 +205,6 @@ public void deserializeModelWithReadOnlyProperty() throws IOException {
                 "      }\n" +
                 "   }\n" +
                 "}";
-
         final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);
         Property property = model.getProperties().get("id");
         assertTrue(property.getReadOnly());

File: modules/swagger-models/src/main/java/io/swagger/models/properties/Property.java
Patch:
@@ -38,7 +38,7 @@ public interface Property {
 
     Boolean getReadOnly();
 
-    void setReadOnly(Boolean example);
+    void setReadOnly(Boolean readOnly);
 
     Integer getPosition();
 

File: modules/swagger-models/src/main/java/io/swagger/models/properties/Property.java
Patch:
@@ -36,7 +36,7 @@ public interface Property {
 
     Boolean getReadOnly();
 
-    void setReadOnly(Boolean example);
+    void setReadOnly(Boolean readOnly);
 
     Integer getPosition();
 

File: modules/swagger-core/src/test/java/io/swagger/models/Cat.java
Patch:
@@ -1,7 +1,7 @@
 package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
-import models.composition.Pet;
+import io.swagger.models.composition.Pet;
 
 @ApiModel(parent = Pet.class)
 public interface Cat extends Pet {

File: modules/swagger-models/src/main/java/io/swagger/models/Model.java
Patch:
@@ -24,4 +24,6 @@ public interface Model {
     void setReference(String reference);
 
     Object clone();
+
+    Map<String, Object> getVendorExtensions();
 }

File: modules/swagger-core/src/test/java/io/swagger/models/ModelContainingModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/Car.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Cat.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import models.composition.Pet;

File: modules/swagger-core/src/test/java/io/swagger/models/ClientOptInput.java
Patch:
@@ -1,8 +1,7 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import io.swagger.annotations.ApiModelProperty;
-import io.swagger.models.Swagger;
 
 public class ClientOptInput {
     private String opts;

File: modules/swagger-core/src/test/java/io/swagger/models/Department.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -8,6 +8,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
@@ -23,7 +24,7 @@
 @JsonInclude(Include.NON_EMPTY)
 @JsonTypeInfo(include = As.WRAPPER_OBJECT, use = Id.NAME)
 @ApiModel(description = "Represents a Department in the system", value = "department")
-public class Department extends AbstractModel {
+public class Department {
     private String name;
     private String deptCode;
     private Link<Department> parent;

File: modules/swagger-core/src/test/java/io/swagger/models/JacksonReadonlyModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/JodaDateTimeModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import org.joda.time.DateTime;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Link.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -23,7 +23,7 @@
 @JsonInclude(Include.NON_EMPTY)
 @JsonTypeInfo(include = As.WRAPPER_OBJECT, use = Id.NAME)
 @ApiModel(description = "Represents an association to another resource in the system", value = "link")
-public class Link<T> extends AbstractModel {
+public class Link<T> {
     private String href;
     private String rel;
     private String status;

File: modules/swagger-core/src/test/java/io/swagger/models/Manufacturers.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.util.HashSet;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Model1155.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class Model1155 {
     private boolean valid;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelPropertyName.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class ModelPropertyName {
     public boolean is_persistent() {

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithAltPropertyName.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithApiModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithEnumArray.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.util.Set;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithFormattedStrings.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.net.URI;
 import java.net.URL;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithNumbers.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithTuple2.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelContainingModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/Car.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Cat.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import models.composition.Pet;

File: modules/swagger-core/src/test/java/io/swagger/models/ClientOptInput.java
Patch:
@@ -1,8 +1,7 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import io.swagger.annotations.ApiModelProperty;
-import io.swagger.models.Swagger;
 
 public class ClientOptInput {
     private String opts;

File: modules/swagger-core/src/test/java/io/swagger/models/Department.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -8,6 +8,7 @@
 import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
 import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
 import com.fasterxml.jackson.annotation.JsonTypeName;
+
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
@@ -23,7 +24,7 @@
 @JsonInclude(Include.NON_EMPTY)
 @JsonTypeInfo(include = As.WRAPPER_OBJECT, use = Id.NAME)
 @ApiModel(description = "Represents a Department in the system", value = "department")
-public class Department extends AbstractModel {
+public class Department {
     private String name;
     private String deptCode;
     private Link<Department> parent;

File: modules/swagger-core/src/test/java/io/swagger/models/JacksonReadonlyModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/JodaDateTimeModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import org.joda.time.DateTime;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Link.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -23,7 +23,7 @@
 @JsonInclude(Include.NON_EMPTY)
 @JsonTypeInfo(include = As.WRAPPER_OBJECT, use = Id.NAME)
 @ApiModel(description = "Represents an association to another resource in the system", value = "link")
-public class Link<T> extends AbstractModel {
+public class Link<T> {
     private String href;
     private String rel;
     private String status;

File: modules/swagger-core/src/test/java/io/swagger/models/Manufacturers.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.util.HashSet;
 

File: modules/swagger-core/src/test/java/io/swagger/models/Model1155.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class Model1155 {
     private boolean valid;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelPropertyName.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class ModelPropertyName {
     public boolean is_persistent() {

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithAltPropertyName.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithApiModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithEnumArray.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.util.Set;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithFormattedStrings.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.net.URI;
 import java.net.URL;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithNumbers.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithTuple2.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: modules/swagger-core/src/test/java/io/swagger/models/GuavaModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.google.common.base.Optional;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithJaxBDefaultValues.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/AbstractBaseModelWithSubTypes.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/AbstractBaseModelWithoutFields.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 

File: modules/swagger-core/src/test/java/io/swagger/models/composition/ModelWithFieldWithSubTypes.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/Thing1.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/Thing2.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/Thing3.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/GuavaModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import com.google.common.base.Optional;
 

File: modules/swagger-core/src/test/java/io/swagger/models/ModelWithJaxBDefaultValues.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/AbstractBaseModelWithSubTypes.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/AbstractBaseModelWithoutFields.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 

File: modules/swagger-core/src/test/java/io/swagger/models/composition/ModelWithFieldWithSubTypes.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/Thing1.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/Thing2.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-core/src/test/java/io/swagger/models/composition/Thing3.java
Patch:
@@ -1,4 +1,4 @@
-package models.composition;
+package io.swagger.models.composition;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-hibernate-validations/src/test/java/io/swagger/models/HibernateBeanValidationsModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import org.hibernate.validator.constraints.Email;
 import org.hibernate.validator.constraints.Length;

File: modules/swagger-hibernate-validations/src/test/java/io/swagger/models/HibernateBeanValidationsModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import org.hibernate.validator.constraints.Email;
 import org.hibernate.validator.constraints.Length;

File: modules/swagger-models/src/main/java/io/swagger/models/SecurityRequirement.java
Patch:
@@ -13,7 +13,7 @@ public class SecurityRequirement {
     private String name;
     private List<String> scopes;
 //    private final Map<String, Object> vendorExtensions = new HashMap<String, Object>();
-    private Map<String, List<String>> requirements;
+    private Map<String, List<String>> requirements = new HashMap<String, List<String>>();
 
     public SecurityRequirement() {
     }
@@ -93,8 +93,8 @@ public Map<String, List<String>> getRequirements() {
     }
 
     @JsonAnySetter
-    public void setRequirements(Map<String, List<String>> requirements) {
-        this.requirements = requirements;
+    public void setRequirements(String name, List<String> scopes) {
+        requirements.put(name, scopes);
     }
 
     @Override

File: modules/swagger-jaxrs/src/test/java/io/swagger/CollectionFormatTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.swagger.models.Swagger;
 import io.swagger.models.parameters.AbstractSerializableParameter;
 import org.testng.annotations.Test;
-import resources.CollectionFormatResource;
+import io.swagger.resources.CollectionFormatResource;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNull;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -2,8 +2,6 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import models.Category;
-import models.CategoryWithApiModel;
 import io.swagger.models.duplicated.Tag;
 
 import java.util.ArrayList;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/CollectionFormatResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/CollectionFormatTest.java
Patch:
@@ -5,7 +5,7 @@
 import io.swagger.models.Swagger;
 import io.swagger.models.parameters.AbstractSerializableParameter;
 import org.testng.annotations.Test;
-import resources.CollectionFormatResource;
+import io.swagger.resources.CollectionFormatResource;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNull;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -2,8 +2,6 @@
 
 import io.swagger.annotations.ApiModelProperty;
 
-import models.Category;
-import models.CategoryWithApiModel;
 import io.swagger.models.duplicated.Tag;
 
 import java.util.ArrayList;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/CollectionFormatResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/ModelContainingModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/ModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -4,7 +4,7 @@
 
 import models.Category;
 import models.CategoryWithApiModel;
-import models.Tag;
+import io.swagger.models.duplicated.Tag;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -20,7 +20,7 @@ public class Pet {
     private CategoryWithApiModel categoryWithApiModel;
     private String name;
     private List<String> photoUrls = new ArrayList<String>();
-    private List<models.Tag> tags = new ArrayList<models.Tag>();
+    private List<Tag> tags = new ArrayList<Tag>();
     private String status;
 
     @XmlElement(name = "id")
@@ -71,7 +71,7 @@ public void setPhotoUrls(List<String> photoUrls) {
 
     @XmlElementWrapper(name = "tags")
     @XmlElement(name = "tag")
-    public List<models.Tag> getTags() {
+    public List<Tag> getTags() {
         return tags;
     }
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/SubModelWithSelfReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag.java
Patch:
@@ -25,4 +25,4 @@ public String getName() {
     public void setName(String name) {
         this.name = name;
     }
-}
+}

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithReferences.java
Patch:
@@ -1,11 +1,11 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.ModelContainingModelWithReference;
-import models.ModelWithReference;
+import io.swagger.models.ModelContainingModelWithReference;
+import io.swagger.models.ModelWithReference;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/ModelContainingModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/ModelWithReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Pet.java
Patch:
@@ -4,7 +4,7 @@
 
 import models.Category;
 import models.CategoryWithApiModel;
-import models.Tag;
+import io.swagger.models.duplicated.Tag;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -20,7 +20,7 @@ public class Pet {
     private CategoryWithApiModel categoryWithApiModel;
     private String name;
     private List<String> photoUrls = new ArrayList<String>();
-    private List<models.Tag> tags = new ArrayList<models.Tag>();
+    private List<Tag> tags = new ArrayList<Tag>();
     private String status;
 
     @XmlElement(name = "id")
@@ -71,7 +71,7 @@ public void setPhotoUrls(List<String> photoUrls) {
 
     @XmlElementWrapper(name = "tags")
     @XmlElement(name = "tag")
-    public List<models.Tag> getTags() {
+    public List<Tag> getTags() {
         return tags;
     }
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/SubModelWithSelfReference.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModelProperty;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag.java
Patch:
@@ -25,4 +25,4 @@ public String getName() {
     public void setName(String name) {
         this.name = name;
     }
-}
+}

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithReferences.java
Patch:
@@ -1,11 +1,11 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.ModelContainingModelWithReference;
-import models.ModelWithReference;
+import io.swagger.models.ModelContainingModelWithReference;
+import io.swagger.models.ModelWithReference;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/ConfigAndExtensionScannerTest.java
Patch:
@@ -55,7 +55,7 @@ public void scanResourceWithExtensions() {
         assertTrue(swagger.getSchemes().contains(Scheme.HTTP));
         assertTrue(swagger.getSchemes().contains(Scheme.HTTPS));
 
-        assertEquals(swagger.getTags().size(), 6);
+        assertEquals(swagger.getTags().size(), 7);
         assertEquals(swagger.getTags().get(0).getName(), "Tag-added-before-read");
 
         assertEquals(swagger.getTags().get(1).getName(), "mytag");
@@ -73,7 +73,8 @@ public void scanResourceWithExtensions() {
         assertEquals(extensions.get("x-test"), "value");
 
         assertEquals(swagger.getTags().get(4).getName(), "externalinfo");
-        assertEquals(swagger.getTags().get(5).getName(), "Tag-added-after-read");
+        assertEquals(swagger.getTags().get(5).getName(), "testingtag");
+        assertEquals(swagger.getTags().get(6).getName(), "Tag-added-after-read");
 
         extensions = swagger.getInfo().getVendorExtensions();
         assertEquals(extensions.size(), 3);

File: modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java
Patch:
@@ -42,7 +42,7 @@ private void testCollection(QueryParameter p, String name, String type, String f
         assertEquals(p.getName(), name);
         assertEquals(p.getType(), "array");
         assertEquals(p.getFormat(), null);
-        assertEquals(p.getCollectionFormat(), "csv");
+        assertEquals(p.getCollectionFormat(), "multi");
         assertNotEquals(p.getItems(), null);
         Property schema = p.getItems();
         assertEquals(schema.getType(), type);

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -124,7 +124,7 @@ public void scanClassAndFieldLevelAnnotations() {
         assertEquals(resourceParameters.get(1).getName(), "fieldParam");
         assertEquals(resourceParameters.get(2).getName(), "methodParam");
 
-        List<Parameter> subResourceParameters = getGet(swagger, "/resource/{id}/subresource").getParameters();
+        List<Parameter> subResourceParameters = getGet(swagger, "/resource/{id}/subresource1").getParameters();
         assertNotNull(subResourceParameters);
         assertEquals(subResourceParameters.size(), 3);
         assertEquals(subResourceParameters.get(0).getName(), "id");

File: modules/swagger-jaxrs/src/test/java/io/swagger/ConfigAndExtensionScannerTest.java
Patch:
@@ -55,7 +55,7 @@ public void scanResourceWithExtensions() {
         assertTrue(swagger.getSchemes().contains(Scheme.HTTP));
         assertTrue(swagger.getSchemes().contains(Scheme.HTTPS));
 
-        assertEquals(swagger.getTags().size(), 6);
+        assertEquals(swagger.getTags().size(), 7);
         assertEquals(swagger.getTags().get(0).getName(), "Tag-added-before-read");
 
         assertEquals(swagger.getTags().get(1).getName(), "mytag");
@@ -73,7 +73,8 @@ public void scanResourceWithExtensions() {
         assertEquals(extensions.get("x-test"), "value");
 
         assertEquals(swagger.getTags().get(4).getName(), "externalinfo");
-        assertEquals(swagger.getTags().get(5).getName(), "Tag-added-after-read");
+        assertEquals(swagger.getTags().get(5).getName(), "testingtag");
+        assertEquals(swagger.getTags().get(6).getName(), "Tag-added-after-read");
 
         extensions = swagger.getInfo().getVendorExtensions();
         assertEquals(extensions.size(), 3);

File: modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java
Patch:
@@ -42,7 +42,7 @@ private void testCollection(QueryParameter p, String name, String type, String f
         assertEquals(p.getName(), name);
         assertEquals(p.getType(), "array");
         assertEquals(p.getFormat(), null);
-        assertEquals(p.getCollectionFormat(), "csv");
+        assertEquals(p.getCollectionFormat(), "multi");
         assertNotEquals(p.getItems(), null);
         Property schema = p.getItems();
         assertEquals(schema.getType(), type);

File: modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java
Patch:
@@ -124,7 +124,7 @@ public void scanClassAndFieldLevelAnnotations() {
         assertEquals(resourceParameters.get(1).getName(), "fieldParam");
         assertEquals(resourceParameters.get(2).getName(), "methodParam");
 
-        List<Parameter> subResourceParameters = getGet(swagger, "/resource/{id}/subresource").getParameters();
+        List<Parameter> subResourceParameters = getGet(swagger, "/resource/{id}/subresource1").getParameters();
         assertNotNull(subResourceParameters);
         assertEquals(subResourceParameters.size(), 3);
         assertEquals(subResourceParameters.get(0).getName(), "id");

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/NotFoundModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class NotFoundModel {
     int code;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/TestBeanParam.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiParam;
 

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ClassWithString.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 public class ClassWithString {
     public String value;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithComplexBodyInputType.java
Patch:
@@ -1,6 +1,7 @@
-package resources;
+package io.swagger.resources;
 
 import com.google.common.collect.Lists;
+
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/TestEnum.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public enum TestEnum {
     ONE, TWO, THREE;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/BaseBean.java
Patch:
@@ -1,4 +1,4 @@
-package params;
+package io.swagger.params;
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.FormParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/ChildBean.java
Patch:
@@ -1,4 +1,6 @@
-package params;
+package io.swagger.params;
+
+import io.swagger.params.BaseBean;
 
 import javax.ws.rs.HeaderParam;
 import javax.ws.rs.PathParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/EnumBean.java
Patch:
@@ -1,6 +1,6 @@
-package params;
+package io.swagger.params;
 
-import models.TestEnum;
+import io.swagger.models.TestEnum;
 
 import javax.ws.rs.HeaderParam;
 

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/RefBean.java
Patch:
@@ -1,6 +1,8 @@
-package params;
+package io.swagger.params;
 
 import io.swagger.annotations.ApiModelProperty;
+import io.swagger.params.BaseBean;
+import io.swagger.params.ChildBean;
 
 import javax.ws.rs.BeanParam;
 import javax.ws.rs.HeaderParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithKnownInjections.java
Patch:
@@ -1,7 +1,7 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
-import models.Pagination;
+import io.swagger.models.Pagination;
 
 import javax.inject.Inject;
 import javax.ws.rs.BeanParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Employee.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import javax.xml.bind.annotation.XmlRootElement;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/NoPathSubResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource942.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource942SubResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithSubResources.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResource.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResourceHead.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.jaxrs.Reader;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResourceTail.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/TestResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/TestSubResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/EnumHolder.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class EnumHolder {
     private TestEnum value;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Namespace.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class Namespace {
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Sample.java
Patch:
@@ -19,4 +19,4 @@ public String getValue() {
     public void setValue(String value) {
         this.value = value;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag.java
Patch:
@@ -25,4 +25,4 @@ public String getName() {
     public void setName(String name) {
         this.name = name;
     }
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/HiddenResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1041.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1073.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1085.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource653.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource841.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource877.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource937.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithApiOperationCode.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.ResponseHeader;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.PUT;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithApiResponseResponseContainer.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.ResponseHeader;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithBodyParams.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.Tag;
+import io.swagger.models.duplicated.Tag;
 
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithEmptyModel.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.EmptyModel;
+import io.swagger.models.EmptyModel;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithInnerClass.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Namespace.Description;
+import io.swagger.models.Namespace.Description;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithMapReturnValue.java
Patch:
@@ -1,18 +1,19 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
+import io.swagger.models.NotFoundModel;
 
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
 import javax.ws.rs.QueryParam;
 import javax.ws.rs.WebApplicationException;
+
 import java.util.HashMap;
 import java.util.Map;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithRanges.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithResponse.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithResponseHeaders.java
Patch:
@@ -1,13 +1,13 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.ResponseHeader;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithTypedResponses.java
Patch:
@@ -1,13 +1,14 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.Tag;
+import io.swagger.models.duplicated.Tag;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;
+
 import java.net.URI;
 import java.net.URL;
 import java.util.List;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithVoidReturns.java
Patch:
@@ -1,11 +1,11 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
+import io.swagger.models.NotFoundModel;
 
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleResource.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.DefaultValue;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleResourceWithoutAnnotations.java
Patch:
@@ -1,7 +1,7 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.ApiParam;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.DefaultValue;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/TaggedResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -7,6 +7,7 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;
+
 import java.util.ArrayList;
 
 @Api(value = "/external/info/", tags = {"external_info", "user_info"})

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -40,7 +40,7 @@
 
 @Path("/")
 public class ApiListingResource {
-    static boolean initialized = false;
+    boolean initialized = false;
     Logger LOGGER = LoggerFactory.getLogger(ApiListingResource.class);
     @Context
     ServletContext context;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/RegexPathParamResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithScheme.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithoutScheme.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/AbstractResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ApiConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BothConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/DescendantResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/InterfaceResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/NoConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithDeprecatedMethod.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithEmptyPath.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitParams.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithKnownInjections.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/RsConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleMethods.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/PostParamResource.java
Patch:
@@ -1,16 +1,17 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.Pet;
+import io.swagger.models.Pet;
 
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.Response;
+
 import java.util.Collection;
 import java.util.List;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/PostParamResource.java
Patch:
@@ -1,16 +1,17 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.Pet;
+import io.swagger.models.Pet;
 
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.Response;
+
 import java.util.Collection;
 import java.util.List;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/GenericListWrapper.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.util.Collections;
 import java.util.List;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/GenericType.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class GenericType<T> {
     public T value;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/GenericTypeWithApiModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithConfigAndExtensions.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/NotFoundModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class NotFoundModel {
     int code;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/TestBeanParam.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiParam;
 

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ClassWithString.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 public class ClassWithString {
     public String value;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithComplexBodyInputType.java
Patch:
@@ -1,6 +1,7 @@
-package resources;
+package io.swagger.resources;
 
 import com.google.common.collect.Lists;
+
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/TestEnum.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public enum TestEnum {
     ONE, TWO, THREE;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/BaseBean.java
Patch:
@@ -1,4 +1,4 @@
-package params;
+package io.swagger.params;
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.FormParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/ChildBean.java
Patch:
@@ -1,4 +1,6 @@
-package params;
+package io.swagger.params;
+
+import io.swagger.params.BaseBean;
 
 import javax.ws.rs.HeaderParam;
 import javax.ws.rs.PathParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/EnumBean.java
Patch:
@@ -1,6 +1,6 @@
-package params;
+package io.swagger.params;
 
-import models.TestEnum;
+import io.swagger.models.TestEnum;
 
 import javax.ws.rs.HeaderParam;
 

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/params/RefBean.java
Patch:
@@ -1,6 +1,8 @@
-package params;
+package io.swagger.params;
 
 import io.swagger.annotations.ApiModelProperty;
+import io.swagger.params.BaseBean;
+import io.swagger.params.ChildBean;
 
 import javax.ws.rs.BeanParam;
 import javax.ws.rs.HeaderParam;

File: modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithKnownInjections.java
Patch:
@@ -1,7 +1,7 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
-import models.Pagination;
+import io.swagger.models.Pagination;
 
 import javax.inject.Inject;
 import javax.ws.rs.BeanParam;

File: modules/swagger-core/src/main/java/io/swagger/jackson/JAXBAnnotationsHelper.java
Patch:
@@ -48,7 +48,8 @@ private static void applyElement(AnnotatedMember member, Property property) {
         if (wrapper != null) {
             final Xml xml = getXml(property);
             xml.setWrapped(true);
-            setName(wrapper.namespace(), wrapper.name(), property);
+            if(!"##default".equals(wrapper.name()) && !wrapper.name().isEmpty())
+              xml.setName(wrapper.name());
         }
         final XmlElement element = member.getAnnotation(XmlElement.class);
         if (element != null) {

File: modules/swagger-core/src/test/scala/models/ModelWithJAXBAnnotations.java
Patch:
@@ -23,7 +23,8 @@ public class ModelWithJAXBAnnotations {
 
     public List<String> list;
 
-    @XmlElementWrapper
+    @XmlElementWrapper(name="wrappedListItems")
+    @XmlElement(name="wrappedList")
     public List<String> wrappedList;
 
     @XmlAttribute(name = "doNotUseMe")

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Employee.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import javax.xml.bind.annotation.XmlRootElement;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/NoPathSubResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource942.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource942SubResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithSubResources.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResource.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.Employee;
+import io.swagger.models.Employee;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResourceHead.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.jaxrs.Reader;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SubResourceTail.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/TestResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/TestSubResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/EnumHolder.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class EnumHolder {
     private TestEnum value;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/Namespace.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class Namespace {
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/HiddenResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1041.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1073.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource1085.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource653.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource841.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource877.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/Resource937.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithApiOperationCode.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.ResponseHeader;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.PUT;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithApiResponseResponseContainer.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.ResponseHeader;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithBodyParams.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.Tag;
+import io.swagger.models.duplicated.Tag;
 
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithEmptyModel.java
Patch:
@@ -1,9 +1,9 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
-import models.EmptyModel;
+import io.swagger.models.EmptyModel;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithInnerClass.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Namespace.Description;
+import io.swagger.models.Namespace.Description;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithMapReturnValue.java
Patch:
@@ -1,18 +1,19 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
+import io.swagger.models.NotFoundModel;
 
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
 import javax.ws.rs.QueryParam;
 import javax.ws.rs.WebApplicationException;
+
 import java.util.HashMap;
 import java.util.Map;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithRanges.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithResponse.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithResponseHeaders.java
Patch:
@@ -1,13 +1,13 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.ResponseHeader;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithTypedResponses.java
Patch:
@@ -1,13 +1,14 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.Tag;
+import io.swagger.models.duplicated.Tag;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;
+
 import java.net.URI;
 import java.net.URL;
 import java.util.List;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithVoidReturns.java
Patch:
@@ -1,11 +1,11 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
+import io.swagger.models.NotFoundModel;
 
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleResource.java
Patch:
@@ -1,12 +1,12 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.NotFoundModel;
-import models.Sample;
+import io.swagger.models.NotFoundModel;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.DefaultValue;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleResourceWithoutAnnotations.java
Patch:
@@ -1,7 +1,7 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.ApiParam;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.DefaultValue;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/TaggedResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -7,6 +7,7 @@
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.core.Response;
+
 import java.util.ArrayList;
 
 @Api(value = "/external/info/", tags = {"external_info", "user_info"})

File: modules/swagger-core/src/main/java/io/swagger/jackson/JAXBAnnotationsHelper.java
Patch:
@@ -48,7 +48,8 @@ private static void applyElement(AnnotatedMember member, Property property) {
         if (wrapper != null) {
             final Xml xml = getXml(property);
             xml.setWrapped(true);
-            setName(wrapper.namespace(), wrapper.name(), property);
+            if(!"##default".equals(wrapper.name()) && !wrapper.name().isEmpty())
+              xml.setName(wrapper.name());
         }
         final XmlElement element = member.getAnnotation(XmlElement.class);
         if (element != null) {

File: modules/swagger-core/src/test/scala/models/ModelWithJAXBAnnotations.java
Patch:
@@ -23,7 +23,8 @@ public class ModelWithJAXBAnnotations {
 
     public List<String> list;
 
-    @XmlElementWrapper
+    @XmlElementWrapper(name="wrappedListItems")
+    @XmlElement(name="wrappedList")
     public List<String> wrappedList;
 
     @XmlAttribute(name = "doNotUseMe")

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -380,7 +380,7 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
                                 path = new Path();
                                 swagger.path(operationPath, path);
                             }
-                            path.setOrMerge(httpMethod, operation);
+                            path.set(httpMethod, operation);
 
                             readImplicitParameters(method, operation);
                         }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -97,7 +97,6 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, T
                 }
                 processAllowedValues(allowableValues, true, args);
                 PropertyBuilder.merge(p.getItems(), args);
-                p.collectionFormat("csv");
             } else {
                 if (StringUtils.isNotEmpty(defaultValue)) {
                     p.setDefaultValue(defaultValue);

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithConfigAndExtensions.java
Patch:
@@ -52,7 +52,7 @@
 @Api(value = "/external/info/")
 @Path("who/cares")
 public class ResourceWithConfigAndExtensions implements ReaderListener {
-    @ApiOperation(value = "test.", extensions = {
+    @ApiOperation(value = "test.", tags = {"tagwithextensions", "mytag", "testingtag"}, extensions = {
             @Extension(properties = @ExtensionProperty(name = "test", value = "value"))
     })
     @GET

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java
Patch:
@@ -566,7 +566,7 @@ public static Processor fromType(String type, String format) {
                     return item;
                 }
             }
-            LOGGER.error("no property for " + type + ", " + format);
+            LOGGER.debug("no property for " + type + ", " + format);
             return null;
         }
 

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithConfigAndExtensions.java
Patch:
@@ -52,7 +52,7 @@
 @Api(value = "/external/info/")
 @Path("who/cares")
 public class ResourceWithConfigAndExtensions implements ReaderListener {
-    @ApiOperation(value = "test.", extensions = {
+    @ApiOperation(value = "test.", tags = {"tagwithextensions", "mytag", "testingtag"}, extensions = {
             @Extension(properties = @ExtensionProperty(name = "test", value = "value"))
     })
     @GET

File: modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java
Patch:
@@ -566,7 +566,7 @@ public static Processor fromType(String type, String format) {
                     return item;
                 }
             }
-            LOGGER.error("no property for " + type + ", " + format);
+            LOGGER.debug("no property for " + type + ", " + format);
             return null;
         }
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/PostParamResource.java
Patch:
@@ -5,12 +5,13 @@
 import io.swagger.annotations.ApiParam;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import models.Pet;
+import io.swagger.models.Pet;
 
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.Response;
+
 import java.util.Collection;
 import java.util.List;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/PostParamResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/GenericListWrapper.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import java.util.Collections;
 import java.util.List;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/GenericType.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 public class GenericType<T> {
     public T value;

File: modules/swagger-jaxrs/src/test/java/io/swagger/models/GenericTypeWithApiModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import io.swagger.annotations.ApiModel;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithGenerics.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -7,7 +7,7 @@
 import models.GenericType;
 import models.GenericTypeWithApiModel;
 import models.Tag;
-import models.TestEnum;
+import io.swagger.models.TestEnum;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithConfigAndExtensions.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java
Patch:
@@ -78,7 +78,9 @@ public Map<String, Model> filterDefinitions(SwaggerSpecFilter filter, Map<String
                 }
             }
             Model clonedModel = (Model) definition.clone();
-            if (clonedModel.getProperties() != null) clonedModel.getProperties().clear();
+            if (clonedModel.getProperties() != null) {
+                clonedModel.getProperties().clear();
+            }
             clonedModel.setProperties(clonedProperties);
             clonedDefinitions.put(key, clonedModel);
         }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java
Patch:
@@ -109,6 +109,9 @@ public static Method findMethod(Method methodToFind, Class<?> cls) {
             }
             Class<?>[] pt = method.getParameterTypes();
             Type[] gpt = method.getGenericParameterTypes();
+            if (pTypes.length != pt.length || gpTypes.length != gpt.length) {
+                continue;
+            }
             for (int j = 0; j < pTypes.length; j++) {
                 Class<?> parameterType = pTypes[j];
                 if (!(pt[j].equals(parameterType) || (!gpt[j].equals(gpTypes[j]) && pt[j].isAssignableFrom(parameterType)))) {

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java
Patch:
@@ -109,6 +109,9 @@ public static Method findMethod(Method methodToFind, Class<?> cls) {
             }
             Class<?>[] pt = method.getParameterTypes();
             Type[] gpt = method.getGenericParameterTypes();
+            if (pTypes.length != pt.length || gpTypes.length != gpt.length) {
+                continue;
+            }
             for (int j = 0; j < pTypes.length; j++) {
                 Class<?> parameterType = pTypes[j];
                 if (!(pt[j].equals(parameterType) || (!gpt[j].equals(gpTypes[j]) && pt[j].isAssignableFrom(parameterType)))) {

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/AbstractResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ApiConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/BothConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/DescendantResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/InterfaceResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/NoConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithDeprecatedMethod.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithEmptyPath.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithImplicitParams.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithKnownInjections.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/RsConsumesProducesResource.java
Patch:
@@ -1,8 +1,8 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
-import models.Sample;
+import io.swagger.models.Sample;
 
 import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/SimpleMethods.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;

File: modules/swagger-jaxrs/src/test/scala/resources/SimpleResource.java
Patch:
@@ -10,6 +10,7 @@
 
 import javax.ws.rs.CookieParam;
 import javax.ws.rs.DefaultValue;
+import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;
 import javax.ws.rs.HeaderParam;
 import javax.ws.rs.PUT;

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java
Patch:
@@ -101,7 +101,7 @@ public static Method findMethod(Method methodToFind, Class<?> cls) {
 
     /**
      * Searches for constructor suitable for resource instantiation.
-     * <p/>
+     * <p>
      * If more constructors exists the one with the most injectable parameters will be selected.
      *
      * @param cls is the class where to search

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java
Patch:
@@ -101,7 +101,7 @@ public static Method findMethod(Method methodToFind, Class<?> cls) {
 
     /**
      * Searches for constructor suitable for resource instantiation.
-     * <p/>
+     * <p>
      * If more constructors exists the one with the most injectable parameters will be selected.
      *
      * @param cls is the class where to search

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/RegexPathParamResource.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithScheme.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/test/java/io/swagger/resources/ResourceWithoutScheme.java
Patch:
@@ -1,4 +1,4 @@
-package resources;
+package io.swagger.resources;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -380,7 +380,7 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
                                 path = new Path();
                                 swagger.path(operationPath, path);
                             }
-                            path.set(httpMethod, operation);
+                            path.setOrMerge(httpMethod, operation);
 
                             readImplicitParameters(method, operation);
                         }

File: modules/swagger-core/src/test/java/io/swagger/models/BeanValidationsModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import javax.validation.constraints.DecimalMax;
 import javax.validation.constraints.DecimalMin;

File: modules/swagger-core/src/test/java/io/swagger/models/BeanValidationsModel.java
Patch:
@@ -1,4 +1,4 @@
-package models;
+package io.swagger.models;
 
 import javax.validation.constraints.DecimalMax;
 import javax.validation.constraints.DecimalMin;

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -94,7 +94,6 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, T
                 }
                 processAllowedValues(allowableValues, true, args);
                 PropertyBuilder.merge(p.getItems(), args);
-                p.collectionFormat("csv");
             } else {
                 if (StringUtils.isNotEmpty(defaultValue)) {
                     p.setDefaultValue(defaultValue);

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -274,7 +274,7 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
                             pathBuilder.append("/").append(p);
                         }
                     }
-                    operationPath = pathBuilder.toString();
+                    operationPath = pathBuilder.length() > 0 ? pathBuilder.toString() : PATH_DELIMITER;
 
                     if (isIgnored(operationPath)) {
                         continue;

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java
Patch:
@@ -274,7 +274,7 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
                             pathBuilder.append("/").append(p);
                         }
                     }
-                    operationPath = pathBuilder.toString();
+                    operationPath = pathBuilder.length() > 0 ? pathBuilder.toString() : PATH_DELIMITER;
 
                     if (isIgnored(operationPath)) {
                         continue;

File: modules/swagger-models/src/main/java/io/swagger/models/properties/StringProperty.java
Patch:
@@ -22,7 +22,7 @@ public StringProperty(String format) {
 
     //TODO: implement additional formats
     public static boolean isType(String type, String format) {
-        boolean formatMatchStringType = "uri".equals(format) || "byte".equals(format) || "url".equals(format);
+        boolean formatMatchStringType = "uri".equals(format) || "url".equals(format);
         if ("string".equals(type) && (format == null || formatMatchStringType)) {
             return true;
         } else {

File: modules/swagger-core/src/test/scala/1_3/models/Currency.java
Patch:
@@ -1,6 +1,6 @@
 package models;
 
 public enum Currency {
-  USA,
-  CANADA
+    USA,
+    CANADA
 }

File: modules/swagger-core/src/test/scala/1_3/models/ModelWithEnumField.java
Patch:
@@ -1,5 +1,5 @@
 package models;
 
 public class ModelWithEnumField {
-  public TestEnum enumValue;
+    public TestEnum enumValue;
 }

File: modules/swagger-core/src/test/scala/1_3/models/ModelWithOptionalFields.java
Patch:
@@ -3,6 +3,6 @@
 import com.google.common.base.Optional;
 
 public class ModelWithOptionalFields {
-  public Optional<String> string;
-  public Optional<Integer> integer;
+    public Optional<String> string;
+    public Optional<Integer> integer;
 }

File: modules/swagger-core/src/test/scala/filter/NoOpOperationsFilter.java
Patch:
@@ -1,8 +1,9 @@
 package filter;
 
-import com.wordnik.swagger.core.filter.AbstractSpecFilter;
+import io.swagger.core.filter.AbstractSpecFilter;
 
 /**
  * Does nothing
  **/
-public class NoOpOperationsFilter extends AbstractSpecFilter {}
\ No newline at end of file
+public class NoOpOperationsFilter extends AbstractSpecFilter {
+}
\ No newline at end of file

File: modules/swagger-core/src/test/scala/models/AbstractModel.java
Patch:
@@ -1,5 +1,6 @@
 package models;
 
 public class AbstractModel<T> {
-  public AbstractModel() {}
+    public AbstractModel() {
+    }
 }

File: modules/swagger-core/src/test/scala/models/EmptyModel.java
Patch:
@@ -1,3 +1,4 @@
 package models;
 
-public class EmptyModel {}
\ No newline at end of file
+public class EmptyModel {
+}
\ No newline at end of file

File: modules/swagger-core/src/test/scala/models/ModelWithApiModel.java
Patch:
@@ -1,8 +1,8 @@
 package models;
 
-import com.wordnik.swagger.annotations.*;
+import io.swagger.annotations.ApiModel;
 
 @ApiModel("MyModel")
 public class ModelWithApiModel {
-  public String name;
+    public String name;
 }

File: modules/swagger-core/src/test/scala/models/SpecialOrderItem.java
Patch:
@@ -1,6 +1,6 @@
 package models;
 
 public class SpecialOrderItem {
-  public String name;
-  public Long id;
+    public String name;
+    public Long id;
 }
\ No newline at end of file

File: modules/swagger-core/src/test/scala/models/composition/AbstractBaseModelWithoutFields.java
Patch:
@@ -1,8 +1,8 @@
 package models.composition;
 
-import com.wordnik.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModel;
 
 @ApiModel(description = "I am an Abstract Base Model without any declared fields and with Sub-Types",
-             subTypes = {Thing3.class})
+        subTypes = {Thing3.class})
 public abstract class AbstractBaseModelWithoutFields {
 }

File: modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -135,7 +135,7 @@ public Response getListingYaml(
             b.append(part);
           b.append("\n");
         }
-        return Response.ok().entity(b.toString()).type("text/plain").build();
+        return Response.ok().entity(b.toString()).type("application/yaml").build();
       }
     }
     catch (Exception e) {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/Model.java
Patch:
@@ -16,5 +16,8 @@ public interface Model {
 
   ExternalDocs getExternalDocs();
 
+  String getReference();
+  void setReference( String reference );
+
   Object clone();
 }

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -330,7 +330,7 @@ else if (param.paramType().equalsIgnoreCase("header")){
       return null;
     }
 
-    return ParameterProcessor.applyAnnotations( swagger, p, apiClass, new Annotation[]{param}, false );
+    return ParameterProcessor.applyAnnotations( swagger, p, apiClass, Arrays.asList(new Annotation[]{param}));
   }
 
   protected Class<?> getSubResource(Method method) {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty.java
Patch:
@@ -3,10 +3,11 @@
 import com.wordnik.swagger.models.Xml;
 
 public class IntegerProperty extends AbstractNumericProperty implements Property {
+  public static final String TYPE = "integer";
   protected Integer _default;
 
   public IntegerProperty() {
-    super.type = "integer";
+    super.type = TYPE;
     super.format = "int32";
   }
   public IntegerProperty xml(Xml xml) {
@@ -36,7 +37,7 @@ public IntegerProperty _default(Integer _default) {
   }
 
   public static boolean isType(String type, String format) {
-    if("integer".equals(type) && "int32".equals(format))
+    if (TYPE.equals(type) && "int32".equals(format))
       return true;
     else return false;
   }

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -723,6 +723,9 @@ private static boolean isVoid(Type type) {
   }
 
   private static boolean isValidResponse(Type type) {
+    if( type == null ){
+      return false;
+    }
     final JavaType javaType = TypeFactory.defaultInstance().constructType(type);
     if (isVoid(javaType)) {
       return false;

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/TypeNameResolver.java
Patch:
@@ -103,7 +103,9 @@ private static Map<Class<?>, String> jdkTypes() {
     
     // Date, Calendar types are not exact matches (but sub-types), not added here
 
-    _add(map, "string", UUID.class, URL.class, URI.class);
+    _add(map, "uuid", UUID.class);
+    _add(map, "url", URL.class);
+    _add(map, "uri", URI.class);
 
     return map;
   }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/TypeNameResolver.java
Patch:
@@ -103,7 +103,9 @@ private static Map<Class<?>, String> jdkTypes() {
     
     // Date, Calendar types are not exact matches (but sub-types), not added here
 
-    _add(map, "string", UUID.class, URL.class, URI.class);
+    _add(map, "uuid", UUID.class);
+    _add(map, "url", URL.class);
+    _add(map, "uri", URI.class);
 
     return map;
   }

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty.java
Patch:
@@ -3,10 +3,11 @@
 import com.wordnik.swagger.models.Xml;
 
 public class IntegerProperty extends AbstractNumericProperty implements Property {
+  public static final String TYPE = "integer";
   protected Integer _default;
 
   public IntegerProperty() {
-    super.type = "integer";
+    super.type = TYPE;
     super.format = "int32";
   }
   public IntegerProperty xml(Xml xml) {
@@ -36,7 +37,7 @@ public IntegerProperty _default(Integer _default) {
   }
 
   public static boolean isType(String type, String format) {
-    if("integer".equals(type) && "int32".equals(format))
+    if (TYPE.equals(type) && "int32".equals(format))
       return true;
     else return false;
   }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/TypeNameResolver.java
Patch:
@@ -103,7 +103,9 @@ private static Map<Class<?>, String> jdkTypes() {
     
     // Date, Calendar types are not exact matches (but sub-types), not added here
 
-    _add(map, "string", UUID.class, URL.class, URI.class);
+    _add(map, "uuid", UUID.class);
+    _add(map, "url", URL.class);
+    _add(map, "uri", URI.class);
 
     return map;
   }

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty.java
Patch:
@@ -3,10 +3,11 @@
 import com.wordnik.swagger.models.Xml;
 
 public class IntegerProperty extends AbstractNumericProperty implements Property {
+  public static final String TYPE = "integer";
   protected Integer _default;
 
   public IntegerProperty() {
-    super.type = "integer";
+    super.type = TYPE;
     super.format = "int32";
   }
   public IntegerProperty xml(Xml xml) {
@@ -36,7 +37,7 @@ public IntegerProperty _default(Integer _default) {
   }
 
   public static boolean isType(String type, String format) {
-    if("integer".equals(type) && "int32".equals(format))
+    if (TYPE.equals(type) && "int32".equals(format))
       return true;
     else return false;
   }

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java
Patch:
@@ -79,7 +79,7 @@
 
   /**
    * Specifies a reference to the response type. The specified reference can be either local or remote and
-   * will be used as-is, and will override and specified response() class.
+   * will be used as-is, and will override any specified response() class.
    */
 
   String reference() default "";

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java
Patch:
@@ -64,7 +64,7 @@
 
   /**
    * Specifies a reference to the response type. The specified reference can be either local or remote and
-   * will be used as-is, and will override and specified response() class.
+   * will be used as-is, and will override any specified response() class.
    */
 
   String reference() default "";

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -64,6 +64,9 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, C
       if (StringUtils.isNotEmpty(param.getAccess())) {
         p.setAccess(param.getAccess());
       }
+      if( StringUtils.isNotEmpty(param.getDataType()) ){
+         p.setType(param.getDataType());
+      }
 
       AllowableValues allowableValues = null;
       if (StringUtils.isNotEmpty(param.getAllowableValues())) {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty.java
Patch:
@@ -3,10 +3,11 @@
 import com.wordnik.swagger.models.Xml;
 
 public class IntegerProperty extends AbstractNumericProperty implements Property {
+  public static final String TYPE = "integer";
   protected Integer _default;
 
   public IntegerProperty() {
-    super.type = "integer";
+    super.type = TYPE;
     super.format = "int32";
   }
   public IntegerProperty xml(Xml xml) {
@@ -36,7 +37,7 @@ public IntegerProperty _default(Integer _default) {
   }
 
   public static boolean isType(String type, String format) {
-    if("integer".equals(type) && "int32".equals(format))
+    if (TYPE.equals(type) && "int32".equals(format))
       return true;
     else return false;
   }

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -107,7 +107,7 @@ public synchronized Swagger read(Set<Class<?>> classes) {
     listeners.clear();
 
     for(Class<?> cls: classes) {
-      if( ReaderListener.class.isAssignableFrom( ReaderListener.class ) && listeners.containsKey( cls )){
+      if( ReaderListener.class.isAssignableFrom( cls ) && listeners.containsKey( cls )){
         try {
           listeners.put( cls, (ReaderListener) cls.newInstance());
         } catch (Exception e) {

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -60,7 +60,7 @@ public Response getPetById(
     }
   }
 
-  @PATCH
+  @DELETE
   @Path("/{petId}")
   @ApiOperation(value = "Deletes a pet")
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid pet value")})

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -92,7 +92,7 @@ public void write(OutputStream output) throws IOException {
             .build();
   }
 
-  @PATCH
+  @DELETE
   @Path("/{petId}")
   @ApiOperation(value = "Deletes a pet")
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid pet value")})

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -60,7 +60,7 @@ public Response getPetById(
     }
   }
 
-  @PATCH
+  @DELETE
   @Path("/{petId}")
   @ApiOperation(value = "Deletes a pet")
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid pet value")})

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithBodyParams.java
Patch:
@@ -75,7 +75,7 @@ public void testPrimitiveBytes(byte[] input) {
   @POST
   @Path("/testShort")
   @ApiOperation("Tests parameter of the short type")
-  public void testPrimitiveShort(short input) {
+  public void testPrimitiveShort(@ApiParam(value = "a short input") short input) {
   }
 
   @POST

File: modules/swagger-jaxrs/src/test/scala/models/Pet.java
Patch:
@@ -74,7 +74,7 @@ public void setTags(List<Tag> tags) {
 	}
 
 	@XmlElement(name = "status")
-	@ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
+	@ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold", access = "public")
 	public String getStatus() {
 		return status;
 	}

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/StringProperty.java
Patch:
@@ -87,7 +87,8 @@ public void setDefault(String _default) {
 
   //TODO: implement additional formats
   public static boolean isType(String type, String format) {
-    if("string".equals(type) && (format == null || "uri".equals(format) || "byte".equals(format)))
+    boolean formatMatchStringType = "uri".equals(format) || "byte".equals(format) || "url".equals(format);
+    if("string".equals(type) && (format == null || formatMatchStringType))
       return true;
     else return false;
   }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/core/filter/SpecFilter.java
Patch:
@@ -53,6 +53,9 @@ public Swagger filter(Swagger swagger, SwaggerSpecFilter filter, Map<String, Lis
   }
 
   public Map<String, Model> filterDefinitions(SwaggerSpecFilter filter, Map<String, Model> definitions, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
+    if (definitions == null) {
+      return null;
+    }
     Map<String, Model> clonedDefinitions = new LinkedHashMap<String, Model>();
 
     for(String key: definitions.keySet()) {

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -48,7 +48,7 @@ protected synchronized Swagger scan (Application app, ServletConfig sc) {
         classes = scanner.classes();
       }
       if(classes != null) {
-        Reader reader = new Reader(swagger);
+        Reader reader = new Reader(swagger, ReaderConfigUtils.getReaderConfig(context));
         swagger = reader.read(classes);
         if(scanner instanceof SwaggerConfig)
           swagger = ((SwaggerConfig)scanner).configure(swagger);

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithApiOperationCode.java
Patch:
@@ -7,6 +7,7 @@
 import javax.ws.rs.*;
 import javax.ws.rs.core.Response;
 
+@Api
 public class ResourceWithApiOperationCode {
   @GET
   @Path("/{id}")

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithApiResponseResponseContainer.java
Patch:
@@ -7,6 +7,7 @@
 import javax.ws.rs.*;
 import javax.ws.rs.core.Response;
 
+@Api
 public class ResourceWithApiResponseResponseContainer {
   @GET
   @Path("/{id}")

File: modules/swagger-jaxrs/src/test/scala/resources/SubResourceHead.java
Patch:
@@ -2,6 +2,9 @@
 
 import javax.ws.rs.Path;
 
+import com.wordnik.swagger.annotations.Api;
+
+@Api
 @Path("/head")
 public class SubResourceHead {
 

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -48,7 +48,7 @@ protected synchronized Swagger scan (Application app, ServletConfig sc) {
         classes = scanner.classes();
       }
       if(classes != null) {
-        Reader reader = new Reader(swagger);
+        Reader reader = new Reader(swagger, ReaderConfigUtils.getReaderConfig(context));
         swagger = reader.read(classes);
         if(scanner instanceof SwaggerConfig)
           swagger = ((SwaggerConfig)scanner).configure(swagger);

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithApiOperationCode.java
Patch:
@@ -7,6 +7,7 @@
 import javax.ws.rs.*;
 import javax.ws.rs.core.Response;
 
+@Api
 public class ResourceWithApiOperationCode {
   @GET
   @Path("/{id}")

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithApiResponseResponseContainer.java
Patch:
@@ -7,6 +7,7 @@
 import javax.ws.rs.*;
 import javax.ws.rs.core.Response;
 
+@Api
 public class ResourceWithApiResponseResponseContainer {
   @GET
   @Path("/{id}")

File: modules/swagger-jaxrs/src/test/scala/resources/SubResourceHead.java
Patch:
@@ -2,6 +2,9 @@
 
 import javax.ws.rs.Path;
 
+import com.wordnik.swagger.annotations.Api;
+
+@Api
 @Path("/head")
 public class SubResourceHead {
 

File: modules/swagger-core/src/main/java/com/wordnik/swagger/core/filter/SpecFilter.java
Patch:
@@ -53,6 +53,9 @@ public Swagger filter(Swagger swagger, SwaggerSpecFilter filter, Map<String, Lis
   }
 
   public Map<String, Model> filterDefinitions(SwaggerSpecFilter filter, Map<String, Model> definitions, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
+    if (definitions == null) {
+      return null;
+    }
     Map<String, Model> clonedDefinitions = new LinkedHashMap<String, Model>();
 
     for(String key: definitions.keySet()) {

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -175,6 +175,8 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
           String httpMethod = extractOperationMethod(apiOperation, method, SwaggerExtensions.chain());
 
           Operation operation = parseMethod(method);
+          if(operation == null) 
+            continue;
           if(parentParameters != null) {
             for(Parameter param : parentParameters) {
               operation.parameter(param);

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -1,5 +1,6 @@
 package com.wordnik.swagger.jaxrs.listing;
 
+import com.wordnik.swagger.annotations.ApiOperation;
 import com.wordnik.swagger.config.*;
 import com.wordnik.swagger.core.filter.*;
 import com.wordnik.swagger.jaxrs.Reader;
@@ -70,6 +71,7 @@ protected synchronized Swagger scan (Application app, ServletConfig sc) {
   @GET
   @Produces(MediaType.APPLICATION_JSON)
   @Path("/swagger.json")
+  @ApiOperation(value = "The swagger definition in JSON", hidden = true)
   public Response getListingJson(
     @Context Application app,
     @Context ServletConfig sc,
@@ -97,6 +99,7 @@ public Response getListingJson(
   @GET
   @Produces("application/yaml")
   @Path("/swagger.yaml")
+  @ApiOperation(value = "The swagger definition in YAML", hidden = true)
   public Response getListingYaml(
     @Context Application app,
     @Context ServletConfig sc,

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java
Patch:
@@ -33,7 +33,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
-@Inherited
 public @interface ApiImplicitParam {
   /**
    * Name of the parameter.

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java
Patch:
@@ -25,7 +25,6 @@
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
-@Inherited
 public @interface ApiImplicitParams {
   /**
    * A list of {@link com.wordnik.swagger.annotations.ApiImplicitParam}s available to the API operation.

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/StringProperty.java
Patch:
@@ -87,7 +87,8 @@ public void setDefault(String _default) {
 
   //TODO: implement additional formats
   public static boolean isType(String type, String format) {
-    if("string".equals(type) && (format == null || "uri".equals(format) || "byte".equals(format)))
+    boolean formatMatchStringType = "uri".equals(format) || "byte".equals(format) || "url".equals(format);
+    if("string".equals(type) && (format == null || formatMatchStringType))
       return true;
     else return false;
   }

File: modules/swagger-jaxrs/src/test/scala/models/Pet.java
Patch:
@@ -74,7 +74,7 @@ public void setTags(List<Tag> tags) {
 	}
 
 	@XmlElement(name = "status")
-	@ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
+	@ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold", access = "public")
 	public String getStatus() {
 		return status;
 	}

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -58,7 +58,7 @@ public class Reader {
   static ObjectMapper m = Json.mapper();
 
   public Reader(Swagger swagger) {
-    this.swagger = swagger;
+    this.swagger = swagger == null ? new Swagger() : swagger;
   }
 
   public Swagger read(Set<Class<?>> classes) {
@@ -76,8 +76,6 @@ public Swagger read(Class<?> cls) {
   }
 
   protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boolean readHidden, String[] parentConsumes, String[] parentProduces, Map<String, Tag> parentTags, List<Parameter> parentParameters) {
-    if(swagger == null)
-      swagger = new Swagger();
     Api api = (Api) cls.getAnnotation(Api.class);
     Map<String, SecurityScope> globalScopes = new HashMap<String, SecurityScope>();
 

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -58,7 +58,7 @@ public class Reader {
   static ObjectMapper m = Json.mapper();
 
   public Reader(Swagger swagger) {
-    this.swagger = swagger;
+    this.swagger = swagger == null ? new Swagger() : swagger;
   }
 
   public Swagger read(Set<Class<?>> classes) {
@@ -76,8 +76,6 @@ public Swagger read(Class<?> cls) {
   }
 
   protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boolean readHidden, String[] parentConsumes, String[] parentProduces, Map<String, Tag> parentTags, List<Parameter> parentParameters) {
-    if(swagger == null)
-      swagger = new Swagger();
     Api api = (Api) cls.getAnnotation(Api.class);
     Map<String, SecurityScope> globalScopes = new HashMap<String, SecurityScope>();
 

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Provides additional information about Swagger models.
- * <p>
+ * <p/>
  * Classes will be introspected automatically as they are used as types in operations,
  * but you may want to manipulate the structure of the models.
  */
@@ -30,7 +30,7 @@
 public @interface ApiModel {
   /**
    * Provide an alternative name for the model.
-   * <p>
+   * <p/>
    * By default, the class name is used.
    */
   String value() default "";
@@ -47,7 +47,7 @@
 
   /**
    * Supports model inheritance and polymorphism.
-   * <p>
+   * <p/>
    * This is the name of the field used as a discriminator. Based on this field,
    * it would be possible to assert which sub type needs to be used.
    */

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java
Patch:
@@ -139,7 +139,7 @@
    *
    * @return an array of authorizations required by the server, or a single, empty authorization value if not set
    */
-  Authorization[] authorizations() default @Authorization(value = "", type = "");
+  Authorization[] authorizations() default @Authorization(value = "");
 
   /**
    * Hides the api.

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java
Patch:
@@ -71,7 +71,7 @@
   //String authorizations() default "";
 
   /** authorizations required by this Api */
-  Authorization[] authorizations() default @Authorization(value = "", type = "");
+  Authorization[] authorizations() default @Authorization(value = "");
 
   /**
    * Allows an operation to be marked as hidden

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java
Patch:
@@ -25,6 +25,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Authorization {
   String value();
-  String type();
   AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
 }
\ No newline at end of file

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -39,7 +39,6 @@
 import com.wordnik.swagger.models.Path;
 import com.wordnik.swagger.models.Response;
 import com.wordnik.swagger.models.Scheme;
-import com.wordnik.swagger.models.SecurityDefinition;
 import com.wordnik.swagger.models.SecurityRequirement;
 import com.wordnik.swagger.models.SecurityScope;
 import com.wordnik.swagger.models.Swagger;
@@ -415,10 +414,8 @@ public Operation parseMethod(Method method) {
             security.setName(auth.value());
             AuthorizationScope[] scopes = auth.scopes();
             for(AuthorizationScope scope : scopes) {
-              SecurityDefinition definition = new SecurityDefinition(auth.type());
               if(scope.scope() != null && !"".equals(scope.scope())) {
                 security.addScope(scope.scope());
-                definition.scope(scope.scope(), scope.description());
               }
             }
             securities.add(security);

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -29,7 +29,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -45,7 +45,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -29,7 +29,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -45,7 +45,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -44,7 +44,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -61,7 +61,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a single pet", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
     @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/PetResource.java
Patch:
@@ -28,7 +28,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -44,7 +44,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -29,7 +29,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth"
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -45,7 +45,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java
Patch:
@@ -139,7 +139,7 @@
    *
    * @return an array of authorizations required by the server, or a single, empty authorization value if not set
    */
-  Authorization[] authorizations() default @Authorization(value = "", type = "");
+  Authorization[] authorizations() default @Authorization(value = "");
 
   /**
    * Hides the api.

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java
Patch:
@@ -71,7 +71,7 @@
   //String authorizations() default "";
 
   /** authorizations required by this Api */
-  Authorization[] authorizations() default @Authorization(value = "", type = "");
+  Authorization[] authorizations() default @Authorization(value = "");
 
   /**
    * Allows an operation to be marked as hidden

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java
Patch:
@@ -25,6 +25,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Authorization {
   String value();
-  String type();
   AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
 }
\ No newline at end of file

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -38,7 +38,6 @@
 import com.wordnik.swagger.models.Path;
 import com.wordnik.swagger.models.Response;
 import com.wordnik.swagger.models.Scheme;
-import com.wordnik.swagger.models.SecurityDefinition;
 import com.wordnik.swagger.models.SecurityRequirement;
 import com.wordnik.swagger.models.SecurityScope;
 import com.wordnik.swagger.models.Swagger;
@@ -419,10 +418,8 @@ public Operation parseMethod(Method method) {
             security.setName(auth.value());
             AuthorizationScope[] scopes = auth.scopes();
             for(AuthorizationScope scope : scopes) {
-              SecurityDefinition definition = new SecurityDefinition(auth.type());
               if(scope.scope() != null && !"".equals(scope.scope())) {
                 security.addScope(scope.scope());
-                definition.scope(scope.scope(), scope.description());
               }
             }
             securities.add(security);

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -29,7 +29,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -45,7 +45,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -29,7 +29,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -45,7 +45,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -44,7 +44,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -61,7 +61,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a single pet", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
     @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/PetResource.java
Patch:
@@ -28,7 +28,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth",
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -44,7 +44,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java
Patch:
@@ -29,7 +29,7 @@
 
 @Path("/pet")
 @Api(value = "/pet", description = "Operations about pets", authorizations = {
-  @Authorization(value = "petstore_auth", type = "oauth2",
+  @Authorization(value = "petstore_auth"
   scopes = {
     @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
     @AuthorizationScope(scope = "read:pets", description = "read your pets")
@@ -45,7 +45,7 @@ public class PetResource {
   @ApiOperation(value = "Find pet by ID", 
     notes = "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions", 
     response = Pet.class,
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Pet not found") })

File: samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -40,7 +40,7 @@ public class PetStoreResource {
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,
     responseContainer = "map",
-    authorizations = @Authorization(value = "api_key", type = "api_key")
+    authorizations = @Authorization(value = "api_key")
   )
   public java.util.Map<String, Integer> getInventory() {
     return petData.getInventoryByStatus();

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -18,6 +18,7 @@
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.Produces;
 
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -316,7 +317,7 @@ protected Set<String> extractTags(Api api) {
   }
 
   String getPath(javax.ws.rs.Path classLevelPath, javax.ws.rs.Path methodLevelPath, String parentPath) {
-    if (classLevelPath == null && methodLevelPath == null && parentPath == null) {
+    if (classLevelPath == null && methodLevelPath == null && StringUtils.isEmpty(parentPath)) {
       return null;
     }
     StringBuilder b = new StringBuilder();

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -18,6 +18,7 @@
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.Produces;
 
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -316,7 +317,7 @@ protected Set<String> extractTags(Api api) {
   }
 
   String getPath(javax.ws.rs.Path classLevelPath, javax.ws.rs.Path methodLevelPath, String parentPath) {
-    if (classLevelPath == null && methodLevelPath == null && parentPath == null) {
+    if (classLevelPath == null && methodLevelPath == null && StringUtils.isEmpty(parentPath)) {
       return null;
     }
     StringBuilder b = new StringBuilder();

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -189,8 +189,8 @@ else if (_isOptionalType(propType)) {
         // complex type
         String propertyTypeName = _typeName(propType);
         Model innerModel =  context.resolve(propType);      
-        if(innerModel != null) {      
-          property = new RefProperty(propertyTypeName);
+        if(innerModel instanceof ModelImpl) {
+          property = new RefProperty(((ModelImpl)innerModel).getName());
         }
       }
     }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -163,8 +163,8 @@ else if (_isOptionalType(propType)) {
         // complex type
         String propertyTypeName = _typeName(propType);
         Model innerModel =  context.resolve(propType);      
-        if(innerModel != null) {      
-          property = new RefProperty(propertyTypeName);
+        if(innerModel instanceof ModelImpl) {
+          property = new RefProperty(((ModelImpl)innerModel).getName());
         }
       }
     }

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -111,6 +111,7 @@ else if(parameter instanceof CookieParameter) {
         else if(shouldIgnore == false) {
           // must be a body param
           BodyParameter bp = new BodyParameter();
+          bp.setRequired(param.required());
           if(param.name() != null && !"".equals(param.name()))
             bp.setName(param.name());
           else

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -84,6 +84,9 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
     Map<String, Tag> tags = new HashMap<String, Tag>();
     List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
     
+    String[] consumes = new String[0];
+    String[] produces = new String[0];
+
     // only read if allowing hidden apis OR api is not marked as hidden
     final boolean readable = (api != null && readHidden) || (api != null && !api.hidden());
     if(readable) {
@@ -100,13 +103,11 @@ protected Swagger read(Class<?> cls, String parentPath, String parentMethod, boo
       }
 
       int position = api.position();
-      String[] produces = new String[0];
       if (!api.produces().isEmpty()) {
         produces = new String[]{api.produces()};
       } else if (cls.getAnnotation(Produces.class) != null) {
         produces = ((Produces) cls.getAnnotation(Produces.class)).value();
       }
-      String[] consumes = new String[0];
       if (!api.consumes().isEmpty()){
         consumes = new String[]{api.consumes()};
       } else if (cls.getAnnotation(Consumes.class) != null){

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -111,6 +111,7 @@ else if(parameter instanceof CookieParameter) {
         else if(shouldIgnore == false) {
           // must be a body param
           BodyParameter bp = new BodyParameter();
+          bp.setRequired(param.required());
           if(param.name() != null && !"".equals(param.name()))
             bp.setName(param.name());
           else

File: modules/swagger-core/src/test/scala/models/composition/Pet.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.wordnik.swagger.annotations.*;
 
-public interface Pet {
+public interface Pet extends Animal {
   @ApiModelProperty(position = 1, required = true, value = "The pet type")
   String getType();
   void setType(String type);

File: modules/swagger-core/src/test/scala/models/composition/Pet.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.wordnik.swagger.annotations.*;
 
-public interface Pet {
+public interface Pet extends Animal {
   @ApiModelProperty(position = 1, required = true, value = "The pet type")
   String getType();
   void setType(String type);

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/config/BeanConfig.java
Patch:
@@ -160,7 +160,7 @@ public Set<Class<?>> classes() {
     ConfigurationBuilder config = new ConfigurationBuilder();
     Set<String> acceptablePackages = new HashSet<String>();
 
-    if(resourcePackage != "") {
+    if(resourcePackage != null && !"".equals(resourcePackage)) {
       String[] parts = resourcePackage.split(",");
       for(String pkg : parts) {
         if(!"".equals(pkg)) {

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Provides additional information about Swagger models.
- * <p>
+ * <p/>
  * Classes will be introspected automatically as they are used as types in operations,
  * but you may want to manipulate the structure of the models.
  */
@@ -30,7 +30,7 @@
 public @interface ApiModel {
   /**
    * Provide an alternative name for the model.
-   * <p>
+   * <p/>
    * By default, the class name is used.
    */
   String value() default "";
@@ -47,7 +47,7 @@
 
   /**
    * Supports model inheritance and polymorphism.
-   * <p>
+   * <p/>
    * This is the name of the field used as a discriminator. Based on this field,
    * it would be possible to assert which sub type needs to be used.
    */

File: samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/SwaggerSampleApplication.java
Patch:
@@ -33,7 +33,7 @@ public void run(SwaggerSampleConfiguration configuration, Environment environmen
     BeanConfig config = new BeanConfig();
     config.setTitle("Swagger sample app");
     config.setVersion("1.0.0");
-    config.setResourcePackage("com.wordnik.swagger.sample");
+    config.setResourcePackage("com.wordnik.swagger.sample.resource");
     config.setScan(true);
   }
-}
\ No newline at end of file
+}

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/LongProperty.java
Patch:
@@ -1,7 +1,6 @@
 package com.wordnik.swagger.models.properties;
 
 import com.wordnik.swagger.models.Xml;
-import com.fasterxml.jackson.annotation.JsonIgnore;
 
 public class LongProperty extends AbstractNumericProperty implements Property {
   protected Long _default;
@@ -44,7 +43,6 @@ public Long getDefault() {
   public void setDefault(Long _default) {
     this._default = _default;
   }
-  @JsonIgnore
   public void setDefault(String _default) {
     this._default(_default);
   }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/util/PropertyDeserializer.java
Patch:
@@ -72,7 +72,7 @@ Property propertyFromNode(JsonNode node) {
       description = (String) ((TextNode) detailNode).asText();
     detailNode = node.get("default");
     if(detailNode != null)
-      _default = (String) ((TextNode) detailNode).asText();
+      _default = detailNode.toString();
     detailNode = node.get("pattern");
     if(detailNode != null)
       pattern = (String) ((TextNode) detailNode).asText();

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/Property.java
Patch:
@@ -25,9 +25,6 @@ public interface Property {
   boolean getRequired();
   void setRequired(boolean required);
 
-  String getDefault();
-  void setDefault(String _default);
-
   String getExample();
   void setExample(String example);
 
@@ -39,4 +36,6 @@ public interface Property {
 
   Xml getXml();
   void setXml(Xml xml);
+
+  void setDefault(String _default);
 }
\ No newline at end of file

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -43,10 +43,10 @@ public void init(ServletConfig config) throws ServletException {
       .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
     swagger.tag(new Tag()
       .name("store")
-      .description("Operations about user"));
+      .description("Access to Petstore orders"));
     swagger.tag(new Tag()
       .name("user")
-      .description("Access to Petstore orders")
+      .description("Operations about user")
       .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
 
     context.setAttribute("swagger", swagger);

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -38,10 +38,10 @@ public void init(ServletConfig config) throws ServletException {
       .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
     swagger.tag(new Tag()
       .name("store")
-      .description("Operations about user"));
+      .description("Access to Petstore orders"));
     swagger.tag(new Tag()
       .name("user")
-      .description("Access to Petstore orders")
+      .description("Operations about user")
       .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
 
     context.setAttribute("swagger", swagger);

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -39,10 +39,10 @@ public void init(ServletConfig config) throws ServletException {
       .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
     swagger.tag(new Tag()
       .name("store")
-      .description("Operations about user"));
+      .description("Access to Petstore orders"));
     swagger.tag(new Tag()
       .name("user")
-      .description("Access to Petstore orders")
+      .description("Operations about user")
       .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
 
     context.setAttribute("swagger", swagger);

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java
Patch:
@@ -35,7 +35,7 @@ public class PetStoreResource {
 
   @GET
   @Path("/inventory")
-  @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
+  @Produces({MediaType.APPLICATION_JSON})
   @ApiOperation(value = "Returns pet inventories by status", 
     notes = "Returns a map of status codes to quantities", 
     response = Integer.class,

File: samples/java-jaxrs-no-webxml/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -43,10 +43,10 @@ public void init(ServletConfig config) throws ServletException {
       .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
     swagger.tag(new Tag()
       .name("store")
-      .description("Operations about user"));
+      .description("Access to Petstore orders"));
     swagger.tag(new Tag()
       .name("user")
-      .description("Access to Petstore orders")
+      .description("Operations about user")
       .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
 
     context.setAttribute("swagger", swagger);

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -38,10 +38,10 @@ public void init(ServletConfig config) throws ServletException {
       .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
     swagger.tag(new Tag()
       .name("store")
-      .description("Operations about user"));
+      .description("Access to Petstore orders"));
     swagger.tag(new Tag()
       .name("user")
-      .description("Access to Petstore orders")
+      .description("Operations about user")
       .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
 
     context.setAttribute("swagger", swagger);

File: samples/java-jersey-jaxrs/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -39,10 +39,10 @@ public void init(ServletConfig config) throws ServletException {
       .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
     swagger.tag(new Tag()
       .name("store")
-      .description("Operations about user"));
+      .description("Access to Petstore orders"));
     swagger.tag(new Tag()
       .name("user")
-      .description("Access to Petstore orders")
+      .description("Operations about user")
       .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
 
     context.setAttribute("swagger", swagger);

File: modules/swagger-jaxrs/src/test/scala/resources/Resource942.java
Patch:
@@ -13,7 +13,7 @@
 public class Resource942 {
   @ApiOperation(value="test")
   @POST
-  public void addTest(Employee employee) {
+  public void addTest(@ApiParam(required=false) Employee employee) {
     return;
   }
 }
\ No newline at end of file

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -35,7 +35,6 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, C
           }
 
           if(param.required() == true) {
-            System.out.println(param.required());
             parameter.setRequired(param.required());
           }
 
@@ -196,4 +195,4 @@ else if(shouldIgnore == false) {
     }
     return parameter;
   } 
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -35,7 +35,6 @@ public static Parameter applyAnnotations(Swagger swagger, Parameter parameter, C
           }
 
           if(param.required() == true) {
-            System.out.println(param.required());
             parameter.setRequired(param.required());
           }
 
@@ -196,4 +195,4 @@ else if(shouldIgnore == false) {
     }
     return parameter;
   } 
-}
\ No newline at end of file
+}

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -133,7 +133,7 @@ else if(shouldIgnore == false) {
               }
             }
             else {
-              LOGGER.debug("yay - found inner property " + innerProperty);
+              LOGGER.debug("found inner property " + innerProperty);
               bp.setSchema(new ArrayModel().items(innerProperty));
 
               // creation of ref property doesn't add model to definitions - do it now instead

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -500,6 +500,8 @@ else if(!"".equals(wrapper.name()))
     for (Property prop : props) {
       modelProps.put(prop.getName(), prop);
     }
+    if(modelProps.size() == 0)
+      model.setType("object");
     model.setProperties(modelProps);
     return model;
   }

File: modules/swagger-core/src/test/scala/models/EmptyModel.java
Patch:
@@ -0,0 +1,3 @@
+package models;
+
+public class EmptyModel {}
\ No newline at end of file

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/AbstractModelConverter.java
Patch:
@@ -154,7 +154,7 @@ protected String _subTypeName(NamedType type) {
   protected String _findDefaultValue(Annotated a) {
     XmlElement elem = a.getAnnotation(XmlElement.class);
     if(elem != null) {
-      if(!elem.defaultValue().isEmpty()) {
+      if(!elem.defaultValue().isEmpty() && !"\u0000".equals(elem.defaultValue())) {
         return elem.defaultValue();
       }
     }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -384,6 +384,7 @@ else if(or.toLowerCase().startsWith("map[")) {
           if (index != null) {
             property.setPosition(index);
           }
+          property.setDefault(_findDefaultValue(member));
           property.setExample(_findExampleValue(member));
           property.setReadOnly(_findReadOnly(member));
           

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/Property.java
Patch:
@@ -25,6 +25,9 @@ public interface Property {
   boolean getRequired();
   void setRequired(boolean required);
 
+  String getDefault();
+  void setDefault(String _default);
+
   String getExample();
   void setExample(String example);
 

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -433,7 +433,7 @@ else if(!"".equals(wrapper.name()))
 
             XmlElement element = member.getAnnotation(XmlElement.class);
             if(element != null) {
-              if(element.name() != null && !"".equals(element.name())) {
+              if(!element.name().isEmpty()) {
                 // don't set Xml object if name is same
                 if(!element.name().equals(propName) && !"##default".equals(element.name())) {
                   Xml xml = property.getXml();
@@ -447,7 +447,7 @@ else if(!"".equals(wrapper.name()))
             }
             XmlAttribute attr = member.getAnnotation(XmlAttribute.class);
             if(attr != null) {
-              if(attr.name() != null && !"".equals(attr.name())) {
+              if(!"".equals(attr.name())) {
                 // don't set Xml object if name is same
                 if(!attr.name().equals(propName) && !"##default".equals(attr.name())) {
                   Xml xml = property.getXml();

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -226,7 +226,7 @@ public Model resolve(JavaType type, ModelConverterContext context, Iterator<Mode
 
     // if XmlRootElement annotation, construct an Xml object and attach it to the model
     XmlRootElement rootAnnotation = beanDesc.getClassAnnotations().get(XmlRootElement.class);
-    if(rootAnnotation != null && rootAnnotation.name() != null && !"".equals(rootAnnotation.name())) {
+    if(rootAnnotation != null && !"".equals(rootAnnotation.name()) && !"##default".equals(rootAnnotation.name())) {
       LOGGER.debug(rootAnnotation.toString());
       Xml xml = new Xml()
         .name(rootAnnotation.name());

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/Operation.java
Patch:
@@ -127,7 +127,6 @@ public void setOperationId(String operationId) {
     this.operationId = operationId;
   }
 
-  @JsonIgnore
   public List<Scheme> getSchemes() {
     return schemes;
   }

File: samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java
Patch:
@@ -23,7 +23,6 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.*;
 
-@Path("/owner")
 @Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
 @Produces("application/json")
 public class OwnerResource {
@@ -35,6 +34,7 @@ public OwnerResource(String petId){
 	}
 
   @GET
+  @Path("/")
   @Produces("application/json")
   @ApiOperation(
     value = "Gets the owner of a pet", 

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java
Patch:
@@ -84,8 +84,6 @@
 
   /**
    * Allows for filtering a parameter from the API documentation.
-   *
-   * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
    */
   String access() default "";
 

File: modules/swagger-core/src/main/java/com/wordnik/swagger/converter/ModelConverterContext.java
Patch:
@@ -18,13 +18,13 @@ public interface ModelConverterContext {
   public void defineModel(String name, Model model);
   
   /**
-   * @param cls the property Class
+   * @param type the property Class
    * @return a property representation of the Class. Any referenced models will be defined already.
    */
   public   Property resolveProperty(Type type);
 
   /** 
-   * @param cls The Model Class
+   * @param type The Model Class
    * @return a Model representation of the Class. Any referenced models will be defined already.
    */
   public Model resolve(Type type);

File: modules/swagger-jaxrs/src/test/scala/resources/SubResource.java
Patch:
@@ -12,7 +12,7 @@
 public class SubResource {
   @ApiOperation(value="gets an object by ID", tags = {@Tag("Employees")})
   @GET
-  public void getTest(@ApiParam(value = "test") Long userId) {
+  public void getSubresourceOperation(@ApiParam(value = "test") Long userId) {
     return;
   }
 }
\ No newline at end of file

File: modules/swagger-jaxrs/src/test/scala/resources/TestResource.java
Patch:
@@ -21,7 +21,9 @@ public String getStatus() {
 
   @Path("/more")
   @ApiOperation("Get more")
-  public TestSubResource getSubResource() {
+  @Produces({MediaType.APPLICATION_XML})
+  public TestSubResource getSubResource(
+    @ApiParam("a query param") @QueryParam("qp") Integer qp) {
     return new TestSubResource();
   }
 }
\ No newline at end of file

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Provides additional information about Swagger models.
- * <p/>
+ * <p>
  * Classes will be introspected automatically as they are used as types in operations,
  * but you may want to manipulate the structure of the models.
  */
@@ -30,7 +30,7 @@
 public @interface ApiModel {
   /**
    * Provide an alternative name for the model.
-   * <p/>
+   * <p>
    * By default, the class name is used.
    */
   String value() default "";
@@ -47,7 +47,7 @@
 
   /**
    * Supports model inheritance and polymorphism.
-   * <p/>
+   * <p>
    * This is the name of the field used as a discriminator. Based on this field,
    * it would be possible to assert which sub type needs to be used.
    */

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Provides additional information about Swagger models.
- * <p/>
+ * <p>
  * Classes will be introspected automatically as they are used as types in operations,
  * but you may want to manipulate the structure of the models.
  */
@@ -30,7 +30,7 @@
 public @interface ApiModel {
   /**
    * Provide an alternative name for the model.
-   * <p/>
+   * <p>
    * By default, the class name is used.
    */
   String value() default "";
@@ -47,7 +47,7 @@
 
   /**
    * Supports model inheritance and polymorphism.
-   * <p/>
+   * <p>
    * This is the name of the field used as a discriminator. Based on this field,
    * it would be possible to assert which sub type needs to be used.
    */

File: modules/swagger-jersey2-jaxrs/src/main/java/com/wordnik/swagger/jersey/SwaggerJersey2Jaxrs.java
Patch:
@@ -87,8 +87,9 @@ public List<Parameter> extractParameters(final Annotation[] annotations, final C
                                                   extensions);
 
           // since downstream processors won't know how to introspect @BeanParam, process here
-          for(Parameter param : parameters)
+          for(Parameter param : extracted)
             ParameterProcessor.applyAnnotations(null, param, paramClass, paramAnnotations.toArray(new Annotation[paramAnnotations.size()]), isArray);
+
           parameters.addAll(extracted);
         }
       }

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/Operation.java
Patch:
@@ -17,7 +17,7 @@ public class Operation {
   private List<Scheme> schemes;
   private List<String> consumes;
   private List<String> produces;
-  private List<Parameter> parameters;
+  private List<Parameter> parameters = new ArrayList<Parameter>();
   private Map<String, Response> responses;
   private List<Map<String, List<String>>> security;
   private String example;

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java
Patch:
@@ -45,7 +45,7 @@
    * <p/>
    * If the value isn't preceded with a slash, one would be added to it.
    */
-  String value();
+  String value() default "";
 
   /**
    * A list of tags for API documentation control. 

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java
Patch:
@@ -88,7 +88,8 @@ else if(parameter instanceof CookieParameter) {
               }
               if(parameter instanceof SerializableParameter) {
                 SerializableParameter p = (SerializableParameter) parameter;
-                p.setEnum(_enum);
+                if(_enum.size() > 0)
+                  p.setEnum(_enum);
               }
             }
           }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/jackson/ModelResolver.java
Patch:
@@ -41,7 +41,7 @@ public ObjectMapper objectMapper() {
   protected boolean shouldIgnoreClass(Type type) {
     if(type instanceof Class) {
       Class<?> cls = (Class)type;
-      if(cls.getName().startsWith("javax.ws.rs"))
+      if(cls.getName().equals("javax.ws.rs.Response"))
         return true;
     }
     else {
@@ -65,6 +65,7 @@ public Property resolveProperty(JavaType propType, ModelConverterContext context
 
     // primitive or null
     property = getPrimitiveProperty(typeName);
+    LOGGER.debug("got primitive property " + property);
     // And then properties specific to subset of property types:
     if (propType.isContainerType()) {
       LOGGER.debug("looking at container type");
@@ -194,7 +195,6 @@ protected void _addEnumProps(Class<?> propClass, Property property) {
 
   public Model resolve(JavaType type, ModelConverterContext context, Iterator<ModelConverter> next) {
     final BeanDescription beanDesc = _mapper.getSerializationConfig().introspect(type);
-
     if (type.isEnumType()) {
       // TODO how to handle if model provided is simply an enum
     }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/converter/ModelConverters.java
Patch:
@@ -80,7 +80,7 @@ public Map<String, Model> readAll(Type type) {
       ModelConverterContextImpl context = new ModelConverterContextImpl(
           converters);
 
-      LOGGER.debug("ModelConverters readAll");
+      LOGGER.debug("ModelConverters readAll from " + type);
       context.resolve(type);
       return context.getDefinedModels();
     }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/converter/ModelConverterContextImpl.java
Patch:
@@ -40,9 +40,6 @@ public void defineModel(String name, Model model) {
     if(LOGGER.isDebugEnabled()){
       LOGGER.debug(String.format("defineModel %s %s", name, model));
     }
-    if("SnakeCaseModel".equals(name)) {
-      throw new RuntimeException("oops");
-    }
     modelByName.put(name, model);
   }
   
@@ -77,6 +74,7 @@ public Model resolve(Type type) {
     Model resolved = null;
     if(converters.hasNext()) {
       ModelConverter converter = converters.next();
+      LOGGER.debug("trying extension " + converter);
       resolved = converter.resolve(type, this, converters);
     }
     if(resolved != null) {

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -216,9 +216,11 @@ public Operation parseMethod(Method method) {
 
     if(responseClass == null) {
       // pick out response from method declaration
+      LOGGER.debug("picking up response class from method " + method);
       Type t = method.getGenericReturnType();
       responseClass = method.getReturnType();
       if(!responseClass.equals(java.lang.Void.class) && !"void".equals(responseClass.toString())) {
+        LOGGER.debug("reading model " + responseClass);
         Map<String, Model> models = ModelConverters.getInstance().readAll(t);
       }
     }

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/DefaultParameterExtension.java
Patch:
@@ -9,7 +9,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.*;
-import java.lang.reflect.*;
 import java.lang.annotation.Annotation;
 
 import javax.ws.rs.QueryParam;

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/DefaultParameterExtension.java
Patch:
@@ -9,7 +9,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.*;
-import java.lang.reflect.*;
 import java.lang.annotation.Annotation;
 
 import javax.ws.rs.QueryParam;

File: modules/swagger-core/src/main/java/com/wordnik/swagger/config/SwaggerConfig.java
Patch:
@@ -1,5 +1,7 @@
 package com.wordnik.swagger.config;
 
+import com.wordnik.swagger.models.Swagger;
+
 public interface SwaggerConfig {
-  
+  Swagger configure(Swagger swagger);  
 }
\ No newline at end of file

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/config/WebXMLReader.java
Patch:
@@ -48,7 +48,7 @@ public WebXMLReader(ServletConfig servletConfig) {
     filterClass = servletConfig.getInitParameter("swagger.filter");
   }
 
-  public void read(Swagger swagger) {
+  public Swagger configure(Swagger swagger) {
     if(swagger != null) {
       Info info = swagger.getInfo();
       if(info == null)
@@ -61,5 +61,6 @@ public void read(Swagger swagger) {
           .title(title)
           .version(apiVersion);
     }
+    return swagger;
   }
 }

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/config/BeanConfig.java
Patch:
@@ -123,7 +123,7 @@ public void setScan(boolean shouldScan) {
 
     ScannerFactory.setScanner(this);
   }
-  public Boolean getScan() {
+  public boolean getScan() {
     return true;
   }
 

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/config/BeanConfig.java
Patch:
@@ -123,6 +123,9 @@ public void setScan(boolean shouldScan) {
 
     ScannerFactory.setScanner(this);
   }
+  public Boolean getScan() {
+    return true;
+  }
 
   public Set<Class<?>> classes() {
     ConfigurationBuilder config = new ConfigurationBuilder()

File: modules/swagger-core/src/test/scala/models/composition/Human.java
Patch:
@@ -1,7 +1,8 @@
 package models.composition;
 
-import java.util.*;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 
+@JsonPropertyOrder({ "name", "type", "firstName", "lastName" })
 public class Human implements Animal {
   private String name;
   private String type;

File: modules/swagger-core/src/test/scala/models/ModelPropertyName.java
Patch:
@@ -2,6 +2,5 @@
 
 public class ModelPropertyName {
   public boolean is_persistent() { return true; }
-  public String isometric() { return null; }
   public String gettersAndHaters() { return null; }
 }
\ No newline at end of file

File: modules/swagger-core/src/main/java/com/wordnik/swagger/util/Json.java
Patch:
@@ -1,6 +1,7 @@
 package com.wordnik.swagger.util;
 
 import com.wordnik.swagger.models.Model;
+import com.wordnik.swagger.models.parameters.Parameter;
 import com.wordnik.swagger.models.properties.Property;
 
 import com.fasterxml.jackson.datatype.joda.JodaModule;
@@ -26,6 +27,7 @@ public static ObjectMapper create() {
     SimpleModule module = new SimpleModule();
     module.addDeserializer(Property.class, new PropertyDeserializer());
     module.addDeserializer(Model.class, new ModelDeserializer());
+    module.addDeserializer(Parameter.class, new ParameterDeserializer());
     mapper.registerModule(module);
     mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
     mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

File: modules/swagger-core/src/main/java/com/wordnik/swagger/util/Yaml.java
Patch:
@@ -1,6 +1,7 @@
 package com.wordnik.swagger.util;
 
 import com.wordnik.swagger.models.Model;
+import com.wordnik.swagger.models.parameters.Parameter;
 import com.wordnik.swagger.models.properties.Property;
 
 import com.fasterxml.jackson.datatype.joda.JodaModule;
@@ -21,6 +22,7 @@ public static ObjectMapper mapper() {
       SimpleModule module = new SimpleModule();
       module.addDeserializer(Property.class, new PropertyDeserializer());
       module.addDeserializer(Model.class, new ModelDeserializer());
+      module.addDeserializer(Parameter.class, new ParameterDeserializer());
       mapper.registerModule(module);
       mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/AbstractParameter.java
Patch:
@@ -1,9 +1,7 @@
 package com.wordnik.swagger.models.parameters;
 
-import com.fasterxml.jackson.annotation.*;
 
 public abstract class AbstractParameter {
-  @JsonIgnore
   protected String in;
   protected String name;
   protected String description;

File: modules/swagger-core/src/test/scala/models/Address.java
Patch:
@@ -1,8 +1,11 @@
 package models;
 
+import javax.xml.bind.annotation.XmlElement;
+
 public class Address {
   private Integer streetNumber;
 
+  @XmlElement(name = "streetNumber")
   public Integer getStreetNumber() {
     return streetNumber;
   }

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/AbstractParameter.java
Patch:
@@ -1,9 +1,7 @@
 package com.wordnik.swagger.models.parameters;
 
-import com.fasterxml.jackson.annotation.*;
 
 public abstract class AbstractParameter {
-  @JsonIgnore
   protected String in;
   protected String name;
   protected String description;

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/Parameter.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
+import com.fasterxml.jackson.annotation.JsonTypeId;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
 
 public interface Parameter {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/CookieParameter.java
Patch:
@@ -16,7 +16,6 @@ public class CookieParameter extends AbstractParameter implements SerializablePa
 
   public CookieParameter() {
     super.setIn("cookie");
-    super.setRequired(true);
   }
 
   public CookieParameter property(Property property) {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/FormParameter.java
Patch:
@@ -16,7 +16,6 @@ public class FormParameter extends AbstractParameter implements SerializablePara
 
   public FormParameter() {
     super.setIn("formData");
-    super.setRequired(true);
   }
   public FormParameter type(String type) {
     this.setType(type);

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/HeaderParameter.java
Patch:
@@ -16,7 +16,6 @@ public class HeaderParameter extends AbstractParameter implements SerializablePa
 
   public HeaderParameter() {
     super.setIn("header");
-    super.setRequired(true);
   }
 
   public HeaderParameter property(Property property) {

File: modules/swagger-core/src/main/java/com/wordnik/swagger/util/SwaggerLoader.java
Patch:
@@ -22,7 +22,7 @@ public Swagger read(String location) {
         mapper.readValue(new File(location), Swagger.class);
     }
     catch (Exception e) {
-      e.printStackTrace();
+      System.out.println(e.getMessage());
       return null;
     }
   }

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithMapReturnValue.java
Patch:
@@ -22,7 +22,7 @@ public class ResourceWithMapReturnValue {
     @ApiResponse(code = 404, message = "object not found")})
   public Map<String, Integer> getTest(
       @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")
-      @DefaultValue("1")
+      @DefaultValue("5")
       @PathParam("id") String id,
       @QueryParam("limit") Integer limit
       ) throws WebApplicationException {

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithVoidReturns.java
Patch:
@@ -17,7 +17,7 @@ public class ResourceWithVoidReturns {
     @ApiResponse(code = 400, message = "Invalid ID", response = NotFoundModel.class),
     @ApiResponse(code = 404, message = "object not found")})
   public Response getTest(
-      @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")
+      @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]", defaultValue = "2")
       @DefaultValue("1")
       @PathParam("id") String id,
       @QueryParam("limit") Integer limit

File: modules/swagger-jaxrs/src/test/scala/resources/SimpleMethods.java
Patch:
@@ -1,5 +1,7 @@
 package resources;
 
+import com.wordnik.swagger.annotations.ApiParam;
+
 import javax.ws.rs.*;
 
 public class SimpleMethods {

File: modules/swagger-jaxrs/src/test/scala/resources/SimpleResource.java
Patch:
@@ -21,7 +21,7 @@ public class SimpleResource {
     @ApiResponse(code = 404, message = "object not found")})
   public Response getTest(
       @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")
-      @DefaultValue("1")
+      @DefaultValue("5")
       @PathParam("id") String id,
       @QueryParam("limit") Integer limit
       ) throws WebApplicationException {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/AbstractParameter.java
Patch:
@@ -1,7 +1,5 @@
 package com.wordnik.swagger.models.parameters;
 
-import com.wordnik.swagger.models.properties.*;
-
 import com.fasterxml.jackson.annotation.*;
 
 public abstract class AbstractParameter {

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithMapReturnValue.java
Patch:
@@ -22,7 +22,7 @@ public class ResourceWithMapReturnValue {
     @ApiResponse(code = 404, message = "object not found")})
   public Map<String, Integer> getTest(
       @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")
-      @DefaultValue("1")
+      @DefaultValue("5")
       @PathParam("id") String id,
       @QueryParam("limit") Integer limit
       ) throws WebApplicationException {

File: modules/swagger-jaxrs/src/test/scala/resources/ResourceWithVoidReturns.java
Patch:
@@ -17,7 +17,7 @@ public class ResourceWithVoidReturns {
     @ApiResponse(code = 400, message = "Invalid ID", response = NotFoundModel.class),
     @ApiResponse(code = 404, message = "object not found")})
   public Response getTest(
-      @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")
+      @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]", defaultValue = "2")
       @DefaultValue("1")
       @PathParam("id") String id,
       @QueryParam("limit") Integer limit

File: modules/swagger-jaxrs/src/test/scala/resources/SimpleMethods.java
Patch:
@@ -1,5 +1,7 @@
 package resources;
 
+import com.wordnik.swagger.annotations.ApiParam;
+
 import javax.ws.rs.*;
 
 public class SimpleMethods {

File: modules/swagger-jaxrs/src/test/scala/resources/SimpleResource.java
Patch:
@@ -21,7 +21,7 @@ public class SimpleResource {
     @ApiResponse(code = 404, message = "object not found")})
   public Response getTest(
       @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")
-      @DefaultValue("1")
+      @DefaultValue("5")
       @PathParam("id") String id,
       @QueryParam("limit") Integer limit
       ) throws WebApplicationException {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/AbstractParameter.java
Patch:
@@ -1,7 +1,5 @@
 package com.wordnik.swagger.models.parameters;
 
-import com.wordnik.swagger.models.properties.*;
-
 import com.fasterxml.jackson.annotation.*;
 
 public abstract class AbstractParameter {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/Path.java
Patch:
@@ -1,5 +1,6 @@
 package com.wordnik.swagger.models;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 
 @JsonPropertyOrder({ "get", "post", "put", "delete", "options", "patch"})
@@ -94,6 +95,7 @@ public void setOptions(Operation options) {
     this.options = options;
   }
 
+  @JsonIgnore
   public boolean isEmpty() {
     if(get == null && put == null && post == null && delete == null && patch == null && options == null)
       return true;

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/config/WebXMLReader.java
Patch:
@@ -21,7 +21,7 @@ public WebXMLReader(ServletConfig servletConfig) {
       title = "";
 
     if(basePath != null) {
-      String[] parts = basePath.split("//");
+      String[] parts = basePath.split("://");
       if(parts.length > 1) {
         int pos = parts[1].indexOf("/");
         if(pos >= 0) {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/CookieParameter.java
Patch:
@@ -13,7 +13,6 @@ public class CookieParameter extends AbstractParameter implements SerializablePa
 
   public CookieParameter() {
     super.setIn("cookie");
-    super.setRequired(true);
   }
 
   public CookieParameter property(Property property) {

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/FormParameter.java
Patch:
@@ -13,7 +13,6 @@ public class FormParameter extends AbstractParameter implements SerializablePara
 
   public FormParameter() {
     super.setIn("formData");
-    super.setRequired(true);
   }
   public FormParameter type(String type) {
     this.setType(type);

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/HeaderParameter.java
Patch:
@@ -13,7 +13,6 @@ public class HeaderParameter extends AbstractParameter implements SerializablePa
 
   public HeaderParameter() {
     super.setIn("header");
-    super.setRequired(true);
   }
 
   public HeaderParameter property(Property property) {

File: samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java
Patch:
@@ -24,7 +24,7 @@
 import javax.ws.rs.*;
 
 @Path("/owner")
-@Api(value = "/owner", description = "Operations about the owners", position = 1)
+@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
 @Produces("application/json")
 public class OwnerResource {
 	private String petId;

File: modules/swagger-core/src/main/java/com/wordnik/swagger/util/PropertyDeserializer.java
Patch:
@@ -128,7 +128,6 @@ Property propertyFromNode(JsonNode node) {
     args.put("exclusiveMaximum", exclusiveMinimum);
     args.put("uniqueItems", uniqueItems);
 
-
     detailNode = node.get("$ref");
     if(detailNode != null) {
       String ref = (String) ((TextNode) detailNode).asText();

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java
Patch:
@@ -59,6 +59,8 @@
      * <p/>
      * The `basePath` is derived automatically by Swagger. This property allows
      * overriding the default value if needed.
+     *
+     * @since 1.3.7
      */
     String basePath() default "";
 

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java
Patch:
@@ -206,7 +206,7 @@ public Operation parseMethod(Method method) {
         }
       }
     }
-    else {
+    if(responseClass == null) {
       // pick out response from method declaration
       responseClass = method.getReturnType();
     }

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/Swagger.java
Patch:
@@ -158,7 +158,7 @@ public Path getPath(String path) {
     return this.paths.get(path);
   }
 
-  public Map<String, SecurityDefinition> getSecurity() {
+  public Map<String, SecurityDefinition> getSecurityDefinition() {
     return securityDefinition;
   }
   public void setSecurityDefinition(Map<String, SecurityDefinition> securityDefinition) {

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java
Patch:
@@ -54,5 +54,5 @@
   /** authorizations required by this Api */
   // String authorizations() default "";
   /** authorizations required by this Api */
-  Authorization[] authorizations() default @Authorization("");
+  Authorization[] authorizations() default @Authorization(value = "", type = "");
 }

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java
Patch:
@@ -66,7 +66,7 @@
   //String authorizations() default "";
 
   /** authorizations required by this Api */
-  Authorization[] authorizations() default @Authorization("");
+  Authorization[] authorizations() default @Authorization(value = "", type = "");
 
   /**
    * Allows an operation to be marked as hidden

File: modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java
Patch:
@@ -25,5 +25,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Authorization {
   String value();
+  String type();
   AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
 }
\ No newline at end of file

File: modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/listing/ApiListingResource.java
Patch:
@@ -70,8 +70,9 @@ public Response getListingYaml(
         StringBuilder b = new StringBuilder();
         for(String part : parts) {
           int pos = part.indexOf("!<");
-          if(pos >= 0)
-            b.append(part.substring(0, pos));
+          int endPos = part.indexOf(">");
+          if(pos >= 0)  // dirty hack for https://github.com/FasterXML/jackson-dataformat-yaml/issues/22
+            b.append(part.replace("!<", "in: ").replace(">", ""));
           else
             b.append(part);
           b.append("\n");

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/Operation.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.wordnik.swagger.models.parameters.*;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -117,6 +119,7 @@ public void setOperationId(String operationId) {
     this.operationId = operationId;
   }
 
+  @JsonIgnore
   public List<Scheme> getSchemes() {
     return schemes;
   }

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/Parameter.java
Patch:
@@ -17,7 +17,9 @@
   @Type(value = QueryParameter.class, name = "query"),
   @Type(value = CookieParameter.class, name = "cookie")})
 public interface Parameter {
+  @JsonIgnore
   String getIn();
+  @JsonIgnore
   void setIn(String in);
 
   String getName();

File: modules/swagger-core/src/main/java/com/wordnik/swagger/converter/ModelConverters.java
Patch:
@@ -15,6 +15,7 @@ public class ModelConverters {
   public static Property readAsProperty(Class cls) {
     try {
       Property property = new ModelResolver(mapper).resolveProperty(cls);
+      return property;
     }
     catch (Exception e) {
       e.printStackTrace();

File: modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/AbstractParameter.java
Patch:
@@ -2,7 +2,9 @@
 
 import com.wordnik.swagger.models.properties.*;
 
+import com.fasterxml.jackson.annotation.*;
 public abstract class AbstractParameter {
+  @JsonIgnore
   String in;
   String name;
   String description;

File: modules/swagger-core/src/main/java/com/wordnik/swagger/models/ModelFactory.java
Patch:
@@ -93,7 +93,6 @@ public static Property convertProperty(JsonSchema schema) {
     }
     try{
       if(schema.isObjectSchema()) {
-        Json.printPretty(schema);
         ObjectSchema o = schema.asObjectSchema();
         ObjectSchema.AdditionalProperties add = o.getAdditionalProperties();
 
@@ -109,7 +108,7 @@ else if(schema.getId() != null ){
             com.wordnik.swagger.converter.ModelConverters.nameFromId(schema.getId())
           );
         }
-        System.out.println("it's an object schema");
+        System.out.println("unmatched object");
         Json.printPretty(schema);
         return null;
       }

File: modules/swagger-core/src/main/java/com/wordnik/swagger/converter/ModelConverters.java
Patch:
@@ -108,7 +108,7 @@ public static Map<String, Model> readAll(Class cls) {
     return models;
   }
 
-  static String nameFromId(String name) {
+  public static String nameFromId(String name) {
     if(name == null)
       return "NO_NAME";
     String parts[] = name.split(":");

File: modules/swagger-core/src/main/java/com/wordnik/swagger/models/parameters/Parameter.java
Patch:
@@ -3,8 +3,7 @@
 import com.wordnik.swagger.models.properties.Property;
 
 public interface Parameter {
-  Property getType();
-  void setType(Property type);
+  void setName(String name);
 
   String getDescription();
   void setDescription(String description);

File: modules/swagger-core/src/main/java/com/wordnik/swagger/models/properties/Property.java
Patch:
@@ -2,4 +2,5 @@
 
 public interface Property {
   String getType();
+  String getFormat();
 }
\ No newline at end of file

File: modules/swagger-core/src/test/scala/converter/models/ATM.java
Patch:
@@ -1,4 +1,4 @@
-package converter.model;
+package converter.models;
 
 import java.util.List;
 

File: modules/swagger-core/src/test/scala/converter/models/Currency.java
Patch:
@@ -1,4 +1,4 @@
-package converter.model;
+package converter.models;
 
 public enum Currency
 {

File: modules/swagger-core/src/test/scala/converter/models/ATM.java
Patch:
@@ -1,4 +1,4 @@
-package converter.model;
+package converter.models;
 
 import java.util.List;
 

File: modules/swagger-core/src/test/scala/converter/models/Currency.java
Patch:
@@ -1,4 +1,4 @@
-package converter.model;
+package converter.models;
 
 public enum Currency
 {

File: samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -29,8 +29,9 @@ public class Bootstrap extends HttpServlet {
       "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
     );
 
-    List<String> scopes = new ArrayList<String>();
-    scopes.add("PUBLIC");
+    List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
+    scopes.add(new AuthorizationScope("email", "Access to your email address"));
+    scopes.add(new AuthorizationScope("pets", "Access to your pets"));
 
     List<GrantType> grantTypes = new ArrayList<GrantType>();
 

File: samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -42,7 +42,7 @@ public class Bootstrap extends HttpServlet {
 
     AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();
 
-    ConfigFactory.config().addAuthorization(oauth);
+//  ConfigFactory.config().addAuthorization(oauth);
     ConfigFactory.config().setApiInfo(info);
   }
 }

File: samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/Bootstrap.java
Patch:
@@ -42,7 +42,7 @@ public class Bootstrap extends HttpServlet {
 
     AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();
 
-    ConfigFactory.config().addAuthorization(oauth);
+//  ConfigFactory.config().addAuthorization(oauth);
     ConfigFactory.config().setApiInfo(info);
   }
 }

File: modules/swagger-jaxrs/src/main/scala/com/wordnik/swagger/jaxrs/ApiHelpMessageBodyWriter.java
Patch:
@@ -70,9 +70,8 @@ public long getSize(Documentation arg0, Class<?> arg1, Type arg2, Annotation[] a
     public void writeTo(Documentation documentation, Class<?> type, Type genericType, Annotation[] annotations,
                         MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)
             throws IOException, WebApplicationException {
-        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(entityStream));
-        bw.write(getStringRepresentation(documentation).getBytes());
-        bw.flush();
+        entityStream.write(getStringRepresentation(documentation).getBytes());
+        entityStream.flush();
     }
 
     public boolean isWriteable(Class<?> arg0, Type arg1, Annotation[] arg2,

File: modules/swagger-jaxrs/src/main/scala/com/wordnik/swagger/jaxrs/ApiHelpMessageBodyWriter.java
Patch:
@@ -70,9 +70,8 @@ public long getSize(Documentation arg0, Class<?> arg1, Type arg2, Annotation[] a
     public void writeTo(Documentation documentation, Class<?> type, Type genericType, Annotation[] annotations,
                         MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream)
             throws IOException, WebApplicationException {
-        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(entityStream));
-        bw.write(getStringRepresentation(documentation).getBytes());
-        bw.flush();
+        entityStream.write(getStringRepresentation(documentation).getBytes());
+        entityStream.flush();
     }
 
     public boolean isWriteable(Class<?> arg0, Type arg1, Annotation[] arg2,

File: samples/java-alt-resource-listing/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java
Patch:
@@ -101,7 +101,7 @@ private boolean isPathSecure(String apiPath, boolean isResource) {
 	}
 
 	private void initialize() {
-	    //initialize classes (no .format here)
+	  //initialize classes (no .format here)
 		classSecurityAnotations.put("/user", false);
 		classSecurityAnotations.put("/pet", false);
 		classSecurityAnotations.put("/store", true);
@@ -116,8 +116,8 @@ private void initialize() {
 		methodSecurityAnotations.put("DELETE:/store/order/{orderId}", true);
 		methodSecurityAnotations.put("POST:/store/order", true);
 		methodSecurityAnotations.put("POST:/user", false);
-        methodSecurityAnotations.put("POST:/user/createWithArray", false);
-        methodSecurityAnotations.put("POST:/user/createWithList", false);
+    methodSecurityAnotations.put("POST:/user/createWithArray", false);
+    methodSecurityAnotations.put("POST:/user/createWithList", false);
 		methodSecurityAnotations.put("PUT:/user/{username}", true);
 		methodSecurityAnotations.put("DELETE:/user/{username}", true);
 		methodSecurityAnotations.put("GET:/user/{username}", false);

File: samples/java-jaxrs-ex2/src/main/java/com/wordnik/swagger/sample/resource/AbstractTrackingResource.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractTrackingResource<T> extends JavaHelp {
 	@ApiErrors(value = { @ApiError(code = 400, reason = "Invalid ID supplied"),
 			@ApiError(code = 404, reason = "Pet not found") })
 	public Response getPetById(
-			T t,
+			@ApiParam(value = "whatever data type", required = true) T t,
 			@ApiParam(value = "ID to be used", required = true) @PathParam("clientId") String clientId)
 			throws NotFoundException {
 		if (null != clientId) {

File: samples/java-jaxrs-ex2/src/main/java/com/wordnik/swagger/sample/resource/AbstractTrackingResource.java
Patch:
@@ -30,12 +30,13 @@
 @Produces({ MediaType.APPLICATION_JSON })
 @Consumes({ MediaType.APPLICATION_JSON })
 public abstract class AbstractTrackingResource<T> extends JavaHelp {
-@GET
+@POST
 	@Path("/{clientId}")
 	@ApiOperation(value = "Find by ID", notes = "Returns a T", responseClass = "com.wordnik.swagger.sample.model.Pet")
 	@ApiErrors(value = { @ApiError(code = 400, reason = "Invalid ID supplied"),
 			@ApiError(code = 404, reason = "Pet not found") })
 	public Response getPetById(
+			T t,
 			@ApiParam(value = "ID to be used", required = true) @PathParam("clientId") String clientId)
 			throws NotFoundException {
 		if (null != clientId) {

File: samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/StoreData.java
Patch:
@@ -57,7 +57,7 @@ public void placeOrder(Order order) {
 	}
 
 	public void deleteOrder(long orderId) {
-		for (Order order : orders) {
+		for (Order order : new ArrayList<Order>(orders)) {
 			if (order.getId() == orderId) {
 				orders.remove(order);
 			}

File: src/main/scala/com/wordnik/swagger/core/ApiOperation.java
Patch:
@@ -26,7 +26,7 @@
 public @interface ApiOperation {
     String value();
     String responseClass() default "ok";
-    boolean mutiValueResponse() default false; //to indicate if return type will contain one or more of the response value
+    boolean multiValueResponse() default false; //to indicate if return type will contain one or more of the response value
     String notes() default "";
     String tags() default "";
 }

File: src/main/scala/com/wordnik/swagger/core/ApiOperation.java
Patch:
@@ -23,5 +23,4 @@
 
     String tags() default "";
 
-    int access() default ApiValues.INHERIT_FROM_ENDPOINT;
 }

