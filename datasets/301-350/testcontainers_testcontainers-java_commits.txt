File: core/src/test/java/org/testcontainers/containers/GenericContainerTest.java
Patch:
@@ -52,7 +52,7 @@ public class GenericContainerTest {
     public void shouldReportOOMAfterWait() {
         Info info = DockerClientFactory.instance().client().infoCmd().exec();
         // Poor man's rootless Docker detection :D
-        Assumptions.assumeThat(info.getSecurityOptions()).doesNotContain("rootless");
+        Assumptions.assumeThat(info.getSecurityOptions()).doesNotContain("name=rootless");
         try (
             GenericContainer<?> container = new GenericContainer<>(TestImages.TINY_IMAGE)
                 .withStartupCheckStrategy(new NoopStartupCheckStrategy())

File: core/src/test/java/org/testcontainers/dockerclient/EnvironmentAndSystemPropertyClientProviderStrategyTest.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Properties;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assumptions.assumeThat;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.ArgumentMatchers.isNull;
@@ -147,6 +148,8 @@ public void applicableWhenIgnoringUserPropertiesAndConfigured() {
 
     @Test
     public void notApplicableWhenIgnoringUserPropertiesAndNotConfigured() {
+        assumeThat(System.getenv("DOCKER_HOST")).isNull();
+
         Mockito
             .doReturn("autoIgnoringUserProperties")
             .when(TestcontainersConfiguration.getInstance())

File: modules/redpanda/src/test/java/org/testcontainers/redpanda/CompatibleImageTest.java
Patch:
@@ -15,7 +15,7 @@ public CompatibleImageTest(String image) {
 
     @Parameterized.Parameters(name = "{0}")
     public static String[] image() {
-        return new String[] { "docker.redpanda.com/vectorized/redpanda:v22.2.1", "redpandadata/redpanda:v22.2.1" };
+        return new String[] { "docker.redpanda.com/redpandadata/redpanda:v22.2.1", "redpandadata/redpanda:v22.2.1" };
     }
 
     @Test

File: modules/solr/src/main/java/org/testcontainers/containers/SolrContainer.java
Patch:
@@ -104,7 +104,7 @@ public int getZookeeperPort() {
     @SneakyThrows
     protected void configure() {
         if (configuration.getSolrSchema() != null && configuration.getSolrConfiguration() == null) {
-            throw new IllegalStateException("Solr needs to have a configuration is you want to use a schema");
+            throw new IllegalStateException("Solr needs to have a configuration if you want to use a schema");
         }
         // Generate Command Builder
         String command = "solr -f";

File: core/src/test/java/org/testcontainers/utility/RegistryAuthLocatorTest.java
Patch:
@@ -241,7 +241,7 @@ public void lookupAuthConfigWithCredentialsNotFound() throws URISyntaxException,
 
         assertThat(discoveredMessage)
             .as("Not correct message discovered")
-            .isEqualTo("Fake credentials not found on credentials store 'https://not.a.real.registry/url'");
+            .isEqualTo("Fake credentials not found on credentials store 'registry2.example.com'");
     }
 
     @Test

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -550,6 +550,7 @@ private void tryStart() {
                 } else {
                     logger().error("There are no stdout/stderr logs available for the failed container");
                 }
+                stop();
             }
 
             throw new ContainerLaunchException("Could not create/start container", e);

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -217,7 +217,7 @@ protected boolean test() {
                 .untilAsserted(() -> socket.connect(socketAddress, (int) timeout.toMillis()));
             return true;
         } catch (Exception e) {
-            log.warn("DOCKER_HOST {} is not listening", dockerHost);
+            log.warn("DOCKER_HOST {} is not listening", dockerHost, e);
             return false;
         }
     }

File: modules/clickhouse/src/test/java/org/testcontainers/ClickhouseTestImages.java
Patch:
@@ -3,6 +3,5 @@
 import org.testcontainers.utility.DockerImageName;
 
 public interface ClickhouseTestImages {
-    DockerImageName YANDEX_CLICKHOUSE_IMAGE = DockerImageName.parse("yandex/clickhouse-server:18.10.3");
     DockerImageName CLICKHOUSE_IMAGE = DockerImageName.parse("clickhouse/clickhouse-server:21.9.2-alpine");
 }

File: modules/clickhouse/src/test/java/org/testcontainers/junit/clickhouse/SimpleClickhouseTest.java
Patch:
@@ -26,7 +26,6 @@ public SimpleClickhouseTest(DockerImageName imageName) {
     public static Object[][] data() {
         return new Object[][] { //
             { ClickhouseTestImages.CLICKHOUSE_IMAGE },
-            { ClickhouseTestImages.YANDEX_CLICKHOUSE_IMAGE },
         };
     }
 

File: modules/cassandra/src/main/java/org/testcontainers/cassandra/CassandraContainer.java
Patch:
@@ -159,7 +159,7 @@ public String getPassword() {
     /**
      * Retrieve an {@link InetSocketAddress} for connecting to the Cassandra container via the driver.
      *
-     * @return A InetSocketAddrss representation of this Cassandra container's host and port.
+     * @return A InetSocketAddress representation of this Cassandra container's host and port.
      */
     public InetSocketAddress getContactPoint() {
         return new InetSocketAddress(getHost(), getMappedPort(CQL_PORT));

File: modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java
Patch:
@@ -228,7 +228,7 @@ public static Cluster getCluster(ContainerState containerState) {
     /**
      * Retrieve an {@link InetSocketAddress} for connecting to the Cassandra container via the driver.
      *
-     * @return A InetSocketAddrss representation of this Cassandra container's host and port.
+     * @return A InetSocketAddress representation of this Cassandra container's host and port.
      */
     public InetSocketAddress getContactPoint() {
         return new InetSocketAddress(getHost(), getMappedPort(CQL_PORT));

File: core/src/main/java/org/testcontainers/containers/ComposeContainer.java
Patch:
@@ -171,6 +171,7 @@ public void stop() {
                 }
                 this.composeDelegate.runWithCompose(this.localCompose, cmd, this.env, this.filesInDirectory);
             } finally {
+                this.composeDelegate.clear();
                 this.project = this.composeDelegate.randomProjectId();
             }
         }

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -177,6 +177,7 @@ public void stop() {
                 }
                 this.composeDelegate.runWithCompose(this.localCompose, cmd, this.env, this.filesInDirectory);
             } finally {
+                this.composeDelegate.clear();
                 this.project = this.composeDelegate.randomProjectId();
             }
         }

File: core/src/main/java/org/testcontainers/images/RemoteDockerImage.java
Patch:
@@ -4,6 +4,7 @@
 import com.github.dockerjava.api.command.PullImageCmd;
 import com.github.dockerjava.api.exception.DockerClientException;
 import com.github.dockerjava.api.exception.InternalServerErrorException;
+import com.github.dockerjava.api.exception.NotFoundException;
 import com.google.common.util.concurrent.Futures;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
@@ -155,7 +156,7 @@ private TimeLimitedLoggedPullImageResultCallback pullImage(PullImageCmd pullImag
         throws InterruptedException {
         try {
             return pullImageCmd.exec(new TimeLimitedLoggedPullImageResultCallback(logger)).awaitCompletion();
-        } catch (DockerClientException e) {
+        } catch (DockerClientException | NotFoundException e) {
             // Try to fallback to x86
             return pullImageCmd
                 .withPlatform("linux/amd64")

File: modules/kafka/src/main/java/org/testcontainers/kafka/ConfluentKafkaContainer.java
Patch:
@@ -45,9 +45,7 @@ public ConfluentKafkaContainer(DockerImageName dockerImageName) {
     protected void configure() {
         KafkaHelper.resolveListeners(this, this.listeners);
 
-        String firstNetworkAlias = getNetworkAliases().stream().findFirst().orElse(null);
-        String networkAlias = getNetwork() != null ? firstNetworkAlias : "localhost";
-        String controllerQuorumVoters = String.format("%s@%s:9094", getEnvMap().get("KAFKA_NODE_ID"), networkAlias);
+        String controllerQuorumVoters = String.format("%s@localhost:9094", getEnvMap().get("KAFKA_NODE_ID"));
         withEnv("KAFKA_CONTROLLER_QUORUM_VOTERS", controllerQuorumVoters);
     }
 

File: modules/kafka/src/main/java/org/testcontainers/kafka/KafkaContainer.java
Patch:
@@ -52,9 +52,7 @@ public KafkaContainer(DockerImageName dockerImageName) {
     protected void configure() {
         KafkaHelper.resolveListeners(this, this.listeners);
 
-        String firstNetworkAlias = getNetworkAliases().stream().findFirst().orElse(null);
-        String networkAlias = getNetwork() != null ? firstNetworkAlias : "localhost";
-        String controllerQuorumVoters = String.format("%s@%s:9094", getEnvMap().get("KAFKA_NODE_ID"), networkAlias);
+        String controllerQuorumVoters = String.format("%s@localhost:9094", getEnvMap().get("KAFKA_NODE_ID"));
         withEnv("KAFKA_CONTROLLER_QUORUM_VOTERS", controllerQuorumVoters);
     }
 

File: modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java
Patch:
@@ -24,7 +24,10 @@
  * Supported image: {@code cassandra}
  * <p>
  * Exposed ports: 9042
+ *
+ * @deprecated use {@link org.testcontainers.cassandra.CassandraContainer} instead.
  */
+@Deprecated
 public class CassandraContainer<SELF extends CassandraContainer<SELF>> extends GenericContainer<SELF> {
 
     private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("cassandra");

File: modules/cassandra/src/main/java/org/testcontainers/containers/delegate/CassandraDatabaseDelegate.java
Patch:
@@ -13,9 +13,12 @@
 
 /**
  * Cassandra database delegate
+ *
+ * @deprecated use {@link org.testcontainers.cassandra.delegate.CassandraDatabaseDelegate} instead.
  */
 @Slf4j
 @RequiredArgsConstructor
+@Deprecated
 public class CassandraDatabaseDelegate extends AbstractDatabaseDelegate<Session> {
 
     private final ContainerState container;

File: modules/cassandra/src/main/java/org/testcontainers/containers/wait/CassandraQueryWaitStrategy.java
Patch:
@@ -12,7 +12,10 @@
 
 /**
  * Waits until Cassandra returns its version
+ *
+ * @deprecated use {@link org.testcontainers.cassandra.wait.CassandraQueryWaitStrategy} instead.
  */
+@Deprecated
 public class CassandraQueryWaitStrategy extends AbstractWaitStrategy {
 
     private static final String SELECT_VERSION_QUERY = "SELECT release_version FROM system.local";

File: core/src/main/java/org/testcontainers/containers/ComposeContainer.java
Patch:
@@ -161,7 +161,8 @@ public void stop() {
                 this.composeDelegate.getAmbassadorContainer().stop();
 
                 // Kill the services using docker
-                String cmd = "compose down";
+                String cmd = ComposeCommand.getDownCommand(ComposeDelegate.ComposeVersion.V2, this.options);
+
                 if (removeVolumes) {
                     cmd += " -v";
                 }

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -167,7 +167,7 @@ public void stop() {
                 this.composeDelegate.getAmbassadorContainer().stop();
 
                 // Kill the services using docker-compose
-                String cmd = "down";
+                String cmd = ComposeCommand.getDownCommand(ComposeDelegate.ComposeVersion.V1, this.options);
 
                 if (removeVolumes) {
                     cmd += " -v";

File: core/src/test/java/org/testcontainers/images/builder/ImageFromDockerfileTest.java
Patch:
@@ -32,6 +32,7 @@ public void shouldNotAddSessionLabelIfDeleteOnExitIsFalse() {
         )
             .withDockerfileFromBuilder(it -> it.from("scratch"));
         String imageId = image.resolve();
+
         DockerClient dockerClient = DockerClientFactory.instance().client();
 
         try {

File: modules/localstack/src/test/java/org/testcontainers/containers/localstack/LegacyModeTest.java
Patch:
@@ -37,8 +37,8 @@ public static Iterable<Object[]> constructors() {
                     { "0.12", new LocalStackContainer(LocalstackTestImages.LOCALSTACK_0_12_IMAGE) },
                     { "0.11", new LocalStackContainer(LocalstackTestImages.LOCALSTACK_0_11_IMAGE) },
                     {
-                        "0.7 with legacy = off",
-                        new LocalStackContainer(LocalstackTestImages.LOCALSTACK_0_7_IMAGE, false),
+                        "0.11 with legacy = off",
+                        new LocalStackContainer(LocalstackTestImages.LOCALSTACK_0_11_IMAGE, false),
                     },
                 }
             );

File: modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackTestImages.java
Patch:
@@ -4,7 +4,6 @@
 
 public interface LocalstackTestImages {
     DockerImageName LOCALSTACK_IMAGE = DockerImageName.parse("localstack/localstack:0.12.8");
-    DockerImageName LOCALSTACK_0_7_IMAGE = LOCALSTACK_IMAGE.withTag("0.7.0");
     DockerImageName LOCALSTACK_0_10_IMAGE = LOCALSTACK_IMAGE.withTag("0.10.7");
     DockerImageName LOCALSTACK_0_11_IMAGE = LOCALSTACK_IMAGE.withTag("0.11.3");
     DockerImageName LOCALSTACK_0_12_IMAGE = LOCALSTACK_IMAGE.withTag("0.12.8");

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -893,7 +893,7 @@ protected WaitStrategy getWaitStrategy() {
 
     @Override
     public void setWaitStrategy(WaitStrategy waitStrategy) {
-        this.containerDef.setWaitStrategy(waitStrategy);
+        this.waitStrategy = waitStrategy;
     }
 
     /**

File: core/src/test/java/org/testcontainers/containers/JibTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.containers;
 
 import com.github.dockerjava.api.command.InspectImageResponse;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.testcontainers.DockerClientFactory;
 import org.testcontainers.containers.output.OutputFrame.OutputType;
@@ -12,6 +13,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@Ignore("Jib doesn't work with latest Docker version provided by GH Actions. Jib should be updated")
 public class JibTest {
 
     @Test

File: core/src/test/java/org/testcontainers/dockerclient/ImagePullTest.java
Patch:
@@ -19,9 +19,9 @@ public static String[] parameters() {
             "alpine:3.17",
             "alpine", // omitting the tag should work and default to latest
             "alpine@sha256:1775bebec23e1f3ce486989bfc9ff3c4e951690df84aa9f926497d82f2ffca9d",
-            "quay.io/testcontainers/ryuk:latest",
-            "quay.io/testcontainers/ryuk:0.2.3",
-            "quay.io/testcontainers/ryuk@sha256:bb5a635cac4bd96c93cc476969ce11dc56436238ec7cd028d0524462f4739dd9",
+            "docker.io/testcontainers/ryuk:latest",
+            "docker.io/testcontainers/ryuk:0.7.0",
+            "docker.io/testcontainers/ryuk@sha256:bcbee39cd601396958ba1bd06ea14ad64ce0ea709de29a427d741d1f5262080a",
             //            "ibmcom/db2express-c", // Big image for testing with slow networks
         };
     }

File: docs/examples/junit4/generic/src/test/java/generic/DependsOnTest.java
Patch:
@@ -13,7 +13,9 @@ public class DependsOnTest {
     public GenericContainer<?> redis = new GenericContainer<>("redis:6-alpine").withExposedPorts(6379);
 
     @Rule
-    public GenericContainer<?> nginx = new GenericContainer<>("nginx:1.9.4").dependsOn(redis).withExposedPorts(80);
+    public GenericContainer<?> nginx = new GenericContainer<>("nginx:1.27.0-alpine3.19-slim")
+        .dependsOn(redis)
+        .withExposedPorts(80);
 
     // }
 

File: modules/chromadb/src/test/java/org/testcontainers/chromadb/ChromaDBContainerTest.java
Patch:
@@ -10,7 +10,7 @@ public class ChromaDBContainerTest {
     @Test
     public void test() {
         try ( // container {
-            ChromaDBContainer chroma = new ChromaDBContainer("chromadb/chroma:0.4.22")
+            ChromaDBContainer chroma = new ChromaDBContainer("chromadb/chroma:0.4.23")
             // }
         ) {
             chroma.start();

File: modules/dynalite/src/test/java/org/testcontainers/dynamodb/DynaliteContainerTest.java
Patch:
@@ -9,12 +9,14 @@
 import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
 import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;
 import com.amazonaws.services.dynamodbv2.model.TableDescription;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.testcontainers.utility.DockerImageName;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+@Ignore("Image is not compatible with the latest Docker version provided by GH Actions")
 public class DynaliteContainerTest {
 
     private static final DockerImageName DYNALITE_IMAGE = DockerImageName.parse(

File: modules/nginx/src/test/java/org/testcontainers/junit/SimpleNginxTest.java
Patch:
@@ -22,7 +22,7 @@
 
 public class SimpleNginxTest {
 
-    private static final DockerImageName NGINX_IMAGE = DockerImageName.parse("nginx:1.9.4");
+    private static final DockerImageName NGINX_IMAGE = DockerImageName.parse("nginx:1.27.0-alpine3.19-slim");
 
     private static String tmpDirectory = System.getProperty("user.home") + "/.tmp-test-container";
 

File: modules/selenium/src/test/java/org/testcontainers/junit/SeleniumStartTest.java
Patch:
@@ -15,7 +15,7 @@ public class SeleniumStartTest {
 
     @Parameterized.Parameters(name = "tag: {0}")
     public static String[] data() {
-        return new String[] { "4.0.0", "3.4.0", "2.53.0", "2.45.0" };
+        return new String[] { "4.0.0", "3.4.0", "2.53.0" };
     }
 
     @Parameterized.Parameter

File: modules/kafka/src/main/java/org/testcontainers/kafka/KafkaContainer.java
Patch:
@@ -24,7 +24,7 @@ public class KafkaContainer extends GenericContainer<KafkaContainer> {
 
     private static final String DEFAULT_INTERNAL_TOPIC_RF = "1";
 
-    private static final String STARTER_SCRIPT = "/testcontainers_start.sh";
+    private static final String STARTER_SCRIPT = "/tmp/testcontainers_start.sh";
 
     private static final String DEFAULT_CLUSTER_ID = "4L6g3nShT-eMCtK--X86sw";
 

File: modules/jdbc-test/src/main/java/org/testcontainers/jdbc/AbstractJDBCDriverTest.java
Patch:
@@ -130,7 +130,8 @@ private void performTestForJDBCParamUsage(HikariDataSource dataSource) throws SQ
         if (
             databaseType.equalsIgnoreCase("postgresql") ||
             databaseType.equalsIgnoreCase("postgis") ||
-            databaseType.equalsIgnoreCase("timescaledb")
+            databaseType.equalsIgnoreCase("timescaledb") ||
+            databaseType.equalsIgnoreCase("pgvector")
         ) {
             databaseQuery = "SELECT CURRENT_DATABASE()";
         }

File: modules/weaviate/src/test/java/org/testcontainers/weaviate/WeaviateContainerTest.java
Patch:
@@ -19,7 +19,7 @@ public class WeaviateContainerTest {
     @Test
     public void testWeaviate() {
         try ( // container {
-            WeaviateContainer weaviate = new WeaviateContainer("semitechnologies/weaviate:1.24.5")
+            WeaviateContainer weaviate = new WeaviateContainer("cr.weaviate.io/semitechnologies/weaviate:1.24.5")
             // }
         ) {
             weaviate.start();

File: core/src/main/java/org/testcontainers/containers/ComposeContainer.java
Patch:
@@ -165,7 +165,7 @@ public void stop() {
                 if (removeImages != null) {
                     cmd += " --rmi " + removeImages.dockerRemoveImagesType();
                 }
-                this.composeDelegate.runWithCompose(this.localCompose, cmd);
+                this.composeDelegate.runWithCompose(this.localCompose, cmd, this.env);
             } finally {
                 this.project = this.composeDelegate.randomProjectId();
             }

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -172,7 +172,7 @@ public void stop() {
                 if (removeImages != null) {
                     cmd += " --rmi " + removeImages.dockerRemoveImagesType();
                 }
-                this.composeDelegate.runWithCompose(this.localCompose, cmd);
+                this.composeDelegate.runWithCompose(this.localCompose, cmd, this.env);
             } finally {
                 this.project = this.composeDelegate.randomProjectId();
             }

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -77,7 +77,7 @@ static Map<String, String> markerLabels() {
         return Collections.unmodifiableMap(labels);
     }
 
-    private static final DockerImageName TINY_IMAGE = DockerImageName.parse("alpine:3.16");
+    private static final DockerImageName TINY_IMAGE = DockerImageName.parse("alpine:3.17");
 
     private static DockerClientFactory instance;
 

File: core/src/test/java/org/testcontainers/TestImages.java
Patch:
@@ -6,7 +6,7 @@ public interface TestImages {
     DockerImageName REDIS_IMAGE = DockerImageName.parse("redis:3.0.2");
     DockerImageName RABBITMQ_IMAGE = DockerImageName.parse("rabbitmq:3.5.3");
     DockerImageName MONGODB_IMAGE = DockerImageName.parse("mongo:3.1.5");
-    DockerImageName ALPINE_IMAGE = DockerImageName.parse("alpine:3.16");
+    DockerImageName ALPINE_IMAGE = DockerImageName.parse("alpine:3.17");
     DockerImageName DOCKER_REGISTRY_IMAGE = DockerImageName.parse("registry:2.7.0");
-    DockerImageName TINY_IMAGE = DockerImageName.parse("alpine:3.16");
+    DockerImageName TINY_IMAGE = DockerImageName.parse("alpine:3.17");
 }

File: core/src/test/java/org/testcontainers/containers/DockerComposeFilesTest.java
Patch:
@@ -27,6 +27,6 @@ public void shouldGetDependencyImagesWhenOverriding() {
             )
         );
         assertThat(dockerComposeFiles.getDependencyImages())
-            .containsExactlyInAnyOrder("alpine:3.16", "redis:b", "mysql:b", "aservice:latest");
+            .containsExactlyInAnyOrder("alpine:3.17", "redis:b", "mysql:b", "aservice:latest");
     }
 }

File: core/src/test/java/org/testcontainers/containers/GenericContainerTest.java
Patch:
@@ -229,7 +229,7 @@ public void shouldReturnTheProvidedImage() {
         GenericContainer container = new GenericContainer(TestImages.REDIS_IMAGE);
         assertThat(container.getImage().get()).isEqualTo("redis:3.0.2");
         container.setImage(new RemoteDockerImage(TestImages.ALPINE_IMAGE));
-        assertThat(container.getImage().get()).isEqualTo("alpine:3.16");
+        assertThat(container.getImage().get()).isEqualTo("alpine:3.17");
     }
 
     @Test

File: core/src/test/java/org/testcontainers/dockerclient/ImagePullTest.java
Patch:
@@ -16,7 +16,7 @@ public class ImagePullTest {
     public static String[] parameters() {
         return new String[] {
             "alpine:latest",
-            "alpine:3.16",
+            "alpine:3.17",
             "alpine", // omitting the tag should work and default to latest
             "alpine@sha256:1775bebec23e1f3ce486989bfc9ff3c4e951690df84aa9f926497d82f2ffca9d",
             "quay.io/testcontainers/ryuk:latest",

File: core/src/test/java/org/testcontainers/junit/DockerfileTest.java
Patch:
@@ -38,7 +38,7 @@ protected void configure(BuildImageCmd buildImageCmd) {
                 super.configure(buildImageCmd);
 
                 List<String> dockerfile = Arrays.asList(
-                    "FROM alpine:3.16",
+                    "FROM alpine:3.17",
                     "RUN echo 'hello from Docker build process'",
                     "CMD yes"
                 );
@@ -58,7 +58,7 @@ public void dockerfileBuilderWorks() {
             .withFileFromString("folder/someFile.txt", "hello")
             .withDockerfileFromBuilder(builder -> {
                 builder
-                    .from("alpine:3.16")
+                    .from("alpine:3.17")
                     .workDir("/app")
                     .add("test.txt", "test file.txt")
                     .run("ls", "-la", "/app/test file.txt")
@@ -101,7 +101,7 @@ public int getFileMode() {
             )
             .withDockerfileFromBuilder(builder -> {
                 builder
-                    .from("alpine:3.16") //
+                    .from("alpine:3.17") //
                     .copy("someFile.txt", "/someFile.txt")
                     .cmd("stat -c \"%a\" /someFile.txt");
             });

File: core/src/test/java/org/testcontainers/junit/FixedHostPortContainerTest.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class FixedHostPortContainerTest {
 
-    private static final String TEST_IMAGE = "alpine:3.16";
+    private static final String TEST_IMAGE = "alpine:3.17";
 
     /**
      * Default http server port (just something different from default)

File: core/src/test/java/org/testcontainers/utility/DirectoryTarResourceTest.java
Patch:
@@ -22,7 +22,7 @@ public void simpleRecursiveFileTest() {
             new ImageFromDockerfile()
                 .withDockerfileFromBuilder(builder -> {
                     builder
-                        .from("alpine:3.16")
+                        .from("alpine:3.17")
                         .copy("/tmp/foo", "/foo")
                         .cmd("cat /foo/test/resources/test-recursive-file.txt")
                         .build();
@@ -47,7 +47,7 @@ public void simpleRecursiveFileWithPermissionTest() {
                 new ImageFromDockerfile()
                     .withDockerfileFromBuilder(builder -> {
                         builder
-                            .from("alpine:3.16") //
+                            .from("alpine:3.17") //
                             .copy("/tmp/foo", "/foo")
                             .cmd("ls", "-al", "/")
                             .build();
@@ -75,7 +75,7 @@ public void simpleRecursiveClasspathResourceTest() {
                 new ImageFromDockerfile()
                     .withDockerfileFromBuilder(builder -> {
                         builder
-                            .from("alpine:3.16") //
+                            .from("alpine:3.17") //
                             .copy("/tmp/foo", "/foo")
                             .cmd("ls -lRt /foo")
                             .build();

File: docs/examples/junit4/generic/src/test/java/generic/ContainerCreationTest.java
Patch:
@@ -20,7 +20,7 @@ public class ContainerCreationTest {
     // }
     // spotless:on
 
-    public static final DockerImageName ALPINE_IMAGE = DockerImageName.parse("alpine:3.16");
+    public static final DockerImageName ALPINE_IMAGE = DockerImageName.parse("alpine:3.17");
 
     // spotless:off
     // withOptions {

File: docs/examples/junit4/generic/src/test/java/generic/ContainerLabelTest.java
Patch:
@@ -9,15 +9,15 @@
 public class ContainerLabelTest {
 
     // single_label {
-    public GenericContainer containerWithLabel = new GenericContainer(DockerImageName.parse("alpine:3.16"))
+    public GenericContainer containerWithLabel = new GenericContainer(DockerImageName.parse("alpine:3.17"))
         .withLabel("key", "value");
     // }
 
     // multiple_labels {
     private Map<String, String> mapOfLabels = new HashMap<>();
     // populate map, e.g. mapOfLabels.put("key1", "value1");
 
-    public GenericContainer containerWithMultipleLabels = new GenericContainer(DockerImageName.parse("alpine:3.16"))
+    public GenericContainer containerWithMultipleLabels = new GenericContainer(DockerImageName.parse("alpine:3.17"))
         .withLabels(mapOfLabels);
     // }
 }

File: docs/examples/junit4/generic/src/test/java/generic/ExecTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ExecTest {
 
     @Rule
-    public GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse("alpine:3.16"))
+    public GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse("alpine:3.17"))
         .withCommand("top");
 
     @Test

File: modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java
Patch:
@@ -95,7 +95,7 @@ protected void containerIsStarted(InspectContainerResponse containerInfo, boolea
     }
 
     /**
-     * Gets a connection string url, unlike {@link #getReplicaSetUrl} this does point to a
+     * Gets a connection string url, unlike {@link #getReplicaSetUrl} this does not point to a
      * database
      * @return a connection url pointing to a mongodb instance
      */

File: modules/redpanda/src/main/java/org/testcontainers/redpanda/RedpandaContainer.java
Patch:
@@ -92,15 +92,15 @@ public RedpandaContainer(DockerImageName imageName) {
 
         withExposedPorts(REDPANDA_PORT, REDPANDA_ADMIN_PORT, SCHEMA_REGISTRY_PORT, REST_PROXY_PORT);
         withCreateContainerCmdModifier(cmd -> {
-            cmd.withEntrypoint();
+            cmd.withEntrypoint("/entrypoint-tc.sh");
             cmd.withUser("root:root");
         });
         waitingFor(Wait.forLogMessage(".*Successfully started Redpanda!.*", 1));
         withCopyFileToContainer(
             MountableFile.forClasspathResource("testcontainers/entrypoint-tc.sh", 0700),
             "/entrypoint-tc.sh"
         );
-        withCommand("/entrypoint-tc.sh", "redpanda", "start", "--mode=dev-container", "--smp=1", "--memory=1G");
+        withCommand("redpanda", "start", "--mode=dev-container", "--smp=1", "--memory=1G");
     }
 
     @Override

File: modules/ollama/src/test/java/org/testcontainers/ollama/OllamaContainerTest.java
Patch:
@@ -44,7 +44,7 @@ public void downloadModelAndCommitToImage() throws IOException, InterruptedExcep
             // }
         }
         try (
-            // containerSubstitute {
+            // substitute {
             OllamaContainer ollama = new OllamaContainer(
                 DockerImageName.parse(newImageName).asCompatibleSubstituteFor("ollama/ollama")
             )

File: modules/openfga/src/test/java/org/testcontainers/openfga/OpenFGAContainerTest.java
Patch:
@@ -15,7 +15,7 @@ public class OpenFGAContainerTest {
 
     @Test
     public void withDefaultConfig() throws FgaInvalidParameterException, ExecutionException, InterruptedException {
-        try ( // container
+        try ( // container {
             OpenFGAContainer openfga = new OpenFGAContainer("openfga/openfga:v1.4.3")
             // }
         ) {

File: modules/hivemq/src/main/java/org/testcontainers/hivemq/HiveMQContainer.java
Patch:
@@ -134,9 +134,9 @@ protected void configure() {
         setCommand(
             "-c",
             removeCommand +
-            "cp -r '/opt/hivemq/temp-extensions/'* /opt/hivemq/extensions/ " +
-            "; chmod -R 777 /opt/hivemq/extensions " +
-            "&& /opt/docker-entrypoint.sh /opt/hivemq/bin/run.sh"
+            "cp -r '/opt/hivemq/temp-extensions/'* /opt/hivemq/extensions/ ; " +
+            "chmod -R 777 /opt/hivemq/extensions ; " +
+            "/opt/docker-entrypoint.sh /opt/hivemq/bin/run.sh"
         );
     }
 

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/ContainerWithExtensionSubclassIT.java
Patch:
@@ -25,7 +25,7 @@ void test() throws Exception {
 
         try (
             final HiveMQContainer hivemq = new HiveMQContainer(
-                DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+                DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
             )
                 .waitForExtension(hiveMQExtension)
                 .withExtension(hiveMQExtension)

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/ContainerWithFileInHomeIT.java
Patch:
@@ -35,7 +35,7 @@ void test() throws Exception {
 
         try (
             final HiveMQContainer hivemq = new HiveMQContainer(
-                DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+                DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
             )
                 .withHiveMQConfig(MountableFile.forClasspathResource("/inMemoryConfig.xml"))
                 .withExtension(hiveMQExtension)

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/ContainerWithLicenseIT.java
Patch:
@@ -35,7 +35,7 @@ void test() throws Exception {
 
         try (
             final HiveMQContainer hivemq = new HiveMQContainer(
-                DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+                DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
             )
                 .withHiveMQConfig(MountableFile.forClasspathResource("/inMemoryConfig.xml"))
                 .withExtension(hiveMQExtension)

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/CreateFileInCopiedDirectoryIT.java
Patch:
@@ -47,7 +47,7 @@ void test() throws Exception {
 
         try (
             final HiveMQContainer hivemq = new HiveMQContainer(
-                DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+                DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
             )
                 .withHiveMQConfig(MountableFile.forClasspathResource("/inMemoryConfig.xml"))
                 .withExtension(extension)

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/HiveMQTestContainerCore.java
Patch:
@@ -16,7 +16,7 @@
 class HiveMQTestContainerCore {
 
     @NotNull
-    final HiveMQContainer container = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3"));
+    final HiveMQContainer container = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3"));
 
     @TempDir
     File tempDir;

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/docs/DemoExtensionTestsIT.java
Patch:
@@ -38,7 +38,7 @@ class DemoExtensionTestsIT {
 
     @Container
     final HiveMQContainer hivemqWithClasspathExtension = new HiveMQContainer(
-        DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+        DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
     )
         .waitForExtension(hiveMQEClasspathxtension)
         .withExtension(hiveMQEClasspathxtension)

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/docs/DemoFilesIT.java
Patch:
@@ -19,7 +19,7 @@ class DemoFilesIT {
 
     // hivemqHome {
     final HiveMQContainer hivemqFileInHome = new HiveMQContainer(
-        DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+        DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
     )
         .withFileInHomeFolder(
             MountableFile.forHostPath("src/test/resources/additionalFile.txt"),
@@ -31,7 +31,7 @@ class DemoFilesIT {
     // extensionHome {
     @Container
     final HiveMQContainer hivemqFileInExtensionHome = new HiveMQContainer(
-        DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+        DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3")
     )
         .withExtension(
             HiveMQExtension
@@ -52,7 +52,7 @@ class DemoFilesIT {
 
     // withLicenses {
     @Container
-    final HiveMQContainer hivemq = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3"))
+    final HiveMQContainer hivemq = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3"))
         .withLicense(MountableFile.forHostPath("src/test/resources/myLicense.lic"))
         .withLicense(MountableFile.forHostPath("src/test/resources/myExtensionLicense.elic"));
 

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/docs/DemoHiveMQContainerIT.java
Patch:
@@ -18,7 +18,7 @@ class DemoHiveMQContainerIT {
 
     // ceVersion {
     @Container
-    final HiveMQContainer hivemqCe = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3"))
+    final HiveMQContainer hivemqCe = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2024.3"))
         .withLogLevel(Level.DEBUG);
 
     // }
@@ -43,7 +43,7 @@ class DemoHiveMQContainerIT {
 
     // specificVersion {
     @Container
-    final HiveMQContainer hivemqSpecificVersion = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce:2021.3"));
+    final HiveMQContainer hivemqSpecificVersion = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce:2024.3"));
 
     // }
 

File: modules/neo4j/src/test/java/org/testcontainers/containers/Neo4jContainerTest.java
Patch:
@@ -191,7 +191,7 @@ public void shouldRespectEnvironmentAuth() {
 
     @Test
     public void shouldSetCustomPasswordCorrectly() {
-        // withoutAuthentication {
+        // withAdminPassword {
         Neo4jContainer<?> neo4jContainer = new Neo4jContainer<>("neo4j:4.4").withAdminPassword("verySecret");
         // }
 

File: docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java
Patch:
@@ -12,9 +12,9 @@ public void simpleExample() {
         try (
             // spotless:off
             // directDockerHubReference {
-            // Referring directly to an image on Docker Hub (mysql:8.0.24)
+            // Referring directly to an image on Docker Hub (mysql:8.0.36)
             final MySQLContainer<?> mysql = new MySQLContainer<>(
-                DockerImageName.parse("mysql:8.0.24")
+                DockerImageName.parse("mysql:8.0.36")
             )
             // start the container and use it for testing
             // }
@@ -36,7 +36,7 @@ public void substitutedExample() {
             // hardcodedMirror {
             // Referring directly to an image on a private registry - image name will vary
             final MySQLContainer<?> mysql = new MySQLContainer<>(
-                DockerImageName.parse("registry.mycompany.com/mirror/mysql:8.0.24")
+                DockerImageName.parse("registry.mycompany.com/mirror/mysql:8.0.36")
                     .asCompatibleSubstituteFor("mysql")
             )
             // start the container and use it for testing

File: docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java
Patch:
@@ -12,7 +12,7 @@ public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {
 
     @Override
     public DockerImageName apply(final DockerImageName original) {
-        if (original.equals(DockerImageName.parse("registry.mycompany.com/mirror/mysql:8.0.24"))) {
+        if (original.equals(DockerImageName.parse("registry.mycompany.com/mirror/mysql:8.0.36"))) {
             return DockerImageName.parse("mysql");
         } else {
             return original;

File: modules/jdbc-test/src/main/java/org/testcontainers/jdbc/AbstractJDBCDriverTest.java
Patch:
@@ -204,13 +204,13 @@ private HikariDataSource verifyCharacterSet(String jdbcUrl) throws SQLException
     private void performTestForCustomIniFile(HikariDataSource dataSource) throws SQLException {
         assumeFalse(SystemUtils.IS_OS_WINDOWS);
         Statement statement = dataSource.getConnection().createStatement();
-        statement.execute("SELECT @@GLOBAL.innodb_file_format");
+        statement.execute("SELECT @@GLOBAL.innodb_max_undo_log_size");
         ResultSet resultSet = statement.getResultSet();
 
         assertThat(resultSet.next()).as("The query returns a result").isTrue();
-        String result = resultSet.getString(1);
+        long result = resultSet.getLong(1);
 
-        assertThat(result).as("The InnoDB file format has been set by the ini file content").isEqualTo("Barracuda");
+        assertThat(result).as("The InnoDB max undo log size has been set by the ini file content").isEqualTo(20000000);
     }
 
     private HikariDataSource getDataSource(String jdbcUrl, int poolSize) {

File: modules/jdbc/src/test/java/org/testcontainers/jdbc/ConnectionUrlDriversTests.java
Patch:
@@ -35,7 +35,7 @@ public class ConnectionUrlDriversTests {
     public static Iterable<Object[]> data() {
         return Arrays.asList(
             new Object[][] {
-                { "jdbc:tc:mysql:5.7.34://hostname/test", "mysql", Optional.of("5.7.34"), "hostname/test", "test" },
+                { "jdbc:tc:mysql:8.0.36://hostname/test", "mysql", Optional.of("8.0.36"), "hostname/test", "test" },
                 { "jdbc:tc:mysql://hostname/test", "mysql", Optional.empty(), "hostname/test", "test" },
                 {
                     "jdbc:tc:postgresql:1.2.3://hostname/test",

File: modules/jdbc/src/test/java/org/testcontainers/jdbc/MissingJdbcDriverTest.java
Patch:
@@ -43,7 +43,7 @@ static class MissingDriverContainer extends JdbcDatabaseContainer {
         private final AtomicInteger connectionAttempts = new AtomicInteger();
 
         MissingDriverContainer() {
-            super(DockerImageName.parse("mysql:5.7.34"));
+            super(DockerImageName.parse("mysql:8.0.36"));
             withEnv("MYSQL_ROOT_PASSWORD", "test");
             withExposedPorts(3306);
         }

File: modules/mariadb/src/test/java/org/testcontainers/MariaDBTestImages.java
Patch:
@@ -3,5 +3,5 @@
 import org.testcontainers.utility.DockerImageName;
 
 public interface MariaDBTestImages {
-    DockerImageName MARIADB_IMAGE = DockerImageName.parse("mariadb:10.3.6");
+    DockerImageName MARIADB_IMAGE = DockerImageName.parse("mariadb:10.3.39");
 }

File: modules/mariadb/src/test/java/org/testcontainers/containers/MariaDBR2DBCDatabaseContainerTest.java
Patch:
@@ -13,11 +13,11 @@ protected ConnectionFactoryOptions getOptions(MariaDBContainer<?> container) {
 
     @Override
     protected String createR2DBCUrl() {
-        return "r2dbc:tc:mariadb:///db?TC_IMAGE_TAG=10.3.6";
+        return "r2dbc:tc:mariadb:///db?TC_IMAGE_TAG=10.3.39";
     }
 
     @Override
     protected MariaDBContainer<?> createContainer() {
-        return new MariaDBContainer<>(DockerImageName.parse("mariadb:10.3.6"));
+        return new MariaDBContainer<>(DockerImageName.parse("mariadb:10.3.39"));
     }
 }

File: modules/mysql/src/test/java/org/testcontainers/MySQLTestImages.java
Patch:
@@ -4,9 +4,9 @@
 
 public class MySQLTestImages {
 
-    public static final DockerImageName MYSQL_56_IMAGE = DockerImageName.parse("mysql:5.6.51");
+    public static final DockerImageName MYSQL_57_IMAGE = DockerImageName.parse("mysql:5.7.44");
 
-    public static final DockerImageName MYSQL_57_IMAGE = DockerImageName.parse("mysql:5.7.34");
+    public static final DockerImageName MYSQL_80_IMAGE = DockerImageName.parse("mysql:8.0.36");
 
-    public static final DockerImageName MYSQL_80_IMAGE = DockerImageName.parse("mysql:8.0.24");
+    public static final DockerImageName MYSQL_INNOVATION_IMAGE = DockerImageName.parse("mysql:8.3.0");
 }

File: modules/mysql/src/test/java/org/testcontainers/jdbc/mysql/JDBCDriverWithPoolTest.java
Patch:
@@ -33,7 +33,7 @@
 public class JDBCDriverWithPoolTest {
 
     public static final String URL =
-        "jdbc:tc:mysql:5.7.34://hostname/databasename?TC_INITFUNCTION=org.testcontainers.jdbc.mysql.JDBCDriverWithPoolTest::sampleInitFunction";
+        "jdbc:tc:mysql:8.0.36://hostname/databasename?TC_INITFUNCTION=org.testcontainers.jdbc.mysql.JDBCDriverWithPoolTest::sampleInitFunction";
 
     private final DataSource dataSource;
 

File: modules/mysql/src/test/java/org/testcontainers/jdbc/mysql/MySQLDatabaseContainerDriverTest.java
Patch:
@@ -16,7 +16,7 @@ public class MySQLDatabaseContainerDriverTest {
     @Test
     public void shouldRespectBothUrlPropertiesAndParameterProperties() throws SQLException {
         ContainerDatabaseDriver driver = new ContainerDatabaseDriver();
-        String url = "jdbc:tc:mysql:5.7.22://hostname/databasename?padCharsWithSpace=true";
+        String url = "jdbc:tc:mysql:8.0.36://hostname/databasename?padCharsWithSpace=true";
         Properties properties = new Properties();
         properties.setProperty("maxRows", "1");
 

File: modules/mysql/src/test/java/org/testcontainers/junit/mysql/CustomizableMysqlTest.java
Patch:
@@ -22,7 +22,7 @@ public class CustomizableMysqlTest extends AbstractContainerDatabaseTest {
     public void testSimple() throws SQLException {
         // Add MYSQL_ROOT_HOST environment so that we can root login from anywhere for testing purposes
         try (
-            MySQLContainer<?> mysql = new MySQLContainer<>(MySQLTestImages.MYSQL_57_IMAGE)
+            MySQLContainer<?> mysql = new MySQLContainer<>(MySQLTestImages.MYSQL_80_IMAGE)
                 .withDatabaseName(DB_NAME)
                 .withUsername(USER)
                 .withPassword(PWD)

File: modules/mysql/src/test/java/org/testcontainers/junit/mysql/MultiVersionMySQLTest.java
Patch:
@@ -19,9 +19,9 @@ public class MultiVersionMySQLTest extends AbstractContainerDatabaseTest {
     @Parameterized.Parameters(name = "{0}")
     public static DockerImageName[] params() {
         return new DockerImageName[] {
-            MySQLTestImages.MYSQL_56_IMAGE,
             MySQLTestImages.MYSQL_57_IMAGE,
             MySQLTestImages.MYSQL_80_IMAGE,
+            MySQLTestImages.MYSQL_INNOVATION_IMAGE,
         };
     }
 

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -639,7 +639,7 @@ private void connectToPortForwardingNetwork(String networkMode) {
     }
 
     /**
-     * Stops the container.
+     * Kill and remove the container.
      */
     @Override
     public void stop() {

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -215,9 +215,7 @@ public class GenericContainer<SELF extends GenericContainer<SELF>>
     private ContainerDef containerDef;
 
     ContainerDef createContainerDef() {
-        ContainerDef def = new ContainerDef();
-        def.addNetworkAlias("tc-" + Base58.randomString(8));
-        return def;
+        return new ContainerDef();
     }
 
     ContainerDef getContainerDef() {
@@ -242,6 +240,7 @@ public GenericContainer(@NonNull final DockerImageName dockerImageName) {
     public GenericContainer(@NonNull final RemoteDockerImage image) {
         this.image = image;
         this.containerDef = createContainerDef();
+        this.containerDef.addNetworkAlias("tc-" + Base58.randomString(8));
         this.containerDef.setImage(image);
     }
 

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -267,6 +267,7 @@ public GenericContainer(@NonNull final Future<String> image) {
     }
 
     public void setImage(Future<String> image) {
+        this.image = new RemoteDockerImage(image);
         this.containerDef.setImage(new RemoteDockerImage(image));
     }
 

File: modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackTestImages.java
Patch:
@@ -9,5 +9,7 @@ public interface LocalstackTestImages {
     DockerImageName LOCALSTACK_0_11_IMAGE = LOCALSTACK_IMAGE.withTag("0.11.3");
     DockerImageName LOCALSTACK_0_12_IMAGE = LOCALSTACK_IMAGE.withTag("0.12.8");
     DockerImageName LOCALSTACK_0_13_IMAGE = LOCALSTACK_IMAGE.withTag("0.13.0");
+
+    DockerImageName LOCALSTACK_2_3_IMAGE = LOCALSTACK_IMAGE.withTag("2.3");
     DockerImageName AWS_CLI_IMAGE = DockerImageName.parse("amazon/aws-cli:2.7.27");
 }

File: modules/k3s/src/main/java/org/testcontainers/k3s/K3sContainer.java
Patch:
@@ -46,7 +46,7 @@ public K3sContainer(DockerImageName dockerImageName) {
         tmpFsMapping.put("/var/run", "");
         setTmpFsMapping(tmpFsMapping);
 
-        setCommand("server", "--no-deploy=traefik", "--tls-san=" + this.getHost());
+        setCommand("server", "--disable=traefik", "--tls-san=" + this.getHost());
         setWaitStrategy(new LogMessageWaitStrategy().withRegEx(".*Node controller sync successful.*"));
     }
 

File: core/src/jarFileTest/java/org/testcontainers/JarFileShadingTest.java
Patch:
@@ -20,7 +20,7 @@ public void testPackages() throws Exception {
 
     @Test
     public void testMetaInf() throws Exception {
-        assertThatFileList(root.resolve("META-INF")).containsOnly("MANIFEST.MF", "services");
+        assertThatFileList(root.resolve("META-INF")).containsOnly("MANIFEST.MF", "services", "versions");
     }
 
     @Test

File: modules/gcloud/src/test/java/org/testcontainers/containers/BigtableEmulatorContainerTest.java
Patch:
@@ -36,7 +36,7 @@ public class BigtableEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public BigtableEmulatorContainer emulator = new BigtableEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:380.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:441.0.0-emulators")
     );
 
     // }

File: modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java
Patch:
@@ -19,7 +19,7 @@ public class DatastoreEmulatorContainerTest {
     @Rule
     // creatingDatastoreEmulatorContainer {
     public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:380.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:441.0.0-emulators")
     );
 
     // }
@@ -49,7 +49,7 @@ public void testSimple() {
     public void testWithFlags() throws IOException, InterruptedException {
         try (
             DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(
-                "gcr.io/google.com/cloudsdktool/google-cloud-cli:380.0.0-emulators"
+                "gcr.io/google.com/cloudsdktool/google-cloud-cli:441.0.0-emulators"
             )
                 .withFlags("--consistency 1.0")
         ) {
@@ -64,7 +64,7 @@ public void testWithFlags() throws IOException, InterruptedException {
     public void testWithMultipleFlags() throws IOException, InterruptedException {
         try (
             DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(
-                "gcr.io/google.com/cloudsdktool/google-cloud-cli:380.0.0-emulators"
+                "gcr.io/google.com/cloudsdktool/google-cloud-cli:441.0.0-emulators"
             )
                 .withFlags("--consistency 1.0 --data-dir /root/.config/test-gcloud")
         ) {

File: modules/gcloud/src/test/java/org/testcontainers/containers/FirestoreEmulatorContainerTest.java
Patch:
@@ -23,7 +23,7 @@ public class FirestoreEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public FirestoreEmulatorContainer emulator = new FirestoreEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:380.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:441.0.0-emulators")
     );
 
     // }

File: modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java
Patch:
@@ -37,7 +37,7 @@ public class PubSubEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:380.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/google-cloud-cli:441.0.0-emulators")
     );
 
     // }

File: modules/rabbitmq/src/main/java/org/testcontainers/containers/RabbitMQContainer.java
Patch:
@@ -17,12 +17,12 @@
 import java.util.Set;
 
 /**
- * Testcontainer for RabbitMQ.
+ * Testcontainers implementation for RabbitMQ.
  */
 public class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
 
     /**
-     * The image defaults to the official RabbitmQ image: <a href="https://hub.docker.com/_/rabbitmq/">RabbitMQ</a>.
+     * The image defaults to the official RabbitMQ image: <a href="https://hub.docker.com/_/rabbitmq/">RabbitMQ</a>.
      */
     private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("rabbitmq");
 

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -138,7 +138,7 @@ public String getTinyImage() {
     }
 
     public boolean isRyukPrivileged() {
-        return Boolean.parseBoolean(getEnvVarOrProperty("ryuk.container.privileged", "false"));
+        return Boolean.parseBoolean(getEnvVarOrProperty("ryuk.container.privileged", "true"));
     }
 
     @Deprecated

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -247,7 +247,7 @@ public GenericContainer(@NonNull final RemoteDockerImage image) {
     }
 
     /**
-     * @deprecated use {@link GenericContainer(DockerImageName)} instead
+     * @deprecated use {@link #GenericContainer(DockerImageName)} instead
      */
     @Deprecated
     public GenericContainer() {

File: modules/clickhouse/src/main/java/org/testcontainers/containers/ClickHouseContainer.java
Patch:
@@ -43,7 +43,7 @@ public class ClickHouseContainer extends JdbcDatabaseContainer<ClickHouseContain
     private boolean supportsNewDriver;
 
     /**
-     * @deprecated use {@link ClickHouseContainer(DockerImageName)} instead
+     * @deprecated use {@link #ClickHouseContainer(DockerImageName)} instead
      */
     @Deprecated
     public ClickHouseContainer() {

File: modules/cockroachdb/src/main/java/org/testcontainers/containers/CockroachContainer.java
Patch:
@@ -41,7 +41,7 @@ public class CockroachContainer extends JdbcDatabaseContainer<CockroachContainer
     private boolean isVersionGreaterThanOrEqualTo221;
 
     /**
-     * @deprecated use {@link CockroachContainer(DockerImageName)} instead
+     * @deprecated use {@link #CockroachContainer(DockerImageName)} instead
      */
     @Deprecated
     public CockroachContainer() {

File: modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java
Patch:
@@ -118,7 +118,7 @@ public class CouchbaseContainer extends GenericContainer<CouchbaseContainer> {
 
     /**
      * Creates a new couchbase container with the default image and version.
-     * @deprecated use {@link CouchbaseContainer(DockerImageName)} instead
+     * @deprecated use {@link #CouchbaseContainer(DockerImageName)} instead
      */
     @Deprecated
     public CouchbaseContainer() {

File: modules/db2/src/main/java/org/testcontainers/containers/Db2Container.java
Patch:
@@ -29,7 +29,7 @@ public class Db2Container extends JdbcDatabaseContainer<Db2Container> {
     private String password = "foobar1234";
 
     /**
-     * @deprecated use {@link Db2Container(DockerImageName)} instead
+     * @deprecated use {@link #Db2Container(DockerImageName)} instead
      */
     @Deprecated
     public Db2Container() {

File: modules/dynalite/src/main/java/org/testcontainers/dynamodb/DynaliteContainer.java
Patch:
@@ -23,7 +23,7 @@ public class DynaliteContainer extends GenericContainer<DynaliteContainer> {
     private static final int MAPPED_PORT = 4567;
 
     /**
-     * @deprecated use {@link DynaliteContainer(DockerImageName)} instead
+     * @deprecated use {@link #DynaliteContainer(DockerImageName)} instead
      */
     @Deprecated
     public DynaliteContainer() {

File: modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java
Patch:
@@ -72,7 +72,7 @@ public class ElasticsearchContainer extends GenericContainer<ElasticsearchContai
     private String certPath = "/usr/share/elasticsearch/config/certs/http_ca.crt";
 
     /**
-     * @deprecated use {@link ElasticsearchContainer(DockerImageName)} instead
+     * @deprecated use {@link #ElasticsearchContainer(DockerImageName)} instead
      */
     @Deprecated
     public ElasticsearchContainer() {

File: modules/influxdb/src/main/java/org/testcontainers/containers/InfluxDBContainer.java
Patch:
@@ -63,15 +63,15 @@ public class InfluxDBContainer<SELF extends InfluxDBContainer<SELF>> extends Gen
     private final boolean isAtLeastMajorVersion2;
 
     /**
-     * @deprecated use {@link InfluxDBContainer(DockerImageName)} instead
+     * @deprecated use {@link #InfluxDBContainer(DockerImageName)} instead
      */
     @Deprecated
     public InfluxDBContainer() {
         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
-     * @deprecated use {@link InfluxDBContainer(DockerImageName)} instead
+     * @deprecated use {@link #InfluxDBContainer(DockerImageName)} instead
      */
     @Deprecated
     public InfluxDBContainer(final String version) {

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -47,7 +47,7 @@ public abstract class JdbcDatabaseContainer<SELF extends JdbcDatabaseContainer<S
     private static final String QUERY_PARAM_SEPARATOR = "&";
 
     /**
-     * @deprecated use {@link JdbcDatabaseContainer(DockerImageName)} instead
+     * @deprecated use {@link #JdbcDatabaseContainer(DockerImageName)} instead
      */
     public JdbcDatabaseContainer(@NonNull final String dockerImageName) {
         this(DockerImageName.parse(dockerImageName));

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -37,15 +37,15 @@ public class KafkaContainer extends GenericContainer<KafkaContainer> {
     private String clusterId = DEFAULT_CLUSTER_ID;
 
     /**
-     * @deprecated use {@link KafkaContainer(DockerImageName)} instead
+     * @deprecated use {@link #KafkaContainer(DockerImageName)} instead
      */
     @Deprecated
     public KafkaContainer() {
         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
-     * @deprecated use {@link KafkaContainer(DockerImageName)} instead
+     * @deprecated use {@link #KafkaContainer(DockerImageName)} instead
      */
     @Deprecated
     public KafkaContainer(String confluentPlatformVersion) {

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -72,15 +72,15 @@ public class LocalStackContainer extends GenericContainer<LocalStackContainer> {
     private final boolean isVersion2;
 
     /**
-     * @deprecated use {@link LocalStackContainer(DockerImageName)} instead
+     * @deprecated use {@link #LocalStackContainer(DockerImageName)} instead
      */
     @Deprecated
     public LocalStackContainer() {
         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
-     * @deprecated use {@link LocalStackContainer(DockerImageName)} instead
+     * @deprecated use {@link #LocalStackContainer(DockerImageName)} instead
      */
     @Deprecated
     public LocalStackContainer(String version) {
@@ -97,7 +97,7 @@ public LocalStackContainer(final DockerImageName dockerImageName) {
     /**
      * @param dockerImageName    image name to use for Localstack
      * @param useLegacyMode      if true, each AWS service is exposed on a different port
-     * @deprecated use {@link LocalStackContainer(DockerImageName)} instead
+     * @deprecated use {@link #LocalStackContainer(DockerImageName)} instead
      */
     @Deprecated
     public LocalStackContainer(final DockerImageName dockerImageName, boolean useLegacyMode) {

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainer.java
Patch:
@@ -38,7 +38,7 @@ public class MariaDBContainer<SELF extends MariaDBContainer<SELF>> extends JdbcD
     private static final String MY_CNF_CONFIG_OVERRIDE_PARAM_NAME = "TC_MY_CNF";
 
     /**
-     * @deprecated use {@link MariaDBContainer(DockerImageName)} instead
+     * @deprecated use {@link #MariaDBContainer(DockerImageName)} instead
      */
     @Deprecated
     public MariaDBContainer() {

File: modules/mockserver/src/main/java/org/testcontainers/containers/MockServerContainer.java
Patch:
@@ -17,15 +17,15 @@ public class MockServerContainer extends GenericContainer<MockServerContainer> {
     public static final int PORT = 1080;
 
     /**
-     * @deprecated use {@link MockServerContainer(DockerImageName)} instead
+     * @deprecated use {@link #MockServerContainer(DockerImageName)} instead
      */
     @Deprecated
     public MockServerContainer() {
         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
-     * @deprecated use {@link MockServerContainer(DockerImageName)} instead
+     * @deprecated use {@link #MockServerContainer(DockerImageName)} instead
      */
     @Deprecated
     public MockServerContainer(String version) {

File: modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java
Patch:
@@ -35,7 +35,7 @@ public class MongoDBContainer extends GenericContainer<MongoDBContainer> {
     private boolean shardingEnabled;
 
     /**
-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead
+     * @deprecated use {@link #MongoDBContainer(DockerImageName)} instead
      */
     @Deprecated
     public MongoDBContainer() {

File: modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLServerContainer.java
Patch:
@@ -38,7 +38,7 @@ public class MSSQLServerContainer<SELF extends MSSQLServerContainer<SELF>> exten
     };
 
     /**
-     * @deprecated use {@link MSSQLServerContainer(DockerImageName)} instead
+     * @deprecated use {@link #MSSQLServerContainer(DockerImageName)} instead
      */
     @Deprecated
     public MSSQLServerContainer() {

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -35,7 +35,7 @@ public class MySQLContainer<SELF extends MySQLContainer<SELF>> extends JdbcDatab
     private static final String MYSQL_ROOT_USER = "root";
 
     /**
-     * @deprecated use {@link MySQLContainer(DockerImageName)} instead
+     * @deprecated use {@link #MySQLContainer(DockerImageName)} instead
      */
     @Deprecated
     public MySQLContainer() {

File: modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java
Patch:
@@ -78,7 +78,7 @@ public class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContaine
 
     /**
      * Creates a Neo4jContainer using the official Neo4j docker image.
-     * @deprecated use {@link Neo4jContainer(DockerImageName)} instead
+     * @deprecated use {@link #Neo4jContainer(DockerImageName)} instead
      */
     @Deprecated
     public Neo4jContainer() {

File: modules/nginx/src/main/java/org/testcontainers/containers/NginxContainer.java
Patch:
@@ -19,7 +19,7 @@ public class NginxContainer<SELF extends NginxContainer<SELF>>
     private static final String DEFAULT_TAG = "1.9.4";
 
     /**
-     * @deprecated use {@link NginxContainer(DockerImageName)} instead
+     * @deprecated use {@link #NginxContainer(DockerImageName)} instead
      */
     @Deprecated
     public NginxContainer() {

File: modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java
Patch:
@@ -57,7 +57,7 @@ public class OracleContainer extends JdbcDatabaseContainer<OracleContainer> {
     private boolean usingSid = false;
 
     /**
-     * @deprecated use {@link OracleContainer(DockerImageName)} instead
+     * @deprecated use {@link #OracleContainer(DockerImageName)} instead
      */
     @Deprecated
     public OracleContainer() {

File: modules/orientdb/src/main/java/org/testcontainers/containers/OrientDBContainer.java
Patch:
@@ -50,7 +50,7 @@ public class OrientDBContainer extends GenericContainer<OrientDBContainer> {
     private ODatabaseSession session;
 
     /**
-     * @deprecated use {@link OrientDBContainer(DockerImageName)} instead
+     * @deprecated use {@link #OrientDBContainer(DockerImageName)} instead
      */
     @Deprecated
     public OrientDBContainer() {

File: modules/presto/src/main/java/org/testcontainers/containers/PrestoContainer.java
Patch:
@@ -32,7 +32,7 @@ public class PrestoContainer<SELF extends PrestoContainer<SELF>> extends JdbcDat
     private String catalog = null;
 
     /**
-     * @deprecated use {@link PrestoContainer(DockerImageName)} instead
+     * @deprecated use {@link #PrestoContainer(DockerImageName)} instead
      */
     @Deprecated
     public PrestoContainer() {

File: modules/pulsar/src/main/java/org/testcontainers/containers/PulsarContainer.java
Patch:
@@ -39,15 +39,15 @@ public class PulsarContainer extends GenericContainer<PulsarContainer> {
     private boolean transactionsEnabled = false;
 
     /**
-     * @deprecated use {@link PulsarContainer(DockerImageName)} instead
+     * @deprecated use {@link #PulsarContainer(DockerImageName)} instead
      */
     @Deprecated
     public PulsarContainer() {
         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
-     * @deprecated use {@link PulsarContainer(DockerImageName)} instead
+     * @deprecated use {@link #PulsarContainer(DockerImageName)} instead
      */
     @Deprecated
     public PulsarContainer(String pulsarVersion) {

File: modules/rabbitmq/src/main/java/org/testcontainers/containers/RabbitMQContainer.java
Patch:
@@ -44,7 +44,7 @@ public class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
 
     /**
      * Creates a RabbitMQ container using the official RabbitMQ docker image.
-     * @deprecated use {@link RabbitMQContainer(DockerImageName)} instead
+     * @deprecated use {@link #RabbitMQContainer(DockerImageName)} instead
      */
     @Deprecated
     public RabbitMQContainer() {

File: modules/solr/src/main/java/org/testcontainers/containers/SolrContainer.java
Patch:
@@ -32,15 +32,15 @@ public class SolrContainer extends GenericContainer<SolrContainer> {
     private SolrContainerConfiguration configuration;
 
     /**
-     * @deprecated use {@link SolrContainer(DockerImageName)} instead
+     * @deprecated use {@link #SolrContainer(DockerImageName)} instead
      */
     @Deprecated
     public SolrContainer() {
         this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
-     * @deprecated use {@link SolrContainer(DockerImageName)} instead
+     * @deprecated use {@link #SolrContainer(DockerImageName)} instead
      */
     public SolrContainer(final String dockerImageName) {
         this(DockerImageName.parse(dockerImageName));

File: modules/toxiproxy/src/main/java/org/testcontainers/containers/ToxiproxyContainer.java
Patch:
@@ -40,7 +40,7 @@ public class ToxiproxyContainer extends GenericContainer<ToxiproxyContainer> {
     private final AtomicInteger nextPort = new AtomicInteger(FIRST_PROXIED_PORT);
 
     /**
-     * @deprecated use {@link ToxiproxyContainer(DockerImageName)} instead
+     * @deprecated use {@link #ToxiproxyContainer(DockerImageName)} instead
      */
     @Deprecated
     public ToxiproxyContainer() {

File: modules/vault/src/main/java/org/testcontainers/vault/VaultContainer.java
Patch:
@@ -39,7 +39,7 @@ public class VaultContainer<SELF extends VaultContainer<SELF>> extends GenericCo
     private int port = VAULT_PORT;
 
     /**
-     * @deprecated use {@link VaultContainer(DockerImageName)} instead
+     * @deprecated use {@link #VaultContainer(DockerImageName)} instead
      */
     @Deprecated
     public VaultContainer() {

File: core/src/main/java/org/testcontainers/containers/ParsedDockerComposeFile.java
Patch:
@@ -7,7 +7,9 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.io.FileUtils;
 import org.testcontainers.images.ParsedDockerfile;
+import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.constructor.SafeConstructor;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -35,7 +37,7 @@ class ParsedDockerComposeFile {
     private Map<String, Set<String>> serviceNameToImageNames = new HashMap<>();
 
     ParsedDockerComposeFile(File composeFile) {
-        Yaml yaml = new Yaml();
+        Yaml yaml = new Yaml(new SafeConstructor(new LoaderOptions()));
         try (FileInputStream fileInputStream = FileUtils.openInputStream(composeFile)) {
             composeFileContent = yaml.load(fileInputStream);
         } catch (Exception e) {

File: modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLServerContainer.java
Patch:
@@ -20,7 +20,7 @@ public class MSSQLServerContainer<SELF extends MSSQLServerContainer<SELF>> exten
 
     public static final Integer MS_SQL_SERVER_PORT = 1433;
 
-    static final String DEFAULT_USER = "SA";
+    static final String DEFAULT_USER = "sa";
 
     static final String DEFAULT_PASSWORD = "A_Str0ng_Required_Password";
 

File: core/src/test/java/alt/testcontainers/images/OutOfPackageImagePullPolicyTest.java
Patch:
@@ -11,7 +11,7 @@
 public class OutOfPackageImagePullPolicyTest {
 
     @Test
-    public void shouldSupportCustomPoliciesOutOfTestContainersPackage() {
+    public void shouldSupportCustomPoliciesOutOfTestcontainersPackage() {
         try (
             GenericContainer<?> container = new GenericContainer<>(TestImages.TINY_IMAGE)
                 .withImagePullPolicy(

File: modules/jdbc/src/main/java/org/testcontainers/jdbc/ConnectionUrl.java
Patch:
@@ -159,7 +159,7 @@ private Map<String, String> parseTmpfsOptions(Map<String, String> containerParam
     }
 
     /**
-     * Get the TestContainers Parameters such as Init Function, Init Script path etc.
+     * Get the Testcontainers Parameters such as Init Function, Init Script path etc.
      *
      * @return {@link Map}
      */
@@ -177,7 +177,7 @@ private Map<String, String> parseContainerParameters() {
     }
 
     /**
-     * Get all Query parameters specified in the Connection URL after ?. This DOES NOT include TestContainers (TC_*) parameters.
+     * Get all Query parameters specified in the Connection URL after ?. This DOES NOT include Testcontainers (TC_*) parameters.
      *
      * @return {@link Map}
      */

File: modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java
Patch:
@@ -98,6 +98,8 @@ public ElasticsearchContainer(final DockerImageName dockerImageName) {
 
         withNetworkAliases("elasticsearch-" + Base58.randomString(6));
         withEnv("discovery.type", "single-node");
+        // disable disk threshold checks
+        withEnv("cluster.routing.allocation.disk.threshold_enabled", "false");
         // Sets default memory of elasticsearch instance to 2GB
         // Spaces are deliberate to allow user to define additional jvm options as elasticsearch resolves option files lexicographically
         withClasspathResourceMapping(

File: core/src/main/java/org/testcontainers/containers/Container.java
Patch:
@@ -79,7 +79,7 @@ class ExecResult {
      * @param mode          the bind mode
      */
     default void addFileSystemBind(final String hostPath, final String containerPath, final BindMode mode) {
-        addFileSystemBind(hostPath, containerPath, mode, SelinuxContext.NONE);
+        addFileSystemBind(hostPath, containerPath, mode, SelinuxContext.SHARED);
     }
 
     /**
@@ -303,7 +303,7 @@ default SELF withClasspathResourceMapping(
         final String containerPath,
         final BindMode mode
     ) {
-        withClasspathResourceMapping(resourcePath, containerPath, mode, SelinuxContext.NONE);
+        withClasspathResourceMapping(resourcePath, containerPath, mode, SelinuxContext.SHARED);
         return self();
     }
 

File: core/src/main/java/org/testcontainers/dockerclient/DockerDesktopClientProviderStrategy.java
Patch:
@@ -41,7 +41,7 @@ private Path resolveSocketPath() {
 
     @Override
     public String getDescription() {
-        return "Rootless Docker accessed via Unix socket (" + getSocketPath() + ")";
+        return "Docker accessed via Unix socket (" + getSocketPath() + ")";
     }
 
     @Override

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -365,13 +365,13 @@ private static Properties readProperties(URL url) {
         try (InputStream inputStream = url.openStream()) {
             properties.load(inputStream);
         } catch (FileNotFoundException e) {
-            log.warn(
+            log.debug(
                 "Attempted to read Testcontainers configuration file at {} but the file was not found. Exception message: {}",
                 url,
                 ExceptionUtils.getRootCauseMessage(e)
             );
         } catch (IOException e) {
-            log.warn(
+            log.debug(
                 "Attempted to read Testcontainers configuration file at {} but could it not be loaded. Exception message: {}",
                 url,
                 ExceptionUtils.getRootCauseMessage(e)

File: core/src/main/java/org/testcontainers/dockerclient/TestcontainersHostPropertyClientProviderStrategy.java
Patch:
@@ -23,7 +23,7 @@ public TestcontainersHostPropertyClientProviderStrategy() {
         this(DefaultDockerClientConfig.createDefaultConfigBuilder());
     }
 
-    public TestcontainersHostPropertyClientProviderStrategy(DefaultDockerClientConfig.Builder configBuilder) {
+    TestcontainersHostPropertyClientProviderStrategy(DefaultDockerClientConfig.Builder configBuilder) {
         Optional<String> tcHost = Optional.ofNullable(
             TestcontainersConfiguration.getInstance().getUserProperty("tc.host", null)
         );

File: modules/redpanda/src/main/java/org/testcontainers/redpanda/RedpandaContainer.java
Patch:
@@ -55,7 +55,7 @@ protected void containerIsStarting(InspectContainerResponse containerInfo) {
 
         String command = "#!/bin/bash\n";
 
-        command += "/usr/bin/rpk redpanda start --mode dev-container --overprovisioned --smp 1 ";
+        command += "/usr/bin/rpk redpanda start --mode dev-container --smp 1 --memory 1G ";
         command += "--kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092 ";
         command +=
             "--advertise-kafka-addr PLAINTEXT://127.0.0.1:29092,OUTSIDE://" + getHost() + ":" + getMappedPort(9092);

File: modules/cratedb/src/main/java/org/testcontainers/cratedb/CrateDBContainer.java
Patch:
@@ -13,7 +13,7 @@ public class CrateDBContainer extends JdbcDatabaseContainer<CrateDBContainer> {
 
     static final String IMAGE = "crate";
 
-    static final String DEFAULT_TAG = "5.2.5";
+    static final String DEFAULT_TAG = "5.3.1";
 
     private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("crate");
 
@@ -34,6 +34,7 @@ public CrateDBContainer(final String dockerImageName) {
     public CrateDBContainer(final DockerImageName dockerImageName) {
         super(dockerImageName);
         dockerImageName.assertCompatibleWith(DEFAULT_IMAGE_NAME);
+        withCommand("crate -C discovery.type=single-node");
 
         this.waitStrategy = Wait.forHttp("/").forPort(CRATEDB_HTTP_PORT).forStatusCode(200);
 

File: modules/cratedb/src/test/java/org/testcontainers/junit/cratedb/SimpleCrateDBTest.java
Patch:
@@ -34,7 +34,7 @@ public void testSimple() throws SQLException {
     public void testCommandOverride() throws SQLException {
         try (
             CrateDBContainer cratedb = new CrateDBContainer(CrateDBTestImages.CRATEDB_TEST_IMAGE)
-                .withCommand("crate -C cluster.name=testcontainers")
+                .withCommand("crate -C discovery.type=single-node -C cluster.name=testcontainers")
         ) {
             cratedb.start();
 

File: modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Cassandra container
  *
- * Supports 2.x and 3.x Cassandra versions
+ * Testcontainers implementation for Apache Cassandra.
  */
 public class CassandraContainer<SELF extends CassandraContainer<SELF>> extends GenericContainer<SELF> {
 

File: modules/redpanda/src/main/java/org/testcontainers/redpanda/RedpandaContainer.java
Patch:
@@ -55,7 +55,7 @@ protected void containerIsStarting(InspectContainerResponse containerInfo) {
 
         String command = "#!/bin/bash\n";
 
-        command += "/usr/bin/rpk redpanda start --mode dev-container ";
+        command += "/usr/bin/rpk redpanda start --mode dev-container --overprovisioned --smp 1 ";
         command += "--kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092 ";
         command +=
             "--advertise-kafka-addr PLAINTEXT://127.0.0.1:29092,OUTSIDE://" + getHost() + ":" + getMappedPort(9092);

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -143,7 +143,7 @@ public DockerComposeContainer(String identifier, List<File> composeFiles) {
         this.dockerComposeFiles = new DockerComposeFiles(composeFiles);
 
         // Use a unique identifier so that containers created for this compose environment can be identified
-        this.identifier = identifier;
+        this.identifier = identifier.toLowerCase();
         this.project = randomProjectId();
 
         this.dockerClient = DockerClientFactory.lazyClient();

File: modules/junit-jupiter/src/main/java/org/testcontainers/junit/jupiter/Container.java
Patch:
@@ -11,7 +11,7 @@
  *
  * @see Testcontainers
  */
-@Target(ElementType.FIELD)
+@Target({ ElementType.FIELD, ElementType.ANNOTATION_TYPE })
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Container {
 }

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBR2DBCDatabaseContainerProvider.java
Patch:
@@ -23,7 +23,7 @@ public boolean supports(ConnectionFactoryOptions options) {
     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {
         String image = MariaDBContainer.IMAGE + ":" + options.getRequiredValue(IMAGE_TAG_OPTION);
         MariaDBContainer<?> container = new MariaDBContainer<>(image)
-            .withDatabaseName(options.getRequiredValue(ConnectionFactoryOptions.DATABASE));
+            .withDatabaseName((String) options.getRequiredValue(ConnectionFactoryOptions.DATABASE));
 
         if (Boolean.TRUE.equals(options.getValue(REUSABLE_OPTION))) {
             container.withReuse(true);

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLR2DBCDatabaseContainerProvider.java
Patch:
@@ -23,7 +23,7 @@ public boolean supports(ConnectionFactoryOptions options) {
     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {
         String image = MySQLContainer.IMAGE + ":" + options.getRequiredValue(IMAGE_TAG_OPTION);
         MySQLContainer<?> container = new MySQLContainer<>(image)
-            .withDatabaseName(options.getRequiredValue(ConnectionFactoryOptions.DATABASE));
+            .withDatabaseName((String) options.getRequiredValue(ConnectionFactoryOptions.DATABASE));
 
         if (Boolean.TRUE.equals(options.getValue(REUSABLE_OPTION))) {
             container.withReuse(true);

File: modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java
Patch:
@@ -23,7 +23,7 @@ public class OracleContainer extends JdbcDatabaseContainer<OracleContainer> {
 
     static final String IMAGE = DEFAULT_IMAGE_NAME.getUnversionedPart();
 
-    private static final int ORACLE_PORT = 1521;
+    static final int ORACLE_PORT = 1521;
 
     private static final int APEX_HTTP_PORT = 8080;
 
@@ -103,7 +103,7 @@ public Set<Integer> getLivenessCheckPortNumbers() {
 
     @Override
     public String getDriverClassName() {
-        return "oracle.jdbc.OracleDriver";
+        return "oracle.jdbc.driver.OracleDriver";
     }
 
     @Override

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLR2DBCDatabaseContainerProvider.java
Patch:
@@ -23,7 +23,7 @@ public boolean supports(ConnectionFactoryOptions options) {
     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {
         String image = PostgreSQLContainer.IMAGE + ":" + options.getRequiredValue(IMAGE_TAG_OPTION);
         PostgreSQLContainer<?> container = new PostgreSQLContainer<>(image)
-            .withDatabaseName(options.getRequiredValue(ConnectionFactoryOptions.DATABASE));
+            .withDatabaseName((String) options.getRequiredValue(ConnectionFactoryOptions.DATABASE));
 
         if (Boolean.TRUE.equals(options.getValue(REUSABLE_OPTION))) {
             container.withReuse(true);

File: modules/r2dbc/src/main/java/org/testcontainers/r2dbc/Hidden.java
Patch:
@@ -42,7 +42,7 @@ private ConnectionFactoryOptions removeProxying(ConnectionFactoryOptions options
             //   | DRIVER   | tc              | postgres     |
             //   | PROTOCOL | postgres        | <empty>      |
 
-            String protocol = options.getRequiredValue(ConnectionFactoryOptions.PROTOCOL);
+            String protocol = (String) options.getRequiredValue(ConnectionFactoryOptions.PROTOCOL);
             if (protocol.trim().length() == 0) {
                 throw new IllegalArgumentException("Invalid protocol: " + protocol);
             }

File: modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java
Patch:
@@ -110,7 +110,7 @@ public void shouldSupportSharding() {
             Document shards = mongoClient.getDatabase("config").getCollection("shards").find().first();
             assertThat(shards).isNotNull();
             assertThat(shards).isNotEmpty();
-            assertThat(isReplicaSet(mongoClient));
+            assertThat(isReplicaSet(mongoClient)).isFalse();
         }
     }
 

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/JUnitJupiterTestImages.java
Patch:
@@ -5,4 +5,5 @@
 public interface JUnitJupiterTestImages {
     DockerImageName POSTGRES_IMAGE = DockerImageName.parse("postgres:9.6.12");
     DockerImageName HTTPD_IMAGE = DockerImageName.parse("httpd:2.4-alpine");
+    DockerImageName MYSQL_IMAGE = DockerImageName.parse("mysql:8.0.32");
 }

File: docs/examples/junit4/generic/src/test/java/generic/CmdModifierTest.java
Patch:
@@ -25,9 +25,9 @@ public class CmdModifierTest {
 
     // spotless:off
     // memory {
-    private long memoryInBytes = 32 * 1024 * 1024;
+    private long memoryInBytes = 32l * 1024l * 1024l;
 
-    private long memorySwapInBytes = 64 * 1024 * 1024;
+    private long memorySwapInBytes = 64l * 1024l * 1024l;
 
     @Rule
     public GenericContainer memoryLimitedRedis = new GenericContainer<>(DockerImageName.parse("redis:3.0.2"))

File: core/src/main/java/org/testcontainers/containers/output/WaitingConsumer.java
Patch:
@@ -82,11 +82,10 @@ private void waitUntil(Predicate<OutputFrame> predicate, long expiry, int times)
         int numberOfMatches = 0;
         while (System.currentTimeMillis() < expiry) {
             try {
-                OutputFrame frame = frames.pollLast(100, TimeUnit.MILLISECONDS);
+                final OutputFrame frame = frames.pollLast(100, TimeUnit.MILLISECONDS);
 
                 if (frame != null) {
-                    final String trimmedFrameText = frame.getUtf8String().replaceFirst("\n$", "");
-                    LOGGER.debug("{}: {}", frame.getType(), trimmedFrameText);
+                    LOGGER.debug("{}: {}", frame.getType(), frame.getUtf8StringWithoutLineEnding());
 
                     if (predicate.test(frame)) {
                         numberOfMatches++;

File: modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackTestImages.java
Patch:
@@ -8,5 +8,6 @@ public interface LocalstackTestImages {
     DockerImageName LOCALSTACK_0_10_IMAGE = LOCALSTACK_IMAGE.withTag("0.10.7");
     DockerImageName LOCALSTACK_0_11_IMAGE = LOCALSTACK_IMAGE.withTag("0.11.3");
     DockerImageName LOCALSTACK_0_12_IMAGE = LOCALSTACK_IMAGE.withTag("0.12.8");
+    DockerImageName LOCALSTACK_0_13_IMAGE = LOCALSTACK_IMAGE.withTag("0.13.0");
     DockerImageName AWS_CLI_IMAGE = DockerImageName.parse("amazon/aws-cli:2.7.27");
 }

File: core/src/main/java/org/testcontainers/utility/RegistryAuthLocator.java
Patch:
@@ -229,7 +229,7 @@ private Map.Entry<String, JsonNode> findAuthNode(final JsonNode config, final St
             final Iterator<Map.Entry<String, JsonNode>> fields = auths.fields();
             while (fields.hasNext()) {
                 final Map.Entry<String, JsonNode> entry = fields.next();
-                if (entry.getKey().contains("://" + reposName) || entry.getKey().equals(reposName)) {
+                if (entry.getKey().endsWith("://" + reposName) || entry.getKey().equals(reposName)) {
                     return entry;
                 }
             }

File: core/src/test/java/org/testcontainers/DockerRegistryContainer.java
Patch:
@@ -100,7 +100,7 @@ public DockerImageName createImage(String originalImage, String tag) {
             .withTag(tag);
 
         // push the image to the registry
-        client.tagImageCmd(dummyImageId, imageName.asCanonicalNameString(), tag).exec();
+        client.tagImageCmd(dummyImageId, imageName.getUnversionedPart(), tag).exec();
 
         client
             .pushImageCmd(imageName.asCanonicalNameString())

File: modules/hivemq/src/test/java/org/testcontainers/hivemq/docs/DemoHiveMQContainerIT.java
Patch:
@@ -25,15 +25,15 @@ public class DemoHiveMQContainerIT {
 
     // hiveEEVersion {
     @Container
-    final HiveMQContainer hivemqEe = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3"))
+    final HiveMQContainer hivemqEe = new HiveMQContainer(DockerImageName.parse("hivemq/hivemq4").withTag("4.7.4"))
         .withLogLevel(Level.DEBUG);
 
     // }
 
     // eeVersionWithControlCenter {
     @Container
     final HiveMQContainer hivemqEeWithControlCenter = new HiveMQContainer(
-        DockerImageName.parse("hivemq/hivemq-ce").withTag("2021.3")
+        DockerImageName.parse("hivemq/hivemq4").withTag("4.7.4")
     )
         .withLogLevel(Level.DEBUG)
         .withHiveMQConfig(MountableFile.forClasspathResource("/inMemoryConfig.xml"))

File: core/src/main/java/org/testcontainers/containers/wait/strategy/HttpWaitStrategy.java
Patch:
@@ -319,7 +319,8 @@ protected void waitUntilReady() {
                     "Timed out waiting for URL to be accessible (%s should return HTTP %s)",
                     uri,
                     statusCodes.isEmpty() ? HttpURLConnection.HTTP_OK : statusCodes
-                )
+                ),
+                e
             );
         }
     }

File: modules/yugabytedb/src/test/java/org/testcontainers/junit/yugabytedb/YugabyteDBYCQLTest.java
Patch:
@@ -23,7 +23,9 @@ public class YugabyteDBYCQLTest {
     public void testSmoke() {
         try (
             // creatingYCQLContainer {
-            final YugabyteDBYCQLContainer ycqlContainer = new YugabyteDBYCQLContainer(IMAGE_NAME)
+            final YugabyteDBYCQLContainer ycqlContainer = new YugabyteDBYCQLContainer(
+                "yugabytedb/yugabyte:2.14.4.0-b26"
+            )
             // }
         ) {
             // startingYCQLContainer {

File: modules/yugabytedb/src/test/java/org/testcontainers/junit/yugabytedb/YugabyteDBYSQLTest.java
Patch:
@@ -24,7 +24,9 @@ public class YugabyteDBYSQLTest extends AbstractContainerDatabaseTest {
     public void testSmoke() throws SQLException {
         try (
             // creatingYSQLContainer {
-            final YugabyteDBYSQLContainer ysqlContainer = new YugabyteDBYSQLContainer(IMAGE_NAME)
+            final YugabyteDBYSQLContainer ysqlContainer = new YugabyteDBYSQLContainer(
+                "yugabytedb/yugabyte:2.14.4.0-b26"
+            )
             // }
         ) {
             // startingYSQLContainer {

File: docs/examples/junit4/generic/src/test/java/generic/HostPortExposedTest.java
Patch:
@@ -50,14 +50,15 @@ public static void tearDown() throws Exception {
     }
 
     @Rule
-    public BrowserWebDriverContainer browser = new BrowserWebDriverContainer().withCapabilities(new ChromeOptions());
+    public BrowserWebDriverContainer<?> browser = new BrowserWebDriverContainer<>()
+        .withCapabilities(new ChromeOptions());
 
     @Test
     public void testContainerRunningAgainstExposedHostPort() {
         // useHostExposedPort {
         final String rootUrl = String.format("http://host.testcontainers.internal:%d/", localServerPort);
 
-        final RemoteWebDriver webDriver = browser.getWebDriver();
+        final RemoteWebDriver webDriver = new RemoteWebDriver(this.browser.getSeleniumAddress(), new ChromeOptions());
         webDriver.get(rootUrl);
         // }
 

File: examples/cucumber/src/test/java/org/testcontainers/examples/Stepdefs.java
Patch:
@@ -6,6 +6,7 @@
 import io.cucumber.java.en.Given;
 import io.cucumber.java.en.Then;
 import io.cucumber.java.en.When;
+import org.openqa.selenium.By;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.chrome.ChromeOptions;
 import org.openqa.selenium.remote.RemoteWebDriver;
@@ -59,9 +60,9 @@ public void locationIs(String location) throws Exception {
 
     @When("^I ask is it possible to search here$")
     public void iAskIsItPossibleToSearchHere() throws Exception {
-        RemoteWebDriver driver = container.getWebDriver();
+        RemoteWebDriver driver = new RemoteWebDriver(container.getSeleniumAddress(), new ChromeOptions());
         driver.get(location);
-        List<WebElement> searchInputs = driver.findElementsByTagName("input");
+        List<WebElement> searchInputs = driver.findElements(By.tagName("input"));
         answer = searchInputs != null && searchInputs.size() > 0 ? "YES" : "NOPE";
     }
 

File: examples/selenium-container/src/test/java/SeleniumContainerTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.File;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -41,7 +42,8 @@ public class SeleniumContainerTest {
 
     @Test
     public void simplePlainSeleniumTest() {
-        RemoteWebDriver driver = chrome.getWebDriver();
+        RemoteWebDriver driver = new RemoteWebDriver(chrome.getSeleniumAddress(), new ChromeOptions());
+        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
 
         driver.get("http://host.testcontainers.internal:" + port + "/foo.html");
         List<WebElement> hElement = driver.findElements(By.tagName("h"));

File: modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java
Patch:
@@ -64,7 +64,7 @@ private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> containe
             container.start();
 
             TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);
-            doSimpleExplore(container);
+            doSimpleExplore(container, new ChromeOptions());
             container.afterTest(
                 new TestDescription() {
                     @Override
@@ -178,7 +178,7 @@ public void recordingTestThatShouldBeRecordedButNotPersisted() {
             ) {
                 chrome.start();
 
-                doSimpleExplore(chrome);
+                doSimpleExplore(chrome, new ChromeOptions());
             }
         }
 
@@ -198,7 +198,7 @@ public void recordingTestThatShouldBeRecordedAndRetained() throws InterruptedExc
                 chrome.start();
 
                 TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);
-                doSimpleExplore(chrome);
+                doSimpleExplore(chrome, new ChromeOptions());
                 chrome.afterTest(
                     new TestDescription() {
                         @Override

File: modules/selenium/src/test/java/org/testcontainers/junit/ChromeWebDriverContainerTest.java
Patch:
@@ -25,6 +25,6 @@ public void checkBrowserIsIndeedChrome() {
 
     @Test
     public void simpleExploreTest() {
-        doSimpleExplore(chrome);
+        doSimpleExplore(chrome, new ChromeOptions());
     }
 }

File: modules/selenium/src/test/java/org/testcontainers/junit/ContainerWithoutCapabilitiesTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Rule;
 import org.junit.Test;
+import org.openqa.selenium.chrome.ChromeOptions;
 import org.testcontainers.containers.BrowserWebDriverContainer;
 
 public class ContainerWithoutCapabilitiesTest extends BaseWebDriverContainerTest {
@@ -16,6 +17,6 @@ public void chromeIsStartedIfNoCapabilitiesProvided() {
 
     @Test
     public void simpleExploreTestWhenNoCapabilitiesProvided() {
-        doSimpleExplore(chrome);
+        doSimpleExplore(chrome, new ChromeOptions());
     }
 }

File: modules/selenium/src/test/java/org/testcontainers/junit/CustomWaitTimeoutWebDriverContainerTest.java
Patch:
@@ -21,6 +21,6 @@ public class CustomWaitTimeoutWebDriverContainerTest extends BaseWebDriverContai
 
     @Test
     public void simpleExploreTest() {
-        doSimpleExplore(chromeWithCustomTimeout);
+        doSimpleExplore(chromeWithCustomTimeout, new ChromeOptions());
     }
 }

File: modules/selenium/src/test/java/org/testcontainers/junit/FirefoxWebDriverContainerTest.java
Patch:
@@ -25,6 +25,6 @@ public void checkBrowserIsIndeedFirefox() {
 
     @Test
     public void simpleExploreTest() {
-        doSimpleExplore(firefox);
+        doSimpleExplore(firefox, new FirefoxOptions());
     }
 }

File: modules/selenium/src/test/java/org/testcontainers/junit/LocalServerWebDriverContainerTest.java
Patch:
@@ -42,7 +42,7 @@ public void setupLocalServer() throws Exception {
     @Test
     public void testConnection() {
         // getWebDriver {
-        RemoteWebDriver driver = chrome.getWebDriver();
+        RemoteWebDriver driver = new RemoteWebDriver(chrome.getSeleniumAddress(), new ChromeOptions());
         // }
 
         // Construct a URL that the browser container can access

File: modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java
Patch:
@@ -19,6 +19,6 @@ public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContai
 
     @Test
     public void simpleExploreTest() {
-        doSimpleExplore(firefox);
+        doSimpleExplore(firefox, new FirefoxOptions());
     }
 }

File: core/src/main/java/org/testcontainers/images/ImageData.java
Patch:
@@ -24,6 +24,6 @@ static ImageData from(InspectImageResponse inspectImageResponse) {
     }
 
     static ImageData from(Image image) {
-        return ImageData.builder().createdAt(Instant.ofEpochMilli(image.getCreated())).build();
+        return ImageData.builder().createdAt(Instant.ofEpochSecond(image.getCreated())).build();
     }
 }

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -360,7 +360,7 @@ protected boolean canBeReused() {
                     logger().warn("{} can't be reused because it overrides {}", getClass(), method.getName());
                     return false;
                 }
-            } catch (NoSuchMethodException e) {
+            } catch (NoSuchMethodException | NoClassDefFoundError e) {
                 // ignore
             }
         }

File: modules/mockserver/src/test/java/org/testcontainers/containers/MockServerContainerTest.java
Patch:
@@ -11,7 +11,7 @@
 public class MockServerContainerTest {
 
     public static final DockerImageName MOCKSERVER_IMAGE = DockerImageName.parse(
-        "jamesdbloom/mockserver:mockserver-5.5.4"
+        "mockserver/mockserver:mockserver-5.14.0"
     );
 
     @Test
@@ -40,7 +40,7 @@ public void shouldCallActualMockserverVersion() throws Exception {
 
     @Test
     public void newVersionStartsWithDefaultWaitStrategy() {
-        DockerImageName dockerImageName = DockerImageName.parse("mockserver/mockserver:mockserver-5.11.2");
+        DockerImageName dockerImageName = DockerImageName.parse("mockserver/mockserver:mockserver-5.14.0");
         try (MockServerContainer mockServer = new MockServerContainer(dockerImageName)) {
             mockServer.start();
         }

File: modules/jdbc/src/main/java/org/testcontainers/jdbc/ContainerDatabaseDriver.java
Patch:
@@ -127,7 +127,7 @@ public synchronized Connection connect(String url, final Properties info) throws
             /*
               Create a connection using the delegated driver. The container must be ready to accept connections.
              */
-            Connection connection = container.createConnection(queryString);
+            Connection connection = container.createConnection(queryString, info);
 
             /*
               If this container has not been initialized, AND

File: modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java
Patch:
@@ -573,6 +573,7 @@ private void createBuckets() {
                     .add("name", bucket.getName())
                     .add("ramQuotaMB", Integer.toString(bucket.getQuota()))
                     .add("flushEnabled", bucket.hasFlushEnabled() ? "1" : "0")
+                    .add("replicaNumber", Integer.toString(bucket.getNumReplicas()))
                     .build(),
                 true
             );

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -611,7 +611,8 @@ public SELF withStartupTimeout(Duration startupTimeout) {
     }
 
     public Optional<ContainerState> getContainerByServiceName(String serviceName) {
-        return Optional.ofNullable(serviceInstanceMap.get(serviceName));
+        String serviceInstantName = getServiceInstanceName(serviceName);
+        return Optional.ofNullable(serviceInstanceMap.get(serviceInstantName));
     }
 
     private void followLogs(String containerId, Consumer<OutputFrame> consumer) {

File: modules/junit-jupiter/src/main/java/org/testcontainers/junit/jupiter/TestcontainersExtension.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-class TestcontainersExtension
+public class TestcontainersExtension
     implements BeforeEachCallback, BeforeAllCallback, AfterEachCallback, AfterAllCallback, ExecutionCondition {
 
     private static final Namespace NAMESPACE = Namespace.create(TestcontainersExtension.class);

File: modules/toxiproxy/src/main/java/org/testcontainers/containers/ToxiproxyContainer.java
Patch:
@@ -79,7 +79,7 @@ public int getControlPort() {
 
     /**
      * Obtain a {@link ContainerProxy} instance for target container that is managed by Testcontainers. The target
-     * container should be routable from this <b>from this {@link ToxiproxyContainer} instance</b> (e.g. on the same
+     * container should be routable <b>from this {@link ToxiproxyContainer} instance</b> (e.g. on the same
      * Docker {@link Network}).
      *
      * @param container target container

File: modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java
Patch:
@@ -102,10 +102,11 @@ public ElasticsearchContainer(final DockerImageName dockerImageName) {
         this.isAtLeastMajorVersion8 =
             new ComparableVersion(dockerImageName.getVersionPart()).isGreaterThanOrEqualTo("8.0.0");
         // regex that
+        //   matches 8.3 JSON logging with started message and some follow up content within the message field
         //   matches 8.0 JSON logging with no whitespace between message field and content
         //   matches 7.x JSON logging with whitespace between message field and content
         //   matches 6.x text logging with node name in brackets and just a 'started' message till the end of the line
-        String regex = ".*(\"message\":\\s?\"started\".*|] started\n$)";
+        String regex = ".*(\"message\":\\s?\"started[\\s?|\"].*|] started\n$)";
         setWaitStrategy(new LogMessageWaitStrategy().withRegEx(regex));
         if (isAtLeastMajorVersion8) {
             withPassword(ELASTICSEARCH_DEFAULT_PASSWORD);

File: modules/toxiproxy/src/main/java/org/testcontainers/containers/ToxiproxyContainer.java
Patch:
@@ -25,6 +25,8 @@ public class ToxiproxyContainer extends GenericContainer<ToxiproxyContainer> {
 
     private static final String DEFAULT_TAG = "2.1.0";
 
+    private static final DockerImageName GHCR_IMAGE_NAME = DockerImageName.parse("ghcr.io/shopify/toxiproxy");
+
     private static final int TOXIPROXY_CONTROL_PORT = 8474;
 
     private static final int FIRST_PROXIED_PORT = 8666;
@@ -51,7 +53,7 @@ public ToxiproxyContainer(String dockerImageName) {
 
     public ToxiproxyContainer(final DockerImageName dockerImageName) {
         super(dockerImageName);
-        dockerImageName.assertCompatibleWith(DEFAULT_IMAGE_NAME);
+        dockerImageName.assertCompatibleWith(DEFAULT_IMAGE_NAME, GHCR_IMAGE_NAME);
 
         addExposedPorts(TOXIPROXY_CONTROL_PORT);
         setWaitStrategy(new HttpWaitStrategy().forPath("/version").forPort(TOXIPROXY_CONTROL_PORT));

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -232,7 +232,7 @@ public Connection createConnection(String queryString) throws SQLException, NoDr
                     logger()
                         .debug(
                             "Trying to create JDBC connection using {} to {} with properties: {}",
-                            driver.getClass().getName(),
+                            jdbcDriverInstance.getClass().getName(),
                             url,
                             info
                         );

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -45,6 +45,8 @@ public class LocalStackContainer extends GenericContainer<LocalStackContainer> {
 
     private static final String DEFAULT_TAG = "0.11.2";
 
+    private static final String DEFAULT_REGION = "us-east-1";
+
     @Deprecated
     public static final String VERSION = DEFAULT_TAG;
 
@@ -311,7 +313,7 @@ public String getSecretKey() {
      * @return a default region
      */
     public String getRegion() {
-        return "us-east-1";
+        return this.getEnvMap().getOrDefault("DEFAULT_REGION", DEFAULT_REGION);
     }
 
     public interface EnabledService {

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -416,7 +416,7 @@ private void tryStart(Instant startedAt) {
 
             if (!reusable) {
                 //noinspection deprecation
-                createCommand.getLabels().putAll(ResourceReaper.instance().getLabels());
+                createCommand = ResourceReaper.instance().register(this, createCommand);
             }
 
             if (!reused) {
@@ -469,7 +469,7 @@ private void tryStart(Instant startedAt) {
             containerIsStarting(containerInfo, reused);
 
             // Wait until the container has reached the desired running state
-            if (!this.startupCheckStrategy.waitUntilStartupSuccessful(dockerClient, containerId)) {
+            if (!this.startupCheckStrategy.waitUntilStartupSuccessful(this)) {
                 // Bail out, don't wait for the port to start listening.
                 // (Exception thrown here will be caught below and wrapped)
                 throw new IllegalStateException("Container did not start correctly.");

File: core/src/main/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheck.java
Patch:
@@ -40,7 +40,7 @@ public Boolean call() {
 
         Instant before = Instant.now();
         try {
-            ExecResult result = ExecInContainerPattern.execInContainer(waitStrategyTarget.getContainerInfo(), "/bin/sh", "-c", command.toString());
+            ExecResult result = ExecInContainerPattern.execInContainer(waitStrategyTarget.getDockerClient(), waitStrategyTarget.getContainerInfo(), "/bin/sh", "-c", command.toString());
             log.trace("Check for {} took {}. Result code '{}', stdout message: '{}'", internalPorts, Duration.between(before, Instant.now()), result.getExitCode(), result.getStdout());
             int exitCode = result.getExitCode();
             if (exitCode != 0 && exitCode != 1) {

File: core/src/main/java/org/testcontainers/containers/wait/strategy/LogMessageWaitStrategy.java
Patch:
@@ -27,7 +27,7 @@ public class LogMessageWaitStrategy extends AbstractWaitStrategy {
     protected void waitUntilReady() {
         WaitingConsumer waitingConsumer = new WaitingConsumer();
 
-        LogContainerCmd cmd = DockerClientFactory.instance().client().logContainerCmd(waitStrategyTarget.getContainerId())
+        LogContainerCmd cmd = waitStrategyTarget.getDockerClient().logContainerCmd(waitStrategyTarget.getContainerId())
             .withFollowStream(true)
             .withSince(0)
             .withStdOut(true)

File: examples/spring-boot/src/test/java/com/example/AbstractIntegrationTest.java
Patch:
@@ -23,7 +23,7 @@ public abstract class AbstractIntegrationTest {
     @DynamicPropertySource
     static void redisProperties(DynamicPropertyRegistry registry) {
         redis.start();
-        registry.add("spring.redis.host", redis::getContainerIpAddress);
+        registry.add("spring.redis.host", redis::getHost);
         registry.add("spring.redis.port", redis::getFirstMappedPort);
     }
 }

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -1,7 +1,6 @@
 package org.testcontainers.containers;
 
 import com.github.dockerjava.api.command.InspectContainerResponse;
-import java.sql.Statement;
 import lombok.NonNull;
 import lombok.SneakyThrows;
 import org.apache.commons.lang3.StringUtils;
@@ -16,6 +15,7 @@
 import java.sql.Connection;
 import java.sql.Driver;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
@@ -144,7 +144,8 @@ protected void waitUntilContainerStarted() {
             if (!isRunning()) {
                 Thread.sleep(100L);
             } else {
-                try (Statement statement = createConnection("").createStatement()) {
+                try (Connection connection = createConnection("");
+                     Statement statement = connection.createStatement()) {
                     boolean testQuerySucceeded = statement.execute(this.getTestQueryString());
                     if (testQuerySucceeded) {
                         logger().info("Container is started (JDBC URL: {})", this.getJdbcUrl());

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -187,7 +187,6 @@ public DockerClient client() {
 
         final DockerClientProviderStrategy strategy = getOrInitializeStrategy();
 
-        log.info("Docker host IP address is {}", strategy.getDockerHostIpAddress());
         client = new DockerClientDelegate() {
 
             @Getter
@@ -198,6 +197,7 @@ public void close() {
                 throw new IllegalStateException("You should never close the global DockerClient!");
             }
         };
+        log.info("Docker host IP address is {}", strategy.getDockerHostIpAddress());
 
         Info dockerInfo = client.infoCmd().exec();
         Version version = client.versionCmd().exec();

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -198,7 +198,7 @@ public String getImageSubstitutorClassName() {
     }
 
     public Integer getClientPingTimeout() {
-        return Integer.parseInt(getEnvVarOrProperty("client.ping.timeout", "5"));
+        return Integer.parseInt(getEnvVarOrProperty("client.ping.timeout", "10"));
     }
 
     @Nullable

File: modules/rabbitmq/src/main/java/org/testcontainers/containers/RabbitMQContainer.java
Patch:
@@ -396,7 +396,7 @@ public RabbitMQContainer withRabbitMQConfig(MountableFile rabbitMQConf) {
      * @return This container.
      */
     public RabbitMQContainer withRabbitMQConfigSysctl(MountableFile rabbitMQConf) {
-        withEnv("RABBITMQ_CONFIG_FILE", "/etc/rabbitmq/rabbitmq-custom");
+        withEnv("RABBITMQ_CONFIG_FILE", "/etc/rabbitmq/rabbitmq-custom.conf");
         return withCopyFileToContainer(rabbitMQConf, "/etc/rabbitmq/rabbitmq-custom.conf");
     }
 

File: core/src/main/java/org/testcontainers/images/LocalImagesCache.java
Patch:
@@ -21,7 +21,8 @@
 enum LocalImagesCache {
     INSTANCE;
 
-    private final AtomicBoolean initialized = new AtomicBoolean(false);
+    @VisibleForTesting
+    final AtomicBoolean initialized = new AtomicBoolean(false);
 
     @VisibleForTesting
     final Map<DockerImageName, ImageData> cache = new ConcurrentHashMap<>();

File: core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.testcontainers.containers.ContainerState;
 import org.testcontainers.containers.DockerComposeContainer;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.images.LocalImagesCacheAccessor;
 import org.testcontainers.images.builder.ImageFromDockerfile;
 
 import java.io.IOException;
@@ -93,6 +94,7 @@ public void removeImageFromLocalDocker() {
         } catch (NotFoundException ignored) {
 
         }
+        LocalImagesCacheAccessor.clearCache();
     }
 
     @AfterClass

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -20,8 +20,8 @@
 import lombok.SneakyThrows;
 import lombok.Synchronized;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.testcontainers.dockerclient.DockerClientProviderStrategy;
 import org.testcontainers.dockerclient.DockerMachineClientProviderStrategy;
 import org.testcontainers.dockerclient.TransportConfig;

File: core/src/main/java/org/testcontainers/containers/ContainerState.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.compress.utils.IOUtils;
-import org.apache.commons.lang.math.NumberUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testcontainers.DockerClientFactory;

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -12,8 +12,8 @@
 import com.google.common.util.concurrent.Uninterruptibles;
 import lombok.NonNull;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
 import org.slf4j.Logger;

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -27,8 +27,8 @@
 import lombok.Setter;
 import lombok.SneakyThrows;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.junit.runner.Description;

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientConfigUtils.java
Patch:
@@ -2,7 +2,7 @@
 
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.testcontainers.DockerClientFactory;
 
 import java.io.File;

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -14,7 +14,7 @@
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.jetbrains.annotations.Nullable;
 import org.rnorth.ducttape.TimeoutException;
 import org.rnorth.ducttape.ratelimits.RateLimiter;

File: core/src/main/java/org/testcontainers/dockerclient/NpipeSocketClientProviderStrategy.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.dockerclient;
 
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import java.net.URI;
 

File: core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java
Patch:
@@ -4,8 +4,8 @@
 import com.sun.jna.Native;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.jetbrains.annotations.Nullable;
 
 import java.net.URI;

File: core/src/main/java/org/testcontainers/dockerclient/UnixSocketClientProviderStrategy.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.dockerclient;
 
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import java.io.IOException;
 import java.net.URI;

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -9,7 +9,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.testcontainers.DockerClientFactory;
 import org.testcontainers.images.ParsedDockerfile;

File: core/src/main/java/org/testcontainers/images/builder/traits/StringsTrait.java
Patch:
@@ -1,7 +1,7 @@
 package org.testcontainers.images.builder.traits;
 
 import lombok.Getter;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.testcontainers.images.builder.Transferable;
 
 /**

File: core/src/main/java/org/testcontainers/utility/AuditLogger.java
Patch:
@@ -5,7 +5,7 @@
 import com.github.dockerjava.api.command.DockerCmd;
 import lombok.experimental.UtilityClass;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.MDC;

File: core/src/main/java/org/testcontainers/utility/DockerMachineClient.java
Patch:
@@ -1,7 +1,7 @@
 package org.testcontainers.utility;
 
 import lombok.NonNull;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.slf4j.Logger;
 
 import java.util.List;

File: core/src/main/java/org/testcontainers/utility/MountableFile.java
Patch:
@@ -7,7 +7,7 @@
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.compress.archivers.tar.TarConstants;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.jetbrains.annotations.NotNull;
 import org.testcontainers.DockerClientFactory;
 import org.testcontainers.UnstableAPI;

File: core/src/main/java/org/testcontainers/utility/RegistryAuthLocator.java
Patch:
@@ -4,8 +4,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.github.dockerjava.api.model.AuthConfig;
 import com.google.common.annotations.VisibleForTesting;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.slf4j.Logger;
 import org.zeroturnaround.exec.InvalidResultException;
 import org.zeroturnaround.exec.ProcessExecutor;
@@ -22,7 +22,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.apache.commons.lang3.StringUtils.isBlank;
 import static org.slf4j.LoggerFactory.getLogger;
 import static org.testcontainers.utility.AuthConfigUtil.toSafeString;
 

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -8,7 +8,7 @@
 import lombok.SneakyThrows;
 import lombok.Synchronized;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;

File: core/src/test/java/org/testcontainers/containers/output/ToStringConsumerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.apache.commons.lang.RandomStringUtils;
+import org.apache.commons.lang3.RandomStringUtils;
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.testcontainers.containers.Container.ExecResult;

File: core/src/test/java/org/testcontainers/images/builder/dockerfile/statement/AbstractStatementTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.testcontainers.images.builder.dockerfile.statement;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.junit.Rule;
 import org.junit.rules.TestName;
 import org.rnorth.ducttape.Preconditions;
@@ -31,7 +31,7 @@ protected void assertStatement(Statement statement) {
             IOUtils.closeQuietly(inputStream);
             expectedLines = StringUtils.chomp(content.replaceAll("\r\n", "\n").trim()).split("\n");
         } catch (Exception e) {
-            fail("can't load fixture '" + testName.getMethodName() + "'\n" + ExceptionUtils.getFullStackTrace(e));
+            fail("can't load fixture '" + testName.getMethodName() + "'\n" + ExceptionUtils.getStackTrace(e));
         }
 
         StringBuilder builder = new StringBuilder();

File: core/src/test/java/org/testcontainers/utility/RegistryAuthLocatorTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dockerjava.api.model.AuthConfig;
 import com.google.common.io.Resources;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 

File: modules/database-commons/src/main/java/org/testcontainers/ext/ScriptUtils.java
Patch:
@@ -17,7 +17,7 @@
 package org.testcontainers.ext;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testcontainers.delegate.DatabaseDelegate;

File: modules/jdbc-test/src/main/java/org/testcontainers/jdbc/AbstractJDBCDriverTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.commons.dbutils.QueryRunner;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.junit.AfterClass;
 import org.junit.Test;
 import org.junit.runners.Parameterized.Parameter;

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -4,7 +4,7 @@
 import java.sql.Statement;
 import lombok.NonNull;
 import lombok.SneakyThrows;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.jetbrains.annotations.NotNull;
 import org.testcontainers.containers.traits.LinkableContainer;
 import org.testcontainers.delegate.DatabaseDelegate;

File: modules/k3s/src/main/java/org/testcontainers/k3s/K3sContainer.java
Patch:
@@ -27,9 +27,7 @@ public K3sContainer(DockerImageName dockerImageName) {
         addExposedPorts(6443, 8443);
         setPrivilegedMode(true);
         withCreateContainerCmdModifier(it -> {
-            DockerObjectAccessor.overrideRawValue(
-                it.getHostConfig(), "CgroupnsMode", "host"
-            );
+            it.getHostConfig().withCgroupnsMode("host");
         });
         addFileSystemBind("/sys/fs/cgroup", "/sys/fs/cgroup", BindMode.READ_WRITE);
 

File: modules/mariadb/src/test/java/org/testcontainers/junit/mariadb/SimpleMariaDBTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.junit.mariadb;
 
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.junit.Test;
 import org.testcontainers.containers.MariaDBContainer;
 import org.testcontainers.db.AbstractContainerDatabaseTest;

File: modules/mssqlserver/src/test/java/org/testcontainers/junit/mssqlserver/CustomPasswordMSSQLServerTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.junit.mssqlserver;
 
-import org.apache.commons.lang.RandomStringUtils;
+import org.apache.commons.lang3.RandomStringUtils;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;

File: modules/mysql/src/test/java/org/testcontainers/junit/mysql/SimpleMySQLTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.junit.mysql;
 
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.openqa.selenium.Capabilities;

File: modules/selenium/src/test/java/org/testcontainers/junit/BrowserWebDriverContainerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dockerjava.api.command.InspectContainerResponse;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.SystemUtils;
+import org.apache.commons.lang3.SystemUtils;
 import org.junit.Assume;
 import org.junit.Test;
 import org.openqa.selenium.chrome.ChromeOptions;

File: modules/selenium/src/test/java/org/testcontainers/junit/LocalServerWebDriverContainerTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.testcontainers.containers.BrowserWebDriverContainer;
 import org.testcontainers.utility.TestEnvironment;
 
-import static org.apache.commons.lang.SystemUtils.IS_OS_MAC_OSX;
+import static org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX;
 import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
 
 /**

File: modules/solr/src/main/java/org/testcontainers/containers/SolrContainer.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.dockerjava.api.command.InspectContainerResponse;
 import lombok.SneakyThrows;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
 import org.testcontainers.utility.DockerImageName;
 

File: docs/examples/junit4/generic/src/test/java/org/testcontainers/containers/startupcheck/StartupCheckStrategyTest.java
Patch:
@@ -84,9 +84,9 @@ public static class MinimumDurationStrategyTest {
         @SneakyThrows
         @Test
         public void testCommandIsExecuted() {
-            waitForHello(bboxWithMinimumDuration);
-
             assertThat(bboxWithMinimumDuration.isRunning()).isTrue();
+
+            waitForHello(bboxWithMinimumDuration);
         }
     }
 }

File: modules/mssqlserver/src/test/java/org/testcontainers/junit/mssqlserver/SimpleMSSQLServerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.testcontainers.junit.mssqlserver;
 
 import org.junit.Test;
-import org.testcontainers.MSSQLServerTestImages;
 import org.testcontainers.containers.MSSQLServerContainer;
 import org.testcontainers.db.AbstractContainerDatabaseTest;
 
@@ -11,7 +10,7 @@
 import java.sql.Statement;
 
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
 import static org.testcontainers.MSSQLServerTestImages.MSSQL_SERVER_IMAGE;
 

File: modules/gcloud/src/test/java/org/testcontainers/containers/BigtableEmulatorContainerTest.java
Patch:
@@ -43,7 +43,7 @@ public class BigtableEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public BigtableEmulatorContainer emulator = new BigtableEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:316.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:367.0.0-emulators")
     );
     // }
 

File: modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java
Patch:
@@ -17,7 +17,7 @@ public class DatastoreEmulatorContainerTest {
     @Rule
     // creatingDatastoreEmulatorContainer {
     public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:316.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:367.0.0-emulators")
     );
     // }
 

File: modules/gcloud/src/test/java/org/testcontainers/containers/FirestoreEmulatorContainerTest.java
Patch:
@@ -22,7 +22,7 @@ public class FirestoreEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public FirestoreEmulatorContainer emulator = new FirestoreEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:316.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:367.0.0-emulators")
     );
     // }
 

File: modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java
Patch:
@@ -35,7 +35,7 @@ public class PubSubEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer(
-        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:316.0.0-emulators")
+        DockerImageName.parse("gcr.io/google.com/cloudsdktool/cloud-sdk:367.0.0-emulators")
     );
     // }
 

File: modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java
Patch:
@@ -27,7 +27,7 @@ public class SpannerEmulatorContainerTest {
     @Rule
     // emulatorContainer {
     public SpannerEmulatorContainer emulator = new SpannerEmulatorContainer(
-        DockerImageName.parse("gcr.io/cloud-spanner-emulator/emulator:1.1.0")
+        DockerImageName.parse("gcr.io/cloud-spanner-emulator/emulator:1.4.0")
     );
     // }
 

File: modules/neo4j/src/test/java/org/testcontainers/containers/Neo4jTestImages.java
Patch:
@@ -3,5 +3,5 @@
 import org.testcontainers.utility.DockerImageName;
 
 public interface Neo4jTestImages {
-    DockerImageName NEO4J_TEST_IMAGE = DockerImageName.parse("neo4j:3.5.0");
+    DockerImageName NEO4J_TEST_IMAGE = DockerImageName.parse("neo4j:4.4.1");
 }

File: modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java
Patch:
@@ -91,7 +91,7 @@ public Neo4jContainer(final DockerImageName dockerImageName) {
         dockerImageName.assertCompatibleWith(DEFAULT_IMAGE_NAME);
 
         WaitStrategy waitForBolt = new LogMessageWaitStrategy()
-            .withRegEx(String.format(".*Bolt enabled on 0\\.0\\.0\\.0:%d\\.\n", DEFAULT_BOLT_PORT));
+            .withRegEx(String.format(".*Bolt enabled on .*:%d\\.\n", DEFAULT_BOLT_PORT));
         WaitStrategy waitForHttp = new HttpWaitStrategy()
             .forPort(DEFAULT_HTTP_PORT)
             .forStatusCodeMatching(response -> response == HTTP_OK);

File: modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java
Patch:
@@ -281,9 +281,8 @@ public int getPort() {
     @Override
     protected void containerIsStarted(InspectContainerResponse containerInfo) {
         driver = Unreliables.retryUntilSuccess(30, TimeUnit.SECONDS,
-                Timeouts.getWithTimeout(10, TimeUnit.SECONDS,
-                        () ->
-                            () -> new RemoteWebDriver(getSeleniumAddress(), capabilities)));
+                () -> Timeouts.getWithTimeout(10, TimeUnit.SECONDS,
+                        () -> new RemoteWebDriver(getSeleniumAddress(), capabilities)));
 
         if (vncRecordingContainer != null) {
             LOGGER.debug("Starting VNC recording");

File: core/src/main/java/org/testcontainers/containers/wait/strategy/HostPortWaitStrategy.java
Patch:
@@ -68,6 +68,7 @@ protected void waitUntilReady() {
                         .pollInSameThread()
                         .pollInterval(Duration.ofMillis(100))
                         .pollDelay(Duration.ZERO)
+                        .ignoreExceptions()
                         .forever()
                         .until(externalCheck);
 

File: examples/kafka-cluster/src/test/java/com/example/kafkacluster/KafkaContainerClusterTest.java
Patch:
@@ -30,7 +30,7 @@ public class KafkaContainerClusterTest {
     @Test
     public void testKafkaContainerCluster() throws Exception {
         try (
-            KafkaContainerCluster cluster = new KafkaContainerCluster("5.2.1", 3, 2)
+            KafkaContainerCluster cluster = new KafkaContainerCluster("6.2.1", 3, 2)
         ) {
             cluster.start();
             String bootstrapServers = cluster.getBootstrapServers();

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -118,7 +118,7 @@ protected void containerIsStarted(InspectContainerResponse containerInfo) {
             "advertised.listeners=[" + String.join(",", getBootstrapServers(), brokerAdvertisedListener) + "]"
         );
         if (result.getExitCode() != 0) {
-            throw new IllegalStateException(result.getStderr());
+            throw new IllegalStateException(result.toString());
         }
     }
 

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLContainer.java
Patch:
@@ -35,7 +35,7 @@ public class PostgreSQLContainer<SELF extends PostgreSQLContainer<SELF>> extends
     private static final String QUERY_PARAM_SEPARATOR = "&";
 
     /**
-     * @deprecated use {@link PostgreSQLContainer(DockerImageName)} instead
+     * @deprecated use {@link #PostgreSQLContainer(DockerImageName)} or {@link #PostgreSQLContainer(String)} instead
      */
     @Deprecated
     public PostgreSQLContainer() {

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -24,7 +24,6 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Map;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicReference;
@@ -61,6 +60,7 @@ public class TestcontainersConfiguration {
     private static final String PULSAR_IMAGE = "apachepulsar/pulsar";
     private static final String LOCALSTACK_IMAGE = "localstack/localstack";
     private static final String SSHD_IMAGE = "testcontainers/sshd";
+    private static final String ORACLE_IMAGE = "gvenzl/oracle-xe";
 
     private static final ImmutableMap<DockerImageName, String> CONTAINER_MAPPING = ImmutableMap.<DockerImageName, String>builder()
         .put(DockerImageName.parse(AMBASSADOR_IMAGE), "ambassador.container.image")
@@ -73,6 +73,7 @@ public class TestcontainersConfiguration {
         .put(DockerImageName.parse(PULSAR_IMAGE), "pulsar.container.image")
         .put(DockerImageName.parse(LOCALSTACK_IMAGE), "localstack.container.image")
         .put(DockerImageName.parse(SSHD_IMAGE), "sshd.container.image")
+        .put(DockerImageName.parse(ORACLE_IMAGE), "oracle.container.image")
         .build();
 
     @Getter(lazy = true)
@@ -146,7 +147,7 @@ public String getKafkaImage() {
 
     @Deprecated
     public String getOracleImage() {
-        return getEnvVarOrProperty("oracle.container.image", null);
+        return getImage(ORACLE_IMAGE).asCanonicalNameString();
     }
 
     @Deprecated

File: core/src/jarFileTest/java/org/testcontainers/PublicBinaryAPITest.java
Patch:
@@ -93,6 +93,7 @@ public void setUp() {
             case "org/testcontainers/dockerclient/UnixSocketClientProviderStrategy":
             case "org/testcontainers/dockerclient/DockerClientProviderStrategy":
             case "org/testcontainers/dockerclient/WindowsClientProviderStrategy":
+            case "org/testcontainers/utility/DynamicPollInterval":
                 Assume.assumeTrue(false);
         }
     }

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -135,7 +135,7 @@ public class GenericContainer<SELF extends GenericContainer<SELF>>
     @NonNull
     private String networkMode;
 
-    @NonNull
+    @Nullable
     private Network network;
 
     @NonNull

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -176,7 +176,7 @@ public String getDockerClientStrategyClassName() {
     }
 
     public String getTransportType() {
-        return getEnvVarOrProperty("transport.type", "okhttp");
+        return getEnvVarOrProperty("transport.type", "httpclient5");
     }
 
     public Integer getImagePullPauseTimeout() {

File: core/src/main/java/org/testcontainers/containers/ParsedDockerComposeFile.java
Patch:
@@ -120,6 +120,7 @@ private void findImageNamesInDockerfile(Map serviceDefinitionMap) {
             final Object contextRelativePath = buildElement.get("context");
             if (dockerfileRelativePath instanceof String && contextRelativePath instanceof String) {
                 dockerfilePath = composeFile
+                    .getAbsoluteFile()
                     .getParentFile()
                     .toPath()
                     .resolve((String) contextRelativePath)
@@ -128,6 +129,7 @@ private void findImageNamesInDockerfile(Map serviceDefinitionMap) {
             }
         } else if (buildNode instanceof String) {
             dockerfilePath = composeFile
+                .getAbsoluteFile()
                 .getParentFile()
                 .toPath()
                 .resolve((String) buildNode)

File: core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java
Patch:
@@ -132,7 +132,7 @@ String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull Stri
             @Override
             String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {
                 String newFileOutput = "/newScreen.mp4";
-                container.execInContainer("ffmpeg", "-i", source, "-vcodec", "libx264", "-movflags", "faststart", newFileOutput);
+                container.execInContainer("ffmpeg", "-i", source, "-vcodec", "libx264", "-movflags", "faststart", "-pix_fmt", "yuv420p", newFileOutput);
                 return newFileOutput;
             }
         };

File: modules/selenium/src/test/java/org/testcontainers/containers/DefaultRecordingFileFactoryTest.java
Patch:
@@ -57,4 +57,4 @@ public void recordingFileThatShouldDescribeTheTestResultAtThePresentTime() throw
 
         assertThat(expectedPossibleFileNames, hasItem(recordingFile));
     }
-}
\ No newline at end of file
+}

File: modules/cockroachdb/src/main/java/org/testcontainers/containers/CockroachContainer.java
Patch:
@@ -8,7 +8,7 @@
 public class CockroachContainer extends JdbcDatabaseContainer<CockroachContainer> {
 
     private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("cockroachdb/cockroach");
-    private static final String DEFAULT_TAG = "v19.1.1";
+    private static final String DEFAULT_TAG = "v19.2.11";
 
     public static final String NAME = "cockroach";
 
@@ -53,7 +53,7 @@ public CockroachContainer(final DockerImageName dockerImageName) {
                 .forStatusCode(200)
                 .withStartupTimeout(Duration.ofMinutes(1))
         );
-        withCommand("start --insecure");
+        withCommand("start-single-node --insecure");
     }
 
     @Override

File: modules/cockroachdb/src/test/java/org/testcontainers/CockroachDBTestImages.java
Patch:
@@ -3,5 +3,5 @@
 import org.testcontainers.utility.DockerImageName;
 
 public interface CockroachDBTestImages {
-    DockerImageName COCKROACHDB_IMAGE = DockerImageName.parse("cockroachdb/cockroach:v19.1.1");
+    DockerImageName COCKROACHDB_IMAGE = DockerImageName.parse("cockroachdb/cockroach:v19.2.11");
 }

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -1339,7 +1339,7 @@ public void copyFileFromContainer(String containerPath, String destinationPath)
     }
 
     /**
-     * Allow container startup to be attempted more than once if an error occurs. To be if containers are
+     * Allow container startup to be attempted more than once if an error occurs. To be used if containers are
      * 'flaky' but this flakiness is not something that should affect test outcomes.
      *
      * @param attempts number of attempts

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -54,7 +54,7 @@ public class ImageFromDockerfile extends LazyFuture<String> implements
     private Set<String> dependencyImageNames = Collections.emptySet();
 
     public ImageFromDockerfile() {
-        this("testcontainers/" + Base58.randomString(16).toLowerCase());
+        this("localhost/testcontainers/" + Base58.randomString(16).toLowerCase());
     }
 
     public ImageFromDockerfile(String dockerImageName) {

File: core/src/main/java/org/testcontainers/utility/MountableFile.java
Patch:
@@ -105,7 +105,7 @@ public static MountableFile forClasspathResource(@NotNull final String resourceN
      * @return a {@link MountableFile} that may be used to obtain a mountable path
      */
     public static MountableFile forHostPath(@NotNull final String path, Integer mode) {
-        return new MountableFile(new File(path).toURI().toString(), mode);
+        return forHostPath(Paths.get(path), mode);
     }
 
     /**

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgisContainerProvider.java
Patch:
@@ -27,7 +27,7 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new PostgreSQLContainer<>(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
+        return new PostgreSQLContainer<>(DEFAULT_IMAGE_NAME.withTag(tag));
     }
 
     @Override

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -212,7 +212,6 @@ private String getConfigurable(@NotNull final String propertyName, @Nullable fin
      * @param propertyName name of configuration file property (dot-separated lower case)
      * @return the found value, or null if not set
      */
-    @Nullable
     @Contract("_, !null -> !null")
     public String getEnvVarOrProperty(@NotNull final String propertyName, @Nullable final String defaultValue) {
         return getConfigurable(propertyName, defaultValue, userProperties, classpathProperties);
@@ -225,7 +224,6 @@ public String getEnvVarOrProperty(@NotNull final String propertyName, @Nullable
      * @param propertyName name of configuration file property (dot-separated lower case)
      * @return the found value, or null if not set
      */
-    @Nullable
     @Contract("_, !null -> !null")
     public String getEnvVarOrUserProperty(@NotNull final String propertyName, @Nullable final String defaultValue) {
         return getConfigurable(propertyName, defaultValue, userProperties);
@@ -238,7 +236,6 @@ public String getEnvVarOrUserProperty(@NotNull final String propertyName, @Nulla
      * @param propertyName name of configuration file property (dot-separated lower case)
      * @return the found value, or null if not set
      */
-    @Nullable
     @Contract("_, !null -> !null")
     public String getUserProperty(@NotNull final String propertyName, @Nullable final String defaultValue) {
         return getConfigurable(propertyName, defaultValue);

File: core/src/main/java/org/testcontainers/utility/Versioning.java
Patch:
@@ -46,6 +46,7 @@ public int hashCode() {
     @EqualsAndHashCode
     class TagVersioning implements Versioning {
         public static final String TAG_REGEX = "[\\w][\\w.\\-]{0,127}";
+        static final TagVersioning LATEST = new TagVersioning("latest");
         private final String tag;
 
         TagVersioning(String tag) {

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -29,11 +29,11 @@
 import org.testcontainers.utility.AuditLogger;
 import org.testcontainers.utility.Base58;
 import org.testcontainers.utility.CommandLine;
+import org.testcontainers.utility.DockerImageName;
 import org.testcontainers.utility.DockerLoggerFactory;
 import org.testcontainers.utility.LogUtils;
 import org.testcontainers.utility.MountableFile;
 import org.testcontainers.utility.ResourceReaper;
-import org.testcontainers.utility.TestcontainersConfiguration;
 import org.zeroturnaround.exec.InvalidExitValueException;
 import org.zeroturnaround.exec.ProcessExecutor;
 import org.zeroturnaround.exec.stream.slf4j.Slf4jStream;
@@ -608,10 +608,11 @@ interface DockerCompose {
 class ContainerisedDockerCompose extends GenericContainer<ContainerisedDockerCompose> implements DockerCompose {
 
     public static final char UNIX_PATH_SEPERATOR = ':';
+    public static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("docker/compose:1.24.1");
 
     public ContainerisedDockerCompose(List<File> composeFiles, String identifier) {
 
-        super(TestcontainersConfiguration.getInstance().getDockerComposeDockerImageName());
+        super(DEFAULT_IMAGE_NAME);
         addEnv(ENV_PROJECT_NAME, identifier);
 
         // Map the docker compose file into the container

File: core/src/main/java/org/testcontainers/containers/PortForwardingContainer.java
Patch:
@@ -5,15 +5,15 @@
 import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.SneakyThrows;
-import org.testcontainers.utility.TestcontainersConfiguration;
+import org.testcontainers.utility.DockerImageName;
 
 import java.time.Duration;
 import java.util.AbstractMap;
 import java.util.Collections;
+import java.util.Map.Entry;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
-import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 
 public enum PortForwardingContainer {
@@ -29,7 +29,7 @@ public enum PortForwardingContainer {
     @SneakyThrows
     private Connection createSSHSession() {
         String password = UUID.randomUUID().toString();
-        container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getSSHdDockerImageName())
+        container = new GenericContainer<>(DockerImageName.parse("testcontainers/sshd:1.0.0"))
             .withExposedPorts(22)
             .withEnv("PASSWORD", password)
             .withCommand(

File: core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.ToString;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
-import org.testcontainers.utility.TestcontainersConfiguration;
+import org.testcontainers.utility.DockerImageName;
 
 import java.io.File;
 import java.io.InputStream;
@@ -52,7 +52,7 @@ public VncRecordingContainer(@NonNull GenericContainer<?> targetContainer) {
      * Create a sidekick container and attach it to another container. The VNC output of that container will be recorded.
      */
     public VncRecordingContainer(@NonNull Network network, @NonNull String targetNetworkAlias) throws IllegalStateException {
-        super(TestcontainersConfiguration.getInstance().getVncDockerImageName());
+        super(DockerImageName.parse("testcontainers/vnc-recorder:1.1.0"));
 
         this.targetNetworkAlias = targetNetworkAlias;
         withNetwork(network);

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -171,7 +171,7 @@ public static DockerClientProviderStrategy getFirstValidStrategy(List<DockerClie
                         }
 
                         if (strategy.isPersistable()) {
-                            TestcontainersConfiguration.getInstance().updateGlobalConfig("docker.client.strategy", strategy.getClass().getName());
+                            TestcontainersConfiguration.getInstance().updateUserConfig("docker.client.strategy", strategy.getClass().getName());
                         }
 
                         return Stream.of(strategy);

File: core/src/main/java/org/testcontainers/utility/ResourceReaper.java
Patch:
@@ -72,7 +72,9 @@ private ResourceReaper() {
 
     @SneakyThrows(InterruptedException.class)
     public static String start(String hostIpAddress, DockerClient client) {
-        String ryukImage = TestcontainersConfiguration.getInstance().getRyukDockerImageName().asCanonicalNameString();
+        String ryukImage = ImageNameSubstitutor.instance()
+            .apply(DockerImageName.parse("testcontainers/ryuk:0.3.0"))
+            .asCanonicalNameString();
         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);
 
         List<Bind> binds = new ArrayList<>();

File: core/src/test/java/org/testcontainers/TestImages.java
Patch:
@@ -1,13 +1,12 @@
 package org.testcontainers;
 
 import org.testcontainers.utility.DockerImageName;
-import org.testcontainers.utility.TestcontainersConfiguration;
 
 public interface TestImages {
     DockerImageName REDIS_IMAGE = DockerImageName.parse("redis:3.0.2");
     DockerImageName RABBITMQ_IMAGE = DockerImageName.parse("rabbitmq:3.5.3");
     DockerImageName MONGODB_IMAGE = DockerImageName.parse("mongo:3.1.5");
     DockerImageName ALPINE_IMAGE = DockerImageName.parse("alpine:3.2");
     DockerImageName DOCKER_REGISTRY_IMAGE = DockerImageName.parse("registry:2.7.0");
-    DockerImageName TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyDockerImageName();
+    DockerImageName TINY_IMAGE = DockerImageName.parse("alpine:3.5");
 }

File: core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java
Patch:
@@ -26,9 +26,8 @@ public void testNoTagTreatedAsWildcard() {
         /*
         foo:1.2.3 != foo:4.5.6
         foo:1.2.3 ~= foo
-        foo:1.2.3 ~= foo:latest
 
-        The test is effectively making sure that no tag and `latest` tag are equivalent
+        The test is effectively making sure that 'no tag' is treated as a wildcard
          */
         assertFalse("foo:4.5.6 != foo:1.2.3", subject.isCompatibleWith(DockerImageName.parse("foo:1.2.3")));
         assertTrue("foo:4.5.6 ~= foo", subject.isCompatibleWith(DockerImageName.parse("foo")));

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -4,7 +4,6 @@
 import lombok.SneakyThrows;
 import org.testcontainers.images.builder.Transferable;
 import org.testcontainers.utility.DockerImageName;
-import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.nio.charset.StandardCharsets;
 import java.util.stream.Collectors;
@@ -36,15 +35,15 @@ public class KafkaContainer extends GenericContainer<KafkaContainer> {
      */
     @Deprecated
     public KafkaContainer() {
-        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(DEFAULT_TAG));
+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
      * @deprecated use {@link KafkaContainer(DockerImageName)} instead
      */
     @Deprecated
     public KafkaContainer(String confluentPlatformVersion) {
-        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));
+        this(DEFAULT_IMAGE_NAME.withTag(confluentPlatformVersion));
     }
 
     public KafkaContainer(final DockerImageName dockerImageName) {

File: modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java
Patch:
@@ -61,7 +61,7 @@ public void testUsageWithSpecificImage() throws Exception {
     @Test
     public void testUsageWithVersion() throws Exception {
         try (
-            KafkaContainer kafka = new KafkaContainer("5.4.3")
+            KafkaContainer kafka = new KafkaContainer("5.5.1")
         ) {
             kafka.start();
             testKafkaFunctionality(kafka.getBootstrapServers());

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -14,7 +14,6 @@
 import org.testcontainers.containers.wait.strategy.Wait;
 import org.testcontainers.utility.ComparableVersion;
 import org.testcontainers.utility.DockerImageName;
-import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.net.InetAddress;
 import java.net.URI;
@@ -65,15 +64,15 @@ public class LocalStackContainer extends GenericContainer<LocalStackContainer> {
      */
     @Deprecated
     public LocalStackContainer() {
-        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(DEFAULT_TAG));
+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
      * @deprecated use {@link LocalStackContainer(DockerImageName)} instead
      */
     @Deprecated
     public LocalStackContainer(String version) {
-        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));
+        this(DEFAULT_IMAGE_NAME.withTag(version));
     }
 
     /**

File: modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java
Patch:
@@ -22,8 +22,7 @@ public class OracleContainer extends JdbcDatabaseContainer<OracleContainer> {
     private String password = "oracle";
 
     private static String resolveImageName() {
-        String image = TestcontainersConfiguration.getInstance()
-            .getProperties().getProperty("oracle.container.image");
+        String image = TestcontainersConfiguration.getInstance().getOracleImage();
 
         if (image == null) {
             throw new IllegalStateException("An image to use for Oracle containers must be configured. " +

File: modules/pulsar/src/main/java/org/testcontainers/containers/PulsarContainer.java
Patch:
@@ -3,7 +3,6 @@
 import org.testcontainers.containers.wait.strategy.Wait;
 import org.testcontainers.containers.wait.strategy.WaitAllStrategy;
 import org.testcontainers.utility.DockerImageName;
-import org.testcontainers.utility.TestcontainersConfiguration;
 
 /**
  * This container wraps Apache Pulsar running in standalone mode
@@ -25,15 +24,15 @@ public class PulsarContainer extends GenericContainer<PulsarContainer> {
      */
     @Deprecated
     public PulsarContainer() {
-        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(DEFAULT_TAG));
+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));
     }
 
     /**
      * @deprecated use {@link PulsarContainer(DockerImageName)} instead
      */
     @Deprecated
     public PulsarContainer(String pulsarVersion) {
-        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(pulsarVersion));
+        this(DEFAULT_IMAGE_NAME.withTag(pulsarVersion));
     }
 
     public PulsarContainer(final DockerImageName dockerImageName) {

File: modules/presto/src/main/java/org/testcontainers/containers/PrestoContainer.java
Patch:
@@ -18,7 +18,7 @@ public class PrestoContainer<SELF extends PrestoContainer<SELF>> extends JdbcDat
     public static final String NAME = "presto";
     private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("prestosql/presto");
     public static final String IMAGE = "prestosql/presto";
-    public static final String DEFAULT_TAG = "329";
+    public static final String DEFAULT_TAG = "344";
 
     public static final Integer PRESTO_PORT = 8080;
 

File: modules/presto/src/test/java/org/testcontainers/PrestoTestImages.java
Patch:
@@ -3,6 +3,6 @@
 import org.testcontainers.utility.DockerImageName;
 
 public interface PrestoTestImages {
-    DockerImageName PRESTO_TEST_IMAGE = DockerImageName.parse("prestosql/presto:329");
-    DockerImageName PRESTO_PREVIOUS_VERSION_TEST_IMAGE = DockerImageName.parse("prestosql/presto:328");
+    DockerImageName PRESTO_TEST_IMAGE = DockerImageName.parse("prestosql/presto:344");
+    DockerImageName PRESTO_PREVIOUS_VERSION_TEST_IMAGE = DockerImageName.parse("prestosql/presto:343");
 }

File: modules/presto/src/test/java/org/testcontainers/jdbc/presto/PrestoJDBCDriverTest.java
Patch:
@@ -15,7 +15,7 @@ public class PrestoJDBCDriverTest extends AbstractJDBCDriverTest {
     public static Iterable<Object[]> data() {
         return asList(
             new Object[][]{
-                {"jdbc:tc:presto:329://hostname/", EnumSet.of(Options.PmdKnownBroken)},
+                {"jdbc:tc:presto:344://hostname/", EnumSet.of(Options.PmdKnownBroken)},
             });
     }
 }

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLContainer.java
Patch:
@@ -5,10 +5,10 @@
 import org.testcontainers.utility.DockerImageName;
 
 import java.time.Duration;
-import java.util.HashSet;
 import java.util.Set;
 
 import static java.time.temporal.ChronoUnit.SECONDS;
+import static java.util.Collections.singleton;
 
 /**
  * @author richardnorth
@@ -63,7 +63,7 @@ public PostgreSQLContainer(final DockerImageName dockerImageName) {
     @NotNull
     @Override
     protected Set<Integer> getLivenessCheckPorts() {
-        return new HashSet<>(getMappedPort(POSTGRESQL_PORT));
+        return singleton(getMappedPort(POSTGRESQL_PORT));
     }
 
     @Override

File: core/src/main/java/org/testcontainers/utility/RegistryAuthLocator.java
Patch:
@@ -145,7 +145,7 @@ private Optional<AuthConfig> lookupUncachedAuthConfig(String registryName, Docke
                 return Optional.of(existingAuthConfig);
             }
         } catch (Exception e) {
-            log.warn("Failure when attempting to lookup auth config (dockerImageName: {}, configFile: {}. Falling back to docker-java default behaviour. Exception message: {}",
+            log.info("Failure when attempting to lookup auth config. Please ignore if you don't have images in an authenticated registry. Details: (dockerImageName: {}, configFile: {}. Falling back to docker-java default behaviour. Exception message: {}",
                 dockerImageName,
                 configFile,
                 e.getMessage());

File: modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java
Patch:
@@ -171,7 +171,7 @@ protected void configure() {
                     vncRecordingDirectory = Files.createTempDirectory(TC_TEMP_DIR_PREFIX).toFile();
                 } catch (IOException e) {
                     // should never happen as per javadoc, since we use valid prefix
-                    logger().error("Exception while trying to create temp directory " + vncRecordingDirectory.getAbsolutePath(), e);
+                    logger().error("Exception while trying to create temp directory", e);
                     throw new ContainerLaunchException("Exception while trying to create temp directory", e);
                 }
             }

File: modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java
Patch:
@@ -141,7 +141,7 @@ public void elasticsearchVersion() throws IOException {
     @Test
     public void elasticsearchOssImage() throws IOException {
         try (ElasticsearchContainer container =
-                 // oosContainer {
+                 // ossContainer {
                  new ElasticsearchContainer(
                      DockerImageName
                          .parse("docker.elastic.co/elasticsearch/elasticsearch-oss")

File: core/src/main/java/org/testcontainers/utility/Versioning.java
Patch:
@@ -24,12 +24,12 @@ public boolean isValid() {
 
         @Override
         public String getSeparator() {
-            return "";
+            return ":";
         }
 
         @Override
         public String toString() {
-            return "";
+            return "latest";
         }
 
         @Override

File: core/src/test/java/org/testcontainers/utility/DockerImageNameTest.java
Patch:
@@ -112,7 +112,7 @@ public void testParsing() {
                 canonicalName = unversionedPart + versionSeparator + version;
             } else {
                 combined = unversionedPart;
-                canonicalName = unversionedPart;
+                canonicalName = unversionedPart + ":latest";
             }
 
             VisibleAssertions.context("For " + combined);
@@ -124,7 +124,7 @@ public void testParsing() {
             if (version != null) {
                 assertEquals(combined + " has version part: " + version, version, imageName.getVersionPart());
             } else {
-                assertEquals(combined + " has no version specified", "", imageName.getVersionPart());
+                assertEquals(combined + " has automatic 'latest' version specified", "latest", imageName.getVersionPart());
             }
             assertEquals(combined + " has canonical name: " + canonicalName, canonicalName, imageName.asCanonicalNameString());
 

File: modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java
Patch:
@@ -44,7 +44,7 @@ public MongoDBContainer(final DockerImageName dockerImageName) {
         withExposedPorts(MONGODB_INTERNAL_PORT);
         withCommand("--replSet", "docker-rs");
         waitingFor(
-            Wait.forLogMessage(".*waiting for connections on port.*", 1)
+            Wait.forLogMessage("(?i).*waiting for connections.*", 1)
         );
     }
 

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -608,7 +608,7 @@ public ContainerisedDockerCompose(List<File> composeFiles, String identifier) {
         //  as the docker daemon, just mapping the docker control socket is OK.
         // As there seems to be a problem with mapping to the /var/run directory in certain environments (e.g. CircleCI)
         //  we map the socket file outside of /var/run, as just /docker.sock
-        addFileSystemBind("/" + DockerClientFactory.instance().getRemoteDockerUnixSocketPath(), "/docker.sock", READ_WRITE);
+        addFileSystemBind(DockerClientFactory.instance().getRemoteDockerUnixSocketPath(), "/docker.sock", READ_WRITE);
         addEnv("DOCKER_HOST", "unix:///docker.sock");
         setStartupCheckStrategy(new IndefiniteWaitOneShotStartupCheckStrategy());
         setWorkingDirectory(containerPwd);

File: core/src/main/java/org/testcontainers/utility/ResourceReaper.java
Patch:
@@ -76,7 +76,7 @@ public static String start(String hostIpAddress, DockerClient client) {
         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);
 
         List<Bind> binds = new ArrayList<>();
-        binds.add(new Bind("/" + DockerClientFactory.instance().getRemoteDockerUnixSocketPath(), new Volume("/var/run/docker.sock")));
+        binds.add(new Bind(DockerClientFactory.instance().getRemoteDockerUnixSocketPath(), new Volume("/var/run/docker.sock")));
 
         String ryukContainerId = client.createContainerCmd(ryukImage)
                 .withHostConfig(new HostConfig().withAutoRemove(true))

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -17,6 +17,7 @@
 import lombok.experimental.FieldDefaults;
 import lombok.extern.slf4j.Slf4j;
 import org.rnorth.ducttape.Preconditions;
+import org.testcontainers.DockerClientFactory;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.wait.strategy.Wait;
 import org.testcontainers.utility.ComparableVersion;
@@ -84,7 +85,7 @@ public LocalStackContainer(final DockerImageName dockerImageName, boolean useLeg
         super(dockerImageName);
         this.legacyMode = useLegacyMode;
 
-        withFileSystemBind("//var/run/docker.sock", "/var/run/docker.sock");
+        withFileSystemBind(DockerClientFactory.instance().getRemoteDockerUnixSocketPath(), "/var/run/docker.sock");
         waitingFor(Wait.forLogMessage(".*Ready\\.\n", 1));
     }
 

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -60,7 +60,7 @@ public class DockerClientFactory {
             TESTCONTAINERS_SESSION_ID_LABEL, SESSION_ID
     );
 
-    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyImage();
+    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyDockerImageName().asCanonicalNameString();
     private static DockerClientFactory instance;
 
     // Cached client configuration

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -586,7 +586,7 @@ class ContainerisedDockerCompose extends GenericContainer<ContainerisedDockerCom
 
     public ContainerisedDockerCompose(List<File> composeFiles, String identifier) {
 
-        super(TestcontainersConfiguration.getInstance().getDockerComposeContainerImage());
+        super(TestcontainersConfiguration.getInstance().getDockerComposeDockerImageName());
         addEnv(ENV_PROJECT_NAME, identifier);
 
         // Map the docker compose file into the container

File: core/src/main/java/org/testcontainers/containers/PortForwardingContainer.java
Patch:
@@ -19,7 +19,7 @@
 public enum PortForwardingContainer {
     INSTANCE;
 
-    private GenericContainer container;
+    private GenericContainer<?> container;
 
     private final Set<Entry<Integer, Integer>> exposedPorts = Collections.newSetFromMap(new ConcurrentHashMap<>());
 
@@ -29,7 +29,7 @@ public enum PortForwardingContainer {
     @SneakyThrows
     private Connection createSSHSession() {
         String password = UUID.randomUUID().toString();
-        container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getSSHdImage())
+        container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getSSHdDockerImageName())
             .withExposedPorts(22)
             .withEnv("PASSWORD", password)
             .withCommand(

File: core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java
Patch:
@@ -52,7 +52,7 @@ public VncRecordingContainer(@NonNull GenericContainer<?> targetContainer) {
      * Create a sidekick container and attach it to another container. The VNC output of that container will be recorded.
      */
     public VncRecordingContainer(@NonNull Network network, @NonNull String targetNetworkAlias) throws IllegalStateException {
-        super(TestcontainersConfiguration.getInstance().getVncRecordedContainerImage());
+        super(TestcontainersConfiguration.getInstance().getVncDockerImageName());
 
         this.targetNetworkAlias = targetNetworkAlias;
         withNetwork(network);

File: core/src/main/java/org/testcontainers/dockerclient/AuthDelegatingDockerClientConfig.java
Patch:
@@ -40,7 +40,7 @@ public AuthConfig effectiveAuthConfig(String imageName) {
         }
 
         // try and obtain more accurate auth config using our resolution
-        final DockerImageName parsed = new DockerImageName(imageName);
+        final DockerImageName parsed = DockerImageName.parse(imageName);
         final AuthConfig effectiveAuthConfig = RegistryAuthLocator.instance()
             .lookupAuthConfig(parsed, fallbackAuthConfig);
 

File: core/src/main/java/org/testcontainers/images/AbstractImagePullPolicy.java
Patch:
@@ -12,7 +12,7 @@ public abstract class AbstractImagePullPolicy implements ImagePullPolicy {
 
     @Override
     public boolean shouldPull(DockerImageName imageName) {
-        Logger logger = DockerLoggerFactory.getLogger(imageName.toString());
+        Logger logger = DockerLoggerFactory.getLogger(imageName.asCanonicalNameString());
 
         // Does our cache already know the image?
         ImageData cachedImageData = LOCAL_IMAGES_CACHE.get(imageName);

File: core/src/main/java/org/testcontainers/images/LocalImagesCache.java
Patch:
@@ -39,7 +39,7 @@ public Optional<ImageData> refreshCache(DockerImageName imageName) {
 
             InspectImageResponse response = null;
             try {
-                response = dockerClient.inspectImageCmd(imageName.toString()).exec();
+                response = dockerClient.inspectImageCmd(imageName.asCanonicalNameString()).exec();
             } catch (NotFoundException e) {
                 log.trace("Image {} not found", imageName, e);
             }

File: core/src/main/java/org/testcontainers/images/builder/dockerfile/traits/FromStatementTrait.java
Patch:
@@ -6,7 +6,7 @@
 public interface FromStatementTrait<SELF extends FromStatementTrait<SELF> & DockerfileBuilderTrait<SELF>> {
 
     default SELF from(String dockerImageName) {
-        new DockerImageName(dockerImageName).assertValid();
+        DockerImageName.parse(dockerImageName).assertValid();
 
         return ((SELF) this).withStatement(new SingleArgumentStatement("FROM", dockerImageName));
     }

File: core/src/main/java/org/testcontainers/utility/DockerMachineClient.java
Patch:
@@ -1,7 +1,6 @@
 package org.testcontainers.utility;
 
 import lombok.NonNull;
-
 import org.apache.commons.lang.SystemUtils;
 import org.slf4j.Logger;
 

File: core/src/main/java/org/testcontainers/utility/ResourceReaper.java
Patch:
@@ -14,14 +14,14 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Throwables;
 import com.google.common.collect.Sets;
-
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
 import org.rnorth.ducttape.ratelimits.RateLimiter;
 import org.rnorth.ducttape.ratelimits.RateLimiterBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testcontainers.DockerClientFactory;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -72,7 +72,7 @@ private ResourceReaper() {
 
     @SneakyThrows(InterruptedException.class)
     public static String start(String hostIpAddress, DockerClient client) {
-        String ryukImage = TestcontainersConfiguration.getInstance().getRyukImage();
+        String ryukImage = TestcontainersConfiguration.getInstance().getRyukDockerImageName().asCanonicalNameString();
         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);
 
         List<Bind> binds = new ArrayList<>();

File: core/src/test/java/alt/testcontainers/images/OutOfPackageImagePullPolicyTest.java
Patch:
@@ -7,11 +7,13 @@
 import org.testcontainers.images.ImageData;
 import org.testcontainers.utility.DockerImageName;
 
+import static org.testcontainers.TestImages.TINY_IMAGE;
+
 public class OutOfPackageImagePullPolicyTest {
     @Test
     public void shouldSupportCustomPoliciesOutOfTestContainersPackage() {
         try (
-            GenericContainer<?> container = new GenericContainer<>()
+            GenericContainer<?> container = new GenericContainer<>(TINY_IMAGE)
                 .withImagePullPolicy(new AbstractImagePullPolicy() {
                     @Override
                     protected boolean shouldPullCached(DockerImageName imageName, ImageData localImageData) {

File: core/src/test/java/org/testcontainers/DaemonTest.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.stream.Collectors;
 
 import static org.junit.Assert.assertEquals;
+import static org.testcontainers.TestImages.TINY_IMAGE;
 
 /**
  * This test forks a new JVM, otherwise it's not possible to reliably diff the threads
@@ -19,10 +20,10 @@ public class DaemonTest {
     public static void main(String[] args) {
         Thread mainThread = Thread.currentThread();
 
-        GenericContainer genericContainer = null;
+        GenericContainer<?> genericContainer = null;
 
         try {
-            genericContainer = new GenericContainer().withCommand("top");
+            genericContainer = new GenericContainer<>(TINY_IMAGE).withCommand("top");
             genericContainer.start();
 
             Set<Thread> threads = new HashSet<>(Thread.getAllStackTraces().keySet());

File: core/src/test/java/org/testcontainers/DockerClientFactoryTest.java
Patch:
@@ -30,7 +30,7 @@ public void runCommandInsideDockerShouldNotFailIfImageDoesNotExistsLocally() {
         try {
             //remove tiny image, so it will be pulled during next command run
             dockFactory.client()
-                    .removeImageCmd(TestcontainersConfiguration.getInstance().getTinyImage())
+                    .removeImageCmd(TestcontainersConfiguration.getInstance().getTinyDockerImageName().asCanonicalNameString())
                     .withForce(true).exec();
         } catch (NotFoundException ignored) {
             // Do not fail if it's not pulled yet

File: core/src/test/java/org/testcontainers/containers/FailureDetectingExternalResourceTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Test;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
+
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;

File: core/src/test/java/org/testcontainers/containers/GenericContainerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.assertj.core.api.Assumptions;
 import org.junit.Test;
 import org.rnorth.ducttape.unreliables.Unreliables;
+import org.testcontainers.TestImages;
 import org.testcontainers.DockerClientFactory;
 import org.testcontainers.containers.startupcheck.StartupCheckStrategy;
 import org.testcontainers.containers.wait.strategy.AbstractWaitStrategy;
@@ -28,7 +29,7 @@ public void shouldReportOOMAfterWait() {
         // Poor man's rootless Docker detection :D
         Assumptions.assumeThat(info.getDriver()).doesNotContain("vfs");
         try (
-            GenericContainer container = new GenericContainer<>()
+            GenericContainer<?> container = new GenericContainer<>(TestImages.TINY_IMAGE)
                 .withStartupCheckStrategy(new NoopStartupCheckStrategy())
                 .waitingFor(new WaitForExitedState(ContainerState::getOOMKilled))
                 .withCreateContainerCmdModifier(it -> {
@@ -49,7 +50,7 @@ public void shouldReportOOMAfterWait() {
     @Test
     public void shouldReportErrorAfterWait() {
         try (
-            GenericContainer container = new GenericContainer<>()
+            GenericContainer<?> container = new GenericContainer<>(TestImages.TINY_IMAGE)
                 .withStartupCheckStrategy(new NoopStartupCheckStrategy())
                 .waitingFor(new WaitForExitedState(state -> state.getExitCode() > 0))
                 .withCommand("sh", "-c", "usleep 100; exit 123")

File: core/src/test/java/org/testcontainers/dockerclient/EventStreamTest.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
+import static org.testcontainers.TestImages.TINY_IMAGE;
+
 /**
  * Test that event streaming from the {@link DockerClient} works correctly
  */
@@ -32,7 +34,7 @@ public void test() throws IOException, InterruptedException {
         CountDownLatch latch = new CountDownLatch(1);
 
         try (
-            GenericContainer container = new GenericContainer<>()
+            GenericContainer<?> container = new GenericContainer<>(TINY_IMAGE)
                 .withCommand("true")
                 .withStartupCheckStrategy(new OneShotStartupCheckStrategy())
         ) {

File: core/src/test/java/org/testcontainers/dockerclient/ImagePullTest.java
Patch:
@@ -5,11 +5,12 @@
 import org.junit.runners.Parameterized;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.startupcheck.OneShotStartupCheckStrategy;
+import org.testcontainers.utility.DockerImageName;
 
 @RunWith(Parameterized.class)
 public class ImagePullTest {
 
-    private String image;
+    private final String image;
 
     @Parameterized.Parameters(name = "{0}")
     public static String[] parameters() {
@@ -34,7 +35,7 @@ public ImagePullTest(String image) {
 
     @Test
     public void test() {
-        try (final GenericContainer container = new GenericContainer<>(image)
+        try (final GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(image))
             .withCommand("/bin/sh", "-c", "sleep 0")
             .withStartupCheckStrategy(new OneShotStartupCheckStrategy())) {
             container.start();

File: core/src/test/java/org/testcontainers/images/AgeBasedPullPolicyTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class AgeBasedPullPolicyTest {
 
-    final DockerImageName imageName = new DockerImageName(UUID.randomUUID().toString());
+    final DockerImageName imageName = DockerImageName.parse(UUID.randomUUID().toString());
 
     @Test
     public void shouldPull() {

File: core/src/test/java/org/testcontainers/junit/NonExistentImagePullTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Test;
 import org.testcontainers.containers.ContainerFetchException;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.rnorth.visibleassertions.VisibleAssertions.assertThrows;
 
@@ -16,7 +17,7 @@ public void pullingNonExistentImageFailsGracefully() {
 
         assertThrows("Pulling a nonexistent container will cause an exception to be thrown",
                 ContainerFetchException.class, () -> {
-                    new GenericContainer("richnorth/nonexistent:latest").getDockerImageName();
+                    new GenericContainer<>(DockerImageName.parse("testcontainers/nonexistent:latest")).getDockerImageName();
                 });
     }
 }

File: core/src/test/java/org/testcontainers/junit/WorkingDirectoryTest.java
Patch:
@@ -6,14 +6,15 @@
 import org.testcontainers.containers.startupcheck.OneShotStartupCheckStrategy;
 
 import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;
+import static org.testcontainers.TestImages.ALPINE_IMAGE;
 
 /**
  * Created by rnorth on 26/07/2016.
  */
 public class WorkingDirectoryTest {
 
     @ClassRule
-    public static GenericContainer container = new GenericContainer("alpine:3.2")
+    public static GenericContainer container = new GenericContainer(ALPINE_IMAGE)
             .withWorkingDirectory("/etc")
             .withStartupCheckStrategy(new OneShotStartupCheckStrategy())
             .withCommand("ls", "-al");

File: core/src/test/java/org/testcontainers/junit/wait/strategy/HostPortWaitStrategyTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.ClassRule;
 import org.junit.Test;
+import org.testcontainers.TestImages;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.wait.strategy.Wait;
 
@@ -15,10 +16,8 @@
  */
 public class HostPortWaitStrategyTest {
 
-    private static final String IMAGE_NAME = "alpine:3.7";
-
     @ClassRule
-    public static GenericContainer container = new GenericContainer(IMAGE_NAME).withExposedPorts()
+    public static GenericContainer<?> container = new GenericContainer<>(TestImages.ALPINE_IMAGE).withExposedPorts()
         .withCommand("sh", "-c", "while true; do nc -lp 8080; done")
         .withExposedPorts(8080)
         .waitingFor(Wait.forListeningPort().withStartupTimeout(Duration.ofSeconds(10)));

File: docs/examples/junit4/generic/src/test/java/generic/CmdModifierTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.testcontainers.containers.Container;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import java.io.IOException;
 
@@ -13,7 +14,7 @@ public class CmdModifierTest {
 
     // hostname {
     @Rule
-    public GenericContainer theCache = new GenericContainer<>("redis:3.0.2")
+    public GenericContainer theCache = new GenericContainer<>(DockerImageName.parse("redis:3.0.2"))
             .withCreateContainerCmdModifier(cmd -> cmd.withHostName("the-cache"));
     // }
 
@@ -22,7 +23,7 @@ public class CmdModifierTest {
     private long memorySwapInBytes = 12 * 1024 * 1024;
 
     @Rule
-    public GenericContainer memoryLimitedRedis = new GenericContainer<>("redis:3.0.2")
+    public GenericContainer memoryLimitedRedis = new GenericContainer<>(DockerImageName.parse("redis:3.0.2"))
             .withCreateContainerCmdModifier(cmd -> cmd.getHostConfig()
                 .withMemory(memoryInBytes)
                 .withMemorySwap(memorySwapInBytes)

File: docs/examples/junit4/generic/src/test/java/generic/CommandsTest.java
Patch:
@@ -3,13 +3,14 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.junit.Assert.assertTrue;
 
 public class CommandsTest {
     @Rule
     // startupCommand {
-    public GenericContainer redisWithCustomPort = new GenericContainer("redis:5.0")
+    public GenericContainer redisWithCustomPort = new GenericContainer(DockerImageName.parse("redis:5.0"))
         .withCommand("redis-server --port 7777")
     // }
         .withExposedPorts(7777);

File: docs/examples/junit4/generic/src/test/java/generic/ContainerLabelTest.java
Patch:
@@ -1,13 +1,14 @@
 package generic;
 
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import java.util.HashMap;
 import java.util.Map;
 
 public class ContainerLabelTest {
     // single_label {
-    public GenericContainer containerWithLabel = new GenericContainer("alpine:3.6")
+    public GenericContainer containerWithLabel = new GenericContainer(DockerImageName.parse("alpine:3.6"))
         .withLabel("key", "value");
     // }
 
@@ -16,7 +17,7 @@ public class ContainerLabelTest {
     private Map<String, String> mapOfLabels = new HashMap<>();
     // populate map, e.g. mapOfLabels.put("key1", "value1");
 
-    public GenericContainer containerWithMultipleLabels = new GenericContainer("alpine:3.6")
+    public GenericContainer containerWithMultipleLabels = new GenericContainer(DockerImageName.parse("alpine:3.6"))
         .withLabels(mapOfLabels);
     // }
 }

File: docs/examples/junit4/generic/src/test/java/generic/ExecTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.testcontainers.containers.Container;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import java.io.IOException;
 
@@ -12,7 +13,7 @@
 public class ExecTest {
 
     @Rule
-    public GenericContainer container = new GenericContainer("alpine:3.6")
+    public GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse("alpine:3.6"))
         .withCommand("top");
 
     @Test

File: docs/examples/junit4/generic/src/test/java/generic/MultiplePortsExposedTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.slf4j.Logger;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.output.Slf4jLogConsumer;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.slf4j.LoggerFactory.getLogger;
 
@@ -14,7 +15,7 @@ public class MultiplePortsExposedTest {
 
     @Rule
     // rule {
-    public GenericContainer container = new GenericContainer("orientdb:3.0.13")
+    public GenericContainer container = new GenericContainer(DockerImageName.parse("orientdb:3.0.13"))
         .withExposedPorts(2424, 2480)
         .withLogConsumer(new Slf4jLogConsumer(log));
     // }

File: docs/examples/junit4/redis/src/test/java/quickstart/RedisBackedCacheIntTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.junit.Assert.assertEquals;
 
@@ -14,7 +15,7 @@ public class RedisBackedCacheIntTest {
 
     // rule {
     @Rule
-    public GenericContainer redis = new GenericContainer<>("redis:5.0.3-alpine")
+    public GenericContainer redis = new GenericContainer(DockerImageName.parse("redis:5.0.3-alpine"))
                                             .withExposedPorts(6379);
     // }
 

File: docs/examples/junit5/redis/src/test/java/quickstart/RedisBackedCacheIntTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -17,7 +18,7 @@ public class RedisBackedCacheIntTest {
 
     // container {
     @Container
-    public GenericContainer redis = new GenericContainer<>("redis:5.0.3-alpine")
+    public GenericContainer redis = new GenericContainer(DockerImageName.parse("redis:5.0.3-alpine"))
                                             .withExposedPorts(6379);
     // }
 

File: examples/linked-container/src/test/java/com/example/linkedcontainer/RedmineClientTest.java
Patch:
@@ -15,11 +15,11 @@ public class RedmineClientTest {
     private static final String POSTGRES_USERNAME = "redmine";
     private static final String POSTGRES_PASSWORD = "secret";
 
-    private PostgreSQLContainer postgreSQLContainer = new PostgreSQLContainer("postgres:9.6.2")
+    private PostgreSQLContainer<?> postgreSQLContainer = new PostgreSQLContainer<>(LinkedContainerTestImages.POSTGRES_TEST_IMAGE)
             .withUsername(POSTGRES_USERNAME)
             .withPassword(POSTGRES_PASSWORD);
 
-    private RedmineContainer redmineContainer = new RedmineContainer("redmine:3.3.2")
+    private RedmineContainer redmineContainer = new RedmineContainer(LinkedContainerTestImages.REDMINE_TEST_IMAGE)
             .withLinkToContainer(postgreSQLContainer, "postgres")
             .withEnv("POSTGRES_ENV_POSTGRES_USER", POSTGRES_USERNAME)
             .withEnv("POSTGRES_ENV_POSTGRES_PASSWORD", POSTGRES_PASSWORD);

File: examples/linked-container/src/test/java/com/example/linkedcontainer/RedmineContainer.java
Patch:
@@ -3,6 +3,7 @@
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.traits.LinkableContainer;
 import org.testcontainers.containers.wait.strategy.Wait;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * A Redmine container.
@@ -11,7 +12,7 @@ public class RedmineContainer extends GenericContainer<RedmineContainer> {
 
     private static final int REDMINE_PORT = 3000;
 
-    public RedmineContainer(String dockerImageName) {
+    public RedmineContainer(DockerImageName dockerImageName) {
         super(dockerImageName);
     }
 

File: examples/singleton-container/src/test/java/com/example/AbstractIntegrationTest.java
Patch:
@@ -1,10 +1,11 @@
 package com.example;
 
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 public abstract class AbstractIntegrationTest {
 
-    public static final GenericContainer redis = new GenericContainer("redis:3.0.6")
+    public static final GenericContainer<?> redis = new GenericContainer<>(DockerImageName.parse("redis:3.0.6"))
             .withExposedPorts(6379);
 
     static {

File: examples/spring-boot/src/test/java/com/example/AbstractIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.test.context.DynamicPropertySource;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.utility.DockerImageName;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootTest(classes = DemoApplication.class, webEnvironment = WebEnvironment.RANDOM_PORT, properties = {
@@ -16,7 +17,7 @@
 @ActiveProfiles("test")
 public abstract class AbstractIntegrationTest {
 
-    static GenericContainer redis = new GenericContainer("redis:3-alpine")
+    static GenericContainer<?> redis = new GenericContainer<>(DockerImageName.parse("redis:3-alpine"))
         .withExposedPorts(6379);
 
     @DynamicPropertySource

File: modules/clickhouse/src/main/java/org/testcontainers/containers/ClickHouseProvider.java
Patch:
@@ -1,5 +1,7 @@
 package org.testcontainers.containers;
 
+import org.testcontainers.utility.DockerImageName;
+
 public class ClickHouseProvider extends JdbcDatabaseContainerProvider {
     @Override
     public boolean supports(String databaseType) {
@@ -8,6 +10,6 @@ public boolean supports(String databaseType) {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new ClickHouseContainer(ClickHouseContainer.IMAGE + ":" + tag);
+        return new ClickHouseContainer(DockerImageName.parse(ClickHouseContainer.IMAGE).withTag(tag));
     }
 }

File: modules/clickhouse/src/test/java/org/testcontainers/junit/clickhouse/SimpleClickhouseTest.java
Patch:
@@ -8,12 +8,13 @@
 import java.sql.SQLException;
 
 import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
+import static org.testcontainers.ClickhouseTestImages.CLICKHOUSE_IMAGE;
 
 public class SimpleClickhouseTest extends AbstractContainerDatabaseTest {
 
     @Test
     public void testSimple() throws SQLException {
-        try (ClickHouseContainer clickhouse = new ClickHouseContainer()) {
+        try (ClickHouseContainer clickhouse = new ClickHouseContainer(CLICKHOUSE_IMAGE)) {
             clickhouse.start();
 
             ResultSet resultSet = performQuery(clickhouse, "SELECT 1");

File: modules/cockroachdb/src/main/java/org/testcontainers/containers/CockroachContainerProvider.java
Patch:
@@ -1,5 +1,7 @@
 package org.testcontainers.containers;
 
+import org.testcontainers.utility.DockerImageName;
+
 public class CockroachContainerProvider extends JdbcDatabaseContainerProvider {
     @Override
     public boolean supports(String databaseType) {
@@ -13,6 +15,6 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new CockroachContainer(CockroachContainer.IMAGE + ":" + tag);
+        return new CockroachContainer(DockerImageName.parse(CockroachContainer.IMAGE).withTag(tag));
     }
 }

File: modules/db2/src/main/java/org/testcontainers/containers/Db2ContainerProvider.java
Patch:
@@ -1,5 +1,7 @@
 package org.testcontainers.containers;
 
+import org.testcontainers.utility.DockerImageName;
+
 public class Db2ContainerProvider extends JdbcDatabaseContainerProvider {
     @Override
     public boolean supports(String databaseType) {
@@ -13,6 +15,6 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new Db2Container(Db2Container.DEFAULT_DB2_IMAGE_NAME + ":" + tag);
+        return new Db2Container(DockerImageName.parse(Db2Container.DEFAULT_DB2_IMAGE_NAME).withTag(tag));
     }
 }

File: modules/db2/src/test/java/org/testcontainers/junit/db2/SimpleDb2Test.java
Patch:
@@ -10,12 +10,13 @@
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertThat;
 import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
+import static org.testcontainers.Db2TestImages.DB2_IMAGE;
 
 public class SimpleDb2Test extends AbstractContainerDatabaseTest {
 
     @Test
     public void testSimple() throws SQLException {
-        try (Db2Container db2 = new Db2Container()
+        try (Db2Container db2 = new Db2Container(DB2_IMAGE)
             .acceptLicense()) {
 
             db2.start();
@@ -29,7 +30,7 @@ public void testSimple() throws SQLException {
 
     @Test
     public void testWithAdditionalUrlParamInJdbcUrl() {
-        try (Db2Container db2 = new Db2Container()
+        try (Db2Container db2 = new Db2Container(DB2_IMAGE)
             .withUrlParam("sslConnection", "false")
             .acceptLicense()) {
 

File: modules/influxdb/src/test/java/org/testcontainers/containers/InfluxDBContainerTest.java
Patch:
@@ -11,7 +11,7 @@
 public class InfluxDBContainerTest {
 
     @ClassRule
-    public static InfluxDBContainer influxDBContainer = new InfluxDBContainer();
+    public static InfluxDBContainer<?> influxDBContainer = new InfluxDBContainer<>(InfluxDBTestImages.INFLUXDB_TEST_IMAGE);
 
     @Test
     public void getUrl() {

File: modules/influxdb/src/test/java/org/testcontainers/containers/InfluxDBContainerWithUserTest.java
Patch:
@@ -17,13 +17,13 @@
 
 public class InfluxDBContainerWithUserTest {
 
-    private static final String TEST_VERSION = "1.4.3";
+    private static final String TEST_VERSION = InfluxDBTestImages.INFLUXDB_TEST_IMAGE.getVersionPart();
     private static final String DATABASE = "test";
     private static final String USER = "test-user";
     private static final String PASSWORD = "test-password";
 
     @Rule
-    public InfluxDBContainer influxDBContainer = new InfluxDBContainer(TEST_VERSION)
+    public InfluxDBContainer<?> influxDBContainer = new InfluxDBContainer<>(InfluxDBTestImages.INFLUXDB_TEST_IMAGE)
         .withDatabase(DATABASE)
         .withUsername(USER)
         .withPassword(PASSWORD);

File: modules/jdbc/src/test/java/org/testcontainers/jdbc/MissingJdbcDriverTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.base.Throwables;
 import org.junit.Test;
 import org.testcontainers.containers.JdbcDatabaseContainer;
+import org.testcontainers.utility.DockerImageName;
 
 import java.sql.Connection;
 import java.sql.SQLException;
@@ -39,7 +40,7 @@ static class MissingDriverContainer extends JdbcDatabaseContainer {
         private final AtomicInteger connectionAttempts = new AtomicInteger();
 
         MissingDriverContainer() {
-            super("mysql:5.7.22");
+            super(DockerImageName.parse("mysql:5.7.22"));
             withEnv("MYSQL_ROOT_PASSWORD", "test");
             withExposedPorts(3306);
         }

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/PostgresContainerTests.java
Patch:
@@ -9,12 +9,13 @@
 import java.sql.Statement;
 
 import static org.junit.Assert.assertEquals;
+import static org.testcontainers.junit.jupiter.JUnitJupiterTestImages.POSTGRES_IMAGE;
 
 @Testcontainers
 class PostgresContainerTests {
 
     @Container
-    private static final PostgreSQLContainer POSTGRE_SQL_CONTAINER = new PostgreSQLContainer()
+    private static final PostgreSQLContainer<?> POSTGRE_SQL_CONTAINER = new PostgreSQLContainer<>(POSTGRES_IMAGE)
             .withDatabaseName("foo")
             .withUsername("foo")
             .withPassword("secret");

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/TestcontainersNestedRestartedContainerTests.java
Patch:
@@ -4,16 +4,16 @@
 import org.junit.jupiter.api.Test;
 import org.testcontainers.containers.GenericContainer;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.testcontainers.junit.jupiter.JUnitJupiterTestImages.HTTPD_IMAGE;
 
 // testClass {
 @Testcontainers
 class TestcontainersNestedRestartedContainerTests {
 
     @Container
-    private final GenericContainer topLevelContainer = new GenericContainer("httpd:2.4-alpine")
+    private final GenericContainer<?> topLevelContainer = new GenericContainer<>(HTTPD_IMAGE)
         .withExposedPorts(80);
     // }}
 
@@ -34,7 +34,7 @@ void top_level_container_should_be_running() {
     class NestedTestCase {
 
         @Container
-        private final GenericContainer nestedContainer = new GenericContainer("httpd:2.4-alpine")
+        private final GenericContainer<?> nestedContainer = new GenericContainer<>(HTTPD_IMAGE)
             .withExposedPorts(80);
 
         @Test

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/TestcontainersNestedSharedContainerTests.java
Patch:
@@ -6,12 +6,13 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.testcontainers.junit.jupiter.JUnitJupiterTestImages.HTTPD_IMAGE;
 
 @Testcontainers
 class TestcontainersNestedSharedContainerTests {
 
     @Container
-    private static final GenericContainer TOP_LEVEL_CONTAINER = new GenericContainer("httpd:2.4-alpine")
+    private static final GenericContainer<?> TOP_LEVEL_CONTAINER = new GenericContainer<>(HTTPD_IMAGE)
         .withExposedPorts(80);
 
     private static String topLevelContainerId;

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/TestcontainersRestartBetweenTests.java
Patch:
@@ -4,12 +4,13 @@
 import org.testcontainers.containers.GenericContainer;
 
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.testcontainers.junit.jupiter.JUnitJupiterTestImages.HTTPD_IMAGE;
 
 @Testcontainers
 class TestcontainersRestartBetweenTests {
 
     @Container
-    private GenericContainer genericContainer = new GenericContainer("httpd:2.4-alpine")
+    private GenericContainer<?> genericContainer = new GenericContainer<>(HTTPD_IMAGE)
             .withExposedPorts(80);
 
     private static String lastContainerId;

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/TestcontainersSharedContainerTests.java
Patch:
@@ -6,12 +6,13 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.testcontainers.junit.jupiter.JUnitJupiterTestImages.HTTPD_IMAGE;
 
 @Testcontainers
 class TestcontainersSharedContainerTests {
 
     @Container
-    private static final GenericContainer GENERIC_CONTAINER = new GenericContainer("httpd:2.4-alpine")
+    private static final GenericContainer<?> GENERIC_CONTAINER = new GenericContainer<>(HTTPD_IMAGE)
         .withExposedPorts(80);
 
     private static String lastContainerId;

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainerProvider.java
Patch:
@@ -1,8 +1,7 @@
 package org.testcontainers.containers;
 
 import org.testcontainers.jdbc.ConnectionUrl;
-
-import java.util.Objects;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * Factory for MariaDB org.testcontainers.containers.
@@ -25,7 +24,7 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new MariaDBContainer(MariaDBContainer.IMAGE + ":" + tag);
+        return new MariaDBContainer(DockerImageName.parse(MariaDBContainer.IMAGE).withTag(tag));
     }
 
     @Override

File: modules/mariadb/src/test/java/org/testcontainers/containers/MariaDBR2DBCDatabaseContainerTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.r2dbc.spi.ConnectionFactoryOptions;
 import org.testcontainers.r2dbc.AbstractR2DBCDatabaseContainerTest;
+import org.testcontainers.utility.DockerImageName;
 
 public class MariaDBR2DBCDatabaseContainerTest extends AbstractR2DBCDatabaseContainerTest<MariaDBContainer<?>> {
 
@@ -17,7 +18,7 @@ protected String createR2DBCUrl() {
 
     @Override
     protected MariaDBContainer<?> createContainer() {
-        return new MariaDBContainer<>();
+        return new MariaDBContainer<>(DockerImageName.parse("mariadb:10.3.6"));
     }
 
 }

File: modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java
Patch:
@@ -11,20 +11,22 @@
 import com.mongodb.client.TransactionBody;
 import org.bson.Document;
 import org.junit.Test;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
 
 public class MongoDBContainerTest {
+
     /**
      * Taken from <a href="https://docs.mongodb.com/manual/core/transactions/">https://docs.mongodb.com</a>
      */
     @Test
     public void shouldExecuteTransactions() {
         try (
             // creatingMongoDBContainer {
-            final MongoDBContainer mongoDBContainer = new MongoDBContainer()
+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse("mongo:4.0.10"))
             // }
         ) {
 

File: modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLServerContainerProvider.java
Patch:
@@ -1,5 +1,7 @@
 package org.testcontainers.containers;
 
+import org.testcontainers.utility.DockerImageName;
+
 /**
  * Factory for MS SQL Server containers.
  */
@@ -16,6 +18,6 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new MSSQLServerContainer(MSSQLServerContainer.IMAGE + ":" + tag);
+        return new MSSQLServerContainer(DockerImageName.parse(MSSQLServerContainer.IMAGE).withTag(tag));
     }
 }

File: modules/mssqlserver/src/test/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.containers;
 
 import io.r2dbc.spi.ConnectionFactoryOptions;
+import org.testcontainers.MSSQLServerTestImages;
 import org.testcontainers.r2dbc.AbstractR2DBCDatabaseContainerTest;
 
 public class MSSQLR2DBCDatabaseContainerTest extends AbstractR2DBCDatabaseContainerTest<MSSQLServerContainer<?>> {
@@ -17,6 +18,6 @@ protected String createR2DBCUrl() {
 
     @Override
     protected MSSQLServerContainer<?> createContainer() {
-        return new MSSQLServerContainer<>();
+        return new MSSQLServerContainer<>(MSSQLServerTestImages.MSSQL_SERVER_IMAGE);
     }
 }

File: modules/mssqlserver/src/test/java/org/testcontainers/junit/mssqlserver/CustomPasswordMSSQLServerTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
+import org.testcontainers.MSSQLServerTestImages;
 import org.testcontainers.containers.MSSQLServerContainer;
 
 import java.util.Arrays;
@@ -66,7 +67,7 @@ public static Collection<Object[]> data() {
     @Test
     public void runPasswordTests() {
         try {
-            new MSSQLServerContainer<>().withPassword(this.password);
+            new MSSQLServerContainer<>(MSSQLServerTestImages.MSSQL_SERVER_IMAGE).withPassword(this.password);
             if (!valid)
                 fail("Password " + this.password + " is not valid. Expected exception");
         } catch (IllegalArgumentException e) {

File: modules/mssqlserver/src/test/java/org/testcontainers/junit/mssqlserver/CustomizableMSSQLServerTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Test;
 import org.testcontainers.containers.MSSQLServerContainer;
 import org.testcontainers.db.AbstractContainerDatabaseTest;
+import org.testcontainers.utility.DockerImageName;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -15,7 +16,7 @@ public class CustomizableMSSQLServerTest extends AbstractContainerDatabaseTest {
 
     @Test
     public void testSqlServerConnection() throws SQLException {
-        try (MSSQLServerContainer<?> mssqlServerContainer = new MSSQLServerContainer<>()
+        try (MSSQLServerContainer<?> mssqlServerContainer = new MSSQLServerContainer<>(DockerImageName.parse("mcr.microsoft.com/mssql/server:2017-CU12"))
             .withPassword(STRONG_PASSWORD)) {
 
             mssqlServerContainer.start();

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainerProvider.java
Patch:
@@ -1,8 +1,7 @@
 package org.testcontainers.containers;
 
 import org.testcontainers.jdbc.ConnectionUrl;
-
-import java.util.Objects;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * Factory for MySQL containers.
@@ -26,7 +25,7 @@ public JdbcDatabaseContainer newInstance() {
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
         if (tag != null) {
-            return new MySQLContainer(MySQLContainer.IMAGE + ":" + tag);
+            return new MySQLContainer(DockerImageName.parse(MySQLContainer.IMAGE).withTag(tag));
         } else {
             return newInstance();
         }

File: modules/mysql/src/test/java/org/testcontainers/containers/MySQLR2DBCDatabaseContainerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.containers;
 
 import io.r2dbc.spi.ConnectionFactoryOptions;
+import org.testcontainers.MySQLTestImages;
 import org.testcontainers.r2dbc.AbstractR2DBCDatabaseContainerTest;
 
 public class MySQLR2DBCDatabaseContainerTest extends AbstractR2DBCDatabaseContainerTest<MySQLContainer<?>> {
@@ -17,7 +18,7 @@ protected String createR2DBCUrl() {
 
     @Override
     protected MySQLContainer<?> createContainer() {
-        return new MySQLContainer<>();
+        return new MySQLContainer<>(MySQLTestImages.MYSQL_IMAGE);
     }
 
 }

File: modules/mysql/src/test/java/org/testcontainers/junit/mysql/CustomizableMysqlTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.junit.mysql;
 
 import org.junit.Test;
+import org.testcontainers.MySQLTestImages;
 import org.testcontainers.containers.MySQLContainer;
 import org.testcontainers.db.AbstractContainerDatabaseTest;
 
@@ -17,7 +18,7 @@ public class CustomizableMysqlTest extends AbstractContainerDatabaseTest {
     @Test
     public void testSimple() throws SQLException {
         // Add MYSQL_ROOT_HOST environment so that we can root login from anywhere for testing purposes
-        try (MySQLContainer<?> mysql = new MySQLContainer<>("mysql:5.5")
+        try (MySQLContainer<?> mysql = new MySQLContainer<>(MySQLTestImages.MYSQL_IMAGE)
             .withDatabaseName(DB_NAME)
             .withUsername(USER)
             .withPassword(PWD)

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgisContainerProvider.java
Patch:
@@ -1,8 +1,7 @@
 package org.testcontainers.containers;
 
 import org.testcontainers.jdbc.ConnectionUrl;
-
-import java.util.Objects;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * Factory for PostGIS containers, which are a special flavour of PostgreSQL.
@@ -28,7 +27,7 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new PostgreSQLContainer(DEFAULT_IMAGE + ":" + tag);
+        return new PostgreSQLContainer(DockerImageName.parse(DEFAULT_IMAGE).withTag(DEFAULT_TAG));
     }
 
     @Override

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLContainerProvider.java
Patch:
@@ -1,8 +1,7 @@
 package org.testcontainers.containers;
 
 import org.testcontainers.jdbc.ConnectionUrl;
-
-import java.util.Objects;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * Factory for PostgreSQL containers.
@@ -24,7 +23,7 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new PostgreSQLContainer(PostgreSQLContainer.IMAGE + ":" + tag);
+        return new PostgreSQLContainer(DockerImageName.parse(PostgreSQLContainer.IMAGE).withTag(tag));
     }
 
     @Override

File: modules/postgresql/src/test/java/org/testcontainers/containers/PostgreSQLR2DBCDatabaseContainerTest.java
Patch:
@@ -1,13 +1,14 @@
 package org.testcontainers.containers;
 
 import io.r2dbc.spi.ConnectionFactoryOptions;
+import org.testcontainers.PostgreSQLTestImages;
 import org.testcontainers.r2dbc.AbstractR2DBCDatabaseContainerTest;
 
 public class PostgreSQLR2DBCDatabaseContainerTest extends AbstractR2DBCDatabaseContainerTest<PostgreSQLContainer<?>> {
 
     @Override
     protected PostgreSQLContainer<?> createContainer() {
-        return new PostgreSQLContainer<>();
+        return new PostgreSQLContainer<>(PostgreSQLTestImages.POSTGRES_TEST_IMAGE);
     }
 
     @Override

File: modules/postgresql/src/test/java/org/testcontainers/junit/postgresql/CustomizablePostgreSQLTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.junit.postgresql;
 
 import org.junit.Test;
+import org.testcontainers.PostgreSQLTestImages;
 import org.testcontainers.containers.PostgreSQLContainer;
 import org.testcontainers.db.AbstractContainerDatabaseTest;
 
@@ -19,7 +20,7 @@ public class CustomizablePostgreSQLTest extends AbstractContainerDatabaseTest {
 
     @Test
     public void testSimple() throws SQLException {
-        try (PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:9.6.8")
+        try (PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(PostgreSQLTestImages.POSTGRES_TEST_IMAGE)
                 .withDatabaseName(DB_NAME)
                 .withUsername(USER)
                 .withPassword(PWD)) {

File: modules/presto/src/main/java/org/testcontainers/containers/PrestoContainerProvider.java
Patch:
@@ -1,8 +1,7 @@
 package org.testcontainers.containers;
 
 import org.testcontainers.jdbc.ConnectionUrl;
-
-import java.util.Objects;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * Factory for Presto containers.
@@ -24,7 +23,7 @@ public JdbcDatabaseContainer newInstance() {
 
     @Override
     public JdbcDatabaseContainer newInstance(String tag) {
-        return new PrestoContainer(PrestoContainer.IMAGE + ":" + tag);
+        return new PrestoContainer(DockerImageName.parse(PrestoContainer.IMAGE).withTag(tag));
     }
 
     @Override

File: modules/pulsar/src/test/java/org/testcontainers/containers/PulsarContainerTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.apache.pulsar.client.api.Producer;
 import org.apache.pulsar.client.api.PulsarClient;
 import org.junit.Test;
+import org.testcontainers.utility.DockerImageName;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
@@ -17,10 +18,11 @@
 public class PulsarContainerTest {
 
     public static final String TEST_TOPIC = "test_topic";
+    private static final DockerImageName PULSAR_IMAGE = DockerImageName.parse("apachepulsar/pulsar:2.2.0");
 
     @Test
     public void testUsage() throws Exception {
-        try (PulsarContainer pulsar = new PulsarContainer()) {
+        try (PulsarContainer pulsar = new PulsarContainer(PULSAR_IMAGE)) {
             pulsar.start();
             testPulsarFunctionality(pulsar.getPulsarBrokerUrl());
         }

File: modules/rabbitmq/src/test/java/org/testcontainers/containers/RabbitMQContainerJUnitIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
 public class RabbitMQContainerJUnitIntegrationTest {
 
     @ClassRule
-    public static RabbitMQContainer rabbitMQContainer = new RabbitMQContainer();
+    public static RabbitMQContainer rabbitMQContainer = new RabbitMQContainer(RabbitMQTestImages.RABBITMQ_IMAGE);
 
     @Test
     public void shouldStart() {

File: modules/selenium/src/test/java/org/testcontainers/junit/Selenium3xTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.runners.Parameterized;
 import org.openqa.selenium.chrome.ChromeOptions;
 import org.testcontainers.containers.BrowserWebDriverContainer;
+import org.testcontainers.utility.DockerImageName;
 
 /**
  * Simple test to check that readiness detection works correctly across major versions of the containers.
@@ -22,7 +23,8 @@ public static String[] data() {
 
     @Test
     public void testAdditionalStartupString() {
-        try (BrowserWebDriverContainer chrome = new BrowserWebDriverContainer("selenium/standalone-chrome-debug:" + tag)
+        final DockerImageName imageName = DockerImageName.parse("selenium/standalone-chrome-debug").withTag(tag);
+        try (BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>(imageName)
                 .withCapabilities(new ChromeOptions())) {
             chrome.start();
         }

File: modules/vault/src/test/java/org/testcontainers/vault/VaultClientTest.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.Map;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.testcontainers.vault.VaultTestImages.VAULT_IMAGE;
 
 public class VaultClientTest {
 
@@ -18,7 +19,7 @@ public class VaultClientTest {
     @Test
     public void writeAndReadMultipleValues() throws VaultException {
         try (
-            VaultContainer vaultContainer = new VaultContainer<>()
+            VaultContainer<?> vaultContainer = new VaultContainer<>(VAULT_IMAGE)
                     .withVaultToken(VAULT_TOKEN)
         ) {
 

File: modules/vault/src/test/java/org/testcontainers/vault/VaultContainerTest.java
Patch:
@@ -19,7 +19,7 @@ public class VaultContainerTest {
     private static final String VAULT_TOKEN = "my-root-token";
 
     @ClassRule
-    public static VaultContainer vaultContainer = new VaultContainer<>()
+    public static VaultContainer<?> vaultContainer = new VaultContainer<>(VaultTestImages.VAULT_IMAGE)
         .withVaultToken(VAULT_TOKEN)
         .withSecretInVault("secret/testing1", "top_secret=password123")
         .withSecretInVault("secret/testing2",

File: core/src/main/java/org/testcontainers/utility/ResourceReaper.java
Patch:
@@ -76,7 +76,7 @@ public static String start(String hostIpAddress, DockerClient client) {
         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);
 
         List<Bind> binds = new ArrayList<>();
-        binds.add(new Bind("/" + DockerClientFactory.instance().getDockerUnixSocketPath(), new Volume("/var/run/docker.sock")));
+        binds.add(new Bind("/" + DockerClientFactory.instance().getRemoteDockerUnixSocketPath(), new Volume("/var/run/docker.sock")));
 
         String ryukContainerId = client.createContainerCmd(ryukImage)
                 .withHostConfig(new HostConfig().withAutoRemove(true))

File: core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java
Patch:
@@ -45,7 +45,7 @@ public class AuthenticatedImagePullTest {
     @ClassRule
     public static GenericContainer<?> authenticatedRegistry = new GenericContainer<>(new ImageFromDockerfile()
         .withDockerfileFromBuilder(builder -> {
-            builder.from("registry:2")
+            builder.from("registry:2.7.0")
                 .run("htpasswd -Bbn testuser notasecret > /htpasswd")
                 .env("REGISTRY_AUTH", "htpasswd")
                 .env("REGISTRY_AUTH_HTPASSWD_PATH", "/htpasswd")

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -239,7 +239,7 @@ private void checkDiskSpace(DockerClient dockerClient, String id) {
 
     private void check(String message, boolean isSuccessful) {
         if (isSuccessful) {
-            log.info("\u2714︎ {}", message);
+            log.info("\u2714\ufe0e {}", message);
         } else {
             log.error("\u274c {}", message);
             throw new IllegalStateException("Check failed: " + message);

File: core/src/main/java/org/testcontainers/dockerclient/AuditLoggingDockerClient.java
Patch:
@@ -16,12 +16,10 @@
  * Wrapper for {@link DockerClient} to facilitate 'audit logging' of potentially destruction actions using
  * {@link org.testcontainers.utility.AuditLogger}.
  *
- * @deprecated should not be used publicly
  */
 @Slf4j
 @SuppressWarnings("unchecked")
-@Deprecated
-public class AuditLoggingDockerClient implements DockerClient {
+class AuditLoggingDockerClient implements DockerClient {
 
     @Delegate(excludes = InterceptedMethods.class)
     private final DockerClient wrappedClient;

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -16,7 +16,6 @@
 import org.rnorth.ducttape.unreliables.Unreliables;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.testcontainers.dockerclient.auth.AuthDelegatingDockerClientConfig;
 import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.net.URI;

File: examples/linked-container/src/test/java/com/example/linkedcontainer/RedmineContainer.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.traits.LinkableContainer;
-import org.testcontainers.containers.wait.Wait;
+import org.testcontainers.containers.wait.strategy.Wait;
 
 /**
  * A Redmine container.

File: modules/clickhouse/src/main/java/org/testcontainers/containers/ClickHouseContainer.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.containers;
 
-import org.testcontainers.containers.wait.HttpWaitStrategy;
+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;
 
 import java.time.Duration;
 

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLContainer.java
Patch:
@@ -1,13 +1,12 @@
 package org.testcontainers.containers;
 
 import org.jetbrains.annotations.NotNull;
-import org.testcontainers.containers.wait.LogMessageWaitStrategy;
+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
 
 import java.time.Duration;
 import java.util.HashSet;
 import java.util.Set;
 
-import static java.lang.String.format;
 import static java.time.temporal.ChronoUnit.SECONDS;
 
 /**

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgisContainerProvider.java
Patch:
@@ -10,8 +10,8 @@
 public class PostgisContainerProvider extends JdbcDatabaseContainerProvider {
 
     private static final String NAME = "postgis";
-    private static final String DEFAULT_TAG = "10";
-    private static final String DEFAULT_IMAGE = "mdillon/postgis";
+    private static final String DEFAULT_TAG = "12-3.0";
+    private static final String DEFAULT_IMAGE = "postgis/postgis";
     public static final String USER_PARAM = "user";
     public static final String PASSWORD_PARAM = "password";
 

File: modules/postgresql/src/test/java/org/testcontainers/jdbc/postgis/PostgisJDBCDriverTest.java
Patch:
@@ -16,7 +16,7 @@ public static Iterable<Object[]> data() {
         return asList(
             new Object[][]{
                 {"jdbc:tc:postgis://hostname/databasename?user=someuser&password=somepwd", EnumSet.of(Options.JDBCParams)},
-                {"jdbc:tc:postgis:9.6://hostname/databasename?user=someuser&password=somepwd", EnumSet.of(Options.JDBCParams)},
+                {"jdbc:tc:postgis:9.6-2.5://hostname/databasename?user=someuser&password=somepwd", EnumSet.of(Options.JDBCParams)},
             });
     }
 }

File: modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java
Patch:
@@ -71,7 +71,7 @@ public class CouchbaseContainer extends GenericContainer<CouchbaseContainer> {
 
     private static final String DOCKER_IMAGE_NAME = "couchbase/server";
 
-    private static final String VERSION = "6.5.0";
+    private static final String VERSION = "6.5.1";
 
     private static final ObjectMapper MAPPER = new ObjectMapper();
 

File: core/src/main/java/org/testcontainers/containers/ComposeServiceWaitStrategyTarget.java
Patch:
@@ -54,8 +54,8 @@ public Integer getMappedPort(int originalPort) {
      * {@inheritDoc}
      */
     @Override
-    public String getContainerIpAddress() {
-        return proxyContainer.getContainerIpAddress();
+    public String getHost() {
+        return proxyContainer.getHost();
     }
 
     /**

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -402,7 +402,7 @@ public SELF waitingFor(String serviceName, @NonNull WaitStrategy waitStrategy) {
      * @return a host IP address or hostname that can be used for accessing the service container.
      */
     public String getServiceHost(String serviceName, Integer servicePort) {
-        return ambassadorContainer.getContainerIpAddress();
+        return ambassadorContainer.getHost();
     }
 
     /**

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -1244,7 +1244,7 @@ public SELF withCopyFileToContainer(MountableFile mountableFile, String containe
      */
     @Deprecated
     public String getIpAddress() {
-        return getContainerIpAddress();
+        return getHost();
     }
 
     /**

File: core/src/main/java/org/testcontainers/containers/PortForwardingContainer.java
Patch:
@@ -40,7 +40,7 @@ private Connection createSSHSession() {
             );
         container.start();
 
-        Connection connection = new Connection(container.getContainerIpAddress(), container.getMappedPort(22));
+        Connection connection = new Connection(container.getHost(), container.getMappedPort(22));
 
         connection.setTCPNoDelay(true);
         connection.connect(
@@ -60,7 +60,7 @@ private Connection createSSHSession() {
     public void exposeHostPort(int port) {
         exposeHostPort(port, port);
     }
-    
+
     @SneakyThrows
     public void exposeHostPort(int hostPort, int containerPort) {
     	if (exposedPorts.add(new AbstractMap.SimpleEntry<>(hostPort, containerPort))) {

File: core/src/main/java/org/testcontainers/containers/wait/internal/ExternalPortListeningCheck.java
Patch:
@@ -18,7 +18,7 @@ public class ExternalPortListeningCheck implements Callable<Boolean> {
 
     @Override
     public Boolean call() {
-        String address = containerState.getContainerIpAddress();
+        String address = containerState.getHost();
 
         externalLivenessCheckPorts.parallelStream().forEach(externalPort -> {
             try {

File: core/src/main/java/org/testcontainers/containers/wait/strategy/HostPortWaitStrategy.java
Patch:
@@ -46,7 +46,7 @@ protected void waitUntilReady() {
 
         } catch (TimeoutException e) {
             throw new ContainerLaunchException("Timed out waiting for container port to open (" +
-                    waitStrategyTarget.getContainerIpAddress() +
+                    waitStrategyTarget.getHost() +
                     " ports: " +
                     externalLivenessCheckPorts +
                     " should be listening)");

File: core/src/main/java/org/testcontainers/containers/wait/strategy/HttpWaitStrategy.java
Patch:
@@ -225,7 +225,7 @@ protected void waitUntilReady() {
      */
     private URI buildLivenessUri(int livenessCheckPort) {
         final String scheme = (tlsEnabled ? "https" : "http") + "://";
-        final String host = waitStrategyTarget.getContainerIpAddress();
+        final String host = waitStrategyTarget.getHost();
 
         final String portSuffix;
         if ((tlsEnabled && 443 == livenessCheckPort) || (!tlsEnabled && 80 == livenessCheckPort)) {

File: core/src/test/java/org/testcontainers/containers/wait/internal/ExternalPortListeningCheckTest.java
Patch:
@@ -29,7 +29,7 @@ public void setUp() throws Exception {
         nonListeningSocket.close();
 
         mockContainer = mock(WaitStrategyTarget.class);
-        when(mockContainer.getContainerIpAddress()).thenReturn("127.0.0.1");
+        when(mockContainer.getHost()).thenReturn("127.0.0.1");
     }
 
     @Test

File: core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java
Patch:
@@ -33,7 +33,7 @@ public class ImagePullPolicyTest {
 
     @BeforeClass
     public static void beforeClass() throws Exception {
-        String testRegistryAddress = registry.getContainerIpAddress() + ":" + registry.getFirstMappedPort();
+        String testRegistryAddress = registry.getHost() + ":" + registry.getFirstMappedPort();
         String testImageName = testRegistryAddress + "/image-pull-policy-test";
         String tag = UUID.randomUUID().toString();
         imageName = testImageName + ":" + tag;

File: core/src/test/java/org/testcontainers/junit/DockerfileContainerTest.java
Patch:
@@ -31,7 +31,7 @@ public class DockerfileContainerTest {
 
     @Test
     public void simpleDslTest() throws IOException {
-        String address = String.format("http://%s:%s", dslContainer.getContainerIpAddress(), dslContainer.getMappedPort(80));
+        String address = String.format("http://%s:%s", dslContainer.getHost(), dslContainer.getMappedPort(80));
 
         CloseableHttpClient httpClient = HttpClientBuilder.create().build();
         HttpGet get = new HttpGet(address);

File: core/src/test/java/org/testcontainers/junit/FixedHostPortContainerTest.java
Patch:
@@ -85,7 +85,7 @@ private String readResponse(GenericContainer container, Integer port) throws IOE
             final BufferedReader reader = Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS,
                 () -> {
                     Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);
-                    final Socket socket = new Socket(container.getContainerIpAddress(), port);
+                    final Socket socket = new Socket(container.getHost(), port);
                     return new BufferedReader(new InputStreamReader(socket.getInputStream()));
                 }
             )

File: core/src/test/java/org/testcontainers/junit/GenericContainerRuleTest.java
Patch:
@@ -162,7 +162,7 @@ public void withTmpFsTest() throws Exception {
     @Test
     public void simpleRabbitMqTest() throws IOException, TimeoutException {
         ConnectionFactory factory = new ConnectionFactory();
-        factory.setHost(rabbitMq.getContainerIpAddress());
+        factory.setHost(rabbitMq.getHost());
         factory.setPort(rabbitMq.getMappedPort(RABBITMQ_PORT));
         Connection connection = factory.newConnection();
 
@@ -194,7 +194,7 @@ public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProp
 
     @Test
     public void simpleMongoDbTest() {
-        MongoClient mongoClient = new MongoClient(mongo.getContainerIpAddress(), mongo.getMappedPort(MONGO_PORT));
+        MongoClient mongoClient = new MongoClient(mongo.getHost(), mongo.getMappedPort(MONGO_PORT));
         MongoDatabase database = mongoClient.getDatabase("test");
         MongoCollection<Document> collection = database.getCollection("testCollection");
 
@@ -366,7 +366,7 @@ private BufferedReader getReaderForContainerPort80(GenericContainer container) {
         return Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {
             Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);
 
-            Socket socket = new Socket(container.getContainerIpAddress(), container.getFirstMappedPort());
+            Socket socket = new Socket(container.getHost(), container.getFirstMappedPort());
             return new BufferedReader(new InputStreamReader(socket.getInputStream()));
         });
     }

File: core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java
Patch:
@@ -65,7 +65,7 @@ public static void setUp() throws InterruptedException {
         originalAuthLocatorSingleton = RegistryAuthLocator.instance();
         client = DockerClientFactory.instance().client();
 
-        String testRegistryAddress = authenticatedRegistry.getContainerIpAddress() + ":" + authenticatedRegistry.getFirstMappedPort();
+        String testRegistryAddress = authenticatedRegistry.getHost() + ":" + authenticatedRegistry.getFirstMappedPort();
         testImageName = testRegistryAddress + "/alpine";
         testImageNameWithTag = testImageName + ":latest";
 

File: docs/examples/junit4/redis/src/test/java/quickstart/RedisBackedCacheIntTest.java
Patch:
@@ -21,7 +21,7 @@ public class RedisBackedCacheIntTest {
 
     @Before
     public void setUp() {
-        String address = redis.getContainerIpAddress();
+        String address = redis.getHost();
         Integer port = redis.getFirstMappedPort();
 
         // Now we have an address and port for Redis, no matter where it is running

File: docs/examples/junit5/redis/src/test/java/quickstart/RedisBackedCacheIntTest.java
Patch:
@@ -24,7 +24,7 @@ public class RedisBackedCacheIntTest {
 
     @BeforeEach
     public void setUp() {
-        String address = redis.getContainerIpAddress();
+        String address = redis.getHost();
         Integer port = redis.getFirstMappedPort();
 
         // Now we have an address and port for Redis, no matter where it is running

File: modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java
Patch:
@@ -161,7 +161,7 @@ public Cluster getCluster() {
 
     public static Cluster getCluster(ContainerState containerState, boolean enableJmxReporting) {
         final Cluster.Builder builder = Cluster.builder()
-            .addContactPoint(containerState.getContainerIpAddress())
+            .addContactPoint(containerState.getHost())
             .withPort(containerState.getMappedPort(CQL_PORT));
         if (!enableJmxReporting) {
             builder.withoutJMXReporting();

File: modules/cassandra/src/test/java/org/testcontainers/containers/CassandraContainerTest.java
Patch:
@@ -116,7 +116,7 @@ private void testInitScript(CassandraContainer cassandraContainer) {
 
     private ResultSet performQuery(CassandraContainer cassandraContainer, String cql) {
         Cluster explicitCluster = Cluster.builder()
-            .addContactPoint(cassandraContainer.getContainerIpAddress())
+            .addContactPoint(cassandraContainer.getHost())
             .withPort(cassandraContainer.getMappedPort(CassandraContainer.CQL_PORT))
             .build();
         return performQuery(explicitCluster, cql);

File: modules/clickhouse/src/main/java/org/testcontainers/containers/ClickHouseContainer.java
Patch:
@@ -48,7 +48,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return JDBC_URL_PREFIX + getContainerIpAddress() + ":" + getMappedPort(HTTP_PORT) + "/" + databaseName;
+        return JDBC_URL_PREFIX + getHost() + ":" + getMappedPort(HTTP_PORT) + "/" + databaseName;
     }
 
     @Override

File: modules/cockroachdb/src/main/java/org/testcontainers/containers/CockroachContainer.java
Patch:
@@ -43,7 +43,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return JDBC_URL_PREFIX + "://" + getContainerIpAddress() + ":" + getMappedPort(DB_PORT) + "/" + databaseName;
+        return JDBC_URL_PREFIX + "://" + getHost() + ":" + getMappedPort(DB_PORT) + "/" + databaseName;
     }
 
     @Override

File: modules/couchbase/src/test/java/org/testcontainers/couchbase/CouchbaseContainerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testBasicContainerUsage() {
 
             Cluster cluster = CouchbaseCluster.create(
                 environment,
-                container.getContainerIpAddress()
+                container.getHost()
             );
             // }
 

File: modules/dynalite/src/main/java/org/testcontainers/dynamodb/DynaliteContainer.java
Patch:
@@ -46,7 +46,7 @@ public AmazonDynamoDB getClient() {
      */
     public AwsClientBuilder.EndpointConfiguration getEndpointConfiguration() {
         return new AwsClientBuilder.EndpointConfiguration("http://" +
-                this.getContainerIpAddress() + ":" +
+                this.getHost() + ":" +
                 this.getMappedPort(MAPPED_PORT), null);
     }
 

File: modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java
Patch:
@@ -57,10 +57,10 @@ public ElasticsearchContainer(String dockerImageName) {
     }
 
     public String getHttpHostAddress() {
-        return getContainerIpAddress() + ":" + getMappedPort(ELASTICSEARCH_DEFAULT_PORT);
+        return getHost() + ":" + getMappedPort(ELASTICSEARCH_DEFAULT_PORT);
     }
 
     public InetSocketAddress getTcpHost() {
-        return new InetSocketAddress(getContainerIpAddress(), getMappedPort(ELASTICSEARCH_DEFAULT_TCP_PORT));
+        return new InetSocketAddress(getHost(), getMappedPort(ELASTICSEARCH_DEFAULT_TCP_PORT));
     }
 }

File: modules/influxdb/src/main/java/org/testcontainers/containers/InfluxDBContainer.java
Patch:
@@ -131,7 +131,7 @@ public SELF withPassword(final String password) {
      * @return a url to influxDb
      */
     public String getUrl() {
-        return "http://" + getContainerIpAddress() + ":" + getLivenessCheckPort();
+        return "http://" + getHost() + ":" + getLivenessCheckPort();
     }
 
     /**

File: modules/junit-jupiter/src/test/java/org/testcontainers/junit/jupiter/inheritance/RedisContainer.java
Patch:
@@ -15,6 +15,6 @@ public RedisContainer(String dockerImageName) {
     }
 
     public Jedis getJedis() {
-        return new Jedis(getContainerIpAddress(), getMappedPort(6379));
+        return new Jedis(getHost(), getMappedPort(6379));
     }
 }

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -88,7 +88,7 @@ public String getBootstrapServers() {
         if (port == PORT_NOT_ASSIGNED) {
             throw new IllegalStateException("You should start Kafka container first");
         }
-        return String.format("PLAINTEXT://%s:%s", getContainerIpAddress(), port);
+        return String.format("PLAINTEXT://%s:%s", getHost(), port);
     }
 
     @Override

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -63,7 +63,7 @@ protected void configure() {
             withEnv(HOSTNAME_EXTERNAL_ENV_VAR, getNetworkAliases().get(getNetworkAliases().size() - 1));  // use the last network alias set
             hostnameExternalReason = "to match last network alias on container with non-default network";
         } else {
-            withEnv(HOSTNAME_EXTERNAL_ENV_VAR, getContainerIpAddress());
+            withEnv(HOSTNAME_EXTERNAL_ENV_VAR, getHost());
             hostnameExternalReason = "to match host-routable address for container";
         }
         logger().info("{} environment variable set to {} ({})", HOSTNAME_EXTERNAL_ENV_VAR, getEnvMap().get(HOSTNAME_EXTERNAL_ENV_VAR), hostnameExternalReason);
@@ -134,7 +134,7 @@ public AwsClientBuilder.EndpointConfiguration getEndpointConfiguration(Service s
      */
     public URI getEndpointOverride(Service service) {
         try {
-            final String address = getContainerIpAddress();
+            final String address = getHost();
             String ipAddress = address;
             // resolve IP address and use that as the endpoint so that path-style access is automatically used for S3
             ipAddress = InetAddress.getByName(address).getHostAddress();

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainer.java
Patch:
@@ -60,7 +60,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return "jdbc:mariadb://" + getContainerIpAddress() + ":" + getMappedPort(MARIADB_PORT) + "/" + databaseName;
+        return "jdbc:mariadb://" + getHost() + ":" + getMappedPort(MARIADB_PORT) + "/" + databaseName;
     }
 
     @Override

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBR2DBCDatabaseContainer.java
Patch:
@@ -23,7 +23,7 @@ public static ConnectionFactoryOptions getOptions(MariaDBContainer<?> container)
     @Override
     public ConnectionFactoryOptions configure(ConnectionFactoryOptions options) {
         return options.mutate()
-            .option(ConnectionFactoryOptions.HOST, container.getContainerIpAddress())
+            .option(ConnectionFactoryOptions.HOST, container.getHost())
             .option(ConnectionFactoryOptions.PORT, container.getMappedPort(MariaDBContainer.MARIADB_PORT))
             .option(ConnectionFactoryOptions.DATABASE, container.getDatabaseName())
             .option(ConnectionFactoryOptions.USER, container.getUsername())

File: modules/mockserver/src/main/java/org/testcontainers/containers/MockServerContainer.java
Patch:
@@ -20,7 +20,7 @@ public MockServerContainer(String version) {
     }
 
     public String getEndpoint() {
-        return String.format("http://%s:%d", getContainerIpAddress(), getMappedPort(PORT));
+        return String.format("http://%s:%d", getHost(), getMappedPort(PORT));
     }
 
     public Integer getServerPort() {

File: modules/mockserver/src/test/java/org/testcontainers/containers/MockServerContainerTest.java
Patch:
@@ -33,7 +33,7 @@ private static String responseFromMockserver(MockServerContainer mockServer, Str
     @Test
     public void shouldReturnExpectation() throws Exception {
         // testSimpleExpectation {
-        new MockServerClient(mockServer.getContainerIpAddress(), mockServer.getServerPort())
+        new MockServerClient(mockServer.getHost(), mockServer.getServerPort())
             .when(request()
                 .withPath("/person")
                 .withQueryStringParameter("name", "peter"))
@@ -57,7 +57,7 @@ public void shouldCallActualMockserverVersion() throws Exception {
 
             String expectedBody = "Hello World!";
 
-            new MockServerClient(mockServer.getContainerIpAddress(), mockServer.getServerPort())
+            new MockServerClient(mockServer.getHost(), mockServer.getServerPort())
                 .when(request().withPath("/hello"))
                 .respond(response().withBody(expectedBody));
 

File: modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainer.java
Patch:
@@ -23,7 +23,7 @@ public static ConnectionFactoryOptions getOptions(MSSQLServerContainer<?> contai
     @Override
     public ConnectionFactoryOptions configure(ConnectionFactoryOptions options) {
         return options.mutate()
-            .option(ConnectionFactoryOptions.HOST, container.getContainerIpAddress())
+            .option(ConnectionFactoryOptions.HOST, container.getHost())
             .option(ConnectionFactoryOptions.PORT, container.getMappedPort(MSSQLServerContainer.MS_SQL_SERVER_PORT))
             // TODO enable if/when MSSQLServerContainer adds support for customizing the DB name
             // .option(ConnectionFactoryOptions.DATABASE, container.getDatabasseName())

File: modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLServerContainer.java
Patch:
@@ -62,7 +62,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return "jdbc:sqlserver://" + getContainerIpAddress() + ":" + getMappedPort(MS_SQL_SERVER_PORT);
+        return "jdbc:sqlserver://" + getHost() + ":" + getMappedPort(MS_SQL_SERVER_PORT);
     }
 
     @Override

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -70,7 +70,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return "jdbc:mysql://" + getContainerIpAddress() + ":" + getMappedPort(MYSQL_PORT) + "/" + databaseName;
+        return "jdbc:mysql://" + getHost() + ":" + getMappedPort(MYSQL_PORT) + "/" + databaseName;
     }
 
     @Override

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLR2DBCDatabaseContainer.java
Patch:
@@ -23,7 +23,7 @@ public static ConnectionFactoryOptions getOptions(MySQLContainer<?> container) {
     @Override
     public ConnectionFactoryOptions configure(ConnectionFactoryOptions options) {
         return options.mutate()
-            .option(ConnectionFactoryOptions.HOST, container.getContainerIpAddress())
+            .option(ConnectionFactoryOptions.HOST, container.getHost())
             .option(ConnectionFactoryOptions.PORT, container.getMappedPort(MySQLContainer.MYSQL_PORT))
             .option(ConnectionFactoryOptions.DATABASE, container.getDatabaseName())
             .option(ConnectionFactoryOptions.USER, container.getUsername())

File: modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java
Patch:
@@ -111,21 +111,21 @@ protected void configure() {
      * @return Bolt URL for use with Neo4j's Java-Driver.
      */
     public String getBoltUrl() {
-        return String.format("bolt://" + getContainerIpAddress() + ":" + getMappedPort(DEFAULT_BOLT_PORT));
+        return String.format("bolt://" + getHost() + ":" + getMappedPort(DEFAULT_BOLT_PORT));
     }
 
     /**
      * @return URL of the transactional HTTP endpoint.
      */
     public String getHttpUrl() {
-        return String.format("http://" + getContainerIpAddress() + ":" + getMappedPort(DEFAULT_HTTP_PORT));
+        return String.format("http://" + getHost() + ":" + getMappedPort(DEFAULT_HTTP_PORT));
     }
 
     /**
      * @return URL of the transactional HTTPS endpoint.
      */
     public String getHttpsUrl() {
-        return String.format("https://" + getContainerIpAddress() + ":" + getMappedPort(DEFAULT_HTTPS_PORT));
+        return String.format("https://" + getHost() + ":" + getMappedPort(DEFAULT_HTTPS_PORT));
     }
 
     /**

File: modules/nginx/src/main/java/org/testcontainers/containers/NginxContainer.java
Patch:
@@ -33,7 +33,7 @@ protected Set<Integer> getLivenessCheckPorts() {
     }
 
     public URL getBaseUrl(String scheme, int port) throws MalformedURLException {
-        return new URL(scheme + "://" + getContainerIpAddress() + ":" + getMappedPort(port));
+        return new URL(scheme + "://" + getHost() + ":" + getMappedPort(port));
     }
 
     public void setCustomContent(String htmlContentPath) {

File: modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java
Patch:
@@ -64,7 +64,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return "jdbc:oracle:thin:" + getUsername() + "/" + getPassword() + "@" + getContainerIpAddress() + ":" + getOraclePort() + ":" + getSid();
+        return "jdbc:oracle:thin:" + getUsername() + "/" + getPassword() + "@" + getHost() + ":" + getOraclePort() + ":" + getSid();
     }
 
     @Override

File: modules/orientdb/src/main/java/org/testcontainers/containers/OrientDBContainer.java
Patch:
@@ -108,7 +108,7 @@ public OrientDB getOrientDB() {
     }
 
     public String getServerUrl() {
-        return "remote:" + getContainerIpAddress() + ":" + getMappedPort(2424);
+        return "remote:" + getHost() + ":" + getMappedPort(2424);
     }
 
     public String getDbUrl() {

File: modules/orientdb/src/test/java/org/testcontainers/containers/OrientDBContainerTest.java
Patch:
@@ -63,7 +63,7 @@ public void shouldInitializeDatabaseFromScript() {
             container.start();
 
             assertThat(container.getDbUrl())
-                .isEqualTo("remote:" + container.getContainerIpAddress() + ":" + container.getMappedPort(2424) + "/persons");
+                .isEqualTo("remote:" + container.getHost() + ":" + container.getMappedPort(2424) + "/persons");
 
             final ODatabaseSession session = container.getSession();
 

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLContainer.java
Patch:
@@ -68,7 +68,7 @@ public String getDriverClassName() {
     @Override
     public String getJdbcUrl() {
         // Disable Postgres driver use of java.util.logging to reduce noise at startup time
-        return format("jdbc:postgresql://%s:%d/%s?loggerLevel=OFF", getContainerIpAddress(), getMappedPort(POSTGRESQL_PORT), databaseName);
+        return format("jdbc:postgresql://%s:%d/%s?loggerLevel=OFF", getHost(), getMappedPort(POSTGRESQL_PORT), databaseName);
     }
 
     @Override

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLR2DBCDatabaseContainer.java
Patch:
@@ -23,7 +23,7 @@ public static ConnectionFactoryOptions getOptions(PostgreSQLContainer<?> contain
     @Override
     public ConnectionFactoryOptions configure(ConnectionFactoryOptions options) {
         return options.mutate()
-            .option(ConnectionFactoryOptions.HOST, container.getContainerIpAddress())
+            .option(ConnectionFactoryOptions.HOST, container.getHost())
             .option(ConnectionFactoryOptions.PORT, container.getMappedPort(PostgreSQLContainer.POSTGRESQL_PORT))
             .option(ConnectionFactoryOptions.DATABASE, container.getDatabaseName())
             .option(ConnectionFactoryOptions.USER, container.getUsername())

File: modules/postgresql/src/test/java/org/testcontainers/containers/PostgreSQLConnectionURLTest.java
Patch:
@@ -48,7 +48,7 @@ public void shouldRejectInvalidQueryString() {
     static class FixedJdbcUrlPostgreSQLContainer extends PostgreSQLContainer<FixedJdbcUrlPostgreSQLContainer> {
 
         @Override
-        public String getContainerIpAddress() {
+        public String getHost() {
             return "localhost";
         }
 

File: modules/presto/src/main/java/org/testcontainers/containers/PrestoContainer.java
Patch:
@@ -49,7 +49,7 @@ public String getDriverClassName() {
 
     @Override
     public String getJdbcUrl() {
-        return format("jdbc:presto://%s:%s/%s", getContainerIpAddress(), getMappedPort(PRESTO_PORT), nullToEmpty(catalog));
+        return format("jdbc:presto://%s:%s/%s", getHost(), getMappedPort(PRESTO_PORT), nullToEmpty(catalog));
     }
 
     @Override

File: modules/pulsar/src/main/java/org/testcontainers/containers/PulsarContainer.java
Patch:
@@ -26,11 +26,11 @@ public PulsarContainer(String pulsarVersion) {
     }
 
     public String getPulsarBrokerUrl() {
-        return String.format("pulsar://%s:%s", getContainerIpAddress(), getMappedPort(BROKER_PORT));
+        return String.format("pulsar://%s:%s", getHost(), getMappedPort(BROKER_PORT));
     }
 
     public String getHttpServiceUrl() {
-        return String.format("http://%s:%s", getContainerIpAddress(), getMappedPort(BROKER_HTTP_PORT));
+        return String.format("http://%s:%s", getHost(), getMappedPort(BROKER_HTTP_PORT));
     }
 }
 

File: modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java
Patch:
@@ -207,7 +207,7 @@ public static String getImageForCapabilities(Capabilities capabilities, String s
 
     public URL getSeleniumAddress() {
         try {
-            return new URL("http", getContainerIpAddress(), getMappedPort(SELENIUM_PORT), "/wd/hub");
+            return new URL("http", getHost(), getMappedPort(SELENIUM_PORT), "/wd/hub");
         } catch (MalformedURLException e) {
             e.printStackTrace();// TODO
             return null;
@@ -216,7 +216,7 @@ public URL getSeleniumAddress() {
 
     @Override
     public String getVncAddress() {
-        return "vnc://vnc:secret@" + getContainerIpAddress() + ":" + getMappedPort(VNC_PORT);
+        return "vnc://vnc:secret@" + getHost() + ":" + getMappedPort(VNC_PORT);
     }
 
     @Override

File: modules/toxiproxy/src/main/java/org/testcontainers/containers/ToxiproxyContainer.java
Patch:
@@ -47,7 +47,7 @@ public ToxiproxyContainer(String imageName) {
 
     @Override
     protected void containerIsStarted(InspectContainerResponse containerInfo) {
-        client = new ToxiproxyClient(getContainerIpAddress(), getMappedPort(TOXIPROXY_CONTROL_PORT));
+        client = new ToxiproxyClient(getHost(), getMappedPort(TOXIPROXY_CONTROL_PORT));
     }
 
     /**
@@ -88,7 +88,7 @@ public ContainerProxy getProxy(String hostname, int port) {
 
                 final Proxy proxy = client.createProxy(upstream, "0.0.0.0:" + toxiPort, upstream);
                 final int mappedPort = getMappedPort(toxiPort);
-                return new ContainerProxy(proxy, getContainerIpAddress(), mappedPort, toxiPort);
+                return new ContainerProxy(proxy, getHost(), mappedPort, toxiPort);
             } catch (IOException e) {
                 throw new RuntimeException("Proxy could not be created", e);
             }

File: modules/toxiproxy/src/test/java/org/testcontainers/containers/ToxiproxyTest.java
Patch:
@@ -40,7 +40,7 @@ public class ToxiproxyTest {
 
     @Test
     public void testDirect() {
-        final Jedis jedis = createJedis(redis.getContainerIpAddress(), redis.getFirstMappedPort());
+        final Jedis jedis = createJedis(redis.getHost(), redis.getFirstMappedPort());
         jedis.set("somekey", "somevalue");
 
         final String s = jedis.get("somekey");

File: modules/vault/src/test/java/org/testcontainers/vault/VaultClientTest.java
Patch:
@@ -5,7 +5,6 @@
 import com.bettercloud.vault.VaultException;
 import com.bettercloud.vault.response.LogicalResponse;
 import org.junit.Test;
-import org.testcontainers.containers.wait.strategy.Wait;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -26,7 +25,7 @@ public void writeAndReadMultipleValues() throws VaultException {
             vaultContainer.start();
 
             final VaultConfig config = new VaultConfig()
-                .address("http://" + vaultContainer.getContainerIpAddress() + ":" + vaultContainer.getFirstMappedPort())
+                .address("http://" + vaultContainer.getHost() + ":" + vaultContainer.getFirstMappedPort())
                 .token(VAULT_TOKEN)
                 .build();
 

File: modules/vault/src/test/java/org/testcontainers/vault/VaultContainerTest.java
Patch:
@@ -71,7 +71,7 @@ public void readSecondSecretPathOverHttpApi() throws InterruptedException {
     }
 
     private String getHostAndPort() {
-        return vaultContainer.getContainerIpAddress() + ":" + vaultContainer.getMappedPort(8200);
+        return vaultContainer.getHost() + ":" + vaultContainer.getMappedPort(8200);
     }
 
 

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -307,7 +307,6 @@ protected void doStart() {
             Instant startedAt = Instant.now();
 
             logger().debug("Starting container: {}", getDockerImageName());
-            logger().debug("Trying to start container: {}", getDockerImageName());
 
             AtomicInteger attempt = new AtomicInteger(0);
             Unreliables.retryUntilSuccess(startupAttempts, () -> {

File: modules/junit-jupiter/src/main/java/org/testcontainers/junit/jupiter/Testcontainers.java
Patch:
@@ -23,7 +23,7 @@
  * the test hierarchy as well. All subclasses will automatically inherit
  * support for the extension.</p>
  *
- * <p><strong>Note:</strong> This extension has only be tested with sequential
+ * <p><strong>Note:</strong> This extension has only been tested with sequential
  * test execution. Using it with parallel test execution is unsupported and
  * may have unintended side effects.</p>
  *

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainer.java
Patch:
@@ -23,7 +23,7 @@ public class MariaDBContainer<SELF extends MariaDBContainer<SELF>> extends JdbcD
     private static final String MY_CNF_CONFIG_OVERRIDE_PARAM_NAME = "TC_MY_CNF";
 
     public MariaDBContainer() {
-        super(IMAGE + ":" + DEFAULT_TAG);
+        this(IMAGE + ":" + DEFAULT_TAG);
     }
 
     public MariaDBContainer(String dockerImageName) {

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -26,7 +26,7 @@ public class MySQLContainer<SELF extends MySQLContainer<SELF>> extends JdbcDatab
     private static final String MYSQL_ROOT_USER = "root";
 
     public MySQLContainer() {
-        super(IMAGE + ":" + DEFAULT_TAG);
+        this(IMAGE + ":" + DEFAULT_TAG);
     }
 
     public MySQLContainer(String dockerImageName) {

File: core/src/main/java/org/testcontainers/images/ImageData.java
Patch:
@@ -10,7 +10,7 @@
 
 @Value
 @Builder
-class ImageData {
+public class ImageData {
 
     @NonNull
     Instant createdAt;

File: core/src/test/java/org/testcontainers/containers/GenericContainerTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.dockerjava.api.DockerClient;
 import com.github.dockerjava.api.command.InspectContainerResponse.ContainerState;
-import com.github.dockerjava.api.model.HostConfig;
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;
 import lombok.experimental.FieldDefaults;

File: core/src/main/java/org/testcontainers/containers/Network.java
Patch:
@@ -97,7 +97,7 @@ protected void after() {
         }
 
         @Override
-        public void close() {
+        public synchronized void close() {
             if (initialized.getAndSet(false)) {
                 ResourceReaper.instance().removeNetworkById(id);
             }

File: modules/jdbc-test/src/test/java/org/testcontainers/jdbc/JDBCDriverTest.java
Patch:
@@ -67,7 +67,7 @@ public static Iterable<Object[]> data() {
                 {"jdbc:tc:clickhouse://hostname/databasename", EnumSet.of(Options.PmdKnownBroken)},
                 {"jdbc:tc:sqlserver:2017-CU12://hostname:hostport;databaseName=databasename", EnumSet.noneOf(Options.class)},
                 {"jdbc:tc:cockroach://hostname/databasename", EnumSet.noneOf(Options.class)},
-                {"jdbc:tc:db2://hostname/databasename", EnumSet.noneOf(Options.class)}
+//                {"jdbc:tc:db2://hostname/databasename", EnumSet.noneOf(Options.class)}
             });
     }
 

File: modules/jdbc-test/src/test/java/org/testcontainers/junit/SimpleDb2Test.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.testcontainers.containers.Db2Container;
@@ -13,6 +14,7 @@
 import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
 
 
+@Ignore("Disabled since we had problems with CI disk space filling up from images in jdbc-test module")
 public class SimpleDb2Test {
 
     @Rule

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -178,12 +178,13 @@ private void pullImages() {
         // (a) as a workaround for https://github.com/docker/compose/issues/5854, which prevents authenticated image pulls being possible when credential helpers are in use
         // (b) so that credential helper-based auth still works when compose is running from within a container
         parsedComposeFiles.stream()
-            .flatMap(it -> it.getServiceImageNames().stream())
+            .flatMap(it -> it.getDependencyImageNames().stream())
             .forEach(imageName -> {
                 try {
+                    log.info("Preemptively checking local images for '{}', referenced via a compose file or transitive Dockerfile. If not available, it will be pulled.", imageName);
                     DockerClientFactory.instance().checkAndPullImage(dockerClient, imageName);
                 } catch (Exception e) {
-                    log.warn("Failed to pull image '{}'. Exception message was {}", imageName, e.getMessage());
+                    log.warn("Unable to pre-fetch an image ({}) depended upon by Docker Compose build - startup will continue but may fail. Exception message was: {}", imageName, e.getMessage());
                 }
             });
     }

File: examples/cucumber/src/test/java/org/testcontainsers/examples/CucumberTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.testcontainsers.examples;
 
-import cucumber.api.CucumberOptions;
-import cucumber.api.junit.Cucumber;
+import io.cucumber.junit.Cucumber;
+import io.cucumber.junit.CucumberOptions;
 import org.junit.runner.RunWith;
 
 @RunWith(Cucumber.class)

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -218,7 +218,9 @@ static String resolveDockerHostIpAddress(DockerClient client, URI dockerHost) {
                         .filter(it -> it.getGateway() != null)
                         .findAny()
                         .map(Network.Ipam.Config::getGateway)
-                        .orElse("localhost");
+                        .orElseGet(() -> {
+                            return DockerClientConfigUtils.getDefaultGateway().orElse("localhost");
+                        });
                 }
                 return "localhost";
             default:

File: core/src/jarFileTest/java/org/testcontainers/JarFileShadingTest.java
Patch:
@@ -14,7 +14,6 @@ public class JarFileShadingTest extends AbstractJarFileTest {
     @Test
     public void testPackages() throws Exception {
         assertThatFileList(root).containsOnly(
-                "docker-java.properties",
                 "org",
                 "META-INF",
                 "com"

File: core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java
Patch:
@@ -5,7 +5,6 @@
 import lombok.NonNull;
 import lombok.SneakyThrows;
 import lombok.ToString;
-import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.rnorth.ducttape.TimeoutException;
 import org.rnorth.ducttape.unreliables.Unreliables;
@@ -17,6 +16,7 @@
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.StandardCopyOption;
+import java.util.Base64;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -112,9 +112,10 @@ public VncRecordingContainer withFrameRate(int frameRate) {
     @Override
     protected void configure() {
         withCreateContainerCmdModifier(it -> it.withEntrypoint("/bin/sh"));
+        String encodedPassword = Base64.getEncoder().encodeToString(vncPassword.getBytes());
         setCommand(
                 "-c",
-                "echo '" + Base64.encodeBase64String(vncPassword.getBytes()) + "' | base64 -d > /vnc_password && " +
+                "echo '" + encodedPassword + "' | base64 -d > /vnc_password && " +
                         "flvrec.py -o " + RECORDING_FILE_NAME + " -d -r " + frameRate + " -P /vnc_password " + targetNetworkAlias + " " + vncPort
         );
     }

File: core/src/main/java/org/testcontainers/dockerclient/AuditLoggingDockerClient.java
Patch:
@@ -15,9 +15,12 @@
 /**
  * Wrapper for {@link DockerClient} to facilitate 'audit logging' of potentially destruction actions using
  * {@link org.testcontainers.utility.AuditLogger}.
+ *
+ * @deprecated should not be used publicly
  */
 @Slf4j
 @SuppressWarnings("unchecked")
+@Deprecated
 public class AuditLoggingDockerClient implements DockerClient {
 
     @Delegate(excludes = InterceptedMethods.class)

File: core/src/main/java/org/testcontainers/dockerclient/auth/AuthDelegatingDockerClientConfig.java
Patch:
@@ -14,8 +14,11 @@
  * configuration is obtained. A delegate {@link DockerClientConfig} will be called first
  * to try and obtain auth credentials, but after that {@link RegistryAuthLocator} will be
  * used to try and improve the auth resolution (e.g. using credential helpers).
+ *
+ * @deprecated should not be used publicly, to be moved to docker-java
  */
 @Slf4j
+@Deprecated
 public class AuthDelegatingDockerClientConfig implements DockerClientConfig {
 
     @Delegate(excludes = DelegateExclusions.class)

File: core/src/main/java/org/testcontainers/images/TimeLimitedLoggedPullImageResultCallback.java
Patch:
@@ -47,9 +47,10 @@ public TimeLimitedLoggedPullImageResultCallback(Logger logger) {
     }
 
     @Override
-    public PullImageResultCallback awaitCompletion() throws InterruptedException {
+    public TimeLimitedLoggedPullImageResultCallback awaitCompletion() throws InterruptedException {
         waitingThreads.add(Thread.currentThread());
-        return super.awaitCompletion();
+        super.awaitCompletion();
+        return this;
     }
 
     @Override

File: modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java
Patch:
@@ -26,7 +26,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.github.dockerjava.api.command.ExecCreateCmdResponse;
 import com.github.dockerjava.api.command.InspectContainerResponse;
-import com.github.dockerjava.core.command.ExecStartResultCallback;
 import com.google.common.collect.Lists;
 import lombok.*;
 import org.apache.commons.compress.utils.Sets;
@@ -171,7 +170,7 @@ private void startProxy(String networkAlias) {
             .exec();
 
         dockerClient.execStartCmd(createCmdResponse.getId())
-            .exec(new ExecStartResultCallback())
+            .start()
             .awaitCompletion(10, TimeUnit.SECONDS);
     }
 

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.dockerjava.api.command.ExecCreateCmdResponse;
 import com.github.dockerjava.api.command.InspectContainerResponse;
-import com.github.dockerjava.core.command.ExecStartResultCallback;
 import lombok.SneakyThrows;
 import org.testcontainers.images.builder.Transferable;
 import org.testcontainers.utility.TestcontainersConfiguration;
@@ -150,7 +149,7 @@ private String startZookeeper() {
             )
             .exec();
 
-        dockerClient.execStartCmd(execCreateCmdResponse.getId()).exec(new ExecStartResultCallback()).awaitStarted(10, TimeUnit.SECONDS);
+        dockerClient.execStartCmd(execCreateCmdResponse.getId()).start().awaitStarted(10, TimeUnit.SECONDS);
 
         return "localhost:" + ZOOKEEPER_PORT;
     }

File: core/src/main/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheck.java
Patch:
@@ -29,7 +29,7 @@ public Boolean call() {
         for (int internalPort : internalPorts) {
             command += " && ";
             command += " (";
-            command += format("cat /proc/net/tcp* | awk '{print $2}' | grep -i :%x", internalPort);
+            command += format("cat /proc/net/tcp* | awk '{print $2}' | grep -i ':0*%x'", internalPort);
             command += " || ";
             command += format("nc -vz -w 1 localhost %d", internalPort);
             command += " || ";

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -154,7 +154,7 @@ public enum Service {
         SSM("ssm", 4583),
         SECRETSMANAGER("secretsmanager", 4584),
         STEPFUNCTIONS("stepfunctions", 4585),
-        CLOUDWATCHLOGS("cloudwatchlogs", 4586),
+        CLOUDWATCHLOGS("logs", 4586),
         STS("sts", 4592),
         IAM("iam", 4593);
 

File: core/src/test/java/org/testcontainers/utility/MockTestcontainersConfigurationRule.java
Patch:
@@ -23,6 +23,9 @@ public Statement apply(@NotNull Statement base, @NotNull Description description
             @Override
             public void evaluate() throws Throwable {
                 TestcontainersConfiguration previous = REF.get();
+                if (previous == null) {
+                    previous = TestcontainersConfiguration.getInstance();
+                }
                 REF.set(Mockito.spy(previous));
 
                 try {

File: core/src/main/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheck.java
Patch:
@@ -29,7 +29,7 @@ public Boolean call() {
         for (int internalPort : internalPorts) {
             command += " && ";
             command += " (";
-            command += format("cat /proc/net/tcp{,6} | awk '{print $2}' | grep -i :%x", internalPort);
+            command += format("cat /proc/net/tcp* | awk '{print $2}' | grep -i :%x", internalPort);
             command += " || ";
             command += format("nc -vz -w 1 localhost %d", internalPort);
             command += " || ";

File: core/src/test/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheckTest.java
Patch:
@@ -11,8 +11,8 @@
 
 public class InternalCommandPortListeningCheckTest {
 
-    // Linking a custom configuration into the container so that nginx is listening on port 8080. This is necessary to proof
-    // that the command formatting uses the correct casing for hexadecimal numberd (i.e. 1F90 and not 1f90).
+    // Linking a custom configuration into the container so that nginx is listening on port 8080. This is necessary to prove
+    // that the command formatting uses the correct casing for hexadecimal numbers (i.e. 1F90 and not 1f90).
     @Rule
     public GenericContainer nginx = new GenericContainer<>("nginx:1.9.4")
             .withClasspathResourceMapping("nginx_on_8080.conf", "/etc/nginx/conf.d/default.conf", BindMode.READ_ONLY);

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -123,7 +123,7 @@ public void onNext(BuildResponseItem item) {
                 tarArchive.finish();
             }
 
-            log.info("Transferred {} KB to Docker daemon", FileUtils.byteCountToDisplaySize(bytesToDockerDaemon));
+            log.info("Transferred {} to Docker daemon", FileUtils.byteCountToDisplaySize(bytesToDockerDaemon));
             if (bytesToDockerDaemon > FileUtils.ONE_MB * 50) // warn if >50MB sent to docker daemon
                 log.warn("A large amount of data was sent to the Docker daemon ({}). Consider using a .dockerignore file for better performance.",
                         FileUtils.byteCountToDisplaySize(bytesToDockerDaemon));

File: modules/jdbc/src/main/java/org/testcontainers/jdbc/ConnectionUrl.java
Patch:
@@ -228,7 +228,7 @@ public interface Patterns {
 
         Pattern TC_PARAM_MATCHING_PATTERN = Pattern.compile(TC_PARAM_NAME_PATTERN + "=([^\\?&]+)");
 
-        Pattern QUERY_PARAM_MATCHING_PATTERN = Pattern.compile("([^\\?&=]+)=([^\\?&]+)");
+        Pattern QUERY_PARAM_MATCHING_PATTERN = Pattern.compile("([^\\?&=]+)=([^\\?&]*)");
 
     }
 

File: core/src/test/java/org/testcontainers/junit/DockerComposeServiceTest.java
Patch:
@@ -21,7 +21,7 @@ protected DockerComposeContainer getEnvironment() {
         return environment;
     }
 
-    @Test(expected = NullPointerException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void testDbIsNotStarting() {
         environment.getServicePort("db_1", 10001);
     }

File: core/src/test/java/org/testcontainers/containers/ReusabilityUnitTests.java
Patch:
@@ -424,14 +424,16 @@ public void filePermissions() throws Exception {
         public void folderPermissions() throws Exception {
             Path tempDirectory = Files.createTempDirectory("reusable_test");
             MountableFile mountableFile = MountableFile.forHostPath(tempDirectory);
-            assumeThat(new File(mountableFile.getResolvedPath())).isDirectory();
+            assertThat(new File(mountableFile.getResolvedPath())).isDirectory();
             Path subDir = Files.createDirectory(tempDirectory.resolve("sub"));
             subDir.toFile().setWritable(false);
+            assumeThat(subDir.toFile().canWrite()).isFalse();
             container.withCopyFileToContainer(mountableFile, "/foo/bar/");
 
             long hash1 = container.hashCopiedFiles().getValue();
 
             subDir.toFile().setWritable(true);
+            assumeThat(subDir.toFile()).canWrite();
 
             assertThat(container.hashCopiedFiles().getValue()).isNotEqualTo(hash1);
         }

File: core/src/main/java/org/testcontainers/LazyDockerClient.java
Patch:
@@ -1,9 +1,10 @@
-package org.testcontainers.containers;
+package org.testcontainers;
 
 import com.github.dockerjava.api.DockerClient;
+import lombok.ToString;
 import lombok.experimental.Delegate;
-import org.testcontainers.DockerClientFactory;
 
+@ToString
 enum LazyDockerClient implements DockerClient {
 
     INSTANCE;

File: core/src/test/java/org/testcontainers/junit/NonExistentImagePullTest.java
Patch:
@@ -16,7 +16,7 @@ public void pullingNonExistentImageFailsGracefully() {
 
         assertThrows("Pulling a nonexistent container will cause an exception to be thrown",
                 ContainerFetchException.class, () -> {
-                    return new GenericContainer("richnorth/nonexistent:latest");
+                    new GenericContainer("richnorth/nonexistent:latest").getDockerImageName();
                 });
     }
 }

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public String getVncRecordedContainerImage() {
     }
 
     public String getDockerComposeContainerImage() {
-        return (String) properties.getOrDefault("compose.container.image", "docker/compose:1.8.0");
+        return (String) properties.getOrDefault("compose.container.image", "docker/compose:1.24.1");
     }
 
     public String getTinyImage() {

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -83,12 +83,12 @@ protected void doStart() {
     protected void containerIsStarting(InspectContainerResponse containerInfo, boolean reused) {
         super.containerIsStarting(containerInfo, reused);
 
+        port = getMappedPort(KAFKA_PORT);
+
         if (reused) {
             return;
         }
 
-        port = getMappedPort(KAFKA_PORT);
-
         final String zookeeperConnect;
         if (externalZookeeperConnect != null) {
             zookeeperConnect = externalZookeeperConnect;

File: core/src/main/java/org/testcontainers/lifecycle/Startables.java
Patch:
@@ -60,6 +60,7 @@ public CompletableFuture<Void> deepStart(Stream<Startable> startables) {
      */
     private CompletableFuture<Void> deepStart(Map<Startable, CompletableFuture<Void>> started, Stream<Startable> startables) {
         CompletableFuture[] futures = startables
+            .sequential()
             .map(it -> {
                 // avoid a recursive update in `computeIfAbsent`
                 Map<Startable, CompletableFuture<Void>> subStarted = new HashMap<>(started);

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -616,6 +616,7 @@ private void applyConfiguration(CreateContainerCmd createCommand) {
         }
 
         String[] envArray = env.entrySet().stream()
+                .filter(it -> it.getValue() != null)
                 .map(it -> it.getKey() + "=" + it.getValue())
                 .toArray(String[]::new);
         createCommand.withEnv(envArray);

File: core/src/main/java/org/testcontainers/utility/DockerImageName.java
Patch:
@@ -61,13 +61,13 @@ public DockerImageName(String name, String tag) {
             registry = "";
             remoteName = name;
         } else {
-            registry = name.substring(0, slashIndex - 1);
+            registry = name.substring(0, slashIndex);
             remoteName = name.substring(slashIndex + 1);
         }
 
         if (tag.startsWith("sha256:")) {
             repo = remoteName;
-            versioning = new Sha256Versioning(tag);
+            versioning = new Sha256Versioning(tag.replace("sha256:", ""));
         } else {
             repo = remoteName;
             versioning = new TagVersioning(tag);

File: core/src/main/java/org/testcontainers/utility/MountableFile.java
Patch:
@@ -167,7 +167,9 @@ private static String unencodeResourceURIToFilePath(@NotNull final String resour
     private String resolvePath() {
         String result = getResourcePath();
 
+        // Special case for Windows
         if (SystemUtils.IS_OS_WINDOWS && result.startsWith("/")) {
+            // Remove leading /
             result = result.substring(1);
         }
 

File: modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java
Patch:
@@ -134,7 +134,7 @@ public enum Service {
         CLOUDWATCH("cloudwatch", 4582),
         SSM("ssm", 4583),
         SECRETSMANAGER("secretsmanager", 4584),
-        STEPFUNCTIONS("stepsfunctions", 4585),
+        STEPFUNCTIONS("stepfunctions", 4585),
         CLOUDWATCHLOGS("cloudwatchlogs", 4586),
         STS("sts", 4592),
         IAM("iam", 4593);

File: modules/rabbitmq/src/main/java/org/testcontainers/containers/RabbitMQContainer.java
Patch:
@@ -359,9 +359,9 @@ public RabbitMQContainer withRabbitMQConfig(MountableFile rabbitMQConf) {
     /**
      * Overwrites the default RabbitMQ configuration file with the supplied one.
      *
-     * This function doesn't work with RabbitMQ < 3.7.
+     * This function doesn't work with RabbitMQ &lt; 3.7.
      *
-     * This function and the Sysctl format is recommended for RabbitMQ >= 3.7
+     * This function and the Sysctl format is recommended for RabbitMQ &gt;= 3.7
      *
      * @param rabbitMQConf The rabbitmq.config file to use (in sysctl format, don't forget empty line in the end of file)
      * @return This container.

File: modules/rabbitmq/src/main/java/org/testcontainers/containers/RabbitMQContainer.java
Patch:
@@ -215,8 +215,8 @@ public RabbitMQContainer withBinding(String source, String destination, Map<Stri
         values.add(asList("rabbitmqadmin", "declare", "binding",
                 "source=" + source,
                 "destination=" + destination,
-                "routing-key=" + routingKey,
-                "destination-type=" + destinationType,
+                "routing_key=" + routingKey,
+                "destination_type=" + destinationType,
                 "arguments=" + toJson(arguments)));
         return self();
     }

File: modules/rabbitmq/src/main/java/org/testcontainers/containers/RabbitMQContainer.java
Patch:
@@ -49,7 +49,7 @@ public RabbitMQContainer() {
     /**
      * Creates a Testcontainer using a specific docker image.
      *
-     * @param tag The docker image to use.
+     * @param image The docker image to use.
      */
     public RabbitMQContainer(String image) {
         super(image);

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -20,7 +20,7 @@ public class KafkaContainer extends GenericContainer<KafkaContainer> {
     protected SocatContainer proxy;
 
     public KafkaContainer() {
-        this("4.0.0");
+        this("5.2.1");
     }
 
     public KafkaContainer(String confluentPlatformVersion) {

File: core/src/main/java/org/testcontainers/utility/RegistryAuthLocator.java
Patch:
@@ -154,7 +154,7 @@ private AuthConfig findExistingAuthConfig(final JsonNode config, final String re
                 !isBlank(deserializedAuth.getAuth())) {
 
                 final String rawAuth = new String(Base64.getDecoder().decode(deserializedAuth.getAuth()));
-                final String[] splitRawAuth = rawAuth.split(":");
+                final String[] splitRawAuth = rawAuth.split(":", 2);
 
                 if (splitRawAuth.length == 2) {
                     deserializedAuth.withUsername(splitRawAuth[0]);

File: modules/jdbc-test/src/test/java/org/testcontainers/jdbc/JDBCDriverTest.java
Patch:
@@ -198,8 +198,8 @@ private HikariDataSource verifyCharacterSet(String jdbcUrl) throws SQLException
         HikariDataSource dataSource = getDataSource(jdbcUrl, 1);
         boolean result = new QueryRunner(dataSource).query("SHOW VARIABLES LIKE 'character\\_set\\_connection'", rs -> {
             rs.next();
-            String resultSetInt = rs.getString(2);
-            assertEquals("Passing query parameters to set DB connection encoding is successful", "utf8", resultSetInt);
+            String resultSetString = rs.getString(2);
+            assertTrue("Passing query parameters to set DB connection encoding is successful", resultSetString.startsWith("utf8"));
             return true;
         });
 

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -638,7 +638,7 @@ public void invoke() {
         try {
             new ProcessExecutor().command(command)
                     .redirectOutput(Slf4jStream.of(logger()).asInfo())
-                    .redirectError(Slf4jStream.of(logger()).asError())
+                    .redirectError(Slf4jStream.of(logger()).asInfo()) // docker-compose will log pull information to stderr
                     .environment(environment)
                     .directory(pwd)
                     .exitValueNormal()

File: modules/database-commons/src/main/java/org/testcontainers/ext/ScriptUtils.java
Patch:
@@ -206,7 +206,7 @@ else if (script.startsWith(blockCommentStartDelimiter, i)) {
 							blockCommentEndDelimiter), resource);
 					}
 				}
-				else if (c == ' ' || c == '\n' || c == '\t') {
+				else if (c == ' ' || c == '\n' || c == '\t' || c == '\r') {
 					// avoid multiple adjacent whitespace characters
 					if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {
 						c = ' ';

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -55,7 +55,7 @@ public String getRyukImage() {
     }
 
     public String getSSHdImage() {
-        return (String) properties.getOrDefault("sshd.container.image", "quay.io/testcontainers/sshd@sha256:18aa929c653284189fc9cefa45b731021857b6047a0a1757e909f958f258f088");
+        return (String) properties.getOrDefault("sshd.container.image", "quay.io/testcontainers/sshd:1.0.0");
     }
 
     public Integer getRyukTimeout() {

File: modules/toxiproxy/src/main/java/org/testcontainers/containers/ToxiproxyContainer.java
Patch:
@@ -86,7 +86,7 @@ public ContainerProxy getProxy(String hostname, int port) {
                     throw new IllegalStateException("Maximum number of proxies exceeded");
                 }
 
-                final Proxy proxy = client.createProxy("name", "0.0.0.0:" + toxiPort, upstream);
+                final Proxy proxy = client.createProxy(upstream, "0.0.0.0:" + toxiPort, upstream);
                 return new ContainerProxy(proxy, getContainerIpAddress(), getMappedPort(toxiPort));
             } catch (IOException e) {
                 throw new RuntimeException("Proxy could not be created", e);

File: modules/jdbc-test/src/test/java/org/testcontainers/jdbc/JDBCDriverTest.java
Patch:
@@ -46,6 +46,7 @@ public static Iterable<Object[]> data() {
                 {"jdbc:tc:mysql://hostname/databasename?user=someuser&TC_INITSCRIPT=somepath/init_mysql.sql", EnumSet.of(Options.ScriptedSchema, Options.JDBCParams)},
                 {"jdbc:tc:mysql:5.5.43://hostname/databasename?user=someuser&TC_INITFUNCTION=org.testcontainers.jdbc.JDBCDriverTest::sampleInitFunction", EnumSet.of(Options.ScriptedSchema, Options.JDBCParams)},
                 {"jdbc:tc:mysql:5.5.43://hostname/databasename?user=someuser&password=somepwd&TC_INITSCRIPT=somepath/init_mysql.sql", EnumSet.of(Options.ScriptedSchema, Options.JDBCParams)},
+                {"jdbc:tc:mysql:5.5.43://hostname/databasename?user=someuser&password=somepwd&TC_INITSCRIPT=file:sql/init_mysql.sql", EnumSet.of(Options.ScriptedSchema, Options.JDBCParams)},
                 {"jdbc:tc:mysql:5.5.43://hostname/databasename?user=someuser&password=somepwd&TC_INITFUNCTION=org.testcontainers.jdbc.JDBCDriverTest::sampleInitFunction", EnumSet.of(Options.ScriptedSchema, Options.JDBCParams)},
                 {"jdbc:tc:mysql:5.5.43://hostname/databasename?TC_INITSCRIPT=somepath/init_unicode_mysql.sql&useUnicode=yes&characterEncoding=utf8", EnumSet.of(Options.CharacterSet)},
                 {"jdbc:tc:mysql:5.5.43://hostname/databasename", EnumSet.noneOf(Options.class)},

File: modules/postgresql/src/main/java/org/testcontainers/containers/PostgreSQLContainer.java
Patch:
@@ -22,6 +22,8 @@ public class PostgreSQLContainer<SELF extends PostgreSQLContainer<SELF>> extends
     private String username = "test";
     private String password = "test";
 
+    private static final String FSYNC_OFF_OPTION = "fsync=off";
+
     public PostgreSQLContainer() {
         this(IMAGE + ":" + DEFAULT_TAG);
     }
@@ -47,7 +49,7 @@ protected void configure() {
         addEnv("POSTGRES_DB", databaseName);
         addEnv("POSTGRES_USER", username);
         addEnv("POSTGRES_PASSWORD", password);
-        setCommand("postgres");
+        setCommand("postgres", "-c", FSYNC_OFF_OPTION);
     }
 
     @Override

File: docs/examples/src/test/java/generic/CmdModifierTest.java
Patch:
@@ -20,8 +20,8 @@ public class CmdModifierTest {
     // memory {
     @Rule
     public GenericContainer memoryLimitedRedis = new GenericContainer<>("redis:3.0.2")
-            .withCreateContainerCmdModifier(cmd -> cmd.withMemory((long) 4 * 1024 * 1024))
-            .withCreateContainerCmdModifier(cmd -> cmd.withMemorySwap((long) 4 * 1024 * 1024));
+            .withCreateContainerCmdModifier(cmd -> cmd.withMemory((long) 8 * 1024 * 1024))
+            .withCreateContainerCmdModifier(cmd -> cmd.withMemorySwap((long) 12 * 1024 * 1024));
     // }
 
 
@@ -34,6 +34,6 @@ public void testHostnameModified() throws IOException, InterruptedException {
     @Test
     public void testMemoryLimitModified() throws IOException, InterruptedException {
         final Container.ExecResult execResult = memoryLimitedRedis.execInContainer("cat", "/sys/fs/cgroup/memory/memory.limit_in_bytes");
-        assertEquals("4194304", execResult.getStdout().trim());
+        assertEquals("8388608", execResult.getStdout().trim());
     }
 }

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -128,10 +128,9 @@ public DockerClient client() {
 
             VisibleAssertions.info("Checking the system...");
 
-            checkDockerVersion(version.getVersion());
-
             boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();
             if (checksEnabled) {
+                checkDockerVersion(version.getVersion());
                 if (ryukContainerId != null) {
                     checkDiskSpace(client, ryukContainerId);
                 } else {

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public boolean isRyukPrivileged() {
     }
 
     public String getRyukImage() {
-        return (String) properties.getOrDefault("ryuk.container.image", "quay.io/testcontainers/ryuk:0.2.2");
+        return (String) properties.getOrDefault("ryuk.container.image", "quay.io/testcontainers/ryuk:0.2.3");
     }
 
     public String getSSHdImage() {

File: core/src/test/java/org/testcontainers/dockerclient/ImagePullTest.java
Patch:
@@ -22,8 +22,8 @@ public static String[] parameters() {
             "gliderlabs/alpine:3.5",
             "gliderlabs/alpine@sha256:a19aa4a17a525c97e5a90a0c53a9f3329d2dc61b0a14df5447757a865671c085",
             "quay.io/testcontainers/ryuk:latest",
-            "quay.io/testcontainers/ryuk:0.2.2",
-            "quay.io/testcontainers/ryuk@sha256:4b606e54c4bba1af4fd814019d342e4664d51e28d3ba2d18d24406edbefd66da",
+            "quay.io/testcontainers/ryuk:0.2.3",
+            "quay.io/testcontainers/ryuk@sha256:bb5a635cac4bd96c93cc476969ce11dc56436238ec7cd028d0524462f4739dd9",
         };
     }
 

File: modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java
Patch:
@@ -19,7 +19,7 @@
  * @param <S> "SELF" to be used in the <code>withXXX</code> methods.
  * @author Michael J. Simons
  */
-public final class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContainer<S> {
+public class Neo4jContainer<S extends Neo4jContainer<S>> extends GenericContainer<S> {
 
     /**
      * The image defaults to the official Neo4j image: <a href="https://hub.docker.com/_/neo4j/">Neo4j</a>.

File: examples/spring-boot/src/main/java/com/example/DemoApplication.java
Patch:
@@ -2,8 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 
 @SpringBootApplication
+@EnableJpaRepositories
 public class DemoApplication {
 
 	public static void main(String[] args) {

File: modules/mockserver/src/main/java/org/testcontainers/containers/MockServerContainer.java
Patch:
@@ -5,9 +5,9 @@
 @Slf4j
 public class MockServerContainer extends GenericContainer<MockServerContainer> {
 
-    public static final String VERSION = "5.5.0";
+    public static final String VERSION = "5.5.1";
 
-    public static final int PORT = 80;
+    public static final int PORT = 1080;
 
     public MockServerContainer() {
         this(VERSION);

File: modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLServerContainer.java
Patch:
@@ -7,8 +7,8 @@
  */
 public class MSSQLServerContainer<SELF extends MSSQLServerContainer<SELF>> extends JdbcDatabaseContainer<SELF> {
     public static final String NAME = "mssqlserver";
-    public static final String IMAGE = "microsoft/mssql-server-linux";
-    public static final String DEFAULT_TAG = "2017-CU6";
+    public static final String IMAGE = "mcr.microsoft.com/mssql/server";
+    public static final String DEFAULT_TAG = "2017-CU12";
 
     public static final Integer MS_SQL_SERVER_PORT = 1433;
     private String username = "SA";

File: modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java
Patch:
@@ -13,7 +13,7 @@
  * Represents an elasticsearch docker instance which exposes by default port 9200 and 9300 (transport.tcp.port)
  * The docker image is by default fetched from docker.elastic.co/elasticsearch/elasticsearch
  */
-public class ElasticsearchContainer extends GenericContainer {
+public class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
 
     /**
      * Elasticsearch Default HTTP port

File: modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java
Patch:
@@ -46,7 +46,9 @@ public void stopRestClient() throws IOException {
 
     @Test
     public void elasticsearchDefaultTest() throws IOException {
-        try (ElasticsearchContainer container = new ElasticsearchContainer()){
+        try (ElasticsearchContainer container = new ElasticsearchContainer()
+            .withEnv("foo", "bar") // dummy env for compiler checking correct generics usage
+        ){
             container.start();
             Response response = getClient(container).performRequest(new Request("GET", "/"));
             assertThat(response.getStatusLine().getStatusCode(), is(200));

File: modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java
Patch:
@@ -1,6 +1,5 @@
 package org.testcontainers.elasticsearch;
 
-import org.apache.http.HttpHost;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;
 import org.testcontainers.utility.Base58;
@@ -56,7 +55,7 @@ public ElasticsearchContainer(String dockerImageName) {
             .withStartupTimeout(Duration.ofMinutes(2)));
     }
 
-    public HttpHost getHost() {
-        return new HttpHost(getContainerIpAddress(), getMappedPort(ELASTICSEARCH_DEFAULT_PORT));
+    public String getHttpHostAddress() {
+        return getContainerIpAddress() + ":" + getMappedPort(ELASTICSEARCH_DEFAULT_PORT);
     }
 }

File: modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.elasticsearch;
 
 
+import org.apache.http.HttpHost;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.CredentialsProvider;
@@ -90,7 +91,7 @@ private RestClient getClient(ElasticsearchContainer container) {
             credentialsProvider.setCredentials(AuthScope.ANY,
                     new UsernamePasswordCredentials(ELASTICSEARCH_USERNAME, ELASTICSEARCH_PASSWORD));
 
-            client = RestClient.builder(container.getHost())
+            client = RestClient.builder(HttpHost.create(container.getHttpHostAddress()))
                     .setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider))
                     .build();
         }

File: core/src/main/java/org/testcontainers/dockerclient/transport/okhttp/OkHttpInvocationBuilder.java
Patch:
@@ -31,9 +31,9 @@
 import okio.BufferedSource;
 import okio.Okio;
 import okio.Source;
+import org.jetbrains.annotations.Nullable;
 import org.testcontainers.DockerClientFactory;
 
-import javax.annotation.Nullable;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;

File: examples/selenium-container/src/test/java/SeleniumContainerTest.java
Patch:
@@ -30,7 +30,7 @@ public void simplePlainSeleniumTest() {
         searchInput.sendKeys("Rick Astley");
         searchInput.submit();
 
-        WebElement otherPage = driver.findElementByLinkText("Rickrolling");
+        WebElement otherPage = driver.findElementByPartialLinkText("Rickrolling");
         otherPage.click();
 
         boolean expectedTextFound = driver.findElementsByCssSelector("p")

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public String getSocatContainerImage() {
     }
 
     public String getVncRecordedContainerImage() {
-        return (String) properties.getOrDefault("vncrecorder.container.image", "richnorth/vnc-recorder:latest");
+        return (String) properties.getOrDefault("vncrecorder.container.image", "quay.io/testcontainers/vnc-recorder:1.1.0");
     }
 
     public String getDockerComposeContainerImage() {

File: core/src/main/java/org/testcontainers/dockerclient/NpipeSocketClientProviderStrategy.java
Patch:
@@ -7,7 +7,6 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang.SystemUtils;
 import org.jetbrains.annotations.NotNull;
-import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.net.URI;
 
@@ -24,7 +23,7 @@ public class NpipeSocketClientProviderStrategy extends DockerClientProviderStrat
 
     @Override
     protected boolean isApplicable() {
-        return SystemUtils.IS_OS_WINDOWS && TestcontainersConfiguration.getInstance().isNpipeForced();
+        return SystemUtils.IS_OS_WINDOWS;
     }
 
     @Override

File: core/src/jarFileTest/java/org/testcontainers/JarFileShadingTest.java
Patch:
@@ -42,8 +42,8 @@ public void testMetaInf() throws Exception {
         );
 
         assertThatFileList(root.resolve("META-INF").resolve("native")).containsOnly(
-                "liborg-testcontainers-shaded-netty-transport-native-epoll.so",
-                "liborg-testcontainers-shaded-netty-transport-native-kqueue.jnilib"
+                "liborg-testcontainers-shaded-netty_transport_native_epoll_x86_64.so",
+                "liborg-testcontainers-shaded-netty_transport_native_kqueue_x86_64.jnilib"
         );
     }
 

File: core/src/main/java/org/testcontainers/dockerclient/transport/okhttp/UnixSocketFactory.java
Patch:
@@ -1,5 +1,6 @@
 package org.testcontainers.dockerclient.transport.okhttp;
 
+import lombok.EqualsAndHashCode;
 import lombok.SneakyThrows;
 import lombok.Value;
 import org.scalasbt.ipcsocket.UnixDomainSocket;
@@ -15,6 +16,7 @@
 import java.net.SocketAddress;
 
 @Value
+@EqualsAndHashCode(callSuper = false)
 public class UnixSocketFactory extends SocketFactory {
 
     String socketPath;

File: core/src/main/java/org/testcontainers/utility/DockerImageName.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.regex.Pattern;
 
-@EqualsAndHashCode
+@EqualsAndHashCode(exclude = "rawName")
 public final class DockerImageName {
 
     /* Regex patterns used for validation */

File: modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java
Patch:
@@ -180,7 +180,8 @@ public List<Integer> getBoundPortNumbers() {
 
     @Override
     public void stop() {
-        Stream.<Runnable>of(super::stop, proxy::stop, this::stopCluster).parallel().forEach(Runnable::run);
+        stopCluster();
+        Stream.<Runnable>of(super::stop, proxy::stop).parallel().forEach(Runnable::run);
     }
 
     private void stopCluster() {

File: modules/couchbase/src/test/java/org/testcontainers/couchbase/Couchbase5_1Test.java
Patch:
@@ -4,7 +4,7 @@
 
 public class Couchbase5_1Test extends BaseCouchbaseContainerTest {
     @ClassRule
-    public static CouchbaseContainer container = initCouchbaseContainer("couchbase/server:5.1.0");
+    public static CouchbaseContainer container = initCouchbaseContainer("couchbase/server:5.1.1");
 
     @Override
     public CouchbaseContainer getCouchbaseContainer() {

File: modules/couchbase/src/test/java/org/testcontainers/couchbase/Couchbase5_5Test.java
Patch:
@@ -4,7 +4,7 @@
 
 public class Couchbase5_5Test extends BaseCouchbaseContainerTest {
     @ClassRule
-    public static CouchbaseContainer container = initCouchbaseContainer("couchbase/server:5.5.0");
+    public static CouchbaseContainer container = initCouchbaseContainer("couchbase/server:5.5.1");
 
     @Override
     public CouchbaseContainer getCouchbaseContainer() {

File: modules/couchbase/src/test/java/org/testcontainers/couchbase/CouchbaseContainerTest.java
Patch:
@@ -7,7 +7,7 @@ public class CouchbaseContainerTest {
 
     @Test
     public void shouldUseCorrectDockerImage() {
-        CouchbaseContainer couchbaseContainer = new CouchbaseContainer().withBeerSample(true);
+        CouchbaseContainer couchbaseContainer = new CouchbaseContainer().withClusterAdmin("admin", "foobar");
 
         Assert.assertEquals(CouchbaseContainer.DOCKER_IMAGE_NAME + CouchbaseContainer.VERSION,
             couchbaseContainer.getDockerImageName());

File: core/src/test/java/org/testcontainers/junit/CopyFileToContainerTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.IOException;
 
 public class CopyFileToContainerTest {
-    private static String containerPath = "/tmp";
+    private static String containerPath = "/tmp/mappable-resource/";
     private static String fileName = "test-resource.txt";
 
     @Test

File: modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java
Patch:
@@ -88,7 +88,7 @@ private void runInitScriptIfRequired() {
     protected void optionallyMapResourceParameterAsVolume(String pathNameInContainer, String resourceLocation) {
         Optional.ofNullable(resourceLocation)
                 .map(MountableFile::forClasspathResource)
-                .ifPresent(mountableFile -> addFileSystemBind(mountableFile.getResolvedPath(), pathNameInContainer, BindMode.READ_WRITE));
+                .ifPresent(mountableFile -> withCopyFileToContainer(mountableFile, pathNameInContainer));
     }
 
     /**

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -198,7 +198,7 @@ protected void optionallyMapResourceParameterAsVolume(@NotNull String paramName,
 
         if (resourceName != null) {
             final MountableFile mountableFile = MountableFile.forClasspathResource(resourceName);
-            addFileSystemBind(mountableFile.getResolvedPath(), pathNameInContainer, BindMode.READ_ONLY);
+            withCopyFileToContainer(mountableFile, pathNameInContainer);
         }
     }
 

File: core/src/main/java/org/testcontainers/dockerclient/NpipeSocketClientProviderStrategy.java
Patch:
@@ -7,6 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang.SystemUtils;
 import org.jetbrains.annotations.NotNull;
+import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.net.URI;
 
@@ -23,7 +24,7 @@ public class NpipeSocketClientProviderStrategy extends DockerClientProviderStrat
 
     @Override
     protected boolean isApplicable() {
-        return SystemUtils.IS_OS_WINDOWS;
+        return SystemUtils.IS_OS_WINDOWS && TestcontainersConfiguration.getInstance().isNpipeForced();
     }
 
     @Override

File: modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java
Patch:
@@ -206,7 +206,7 @@ public RemoteWebDriver getWebDriver() {
 
     @Override
     public void afterTest(TestDescription description, Optional<Throwable> throwable) {
-        retainRecordingIfNeeded(description.getFilesystemFriendlyName(), throwable.isPresent());
+        retainRecordingIfNeeded(description.getFilesystemFriendlyName(), !throwable.isPresent());
     }
 
     @Override

File: modules/mockserver/src/main/java/org/testcontainers/containers/MockServerContainer.java
Patch:
@@ -3,12 +3,12 @@
 import com.github.dockerjava.api.command.InspectContainerResponse;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
-import org.mockserver.client.server.MockServerClient;
+import org.mockserver.client.MockServerClient;
 
 @Slf4j
 public class MockServerContainer extends GenericContainer<MockServerContainer> {
 
-    public static final String VERSION = "5.3.0";
+    public static final String VERSION = "5.4.1";
 
     public static final int PORT = 80;
 

File: core/src/main/java/org/testcontainers/dockerclient/transport/okhttp/OkHttpInvocationBuilder.java
Patch:
@@ -113,7 +113,7 @@ public <T> void get(TypeReference<T> typeReference, ResultCallback<T> resultCall
     @SneakyThrows
     public InputStream post(Object entity) {
         Request request = requestBuilder
-            .post(RequestBody.create(null, objectMapper.writeValueAsBytes(entity)))
+            .post(RequestBody.create(MediaType.parse("application/json"), objectMapper.writeValueAsBytes(entity)))
             .build();
 
         return execute(request).body().byteStream();

File: modules/jdbc/src/main/java/org/testcontainers/jdbc/ContainerLessJdbcDelegate.java
Patch:
@@ -20,7 +20,7 @@ public class ContainerLessJdbcDelegate extends JdbcDatabaseDelegate {
     private Connection connection;
 
     public ContainerLessJdbcDelegate(Connection connection) {
-        super(null);
+        super(null, "");
         this.connection = connection;
     }
 

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainer.java
Patch:
@@ -39,7 +39,6 @@ protected void configure() {
         addEnv("MYSQL_USER", MARIADB_USER);
         addEnv("MYSQL_PASSWORD", MARIADB_PASSWORD);
         addEnv("MYSQL_ROOT_PASSWORD", MARIADB_PASSWORD);
-        setCommand("mysqld");
         setStartupAttempts(3);
     }
 

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -65,7 +65,7 @@ protected void doStart() {
                 .withTarget(ZOOKEEPER_PORT, networkAlias);
 
         proxy.start();
-        withEnv("KAFKA_ADVERTISED_LISTENERS", "BROKER://" + networkAlias + ":" + KAFKA_PORT +",PLAINTEXT://" + proxy.getContainerIpAddress() + ":" + proxy.getFirstMappedPort());
+        withEnv("KAFKA_ADVERTISED_LISTENERS", "BROKER://" + networkAlias + ":9092" + "," + getBootstrapServers());
 
         if (externalZookeeperConnect != null) {
             withEnv("KAFKA_ZOOKEEPER_CONNECT", externalZookeeperConnect);

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientConfigUtils.java
Patch:
@@ -52,6 +52,7 @@ public static String getDockerHostIpAddress(DockerClientConfig config) {
             case "tcp":
                 return config.getDockerHost().getHost();
             case "unix":
+            case "npipe":
                 if (IN_A_CONTAINER) {
                     return getDefaultGateway().orElse("localhost");
                 }

File: core/src/main/java/org/testcontainers/utility/DockerImageName.java
Patch:
@@ -45,7 +45,7 @@ public DockerImageName(String name) {
             versioning = new TagVersioning(remoteName.split(":")[1]);
         } else {
             repo = remoteName;
-            versioning = null;
+            versioning = new TagVersioning("latest");
         }
     }
 

File: core/src/test/java/org/testcontainers/dockerclient/ImagePullTest.java
Patch:
@@ -16,6 +16,7 @@ public static String[] parameters() {
         return new String[] {
             "alpine:latest",
             "alpine:3.6",
+            "alpine", // omitting the tag should work and default to latest
             "alpine@sha256:8fd4b76819e1e5baac82bd0a3d03abfe3906e034cc5ee32100d12aaaf3956dc7",
             "gliderlabs/alpine:latest",
             "gliderlabs/alpine:3.5",

File: core/src/test/java/org/testcontainers/utility/DockerImageNameTest.java
Patch:
@@ -24,7 +24,6 @@ public void validNames() {
 
     @Test
     public void invalidNames() {
-        testInvalid("myname");
         testInvalid(":latest");
         testInvalid("/myname:latest");
         testInvalid("/myname@sha256:latest");

File: core/src/main/java/org/testcontainers/dockerclient/transport/TestcontainersDockerCmdExecFactory.java
Patch:
@@ -123,7 +123,7 @@ public EventLoopGroup init(Bootstrap bootstrap, DockerClientConfig dockerClientC
             } else if (SystemUtils.IS_OS_MAC_OSX) {
                 return kqueueGroup();
             }
-            throw new RuntimeException("Unspported OS");
+            throw new RuntimeException("Unsupported OS");
         }
 
         public EventLoopGroup epollGroup() {

File: core/src/test/java/org/testcontainers/containers/wait/WaitAllStrategyTest.java
Patch:
@@ -58,12 +58,12 @@ public void appliesOuterTimeout() {
                 .withStartupTimeout(Duration.ofMillis(10));
 
         doAnswer(invocation -> {
-            Uninterruptibles.sleepUninterruptibly(20, TimeUnit.MILLISECONDS);
+            Uninterruptibles.sleepUninterruptibly(10, TimeUnit.SECONDS);
             return null;
         }).when(strategy1).waitUntilReady(eq(container));
 
         assertThrows("The outer strategy timeout applies", TimeoutException.class, () -> {
             underTest.waitUntilReady(container);
         });
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public String getRyukImage() {
     }
 
     public Integer getRyukTimeout() {
-        return (Integer) properties.getOrDefault("ryuk.container.timeout", 30);
+        return Integer.parseInt((String) properties.getOrDefault("ryuk.container.timeout", "30"));
     }
 
     public String getKafkaImage() {

File: core/src/main/java/org/testcontainers/utility/MountableFile.java
Patch:
@@ -148,7 +148,7 @@ private static URL getClasspathResource(@NotNull final String resourcePath, @Not
     private static String unencodeResourceURIToFilePath(@NotNull final String resource) {
         try {
             // Convert any url-encoded characters (e.g. spaces) back into unencoded form
-            return URLDecoder.decode(resource, Charsets.UTF_8.name())
+            return URLDecoder.decode(resource.replaceAll("\\+", "%2B"), Charsets.UTF_8.name())
                     .replaceFirst("jar:", "")
                     .replaceFirst("file:", "")
                     .replaceAll("!.*", "");

File: core/src/test/java/org/testcontainers/junit/wait/strategy/AbstractWaitStrategyTest.java
Patch:
@@ -20,7 +20,7 @@
  */
 public abstract class AbstractWaitStrategyTest<W extends WaitStrategy> {
     static final long WAIT_TIMEOUT_MILLIS = 3000;
-    static final String IMAGE_NAME = "alpine:latest";
+    static final String IMAGE_NAME = "alpine:3.7";
 
     /**
      * Indicates that the WaitStrategy has completed waiting successfully.

File: core/src/test/java/org/testcontainers/junit/wait/strategy/HostPortWaitStrategyTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class HostPortWaitStrategyTest {
 
-    private static final String IMAGE_NAME = "alpine:latest";
+    private static final String IMAGE_NAME = "alpine:3.7";
 
     @ClassRule
     public static GenericContainer container = new GenericContainer(IMAGE_NAME).withExposedPorts()

File: modules/jdbc-test/src/test/java/org/testcontainers/jdbc/DatabaseDriverShutdownTest.java
Patch:
@@ -23,7 +23,7 @@ public static void testCleanup() {
 
     @Test
     public void shouldStopContainerWhenAllConnectionsClosed() throws SQLException {
-        final String jdbcUrl = "jdbc:tc:postgresql://hostname/databasename";
+        final String jdbcUrl = "jdbc:tc:postgresql:9.6.8://hostname/databasename";
 
         getConnectionAndClose(jdbcUrl);
 
@@ -33,7 +33,7 @@ public void shouldStopContainerWhenAllConnectionsClosed() throws SQLException {
 
     @Test
     public void shouldNotStopDaemonContainerWhenAllConnectionsClosed() throws SQLException {
-        final String jdbcUrl = "jdbc:tc:postgresql://hostname/databasename?TC_DAEMON=true";
+        final String jdbcUrl = "jdbc:tc:postgresql:9.6.8://hostname/databasename?TC_DAEMON=true";
 
         getConnectionAndClose(jdbcUrl);
 

File: modules/jdbc-test/src/test/java/org/testcontainers/junit/CustomizablePostgreSQLTest.java
Patch:
@@ -21,7 +21,7 @@ public class CustomizablePostgreSQLTest {
     private static final String PWD = "baz";
 
     @Rule
-    public PostgreSQLContainer postgres = new PostgreSQLContainer("postgres:latest")
+    public PostgreSQLContainer postgres = new PostgreSQLContainer("postgres:9.6.8")
         .withDatabaseName(DB_NAME)
         .withUsername(USER)
         .withPassword(PWD);

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -12,14 +12,16 @@ public class MySQLContainer<SELF extends MySQLContainer<SELF>> extends JdbcDatab
 
     public static final String NAME = "mysql";
     public static final String IMAGE = "mysql";
+    public static final String DEFAULT_TAG = "5.7.22";
+
     private static final String MY_CNF_CONFIG_OVERRIDE_PARAM_NAME = "TC_MY_CNF";
     public static final Integer MYSQL_PORT = 3306;
     private String databaseName = "test";
     private String username = "test";
     private String password = "test";
 
     public MySQLContainer() {
-        super(IMAGE + ":latest");
+        super(IMAGE + ":" + DEFAULT_TAG);
     }
 
     public MySQLContainer(String dockerImageName) {

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -39,6 +39,7 @@
 @Slf4j
 public class DockerClientFactory {
 
+    public static final ThreadGroup TESTCONTAINERS_THREAD_GROUP = new ThreadGroup("testcontainers");
     public static final String TESTCONTAINERS_LABEL = DockerClientFactory.class.getPackage().getName();
     public static final String TESTCONTAINERS_SESSION_ID_LABEL = TESTCONTAINERS_LABEL + ".sessionId";
 

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -321,7 +321,7 @@ protected Path createVolumeDirectory(boolean temporary) {
         Path directory = new File(".tmp-volume-" + System.currentTimeMillis()).toPath();
         PathUtils.mkdirp(directory);
 
-        if (temporary) Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+        if (temporary) Runtime.getRuntime().addShutdownHook(new Thread(DockerClientFactory.TESTCONTAINERS_THREAD_GROUP, () -> {
             PathUtils.recursiveDeleteDir(directory);
         }));
 
@@ -478,7 +478,7 @@ private void applyConfiguration(CreateContainerCmd createCommand) {
 
     private Set<Link> findLinksFromThisContainer(String alias, LinkableContainer linkableContainer) {
         return dockerClient.listContainersCmd()
-                .withStatusFilter("running")
+                .withStatusFilter(Arrays.asList("running"))
                 .exec().stream()
                 .flatMap(container -> Stream.of(container.getNames()))
                 .filter(name -> name.endsWith(linkableContainer.getContainerName()))

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -3,7 +3,6 @@
 import com.github.dockerjava.api.DockerClient;
 import com.github.dockerjava.core.DockerClientBuilder;
 import com.github.dockerjava.core.DockerClientConfig;
-import com.github.dockerjava.netty.NettyDockerCmdExecFactory;
 import com.google.common.base.Throwables;
 import org.apache.commons.io.IOUtils;
 import org.jetbrains.annotations.Nullable;
@@ -13,6 +12,7 @@
 import org.rnorth.ducttape.unreliables.Unreliables;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.testcontainers.dockerclient.transport.TestcontainersDockerCmdExecFactory;
 import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.util.ArrayList;
@@ -166,7 +166,7 @@ public DockerClient getClient() {
     protected DockerClient getClientForConfig(DockerClientConfig config) {
         return DockerClientBuilder
                     .getInstance(config)
-                    .withDockerCmdExecFactory(new NettyDockerCmdExecFactory())
+                    .withDockerCmdExecFactory(new TestcontainersDockerCmdExecFactory())
                     .build();
     }
 

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -39,7 +39,7 @@ public class ImageFromDockerfile extends LazyFuture<String> implements
     private static final Set<String> imagesToDelete = Sets.newConcurrentHashSet();
 
     static {
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+        Runtime.getRuntime().addShutdownHook(new Thread(DockerClientFactory.TESTCONTAINERS_THREAD_GROUP, () -> {
             DockerClient dockerClientForCleaning = DockerClientFactory.instance().client();
             try {
                 for (String dockerImageName : imagesToDelete) {

File: core/src/main/java/org/testcontainers/utility/MountableFile.java
Patch:
@@ -8,6 +8,7 @@
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.lang.SystemUtils;
 import org.jetbrains.annotations.NotNull;
+import org.testcontainers.DockerClientFactory;
 import org.testcontainers.images.builder.Transferable;
 
 import java.io.File;
@@ -280,7 +281,7 @@ private void copyFromJarToLocation(final JarFile jarFile,
     }
 
     private void deleteOnExit(final Path path) {
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> recursiveDeleteDir(path)));
+        Runtime.getRuntime().addShutdownHook(new Thread(DockerClientFactory.TESTCONTAINERS_THREAD_GROUP, () -> recursiveDeleteDir(path)));
     }
 
     /**

File: core/src/main/java/org/testcontainers/utility/ResourceReaper.java
Patch:
@@ -112,6 +112,7 @@ public static String start(String hostIpAddress, DockerClient client, boolean wi
         }
 
         Thread kiraThread = new Thread(
+                DockerClientFactory.TESTCONTAINERS_THREAD_GROUP,
                 () -> {
                     while (true) {
                         int index = 0;
@@ -358,7 +359,7 @@ public void unregisterContainer(String identifier) {
     private void setHook() {
         if (hookIsSet.compareAndSet(false, true)) {
             // If the JVM stops without containers being stopped, try and stop the container.
-            Runtime.getRuntime().addShutdownHook(new Thread(this::performCleanup));
+            Runtime.getRuntime().addShutdownHook(new Thread(DockerClientFactory.TESTCONTAINERS_THREAD_GROUP, this::performCleanup));
         }
     }
 }

File: core/src/main/java/org/testcontainers/containers/output/WaitingConsumer.java
Patch:
@@ -6,14 +6,13 @@
 import java.util.concurrent.LinkedBlockingDeque;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
-import java.util.function.Consumer;
 import java.util.function.Predicate;
 
 /**
  * A consumer for container output that buffers lines in a {@link java.util.concurrent.BlockingDeque} and enables tests
  * to wait for a matching condition.
  */
-public class WaitingConsumer implements Consumer<OutputFrame> {
+public class WaitingConsumer extends BaseConsumer<WaitingConsumer> {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(WaitingConsumer.class);
 

File: core/src/main/java/org/testcontainers/containers/wait/Wait.java
Patch:
@@ -39,8 +39,7 @@ public static HostPortWaitStrategy forListeningPort() {
      */
     public static HttpWaitStrategy forHttp(String path) {
         return new HttpWaitStrategy()
-                .forPath(path)
-                .forStatusCode(HttpURLConnection.HTTP_OK);
+                .forPath(path);
     }
 
     /**

File: core/src/main/java/org/testcontainers/containers/wait/strategy/Wait.java
Patch:
@@ -35,8 +35,7 @@ public static HostPortWaitStrategy forListeningPort() {
      */
     public static HttpWaitStrategy forHttp(String path) {
         return new HttpWaitStrategy()
-                .forPath(path)
-                .forStatusCode(HttpURLConnection.HTTP_OK);
+                .forPath(path);
     }
 
     /**

File: core/src/test/java/org/testcontainers/junit/wait/strategy/LogMessageWaitStrategyTest.java
Patch:
@@ -1,8 +1,8 @@
-package org.testcontainers.junit.wait;
+package org.testcontainers.junit.wait.strategy;
 
 import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
-import org.testcontainers.containers.wait.LogMessageWaitStrategy;
+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 

File: core/src/main/java/org/testcontainers/containers/ContainerState.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.stream.Collectors;
 
 public interface ContainerState {
@@ -127,6 +128,7 @@ default List<Integer> getBoundPortNumbers() {
             .map(PortBinding::parse)
             .map(PortBinding::getBinding)
             .map(Ports.Binding::getHostPortSpec)
+            .filter(Objects::nonNull)
             .map(Integer::valueOf)
             .collect(Collectors.toList());
     }

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -838,7 +838,7 @@ public String getDockerImageName() {
         try {
             return image.get();
         } catch (Exception e) {
-            throw new ContainerFetchException("Can't get Docker image name from " + image, e);
+            throw new ContainerFetchException("Can't get Docker image: " + image, e);
         }
     }
 

File: core/src/main/java/org/testcontainers/images/builder/dockerfile/traits/FromStatementTrait.java
Patch:
@@ -6,7 +6,7 @@
 public interface FromStatementTrait<SELF extends FromStatementTrait<SELF> & DockerfileBuilderTrait<SELF>> {
 
     default SELF from(String dockerImageName) {
-        DockerImageName.validate(dockerImageName);
+        new DockerImageName(dockerImageName).assertValid();
 
         return ((SELF) this).withStatement(new SingleArgumentStatement("FROM", dockerImageName));
     }

File: modules/jdbc-test/src/test/java/org/testcontainers/jdbc/JDBCDriverWithPoolTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.testcontainers.jdbc;
 
+import com.googlecode.junittoolbox.ParallelParameterized;
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import org.apache.commons.dbutils.QueryRunner;
@@ -24,7 +25,7 @@
 /**
  *
  */
-@RunWith(Parameterized.class)
+@RunWith(ParallelParameterized.class)
 public class JDBCDriverWithPoolTest {
 
     public static final String URL = "jdbc:tc:mysql://hostname/databasename?TC_INITFUNCTION=org.testcontainers.jdbc.JDBCDriverWithPoolTest::sampleInitFunction";

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -352,7 +352,7 @@ public String getServiceHost(String serviceName, Integer servicePort) {
      * @return a port that can be used for accessing the service container.
      */
     public Integer getServicePort(String serviceName, Integer servicePort) {
-        return ambassadorContainer.getMappedPort(ambassadorPortMappings.get(serviceName).get(servicePort));
+        return ambassadorContainer.getMappedPort(ambassadorPortMappings.get(getServiceInstanceName(serviceName)).get(servicePort));
     }
 
     public SELF withScaledService(String serviceBaseName, int numInstances) {

File: core/src/main/java/org/testcontainers/containers/ExecInContainerPattern.java
Patch:
@@ -25,7 +25,7 @@ public class ExecInContainerPattern {
     /**
      * Run a command inside a running container, as though using "docker exec", and interpreting
      * the output as UTF8.
-     * <p/>
+     * <p></p>
      * @param containerInfo the container info
      * @param command the command to execute
      * @see #execInContainer(InspectContainerResponse, Charset, String...)

File: core/src/main/java/org/testcontainers/containers/wait/WaitAllStrategy.java
Patch:
@@ -10,7 +10,10 @@
 
 /**
  * Wait strategy that waits for a number of other strategies to pass in series.
+ *
+ * @deprecated Use {@link org.testcontainers.containers.wait.strategy.WaitAllStrategy}
  */
+@Deprecated
 public class WaitAllStrategy implements WaitStrategy {
 
     private final List<WaitStrategy> strategies = new ArrayList<>();

File: core/src/main/java/org/testcontainers/containers/wait/internal/ExternalPortListeningCheck.java
Patch:
@@ -1,7 +1,7 @@
 package org.testcontainers.containers.wait.internal;
 
 import lombok.RequiredArgsConstructor;
-import org.testcontainers.containers.Container;
+import org.testcontainers.containers.ContainerState;
 
 import java.io.IOException;
 import java.net.Socket;
@@ -13,12 +13,12 @@
  */
 @RequiredArgsConstructor
 public class ExternalPortListeningCheck implements Callable<Boolean> {
-    private final Container<?> container;
+    private final ContainerState containerState;
     private final Set<Integer> externalLivenessCheckPorts;
 
     @Override
     public Boolean call() {
-        String address = container.getContainerIpAddress();
+        String address = containerState.getContainerIpAddress();
 
         for (Integer externalPort : externalLivenessCheckPorts) {
             try {

File: modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java
Patch:
@@ -113,4 +113,4 @@ protected void testKafkaFunctionality(String bootstrapServers) throws Exception
         }
     }
 
-}
\ No newline at end of file
+}

File: modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java
Patch:
@@ -20,7 +20,7 @@ public static class ChromeThatRecordsAllTests {
         @Rule
         public BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()
                 .withDesiredCapabilities(DesiredCapabilities.chrome())
-                .withRecordingMode(RECORD_ALL, new File("./target/"))
+                .withRecordingMode(RECORD_ALL, new File("./build/"))
                 .withRecordingFileFactory(new DefaultRecordingFileFactory());
 
         @Test

File: modules/selenium/src/test/java/org/testcontainers/junit/FlakyContainerCreationTest.java
Patch:
@@ -18,7 +18,7 @@ public void testCreationOfManyContainers() {
         for (int i = 0; i < 50; i++) {
             BrowserWebDriverContainer container = new BrowserWebDriverContainer()
                     .withDesiredCapabilities(DesiredCapabilities.chrome())
-                    .withRecordingMode(BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING, new File("target"));
+                    .withRecordingMode(BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING, new File("build"));
 
             container.start();
             RemoteWebDriver driver = container.getWebDriver();

File: modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.containers;
 
 import org.testcontainers.utility.Base58;
+import org.testcontainers.utility.TestcontainersConfiguration;
 
 import java.util.stream.Stream;
 
@@ -23,7 +24,7 @@ public KafkaContainer() {
     }
 
     public KafkaContainer(String confluentPlatformVersion) {
-        super("confluentinc/cp-kafka:" + confluentPlatformVersion);
+        super(TestcontainersConfiguration.getInstance().getKafkaImage() + ":" + confluentPlatformVersion);
 
         withNetwork(Network.newNetwork());
         String networkAlias = "kafka-" + Base58.randomString(6);

File: modules/jdbc-test/src/test/java/org/testcontainers/jdbc/JDBCDriverTest.java
Patch:
@@ -41,6 +41,7 @@ public static Iterable<Object[]> data() {
                         {"jdbc:tc:mysql://hostname/databasename?TC_INITFUNCTION=org.testcontainers.jdbc.JDBCDriverTest::sampleInitFunction", true, false, false},
                         {"jdbc:tc:mysql://hostname/databasename?useUnicode=yes&characterEncoding=utf8", false, true, false},
                         {"jdbc:tc:mysql://hostname/databasename", false, false, false},
+                        {"jdbc:tc:mysql://hostname/databasename?useSSL=false", false, false, false},
                         {"jdbc:tc:postgresql://hostname/databasename", false, false, false},
                         {"jdbc:tc:mysql:5.6://hostname/databasename?TC_MY_CNF=somepath/mysql_conf_override", false, false, true},
                 });

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -400,7 +400,7 @@ public ContainerisedDockerCompose(List<File> composeFiles, String identifier) {
         setWorkingDirectory(containerPwd);
 
         String dockerConfigPath = determineDockerConfigPath();
-        if (dockerConfigPath != null && dockerConfigPath.isEmpty()) {
+        if (dockerConfigPath != null && !dockerConfigPath.isEmpty()) {
             addFileSystemBind(dockerConfigPath, DOCKER_CONFIG_FILE, READ_ONLY);
         }
     }

File: core/src/main/java/org/testcontainers/containers/AmbassadorContainer.java
Patch:
@@ -15,9 +15,12 @@
  * An ambassador container is used as a TCP proxy, enabling any TCP port of another linked container to be exposed
  * publicly, even if that container does not make the port public itself. The <code>richnorth/ambassador:latest</code>
  * container is used (based on HAProxy).
+ *
+ * @deprecated use {@link SocatContainer}
  */
 @EqualsAndHashCode(callSuper = false)
 @Data
+@Deprecated
 public class AmbassadorContainer<SELF extends AmbassadorContainer<SELF>> extends GenericContainer<SELF> {
 
     private final String otherContainerName;

File: core/src/test/java/org/testcontainers/junit/GenericContainerRuleTest.java
Patch:
@@ -81,9 +81,10 @@ public static void setupContent() throws FileNotFoundException {
      * dirty way for testing.
      */
     @ClassRule
-    public static GenericContainer alpineEnvVar = new GenericContainer("alpine:3.2")
+    public static GenericContainer alpineEnvVar = new GenericContainer<>("alpine:3.2")
             .withExposedPorts(80)
-            .withEnv("MAGIC_NUMBER", "42")
+            .withEnv("MAGIC_NUMBER", "4")
+            .withEnv("MAGIC_NUMBER", oldValue -> oldValue.orElse("") + "2")
             .withCommand("/bin/sh", "-c", "while true; do echo \"$MAGIC_NUMBER\" | nc -l -p 80; done");
 
     /**

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -41,7 +41,6 @@ protected void configure() {
         addEnv("MYSQL_USER", username);
         addEnv("MYSQL_PASSWORD", password);
         addEnv("MYSQL_ROOT_PASSWORD", "test");
-        setCommand("mysqld");
         setStartupAttempts(3);
     }
 

File: modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java
Patch:
@@ -13,7 +13,7 @@
 public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {
 
     @Rule
-    public BrowserWebDriverContainer firefox = new BrowserWebDriverContainer("selenium/standalone-firefox-debug:2.53.1-beryllium")
+    public BrowserWebDriverContainer firefox = new BrowserWebDriverContainer("selenium/standalone-firefox:2.53.1-beryllium")
             .withDesiredCapabilities(DesiredCapabilities.firefox());
 
     @Test

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -20,7 +20,6 @@ public class MySQLContainer<SELF extends MySQLContainer<SELF>> extends JdbcDatab
 
     public MySQLContainer() {
         super(IMAGE + ":latest");
-        setCommand("mysqld");
     }
 
     public MySQLContainer(String dockerImageName) {

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -20,6 +20,7 @@ public class MySQLContainer<SELF extends MySQLContainer<SELF>> extends JdbcDatab
 
     public MySQLContainer() {
         super(IMAGE + ":latest");
+        setCommand("mysqld");
     }
 
     public MySQLContainer(String dockerImageName) {
@@ -41,7 +42,6 @@ protected void configure() {
         addEnv("MYSQL_USER", username);
         addEnv("MYSQL_PASSWORD", password);
         addEnv("MYSQL_ROOT_PASSWORD", "test");
-        setCommand("mysqld");
         setStartupAttempts(3);
     }
 

File: modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java
Patch:
@@ -13,7 +13,7 @@
 public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {
 
     @Rule
-    public BrowserWebDriverContainer firefox = new BrowserWebDriverContainer("selenium/standalone-firefox-debug:2.53.1-beryllium")
+    public BrowserWebDriverContainer firefox = new BrowserWebDriverContainer("selenium/standalone-firefox:2.53.1-beryllium")
             .withDesiredCapabilities(DesiredCapabilities.firefox());
 
     @Test

File: core/src/main/java/org/testcontainers/containers/AmbassadorContainer.java
Patch:
@@ -15,9 +15,12 @@
  * An ambassador container is used as a TCP proxy, enabling any TCP port of another linked container to be exposed
  * publicly, even if that container does not make the port public itself. The <code>richnorth/ambassador:latest</code>
  * container is used (based on HAProxy).
+ *
+ * @deprecated use {@link SocatContainer}
  */
 @EqualsAndHashCode(callSuper = false)
 @Data
+@Deprecated
 public class AmbassadorContainer<SELF extends AmbassadorContainer<SELF>> extends GenericContainer<SELF> {
 
     private final String otherContainerName;

File: core/src/main/java/org/testcontainers/containers/Network.java
Patch:
@@ -52,7 +52,7 @@ class NetworkImpl extends ExternalResource implements Network {
         private final AtomicBoolean initialized = new AtomicBoolean();
 
         @Override
-        public String getId() {
+        public synchronized String getId() {
             if (initialized.compareAndSet(false, true)) {
                 id = create();
             }

File: core/src/main/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheck.java
Patch:
@@ -29,7 +29,7 @@ public Boolean call() {
 
     private void tryPort(Integer internalPort) {
         String[][] commands = {
-                {"/bin/sh", "-c", format("cat /proc/net/tcp | awk '{print $2}' | grep :%x && echo %s", internalPort, SUCCESS_MARKER)},
+                {"/bin/sh", "-c", format("cat /proc/net/tcp | awk '{print $2}' | grep -i :%x && echo %s", internalPort, SUCCESS_MARKER)},
                 {"/bin/sh", "-c", format("nc -vz -w 1 localhost %d && echo %s", internalPort, SUCCESS_MARKER)},
                 {"/bin/bash", "-c", format("</dev/tcp/localhost/%d && echo %s", internalPort, SUCCESS_MARKER)}
         };

File: core/src/main/java/org/testcontainers/images/builder/traits/ClasspathTrait.java
Patch:
@@ -13,6 +13,6 @@ public interface ClasspathTrait<SELF extends ClasspathTrait<SELF> & BuildContext
     default SELF withFileFromClasspath(String path, String resourcePath) {
         final MountableFile mountableFile = MountableFile.forClasspathResource(resourcePath);
 
-        return ((SELF) this).withFileFromPath(path, Paths.get(mountableFile.getFilesystemPath()));
+        return ((SELF) this).withFileFromPath(path, Paths.get(mountableFile.getResolvedPath()));
     }
 }

File: core/src/test/java/org/testcontainers/utility/MountableFileTest.java
Patch:
@@ -108,7 +108,7 @@ private Path createTempDir() throws IOException {
     }
 
     private void performChecks(final MountableFile mountableFile) {
-        final String mountablePath = mountableFile.getFilesystemPath();
+        final String mountablePath = mountableFile.getResolvedPath();
         assertTrue("The filesystem path '" + mountablePath + "' can be found", new File(mountablePath).exists());
         assertFalse("The filesystem path '" + mountablePath + "' does not contain any URL escaping", mountablePath.contains("%20"));
     }

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -149,9 +149,6 @@ protected void optionallyMapResourceParameterAsVolume(@NotNull String paramName,
         }
     }
 
-    @Override
-    protected abstract Integer getLivenessCheckPort();
-
     public void setParameters(Map<String, String> parameters) {
         this.parameters = parameters;
     }

File: modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Test;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.testcontainers.containers.BrowserWebDriverContainer;
+import org.testcontainers.containers.DefaultRecordingFileFactory;
 
 import java.io.File;
 
@@ -17,7 +18,8 @@ public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContaine
     @Rule
     public BrowserWebDriverContainer chromeThatRecordsAllTests = new BrowserWebDriverContainer()
             .withDesiredCapabilities(DesiredCapabilities.chrome())
-            .withRecordingMode(RECORD_ALL, new File("./target/"));
+            .withRecordingMode(RECORD_ALL, new File("./target/"))
+            .withRecordingFileFactory(new DefaultRecordingFileFactory());
 
     @Rule
     public BrowserWebDriverContainer chromeThatRecordsFailingTests = new BrowserWebDriverContainer()

File: core/src/test/java/org/testcontainers/junit/GenericContainerRuleTest.java
Patch:
@@ -147,7 +147,7 @@ public static void setupContent() throws FileNotFoundException {
 
     @Test
     public void testIsRunning() {
-        try (GenericContainer container = new GenericContainer()) {
+        try (GenericContainer container = new GenericContainer().withCommand("top")) {
             assertFalse("Container is not started and not running", container.isRunning());
             container.start();
             assertTrue("Container is started and running", container.isRunning());

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -142,7 +142,7 @@ public boolean matches(Object o) {
 
             @Override
             public void describeTo(Description description) {
-                description.appendText("is newer than 1.6.0");
+                description.appendText("should be at least 1.6.0");
             }
         });
     }
@@ -162,7 +162,7 @@ private void checkDiskSpace(DockerClient dockerClient, String id) {
         DiskSpaceUsage df = parseAvailableDiskSpace(outputStream.toString());
 
         VisibleAssertions.assertTrue(
-                "Docker environment has more than 2GB free",
+                "Docker environment should have more than 2GB free disk space",
                 df.availableMB.map(it -> it >= 2048).orElse(true)
         );
     }
@@ -187,7 +187,7 @@ private void checkExposedPort(String hostIpAddress, DockerClient dockerClient, S
         } catch (IOException e) {
             response = e.getMessage();
         }
-        VisibleAssertions.assertEquals("Exposed port is accessible", "hello", response);
+        VisibleAssertions.assertEquals("A port exposed by a docker container should be accessible", "hello", response);
     }
 
     /**

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -9,6 +9,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.Uninterruptibles;
 import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.SystemUtils;
 import org.junit.runner.Description;
 import org.rnorth.ducttape.ratelimits.RateLimiter;
 import org.rnorth.ducttape.ratelimits.RateLimiterBuilder;
@@ -464,7 +465,7 @@ class LocalDockerCompose implements DockerCompose {
     /**
      * Executable name for Docker Compose.
      */
-    private static final String COMPOSE_EXECUTABLE = "docker-compose";
+    private static final String COMPOSE_EXECUTABLE = SystemUtils.IS_OS_WINDOWS ? "docker-compose.exe" : "docker-compose";
 
     private final List<File> composeFiles;
     private final String identifier;

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -396,7 +396,7 @@ default void validateFileList(List<File> composeFiles) {
 class ContainerisedDockerCompose extends GenericContainer<ContainerisedDockerCompose> implements DockerCompose {
     public ContainerisedDockerCompose(List<File> composeFiles, String identifier) {
 
-        super("docker/compose:1.8.0");
+        super(TestcontainersConfiguration.getInstance().getDockerComposeContainerImage());
         validateFileList(composeFiles);
 
         addEnv(ENV_PROJECT_NAME, identifier);

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -723,7 +723,7 @@ public String getIpAddress() {
     @Override
     public Boolean isRunning() {
         try {
-            return dockerClient.inspectContainerCmd(containerId).exec().getState().getRunning();
+            return containerId != null && dockerClient.inspectContainerCmd(containerId).exec().getState().getRunning();
         } catch (DockerException e) {
             return false;
         }

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -50,6 +50,7 @@ public class DockerClientFactory {
     private static final List<DockerClientProviderStrategy> CONFIGURATION_STRATEGIES =
             asList(new EnvironmentAndSystemPropertyClientProviderStrategy(),
                     new UnixSocketClientProviderStrategy(),
+                    new ProxiedUnixSocketClientProviderStrategy(),
                     new DockerMachineClientProviderStrategy(),
                     new WindowsClientProviderStrategy());
     private String activeApiVersion;

File: core/src/main/java/org/testcontainers/containers/wait/HostPortWaitStrategy.java
Patch:
@@ -1,6 +1,7 @@
 package org.testcontainers.containers.wait;
 
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang.SystemUtils;
 import org.rnorth.ducttape.TimeoutException;
 import org.rnorth.ducttape.unreliables.Unreliables;
 import org.testcontainers.DockerClientFactory;
@@ -93,8 +94,8 @@ protected void waitUntilReady() {
 
     private boolean shouldCheckWithCommand() {
         // Special case for Docker for Mac, see #160
-        if(!DockerClientFactory.instance().isUsing(DockerMachineClientProviderStrategy.class)
-                && System.getProperty("os.name").toLowerCase().contains("mac")) {
+        if (! DockerClientFactory.instance().isUsing(DockerMachineClientProviderStrategy.class) &&
+                SystemUtils.IS_OS_MAC_OSX) {
             return true;
         }
 

File: core/src/main/java/org/testcontainers/dockerclient/EnvironmentAndSystemPropertyClientProviderStrategy.java
Patch:
@@ -12,7 +12,7 @@
 @Slf4j
 public class EnvironmentAndSystemPropertyClientProviderStrategy extends DockerClientProviderStrategy {
 
-    public static final int PRIORITY = UnixSocketClientProviderStrategy.PRIORITY - 10;
+    public static final int PRIORITY = 100;
 
     private static final String PING_TIMEOUT_DEFAULT = "10";
     private static final String PING_TIMEOUT_PROPERTY_NAME = "testcontainers.environmentprovider.timeout";

File: shade-test/jar-file/src/test/java/org/testcontainers/JarFileShadingTest.java
Patch:
@@ -1,7 +1,9 @@
 package org.testcontainers;
 
 import org.assertj.core.api.ListAssert;
-import org.junit.*;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 import java.io.IOException;
 import java.net.URI;

File: modules/jdbc/src/main/java/org/testcontainers/jdbc/ext/ScriptUtils.java
Patch:
@@ -246,7 +246,7 @@ public static void executeSqlScript(Connection connection, String scriptPath, St
 
 		try {
 			if (LOGGER.isInfoEnabled()) {
-				LOGGER.info("Executing SQL script from " + script);
+				LOGGER.info("Executing SQL script from " + scriptPath);
 			}
 
 			long startTime = System.currentTimeMillis();

File: core/src/main/java/org/testcontainers/containers/Network.java
Patch:
@@ -20,7 +20,7 @@ public interface Network extends AutoCloseable, TestRule {
 
     @Override
     default void close() {
-        ResourceReaper.instance().removeNetworks(getId());
+        ResourceReaper.instance().removeNetworkById(getId());
     }
 
     static Network newNetwork() {
@@ -66,7 +66,7 @@ private String create() {
             }
 
             String id = createNetworkCmd.exec().getId();
-            ResourceReaper.instance().registerNetworkForCleanup(id);
+            ResourceReaper.instance().registerNetworkIdForCleanup(id);
             return id;
         }
 

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -176,7 +176,7 @@ private void registerContainersForShutdown() {
             // Compose can define their own networks as well; ensure these are cleaned up
             dockerClient.listNetworksCmd().exec().forEach(network -> {
                 if (network.getName().contains(identifier)) {
-                    ResourceReaper.instance().registerNetworkForCleanup(network.getName());
+                    ResourceReaper.instance().registerNetworkForCleanup(network.getId());
                 }
             });
 

File: core/src/main/java/org/testcontainers/containers/Network.java
Patch:
@@ -48,8 +48,6 @@ class NetworkImpl extends ExternalResource implements Network {
         private final String id = create();
 
         private String create() {
-            ResourceReaper.instance().registerNetworkForCleanup(name);
-
             CreateNetworkCmd createNetworkCmd = DockerClientFactory.instance().client().createNetworkCmd();
 
             createNetworkCmd.withName(name);
@@ -67,7 +65,9 @@ private String create() {
                 consumer.accept(createNetworkCmd);
             }
 
-            return createNetworkCmd.exec().getId();
+            String id = createNetworkCmd.exec().getId();
+            ResourceReaper.instance().registerNetworkForCleanup(id);
+            return id;
         }
 
         @Override

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -3,7 +3,6 @@
 import com.github.dockerjava.api.DockerClient;
 import com.github.dockerjava.core.DockerClientBuilder;
 import com.github.dockerjava.core.DockerClientConfig;
-import com.github.dockerjava.netty.NettyDockerCmdExecFactory;
 import com.google.common.base.Throwables;
 import org.apache.commons.io.IOUtils;
 import org.jetbrains.annotations.Nullable;
@@ -142,7 +141,7 @@ public DockerClient getClient() {
     protected DockerClient getClientForConfig(DockerClientConfig config) {
         return DockerClientBuilder
                     .getInstance(config)
-                    .withDockerCmdExecFactory(new NettyDockerCmdExecFactory())
+                    .withDockerCmdExecFactory(new TestcontainersDockerCmdExecFactory())
                     .build();
     }
 

File: core/src/main/java/org/testcontainers/utility/MountableFile.java
Patch:
@@ -267,7 +267,7 @@ private int getUnixFileMode(final String pathAsString) {
         final Path path = Paths.get(pathAsString);
         try {
             return (int) Files.getAttribute(path, "unix:mode");
-        } catch (IOException e) {
+        } catch (IOException | UnsupportedOperationException e) {
             // fallback for non-posix environments
             int mode = DEFAULT_FILE_MODE;
             if (Files.isDirectory(path)) {

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -429,6 +429,8 @@ public void start() {
             Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
         }
         logger().info("Docker Compose has finished running");
+
+        AuditLogger.doComposeLog(this.getCommandParts(), this.getEnv());
     }
 }
 

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -94,7 +94,7 @@ public static DockerClientProviderStrategy getFirstValidStrategy(List<DockerClie
      * @return a usable, tested, Docker client configuration for the host system environment
      */
     public DockerClient getClient() {
-        return client;
+        return new AuditLoggingDockerClient(client);
     }
 
     protected DockerClient getClientForConfig(DockerClientConfig config) {

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -867,8 +867,9 @@ public ExecResult execInContainer(Charset outputCharset, String... command)
      *
      * @param attempts number of attempts
      */
-    public void withStartupAttempts(int attempts) {
+    public SELF withStartupAttempts(int attempts) {
         this.startupAttempts = attempts;
+        return self();
     }
 
     @Override

File: core/src/main/java/org/testcontainers/containers/output/WaitingConsumer.java
Patch:
@@ -86,7 +86,8 @@ private void waitUntil(Predicate<OutputFrame> predicate, long expiry, int times)
                 OutputFrame frame = frames.pollLast(100, TimeUnit.MILLISECONDS);
 
                 if (frame != null) {
-                    LOGGER.debug("{}: {}", frame.getType(), frame.getUtf8String());
+                    final String trimmedFrameText = frame.getUtf8String().replaceFirst("\n$", "");
+                    LOGGER.debug("{}: {}", frame.getType(), trimmedFrameText);
 
                     if (predicate.test(frame)) {
                         numberOfMatches++;

File: core/src/main/java/org/testcontainers/containers/output/OutputFrame.java
Patch:
@@ -30,7 +30,7 @@ public byte[] getBytes() {
     public String getUtf8String() {
 
         if (bytes == null) {
-            return null;
+            return "";
         }
 
         return new String(bytes, Charsets.UTF_8);

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -134,7 +134,7 @@ public class GenericContainer<SELF extends GenericContainer<SELF>>
 
     private List<Consumer<OutputFrame>> logConsumers = new ArrayList<>();
 
-    private final Set<Consumer<CreateContainerCmd>> createContainerCmdMidifiers = new LinkedHashSet<>();
+    private final Set<Consumer<CreateContainerCmd>> createContainerCmdModifiers = new LinkedHashSet<>();
 
     private static final Set<String> AVAILABLE_IMAGE_NAME_CACHE = new HashSet<>();
     private static final RateLimiter DOCKER_CLIENT_RATE_LIMITER = RateLimiterBuilder
@@ -193,7 +193,7 @@ private void tryStart(Profiler profiler) {
             profiler.start("Create container");
             CreateContainerCmd createCommand = dockerClient.createContainerCmd(dockerImageName);
             applyConfiguration(createCommand);
-            createContainerCmdMidifiers.forEach(hook -> hook.accept(createCommand));
+            createContainerCmdModifiers.forEach(hook -> hook.accept(createCommand));
 
             containerId = createCommand.exec().getId();
             ResourceReaper.instance().registerContainerForCleanup(containerId, dockerImageName);
@@ -900,7 +900,7 @@ public void close() {
      * @return this
      */
     public SELF withCreateContainerCmdModifier(Consumer<CreateContainerCmd> modifier) {
-        createContainerCmdMidifiers.add(modifier);
+        createContainerCmdModifiers.add(modifier);
         return self();
     }
 

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -38,8 +38,8 @@ public class DockerClientFactory {
 
     private static final List<DockerClientProviderStrategy> CONFIGURATION_STRATEGIES =
             asList(new EnvironmentAndSystemPropertyClientProviderStrategy(),
-                    new ProxiedUnixSocketClientProviderStrategy(),
                     new UnixSocketClientProviderStrategy(),
+                    new ProxiedUnixSocketClientProviderStrategy(),
                     new DockerMachineClientProviderStrategy());
     private String activeApiVersion;
     private String activeExecutionDriver;

File: core/src/main/java/org/testcontainers/dockerclient/EnvironmentAndSystemPropertyClientProviderStrategy.java
Patch:
@@ -21,7 +21,7 @@ public void test() throws InvalidConfigurationException {
 
             final int timeout = Integer.parseInt(System.getProperty(PING_TIMEOUT_PROPERTY_NAME, PING_TIMEOUT_DEFAULT));
             ping(client, timeout);
-        } catch (Exception e) {
+        } catch (Exception | UnsatisfiedLinkError e) {
             LOGGER.error("ping failed with configuration {} due to {}", getDescription(), e.toString(), e);
             throw new InvalidConfigurationException("ping failed");
         }

File: core/src/main/java/org/testcontainers/dockerclient/UnixSocketClientProviderStrategy.java
Patch:
@@ -28,7 +28,7 @@ public void test()
         try {
             config = tryConfiguration(SOCKET_LOCATION);
             LOGGER.info("Accessing docker with local Unix socket");
-        } catch (Exception e) {
+        } catch (Exception | UnsatisfiedLinkError e) {
             throw new InvalidConfigurationException("ping failed", e);
         }
     }

File: core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java
Patch:
@@ -43,7 +43,7 @@ private static TestcontainersConfiguration loadConfiguration() {
 
                 config.ambassadorContainerImage = properties.getProperty("ambassador.container.image", config.ambassadorContainerImage);
                 config.vncRecordedContainerImage = properties.getProperty("vncrecorder.container.image", config.vncRecordedContainerImage);
-                config.tinyImage = properties.getProperty("tinyimage.container.image", config.vncRecordedContainerImage);
+                config.tinyImage = properties.getProperty("tinyimage.container.image", config.tinyImage);
 
                 log.debug("Testcontainers configuration overrides loaded from {}: {}", configOverrides, config);
 

File: modules/jdbc/src/main/java/org/testcontainers/containers/JdbcDatabaseContainer.java
Patch:
@@ -117,8 +117,10 @@ public Connection createConnection(String queryString) throws SQLException {
         info.put("password", this.getPassword());
         final String url = this.getJdbcUrl() + queryString;
 
+        final Driver jdbcDriverInstance = getJdbcDriverInstance();
+
         try {
-            return Unreliables.retryUntilSuccess(120, TimeUnit.SECONDS, () -> getJdbcDriverInstance().connect(url, info));
+            return Unreliables.retryUntilSuccess(120, TimeUnit.SECONDS, () -> jdbcDriverInstance.connect(url, info));
         } catch (Exception e) {
             throw new SQLException("Could not create new connection", e);
         }

File: core/src/test/java/org/testcontainers/junit/GenericContainerRuleTest.java
Patch:
@@ -282,7 +282,7 @@ public void extraHostTest() throws IOException {
         assertTrue("The hosts file of container contains extra host", matcher.find());
     }
 
-    public static BufferedReader getReaderForContainerPort80(GenericContainer container) {
+    private BufferedReader getReaderForContainerPort80(GenericContainer container) {
 
         return Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {
             Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);

File: core/src/main/java/org/testcontainers/dockerclient/EnvironmentAndSystemPropertyClientProviderStrategy.java
Patch:
@@ -27,7 +27,6 @@ public void test() throws InvalidConfigurationException {
         }
 
         LOGGER.info("Found docker client settings from environment");
-        LOGGER.info("Docker host IP address is {}", DockerClientConfigUtils.getDockerHostIpAddress(config));
     }
 
     @Override

File: core/src/test/java/org/testcontainers/junit/GenericContainerRuleTest.java
Patch:
@@ -282,7 +282,7 @@ public void extraHostTest() throws IOException {
         assertTrue("The hosts file of container contains extra host", matcher.find());
     }
 
-    private BufferedReader getReaderForContainerPort80(GenericContainer container) {
+    public static BufferedReader getReaderForContainerPort80(GenericContainer container) {
 
         return Unreliables.retryUntilSuccess(10, TimeUnit.SECONDS, () -> {
             Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -6,6 +6,7 @@
 import com.github.dockerjava.api.model.BuildResponseItem;
 import com.github.dockerjava.core.command.BuildImageResultCallback;
 import com.google.common.collect.Sets;
+import lombok.Cleanup;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
@@ -113,8 +114,8 @@ public void onNext(BuildResponseItem item) {
             };
 
             // We have to use pipes to avoid high memory consumption since users might want to build really big images
-            PipedInputStream in = new PipedInputStream();
-            PipedOutputStream out = new PipedOutputStream(in);
+            @Cleanup PipedInputStream in = new PipedInputStream();
+            @Cleanup PipedOutputStream out = new PipedOutputStream(in);
 
             profiler.start("Configure image");
             BuildImageCmd buildImageCmd = dockerClient.buildImageCmd(in);

File: core/src/main/java/org/testcontainers/utility/TestEnvironment.java
Patch:
@@ -21,7 +21,8 @@ public static boolean dockerApiAtLeast(String minimumVersion) {
     public static boolean dockerExecutionDriverSupportsExec() {
         String executionDriver = DockerClientFactory.instance().getActiveExecutionDriver();
 
-        return !executionDriver.startsWith("lxc");
+        // Could be null starting from Docker 1.13
+        return executionDriver == null || !executionDriver.startsWith("lxc");
     }
 
     public static boolean dockerIsDockerMachine() {

File: core/src/main/java/org/testcontainers/utility/TestEnvironment.java
Patch:
@@ -21,7 +21,8 @@ public static boolean dockerApiAtLeast(String minimumVersion) {
     public static boolean dockerExecutionDriverSupportsExec() {
         String executionDriver = DockerClientFactory.instance().getActiveExecutionDriver();
 
-        return !executionDriver.startsWith("lxc");
+        // Could be null starting from Docker 1.13
+        return executionDriver == null || !executionDriver.startsWith("lxc");
     }
 
     public static boolean dockerIsDockerMachine() {

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainer.java
Patch:
@@ -30,7 +30,7 @@ protected Integer getLivenessCheckPort() {
 
     @Override
     protected void configure() {
-        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d");
+        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d", "mariadb-default-conf");
         
         addExposedPort(MARIADB_PORT);
         addEnv("MYSQL_DATABASE", MARIADB_DATABASE);

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -25,7 +25,7 @@ protected Integer getLivenessCheckPort() {
 
     @Override
     protected void configure() {
-        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d");
+        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d", "mysql-default-conf");
 
         addExposedPort(3306);
         addEnv("MYSQL_DATABASE", "test");

File: core/src/main/java/org/testcontainers/utility/ResourceReaper.java
Patch:
@@ -68,6 +68,8 @@ public void registerContainerForCleanup(String containerId, String imageName) {
      */
     public void stopAndRemoveContainer(String containerId) {
         stopContainer(containerId, registeredContainers.get(containerId));
+
+        registeredContainers.remove(containerId);
     }
 
     /**

File: modules/mariadb/src/main/java/org/testcontainers/containers/MariaDBContainer.java
Patch:
@@ -1,5 +1,7 @@
 package org.testcontainers.containers;
 
+import com.google.common.io.Resources;
+
 /**
  * Container implementation for the MariaDB project.
  * 
@@ -30,7 +32,7 @@ protected Integer getLivenessCheckPort() {
 
     @Override
     protected void configure() {
-        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d");
+        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d", "mariadb-default-conf");
         
         addExposedPort(MARIADB_PORT);
         addEnv("MYSQL_DATABASE", MARIADB_DATABASE);

File: modules/mysql/src/main/java/org/testcontainers/containers/MySQLContainer.java
Patch:
@@ -25,7 +25,7 @@ protected Integer getLivenessCheckPort() {
 
     @Override
     protected void configure() {
-        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d");
+        optionallyMapResourceParameterAsVolume(MY_CNF_CONFIG_OVERRIDE_PARAM_NAME, "/etc/mysql/conf.d", "mysql-default-conf");
 
         addExposedPort(3306);
         addEnv("MYSQL_DATABASE", "test");

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -817,7 +817,7 @@ public ExecResult execInContainer(Charset outputCharset, String... command)
                 .execCreateCmd(this.containerId)
                 .withCmd(command);
 
-        logger().info("Running \"exec\" command: " + String.join(" ", command));
+        logger().debug("Running \"exec\" command: " + String.join(" ", command));
         final ExecCreateCmdResponse execCreateCmdResponse = dockerClient.execCreateCmd(this.containerId)
                 .withAttachStdout(true).withAttachStderr(true).withCmd(command).exec();
 

File: core/src/main/java/org/testcontainers/containers/wait/HostPortWaitStrategy.java
Patch:
@@ -37,8 +37,7 @@ protected void waitUntilReady() {
             List<Integer> exposedPorts = container.getExposedPorts();
 
             Integer exposedPort = exposedPorts.stream()
-                    .map(container::getMappedPort)
-                    .filter(port::equals)
+                    .filter(it -> port.equals(container.getMappedPort(it)))
                     .findFirst()
                     .orElse(null);
 

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -315,7 +315,7 @@ public DockerCompose(List<File> composeFiles, String identifier) {
         List<String> absoluteDockerComposeFiles = composeFiles.stream().map(
                 file -> containerPwd + "/" + file.getAbsoluteFile().getName()).collect(Collectors.toList());
         String composeFileEnvVariableValue = Joiner.on(File.pathSeparator).join(absoluteDockerComposeFiles);
-        logger().info("Set env COMPOSE_FILE={}", composeFileEnvVariableValue);
+        logger().debug("Set env COMPOSE_FILE={}", composeFileEnvVariableValue);
         addEnv("COMPOSE_FILE", composeFileEnvVariableValue);
         addFileSystemBind(pwd, containerPwd, READ_ONLY);
 

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -263,7 +263,7 @@ public SELF withEnv(String key, String value) {
     }
 
     public SELF withEnv(Map<String, String> env) {
-        env.forEach(env::put);
+        env.forEach(this.env::put);
         return self();
     }
 
@@ -305,4 +305,4 @@ public void start() {
         }
         logger().info("Docker compose has finished running");
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -263,7 +263,7 @@ public SELF withEnv(String key, String value) {
     }
 
     public SELF withEnv(Map<String, String> env) {
-        env.forEach(env::put);
+        env.forEach(this.env::put);
         return self();
     }
 
@@ -305,4 +305,4 @@ public void start() {
         }
         logger().info("Docker compose has finished running");
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -130,7 +130,7 @@ private void checkDiskSpaceAndHandleExceptions(DockerClient client) {
     private void checkDiskSpace(DockerClient client) {
 
         List<Image> images = client.listImagesCmd().exec();
-        if (!images.stream().anyMatch(it -> asList(it.getRepoTags()).contains("alpine:3.2"))) {
+        if (!images.stream().anyMatch(it -> it.getRepoTags() != null && asList(it.getRepoTags()).contains("alpine:3.2"))) {
             PullImageResultCallback callback = client.pullImageCmd("alpine:3.2").exec(new PullImageResultCallback());
             callback.awaitSuccess();
         }

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -130,7 +130,7 @@ private void checkDiskSpaceAndHandleExceptions(DockerClient client) {
     private void checkDiskSpace(DockerClient client) {
 
         List<Image> images = client.listImagesCmd().exec();
-        if (!images.stream().anyMatch(it -> asList(it.getRepoTags()).contains("alpine:3.2"))) {
+        if (!images.stream().anyMatch(it -> it.getRepoTags() != null && asList(it.getRepoTags()).contains("alpine:3.2"))) {
             PullImageResultCallback callback = client.pullImageCmd("alpine:3.2").exec(new PullImageResultCallback());
             callback.awaitSuccess();
         }

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientProviderStrategy.java
Patch:
@@ -54,7 +54,7 @@ public static DockerClientProviderStrategy getFirstValidStrategy(List<DockerClie
                 LOGGER.info("Looking for Docker environment. Trying {}", strategy.getDescription());
                 strategy.test();
                 return strategy;
-            } catch (Exception | ExceptionInInitializerError e) {
+            } catch (Exception | ExceptionInInitializerError | NoClassDefFoundError e) {
                 @Nullable String throwableMessage = e.getMessage();
                 @SuppressWarnings("ThrowableResultOfMethodCallIgnored")
                 Throwable rootCause = Throwables.getRootCause(e);

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -290,7 +290,7 @@ public DockerCompose(File composeFile, String identifier) {
     public void start() {
         super.start();
 
-        this.followOutput(new Slf4jLogConsumer(logger()), OutputFrame.OutputType.STDERR);
+        this.followOutput(new Slf4jLogConsumer(logger()));
 
         // wait for the compose container to stop, which should only happen after it has spawned all the service containers
         logger().info("Docker compose container is running for command: {}", Joiner.on(" ").join(this.getCommandParts()));

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -282,6 +282,7 @@ public DockerCompose(File composeFile, String identifier) {
         addFileSystemBind("/var/run/docker.sock", "/docker.sock", READ_WRITE);
         addEnv("DOCKER_HOST", "unix:///docker.sock");
         setStartupCheckStrategy(new IndefiniteWaitOneShotStartupCheckStrategy());
+        setWorkingDirectory("/compose");
     }
 
     @Override

File: core/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -282,6 +282,7 @@ public DockerCompose(File composeFile, String identifier) {
         addFileSystemBind("/var/run/docker.sock", "/docker.sock", READ_WRITE);
         addEnv("DOCKER_HOST", "unix:///docker.sock");
         setStartupCheckStrategy(new IndefiniteWaitOneShotStartupCheckStrategy());
+        setWorkingDirectory("/compose");
     }
 
     @Override

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -128,6 +128,7 @@ public void onNext(BuildResponseItem item) {
                     TarArchiveEntry tarEntry = new TarArchiveEntry(entry.getKey());
                     Transferable transferable = entry.getValue();
                     tarEntry.setSize(transferable.getSize());
+                    tarEntry.setMode(transferable.getFileMode());
 
                     tarArchive.putArchiveEntry(tarEntry);
                     transferable.transferTo(tarArchive);

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -349,6 +349,8 @@ private void applyConfiguration(CreateContainerCmd createCommand) {
 
             Set<String> linkedContainerNetworks = dockerClient.listContainersCmd().exec().stream()
                     .filter(container -> container.getNames()[0].endsWith(linkableContainer.getContainerName()))
+                    .filter(container -> container.getNetworkSettings() != null &&
+                            container.getNetworkSettings().getNetworks() != null)
                     .flatMap(container -> container.getNetworkSettings().getNetworks().keySet().stream())
                     .distinct()
                     .collect(Collectors.toSet());

File: core/src/test/java/org/testcontainers/junit/BaseDockerComposeTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.testcontainers.junit;
 
 import org.junit.Assume;
-import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.testcontainers.containers.DockerComposeContainer;
 import org.testcontainers.utility.TestEnvironment;
@@ -18,8 +18,8 @@ public abstract class BaseDockerComposeTest {
 
     protected abstract DockerComposeContainer getEnvironment();
 
-    @Before
-    public void checkVersion() {
+    @BeforeClass
+    public static void checkVersion() {
         Assume.assumeTrue(TestEnvironment.dockerApiAtLeast("1.22"));
     }
 

File: core/src/main/java/org/testcontainers/dockerclient/DockerMachineClientProviderStrategy.java
Patch:
@@ -18,7 +18,6 @@ public class DockerMachineClientProviderStrategy extends DockerClientProviderStr
     @Override
     public void test() throws InvalidConfigurationException {
 
-        DockerClientConfig candidateConfig;
         DockerClient client;
 
         try {
@@ -37,13 +36,13 @@ public void test() throws InvalidConfigurationException {
 
             LOGGER.info("Docker daemon IP address for docker machine {} is {}", machineName, dockerDaemonIpAddress);
 
-            candidateConfig = DockerClientConfig
+            config = DockerClientConfig
                     .createDefaultConfigBuilder()
                     .withDockerHost("tcp://" + dockerDaemonIpAddress + ":2376")
                     .withDockerTlsVerify(true)
                     .withDockerCertPath(Paths.get(System.getProperty("user.home") + "/.docker/machine/certs/").toString())
                     .build();
-            client = getClientForConfig(candidateConfig);
+            client = getClientForConfig(config);
         } catch (Exception e) {
             throw new InvalidConfigurationException(e.getMessage());
         }

File: core/src/test/java/org/testcontainers/junit/wait/HostPortWaitStrategyTest.java
Patch:
@@ -31,7 +31,7 @@ public void testWaitUntilReady_Success() throws Exception {
      */
     @Test
     public void testWaitUntilReady_Timeout() throws Exception {
-        waitUntilReadyAndTimeout("");
+        waitUntilReadyAndTimeout("sleep 5; exit 1");
     }
 
     /**

File: core/src/main/java/org/testcontainers/containers/AmbassadorContainer.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.containers;
 
-import com.github.dockerjava.api.DockerException;
+import com.github.dockerjava.api.exception.DockerException;
 import com.github.dockerjava.api.model.Container;
 import lombok.Data;
 import lombok.EqualsAndHashCode;

File: core/src/main/java/org/testcontainers/dockerclient/DockerClientConfigUtils.java
Patch:
@@ -4,11 +4,11 @@
 
 public class DockerClientConfigUtils {
     public static String getDockerHostIpAddress(DockerClientConfig config) {
-        switch (config.getUri().getScheme()) {
+        switch (config.getDockerHost().getScheme()) {
         case "http":
         case "https":
         case "tcp":
-            return config.getUri().getHost();
+            return config.getDockerHost().getHost();
         case "unix":
             return "localhost";
         default:

File: core/src/main/java/org/testcontainers/dockerclient/DockerMachineConfigurationStrategy.java
Patch:
@@ -42,7 +42,7 @@ public DockerClientConfig provideConfiguration() throws InvalidConfigurationExce
 
             candidateConfig = DockerClientConfig
                     .createDefaultConfigBuilder()
-                    .withUri("https://" + dockerDaemonIpAddress + ":2376")
+                    .withDockerHost("https://" + dockerDaemonIpAddress + ":2376")
                     .withDockerCertPath(Paths.get(System.getProperty("user.home") + "/.docker/machine/certs/").toString())
                     .build();
             client = DockerClientBuilder.getInstance(candidateConfig).build();

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -43,7 +43,7 @@ public class ImageFromDockerfile extends LazyFuture<String> implements
                 for (String dockerImageName : imagesToDelete) {
                     log.info("Removing image tagged {}", dockerImageName);
                     try {
-                        dockerClientForCleaning.removeImageCmd(dockerImageName).withForce().exec();
+                        dockerClientForCleaning.removeImageCmd(dockerImageName).withForce(true).exec();
                     } catch (Throwable e) {
                         log.warn("Unable to delete image " + dockerImageName, e);
                     }

File: core/src/main/java/org/testcontainers/utility/ContainerReaper.java
Patch:
@@ -1,8 +1,8 @@
 package org.testcontainers.utility;
 
 import com.github.dockerjava.api.DockerClient;
-import com.github.dockerjava.api.DockerException;
-import com.github.dockerjava.api.InternalServerErrorException;
+import com.github.dockerjava.api.exception.DockerException;
+import com.github.dockerjava.api.exception.InternalServerErrorException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testcontainers.DockerClientFactory;

File: core/src/main/java/org/testcontainers/utility/DockerStatus.java
Patch:
@@ -36,7 +36,7 @@ public class DockerStatus {
     public static boolean isContainerRunning(InspectContainerResponse.ContainerState state,
                                              Duration minimumRunningDuration,
                                              Instant now) {
-        if (state.isRunning()) {
+        if (state.getRunning()) {
             if (minimumRunningDuration == null) {
                 return true;
             }
@@ -59,7 +59,7 @@ public static boolean isContainerRunning(InspectContainerResponse.ContainerState
     public static boolean isContainerStopped(InspectContainerResponse.ContainerState state) {
 
         // get some preconditions out of the way
-        if (state.isRunning() || state.isPaused()) {
+        if (state.getRunning() || state.getPaused()) {
             return false;
         }
 

File: core/src/test/java/org/testcontainers/junit/DockerfileTest.java
Patch:
@@ -36,7 +36,7 @@ protected void configure(BuildImageCmd buildImageCmd) {
                 );
                 withFileFromString("Dockerfile", String.join("\n", dockerfile));
 
-                buildImageCmd.withNoCache();
+                buildImageCmd.withNoCache(true);
             }
         };
 

File: modules/selenium/src/test/java/org/testcontainers/junit/LocalServerWebDriverContainerTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.testcontainers.containers.BrowserWebDriverContainer;
+import org.testcontainers.utility.DockerMachineClient;
 
 import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
 
@@ -27,6 +28,7 @@ public class LocalServerWebDriverContainerTest {
     @BeforeClass
     public static void checkOS() {
         Assume.assumeTrue("These tests are currently only applicable to OS X", System.getProperty("os.name").toLowerCase().contains("mac"));
+        Assume.assumeTrue("These tests are only applicable to docker machine", DockerMachineClient.instance().isDefaultMachineRunning());
     }
 
     @Before

File: core/src/main/java/org/testcontainers/containers/wait/HostPortWaitStrategy.java
Patch:
@@ -23,7 +23,7 @@ protected void waitUntilReady() {
             return;
         }
 
-        final String ipAddress = DockerClientFactory.instance().dockerHostIpAddress();
+        final String ipAddress = container.getContainerIpAddress();
         try {
             Unreliables.retryUntilSuccess((int) startupTimeout.getSeconds(), TimeUnit.SECONDS, () -> {
                 getRateLimiter().doWhenReady(() -> {

File: core/src/main/java/org/testcontainers/containers/wait/HttpWaitStrategy.java
Patch:
@@ -135,7 +135,7 @@ protected void waitUntilReady() {
      */
     private URI buildLivenessUri(int livenessCheckPort) {
         final String scheme = (tlsEnabled ? "https" : "http") + "://";
-        final String host = DockerClientFactory.instance().dockerHostIpAddress();
+        final String host = container.getContainerIpAddress();
 
         final String portSuffix;
         if ((tlsEnabled && 443 == livenessCheckPort) || (!tlsEnabled && 80 == livenessCheckPort)) {

File: modules/virtuoso/src/test/java/org/testcontainers/containers/VirtuosoJDBCDriverTest.java
Patch:
@@ -14,8 +14,8 @@
 public class VirtuosoJDBCDriverTest {
 
     @Test
-    public void testVirtuosoWithNoSpecifiedVersion() throws SQLException {
-        performSimpleTest("jdbc:tc:virtuoso://hostname/databasename");
+    public void testVirtuosoWithSpecifiedVersion() throws SQLException {
+        performSimpleTest("jdbc:tc:virtuoso:1.0.0-virtuoso7.2.2://hostname/databasename");
     }
 
 

File: modules/virtuoso/src/test/java/org/testcontainers/containers/VirtuosoJDBCDriverTest.java
Patch:
@@ -14,8 +14,8 @@
 public class VirtuosoJDBCDriverTest {
 
     @Test
-    public void testVirtuosoWithNoSpecifiedVersion() throws SQLException {
-        performSimpleTest("jdbc:tc:virtuoso://hostname/databasename");
+    public void testVirtuosoWithSpecifiedVersion() throws SQLException {
+        performSimpleTest("jdbc:tc:virtuoso:1.0.0-virtuoso7.2.2://hostname/databasename");
     }
 
 

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -286,6 +286,8 @@ protected void containerIsStarted(InspectContainerResponse containerInfo) {
     protected Integer getLivenessCheckPort() {
         if (exposedPorts.size() > 0) {
             return getMappedPort(exposedPorts.get(0));
+        } else if (portBindings.size() > 0) {
+            return PortBinding.parse(portBindings.get(0)).getBinding().getHostPort();
         } else {
             return null;
         }

File: core/src/main/java/org/testcontainers/containers/GenericContainer.java
Patch:
@@ -286,6 +286,8 @@ protected void containerIsStarted(InspectContainerResponse containerInfo) {
     protected Integer getLivenessCheckPort() {
         if (exposedPorts.size() > 0) {
             return getMappedPort(exposedPorts.get(0));
+        } else if (portBindings.size() > 0) {
+            return PortBinding.parse(portBindings.get(0)).getBinding().getHostPort();
         } else {
             return null;
         }

File: core/src/main/java/org/testcontainers/containers/output/Slf4jLogConsumer.java
Patch:
@@ -15,13 +15,13 @@ public Slf4jLogConsumer(Logger logger) {
         this.logger = logger;
     }
 
-    public Slf4jLogConsumer setPrefix(String prefix) {
-        this.prefix = "["+prefix+"]";
+    public Slf4jLogConsumer withPrefix(String prefix) {
+        this.prefix = "["+prefix+"] ";
         return this;
     }
 
     @Override
     public void accept(OutputFrame outputFrame) {
-        logger.info("{} {}: {}", prefix, outputFrame.getType(), outputFrame.getUtf8String());
+        logger.info("{}{}: {}", prefix, outputFrame.getType(), outputFrame.getUtf8String());
     }
 }

File: core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java
Patch:
@@ -40,7 +40,7 @@ public class ImageFromDockerfile extends LazyFuture<String> implements
 
     static {
         Runtime.getRuntime().addShutdownHook(new Thread(() -> {
-            try (DockerClient dockerClientForCleaning = DockerClientFactory.instance().client()) {
+            try (DockerClient dockerClientForCleaning = DockerClientFactory.instance().client(false)) {
                 for (String dockerImageName : imagesToDelete) {
                     log.info("Removing image tagged {}", dockerImageName);
                     try {
@@ -93,7 +93,7 @@ protected final String resolve() {
         Profiler profiler = new Profiler("Rule creation - build image");
         profiler.setLogger(logger);
 
-        try (DockerClient dockerClient = DockerClientFactory.instance().client()) {
+        try (DockerClient dockerClient = DockerClientFactory.instance().client(false)) {
             if (deleteOnExit) {
                 imagesToDelete.add(dockerImageName);
             }

File: core/src/main/java/org/testcontainers/utility/ContainerReaper.java
Patch:
@@ -7,9 +7,9 @@
 import org.slf4j.LoggerFactory;
 import org.testcontainers.DockerClientFactory;
 
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Component that responsible for container removal and automatic cleanup of dead containers at JVM shutdown.
@@ -19,7 +19,7 @@ public final class ContainerReaper {
     private static final Logger LOGGER = LoggerFactory.getLogger(ContainerReaper.class);
     private static ContainerReaper instance;
     private final DockerClient dockerClient;
-    private Map<String, String> registeredContainers = new HashMap<>();
+    private Map<String, String> registeredContainers = new ConcurrentHashMap<>();
 
     private ContainerReaper() {
         dockerClient = DockerClientFactory.instance().client();

File: core/src/main/java/org/testcontainers/dockerclient/UnixSocketConfigurationStrategy.java
Patch:
@@ -17,7 +17,7 @@ public DockerClientConfig provideConfiguration()
         try {
             client.pingCmd().exec();
         } catch (Exception e) {
-            throw new InvalidConfigurationException("ping failed");
+            throw new InvalidConfigurationException("ping failed", e);
         }
 
         LOGGER.info("Accessing docker with local Unix socket");

File: core/src/main/java/org/testcontainers/utility/DockerImageName.java
Patch:
@@ -1,6 +1,6 @@
 package org.testcontainers.utility;
 
-public class DockerImageName {
+public final class DockerImageName {
 
     public static void validate(String dockerImageName) throws IllegalArgumentException {
         int repoSeparatorIndex = dockerImageName.indexOf('/');
@@ -15,4 +15,6 @@ public static void validate(String dockerImageName) throws IllegalArgumentExcept
                     "(" + dockerImageName + "). Please provide a tag; this may be 'latest' or a specific version");
         }
     }
+
+    private DockerImageName() {}
 }

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -16,6 +16,7 @@
 import org.testcontainers.dockerclient.DockerConfigurationStrategy;
 import org.testcontainers.dockerclient.DockerMachineConfigurationStrategy;
 import org.testcontainers.dockerclient.EnvironmentAndSystemPropertyConfigurationStrategy;
+import org.testcontainers.dockerclient.UnixSocketConfigurationStrategy;
 
 import java.util.List;
 
@@ -38,7 +39,8 @@ public class DockerClientFactory {
 
     private static final List<DockerConfigurationStrategy> CONFIGURATION_STRATEGIES =
             asList(new EnvironmentAndSystemPropertyConfigurationStrategy(),
-                    new DockerMachineConfigurationStrategy());
+                    new DockerMachineConfigurationStrategy(),
+                    new UnixSocketConfigurationStrategy());
 
     /**
      * Private constructor

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -16,6 +16,7 @@
 import org.testcontainers.dockerclient.DockerConfigurationStrategy;
 import org.testcontainers.dockerclient.DockerMachineConfigurationStrategy;
 import org.testcontainers.dockerclient.EnvironmentAndSystemPropertyConfigurationStrategy;
+import org.testcontainers.dockerclient.UnixSocketConfigurationStrategy;
 
 import java.util.List;
 
@@ -38,7 +39,8 @@ public class DockerClientFactory {
 
     private static final List<DockerConfigurationStrategy> CONFIGURATION_STRATEGIES =
             asList(new EnvironmentAndSystemPropertyConfigurationStrategy(),
-                    new DockerMachineConfigurationStrategy());
+                    new DockerMachineConfigurationStrategy(),
+                    new UnixSocketConfigurationStrategy());
 
     /**
      * Private constructor

File: core/src/main/java/org/testcontainers/dockerclient/DockerConfigurationStrategy.java
Patch:
@@ -40,6 +40,7 @@ static DockerClientConfig getFirstValidConfig(List<DockerConfigurationStrategy>
                 return strategy.provideConfiguration();
             } catch (Exception e) {
                 configurationFailures.put(strategy, e);
+                LOGGER.debug("Docker strategy " + strategy.getClass().getName() + " failed with exception", e);
             }
         }
 

File: core/src/main/java/org/testcontainers/dockerclient/DockerConfigurationStrategy.java
Patch:
@@ -40,6 +40,7 @@ static DockerClientConfig getFirstValidConfig(List<DockerConfigurationStrategy>
                 return strategy.provideConfiguration();
             } catch (Exception e) {
                 configurationFailures.put(strategy, e);
+                LOGGER.debug("Docker strategy " + strategy.getClass().getName() + " failed with exception", e);
             }
         }
 

File: core/src/main/java/org/testcontainers/DockerClientFactory.java
Patch:
@@ -16,6 +16,7 @@
 import org.testcontainers.dockerclient.DockerConfigurationStrategy;
 import org.testcontainers.dockerclient.DockerMachineConfigurationStrategy;
 import org.testcontainers.dockerclient.EnvironmentAndSystemPropertyConfigurationStrategy;
+import org.testcontainers.dockerclient.UnixSocketConfigurationStrategy;
 
 import java.util.List;
 
@@ -38,7 +39,8 @@ public class DockerClientFactory {
 
     private static final List<DockerConfigurationStrategy> CONFIGURATION_STRATEGIES =
             asList(new EnvironmentAndSystemPropertyConfigurationStrategy(),
-                    new DockerMachineConfigurationStrategy());
+                    new DockerMachineConfigurationStrategy(),
+                    new UnixSocketConfigurationStrategy());
 
     /**
      * Private constructor

File: core/src/main/java/org/testcontainers/utility/DockerMachineClient.java
Patch:
@@ -49,10 +49,13 @@ public Optional<String> getDefaultMachine() {
         String envMachineName = System.getenv("DOCKER_MACHINE_NAME");
 
         if (machineNames.contains(envMachineName)) {
+            LOGGER.debug("Using docker-machine set in DOCKER_MACHINE_NAME: {}", envMachineName);
             return Optional.of(envMachineName);
         } else if (machineNames.contains("default")) {
+            LOGGER.debug("DOCKER_MACHINE_NAME is not set; Using 'default' docker-machine", envMachineName);
             return Optional.of("default");
         } else if (machineNames.size() > 0) {
+            LOGGER.debug("DOCKER_MACHINE_NAME is not set and no machine named 'default' found; Using first machine found with `docker-machine ls`: {}", machineNames.get(0));
             return Optional.of(machineNames.get(0));
         } else {
             return Optional.empty();

File: modules/nginx/src/test/java/org/testcontainers/junit/SimpleNginxTest.java
Patch:
@@ -12,9 +12,7 @@
 import java.io.*;
 import java.net.URLConnection;
 
-import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;
-import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;
-import static org.rnorth.visibleassertions.VisibleAssertions.info;
+import static org.rnorth.visibleassertions.VisibleAssertions.*;
 
 
 /**

File: modules/docker-compose/src/main/java/org/testcontainers/containers/AmbassadorContainer.java
Patch:
@@ -32,7 +32,7 @@ public AmbassadorContainer(DockerComposeContainer otherContainer, String service
 
         // Tell the proxy what to connect to within the docker network
         addEnv("SERVICE_NAME", otherContainerName);
-        addEnv("SERVICE_PORT", servicePort);
+        addEnv("SERVICE_PORT", servicePort.replaceAll("/tcp", ""));
     }
 
     public boolean isServiceReady() {

File: modules/docker-compose/src/main/java/org/testcontainers/containers/DockerComposeContainer.java
Patch:
@@ -3,6 +3,7 @@
 import com.spotify.docker.client.DockerClient;
 import com.spotify.docker.client.DockerException;
 import com.spotify.docker.client.messages.Container;
+import org.testcontainers.containers.traits.LinkableContainer;
 import org.testcontainers.utility.Base58;
 
 import java.io.File;
@@ -14,7 +15,7 @@
 /**
  * Created by rnorth on 08/08/2015.
  */
-public class DockerComposeContainer extends GenericContainer {
+public class DockerComposeContainer extends GenericContainer implements LinkableContainer {
 
     /**
      * Random identifier which will become part of spawned containers names, so we can shut them down

File: modules/docker-compose/src/main/java/org/testcontainers/junit/DockerComposeContainerRule.java
Patch:
@@ -27,7 +27,7 @@ protected void before() throws Throwable {
         super.before();
 
         // Start any ambassador containers we need
-        for (GenericContainer ambassadorContainer : ambassadorContainers.values()) {
+        for (final GenericContainer ambassadorContainer : ambassadorContainers.values()) {
             ambassadorContainer.start();
         }
 
@@ -96,7 +96,7 @@ public DockerComposeContainerRule withExposedService(String serviceName, String
         String otherContainerName = identifier + "_" + serviceName;
 
         // Link
-        ambassadorContainer.addLink(otherContainerName, otherContainerName);
+        ambassadorContainer.addLink(otherContainerName, ((DockerComposeContainer) container).getIdentifier());
 
         // Expose ambassador's port
         ambassadorContainer.addExposedPort(servicePort);

File: modules/jdbc/src/main/java/org/rnorth/testcontainers/jdbc/ContainerDatabaseDriver.java
Patch:
@@ -33,7 +33,7 @@ public class ContainerDatabaseDriver implements Driver {
     private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ContainerDatabaseDriver.class);
 
     private Driver delegate;
-    private Map<Container, Set<Connection>> containerConnections = new HashMap<>();
+    private Map<JdbcDatabaseContainer, Set<Connection>> containerConnections = new HashMap<>();
     private Map<String, JdbcDatabaseContainer> jdbcUrlContainerCache = new HashMap<>();
     private Set<JdbcDatabaseContainer> initializedContainers = new HashSet<>();
 
@@ -137,10 +137,11 @@ public synchronized Connection connect(String url, final Properties info) throws
      * @return              the connection, wrapped
      */
     private Connection wrapConnection(final Connection connection, final JdbcDatabaseContainer container, final String url) {
-        Set<Connection> connections = containerConnections.get(connection);
+        Set<Connection> connections = containerConnections.get(container);
 
         if(connections == null) {
             connections = new HashSet<>();
+            containerConnections.put(container, connections);
         }
 
         connections.add(connection);

File: modules/jdbc/src/main/java/org/rnorth/testcontainers/jdbc/ContainerDatabaseDriver.java
Patch:
@@ -33,7 +33,7 @@ public class ContainerDatabaseDriver implements Driver {
     private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(ContainerDatabaseDriver.class);
 
     private Driver delegate;
-    private Map<Container, Set<Connection>> containerConnections = new HashMap<>();
+    private Map<JdbcDatabaseContainer, Set<Connection>> containerConnections = new HashMap<>();
     private Map<String, JdbcDatabaseContainer> jdbcUrlContainerCache = new HashMap<>();
     private Set<JdbcDatabaseContainer> initializedContainers = new HashSet<>();
 
@@ -137,10 +137,11 @@ public synchronized Connection connect(String url, final Properties info) throws
      * @return              the connection, wrapped
      */
     private Connection wrapConnection(final Connection connection, final JdbcDatabaseContainer container, final String url) {
-        Set<Connection> connections = containerConnections.get(connection);
+        Set<Connection> connections = containerConnections.get(container);
 
         if(connections == null) {
             connections = new HashSet<>();
+            containerConnections.put(container, connections);
         }
 
         connections.add(connection);

File: modules/jdbc/src/main/java/org/rnorth/testcontainers/jdbc/ContainerDatabaseDriver.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class ContainerDatabaseDriver implements Driver {
 
-    public static final Pattern URL_MATCHING_PATTERN = Pattern.compile("jdbc:tc:(mysql|postgresql)(:([^:]+))?://[^\\?]+(\\?.*)?");
+    public static final Pattern URL_MATCHING_PATTERN = Pattern.compile("jdbc:tc:(mysql|postgresql|oracle)(:([^:]+))?://[^\\?]+(\\?.*)?");
     public static final Pattern INITSCRIPT_MATCHING_PATTERN = Pattern.compile(".*([\\?&]?)TC_INITSCRIPT=([^\\?&]+).*");
     public static final Pattern INITFUNCTION_MATCHING_PATTERN = Pattern.compile(".*([\\?&]?)TC_INITFUNCTION=" +
             "((\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*\\.)*\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)" +

File: src/main/java/org/rnorth/testcontainers/containers/AbstractContainer.java
Patch:
@@ -114,7 +114,7 @@ public void stop() {
             dockerClient.killContainer(containerId);
             dockerClient.removeContainer(containerId, true);
         } catch (DockerException | InterruptedException e) {
-            LOGGER.debug("Error encountered shutting down container (ID: {}) - it may not have been stopped, or may already be stopped", containerId, e);
+            LOGGER.debug("Error encountered shutting down container (ID: {}) - it may not have been stopped, or may already be stopped: {}", containerId, e.getMessage());
         }
     }
 

File: src/main/java/org/rnorth/testcontainers/containers/AbstractContainer.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractContainer {
     private String containerId;
     private DockerClient dockerClient;
     private boolean normalTermination = false;
-    protected String tag;
+    protected String tag = "latest";
 
     public void start() {
 
@@ -112,7 +112,7 @@ public void stop() {
             dockerClient.killContainer(containerId);
             dockerClient.removeContainer(containerId, true);
         } catch (DockerException | InterruptedException e) {
-            LOGGER.error("Error encountered shutting down container (ID: {}) - it may not have been stopped", containerId, e);
+            LOGGER.debug("Error encountered shutting down container (ID: {}) - it may not have been stopped, or may already be stopped", containerId, e);
         }
     }
 

File: src/main/java/org/rnorth/testcontainers/containers/AbstractContainer.java
Patch:
@@ -110,6 +110,7 @@ public void stop() {
             LOGGER.info("Stopping container: {}", containerId);
             normalTermination = true;
             dockerClient.killContainer(containerId);
+            dockerClient.removeContainer(containerId, true);
         } catch (DockerException | InterruptedException e) {
             LOGGER.error("Error encountered shutting down container (ID: {}) - it may not have been stopped", containerId, e);
         }

