File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -2008,7 +2008,7 @@ public static void parkAndCustomSerialize(final Runnable writer) throws SuspendE
         while (!park(SERIALIZER_BLOCKER, new ParkAction() {
             @Override
             public void run(Fiber f) {
-                f.record(1, "Fiber", "parkAndSerializeExternally", "Serializing fiber %s", f);
+                f.record(1, "Fiber", "parkAndCustomSerialize", "Serializing fiber %s", f);
                 writer.run();
             }
         }));

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/ProxyServerTest.java
Patch:
@@ -53,6 +53,7 @@ public class ProxyServerTest {
     @After
     public void tearDown() {
         ActorRegistry.clear();
+        scheduler.shutdown();
     }
 
     static final MailboxConfig mailboxConfig = new MailboxConfig(10, Channels.OverflowPolicy.THROW);

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/ServerTest.java
Patch:
@@ -60,6 +60,7 @@ public class ServerTest {
     @After
     public void tearDown() {
         ActorRegistry.clear();
+        scheduler.shutdown();
     }
 
     static final MailboxConfig mailboxConfig = new MailboxConfig(10, Channels.OverflowPolicy.THROW);

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/SupervisorTest.java
Patch:
@@ -60,6 +60,7 @@ public class SupervisorTest {
     @After
     public void tearDown() {
         ActorRegistry.clear();
+        scheduler.shutdown();
     }
     
     private static final Logger LOG = LoggerFactory.getLogger(SupervisorActor.class);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberScheduler.java
Patch:
@@ -54,6 +54,9 @@ private static FibersMonitor createFibersMonitor(String name, FiberScheduler sch
                 throw new RuntimeException("Unsupported monitor type: " + monitorType);
         }
     }
+    
+    public void shutdown() {
+    }
 
     public String getName() {
         return name;

File: quasar-core/src/test/java/co/paralleluniverse/fibers/io/FiberAsyncIOTest.java
Patch:
@@ -65,6 +65,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/ChannelTest.java
Patch:
@@ -102,6 +102,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/TransferSelectorTest.java
Patch:
@@ -79,6 +79,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/TransformingChannelTest.java
Patch:
@@ -105,6 +105,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/ProxyServerTest.java
Patch:
@@ -53,6 +53,7 @@ public class ProxyServerTest {
     @After
     public void tearDown() {
         ActorRegistry.clear();
+        scheduler.shutdown();
     }
 
     static final MailboxConfig mailboxConfig = new MailboxConfig(10, Channels.OverflowPolicy.THROW);

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/ServerTest.java
Patch:
@@ -60,6 +60,7 @@ public class ServerTest {
     @After
     public void tearDown() {
         ActorRegistry.clear();
+        scheduler.shutdown();
     }
 
     static final MailboxConfig mailboxConfig = new MailboxConfig(10, Channels.OverflowPolicy.THROW);

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/SupervisorTest.java
Patch:
@@ -60,6 +60,7 @@ public class SupervisorTest {
     @After
     public void tearDown() {
         ActorRegistry.clear();
+        scheduler.shutdown();
     }
     
     private static final Logger LOG = LoggerFactory.getLogger(SupervisorActor.class);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberScheduler.java
Patch:
@@ -54,6 +54,9 @@ private static FibersMonitor createFibersMonitor(String name, FiberScheduler sch
                 throw new RuntimeException("Unsupported monitor type: " + monitorType);
         }
     }
+    
+    public void shutdown() {
+    }
 
     public String getName() {
         return name;

File: quasar-core/src/test/java/co/paralleluniverse/fibers/io/FiberAsyncIOTest.java
Patch:
@@ -65,6 +65,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/ChannelTest.java
Patch:
@@ -102,6 +102,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/TransferSelectorTest.java
Patch:
@@ -79,6 +79,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/TransformingChannelTest.java
Patch:
@@ -105,6 +105,7 @@ public void setUp() {
 
     @After
     public void tearDown() {
+        scheduler.shutdown();
     }
 
     @Test

File: quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/LeakTest.java
Patch:
@@ -47,8 +47,9 @@ public void leaky() throws Exception {
         objectsField.setAccessible(true);
         List<Object> stack = Arrays.asList((Object[])objectsField.get(stackField.get(co)));
         
-//        System.out.println(stack);   
-        assertThat(stack, everyItem(nullValue()));
+//        System.out.println(stack);
+        assertThat(stack, not(hasItem(leaked)));
+        // assertThat(stack, everyItem(nullValue())); -- brittle
         
 //        WeakReference<String> ref = new WeakReference<>(leaked);
 //        leaked = null;

File: quasar-actors/src/main/java/co/paralleluniverse/actors/MailboxConfig.java
Patch:
@@ -26,6 +26,9 @@ public class MailboxConfig implements java.io.Serializable {
 
     /**
      * Specifies a mailbox configuration with a given size and overflow policy.
+     * <p/>
+     * <b>Note: The overflow policy is currently ignored. An mailbox overflow will result in an exception being thrown inside
+     * the actor by {@code receive()} regardless of policy.</b>
      *
      * @param mailboxSize The number of messages that can wait in the mailbox channel, with {@code -1} specifying an unbounded mailbox.
      * @param policy      Specifies what to do when the mailbox is full and a new message is added.

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Stack.java
Patch:
@@ -143,21 +143,21 @@ record = setNumSlots(record, numSlots);
             fiber.record(2, "Stack", "pushMethod     ", "%s %d %d", Thread.currentThread().getStackTrace()[2], entry, sp /*Arrays.toString(fiber.getStackTrace())*/);
     }
 
-    public final void popMethod() {
+    public final void popMethod(int slots) {
         pushed = false;
 
         final int oldSP = sp;
         final int idx = oldSP - FRAME_RECORD_SIZE;
         final long record = dataLong[idx];
-        final int slots = getNumSlots(record);
+        // final int slots = getNumSlots(record);
         final int newSP = idx - getPrevNumSlots(record);
         
         // clear frame record (probably unnecessary)
         dataLong[idx] = 0L;
 //        for (int i = 0; i < FRAME_RECORD_SIZE; i++)
 //            dataLong[idx + i] = 0L;
         // help GC
-        for (int i = oldSP; i < oldSP + slots; i++)
+        for (int i = oldSP; i < oldSP + slots && i < dataObject.length; i++)
             dataObject[i] = null;
 
         sp = newSP;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -665,7 +665,7 @@ static void emitInstrumentedAnn(
 
         instrumentedAV.visit(Instrumented.FIELD_NAME_METHOD_END, endSourceLine);
         if (sb != null)
-            sb.append(Instrumented.FIELD_NAME_METHOD_START + "=").append(endSourceLine).append(", ");
+            sb.append(Instrumented.FIELD_NAME_METHOD_END + "=").append(endSourceLine).append(", ");
 
         if (suspCallsSourceLines != null) {
             final AnnotationVisitor linesAV = instrumentedAV.visitArray(Instrumented.FIELD_NAME_SUSPENDABLE_CALL_SITES);

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ShutdownMessage.java
Patch:
@@ -52,8 +52,8 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        final ExitMessage other = (ExitMessage) obj;
-        if (!Objects.equals(this.requester, other.actor))
+        final ShutdownMessage other = (ShutdownMessage) obj;
+        if (!Objects.equals(this.requester, other.requester))
             return false;
         return true;
     }

File: quasar-core/src/main/java/co/paralleluniverse/strands/dataflow/Val.java
Patch:
@@ -204,6 +204,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, TimeoutEx
         }
     }
 
+    @Suspendable
     public V get(Timeout timeout) throws InterruptedException, TimeoutException {
         return get(timeout.nanosLeft(), TimeUnit.NANOSECONDS);
     }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/ProxyServerActor.java
Patch:
@@ -289,7 +289,7 @@ private static Class<? extends Server> getProxyClass(Class<?>[] interfaces, bool
                     .subclass(Server.class)
                     .implement(interfaces)
                     .implement(java.io.Serializable.class)
-                    .method(isDeclaredBy(anyOf(interfaces))).intercept(InvocationHandlerAdapter.of(callOnVoidMethods ? handler1 : handler2).withMethodCache())
+                    .method(isDeclaredBy(anyOf(interfaces))).intercept(InvocationHandlerAdapter.of(callOnVoidMethods ? handler1 : handler2))
                     .make()
                     .load(ProxyServerActor.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER).getLoaded();
             final Class<? extends Server> old = classes.putIfAbsent(key, clazz);

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedArrayPrimitiveQueue.java
Patch:
@@ -41,9 +41,10 @@ boolean enqRaw(long item) {
                 if (nn == null)
                     nn = newNode();
                 nn.prev = t;
-                if (compareAndSetTail(t, nn))
+                if (compareAndSetTail(t, nn)) {
                     t.next = nn;
-                else
+                    nn = null;
+                } else
                     backoff();
             }
         }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java
Patch:
@@ -385,7 +385,7 @@ private CheckInstrumentationVisitor checkFileAndClose(InputStream is, String nam
                 ClassReader r = new ClassReader(is);
 
                 CheckInstrumentationVisitor civ = new CheckInstrumentationVisitor(this);
-                r.accept(civ, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES | ClassReader.SKIP_CODE);
+                r.accept(civ, ClassReader.SKIP_FRAMES | ClassReader.SKIP_CODE);
 
                 return civ;
             } finally {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/CheckInstrumentationVisitor.java
Patch:
@@ -132,7 +132,7 @@ public MethodVisitor visitMethod(final int access, final String name, final Stri
             hasSuspendable = true;
             // synchronized methods can't be made suspendable
             if ((access & Opcodes.ACC_SYNCHRONIZED) == Opcodes.ACC_SYNCHRONIZED) {
-                if (!className.equals("clojure/lang/LazySeq"))
+                if (!className.equals("clojure/lang/LazySeq") && !db.isAllowMonitors())
                     throw new UnableToInstrumentException("synchronized method", className, name, desc);
             }
         }

File: quasar-core/src/jmh/java/co/paralleluniverse/fibers/FiberOverheadJMHBenchmark.java
Patch:
@@ -60,7 +60,7 @@ public Object fiber() {
         res = 0;
         exec(fiber);
         exec(fiber);
-        fiber2.reset();
+        fiber.reset();
         return res;
     }
 
@@ -119,7 +119,7 @@ private long recursive2(int r) throws SuspendExecution {
         long c = rands[(r << 2) + 3];
         long res;
         if (r > 0)
-            res = recursive1(r - 1);
+            res = recursive2(r - 1);
         else {
             Fiber.park();
             res = rands[(r << 2) + 4];
@@ -133,7 +133,7 @@ private long recursive3(int r) throws SuspendExecution {
         long c = rands[(r << 2) + 3];
         long res;
         if (r > 0)
-            res = recursive1(r - 1);
+            res = recursive3(r - 1);
         else {
             nopark();
             res = rands[(r << 2) + 4];

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/QueueChannel.java
Patch:
@@ -217,7 +217,7 @@ public boolean send0(Message message, boolean sync, boolean timed, long nanos) t
         try {
             int i = 0;
 
-            final long deadline = timed ? System.nanoTime() : 0L;
+            final long deadline = timed ? System.nanoTime() + nanos : 0L;
 
             record("send0", "%s enqueing message %s", this, message);
             while (!queue.enq(message)) {

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/MessageSelector.java
Patch:
@@ -27,7 +27,7 @@ public abstract class MessageSelector<M1, M2> implements MessageProcessor<Object
      *
      * @return A new {@code MessageSelector} that selects all messages.
      */
-    public static <M> MessageSelector<?, M> select() {
+    public static <M> MessageSelector<Object, M> select() {
         return new MessageSelector<Object, M>() {
             @Override
             public boolean matches(Object m) {

File: quasar-core/src/jdk7/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -276,8 +276,8 @@ public boolean doExec() {
         }
 
         @Override
-        public void unpark(Object unblocker) {
-            super.unpark(unblocker == FiberTask.EMERGENCY_UNBLOCKER ? ParkableForkJoinTask.EMERGENCY_UNBLOCKER : unblocker);
+        public boolean unpark(Object unblocker) {
+            return super.unpark(unblocker == FiberTask.EMERGENCY_UNBLOCKER ? ParkableForkJoinTask.EMERGENCY_UNBLOCKER : unblocker);
         }
 
         @Override

File: quasar-core/src/jdk8/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -276,8 +276,8 @@ public boolean doExec() {
         }
 
         @Override
-        public void unpark(Object unblocker) {
-            super.unpark(unblocker == FiberTask.EMERGENCY_UNBLOCKER ? ParkableForkJoinTask.EMERGENCY_UNBLOCKER : unblocker);
+        public boolean unpark(Object unblocker) {
+            return super.unpark(unblocker == FiberTask.EMERGENCY_UNBLOCKER ? ParkableForkJoinTask.EMERGENCY_UNBLOCKER : unblocker);
         }
 
         @Override

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberTask.java
Patch:
@@ -52,9 +52,9 @@ interface FiberTask<V> extends Future<V> {
 
     void doPark(boolean yield);
 
-    void unpark();
+    boolean unpark();
 
-    void unpark(Object unblocker);
+    boolean unpark(Object unblocker);
 
     boolean tryUnpark(Object unblocker);
 

File: quasar-core/src/main/java/co/paralleluniverse/strands/StrandFactory.java
Patch:
@@ -15,7 +15,7 @@
 package co.paralleluniverse.strands;
 
 /**
- * Creates new {@link Strand strnads} on demand.
+ * Creates new {@link Strand strands} on demand.
  */
 public interface StrandFactory {
     Strand newStrand(SuspendableCallable<?> target);

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TransferChannel.java
Patch:
@@ -382,17 +382,20 @@ final boolean tryMatchData() {
         }
 
         boolean lease() {
+            final SelectActionImpl sa = this.sa;
             if (sa == null)
                 return true;
             return sa.lease();
         }
 
         void returnLease() {
+            final SelectActionImpl sa = this.sa;
             if (sa != null)
                 sa.returnLease();
         }
 
         void won() {
+            final SelectActionImpl sa = this.sa;
             if (sa != null) {
                 Object x = item;
                 sa.setItem(x == CHANNEL_CLOSED ? null : x);

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/EventSourceActor.java
Patch:
@@ -231,7 +231,7 @@ protected void onTerminate(Throwable cause) throws SuspendExecution, Interrupted
         handlers.clear();
     }
 
-    private void notifyHandlers(Event event) {
+    private void notifyHandlers(Event event) throws InterruptedException, SuspendExecution {
         log().debug("{} Got event {}", this, event);
         for (ListIterator<EventHandler<Event>> it = handlers.listIterator(); it.hasNext();) {
             EventHandler<Event> handler = it.next();

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -169,7 +169,7 @@ public void run(Fiber current) {
     @SuppressWarnings("empty-statement")
     public V run(final long timeout, final TimeUnit unit) throws E, SuspendExecution, InterruptedException, TimeoutException {
         if (Fiber.currentFiber() == null)
-            runSync(timeout, unit);
+            return runSync(timeout, unit);
 
         if (registrationComplete)
             throw new IllegalStateException("This FiberAsync instance has already been used");

File: quasar-kotlin/src/main/java/co/paralleluniverse/kotlin/KotlinClassifier.java
Patch:
@@ -59,7 +59,9 @@ private static String[] sa(String... elems) {
 		// Class prefixes that are known not to suspend
 		excludePrefixes = new String[] {
 			// TODO: this specifically is also known to cause a `VerifyError` when instrumented, see #146
-			"kotlin/reflect/jvm/internal/impl/descriptors/impl/ModuleDescriptorImpl"
+			"kotlin/reflect/jvm/internal/impl/descriptors/impl/ModuleDescriptorImpl",
+			// Handle the same class, when shaded within kotlin-compiler[-embeddable]
+			"org/jetbrains/kotlin/descriptors/impl/ModuleDescriptorImpl"
 		};
 	}
 

File: quasar-actors/src/main/java/co/paralleluniverse/actors/JMXActorMonitor.java
Patch:
@@ -162,7 +162,7 @@ public void refresh() {
     }
 
     protected void collect(long intervalNanos) {
-        messages = messageCounter;
+        messages += messageCounter;
     }
 
     protected void reset() {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java
Patch:
@@ -39,10 +39,12 @@ final class Classes {
     static final String ANNOTATION_DESC = "L" + ANNOTATION_NAME + ";";
     static final String DONT_INSTRUMENT_ANNOTATION_DESC = "L" + DONT_INSTRUMENT_ANNOTATION_NAME + ";";
     static final String ALREADY_INSTRUMENTED_DESC = Type.getDescriptor(Instrumented.class);
+    static final String LAMBDA_METHOD_PREFIX = "lambda$";
 
     private static final Set<String> yieldMethods = new HashSet<>(Arrays.asList(new String[] {
         "park", "yield", "parkAndUnpark", "yieldAndUnpark", "parkAndSerialize"
     }));
+
     static boolean isYieldMethod(String className, String methodName) {
         return FIBER_CLASS_NAME.equals(className) && yieldMethods.contains(methodName);
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -355,7 +355,7 @@ public void accept(MethodVisitor mv, boolean hasAnnotation) {
         for (Object o : mn.tryCatchBlocks) {
             final TryCatchBlockNode tcb = (TryCatchBlockNode) o;
 
-            if (SUSPEND_EXECUTION_NAME.equals(tcb.type) && !hasAnnotation) // we allow catch of SuspendExecution in method annotated with @Suspendable.
+            if (SUSPEND_EXECUTION_NAME.equals(tcb.type) && !hasAnnotation && !mn.name.startsWith(Classes.LAMBDA_METHOD_PREFIX)) // we allow catch of SuspendExecution only in methods annotated with @Suspendable and in lambda-generated ones.
                 throw new UnableToInstrumentException("catch for SuspendExecution", className, mn.name, mn.desc);
             if (handleProxyInvocations && UNDECLARED_THROWABLE_NAME.equals(tcb.type)) // we allow catch of SuspendExecution in method annotated with @Suspendable.
                 throw new UnableToInstrumentException("catch for UndeclaredThrowableException", className, mn.name, mn.desc);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableHelper.java
Patch:
@@ -91,9 +91,9 @@ public static boolean isInstrumented(Member m) {
     }
     
     public static boolean isSyntheticAndNotLambda(Member m) {
-        return m.isSynthetic() && !m.getName().startsWith("lambda$");
+        return m.isSynthetic() && !m.getName().startsWith(Classes.LAMBDA_METHOD_PREFIX);
     }
-    
+
     public static boolean isOptimized(Member m) {
         if (m == null)
             return false;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java
Patch:
@@ -39,10 +39,12 @@ final class Classes {
     static final String ANNOTATION_DESC = "L" + ANNOTATION_NAME + ";";
     static final String DONT_INSTRUMENT_ANNOTATION_DESC = "L" + DONT_INSTRUMENT_ANNOTATION_NAME + ";";
     static final String ALREADY_INSTRUMENTED_DESC = Type.getDescriptor(Instrumented.class);
+    static final String LAMBDA_METHOD_PREFIX = "lambda$";
 
     private static final Set<String> yieldMethods = new HashSet<>(Arrays.asList(new String[] {
         "park", "yield", "parkAndUnpark", "yieldAndUnpark", "parkAndSerialize"
     }));
+
     static boolean isYieldMethod(String className, String methodName) {
         return FIBER_CLASS_NAME.equals(className) && yieldMethods.contains(methodName);
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -355,7 +355,7 @@ public void accept(MethodVisitor mv, boolean hasAnnotation) {
         for (Object o : mn.tryCatchBlocks) {
             final TryCatchBlockNode tcb = (TryCatchBlockNode) o;
 
-            if (SUSPEND_EXECUTION_NAME.equals(tcb.type) && !hasAnnotation) // we allow catch of SuspendExecution in method annotated with @Suspendable.
+            if (SUSPEND_EXECUTION_NAME.equals(tcb.type) && !hasAnnotation && !mn.name.startsWith(Classes.LAMBDA_METHOD_PREFIX)) // we allow catch of SuspendExecution only in methods annotated with @Suspendable and in lambda-generated ones.
                 throw new UnableToInstrumentException("catch for SuspendExecution", className, mn.name, mn.desc);
             if (handleProxyInvocations && UNDECLARED_THROWABLE_NAME.equals(tcb.type)) // we allow catch of SuspendExecution in method annotated with @Suspendable.
                 throw new UnableToInstrumentException("catch for UndeclaredThrowableException", className, mn.name, mn.desc);

File: quasar-core/src/jdk7/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -328,13 +328,10 @@ protected void throwPark(boolean yield) throws SuspendExecution {
 
         @Override
         protected void onException(Throwable t) {
-            fiber.onException(t);
         }
 
         @Override
         protected void onCompletion(boolean res) {
-            if (res)
-                fiber.onCompletion();
         }
 
         static boolean isIdle() {

File: quasar-core/src/jdk8/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -328,13 +328,10 @@ protected void throwPark(boolean yield) throws SuspendExecution {
 
         @Override
         protected void onException(Throwable t) {
-            fiber.onException(t);
         }
 
         @Override
         protected void onCompletion(boolean res) {
-            if (res)
-                fiber.onCompletion();
         }
 
         static boolean isIdle() {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -736,6 +736,7 @@ boolean exec() {
                 record(1, "Fiber", "exec", "finished %s %s res: %s", state, this, this.result);
                 monitorFiberTerminated(monitor);
 
+                onCompletion();
                 setResult(res);
 
                 return true;

File: quasar-core/src/main/java/co/paralleluniverse/common/util/Debug.java
Patch:
@@ -182,7 +182,7 @@ public static void dumpRecorder(String filename) {
             if (!dumped) {
                 if (filename == null) {
                     filename = getDumpFile();
-                    if (filename.trim().equals(""))
+                    if (filename == null || filename.trim().equals(""))
                         filename = null;
                 }
                 if (filename == null) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -117,7 +117,7 @@ public V run() throws E, SuspendExecution, InterruptedException {
         // the second call inside Fiber.park
         Fiber.verifySuspend(fiber);
 
-        fiber.record(1, "FiberAsync", "run", "Blocking fiber %s on FibeAsync %s", fiber, this);
+        fiber.record(1, "FiberAsync", "run", "Blocking fiber %s on FiberAsync %s", fiber, this);
         while (!Fiber.park(this, new Fiber.ParkAction() {
             @Override
             public void run(Fiber current) {

File: quasar-core/src/main/java/co/paralleluniverse/common/util/Debug.java
Patch:
@@ -182,7 +182,7 @@ public static void dumpRecorder(String filename) {
             if (!dumped) {
                 if (filename == null) {
                     filename = getDumpFile();
-                    if (filename.trim().equals(""))
+                    if (filename == null || filename.trim().equals(""))
                         filename = null;
                 }
                 if (filename == null) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -117,7 +117,7 @@ public V run() throws E, SuspendExecution, InterruptedException {
         // the second call inside Fiber.park
         Fiber.verifySuspend(fiber);
 
-        fiber.record(1, "FiberAsync", "run", "Blocking fiber %s on FibeAsync %s", fiber, this);
+        fiber.record(1, "FiberAsync", "run", "Blocking fiber %s on FiberAsync %s", fiber, this);
         while (!Fiber.park(this, new Fiber.ParkAction() {
             @Override
             public void run(Fiber current) {

File: quasar-core/src/main/java/co/paralleluniverse/common/util/Debug.java
Patch:
@@ -182,7 +182,7 @@ public static void dumpRecorder(String filename) {
             if (!dumped) {
                 if (filename == null) {
                     filename = getDumpFile();
-                    if (filename.trim().equals(""))
+                    if (filename == null || filename.trim().equals(""))
                         filename = null;
                 }
                 if (filename == null) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -1758,7 +1758,7 @@ private void orderedSetState(State value) {
     protected final boolean isRecordingLevel(int level) {
         if (!Debug.isDebug())
             return false;
-        final FlightRecorder.ThreadRecorder recorder = flightRecorder.get();
+        final FlightRecorder.ThreadRecorder recorder = flightRecorder != null ? flightRecorder.get() : null;
         if (recorder == null)
             return false;
         return recorder.recordsLevel(level);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -117,7 +117,7 @@ public V run() throws E, SuspendExecution, InterruptedException {
         // the second call inside Fiber.park
         Fiber.verifySuspend(fiber);
 
-        fiber.record(1, "FiberAsync", "run", "Blocking fiber %s on FibeAsync %s", fiber, this);
+        fiber.record(1, "FiberAsync", "run", "Blocking fiber %s on FiberAsync %s", fiber, this);
         while (!Fiber.park(this, new Fiber.ParkAction() {
             @Override
             public void run(Fiber current) {

File: quasar-core/src/main/java/co/paralleluniverse/strands/Strand.java
Patch:
@@ -1029,7 +1029,7 @@ public void join() throws InterruptedException {
         public void join(long timeout, TimeUnit unit) throws ExecutionException, InterruptedException, TimeoutException {
             long nanos = unit.toNanos(timeout);
             long millis = TimeUnit.MILLISECONDS.convert(nanos, TimeUnit.NANOSECONDS);
-            thread.join(millis, (int) (nanos - millis));
+            thread.join(millis, (int) (nanos - TimeUnit.MILLISECONDS.toNanos(millis)));
             if (thread.isAlive())
                 throw new TimeoutException();
         }

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxGlobalRegistry.java
Patch:
@@ -110,7 +110,7 @@ protected Void run() throws SuspendExecution, InterruptedException {
     private void unregister0(ActorRef<?> actor) throws SuspendExecution {
         final String rootName = actor.getName();
 
-        LOG.info("Uregistering {}", rootName);
+        LOG.info("Unregistering {}", rootName);
 
         final Store store = grid.store();
 

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxGlobalRegistry.java
Patch:
@@ -110,7 +110,7 @@ protected Void run() throws SuspendExecution, InterruptedException {
     private void unregister0(ActorRef<?> actor) throws SuspendExecution {
         final String rootName = actor.getName();
 
-        LOG.info("Uregistering {}", rootName);
+        LOG.info("Unregistering {}", rootName);
 
         final Store store = grid.store();
 

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxGlobalRegistry.java
Patch:
@@ -110,7 +110,7 @@ protected Void run() throws SuspendExecution, InterruptedException {
     private void unregister0(ActorRef<?> actor) throws SuspendExecution {
         final String rootName = actor.getName();
 
-        LOG.info("Uregistering {}", rootName);
+        LOG.info("Unregistering {}", rootName);
 
         final Store store = grid.store();
 

File: quasar-actors/src/main/java/co/paralleluniverse/actors/Actor.java
Patch:
@@ -947,7 +947,7 @@ public final void unwatch(ActorRef other, Object watchId) {
      * @param name the name of the actor in the registry, must be equal to the {@link #getName() actor's name} if it has one.
      * @return {@code this}
      */
-    public final Actor register(String name) throws SuspendExecution {
+    public final Actor<Message, V> register(String name) throws SuspendExecution {
         if (getName() == null)
             setName(name);
         else if (!getName().equals(name))

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ActorRef.java
Patch:
@@ -77,6 +77,7 @@ public void send(Message message) throws SuspendExecution {
                 x.throwIn(e);
             }
         } catch (RuntimeException e) {
+            e.printStackTrace();
             LostActor.instance.ref().send(message);
             LostActor.instance.throwIn(e);
         }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/RemoteActorProxyFactoryService.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxMigrator.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by
@@ -34,7 +34,7 @@ public class GlxMigrator implements Migrator {
 
     public GlxMigrator() {
         try {
-            this.grid = new Grid(co.paralleluniverse.galaxy.Grid.getInstance());
+            this.grid = Grid.getInstance();
             this.store = grid.store();
         } catch (InterruptedException ex) {
             throw new RuntimeException(ex);

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxNonGlobalRemoteActor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by
@@ -35,7 +35,7 @@ public class GlxNonGlobalRemoteActor<Message> extends GlxRemoteActor<Message> {
 
     static {
         try {
-            grid = new Grid(co.paralleluniverse.galaxy.Grid.getInstance());
+            grid = Grid.getInstance();
             grid.cluster().addNodeChangeListener(new NodeChangeListener() {
                 @Override
                 public void nodeAdded(short id) {

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxRemoteActor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxRemoteActorProxyFactory.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxRemoteChannel.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by
@@ -53,7 +53,7 @@ public class GlxRemoteChannel<Message> implements SendPort<Message>, Serializabl
 
     static {
         try {
-            grid = new Grid(co.paralleluniverse.galaxy.Grid.getInstance());
+            grid = Grid.getInstance();
         } catch (InterruptedException ex) {
             throw new RuntimeException(ex);
         }

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/RemoteChannelReceiver.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by
@@ -67,7 +67,7 @@ private RemoteChannelReceiver(SendPort<Message> channel) {
         this.channel = channel;
         this.topic = topicGen.incrementAndGet();
         try {
-            new Grid(co.paralleluniverse.galaxy.Grid.getInstance()).cluster().addNodeChangeListener(new NodeChangeListener() {
+            Grid.getInstance().cluster().addNodeChangeListener(new NodeChangeListener() {
                 @Override
                 public void nodeAdded(short id) {
                 }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/DefaultSuspendableClassifier.java
Patch:
@@ -48,7 +48,7 @@ public SuspendableType isSuspendable(MethodDatabase db, String sourceName, Strin
             if (st != null)
                 return st;
 
-            // throws SuspendExceution
+            // throws SuspendExecution
             if (checkExceptions(methodExceptions))
                 return SuspendableType.SUSPENDABLE;
         } catch (Exception e) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -235,11 +235,11 @@ else if (isInvocationHandlerInvocation(min.owner, min.name))
                             else if (st == null) {
                                 db.log(LogLevel.WARNING, "Method not found in class - assuming suspendable: %s#%s%s (at %s#%s)", min.owner, min.name, min.desc, className, mn.name);
                                 susp = true;
-                            } else if (susp) {
+                            } else if (susp && st != SuspendableType.SUSPENDABLE_SUPER) {
                                 db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s is suspendable", i, min.owner, min.name, min.desc);
                             }
                             if (st == SuspendableType.SUSPENDABLE_SUPER) {
-                                db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s to suspendable-super", i, min.owner, min.name, min.desc);
+                                db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s to suspendable-super (instrumentation for proxy support will be enabled)", i, min.owner, min.name, min.desc);
                                 this.callsSuspendableSupers = true;
                             }
                         }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/DefaultSuspendableClassifier.java
Patch:
@@ -48,7 +48,7 @@ public SuspendableType isSuspendable(MethodDatabase db, String sourceName, Strin
             if (st != null)
                 return st;
 
-            // throws SuspendExceution
+            // throws SuspendExecution
             if (checkExceptions(methodExceptions))
                 return SuspendableType.SUSPENDABLE;
         } catch (Exception e) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -235,11 +235,11 @@ else if (isInvocationHandlerInvocation(min.owner, min.name))
                             else if (st == null) {
                                 db.log(LogLevel.WARNING, "Method not found in class - assuming suspendable: %s#%s%s (at %s#%s)", min.owner, min.name, min.desc, className, mn.name);
                                 susp = true;
-                            } else if (susp) {
+                            } else if (susp && st != SuspendableType.SUSPENDABLE_SUPER) {
                                 db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s is suspendable", i, min.owner, min.name, min.desc);
                             }
                             if (st == SuspendableType.SUSPENDABLE_SUPER) {
-                                db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s to suspendable-super", i, min.owner, min.name, min.desc);
+                                db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s to suspendable-super (instrumentation for proxy support will be enabled)", i, min.owner, min.name, min.desc);
                                 this.callsSuspendableSupers = true;
                             }
                         }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -795,8 +795,8 @@ boolean exec() {
             if (!restored)
                 restoreThreadData(currentThread, old);
 
-            if (task instanceof FiberForkJoinTask)
-                ((FiberForkJoinTask) task).tryOnIdle((FiberForkJoinScheduler) scheduler);
+            if (scheduler instanceof FiberForkJoinScheduler)
+                ((FiberForkJoinScheduler) scheduler).tryOnIdle();
         }
     }
 

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxGlobalRegistry.java
Patch:
@@ -174,7 +174,7 @@ private <Message> ActorRef<Message> tryGetActor0(final String rootName) throws S
         final StoreTransaction txn = store.beginTransaction();
         try {
             try {
-                final long root = store.getRoot(rootName, null);
+                final long root = store.getRoot(rootName, txn);
                 byte[] buf = store.get(root);
                 if (buf == null) {
                     LOG.debug("Store returned null for root {}", rootName);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Stack.java
Patch:
@@ -147,7 +147,7 @@ record = setNumSlots(record, numSlots);
 //            dataLong[nextMethodIdx + i] = 0L;
 
         if (fiber.isRecordingLevel(2))
-            fiber.record(2, "Stack", "pushMethod     ", "%s %s %s %s %d", Thread.currentThread().getStackTrace()[2], entry, sp /*Arrays.toString(fiber.getStackTrace())*/);
+            fiber.record(2, "Stack", "pushMethod     ", "%s %d %d", Thread.currentThread().getStackTrace()[2], entry, sp /*Arrays.toString(fiber.getStackTrace())*/);
     }
 
     public final void popMethod() {
@@ -174,7 +174,7 @@ final long record = dataLong[idx];
         sp = newSP;
 
         if (fiber.isRecordingLevel(2))
-            fiber.record(2, "Stack", "popMethod      ", "%s %s %s", Thread.currentThread().getStackTrace()[2], sp /*Arrays.toString(fiber.getStackTrace())*/);        
+            fiber.record(2, "Stack", "popMethod      ", "%s %d", Thread.currentThread().getStackTrace()[2], sp /*Arrays.toString(fiber.getStackTrace())*/);        
     }
 
     public final void postRestore() throws SuspendExecution, InterruptedException {

File: quasar-core/src/main/java/co/paralleluniverse/strands/dataflow/Var.java
Patch:
@@ -228,6 +228,7 @@ private static class VarFiber<T> extends Fiber<Void> {
         }
 
         void signalNewValue(Var var) {
+            Var.record("signalNewValue", "Fiber %s for var %s signalled by %s", this, this.var, var);
             hasNewVal = true;
             unpark(var);
         }
@@ -254,6 +255,7 @@ protected Void run() throws SuspendExecution, InterruptedException {
                 if (v != null)
                     v.ch.close(t);
             } finally {
+                Var.record("run", "Fiber %s for var %s terminated", this, var);
                 for (Var<?> v1 : registeredVars) {
                     v1.registeredFibers.remove(this);
                     v1.notifyRegistered();

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -786,6 +786,7 @@ boolean exec() {
                 }
             } finally {
                 state = State.TERMINATED;
+                task.setState(0);
                 monitorFiberTerminated(monitor);
                 setException(t);
             }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -786,6 +786,7 @@ boolean exec() {
                 }
             } finally {
                 state = State.TERMINATED;
+                task.setState(0);
                 monitorFiberTerminated(monitor);
                 setException(t);
             }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ActorRegistry.java
Patch:
@@ -50,7 +50,8 @@ static Object register(Actor<?, ?> actor, Object globalId) throws SuspendExecuti
 
         actor.preRegister(name);
         final Object res = registry.register(actor.ref0(), globalId);
-
+        actor.postRegister();
+        
         actor.monitor();
         return res;
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -933,7 +933,7 @@ private void switchFiberAndThreadLocals(Thread currentThread, boolean install) {
 
         if (isRecordingLevel(2)) {
             record(2, "Fiber", "switchFiberAndThreadLocals", "fiberLocals: %s", ThreadUtil.getThreadLocalsString(install ? this.fiberLocals : tmpThreadLocals));
-            record(2, "Fiber", "switchFiberAndThreadLocals", "inheritableFilberLocals: %s", ThreadUtil.getThreadLocalsString(install ? this.inheritableFiberLocals : tmpInheritableThreadLocals));
+            record(2, "Fiber", "switchFiberAndThreadLocals", "inheritableFiberLocals: %s", ThreadUtil.getThreadLocalsString(install ? this.inheritableFiberLocals : tmpInheritableThreadLocals));
         }
 
         ThreadAccess.setThreadLocals(currentThread, this.fiberLocals);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
Patch:
@@ -232,7 +232,7 @@ public void visitEnd() {
         if (methods != null && !methods.isEmpty()) {
             if (alreadyInstrumented && !forceInstrumentation) {
                 for (MethodNode mn : methods) {
-                    db.log(LogLevel.INFO, "Alredy instrumented and not forcing, so not touching method %s#%s%s", className, mn.name, mn.desc);
+                    db.log(LogLevel.INFO, "Already instrumented and not forcing, so not touching method %s#%s%s", className, mn.name, mn.desc);
                     mn.accept(makeOutMV(mn));
                 }
             } else {

File: quasar-kotlin/src/main/java/co/paralleluniverse/actors/KotlinActorSupport.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2015, Parallel Universe Software Co. All rights reserved.
  *
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendablesScanner.java
Patch:
@@ -533,6 +533,7 @@ private void followBridges(Queue<MethodNode> q, ClassNode cls, MethodNode method
                 MethodNode m = getOrCreateMethodNode(cls.name + '.' + m1);
                 if (m.suspendType != SuspendableType.SUSPENDABLE && m.suspendType != SuspendableType.SUSPENDABLE_SUPER) {
                     m.setSuspendType(SuspendableType.SUSPENDABLE_SUPER);
+                    m.inProject = method.inProject;
                     q.add(m);
                 }
             }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -1631,15 +1631,14 @@ private static boolean checkInstrumentation(ExtendedStackTrace st) {
                 continue;
 
             if (!ste.getClassName().equals(Fiber.class.getName()) && !ste.getClassName().startsWith(Fiber.class.getName() + '$')
-                    && !ste.getClassName().equals(Stack.class.getName())) {
+                    && !ste.getClassName().equals(Stack.class.getName()) && !SuspendableHelper.isWaiver(ste.getClassName(), ste.getMethodName())) {
                 final Class<?> clazz = ste.getDeclaringClass();
                 boolean classInstrumented = SuspendableHelper.isInstrumented(clazz);
                 final /*Executable*/ Member m = SuspendableHelper.lookupMethod(ste);
                 if (m != null) {
                     boolean methodInstrumented = SuspendableHelper.isInstrumented(m);
                     Pair<Boolean, int[]> callSiteInstrumented = SuspendableHelper.isCallSiteInstrumented(m, ste.getLineNumber(), stes, i);
-                    if (!SuspendableHelper.isWaiver(ste.getClassName(), ste.getMethodName())
-                            && (!classInstrumented || !methodInstrumented || !callSiteInstrumented.getFirst())) {
+                    if (!classInstrumented || !methodInstrumented || !callSiteInstrumented.getFirst()) {
                         if (ok)
                             stackTrace = initTrace(i, stes);
 

File: quasar-core/src/test/java/co/paralleluniverse/common/util/ExtendedStackTraceTest.java
Patch:
@@ -115,7 +115,7 @@ else if (!skipJunit(plain[i]))
 
     private boolean skipJunit(ExtendedStackTraceElement este) {
         final String name = este.getClassName();
-        return name.contains("junit.") || name.contains("gradle.") || name.contains("com.sun.proxy");
+        return name.contains("junit.") || name.contains("gradle.") || name.contains("com.sun.proxy") || name.contains("sun.reflect.Generated");
     }
 
     private static class A {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -55,7 +55,8 @@
 import com.esotericsoftware.kryo.io.Input;
 import com.esotericsoftware.kryo.io.Output;
 import com.esotericsoftware.kryo.serializers.FieldSerializer;
-import java.lang.reflect.Executable;
+// import java.lang.reflect.Executable;
+import java.lang.reflect.Member;
 
 /**
  * A lightweight thread.
@@ -1633,7 +1634,7 @@ private static boolean checkInstrumentation(ExtendedStackTrace st) {
                     && !ste.getClassName().equals(Stack.class.getName())) {
                 final Class<?> clazz = ste.getDeclaringClass();
                 boolean classInstrumented = SuspendableHelper.isInstrumented(clazz);
-                final Executable m = SuspendableHelper.lookupMethod(ste);
+                final /*Executable*/ Member m = SuspendableHelper.lookupMethod(ste);
                 if (m != null) {
                     boolean methodInstrumented = SuspendableHelper.isInstrumented(m);
                     Pair<Boolean, int[]> callSiteInstrumented = SuspendableHelper.isCallSiteInstrumented(m, ste.getLineNumber(), stes, i);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Instrumented.java
Patch:
@@ -19,7 +19,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Instrumented {
     // Relevant only for methods
-    int[] suspendableCallsites() default {};
+    int[] suspendableCallSites() default {};
     int methodStart() default -1;
     int methodEnd() default -1;
     boolean methodOptimized() default false;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableHelper.java
Patch:
@@ -73,9 +73,9 @@ public static Pair<Boolean, int[]> isCallSiteInstrumented(Method m, int sourceLi
         } else {
             Instrumented i = m.getAnnotation(Instrumented.class);
             if (i != null) {
-                for(int j : i.suspendableCallsites()) {
+                for(int j : i.suspendableCallSites()) {
                     if (j == sourceLine)
-                        return new Pair<>(true, i.suspendableCallsites());
+                        return new Pair<>(true, i.suspendableCallSites());
                 }
             }
         }

File: quasar-core/src/main/java/co/paralleluniverse/common/monitoring/MonitoringServices.java
Patch:
@@ -12,7 +12,6 @@
  */
 package co.paralleluniverse.common.monitoring;
 
-import co.paralleluniverse.concurrent.util.ThreadUtil;
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadMXBean;
 import java.util.Date;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentationTask.java
Patch:
@@ -151,7 +151,7 @@ public void log(LogLevel level, String msg, Object... args) {
                 }
 
                 @Override
-                public void error(String msg, Exception ex) {
+                public void error(String msg, Throwable ex) {
                     InstrumentationTask.this.log("ERROR: " + msg, ex, Project.MSG_ERR);
                 }
             });

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Log.java
Patch:
@@ -34,5 +34,5 @@
 public interface Log {
     public void log(LogLevel level, String msg, Object ... args);
     
-    public void error(String msg, Exception ex);
+    public void error(String msg, Throwable ex);
 }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java
Patch:
@@ -156,7 +156,7 @@ public void log(LogLevel level, String msg, Object... args) {
     }
 
     @Override
-    public void error(String msg, Exception ex) {
+    public void error(String msg, Throwable ex) {
         if (log != null)
             log.error(msg, ex);
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -101,7 +101,7 @@ private byte[] instrumentClass(String className, ClassReader r, boolean forceIns
         ClassVisitor cv = (check && EXAMINED_CLASS == null) ? new CheckClassAdapter(cw) : cw;
 
         if (EXAMINED_CLASS != null && className.startsWith(EXAMINED_CLASS))
-            cv = new TraceClassVisitor(cv, new PrintWriter(System.out));
+            cv = new TraceClassVisitor(cv, new PrintWriter(System.err));
 
         final InstrumentClass ic = new InstrumentClass(cv, db, forceInstrumentation);
         byte[] transformed = null;
@@ -176,7 +176,7 @@ public void log(LogLevel level, String msg, Object... args) {
         db.log(level, msg, args);
     }
 
-    public void error(String msg, Exception ex) {
+    public void error(String msg, Throwable ex) {
         db.error(msg, ex);
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Retransform.java
Patch:
@@ -103,9 +103,9 @@ static void afterTransform(String className, Class clazz, byte[] data) {
     }
 
     public static void dumpClass(String className, byte[] data) {
-        System.out.println("DUMP OF CLASS: " + className);
+        System.err.println("DUMP OF CLASS: " + className);
         ClassReader cr = new ClassReader(data);
-        ClassVisitor cv = new TraceClassVisitor(null, new Textifier(), new PrintWriter(System.out));
+        ClassVisitor cv = new TraceClassVisitor(null, new Textifier(), new PrintWriter(System.err));
         cr.accept(cv, ClassReader.SKIP_FRAMES);
         System.out.println("=================");
     }

File: quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java
Patch:
@@ -67,7 +67,7 @@ public void log(LogLevel level, String msg, Object... args) {
                 }
             }
 
-            public void error(String msg, Exception ex) {
+            public void error(String msg, Throwable ex) {
                 throw new Error(msg, ex);
             }
         });

File: quasar-core/src/main/java/co/paralleluniverse/common/monitoring/MonitoringServices.java
Patch:
@@ -12,7 +12,6 @@
  */
 package co.paralleluniverse.common.monitoring;
 
-import co.paralleluniverse.concurrent.util.ThreadUtil;
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadMXBean;
 import java.util.Date;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentationTask.java
Patch:
@@ -151,7 +151,7 @@ public void log(LogLevel level, String msg, Object... args) {
                 }
 
                 @Override
-                public void error(String msg, Exception ex) {
+                public void error(String msg, Throwable ex) {
                     InstrumentationTask.this.log("ERROR: " + msg, ex, Project.MSG_ERR);
                 }
             });

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Log.java
Patch:
@@ -34,5 +34,5 @@
 public interface Log {
     public void log(LogLevel level, String msg, Object ... args);
     
-    public void error(String msg, Exception ex);
+    public void error(String msg, Throwable ex);
 }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java
Patch:
@@ -156,7 +156,7 @@ public void log(LogLevel level, String msg, Object... args) {
     }
 
     @Override
-    public void error(String msg, Exception ex) {
+    public void error(String msg, Throwable ex) {
         if (log != null)
             log.error(msg, ex);
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -101,7 +101,7 @@ private byte[] instrumentClass(String className, ClassReader r, boolean forceIns
         ClassVisitor cv = (check && EXAMINED_CLASS == null) ? new CheckClassAdapter(cw) : cw;
 
         if (EXAMINED_CLASS != null && className.startsWith(EXAMINED_CLASS))
-            cv = new TraceClassVisitor(cv, new PrintWriter(System.out));
+            cv = new TraceClassVisitor(cv, new PrintWriter(System.err));
 
         final InstrumentClass ic = new InstrumentClass(cv, db, forceInstrumentation);
         byte[] transformed = null;
@@ -176,7 +176,7 @@ public void log(LogLevel level, String msg, Object... args) {
         db.log(level, msg, args);
     }
 
-    public void error(String msg, Exception ex) {
+    public void error(String msg, Throwable ex) {
         db.error(msg, ex);
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Retransform.java
Patch:
@@ -103,9 +103,9 @@ static void afterTransform(String className, Class clazz, byte[] data) {
     }
 
     public static void dumpClass(String className, byte[] data) {
-        System.out.println("DUMP OF CLASS: " + className);
+        System.err.println("DUMP OF CLASS: " + className);
         ClassReader cr = new ClassReader(data);
-        ClassVisitor cv = new TraceClassVisitor(null, new Textifier(), new PrintWriter(System.out));
+        ClassVisitor cv = new TraceClassVisitor(null, new Textifier(), new PrintWriter(System.err));
         cr.accept(cv, ClassReader.SKIP_FRAMES);
         System.out.println("=================");
     }

File: quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java
Patch:
@@ -67,7 +67,7 @@ public void log(LogLevel level, String msg, Object... args) {
                 }
             }
 
-            public void error(String msg, Exception ex) {
+            public void error(String msg, Throwable ex) {
                 throw new Error(msg, ex);
             }
         });

File: quasar-reactive-streams/src/main/java/co/paralleluniverse/strands/channels/reactivestreams/ReactiveStreams.java
Patch:
@@ -39,7 +39,7 @@ public class ReactiveStreams {
     public static <T> ReceivePort<T> subscribe(int bufferSize, OverflowPolicy policy, Publisher<T> publisher) {
         ChannelSubscriber<T> sub = new ChannelSubscriber<>(bufferSize, policy);
         publisher.subscribe(sub);
-        return new ChannelSubscriber<>(bufferSize, policy);
+        return sub;
     }
 
     /**

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/QueueChannel.java
Patch:
@@ -28,7 +28,6 @@
 import co.paralleluniverse.strands.Timeout;
 import co.paralleluniverse.strands.channels.Channels.OverflowPolicy;
 import co.paralleluniverse.strands.queues.BasicQueue;
-import co.paralleluniverse.strands.queues.BasicSingleConsumerQueue;
 import co.paralleluniverse.strands.queues.CircularBuffer;
 import co.paralleluniverse.strands.queues.QueueCapacityExceededException;
 import java.util.concurrent.TimeUnit;
@@ -282,7 +281,7 @@ public boolean isClosed() {
         if (receiveClosed)
             return true;
         // racy, but that's OK because we don't guarantee anything if we return false
-        if (sendClosed && queue instanceof BasicSingleConsumerQueue && !((BasicSingleConsumerQueue) queue).hasNext()) {
+        if (sendClosed && queue.isEmpty()) {
             setReceiveClosed();
             return true;
         }

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/BasicQueue.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Quasar: lightweight threads and actors for the JVM.
- * Copyright (c) 2013-2014, Parallel Universe Software Co. All rights reserved.
+ * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by
@@ -25,4 +25,6 @@ public interface BasicQueue<E> {
     E poll();
     
     int size();
+    
+    boolean isEmpty();
 }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/TypeInterpreter.java
Patch:
@@ -99,7 +99,7 @@ public BasicValue binaryOperation(AbstractInsnNode insn, BasicValue value1, Basi
     @Override
     public BasicValue merge(BasicValue v, BasicValue w) {
         if (!v.equals(w)) {
-            db.log(LogLevel.DEBUG, "merge: %s %s", v, w);
+            // db.log(LogLevel.DEBUG, "merge: %s %s", v, w);
             if (v.isReference() && w.isReference()) {
                 int dimensions = 0;
                 Type typeV = v.getType();

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/SupervisorActor.java
Patch:
@@ -603,7 +603,7 @@ private void shutdownChild(ChildEntry child, boolean beforeRestart) throws Suspe
                 try {
                     joinChild(child);
                 } finally {
-                    if (!beforeRestart)
+                    if (!beforeRestart && child.actor != null)
                         LocalActor.stopMonitor(child.actor);
                 }
             }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/LocalActor.java
Patch:
@@ -27,8 +27,8 @@
  * With the exception of the {@link #self()} method, application code shouldn't normally use these methods.
  * They are provided mainly for testing, and defining sophisticated behaviors.
  * <p/>
- * These services are provided as static methods rather than return a reference to the actor reference to the actor itself should not
- * leak outside the actor itself.
+ * These services are provided as static methods rather than return a reference to the actor, as references to the actor
+ * should not leak outside the actor itself.
  *
  * @author pron
  */

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SimpleSuspendableClassifier.java
Patch:
@@ -155,7 +155,7 @@ public SuspendableType isSuspendable(MethodDatabase db, String sourceName, Strin
         if (interfaces != null) {
             for (String iface : interfaces) {
                 MethodDatabase.ClassEntry ce = db.getOrLoadClassEntry(iface);
-                if (ce != null && isSuspendable(db, ce.getSourceName(), ce.getSourceDebugInfo(), ce.isIsInterface(), iface, ce.getSuperName(), ce.getInterfaces(), methodName, methodDesc, methodSignature, methodExceptions) == SuspendableType.SUSPENDABLE)
+                if (ce != null && isSuspendable(db, ce.getSourceName(), ce.getSourceDebugInfo(), ce.isInterface(), iface, ce.getSuperName(), ce.getInterfaces(), methodName, methodDesc, methodSignature, methodExceptions) == SuspendableType.SUSPENDABLE)
                     return SuspendableType.SUSPENDABLE;
             }
         }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java
Patch:
@@ -470,7 +470,7 @@ protected String getDirectSuperClass(String className) {
     }
 
     public static boolean isReflectInvocation(String className, String methodName) {
-        return className.equals("java/lang/reflect/Method") && methodName.equals("invoke");
+        return className != null && className.equals("java/lang/reflect/Method") && methodName != null && methodName.equals("invoke");
     }
 
     public static boolean isSyntheticAccess(String className, String methodName) {

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/SplitSendPort.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @author circlespainter
  */
-abstract class SplitSendPort<Message> implements SendPort<Message> {
+public abstract class SplitSendPort<Message> implements SendPort<Message> {
     private volatile boolean closed = false;
     
     /**

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -133,7 +133,7 @@ public static void premain(String agentArguments, Instrumentation instrumentatio
                         break;
 
                     default:
-                        throw new IllegalStateException("Usage: vdmc (verbose, debug, allow monitors, check class)");
+                        throw new IllegalStateException("Usage: vdmcbx (verbose, debug, allow monitors, check class, allow blocking, read debug info)");
                 }
             }
         }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/SchedulerLocal.java
Patch:
@@ -39,8 +39,7 @@ protected T initialValue(FiberScheduler scheduler) {
     /**
      * Returns the scheduler-local value of this {@code SchedulerLocal}.
      */
-    @Suspendable
-    public final T get() {
+    public final T get() throws SuspendExecution {
         final FiberScheduler scheduler = currentScheduler();
         final ConcurrentMap<SchedulerLocal, Entry<?>> map = scheduler.schedLocals;
         Entry<T> entry = (Entry<T>) map.get(this);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberAsyncIO.java
Patch:
@@ -57,7 +57,7 @@ protected AsynchronousChannelGroup initialValue(FiberScheduler scheduler) {
 //        return AsynchronousChannelGroup.withFixedThreadPool(1, NIO_THREAD_FACTORY);
 //    }
 
-    public static AsynchronousChannelGroup defaultGroup() throws IOException {
+    public static AsynchronousChannelGroup defaultGroup() throws IOException, SuspendExecution {
         // return null; // the default group
         return defaultGroup.get();
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberServerSocketChannel.java
Patch:
@@ -44,7 +44,7 @@ public class FiberServerSocketChannel implements NetworkChannel {
      * @return A new server socket channel
      * @throws IOException If an I/O error occurs
      */
-    public static FiberServerSocketChannel open() throws IOException {
+    public static FiberServerSocketChannel open() throws IOException, SuspendExecution {
         return new FiberServerSocketChannel(AsynchronousServerSocketChannel.open(FiberAsyncIO.defaultGroup()));
     }
 
@@ -66,7 +66,7 @@ public static FiberServerSocketChannel open() throws IOException {
      * @throws ShutdownChannelGroupException If the channel group is shutdown
      * @throws IOException                   If an I/O error occurs
      */
-    public static FiberServerSocketChannel open(AsynchronousChannelGroup group) throws IOException {
+    public static FiberServerSocketChannel open(AsynchronousChannelGroup group) throws IOException, SuspendExecution {
         return new FiberServerSocketChannel(AsynchronousServerSocketChannel.open(group != null ? group : FiberAsyncIO.defaultGroup()));
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberSocketChannel.java
Patch:
@@ -51,7 +51,7 @@ public class FiberSocketChannel implements ByteChannel, ScatteringByteChannel, G
      * @return A new socket channel
      * @throws IOException If an I/O error occurs
      */
-    public static FiberSocketChannel open() throws IOException {
+    public static FiberSocketChannel open() throws IOException, SuspendExecution {
         return new FiberSocketChannel(AsynchronousSocketChannel.open(FiberAsyncIO.defaultGroup()));
     }
 
@@ -70,7 +70,7 @@ public static FiberSocketChannel open() throws IOException {
      * @throws ShutdownChannelGroupException If the channel group is shutdown
      * @throws IOException                   If an I/O error occurs
      */
-    public static FiberSocketChannel open(AsynchronousChannelGroup group) throws IOException {
+    public static FiberSocketChannel open(AsynchronousChannelGroup group) throws IOException, SuspendExecution {
         return new FiberSocketChannel(AsynchronousSocketChannel.open(group != null ? group : FiberAsyncIO.defaultGroup()));
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberScheduler.java
Patch:
@@ -15,7 +15,9 @@
 
 import co.paralleluniverse.common.monitoring.MonitorType;
 import co.paralleluniverse.strands.SuspendableCallable;
+import com.google.common.collect.MapMaker;
 import java.util.Map;
+import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
@@ -29,6 +31,7 @@ public abstract class FiberScheduler implements FiberFactory {
     static final FibersMonitor NOOP_FIBERS_MONITOR = new NoopFibersMonitor();
     private final String name;
     private final FibersMonitor fibersMonitor;
+    final ConcurrentMap<SchedulerLocal, SchedulerLocal.Entry<?>> schedLocals = new MapMaker().weakKeys().makeMap();
 
     FiberScheduler(String name, MonitorType monitorType, boolean detailedInfo) {
         this.name = name;

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TransformingSendPort.java
Patch:
@@ -39,7 +39,7 @@ public class TransformingSendPort<T> extends DelegatingSendPort<T> {
      * @param strandFactory The {@link StrandFactory} that will build send strands when the {@link SendPort} would block.
      * @return a {@link FixedTapSendPort} that will always forward to a single {@code forwardTo}.
      */
-    public TransformingSendPort<T> fixedTap(final SendPort<? super T> forwardTo, final StrandFactory strandFactory) {
+    public TransformingSendPort<T> tap(final SendPort<? super T> forwardTo, final StrandFactory strandFactory) {
         return Channels.transformSend(Channels.tapSend(this, forwardTo, strandFactory));
     }
 
@@ -52,7 +52,7 @@ public TransformingSendPort<T> fixedTap(final SendPort<? super T> forwardTo, fin
      * @param forwardTo     The additional {@link SendPort} that will receive messages.
      * @return a {@link FixedTapReceivePort} that will always forward to a single {@code forwardTo}.
      */
-    public TransformingSendPort<T> fixedTap(final SendPort<? super T> forwardTo) {
+    public TransformingSendPort<T> tap(final SendPort<? super T> forwardTo) {
         return Channels.transformSend(Channels.tapSend(this, forwardTo));
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TransformingSendPort.java
Patch:
@@ -39,7 +39,7 @@ public class TransformingSendPort<T> extends DelegatingSendPort<T> {
      * @return a {@link FixedTapSendPort} that will always forward to a single {@code forwardTo}.
      */
     public static <M> TransformingSendPort<M> fixedTap(final SendPort<M> target, final SendPort<? super M> forwardTo, final StrandFactory strandFactory) {
-        return Channels.transformSend(Channels.fixedSendTap(target, forwardTo, strandFactory));
+        return Channels.transformSend(Channels.tapSend(target, forwardTo, strandFactory));
     }
 
     /**
@@ -51,7 +51,7 @@ public static <M> TransformingSendPort<M> fixedTap(final SendPort<M> target, fin
      * @return a {@link FixedTapReceivePort} that will always forward to a single {@code forwardTo}.
      */
     public static <M> TransformingSendPort<M> fixedTap(final SendPort<M> target, final SendPort<? super M> forwardTo) {
-        return Channels.transformSend(Channels.fixedSendTap(target, forwardTo));
+        return Channels.transformSend(Channels.tapSend(target, forwardTo));
     }
 
     /**

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/Channels.java
Patch:
@@ -533,7 +533,7 @@ public Void run() throws SuspendExecution, InterruptedException {
                     out.close();
                 } catch (ProducerException e) {
                     out.close(e.getCause());
-                } catch (SuspendExecution | InterruptedException t) {
+                } catch (Throwable t) {
                     out.close(t);
                 }
                 return null;

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/FixedTapReceivePort.java
Patch:
@@ -23,7 +23,7 @@
 public class FixedTapReceivePort<Message> extends TapReceivePort<Message> {
     private final SendPort<? super Message> forwardTo;
 
-    public FixedTapReceivePort(final ReceivePort<Message> target, final StrandFactory strandFactory, final SendPort<? super Message> forwardTo) {
+    public FixedTapReceivePort(final ReceivePort<Message> target, final SendPort<? super Message> forwardTo, final StrandFactory strandFactory) {
         super(target, strandFactory);
         this.forwardTo = forwardTo;
     }

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TapReceivePort.java
Patch:
@@ -20,7 +20,7 @@
 import co.paralleluniverse.strands.SuspendableUtils;
 
 /**
- * Receive transformer that will forward messages it receive to a target {@link SendPort}. oncrete subclasses will need to implement {@code select} yielding
+ * Receive transformer that will forward messages it sends to a target {@link SendPort}. Concrete subclasses will need to implement {@code select} yielding
  * {@link SendPort} to forward the message to.
  * <p/>
  * @author circlespainter

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/ChannelBasicOps.java
Patch:
@@ -31,7 +31,7 @@ public class ChannelBasicOps {
      * <p/>
      * @return The collection of the received elements.
      */
-    public static <Message> List<Message> receive(final ReceivePort<Message> from, int n) throws SuspendExecution, InterruptedException {
+    public static <Message> List<Message> receive(final ReceivePort<? extends Message> from, int n) throws SuspendExecution, InterruptedException {
         final List<Message> ret = new ArrayList<>();
         for(int i = 0 ; i < n ; i++) {
             final Message val = from.receive();
@@ -48,7 +48,7 @@ public static <Message> List<Message> receive(final ReceivePort<Message> from, i
      * <p/>
      * @return The number of sent elements.
      */
-    public static <Message> int send(Iterator<Message> it, final SendPort<Message> to) throws SuspendExecution, InterruptedException {
+    public static <Message> int send(Iterator<Message> it, final SendPort<? super Message> to) throws SuspendExecution, InterruptedException {
         int sent = 0;
         while(it.hasNext()) {
             to.send(it.next());

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/DelegatingChannel.java
Patch:
@@ -26,13 +26,13 @@
  * @author circlespainter
  */
 public class DelegatingChannel<Message> extends DelegatingSendPort<Message> implements Channel<Message> {
-    private final DelegatingReceivePort<Message> delegateReceivePort;
-    private final Port<Message> equalsTarget;
+    private final DelegatingReceivePort<? extends Message> delegateReceivePort;
+    private final Port<?> equalsTarget;
 
     /**
      * @param equalsTarget  When delegating to potentially distinct send port and receive port, the equals behaviour must be explicitly specified.
      */
-    public DelegatingChannel(final SendPort<Message> sendPort, final ReceivePort<Message> receivePort, final Port<Message> equalsTarget) {
+    public DelegatingChannel(final SendPort<Message> sendPort, final ReceivePort<? extends Message> receivePort, final Port<?> equalsTarget) {
         super(sendPort);
         this.delegateReceivePort = new DelegatingReceivePort<>(receivePort);
         this.equalsTarget = equalsTarget;

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/ParallelTopic.java
Patch:
@@ -131,7 +131,7 @@ public void run() throws SuspendExecution, InterruptedException {
                             public void run() throws SuspendExecution, InterruptedException {
                                 sub.send(m);
                             }
-                        }));
+                        })).start();
                         if (staged)
                             stage.add(f);
                     }
@@ -147,6 +147,6 @@ public void run() throws SuspendExecution, InterruptedException {
                     }
                 }
             }
-        }));
+        })).start();
     }
 }

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TapReceivePort.java
Patch:
@@ -88,7 +88,7 @@ protected Message transform(final Message m) {
                 public void run() throws SuspendExecution, InterruptedException {
                     actualForwardTo.send(m);
                 }
-            }));
+            })).start();
         return m;
     }
 }

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TapReceivePort.java
Patch:
@@ -82,7 +82,7 @@ public TapReceivePort(final ReceivePort<Message> target, final SendPort<Message>
     @Override
     protected Message transform(final Message m) {
         final SendPort<Message> actualForwardTo = (selector != null ? selector.apply(m) : forwardTo);
-        if (!forwardTo.trySend(m))
+        if (actualForwardTo != null && !actualForwardTo.trySend(m))
             strandFactory.newStrand(SuspendableUtils.runnableToCallable(new SuspendableRunnable() {
                 @Override
                 public void run() throws SuspendExecution, InterruptedException {

File: quasar-core-jdk8/src/main/java/co/paralleluniverse/concurrent/forkjoin/ForkJoinUtil.java
Patch:
@@ -12,11 +12,11 @@
  */
 package co.paralleluniverse.concurrent.forkjoin;
 
-import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.ExecutorService;
 import java.util.concurrent.ForkJoinTask;
 
 public final class ForkJoinUtil {
-    public static ForkJoinPool getPool() {
+    public static ExecutorService getPool() {
         return ForkJoinTask.getPool();
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/concurrent/forkjoin/ForkJoinUtil.java
Patch:
@@ -12,11 +12,11 @@
  */
 package co.paralleluniverse.concurrent.forkjoin;
 
-import jsr166e.ForkJoinPool;
+import java.util.concurrent.ExecutorService;
 import jsr166e.ForkJoinTask;
 
 public final class ForkJoinUtil {
-    public static ForkJoinPool getPool() {
+    public static ExecutorService getPool() {
         return ForkJoinTask.getPool();
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -104,7 +104,6 @@ public static void premain(String agentArguments, Instrumentation instrumentatio
 
         final ClassLoader cl = Thread.currentThread().getContextClassLoader();
         final QuasarInstrumentor instrumentor = new QuasarInstrumentor(false, cl, new DefaultSuspendableClassifier(cl));
-        boolean checkArg = false;
         active = true;
         SuspendableHelper.javaAgent = true;
 
@@ -124,7 +123,7 @@ public static void premain(String agentArguments, Instrumentation instrumentatio
                         break;
 
                     case 'c':
-                        checkArg = true;
+                        instrumentor.setCheck(true);
                         break;
 
                     case 'b':

File: quasar-core/src/main/java/co/paralleluniverse/strands/SuspendableCallable.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * This interface can represent any operation that may suspend the currently executing {@link Strand} (i.e. thread or fiber).
- * Unlike {@link SuspendableCallable}, the operation represented by this interface returns a result. 
+ * Unlike {@link SuspendableRunnable}, the operation represented by this interface returns a result.
  * This is just like a {@link java.util.concurrent.Callable}, only suspendable.
  * 
  * @author pron

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/SingleConsumerArrayObjectQueue.java
Patch:
@@ -42,13 +42,13 @@ public boolean enq(E item) {
         final long i = preEnq();
         if (i < 0)
             return false;
-        orderedSet((int) i & mask, item); // volatile set
+        volatileSet((int) i & mask, item);
         return true;
     }
 
     @Override
     boolean hasNext(long lind, int iind) {
-        return array[iind] != null;
+        return get(iind) != null;
     }
 
     @SuppressWarnings("empty-statement")

File: quasar-actors/src/main/java/co/paralleluniverse/actors/LocalActorRegistry.java
Patch:
@@ -59,6 +59,8 @@ public Object register(ActorRef<?> actor, Object globalId) {
 
             if (registeredActors.putIfAbsent(name, actor) != null)
                 throw new RegistrationException("Concurrent registration under the name " + name);
+            
+            cond.signalAll();
         } finally {
             lock.unlock();
         }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/ProxyServerActor.java
Patch:
@@ -47,7 +47,7 @@
  *
  * @author pron
  */
-public final class ProxyServerActor extends ServerActor<ProxyServerActor.Invocation, Object, ProxyServerActor.Invocation> {
+public class ProxyServerActor extends ServerActor<ProxyServerActor.Invocation, Object, ProxyServerActor.Invocation> {
     private final Class<?>[] interfaces;
     private Object target;
     private final boolean callOnVoidMethods;

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/RequestReplyHelper.java
Patch:
@@ -29,7 +29,6 @@
 import co.paralleluniverse.strands.Strand;
 import co.paralleluniverse.strands.Timeout;
 import co.paralleluniverse.strands.channels.Channels.OverflowPolicy;
-import java.lang.ref.WeakReference;
 import java.util.Objects;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarURLClassLoader.java
Patch:
@@ -104,7 +104,7 @@ public Class run() throws ClassNotFoundException {
     @Override
     public InputStream getResourceAsStream(String name) {
         InputStream is = super.getResourceAsStream(name);
-        if (name.endsWith(".class")) {
+        if (is != null && name.endsWith(".class")) {
             try {
                 byte[] bytes = ByteStreams.toByteArray(is);
                 byte[] instrumented = instrumentor.instrumentClass(name.substring(0, name.length() - ".class".length()), bytes);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarURLClassLoaderHelper.java
Patch:
@@ -94,7 +94,7 @@ public Class run() throws ClassNotFoundException {
     }
 
     public InputStream instrumentResourceStream(String resourceName, InputStream is) {
-        if (resourceName.endsWith(".class")) {
+        if (is != null && resourceName.endsWith(".class")) {
             try {
                 byte[] bytes = ByteStreams.toByteArray(is);
                 byte[] instrumented = instrumentor.instrumentClass(resourceName.substring(0, resourceName.length() - ".class".length()), bytes);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SimpleSuspendableClassifier.java
Patch:
@@ -130,6 +130,8 @@ public SuspendableType isSuspendable(MethodDatabase db, String className, String
             return SuspendableType.SUSPENDABLE;
         if (suspendableClasses.contains(className))
             return SuspendableType.SUSPENDABLE;
+        if (suspendableSupers.contains(fullMethodName + methodDesc))
+            return SuspendableType.SUSPENDABLE_SUPER;
         if (suspendableSupers.contains(fullMethodName))
             return SuspendableType.SUSPENDABLE_SUPER;
         if (suspendableSuperInterfaces.contains(className))

File: quasar-core/src/test/java/co/paralleluniverse/common/reflection/ClassLoaderUtilTKB.java
Patch:
@@ -26,12 +26,12 @@ public static void main(String[] args) throws Exception {
         File f = new File("build/libs/quasar-core-0.4.0-SNAPSHOT.jar");
         System.out.println(f.exists());
         URLClassLoader cl = new URLClassLoader(new URL[]{f.toURI().toURL()});
-        ClassLoaderUtil.accept(cl, new ClassLoaderUtil.Visitor() {
+        ClassLoaderUtil.accept(cl, false, new ClassLoaderUtil.Visitor() {
 
             @Override
             public void visit(String resource, URL url, ClassLoader cl) {
                 System.out.println("- " + resource + " " + url);
             }
-        },false);
+        });
     }
 }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ActorRegistry.java
Patch:
@@ -48,7 +48,7 @@ static Object register(Actor<?, ?> actor, Object globalId) throws SuspendExecuti
         LOG.info("Registering {}: {}", name, actor);
 
         actor.preRegister(name);
-        final Object res = registry.register(actor.ref(), globalId);
+        final Object res = registry.register(actor.ref, globalId);
         
         actor.monitor();
         return res;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SimpleSuspendableClassifier.java
Patch:
@@ -46,7 +46,7 @@ public SimpleSuspendableClassifier(ClassLoader classLoader) {
     }
 
     SimpleSuspendableClassifier(String suspendablesFileName) {
-        readSuspendablesFile(suspendablesFileName, suspendables, suspendables);
+        readSuspendablesFile(suspendablesFileName, suspendables, suspendableClasses);
     }
 
     Set<String> getSuspendables() {

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/pingpong/Pong.java
Patch:
@@ -44,7 +44,6 @@ public static int runPong()  {
             System.setProperty("galaxy.nodeId", Integer.toString(nodeId));
             System.setProperty("galaxy.port", Integer.toString(7050 + nodeId));
             System.setProperty("galaxy.slave_port", Integer.toString(8050 + nodeId));
-            
             ActorRegistry.hasGlobalRegistry();
             ActorRef<Message> pong = new BasicActor<Message, Integer>() {
                 @Override

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/simplegenevent/Server.java
Patch:
@@ -41,7 +41,6 @@ public static void main(String[] args) throws ExecutionException, InterruptedExc
         System.setProperty("galaxy.port", Integer.toString(7050 + nodeId));
         System.setProperty("galaxy.slave_port", Integer.toString(8050 + nodeId));
 
-        final Val<String> dv = new Val<>();
         EventSource<String> ge = new EventSourceActor<String>(new Initializer() {
             @Override
             public void init() throws SuspendExecution {

File: quasar-core-jdk8/src/main/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -24,6 +24,7 @@
 import co.paralleluniverse.fibers.instrument.DontInstrument;
 import co.paralleluniverse.strands.Strand;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import java.lang.Thread.UncaughtExceptionHandler;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -54,7 +55,7 @@ public class FiberForkJoinScheduler extends FiberScheduler {
      * @param monitorType      the {@link MonitorType} type to use for the {@code ForkJoinPool}.
      * @param detailedInfo     whether detailed information about the fibers is collected by the fibers monitor.
      */
-    public FiberForkJoinScheduler(String name, int parallelism, Thread.UncaughtExceptionHandler exceptionHandler, MonitorType monitorType, boolean detailedInfo) {
+    public FiberForkJoinScheduler(String name, int parallelism, UncaughtExceptionHandler exceptionHandler, MonitorType monitorType, boolean detailedInfo) {
         super(name, monitorType, detailedInfo);
         this.fjPool = createForkJoinPool(name, parallelism, exceptionHandler, monitorType);
         this.timer = createTimer(fjPool, getMonitor());
@@ -93,7 +94,7 @@ private FiberForkJoinScheduler(ForkJoinPool fjPool, FiberTimedScheduler timeServ
         this.timer = timeService != null ? timeService : createTimer(fjPool, getMonitor());
     }
 
-    private ForkJoinPool createForkJoinPool(String name, int parallelism, Thread.UncaughtExceptionHandler exceptionHandler, MonitorType monitorType) {
+    private ForkJoinPool createForkJoinPool(String name, int parallelism, UncaughtExceptionHandler exceptionHandler, MonitorType monitorType) {
         final MonitoredForkJoinPool pool = new MonitoredForkJoinPool(name, parallelism, new ExtendedForkJoinWorkerFactory(name) {
             @Override
             protected ExtendedForkJoinWorkerThread createThread(ForkJoinPool pool) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -250,10 +250,7 @@ protected final void waitForRegistration() {
 
     /**
      * A user of this class must override this method to start the asynchronous operation and register the callback.
-     * This method may return an *attachment object* that can be retrieved later by calling {@link #getAttachment()}.
      * This method may not use any {@link ThreadLocal}s.
-     *
-     * @return An object to be set as this `FiberAsync`'s *attachment*, that can be later retrieved with {@link #getAttachment()}.
      */
     protected abstract void requestAsync();
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -24,6 +24,7 @@
 import co.paralleluniverse.fibers.instrument.DontInstrument;
 import co.paralleluniverse.strands.Strand;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import java.lang.Thread.UncaughtExceptionHandler;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
@@ -54,7 +55,7 @@ public class FiberForkJoinScheduler extends FiberScheduler {
      * @param monitorType      the {@link MonitorType} type to use for the {@code ForkJoinPool}.
      * @param detailedInfo     whether detailed information about the fibers is collected by the fibers monitor.
      */
-    public FiberForkJoinScheduler(String name, int parallelism, Thread.UncaughtExceptionHandler exceptionHandler, MonitorType monitorType, boolean detailedInfo) {
+    public FiberForkJoinScheduler(String name, int parallelism, UncaughtExceptionHandler exceptionHandler, MonitorType monitorType, boolean detailedInfo) {
         super(name, monitorType, detailedInfo);
         this.fjPool = createForkJoinPool(name, parallelism, exceptionHandler, monitorType);
         this.timer = createTimer(fjPool, getMonitor());
@@ -93,7 +94,7 @@ private FiberForkJoinScheduler(ForkJoinPool fjPool, FiberTimedScheduler timeServ
         this.timer = timeService != null ? timeService : createTimer(fjPool, getMonitor());
     }
 
-    private ForkJoinPool createForkJoinPool(String name, int parallelism, Thread.UncaughtExceptionHandler exceptionHandler, MonitorType monitorType) {
+    private ForkJoinPool createForkJoinPool(String name, int parallelism, UncaughtExceptionHandler exceptionHandler, MonitorType monitorType) {
         final MonitoredForkJoinPool pool = new MonitoredForkJoinPool(name, parallelism, new ExtendedForkJoinWorkerFactory(name) {
             @Override
             protected ExtendedForkJoinWorkerThread createThread(ForkJoinPool pool) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberFileChannel.java
Patch:
@@ -186,8 +186,8 @@ public AsynchronousFileChannel call() throws IOException {
      * An invocation of this method behaves in exactly the same way as the
      * invocation
      * <pre>
-     *     ch.{@link #open(Path,Set,ExecutorService,FileAttribute[])
-     *       open}(file, opts, null, new FileAttribute&lt;?&gt;[0]);
+     *     ch.{@link #open(ExecutorService,Path,Set,FileAttribute[])
+     *       open}(null, file, opts, new FileAttribute&lt;?&gt;[0]);
      * </pre>
      * where {@code opts} is a {@code Set} containing the options specified to
      * this method.

File: quasar-core/src/main/java/co/paralleluniverse/common/reflection/ASMUtil.java
Patch:
@@ -127,7 +127,9 @@ public static boolean hasMethod(MethodNode method, ClassNode c) {
     }
 
     public static boolean equals(MethodNode m1, MethodNode m2) {
-        return Objects.equals(m1.name, m2.name) && Objects.equals(m1.signature, m2.signature);
+//        if (Objects.equals(m1.name, m2.name) && m1.signature != null && Objects.equals(m1.signature, m2.signature) != Objects.equals(m1.desc, m2.desc))
+//            System.err.println("XXXXX WARN desc and signtures not equal " + m1.name + ":" + m1.desc + ":" + m1.signature + " vs " + m2.desc + ":" + m2.signature);
+        return Objects.equals(m1.name, m2.name) && Objects.equals(m1.desc, m2.desc);
     }
 
     public static boolean equals(ClassNode c1, ClassNode c2) {

File: quasar-core-jdk8/src/main/java/co/paralleluniverse/fibers/futures/AsyncCompletionStage.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @author pron
  */
-public class AsyncCompletionStage<V> extends FiberAsync<V, Void, ExecutionException> {
+public class AsyncCompletionStage<V> extends FiberAsync<V, ExecutionException> {
     /**
      * Blocks the current strand (either fiber or thread) until the given future completes, and returns its result.
      *
@@ -174,15 +174,14 @@ private AsyncCompletionStage(CompletionStage<V> future) {
     }
 
     @Override
-    protected Void requestAsync() {
+    protected void requestAsync() {
         fut.handle((V res, Throwable e) -> {
                 if (e != null)
                     asyncFailed(e);
                 else
                     asyncCompleted(res);
                 return null;
             });
-        return null;
     }
 
     @Override

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberExecutorScheduler.java
Patch:
@@ -82,8 +82,9 @@ protected Map<Thread, Fiber> getRunningFibers() {
         return null;
     }
 
+    @Override
     public Executor getExecutor() {
-        return executor;
+        return executor != null ? executor : this;
     }
 
     @Override

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberScheduler.java
Patch:
@@ -15,6 +15,7 @@
 
 import co.paralleluniverse.common.monitoring.MonitorType;
 import java.util.Map;
+import java.util.concurrent.Executor;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
@@ -75,4 +76,6 @@ void setCurrentFiber(Fiber fiber, Thread currentThread) {
     abstract Object getCurrentTarget(Thread currentThread);
 
     abstract <V> FiberTask<V> newFiberTask(Fiber<V> fiber);
+    
+    public abstract Executor getExecutor();
 }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/futures/AsyncListenableFuture.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @author pron
  */
-public class AsyncListenableFuture<V> extends FiberAsync<V, Void, ExecutionException> {
+public class AsyncListenableFuture<V> extends FiberAsync<V, ExecutionException> {
     /**
      * Blocks the current strand (either fiber or thread) until the given future completes, and returns its result.
      *
@@ -175,7 +175,7 @@ private AsyncListenableFuture(ListenableFuture<V> future) {
     }
 
     @Override
-    protected Void requestAsync() {
+    protected void requestAsync() {
         fut.addListener(new Runnable() {
             @Override
             public void run() {
@@ -190,7 +190,6 @@ public void run() {
                 }
             }
         }, sameThreadExecutor);
-        return null;
     }
 
     @Override

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberFileChannel.java
Patch:
@@ -39,7 +39,7 @@ public class FiberFileChannel extends FileChannel {
     private final AsynchronousFileChannel ac;
     private long position;
 
-    private FiberFileChannel(AsynchronousFileChannel afc) {
+    public FiberFileChannel(AsynchronousFileChannel afc) {
         ac = afc;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberServerSocketChannel.java
Patch:
@@ -33,7 +33,7 @@
 public class FiberServerSocketChannel implements NetworkChannel {
     private final AsynchronousServerSocketChannel ac;
 
-    private FiberServerSocketChannel(AsynchronousServerSocketChannel assc) {
+    public FiberServerSocketChannel(AsynchronousServerSocketChannel assc) {
         this.ac = assc;
     }
 
@@ -45,7 +45,7 @@ private FiberServerSocketChannel(AsynchronousServerSocketChannel assc) {
      * @throws IOException If an I/O error occurs
      */
     public static FiberServerSocketChannel open() throws IOException {
-        return new FiberServerSocketChannel(AsynchronousServerSocketChannel.open());
+        return new FiberServerSocketChannel(AsynchronousServerSocketChannel.open(FiberAsyncIO.newDefaultGroup()));
     }
 
     /**

File: quasar-core/src/main/java/co/paralleluniverse/fibers/io/FiberSocketChannel.java
Patch:
@@ -52,7 +52,7 @@ public FiberSocketChannel(AsynchronousSocketChannel asc) {
      * @throws IOException If an I/O error occurs
      */
     public static FiberSocketChannel open() throws IOException {
-        return new FiberSocketChannel(AsynchronousSocketChannel.open());
+        return new FiberSocketChannel(AsynchronousSocketChannel.open(FiberAsyncIO.newDefaultGroup()));
     }
 
     /**

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/TransformingChannelTest.java
Patch:
@@ -913,7 +913,7 @@ public ReceivePort<Integer> apply(Integer x) {
     public void testForEach() throws Exception {
         final Channel<Integer> ch = newChannel();
 
-        Fiber<List<Integer>> fib = new Fiber<>("fiber", scheduler, new SuspendableCallable() {
+        Fiber<List<Integer>> fib = new Fiber<List<Integer>>("fiber", scheduler, new SuspendableCallable() {
             @Override
             public List<Integer> run() throws SuspendExecution, InterruptedException {
                 final List<Integer> list = new ArrayList<>();

File: quasar-core-jdk8/src/main/java/co/paralleluniverse/fibers/FiberForkJoinScheduler.java
Patch:
@@ -164,7 +164,7 @@ protected final boolean isCurrentThreadInScheduler() {
         return ForkJoinTask.getPool() == fjPool;
     }
 
-    static boolean isFiberThread(Thread t) {
+    public static boolean isFiberThread(Thread t) {
         return t instanceof FiberWorkerThread;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/SingleConsumerArrayQueue.java
Patch:
@@ -160,7 +160,7 @@ public int del(int index) {
         final long h = head;
         for (; i != h; i--)
             copyValue((int) i & mask, (int) (i - 1) & mask);
-
+        clearValue(h);
         head = h + 1; // orderedSetHead(h + 1); // 
         return index;
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberTask.java
Patch:
@@ -43,9 +43,9 @@ interface FiberTask<V> extends Future<V> {
 
     int getState();
 
-    boolean park(Object blocker, boolean exclusive) throws SuspendExecution;
+    boolean park(Object blocker, boolean exclusive) throws Exception; // mustn't be instrumented so we dont throw SuspendExecution 
 
-    void yield() throws SuspendExecution;
+    void yield() throws Exception;// mustn't be instrumented so we dont throw SuspendExecution 
 
     void doPark(boolean yield);
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/RunnableFiberTask.java
Patch:
@@ -146,7 +146,7 @@ public void doPark(boolean yield) {
         onParked(yield);
     }
 
-    protected void throwPark(boolean yield) throws SuspendExecution {
+    protected void throwPark(boolean yield) throws Exception { // mustn't be instrumented so we dont throw SuspendExecution 
         throw yield ? SuspendExecution.YIELD : SuspendExecution.PARK;
     }
 
@@ -155,7 +155,7 @@ protected boolean park(Object blocker) throws Exception {
     }
 
     @Override
-    public boolean park(Object blocker, boolean exclusive) throws SuspendExecution {
+    public boolean park(Object blocker, boolean exclusive) throws Exception { // mustn't be instrumented so we dont throw SuspendExecution 
         int newState;
         int _state;
         do {
@@ -238,7 +238,7 @@ public boolean tryUnpark(Object unblocker) {
     }
 
     @Override
-    public void yield() throws SuspendExecution {
+    public void yield() throws Exception { // mustn't be instrumented so we dont throw SuspendExecution 
         parking(true);
         onParked(true);
         throwPark(true);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java
Patch:
@@ -20,7 +20,7 @@ final class Classes {
     static final String EXCEPTION_NAME = "co/paralleluniverse/fibers/SuspendExecution";
     static final String UNDECLARED_THROWABLE_NAME = "java/lang/reflect/UndeclaredThrowableException";
     static final String ANNOTATION_NAME = "co/paralleluniverse/fibers/Suspendable";
-    static final String COROUTINE_NAME = "co/paralleluniverse/fibers/Fiber"; //Type.getInternalName(COROUTINE_CLASS);
+    static final String FIBER_CLASS_NAME = "co/paralleluniverse/fibers/Fiber"; //Type.getInternalName(COROUTINE_CLASS);
     private static final String STRAND_NAME = "co/paralleluniverse/strands/Strand"; //Type.getInternalName(COROUTINE_CLASS);
     static final String STACK_NAME = "co/paralleluniverse/fibers/Stack";
     //static final String EXCEPTION_INSTANCE_NAME = "exception_instance_not_for_user_code";
@@ -38,7 +38,7 @@ final class Classes {
         "park", "yield", "parkAndUnpark", "yieldAndUnpark"
     }));
     static boolean isYieldMethod(String className, String methodName) {
-        return COROUTINE_NAME.equals(className) && yieldMethods.contains(methodName);
+        return FIBER_CLASS_NAME.equals(className) && yieldMethods.contains(methodName);
     }
 
     public static boolean isAllowedToBlock(String className, String methodName) {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
Patch:
@@ -181,7 +181,7 @@ private void commit() {
                             return;
                         commited = true;
                         if (db.isDebug())
-                            db.log(LogLevel.INFO, "Method %s#%s suspendable: %s (markedSuspendable: %s setSuspendable: %s)", className, name, susp, susp, false);
+                            db.log(LogLevel.INFO, "Method %s#%s suspendable: %s (markedSuspendable: %s setSuspendable: %s)", className, name, susp, susp, setSuspendable);
                         classEntry.set(name, desc, susp ? SuspendableType.SUSPENDABLE : SuspendableType.NON_SUSPENDABLE);
 
                         if (susp)
@@ -199,7 +199,7 @@ public void visitEnd() {
                         }
                     }
                 };
-            }
+        }
         }
         return super.visitMethod(access, name, desc, signature, exceptions);
     }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -53,7 +53,7 @@ boolean shouldInstrument(String className) {
             return false;
         if (className.startsWith("org/netbeans/lib/"))
             return false;
-        if (className.equals(Classes.COROUTINE_NAME) || className.startsWith(Classes.COROUTINE_NAME + '$'))
+        if (className.equals(Classes.FIBER_CLASS_NAME) || className.startsWith(Classes.FIBER_CLASS_NAME + '$'))
             return false;
         if (className.equals(Classes.STACK_NAME))
             return false;

File: quasar-core/src/test/java/co/paralleluniverse/fibers/FiberTest.java
Patch:
@@ -392,9 +392,7 @@ private void foo() throws InterruptedException, SuspendExecution {
     }
 
     @Test
-    public void testDumpStackWaitingFiberWhenCalledFromFiber() throws Exception {
-        Assume.assumeThat(scheduler, instanceOf(FiberForkJoinScheduler.class));
-        
+    public void testDumpStackWaitingFiberWhenCalledFromFiber() throws Exception {      
         final Condition cond = new SimpleConditionSynchronizer(null);
         final AtomicBoolean flag = new AtomicBoolean(false);
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -1450,11 +1450,10 @@ private static boolean checkInstrumentation() {
             if (!ste.getClassName().equals(Fiber.class.getName()) && !ste.getClassName().startsWith(Fiber.class.getName() + '$')) {
                 if (!Retransform.isWaiver(ste.getClassName(), ste.getMethodName())
                         && (!Retransform.isInstrumented(ste.getClassName()) || isNonSuspendable(ste.getClassName(), ste.getMethodName()))) {
-                    if (!notInstrumented)
-                        stackTrace.append(" **");
+                    stackTrace.append(" **");
                     notInstrumented = true;
                 }
-            } else if (ste.getMethodName().equals("run1")) {
+            } else if (ste.getClassName().equals(Fiber.class.getName()) && ste.getMethodName().equals("run1")) {
                 if (notInstrumented) {
                     System.err.println("WARNING: Uninstrumented methods on the call stack (marked with **): " + stackTrace);
                     //throw new IllegalStateException(str);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -583,7 +583,7 @@ public static boolean interrupted() {
      */
     private boolean park1(Object blocker, ParkAction postParkAction, long timeout, TimeUnit unit) throws SuspendExecution {
         record(1, "Fiber", "park", "Parking %s blocker: %s", this, blocker);
-        if (isRecordingLevel(2))
+        if (isRecordingLevel(2) && !getStackTrace)
             record(2, "Fiber", "park", "Parking %s at %s", this, Arrays.toString(getStackTrace()));
         if (prePark != null)
             prePark.run(this);

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/ArrayQueue.java
Patch:
@@ -89,8 +89,8 @@ public E poll() {
                     return null;
             }
 
-            while ((v = get((int) h & mask)) == null); // volatile read
-        } while (!compareAndSetHead(h, h + 1));
+            v = get((int) h & mask); // volatile read
+        } while (v == null || !compareAndSetHead(h, h + 1));
         cas((int) h & mask, v, null);
         return v;
     }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/Actor.java
Patch:
@@ -682,7 +682,7 @@ protected Message handleLifecycleMessage(LifecycleMessage m) {
      *
      * @throws SuspendExecution
      */
-    public void checkCodeSwap() throws SuspendExecution {
+    protected void checkCodeSwap() throws SuspendExecution {
         if (classRef == null)
             return;
         verifyInActor();

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/BehaviorActor.java
Patch:
@@ -241,10 +241,11 @@ protected void handleMessage(Object message) throws InterruptedException, Suspen
     }
 
     @Override
-    public void checkCodeSwap() throws SuspendExecution {
+    protected void checkCodeSwap() throws SuspendExecution {
+        verifyInActor();
         Initializer _initializer = ActorLoader.getReplacementFor(initializer);
         if(_initializer != initializer)
-            log().info("Upgraded behavior implementation: {}", initializer);
+            log().info("Upgraded behavior implementation: {}", _initializer);
         this.initializer = _initializer;
         super.checkCodeSwap();
     }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/ServerHandler.java
Patch:
@@ -42,7 +42,7 @@ public interface ServerHandler<CallMessage, V, CastMessage> extends Initializer
      * @return a value that will be sent as a response to the sender of the request.
      * @throws Exception if thrown, it will be sent back to the sender of the request.
      */
-    V handleCall(ActorRef<V> from, Object id, CallMessage m) throws Exception, SuspendExecution;
+    V handleCall(ActorRef<?> from, Object id, CallMessage m) throws Exception, SuspendExecution;
 
     /**
      * Called to handle an asynchronous request (one that does not for a response).
@@ -51,7 +51,7 @@ public interface ServerHandler<CallMessage, V, CastMessage> extends Initializer
      * @param id   the request's unique id
      * @param m    the request
      */
-    void handleCast(ActorRef<V> from, Object id, CastMessage m) throws SuspendExecution;
+    void handleCast(ActorRef<?> from, Object id, CastMessage m) throws SuspendExecution;
 
     /**
      * Called to handle any message sent to this actor that is neither a {@link #handleCall(ActorRef, Object, Object) call} nor a {@link #handleCast(ActorRef, Object, Object) cast}.

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/ObjectProxyServerTest.java
Patch:
@@ -92,7 +92,7 @@ public ObjectProxyServerTest() {
     }
 
     private Server<?, ?, ?> spawnServer(boolean callOnVoidMethods, Object target) {
-        return new ObjectProxyServerActor("server", callOnVoidMethods, target).spawn(scheduler);
+        return new ProxyServerActor("server", callOnVoidMethods, target).spawn(scheduler);
     }
 
     private <T extends Actor<Message, V>, Message, V> T spawnActor(T actor) {

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/SupervisorTest.java
Patch:
@@ -408,7 +408,7 @@ protected void terminate(Throwable cause) throws SuspendExecution {
                 }
 
                 @Override
-                protected Integer handleCall(ActorRef<Integer> from, Object id, Message1 m) throws Exception, SuspendExecution {
+                protected Integer handleCall(ActorRef<?> from, Object id, Message1 m) throws Exception, SuspendExecution {
                     int res = m.a + m.b;
                     if (res > 100)
                         throw new RuntimeException("oops!");

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/simplegenserver/Server.java
Patch:
@@ -48,7 +48,7 @@ public void init() throws SuspendExecution {
             }
 
             @Override
-            public Integer handleCall(ActorRef<Integer> from, Object id, SumRequest m) {
+            public Integer handleCall(ActorRef<?> from, Object id, SumRequest m) {
                 System.out.println(this.toString() + " is handling " + m);
                 if (m.a == 0 && m.b == 0)
                     ServerActor.currentServerActor().shutdown();

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/testing/PeerTKB.java
Patch:
@@ -110,7 +110,7 @@ public void init() throws SuspendExecution {
                         }
 
                         @Override
-                        public Integer handleCall(ActorRef<Integer> from, Object id, Message m) {
+                        public Integer handleCall(ActorRef<?> from, Object id, Message m) {
                             return m.a + m.b;
                         }
                     }).join();

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentationTask.java
Patch:
@@ -98,7 +98,8 @@ public void setWriteClasses(boolean writeClasses) {
 
     @Override
     public void execute() throws BuildException {
-        final QuasarInstrumentor instrumentor = new QuasarInstrumentor(getClass().getClassLoader(), DefaultSuspendableClassifier.instance());
+        final ClassLoader cl = getClass().getClassLoader();
+        final QuasarInstrumentor instrumentor = new QuasarInstrumentor(cl, new DefaultSuspendableClassifier(cl));
 
         instrumentor.setCheck(check);
         instrumentor.setVerbose(verbose);

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -97,7 +97,8 @@ public static void premain(String agentArguments, Instrumentation instrumentatio
         if (!instrumentation.isRetransformClassesSupported())
             System.err.println("Retransforming classes is not supported!");
 
-        final QuasarInstrumentor instrumentor = new QuasarInstrumentor(Thread.currentThread().getContextClassLoader(), DefaultSuspendableClassifier.instance());
+        final ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        final QuasarInstrumentor instrumentor = new QuasarInstrumentor(cl, new DefaultSuspendableClassifier(cl));
         boolean checkArg = false;
         active = true;
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -42,7 +42,7 @@ public QuasarInstrumentor(ClassLoader classLoader, SuspendableClassifier classif
     }
 
     public QuasarInstrumentor(ClassLoader classLoader) {
-        this(classLoader, DefaultSuspendableClassifier.instance());
+        this(classLoader, new DefaultSuspendableClassifier(classLoader));
     }
 
     boolean shouldInstrument(String className) {

File: quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java
Patch:
@@ -58,7 +58,7 @@ public void testSuspend() throws IOException {
         msgs.add("Method "+className+"#t_join2(Ljava/lang/Thread;)V contains potentially blocking call to java/lang/Thread#join(J)V");
         msgs.add("Method "+className+"#t_join3(Ljava/lang/Thread;)V contains potentially blocking call to java/lang/Thread#join(JI)V");
         
-        MethodDatabase db = new MethodDatabase(BlockingTest.class.getClassLoader(), DefaultSuspendableClassifier.instance());
+        MethodDatabase db = new MethodDatabase(BlockingTest.class.getClassLoader(), new DefaultSuspendableClassifier(BlockingTest.class.getClassLoader()));
         db.setAllowBlocking(true);
         db.setLog(new Log() {
             public void log(LogLevel level, String msg, Object... args) {

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/AbstractRecord.java
Patch:
@@ -39,7 +39,7 @@ protected AbstractRecord(RecordType<R> type) {
     }
 
     @Override
-    public RecordType<R> type() {
+    public SealedRecordType<R> type() {
         return type;
     }
 

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/Record.java
Patch:
@@ -26,7 +26,7 @@ public interface Record<R> {
      *
      * @return the record's {@link RecordType}
      */
-    RecordType<R> type();
+    SealedRecordType<R> type();
 
     /**
      * Returns the record's fields.

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/RecordDelegate.java
Patch:
@@ -63,7 +63,7 @@ Record<R> getDelegate(Object owner) {
     }
 
     @Override
-    public RecordType<R> type() {
+    public SealedRecordType<R> type() {
         return r.type();
     }
     

File: quasar-core/src/main/java/co/paralleluniverse/common/util/Debug.java
Patch:
@@ -99,7 +99,8 @@ public static void exit(int code) {
         if (requestShutdown.compareAndSet(false, true)) {
             System.err.println("DEBUG EXIT REQUEST: SHUTTING DOWN THE JVM.");
             Thread.dumpStack();
-            System.exit(code);
+            if (!isUnitTest()) // Calling System.exit() in gradle unit tests breaks gradle
+                System.exit(code);
         }
     }
 

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ActorModule.java
Patch:
@@ -127,8 +127,7 @@ public Class<?> findClass(String name) throws ClassNotFoundException {
             return loaded;
 
         boolean isUpgraded = upgradeClasses.contains(name);
-
-        if (parent != null) {
+        if (!isUpgraded && parent != null) {
             try {
                 URL parentUrl = parent.getResource(toClassFileName(name));
                 if (parentUrl != null) {

File: quasar-actors/src/main/java/co/paralleluniverse/actors/CodeSwap.java
Patch:
@@ -15,7 +15,7 @@
 
 import co.paralleluniverse.fibers.SuspendExecution;
 
-class CodeSwap extends SuspendExecution {
+class CodeSwap extends Error /* SuspendExecution */ {
     static final CodeSwap CODE_SWAP = new CodeSwap();
     private CodeSwap() {
     }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/InstanceUpgrader.java
Patch:
@@ -156,7 +156,7 @@ private class Copier {
             if (!fromClass.getName().equals(toClass.getName()))
                 throw new IllegalArgumentException("'fromClass' " + fromClass.getName() + " is not a version of 'toClass' " + toClass.getName());
 
-            Map<FieldDesc, Field> fs = getInstanceFields(toClass, new HashMap<FieldDesc, Field>());
+            Map<FieldDesc, Field> fs = getInstanceFields(fromClass, new HashMap<FieldDesc, Field>());
 
             ArrayList<Field> ffs = new ArrayList<>();
             ArrayList<Field> tfs = new ArrayList<>();
@@ -193,7 +193,7 @@ Object copy(Object from, Object to) {
                     if (innerClassConstructor[i] != null)
                         toFields[i].set(to, innerClassConstructor[i].newInstance(to));
                     else {
-                        LOG.debug("== " + toFields[i] + " <- " + fromFields[i].get(from));
+                        // LOG.debug("== {} <- {} ({})",  toFields[i], fromFields[i], fromFields[i].get(from));
                         toFields[i].set(to, fromFields[i].get(from));
                     }
                 }

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ActorLoader.java
Patch:
@@ -31,6 +31,8 @@
  * @author pron
  */
 class ActorLoader extends ClassLoader {
+    private static final String MODULE_DIR = "modules";
+    
     static {
         ClassLoader.registerAsParallelCapable();
     }
@@ -194,7 +196,7 @@ public synchronized void removeModule(URL jarUrl) {
         Class<T> clazz = (Class<T>)actor.getClass();
         Class<? extends T> newClazz = currentClassFor0(clazz);
         if(newClazz == clazz)
-            return null;
+            return actor;
         return (T)instanceUpgrader.get(newClazz).copy(actor);
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/common/reflection/ASMUtil.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.List;
+import java.util.Objects;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.AnnotationNode;
@@ -114,11 +115,11 @@ public static boolean hasMethod(MethodNode method, ClassNode c) {
     }
 
     public static boolean equals(MethodNode m1, MethodNode m2) {
-        return m1.name.equals(m2.name) && m1.desc.equals(m2.desc);
+        return Objects.equals(m1.name, m2.name) && Objects.equals(m1.signature, m2.signature);
     }
 
     public static boolean equals(ClassNode c1, ClassNode c2) {
-        return c1.name.equals(c2.name);
+        return Objects.equals(c1.name, c2.name);
     }
 
     private ASMUtil() {

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendablesScanner.java
Patch:
@@ -158,7 +158,7 @@ private void scanClass(ClassNode cls) throws Exception {
         List<MethodNode> methods = cls.methods;
         for (MethodNode m : methods) {
             if (hasAnnotation(Suspendable.class, m)) {
-                log("Found annotated method: " + cls.name + "." + m.name + m.desc, Project.MSG_VERBOSE);
+                log("Found annotated method: " + cls.name + "." + m.name + m.signature, Project.MSG_VERBOSE);
                 findSuperDeclarations(cls, cls, m);
             }
         }
@@ -169,7 +169,7 @@ private void findSuperDeclarations(ClassNode cls, ClassNode declaringClass, Meth
             return;
 
         if (!ASMUtil.equals(cls, declaringClass) && hasMethod(method, cls)) {
-            log("Found parent of annotated method: " + declaringClass.name + "." + method.name + method.desc + " in " + cls.name, Project.MSG_VERBOSE);
+            log("Found parent of annotated method: " + declaringClass.name + "." + method.name + method.signature + " in " + cls.name, Project.MSG_VERBOSE);
             results.add(cls.name.replace('/', '.') + '.' + method.name);
         }
 

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/RecordType.java
Patch:
@@ -42,7 +42,7 @@
  *     public static final ObjectField<A, List<String>> $emails = stateType.objectField("emails", new TypeToken<List<String>() {});
  * }
  * ```
- * {@code A} is the type's <i>identifier class</i>. The fields are, by convention, given identifiers that begin with a {@code $} to make it clear
+ * {@code A} is the type's <i>identifier class</i>. The fields are, by convention, given identifiers that begin with a {@code \$} to make it clear
  * that they identify fields rather than values.
  * <br/>
  * A new record is instantiated by calling one of the {@code newInstance} methods.

File: quasar-actors/src/main/java/co/paralleluniverse/actors/GlobalRegistry.java
Patch:
@@ -13,7 +13,6 @@
  */
 package co.paralleluniverse.actors;
 
-import co.paralleluniverse.actors.ActorRef;
 import co.paralleluniverse.fibers.SuspendExecution;
 
 /**

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -13,6 +13,7 @@
  */
 package co.paralleluniverse.fibers.instrument;
 
+import co.paralleluniverse.common.util.Debug;
 import co.paralleluniverse.fibers.instrument.MethodDatabase.WorkListEntry;
 import java.io.File;
 import java.io.FileInputStream;
@@ -46,6 +47,8 @@ public QuasarInstrumentor(ClassLoader classLoader) {
 
     boolean shouldInstrument(String className) {
         className = className.replace('.', '/');
+        if (className.startsWith("co/paralleluniverse/fibers/instrument/") && !Debug.isUnitTest())
+            return false;
         if (className.startsWith("org/objectweb/asm/"))
             return false;
         if (className.startsWith("org/netbeans/lib/"))

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/Selector.java
Patch:
@@ -259,7 +259,7 @@ SelectAction<Message> select() throws InterruptedException, SuspendExecution {
     @Override
     public Object register() {
         Strand s = Strand.currentStrand();
-        if (waiter != null && waiter != s)
+        if (waiter != null && !waiter.equals(s))
             throw new IllegalMonitorStateException("A strand is already registered");
         this.waiter = Strand.currentStrand();
 

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/Supervisor.java
Patch:
@@ -42,7 +42,7 @@ public final <T extends ActorRef<M>, M> T addChild(ChildSpec spec) throws Suspen
 
     public final <T extends ActorRef<M>, M> T getChild(Object id) throws SuspendExecution, InterruptedException {
         if (isInActor())
-            return SupervisorActor.currentSupervisor().getChild(id);
+            return (T)SupervisorActor.currentSupervisor().getChild(id);
 
         return (T) call(this, new GetChildMessage(RequestReplyHelper.from(), null, id));
     }

File: quasar-actors/src/test/java/co/paralleluniverse/actors/behaviors/SupervisorTest.java
Patch:
@@ -149,7 +149,7 @@ protected Integer doRun() throws SuspendExecution, InterruptedException {
 //        return a;
 //    }
     private <Message> ActorRef<Message> getChild(Supervisor sup, String name, long timeout) throws InterruptedException, SuspendExecution {
-        return sup.getChild(name);
+        return (ActorRef<Message>)sup.getChild(name);
 //        Actor<Message, V> a;
 //        final long start = System.nanoTime();
 //        while ((a = sup.getChild(name)) == null || a.isDone()) {

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/ReceivePortGroup.java
Patch:
@@ -14,7 +14,6 @@
 package co.paralleluniverse.strands.channels;
 
 import co.paralleluniverse.fibers.SuspendExecution;
-import static co.paralleluniverse.strands.channels.Selector.receive;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -32,7 +31,7 @@ public ReceivePortGroup(Collection<ReceivePort<? extends Message>> ports) {
         this.ports = ports;
         ArrayList<SelectAction<Message>> actions = new ArrayList<>(ports.size());
         for (ReceivePort<? extends Message> port : ports)
-            actions.add(receive(port));
+            actions.add(Selector.receive(port));
         this.selector = new Selector<>(false, actions);
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedQueue.java
Patch:
@@ -196,7 +196,7 @@ public List<E> snapshot() {
                 if (p.prev == null)
                     break;
             }
-            list.add(value(p));
+            list.add((E)value(p));
         }
         return Lists.reverse(list);
     }

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/SerializedRecord.java
Patch:
@@ -44,7 +44,7 @@ private void writeObject(ObjectOutputStream out) throws IOException {
     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
         final String typeName = in.readUTF();
         final int numFields = in.readInt();
-        RecordType<R> type = (RecordType<R>) RecordType.forClass(Class.forName(typeName));
+        RecordType<R> type = (RecordType<R>) RecordType.forName(typeName);
         r = type.newInstance();
         r.read(in, numFields);
     }

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/RecordType.java
Patch:
@@ -107,6 +107,8 @@ private static void addType(String name, RecordType<?> type) {
     }
 
     private static boolean isCompatible(RecordType<?> oldType, RecordType<?> newType) {
+        if(true)
+            return true;
         List<Field> oldFields = new ArrayList<Field>(oldType.fields());
         List<Field> newFileds = new ArrayList<Field>(newType.fields());
         if (newFileds.size() < oldFields.size())

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberTimedScheduler.java
Patch:
@@ -438,7 +438,7 @@ private void reportProblemFibers(Collection<Fiber> fs) {
             Thread t = f.getRunningThread();
             if (t == null)
                 System.err.println("WARNING: fiber " + f + " is hogging the CPU or blocking a thread.");
-            else if(t.getState() != Thread.State.RUNNABLE)
+            else if(t.getState() == Thread.State.RUNNABLE)
                 System.err.println("WARNING: fiber " + f + " is hogging the CPU (" + t + ").");
             else
                 System.err.println("WARNING: fiber " + f + " is blocking a thread (" + t + ").");

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberTimedScheduler.java
Patch:
@@ -438,7 +438,7 @@ private void reportProblemFibers(Collection<Fiber> fs) {
             Thread t = f.getRunningThread();
             if (t == null)
                 System.err.println("WARNING: fiber " + f + " is hogging the CPU or blocking a thread.");
-            if(t.getState() != Thread.State.RUNNABLE)
+            else if(t.getState() != Thread.State.RUNNABLE)
                 System.err.println("WARNING: fiber " + f + " is hogging the CPU.");
             else
                 System.err.println("WARNING: fiber " + f + " is blocking a thread.");

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/CheckInstrumentationVisitor.java
Patch:
@@ -114,6 +114,7 @@ public AnnotationVisitor visitAnnotation(String adesc, boolean visible) {
                 public void visitEnd() {
                     super.visitEnd();
                     classEntry.set(name, desc, susp ? SuspendableType.SUSPENDABLE : SuspendableType.NON_SUSPENDABLE);
+                    hasSuspendable = hasSuspendable | susp;
                 }
             };
         else

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SimpleSuspendableClassifier.java
Patch:
@@ -43,7 +43,7 @@ public SimpleSuspendableClassifier() {
 
     private void readFiles(String fileName, Set<String> set) {
         try {
-            for (Enumeration<URL> susFiles = ClassLoader.getSystemResources(PREFIX + fileName); susFiles.hasMoreElements();) {
+            for (Enumeration<URL> susFiles = getClass().getClassLoader().getResources(PREFIX + fileName); susFiles.hasMoreElements();) {
                 URL file = susFiles.nextElement();
                 parse(file, set);
             }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberTimedScheduler.java
Patch:
@@ -435,7 +435,7 @@ else if (f != null & now - fi.time > nanos)
 
     private void reportProblemFibers(Collection<Fiber> fs) {
         for (Fiber f : fs) {
-            System.err.println("WARNING: fiber " + f + " is hogging the CPU.");
+            System.err.println("WARNING: fiber " + f + " is hogging the CPU or blocking a thread.");
             Strand.printStackTrace(f.getStackTrace(), System.err);
         }
     }

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/AbstractRecord.java
Patch:
@@ -28,7 +28,7 @@ protected AbstractRecord(RecordType<R> type) {
 
     @Override
     public RecordType<R> type() {
-        return type();
+        return type;
     }
     
     @Override

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -74,7 +74,6 @@ public QuasarInstrumentor(ClassLoader classLoader) {
     }
 
     boolean shouldInstrument(String className) {
-        System.out.println("ZZZZZZZZZ: " + className);
         className = className.replace('.', '/');
         if (className.startsWith("org/objectweb/asm/"))
             return false;
@@ -84,7 +83,6 @@ boolean shouldInstrument(String className) {
             return false;
         if (MethodDatabase.isJavaCore(className))
             return false;
-        System.out.println("VVVVVVVV");
         return true;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -74,6 +74,8 @@ public QuasarInstrumentor(ClassLoader classLoader) {
     }
 
     boolean shouldInstrument(String className) {
+        System.out.println("ZZZZZZZZZ: " + className);
+        className = className.replace('.', '/');
         if (className.startsWith("org/objectweb/asm/"))
             return false;
         if (className.startsWith("org/netbeans/lib/"))
@@ -82,6 +84,7 @@ boolean shouldInstrument(String className) {
             return false;
         if (MethodDatabase.isJavaCore(className))
             return false;
+        System.out.println("VVVVVVVV");
         return true;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/UnableToInstrumentException.java
Patch:
@@ -45,7 +45,7 @@ public class UnableToInstrumentException extends RuntimeException {
     private final String methodDesc;
     
     public UnableToInstrumentException(String reason, String className, String methodName, String methodDesc) {
-        super(String.format("Unable to instrument class %s#%s%s because of %s", className, methodName, methodDesc, reason));
+        super(String.format("Unable to instrument %s#%s%s because of %s", className, methodName, methodDesc, reason));
         this.reason = reason;
         this.className = className;
         this.methodName = methodName;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/QuasarInstrumentor.java
Patch:
@@ -86,6 +86,7 @@ boolean shouldInstrument(String className) {
     }
 
     public byte[] instrumentClass(String className, byte[] data) {
+        className = className.replace('.', '/');
         return shouldInstrument(className) ? instrumentClass(className, new ClassReader(data)) : data;
     }
 

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/RecordType.java
Patch:
@@ -78,7 +78,7 @@ public static <R> RecordType<R> newType(String name) {
     }
 
     public RecordType(String name, RecordType<? super R> parent) {
-        this.name = name;
+        this.name = name.intern();
         this.parent = parent;
         if (parent != null) {
             parent.seal();

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/Record.java
Patch:
@@ -19,6 +19,8 @@
  * @author pron
  */
 public interface Record<R> {
+    RecordType<R> type();
+    
     Set<Field<? super R, ?>> fields();
 
     <V> V get(Field<? super R, V> field);

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/RecordArray.java
Patch:
@@ -20,6 +20,8 @@ public interface RecordArray<R> extends Iterable<Record<R>> {
     public interface Accessor {
     }
 
+    RecordType<R> type();
+    
     Accessor newAccessor();
 
     Accessor reset(Accessor accessor);

File: quasar-actors/src/test/java/co/paralleluniverse/data/record/DynamicRecordInheritanceTest.java
Patch:
@@ -45,7 +45,7 @@ private static class B extends A {
     }
 
     private static class AR {
-        static final RecordType<A> rt = new RecordType<>();
+        static final RecordType<A> rt = RecordType.newType(A.class);
         static final BooleanField<A> $a = rt.booleanField("a");
         static final IntField<A> $d = rt.intField("d");
         static final ObjectField<A, String> $str = rt.objectField("str", String.class);
@@ -54,7 +54,7 @@ private static class AR {
     }
 
     private static class BR extends AR {
-        static final RecordType<B> rt = new RecordType<>(AR.rt);
+        static final RecordType<B> rt = RecordType.newType(B.class, AR.rt);
         static final IntField<B> $d1 = rt.intField("d1");
         static final ObjectField<B, String> $str1 = rt.objectField("str1", String.class);
     }

File: quasar-actors/src/test/java/co/paralleluniverse/data/record/DynamicRecordTest.java
Patch:
@@ -251,7 +251,7 @@ public void setStra(int index, String str) {
             stra[index] = str + "!";
         }
     }
-    private final RecordType<A> rt = new RecordType<>();
+    private final RecordType<A> rt = RecordType.newType(A.class);
     private final BooleanField<A> $a = rt.booleanField("a");
     private final ByteField<A> $b = rt.byteField("b");
     private final ShortField<A> $c = rt.shortField("c");

File: quasar-actors/src/test/java/co/paralleluniverse/data/record/RecordCaliperBenchmark.java
Patch:
@@ -54,7 +54,7 @@ public static class Foo3 extends Foo {
 
     public static class Foo4 extends Foo {
     }
-    static final RecordType<Foo> rt = new RecordType<>();
+    static final RecordType<Foo> rt = RecordType.newType(Foo.class);
     static final Field.IntField<Foo> $a = rt.intField("a");
     static final Field.DoubleField<Foo> $b = rt.doubleField("b");
     static final Field.LongField<Foo> $c = rt.longField("c");

File: quasar-actors/src/test/java/co/paralleluniverse/data/record/SimpleRecordInheritanceTest.java
Patch:
@@ -32,7 +32,7 @@ public void setUp() {
     }
 
     private static class A {
-        static final RecordType<A> rt = new RecordType<>();
+        static final RecordType<A> rt = RecordType.newType(A.class);
         static final BooleanField<A> $a = rt.booleanField("a");
         static final IntField<A> $d = rt.intField("d");
         static final ObjectField<A, String> $str = rt.objectField("str", String.class);
@@ -41,7 +41,7 @@ private static class A {
     }
 
     private static class B extends A {
-        static final RecordType<B> rt = new RecordType<>(A.rt);
+        static final RecordType<B> rt = RecordType.newType(B.class, A.rt);
         static final IntField<B> $d1 = rt.intField("d1");
         static final ObjectField<B, String> $str1 = rt.objectField("str1", String.class);
     }

File: quasar-actors/src/test/java/co/paralleluniverse/data/record/SimpleRecordTest.java
Patch:
@@ -90,7 +90,7 @@ public A() {
                 ha[i] = (char) rand.nextInt();
         }
     }
-    private static final RecordType<A> rt = new RecordType<>();
+    private static final RecordType<A> rt = RecordType.newType(A.class);
     private static final BooleanField<A> $a = rt.booleanField("a");
     private static final ByteField<A> $b = rt.byteField("b");
     private static final ShortField<A> $c = rt.shortField("c");
@@ -148,7 +148,7 @@ public void test1() {
             r.set($ha, i, a.ha[i]);
         for (int i = 0; i < $stra.length; i++)
             r.set($stra, i, a.stra[i]);
-        
+
         assertThat(r.get($a), equalTo(a.a));
         assertThat(r.get($b), equalTo(a.b));
         assertThat(r.get($c), equalTo(a.c));

File: quasar-galaxy/src/main/java/co/paralleluniverse/io/serialization/KryoSerializer.java
Patch:
@@ -18,6 +18,7 @@
 import com.esotericsoftware.kryo.Serializer;
 import com.esotericsoftware.kryo.io.Input;
 import com.esotericsoftware.kryo.io.Output;
+import com.esotericsoftware.shaded.org.objenesis.strategy.SerializingInstantiatorStrategy;
 import de.javakaffee.kryoserializers.ArraysAsListSerializer;
 import de.javakaffee.kryoserializers.GregorianCalendarSerializer;
 import de.javakaffee.kryoserializers.JdkProxySerializer;
@@ -34,7 +35,6 @@
 import java.io.OutputStream;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
-import org.objenesis.strategy.SerializingInstantiatorStrategy;
 
 /**
  *

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ActorSpec.java
Patch:
@@ -40,10 +40,11 @@ public ActorSpec(Constructor<T> ctor, Object[] params) {
 
     private static <T> Constructor<T> matchingConstructor(Class<T> type, Object[] params) {
         final Constructor<T> ctor = ReflectionUtil.getMatchingConstructor(type, ReflectionUtil.getTypes(params));
-        if(ctor == null)
+        if (ctor == null)
             throw new IllegalArgumentException("No constructor for type " + type.getName() + " was found to match parameters " + Arrays.toString(params));
         return ctor;
     }
+
     @Override
     public T build() {
         try {

File: quasar-actors/src/main/java/co/paralleluniverse/actors/ReflectionUtil.java
Patch:
@@ -31,7 +31,7 @@ class ReflectionUtil {
     public static Class<?>[] getTypes(Object... vals) {
         Class<?>[] types = new Class[vals.length];
         for (int i = 0; i < vals.length; i++)
-            types[i] = vals[i].getClass();
+            types[i] = vals[i] != null ? vals[i].getClass() : null;
 
         return types;
     }

File: quasar-core/src/main/java/co/paralleluniverse/strands/SettableFuture.java
Patch:
@@ -28,7 +28,7 @@
  * @author pron
  */
 public class SettableFuture<V> implements Future<V> {
-    private final Condition sync = new SimpleConditionSynchronizer();
+    private final Condition sync = new SimpleConditionSynchronizer(this);
     private volatile boolean done;
     private volatile int setting;
     private V value;

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/DelayedVal.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class DelayedVal<V> implements Future<V> {
     private V value;
-    private volatile SimpleConditionSynchronizer sync = new SimpleConditionSynchronizer();
+    private volatile SimpleConditionSynchronizer sync = new SimpleConditionSynchronizer(this);
 
     public final void set(V value) {
         if (sync == null)

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/QueueChannel.java
Patch:
@@ -43,12 +43,12 @@ public abstract class QueueChannel<Message> implements Channel<Message>, Selecta
     protected QueueChannel(BasicQueue<Message> queue, OverflowPolicy overflowPolicy, boolean singleConsumer) {
         this.queue = queue;
         if (!singleConsumer || queue instanceof CircularBuffer)
-            this.sync = new SimpleConditionSynchronizer();
+            this.sync = new SimpleConditionSynchronizer(this);
         else
-            this.sync = new OwnedSynchronizer();
+            this.sync = new OwnedSynchronizer(this);
 
         this.overflowPolicy = overflowPolicy;
-        this.sendersSync = overflowPolicy == OverflowPolicy.BLOCK ? new SimpleConditionSynchronizer() : null;
+        this.sendersSync = overflowPolicy == OverflowPolicy.BLOCK ? new SimpleConditionSynchronizer(this) : null;
     }
 
     public int capacity() {

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/Selector.java
Patch:
@@ -256,7 +256,7 @@ Strand getWaiter() {
     }
 
     void signal() {
-        waiter.unpark();
+        waiter.unpark(this);
     }
 
     public SelectAction<?> getWinner() {

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/TransferChannel.java
Patch:
@@ -170,7 +170,7 @@ private void signalWaitersOnClose() {
             if (!p.isMatched()) {
                 if (!p.isData) {
                     if (p.casItem(null, CHANNEL_CLOSED)) // match waiting requesters with CHANNEL_CLOSED
-                        Strand.unpark(p.waiter);         // ... and wake 'em up
+                        Strand.unpark(p.waiter, this);   // ... and wake 'em up
                 } else
                     p.tryMatchData();
             }
@@ -308,7 +308,7 @@ final boolean tryMatchData() {
             // assert isData;
             Object x = item;
             if (x != null && x != this && casItem(x, null)) {
-                Strand.unpark(waiter);
+                Strand.unpark(waiter, this);
                 return true;
             }
             return false;
@@ -529,7 +529,7 @@ private Object tryMatch(SelectAction sa, Message e, boolean haveData) {
                                     || (q = h.next) == null || !q.isMatched())
                                 break;        // unless slack < 2
                         }
-                        Strand.unpark(p.waiter);
+                        Strand.unpark(p.waiter, this);
                         return item;
                     } else
                         p.returnLease();

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/disruptor/StrandBlockingWaitStrategy.java
Patch:
@@ -40,7 +40,7 @@
  * Blocking strategy that uses a lock and condition variable for {@link EventProcessor}s waiting on a barrier.
  */
 public final class StrandBlockingWaitStrategy implements WaitStrategy {
-    private final SimpleConditionSynchronizer processorNotifyCondition = new SimpleConditionSynchronizer();
+    private final SimpleConditionSynchronizer processorNotifyCondition = new SimpleConditionSynchronizer(this);
 
     @Override
     public long waitFor(long sequence, Sequence cursorSequence, Sequence dependentSequence, com.lmax.disruptor.SequenceBarrier barrier)

File: quasar-core/src/test/java/co/paralleluniverse/fibers/FiberTest.java
Patch:
@@ -334,7 +334,7 @@ private void foo() {
 
     @Test
     public void testDumpStackWaitingFiber() throws Exception {
-        final Condition cond = new SimpleConditionSynchronizer();
+        final Condition cond = new SimpleConditionSynchronizer(null);
         final AtomicBoolean flag = new AtomicBoolean(false);
 
         Fiber fiber = new Fiber(scheduler, new SuspendableRunnable() {
@@ -381,7 +381,7 @@ private void foo() throws InterruptedException, SuspendExecution {
 
     @Test
     public void testDumpStackWaitingFiberWhenCalledFromFiber() throws Exception {
-        final Condition cond = new SimpleConditionSynchronizer();
+        final Condition cond = new SimpleConditionSynchronizer(null);
         final AtomicBoolean flag = new AtomicBoolean(false);
 
         final Fiber fiber = new Fiber(scheduler, new SuspendableRunnable() {

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/SingleConsumerQueueChannel.java
Patch:
@@ -55,9 +55,8 @@ public Strand getStrand() {
     protected void maybeSetCurrentStrandAsOwner() {
         if (owner == null)
             setStrand(Strand.currentStrand());
-        else {
-            assert Strand.equals(owner, Strand.currentStrand()) : "This method has been called by a different strand (thread or fiber) from that owning this object";
-        }
+        else
+            assert Strand.equals(owner, Strand.currentStrand()) : "This method has been called by a different strand (" + Strand.currentStrand() + ") from that owning this object (" + owner + ")";
     }
 
     Object tryReceiveNode() {

File: quasar-core/src/main/java/co/paralleluniverse/concurrent/util/SingleConsumerNonblockingProducerPriorityQueue.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.NoSuchElementException;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.ReentrantLock;
 

File: quasar-actors/src/main/java/co/paralleluniverse/data/record/DynamicUnsafeRecord.java
Patch:
@@ -75,7 +75,7 @@ static long getFieldOffset(Class<?> type, java.lang.reflect.Field f) {
         return unsafe.objectFieldOffset(f);
     }
 
-    DynamicUnsafeRecord(DynamicRecordType<R> recordType, Object target) {
+    DynamicUnsafeRecord(RecordType<R> recordType, Object target) {
         super(recordType, target);
     }
 

File: quasar-actors/src/test/java/co/paralleluniverse/data/record/SimpleRecordTest.java
Patch:
@@ -14,7 +14,6 @@
 import org.junit.runner.RunWith;
 
 import co.paralleluniverse.data.record.Field.*;
-import java.lang.invoke.MethodHandles;
 import java.util.Random;
 
 /**
@@ -33,7 +32,6 @@ public void setUp() {
     }
 
     private static class A {
-        private static final MethodHandles.Lookup lookup = MethodHandles.lookup();
         private boolean a;
         private byte b;
         private short c;
@@ -92,7 +90,7 @@ public A() {
                 ha[i] = (char) rand.nextInt();
         }
     }
-    private static final SimpleRecordType<A> srt = new SimpleRecordType<>();
+    private static final RecordType<A> srt = new RecordType<>();
     private static final BooleanField<A> $a = srt.booleanField("a");
     private static final ByteField<A> $b = srt.byteField("b");
     private static final ShortField<A> $c = srt.shortField("c");

File: quasar-actors/src/main/java/co/paralleluniverse/actors/RemoteActorRef.java
Patch:
@@ -13,8 +13,8 @@
  */
 package co.paralleluniverse.actors;
 
-import co.paralleluniverse.fibers.SuspendExecution;
 import co.paralleluniverse.common.util.ServiceUtil;
+import co.paralleluniverse.fibers.SuspendExecution;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/GenRequestMessage.java
Patch:
@@ -29,7 +29,7 @@ public GenRequestMessage(ActorRef<?> from, Object id) {
         this.id = id;
     }
 
-    @ConstructorProperties({"from", "id"})
+    @ConstructorProperties({"from"})
     public GenRequestMessage(ActorRef<?> from) {
         super(from);
         this.id = null;

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/GenServerActor.java
Patch:
@@ -112,7 +112,7 @@ public Logger log() {
     }
 
     public static <CallMessage, V, CastMessage> GenServerActor<CallMessage, V, CastMessage> currentGenServer() {
-        return (GenServerActor<CallMessage, V, CastMessage>) (Actor) currentActor();
+        return (GenServerActor<CallMessage, V, CastMessage>) Actor.<Object, Void>currentActor();
     }
 
     @Override

File: quasar-actors/src/main/java/co/paralleluniverse/actors/behaviors/RequestReplyHelper.java
Patch:
@@ -53,6 +53,8 @@ public static <Message> ActorRef<Message> from() {
     }
 
     public static GenResponseMessage call(final ActorRef actor, GenRequestMessage m, long timeout, TimeUnit unit) throws TimeoutException, InterruptedException, SuspendExecution {
+        assert !actor.equals(ActorRef.self()) : "Can't \"call\" self - deadlock guaranteed";
+        
         final Actor currentActor;
         if (m.getFrom() instanceof TempActor)
             currentActor = ((TempActor<?>) m.getFrom()).actor.get();

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -757,7 +757,7 @@ protected V run() throws SuspendExecution, InterruptedException {
     public Fiber inheritThreadLocals() {
         if (state != State.NEW)
             throw new IllegalStateException("Method called on a started fiber");
-        this.fiberLocals = ThreadAccess.createInheritedMap(ThreadAccess.getThreadLocals(Thread.currentThread()));
+        this.fiberLocals = ThreadAccess.cloneThreadLocalMap(ThreadAccess.getThreadLocals(Thread.currentThread()));
         return this;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -757,7 +757,7 @@ protected V run() throws SuspendExecution, InterruptedException {
     public Fiber inheritThreadLocals() {
         if (state != State.NEW)
             throw new IllegalStateException("Method called on a started fiber");
-        this.fiberLocals = ThreadAccess.getThreadLocals(Thread.currentThread());
+        this.fiberLocals = ThreadAccess.createInheritedMap(ThreadAccess.getThreadLocals(Thread.currentThread()));
         return this;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
Patch:
@@ -222,7 +222,7 @@ private boolean hasAnnotation(MethodNode mn) {
         if (ans == null)
             return false;
         for (AnnotationNode an : ans) {
-            if (an.desc.equals(an.desc))
+            if (an.desc.equals(ANNOTATION_DESC))
                 return true;
         }
         return false;

File: quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/SuspendableAnnotationTest.java
Patch:
@@ -18,6 +18,7 @@
 import co.paralleluniverse.fibers.SuspendExecution;
 import co.paralleluniverse.fibers.Suspendable;
 import static co.paralleluniverse.fibers.TestsHelper.exec;
+import co.paralleluniverse.strands.SuspendableCallable;
 import co.paralleluniverse.strands.SuspendableRunnable;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -61,7 +62,7 @@ private void nonsuspendableMethod() {
     @Test
     public void testAnnotated() {
         try {
-            Fiber co = new Fiber((String) null, null, (SuspendableRunnable) null) {
+            Fiber co = new Fiber((String) null, null, (SuspendableCallable) null) {
                 @Override
                 protected Object run() throws SuspendExecution, InterruptedException {
                     suspendableMethod();
@@ -82,7 +83,7 @@ protected Object run() throws SuspendExecution, InterruptedException {
     @Test
     public void testNonAnnotated() {
         try {
-            Fiber co = new Fiber((String) null, null, (SuspendableRunnable) null) {
+            Fiber co = new Fiber((String) null, null, (SuspendableCallable) null) {
                 @Override
                 protected Object run() throws SuspendExecution, InterruptedException {
                     nonsuspendableMethod();

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SimpleSuspendableClassifier.java
Patch:
@@ -54,7 +54,7 @@ private void readFiles(String fileName, Set<String> set) {
     }
 
     private void readFile(URL file, Set<String> set) {
-        try (InputStream is = new FileInputStream(new File(file.toURI()));
+        try (InputStream is = file.openStream();
                 BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")))) {
             String line;
             while ((line = reader.readLine()) != null) {
@@ -68,8 +68,6 @@ private void readFile(URL file, Set<String> set) {
             }
         } catch (IOException e) {
             // silently ignore
-        } catch (URISyntaxException e) {
-            throw new AssertionError(e);
         }
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
Patch:
@@ -100,8 +100,8 @@ public MethodVisitor visitMethod(final int access, final String name, final Stri
         final SuspendableType markedSuspendable = SuspendableClassifierService.isSuspendable(className, classEntry, name, desc, signature, exceptions);
         final SuspendableType setSuspendable = classEntry.check(name, desc);
 
-        if (markedSuspendable != null && setSuspendable == null)
-            classEntry.set(name, desc, markedSuspendable);
+        if (setSuspendable == null)
+            classEntry.set(name, desc, markedSuspendable != null ? markedSuspendable : SuspendableType.NON_SUSPENDABLE);
    
         final boolean suspendable = markedSuspendable == SuspendableType.SUSPENDABLE | setSuspendable == SuspendableType.SUSPENDABLE;
      

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableClassifier.java
Patch:
@@ -9,5 +9,5 @@
  * @author pron
  */
 public interface SuspendableClassifier {
-    boolean isSuspendable(String className, String superClassName, String[] interfaces, String methodName, String methodDesc, String methodSignature, String[] methodExceptions);
+    MethodDatabase.SuspendableType isSuspendable(String className, String superClassName, String[] interfaces, String methodName, String methodDesc, String methodSignature, String[] methodExceptions);
 }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -226,7 +226,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
 
                 return tranformed;
             } catch (Exception ex) {
-                db.error("Unable to instrument", ex);
+                db.error("Unable to instrument " + className, ex);
                 return null;
             } catch (Throwable t) {
                 System.out.println("[quasar] ERROR: " + t.getMessage());

File: quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -313,6 +313,7 @@ private void splitTryCatch(FrameInfo fi) {
             int end = getLabelIdx(tcb.end);
 
             if (start <= fi.endInstruction && end >= fi.endInstruction) {
+                db.log(LogLevel.DEBUG, "Splitting try-catch in %s, block %d call at instruction %d", mn.name, i, fi.endInstruction);
                 //System.out.println("i="+i+" start="+start+" end="+end+" split="+splitIdx+
                 //        " start="+mn.instructions.get(start)+" end="+mn.instructions.get(end));
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -66,7 +66,7 @@
  * @author Ron Pressler
  */
 public class Fiber<V> extends Strand implements Joinable<V>, Serializable, Future<V> {
-    private static final boolean verifyInstrumentation = Boolean.parseBoolean(System.getProperty("co.paralleluniverse.lwthreads.verifyInstrumentation", "false"));
+    private static final boolean verifyInstrumentation = Boolean.parseBoolean(System.getProperty("co.paralleluniverse.fibers.verifyInstrumentation", "false"));
     public static final int DEFAULT_STACK_SIZE = 16;
     private static final long serialVersionUID = 2783452871536981L;
     protected static final FlightRecorder flightRecorder = Debug.isDebug() ? Debug.getGlobalFlightRecorder() : null;

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -13,6 +13,8 @@
  */
 package co.paralleluniverse.fibers;
 
+import java.util.concurrent.TimeUnit;
+
 /**
  * A general helper class that transforms asynchronous requests to synchronous calls on a Fiber.
  *
@@ -74,7 +76,7 @@ protected void failed(Throwable exc, Fiber fiber) {
 
     private void fire(Fiber fiber) {
         if (immediateExec) {
-            if(!fiber.exec(this)) {
+            if(!fiber.exec(this, 5, TimeUnit.MILLISECONDS)) {
                 final RuntimeException ex = new RuntimeException("Failed to exec fiber " + fiber + " in thread " + Thread.currentThread());
                 
                 this.exception = ex;

File: quasar-core/src/main/java/co/paralleluniverse/strands/OwnedSynchronizer.java
Patch:
@@ -15,6 +15,7 @@
 
 import co.paralleluniverse.concurrent.util.UtilUnsafe;
 import co.paralleluniverse.fibers.Fiber;
+import java.util.concurrent.TimeUnit;
 import sun.misc.Unsafe;
 
 /**
@@ -55,7 +56,7 @@ public void signal() {
     public void signalAndTryToExecNow() {
         final Strand s = waiter;
         if (s != null) {
-            if (s instanceof Fiber && ((Fiber) s).exec(this))
+            if (s instanceof Fiber && ((Fiber) s).exec(this, 0, TimeUnit.NANOSECONDS))
                 return;
             signal();
         }

File: quasar-core/src/main/java/co/paralleluniverse/concurrent/forkjoin/ParkableForkJoinTask.java
Patch:
@@ -153,7 +153,7 @@ protected boolean park1(Object blocker) throws Exception {
 
             if (compareAndSetState(_state, newState)) {
                 if (Debug.isDebug())
-                    record("park", "current: %s - %s -> %s", this, _state, newState);
+                    record("park", "current: %s - %s -> %s (blocker: %s)", this, _state, newState, blocker);
                 break;
             }
         }

File: quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -802,6 +802,8 @@ public final boolean exec(Object blocker) {
                 return true;
             }
         }
+        record(1, "Fiber", "exec", "Blocker %s attempt to immediately execute %s - FAILED", blocker, this);
+        Debug.exit(0);
         return false;
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -37,7 +37,7 @@ public V run() throws E, SuspendExecution, InterruptedException {
         while (!Fiber.park(this, this)) // make sure we actually park and run PostParkActions
             ;
         while (!isCompleted())
-            Fiber.park(this);
+            Fiber.park((Object)this);
         return getResult();
     }
 

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/quasar/MessengerImpl.java
Patch:
@@ -15,7 +15,7 @@
 
 import co.paralleluniverse.common.io.Streamable;
 import co.paralleluniverse.fibers.SuspendExecution;
-import co.paralleluniverse.fibers.futures.FiberAsyncListenableFuture;
+import co.paralleluniverse.fibers.futures.AsyncListenableFuture;
 import co.paralleluniverse.galaxy.MessageListener;
 import co.paralleluniverse.galaxy.TimeoutException;
 import co.paralleluniverse.strands.Strand;
@@ -96,7 +96,7 @@ public void sendToOwnerOf(long ref, String topic, Streamable data) throws Timeou
 
     private <V> V result(ListenableFuture<V> future) throws TimeoutException, SuspendExecution {
         try {
-            return FiberAsyncListenableFuture.get(future);
+            return AsyncListenableFuture.get(future);
         } catch (ExecutionException e) {
             Throwable ex = e.getCause();
             if (ex instanceof TimeoutException)

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/quasar/StoreImpl.java
Patch:
@@ -15,7 +15,7 @@
 
 import co.paralleluniverse.common.io.Persistable;
 import co.paralleluniverse.fibers.SuspendExecution;
-import co.paralleluniverse.fibers.futures.FiberAsyncListenableFuture;
+import co.paralleluniverse.fibers.futures.AsyncListenableFuture;
 import co.paralleluniverse.galaxy.CacheListener;
 import co.paralleluniverse.galaxy.InvokeOnLine;
 import co.paralleluniverse.galaxy.ItemState;
@@ -240,7 +240,7 @@ public ItemState getState(long id) {
 
     private <V> V result(ListenableFuture<V> future) throws TimeoutException, SuspendExecution {
         try {
-            return FiberAsyncListenableFuture.get(future);
+            return AsyncListenableFuture.get(future);
         } catch (ExecutionException e) {
             Throwable ex = e.getCause();
             if (ex instanceof TimeoutException)

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/GlxRemoteChannel.java
Patch:
@@ -45,7 +45,7 @@
 public class GlxRemoteChannel<Message> implements SendPort<Message>, Serializable {
     private static final Logger LOG = LoggerFactory.getLogger(GlxRemoteChannel.class);
     private static final Grid grid;
-    private static final ExecutorService sendThreadPool = Executors.newCachedThreadPool();
+    private static final ExecutorService sendThreadPool = Executors.newSingleThreadExecutor(); //Executors.newCachedThreadPool();
 
     static {
         try {
@@ -167,12 +167,13 @@ private static void unregisterRemoteRef(final short myNodeId, final boolean glob
     }
 
     private static void submitSend(final Object message, final boolean global, final long address, final Object topic) throws SuspendExecution {
+        LOG.debug("sending: " + message);
         sendThreadPool.submit(new Runnable() {
             @Override
             public void run() {
                 try {
                     staticSend(message, global, address, topic);
-                    LOG.debug("sent "+message);
+                    LOG.debug("sent {}", message);
                 } catch (SuspendExecution e) {
                     throw new AssertionError(e);
                 }
@@ -181,7 +182,6 @@ public void run() {
     }
 
     private static void staticSend(Object message, final boolean global, final long address, final Object topic) throws SuspendExecution {
-        LOG.debug("sending: " + message);
         try {
             if (global) {
                 final long ref = address;

File: quasar-galaxy/src/main/java/co/paralleluniverse/io/serialization/ExternalizableKryoSerializer.java
Patch:
@@ -13,7 +13,6 @@
  */
 package co.paralleluniverse.io.serialization;
 
-import static co.paralleluniverse.io.serialization.KryoSerializer.KRYO;
 import co.paralleluniverse.io.serialization.KryoSerializer.KryoObjectInputStream;
 import co.paralleluniverse.io.serialization.KryoSerializer.KryoObjectOutputStream;
 import com.esotericsoftware.kryo.Kryo;
@@ -27,6 +26,8 @@
  * @author pron
  */
 public class ExternalizableKryoSerializer<T extends Externalizable> extends com.esotericsoftware.kryo.Serializer<T> {
+    private static final KryoSerializer ks = new KryoSerializer();
+    
     @Override
     public void write(Kryo kryo, Output output, T obj) {
         try {
@@ -41,7 +42,7 @@ public void write(Kryo kryo, Output output, T obj) {
     public T read(Kryo kryo, Input input, Class<T> type) {
         try {
             KryoObjectInputStream ois = (KryoObjectInputStream)input;
-            T obj = KRYO.newInstance(type);
+            T obj = ks.kryo.newInstance(type);
             obj.readExternal(ois);
             return obj;
         } catch (IOException e) {

File: quasar-galaxy/src/main/java/co/paralleluniverse/remote/galaxy/RemoteChannelReceiver.java
Patch:
@@ -108,7 +108,7 @@ public void setFilter(MessageFilter<Message> filter) {
 
     @Override
     public void messageReceived(short fromNode, byte[] message) {
-        Object m1 = Serialization.read(message);
+        Object m1 = Serialization.getInstance().read(message);
         LOG.debug("Received: " + m1);
         if (m1 instanceof GlxRemoteChannel.CloseMessage) {
             channel.close();

File: quasar-core/src/main/java/co/paralleluniverse/actors/BasicActor.java
Patch:
@@ -67,11 +67,11 @@ public final Message receive(MessageProcessor<Message> proc) throws SuspendExecu
         return helper.receive(proc);
     }
 
-    public final <T> T receive(long timeout, TimeUnit unit, final Class<T> type) throws SuspendExecution, InterruptedException, TimeoutException {
+    public final <T extends Message> T receive(long timeout, TimeUnit unit, final Class<T> type) throws SuspendExecution, InterruptedException, TimeoutException {
         return helper.receive(timeout, unit, type);
     }
 
-    public final <T> T receive(final Class<T> type) throws SuspendExecution, InterruptedException {
+    public final <T extends Message> T receive(final Class<T> type) throws SuspendExecution, InterruptedException {
         return helper.receive(type);
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/actors/behaviors/GenMessage.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @author pron
  */
-public abstract class GenMessage {
+public abstract class GenMessage implements java.io.Serializable {
     @Override
     public String toString() {
         return getClass().getSimpleName() + "[" + contentString() + "]";

File: quasar-core/src/main/java/co/paralleluniverse/actors/behaviors/RemoteBasicGenBehavior.java
Patch:
@@ -25,7 +25,7 @@
  *
  * @author pron
  */
-public class RemoteBasicGenBehavior implements ActorWrapper<Object>, GenBehavior {
+public class RemoteBasicGenBehavior implements ActorWrapper<Object>, GenBehavior, java.io.Serializable {
     protected final RemoteActor<Object> actor;
 
     public RemoteBasicGenBehavior(RemoteActor<Object> actor) {

File: quasar-core/src/main/java/co/paralleluniverse/actors/behaviors/RemoteGenServer.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author pron
  */
-public class RemoteGenServer<CallMessage, V, CastMessage> extends RemoteBasicGenBehavior implements GenServer<CallMessage, V, CastMessage> {
+class RemoteGenServer<CallMessage, V, CastMessage> extends RemoteBasicGenBehavior implements GenServer<CallMessage, V, CastMessage> {
     public RemoteGenServer(RemoteActor<Object> actor) {
         super(actor);
     }

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/Peer1.java
Patch:
@@ -6,6 +6,6 @@
  */
 public class Peer1 {
     public static void main(String[] args) throws Exception {
-        new PeerTKB("grid1", 1).start();
+        new PeerTKB("grid1", 1).run();
     }
 }

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/Peer2.java
Patch:
@@ -6,6 +6,6 @@
  */
 public class Peer2 {
     public static void main(String[] args) throws Exception {
-        new PeerTKB("grid1", 2).start();
+        new PeerTKB("grid1", 2).run();
     }
 }

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/Peer3.java
Patch:
@@ -6,6 +6,6 @@
  */
 public class Peer3 {
     public static void main(String[] args) throws Exception {
-        new PeerTKB("grid1", 3).start();
+        new PeerTKB("grid1", 3).run();
     }
 }

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/Channels.java
Patch:
@@ -44,7 +44,7 @@ public final class Channels {
     public enum OverflowPolicy {
         THROW, DROP, BLOCK, BACKOFF, DISPLACE
     }
-    private static final OverflowPolicy defaultPolicy = OverflowPolicy.THROW;
+    private static final OverflowPolicy defaultPolicy = OverflowPolicy.BLOCK;
     private static final boolean defaultSingleProducer = false;
     private static final boolean defaultSingleConsumer = true;
 

File: quasar-core/src/main/java/co/paralleluniverse/strands/channels/SendPort.java
Patch:
@@ -20,12 +20,13 @@
  *
  * @author pron
  */
-public interface SendPort<Message> {
+public interface SendPort<Message> extends AutoCloseable {
     void send(Message message) throws SuspendExecution, InterruptedException;
 
     boolean send(Message message, long timeout, TimeUnit unit) throws SuspendExecution, InterruptedException;
 
     boolean trySend(Message message);
 
+    @Override
     void close();
 }

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/SingleConsumerQueue.java
Patch:
@@ -28,7 +28,7 @@
  * @author pron
  */
 public abstract class SingleConsumerQueue<E, Node> extends AbstractCollection<E> implements Iterable<E>, Queue<E>, BasicSingleConsumerQueue<E> {
-    public static final FlightRecorder RECORDER = Debug.isDebug() ? Debug.getGlobalFlightRecorder() : null;
+    static final FlightRecorder RECORDER = Debug.isDebug() ? Debug.getGlobalFlightRecorder() : null;
 
     @Override
     public abstract boolean enq(E element);

File: quasar-core/src/main/java/co/paralleluniverse/actors/SelectiveReceiveHelper.java
Patch:
@@ -79,6 +79,8 @@ public final Message receive(long timeout, TimeUnit unit, MessageProcessor<Messa
                             if (mailbox.value(n) == msg) // another call to receive from within the processor may have deleted n
                                 mailbox.del(n);
                             throw e;
+                        } finally {
+                            currentMessage = null;
                         }
                         actor.monitorSkippedMessage();
                     }

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/TickerChannelTest.java
Patch:
@@ -390,7 +390,7 @@ public void run() throws SuspendExecution, InterruptedException {
 
     @Test
     public void testMultipleConsumersAlwaysAscending() throws Exception {
-        final Channel<Integer> sch = Channels.newChannel(bufferSize, OverflowPolicy.DISPLACE);
+        final Channel<Integer> sch = Channels.newChannel(bufferSize, OverflowPolicy.DISPLACE, true, true);
 
         final SuspendableRunnable run = new SuspendableRunnable() {
             @Override

File: quasar-core/src/main/java/co/paralleluniverse/strands/queues/SingleConsumerArrayQueue.java
Patch:
@@ -46,7 +46,7 @@ static int nextPowerOfTwo(int v) {
 
     @Override
     public int capacity() {
-        return capacity();
+        return capacity;
     }
 
     @Override

File: quasar-galaxy/src/main/java/co/paralleluniverse/galaxy/example/PeerMain.java
Patch:
@@ -7,6 +7,7 @@
 import co.paralleluniverse.actors.Actor;
 import co.paralleluniverse.actors.BasicActor;
 import co.paralleluniverse.actors.LocalActor;
+import co.paralleluniverse.actors.RemoteActor;
 import co.paralleluniverse.fibers.Fiber;
 import co.paralleluniverse.fibers.SuspendExecution;
 import co.paralleluniverse.galaxy.Grid;

File: quasar-core/src/main/java/co/paralleluniverse/actors/LocalActor.java
Patch:
@@ -21,7 +21,6 @@
 import co.paralleluniverse.strands.Strand;
 import co.paralleluniverse.strands.Stranded;
 import co.paralleluniverse.strands.SuspendableCallable;
-import co.paralleluniverse.strands.channels.Mailbox;
 import co.paralleluniverse.strands.channels.ReceiveChannel;
 import co.paralleluniverse.strands.queues.QueueCapacityExceededException;
 import java.lang.reflect.Constructor;
@@ -52,6 +51,7 @@ public LocalActor(Object name, MailboxConfig mailboxConfig) {
         super(name,
                 Mailbox.create(mailboxConfig != null ? mailboxConfig.getMailboxSize() : -1));
         this.mailboxConfig = mailboxConfig;
+        mailbox().setActor(this);
     }
 
     public LocalActor(Strand strand, String name, MailboxConfig mailboxConfig) {

File: quasar-core/src/main/java/co/paralleluniverse/actors/SelectiveReceiveHelper.java
Patch:
@@ -5,7 +5,6 @@
 package co.paralleluniverse.actors;
 
 import co.paralleluniverse.fibers.SuspendExecution;
-import co.paralleluniverse.strands.channels.Mailbox;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 

File: quasar-core/src/main/java/co/paralleluniverse/remote/RemoteProxyFactoryService.java
Patch:
@@ -29,7 +29,7 @@ public static <Message> RemoteActor<Message> create(LocalActor<Message, ?> actor
         return factory.create(actor, globalId);
     }
     
-    public <Message> SendChannel<Message> create(Channel channel, Object globalId) {
+    public static <Message> SendChannel<Message> create(Channel channel, Object globalId) {
         return factory.create(channel, globalId);
     }
     

File: quasar-core/src/test/java/co/paralleluniverse/strands/channels/ChannelTest.java
Patch:
@@ -49,7 +49,7 @@ public void tearDown() {
 
     @Test
     public void sendMessageFromFiberToFiber() throws Exception {
-        final Channel<String> ch = ObjectChannel.<String>create(mailboxSize);
+        final Channel<String> ch = ObjectChannel.create(mailboxSize);
 
         Fiber fib1 = new Fiber("fiber", fjPool, new SuspendableRunnable() {
             @Override
@@ -74,7 +74,7 @@ public void run() throws SuspendExecution, InterruptedException {
 
     @Test
     public void sendMessageFromThreadToFiber() throws Exception {
-        final Channel<String> ch = ObjectChannel.<String>create(mailboxSize);
+        final Channel<String> ch = ObjectChannel.create(mailboxSize);
 
         Fiber fib = new Fiber("fiber", fjPool, new SuspendableRunnable() {
             @Override

File: quasar-core/src/test/java/co/paralleluniverse/concurrent/util/SingleConsumerNonblockingProducerDelayQueueTest.java
Patch:
@@ -104,7 +104,7 @@ public void testTake() throws Exception {
 
         final long elapsedMillis = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);
 
-        assertTrue("elapsed: " + elapsedMillis, elapsedMillis > 140 && elapsedMillis < 170);
+        assertTrue("elapsed: " + elapsedMillis, elapsedMillis > 140 && elapsedMillis < 300);
     }
 
     @Test

File: quasar-galaxy/src/main/java/co/paralleluniverse/actors/galaxy/RemoteActor.java
Patch:
@@ -29,7 +29,7 @@ protected void addLifecycleListener(LifecycleListener listener) {
     }
 
     @Override
-    protected void removeLifecycleListener(Object listener) {
+    protected void removeLifecycleListener(LifecycleListener listener) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: quasar-core/src/main/java/co/paralleluniverse/actors/ActorImpl.java
Patch:
@@ -172,7 +172,7 @@ protected void onMailboxFull(Message message, QueueCapacityExceededException e)
 
     protected abstract void addLifecycleListener(LifecycleListener listener);
 
-    protected abstract void removeLifecycleListener(LifecycleListener listener);
+    protected abstract void removeLifecycleListener(Object listener);
 
     protected abstract LifecycleListener getLifecycleListener();
 
@@ -219,7 +219,7 @@ public final Object watch(Actor other1) {
     public final void unwatch(Actor other1, Object listener) {
         final ActorImpl other = (ActorImpl) other1;
         record(1, "Actor", "unwatch", "Actor %s to stop watching %s (listener: %s)", this, other, listener);
-        other.removeLifecycleListener((LifecycleListener) listener);
+        other.removeLifecycleListener(listener);
     }
 
     static class ActorLifecycleListener implements LifecycleListener, java.io.Serializable {

File: quasar-core/src/main/java/co/paralleluniverse/actors/LocalActor.java
Patch:
@@ -370,7 +370,7 @@ protected final void addLifecycleListener(LifecycleListener listener) {
     }
 
     @Override
-    protected final void removeLifecycleListener(LifecycleListener listener) {
+    protected final void removeLifecycleListener(Object listener) {
         lifecycleListeners.remove(listener);
     }
 

File: quasar-galaxy/src/main/java/co/paralleluniverse/actors/galaxy/RemoteActor.java
Patch:
@@ -29,7 +29,7 @@ protected void addLifecycleListener(LifecycleListener listener) {
     }
 
     @Override
-    protected void removeLifecycleListener(LifecycleListener listener) {
+    protected void removeLifecycleListener(Object listener) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: src/main/java/co/paralleluniverse/fibers/SuspendExecution.java
Patch:
@@ -45,7 +45,8 @@
  */
 public final class SuspendExecution extends Exception { // InterruptedException {
 
-    static final SuspendExecution instance = new SuspendExecution();
+    static final SuspendExecution PARK = new SuspendExecution();
+    static final SuspendExecution YIELD = new SuspendExecution();
     
     private SuspendExecution() {
     }

File: src/test/java/co/paralleluniverse/actors/behaviors/GenEventTest.java
Patch:
@@ -114,6 +114,7 @@ public void testInitializationAndTermination() throws Exception {
         final Initializer init = mock(Initializer.class);
         LocalGenEvent<String> ge = spawnGenEvent(init);
 
+        Thread.sleep(100);
         verify(init).init();
 
         ge.shutdown();

File: src/main/java/co/paralleluniverse/actors/ExitMessage.java
Patch:
@@ -38,7 +38,7 @@ public Actor getActor() {
         return actor;
     }
 
-    public Object getReason() {
+    public Throwable getCause() {
         return cause;
     }
 

File: src/main/java/co/paralleluniverse/actors/behaviors/GenResponseMessage.java
Patch:
@@ -34,6 +34,6 @@ public Object getId() {
 
     @Override
     protected String contentString() {
-        return super.contentString() + " id: " + id;
+        return super.contentString() + "id: " + id;
     }
 }

File: src/main/java/co/paralleluniverse/actors/behaviors/GenServerHelper.java
Patch:
@@ -35,7 +35,7 @@ public static <Message, V> V call(Actor server, Message m) throws InterruptedExc
     }
 
     public static <V> V call(Actor server, Object m, long timeout, TimeUnit unit) throws TimeoutException, InterruptedException, SuspendExecution {
-        final GenResponseMessage response = RequestReplyHelper.call(server, new GenServerRequest(from(), makeId(), MessageType.CALL, m), timeout, unit);
+        final GenResponseMessage response = RequestReplyHelper.call(server, new GenServerRequest(from(), null, MessageType.CALL, m), timeout, unit);
         final V res = ((GenValueResponseMessage<V>) response).getValue();
         return res;
     }

File: src/main/java/co/paralleluniverse/strands/channels/Mailbox.java
Patch:
@@ -67,9 +67,8 @@ public void unlock() {
     }
 
     public void await() throws SuspendExecution, InterruptedException {
-            sync().lock();
-            sync().await();
-        }
+        sync().await();
+    }
 
     public void await(long timeout, TimeUnit unit) throws SuspendExecution, InterruptedException {
         sync().await(timeout, unit);

File: src/main/java/co/paralleluniverse/actors/behaviors/Supervisor.java
Patch:
@@ -419,7 +419,8 @@ private void shutdownChildren() throws InterruptedException {
             if (child.actor != null) {
                 try {
                     joinChild(child);
-                    child.actor.stopMonitor(); // must be done after join to avoid a race with the actor
+                    if (child.actor != null)
+                        child.actor.stopMonitor(); // must be done after join to avoid a race with the actor
                 } finally {
                     child.actor = null;
                 }

File: src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -180,7 +180,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
                 return null;
             if (className.startsWith("org/objectweb/asm/"))
                 return null;
-            if (className.startsWith(Classes.COROUTINE_NAME))
+            if (className.equals(Classes.COROUTINE_NAME))
                 return null;
 
             db.log(LogLevel.INFO, "TRANSFORM: %s %s", className, (db.getClassEntry(className) != null && db.getClassEntry(className).requiresInstrumentation()) ? "request" : "");

File: src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -29,8 +29,9 @@
 package co.paralleluniverse.fibers.instrument;
 
 import static co.paralleluniverse.fibers.instrument.Classes.EXCEPTION_NAME;
-import static co.paralleluniverse.fibers.instrument.Classes.STACK_CLASS;
+import static co.paralleluniverse.fibers.instrument.Classes.STACK_NAME;
 import static co.paralleluniverse.fibers.instrument.Classes.SUSPEND_EXECUTION_CLASS;
+import static co.paralleluniverse.fibers.instrument.Classes.isAllowedToBlock;
 import static co.paralleluniverse.fibers.instrument.Classes.isBlockingCall;
 import static co.paralleluniverse.fibers.instrument.Classes.isYieldMethod;
 import java.util.List;
@@ -61,7 +62,6 @@
  */
 class InstrumentMethod {
     private static final String INTERRUPTED_EXCEPTION_NAME = Type.getInternalName(InterruptedException.class);
-    private static final String STACK_NAME = Type.getInternalName(STACK_CLASS);
     private static final boolean DUAL = true; // true if suspendable methods can be called from regular threads in addition to fibers
     private final MethodDatabase db;
     private final String className;
@@ -112,7 +112,7 @@ public boolean collectCodeBlocks() {
                     } else {
                         db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s is not suspendable", i, min.owner, min.name, min.desc);
                         int blockingId = isBlockingCall(min);
-                        if (blockingId >= 0) {
+                        if (blockingId >= 0 && !isAllowedToBlock(className, mn.name)) {
                             int mask = 1 << blockingId;
                             if (!db.isAllowBlocking()) {
                                 throw new UnableToInstrumentException("blocking call to "

File: src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -180,6 +180,8 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
                 return null;
             if (className.startsWith("org/objectweb/asm/"))
                 return null;
+            if (className.startsWith(Classes.COROUTINE_NAME))
+                return null;
 
             db.log(LogLevel.INFO, "TRANSFORM: %s %s", className, (db.getClassEntry(className) != null && db.getClassEntry(className).requiresInstrumentation()) ? "request" : "");
 

File: src/main/java/co/paralleluniverse/actors/behaviors/LocalGenServer.java
Patch:
@@ -144,7 +144,7 @@ protected void handleLifecycleMessage(LifecycleMessage m) {
     }
 
     @Override
-    public void shutdown() {
+    public final void shutdown() {
         send(new ShutdownMessage(LocalActor.self()));
     }
 
@@ -181,6 +181,7 @@ protected V handleCall(Actor<V> from, Object id, CallMessage m) throws Exception
     protected void handleCast(Actor<V> from, Object id, CastMessage m) throws SuspendExecution {
         if (server != null)
             server.handleCast(from, id, m);
+        throw new UnsupportedOperationException(m.toString());
     }
 
     protected void handleInfo(Object m) throws SuspendExecution {

File: src/main/java/co/paralleluniverse/actors/behaviors/Supervisor.java
Patch:
@@ -201,6 +201,7 @@ else if (m1 instanceof GenRequestMessage) {
             }
         } catch (InterruptedException e) {
         } catch (Exception e) {
+            LOG.info("Exception!", e);
             throw Exceptions.rethrow(e);
         } finally {
             LOG.info("Supervisor {} shutting down.", this);
@@ -248,7 +249,7 @@ public final Actor addChild(ChildSpec spec) throws SuspendExecution, Interrupted
 
             return actor;
         } else {
-            final GenResponseMessage res = RequestReplyHelper.call(this, new AddChildMessage(self(), randtag(), spec));
+            final GenResponseMessage res = RequestReplyHelper.call(this, new AddChildMessage(RequestReplyHelper.from(), randtag(), spec));
             return ((GenValueResponseMessage<Actor>) res).getValue();
         }
     }
@@ -274,7 +275,7 @@ public final boolean removeChild(Object name, boolean terminate) throws SuspendE
 
             return true;
         } else {
-            final GenResponseMessage res = RequestReplyHelper.call(this, new RemoveChildMessage(self(), randtag(), name, terminate));
+            final GenResponseMessage res = RequestReplyHelper.call(this, new RemoveChildMessage(RequestReplyHelper.from(), randtag(), name, terminate));
             return ((GenValueResponseMessage<Boolean>) res).getValue();
         }
     }

File: src/main/java/co/paralleluniverse/strands/channels/Channel.java
Patch:
@@ -68,7 +68,7 @@ protected void maybeSetCurrentStrandAsOwner() {
         else {
             if (sync != mySync)
                 sync = mySync;
-            sync.verifyOwner();
+            assert sync.verifyOwner() : "This method has been called by a different strand (thread or fiber) than that owning this object";
         }
     }
 
@@ -87,12 +87,12 @@ public Strand getStrand() {
     }
 
     protected void signal() {
-        if (sync != null && sync.isOwnerAlive())
+        if (sync != null)
             sync.signal();
     }
 
     protected void signalAndTryToExecNow() {
-        if (sync != null && sync.isOwnerAlive())
+        if (sync != null)
             sync.signalAndTryToExecNow();
     }
 

File: src/main/java/co/paralleluniverse/strands/channels/ChannelGroup.java
Patch:
@@ -71,7 +71,7 @@ protected void maybeSetCurrentStrandAsOwner() {
         if (owner == null)
             setStrand(Strand.currentStrand());
         else
-            sync.verifyOwner();
+            assert sync.verifyOwner() : "This method has been called by a different strand (thread or fiber) than that owning this object";
         setSync();
     }
 

File: src/main/java/co/paralleluniverse/actors/ActorImpl.java
Patch:
@@ -64,8 +64,8 @@ public static Object randtag() {
         return new BigInteger(80, ThreadLocalRandom.current());
     }
 
-    public static Actor getActor(Object name) {
-        return ActorRegistry.getActor(name);
+    public static <Message, V> LocalActor<Message, V> getActor(Object name) {
+        return (LocalActor<Message, V>)ActorRegistry.getActor(name);
     }
 
     //<editor-fold desc="Mailbox methods">

File: src/main/java/co/paralleluniverse/actors/ActorMXBean.java
Patch:
@@ -22,5 +22,5 @@ public interface ActorMXBean {
     int getTotalReceivedMessages();
     int getQueueLength();
     int getTotalRestarts();
-    String[] getLastDeathReasons();
+    String[] getLastDeathCauses();
 }

File: src/main/java/co/paralleluniverse/actors/behaviors/LocalGenServer.java
Patch:
@@ -137,7 +137,7 @@ protected final Void doRun() throws InterruptedException, SuspendExecution {
     protected void handleLifecycleMessage(LifecycleMessage m) {
         if (m instanceof ShutdownMessage) {
             stop();
-            Strand.currentStrand().interrupt();
+            getStrand().interrupt();
         } else
             super.handleLifecycleMessage(m);
     }

File: src/main/java/co/paralleluniverse/fibers/Fiber.java
Patch:
@@ -687,7 +687,7 @@ public final boolean isInterrupted() {
      */
     @Override
     public final boolean isAlive() {
-        return state != State.NEW && !fjTask.isDone();
+        return !fjTask.isDone();
     }
 
     @Override

File: src/main/java/co/paralleluniverse/actors/ActorImpl.java
Patch:
@@ -54,7 +54,9 @@ public Object getName() {
         return name;
     }
 
-    void setName(Object name) {
+    public void setName(Object name) {
+        if(this.name != null)
+            throw new IllegalStateException("Actor " + this + " already has a name: " + this.name);
         this.name = name;
     }
 

File: src/main/java/co/paralleluniverse/actors/BasicActor.java
Patch:
@@ -14,9 +14,9 @@
 package co.paralleluniverse.actors;
 
 import co.paralleluniverse.fibers.SuspendExecution;
-import co.paralleluniverse.fibers.TimeoutException;
 import co.paralleluniverse.strands.Strand;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 
 /**
  *
@@ -55,11 +55,11 @@ public BasicActor(Strand strand, int mailboxSize) {
      * @throws TimeoutException
      * @throws LwtInterruptedException
      */
-    public Message receive(long timeout, TimeUnit unit, MessageProcessor<Message> proc) throws SuspendExecution, InterruptedException {
+    public Message receive(long timeout, TimeUnit unit, MessageProcessor<Message> proc) throws TimeoutException, SuspendExecution, InterruptedException {
         return helper.receive(timeout, unit, proc);
     }
 
     public Message receive(MessageProcessor<Message> proc) throws SuspendExecution, InterruptedException {
-        return receive(0, null, proc);
+        return helper.receive(proc);
     }
 }

File: src/main/java/co/paralleluniverse/actors/LocalActor.java
Patch:
@@ -282,7 +282,7 @@ protected void verifyInActor() {
     }
     
     protected boolean isInActor() {
-        return (currentActor() != this);
+        return (currentActor() == this);
     }
     //</editor-fold>
     
@@ -312,7 +312,7 @@ public final V run() throws InterruptedException, SuspendExecution {
         }
     }
 
-    protected void init() {
+    protected void init() throws InterruptedException, SuspendExecution {
     }
 
     protected abstract V doRun() throws InterruptedException, SuspendExecution;

File: src/main/java/co/paralleluniverse/actors/behaviors/GenMessage.java
Patch:
@@ -20,7 +20,7 @@
 public abstract class GenMessage {
     @Override
     public String toString() {
-        return getClass().getSimpleName() + "@[" + contentString() + "]";
+        return getClass().getSimpleName() + "[" + contentString() + "]";
     }
 
     protected String contentString() {

File: src/main/java/co/paralleluniverse/actors/behaviors/GenServer.java
Patch:
@@ -6,13 +6,15 @@
 
 import co.paralleluniverse.fibers.SuspendExecution;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 
 /**
  *
  * @author pron
  */
 public interface GenServer<Message, V> {
     V call(Message m) throws InterruptedException, SuspendExecution;
-    V call(Message m, long timeout, TimeUnit unit) throws InterruptedException, SuspendExecution;
+    V call(Message m, long timeout, TimeUnit unit) throws TimeoutException, InterruptedException, SuspendExecution;
     void cast(Message m);
+    void shutdown();
 }

File: src/main/java/co/paralleluniverse/fibers/FiberAsync.java
Patch:
@@ -23,7 +23,7 @@
  */
 public abstract class FiberAsync<V, Callback, E extends Throwable> implements Fiber.PostParkActions {
     @SuppressWarnings("empty-statement")
-    public V run() throws E, SuspendExecution {
+    public V run() throws E, SuspendExecution, InterruptedException {
         while (!Fiber.park(this, this)) // make sure we actually park and run PostParkActions
             ;
         while (!isCompleted())

File: src/main/java/co/paralleluniverse/fibers/Stack.java
Patch:
@@ -134,7 +134,7 @@ public final Object getObject(int idx) {
         return dataObject[curMethodSP + idx];
     }
 
-    public final void postRestore() {
+    public final void postRestore() throws InterruptedException {
         fiber.onResume();
     }
 

File: src/main/java/co/paralleluniverse/fibers/SuspendExecution.java
Patch:
@@ -43,7 +43,7 @@
  * 
  * @author Matthias Mann
  */
-public final class SuspendExecution extends InterruptedException {
+public final class SuspendExecution extends Exception { // InterruptedException {
 
     static final SuspendExecution instance = new SuspendExecution();
     

File: src/main/java/co/paralleluniverse/fibers/instrument/JavaAgent.java
Patch:
@@ -175,8 +175,7 @@ public Transformer(MethodDatabase db, boolean check) {
         }
 
         @Override
-        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
-                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
+        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
             if (MethodDatabase.isJavaCore(className))
                 return null;
             if (className.startsWith("org/objectweb/asm/"))

File: src/test/java/co/paralleluniverse/fibers/FiberAsyncTest.java
Patch:
@@ -83,7 +83,7 @@ public void run() {
         }
     };
 
-    static String callService(final Service service) throws SuspendExecution {
+    static String callService(final Service service) throws SuspendExecution, InterruptedException {
         return new MyFiberAsync() {
             @Override
             protected void requestAsync(Fiber current, MyCallback callback) {
@@ -114,7 +114,7 @@ public void fail(RuntimeException e) {
     public void testSyncCallback() throws Exception {
         final Fiber fiber = new Fiber(fjPool, new SuspendableRunnable() {
             @Override
-            public void run() throws SuspendExecution {
+            public void run() throws SuspendExecution, InterruptedException {
                 String res = callService(syncService);
                 assertThat(res, equalTo("sync result!"));
             }
@@ -144,7 +144,7 @@ public void run() throws SuspendExecution {
     public void testAsyncCallback() throws Exception {
         final Fiber fiber = new Fiber(fjPool, new SuspendableRunnable() {
             @Override
-            public void run() throws SuspendExecution {
+            public void run() throws SuspendExecution, InterruptedException {
                 String res = callService(asyncService);
                 assertThat(res, equalTo("async result!"));
             }

File: src/test/java/co/paralleluniverse/strands/channels/ChannelTest.java
Patch:
@@ -224,7 +224,7 @@ public void whenReceiveNotCalledFromOwnerThenThrowException4() throws Exception
             @Override
             public void run() {
                 try {
-                    ch.receive();
+                    ch.receiveFromThread();
                 } catch (InterruptedException ex) {
                     throw new AssertionError(ex);
                 }

File: src/main/java/co/paralleluniverse/actors/behaviors/LocalGenServer.java
Patch:
@@ -128,7 +128,7 @@ protected void handleInfo(Object m) {
         server.handleInfo(m);
     }
 
-    protected void terminate(Object reason) {
-        server.terminate(reason);
+    protected void terminate(Throwable cause) {
+        server.terminate(cause);
     }
 }

File: src/main/java/co/paralleluniverse/actors/behaviors/Server.java
Patch:
@@ -24,5 +24,5 @@ public interface Server<Message, V> {
     V handleCall(Actor<V> from, Message m);
     void handleCast(Actor<V> from, Message m);
     void handleInfo(Object m);
-    void terminate(Object reason);
+    void terminate(Throwable cause);
 }

File: src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
Patch:
@@ -401,7 +401,7 @@ private void emitNewAndDup(MethodVisitor mv, Frame frame, int stackIndex, Method
         int neededLocals = 0;
         for (int i = arguments; i >= 1; i--) {
             BasicValue v = (BasicValue) frame.getStack(stackIndex + i);
-            mv.visitVarInsn(v.getType().getOpcode(Opcodes.ISTORE), lvarStack + 1 + neededLocals);
+            mv.visitVarInsn(v.getType().getOpcode(Opcodes.ISTORE), lvarStack + NUM_LOCALS + neededLocals);
             neededLocals += v.getSize();
         }
         db.log(LogLevel.DEBUG, "Inserting NEW & DUP for constructor call %s%s with %d arguments (%d locals)", min.owner, min.desc, arguments, neededLocals);

File: src/main/java/co/paralleluniverse/fibers/instrument/InstrumentationTKB.java
Patch:
@@ -25,6 +25,5 @@ public static void main(String[] args) throws Exception {
     }
 
     void foo() {
-        
     }
 }

File: src/main/java/co/paralleluniverse/strands/channels/ChannelGroup.java
Patch:
@@ -44,7 +44,7 @@ public ChannelGroup(Channel<? extends Message>... channels) {
      * @param channels The member channels
      */
     public ChannelGroup(Collection<? extends Message> channels) {
-        this.channels = (Channel<? extends Message>[]) channels.toArray();
+        this.channels = (Channel<? extends Message>[]) channels.toArray(new Channel[channels.size()]);
     }
 
     /**

File: src/main/java/co/paralleluniverse/fibers/Stack.java
Patch:
@@ -1,6 +1,5 @@
 package co.paralleluniverse.fibers;
 
-import co.paralleluniverse.common.util.Debug;
 import java.io.Serializable;
 import java.util.Arrays;
 
@@ -62,7 +61,7 @@ public final void pushMethod(int entry, int numSlots) {
         if (dataTOS > dataObject.length)
             growDataStack(dataTOS);
 
-        if (Debug.isDebug())
+        if (fiber.recordsLevel(2))
             fiber.record(2, "Stack", "pushMethod     ", "%s %s", entry, Thread.currentThread().getStackTrace()[2] /*Arrays.toString(fiber.getStackTrace())*/);
     }
 
@@ -92,7 +91,7 @@ public final int nextMethodEntry() {
         curMethodSP = method[++idx];
         methodTOS = ++idx;
         final int entry = method[idx];
-        if (Debug.isDebug())
+        if (fiber.recordsLevel(2))
             fiber.record(2, "Stack", "nextMethodEntry", "%s %s", entry, Thread.currentThread().getStackTrace()[2] /*Arrays.toString(fiber.getStackTrace())*/);
         return entry;
     }

File: src/main/java/co/paralleluniverse/common/monitoring/Counter.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/FlightRecorder.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/FlightRecorderMXBean.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/FlightRecorderMessageFactory.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/ForkJoinInfo.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/ForkJoinPoolMXBean.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/ForkJoinPoolMonitor.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/GenericRecordingDouble.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/JMXForkJoinPoolMonitor.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/MetricsForkJoinPoolMonitor.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/MonitoringServices.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/MonitoringServicesMXBean.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/common/monitoring/Profile.java
Patch:
@@ -1,5 +1,4 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
  * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under

File: src/main/java/co/paralleluniverse/common/monitoring/RecordingDouble.java
Patch:
@@ -1,5 +1,4 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
  * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under

File: src/main/java/co/paralleluniverse/common/monitoring/SimpleMBean.java
Patch:
@@ -1,6 +1,5 @@
 /*
- * Quasar: lightweight threads and actors for the JVM.
- * Copyright (C) 2013, Parallel Universe Software Co. All rights reserved.
+ * Copyright (C) 2011-2013, Parallel Universe Software Co. All rights reserved.
  * 
  * This program and the accompanying materials are dual-licensed under
  * either the terms of the Eclipse Public License v1.0 as published by

File: src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
Patch:
@@ -129,8 +129,8 @@ public void visitEnd() {
                     super.visitAnnotation(ALREADY_INSTRUMENTED_NAME, true);
 
                 for (MethodNode mn : methods) {
-                    if (requiresInstrumentation)
-                        System.out.println("EEE: TRANSFORM: " + className + "." + mn.name + mn.desc);
+//                    if (requiresInstrumentation)
+//                        System.out.println("TRANSFORM: " + className + "." + mn.name + mn.desc);
 
                     MethodVisitor outMV = makeOutMV(mn);
                     try {

File: src/main/java/co/paralleluniverse/actors/ActorRegistry.java
Patch:
@@ -24,14 +24,14 @@ public static ActorMonitor register(Object name, Actor actor) {
         final Actor old = registeredActors.get(name);
         if (old != null && !old.isDone())
             throw new RuntimeException("Actor " + old + " is not dead and is already registered under " + name);
-        if (!registeredActors.remove(name, old))
+        if (old != null && !registeredActors.remove(name, old))
             throw new RuntimeException("Concurrent registration under the name " + name);
         if (registeredActors.putIfAbsent(name, actor) != null)
             throw new RuntimeException("Concurrent registration under the name " + name);
 
         ActorMonitor monitor = registeredActorMonitors.get(name);
         if (monitor == null) {
-            monitor = Actor.newActorMonitor(name.toString());
+            monitor = Actor.newActorMonitor(name.toString().replaceAll(":", ""));
             registeredActorMonitors.put(name, monitor);
         }
         

File: src/main/java/co/paralleluniverse/actors/JMXActorMonitor.java
Patch:
@@ -144,6 +144,8 @@ public final long nanoTime() {
 
     @Override
     public void addDeath(Object reason) {
+        if(reason == null)
+            reason = "normal";
         while (deathReasons.size() > 20)
             deathReasons.poll();
         deathReasons.add(reason.toString());

File: src/main/java/co/paralleluniverse/concurrent/forkjoin/ParkableForkJoinTask.java
Patch:
@@ -73,7 +73,7 @@ protected void setBlocker(Object blocker) {
 
     protected void onExec() {
         if (Debug.isDebug())
-            record("doExec", "executing %s");
+            record("doExec", "executing %s", this);
     }
 
     protected void onCompletion(boolean res) {

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerDoubleQueue.java
Patch:
@@ -9,6 +9,6 @@
  * @author pron
  */
 public interface SingleConsumerDoubleQueue<Node> {
-    void enq(double item);
+    boolean enq(double item);
     double doubleValue(Node node);
 }

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerFloatQueue.java
Patch:
@@ -9,6 +9,6 @@
  * @author pron
  */
 public interface SingleConsumerFloatQueue<Node> {
-    void enq(float item);
+    boolean enq(float item);
     float floatValue(Node node);
 }

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerIntQueue.java
Patch:
@@ -9,6 +9,6 @@
  * @author pron
  */
 public interface SingleConsumerIntQueue<Node> {
-    void enq(int item);
+    boolean enq(int item);
     int intValue(Node node);
 }

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedArrayDWordQueue.java
Patch:
@@ -16,10 +16,11 @@ int blockSize() {
         return BLOCK_SIZE;
     }
 
-    void enq(long item) {
+    boolean enq(long item) {
         ElementPointer ep = preEnq();
         ((WordNode) ep.n).array[ep.i] = item;
         postEnq(ep.n, ep.i);
+        return true;
     }
 
     long rawValue(Node n, int i) {

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedArrayObjectQueue.java
Patch:
@@ -26,12 +26,12 @@ int blockSize() {
     }
     
     @Override
-    public void enq(E item) {
+    public boolean enq(E item) {
         for (;;) {
             final Node t = tail;
             for (int i = 0; i < BLOCK_SIZE; i++) {
                 if (get(t, i) == null && compareAndSetElement(t, i, null, item))
-                    return;
+                    return true;
             }
 
             Node n = newNode();

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedArrayWordQueue.java
Patch:
@@ -16,10 +16,11 @@ int blockSize() {
         return BLOCK_SIZE;
     }
 
-    void enq(int item) {
+    boolean enq(int item) {
         ElementPointer ep = preEnq();
         ((WordNode) ep.n).array[ep.i] = item;
         postEnq(ep.n, ep.i);
+        return true;
     }
 
     int rawValue(Node n, int i) {

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedDWordQueue.java
Patch:
@@ -16,10 +16,10 @@ Node newNode() {
         return new DWordNode();
     }
 
-    void enq(long item) {
+    boolean enq(long item) {
         DWordNode node = new DWordNode();
         node.value = item;
-        enq(node);
+        return enq(node);
     }
 
     long rawValue(Node node) {

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedObjectQueue.java
Patch:
@@ -17,12 +17,12 @@ Node<E> newNode() {
     }
 
     @Override
-    public void enq(E item) {
+    public boolean enq(E item) {
         if (item == null)
             throw new IllegalArgumentException("null values not allowed");
         ObjectNode node = new ObjectNode();
         node.value = item;
-        enq(node);
+        return enq(node);
     }
 
     @Override

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLinkedWordQueue.java
Patch:
@@ -16,10 +16,10 @@ Node newNode() {
         return new WordNode();
     }
 
-    void enq(int item) {
+    boolean enq(int item) {
         WordNode node = new WordNode();
         node.value = item;
-        enq(node);
+        return enq(node);
     }
 
     int rawValue(Node node) {

File: src/main/java/co/paralleluniverse/strands/queues/SingleConsumerLongQueue.java
Patch:
@@ -9,6 +9,6 @@
  * @author pron
  */
 public interface SingleConsumerLongQueue<Node> {
-    void enq(long item);
+    boolean enq(long item);
     long longValue(Node node);
 }

File: src/main/java/co/paralleluniverse/actors/Actor.java
Patch:
@@ -227,7 +227,7 @@ public void join(long timeout, TimeUnit unit) throws ExecutionException, Interru
 
     @Override
     public boolean isDone() {
-        return strand.isAlive();
+        return !strand.isAlive();
     }
     //</editor-fold>
 

File: src/main/java/co/paralleluniverse/strands/channels/Channel.java
Patch:
@@ -119,6 +119,8 @@ public Message receive() throws SuspendExecution, InterruptedException {
 
     public Message receive(long timeout, TimeUnit unit) throws SuspendExecution, InterruptedException {
         final Object n = receiveNode(timeout, unit);
+        if(n == null)
+            return null; // timeout
         final Message m = queue.value(n);
         queue.deq(n);
         return m;

File: src/test/java/co/paralleluniverse/actors/ActorTest.java
Patch:
@@ -181,6 +181,7 @@ protected Void doRun() throws SuspendExecution, InterruptedException {
         actor.send(new Message(2));
         Thread.sleep(100);
         actor.send(new Message(3));
+        actor.join();
     }
 
     @Test

File: src/main/java/co/paralleluniverse/actors/MessageProcessor.java
Patch:
@@ -4,10 +4,12 @@
  */
 package co.paralleluniverse.actors;
 
+import co.paralleluniverse.lwthreads.SuspendExecution;
+
 /**
  *
  * @author pron
  */
 public interface MessageProcessor<Message> {
-    boolean process(Message m);
+    boolean process(Message m) throws SuspendExecution, InterruptedException;
 }

File: src/main/java/co/paralleluniverse/actors/Actor.java
Patch:
@@ -4,6 +4,7 @@
  */
 package co.paralleluniverse.actors;
 
+import co.paralleluniverse.common.util.Exceptions;
 import co.paralleluniverse.lwthreads.LightweightThread;
 import co.paralleluniverse.lwthreads.SuspendExecution;
 import co.paralleluniverse.lwthreads.channels.Channel;
@@ -157,6 +158,7 @@ protected void onCompletion() {
     @Override
     protected void onException(Throwable t) {
         notifyDeath(t);
+        Exceptions.rethrow(t);
     }
 
     @Override

File: src/main/java/co/paralleluniverse/lwthreads/channels/Channel.java
Patch:
@@ -5,7 +5,7 @@
 package co.paralleluniverse.lwthreads.channels;
 
 import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.OwnedSynchronizer;
+import co.paralleluniverse.lwthreads.sync.OwnedSynchronizer;
 import co.paralleluniverse.lwthreads.SuspendExecution;
 import co.paralleluniverse.lwthreads.queues.SingleConsumerQueue;
 import java.util.concurrent.locks.Condition;

File: src/main/java/co/paralleluniverse/lwthreads/sync/OwnedSynchronizer.java
Patch:
@@ -2,8 +2,10 @@
  * To change this template, choose Tools | Templates
  * and open the template in the editor.
  */
-package co.paralleluniverse.lwthreads;
+package co.paralleluniverse.lwthreads.sync;
 
+import co.paralleluniverse.lwthreads.LightweightThread;
+import co.paralleluniverse.lwthreads.SuspendExecution;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.Lock;

File: src/test/java/co/paralleluniverse/actors/PrimitiveChannelRingBenchmark.java
Patch:
@@ -3,6 +3,7 @@
 import co.paralleluniverse.lwthreads.LightweightThread;
 import co.paralleluniverse.lwthreads.SuspendExecution;
 import co.paralleluniverse.lwthreads.channels.IntChannel;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import jsr166e.ForkJoinPool;
 
@@ -17,7 +18,7 @@ public static void main(String args[]) throws Exception {
     
     ForkJoinPool fjPool = new ForkJoinPool(4, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);
 
-    void run() throws InterruptedException {
+    void run() throws ExecutionException, InterruptedException {
         fjPool = new ForkJoinPool(4, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);
 
         System.out.println("Starting ");

File: src/test/java/co/paralleluniverse/actors/RingBenchmark.java
Patch:
@@ -1,6 +1,7 @@
 package co.paralleluniverse.actors;
 
 import co.paralleluniverse.lwthreads.SuspendExecution;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import jsr166e.ForkJoinPool;
 
@@ -15,7 +16,7 @@ public static void main(String args[]) throws Exception {
     }
     ForkJoinPool fjPool = new ForkJoinPool(4, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);
 
-    void run() throws InterruptedException {
+    void run() throws ExecutionException, InterruptedException {
         fjPool = new ForkJoinPool(4, ForkJoinPool.defaultForkJoinWorkerThreadFactory, null, true);
 
         System.out.println("Starting ");

File: src/main/java/co/paralleluniverse/actors/Actor.java
Patch:
@@ -141,7 +141,7 @@ public Actor start() {
     //<editor-fold desc="Lifecycle">
     /////////// Lifecycle ///////////////////////////////////
     @Override
-    protected abstract V run() throws SuspendExecution;
+    protected abstract V run() throws InterruptedException, SuspendExecution;
 
     protected void handleLifecycleMessage(LifecycleMessage m) {
         if (m instanceof ExitMessage)

File: src/test/java/co/paralleluniverse/actors/ActorTest.java
Patch:
@@ -31,7 +31,7 @@ public void testReceive() {
             int counter;
 
             @Override
-            protected Void run() throws SuspendExecution {
+            protected Void run() throws SuspendExecution, InterruptedException {
                 for (;;) {
                     receive(new MessageProcessor<Message>() {
                         @Override

File: src/test/java/co/paralleluniverse/actors/RingBenchmark.java
Patch:
@@ -23,7 +23,7 @@ void run() throws InterruptedException {
 
         Actor<Message, Integer> manager = new Actor<Message, Integer>(fjPool, mailboxSize) {
             @Override
-            protected Integer run() throws SuspendExecution {
+            protected Integer run() throws InterruptedException, SuspendExecution {
                 Actor a = this;
                 for (int i = 0; i < N; i++)
                     a = createRelayActor(a);
@@ -59,7 +59,7 @@ private Actor createRelayActor(final Actor<Message, ?> prev) {
         // final MessageProcessor<Message> relayMessage = relayMessage(prev);
         return new Actor<Message, Void>(fjPool, mailboxSize) {
             @Override
-            protected Void run() throws SuspendExecution {
+            protected Void run() throws InterruptedException, SuspendExecution {
                 for (;;)
                     receive(relayMessage(prev));
             }

File: src/test/java/co/paralleluniverse/lwthreads/InitialSizeTest.java
Patch:
@@ -31,7 +31,7 @@ public void test3() {
     }
     
     private void testWithSize(int stackSize) {
-        LightweightThread c = new LightweightThread(null, this, stackSize);
+        LightweightThread c = new LightweightThread(null, null, this, stackSize);
         assertEquals(getStackSize(c), stackSize);
         boolean res = c.exec();
         assertEquals(res, false);

File: src/test/java/co/paralleluniverse/lwthreads/datastruct/SingleConsumerQueueTest.java
Patch:
@@ -29,6 +29,7 @@ public class SingleConsumerQueueTest {
 //    public SingleConsumerQueueTest() {
 //        queue = new SingleConsumerArrayQueue<String>(10);
 //    }
+    
     public SingleConsumerQueueTest(int queueType) {
         switch (queueType) {
             case 1:

File: src/test/java/co/paralleluniverse/lwthreads/ArrayTest.java
Patch:
@@ -20,7 +20,7 @@ public class ArrayTest implements SuspendableRunnable {
     
     @Test
     public void testArray() {
-        LightweightThread co = new LightweightThread(null, this);
+        LightweightThread co = new LightweightThread(null, null, this);
         co.exec();
         assertEquals(42, l1.i);
     }

File: src/test/java/co/paralleluniverse/lwthreads/CatchTest.java
Patch:
@@ -75,7 +75,7 @@ public void testCatch() {
         results.clear();
 
         try {
-            LightweightThread co = new LightweightThread(null, this);
+            LightweightThread co = new LightweightThread(null, null, this);
             exec(co);
             results.add("B");
             exec(co);

File: src/test/java/co/paralleluniverse/lwthreads/DoubleTest.java
Patch:
@@ -19,7 +19,7 @@ public class DoubleTest implements SuspendableRunnable {
 
     @Test
     public void testDouble() {
-        LightweightThread co = new LightweightThread(null, this);
+        LightweightThread co = new LightweightThread(null, null, this);
         co.exec();
         assertEquals(0, result, 1e-8);
         boolean res = co.exec();

File: src/test/java/co/paralleluniverse/lwthreads/FinallyTest.java
Patch:
@@ -64,7 +64,7 @@ public void testFinally() {
         results.clear();
         
         try {
-            LightweightThread co = new LightweightThread(null, this);
+            LightweightThread co = new LightweightThread(null, null, this);
             exec(co);
             results.add("B");
             exec(co);

File: src/test/java/co/paralleluniverse/lwthreads/InheritTest.java
Patch:
@@ -19,7 +19,7 @@ public class InheritTest {
     @Test
     public void testInherit() {
         final C dut = new C();
-        LightweightThread c = new LightweightThread(null, new SuspendableRunnable() {
+        LightweightThread c = new LightweightThread(null, null, new SuspendableRunnable() {
             @Override
             public void run() throws SuspendExecution {
                 dut.myMethod();

File: src/test/java/co/paralleluniverse/lwthreads/InterfaceTest.java
Patch:
@@ -45,7 +45,7 @@ public void doStuff() throws SuspendExecution {
     @Test
     public void testSuspend() {
 //		final I i = new C();
-        LightweightThread co = new LightweightThread(null, new SuspendableRunnable() {
+        LightweightThread co = new LightweightThread(null, null, new SuspendableRunnable() {
             @Override
             public final void run() throws SuspendExecution {
                 // next line causes an error because of incomplete merge in TypeInterpreter

File: src/test/java/co/paralleluniverse/lwthreads/Merge2Test.java
Patch:
@@ -49,7 +49,7 @@ public void run() throws SuspendExecution {
     @Test
     public void testMerge2() {
         try {
-            LightweightThread c = new LightweightThread(null, new Merge2Test());
+            LightweightThread c = new LightweightThread(null, null, new Merge2Test());
             c.exec();
             assertTrue("Should not reach here", false);
         } catch (NullPointerException ex) {

File: src/test/java/co/paralleluniverse/lwthreads/Merge3Test.java
Patch:
@@ -33,7 +33,7 @@ private void blub() throws SuspendExecution {
     
     @Test
     public void testMerge3() {
-        LightweightThread c = new LightweightThread(null, new Merge3Test());
+        LightweightThread c = new LightweightThread(null, null, new Merge3Test());
         c.exec();
     }
 }

File: src/test/java/co/paralleluniverse/lwthreads/MergeTest.java
Patch:
@@ -31,7 +31,7 @@ public void run() throws SuspendExecution {
 
     @Test
     public void testMerge() {
-        LightweightThread c = new LightweightThread(null, new MergeTest());
+        LightweightThread c = new LightweightThread(null, null, new MergeTest());
         c.exec();
     }
 }

File: src/test/java/co/paralleluniverse/lwthreads/NullTest.java
Patch:
@@ -19,7 +19,7 @@ public class NullTest implements SuspendableRunnable {
     
     @Test
     public void testNull() {
-        LightweightThread co = new LightweightThread(null, this);
+        LightweightThread co = new LightweightThread(null, null, this);
         int count = 1;
         while(!co.exec())
             count++;

File: src/test/java/co/paralleluniverse/lwthreads/SuspendTest.java
Patch:
@@ -40,7 +40,7 @@ public class SuspendTest implements SuspendableRunnable {
     @Test
     public void testSuspend() {
         SuspendTest test = new SuspendTest();
-        LightweightThread co = new LightweightThread(null, test);
+        LightweightThread co = new LightweightThread(null, null, test);
 
         while (!exec(co))
             System.out.println("State=" + co.getState());

File: src/test/java/co/paralleluniverse/lwthreads/ThrowTest.java
Patch:
@@ -76,7 +76,7 @@ public void run() throws SuspendExecution {
     public void testThrow() {
         results.clear();
         
-        LightweightThread co = new LightweightThread(null, this);
+        LightweightThread co = new LightweightThread(null, null, this);
         try {
             exec(co);
             results.add("B");

File: src/test/java/co/paralleluniverse/lwthreads/UninitializedTest.java
Patch:
@@ -19,7 +19,7 @@ public class UninitializedTest implements SuspendableRunnable {
     
     @Test
     public void testUninitialized() {
-        LightweightThread co = new LightweightThread(null, this);
+        LightweightThread co = new LightweightThread(null, null, this);
         int count = 1;
         while(!co.exec())
             count++;

File: src/main/java/co/paralleluniverse/lwthreads/instrument/Classes.java
Patch:
@@ -16,7 +16,6 @@ final class Classes {
     static final Class<?> SUSPEND_EXECUTION_CLASS = co.paralleluniverse.lwthreads.SuspendExecution.class;
     static final Class<?> COROUTINE_CLASS = co.paralleluniverse.lwthreads.LightweightThread.class;
     static final Class<?> STACK_CLASS = co.paralleluniverse.lwthreads.Stack.class;
-    private static final String YIELD_NAME = "park";
     //static final String EXCEPTION_INSTANCE_NAME = "exception_instance_not_for_user_code";
     private static final BlockingMethod BLOCKING_METHODS[] = {
         new BlockingMethod("java/lang/Thread", "sleep", "(J)V", "(JI)V"),

File: src/test/java/co/paralleluniverse/lwthreads/ArrayTest.java
Patch:
@@ -5,9 +5,6 @@
 
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static org.junit.Assert.*;
 import org.junit.Test;
 

File: src/test/java/co/paralleluniverse/lwthreads/BlockingTest.java
Patch:
@@ -28,7 +28,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
 import co.paralleluniverse.lwthreads.instrument.InstrumentClass;
 import co.paralleluniverse.lwthreads.instrument.Log;
 import co.paralleluniverse.lwthreads.instrument.LogLevel;

File: src/test/java/co/paralleluniverse/lwthreads/CatchTest.java
Patch:
@@ -28,9 +28,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static co.paralleluniverse.lwthreads.TestsHelper.exec;
 import java.util.ArrayList;
 import java.util.Iterator;

File: src/test/java/co/paralleluniverse/lwthreads/DoubleTest.java
Patch:
@@ -5,9 +5,6 @@
 
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static org.junit.Assert.*;
 import org.junit.Test;
 

File: src/test/java/co/paralleluniverse/lwthreads/FinallyTest.java
Patch:
@@ -28,9 +28,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static co.paralleluniverse.lwthreads.TestsHelper.exec;
 import java.util.ArrayList;
 import static org.junit.Assert.*;

File: src/test/java/co/paralleluniverse/lwthreads/InheritTest.java
Patch:
@@ -5,9 +5,6 @@
 
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static co.paralleluniverse.lwthreads.TestsHelper.exec;
 import java.util.ArrayList;
 import static org.junit.Assert.*;

File: src/test/java/co/paralleluniverse/lwthreads/InterfaceTest.java
Patch:
@@ -4,9 +4,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import org.junit.Test;
 
 /**

File: src/test/java/co/paralleluniverse/lwthreads/Merge2Test.java
Patch:
@@ -4,9 +4,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static org.junit.Assert.*;
 import org.junit.Test;
 

File: src/test/java/co/paralleluniverse/lwthreads/Merge3Test.java
Patch:
@@ -4,9 +4,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import org.junit.Test;
 
 /**

File: src/test/java/co/paralleluniverse/lwthreads/MergeTest.java
Patch:
@@ -4,9 +4,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import org.junit.Test;

File: src/test/java/co/paralleluniverse/lwthreads/NullTest.java
Patch:
@@ -5,9 +5,6 @@
 
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static org.junit.Assert.*;
 import org.junit.Test;
 

File: src/test/java/co/paralleluniverse/lwthreads/SomeInterface.java
Patch:
@@ -5,8 +5,6 @@
 
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-
 /**
  * A dummy interface used for the InterfaceTest
  * 

File: src/test/java/co/paralleluniverse/lwthreads/SuspendTest.java
Patch:
@@ -28,9 +28,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static co.paralleluniverse.lwthreads.TestsHelper.exec;
 import org.junit.Test;
 

File: src/test/java/co/paralleluniverse/lwthreads/TestsHelper.java
Patch:
@@ -4,8 +4,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.LightweightThread;
-
 /**
  *
  * @author pron

File: src/test/java/co/paralleluniverse/lwthreads/ThrowTest.java
Patch:
@@ -28,9 +28,6 @@
  */
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static co.paralleluniverse.lwthreads.TestsHelper.exec;
 import java.util.ArrayList;
 import static org.junit.Assert.*;

File: src/test/java/co/paralleluniverse/lwthreads/UninitializedTest.java
Patch:
@@ -5,9 +5,6 @@
 
 package co.paralleluniverse.lwthreads;
 
-import co.paralleluniverse.lwthreads.SuspendExecution;
-import co.paralleluniverse.lwthreads.LightweightThread;
-import co.paralleluniverse.lwthreads.SuspendableRunnable;
 import static org.junit.Assert.*;
 import org.junit.Test;
 

File: src/main/java/co/paralleluniverse/lwthreads/LightweightThread.java
Patch:
@@ -80,10 +80,10 @@ public static LightweightThread currentLightweightThread() {
      * @throws SuspendExecution This exception is used for control transfer and must never be caught.
      * @throws IllegalStateException If not called from a LightweightThread
      */
-    public static void park(Object blocker, PostParkActions postParkActions) throws SuspendExecution {
+    public static boolean park(Object blocker, PostParkActions postParkActions) throws SuspendExecution {
         final LightweightThread current = verifySuspend();
         current.postParkActions = postParkActions;
-        current.park1(blocker);
+        return current.park1(blocker);
     }
 
     public static void park(Object blocker) throws SuspendExecution {

File: src/main/java/co/paralleluniverse/lwthreads/LightweightThreadAsync.java
Patch:
@@ -13,9 +13,11 @@
  */
 public abstract class LightweightThreadAsync<V, Callback, E extends Throwable> {
 
+    @SuppressWarnings("empty-statement")
     public V run() throws E, SuspendExecution {
         final LightweightThreadCallback handler = new LightweightThreadCallback();
-        LightweightThread.park(this, handler);
+        while(!LightweightThread.park(this, handler)) // make sure we actually park and run PostParkActions
+            ;
         while (!handler.isCompleted())
             LightweightThread.park(this);
         return handler.getResult();

