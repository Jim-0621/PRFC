File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -131,8 +131,8 @@ public FormatterStep build() {
 			}
 			var classpath = new ArrayList<File>();
 			var mavenDeps = new ArrayList<String>();
-			mavenDeps.add("dev.equo.ide:solstice:1.8.0");
-			mavenDeps.add("com.diffplug.durian:durian-swt.os:4.2.0");
+			mavenDeps.add("dev.equo.ide:solstice:1.8.1");
+			mavenDeps.add("com.diffplug.durian:durian-swt.os:4.3.1");
 			mavenDeps.addAll(query.getJarsOnMavenCentral());
 			classpath.addAll(mavenProvisioner.provisionWithTransitives(false, mavenDeps));
 			classpath.addAll(query.getJarsNotOnMavenCentral());

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -131,8 +131,8 @@ public FormatterStep build() {
 			}
 			var classpath = new ArrayList<File>();
 			var mavenDeps = new ArrayList<String>();
-			mavenDeps.add("dev.equo.ide:solstice:1.8.0");
-			mavenDeps.add("com.diffplug.durian:durian-swt.os:4.2.0");
+			mavenDeps.add("dev.equo.ide:solstice:1.8.1");
+			mavenDeps.add("com.diffplug.durian:durian-swt.os:4.3.1");
 			mavenDeps.addAll(query.getJarsOnMavenCentral());
 			classpath.addAll(mavenProvisioner.provisionWithTransitives(false, mavenDeps));
 			classpath.addAll(query.getJarsNotOnMavenCentral());

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public final class EclipseJdtFormatterStep {
 	private EclipseJdtFormatterStep() {}
 
 	private static final String NAME = "eclipse jdt formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.32");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.34");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -193,6 +193,8 @@ static class RuntimeInit {
 			/////////////////////////////////
 			// USER AND SYSTEM-WIDE VALUES //
 			/////////////////////////////////
+			FS.DETECTED.setGitSystemConfig(new File("no-global-git-config-for-spotless")); // this fixes a problem
+			// that was only occurring on Java 11. If we remove support for Java 11, we could probably remove it.
 			systemConfig = SystemReader.getInstance().openSystemConfig(null, FS.DETECTED);
 			Errors.log().run(systemConfig::load);
 			userConfig = SystemReader.getInstance().openUserConfig(systemConfig, FS.DETECTED);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class SpotlessPlugin implements Plugin<Project> {
 	static final String SPOTLESS_MODERN = "spotlessModern";
 	static final String VER_GRADLE_min = "6.1.1";
 	static final String VER_GRADLE_javaPluginExtension = "7.1";
-	static final String VER_GRADLE_minVersionForCustom = "8.0";
+	static final String VER_GRADLE_minVersionForCustom = "8.4";
 	private static final int MINIMUM_JRE = 11;
 
 	@Override

File: testlib/src/test/java/com/diffplug/spotless/combined/CombinedJavaFormatStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 DiffPlug
+ * Copyright 2023-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
 import com.diffplug.spotless.java.GoogleJavaFormatStep;
 import com.diffplug.spotless.java.ImportOrderStep;
 import com.diffplug.spotless.java.RemoveUnusedImportsStep;
+import com.diffplug.spotless.yaml.SerializeToByteArrayHack;
 
 public class CombinedJavaFormatStepTest extends ResourceHarness {
 
@@ -45,6 +46,7 @@ void checkIssue1679() {
 		FenceStep toggleOffOnPair = FenceStep.named(FenceStep.defaultToggleName()).openClose("formatting:off", "formatting:on");
 		try (StepHarness formatter = StepHarness.forSteps(
 				toggleOffOnPair.preserveWithin(List.of(
+						new SerializeToByteArrayHack(),
 						gjf,
 						indentWithSpaces,
 						importOrder,

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -193,6 +193,7 @@ static class RuntimeInit {
 			/////////////////////////////////
 			// USER AND SYSTEM-WIDE VALUES //
 			/////////////////////////////////
+			FS.DETECTED.setGitSystemConfig(new File("no-global-git-config-for-spotless"));
 			systemConfig = SystemReader.getInstance().openSystemConfig(null, FS.DETECTED);
 			Errors.log().run(systemConfig::load);
 			userConfig = SystemReader.getInstance().openUserConfig(systemConfig, FS.DETECTED);

File: lib/src/main/java/com/diffplug/spotless/ConfigurationCacheHackList.java
Patch:
@@ -16,7 +16,6 @@
 package com.diffplug.spotless;
 
 import java.io.IOException;
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -61,7 +60,7 @@ private void writeObject(java.io.ObjectOutputStream out) throws IOException {
 		for (Object obj : backingList) {
 			// if write out the list on its own, we'll get java's non-deterministic object-graph serialization
 			// by writing each object to raw bytes independently, we avoid this
-			out.writeObject(LazyForwardingEquality.toBytes((Serializable) obj));
+			out.writeObject(obj);
 		}
 	}
 
@@ -71,7 +70,7 @@ private void readObject(java.io.ObjectInputStream in) throws IOException, ClassN
 		backingList = new ArrayList<>();
 		int size = in.readInt();
 		for (int i = 0; i < size; i++) {
-			backingList.add(LazyForwardingEquality.fromBytes((byte[]) in.readObject()));
+			backingList.add(in.readObject());
 		}
 	}
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public final class GrEclipseFormatterStep {
 	private GrEclipseFormatterStep() {}
 
 	private static final String NAME = "eclipse groovy formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.32");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.34");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public final class EclipseJdtFormatterStep {
 	private EclipseJdtFormatterStep() {}
 
 	private static final String NAME = "eclipse jdt formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.32");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.34");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -106,7 +106,7 @@ static <RoundtripState extends Serializable, EqualityState extends Serializable>
 			String name,
 			ThrowingEx.Supplier<RoundtripState> roundtripInit,
 			SerializedFunction<RoundtripState, EqualityState> equalityFunc,
-			SerializedFunction<EqualityState, FormatterFunc> formatterFunc) {
+			SerializedFunction<EqualityState, ? extends FormatterFunc> formatterFunc) {
 		return new FormatterStepSerializationRoundtrip<>(name, roundtripInit, equalityFunc, formatterFunc);
 	}
 
@@ -128,7 +128,7 @@ static <RoundtripState extends Serializable, EqualityState extends Serializable>
 			String name,
 			RoundtripState roundTrip,
 			SerializedFunction<RoundtripState, EqualityState> equalityFunc,
-			SerializedFunction<EqualityState, FormatterFunc> formatterFunc) {
+			SerializedFunction<EqualityState, ? extends FormatterFunc> formatterFunc) {
 		return createLazy(name, () -> roundTrip, equalityFunc, formatterFunc);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/FormatterStepSerializationRoundtrip.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 DiffPlug
+ * Copyright 2023-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,9 +30,9 @@ final class FormatterStepSerializationRoundtrip<RoundtripState extends Serializa
 	private @Nullable RoundtripState roundtripStateInternal;
 	private @Nullable EqualityState equalityStateInternal;
 	private final SerializedFunction<RoundtripState, EqualityState> equalityStateExtractor;
-	private final SerializedFunction<EqualityState, FormatterFunc> equalityStateToFormatter;
+	private final SerializedFunction<EqualityState, ? extends FormatterFunc> equalityStateToFormatter;
 
-	FormatterStepSerializationRoundtrip(String name, ThrowingEx.Supplier<RoundtripState> initializer, SerializedFunction<RoundtripState, EqualityState> equalityStateExtractor, SerializedFunction<EqualityState, FormatterFunc> equalityStateToFormatter) {
+	FormatterStepSerializationRoundtrip(String name, ThrowingEx.Supplier<RoundtripState> initializer, SerializedFunction<RoundtripState, EqualityState> equalityStateExtractor, SerializedFunction<EqualityState, ? extends FormatterFunc> equalityStateToFormatter) {
 		this.name = name;
 		this.initializer = initializer;
 		this.equalityStateExtractor = equalityStateExtractor;

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -105,12 +105,12 @@ private static FormatterStep createInternally(String name, String groupArtifact,
 
 		GoogleJavaFormatStep step = new GoogleJavaFormatStep(JarState.promise(() -> JarState.from(groupArtifact + ":" + version, provisioner)), version, style, reflowLongStrings, reorderImports, formatJavadoc);
 		if (removeImports) {
-			return FormatterStep.create(NAME,
+			return FormatterStep.create(name,
 					step,
 					GoogleJavaFormatStep::equalityState,
 					State::createRemoveUnusedImportsOnly);
 		} else {
-			return FormatterStep.create(NAME,
+			return FormatterStep.create(name,
 					step,
 					GoogleJavaFormatStep::equalityState,
 					State::createFormat);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NativeCmdIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 DiffPlug
+ * Copyright 2024-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,8 +51,8 @@ class NativeCmdWithoutConfigCacheTest extends GradleIntegrationHarness implement
 	class NativeCmdWithConfigCacheTest extends GradleIntegrationHarness implements NativeCmdIntegrationTest {
 		@Override
 		public GradleRunner gradleRunner() throws IOException {
-			setFile("gradle.properties").toContent("org.gradle.unsafe.configuration-cache=true");
-			setFile("gradle.properties").toContent("org.gradle.configuration-cache=true");
+			setFile("gradle.properties").toLines("org.gradle.unsafe.configuration-cache=true",
+					"org.gradle.configuration-cache=true");
 			return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
 		}
 	}

File: testlib/src/test/java/com/diffplug/spotless/generic/FenceStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2024 DiffPlug
+ * Copyright 2020-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.StepHarness;
+import com.diffplug.spotless.StepHarnessWithFile;
 
 class FenceStepTest extends ResourceHarness {
 	@Test
@@ -85,7 +86,7 @@ void broken() {
 		FormatterStep fence = FenceStep.named("fence").openClose("spotless:off", "spotless:on")
 				.preserveWithin(Arrays.asList(ReplaceStep.create("replace", "spotless:on", "REMOVED")));
 		// this fails because uppercase turns spotless:off into SPOTLESS:OFF, etc
-		StepHarness.forStep(fence).expectLintsOf(StringPrinter.buildStringFromLines("A B C",
+		StepHarnessWithFile.forStep(this, fence).expectLintsOfFileAndContent("README.md", StringPrinter.buildStringFromLines("A B C",
 				"spotless:off",
 				"D E F",
 				"spotless:on",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NativeCmdIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 DiffPlug
+ * Copyright 2024-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -51,8 +51,8 @@ class NativeCmdWithoutConfigCacheTest extends GradleIntegrationHarness implement
 	class NativeCmdWithConfigCacheTest extends GradleIntegrationHarness implements NativeCmdIntegrationTest {
 		@Override
 		public GradleRunner gradleRunner() throws IOException {
-			setFile("gradle.properties").toContent("org.gradle.unsafe.configuration-cache=true");
-			setFile("gradle.properties").toContent("org.gradle.configuration-cache=true");
+			setFile("gradle.properties").toLines("org.gradle.unsafe.configuration-cache=true",
+					"org.gradle.configuration-cache=true");
 			return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
 		}
 	}

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -105,12 +105,12 @@ private static FormatterStep createInternally(String name, String groupArtifact,
 
 		GoogleJavaFormatStep step = new GoogleJavaFormatStep(JarState.promise(() -> JarState.from(groupArtifact + ":" + version, provisioner)), version, style, reflowLongStrings, reorderImports, formatJavadoc);
 		if (removeImports) {
-			return FormatterStep.create(NAME,
+			return FormatterStep.create(name,
 					step,
 					GoogleJavaFormatStep::equalityState,
 					State::createRemoveUnusedImportsOnly);
 		} else {
-			return FormatterStep.create(NAME,
+			return FormatterStep.create(name,
 					step,
 					GoogleJavaFormatStep::equalityState,
 					State::createFormat);

File: lib/src/main/java/com/diffplug/spotless/generic/FenceStep.java
Patch:
@@ -103,6 +103,7 @@ private enum Kind {
 	}
 
 	private static class RoundtripAndEqualityState implements Serializable {
+		private static final long serialVersionUID = 272603249547598947L;
 		final String regexPattern;
 		final int regexFlags;
 		final Kind kind;

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2025 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ public final class EclipseCdtFormatterStep {
 	private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "10.7").add(17, "11.6");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(17, "11.6");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib/src/main/java/com/diffplug/spotless/FileSignature.java
Patch:
@@ -126,7 +126,7 @@ public static Promised promise(Iterable<File> files) {
 	}
 
 	public static Promised promise(File file) {
-		return new Promised(List.of(file), null);
+		return new Promised(MoreIterables.toNullHostileList(List.of(file)), null);
 	}
 
 	/** Returns all of the files in this signature, throwing an exception if there are more or less than 1 file. */

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NpmTestsWithoutNpmInstallationTest.java
Patch:
@@ -17,12 +17,10 @@
 
 import org.assertj.core.api.Assertions;
 import org.gradle.testkit.runner.BuildResult;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.common.base.Predicates;
 
-@Disabled("https://status.npmjs.org/ shows npm services down on 12/8/2024, should undisable this later")
 class NpmTestsWithoutNpmInstallationTest extends GradleIntegrationHarness {
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NativeCmdIntegrationTest.java
Patch:
@@ -52,7 +52,7 @@ class NativeCmdWithConfigCacheTest extends GradleIntegrationHarness implements N
 		@Override
 		public GradleRunner gradleRunner() throws IOException {
 			setFile("gradle.properties").toContent("org.gradle.unsafe.configuration-cache=true");
-			setFile("settings.gradle").toContent("enableFeaturePreview(\"STABLE_CONFIGURATION_CACHE\")");
+			setFile("gradle.properties").toContent("org.gradle.configuration-cache=true");
 			return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
 		}
 	}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/BumpThisNumberIfACustomStepChangesTest.java
Patch:
@@ -39,7 +39,7 @@ private void writeContentWithBadFormatting() throws IOException {
 	}
 
 	@Override
-	protected void applyIsUpToDate(boolean upToDate) throws IOException {
+	public void applyIsUpToDate(boolean upToDate) throws IOException {
 		super.applyIsUpToDate(upToDate);
 		assertFile("README.md").hasContent("abc");
 	}

File: lib/src/main/java/com/diffplug/spotless/java/FormatAnnotationsStep.java
Patch:
@@ -381,6 +381,7 @@ public final class FormatAnnotationsStep implements Serializable {
 					"UpperBoundBottom",
 					"UpperBoundLiteral",
 					"UpperBoundUnknown",
+					"Valid",
 					"ValueTypeAnno",
 					"VariableNameDefaultBottom",
 					"VariableNameDefaultMiddle",

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -87,14 +87,14 @@ public static FormatterStep create(String groupArtifact, String version, String
 
 	/** Creates a step which formats everything - groupArtifact, code, import order, and unused imports - and optionally reflows long strings. */
 	public static FormatterStep create(String groupArtifact, String version, String style, Provisioner provisioner, boolean reflowLongStrings, boolean reorderImports, boolean formatJavadoc) {
-		return createInternally(groupArtifact, version, style, provisioner, reflowLongStrings, reorderImports, formatJavadoc, false);
+		return createInternally(NAME, groupArtifact, version, style, provisioner, reflowLongStrings, reorderImports, formatJavadoc, false);
 	}
 
 	static FormatterStep createRemoveUnusedImportsOnly(Provisioner provisioner) {
-		return createInternally(MAVEN_COORDINATE, defaultVersion(), defaultStyle(), provisioner, defaultReflowLongStrings(), defaultReorderImports(), defaultFormatJavadoc(), true);
+		return createInternally(RemoveUnusedImportsStep.NAME, MAVEN_COORDINATE, defaultVersion(), defaultStyle(), provisioner, defaultReflowLongStrings(), defaultReorderImports(), defaultFormatJavadoc(), true);
 	}
 
-	private static FormatterStep createInternally(String groupArtifact, String version, String style, Provisioner provisioner, boolean reflowLongStrings, boolean reorderImports, boolean formatJavadoc, boolean removeImports) {
+	private static FormatterStep createInternally(String name, String groupArtifact, String version, String style, Provisioner provisioner, boolean reflowLongStrings, boolean reorderImports, boolean formatJavadoc, boolean removeImports) {
 		Objects.requireNonNull(groupArtifact, "groupArtifact");
 		if (groupArtifact.chars().filter(ch -> ch == ':').count() != 1) {
 			throw new IllegalArgumentException("groupArtifact must be in the form 'groupId:artifactId'");

File: lib/src/main/java/com/diffplug/spotless/java/RemoveUnusedImportsStep.java
Patch:
@@ -25,7 +25,7 @@
 /** Uses google-java-format or cleanthat.UnnecessaryImport, but only to remove unused imports. */
 public class RemoveUnusedImportsStep implements Serializable {
 	private static final long serialVersionUID = 1L;
-	private static final String NAME = "removeUnusedImports";
+	static final String NAME = "removeUnusedImports";
 
 	static final String GJF = "google-java-format";
 	static final String CLEANTHAT = "cleanthat-javaparser-unnecessaryimport";
@@ -51,7 +51,7 @@ public static FormatterStep create(String unusedImportRemover, Provisioner provi
 		case GJF:
 			return GoogleJavaFormatStep.createRemoveUnusedImportsOnly(provisioner);
 		case CLEANTHAT:
-			return CleanthatJavaStep.create(CleanthatJavaStep.defaultGroupArtifact(), CleanthatJavaStep.defaultVersion(), "99.9", List.of(CLEANTHAT_MUTATOR), List.of(), false, provisioner);
+			return CleanthatJavaStep.createWithStepName(NAME, CleanthatJavaStep.defaultGroupArtifact(), CleanthatJavaStep.defaultVersion(), "99.9", List.of(CLEANTHAT_MUTATOR), List.of(), false, provisioner);
 		default:
 			throw new IllegalArgumentException("Invalid unusedImportRemover: " + unusedImportRemover);
 		}

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepSpecialCaseTest.java
Patch:
@@ -86,11 +86,10 @@ void sort_members_local_no_fields() {
 				.testResource("java/eclipse/SortExample.localDoNotSortFields.test", "java/eclipse/SortExample.localDoNotSortFields.clean");
 	}
 
-
 	@Test
 	void sort_members_local_enabled_true() {
 		EclipseJdtFormatterStep.Builder builder = EclipseJdtFormatterStep.createBuilder(TestProvisioner.mavenCentral());
 		StepHarness.forStep(builder.build())
-			.testResource("java/eclipse/SortExample.localEnabledTrue.test", "java/eclipse/SortExample.localEnabledTrue.clean");
+				.testResource("java/eclipse/SortExample.localEnabledTrue.test", "java/eclipse/SortExample.localEnabledTrue.clean");
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskService.java
Patch:
@@ -199,7 +199,7 @@ public void visitFile(FileVisitDetails fileVisitDetails) {
 					}
 				}
 			}
-			builder.setLength(builder.length() - 1); // remove trailing newline
+			builder.append("Resolve these lints or suppress with `suppressLintsFor`");
 			return builder.toString();
 		}
 	}

File: lib/src/test/java/com/diffplug/spotless/LintSuppressionTest.java
Patch:
@@ -50,8 +50,8 @@ public void testMatchSingle() {
 		assertThat(noSuppressions.isHasLints()).isTrue();
 		removesLint(s -> s.setStep("blah")).isFalse();
 		removesLint(s -> s.setStep("endWithNewline")).isTrue();
-		removesLint(s -> s.setFile("blah")).isFalse();
-		removesLint(s -> s.setFile("testFile")).isTrue();
+		removesLint(s -> s.setPath("blah")).isFalse();
+		removesLint(s -> s.setPath("testFile")).isTrue();
 		removesLint(s -> s.setShortCode("blah")).isFalse();
 		removesLint(s -> s.setShortCode("66")).isTrue();
 	}

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -141,7 +141,7 @@ static void legacyErrorBehavior(Formatter formatter, File file, ValuePerStep<Thr
 		for (int i = 0; i < formatter.getSteps().size(); ++i) {
 			Throwable exception = exceptionPerStep.get(i);
 			if (exception != null && exception != LintState.formatStepCausedNoChange()) {
-				logger.error("Step '{}' found problem in '{}':\n{}", formatter.getSteps().get(i), file.getName(), exception.getMessage(), exception);
+				logger.error("Step '{}' found problem in '{}':\n{}", formatter.getSteps().get(i).getName(), file.getName(), exception.getMessage(), exception);
 				throw ThrowingEx.asRuntimeRethrowError(exception);
 			}
 		}

File: lib/src/main/java/com/diffplug/spotless/LintState.java
Patch:
@@ -55,9 +55,9 @@ public LinkedHashMap<String, List<Lint>> getLintsByStep(Formatter formatter) {
 		}
 		LinkedHashMap<String, List<Lint>> result = new LinkedHashMap<>();
 		for (int i = 0; i < lintsPerStep.size(); i++) {
-			FormatterStep step = formatter.getSteps().get(i);
 			List<Lint> lints = lintsPerStep.get(i);
 			if (lints != null) {
+				FormatterStep step = formatter.getSteps().get(i);
 				result.put(step.getName(), lints);
 			}
 		}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -340,7 +340,7 @@ private static void relativizeIfSubdir(List<String> relativePaths, File root, Fi
 			return null;
 		} else {
 			String relativized = destPath.substring(rootPath.length());
-			return relativized.startsWith("/") ? relativized.substring(1) : relativized;
+			return relativized.startsWith("/") || relativized.startsWith("\\") ? relativized.substring(1) : relativized;
 		}
 	}
 

File: lib/src/main/java/com/diffplug/spotless/FormatterStepSerializationRoundtrip.java
Patch:
@@ -65,7 +65,7 @@ protected FormatterFunc stateToFormatter(EqualityState equalityState) throws Exc
 	}
 
 	private void writeObject(java.io.ObjectOutputStream out) throws IOException {
-		if (roundtripStateInternal == null) {
+		if (initializer != null && roundtripStateInternal == null) {
 			roundtripStateInternal = ThrowingEx.get(this::roundtripStateSupplier);
 		}
 		out.defaultWriteObject();

File: lib/src/main/java/com/diffplug/spotless/ConfigurationCacheHackList.java
Patch:
@@ -47,6 +47,7 @@
  * to make Spotless work with all of Gradle's cache systems at once.
  */
 public class ConfigurationCacheHackList implements java.io.Serializable {
+	private static final long serialVersionUID = 1L;
 	private final boolean optimizeForEquality;
 	private final ArrayList<Object> backingList = new ArrayList<>();
 

File: lib/src/main/java/com/diffplug/spotless/protobuf/BufStep.java
Patch:
@@ -38,7 +38,7 @@ public static String name() {
 	}
 
 	public static String defaultVersion() {
-		return "1.24.0";
+		return "1.44.0";
 	}
 
 	private final String version;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/BiomeStepConfig.java
Patch:
@@ -168,7 +168,7 @@ protected FormatterStep createStep() {
 	/**
 	 * Gets the language (syntax) of the input files to format. When
 	 * <code>null</code> or the empty string, the language is detected automatically
-	 * from the file name. Currently the following languages are supported by Biome:
+	 * from the file name. Currently, the following languages are supported by Biome:
 	 * <ul>
 	 * <li>js (JavaScript)</li>
 	 * <li>jsx (JavaScript + JSX)</li>
@@ -178,7 +178,9 @@ protected FormatterStep createStep() {
 	 * <li>tsx (TypeScript + JSX)</li>
 	 * <li>ts? (TypeScript or TypeScript + JSX, depending on the file
 	 * extension)</li>
+	 * <li>css (CSS, requires biome &gt;= 1.9.0)</li>
 	 * <li>json (JSON)</li>
+	 * <li>jsonc (JSON + comments)</li>
 	 * </ul>
 	 *
 	 * @return The language of the input files.

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -780,7 +780,9 @@ public BiomeGeneric(String version) {
 		 * <li>tsx (TypeScript + JSX)</li>
 		 * <li>ts? (TypeScript or TypeScript + JSX, depending on the file
 		 * extension)</li>
+		 * <li>css (CSS, requires biome &gt;= 1.9.0)</li>
 		 * <li>json (JSON)</li>
+		 * <li>jsonc (JSON + comments)</li>
 		 * </ul>
 		 *
 		 * @param language The language of the files to format.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/generic/AbstractBiome.java
Patch:
@@ -117,7 +117,9 @@ public FormatterStep newFormatterStep(FormatterStepConfig config) {
 	 * <li>tsx (TypeScript + JSX)</li>
 	 * <li>ts? (TypeScript or TypeScript + JSX, depending on the file
 	 * extension)</li>
+	 * <li>css (CSS, requires biome &gt;= 1.9.0)</li>
 	 * <li>json (JSON)</li>
+	 * <li>jsonc (JSON + comments)</li>
 	 * </ul>
 	 *
 	 * @return The language of the input files.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/generic/Biome.java
Patch:
@@ -32,8 +32,7 @@ public Biome() {
 	/**
 	 * Gets the language (syntax) of the input files to format. When
 	 * <code>null</code> or the empty string, the language is detected automatically
-	 * from the file name. Currently the following languages are supported by Biome:
-	 * <ul>
+	 * from the file name. Currently, the following languages are supported by Biome:
 	 * <ul>
 	 * <li>js (JavaScript)</li>
 	 * <li>jsx (JavaScript + JSX)</li>
@@ -43,8 +42,9 @@ public Biome() {
 	 * <li>tsx (TypeScript + JSX)</li>
 	 * <li>ts? (TypeScript or TypeScript + JSX, depending on the file
 	 * extension)</li>
+	 * <li>css (CSS, requires biome &gt;= 1.9.0)</li>
 	 * <li>json (JSON)</li>
-	 * </ul>
+	 * <li>jsonc (JSON + comments)</li>
 	 * </ul>
 	 *
 	 * @return The language of the input files.

File: lib/src/main/java/com/diffplug/spotless/rdf/RdfFormatterConfig.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Objects;
 
 public class RdfFormatterConfig implements Serializable {
-	private static final long serialVersionId = 1L;
+	private static final long serialVersionUID = 1L;
 	private boolean failOnWarning = true;
 	private String turtleFormatterVersion = RdfFormatterStep.LATEST_TURTLE_FORMATTER_VERSION;
 	private boolean verify = true;

File: testlib/src/main/java/com/diffplug/spotless/ResourceHarness.java
Patch:
@@ -92,7 +92,7 @@ protected List<String> listTestResources(String path) throws IOException {
 					throw new RuntimeException(String.format("Resource not found in classpath: '%s' - did you mean '/%1$s'?", path));
 				}
 			}
-			try (BufferedReader br = new BufferedReader(new InputStreamReader(in))) {
+			try (BufferedReader br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))) {
 				String resource;
 				while ((resource = br.readLine()) != null) {
 					filenames.add(resource);

File: lib/src/main/java/com/diffplug/spotless/rdf/RdfFormatterStep.java
Patch:
@@ -52,7 +52,7 @@
 import org.slf4j.LoggerFactory;
 
 public class RdfFormatterStep implements Serializable{
-	public static final String LATEST_TURTLE_FORMATTER_VERSION = "1.2.12";
+	public static final String LATEST_TURTLE_FORMATTER_VERSION = "1.2.13";
 	public static long serialVersionUID = 1L;
 	private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/rdf/RdfFormat.java
Patch:
@@ -43,7 +43,8 @@ public FormatterStep newFormatterStep(FormatterStepConfig config) {
 		RdfFormatterConfig formatterConfig = RdfFormatterConfig
 			.builder()
 				.failOnWarning(failOnWarning)
-			.verify(verify)
+				.turtleFormatterVersion(turtleFormatterVersion)
+				.verify(verify)
 				.build();
 		try {
 			return RdfFormatterStep.create(formatterConfig,

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterStepFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/Eclipse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class KtfmtStep implements Serializable {
 	private static final long serialVersionUID = 1L;
-	private static final String DEFAULT_VERSION = "0.51";
+	private static final String DEFAULT_VERSION = "0.52";
 	private static final String NAME = "ktfmt";
 	private static final String MAVEN_COORDINATE = "com.facebook:ktfmt:";
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.npm.EslintFormatterStep;
@@ -169,6 +170,7 @@ void useEslint() throws IOException {
 	}
 
 	@Test
+	@Disabled
 	void useEslintXoStandardRules() throws IOException {
 		setFile(".eslintrc.js").toResource("npm/eslint/typescript/styleguide/xo/.eslintrc.js");
 		setFile("tsconfig.json").toResource("npm/eslint/typescript/styleguide/xo/tsconfig.json");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.ProcessRunner;
@@ -210,6 +211,7 @@ void eslintStyleguideStandardWithTypescript() throws Exception {
 	}
 
 	@Test
+	@Disabled
 	void eslintStyleguideXo() throws Exception {
 		writePomWithTypescriptSteps(
 				TEST_FILE_PATH,

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.npm.EslintFormatterStep;
@@ -169,6 +170,7 @@ void useEslint() throws IOException {
 	}
 
 	@Test
+	@Disabled
 	void useEslintXoStandardRules() throws IOException {
 		setFile(".eslintrc.js").toResource("npm/eslint/typescript/styleguide/xo/.eslintrc.js");
 		setFile("tsconfig.json").toResource("npm/eslint/typescript/styleguide/xo/tsconfig.json");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.ProcessRunner;
@@ -210,6 +211,7 @@ void eslintStyleguideStandardWithTypescript() throws Exception {
 	}
 
 	@Test
+	@Disabled
 	void eslintStyleguideXo() throws Exception {
 		writePomWithTypescriptSteps(
 				TEST_FILE_PATH,

File: lib/src/main/java/com/diffplug/spotless/npm/EslintFormatterStep.java
Patch:
@@ -45,7 +45,7 @@ public class EslintFormatterStep {
 
 	public static final String NAME = "eslint-format";
 
-	public static final String DEFAULT_ESLINT_VERSION = "^8.45.0";
+	public static final String DEFAULT_ESLINT_VERSION = "8.45.0";
 
 	public static Map<String, String> defaultDevDependenciesForTypescript() {
 		return defaultDevDependenciesTypescriptWithEslint(DEFAULT_ESLINT_VERSION);

File: testlib/src/main/java/com/diffplug/spotless/npm/EslintStyleGuide.java
Patch:
@@ -79,7 +79,7 @@ public enum EslintStyleGuide {
 		@Override
 		public @Nonnull Map<String, String> devDependencies() {
 			Map<String, String> dependencies = new LinkedHashMap<>();
-			dependencies.put("eslint-config-xo", "^0.43.1");
+			dependencies.put("eslint-config-xo", "0.43.1");
 			return dependencies;
 		}
 	};

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ public final class GrEclipseFormatterStep {
 	private GrEclipseFormatterStep() {}
 
 	private static final String NAME = "eclipse groovy formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.31");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.32");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib/src/ktfmt/java/com/diffplug/spotless/glue/ktfmt/KtfmtStyle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 DiffPlug
+ * Copyright 2022-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,5 +16,5 @@
 package com.diffplug.spotless.glue.ktfmt;
 
 public enum KtfmtStyle {
-	DEFAULT, DROPBOX, GOOGLE, KOTLIN_LANG
+	META, GOOGLE, KOTLIN_LANG
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinExtensionTest.java
Patch:
@@ -54,11 +54,11 @@ void integrationKtfmtDropboxStyleWithPublicApi() throws IOException {
 				"repositories { mavenCentral() }",
 				"spotless {",
 				"    kotlin {",
-				"        ktfmt().dropboxStyle().configure {",
+				"        ktfmt(\"0.50\").dropboxStyle().configure {",
 				"            it.setMaxWidth(4)",
 				"            it.setBlockIndent(4)",
 				"            it.setContinuationIndent(4)",
-				"            it.setRemoveUnusedImport(false)",
+				"            it.setRemoveUnusedImports(false)",
 				"        }",
 				"    }",
 				"}");

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/kotlin/Ktfmt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,13 +42,13 @@ public class Ktfmt implements FormatterStepFactory {
 	private Integer continuationIndent;
 
 	@Parameter
-	private Boolean removeUnusedImport;
+	private Boolean removeUnusedImports;
 
 	@Override
 	public FormatterStep newFormatterStep(FormatterStepConfig config) {
 		String version = this.version != null ? this.version : KtfmtStep.defaultVersion();
 		Style style = this.style != null ? Style.valueOf(this.style) : null;
-		KtfmtFormattingOptions options = new KtfmtFormattingOptions(maxWidth, blockIndent, continuationIndent, removeUnusedImport);
+		KtfmtFormattingOptions options = new KtfmtFormattingOptions(maxWidth, blockIndent, continuationIndent, removeUnusedImports);
 		return KtfmtStep.create(version, config.getProvisioner(), style, options);
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/kotlin/KtfmtTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,7 +47,7 @@ void testContinuation() throws Exception {
 
 	@Test
 	void testKtfmtStyle() throws Exception {
-		writePomWithKotlinSteps("<ktfmt><style>DROPBOX</style></ktfmt>");
+		writePomWithKotlinSteps("<ktfmt><version>0.50</version><style>DROPBOX</style></ktfmt>");
 
 		setFile("src/main/kotlin/main.kt").toResource("kotlin/ktfmt/basic.dirty");
 		mavenRunner().withArguments("spotless:apply").runNoError();
@@ -65,7 +65,7 @@ void testKtfmtWithMaxWidthOption() throws Exception {
 
 	@Test
 	void testKtfmtStyleWithMaxWidthOption() throws Exception {
-		writePomWithKotlinSteps("<ktfmt><style>DROPBOX</style><maxWidth>120</maxWidth></ktfmt>");
+		writePomWithKotlinSteps("<ktfmt><version>0.17</version><style>DROPBOX</style><maxWidth>120</maxWidth></ktfmt>");
 
 		setFile("src/main/kotlin/main.kt").toResource("kotlin/ktfmt/max-width.dirty");
 		mavenRunner().withArguments("spotless:apply").runNoError();

File: lib/src/main/java/com/diffplug/spotless/ProcessRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2023 DiffPlug
+ * Copyright 2020-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -163,6 +163,7 @@ public LongRunningProcess start(@Nullable File cwd, @Nullable Map<String, String
 		}
 		// write stdin
 		process.getOutputStream().write(stdin);
+		process.getOutputStream().flush();
 		process.getOutputStream().close();
 		return new LongRunningProcess(process, args, outputFut, errorFut);
 	}

File: lib/src/main/java/com/diffplug/spotless/npm/ShadowCopy.java
Patch:
@@ -37,6 +37,8 @@
 
 import com.diffplug.spotless.ThrowingEx;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 class ShadowCopy {
 
 	private static final Logger logger = LoggerFactory.getLogger(ShadowCopy.class);
@@ -69,6 +71,7 @@ public void addEntry(String key, File orig) {
 		}
 	}
 
+	@SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
 	private void storeEntry(String key, File orig, File target) throws IOException {
 		// Create a temp directory in the same directory as target
 		Files.createDirectories(target.toPath().getParent());

File: lib/src/main/java/com/diffplug/spotless/ProcessRunner.java
Patch:
@@ -163,7 +163,6 @@ public LongRunningProcess start(@Nullable File cwd, @Nullable Map<String, String
 		}
 		// write stdin
 		process.getOutputStream().write(stdin);
-		process.getOutputStream().close();
 		return new LongRunningProcess(process, args, outputFut, errorFut);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/generic/FenceStep.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.File;
 import java.io.Serializable;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
@@ -177,7 +176,6 @@ protected Formatter buildFormatter() {
 					.encoding(StandardCharsets.UTF_8) // can be any UTF, doesn't matter
 					.lineEndingsPolicy(LineEnding.UNIX.createPolicy()) // just internal, won't conflict with user
 					.steps(steps)
-					.rootDir(Path.of("")) // TODO: error messages will be suboptimal for now, but it will get fixed when we ship linting
 					.build();
 		}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -178,7 +178,6 @@ Formatter buildFormatter() {
 				.name(formatName())
 				.lineEndingsPolicy(getLineEndingsPolicy().get())
 				.encoding(Charset.forName(encoding))
-				.rootDir(getProjectDir().get().getAsFile().toPath())
 				.steps(steps)
 				.exceptionPolicy(exceptionPolicy)
 				.build();

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -121,7 +121,7 @@ public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	private List<RemoteRepository> repositories;
 
 	@Parameter(defaultValue = "${project.basedir}", required = true, readonly = true)
-	private File baseDir;
+	protected File baseDir;
 
 	@Parameter(defaultValue = "${project.build.directory}", required = true, readonly = true)
 	private File buildDir;

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterFactory.java
Patch:
@@ -107,7 +107,6 @@ public final Formatter newFormatter(Supplier<Iterable<File>> filesToFormat, Form
 				.lineEndingsPolicy(formatterLineEndingPolicy)
 				.exceptionPolicy(new FormatExceptionPolicyStrict())
 				.steps(formatterSteps)
-				.rootDir(config.getFileLocator().getBaseDir().toPath())
 				.build();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessCheckMojo.java
Patch:
@@ -82,7 +82,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 				if (!dirtyState.isClean() && !dirtyState.didNotConverge()) {
 					problemFiles.add(file);
 					if (buildContext.isIncremental()) {
-						Map.Entry<Integer, String> diffEntry = DiffMessageFormatter.diff(formatter, file);
+						Map.Entry<Integer, String> diffEntry = DiffMessageFormatter.diff(baseDir.toPath(), formatter, file);
 						buildContext.addMessage(file, diffEntry.getKey() + 1, 0, INCREMENTAL_MESSAGE_PREFIX + diffEntry.getValue(), m2eIncrementalBuildMessageSeverity.getSeverity(), null);
 					}
 					counter.cleaned();
@@ -106,7 +106,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 		if (!problemFiles.isEmpty()) {
 			throw new MojoExecutionException(DiffMessageFormatter.builder()
 					.runToFix("Run 'mvn spotless:apply' to fix these violations.")
-					.formatter(formatter)
+					.formatter(baseDir.toPath(), formatter)
 					.problemFiles(problemFiles)
 					.getMessage());
 		}

File: testlib/src/main/java/com/diffplug/spotless/StepHarnessWithFile.java
Patch:
@@ -41,7 +41,6 @@ public static StepHarnessWithFile forStep(ResourceHarness harness, FormatterStep
 				.encoding(StandardCharsets.UTF_8)
 				.lineEndingsPolicy(LineEnding.UNIX.createPolicy())
 				.steps(Collections.singletonList(step))
-				.rootDir(harness.rootFolder().toPath())
 				.exceptionPolicy(new FormatExceptionPolicyStrict())
 				.build());
 	}

File: testlib/src/test/java/com/diffplug/spotless/PaddedCellTest.java
Patch:
@@ -51,7 +51,6 @@ private void testCase(SerializedFunction<String, String> step, String input, Pad
 		try (Formatter formatter = Formatter.builder()
 				.lineEndingsPolicy(LineEnding.UNIX.createPolicy())
 				.encoding(StandardCharsets.UTF_8)
-				.rootDir(rootFolder.toPath())
 				.steps(formatterSteps).build()) {
 
 			File file = new File(rootFolder, "input");

File: lib/src/main/java/com/diffplug/spotless/FormatterFunc.java
Patch:
@@ -115,7 +115,7 @@ public void close() {
 
 				@Override
 				public String apply(String unix, File file) throws Exception {
-					FormatterStepImpl.checkNotSentinel(file);
+					Formatter.checkNotSentinel(file);
 					return function.apply(resource, unix, file);
 				}
 
@@ -144,7 +144,7 @@ interface NeedsFile extends FormatterFunc {
 
 		@Override
 		default String apply(String unix, File file) throws Exception {
-			FormatterStepImpl.checkNotSentinel(file);
+			Formatter.checkNotSentinel(file);
 			return applyWithFile(unix, file);
 		}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,6 +28,7 @@ public class SpotlessPlugin implements Plugin<Project> {
 	static final String SPOTLESS_MODERN = "spotlessModern";
 	static final String VER_GRADLE_min = "6.1.1";
 	static final String VER_GRADLE_javaPluginExtension = "7.1";
+	static final String VER_GRADLE_minVersionForCustom = "8.0";
 	private static final int MINIMUM_JRE = 11;
 
 	@Override

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/BumpThisNumberIfACustomStepChangesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,7 +20,6 @@
 import org.junit.jupiter.api.Test;
 
 class BumpThisNumberIfACustomStepChangesTest extends GradleIntegrationHarness {
-
 	private void writeBuildFile(String toInsert) throws IOException {
 		setFile("build.gradle").toLines(
 				"plugins {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GitRatchetGradleTest.java
Patch:
@@ -53,7 +53,7 @@ private Git initRepo() throws IllegalStateException, GitAPIException, IOExceptio
 
 	@Override
 	protected GradleRunner gradleRunner() throws IOException {
-		return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
+		return super.gradleRunner().withGradleVersion(GradleVersionSupport.CUSTOM_STEPS.version);
 	}
 
 	@ParameterizedTest

File: testlib/src/main/java/com/diffplug/spotless/StepHarnessBase.java
Patch:
@@ -27,14 +27,15 @@ enum RoundTrip {
 	private final Formatter formatter;
 
 	protected StepHarnessBase(Formatter formatter, RoundTrip roundTrip) {
-		this.formatter = Objects.requireNonNull(formatter);
 		if (roundTrip == RoundTrip.DONT_ROUNDTRIP) {
+			this.formatter = Objects.requireNonNull(formatter);
 			return;
 		}
 		Formatter roundTripped = SerializableEqualityTester.reserialize(formatter);
 		if (roundTrip == RoundTrip.ASSERT_EQUAL) {
 			Assertions.assertThat(roundTripped).isEqualTo(formatter);
 		}
+		this.formatter = roundTripped;
 	}
 
 	protected Formatter formatter() {

File: lib/src/main/java/com/diffplug/spotless/npm/TsFmtFormatterStep.java
Patch:
@@ -94,7 +94,7 @@ public State(String stepName, Map<String, String> versions, File projectDir, Fil
 		public FormatterFunc createFormatterFunc() {
 			try {
 				Map<String, Object> tsFmtOptions = unifyOptions();
-				ServerProcessInfo tsfmtRestServer = npmRunServer();
+				ServerProcessInfo tsfmtRestServer = toRuntime().npmRunServer();
 				TsFmtRestService restService = new TsFmtRestService(tsfmtRestServer.getBaseUrl());
 				return Closeable.ofDangerous(() -> endServer(restService, tsfmtRestServer), input -> restService.format(input, tsFmtOptions));
 			} catch (IOException e) {

File: lib/src/main/java/com/diffplug/spotless/java/CleanthatJavaStep.java
Patch:
@@ -40,7 +40,7 @@ public final class CleanthatJavaStep implements java.io.Serializable {
 	/**
 	 * CleanThat changelog is available at <a href="https://github.com/solven-eu/cleanthat/blob/master/CHANGES.MD">here</a>.
 	 */
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.16");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.20");
 
 	private final JarState.Promised jarState;
 	private final String version;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class KtfmtStep implements java.io.Serializable {
 	private static final long serialVersionUID = 1L;
-	private static final String DEFAULT_VERSION = "0.47";
+	private static final String DEFAULT_VERSION = "0.49";
 	private static final String NAME = "ktfmt";
 	private static final String MAVEN_COORDINATE = "com.facebook:ktfmt:";
 

File: lib/src/scalafmt/java/com/diffplug/spotless/glue/scalafmt/ScalafmtFormatterFunc.java
Patch:
@@ -49,6 +49,6 @@ public ScalafmtFormatterFunc(FileSignature configSignature) throws Exception {
 
 	@Override
 	public String applyWithFile(String unix, File file) throws Exception {
-		return Scalafmt.format(unix, config, Set$.MODULE$.empty()).get();
+		return Scalafmt.format(unix, config, Set$.MODULE$.empty(), file.getAbsolutePath()).get();
 	}
 }

File: lib/src/sortPom/java/com/diffplug/spotless/glue/pom/SortPomFormatterFunc.java
Patch:
@@ -62,7 +62,7 @@ public String apply(String input) throws Exception {
 				builder = (PluginParameters.Builder) method
 						.invoke(builder, cfg.lineSeparator, cfg.expandEmptyElements, cfg.spaceBeforeCloseEmptyElement,
 								cfg.keepBlankLines);
-			} catch (Exception ignore) {
+			} catch (ReflectiveOperationException | RuntimeException ignore) {
 				throw e;
 			}
 		}
@@ -76,7 +76,7 @@ public String apply(String input) throws Exception {
 						.getMethod("setIndent", int.class, boolean.class, boolean.class);
 				builder = (PluginParameters.Builder) method
 						.invoke(builder, cfg.nrOfIndentSpace, cfg.indentBlankLines, cfg.indentSchemaLocation);
-			} catch (Exception ignore) {
+			} catch (ReflectiveOperationException | RuntimeException ignore) {
 				throw e;
 			}
 		}

File: testlib/src/test/java/com/diffplug/spotless/npm/ShadowCopyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import com.diffplug.common.base.Suppliers;
 import com.diffplug.spotless.ResourceHarness;
 
 class ShadowCopyTest extends ResourceHarness {
@@ -43,7 +44,7 @@ class ShadowCopyTest extends ResourceHarness {
 	@BeforeEach
 	void setUp() throws IOException {
 		shadowCopyRoot = newFolder("shadowCopyRoot");
-		shadowCopy = new ShadowCopy(shadowCopyRoot);
+		shadowCopy = new ShadowCopy(Suppliers.ofInstance(shadowCopyRoot));
 	}
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/BiomeIntegrationTest.java
Patch:
@@ -310,7 +310,7 @@ void failureWhenExeNotFound() throws Exception {
 		var spotlessApply = gradleRunner().withArguments("--stacktrace", "spotlessApply").buildAndFail();
 		assertThat(spotlessApply.getOutput()).contains("Build failed with an exception");
 		assertFile("biome_test.js").sameAsResource("biome/js/fileBefore.js");
-		assertThat(spotlessApply.getOutput()).contains("Could not create task ':spotlessMybiomeApply'");
+		assertThat(spotlessApply.getOutput()).contains("Execution failed for task ':spotlessMybiome'");
 		assertThat(spotlessApply.getOutput()).contains("Biome executable does not exist");
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/RomeIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -310,7 +310,7 @@ void failureWhenExeNotFound() throws Exception {
 		var spotlessApply = gradleRunner().withArguments("--stacktrace", "spotlessApply").buildAndFail();
 		assertThat(spotlessApply.getOutput()).contains("Build failed with an exception");
 		assertFile("rome_test.js").sameAsResource("rome/js/fileBefore.js");
-		assertThat(spotlessApply.getOutput()).contains("Could not create task ':spotlessMyromeApply'");
+		assertThat(spotlessApply.getOutput()).contains("Execution failed for task ':spotlessMyrome'");
 		assertThat(spotlessApply.getOutput()).contains("Biome executable does not exist");
 	}
 

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -311,8 +311,8 @@ public void close() {
 				((FormatterStepImpl.Standard) step).cleanupFormatterFunc();
 			} else if (step instanceof FormatterStepEqualityOnStateSerialization) {
 				((FormatterStepEqualityOnStateSerialization) step).cleanupFormatterFunc();
-			} else if (step instanceof FenceStep.Apply) {
-				((FenceStep.Apply) step).cleanup();
+			} else if (step instanceof FenceStep.BaseStep) {
+				((FenceStep.BaseStep) step).cleanup();
 			}
 		}
 	}

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -304,6 +304,9 @@ public boolean equals(Object obj) {
 	@Override
 	public void close() {
 		for (FormatterStep step : steps) {
+			if (step instanceof DelegateFormatterStep) {
+				step = ((DelegateFormatterStep) step).delegateStep;
+			}
 			if (step instanceof FormatterStepImpl.Standard) {
 				((FormatterStepImpl.Standard) step).cleanupFormatterFunc();
 			} else if (step instanceof FormatterStepEqualityOnStateSerialization) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -206,7 +206,7 @@ public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	 * Otherwise this goal is skipped in incremental builds and only runs on full builds.
 	 */
 	@Parameter(defaultValue = "false")
-	protected boolean enableForIncrementalBuild;
+	protected boolean m2eEnableForIncrementalBuild;
 
 	protected abstract void process(Iterable<File> files, Formatter formatter, UpToDateChecker upToDateChecker) throws MojoExecutionException;
 
@@ -252,7 +252,7 @@ private boolean shouldSkip() {
 		if (skip) {
 			return true;
 		}
-		if (buildContext.isIncremental() && !enableForIncrementalBuild) {
+		if (buildContext.isIncremental() && !m2eEnableForIncrementalBuild) {
 			getLog().debug("Skipping for incremental builds as parameter 'enableForIncrementalBuilds' is set to 'false'");
 			return true;
 		}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessCheckMojo.java
Patch:
@@ -58,10 +58,10 @@ public int getSeverity() {
 	/**
 	 * The severity used to emit messages during incremental builds.
 	 * Either {@code WARNING} or {@code ERROR}.
-	 * @see AbstractSpotlessMojo#enableForIncrementalBuild
+	 * @see AbstractSpotlessMojo#m2eEnableForIncrementalBuild
 	 */
 	@Parameter(defaultValue = "WARNING")
-	private MessageSeverity incrementalBuildMessageSeverity;
+	private MessageSeverity m2eIncrementalBuildMessageSeverity;
 
 	@Override
 	protected void process(Iterable<File> files, Formatter formatter, UpToDateChecker upToDateChecker) throws MojoExecutionException {
@@ -83,7 +83,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 					problemFiles.add(file);
 					if (buildContext.isIncremental()) {
 						Map.Entry<Integer, String> diffEntry = DiffMessageFormatter.diff(formatter, file);
-						buildContext.addMessage(file, diffEntry.getKey() + 1, 0, INCREMENTAL_MESSAGE_PREFIX + diffEntry.getValue(), incrementalBuildMessageSeverity.getSeverity(), null);
+						buildContext.addMessage(file, diffEntry.getKey() + 1, 0, INCREMENTAL_MESSAGE_PREFIX + diffEntry.getValue(), m2eIncrementalBuildMessageSeverity.getSeverity(), null);
 					}
 					counter.cleaned();
 				} else {

File: lib/src/compatKtLint0Dot49Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot49Dot0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,6 +38,7 @@
 import com.pinterest.ktlint.rule.engine.api.LintError;
 import com.pinterest.ktlint.rule.engine.core.api.Rule;
 import com.pinterest.ktlint.rule.engine.core.api.RuleProvider;
+import com.pinterest.ktlint.rule.engine.core.api.RuleProviderKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.CodeStyleEditorConfigPropertyKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EditorConfigProperty;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EndOfLinePropertyKt;
@@ -142,7 +143,7 @@ public String format(
 		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
-			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath);
+			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, RuleProviderKt.propertyTypes(allRuleProviders));
 		}
 
 		return new KtLintRuleEngine(

File: lib/src/compatKtLint0Dot50Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot50Dot0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -38,6 +37,7 @@
 import com.pinterest.ktlint.rule.engine.core.api.Rule;
 import com.pinterest.ktlint.rule.engine.core.api.RuleId;
 import com.pinterest.ktlint.rule.engine.core.api.RuleProvider;
+import com.pinterest.ktlint.rule.engine.core.api.RuleProviderKt;
 import com.pinterest.ktlint.rule.engine.core.api.RuleSetId;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.CodeStyleEditorConfigPropertyKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EditorConfigProperty;
@@ -105,7 +105,7 @@ public String format(
 		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
-			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, Collections.emptySet());
+			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, RuleProviderKt.propertyTypes(allRuleProviders));
 		}
 
 		return new KtLintRuleEngine(

File: lib/src/compatKtLint1Dot0Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat1Dot0Dot0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -38,6 +37,7 @@
 import com.pinterest.ktlint.rule.engine.core.api.Rule;
 import com.pinterest.ktlint.rule.engine.core.api.RuleId;
 import com.pinterest.ktlint.rule.engine.core.api.RuleProvider;
+import com.pinterest.ktlint.rule.engine.core.api.RuleProviderKt;
 import com.pinterest.ktlint.rule.engine.core.api.RuleSetId;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.CodeStyleEditorConfigPropertyKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EditorConfigProperty;
@@ -105,7 +105,7 @@ public String format(
 		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
-			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, Collections.emptySet());
+			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, RuleProviderKt.propertyTypes(allRuleProviders));
 		}
 
 		return new KtLintRuleEngine(

File: lib/src/compatKtLint0Dot49Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot49Dot0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,6 +38,7 @@
 import com.pinterest.ktlint.rule.engine.api.LintError;
 import com.pinterest.ktlint.rule.engine.core.api.Rule;
 import com.pinterest.ktlint.rule.engine.core.api.RuleProvider;
+import com.pinterest.ktlint.rule.engine.core.api.RuleProviderKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.CodeStyleEditorConfigPropertyKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EditorConfigProperty;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EndOfLinePropertyKt;
@@ -142,7 +143,7 @@ public String format(
 		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
-			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath);
+			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, RuleProviderKt.propertyTypes(allRuleProviders));
 		}
 
 		return new KtLintRuleEngine(

File: lib/src/compatKtLint0Dot50Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot50Dot0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -38,6 +37,7 @@
 import com.pinterest.ktlint.rule.engine.core.api.Rule;
 import com.pinterest.ktlint.rule.engine.core.api.RuleId;
 import com.pinterest.ktlint.rule.engine.core.api.RuleProvider;
+import com.pinterest.ktlint.rule.engine.core.api.RuleProviderKt;
 import com.pinterest.ktlint.rule.engine.core.api.RuleSetId;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.CodeStyleEditorConfigPropertyKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EditorConfigProperty;
@@ -105,7 +105,7 @@ public String format(
 		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
-			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, Collections.emptySet());
+			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, RuleProviderKt.propertyTypes(allRuleProviders));
 		}
 
 		return new KtLintRuleEngine(

File: lib/src/compatKtLint1Dot0Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat1Dot0Dot0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 DiffPlug
+ * Copyright 2023-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -38,6 +37,7 @@
 import com.pinterest.ktlint.rule.engine.core.api.Rule;
 import com.pinterest.ktlint.rule.engine.core.api.RuleId;
 import com.pinterest.ktlint.rule.engine.core.api.RuleProvider;
+import com.pinterest.ktlint.rule.engine.core.api.RuleProviderKt;
 import com.pinterest.ktlint.rule.engine.core.api.RuleSetId;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.CodeStyleEditorConfigPropertyKt;
 import com.pinterest.ktlint.rule.engine.core.api.editorconfig.EditorConfigProperty;
@@ -105,7 +105,7 @@ public String format(
 		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
-			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, Collections.emptySet());
+			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath, RuleProviderKt.propertyTypes(allRuleProviders));
 		}
 
 		return new KtLintRuleEngine(

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@
 /** Wraps up <a href="https://github.com/pinterest/ktlint">ktlint</a> as a FormatterStep. */
 public class KtLintStep implements RoundedStep {
 	private static final long serialVersionUID = 1L;
-	private static final String DEFAULT_VERSION = "1.1.1";
+	private static final String DEFAULT_VERSION = "1.2.1";
 	private static final String NAME = "ktlint";
 	private static final String MAVEN_COORDINATE_0_DOT = "com.pinterest:ktlint:";
 	private static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -1067,8 +1067,9 @@ protected void setupTask(SpotlessTask task) {
 		}
 		task.setSteps(steps);
 		Directory projectDir = getProject().getLayout().getProjectDirectory();
+		LineEnding lineEndings = getLineEndings();
 		task.setLineEndingsPolicy(
-				getProject().provider(() -> getLineEndings().createPolicy(projectDir.getAsFile(), () -> totalTarget)));
+				getProject().provider(() -> lineEndings.createPolicy(projectDir.getAsFile(), () -> totalTarget)));
 		spotless.getRegisterDependenciesTask().hookSubprojectTask(task);
 		task.setupRatchet(getRatchetFrom() != null ? getRatchetFrom() : "");
 	}

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@
 /** Wraps up <a href="https://github.com/pinterest/ktlint">ktlint</a> as a FormatterStep. */
 public class KtLintStep implements RoundedStep {
 	private static final long serialVersionUID = 1L;
-	private static final String DEFAULT_VERSION = "1.1.1";
+	private static final String DEFAULT_VERSION = "1.2.1";
 	private static final String NAME = "ktlint";
 	private static final String MAVEN_COORDINATE_0_DOT = "com.pinterest:ktlint:";
 	private static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";

File: lib/src/main/java/com/diffplug/spotless/shell/ShfmtStep.java
Patch:
@@ -40,7 +40,7 @@ public static String name() {
 	}
 
 	public static String defaultVersion() {
-		return "3.7.0";
+		return "3.8.0";
 	}
 
 	private final String version;

File: lib/src/main/java/com/diffplug/spotless/shell/ShfmtStep.java
Patch:
@@ -40,7 +40,7 @@ public static String name() {
 	}
 
 	public static String defaultVersion() {
-		return "3.7.0";
+		return "3.8.0";
 	}
 
 	private final String version;

File: lib/src/main/java/com/diffplug/spotless/shell/ShfmtStep.java
Patch:
@@ -101,7 +101,7 @@ static class State implements Serializable {
 		String format(ProcessRunner runner, String input, File file) throws IOException, InterruptedException {
 			if (args == null) {
 				// args will be reused during a single spotless task execution,
-				// so this "prefix" is being "cached" for each spotless task.
+				// so this "prefix" is being "cached" for each spotless format with shfmt.
 				args = List.of(exe.confirmVersionAndGetAbsolutePath(), "--filename");
 			}
 

File: lib/src/main/java/com/diffplug/spotless/shell/ShfmtStep.java
Patch:
@@ -74,7 +74,7 @@ private State createState() throws IOException, InterruptedException {
 				"\n    github issue to handle this better: https://github.com/diffplug/spotless/issues/673";
 		final ForeignExe exe = ForeignExe.nameAndVersion("shfmt", version)
 				.pathToExe(pathToExe)
-				.versionRegex(Pattern.compile("(\\S*)"))
+				.versionRegex(Pattern.compile("([\\d.]+)"))
 				.fixCantFind(howToInstall)
 				.fixWrongVersion(
 						"You can tell Spotless to use the version you already have with {@code shfmt('{versionFound}')}" +

File: testlib/src/test/java/com/diffplug/spotless/shell/ShfmtStepTest.java
Patch:
@@ -26,7 +26,7 @@ public class ShfmtStepTest extends ResourceHarness {
 	@Test
 	void testWithEditorconfig() throws Exception {
 		try (StepHarnessWithFile harness = StepHarnessWithFile.forStep(this, ShfmtStep.withVersion(ShfmtStep.defaultVersion()).create())) {
-			final String fileDir = "shell/shfmt/singlefile/with-config/";
+			final String fileDir = "shell/shfmt/with-config/";
 			final String dirtyFile = fileDir + "shfmt.sh";
 			final String cleanFile = fileDir + "shfmt.clean";
 
@@ -39,7 +39,7 @@ void testWithEditorconfig() throws Exception {
 	@Test
 	void testWithoutEditorconfig() throws Exception {
 		try (StepHarnessWithFile harness = StepHarnessWithFile.forStep(this, ShfmtStep.withVersion(ShfmtStep.defaultVersion()).create())) {
-			final String fileDir = "shell/shfmt/singlefile/without-config/";
+			final String fileDir = "shell/shfmt/without-config/";
 			final String dirtyFile = fileDir + "shfmt.sh";
 			final String cleanFile = fileDir + "shfmt.clean";
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/shell/ShellTest.java
Patch:
@@ -28,7 +28,7 @@ public class ShellTest extends MavenIntegrationHarness {
 
 	@Test
 	public void testFormatShellWithEditorconfig() throws Exception {
-		String fileDir = "shell/shfmt/with-config/";
+		String fileDir = "shell/shfmt/singlefile/with-config/";
 		setFile("shfmt.sh").toResource(fileDir + "shfmt.sh");
 		setFile(".editorconfig").toResource(fileDir + ".editorconfig");
 
@@ -40,7 +40,7 @@ public void testFormatShellWithEditorconfig() throws Exception {
 
 	@Test
 	public void testFormatShellWithoutEditorconfig() throws Exception {
-		String fileDir = "shell/shfmt/without-config/";
+		String fileDir = "shell/shfmt/singlefile/without-config/";
 		setFile("shfmt.sh").toResource(fileDir + "shfmt.sh");
 
 		writePomWithShellSteps("<shfmt/>");

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -113,7 +113,7 @@ public FormatterStep build() {
 			}
 			var classpath = new ArrayList<File>();
 			var mavenDeps = new ArrayList<String>();
-			mavenDeps.add("dev.equo.ide:solstice:1.7.4");
+			mavenDeps.add("dev.equo.ide:solstice:1.7.5");
 			mavenDeps.add("com.diffplug.durian:durian-swt.os:4.2.0");
 			mavenDeps.addAll(query.getJarsOnMavenCentral());
 			classpath.addAll(mavenProvisioner.provisionWithTransitives(false, mavenDeps));

File: lib-extra/src/test/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-extra/src/test/java/com/diffplug/spotless/extra/eclipse/EquoResourceHarness.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-extra/src/test/java/com/diffplug/spotless/extra/GitAttributesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,9 +27,11 @@
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.common.base.StringPrinter;
+import com.diffplug.spotless.ClearGitConfig;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
 
+@ClearGitConfig
 class GitAttributesTest extends ResourceHarness {
 	private List<File> testFiles(String prefix) {
 		List<File> result = new ArrayList<>();

File: lib-extra/src/test/java/com/diffplug/spotless/extra/GitRachetMergeBaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,8 +27,10 @@
 import org.eclipse.jgit.lib.RefDatabase;
 import org.junit.jupiter.api.Test;
 
+import com.diffplug.spotless.ClearGitConfig;
 import com.diffplug.spotless.ResourceHarness;
 
+@ClearGitConfig
 class GitRachetMergeBaseTest extends ResourceHarness {
 	@Test
 	void test() throws IllegalStateException, GitAPIException, IOException {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/GitWorkaroundsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 DiffPlug
+ * Copyright 2022-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,9 +27,11 @@
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
 
+import com.diffplug.spotless.ClearGitConfig;
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.extra.GitWorkarounds.RepositorySpecificResolver;
 
+@ClearGitConfig
 class GitWorkaroundsTest extends ResourceHarness {
 	@Test
 	void inline() throws IOException, GitAPIException {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/GitRatchetMavenTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,9 @@
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.common.base.StringPrinter;
+import com.diffplug.spotless.ClearGitConfig;
 
+@ClearGitConfig
 class GitRatchetMavenTest extends MavenIntegrationHarness {
 	private static final String TEST_PATH = "src/markdown/test.md";
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/generic/LicenseHeaderRatchetTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,8 +21,10 @@
 import org.eclipse.jgit.api.Git;
 import org.junit.jupiter.api.Test;
 
+import com.diffplug.spotless.ClearGitConfig;
 import com.diffplug.spotless.maven.MavenIntegrationHarness;
 
+@ClearGitConfig
 class LicenseHeaderRatchetTest extends MavenIntegrationHarness {
 	private static final String NOW = String.valueOf(YearMonth.now().getYear());
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2024 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -48,7 +48,7 @@ public static FormatterStep create(String version, Provisioner provisioner) {
 	 * style.
 	 */
 	public static FormatterStep create(String version, String style, Provisioner provisioner) {
-		return create(version, style, defaultFormatJavadoc(), provisioner);
+		return create(version, style, DEFAULT_FORMAT_JAVADOC, provisioner);
 	}
 
 	/**

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -83,7 +83,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
 			.addMin(16, "1.10.0") // java 16 requires at least 1.10.0 due to jdk api changes in JavaTokenizer
 			.addMin(21, "1.17.0") // java 21 requires at least 1.17.0 due to https://github.com/google/google-java-format/issues/898
-			.add(11, "1.18.1"); // default version
+			.add(11, "1.19.2"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "1.0.1";
+	private static final String DEFAULT_VERSION = "1.1.1";
 	private static final String NAME = "ktlint";
 	private static final String MAVEN_COORDINATE_0_DOT = "com.pinterest:ktlint:";
 	private static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";

File: testlib/src/test/java/com/diffplug/spotless/kotlin/DiktatStepTest.java
Patch:
@@ -34,7 +34,7 @@ class DiktatStepTest extends ResourceHarness {
 	void behavior() {
 		FormatterStep step = DiktatStep.create(TestProvisioner.mavenCentral());
 		StepHarnessWithFile.forStep(this, step).testResourceExceptionMsg("kotlin/diktat/Unsolvable.kt").isEqualTo("There are 2 unfixed errors:" +
-				System.lineSeparator() + "Error on line: 1, column: 1 cannot be fixed automatically" +
+				System.lineSeparator() + "Error on line: 12, column: 9 cannot be fixed automatically" +
 				System.lineSeparator() + "[DEBUG_PRINT] use a dedicated logging library: found println()" +
 				System.lineSeparator() + "Error on line: 13, column: 9 cannot be fixed automatically" +
 				System.lineSeparator() + "[DEBUG_PRINT] use a dedicated logging library: found println()");

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -83,7 +83,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
 			.addMin(16, "1.10.0") // java 16 requires at least 1.10.0 due to jdk api changes in JavaTokenizer
 			.addMin(21, "1.17.0") // java 21 requires at least 1.17.0 due to https://github.com/google/google-java-format/issues/898
-			.add(11, "1.18.1"); // default version
+			.add(11, "1.19.2"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2023 DiffPlug
+ * Copyright 2016-2024 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "1.0.1";
+	private static final String DEFAULT_VERSION = "1.1.1";
 	private static final String NAME = "ktlint";
 	private static final String MAVEN_COORDINATE_0_DOT = "com.pinterest:ktlint:";
 	private static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";

File: testlib/src/test/java/com/diffplug/spotless/kotlin/DiktatStepTest.java
Patch:
@@ -34,7 +34,7 @@ class DiktatStepTest extends ResourceHarness {
 	void behavior() {
 		FormatterStep step = DiktatStep.create(TestProvisioner.mavenCentral());
 		StepHarnessWithFile.forStep(this, step).testResourceExceptionMsg("kotlin/diktat/Unsolvable.kt").isEqualTo("There are 2 unfixed errors:" +
-				System.lineSeparator() + "Error on line: 1, column: 1 cannot be fixed automatically" +
+				System.lineSeparator() + "Error on line: 12, column: 9 cannot be fixed automatically" +
 				System.lineSeparator() + "[DEBUG_PRINT] use a dedicated logging library: found println()" +
 				System.lineSeparator() + "Error on line: 13, column: 9 cannot be fixed automatically" +
 				System.lineSeparator() + "[DEBUG_PRINT] use a dedicated logging library: found println()");

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -78,16 +78,13 @@ static final class State implements Serializable {
 		final JarState jar;
 
 		State(String versionDiktat, Provisioner provisioner, boolean isScript, @Nullable FileSignature config) throws IOException {
-			HashSet<String> pkgSet = new HashSet<>();
 			final String diktatCoordinate;
 			if (BadSemver.version(versionDiktat) >= BadSemver.version(PACKAGE_RELOCATED_VERSION)) {
 				diktatCoordinate = MAVEN_COORDINATE + versionDiktat;
 			} else {
 				diktatCoordinate = MAVEN_COORDINATE_PRE_2_0_0 + versionDiktat;
 			}
 			this.jar = JarState.from(diktatCoordinate, provisioner);
-
-			this.jar = JarState.from(pkgSet, provisioner);
 			this.versionDiktat = versionDiktat;
 			this.isScript = isScript;
 			this.config = config;

File: lib/src/compatDiktat2Dot0Dot0/java/com/diffplug/spotless/glue/diktat/compat/DiktatCompat2Dot0Dot0Adapter.java
Patch:
@@ -48,7 +48,7 @@ public DiktatCompat2Dot0Dot0Adapter(@Nullable File configFile) {
 	@Override
 	public String format(File file, String content, boolean isScript) {
 		errors.clear();
-		String result = processor.fix(file.toPath(), formatterCallback);
+		String result = processor.fix(content, file.toPath(), formatterCallback);
 		DiktatReporting.reportIfRequired(errors, DiktatError::getLine, DiktatError::getCol, DiktatError::getDetail);
 		return result;
 	}

File: testlib/src/test/java/com/diffplug/spotless/kotlin/DiktatStepTest.java
Patch:
@@ -32,9 +32,10 @@ class DiktatStepTest extends ResourceHarness {
 
 	@Test
 	void behavior() {
-		FormatterStep step = DiktatStep.create("2.0.0-rc.8.108+b4039ad", TestProvisioner.mavenCentralAndLocal());
+//		FormatterStep step = DiktatStep.create("1.2.5", TestProvisioner.mavenCentralAndLocal());
+		FormatterStep step = DiktatStep.create("2.0.0-rc.8.145+5b7b3c5", TestProvisioner.mavenCentralAndLocal());
 		StepHarnessWithFile.forStep(this, step).testResourceExceptionMsg("kotlin/diktat/Unsolvable.kt").isEqualTo("There are 2 unfixed errors:" +
-				System.lineSeparator() + "Error on line: 1, column: 1 cannot be fixed automatically" +
+				System.lineSeparator() + "Error on line: 12, column: 9 cannot be fixed automatically" +
 				System.lineSeparator() + "[DEBUG_PRINT] use a dedicated logging library: found println()" +
 				System.lineSeparator() + "Error on line: 13, column: 9 cannot be fixed automatically" +
 				System.lineSeparator() + "[DEBUG_PRINT] use a dedicated logging library: found println()");

File: lib/src/main/java/com/diffplug/spotless/FileSignature.java
Patch:
@@ -103,7 +103,7 @@ public static class Promised implements Serializable {
 		@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 		private transient @Nullable FileSignature cached;
 
-		private Promised(List<File> files, FileSignature cached) {
+		private Promised(List<File> files, @Nullable FileSignature cached) {
 			this.files = files;
 			this.cached = cached;
 		}

File: lib/src/main/java/com/diffplug/spotless/FormatterStepSerializationRoundtrip.java
Patch:
@@ -22,6 +22,7 @@
 import edu.umd.cs.findbugs.annotations.Nullable;
 
 class FormatterStepSerializationRoundtrip<RoundtripState extends Serializable, EqualityState extends Serializable> extends FormatterStepEqualityOnStateSerialization<EqualityState> {
+	private static final long serialVersionUID = 1L;
 	private final String name;
 	private final transient ThrowingEx.Supplier<RoundtripState> initializer;
 	private @Nullable RoundtripState roundtripStateInternal;

File: lib/src/main/java/com/diffplug/spotless/FormatterStepSerializationRoundtrip.java
Patch:
@@ -42,7 +42,7 @@ public String getName() {
 
 	@Override
 	protected EqualityState stateSupplier() throws Exception {
-		if (roundtripStateInternal != null) {
+		if (roundtripStateInternal == null) {
 			roundtripStateInternal = initializer.get();
 		}
 		return equalityStateExtractor.apply(roundtripStateInternal);

File: lib/src/main/java/com/diffplug/spotless/FileSignature.java
Patch:
@@ -98,7 +98,9 @@ private FileSignature(final List<File> files) throws IOException {
 
 	/** A view of `FileSignature` which can be safely roundtripped. */
 	public static class RoundTrippable implements Serializable {
+		private static final long serialVersionUID = 1L;
 		private final List<File> files;
+		@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 		private transient @Nullable FileSignature cached;
 
 		private RoundTrippable(List<File> files, FileSignature cached) {

File: lib/src/main/java/com/diffplug/spotless/JarState.java
Patch:
@@ -39,6 +39,7 @@
 public final class JarState implements Serializable {
 	/** A lazily evaluated JarState, which becomes a set of files when serialized. */
 	public static class Promised implements Serializable {
+		private static final long serialVersionUID = 1L;
 		private final transient ThrowingEx.Supplier<JarState> supplier;
 		private FileSignature.RoundTrippable cached;
 

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -26,6 +26,7 @@
 
 /** Wraps up <a href="https://github.com/cqfn/diKTat">diktat</a> as a FormatterStep. */
 public class DiktatStep extends FormatterStepEqualityOnStateSerialization<DiktatStep.State> {
+	private static final long serialVersionUID = 1L;
 	private final JarState.Promised jarState;
 	private final boolean isScript;
 	private final @Nullable FileSignature.RoundTrippable config;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GitRatchetGradleTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -153,7 +153,8 @@ private BuildResultAssertion assertFail(String... tasks) throws Exception {
 	private static final String BASELINE_DIRTY = "4cfc3358ccbf186738b82a60276b1e5306bc3870";
 
 	@ParameterizedTest
-	@ValueSource(ints = {0, 1})
+	//@ValueSource(ints = {0, 1}) // TODO: this is a flaky configuration cache issue that started with Gradle 8.5
+	@ValueSource(ints = {0})
 	void multiProject(int useConfigCache) throws Exception {
 		try (Git git = initRepo()) {
 			if (useConfigCache == 1) {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -117,7 +117,7 @@ EquoBasedStepBuilder.State get() throws Exception {
 		}
 		var classpath = new ArrayList<File>();
 		var mavenDeps = new ArrayList<String>();
-		mavenDeps.add("dev.equo.ide:solstice:1.7.3");
+		mavenDeps.add("dev.equo.ide:solstice:1.7.4");
 		mavenDeps.add("com.diffplug.durian:durian-swt.os:4.2.0");
 		mavenDeps.addAll(query.getJarsOnMavenCentral());
 		classpath.addAll(mavenProvisioner.provisionWithTransitives(false, mavenDeps));

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.44";
+	private static final String DEFAULT_VERSION = "0.46";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -35,7 +35,7 @@ private GoogleJavaFormatStep() {}
 	private static final boolean DEFAULT_REORDER_IMPORTS = false;
 	private static final boolean DEFAULT_FORMAT_JAVADOC = true;
 	static final String NAME = "google-java-format";
-	static final String MAVEN_COORDINATE = "com.google.googlejavaformat:google-java-format";
+	public static final String MAVEN_COORDINATE = "com.google.googlejavaformat:google-java-format";
 
 	/** Creates a step which formats everything - code, import order, and unused imports. */
 	public static FormatterStep create(Provisioner provisioner) {
@@ -83,7 +83,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
 			.addMin(16, "1.10.0") // java 16 requires at least 1.10.0 due to jdk api changes in JavaTokenizer
 			.addMin(21, "1.17.0") // java 21 requires at least 1.17.0 due to https://github.com/google/google-java-format/issues/898
-			.add(11, "1.17.0"); // default version
+			.add(11, "1.18.1"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -29,8 +29,8 @@ private PalantirJavaFormatStep() {}
 
 	private static final String DEFAULT_STYLE = "PALANTIR";
 	private static final String NAME = "palantir-java-format";
-	private static final String MAVEN_COORDINATE = "com.palantir.javaformat:palantir-java-format:";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.28.0");
+	public static final String MAVEN_COORDINATE = "com.palantir.javaformat:palantir-java-format:";
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.28.0").add(21, "2.38.0");
 
 	/** Creates a step which formats everything - code, import order, and unused imports. */
 	public static FormatterStep create(Provisioner provisioner) {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenProvisionerTest.java
Patch:
@@ -33,7 +33,6 @@ void testMultipleDependenciesExcludingTransitives() throws Exception {
 	void testSingleDependencyIncludingTransitives() throws Exception {
 		writePomWithJavaSteps(
 				"<googleJavaFormat>",
-				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 		assertResolveDependenciesWorks();
 	}

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/SpecificFilesTest.java
Patch:
@@ -58,7 +58,6 @@ private void integration(String patterns, boolean firstFormatted, boolean second
 				"  <include>src/**/java/**/*.java</include>",
 				"</includes>",
 				"<googleJavaFormat>",
-				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 
 		setFile(testFile(1)).toResource(fixture(false));

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/PalantirJavaFormatTest.java
Patch:
@@ -34,7 +34,7 @@ void specificVersionDefaultStyle() throws Exception {
 	void specificJava11Version2() throws Exception {
 		writePomWithJavaSteps(
 				"<palantirJavaFormat>",
-				"  <version>2.10.0</version>",
+				"  <version>2.38.0</version>",
 				"</palantirJavaFormat>");
 
 		runTest("java/palantirjavaformat/JavaCodeFormatted.test");

File: testlib/src/test/java/com/diffplug/spotless/combined/CombinedJavaFormatStepTest.java
Patch:
@@ -34,7 +34,7 @@ public class CombinedJavaFormatStepTest extends ResourceHarness {
 
 	@Test
 	void checkIssue1679() {
-		FormatterStep gjf = GoogleJavaFormatStep.create("1.15.0", "AOSP", mavenCentral());
+		FormatterStep gjf = GoogleJavaFormatStep.create(GoogleJavaFormatStep.defaultVersion(), "AOSP", mavenCentral());
 		FormatterStep indentWithSpaces = IndentStep.Type.SPACE.create();
 		FormatterStep importOrder = ImportOrderStep.forJava().createFrom();
 		FormatterStep removeUnused = RemoveUnusedImportsStep.create(mavenCentral());

File: testlib/src/test/java/com/diffplug/spotless/java/PalantirJavaFormatStepTest.java
Patch:
@@ -38,7 +38,7 @@ void jvm13Features() throws Exception {
 
 	@Test
 	void behavior2() throws Exception {
-		FormatterStep step = PalantirJavaFormatStep.create("2.28.0", TestProvisioner.mavenCentral());
+		FormatterStep step = PalantirJavaFormatStep.create(TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
 				.testResource("java/palantirjavaformat/JavaCodeUnformatted.test", "java/palantirjavaformat/JavaCodeFormatted.test")
 				.testResource("java/palantirjavaformat/JavaCodeWithLicenseUnformatted.test", "java/palantirjavaformat/JavaCodeWithLicenseFormatted.test")

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenProvisionerTest.java
Patch:
@@ -33,7 +33,6 @@ void testMultipleDependenciesExcludingTransitives() throws Exception {
 	void testSingleDependencyIncludingTransitives() throws Exception {
 		writePomWithJavaSteps(
 				"<googleJavaFormat>",
-				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 		assertResolveDependenciesWorks();
 	}

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/SpecificFilesTest.java
Patch:
@@ -58,7 +58,6 @@ private void integration(String patterns, boolean firstFormatted, boolean second
 				"  <include>src/**/java/**/*.java</include>",
 				"</includes>",
 				"<googleJavaFormat>",
-				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 
 		setFile(testFile(1)).toResource(fixture(false));

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/PalantirJavaFormatTest.java
Patch:
@@ -34,7 +34,7 @@ void specificVersionDefaultStyle() throws Exception {
 	void specificJava11Version2() throws Exception {
 		writePomWithJavaSteps(
 				"<palantirJavaFormat>",
-				"  <version>2.10.0</version>",
+				"  <version>2.38.0</version>",
 				"</palantirJavaFormat>");
 
 		runTest("java/palantirjavaformat/JavaCodeFormatted.test");

File: testlib/src/test/java/com/diffplug/spotless/combined/CombinedJavaFormatStepTest.java
Patch:
@@ -34,7 +34,7 @@ public class CombinedJavaFormatStepTest extends ResourceHarness {
 
 	@Test
 	void checkIssue1679() {
-		FormatterStep gjf = GoogleJavaFormatStep.create("1.15.0", "AOSP", mavenCentral());
+		FormatterStep gjf = GoogleJavaFormatStep.create(GoogleJavaFormatStep.defaultVersion(), "AOSP", mavenCentral());
 		FormatterStep indentWithSpaces = IndentStep.Type.SPACE.create();
 		FormatterStep importOrder = ImportOrderStep.forJava().createFrom();
 		FormatterStep removeUnused = RemoveUnusedImportsStep.create(mavenCentral());

File: testlib/src/test/java/com/diffplug/spotless/java/PalantirJavaFormatStepTest.java
Patch:
@@ -38,7 +38,7 @@ void jvm13Features() throws Exception {
 
 	@Test
 	void behavior2() throws Exception {
-		FormatterStep step = PalantirJavaFormatStep.create("2.28.0", TestProvisioner.mavenCentral());
+		FormatterStep step = PalantirJavaFormatStep.create(TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
 				.testResource("java/palantirjavaformat/JavaCodeUnformatted.test", "java/palantirjavaformat/JavaCodeFormatted.test")
 				.testResource("java/palantirjavaformat/JavaCodeWithLicenseUnformatted.test", "java/palantirjavaformat/JavaCodeWithLicenseFormatted.test")

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -83,7 +83,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
 			.addMin(16, "1.10.0") // java 16 requires at least 1.10.0 due to jdk api changes in JavaTokenizer
 			.addMin(21, "1.17.0") // java 21 requires at least 1.17.0 due to https://github.com/google/google-java-format/issues/898
-			.add(11, "1.17.0"); // default version
+			.add(11, "1.18.1"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.44";
+	private static final String DEFAULT_VERSION = "0.46";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -36,7 +36,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "1.0.0";
+	private static final String DEFAULT_VERSION = "1.0.1";
 	static final String NAME = "ktlint";
 	static final String MAVEN_COORDINATE_0_DOT = "com.pinterest:ktlint:";
 	static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -211,6 +211,7 @@ public GoogleJavaFormatConfig reflowLongStrings(boolean reflowLongStrings) {
 
 		public GoogleJavaFormatConfig reorderImports(boolean reorderImports) {
 			this.reorderImports = reorderImports;
+			replaceStep(createStep());
 			return this;
 		}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -211,6 +211,7 @@ public GoogleJavaFormatConfig reflowLongStrings(boolean reflowLongStrings) {
 
 		public GoogleJavaFormatConfig reorderImports(boolean reorderImports) {
 			this.reorderImports = reorderImports;
+			replaceStep(createStep());
 			return this;
 		}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/FileIndex.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.PrintWriter;
 import java.io.UncheckedIOException;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.time.Instant;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -48,7 +48,7 @@ public abstract class SpotlessTaskImpl extends SpotlessTask {
 
 	void init(Provider<SpotlessTaskService> service) {
 		taskServiceProvider = service;
-		usesService(service);
+		SpotlessTaskService.usesServiceTolerateTestFailure(this, service);
 		getTaskService().set(service);
 		getProjectDir().set(getProject().getProjectDir());
 	}

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -78,6 +78,7 @@ public static LineEnding.Policy createFastAllSame(File projectDir, Supplier<Iter
 	}
 
 	static class LazyAllTheSame extends LazyForwardingEquality<String> implements LineEnding.Policy {
+		private static final long serialVersionUID = 727912266173243664L;
 		transient File projectDir;
 		transient Supplier<Iterable<File>> toFormat;
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -57,7 +57,7 @@ RegisterDependenciesTask getRegisterDependenciesTask() {
 	}
 
 	/** Line endings (if any). */
-	LineEnding lineEndings = LineEnding.GIT_ATTRIBUTES;
+	LineEnding lineEndings = LineEnding.GIT_ATTRIBUTES_FAST_ALLSAME;
 
 	public LineEnding getLineEndings() {
 		return lineEndings;

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -80,7 +80,7 @@
 public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	private static final String DEFAULT_INDEX_FILE_NAME = "spotless-index";
 	private static final String DEFAULT_ENCODING = "UTF-8";
-	private static final String DEFAULT_LINE_ENDINGS = "GIT_ATTRIBUTES";
+	private static final String DEFAULT_LINE_ENDINGS = "GIT_ATTRIBUTES_FAST_ALLSAME";
 
 	/** Value to allow unsetting the ratchet inherited from parent pom configuration. */
 	static final String RATCHETFROM_NONE = "NONE";

File: lib-extra/src/main/java/com/diffplug/spotless/extra/P2Mirror.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.diffplug.spotless.extra;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
+@SuppressFBWarnings("UWF_UNWRITTEN_FIELD")
 public class P2Mirror {
 
 	private String prefix;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/RomeIntegrationTest.java
Patch:
@@ -288,7 +288,7 @@ void downloadDirRelative() throws Exception {
 	}
 
 	/**
-	 * Tests that the build fails when given Rome executable does not exist.
+	 * Tests that the build fails when given Biome executable does not exist.
 	 *
 	 * @throws Exception When a test failure occurs.
 	 */
@@ -311,7 +311,7 @@ void failureWhenExeNotFound() throws Exception {
 		assertThat(spotlessApply.getOutput()).contains("Build failed with an exception");
 		assertFile("rome_test.js").sameAsResource("rome/js/fileBefore.js");
 		assertThat(spotlessApply.getOutput()).contains("Could not create task ':spotlessMyromeApply'");
-		assertThat(spotlessApply.getOutput()).contains("Rome executable does not exist");
+		assertThat(spotlessApply.getOutput()).contains("Biome executable does not exist");
 	}
 
 	/**

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/rome/RomeMavenTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.diffplug.spotless.maven.MavenIntegrationHarness;
 
+@Deprecated
 class RomeMavenTest extends MavenIntegrationHarness {
 	/**
 	 * Tests that rome can be used as a generic formatting step.
@@ -181,7 +182,7 @@ void failureWhenExeNotFound() throws Exception {
 		setFile("rome_test.js").toResource("rome/js/fileBefore.js");
 		var result = mavenRunner().withArguments("spotless:apply").runHasError();
 		assertFile("rome_test.js").sameAsResource("rome/js/fileBefore.js");
-		assertThat(result.stdOutUtf8()).contains("Rome executable does not exist");
+		assertThat(result.stdOutUtf8()).contains("Biome executable does not exist");
 	}
 
 	/**

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -27,6 +27,7 @@
 import org.gradle.api.artifacts.ConfigurationContainer;
 import org.gradle.api.artifacts.dsl.DependencyHandler;
 import org.gradle.api.attributes.Bundling;
+import org.gradle.api.attributes.Category;
 import org.gradle.api.initialization.dsl.ScriptHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -121,6 +122,7 @@ private static Provisioner forConfigurationContainer(Project project, Configurat
 				config.setCanBeConsumed(false);
 				config.setVisible(false);
 				config.attributes(attr -> {
+					attr.attribute(Category.CATEGORY_ATTRIBUTE, project.getObjects().named(Category.class, Category.LIBRARY));
 					attr.attribute(Bundling.BUNDLING_ATTRIBUTE, project.getObjects().named(Bundling.class, Bundling.EXTERNAL));
 				});
 				return config.resolve();

File: testlib/src/main/java/com/diffplug/spotless/TestProvisioner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
 import org.gradle.api.artifacts.ResolveException;
 import org.gradle.api.artifacts.dsl.RepositoryHandler;
 import org.gradle.api.attributes.Bundling;
+import org.gradle.api.attributes.Category;
 import org.gradle.testfixtures.ProjectBuilder;
 
 import com.diffplug.common.base.Errors;
@@ -70,6 +71,7 @@ private static Provisioner createWithRepositories(Consumer<RepositoryHandler> re
 			config.setTransitive(withTransitives);
 			config.setDescription(mavenCoords.toString());
 			config.attributes(attr -> {
+				attr.attribute(Category.CATEGORY_ATTRIBUTE, project.getObjects().named(Category.class, Category.LIBRARY));
 				attr.attribute(Bundling.BUNDLING_ATTRIBUTE, project.getObjects().named(Bundling.class, Bundling.EXTERNAL));
 			});
 			try {

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -39,7 +39,7 @@ private KtLintStep() {}
 	private static final String DEFAULT_VERSION = "1.0.0";
 	static final String NAME = "ktlint";
 	static final String MAVEN_COORDINATE_0_DOT = "com.pinterest:ktlint:";
-	static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";
+	public static final String MAVEN_COORDINATE_1_DOT = "com.pinterest.ktlint:ktlint-cli:";
 
 	public static FormatterStep create(Provisioner provisioner) {
 		return create(defaultVersion(), provisioner);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinExtensionTest.java
Patch:
@@ -73,6 +73,7 @@ void withExperimentalEditorConfigOverride() throws IOException {
 				"spotless {",
 				"    kotlin {",
 				"        ktlint().editorConfigOverride([",
+				"            ktlint_code_style: \"intellij_idea\",",
 				"            ktlint_experimental: \"enabled\",",
 				"            ij_kotlin_allow_trailing_comma: true,",
 				"            ij_kotlin_allow_trailing_comma_on_call_site: true",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -52,6 +52,7 @@ void withExperimentalEditorConfigOverride() throws IOException {
 				"spotless {",
 				"    kotlinGradle {",
 				"        ktlint().editorConfigOverride([",
+				"            ktlint_code_style: \"intellij_idea\",",
 				"            ktlint_experimental: \"enabled\",",
 				"            ij_kotlin_allow_trailing_comma: true,",
 				"            ij_kotlin_allow_trailing_comma_on_call_site: true",

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierRestService.java
Patch:
@@ -31,8 +31,7 @@ public String resolveConfig(File prettierConfigPath, Map<String, Object> prettie
 			jsonProperties.put("prettier_config_path", prettierConfigPath.getAbsolutePath());
 		}
 		if (prettierConfigOptions != null) {
-			jsonProperties.put("prettier_config_options", SimpleJsonWriter.of(prettierConfigOptions).toJsonRawValue());
-
+			jsonProperties.put("prettier_config_options", JsonWriter.of(prettierConfigOptions).toJsonRawValue());
 		}
 		return restClient.postJson("/prettier/config-options", jsonProperties);
 	}

File: lib/src/main/java/com/diffplug/spotless/npm/SimpleRestClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ static SimpleRestClient forBaseUrl(String baseUrl) {
 	}
 
 	String postJson(String endpoint, Map<String, Object> jsonParams) throws SimpleRestException {
-		final SimpleJsonWriter jsonWriter = SimpleJsonWriter.of(jsonParams);
+		final JsonWriter jsonWriter = JsonWriter.of(jsonParams);
 		final String jsonString = jsonWriter.toJsonString();
 
 		return postJson(endpoint, jsonString);

File: lib/src/main/java/com/diffplug/spotless/npm/TsFmtFormatterStep.java
Patch:
@@ -107,7 +107,7 @@ private Map<String, Object> unifyOptions() {
 			Map<String, Object> unified = new HashMap<>();
 			if (!this.inlineTsFmtSettings.isEmpty()) {
 				File targetFile = new File(this.buildDir, "inline-tsfmt.json");
-				SimpleJsonWriter.of(this.inlineTsFmtSettings).toJsonFile(targetFile);
+				JsonWriter.of(this.inlineTsFmtSettings).toJsonFile(targetFile);
 				unified.put("tsfmt", true);
 				unified.put("tsfmtFile", targetFile.getAbsolutePath());
 			} else if (this.configFile != null) {

File: lib/src/main/java/com/diffplug/spotless/npm/TsFmtRestService.java
Patch:
@@ -28,7 +28,7 @@ public String format(String fileContent, Map<String, Object> configOptions) {
 		Map<String, Object> jsonProperties = new LinkedHashMap<>();
 		jsonProperties.put("file_content", fileContent);
 		if (configOptions != null && !configOptions.isEmpty()) {
-			jsonProperties.put("config_options", SimpleJsonWriter.of(configOptions).toJsonRawValue());
+			jsonProperties.put("config_options", JsonWriter.of(configOptions).toJsonRawValue());
 		}
 
 		return restClient.postJson("/tsfmt/format", jsonProperties);

File: testlib/src/test/java/com/diffplug/spotless/npm/JsonWriterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,9 +26,9 @@
 import com.diffplug.common.collect.ImmutableMap;
 import com.diffplug.spotless.ResourceHarness;
 
-class SimpleJsonWriterTest extends ResourceHarness {
+class JsonWriterTest extends ResourceHarness {
 
-	private SimpleJsonWriter jsonWriter = new SimpleJsonWriter();
+	private JsonWriter jsonWriter = new JsonWriter();
 
 	@Test
 	void itWritesAValidEmptyObject() {

File: lib/src/main/java/com/diffplug/spotless/npm/ListableAdapter.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.diffplug.spotless.npm;
 
-import javax.annotation.Nonnull;
-
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
+import javax.annotation.Nonnull;
+
 class ListableAdapter<T> implements Iterable<T> {
 
 	private final List<T> delegate;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PrettierIntegrationTest.java
Patch:
@@ -50,7 +50,7 @@ void useInlineConfig(String prettierVersion) throws IOException {
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/prettier/config/typescript.dirty");
-		BuildResult spotlessApply = gradleRunner().withArguments("--stacktrace", "spotlessApply").build();
+		final BuildResult spotlessApply = gradleRunner().withArguments("--stacktrace", "spotlessApply").build();
 		Assertions.assertThat(spotlessApply.getOutput()).contains("BUILD SUCCESSFUL");
 		switch (prettierVersion) {
 		case PRETTIER_VERSION_2:
@@ -80,7 +80,7 @@ void verifyCleanSpotlessCheckWorks(String prettierVersion) throws IOException {
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/prettier/config/typescript.dirty");
-		BuildResult spotlessCheckFailsGracefully = gradleRunner().withArguments("--stacktrace", "spotlessCheck").buildAndFail();
+		final BuildResult spotlessCheckFailsGracefully = gradleRunner().withArguments("--stacktrace", "spotlessCheck").buildAndFail();
 		Assertions.assertThat(spotlessCheckFailsGracefully.getOutput()).contains("> The following files had format violations:");
 
 		gradleRunner().withArguments("--stacktrace", "spotlessApply").build();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -40,6 +40,7 @@
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
 import org.gradle.api.file.ConfigurableFileTree;
+import org.gradle.api.file.Directory;
 import org.gradle.api.file.FileCollection;
 import org.gradle.api.plugins.BasePlugin;
 import org.gradle.api.tasks.TaskProvider;
@@ -925,7 +926,8 @@ protected void setupTask(SpotlessTask task) {
 			steps.replaceAll(formatterStep -> formatterStep.filterByContent(OnMatch.EXCLUDE, targetExcludeContentPattern));
 		}
 		task.setSteps(steps);
-		task.setLineEndingsPolicy(getLineEndings().createPolicy(getProject().getProjectDir(), () -> totalTarget));
+		Directory projectDir = getProject().getLayout().getProjectDirectory();
+		task.setLineEndingsPolicy(getProject().provider(() -> getLineEndings().createPolicy(projectDir.getAsFile(), () -> totalTarget)));
 		spotless.getRegisterDependenciesTask().hookSubprojectTask(task);
 		task.setupRatchet(getRatchetFrom() != null ? getRatchetFrom() : "");
 	}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@ public BuildServiceParameters.None getParameters() {
 		private SpotlessTaskImpl createFormatTask(String name) {
 			SpotlessTaskImpl task = project.getTasks().create("spotless" + SpotlessPlugin.capitalize(name), SpotlessTaskImpl.class);
 			task.init(taskService);
-			task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
+			task.setLineEndingsPolicy(project.provider(LineEnding.UNIX::createPolicy));
 			task.setTarget(Collections.singletonList(file));
 			return task;
 		}
@@ -100,7 +100,7 @@ private Bundle create(File... files) throws IOException {
 
 	private Bundle create(List<File> files) throws IOException {
 		Bundle bundle = new Bundle("underTest");
-		bundle.task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
+		bundle.task.setLineEndingsPolicy(bundle.project.provider(LineEnding.UNIX::createPolicy));
 		bundle.task.setTarget(files);
 		return bundle;
 	}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ class FormatTaskTest extends ResourceHarness {
 	void createTask() {
 		Project project = TestProvisioner.gradleProject(rootFolder());
 		spotlessTask = project.getTasks().create("spotlessTaskUnderTest", SpotlessTaskImpl.class);
-		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
+		spotlessTask.setLineEndingsPolicy(project.provider(LineEnding.UNIX::createPolicy));
 		spotlessTask.init(GradleIntegrationHarness.providerOf(new SpotlessTaskService() {
 			@Override
 			public BuildServiceParameters.None getParameters() {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ private SpotlessTaskImpl createFormatTask(String name, FormatterStep step) {
 			SpotlessTaskImpl task = project.getTasks().create("spotless" + SpotlessPlugin.capitalize(name), SpotlessTaskImpl.class);
 			task.init(taskService);
 			task.addStep(step);
-			task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
+			task.setLineEndingsPolicy(project.provider(LineEnding.UNIX::createPolicy));
 			task.setTarget(Collections.singletonList(file));
 			return task;
 		}

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ public final class GrEclipseFormatterStep {
 	private GrEclipseFormatterStep() {}
 
 	private static final String NAME = "eclipse groovy formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.27");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.28");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.npm.EslintFormatterStep;
@@ -170,7 +169,6 @@ void useEslint() throws IOException {
 	}
 
 	@Test
-	@Disabled("https://github.com/diffplug/spotless/issues/1756")
 	void useEslintXoStandardRules() throws IOException {
 		setFile(".eslintrc.js").toResource("npm/eslint/typescript/styleguide/xo/.eslintrc.js");
 		setFile("tsconfig.json").toResource("npm/eslint/typescript/styleguide/xo/tsconfig.json");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.ProcessRunner;
@@ -211,7 +210,6 @@ void eslintStyleguideStandardWithTypescript() throws Exception {
 	}
 
 	@Test
-	@Disabled("https://github.com/diffplug/spotless/issues/1756")
 	void eslintStyleguideXo() throws Exception {
 		writePomWithTypescriptSteps(
 				TEST_FILE_PATH,

File: lib/src/main/java/com/diffplug/spotless/npm/NodeModulesCachingNpmProcessFactory.java
Patch:
@@ -58,8 +58,8 @@ public static NodeModulesCachingNpmProcessFactory create(@Nonnull File cacheDir)
 	}
 
 	@Override
-	public NpmProcess createNpmInstallProcess(NodeServerLayout nodeServerLayout, NpmFormatterStepLocations formatterStepLocations) {
-		NpmProcess actualNpmInstallProcess = StandardNpmProcessFactory.INSTANCE.createNpmInstallProcess(nodeServerLayout, formatterStepLocations);
+	public NpmProcess createNpmInstallProcess(NodeServerLayout nodeServerLayout, NpmFormatterStepLocations formatterStepLocations, OnlinePreferrence onlinePreferrence) {
+		NpmProcess actualNpmInstallProcess = StandardNpmProcessFactory.INSTANCE.createNpmInstallProcess(nodeServerLayout, formatterStepLocations, onlinePreferrence);
 		return new CachingNmpInstall(actualNpmInstallProcess, nodeServerLayout);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -41,8 +41,10 @@ public class PrettierFormatterStep {
 
 	public static final String NAME = "prettier-format";
 
+	public static final String DEFAULT_VERSION = "2.8.8";
+
 	public static final Map<String, String> defaultDevDependencies() {
-		return defaultDevDependenciesWithPrettier("2.8.1");
+		return defaultDevDependenciesWithPrettier(DEFAULT_VERSION);
 	}
 
 	public static final Map<String, String> defaultDevDependenciesWithPrettier(String version) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NpmInstallCacheIntegrationTests.java
Patch:
@@ -112,8 +112,8 @@ private BuildResult runPhpPrettierOnDir(File projDir, File cacheDir) throws IOEx
 				"prettierConfig['tabWidth'] = 3",
 				"prettierConfig['parser'] = 'php'",
 				"def prettierPackages = [:]",
-				"prettierPackages['prettier'] = '2.0.5'",
-				"prettierPackages['@prettier/plugin-php'] = '0.14.2'",
+				"prettierPackages['prettier'] = '2.8.8'",
+				"prettierPackages['@prettier/plugin-php'] = '0.19.6'",
 				"spotless {",
 				"    format 'php', {",
 				"        target 'php-example.php'",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NpmTestsWithoutNpmInstallationTest.java
Patch:
@@ -34,8 +34,8 @@ void useNodeAndNpmFromNodeGradlePlugin() throws Exception {
 					"repositories { mavenCentral() }",
 					"node {",
 					"    download = true",
-					"    version = '18.13.0'",
-					"    npmVersion = '8.19.2'",
+					"    version = '18.16.1'",
+					"    npmVersion = '9.5.1'",
 					"    workDir = file(\"${buildDir}/nodejs\")",
 					"    npmWorkDir = file(\"${buildDir}/npm\")",
 					"}",
@@ -111,7 +111,7 @@ void useNpmFromNodeGradlePlugin() throws Exception {
 					"repositories { mavenCentral() }",
 					"node {",
 					"    download = true",
-					"    version = '18.13.0'",
+					"    version = '18.16.1'",
 					"    workDir = file(\"${buildDir}/nodejs\")",
 					"}",
 					"def prettierConfig = [:]",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NpmInstallCacheIntegrationTests.java
Patch:
@@ -112,8 +112,8 @@ private BuildResult runPhpPrettierOnDir(File projDir, File cacheDir) throws IOEx
 				"prettierConfig['tabWidth'] = 3",
 				"prettierConfig['parser'] = 'php'",
 				"def prettierPackages = [:]",
-				"prettierPackages['prettier'] = '2.0.5'",
-				"prettierPackages['@prettier/plugin-php'] = '0.14.2'",
+				"prettierPackages['prettier'] = '2.8.8'",
+				"prettierPackages['@prettier/plugin-php'] = '0.19.6'",
 				"spotless {",
 				"    format 'php', {",
 				"        target 'php-example.php'",

File: testlib/src/test/java/com/diffplug/spotless/npm/PrettierFormatterStepTest.java
Patch:
@@ -128,7 +128,7 @@ void parserInferenceBasedOnFilenameIsWorking(String prettierVersion) throws Exce
 		@Test
 		void verifyPrettierErrorMessageIsRelayed() throws Exception {
 			FormatterStep formatterStep = PrettierFormatterStep.create(
-					PrettierFormatterStep.defaultDevDependenciesWithPrettier("2.0.5"),
+					PrettierFormatterStep.defaultDevDependenciesWithPrettier("2.8.8"),
 					TestProvisioner.mavenCentral(),
 					projectDir(),
 					buildDir(),

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.ProcessRunner;
@@ -211,7 +210,6 @@ void eslintStyleguideStandardWithTypescript() throws Exception {
 	}
 
 	@Test
-	@Disabled("https://github.com/diffplug/spotless/issues/1756")
 	void eslintStyleguideXo() throws Exception {
 		writePomWithTypescriptSteps(
 				TEST_FILE_PATH,

File: testlib/src/main/java/com/diffplug/spotless/npm/EslintStyleGuide.java
Patch:
@@ -115,8 +115,8 @@ public String asGradleMapStringMergedWith(Map<String, String> devDependencies) {
 
 	public String asMavenXmlStringMergedWith(Map<String, String> devDependencies) {
 		return mergedWith(devDependencies).entrySet().stream()
-				.map(entry -> "<" + entry.getKey() + ">" + entry.getValue() + "</" + entry.getKey() + ">")
-				.collect(Collectors.joining("", "<devDependencies>", "</devDependencies>"));
+				.map(entry -> String.format("<property><name>%s</name><value>%s</value></property>", entry.getKey(), entry.getValue()))
+				.collect(Collectors.joining("", "<devDependencyProperties>", "</devDependencyProperties>"));
 	}
 
 }

File: testlib/src/main/java/com/diffplug/spotless/npm/EslintStyleGuide.java
Patch:
@@ -29,7 +29,9 @@ public enum EslintStyleGuide {
 		@Override
 		public @Nonnull Map<String, String> devDependencies() {
 			Map<String, String> dependencies = new LinkedHashMap<>();
-			dependencies.put("eslint-config-standard-with-typescript", "^36.1.0");
+			dependencies.put("@typescript-eslint/eslint-plugin", "^5.62.0");
+			dependencies.put("@typescript-eslint/parser", "^5.62.0");
+			dependencies.put("eslint-config-standard-with-typescript", "^36.0.1");
 			dependencies.put("eslint-plugin-import", "^2.27.5");
 			dependencies.put("eslint-plugin-n", "^16.0.1");
 			dependencies.put("eslint-plugin-promise", "^6.1.1");

File: lib/src/main/java/com/diffplug/spotless/npm/NpmProcessException.java
Patch:
@@ -21,7 +21,7 @@
 
 public class NpmProcessException extends RuntimeException {
 	private static final long serialVersionUID = 6424331316676759525L;
-	private final ProcessRunner.Result result;
+	private final transient ProcessRunner.Result result;
 
 	public NpmProcessException(String message, ProcessRunner.Result result) {
 		super(message);

File: testlib/src/test/java/com/diffplug/spotless/npm/PrettierFormatterStepTest.java
Patch:
@@ -46,7 +46,7 @@ void formattingUsingPrettier2WithConfigFile(String fileType) throws Exception {
 		}
 
 		@ParameterizedTest(name = "{index}: prettier 3.x can be applied to {0}")
-		@ValueSource(strings = {"html", "typescript", "json", "javascript-es5", "javascript-es6", "css", "scss", "markdown", "yaml"})
+		@ValueSource(strings = {"html_prettier3", "typescript", "json", "javascript-es5", "javascript-es6", "css", "scss", "markdown", "yaml"})
 		void formattingUsingPrettier3WithConfigFile(String fileType) throws Exception {
 			runTestUsingPrettier(fileType, ImmutableMap.of("prettier", "3.0.0"));
 		}

File: lib/src/main/java/com/diffplug/spotless/npm/NodeModulesCachingNpmProcessFactory.java
Patch:
@@ -58,8 +58,8 @@ public static NodeModulesCachingNpmProcessFactory create(@Nonnull File cacheDir)
 	}
 
 	@Override
-	public NpmProcess createNpmInstallProcess(NodeServerLayout nodeServerLayout, NpmFormatterStepLocations formatterStepLocations) {
-		NpmProcess actualNpmInstallProcess = StandardNpmProcessFactory.INSTANCE.createNpmInstallProcess(nodeServerLayout, formatterStepLocations);
+	public NpmProcess createNpmInstallProcess(NodeServerLayout nodeServerLayout, NpmFormatterStepLocations formatterStepLocations, OnlinePreferrence onlinePreferrence) {
+		NpmProcess actualNpmInstallProcess = StandardNpmProcessFactory.INSTANCE.createNpmInstallProcess(nodeServerLayout, formatterStepLocations, onlinePreferrence);
 		return new CachingNmpInstall(actualNpmInstallProcess, nodeServerLayout);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -42,7 +42,7 @@ public class PrettierFormatterStep {
 	public static final String NAME = "prettier-format";
 
 	public static final Map<String, String> defaultDevDependencies() {
-		return defaultDevDependenciesWithPrettier("2.8.1");
+		return defaultDevDependenciesWithPrettier("2.8.8");
 	}
 
 	public static final Map<String, String> defaultDevDependenciesWithPrettier(String version) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.npm.EslintFormatterStep;
@@ -170,7 +169,6 @@ void useEslint() throws IOException {
 	}
 
 	@Test
-	@Disabled("https://github.com/diffplug/spotless/issues/1756")
 	void useEslintXoStandardRules() throws IOException {
 		setFile(".eslintrc.js").toResource("npm/eslint/typescript/styleguide/xo/.eslintrc.js");
 		setFile("tsconfig.json").toResource("npm/eslint/typescript/styleguide/xo/tsconfig.json");

File: lib/src/main/java/com/diffplug/spotless/protobuf/BufStep.java
Patch:
@@ -38,7 +38,7 @@ public static String name() {
 	}
 
 	public static String defaultVersion() {
-		return "1.4.0";
+		return "1.24.0";
 	}
 
 	private final String version;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.npm.EslintFormatterStep;
@@ -169,6 +170,7 @@ void useEslint() throws IOException {
 	}
 
 	@Test
+	@Disabled("https://github.com/diffplug/spotless/issues/1756")
 	void useEslintXoStandardRules() throws IOException {
 		setFile(".eslintrc.js").toResource("npm/eslint/typescript/styleguide/xo/.eslintrc.js");
 		setFile("tsconfig.json").toResource("npm/eslint/typescript/styleguide/xo/tsconfig.json");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.ProcessRunner;
@@ -210,6 +211,7 @@ void eslintStyleguideStandardWithTypescript() throws Exception {
 	}
 
 	@Test
+	@Disabled("https://github.com/diffplug/spotless/issues/1756")
 	void eslintStyleguideXo() throws Exception {
 		writePomWithTypescriptSteps(
 				TEST_FILE_PATH,

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -38,6 +38,7 @@
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
+import com.diffplug.spotless.OnMatch;
 import com.diffplug.spotless.SerializableFileFilter;
 import com.diffplug.spotless.ThrowingEx;
 
@@ -150,7 +151,7 @@ public FormatterStep build() {
 			return formatterStep;
 		}
 
-		return formatterStep.filterByContentPattern(contentPattern);
+		return formatterStep.filterByContent(OnMatch.INCLUDE, contentPattern);
 	}
 
 	private String sanitizeName(@Nullable String name) {

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -62,10 +62,10 @@ public default FormatterStep filterByContentPattern(String contentPattern) {
 	 * Returns a new {@code FormatterStep} which, observing the value of {@code formatIfMatches},
 	 * will only apply, or not, its changes to files which pass the given filter.
 	 *
-	 * @param contentPattern
-	 *            java regular expression used to filter in or out files which content contain pattern
 	 * @param includeOrExclude
 	 *            determines if matches are included or excluded
+	 * @param contentPattern
+	 *            java regular expression used to filter in or out files which content contain pattern
 	 * @return FormatterStep
 	 */
 	public default FormatterStep filterByContent(Filter includeOrExclude, String contentPattern) {

File: lib/src/compatKtLintApi/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompatAdapter.java
Patch:
@@ -21,5 +21,5 @@
 public interface KtLintCompatAdapter {
 
 	String format(String text, Path path, boolean isScript, Path editorConfigPath, Map<String, String> userData,
-				  Map<String, Object> editorConfigOverrideMap);
+			Map<String, Object> editorConfigOverrideMap);
 }

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -50,7 +50,7 @@ public static FormatterStep create(String version, Provisioner provisioner) {
 	}
 
 	public static FormatterStep create(String version, Provisioner provisioner,
-									   Map<String, String> userData, Map<String, Object> editorConfigOverride) {
+			Map<String, String> userData, Map<String, Object> editorConfigOverride) {
 		return create(version, provisioner, false, null, userData, editorConfigOverride);
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -77,7 +77,7 @@ public class KotlinFormatExtension {
 		private Map<String, Object> editorConfigOverride;
 
 		KotlinFormatExtension(String version, @Nullable FileSignature editorConfigPath, Map<String, String> config,
-							  Map<String, Object> editorConfigOverride) {
+				Map<String, Object> editorConfigOverride) {
 			this.version = version;
 			this.editorConfigPath = editorConfigPath;
 			this.userData = config;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -36,7 +36,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.49.1";
+	private static final String DEFAULT_VERSION = "0.50.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE = "com.pinterest";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktlint:";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -100,7 +100,7 @@ public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	@Parameter(defaultValue = "${mojoExecution.goal}", required = true, readonly = true)
 	private String goal;
 
-	@Parameter(defaultValue = "false")
+	@Parameter(property = "spotless.skip", defaultValue = "false")
 	private boolean skip;
 
 	@Parameter(property = "spotless.apply.skip", defaultValue = "false")

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.43";
+	private static final String DEFAULT_VERSION = "0.44";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -72,7 +72,8 @@ public static FormatterStep create(String groupArtifact, String version, String
 	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME)
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
 			.addMin(16, "1.10.0") // java 16 requires at least 1.10.0 due to jdk api changes in JavaTokenizer
-			.add(11, "1.16.0"); // default version
+			.addMin(21, "1.17.0") // java 21 requires at least 1.17.0 due to https://github.com/google/google-java-format/issues/898
+			.add(11, "1.17.0"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib-extra/src/groovy/java/com/diffplug/spotless/extra/glue/groovy/GrEclipseFormatterStepImpl.java
Patch:
@@ -52,7 +52,7 @@
 public class GrEclipseFormatterStepImpl {
 	static {
 		NestedJars.setToWarnOnly();
-		NestedJars.onClassPath().confirmAllNestedJarsArePresentOnClasspath(CacheLocations.nestedJars());
+		NestedJars.onClassPath().confirmAllNestedJarsArePresentOnClasspath(CacheLocations.p2nestedJars());
 		try {
 			var solstice = Solstice.findBundlesOnClasspath();
 			solstice.warnAndModifyManifestsToFix();

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -72,7 +72,8 @@ public static FormatterStep create(String groupArtifact, String version, String
 	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME)
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
 			.addMin(16, "1.10.0") // java 16 requires at least 1.10.0 due to jdk api changes in JavaTokenizer
-			.add(11, "1.16.0"); // default version
+			.addMin(21, "1.17.0") // java 21 requires at least 1.17.0 due to https://github.com/google/google-java-format/issues/898
+			.add(11, "1.17.0"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.43";
+	private static final String DEFAULT_VERSION = "0.44";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -36,7 +36,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.48.2";
+	private static final String DEFAULT_VERSION = "0.49.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE = "com.pinterest";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktlint:";

File: lib/src/main/java/com/diffplug/spotless/java/ImportOrderStep.java
Patch:
@@ -42,8 +42,8 @@
 public final class ImportOrderStep {
 	private static final boolean WILDCARDS_LAST_DEFAULT = false;
 	private static final boolean SEMANTIC_SORT_DEFAULT = false;
-	private static final Set<String> TREAT_AS_PACKAGE_DEFAULT = null;
-	private static final Set<String> TREAT_AS_CLASS_DEFAULT = null;
+	private static final Set<String> TREAT_AS_PACKAGE_DEFAULT = Set.of();
+	private static final Set<String> TREAT_AS_CLASS_DEFAULT = Set.of();
 
 	private final String lineFormat;
 

File: lib/src/main/java/com/diffplug/spotless/rome/Architecture.java
Patch:
@@ -43,9 +43,6 @@ public static Architecture guess() {
 		if (arch.equals("ppc64le")) {
 			throw new IllegalStateException(msg);
 		}
-		if (arch.equals("aarch64")) {
-			throw new IllegalStateException(msg);
-		}
 		if (arch.equals("s390x")) {
 			throw new IllegalStateException(msg);
 		}
@@ -55,6 +52,9 @@ public static Architecture guess() {
 		if (arch.equals("ppc")) {
 			throw new IllegalStateException(msg);
 		}
+		if (arch.equals("aarch64")) {
+			return ARM64;
+		}
 		if (arch.equals("arm")) {
 			if (version.contains("v7")) {
 				throw new IllegalStateException(msg);

File: lib/src/main/java/com/diffplug/spotless/java/ImportOrderStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -127,13 +127,13 @@ public ImportOrderConfig treatAsPackage(Collection<String> treatAsPackage) {
 		public ImportOrderConfig treatAsClass(String... treatAsClass) {
 			return treatAsClass(Arrays.asList(treatAsClass));
 		}
-		
+
 		public ImportOrderConfig treatAsClass(Collection<String> treatAsClass) {
 			this.treatAsClass = new HashSet<>(treatAsClass);
 			replaceStep(createStep());
 			return this;
 		}
-		
+
 		private FormatterStep createStep() {
 			ImportOrderStep importOrderStep = ImportOrderStep.forJava();
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/ImportOrder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: testlib/src/test/java/com/diffplug/spotless/java/ImportOrderStepTest.java
Patch:
@@ -15,13 +15,14 @@
  */
 package com.diffplug.spotless.java;
 
+import java.util.Set;
+
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.SerializableEqualityTester;
 import com.diffplug.spotless.StepHarness;
-import java.util.Set;
 
 class ImportOrderStepTest extends ResourceHarness {
 	@Test

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorterImpl.java
Patch:
@@ -415,7 +415,7 @@ private String[] splitPackageAndClasses(String fqcn) {
 		 */
 		private boolean treatAsPackage(String prefix) {
 			// This would be the place to introduce wild cards or even regex matching.
-			return treatAsPackage.contains(prefix);
+			return treatAsPackage != null && treatAsPackage.contains(prefix);
 		}
 
 		/**
@@ -424,7 +424,7 @@ private boolean treatAsPackage(String prefix) {
 		 */
 		private boolean treatAsClass(String prefix) {
 			// This would be the place to introduce wild cards or even regex matching.
-			return treatAsClass.contains(prefix);
+			return treatAsClass != null && treatAsClass.contains(prefix);
 		}
 
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -77,7 +77,7 @@ public class ImportOrderConfig {
 		final File importOrderFile;
 
 		boolean wildcardsLast = false;
-		boolean semanticSort = true;
+		boolean semanticSort = false;
 		Set<String> treatAsPackage = Set.of();
 		Set<String> treatAsClass = Set.of();
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/ImportOrder.java
Patch:
@@ -44,7 +44,7 @@ public class ImportOrder implements FormatterStepFactory {
 	 * lexicographically.
 	 */
 	@Parameter
-	private boolean semanticSort = true;
+	private boolean semanticSort = false;
 
 	/**
 	 * The prefixes that should be treated as packages for

File: lib/src/main/java/com/diffplug/spotless/rome/Architecture.java
Patch:
@@ -43,9 +43,6 @@ public static Architecture guess() {
 		if (arch.equals("ppc64le")) {
 			throw new IllegalStateException(msg);
 		}
-		if (arch.equals("aarch64")) {
-			throw new IllegalStateException(msg);
-		}
 		if (arch.equals("s390x")) {
 			throw new IllegalStateException(msg);
 		}
@@ -55,6 +52,9 @@ public static Architecture guess() {
 		if (arch.equals("ppc")) {
 			throw new IllegalStateException(msg);
 		}
+		if (arch.equals("aarch64")) {
+			return ARM64;
+		}
 		if (arch.equals("arm")) {
 			if (version.contains("v7")) {
 				throw new IllegalStateException(msg);

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -36,7 +36,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.48.2";
+	private static final String DEFAULT_VERSION = "0.49.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE = "com.pinterest";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktlint:";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Json.java
Patch:
@@ -50,4 +50,7 @@ public void addJackson(JacksonJson jackson) {
 		addStepFactory(jackson);
 	}
 
+	public void addRome(RomeJson rome) {
+		addStepFactory(rome);
+	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -824,7 +824,7 @@ private File findDataDir() {
 			try {
 				// e.g. ~/.m2/repository/
 				var repoPath = Paths.get(localRepo.getUrl().getPath());
-				var dataPath = repoPath.resolve("com").resolve("diffplus").resolve("spotless").resolve("spotless-data");
+				var dataPath = repoPath.resolve("com").resolve("diffplug").resolve("spotless").resolve("spotless-data");
 				return dataPath.toAbsolutePath().toFile();
 			} finally {
 				// Remove mavenLocal() repository again if it was not part of the project

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -232,7 +232,7 @@ protected final FileCollection parseTarget(Object target) {
 
 	private final FileCollection parseTargetIsExclude(Object target, boolean isExclude) {
 		if (target instanceof Collection) {
-			return parseTargetsIsExclude(((Collection) target).toArray(), isExclude);
+			return parseTargetsIsExclude(((Collection<?>) target).toArray(), isExclude);
 		} else if (target instanceof FileCollection) {
 			return (FileCollection) target;
 		} else if (target instanceof String) {
@@ -963,12 +963,12 @@ public PrettierConfig prettier(Map<String, String> devDependencies) {
 	 * offline, you can specify the path to the Rome executable via
 	 * {@code rome().pathToExe(...)}.
 	 */
-	public RomeGeneric rome() {
+	public RomeStepConfig<?> rome() {
 		return rome(null);
 	}
 
 	/** Downloads the given Rome version from the network. */
-	public RomeGeneric rome(String version) {
+	public RomeStepConfig<?> rome(String version) {
 		var romeConfig = new RomeGeneric(version);
 		addStep(romeConfig.createStep());
 		return romeConfig;

File: lib/src/main/java/com/diffplug/spotless/rome/Architecture.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Enumeration of possible computer architectures.
  */
-public enum Architecture {
+enum Architecture {
 	/** The arm64 architecture */
 	ARM64,
 	/** Either x64 or x64_32 architecture */

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/RegisterDependenciesTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
 import org.gradle.api.tasks.OutputFile;
 import org.gradle.api.tasks.TaskAction;
 import org.gradle.build.event.BuildEventsListenerRegistry;
+import org.gradle.work.DisableCachingByDefault;
 
 import com.diffplug.common.base.Preconditions;
 import com.diffplug.common.io.Files;
@@ -46,6 +47,7 @@
  * - When this "registerDependencies" task does its up-to-date check, it queries the task execution graph to see which
  *   SpotlessTasks are at risk of being executed, and causes them all to be evaluated safely in the root buildscript.
  */
+@DisableCachingByDefault(because = "This task coordinates the setup and execution of other tasks, and should not be cached")
 public abstract class RegisterDependenciesTask extends DefaultTask {
 	static final String TASK_NAME = "spotlessInternalRegisterDependencies";
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/RegisterDependenciesTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,6 +31,7 @@
 import org.gradle.api.tasks.OutputFile;
 import org.gradle.api.tasks.TaskAction;
 import org.gradle.build.event.BuildEventsListenerRegistry;
+import org.gradle.work.DisableCachingByDefault;
 
 import com.diffplug.common.base.Preconditions;
 import com.diffplug.common.io.Files;
@@ -46,6 +47,7 @@
  * - When this "registerDependencies" task does its up-to-date check, it queries the task execution graph to see which
  *   SpotlessTasks are at risk of being executed, and causes them all to be evaluated safely in the root buildscript.
  */
+@DisableCachingByDefault(because = "I/O bound task not worth caching")
 public abstract class RegisterDependenciesTask extends DefaultTask {
 	static final String TASK_NAME = "spotlessInternalRegisterDependencies";
 

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepSpecialCaseTest.java
Patch:
@@ -30,7 +30,7 @@ public class GrEclipseFormatterStepSpecialCaseTest {
 	 */
 	@Test
 	public void issue_1657() {
-		Assertions.assertThrows(IllegalArgumentException.class, () -> {
+		Assertions.assertThrows(RuntimeException.class, () -> {
 			StepHarness.forStep(GrEclipseFormatterStep.createBuilder(TestProvisioner.mavenCentral()).build())
 					.testResourceUnaffected("groovy/greclipse/format/SomeClass.test");
 		});

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public final class EclipseCdtFormatterStep {
 	private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "10.7").add(17, "11.0");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "10.7").add(17, "11.1");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ public final class GrEclipseFormatterStep {
 	private GrEclipseFormatterStep() {}
 
 	private static final String NAME = "eclipse groovy formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.27");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -31,7 +31,7 @@ public final class EclipseJdtFormatterStep {
 	private EclipseJdtFormatterStep() {}
 
 	private static final String NAME = "eclipse jdt formatter";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26").add(17, "4.27");
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -45,7 +45,7 @@ public static String defaultVersion() {
 
 	/** Provides default configuration */
 	public static EquoBasedStepBuilder createBuilder(Provisioner provisioner) {
-		return new EquoBasedStepBuilder(NAME, provisioner, EclipseCdtFormatterStep::apply) {
+		return new EquoBasedStepBuilder(NAME, provisioner, defaultVersion(), EclipseCdtFormatterStep::apply) {
 			@Override
 			protected P2Model model(String version) {
 				var model = new P2Model();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -39,7 +39,7 @@ public static String defaultVersion() {
 	}
 
 	public static EquoBasedStepBuilder createBuilder(Provisioner provisioner) {
-		return new EquoBasedStepBuilder(NAME, provisioner, GrEclipseFormatterStep::apply) {
+		return new EquoBasedStepBuilder(NAME, provisioner, defaultVersion(), GrEclipseFormatterStep::apply) {
 			@Override
 			protected P2Model model(String version) {
 				if (!version.startsWith("4.")) {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -38,7 +38,7 @@ public static String defaultVersion() {
 	}
 
 	public static EquoBasedStepBuilder createBuilder(Provisioner provisioner) {
-		return new EquoBasedStepBuilder(NAME, provisioner, EclipseJdtFormatterStep::apply) {
+		return new EquoBasedStepBuilder(NAME, provisioner, defaultVersion(), EclipseJdtFormatterStep::apply) {
 			@Override
 			protected P2Model model(String version) {
 				var model = new P2Model();

File: lib/src/main/java/com/diffplug/spotless/java/CleanthatJavaStep.java
Patch:
@@ -40,7 +40,7 @@ public final class CleanthatJavaStep {
 	private static final String MAVEN_COORDINATE = "io.github.solven-eu.cleanthat:java";
 
 	// CleanThat changelog is available at https://github.com/solven-eu/cleanthat/blob/master/CHANGES.MD
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.8");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.13");
 
 	// prevent direct instantiation
 	private CleanthatJavaStep() {}

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.Map;
 import java.util.Properties;
 
+import javax.annotation.Nullable;
+
 import com.diffplug.spotless.FileSignature;
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterProperties;
@@ -53,7 +55,7 @@ public EquoBasedStepBuilder(String formatterName, Provisioner mavenProvisioner,
 	}
 
 	/** Initialize valid default configuration, taking latest version */
-	public EquoBasedStepBuilder(String formatterName, Provisioner mavenProvisioner, String defaultVersion, ThrowingEx.Function<State, FormatterFunc> stateToFormatter) {
+	public EquoBasedStepBuilder(String formatterName, Provisioner mavenProvisioner, @Nullable String defaultVersion, ThrowingEx.Function<State, FormatterFunc> stateToFormatter) {
 		this.formatterName = formatterName;
 		this.mavenProvisioner = mavenProvisioner;
 		this.formatterVersion = defaultVersion;

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	static final String DEFAULT_VERSION = "3.7.1";
+	static final String DEFAULT_VERSION = "3.7.3";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021-2022 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ private DiktatStep() {}
 
 	private static final String MIN_SUPPORTED_VERSION = "1.2.1";
 
-	private static final String DEFAULT_VERSION = "1.2.4.2";
+	private static final String DEFAULT_VERSION = "1.2.5";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String MAVEN_COORDINATE = PACKAGE_DIKTAT + ":diktat-rules:";

File: lib/src/main/java/com/diffplug/spotless/java/CleanthatJavaStep.java
Patch:
@@ -40,7 +40,7 @@ public final class CleanthatJavaStep {
 	private static final String MAVEN_COORDINATE = "io.github.solven-eu.cleanthat:java";
 
 	// CleanThat changelog is available at https://github.com/solven-eu/cleanthat/blob/master/CHANGES.MD
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.8");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.13");
 
 	// prevent direct instantiation
 	private CleanthatJavaStep() {}

File: lib/src/main/java/com/diffplug/spotless/markdown/FlexmarkStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class FlexmarkStep {
 	// prevent direct instantiation
 	private FlexmarkStep() {}
 
-	private static final String DEFAULT_VERSION = "0.62.2";
+	private static final String DEFAULT_VERSION = "0.64.0";
 	private static final String NAME = "flexmark-java";
 	private static final String MAVEN_COORDINATE = "com.vladsch.flexmark:flexmark-all:";
 

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	static final String DEFAULT_VERSION = "3.7.1";
+	static final String DEFAULT_VERSION = "3.7.3";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021-2022 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ private DiktatStep() {}
 
 	private static final String MIN_SUPPORTED_VERSION = "1.2.1";
 
-	private static final String DEFAULT_VERSION = "1.2.4.2";
+	private static final String DEFAULT_VERSION = "1.2.5";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String MAVEN_COORDINATE = PACKAGE_DIKTAT + ":diktat-rules:";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GroovyExtensionTest.java
Patch:
@@ -103,7 +103,7 @@ void groovyPluginMissingCheck() throws IOException {
 
 		Throwable error = assertThrows(Throwable.class,
 				() -> gradleRunner().withArguments("spotlessApply").build());
-		assertThat(error).hasMessageContaining("must apply the groovy plugin before");
+		assertThat(error).hasMessageContaining("You must either specify 'target' manually or apply the 'groovy' plugin.");
 	}
 
 }

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -23,8 +23,8 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -211,7 +211,7 @@ public final void execute() throws MojoExecutionException {
 		List<FormatterFactory> formatterFactories = getFormatterFactories();
 		FormatterConfig config = getFormatterConfig();
 
-		Map<FormatterFactory, Supplier<Iterable<File>>> formatterFactoryToFiles = new HashMap<>();
+		Map<FormatterFactory, Supplier<Iterable<File>>> formatterFactoryToFiles = new LinkedHashMap<>();
 		for (FormatterFactory formatterFactory : formatterFactories) {
 			Supplier<Iterable<File>> filesToFormat = () -> collectFiles(formatterFactory, config);
 			formatterFactoryToFiles.put(formatterFactory, filesToFormat);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormattersHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,7 +16,7 @@
 package com.diffplug.spotless.maven;
 
 import java.io.File;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -33,7 +33,7 @@ class FormattersHolder implements AutoCloseable {
 	}
 
 	static FormattersHolder create(Map<FormatterFactory, Supplier<Iterable<File>>> formatterFactoryToFiles, FormatterConfig config) {
-		Map<Formatter, Supplier<Iterable<File>>> formatterToFiles = new HashMap<>();
+		Map<Formatter, Supplier<Iterable<File>>> formatterToFiles = new LinkedHashMap<>();
 		try {
 			for (Entry<FormatterFactory, Supplier<Iterable<File>>> entry : formatterFactoryToFiles.entrySet()) {
 				FormatterFactory formatterFactory = entry.getKey();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GroovyExtension.java
Patch:
@@ -111,7 +111,7 @@ public GrEclipseConfig withP2Mirrors(Map<String, String> mirrors) {
 	@Override
 	protected void setupTask(SpotlessTask task) {
 		if (target == null) {
-			final String message = "You must apply the groovy plugin before the spotless plugin if you are using the groovy extension.";
+			final String message = "You must either specify 'target' manually or apply the 'groovy' plugin.";
 			if (!getProject().getPlugins().hasPlugin(GroovyBasePlugin.class)) {
 				throw new GradleException(message);
 			}

File: lib/src/main/java/com/diffplug/spotless/gherkin/GherkinSimpleConfig.java
Patch:
@@ -18,6 +18,8 @@
 import java.io.Serializable;
 
 public class GherkinSimpleConfig implements Serializable {
+	private static final long serialVersionUID = 1L;
+
 	public static int defaultIndentSpaces() {
 		// https://cucumber.io/docs/gherkin/reference/
 		// Recommended indentation is 2 spaces

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GherkinExtensionTest.java
Patch:
@@ -27,7 +27,7 @@ public void defaultFormatting() throws IOException {
 				"    id 'java'",
 				"    id 'com.diffplug.spotless'",
 				"}",
-			"repositories { mavenCentral() }",
+				"repositories { mavenCentral() }",
 				"spotless {",
 				"  gherkin {",
 				"    target 'examples/**/*.feature'",

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -211,7 +212,7 @@ public final void execute() throws MojoExecutionException {
 		List<FormatterFactory> formatterFactories = getFormatterFactories();
 		FormatterConfig config = getFormatterConfig();
 
-		Map<FormatterFactory, Supplier<Iterable<File>>> formatterFactoryToFiles = new HashMap<>();
+		Map<FormatterFactory, Supplier<Iterable<File>>> formatterFactoryToFiles = new LinkedHashMap<>();
 		for (FormatterFactory formatterFactory : formatterFactories) {
 			Supplier<Iterable<File>> filesToFormat = () -> collectFiles(formatterFactory, config);
 			formatterFactoryToFiles.put(formatterFactory, filesToFormat);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormattersHolder.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.File;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -33,7 +34,7 @@ class FormattersHolder implements AutoCloseable {
 	}
 
 	static FormattersHolder create(Map<FormatterFactory, Supplier<Iterable<File>>> formatterFactoryToFiles, FormatterConfig config) {
-		Map<Formatter, Supplier<Iterable<File>>> formatterToFiles = new HashMap<>();
+		Map<Formatter, Supplier<Iterable<File>>> formatterToFiles = new LinkedHashMap<>();
 		try {
 			for (Entry<FormatterFactory, Supplier<Iterable<File>>> entry : formatterFactoryToFiles.entrySet()) {
 				FormatterFactory formatterFactory = entry.getKey();

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ConfigAvoidanceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@ void noConfigOnHelp() throws IOException {
 				"apply plugin: 'java'",
 				"spotless {",
 				"    java {",
-				"        googleJavaFormat('1.2')",
+				"        googleJavaFormat()",
 				"    }",
 				"}",
 				"",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FilePermissionsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ void spotlessApplyShouldPreservePermissions() throws IOException {
 				"spotless {",
 				"    java {",
 				"        target file('test.java')",
-				"        googleJavaFormat('1.2')",
+				"        googleJavaFormat()",
 				"    }",
 				"}");
 		setFile("test.java").toResource("java/googlejavaformat/JavaCodeUnformatted.test");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/IndependentTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ void independent() throws IOException {
 				"",
 				"def underTest = new JavaExtension(spotless)",
 				"underTest.target file('test.java')",
-				"underTest.googleJavaFormat('1.2')",
+				"underTest.googleJavaFormat()",
 				"",
 				"def independent = underTest.createIndependentApplyTask('independent')");
 		setFile("test.java").toResource("java/googlejavaformat/JavaCodeUnformatted.test");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/JavaDefaultTargetTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ void integration() throws IOException {
 				"",
 				"spotless {",
 				"    java {",
-				"        googleJavaFormat('1.2')",
+				"        googleJavaFormat()",
 				"    }",
 				"}");
 		setFile("src/main/java/test.java").toResource("java/googlejavaformat/JavaCodeUnformatted.test");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/RegisterDependenciesTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,11 +32,11 @@ void duplicateConfigs() throws IOException {
 				"spotless {",
 				"  java {",
 				"    target 'src/main/java/**/*.java'",
-				"    googleJavaFormat('1.2')",
+				"    googleJavaFormat()",
 				"  }",
 				"  format 'javaDupe', com.diffplug.gradle.spotless.JavaExtension, {",
 				"    target 'src/boop/java/**/*.java'",
-				"    googleJavaFormat('1.2')",
+				"    googleJavaFormat()",
 				"  }",
 				"}");
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/WithinBlockTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2022 DiffPlug
+ * Copyright 2020-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@ void genericFormatTest() throws IOException {
 				"spotless {",
 				"  format 'customJava', JavaExtension, {",
 				"    target '*.java'",
-				"    googleJavaFormat('1.2')",
+				"    googleJavaFormat()",
 				"  }",
 				"}");
 		setFile("test.java").toResource("java/googlejavaformat/JavaCodeUnformatted.test");
@@ -53,7 +53,7 @@ void withinBlocksTourDeForce() throws IOException {
 				"      custom 'lowercase', { str -> str.toLowerCase() }",
 				"    }",
 				"    withinBlocks 'java only', '\\n```java\\n', '\\n```\\n', JavaExtension, {",
-				"      googleJavaFormat('1.2')",
+				"      googleJavaFormat()",
 				"    }",
 				"  }",
 				"}");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenProvisionerTest.java
Patch:
@@ -33,7 +33,7 @@ void testMultipleDependenciesExcludingTransitives() throws Exception {
 	void testSingleDependencyIncludingTransitives() throws Exception {
 		writePomWithJavaSteps(
 				"<googleJavaFormat>",
-				"  <version>1.2</version>",
+				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 		assertResolveDependenciesWorks();
 	}

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/SpecificFilesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,7 +58,7 @@ private void integration(String patterns, boolean firstFormatted, boolean second
 				"  <include>src/**/java/**/*.java</include>",
 				"</includes>",
 				"<googleJavaFormat>",
-				"  <version>1.2</version>",
+				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 
 		setFile(testFile(1)).toResource(fixture(false));

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/GoogleJavaFormatTest.java
Patch:
@@ -24,7 +24,7 @@ class GoogleJavaFormatTest extends MavenIntegrationHarness {
 	void specificVersionDefaultStyle() throws Exception {
 		writePomWithJavaSteps(
 				"<googleJavaFormat>",
-				"  <version>1.2</version>",
+				"  <version>1.10.0</version>",
 				"</googleJavaFormat>");
 
 		runTest("java/googlejavaformat/JavaCodeFormatted.test");
@@ -34,7 +34,7 @@ void specificVersionDefaultStyle() throws Exception {
 	void specificVersionSpecificStyle() throws Exception {
 		writePomWithJavaSteps(
 				"<googleJavaFormat>",
-				"  <version>1.2</version>",
+				"  <version>1.10.0</version>",
 				"  <style>AOSP</style>",
 				"</googleJavaFormat>");
 
@@ -45,7 +45,7 @@ void specificVersionSpecificStyle() throws Exception {
 	void specificVersionReflowLongStrings() throws Exception {
 		writePomWithJavaSteps(
 				"<googleJavaFormat>",
-				"  <version>1.8</version>",
+				"  <version>1.10.0</version>",
 				"  <reflowLongStrings>true</reflowLongStrings>",
 				"</googleJavaFormat>");
 

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -71,7 +71,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 
 	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME)
 			.addMin(11, "1.8") // we only support google-java-format >= 1.8 due to api changes
-			.add(11, "1.15.0"); // default version
+			.add(11, "1.16.0"); // default version
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib-extra/src/groovy/java/com/diffplug/spotless/extra/glue/groovy/GrEclipseFormatterStepImpl.java
Patch:
@@ -103,7 +103,7 @@ public String format(String raw) throws Exception {
 	/**
 	 * Eclipse Groovy formatter does not signal problems by its return value, but by logging errors.
 	 */
-	private static class GroovyErrorListener implements ILogListener, IGroovyLogger {
+	private static final class GroovyErrorListener implements ILogListener, IGroovyLogger {
 		private final List<String> errors;
 
 		public GroovyErrorListener() {

File: lib-extra/src/groovy/java/com/diffplug/spotless/extra/glue/groovy/GrEclipseFormatterStepImpl.java
Patch:
@@ -42,7 +42,6 @@
 import org.eclipse.osgi.internal.location.EquinoxLocations;
 import org.eclipse.text.edits.TextEdit;
 import org.osgi.framework.Constants;
-import org.slf4j.LoggerFactory;
 
 import dev.equo.solstice.NestedJars;
 import dev.equo.solstice.ShimIdeBootstrapServices;

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -90,7 +90,6 @@ EquoBasedStepBuilder.State get() throws Exception {
 		var mavenDeps = new ArrayList<String>();
 		mavenDeps.add("dev.equo.ide:solstice:0.19.2");
 		mavenDeps.add("com.diffplug.durian:durian-swt.os:4.1.1");
-		mavenDeps.add("org.slf4j:slf4j-simple:1.7.36");
 		mavenDeps.addAll(query.getJarsOnMavenCentral());
 		classpath.addAll(mavenProvisioner.provisionWithTransitives(false, mavenDeps));
 		classpath.addAll(query.getJarsNotOnMavenCentral());

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -33,7 +33,6 @@ private GrEclipseFormatterStep() {}
 
 	private static final String NAME = "eclipse groovy formatter";
 	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "4.26");
-	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {
 		return JVM_SUPPORT.getRecommendedFormatterVersion();
@@ -86,7 +85,7 @@ private static FormatterFunc apply(EquoBasedStepBuilder.State state) throws Exce
 		JVM_SUPPORT.assertFormatterSupported(state.getSemanticVersion());
 		Class<?> formatterClazz = state.getJarState().getClassLoader().loadClass("com.diffplug.spotless.extra.glue.groovy.GrEclipseFormatterStepImpl");
 		var formatter = formatterClazz.getConstructor(Properties.class).newInstance(state.getPreferences());
-		var method = formatterClazz.getMethod(FORMATTER_METHOD, String.class);
+		var method = formatterClazz.getMethod("format", String.class);
 		return JVM_SUPPORT.suggestLaterVersionOnError(state.getSemanticVersion(),
 				input -> {
 					try {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -29,7 +29,6 @@ public class GrEclipseFormatterStepTest extends EquoResourceHarness {
 
 	public GrEclipseFormatterStepTest() {
 		super(GrEclipseFormatterStep.createBuilder(TestProvisioner.mavenCentral()), INPUT, EXPECTED);
-		System.setProperty("org.gradle.logging.level", "info");
 	}
 
 	@ParameterizedTest

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -88,7 +88,7 @@ EquoBasedStepBuilder.State get() throws Exception {
 		var query = model(formatterVersion).query(P2ClientCache.PREFER_OFFLINE, P2QueryCache.ALLOW);
 		var classpath = new ArrayList<File>();
 		var mavenDeps = new ArrayList<String>();
-		mavenDeps.add("dev.equo.ide:solstice:0.19.1");
+		mavenDeps.add("dev.equo.ide:solstice:0.19.2");
 		mavenDeps.add("com.diffplug.durian:durian-swt.os:4.1.1");
 		mavenDeps.add("org.slf4j:slf4j-simple:1.7.36");
 		mavenDeps.addAll(query.getJarsOnMavenCentral());

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,12 +23,13 @@
 import com.diffplug.spotless.TestProvisioner;
 import com.diffplug.spotless.extra.eclipse.EquoResourceHarness;
 
-class GrEclipseFormatterStepTest extends EquoResourceHarness {
+public class GrEclipseFormatterStepTest extends EquoResourceHarness {
 	private final static String INPUT = "class F{ def m(){} }";
 	private final static String EXPECTED = "class F{\n\tdef m(){}\n}";
 
 	public GrEclipseFormatterStepTest() {
 		super(GrEclipseFormatterStep.createBuilder(TestProvisioner.mavenCentral()), INPUT, EXPECTED);
+		System.setProperty("org.gradle.logging.level", "info");
 	}
 
 	@ParameterizedTest
@@ -38,6 +39,6 @@ void formatWithVersion(String version) throws Exception {
 	}
 
 	private static Stream<String> formatWithVersion() {
-		return Stream.of("4.21", GrEclipseFormatterStep.defaultVersion());
+		return Stream.of("4.18", GrEclipseFormatterStep.defaultVersion());
 	}
 }

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -187,7 +187,7 @@ public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	private String setLicenseHeaderYearsFromGitHistory;
 
 	@Parameter
-	private UpToDateChecking upToDateChecking;
+	private UpToDateChecking upToDateChecking = UpToDateChecking.enabled();
 
 	protected abstract void process(Iterable<File> files, Formatter formatter, UpToDateChecker upToDateChecker) throws MojoExecutionException;
 
@@ -373,9 +373,9 @@ private UpToDateChecker createUpToDateChecker(Iterable<Formatter> formatters) {
 		}
 		final UpToDateChecker checker;
 		if (upToDateChecking != null && upToDateChecking.isEnabled()) {
-			getLog().info("Up-to-date checking enabled");
 			checker = UpToDateChecker.forProject(project, indexFile, formatters, getLog());
 		} else {
+			getLog().info("Up-to-date checking disabled");
 			checker = UpToDateChecker.noop(project, indexFile, getLog());
 		}
 		return UpToDateChecker.wrapWithBuildContext(checker, buildContext);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -187,7 +187,7 @@ public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	private String setLicenseHeaderYearsFromGitHistory;
 
 	@Parameter
-	private UpToDateChecking upToDateChecking;
+	private UpToDateChecking upToDateChecking = UpToDateChecking.enabled();
 
 	protected abstract void process(Iterable<File> files, Formatter formatter, UpToDateChecker upToDateChecker) throws MojoExecutionException;
 
@@ -373,9 +373,9 @@ private UpToDateChecker createUpToDateChecker(Iterable<Formatter> formatters) {
 		}
 		final UpToDateChecker checker;
 		if (upToDateChecking != null && upToDateChecking.isEnabled()) {
-			getLog().info("Up-to-date checking enabled");
 			checker = UpToDateChecker.forProject(project, indexFile, formatters, getLog());
 		} else {
+			getLog().info("Up-to-date checking disabled");
 			checker = UpToDateChecker.noop(project, indexFile, getLog());
 		}
 		return UpToDateChecker.wrapWithBuildContext(checker, buildContext);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SpotlessTaskImplTest.java
Patch:
@@ -32,13 +32,13 @@ public void testThrowsMessageContainsFilename() throws Exception {
 		SpotlessTaskImpl task = Mockito.mock(SpotlessTaskImpl.class, Mockito.CALLS_REAL_METHODS);
 		Mockito.when(task.getLogger()).thenReturn(Mockito.mock(Logger.class));
 
-		File projectDir = Paths.get("unitTests","projectDir").toFile();
+		File projectDir = Paths.get("unitTests", "projectDir").toFile();
 		DirectoryProperty projectDirProperty = Mockito.mock(DirectoryProperty.class, Mockito.RETURNS_DEEP_STUBS);
 		Mockito.when(projectDirProperty.get().getAsFile()).thenReturn(projectDir);
 
 		Mockito.when(task.getProjectDir()).thenReturn(projectDirProperty);
 
-		File input = Paths.get("unitTests","projectDir", "someInput").toFile();
+		File input = Paths.get("unitTests", "projectDir", "someInput").toFile();
 		Formatter formatter = Mockito.mock(Formatter.class);
 
 		Assertions.assertThatThrownBy(() -> task.processInputFile(null, formatter, input)).hasMessageContaining(input.toString());

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -45,6 +45,7 @@
 
 /** Prefixes a license header before the package statement. */
 public final class LicenseHeaderStep {
+	public static final String DEFAULT_JAVA_HEADER_DELIMITER = "(package|import|public|class|module) ";
 	private static final Logger LOGGER = LoggerFactory.getLogger(LicenseHeaderStep.class);
 
 	public enum YearMode {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -50,9 +50,7 @@ public JavaExtension(SpotlessExtension spotless) {
 		super(spotless);
 	}
 
-	// If this constant changes, don't forget to change the similarly-named one in
-	// testlib/src/test/java/com/diffplug/spotless/generic/LicenseHeaderStepTest.java as well
-	static final String LICENSE_HEADER_DELIMITER = "package ";
+	static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public LicenseHeaderConfig licenseHeader(String licenseHeader) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/groovy/Groovy.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.project.MavenProject;
 
 import com.diffplug.common.collect.ImmutableSet;
+import com.diffplug.spotless.generic.LicenseHeaderStep;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -32,7 +33,7 @@
 public class Groovy extends FormatterFactory {
 
 	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/groovy/**/*.groovy", "src/test/groovy/**/*.groovy");
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	private static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public Set<String> defaultIncludes(MavenProject project) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/Java.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.maven.model.Build;
 import org.apache.maven.project.MavenProject;
 
+import com.diffplug.spotless.generic.LicenseHeaderStep;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -37,7 +38,7 @@
  */
 public class Java extends FormatterFactory {
 
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	private static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public Set<String> defaultIncludes(MavenProject project) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/scala/Scala.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.project.MavenProject;
 
 import com.diffplug.common.collect.ImmutableSet;
+import com.diffplug.spotless.generic.LicenseHeaderStep;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -33,7 +34,7 @@ public class Scala extends FormatterFactory {
 
 	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/scala/**/*.scala",
 			"src/test/scala/**/*.scala", "src/main/scala/**/*.sc", "src/test/scala/**/*.sc");
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	private static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public Set<String> defaultIncludes(MavenProject project) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -54,7 +54,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 				} else {
 					counter.checkedButAlreadyClean();
 				}
-			} catch (IOException e) {
+			} catch (IOException | RuntimeException e) {
 				throw new MojoExecutionException("Unable to format file " + file, e);
 			}
 

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -323,7 +323,7 @@ private String addOrUpdateLicenseHeader(String raw, File file) {
 							// fastpath where we don't need to make any changes at all
 							boolean noPadding = beforeYearIdx == 0 && afterYearIdx + afterYear.length() == contentMatcher.start(); // allows fastpath return raw
 							if (noPadding) {
-								return raw;
+								return replaceFileName(raw.substring(0, contentMatcher.start()), file) + content;
 							}
 						}
 						header = beforeYear + newYear + afterYear;

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -45,6 +45,7 @@
 
 /** Prefixes a license header before the package statement. */
 public final class LicenseHeaderStep {
+	public static final String DEFAULT_JAVA_HEADER_DELIMITER = "(package|import|public|class|module) ";
 	private static final Logger LOGGER = LoggerFactory.getLogger(LicenseHeaderStep.class);
 
 	public enum YearMode {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -50,9 +50,7 @@ public JavaExtension(SpotlessExtension spotless) {
 		super(spotless);
 	}
 
-	// If this constant changes, don't forget to change the similarly-named one in
-	// testlib/src/test/java/com/diffplug/spotless/generic/LicenseHeaderStepTest.java as well
-	static final String LICENSE_HEADER_DELIMITER = "package ";
+	static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public LicenseHeaderConfig licenseHeader(String licenseHeader) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/groovy/Groovy.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.project.MavenProject;
 
 import com.diffplug.common.collect.ImmutableSet;
+import com.diffplug.spotless.generic.LicenseHeaderStep;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -32,7 +33,7 @@
 public class Groovy extends FormatterFactory {
 
 	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/groovy/**/*.groovy", "src/test/groovy/**/*.groovy");
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	private static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public Set<String> defaultIncludes(MavenProject project) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/Java.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.maven.model.Build;
 import org.apache.maven.project.MavenProject;
 
+import com.diffplug.spotless.generic.LicenseHeaderStep;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -37,7 +38,7 @@
  */
 public class Java extends FormatterFactory {
 
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	private static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public Set<String> defaultIncludes(MavenProject project) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/scala/Scala.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.maven.project.MavenProject;
 
 import com.diffplug.common.collect.ImmutableSet;
+import com.diffplug.spotless.generic.LicenseHeaderStep;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -33,7 +34,7 @@ public class Scala extends FormatterFactory {
 
 	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/scala/**/*.scala",
 			"src/test/scala/**/*.scala", "src/main/scala/**/*.sc", "src/test/scala/**/*.sc");
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	private static final String LICENSE_HEADER_DELIMITER = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER;
 
 	@Override
 	public Set<String> defaultIncludes(MavenProject project) {

File: lib/src/main/java/com/diffplug/spotless/java/CleanthatJavaStep.java
Patch:
@@ -83,8 +83,8 @@ public static boolean defaultIncludeDraft() {
 	public static FormatterStep create(String groupArtifact,
 			String version,
 			String sourceJdkVersion,
-			List<String> excluded,
 			List<String> included,
+			List<String> excluded,
 			boolean includeDraft,
 			Provisioner provisioner) {
 		Objects.requireNonNull(groupArtifact, "groupArtifact");
@@ -94,7 +94,7 @@ public static FormatterStep create(String groupArtifact,
 		Objects.requireNonNull(version, "version");
 		Objects.requireNonNull(provisioner, "provisioner");
 		return FormatterStep.createLazy(NAME,
-				() -> new JavaRefactorerState(NAME, groupArtifact, version, sourceJdkVersion, excluded, included, includeDraft, provisioner),
+				() -> new JavaRefactorerState(NAME, groupArtifact, version, sourceJdkVersion, included, excluded, includeDraft, provisioner),
 				JavaRefactorerState::createFormat);
 	}
 
@@ -120,7 +120,7 @@ static final class JavaRefactorerState implements Serializable {
 		final boolean includeDraft;
 
 		JavaRefactorerState(String stepName, String version, Provisioner provisioner) throws IOException {
-			this(stepName, MAVEN_COORDINATE, version, defaultSourceJdk(), defaultExcludedMutators(), defaultMutators(), defaultIncludeDraft(), provisioner);
+			this(stepName, MAVEN_COORDINATE, version, defaultSourceJdk(), defaultMutators(), defaultExcludedMutators(), defaultIncludeDraft(), provisioner);
 		}
 
 		JavaRefactorerState(String stepName,

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EquoBasedStepBuilder.java
Patch:
@@ -81,6 +81,7 @@ EquoBasedStepBuilder.State get() throws Exception {
 	 * based on the state.
 	 */
 	public static class State implements Serializable {
+		private static final long serialVersionUID = 584400372246020995L;
 		final String semanticVersion;
 		final JarState jarState;
 		final FileSignature settingsFiles;

File: lib/src/main/java/com/diffplug/spotless/FeatureClassLoader.java
Patch:
@@ -62,7 +62,7 @@ class FeatureClassLoader extends URLClassLoader {
 
 	@Override
 	protected Class<?> findClass(String name) throws ClassNotFoundException {
-		if (name.startsWith("com.diffplug.spotless.glue.")) {
+		if (name.startsWith("com.diffplug.spotless.glue.") || name.startsWith("com.diffplug.spotless.extra.glue.")) {
 			String path = name.replace('.', '/') + ".class";
 			URL url = findResource(path);
 			if (url == null) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/CleanthatJavaIntegrationTest.java
Patch:
@@ -37,8 +37,8 @@ void integration() throws IOException {
 				"    }",
 				"}");
 
-		setFile("test.java").toResource("java/cleanthat/MultipleMutators.dirty.java");
+		setFile("test.java").toResource("java/cleanthat/MultipleMutators.dirty.test");
 		gradleRunner().withArguments("spotlessApply").build();
-		assertFile("test.java").sameAsResource("java/cleanthat/MultipleMutators.clean.java");
+		assertFile("test.java").sameAsResource("java/cleanthat/MultipleMutators.clean.test");
 	}
 }

File: testlib/src/main/resources/java/cleanthat/MultipleMutators.clean.java
Patch:
@@ -1,8 +1,8 @@
-package java.cleanthat;
+package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
 
 import java.util.Optional;
 
-public class MultipleMutators_clean {
+public class LiteralsFirstInComparisonsCases {
 
 	public boolean isHardcoded(String input) {
 		return "hardcoded".equals(input);

File: testlib/src/main/resources/java/cleanthat/MultipleMutators.clean.onlyLiteralsFirst.java
Patch:
@@ -1,8 +1,8 @@
-package java.cleanthat;
+package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
 
 import java.util.Optional;
 
-public class MultipleMutators_clean_onlyLiteralsFirst {
+public class LiteralsFirstInComparisonsCases {
 
 	public boolean isHardcoded(String input) {
 		return "hardcoded".equals(input);

File: testlib/src/main/resources/java/cleanthat/MultipleMutators.clean.onlyOptionalIsPresent.java
Patch:
@@ -1,8 +1,8 @@
-package java.cleanthat;
+package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
 
 import java.util.Optional;
 
-public class MultipleMutators_clean_onlyOptionalIsPresent {
+public class LiteralsFirstInComparisonsCases {
 
 	public boolean isHardcoded(String input) {
 		return input.equals("hardcoded");

File: testlib/src/main/resources/java/cleanthat/MultipleMutators.dirty.java
Patch:
@@ -1,8 +1,8 @@
-package java.cleanthat;
+package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
 
 import java.util.Optional;
 
-public class MultipleMutators_dirty {
+public class LiteralsFirstInComparisonsCases {
 
 	public boolean isHardcoded(String input) {
 		return input.equals("hardcoded");

File: lib/src/main/java/com/diffplug/spotless/npm/NodeServerLayout.java
Patch:
@@ -27,6 +27,7 @@
 class NodeServerLayout {
 
 	private static final Pattern PACKAGE_JSON_NAME_PATTERN = Pattern.compile("\"name\"\\s*:\\s*\"([^\"]+)\"");
+	static final String NODE_MODULES = "node_modules";
 
 	private final File nodeModulesDir;
 	private final File packageJsonFile;
@@ -55,7 +56,6 @@ private static String nodeModulesDirName(String packageJsonContent) {
 	}
 
 	File nodeModulesDir() {
-
 		return nodeModulesDir;
 	}
 
@@ -89,7 +89,7 @@ public boolean isLayoutPrepared() {
 	}
 
 	public boolean isNodeModulesPrepared() {
-		Path nodeModulesInstallDirPath = new File(nodeModulesDir(), "node_modules").toPath();
+		Path nodeModulesInstallDirPath = new File(nodeModulesDir(), NODE_MODULES).toPath();
 		if (!Files.isDirectory(nodeModulesInstallDirPath)) {
 			return false;
 		}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavascriptExtension.java
Patch:
@@ -108,6 +108,7 @@ public FormatterStep createStep() {
 					provisioner(),
 					project.getProjectDir(),
 					project.getBuildDir(),
+					npmModulesCacheOrNull(),
 					new NpmPathResolver(npmFileOrNull(), nodeFileOrNull(), npmrcFileOrNull(), Arrays.asList(project.getProjectDir(), project.getRootDir())),
 					eslintConfig());
 		}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/JavascriptExtensionTest.java
Patch:
@@ -178,7 +178,7 @@ void formattingUsingStyleguide(String styleguide) throws Exception {
 					"    }",
 					"}");
 			setFile("test.js").toResource(styleguidePath + "javascript-es6.dirty");
-			gradleRunner().withArguments("--stacktrace", "spotlessApply").build();
+			gradleRunner().forwardOutput().withArguments("--info", "--stacktrace", "spotlessApply").build();
 			assertFile("test.js").sameAsResource(styleguidePath + "javascript-es6.clean");
 		}
 	}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/generic/Prettier.java
Patch:
@@ -95,9 +95,10 @@ public FormatterStep newFormatterStep(FormatterStepConfig stepConfig) {
 		// create the format step
 		File baseDir = baseDir(stepConfig);
 		File buildDir = buildDir(stepConfig);
+		File cacheDir = cacheDir(stepConfig);
 		PrettierConfig prettierConfig = new PrettierConfig(configFileHandler, configInline);
 		NpmPathResolver npmPathResolver = npmPathResolver(stepConfig);
-		return PrettierFormatterStep.create(devDependencies, stepConfig.getProvisioner(), baseDir, buildDir, npmPathResolver, prettierConfig);
+		return PrettierFormatterStep.create(devDependencies, stepConfig.getProvisioner(), baseDir, buildDir, cacheDir, npmPathResolver, prettierConfig);
 	}
 
 	private static IllegalArgumentException onlyOneConfig() {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/javascript/AbstractEslint.java
Patch:
@@ -67,8 +67,9 @@ public FormatterStep newFormatterStep(FormatterStepConfig stepConfig) {
 
 		File buildDir = buildDir(stepConfig);
 		File baseDir = baseDir(stepConfig);
+		File cacheDir = cacheDir(stepConfig);
 		NpmPathResolver npmPathResolver = npmPathResolver(stepConfig);
-		return EslintFormatterStep.create(devDependencies, stepConfig.getProvisioner(), baseDir, buildDir, npmPathResolver, eslintConfig(stepConfig));
+		return EslintFormatterStep.create(devDependencies, stepConfig.getProvisioner(), baseDir, buildDir, cacheDir, npmPathResolver, eslintConfig(stepConfig));
 	}
 
 	private static IllegalArgumentException onlyOneConfig() {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/typescript/Tsfmt.java
Patch:
@@ -111,8 +111,9 @@ public FormatterStep newFormatterStep(FormatterStepConfig stepConfig) {
 
 		File buildDir = buildDir(stepConfig);
 		File baseDir = baseDir(stepConfig);
+		File cacheDir = cacheDir(stepConfig);
 		NpmPathResolver npmPathResolver = npmPathResolver(stepConfig);
-		return TsFmtFormatterStep.create(devDependencies, stepConfig.getProvisioner(), baseDir, buildDir, npmPathResolver, configFile, configInline);
+		return TsFmtFormatterStep.create(devDependencies, stepConfig.getProvisioner(), baseDir, buildDir, cacheDir, npmPathResolver, configFile, configInline);
 	}
 
 	private static IllegalArgumentException onlyOneConfig() {

File: testlib/src/test/java/com/diffplug/spotless/npm/EslintFormatterStepTest.java
Patch:
@@ -64,6 +64,7 @@ void formattingUsingRulesetsFile(String ruleSetName) throws Exception {
 					TestProvisioner.mavenCentral(),
 					projectDir(),
 					buildDir(),
+					null,
 					npmPathResolver(),
 					new EslintConfig(eslintRc, null));
 
@@ -107,6 +108,7 @@ void formattingUsingRulesetsFile(String ruleSetName) throws Exception {
 					TestProvisioner.mavenCentral(),
 					projectDir(),
 					buildDir(),
+					null,
 					npmPathResolver(),
 					new EslintTypescriptConfig(eslintRc, null, tsconfigFile));
 
@@ -164,6 +166,7 @@ void formattingUsingInlineXoConfig() throws Exception {
 					TestProvisioner.mavenCentral(),
 					projectDir(),
 					buildDir(),
+					null,
 					npmPathResolver(),
 					new EslintTypescriptConfig(null, esLintConfig, tsconfigFile));
 

File: testlib/src/test/java/com/diffplug/spotless/npm/NpmFormatterStepCommonTests.java
Patch:
@@ -56,4 +56,5 @@ protected File projectDir() throws IOException {
 		}
 		return this.projectDir;
 	}
+
 }

File: testlib/src/test/java/com/diffplug/spotless/npm/TsFmtFormatterStepTest.java
Patch:
@@ -59,6 +59,7 @@ void formattingUsingConfigFile(String formattingConfigFile) throws Exception {
 					TestProvisioner.mavenCentral(),
 					projectDir(),
 					buildDir(),
+					null,
 					npmPathResolver(),
 					TypedTsFmtConfigFile.named(configFileNameWithoutExtension, configFile),
 					Collections.emptyMap());
@@ -82,6 +83,7 @@ void formattingUsingInlineConfigWorks() throws Exception {
 					TestProvisioner.mavenCentral(),
 					projectDir(),
 					buildDir(),
+					null,
 					npmPathResolver(),
 					null,
 					inlineConfig);

File: testlib/src/main/resources/java/cleanthat/MultipleMutators_clean.java
Patch:
@@ -1,8 +1,8 @@
-package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
+package java.cleanthat;
 
 import java.util.Optional;
 
-public class LiteralsFirstInComparisonsCases {
+public class MultipleMutators_clean {
 
 	public boolean isHardcoded(String input) {
 		return "hardcoded".equals(input);

File: testlib/src/main/resources/java/cleanthat/MultipleMutators_clean_onlyLiteralsFirst.java
Patch:
@@ -1,8 +1,8 @@
-package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
+package java.cleanthat;
 
 import java.util.Optional;
 
-public class LiteralsFirstInComparisonsCases {
+public class MultipleMutators_clean_onlyLiteralsFirst {
 
 	public boolean isHardcoded(String input) {
 		return "hardcoded".equals(input);

File: testlib/src/main/resources/java/cleanthat/MultipleMutators_clean_onlyOptionalIsPresent.java
Patch:
@@ -1,8 +1,8 @@
-package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
+package java.cleanthat;
 
 import java.util.Optional;
 
-public class LiteralsFirstInComparisonsCases {
+public class MultipleMutators_clean_onlyOptionalIsPresent {
 
 	public boolean isHardcoded(String input) {
 		return input.equals("hardcoded");

File: testlib/src/main/resources/java/cleanthat/MultipleMutators_dirty.java
Patch:
@@ -1,8 +1,8 @@
-package eu.solven.cleanthat.engine.java.refactorer.cases.do_not_format_me;
+package java.cleanthat;
 
 import java.util.Optional;
 
-public class LiteralsFirstInComparisonsCases {
+public class MultipleMutators_dirty {
 
 	public boolean isHardcoded(String input) {
 		return input.equals("hardcoded");

File: testlib/src/test/java/com/diffplug/spotless/java/RemoveUnusedImportsStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: testlib/src/main/resources/java/cleanthat/MultipleMutators.clean.onlyOptionalIsPresent.java
Patch:
@@ -5,7 +5,7 @@
 public class LiteralsFirstInComparisonsCases {
 
 	public boolean isHardcoded(String input) {
-		return "hardcoded".equals(input);
+		return input.equals("hardcoded");
 	}
 
 	public boolean isPresent(Optional<?> optional) {

File: lib/src/cleanthat/java/com/diffplug/spotless/glue/java/JavaCleanthatRefactorerFunc.java
Patch:
@@ -52,7 +52,7 @@ public JavaCleanthatRefactorerFunc(String jdkVersion, List<String> included, Lis
 	}
 
 	public JavaCleanthatRefactorerFunc() {
-		this(IJdkVersionConstants.JDK_8, Arrays.asList(JavaRefactorerProperties.WILDCARD), Arrays.asList(), false);
+		this(IJdkVersionConstants.JDK_8, Arrays.asList("SafeAndConsensual"), Arrays.asList(), false);
 	}
 
 	@Override

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/CleanthatJavaIntegrationTest.java
Patch:
@@ -31,7 +31,7 @@ void integration() throws IOException {
 				"spotless {",
 				"    java {",
 				"        target file('test.java')",
-				"        cleanthat()" +
+				"        cleanthat()",
 				"          .sourceCompatibility('11')",
 				"          .addMutators(['LiteralsFirstInComparisons', 'OptionalNotEmpty'])",
 				"    }",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/CleanthatJavaIntegrationTest.java
Patch:
@@ -31,7 +31,9 @@ void integration() throws IOException {
 				"spotless {",
 				"    java {",
 				"        target file('test.java')",
-				"        cleanthat().sourceCompatibility('11')",
+				"        cleanthat()" +
+				"          .sourceCompatibility('11')",
+				"          .addMutators(['LiteralsFirstInComparisons', 'OptionalNotEmpty'])",
 				"    }",
 				"}");
 

File: lib/src/ktfmt/java/com/diffplug/spotless/glue/ktfmt/KtfmtFormatterFunc.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 DiffPlug
+ * Copyright 2022-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -78,7 +78,7 @@ private FormattingOptions createFormattingOptions() {
 					formattingOptions.getStyle(),
 					ktfmtFormattingOptions.getMaxWidth().orElse(formattingOptions.getMaxWidth()),
 					ktfmtFormattingOptions.getBlockIndent().orElse(formattingOptions.getBlockIndent()),
-					ktfmtFormattingOptions.getContinuationIndent().orElse(formattingOptions.getBlockIndent()),
+					ktfmtFormattingOptions.getContinuationIndent().orElse(formattingOptions.getContinuationIndent()),
 					ktfmtFormattingOptions.getRemoveUnusedImport().orElse(formattingOptions.getRemoveUnusedImports()),
 					formattingOptions.getDebuggingPrintOpsAfterFormatting());
 		}

File: lib/src/main/java/com/diffplug/spotless/json/JacksonJsonStep.java
Patch:
@@ -33,7 +33,7 @@
 public class JacksonJsonStep {
 	static final String MAVEN_COORDINATE = "com.fasterxml.jackson.core:jackson-databind:";
 	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
-	static final String DEFAULT_VERSION = "2.14.1";
+	static final String DEFAULT_VERSION = "2.14.2";
 
 	private JacksonJsonStep() {}
 

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.42";
+	private static final String DEFAULT_VERSION = "0.43";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/npm/NodeServerLayout.java
Patch:
@@ -29,8 +29,8 @@ class NodeServerLayout {
 	private final File serveJsFile;
 	private final File npmrcFile;
 
-	NodeServerLayout(File buildDir, String stepName) {
-		this.nodeModulesDir = new File(buildDir, "spotless-node-modules-" + stepName);
+	NodeServerLayout(File buildDir, String stepName, String stepSuffix) {
+		this.nodeModulesDir = new File(buildDir, String.format("spotless-node-modules-%s-%s", stepName, stepSuffix));
 		this.packageJsonFile = new File(nodeModulesDir, "package.json");
 		this.serveJsFile = new File(nodeModulesDir, "serve.js");
 		this.npmrcFile = new File(nodeModulesDir, ".npmrc");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/CleanthatJavaIntegrationTest.java
Patch:
@@ -31,7 +31,7 @@ void integration() throws IOException {
 				"spotless {",
 				"    java {",
 				"        target file('test.java')",
-				"        cleanthat().sourceJdk('11')",
+				"        cleanthat().sourceCompatibility('11')",
 				"    }",
 				"}");
 

File: testlib/src/main/resources/java/cleanthat/MultipleMutators.clean.java
Patch:
@@ -5,7 +5,7 @@
 public class LiteralsFirstInComparisonsCases {
 
 	public boolean isHardcoded(String input) {
-		return input.equals("hardcoded");
+		return "hardcoded".equals(input);
 	}
 
 	public boolean isPresent(Optional<?> optional) {

File: lib/src/main/java/com/diffplug/spotless/java/CleanthatJavaStep.java
Patch:
@@ -39,7 +39,7 @@ public final class CleanthatJavaStep {
 	private static final String NAME = "cleanthat";
 	private static final String MAVEN_COORDINATE = "io.github.solven-eu.cleanthat:java";
 
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.0");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(11, "2.1");
 
 	// prevent direct instantiation
 	private CleanthatJavaStep() {}

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/CleanthatJavaRefactorerTest.java
Patch:
@@ -70,7 +70,7 @@ void testIncludeOnlyLiteralsFirstInComparisons() throws Exception {
 	private void runTest(String dirtyPath, String cleanPath) throws Exception {
 		String path = "src/main/java/test.java";
 		setFile(path).toResource("java/cleanthat/" + dirtyPath);
-		Assertions.assertThat(mavenRunner().withArguments("spotless:apply -X").runNoError().stdOutUtf8()).isEmpty();
+		Assertions.assertThat(mavenRunner().withArguments("spotless:apply").withRemoteDebug(21654).runNoError().stdOutUtf8()).doesNotContain("[ERROR]");
 		assertFile(path).sameAsResource("java/cleanthat/" + cleanPath);
 	}
 }

File: lib/src/ktfmt/java/com/diffplug/spotless/glue/ktfmt/KtfmtFormatterFunc.java
Patch:
@@ -78,7 +78,7 @@ private FormattingOptions createFormattingOptions() {
 					formattingOptions.getStyle(),
 					ktfmtFormattingOptions.getMaxWidth().orElse(formattingOptions.getMaxWidth()),
 					ktfmtFormattingOptions.getBlockIndent().orElse(formattingOptions.getBlockIndent()),
-					ktfmtFormattingOptions.getContinuationIndent().orElse(formattingOptions.getBlockIndent()),
+					ktfmtFormattingOptions.getContinuationIndent().orElse(formattingOptions.getContinuationIndent()),
 					ktfmtFormattingOptions.getRemoveUnusedImport().orElse(formattingOptions.getRemoveUnusedImports()),
 					formattingOptions.getDebuggingPrintOpsAfterFormatting());
 		}

File: lib/src/main/java/com/diffplug/spotless/json/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @ParametersAreNonnullByDefault
 @ReturnValuesAreNonnullByDefault
-package com.diffplug.spotless.extra.json.java;
+package com.diffplug.spotless.json;
 
 import javax.annotation.ParametersAreNonnullByDefault;
 

File: lib/src/main/java/com/diffplug/spotless/java/ModuleHelper.java
Patch:
@@ -75,7 +75,7 @@ public static synchronized void doOpenInternalPackagesIfRequired() {
 				}
 			}
 		} catch (Throwable e) {
-			LOGGER.error("WARNING: Failed to check for unavailable JDK packages.", e);
+			LOGGER.error("WARNING: Failed to check for available JDK packages.", e);
 		}
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -184,6 +184,7 @@ String formatName() {
 
 	Formatter buildFormatter() {
 		return Formatter.builder()
+				.name(formatName())
 				.lineEndingsPolicy(lineEndingsPolicy.get())
 				.encoding(Charset.forName(encoding))
 				.rootDir(getProjectDir().get().getAsFile().toPath())

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -320,7 +320,7 @@ private static String withTrailingSeparator(String path) {
 
 	private Set<String> getIncludes(FormatterFactory formatterFactory) {
 		Set<String> configuredIncludes = formatterFactory.includes();
-		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes() : configuredIncludes;
+		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes(project) : configuredIncludes;
 		if (includes.isEmpty()) {
 			throw new PluginException("You must specify some files to include, such as '<includes><include>src/**/*.blah</include></includes>'");
 		}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/javascript/Javascript.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -27,7 +29,7 @@
  */
 public class Javascript extends FormatterFactory {
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Json.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -27,7 +29,7 @@ public class Json extends FormatterFactory {
 	public static final int DEFAULT_INDENTATION = 4;
 
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/typescript/Typescript.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -27,7 +29,7 @@
  */
 public class Typescript extends FormatterFactory {
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/yaml/Yaml.java
Patch:
@@ -18,14 +18,16 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
  * A {@link FormatterFactory} implementation that corresponds to {@code <yaml>...</yaml>} configuration element.
  */
 public class Yaml extends FormatterFactory {
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MultiModuleProjectTest.java
Patch:
@@ -145,7 +145,7 @@ private void createRootPom() throws IOException {
 			modulesList.addAll(subProjects.keySet());
 			String[] modules = modulesList.toArray(new String[0]);
 
-			Map<String, Object> rootPomParams = buildPomXmlParams(null, null, configuration, modules, null, null);
+			Map<String, Object> rootPomParams = buildPomXmlParams(null, null, null, configuration, modules, null, null);
 			setFile("pom.xml").toContent(createPomXmlContent("/multi-module/pom-parent.xml.mustache", rootPomParams));
 		}
 

File: testlib/src/main/java/com/diffplug/spotless/StepHarnessWithFile.java
Patch:
@@ -38,6 +38,7 @@ private StepHarnessWithFile(ResourceHarness harness, Formatter formatter) {
 	/** Creates a harness for testing steps which do depend on the file. */
 	public static StepHarnessWithFile forStep(ResourceHarness harness, FormatterStep step) {
 		return new StepHarnessWithFile(harness, Formatter.builder()
+				.name(step.getName())
 				.encoding(StandardCharsets.UTF_8)
 				.lineEndingsPolicy(LineEnding.UNIX.createPolicy())
 				.steps(Collections.singletonList(step))

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -320,7 +320,7 @@ private static String withTrailingSeparator(String path) {
 
 	private Set<String> getIncludes(FormatterFactory formatterFactory) {
 		Set<String> configuredIncludes = formatterFactory.includes();
-		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes() : configuredIncludes;
+		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes(project) : configuredIncludes;
 		if (includes.isEmpty()) {
 			throw new PluginException("You must specify some files to include, such as '<includes><include>src/**/*.blah</include></includes>'");
 		}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterFactory.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.maven.plugins.annotations.Parameter;
+import org.apache.maven.project.MavenProject;
 
 import com.diffplug.common.collect.Sets;
 import com.diffplug.spotless.FormatExceptionPolicyStrict;
@@ -71,7 +72,7 @@ public abstract class FormatterFactory {
 
 	private ToggleOffOn toggle;
 
-	public abstract Set<String> defaultIncludes();
+	public abstract Set<String> defaultIncludes(MavenProject project);
 
 	public abstract String licenseHeaderDelimiter();
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/javascript/Javascript.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -27,7 +29,7 @@
  */
 public class Javascript extends FormatterFactory {
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Json.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -27,7 +29,7 @@ public class Json extends FormatterFactory {
 	public static final int DEFAULT_INDENTATION = 4;
 
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/typescript/Typescript.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -27,7 +29,7 @@
  */
 public class Typescript extends FormatterFactory {
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/yaml/Yaml.java
Patch:
@@ -18,14 +18,16 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.maven.project.MavenProject;
+
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
  * A {@link FormatterFactory} implementation that corresponds to {@code <yaml>...</yaml>} configuration element.
  */
 public class Yaml extends FormatterFactory {
 	@Override
-	public Set<String> defaultIncludes() {
+	public Set<String> defaultIncludes(MavenProject project) {
 		return Collections.emptySet();
 	}
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MultiModuleProjectTest.java
Patch:
@@ -145,7 +145,7 @@ private void createRootPom() throws IOException {
 			modulesList.addAll(subProjects.keySet());
 			String[] modules = modulesList.toArray(new String[0]);
 
-			Map<String, Object> rootPomParams = buildPomXmlParams(null, null, configuration, modules, null, null);
+			Map<String, Object> rootPomParams = buildPomXmlParams(null, null, null, configuration, modules, null, null);
 			setFile("pom.xml").toContent(createPomXmlContent("/multi-module/pom-parent.xml.mustache", rootPomParams));
 		}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -66,7 +66,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 			getLog().info(String.format("Spotless.%s is keeping %s files clean - %s were changed to be clean, %s were already clean, %s were skipped because caching determined they were already clean",
 					formatter.getName(), counter.getTotal(), counter.getCleaned(), counter.getCheckedButAlreadyClean(), counter.getSkippedAsCleanCache()));
 		} else {
-			getLog().warn(String.format("Spotless.%s has no target files. Examine your `<includes>`: https://github.com/diffplug/spotless/tree/main/plugin-maven#quickstart", formatter.getName()));
+			getLog().debug(String.format("Spotless.%s has no target files. Examine your `<includes>`: https://github.com/diffplug/spotless/tree/main/plugin-maven#quickstart", formatter.getName()));
 		}
 	}
 }

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -66,7 +66,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 			getLog().info(String.format("Spotless.%s is keeping %s files clean - %s were changed to be clean, %s were already clean, %s were skipped because caching determined they were already clean",
 					formatter.getName(), counter.getTotal(), counter.getCleaned(), counter.getCheckedButAlreadyClean(), counter.getSkippedAsCleanCache()));
 		} else {
-			getLog().warn(String.format("Spotless.%s has no target files. Examine your `<includes>`: https://github.com/diffplug/spotless/tree/main/plugin-maven#quickstart", formatter.getName()));
+			getLog().debug(String.format("Spotless.%s has no target files. Examine your `<includes>`: https://github.com/diffplug/spotless/tree/main/plugin-maven#quickstart", formatter.getName()));
 		}
 	}
 }

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -70,8 +70,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 			getLog().info(String.format("Spotless.%s is keeping %s files clean - %s were changed to be clean, %s were already clean, %s were skipped because caching determined they were already clean",
 					formatter.getName(), totalProcessed, cleaned, checkedButAlreadyClean, skippedAsCleanCache));
 		} else {
-			getLog().debug(String.format("Spotless.%s is not considering a single file",
-					formatter.getName()));
+			getLog().warn(String.format("Spotless.%s has no target files. Examine your `<includes>`: https://github.com/diffplug/spotless/tree/main/plugin-maven#quickstart", formatter.getName()));
 		}
 	}
 }

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -69,6 +69,9 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 		if (totalProcessed > 0) {
 			getLog().info(String.format("Spotless.%s is keeping %s files clean - %s were changed to be clean, %s were already clean, %s were skipped because caching determined they were already clean",
 					formatter.getName(), totalProcessed, cleaned, checkedButAlreadyClean, skippedAsCleanCache));
+		} else {
+			getLog().debug(String.format("Spotless.%s is not considering a single file",
+					formatter.getName()));
 		}
 	}
 }

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/SpotlessEclipseFramework.java
Patch:
@@ -61,7 +61,7 @@ public enum DefaultBundles {
 		REGISTRY(org.eclipse.core.internal.registry.osgi.Activator.class),
 		/** Eclipse preferences always check whether this bundle has been activated before preference are set.*/
 		PREFERENCES(org.eclipse.core.internal.preferences.Activator.class),
-		/** The common runtime provides provides common services, like log and service adapters registry. */
+		/** The common runtime provides common services, like log and service adapters registry. */
 		COMMON(org.eclipse.core.internal.runtime.Activator.class);
 
 		private final Class<? extends BundleActivator> activatorClass;

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/osgi/BundleController.java
Patch:
@@ -76,7 +76,7 @@ public BundleController() throws BundleException {
 		services.add(org.osgi.service.packageadmin.PackageAdmin.class, bundleLookup);
 		services.add(FrameworkWiring.class, bundleLookup);
 
-		//Redirect framework activator requests to the the org.eclipse.osgi bundle to this instance.
+		//Redirect framework activator requests to the org.eclipse.osgi bundle to this instance.
 		bundles.add(new SimpleBundle(systemBundle, ECLIPSE_LAUNCHER_SYMBOLIC_NAME, Bundle.ACTIVE));
 		FrameworkBundleRegistry.initialize(this);
 	}

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/PluginPreferences.java
Patch:
@@ -33,7 +33,7 @@
 import org.eclipse.wst.xml.core.internal.catalog.provisional.ICatalog;
 
 /**
- * The plugin preference configuration of most WTP formatters is accomplished via the the
+ * The plugin preference configuration of most WTP formatters is accomplished via the
  * globabl Eclipse preference lookup.
  * Spotless allows different formatter configurations per sub-projects.
  * Fortunately most formatters only perform a lookup on instantiation and not afterwards.

File: lib/src/main/java/com/diffplug/spotless/FormatterFunc.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -127,7 +127,7 @@ public String apply(String unix, File file) throws Exception {
 
 				@Override
 				public String apply(String unix) throws Exception {
-					return apply(unix, FormatterStepImpl.SENTINEL);
+					return apply(unix, Formatter.NO_FILE_SENTINEL);
 				}
 			};
 		}
@@ -156,7 +156,7 @@ default String apply(String unix, File file) throws Exception {
 
 		@Override
 		default String apply(String unix) throws Exception {
-			return apply(unix, FormatterStepImpl.SENTINEL);
+			return apply(unix, Formatter.NO_FILE_SENTINEL);
 		}
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,8 +37,8 @@ public interface FormatterStep extends Serializable {
 	 * @param rawUnix
 	 *            the content to format, guaranteed to have unix-style newlines ('\n'); never null
 	 * @param file
-	 *            the file which {@code rawUnix} was obtained from; never null. Pass an empty file using
-	 *            {@code new File("")} if and only if no file is actually associated with {@code rawUnix}
+	 *            the file which {@code rawUnix} was obtained from; never null. Pass the reference
+	 *            {@link Formatter#NO_FILE_SENTINEL} if and only if no file is actually associated with {@code rawUnix}
 	 * @return the formatted content, guaranteed to only have unix-style newlines; may return null
 	 *         if the formatter step doesn't have any changes to make
 	 * @throws Exception if the formatter step experiences a problem

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -236,7 +236,7 @@ public static DirtyState calculateDirtyState(Formatter formatter, File file, byt
 
 	/**
 	 * The clean/dirty state of a single file.  Intended use:
-	 * - {@link #isClean()} means that the file is is clean, and there's nothing else to say
+	 * - {@link #isClean()} means that the file is clean, and there's nothing else to say
 	 * - {@link #didNotConverge()} means that we were unable to determine a clean state
 	 * - once you've tested the above conditions and you know that it's a dirty file with a converged state,
 	 *   then you can call {@link #writeCanonicalTo(OutputStream)} to get the canonical form of the given file.

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -29,7 +29,7 @@ private PalantirJavaFormatStep() {}
 
 	private static final String NAME = "palantir-java-format";
 	private static final String MAVEN_COORDINATE = "com.palantir.javaformat:palantir-java-format:";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.10.0");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.28.0");
 
 	/** Creates a step which formats everything - code, import order, and unused imports. */
 	public static FormatterStep create(Provisioner provisioner) {

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -32,7 +32,7 @@ private DiktatStep() {}
 
 	private static final String MIN_SUPPORTED_VERSION = "1.2.1";
 
-	private static final String DEFAULT_VERSION = "1.2.3";
+	private static final String DEFAULT_VERSION = "1.2.4.2";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String MAVEN_COORDINATE = PACKAGE_DIKTAT + ":diktat-rules:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.39";
+	private static final String DEFAULT_VERSION = "0.42";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	private static final String DEFAULT_VERSION = "3.5.9";
+	static final String DEFAULT_VERSION = "3.7.1";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -118,6 +118,8 @@ private static Provisioner forConfigurationContainer(Project project, Configurat
 						.forEach(config.getDependencies()::add);
 				config.setDescription(mavenCoords.toString());
 				config.setTransitive(withTransitives);
+				config.setCanBeConsumed(false);
+				config.setVisible(false);
 				config.attributes(attr -> {
 					attr.attribute(Bundling.BUNDLING_ATTRIBUTE, project.getObjects().named(Bundling.class, Bundling.EXTERNAL));
 				});

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,6 +45,7 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 				PaddedCell.DirtyState dirtyState = PaddedCell.calculateDirtyState(formatter, file);
 				if (!dirtyState.isClean() && !dirtyState.didNotConverge()) {
 					dirtyState.writeCanonicalTo(file);
+					buildContext.refresh(file);
 				}
 			} catch (IOException e) {
 				throw new MojoExecutionException("Unable to format file " + file, e);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/FileIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ static FileIndex read(FileIndexConfig config, Log log) {
 			PluginFingerprint computedFingerprint = config.getPluginFingerprint();
 			PluginFingerprint storedFingerprint = PluginFingerprint.from(firstLine);
 			if (!computedFingerprint.equals(storedFingerprint)) {
-				log.info("Fingerprint mismatch in the index file. Fallback to an empty index");
+				log.info("Index file corresponds to a different configuration of the plugin. Either the plugin version or its configuration has changed. Fallback to an empty index");
 				return emptyIndexFallback(config);
 			} else {
 				Content content = readIndexContent(reader, config.getProjectDir(), log);

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/incremental/FileIndexTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ void readFallsBackToEmptyIndexOnFingerprintMismatch() throws Exception {
 		FileIndex index = FileIndex.read(config, log);
 
 		assertThat(index.size()).isZero();
-		verify(log).info("Fingerprint mismatch in the index file. Fallback to an empty index");
+		verify(log).info("Index file corresponds to a different configuration of the plugin. Either the plugin version or its configuration has changed. Fallback to an empty index");
 	}
 
 	@Test

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/markdown/FlexmarkMavenTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,8 +26,7 @@ public void testFlexmarkWithDefaultConfig() throws Exception {
 		writePomWithMarkdownSteps("<flexmark />");
 
 		setFile("markdown_test.md").toResource("markdown/flexmark/FlexmarkUnformatted.md");
-		mavenRunner().withArguments("spotless:apply").runNoError().error();
+		mavenRunner().withArguments("spotless:apply").runNoError();
 		assertFile("markdown_test.md").sameAsResource("markdown/flexmark/FlexmarkFormatted.md");
 	}
-
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/pom/SortPomMavenTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@ public void testSortPomWithDefaultConfig() throws Exception {
 		writePomWithPomSteps("<sortPom/>");
 
 		setFile("pom_test.xml").toResource("pom/pom_dirty.xml");
-		mavenRunner().withArguments("spotless:apply").runNoError().error();
+		mavenRunner().withArguments("spotless:apply").runNoError();
 		assertFile("pom_test.xml").sameAsResource("pom/pom_clean_default.xml");
 	}
 }

File: testlib/src/test/java/com/diffplug/spotless/json/JsonFormatterStepCommonTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 DiffPlug
+ * Copyright 2022-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -95,10 +95,9 @@ protected StepHarness getStepHarness() {
 		return StepHarness.forStep(createFormatterStep(INDENT, TestProvisioner.mavenCentral()));
 	}
 
-	protected void doWithResource(String name) throws Exception {
+	protected void doWithResource(String name) {
 		String before = String.format("json/%sBefore.json", name);
 		String after = String.format("json/%sAfter.json", name);
 		getStepHarness().testResource(before, after);
 	}
-
 }

File: testlib/src/test/java/com/diffplug/spotless/npm/TsFmtFormatterStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,6 +57,7 @@ void formattingUsingConfigFile(String formattingConfigFile) throws Exception {
 			final FormatterStep formatterStep = TsFmtFormatterStep.create(
 					TsFmtFormatterStep.defaultDevDependencies(),
 					TestProvisioner.mavenCentral(),
+					projectDir(),
 					buildDir(),
 					npmPathResolver(),
 					TypedTsFmtConfigFile.named(configFileNameWithoutExtension, configFile),
@@ -79,6 +80,7 @@ void formattingUsingInlineConfigWorks() throws Exception {
 			final FormatterStep formatterStep = TsFmtFormatterStep.create(
 					TsFmtFormatterStep.defaultDevDependencies(),
 					TestProvisioner.mavenCentral(),
+					projectDir(),
 					buildDir(),
 					npmPathResolver(),
 					null,

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -290,6 +290,6 @@ public void close() {
 		}
 	}
 
-	/** This Sentinel reference may be used to  Formatter requires a File, while there is no actual File to format */
+	/** This Sentinel reference may be used to pass string content to a Formatter or FormatterStep when there is no actual File to format */
 	public static final File NO_FILE_SENTINEL = new File("NO_FILE_SENTINEL");
 }

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -38,7 +38,7 @@ public interface FormatterStep extends Serializable {
 	 *            the content to format, guaranteed to have unix-style newlines ('\n'); never null
 	 * @param file
 	 *            the file which {@code rawUnix} was obtained from; never null. Pass the reference
-	 *            {@code FormatterStepImpl#SENTINEL} if and only if no file is actually associated with {@code rawUnix}
+	 *            {@link Formatter#NO_FILE_SENTINEL} if and only if no file is actually associated with {@code rawUnix}
 	 * @return the formatted content, guaranteed to only have unix-style newlines; may return null
 	 *         if the formatter step doesn't have any changes to make
 	 * @throws Exception if the formatter step experiences a problem

File: testlib/src/test/java/com/diffplug/spotless/FormatterTest.java
Patch:
@@ -142,7 +142,7 @@ public void testExceptionWithSentinelNoFileOnDisk() throws Exception {
 				.exceptionPolicy(exceptionPolicy)
 				.build();
 
-		formatter.compute("someFileContent", Formatter.SENTINEL_NO_FILE_ON_DISK);
+		formatter.compute("someFileContent", FormatterStepImpl.SENTINEL);
 	}
 
 	// rootDir may be a path not from the default FileSystem

File: lib/src/main/java/com/diffplug/spotless/FormatterFunc.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	private static final String DEFAULT_VERSION = "3.6.1";
+	static final String DEFAULT_VERSION = "3.7.1";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: testlib/src/test/java/com/diffplug/spotless/scala/ScalaFmtStepTest.java
Patch:
@@ -30,13 +30,13 @@
 class ScalaFmtStepTest extends ResourceHarness {
 	@Test
 	void behaviorDefaultConfig() {
-		StepHarness.forStep(ScalaFmtStep.create("3.0.0", TestProvisioner.mavenCentral(), null))
+		StepHarness.forStep(ScalaFmtStep.create(TestProvisioner.mavenCentral()))
 				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basic.clean_3.0.0");
 	}
 
 	@Test
 	void behaviorCustomConfig() {
-		StepHarness.forStep(ScalaFmtStep.create("3.0.0", TestProvisioner.mavenCentral(), createTestFile("scala/scalafmt/scalafmt.conf")))
+		StepHarness.forStep(ScalaFmtStep.create(ScalaFmtStep.DEFAULT_VERSION, TestProvisioner.mavenCentral(), createTestFile("scala/scalafmt/scalafmt.conf")))
 				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basic.cleanWithCustomConf_3.0.0");
 	}
 

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	private static final String DEFAULT_VERSION = "3.6.1";
+	static final String DEFAULT_VERSION = "3.7.1";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: testlib/src/test/java/com/diffplug/spotless/scala/ScalaFmtStepTest.java
Patch:
@@ -30,13 +30,13 @@
 class ScalaFmtStepTest extends ResourceHarness {
 	@Test
 	void behaviorDefaultConfig() {
-		StepHarness.forStep(ScalaFmtStep.create("3.0.0", TestProvisioner.mavenCentral(), null))
+		StepHarness.forStep(ScalaFmtStep.create(TestProvisioner.mavenCentral()))
 				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basic.clean_3.0.0");
 	}
 
 	@Test
 	void behaviorCustomConfig() {
-		StepHarness.forStep(ScalaFmtStep.create("3.0.0", TestProvisioner.mavenCentral(), createTestFile("scala/scalafmt/scalafmt.conf")))
+		StepHarness.forStep(ScalaFmtStep.create(ScalaFmtStep.DEFAULT_VERSION, TestProvisioner.mavenCentral(), createTestFile("scala/scalafmt/scalafmt.conf")))
 				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basic.cleanWithCustomConf_3.0.0");
 	}
 

File: lib/src/main/java/com/diffplug/spotless/npm/NpmFormatterStepStateBase.java
Patch:
@@ -94,7 +94,7 @@ protected void assertNodeServerDirReady() throws IOException {
 	}
 
 	protected boolean needsPrepareNodeServer() {
-		return this.nodeServerLayout.isNodeModulesPrepared();
+		return !this.nodeServerLayout.isNodeModulesPrepared();
 	}
 
 	protected boolean needsPrepareNodeServerLayout() {

File: lib/src/main/java/com/diffplug/spotless/npm/EslintFormatterStep.java
Patch:
@@ -39,6 +39,8 @@
 import com.diffplug.spotless.ThrowingEx;
 import com.diffplug.spotless.npm.EslintRestService.FormatOption;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public class EslintFormatterStep {
 
 	private static final Logger logger = LoggerFactory.getLogger(EslintFormatterStep.class);
@@ -83,6 +85,7 @@ private static class State extends NpmFormatterStepStateBase implements Serializ
 		private static final long serialVersionUID = -539537027004745812L;
 		private final EslintConfig origEslintConfig;
 
+		@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 		private transient EslintConfig eslintConfigInUse;
 
 		State(String stepName, Map<String, String> devDependencies, File projectDir, File buildDir, NpmPathResolver npmPathResolver, EslintConfig eslintConfig) throws IOException {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/TypescriptExtension.java
Patch:
@@ -166,7 +166,7 @@ protected FormatterStep createStep() {
 
 		private void fixParserToTypescript() {
 			if (this.prettierConfig == null) {
-				this.prettierConfig = Collections.singletonMap("parser", "typescript");
+				this.prettierConfig = new TreeMap<>(Collections.singletonMap("parser", "typescript"));
 			} else {
 				final Object replaced = this.prettierConfig.put("parser", "typescript");
 				if (replaced != null) {

File: lib/src/compatKtLint0Dot48Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot48Dot0Adapter.java
Patch:
@@ -140,7 +140,7 @@ private static EditorConfigOverride createEditorConfigOverride(final List<Rule>
 						String[] parts = entry.getKey().substring(7).split("_", 2);
 						if (parts.length == 1) {
 							// convert ktlint_{ruleset} to {ruleset}
-							String qualifiedRuleId = parts[0];
+							String qualifiedRuleId = parts[0] + ":";
 							property = RuleExecutionEditorConfigPropertyKt.createRuleSetExecutionEditorConfigProperty(qualifiedRuleId);
 						} else {
 							// convert ktlint_{ruleset}_{rulename} to {ruleset}:{rulename}

File: lib/src/testCompatKtLint0Dot48Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot48Dot0AdapterTest.java
Patch:
@@ -55,6 +55,8 @@ public void testEditorConfigCanDisable(@TempDir Path path) throws IOException {
 		Map<String, Object> editorConfigOverrideMap = new HashMap<>();
 		editorConfigOverrideMap.put("indent_style", "tab");
 		editorConfigOverrideMap.put("ktlint_standard_no-semi", "disabled");
+		// ktlint_filename is an invalid rule in ktlint 0.48.0
+		editorConfigOverrideMap.put("ktlint_filename", "disabled");
 
 		String formatted = ktLintCompat0Dot48Dot0Adapter.format(text, filePath, false, false, null, userData, editorConfigOverrideMap);
 		assertEquals("class fails_no_semicolons {\n\tval i = 0;\n}\n", formatted);

File: lib/src/main/java/com/diffplug/spotless/RingBufferByteArrayOutputStream.java
Patch:
@@ -20,6 +20,8 @@
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 class RingBufferByteArrayOutputStream extends ByteArrayOutputStream {
 
 	private final int limit;
@@ -113,6 +115,7 @@ public synchronized byte[] toByteArray() {
 		return result;
 	}
 
+	@SuppressFBWarnings(value = "DM_DEFAULT_ENCODING", justification = "We want to use the default encoding here since this is contract on ByteArrayOutputStream")
 	@Override
 	public synchronized String toString() {
 		if (!isOverLimit) {

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierMissingParserException.java
Patch:
@@ -92,7 +92,8 @@ private static String recommendPlugin(File file) {
 		return "A good candidate for file '" + file + "' is '" + pluginName + "\n"
 				+ "See if you can find it on <https://prettier.io/docs/en/plugins.html#official-plugins>\n"
 				+ "or search on npmjs.com for a plugin matching that name: "
-				+ String.format("<https://www.npmjs.com/search?ranking=popularity&q=%s>\n\n", pluginName)
+				+ String.format("<https://www.npmjs.com/search?ranking=popularity&q=%s>", pluginName)
+				+ "\n\n"
 				+ "For instructions on how to include plugins for prettier in spotless see our documentation:\n"
 				+ "- for gradle <https://github.com/diffplug/spotless/tree/main/plugin-gradle#prettier-plugins>\n"
 				+ "- for maven <https://github.com/diffplug/spotless/tree/main/plugin-maven#prettier-plugins>";

File: lib/src/gson/java/com/diffplug/spotless/glue/gson/GsonFormatterFunc.java
Patch:
@@ -74,7 +74,7 @@ public String apply(String inputString) {
 
 	private JsonElement sortByKeys(JsonObject jsonObject) {
 		JsonObject result = new JsonObject();
-		result.keySet().stream().sorted()
+		jsonObject.keySet().stream().sorted()
 				.forEach(key -> {
 					JsonElement element = jsonObject.get(key);
 					if (element.isJsonObject()) {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/npm/NpmFrontendMavenPlugin.java
Patch:
@@ -61,6 +61,6 @@ public static String installNpmMavenGoal() {
 	}
 
 	public static String installedNpmPath() {
-		return String.format("%s/node/npm", INSTALL_DIRECTORY);
+		return String.format("%s/node/npm%s", INSTALL_DIRECTORY, System.getProperty("os.name").toLowerCase().contains("win") ? ".cmd" : "");
 	}
 }

File: lib/src/jackson/java/com/diffplug/spotless/glue/yaml/JacksonYamlFormatterFunc.java
Patch:
@@ -24,7 +24,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.node.ContainerNode;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactoryBuilder;
 import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JsonExtension.java
Patch:
@@ -131,7 +131,7 @@ public JacksonJsonGradleConfig(FormatExtension formatExtension) {
 		}
 
 		/**
-		 * @Refers to com.fasterxml.jackson.core.JsonGenerator.Feature
+		 * Refers to com.fasterxml.jackson.core.JsonGenerator.Feature
 		 */
 		public AJacksonGradleConfig jsonFeature(String feature, boolean toggle) {
 			this.jacksonConfig.appendJsonFeatureToToggle(Collections.singletonMap(feature, toggle));

File: lib/src/jackson/java/com/diffplug/spotless/glue/json/AJacksonFormatterFunc.java
Patch:
@@ -55,7 +55,7 @@ protected String format(ObjectMapper objectMapper, String input) throws IllegalA
 
 			return output;
 		} catch (JsonProcessingException e) {
-			throw new AssertionError("Unable to format. input='" + input + "'", e);
+			throw new IllegalArgumentException("Unable to format. input='" + input + "'", e);
 		}
 	}
 

File: lib/src/main/java/com/diffplug/spotless/json/JsonSimpleStep.java
Patch:
@@ -81,16 +81,16 @@ FormatterFunc toFormatter() {
 					return format(arrayConstructor, arrayToString, s);
 				}
 
-				throw new AssertionError(String.format("Unable to determine JSON type, expected a '{' or '[' but found '%s'", first));
+				throw new IllegalArgumentException(String.format("Unable to determine JSON type, expected a '{' or '[' but found '%s'", first));
 			};
 		}
 
 		private String format(Constructor<?> constructor, Method toString, String input) throws Exception {
 			try {
 				Object parsed = constructor.newInstance(input);
 				return toString.invoke(parsed, indentSpaces) + "\n";
-			} catch (InvocationTargetException ex) {
-				throw new AssertionError("Unable to format JSON", ex.getCause());
+			} catch (InvocationTargetException e) {
+				throw new IllegalArgumentException("Unable to format JSON", e);
 			}
 		}
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -196,7 +196,7 @@ public void json(Action<JsonExtension> closure) {
 	/** Configures the special YAML-specific extension. */
 	public void yaml(Action<YamlExtension> closure) {
 		requireNonNull(closure);
-		format(JsonExtension.NAME, YamlExtension.class, closure);
+		format(YamlExtension.NAME, YamlExtension.class, closure);
 	}
 
 	/** Configures a custom extension. */

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/YamlExtensionTest.java
Patch:
@@ -51,8 +51,8 @@ void testFormatYaml_WithJackson_skipDocStartMarker() throws IOException {
 				"spotless {",
 				"    yaml {",
 				"        target 'src/**/*.yaml'",
-				"        jacksonYaml()" ,
-				"	        .yamlFeature('WRITE_DOC_START_MARKER', false)" ,
+				"        jacksonYaml()",
+				"	        .yamlFeature('WRITE_DOC_START_MARKER', false)",
 				"	        .yamlFeature('MINIMIZE_QUOTES', true)",
 				"    }",
 				"}");

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JsonExtension.java
Patch:
@@ -116,7 +116,7 @@ private FormatterStep createStep() {
 		}
 	}
 
-	public static class JacksonJsonGradleConfig extends JacksonGradleConfig {
+	public static class JacksonJsonGradleConfig extends AJacksonGradleConfig {
 		protected JacksonJsonConfig jacksonConfig;
 
 		public JacksonJsonGradleConfig(JacksonJsonConfig jacksonConfig, FormatExtension formatExtension) {
@@ -135,7 +135,7 @@ public JacksonJsonGradleConfig(FormatExtension formatExtension) {
 		/**
 		 * @see com.fasterxml.jackson.core.JsonGenerator.Feature
 		 */
-		public JacksonGradleConfig jsonFeature(String feature, boolean toggle) {
+		public AJacksonGradleConfig jsonFeature(String feature, boolean toggle) {
 			this.jacksonConfig.appendJsonFeatureToToggle(Collections.singletonMap(feature, toggle));
 			formatExtension.replaceStep(createStep());
 			return this;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/YamlExtension.java
Patch:
@@ -41,11 +41,11 @@ protected void setupTask(SpotlessTask task) {
 		super.setupTask(task);
 	}
 
-	public JacksonGradleConfig jacksonYaml() {
+	public AJacksonGradleConfig jacksonYaml() {
 		return new JacksonYamlGradleConfig(this);
 	}
 
-	public class JacksonYamlGradleConfig extends JacksonGradleConfig {
+	public class JacksonYamlGradleConfig extends AJacksonGradleConfig {
 		protected JacksonYamlConfig jacksonConfig;
 
 		public JacksonYamlGradleConfig(JacksonYamlConfig jacksonConfig, FormatExtension formatExtension) {
@@ -65,7 +65,7 @@ public JacksonYamlGradleConfig(FormatExtension formatExtension) {
 		/**
 		 * @see com.fasterxml.jackson.dataformat.yaml.YAMLGenerator.Feature
 		 */
-		public JacksonGradleConfig yamlFeature(String feature, boolean toggle) {
+		public AJacksonGradleConfig yamlFeature(String feature, boolean toggle) {
 			this.jacksonConfig.appendYamlFeatureToToggle(Collections.singletonMap(feature, toggle));
 			formatExtension.replaceStep(createStep());
 			return this;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/YamlExtensionTest.java
Patch:
@@ -51,8 +51,8 @@ void testFormatYaml_WithJackson_skipDocStartMarker() throws IOException {
 				"spotless {",
 				"    yaml {",
 				"        target 'src/**/*.yaml'",
-				"        jacksonYaml()" +
-				"	        .yamlFeature('WRITE_DOC_START_MARKER', false)" +
+				"        jacksonYaml()" ,
+				"	        .yamlFeature('WRITE_DOC_START_MARKER', false)" ,
 				"	        .yamlFeature('MINIMIZE_QUOTES', true)",
 				"    }",
 				"}");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenRunner.java
Patch:
@@ -69,7 +69,7 @@ private ProcessRunner.Result run() throws IOException, InterruptedException {
 		Objects.requireNonNull(args, "Need to call withArguments() first");
 		// run maven with the given args in the given directory
 		String argsString = "-e " + String.join(" ", Arrays.asList(args));
-		return runner.shellWinUnix(projectDir, "mvnw " + argsString, "./mvnw " + argsString);
+		return runner.shellWinUnix(projectDir, environment, "mvnw " + argsString, "./mvnw " + argsString);
 	}
 
 	/** Runs the command and asserts that exit code is 0. */

File: lib/src/main/java/com/diffplug/spotless/json/JacksonConfig.java
Patch:
@@ -24,6 +24,7 @@
  * A DTO holding the options for Jackson-based formatters
  */
 public class JacksonConfig implements Serializable {
+	private static final long serialVersionUID = 1L;
 
 	private static final Map<String, Boolean> DEFAULT_FEATURE_TOGGLES;
 

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ private static class ImportsGroup {
 		private final List<String> subGroups;
 
 		public ImportsGroup(String importOrder) {
-			this.subGroups = Stream.of(importOrder.split("\\" + SUBGROUP_SEPARATOR))
+			this.subGroups = Stream.of(importOrder.split("\\" + SUBGROUP_SEPARATOR, -1))
 					.map(this::normalizeStatic)
 					.collect(Collectors.toList());
 		}

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorterImpl.java
Patch:
@@ -45,7 +45,7 @@ private static class ImportsGroup {
 		private final List<String> subGroups;
 
 		public ImportsGroup(String importOrder) {
-			this.subGroups = Stream.of(importOrder.split("\\" + SUBGROUP_SEPARATOR))
+			this.subGroups = Stream.of(importOrder.split("\\" + SUBGROUP_SEPARATOR, -1))
 					.map(this::normalizeStatic)
 					.collect(Collectors.toList());
 		}

File: testlib/src/test/java/com/diffplug/spotless/JvmTest.java
Patch:
@@ -140,7 +140,7 @@ void supportProposesFormatterUpgrade() {
 					throw new Exception("Some test exception");
 				}).apply("");
 			}).getMessage();
-			assertThat(proposal).isEqualTo("My Test Formatter " + fmtVersion + " is currently being used, but outdated.\n" +
+			assertThat(proposal.replace("\r", "")).isEqualTo("My Test Formatter " + fmtVersion + " is currently being used, but outdated.\n" +
 					"My Test Formatter 2 is the recommended version, which may have fixed this problem.\n" +
 					"My Test Formatter 2 requires JVM " + (requiredJvm) + "+.");
 		}

File: testlib/src/test/java/com/diffplug/spotless/JvmTest.java
Patch:
@@ -142,7 +142,7 @@ void supportProposesFormatterUpgrade() {
 			}).getMessage();
 			assertThat(proposal).isEqualTo("My Test Formatter " + fmtVersion + " is currently being used, but outdated.\n" +
 					"My Test Formatter 2 is the recommended version, which may have fixed this problem.\n" +
-					"My Test Formatter 2 requires JVM 10+.");
+					"My Test Formatter 2 requires JVM " + (requiredJvm) + "+.");
 		}
 	}
 

File: lib/src/main/java/com/diffplug/spotless/Jvm.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/yaml/Jackson.java
Patch:
@@ -24,6 +24,7 @@
 import com.diffplug.spotless.maven.FormatterStepConfig;
 import com.diffplug.spotless.maven.FormatterStepFactory;
 import com.diffplug.spotless.yaml.YamlJacksonStep;
+import com.diffplug.spotless.yaml.YamlJacksonV2Step;
 
 public class Jackson implements FormatterStepFactory {
 
@@ -40,7 +41,7 @@ public class Jackson implements FormatterStepFactory {
 	public FormatterStep newFormatterStep(FormatterStepConfig stepConfig) {
 		List<String> enabledFeaturesAsList = Arrays.asList(enabledFeatures);
 		List<String> disabledFeaturesAsList = Arrays.asList(disabledFeatures);
-		return YamlJacksonStep
+		return YamlJacksonV2Step
 				.create(enabledFeaturesAsList, disabledFeaturesAsList, version, stepConfig.getProvisioner());
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/yaml/YamlJacksonStep.java
Patch:
@@ -132,7 +132,7 @@ FormatterFunc toFormatter() {
 		private String format(Object objectMapper, Method stringToObject, Method objectToString, String s)
 				throws IllegalAccessException, IllegalArgumentException {
 			try {
-				Object parsed = stringToObject.invoke(s, Object.class);
+				Object parsed = stringToObject.invoke(objectMapper, s, Object.class);
 				return (String) objectToString.invoke(objectMapper, parsed);
 			} catch (InvocationTargetException ex) {
 				throw new AssertionError("Unable to format YAML", ex.getCause());

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/yaml/Jackson.java
Patch:
@@ -25,7 +25,7 @@
 import com.diffplug.spotless.maven.FormatterStepFactory;
 import com.diffplug.spotless.yaml.YamlJacksonStep;
 
-public class JacksonYaml implements FormatterStepFactory {
+public class Jackson implements FormatterStepFactory {
 
 	@Parameter
 	private String version = YamlJacksonStep.defaultVersion();

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/yaml/Yaml.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.diffplug.spotless.maven.yaml;
 
+import java.util.Collections;
 import java.util.Set;
 
-import com.diffplug.common.collect.Sets;
 import com.diffplug.spotless.maven.FormatterFactory;
 
 /**
@@ -26,15 +26,15 @@
 public class Yaml extends FormatterFactory {
 	@Override
 	public Set<String> defaultIncludes() {
-		return Sets.newHashSet("**/*.yaml", "**/*.yml");
+		return Collections.emptySet();
 	}
 
 	@Override
 	public String licenseHeaderDelimiter() {
 		return null;
 	}
 
-	public void addJackson(JacksonYaml jackson) {
+	public void addJackson(Jackson jackson) {
 		addStepFactory(jackson);
 	}
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationHarness.java
Patch:
@@ -161,7 +161,7 @@ protected void writePomWithJsonSteps(String... steps) throws IOException {
 	}
 
 	protected void writePomWithYamlSteps(String... steps) throws IOException {
-		writePom(groupWithSteps("yaml", steps));
+		writePom(groupWithSteps("yaml", including("**/*.yaml"), steps));
 	}
 
 	protected void writePom(String... configuration) throws IOException {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/json/JsonTest.java
Patch:
@@ -22,7 +22,7 @@
 public class JsonTest extends MavenIntegrationHarness {
 	@Test
 	public void testFormatJson_WithSimple_defaultConfig() throws Exception {
-		writePomWithJsonSteps("<json><simple/></json>");
+		writePomWithJsonSteps("<simple/>");
 
 		setFile("json_test.json").toResource("json/sortByKeysBefore.json");
 		mavenRunner().withArguments("spotless:apply").runNoError().error();
@@ -31,7 +31,7 @@ public void testFormatJson_WithSimple_defaultConfig() throws Exception {
 
 	@Test
 	public void testFormatJson_WithGson_defaultConfig() throws Exception {
-		writePomWithJsonSteps("<json><gson/></json>");
+		writePomWithJsonSteps("<gson/>");
 
 		setFile("json_test.json").toResource("json/sortByKeysBefore.json");
 		mavenRunner().withArguments("spotless:apply").runNoError().error();

File: lib/src/compatKtLint0Dot34Dot2/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot34Dot2Adapter.java
Patch:
@@ -62,7 +62,7 @@ public String format(final String text, Path path, final boolean isScript,
 				userData,
 				formatterCallback,
 				isScript,
-				editorConfigPath.toFile().getAbsolutePath(),
+				editorConfigPath == null ? null : editorConfigPath.toFile().getAbsolutePath(),
 				false));
 	}
 }

File: lib/src/compatKtLint0Dot45Dot2/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot45Dot2Adapter.java
Patch:
@@ -77,7 +77,7 @@ public String format(final String text, Path path, final boolean isScript,
 				userData,
 				formatterCallback,
 				isScript,
-				editorConfigPath.toFile().getAbsolutePath(),
+				editorConfigPath == null ? null : editorConfigPath.toFile().getAbsolutePath(),
 				false,
 				editorConfigOverride,
 				false));

File: lib/src/compatKtLint0Dot46Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot46Dot0Adapter.java
Patch:
@@ -77,7 +77,7 @@ public String format(final String text, Path path, final boolean isScript,
 				userData,
 				formatterCallback,
 				isScript,
-				editorConfigPath.toFile().getAbsolutePath(),
+				editorConfigPath == null ? null : editorConfigPath.toFile().getAbsolutePath(),
 				false,
 				editorConfigOverride,
 				false));

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -63,7 +63,7 @@ public LicenseHeaderConfig licenseHeaderFile(Object licenseHeaderFile) {
 	public KotlinFormatExtension ktlint(String version) throws IOException {
 		Objects.requireNonNull(version);
 		File defaultEditorConfig = getProject().getRootProject().file(".editorconfig");
-		FileSignature editorConfigPath = FileSignature.signAsList(defaultEditorConfig);
+		FileSignature editorConfigPath = defaultEditorConfig.exists() ? FileSignature.signAsList(defaultEditorConfig) : null;
 		return new KotlinFormatExtension(version, false, editorConfigPath, Collections.emptyMap(), Collections.emptyMap());
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinGradleExtension.java
Patch:
@@ -48,7 +48,7 @@ public KotlinGradleExtension(SpotlessExtension spotless) {
 	public KotlinFormatExtension ktlint(String version) throws IOException {
 		Objects.requireNonNull(version, "version");
 		File defaultEditorConfig = getProject().getRootProject().file(".editorconfig");
-		FileSignature editorConfigPath = FileSignature.signAsList(defaultEditorConfig);
+		FileSignature editorConfigPath = defaultEditorConfig.exists() ? FileSignature.signAsList(defaultEditorConfig) : null;
 		return new KotlinFormatExtension(version, false, editorConfigPath, Collections.emptyMap(), Collections.emptyMap());
 	}
 

File: lib/src/compatKtLintApi/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompatAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 DiffPlug
+ * Copyright 2022-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,10 +15,11 @@
  */
 package com.diffplug.spotless.glue.ktlint.compat;
 
+import java.nio.file.Path;
 import java.util.Map;
 
 public interface KtLintCompatAdapter {
 
-	String format(String text, String name, boolean isScript, boolean useExperimental, Map<String, String> userData,
+	String format(String text, Path path, boolean isScript, boolean useExperimental, Path editorConfigPath, Map<String, String> userData,
 			Map<String, Object> editorConfigOverrideMap);
 }

File: lib/src/testCompatKtLint0Dot48Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot48Dot0AdapterTest.java
Patch:
@@ -38,7 +38,7 @@ public void testDefaults(@TempDir Path path) throws IOException {
 
 		Map<String, Object> editorConfigOverrideMap = new HashMap<>();
 
-		String formatted = ktLintCompat0Dot48Dot0Adapter.format(text, "empty_class_body.kt", false, false, userData, editorConfigOverrideMap);
+		String formatted = ktLintCompat0Dot48Dot0Adapter.format(text, path, false, false, null, userData, editorConfigOverrideMap);
 		assertEquals("class empty_class_body\n", formatted);
 	}
 
@@ -53,7 +53,7 @@ public void testEditorConfigCanDisable(@TempDir Path path) throws IOException {
 		editorConfigOverrideMap.put("indent_style", "tab");
 		editorConfigOverrideMap.put("ktlint_standard_no-semi", "disabled");
 
-		String formatted = ktLintCompat0Dot48Dot0Adapter.format(text, "fails_no_semicolons.kt", false, false, userData, editorConfigOverrideMap);
+		String formatted = ktLintCompat0Dot48Dot0Adapter.format(text, path, false, false, null, userData, editorConfigOverrideMap);
 		assertEquals("class fails_no_semicolons {\n\tval i = 0;\n}\n", formatted);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.48.0";
+	private static final String DEFAULT_VERSION = "0.48.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/FileIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ static FileIndex read(FileIndexConfig config, Log log) {
 			PluginFingerprint computedFingerprint = config.getPluginFingerprint();
 			PluginFingerprint storedFingerprint = PluginFingerprint.from(firstLine);
 			if (!computedFingerprint.equals(storedFingerprint)) {
-				log.info("Fingerprint mismatch in the index file. Fallback to an empty index");
+				log.info("Index file corresponds to a different configuration of the plugin. Either the plugin version or its configuration has changed. Fallback to an empty index");
 				return emptyIndexFallback(config);
 			} else {
 				Content content = readIndexContent(reader, config.getProjectDir(), log);

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/incremental/FileIndexTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ void readFallsBackToEmptyIndexOnFingerprintMismatch() throws Exception {
 		FileIndex index = FileIndex.read(config, log);
 
 		assertThat(index.size()).isZero();
-		verify(log).info("Fingerprint mismatch in the index file. Fallback to an empty index");
+		verify(log).info("Index file corresponds to a different configuration of the plugin. Either the plugin version or its configuration has changed. Fallback to an empty index");
 	}
 
 	@Test

File: lib/src/compatKtLint0Dot48Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot48Dot0Adapter.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.diffplug.spotless.glue.ktlint.compat;
 
+import java.nio.file.Path;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.nio.file.Path;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
@@ -99,7 +100,7 @@ public String format(final String text, Path path, final boolean isScript,
 					editorConfigOverrideMap);
 		}
 		EditorConfigDefaults editorConfig;
-		if (editorConfigPath == null || !editorConfigPath.toFile().exists()) {
+		if (editorConfigPath == null || !Files.exists(editorConfigPath)) {
 			editorConfig = EditorConfigDefaults.Companion.getEMPTY_EDITOR_CONFIG_DEFAULTS();
 		} else {
 			editorConfig = EditorConfigDefaults.Companion.load(editorConfigPath);

File: lib/src/testCompatKtLint0Dot48Dot0/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot48Dot0AdapterTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.48.0";
+	private static final String DEFAULT_VERSION = "0.48.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/FileIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -76,7 +76,7 @@ static FileIndex read(FileIndexConfig config, Log log) {
 			PluginFingerprint computedFingerprint = config.getPluginFingerprint();
 			PluginFingerprint storedFingerprint = PluginFingerprint.from(firstLine);
 			if (!computedFingerprint.equals(storedFingerprint)) {
-				log.info("Fingerprint mismatch in the index file. Fallback to an empty index");
+				log.info("Index file corresponds to a different configuration of the plugin. Either the plugin version or its configuration has changed. Fallback to an empty index");
 				return emptyIndexFallback(config);
 			} else {
 				Content content = readIndexContent(reader, config.getProjectDir(), log);

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/incremental/FileIndexTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ void readFallsBackToEmptyIndexOnFingerprintMismatch() throws Exception {
 		FileIndex index = FileIndex.read(config, log);
 
 		assertThat(index.size()).isZero();
-		verify(log).info("Fingerprint mismatch in the index file. Fallback to an empty index");
+		verify(log).info("Index file corresponds to a different configuration of the plugin. Either the plugin version or its configuration has changed. Fallback to an empty index");
 	}
 
 	@Test

File: lib/src/main/java/com/diffplug/spotless/npm/EslintTypescriptConfig.java
Patch:
@@ -27,6 +27,8 @@
 
 public class EslintTypescriptConfig extends EslintConfig {
 
+	private static final long serialVersionUID = -126864670181617006L;
+
 	@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 	@Nullable
 	private final transient File typescriptConfigPath;

File: testlib/src/test/java/com/diffplug/spotless/npm/PrettierFormatterStepTest.java
Patch:
@@ -116,7 +116,7 @@ void verifyPrettierErrorMessageIsRelayed() throws Exception {
 					new PrettierConfig(null, ImmutableMap.of("parser", "postcss")));
 			try (StepHarnessWithFile stepHarness = StepHarnessWithFile.forStep(this, formatterStep)) {
 				stepHarness.testResourceExceptionMsg("npm/prettier/filetypes/scss/scss.dirty").isEqualTo(
-						"Unexpected response status code at /prettier/format [HTTP 501] -- (Error while formatting: Error: Couldn't resolve parser \"postcss\")");
+						"Unexpected response status code at /prettier/format [HTTP 500] -- (Error while formatting: Error: Couldn't resolve parser \"postcss\")");
 			}
 		}
 	}

File: lib/src/testCompatKtLint0Dot48Dot1/java/com/diffplug/spotless/glue/ktlint/compat/KtLintCompat0Dot48Dot1AdapterTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.HashMap;
@@ -34,7 +35,7 @@ public void testDefaults(@TempDir Path path) throws IOException {
 		try (InputStream is = KtLintCompat0Dot48Dot1AdapterTest.class.getResourceAsStream("/empty_class_body.kt")) {
 			Files.copy(is, path.resolve("empty_class_body.kt"));
 		}
-		String text = new String(Files.readAllBytes(path.resolve("empty_class_body.kt")));
+		String text = new String(Files.readAllBytes(path.resolve("empty_class_body.kt")), StandardCharsets.UTF_8);
 
 		Map<String, String> userData = new HashMap<>();
 
@@ -50,7 +51,7 @@ public void testEditorConfigCanDisable(@TempDir Path path) throws IOException {
 		try (InputStream is = KtLintCompat0Dot48Dot1AdapterTest.class.getResourceAsStream("/fails_no_semicolons.kt")) {
 			Files.copy(is, path.resolve("fails_no_semicolons.kt"));
 		}
-		String text = new String(Files.readAllBytes(path.resolve("fails_no_semicolons.kt")));
+		String text = new String(Files.readAllBytes(path.resolve("fails_no_semicolons.kt")), StandardCharsets.UTF_8);
 
 		Map<String, String> userData = new HashMap<>();
 

File: lib/src/ktlint/java/com/diffplug/spotless/glue/ktlint/KtlintFormatterFunc.java
Patch:
@@ -27,7 +27,7 @@
 import com.diffplug.spotless.glue.ktlint.compat.KtLintCompat0Dot45Dot2Adapter;
 import com.diffplug.spotless.glue.ktlint.compat.KtLintCompat0Dot46Dot0Adapter;
 import com.diffplug.spotless.glue.ktlint.compat.KtLintCompat0Dot47Dot0Adapter;
-import com.diffplug.spotless.glue.ktlint.compat.KtLintCompat0Dot48Dot0Adapter;
+import com.diffplug.spotless.glue.ktlint.compat.KtLintCompat0Dot48Dot1Adapter;
 import com.diffplug.spotless.glue.ktlint.compat.KtLintCompatAdapter;
 
 public class KtlintFormatterFunc implements FormatterFunc.NeedsFile {
@@ -44,7 +44,7 @@ public KtlintFormatterFunc(String version, boolean isScript, boolean useExperime
 		int minorVersion = Integer.parseInt(version.split("\\.")[1]);
 		if (minorVersion >= 48) {
 			// ExperimentalParams lost two constructor arguments, EditorConfigProperty moved to its own class
-			this.adapter = new KtLintCompat0Dot48Dot0Adapter();
+			this.adapter = new KtLintCompat0Dot48Dot1Adapter();
 		} else if (minorVersion == 47) {
 			// rename RuleSet to RuleProvider
 			this.adapter = new KtLintCompat0Dot47Dot0Adapter();

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.48.0";
+	private static final String DEFAULT_VERSION = "0.48.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -130,8 +130,8 @@ void works0_47_1() {
 	}
 
 	@Test
-	void works0_48_0() {
-		FormatterStep step = KtLintStep.create("0.48.0", TestProvisioner.mavenCentral());
+	void works0_48_1() {
+		FormatterStep step = KtLintStep.create("0.48.1", TestProvisioner.mavenCentral());
 		StepHarnessWithFile.forStep(this, step)
 				.testResource("kotlin/ktlint/basic.dirty", "kotlin/ktlint/basic.clean")
 				.testResourceExceptionMsg("kotlin/ktlint/unsolvable.dirty").isEqualTo("Error on line: 1, column: 1\n" +

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationHarness.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -42,7 +42,7 @@ public class PrettierFormatterStep {
 	public static final String NAME = "prettier-format";
 
 	public static final Map<String, String> defaultDevDependencies() {
-		return defaultDevDependenciesWithPrettier("2.0.5");
+		return defaultDevDependenciesWithPrettier("2.8.1");
 	}
 
 	public static final Map<String, String> defaultDevDependenciesWithPrettier(String version) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/javascript/EslintJs.java
Patch:
@@ -69,7 +69,7 @@ protected EslintConfig eslintConfig(FormatterStepConfig stepConfig) {
 
 	private void addStyleGuideDevDependencies(Map<String, String> devDependencies) {
 		if (this.styleGuide != null) {
-			EslintFormatterStep.PopularStyleGuide styleGuide = EslintFormatterStep.PopularStyleGuide.valueOf(this.styleGuide);
+			EslintFormatterStep.PopularStyleGuide styleGuide = EslintFormatterStep.PopularStyleGuide.fromNameOrNull(this.styleGuide);
 			validateStyleGuide(styleGuide);
 			devDependencies.putAll(styleGuide.devDependencies());
 		}
@@ -80,7 +80,7 @@ private void validateStyleGuide(EslintFormatterStep.PopularStyleGuide styleGuide
 			throw new IllegalArgumentException("StyleGuide '" + this.styleGuide + "' is not supported. Supported style guides: " + supportedStyleGuides());
 		}
 		if (!isValidStyleGuide(styleGuide)) {
-			throw new IllegalArgumentException("StyleGuide must be of correct type but is: " + styleGuide + ". Use one of the following: " + supportedStyleGuides());
+			throw new IllegalArgumentException("StyleGuide must be of correct type but is: " + styleGuide.getPopularStyleGuideName() + ". Use one of the following: " + supportedStyleGuides());
 		}
 	}
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationHarness.java
Patch:
@@ -136,8 +136,8 @@ protected void writePomWithCppSteps(String... steps) throws IOException {
 		writePom(groupWithSteps("cpp", steps));
 	}
 
-	protected void writePomWithTypescriptSteps(String... steps) throws IOException {
-		writePom(groupWithSteps("typescript", including("**/*.ts"), steps));
+	protected void writePomWithTypescriptSteps(String includes, String... steps) throws IOException {
+		writePom(groupWithSteps("typescript", including(includes), steps));
 	}
 
 	protected void writePomWithSqlSteps(String... steps) throws IOException {

File: lib/src/main/java/com/diffplug/spotless/npm/EslintRestService.java
Patch:
@@ -35,7 +35,7 @@ public String format(String fileContent, Map<FormatOption, Object> formatOptions
 	}
 
 	enum FormatOption {
-		ESLINT_OVERRIDE_CONFIG("eslint_override_config"), ESLINT_OVERRIDE_CONFIG_FILE("eslint_override_config_file"), FILE_PATH("file_path"), NODE_MODULES_DIR("node_modules_dir");
+		ESLINT_OVERRIDE_CONFIG("eslint_override_config"), ESLINT_OVERRIDE_CONFIG_FILE("eslint_override_config_file"), FILE_PATH("file_path"), NODE_MODULES_DIR("node_modules_dir"), TS_CONFIG_ROOT_DIR("ts_config_root_dir");
 
 		private final String backendName;
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Json.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class Json extends FormatterFactory {
 	public static final int DEFAULT_INDENTATION = 4;
-	
+
 	@Override
 	public Set<String> defaultIncludes() {
 		return Collections.emptySet();

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -59,7 +59,7 @@ public static FormatterStep createForScript(String version, Provisioner provisio
 	}
 
 	public static FormatterStep createForScript(String version, Provisioner provisioner, boolean useExperimental,
-			Map<String, String> userData, Map<String, Object> editorConfigOverride) {
+			FileSignature editorConfigPath, Map<String, String> userData, Map<String, Object> editorConfigOverride) {
 		return create(version, provisioner, true, useExperimental, userData, editorConfigOverride);
 	}
 
@@ -119,7 +119,7 @@ FormatterFunc createFormat() throws Exception {
 			final ClassLoader classLoader = jarState.getClassLoader();
 			Class<?> formatterFunc = classLoader.loadClass("com.diffplug.spotless.glue.ktlint.KtlintFormatterFunc");
 			Constructor<?> constructor = formatterFunc.getConstructor(
-					String.class, boolean.class, boolean.class, String.class, Map.class, Map.class);
+					String.class, boolean.class, boolean.class, FileSignature.class, Map.class, Map.class);
 			return (FormatterFunc.NeedsFile) constructor.newInstance(version, isScript, useExperimental, editorConfigPath, userData, editorConfigOverride);
 		}
 	}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Gson.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Json.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/json/Simple.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: testlib/src/main/java/com/diffplug/spotless/StepHarness.java
Patch:
@@ -46,6 +46,7 @@ public static StepHarness forSteps(FormatterStep... steps) {
 				.lineEndingsPolicy(LineEnding.UNIX.createPolicy())
 				.encoding(StandardCharsets.UTF_8)
 				.rootDir(Paths.get(""))
+				.exceptionPolicy(new FormatExceptionPolicyStrict())
 				.build());
 	}
 

File: testlib/src/main/java/com/diffplug/spotless/StepHarnessWithFile.java
Patch:
@@ -42,6 +42,7 @@ public static StepHarnessWithFile forStep(ResourceHarness harness, FormatterStep
 				.lineEndingsPolicy(LineEnding.UNIX.createPolicy())
 				.steps(Collections.singletonList(step))
 				.rootDir(harness.rootFolder().toPath())
+				.exceptionPolicy(new FormatExceptionPolicyStrict())
 				.build());
 	}
 

File: testlib/src/test/java/com/diffplug/spotless/npm/PrettierFormatterStepTest.java
Patch:
@@ -111,8 +111,8 @@ void verifyPrettierErrorMessageIsRelayed() throws Exception {
 					npmPathResolver(),
 					new PrettierConfig(null, ImmutableMap.of("parser", "postcss")));
 			try (StepHarnessWithFile stepHarness = StepHarnessWithFile.forStep(this, formatterStep)) {
-				stepHarness.testResourceExceptionMsg("npm/prettier/filetypes/scss/scss.dirty").startsWith(
-						"com.diffplug.spotless.npm.SimpleRestClient$SimpleRestResponseException: Unexpected response status code at /prettier/format [HTTP 501] -- (Error while formatting: Error: Couldn't resolve parser \"postcss\")");
+				stepHarness.testResourceExceptionMsg("npm/prettier/filetypes/scss/scss.dirty").isEqualTo(
+						"Unexpected response status code at /prettier/format [HTTP 501] -- (Error while formatting: Error: Couldn't resolve parser \"postcss\")");
 			}
 		}
 	}

File: testlib/src/test/java/com/diffplug/spotless/json/JsonFormatterStepCommonTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2022 DiffPlug
+ * Copyright 2022-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -95,10 +95,9 @@ protected StepHarness getStepHarness() {
 		return StepHarness.forStep(createFormatterStep(INDENT, TestProvisioner.mavenCentral()));
 	}
 
-	protected void doWithResource(String name) throws Exception {
+	protected void doWithResource(String name) {
 		String before = String.format("json/%sBefore.json", name);
 		String after = String.format("json/%sAfter.json", name);
 		getStepHarness().testResource(before, after);
 	}
-
 }

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.41";
+	private static final String DEFAULT_VERSION = "0.42";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2022 DiffPlug
+ * Copyright 2016-2023 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.47.1";
+	private static final String DEFAULT_VERSION = "0.48.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.41";
+	private static final String DEFAULT_VERSION = "0.42";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.47.1";
+	private static final String DEFAULT_VERSION = "0.48.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -90,7 +90,7 @@ public abstract class AbstractSpotlessMojo extends AbstractMojo {
 	private ResourceManager resourceManager;
 
 	@Component
-	protected BuildContext buildContext;
+	private BuildContext buildContext;
 
 	@Parameter(defaultValue = "${mojoExecution.goal}", required = true, readonly = true)
 	private String goal;

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/UpToDateChecker.java
Patch:
@@ -49,7 +49,7 @@ public void setUpToDate(Path file) {
 
 			@Override
 			public boolean isUpToDate(Path file) {
-				if (buildContext.hasDelta(file)) {
+				if (buildContext.hasDelta(file.toFile())) {
 					return delegate.isUpToDate(file);
 				}
 				return true;

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/UpToDateChecker.java
Patch:
@@ -38,10 +38,10 @@ static UpToDateChecker noop(MavenProject project, Path indexFile, Log log) {
 	static UpToDateChecker forProject(MavenProject project, Path indexFile, Iterable<Formatter> formatters, Log log) {
 		return IndexBasedChecker.create(project, indexFile, formatters, log);
 	}
-	
+
 	static UpToDateChecker wrapWithBuildContext(UpToDateChecker delegate, BuildContext buildContext) {
 		return new UpToDateChecker() {
-		
+
 			@Override
 			public void setUpToDate(Path file) {
 				delegate.setUpToDate(file);
@@ -58,5 +58,5 @@ public void close() {
 			}
 		};
 	}
-	
+
 }

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -29,7 +29,7 @@ private PalantirJavaFormatStep() {}
 
 	private static final String NAME = "palantir-java-format";
 	private static final String MAVEN_COORDINATE = "com.palantir.javaformat:palantir-java-format:";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.10.0");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.28.0");
 
 	/** Creates a step which formats everything - code, import order, and unused imports. */
 	public static FormatterStep create(Provisioner provisioner) {

File: testlib/src/test/java/com/diffplug/spotless/java/PalantirJavaFormatStepTest.java
Patch:
@@ -40,7 +40,7 @@ void jvm13Features() throws Exception {
 	@Test
 	@EnabledForJreRange(min = JAVA_11)
 	void behavior2() throws Exception {
-		FormatterStep step = PalantirJavaFormatStep.create("2.10.0", TestProvisioner.mavenCentral());
+		FormatterStep step = PalantirJavaFormatStep.create("2.28.0", TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
 				.testResource("java/palantirjavaformat/JavaCodeUnformatted.test", "java/palantirjavaformat/JavaCodeFormatted.test")
 				.testResource("java/palantirjavaformat/JavaCodeWithLicenseUnformatted.test", "java/palantirjavaformat/JavaCodeWithLicenseFormatted.test")

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -32,7 +32,7 @@ private DiktatStep() {}
 
 	private static final String MIN_SUPPORTED_VERSION = "1.2.1";
 
-	private static final String DEFAULT_VERSION = "1.2.3";
+	private static final String DEFAULT_VERSION = "1.2.4.2";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String MAVEN_COORDINATE = PACKAGE_DIKTAT + ":diktat-rules:";

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	private static final String DEFAULT_VERSION = "3.5.9";
+	private static final String DEFAULT_VERSION = "3.6.1";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -29,7 +29,7 @@ private PalantirJavaFormatStep() {}
 
 	private static final String NAME = "palantir-java-format";
 	private static final String MAVEN_COORDINATE = "com.palantir.javaformat:palantir-java-format:";
-	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.10.0");
+	private static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.1.0").add(11, "2.28.0");
 
 	/** Creates a step which formats everything - code, import order, and unused imports. */
 	public static FormatterStep create(Provisioner provisioner) {

File: testlib/src/test/java/com/diffplug/spotless/java/PalantirJavaFormatStepTest.java
Patch:
@@ -40,7 +40,7 @@ void jvm13Features() throws Exception {
 	@Test
 	@EnabledForJreRange(min = JAVA_11)
 	void behavior2() throws Exception {
-		FormatterStep step = PalantirJavaFormatStep.create("2.10.0", TestProvisioner.mavenCentral());
+		FormatterStep step = PalantirJavaFormatStep.create("2.28.0", TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
 				.testResource("java/palantirjavaformat/JavaCodeUnformatted.test", "java/palantirjavaformat/JavaCodeFormatted.test")
 				.testResource("java/palantirjavaformat/JavaCodeWithLicenseUnformatted.test", "java/palantirjavaformat/JavaCodeWithLicenseFormatted.test")

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.40";
+	private static final String DEFAULT_VERSION = "0.41";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -34,7 +34,7 @@ public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
-	private static final String DEFAULT_VERSION = "3.5.9";
+	private static final String DEFAULT_VERSION = "3.6.1";
 
 	private static final String DEFAULT_SCALA_MAJOR_VERSION = "2.13";
 	static final String NAME = "scalafmt";

File: lib/src/main/java/com/diffplug/spotless/java/FormatAnnotationsStep.java
Patch:
@@ -371,7 +371,7 @@ public final class FormatAnnotationsStep {
 					"UpperBoundBottom",
 					"UpperBoundLiteral",
 					"UpperBoundUnknown",
-					"Value",
+					"ValueTypeAnno",
 					"VariableNameDefaultBottom",
 					"VariableNameDefaultMiddle",
 					"VariableNameDefaultTop",

File: lib/src/main/java/com/diffplug/spotless/java/FormatAnnotationsStep.java
Patch:
@@ -371,7 +371,7 @@ public final class FormatAnnotationsStep {
 					"UpperBoundBottom",
 					"UpperBoundLiteral",
 					"UpperBoundUnknown",
-					"Value",
+					"ValueTypeAnno",
 					"VariableNameDefaultBottom",
 					"VariableNameDefaultMiddle",
 					"VariableNameDefaultTop",

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.39";
+	private static final String DEFAULT_VERSION = "0.40";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.46.1";
+	private static final String DEFAULT_VERSION = "0.47.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -691,6 +691,7 @@ public void withinBlocks(String name, String open, String close, Action<FormatEx
 	 *     target '*.md'
 	 *     withinBlocks 'java examples', '\n```java\n', '\n```\n', com.diffplug.gradle.spotless.JavaExtension, {
 	 *       googleJavaFormat()
+	 *       formatAnnotations()
 	 *     }
 	 *     ...
 	 * </pre>

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/SpotlessEclipseFramework.java
Patch:
@@ -61,7 +61,7 @@ public enum DefaultBundles {
 		REGISTRY(org.eclipse.core.internal.registry.osgi.Activator.class),
 		/** Eclipse preferences always check whether this bundle has been activated before preference are set.*/
 		PREFERENCES(org.eclipse.core.internal.preferences.Activator.class),
-		/** The common runtime provides provides common services, like log and service adapters registry. */
+		/** The common runtime provides common services, like log and service adapters registry. */
 		COMMON(org.eclipse.core.internal.runtime.Activator.class);
 
 		private final Class<? extends BundleActivator> activatorClass;

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/osgi/BundleController.java
Patch:
@@ -76,7 +76,7 @@ public BundleController() throws BundleException {
 		services.add(org.osgi.service.packageadmin.PackageAdmin.class, bundleLookup);
 		services.add(FrameworkWiring.class, bundleLookup);
 
-		//Redirect framework activator requests to the the org.eclipse.osgi bundle to this instance.
+		//Redirect framework activator requests to the org.eclipse.osgi bundle to this instance.
 		bundles.add(new SimpleBundle(systemBundle, ECLIPSE_LAUNCHER_SYMBOLIC_NAME, Bundle.ACTIVE));
 		FrameworkBundleRegistry.initialize(this);
 	}

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/PluginPreferences.java
Patch:
@@ -33,7 +33,7 @@
 import org.eclipse.wst.xml.core.internal.catalog.provisional.ICatalog;
 
 /**
- * The plugin preference configuration of most WTP formatters is accomplished via the the
+ * The plugin preference configuration of most WTP formatters is accomplished via the
  * globabl Eclipse preference lookup.
  * Spotless allows different formatter configurations per sub-projects.
  * Fortunately most formatters only perform a lookup on instantiation and not afterwards.

File: lib/src/main/java/com/diffplug/spotless/FeatureClassLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@
  * This class loader is used to load classes of Spotless features from a search
  * path of URLs.<br/>
  * Features shall be independent from build tools. Hence the class loader of the
- * underlying build tool is e.g. skipped during the the search for classes.<br/>
+ * underlying build tool is e.g. skipped during the search for classes.<br/>
  *
  * For `com.diffplug.spotless.glue.`, classes are redefined from within the lib jar
  * but linked against the `Url[]`. This allows us to ship classfiles which function as glue

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -236,7 +236,7 @@ public static DirtyState calculateDirtyState(Formatter formatter, File file, byt
 
 	/**
 	 * The clean/dirty state of a single file.  Intended use:
-	 * - {@link #isClean()} means that the file is is clean, and there's nothing else to say
+	 * - {@link #isClean()} means that the file is clean, and there's nothing else to say
 	 * - {@link #didNotConverge()} means that we were unable to determine a clean state
 	 * - once you've tested the above conditions and you know that it's a dirty file with a converged state,
 	 *   then you can call {@link #writeCanonicalTo(OutputStream)} to get the canonical form of the given file.

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -123,7 +123,7 @@ public GoogleJavaFormatConfig googleJavaFormat() {
 	 * Uses the given version of <a href="https://github.com/google/google-java-format">google-java-format</a> to format source code.
 	 *
 	 * Limited to published versions.  See <a href="https://github.com/diffplug/spotless/issues/33#issuecomment-252315095">issue #33</a>
-	 * for an workaround for using snapshot versions.
+	 * for a workaround for using snapshot versions.
 	 */
 	public GoogleJavaFormatConfig googleJavaFormat(String version) {
 		Objects.requireNonNull(version);
@@ -188,7 +188,7 @@ public PalantirJavaFormatConfig palantirJavaFormat() {
 	 * Uses the given version of <a href="https://github.com/palantir/palantir-java-format">palantir-java-format</a> to format source code.
 	 *
 	 * Limited to published versions.  See <a href="https://github.com/diffplug/spotless/issues/33#issuecomment-252315095">issue #33</a>
-	 * for an workaround for using snapshot versions.
+	 * for a workaround for using snapshot versions.
 	 */
 	public PalantirJavaFormatConfig palantirJavaFormat(String version) {
 		Objects.requireNonNull(version);

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/SpotlessEclipseFramework.java
Patch:
@@ -61,7 +61,7 @@ public enum DefaultBundles {
 		REGISTRY(org.eclipse.core.internal.registry.osgi.Activator.class),
 		/** Eclipse preferences always check whether this bundle has been activated before preference are set.*/
 		PREFERENCES(org.eclipse.core.internal.preferences.Activator.class),
-		/** The common runtime provides provides common services, like log and service adapters registry. */
+		/** The common runtime provides common services, like log and service adapters registry. */
 		COMMON(org.eclipse.core.internal.runtime.Activator.class);
 
 		private final Class<? extends BundleActivator> activatorClass;

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/osgi/BundleController.java
Patch:
@@ -76,7 +76,7 @@ public BundleController() throws BundleException {
 		services.add(org.osgi.service.packageadmin.PackageAdmin.class, bundleLookup);
 		services.add(FrameworkWiring.class, bundleLookup);
 
-		//Redirect framework activator requests to the the org.eclipse.osgi bundle to this instance.
+		//Redirect framework activator requests to the org.eclipse.osgi bundle to this instance.
 		bundles.add(new SimpleBundle(systemBundle, ECLIPSE_LAUNCHER_SYMBOLIC_NAME, Bundle.ACTIVE));
 		FrameworkBundleRegistry.initialize(this);
 	}

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/PluginPreferences.java
Patch:
@@ -33,7 +33,7 @@
 import org.eclipse.wst.xml.core.internal.catalog.provisional.ICatalog;
 
 /**
- * The plugin preference configuration of most WTP formatters is accomplished via the the
+ * The plugin preference configuration of most WTP formatters is accomplished via the
  * globabl Eclipse preference lookup.
  * Spotless allows different formatter configurations per sub-projects.
  * Fortunately most formatters only perform a lookup on instantiation and not afterwards.

File: lib/src/main/java/com/diffplug/spotless/FeatureClassLoader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@
  * This class loader is used to load classes of Spotless features from a search
  * path of URLs.<br/>
  * Features shall be independent from build tools. Hence the class loader of the
- * underlying build tool is e.g. skipped during the the search for classes.<br/>
+ * underlying build tool is e.g. skipped during the search for classes.<br/>
  *
  * For `com.diffplug.spotless.glue.`, classes are redefined from within the lib jar
  * but linked against the `Url[]`. This allows us to ship classfiles which function as glue

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -236,7 +236,7 @@ public static DirtyState calculateDirtyState(Formatter formatter, File file, byt
 
 	/**
 	 * The clean/dirty state of a single file.  Intended use:
-	 * - {@link #isClean()} means that the file is is clean, and there's nothing else to say
+	 * - {@link #isClean()} means that the file is clean, and there's nothing else to say
 	 * - {@link #didNotConverge()} means that we were unable to determine a clean state
 	 * - once you've tested the above conditions and you know that it's a dirty file with a converged state,
 	 *   then you can call {@link #writeCanonicalTo(OutputStream)} to get the canonical form of the given file.

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -120,7 +120,7 @@ public GoogleJavaFormatConfig googleJavaFormat() {
 	 * Uses the given version of <a href="https://github.com/google/google-java-format">google-java-format</a> to format source code.
 	 *
 	 * Limited to published versions.  See <a href="https://github.com/diffplug/spotless/issues/33#issuecomment-252315095">issue #33</a>
-	 * for an workaround for using snapshot versions.
+	 * for a workaround for using snapshot versions.
 	 */
 	public GoogleJavaFormatConfig googleJavaFormat(String version) {
 		Objects.requireNonNull(version);
@@ -185,7 +185,7 @@ public PalantirJavaFormatConfig palantirJavaFormat() {
 	 * Uses the given version of <a href="https://github.com/palantir/palantir-java-format">palantir-java-format</a> to format source code.
 	 *
 	 * Limited to published versions.  See <a href="https://github.com/diffplug/spotless/issues/33#issuecomment-252315095">issue #33</a>
-	 * for an workaround for using snapshot versions.
+	 * for a workaround for using snapshot versions.
 	 */
 	public PalantirJavaFormatConfig palantirJavaFormat(String version) {
 		Objects.requireNonNull(version);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -691,6 +691,7 @@ public void withinBlocks(String name, String open, String close, Action<FormatEx
 	 *     target '*.md'
 	 *     withinBlocks 'java examples', '\n```java\n', '\n```\n', com.diffplug.gradle.spotless.JavaExtension, {
 	 *       googleJavaFormat()
+	 *       formatAnnotations()
 	 *     }
 	 *     ...
 	 * </pre>

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/Java.java
Patch:
@@ -62,7 +62,7 @@ public void addRemoveUnusedImports(RemoveUnusedImports removeUnusedImports) {
 		addStepFactory(removeUnusedImports);
 	}
 
-	public void addTypeAnnotations(TypeAnnotations typeAnnotations) {
-		addStepFactory(typeAnnotations);
+	public void addFormatAnnotations(FormatAnnotations formatAnnotations) {
+		addStepFactory(formatAnnotations);
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -691,6 +691,7 @@ public void withinBlocks(String name, String open, String close, Action<FormatEx
 	 *     target '*.md'
 	 *     withinBlocks 'java examples', '\n```java\n', '\n```\n', com.diffplug.gradle.spotless.JavaExtension, {
 	 *       googleJavaFormat()
+	 *       formatAnnotations()
 	 *     }
 	 *     ...
 	 * </pre>

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/Java.java
Patch:
@@ -62,7 +62,7 @@ public void addRemoveUnusedImports(RemoveUnusedImports removeUnusedImports) {
 		addStepFactory(removeUnusedImports);
 	}
 
-	public void addTypeAnnotations(TypeAnnotations typeAnnotations) {
-		addStepFactory(typeAnnotations);
+	public void addFormatAnnotations(FormatAnnotations formatAnnotations) {
+		addStepFactory(formatAnnotations);
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -120,7 +120,7 @@ public GoogleJavaFormatConfig googleJavaFormat() {
 	 * Uses the given version of <a href="https://github.com/google/google-java-format">google-java-format</a> to format source code.
 	 *
 	 * Limited to published versions.  See <a href="https://github.com/diffplug/spotless/issues/33#issuecomment-252315095">issue #33</a>
-	 * for an workaround for using snapshot versions.
+	 * for a workaround for using snapshot versions.
 	 */
 	public GoogleJavaFormatConfig googleJavaFormat(String version) {
 		Objects.requireNonNull(version);
@@ -185,7 +185,7 @@ public PalantirJavaFormatConfig palantirJavaFormat() {
 	 * Uses the given version of <a href="https://github.com/palantir/palantir-java-format">palantir-java-format</a> to format source code.
 	 *
 	 * Limited to published versions.  See <a href="https://github.com/diffplug/spotless/issues/33#issuecomment-252315095">issue #33</a>
-	 * for an workaround for using snapshot versions.
+	 * for a workaround for using snapshot versions.
 	 */
 	public PalantirJavaFormatConfig palantirJavaFormat(String version) {
 		Objects.requireNonNull(version);

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/SpotlessEclipseFramework.java
Patch:
@@ -61,7 +61,7 @@ public enum DefaultBundles {
 		REGISTRY(org.eclipse.core.internal.registry.osgi.Activator.class),
 		/** Eclipse preferences always check whether this bundle has been activated before preference are set.*/
 		PREFERENCES(org.eclipse.core.internal.preferences.Activator.class),
-		/** The common runtime provides provides common services, like log and service adapters registry. */
+		/** The common runtime provides common services, like log and service adapters registry. */
 		COMMON(org.eclipse.core.internal.runtime.Activator.class);
 
 		private final Class<? extends BundleActivator> activatorClass;

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/osgi/BundleController.java
Patch:
@@ -76,7 +76,7 @@ public BundleController() throws BundleException {
 		services.add(org.osgi.service.packageadmin.PackageAdmin.class, bundleLookup);
 		services.add(FrameworkWiring.class, bundleLookup);
 
-		//Redirect framework activator requests to the the org.eclipse.osgi bundle to this instance.
+		//Redirect framework activator requests to the org.eclipse.osgi bundle to this instance.
 		bundles.add(new SimpleBundle(systemBundle, ECLIPSE_LAUNCHER_SYMBOLIC_NAME, Bundle.ACTIVE));
 		FrameworkBundleRegistry.initialize(this);
 	}

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/PluginPreferences.java
Patch:
@@ -33,7 +33,7 @@
 import org.eclipse.wst.xml.core.internal.catalog.provisional.ICatalog;
 
 /**
- * The plugin preference configuration of most WTP formatters is accomplished via the the
+ * The plugin preference configuration of most WTP formatters is accomplished via the
  * globabl Eclipse preference lookup.
  * Spotless allows different formatter configurations per sub-projects.
  * Fortunately most formatters only perform a lookup on instantiation and not afterwards.

File: lib/src/main/java/com/diffplug/spotless/FeatureClassLoader.java
Patch:
@@ -30,7 +30,7 @@
  * This class loader is used to load classes of Spotless features from a search
  * path of URLs.<br/>
  * Features shall be independent from build tools. Hence the class loader of the
- * underlying build tool is e.g. skipped during the the search for classes.<br/>
+ * underlying build tool is e.g. skipped during the search for classes.<br/>
  *
  * For `com.diffplug.spotless.glue.`, classes are redefined from within the lib jar
  * but linked against the `Url[]`. This allows us to ship classfiles which function as glue

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -236,7 +236,7 @@ public static DirtyState calculateDirtyState(Formatter formatter, File file, byt
 
 	/**
 	 * The clean/dirty state of a single file.  Intended use:
-	 * - {@link #isClean()} means that the file is is clean, and there's nothing else to say
+	 * - {@link #isClean()} means that the file is clean, and there's nothing else to say
 	 * - {@link #didNotConverge()} means that we were unable to determine a clean state
 	 * - once you've tested the above conditions and you know that it's a dirty file with a converged state,
 	 *   then you can call {@link #writeCanonicalTo(OutputStream)} to get the canonical form of the given file.

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/TypeAnnotationsStepTest.java
Patch:
@@ -22,7 +22,7 @@
 class TypeAnnotationsStepTest extends MavenIntegrationHarness {
 
 	@Test
-	void testRemoveUnusedInports() throws Exception {
+	void testTypeAnnotations() throws Exception {
 		writePomWithJavaSteps("<typeAnnotations/>");
 
 		String path = "src/main/java/test.java";

File: lib/src/main/java/com/diffplug/spotless/java/TypeAnnotationsStep.java
Patch:
@@ -51,7 +51,9 @@ private static final class State implements Serializable {
 		 */
 		private static final Set<String> typeAnnotations = new HashSet<>(
 				Arrays.asList(
-						// Type annotations from the Checker Framework.
+						// Type annotations from the Checker Framework and all the tools it
+						// supports, including FindBugs, JetBrains (IntelliJ), Eclipse, NetBeans,
+						// Spring, JML, Android, etc.
 						"A",
 						"ACCBottom",
 						"Acceleration",

File: lib/src/ktlint/java/com/diffplug/spotless/glue/ktlint/KtlintFormatterFunc.java
Patch:
@@ -111,7 +111,7 @@ static class FormatterCallback implements Function2<LintError, Boolean, Unit> {
 		@Override
 		public Unit invoke(LintError lint, Boolean corrected) {
 			if (!corrected) {
-				throw new AssertionError("Error on line: " + lint.getLine() + ", column: " + lint.getCol() + "\n" + lint.getDetail());
+				throw new AssertionError("Error on line: " + lint.getLine() + ", column: " + lint.getCol() + "\nrule: " + lint.getRuleId() + "\n" + lint.getDetail());
 			}
 			return null;
 		}

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -32,6 +32,7 @@ void behavior() throws Exception {
 				.testResourceException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
 					assertion.hasMessage("Error on line: 1, column: 1\n" +
+							"rule: no-wildcard-imports\n" +
 							"Wildcard import");
 				});
 	}
@@ -44,6 +45,7 @@ void worksPre0_46_1() throws Exception {
 				.testResourceException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
 					assertion.hasMessage("Error on line: 1, column: 1\n" +
+							"rule: no-wildcard-imports\n" +
 							"Wildcard import");
 				});
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ScalaExtension.java
Patch:
@@ -54,6 +54,7 @@ public class ScalaFmtConfig {
 
 		ScalaFmtConfig(String version) {
 			this.version = Objects.requireNonNull(version);
+			addStep(createStep());
 		}
 
 		public ScalaFmtConfig configFile(Object configFile) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/scala/Scalafmt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ScalaExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -32,6 +32,7 @@ void behavior() throws Exception {
 				.testResourceException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
 					assertion.hasMessage("Error on line: 1, column: 1\n" +
+							"rule: no-wildcard-imports\n" +
 							"Wildcard import");
 				});
 	}
@@ -44,6 +45,7 @@ void worksPre0_46_1() throws Exception {
 				.testResourceException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
 					assertion.hasMessage("Error on line: 1, column: 1\n" +
+							"rule: no-wildcard-imports\n" +
 							"Wildcard import");
 				});
 	}

File: lib/src/ktlint/java/com/diffplug/spotless/glue/ktlint/KtlintFormatterFunc.java
Patch:
@@ -111,7 +111,7 @@ static class FormatterCallback implements Function2<LintError, Boolean, Unit> {
 		@Override
 		public Unit invoke(LintError lint, Boolean corrected) {
 			if (!corrected) {
-				throw new AssertionError("Error on line: " + lint.getLine() + ", column: " + lint.getCol() + "\n" + lint.getRuleId() + "\n" + lint.getDetail());
+				throw new AssertionError("Error on line: " + lint.getLine() + ", column: " + lint.getCol() + "\nrule: " + lint.getRuleId() + "\n" + lint.getDetail());
 			}
 			return null;
 		}

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -32,7 +32,7 @@ private DiktatStep() {}
 
 	private static final String MIN_SUPPORTED_VERSION = "1.2.1";
 
-	private static final String DEFAULT_VERSION = "1.2.1";
+	private static final String DEFAULT_VERSION = "1.2.3";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String MAVEN_COORDINATE = PACKAGE_DIKTAT + ":diktat-rules:";

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -112,7 +112,7 @@ String format(ProcessRunner runner, String input, File file) throws IOException,
 			}
 			final String[] processArgs = args.toArray(new String[args.size() + 1]);
 			processArgs[processArgs.length - 1] = "--assume-filename=" + file.getName();
-			return runner.exec(input.getBytes(StandardCharsets.UTF_8), args).assertExitZero(StandardCharsets.UTF_8);
+			return runner.exec(input.getBytes(StandardCharsets.UTF_8), processArgs).assertExitZero(StandardCharsets.UTF_8);
 		}
 
 		FormatterFunc.Closeable toFunc() {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -105,6 +105,7 @@ static abstract class ClientTask extends DefaultTask {
 		protected abstract ObjectFactory getConfigCacheWorkaround();
 
 		void init(SpotlessTaskImpl impl) {
+			usesService(impl.getTaskServiceProvider());
 			getSpotlessOutDirectory().set(impl.getOutputDirectory());
 			getTaskService().set(impl.getTaskService());
 			getProjectDir().set(impl.getProjectDir());

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ConfigurationCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,8 @@ public class ConfigurationCacheTest extends GradleIntegrationHarness {
 	@Override
 	protected GradleRunner gradleRunner() throws IOException {
 		setFile("gradle.properties").toContent("org.gradle.unsafe.configuration-cache=true");
-		return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
+		setFile("settings.gradle").toContent("enableFeaturePreview(\"STABLE_CONFIGURATION_CACHE\")");
+		return super.gradleRunner().withGradleVersion(GradleVersionSupport.STABLE_CONFIGURATION_CACHE.version);
 	}
 
 	@Test

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -105,6 +105,7 @@ static abstract class ClientTask extends DefaultTask {
 		protected abstract ObjectFactory getConfigCacheWorkaround();
 
 		void init(SpotlessTaskImpl impl) {
+			usesService(impl.getTaskServiceProvider());
 			getSpotlessOutDirectory().set(impl.getOutputDirectory());
 			getTaskService().set(impl.getTaskService());
 			getProjectDir().set(impl.getProjectDir());

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ConfigurationCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,8 @@ public class ConfigurationCacheTest extends GradleIntegrationHarness {
 	@Override
 	protected GradleRunner gradleRunner() throws IOException {
 		setFile("gradle.properties").toContent("org.gradle.unsafe.configuration-cache=true");
-		return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
+		setFile("settings.gradle").toContent("enableFeaturePreview(\"STABLE_CONFIGURATION_CACHE\")");
+		return super.gradleRunner().withGradleVersion(GradleVersionSupport.STABLE_CONFIGURATION_CACHE.version);
 	}
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ConfigurationCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -25,7 +25,8 @@ public class ConfigurationCacheTest extends GradleIntegrationHarness {
 	@Override
 	protected GradleRunner gradleRunner() throws IOException {
 		setFile("gradle.properties").toContent("org.gradle.unsafe.configuration-cache=true");
-		return super.gradleRunner().withGradleVersion(GradleVersionSupport.CONFIGURATION_CACHE.version);
+		setFile("settings.gradle").toContent("enableFeaturePreview(\"STABLE_CONFIGURATION_CACHE\")");
+		return super.gradleRunner().withGradleVersion(GradleVersionSupport.STABLE_CONFIGURATION_CACHE.version);
 	}
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationHarness.java
Patch:
@@ -43,7 +43,9 @@ public class GradleIntegrationHarness extends ResourceHarness {
 	public enum GradleVersionSupport {
 		JRE_11("5.0"), MINIMUM(SpotlessPlugin.MINIMUM_GRADLE),
 		// technically, this API exists in 6.5, but the flags for it change in 6.6, so we build to that
-		CONFIGURATION_CACHE("6.6");
+		CONFIGURATION_CACHE("6.6"),
+		// https://docs.gradle.org/7.5/userguide/configuration_cache.html#config_cache:stable
+		STABLE_CONFIGURATION_CACHE("7.5");
 
 		final String version;
 

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -91,9 +91,9 @@ static class State implements Serializable {
 		// used for up-to-date checks and caching
 		final String version;
 		final @Nullable String style;
-		final ForeignExe exe;
+		final transient ForeignExe exe;
 		// used for executing
-		private @Nullable List<String> args;
+		private transient @Nullable List<String> args;
 
 		State(ClangFormatStep step, ForeignExe pathToExe) {
 			this.version = step.version;

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -74,9 +74,9 @@ static class State implements Serializable {
 		private static final long serialVersionUID = -1825662356883926318L;
 		// used for up-to-date checks and caching
 		final String version;
-		final ForeignExe exe;
+		final transient ForeignExe exe;
 		// used for executing
-		private @Nullable String[] args;
+		private transient @Nullable String[] args;
 
 		State(BlackStep step, ForeignExe exeAbsPath) {
 			this.version = step.version;

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/kotlin/DiktatTest.java
Patch:
@@ -40,7 +40,7 @@ void testDiktatWithVersion() throws Exception {
 
 		writePomWithKotlinSteps(
 				"<diktat>",
-				"  <version>1.0.1</version>",
+				"  <version>1.2.0</version>",
 				"</diktat>");
 
 		String path = "src/main/kotlin/Main.kt";
@@ -56,7 +56,7 @@ void testDiktatConfig() throws Exception {
 		File conf = setFile(configPath).toResource("kotlin/diktat/diktat-analysis.yml");
 		writePomWithKotlinSteps(
 				"<diktat>",
-				"  <version>1.0.1</version>",
+				"  <version>1.2.0</version>",
 				"  <configFile>" + conf.getAbsolutePath() + "</configFile>",
 				"</diktat>");
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/kotlin/Diktat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,8 +15,6 @@
  */
 package com.diffplug.spotless.maven.kotlin;
 
-import java.util.Collections;
-
 import org.apache.maven.plugins.annotations.Parameter;
 
 import com.diffplug.spotless.FileSignature;

File: lib/src/diktat/java/com/diffplug/spotless/glue/diktat/DiktatFormatterFunc.java
Patch:
@@ -20,10 +20,10 @@
 
 import org.cqfn.diktat.ruleset.rules.DiktatRuleSetProvider;
 
-import com.pinterest.ktlint.core.api.EditorConfigOverride;
 import com.pinterest.ktlint.core.KtLint;
 import com.pinterest.ktlint.core.LintError;
 import com.pinterest.ktlint.core.RuleSet;
+import com.pinterest.ktlint.core.api.EditorConfigOverride;
 
 import com.diffplug.spotless.FormatterFunc;
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/kotlin/Diktat.java
Patch:
@@ -41,6 +41,6 @@ public FormatterStep newFormatterStep(FormatterStepConfig stepConfig) {
 			config = ThrowingEx.get(() -> FileSignature.signAsList(stepConfig.getFileLocator().locateFile(configFile)));
 		}
 		String diktatVersion = version != null ? version : DiktatStep.defaultVersionDiktat();
-		return DiktatStep.create(diktatVersion, stepConfig.getProvisioner(), Collections.emptyMap(), config);
+		return DiktatStep.create(diktatVersion, stepConfig.getProvisioner(), config);
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -60,6 +60,7 @@ private static final class State implements Serializable {
 		private final String formatterVersion;
 
 		State(JarState jarState, String formatterVersion) {
+			ModuleHelper.doOpenInternalPackagesIfRequired();
 			this.jarState = jarState;
 			this.formatterVersion = formatterVersion;
 		}

File: lib/src/main/java/com/diffplug/spotless/java/PalantirJavaFormatStep.java
Patch:
@@ -60,6 +60,7 @@ private static final class State implements Serializable {
 		private final String formatterVersion;
 
 		State(JarState jarState, String formatterVersion) {
+			ModuleHelper.doOpenInternalPackagesIfRequired();
 			this.jarState = jarState;
 			this.formatterVersion = formatterVersion;
 		}

File: lib/src/main/java/com/diffplug/spotless/java/ModuleHelper.java
Patch:
@@ -102,7 +102,9 @@ private static void openPackages(Collection<String> packagesToOpen) throws Throw
 		if (modules == null) {
 			return;
 		}
-		final Unsafe unsafe = Unsafe.getUnsafe();
+		final Field unsafeField = Unsafe.class.getDeclaredField("theUnsafe");
+		unsafeField.setAccessible(true);
+		final Unsafe unsafe = (Unsafe) unsafeField.get(null);
 		final Field implLookupField = MethodHandles.Lookup.class.getDeclaredField("IMPL_LOOKUP");
 		final MethodHandles.Lookup lookup = (MethodHandles.Lookup) unsafe.getObject(
 				unsafe.staticFieldBase(implLookupField),

File: lib/src/main/java/com/diffplug/spotless/Jvm.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -136,6 +136,7 @@ static final class State implements Serializable {
 
 		State(String stepName, String groupArtifact, String version, String style, Provisioner provisioner, boolean reflowLongStrings) throws Exception {
 			JVM_SUPPORT.assertFormatterSupported(version);
+			ModuleHelper.doOpenInternalPackagesIfRequired();
 			this.jarState = JarState.from(groupArtifact + ":" + version, provisioner);
 			this.stepName = stepName;
 			this.version = version;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ProtobufExtension.java
Patch:
@@ -42,7 +42,7 @@ public LicenseHeaderConfig licenseHeaderFile(Object licenseHeaderFile) {
 		return licenseHeaderFile(licenseHeaderFile, LICENSE_HEADER_DELIMITER);
 	}
 
-	/** Adds the specified version of <a href="https://github.com/pinterest/ktlint">ktlint</a>. */
+	/** Adds the specified version of <a href="https://buf.build/">buf</a>. */
 	public BufFormatExtension buf(String version) {
 		Objects.requireNonNull(version);
 		return new BufFormatExtension(version);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -128,7 +128,7 @@ private static Provisioner forConfigurationContainer(Project project, Configurat
 					projName = projName + "/";
 				}
 				throw new GradleException(String.format(
-						"You need to add a repository containing the '%s' artifact in '%sbuild.gradle'.\n" +
+						"You need to add a repository containing the '%s' artifact in '%sbuild.gradle'.%n" +
 								"E.g.: 'repositories { mavenCentral() }'",
 						mavenCoords, projName), e);
 			}

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.36";
+	private static final String DEFAULT_VERSION = "0.37";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -64,7 +64,7 @@ private State createState() throws IOException, InterruptedException {
 		String trackingIssue = "\n  github issue to handle this better: https://github.com/diffplug/spotless/issues/674";
 		String exeAbsPath = ForeignExe.nameAndVersion("black", version)
 				.pathToExe(pathToExe)
-				.versionRegex(Pattern.compile("(?:black,|version) (\\S*)"))
+				.versionRegex(Pattern.compile("(?:black, version|black,|version) (\\S*)"))
 				.fixCantFind("Try running {@code pip install black=={version}}, or else tell Spotless where it is with {@code black().pathToExe('path/to/executable')}" + trackingIssue)
 				.fixWrongVersion("Try running {@code pip install --force-reinstall black=={version}}, or else specify {@code black('{versionFound}')} to Spotless" + trackingIssue)
 				.confirmVersionAndGetAbsolutePath();

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -64,7 +64,7 @@ private State createState() throws IOException, InterruptedException {
 		String trackingIssue = "\n  github issue to handle this better: https://github.com/diffplug/spotless/issues/674";
 		String exeAbsPath = ForeignExe.nameAndVersion("black", version)
 				.pathToExe(pathToExe)
-				.versionRegex(Pattern.compile("(?:black,|version) (\\S*)"))
+				.versionRegex(Pattern.compile("(?:black, version|black,|version) (\\S*)"))
 				.fixCantFind("Try running {@code pip install black=={version}}, or else tell Spotless where it is with {@code black().pathToExe('path/to/executable')}" + trackingIssue)
 				.fixWrongVersion("Try running {@code pip install --force-reinstall black=={version}}, or else specify {@code black('{versionFound}')} to Spotless" + trackingIssue)
 				.confirmVersionAndGetAbsolutePath();

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -93,7 +93,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 				State::createFormat);
 	}
 
-	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.13.0");
+	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.15.0");
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -93,7 +93,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 				State::createFormat);
 	}
 
-	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.13.0");
+	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.15.0");
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.35";
+	private static final String DEFAULT_VERSION = "0.36";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ void behavior() throws Exception {
 				.testResource("kotlin/ktlint/basic.dirty", "kotlin/ktlint/basic.clean")
 				.testResourceException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
-					assertion.hasMessage("Error on line: 1, column: 2\n" +
+					assertion.hasMessage("Error on line: 1, column: 1\n" +
 							"Wildcard import");
 				});
 	}

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -38,7 +38,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.43.2";
+	private static final String DEFAULT_VERSION = "0.45.2";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -39,7 +39,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.34";
+	private static final String DEFAULT_VERSION = "0.35";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -29,14 +29,15 @@
 import org.gradle.api.Project;
 import org.gradle.api.tasks.TaskContainer;
 import org.gradle.api.tasks.TaskProvider;
+import org.gradle.language.base.plugins.LifecycleBasePlugin;
 
 import com.diffplug.spotless.LineEnding;
 
 public abstract class SpotlessExtension {
 	final Project project;
 	private final RegisterDependenciesTask registerDependenciesTask;
 
-	protected static final String TASK_GROUP = "Verification";
+	protected static final String TASK_GROUP = LifecycleBasePlugin.VERIFICATION_GROUP;
 	protected static final String CHECK_DESCRIPTION = "Checks that sourcecode satisfies formatting steps.";
 	protected static final String APPLY_DESCRIPTION = "Applies code formatting steps to sourcecode in-place.";
 

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -37,7 +37,7 @@ public static String name() {
 	}
 
 	public static String defaultVersion() {
-		return "19.10b0";
+		return "22.3.0";
 	}
 
 	private final String version;

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.List;
+import java.util.regex.Pattern;
 
 import javax.annotation.Nullable;
 
@@ -63,6 +64,7 @@ private State createState() throws IOException, InterruptedException {
 		String trackingIssue = "\n  github issue to handle this better: https://github.com/diffplug/spotless/issues/674";
 		String exeAbsPath = ForeignExe.nameAndVersion("black", version)
 				.pathToExe(pathToExe)
+				.versionRegex(Pattern.compile("(?:black,|version) (\\S*)"))
 				.fixCantFind("Try running {@code pip install black=={version}}, or else tell Spotless where it is with {@code black().pathToExe('path/to/executable')}" + trackingIssue)
 				.fixWrongVersion("Try running {@code pip install --force-reinstall black=={version}}, or else specify {@code black('{versionFound}')} to Spotless" + trackingIssue)
 				.confirmVersionAndGetAbsolutePath();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -172,7 +172,7 @@ static class RuntimeInit {
 			//////////////////////////
 			// REPO-SPECIFIC VALUES //
 			//////////////////////////
-			RepositorySpecificResolver repositoryResolver = GitWorkarounds.fileRepositoryResolverForProject(projectDir);
+			RepositorySpecificResolver repositoryResolver = GitWorkarounds.fileRepositoryResolverForProject(projectDir, userConfig);
 			if (repositoryResolver.getGitDir() != null) {
 				workTree = repositoryResolver.getWorkTree();
 				repoConfig = repositoryResolver.getRepositoryConfig();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitWorkarounds.java
Patch:
@@ -74,7 +74,7 @@ static RepositorySpecificResolver fileRepositoryResolverForProject(File projectD
 	 * @param baseConfig the user and system level git config.
 	 * @return the builder.
 	 */
-	static RepositorySpecificResolver fileRepositoryResolverForProject(File projectDir, Config baseConfig) {
+	static RepositorySpecificResolver fileRepositoryResolverForProject(File projectDir, @Nullable Config baseConfig) {
 		RepositorySpecificResolver repositoryResolver = new RepositorySpecificResolver(baseConfig);
 		repositoryResolver.findGitDir(projectDir);
 		repositoryResolver.readEnvironment();
@@ -113,7 +113,7 @@ public RepositorySpecificResolver() {
 			this(null);
 		}
 
-		public RepositorySpecificResolver(Config baseConfig) {
+		public RepositorySpecificResolver(@Nullable Config baseConfig) {
 			this.baseConfig = baseConfig;
 		}
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -172,7 +172,7 @@ static class RuntimeInit {
 			//////////////////////////
 			// REPO-SPECIFIC VALUES //
 			//////////////////////////
-			RepositorySpecificResolver repositoryResolver = GitWorkarounds.fileRepositoryResolverForProject(projectDir);
+			RepositorySpecificResolver repositoryResolver = GitWorkarounds.fileRepositoryResolverForProject(projectDir, userConfig);
 			if (repositoryResolver.getGitDir() != null) {
 				workTree = repositoryResolver.getWorkTree();
 				repoConfig = repositoryResolver.getRepositoryConfig();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -141,9 +141,9 @@ private FormatterStep createStep() {
 			return KtfmtStep.create(version, provisioner(), style, options);
 		}
 
-		class ConfigurableStyle {
+		public class ConfigurableStyle {
 
-			void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
+			public void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
 				KtfmtFormattingOptions ktfmtFormattingOptions = new KtfmtFormattingOptions();
 				optionsConfiguration.accept(ktfmtFormattingOptions);
 				options = ktfmtFormattingOptions;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinGradleExtension.java
Patch:
@@ -128,9 +128,9 @@ private FormatterStep createStep() {
 			return KtfmtStep.create(version, provisioner(), style, options);
 		}
 
-		class ConfigurableStyle {
+		public class ConfigurableStyle {
 
-			void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
+			public void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
 				KtfmtFormattingOptions ktfmtFormattingOptions = new KtfmtFormattingOptions();
 				optionsConfiguration.accept(ktfmtFormattingOptions);
 				options = ktfmtFormattingOptions;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -141,9 +141,9 @@ private FormatterStep createStep() {
 			return KtfmtStep.create(version, provisioner(), style, options);
 		}
 
-		class ConfigurableStyle {
+		public class ConfigurableStyle {
 
-			void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
+			public void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
 				KtfmtFormattingOptions ktfmtFormattingOptions = new KtfmtFormattingOptions();
 				optionsConfiguration.accept(ktfmtFormattingOptions);
 				options = ktfmtFormattingOptions;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinGradleExtension.java
Patch:
@@ -128,9 +128,9 @@ private FormatterStep createStep() {
 			return KtfmtStep.create(version, provisioner(), style, options);
 		}
 
-		class ConfigurableStyle {
+		public class ConfigurableStyle {
 
-			void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
+			public void configure(Consumer<KtfmtFormattingOptions> optionsConfiguration) {
 				KtfmtFormattingOptions ktfmtFormattingOptions = new KtfmtFormattingOptions();
 				optionsConfiguration.accept(ktfmtFormattingOptions);
 				options = ktfmtFormattingOptions;

File: lib/src/ktlint/java/com/diffplug/spotless/glue/ktlint/KtlintFormatterFunc.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: testlib/src/test/java/com/diffplug/spotless/json/gson/GsonStepTest.java
Patch:
@@ -17,14 +17,13 @@
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
-import com.diffplug.spotless.json.JsonFormatterStepCommonTests;
-
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.Provisioner;
 import com.diffplug.spotless.StepHarness;
 import com.diffplug.spotless.TestProvisioner;
+import com.diffplug.spotless.json.JsonFormatterStepCommonTests;
 
 public class GsonStepTest extends JsonFormatterStepCommonTests {
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitWorkarounds.java
Patch:
@@ -32,6 +32,8 @@
 
 import com.diffplug.common.base.Errors;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Utility methods for Git workarounds.
  */
@@ -172,6 +174,7 @@ private static IOException emptyFile(File commonDir) {
 			return new IOException("Empty 'commondir' file: " + commonDir.getAbsolutePath());
 		}
 
+		@SuppressFBWarnings(value = "BC_UNCONFIRMED_CAST_OF_RETURN_VALUE")
 		@Override
 		public FileRepositoryBuilder readEnvironment(SystemReader sr) {
 			super.readEnvironment(sr);

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -93,7 +93,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 				State::createFormat);
 	}
 
-	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.12.0");
+	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.13.0");
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.29";
+	private static final String DEFAULT_VERSION = "0.30";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.29";
+	private static final String DEFAULT_VERSION = "0.30";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -93,7 +93,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 				State::createFormat);
 	}
 
-	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.12.0");
+	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.13.0");
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: testlib/src/test/java/com/diffplug/spotless/java/GoogleJavaFormatStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 
 import static org.junit.jupiter.api.condition.JRE.JAVA_11;
 import static org.junit.jupiter.api.condition.JRE.JAVA_13;
+import static org.junit.jupiter.api.condition.JRE.JAVA_15;
 
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -41,7 +42,7 @@ void jvm13Features() throws Exception {
 	}
 
 	@Test
-	@EnabledForJreRange(min = JAVA_11) // google-java-format requires JRE 11+
+	@EnabledForJreRange(min = JAVA_11, max = JAVA_15) // google-java-format requires JRE 11+
 	void behavior18() throws Exception {
 		FormatterStep step = GoogleJavaFormatStep.create("1.8", TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/WithinBlockTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 DiffPlug
+ * Copyright 2020-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -53,7 +53,7 @@ void withinBlocksTourDeForce() throws IOException {
 				"      custom 'lowercase', { str -> str.toLowerCase() }",
 				"    }",
 				"    withinBlocks 'java only', '\\n```java\\n', '\\n```\\n', JavaExtension, {",
-				"      googleJavaFormat()",
+				"      googleJavaFormat('1.2')",
 				"    }",
 				"  }",
 				"}");

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -275,6 +275,6 @@ public void predeclareDeps() {
 	}
 
 	protected void predeclare(GradleProvisioner.Policy policy) {
-		project.getExtensions().create(SpotlessExtension.class, EXTENSION_PREDECLARE, SpotlessExtensionPredeclare.class, project, policy);
+		project.getExtensions().create(SpotlessExtensionPredeclare.class, EXTENSION_PREDECLARE, SpotlessExtensionPredeclare.class, project, policy);
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -275,6 +275,6 @@ public void predeclareDeps() {
 	}
 
 	protected void predeclare(GradleProvisioner.Policy policy) {
-		project.getExtensions().create(SpotlessExtension.class, EXTENSION_PREDECLARE, SpotlessExtensionPredeclare.class, project, policy);
+		project.getExtensions().create(SpotlessExtensionPredeclare.class, EXTENSION_PREDECLARE, SpotlessExtensionPredeclare.class, project, policy);
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PalantirJavaFormatIntegrationTest.java
Patch:
@@ -42,7 +42,7 @@ void integration() throws IOException {
 		checkRunsThenUpToDate();
 		replace("build.gradle",
 				"palantirJavaFormat('1.1.0')",
-				"palantirJavaFormat('2.10.0')");
+				"palantirJavaFormat('1.0.1')");
 		checkRunsThenUpToDate();
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/SpotlessCheckMojoTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -59,7 +59,8 @@ void testSpotlessCheckBindingToVerifyPhase() throws Exception {
 						"  <licenseHeader>",
 						"    <file>${basedir}/license.txt</file>",
 						"  </licenseHeader>",
-						"</java>"});
+						"</java>"},
+				null);
 
 		testSpotlessCheck(UNFORMATTED_FILE, "verify", true);
 	}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/FileIndexConfig.java
Patch:
@@ -22,7 +22,6 @@
 class FileIndexConfig {
 	private final MavenProject project;
 	private final PluginFingerprint pluginFingerprint;
-
 	private final Path indexFile;
 
 	FileIndexConfig(MavenProject project, Path indexFile) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/UpToDateChecking.java
Patch:
@@ -18,6 +18,8 @@
 import java.io.File;
 import java.nio.file.Path;
 
+import javax.annotation.Nullable;
+
 import org.apache.maven.plugins.annotations.Parameter;
 
 public class UpToDateChecking {
@@ -32,6 +34,7 @@ public boolean isEnabled() {
 		return enabled;
 	}
 
+	@Nullable
 	public Path getIndexFile() {
 		return indexFile == null ? null : new File(indexFile).toPath();
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -63,7 +63,7 @@ static void configureCleanTask(Project project, Consumer<Delete> onClean) {
 
 	/** clean removes the SpotlessCache, so we have to run after clean. */
 	static void taskMustRunAfterClean(Project project, TaskProvider<?> task) {
-		configureCleanTask(project, clean -> task.get().mustRunAfter(clean));
+		configureCleanTask(project, clean -> task.configure(spotless -> spotless.mustRunAfter(clean)));
 	}
 
 	static String capitalize(String input) {

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public class DiktatStep {
 	// prevent direct instantiation
 	private DiktatStep() {}
 
-	private static final String DEFAULT_VERSION = "0.4.0";
+	private static final String DEFAULT_VERSION = "1.0.1";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String PACKAGE_KTLINT = "com.pinterest.ktlint";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -90,8 +90,7 @@ void integration_default_diktat() throws IOException {
 				"}");
 		setFile("configuration.gradle.kts").toResource("kotlin/diktat/basic.dirty");
 		BuildResult result = gradleRunner().withArguments("spotlessApply").buildAndFail();
-		assertThat(result.getOutput()).contains("[HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE] files that contain multiple "
-				+ "or no classes should contain description of what is inside of this file: there are 0 declared classes and/or objects");
+		assertThat(result.getOutput()).contains("[AVOID_NESTED_FUNCTIONS] try to avoid using nested functions");
 	}
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -90,8 +90,7 @@ void integration_default_diktat() throws IOException {
 				"}");
 		setFile("configuration.gradle.kts").toResource("kotlin/diktat/basic.dirty");
 		BuildResult result = gradleRunner().withArguments("spotlessApply").buildAndFail();
-		assertThat(result.getOutput()).contains("[HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE] files that contain multiple "
-				+ "or no classes should contain description of what is inside of this file: there are 0 declared classes and/or objects");
+		assertThat(result.getOutput()).contains("[AVOID_NESTED_FUNCTIONS] try to avoid using nested functions");
 	}
 
 	@Test

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 DiffPlug
+ * Copyright 2021-2022 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public class DiktatStep {
 	// prevent direct instantiation
 	private DiktatStep() {}
 
-	private static final String DEFAULT_VERSION = "0.4.0";
+	private static final String DEFAULT_VERSION = "1.0.1";
 	static final String NAME = "diktat";
 	static final String PACKAGE_DIKTAT = "org.cqfn.diktat";
 	static final String PACKAGE_KTLINT = "com.pinterest.ktlint";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/groovy/Groovy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
  */
 public class Groovy extends FormatterFactory {
 
-	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/groovy/**/*.groovy", "src/test/groovy/**/*.groovy", "src/main/java/**/*.java", "src/test/java/**/*.java");
+	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/groovy/**/*.groovy", "src/test/groovy/**/*.groovy");
 	private static final String LICENSE_HEADER_DELIMITER = "package ";
 
 	@Override

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/groovy/Groovy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
  */
 public class Groovy extends FormatterFactory {
 
-	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/groovy/**/*.groovy", "src/test/groovy/**/*.groovy", "src/main/java/**/*.java", "src/test/java/**/*.java");
+	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/main/groovy/**/*.groovy", "src/test/groovy/**/*.groovy");
 	private static final String LICENSE_HEADER_DELIMITER = "package ";
 
 	@Override

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/EclipseFormatStepTest.java
Patch:
@@ -26,7 +26,6 @@ void testEclipse() throws Exception {
 		writePomWithJavaSteps(
 				"<eclipse>",
 				"  <file>${basedir}/formatter.xml</file>",
-				"  <version>4.7.1</version>",
 				"</eclipse>");
 		setFile("formatter.xml").toResource("java/eclipse/formatter.xml");
 

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -115,7 +115,7 @@ public static boolean defaultReflowLongStrings() {
 	static final class State implements Serializable {
 		private static final long serialVersionUID = 1L;
 
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 		final String stepName;
 		final String version;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -82,7 +82,7 @@ static final class State implements Serializable {
 		/** Are the files being linted Kotlin script files. */
 		private final boolean isScript;
 		private final String pkg;
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 		private final TreeMap<String, String> userData;
 		private final boolean useParams;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -108,7 +108,7 @@ static final class State implements Serializable {
 		 * Option that allows to apply formatting options to perform a 4 spaces block and continuation indent.
 		 */
 		private final Style style;
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 
 		State(String version, Provisioner provisioner, Style style) throws IOException {

File: lib/src/main/java/com/diffplug/spotless/markdown/FreshMarkStep.java
Patch:
@@ -65,7 +65,7 @@ public static String defaultVersion() {
 	private static class State implements Serializable {
 		private static final long serialVersionUID = 1L;
 
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 		final NavigableMap<String, ?> properties;
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterFactory.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
 import org.apache.maven.plugins.annotations.Parameter;
@@ -71,10 +72,10 @@ public final Set<String> excludes() {
 		return excludes == null ? emptySet() : Sets.newHashSet(excludes);
 	}
 
-	public final Formatter newFormatter(List<File> filesToFormat, FormatterConfig config) {
+	public final Formatter newFormatter(Supplier<Iterable<File>> filesToFormat, FormatterConfig config) {
 		Charset formatterEncoding = encoding(config);
 		LineEnding formatterLineEndings = lineEndings(config);
-		LineEnding.Policy formatterLineEndingPolicy = formatterLineEndings.createPolicy(config.getFileLocator().getBaseDir(), () -> filesToFormat);
+		LineEnding.Policy formatterLineEndingPolicy = formatterLineEndings.createPolicy(config.getFileLocator().getBaseDir(), filesToFormat);
 
 		FormatterStepConfig stepConfig = stepConfig(formatterEncoding, config);
 		List<FormatterStepFactory> factories = gatherStepFactories(config.getGlobalStepFactories(), stepFactories);

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationHarness.java
Patch:
@@ -140,7 +140,7 @@ protected void writePomWithPomSteps(String... steps) throws IOException {
 	}
 
 	protected void writePomWithMarkdownSteps(String... steps) throws IOException {
-		writePom(groupWithSteps("markdown", steps));
+		writePom(groupWithSteps("markdown", including("**/*.md"), steps));
 	}
 
 	protected void writePom(String... configuration) throws IOException {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -264,7 +264,7 @@ private Set<String> getIncludes(FormatterFactory formatterFactory) throws MojoEx
 		Set<String> configuredIncludes = formatterFactory.includes();
 		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes() : configuredIncludes;
 		if (includes.isEmpty()) {
-			throw new MojoExecutionException("You must specify some files to include, such as '<includes><include>src/**</include></includes>'");
+			throw new MojoExecutionException("You must specify some files to include, such as '<includes><include>src/**/*.blah</include></includes>'");
 		}
 		return includes;
 	}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/markdown/Markdown.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.diffplug.spotless.maven.markdown;
 
+import java.util.Collections;
 import java.util.Set;
 
-import com.diffplug.common.collect.ImmutableSet;
 import com.diffplug.spotless.maven.FormatterFactory;
 import com.diffplug.spotless.maven.generic.LicenseHeader;
 
@@ -30,7 +30,7 @@
 public class Markdown extends FormatterFactory {
 	@Override
 	public Set<String> defaultIncludes() {
-		return ImmutableSet.of("*.md", "**/*.md");
+		return Collections.emptySet();
 	}
 
 	@Override

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -35,6 +35,9 @@ public class SpotlessApplyMojo extends AbstractSpotlessMojo {
 	protected void process(Iterable<File> files, Formatter formatter, UpToDateChecker upToDateChecker) throws MojoExecutionException {
 		for (File file : files) {
 			if (upToDateChecker.isUpToDate(file.toPath())) {
+				if (getLog().isDebugEnabled()) {
+					getLog().debug("Spotless will not format an up-to-date file: " + file);
+				}
 				continue;
 			}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessCheckMojo.java
Patch:
@@ -41,6 +41,9 @@ protected void process(Iterable<File> files, Formatter formatter, UpToDateChecke
 		List<File> problemFiles = new ArrayList<>();
 		for (File file : files) {
 			if (upToDateChecker.isUpToDate(file.toPath())) {
+				if (getLog().isDebugEnabled()) {
+					getLog().debug("Spotless will not check an up-to-date file: " + file);
+				}
 				continue;
 			}
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -320,7 +320,7 @@ private List<FormatterStepFactory> getFormatterStepFactories() {
 	}
 
 	private UpToDateChecker createUpToDateChecker(Iterable<Formatter> formatters) {
-		if (upToDateChecking.isEnabled()) {
+		if (upToDateChecking != null && upToDateChecking.isEnabled()) {
 			getLog().info("Up-to-date checking enabled");
 			return UpToDateChecker.forProject(project, formatters, getLog());
 		}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/incremental/IndexBasedChecker.java
Patch:
@@ -39,9 +39,8 @@ private IndexBasedChecker(FileIndex index) {
 
 	static IndexBasedChecker create(MavenProject project, Iterable<Formatter> formatters, Log log) {
 		PluginFingerprint pluginFingerprint = PluginFingerprint.from(project, formatters);
-		// todo: does this produce the correct dir?
-		Path buildDir = project.getBasedir().toPath().resolve(project.getBuild().getDirectory());
-		FileIndex fileIndex = FileIndex.read(buildDir, pluginFingerprint, log);
+		FileIndexConfig indexConfig = new FileIndexConfig(project, pluginFingerprint);
+		FileIndex fileIndex = FileIndex.read(indexConfig, log);
 		return new IndexBasedChecker(fileIndex);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -115,7 +115,7 @@ public static boolean defaultReflowLongStrings() {
 	static final class State implements Serializable {
 		private static final long serialVersionUID = 1L;
 
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 		final String stepName;
 		final String version;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -82,7 +82,7 @@ static final class State implements Serializable {
 		/** Are the files being linted Kotlin script files. */
 		private final boolean isScript;
 		private final String pkg;
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 		private final TreeMap<String, String> userData;
 		private final boolean useParams;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -108,7 +108,7 @@ static final class State implements Serializable {
 		 * Option that allows to apply formatting options to perform a 4 spaces block and continuation indent.
 		 */
 		private final Style style;
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 
 		State(String version, Provisioner provisioner, Style style) throws IOException {

File: lib/src/main/java/com/diffplug/spotless/markdown/FlexmarkStep.java
Patch:
@@ -54,6 +54,7 @@ public static String defaultVersion() {
 	private static class State implements Serializable {
 		private static final long serialVersionUID = 1L;
 
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 
 		State(JarState jarState) {

File: lib/src/main/java/com/diffplug/spotless/markdown/FreshMarkStep.java
Patch:
@@ -65,7 +65,7 @@ public static String defaultVersion() {
 	private static class State implements Serializable {
 		private static final long serialVersionUID = 1L;
 
-		/** The jar that contains the eclipse formatter. */
+		/** The jar that contains the formatter. */
 		final JarState jarState;
 		final NavigableMap<String, ?> properties;
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -94,7 +94,7 @@ public Set<File> provisionWithTransitives(boolean withTransitives, Collection<St
 			if (result != null) {
 				return result;
 			}
-			throw new GradleException("Add a step with " + req + " into the `spotlessPredeclare` block in the root project.");
+			throw new GradleException("Add a step with " + req.mavenCoords + " into the `spotlessPredeclare` block in the root project.");
 		};
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/MultiProjectTest.java
Patch:
@@ -88,7 +88,7 @@ public void predeclaredFails() throws IOException {
 				"spotless { predeclareDeps() }");
 		createNSubprojects();
 		Assertions.assertThat(gradleRunner().withArguments("spotlessApply").buildAndFail().getOutput())
-				.contains("Add a step with com.google.googlejavaformat:google-java-format:1.2 into the `spotlessPredeclare` block in the root project.");
+				.contains("Add a step with [com.google.googlejavaformat:google-java-format:1.2] into the `spotlessPredeclare` block in the root project.");
 	}
 
 	@Test

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -94,7 +94,7 @@ public Set<File> provisionWithTransitives(boolean withTransitives, Collection<St
 			if (result != null) {
 				return result;
 			}
-			throw new GradleException("Add a step with " + req + " into the root project.");
+			throw new GradleException("Add a step with " + req + " into the `spotlessPredeclare` block in the root project.");
 		};
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/MultiProjectTest.java
Patch:
@@ -88,7 +88,7 @@ public void predeclaredFails() throws IOException {
 				"spotless { predeclareDeps() }");
 		createNSubprojects();
 		Assertions.assertThat(gradleRunner().withArguments("spotlessApply").buildAndFail().getOutput())
-				.contains("Add a step with com.google.googlejavaformat:google-java-format:1.2 with transitives into the root project.");
+				.contains("Add a step with com.google.googlejavaformat:google-java-format:1.2 into the `spotlessPredeclare` block in the root project.");
 	}
 
 	@Test

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/RegisterDependenciesTask.java
Patch:
@@ -52,9 +52,9 @@ void hookSubprojectTask(SpotlessTask task) {
 
 	void setup() {
 		Preconditions.checkArgument(getProject().getRootProject() == getProject(), "Can only be used on the root project");
-
+		String compositeBuildSuffix = getName().substring(TASK_NAME.length()); // see https://github.com/diffplug/spotless/pull/1001
 		BuildServiceRegistry buildServices = getProject().getGradle().getSharedServices();
-		getTaskService().set(buildServices.registerIfAbsent("SpotlessTaskService", SpotlessTaskService.class, spec -> {}));
+		getTaskService().set(buildServices.registerIfAbsent("SpotlessTaskService" + compositeBuildSuffix, SpotlessTaskService.class, spec -> {}));
 		getBuildEventsListenerRegistry().onTaskCompletion(getTaskService());
 	}
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitRatchet.java
Patch:
@@ -169,7 +169,7 @@ protected Repository repositoryFor(Project project) throws IOException {
 
 	protected abstract @Nullable Project getParent(Project project);
 
-	private static @Nullable Repository traverseParentsUntil(File startWith, File file) throws IOException {
+	private static @Nullable Repository traverseParentsUntil(File startWith, @Nullable File file) throws IOException {
 		while (startWith != null && !Objects.equals(startWith, file)) {
 			if (isGitRoot(startWith)) {
 				return createRepo(startWith);

File: lib/src/main/java/com/diffplug/spotless/FormatterProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -93,7 +93,7 @@ private void add(final File settingsFile) throws IllegalArgumentException {
 		try {
 			Properties newSettings = FileParser.parse(settingsFile);
 			properties.putAll(newSettings);
-		} catch (IOException | IllegalArgumentException | NullPointerException exception) {
+		} catch (IOException | IllegalArgumentException exception) {
 			String message = String.format("Failed to add properties from '%s' to formatter settings.", settingsFile);
 			String detailedMessage = exception.getMessage();
 			if (null != detailedMessage) {

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -61,7 +61,7 @@ public static LicenseHeaderStep headerDelimiter(ThrowingEx.Supplier<String> head
 	final String yearSeparator;
 	final Supplier<YearMode> yearMode;
 
-	private LicenseHeaderStep(String name, String contentPattern, ThrowingEx.Supplier<String> headerLazy, String delimiter, String yearSeparator, Supplier<YearMode> yearMode) {
+	private LicenseHeaderStep(@Nullable String name, @Nullable String contentPattern, ThrowingEx.Supplier<String> headerLazy, String delimiter, String yearSeparator, Supplier<YearMode> yearMode) {
 		this.name = sanitizeName(name);
 		this.contentPattern = sanitizeContentPattern(contentPattern);
 		this.headerLazy = Objects.requireNonNull(headerLazy);
@@ -141,7 +141,7 @@ public FormatterStep build() {
 		return formatterStep.filterByContentPattern(contentPattern);
 	}
 
-	private String sanitizeName(String name) {
+	private String sanitizeName(@Nullable String name) {
 		if (name == null) {
 			return DEFAULT_NAME_PREFIX;
 		}
@@ -156,7 +156,7 @@ private String sanitizeName(String name) {
 	}
 
 	@Nullable
-	private String sanitizeContentPattern(String contentPattern) {
+	private String sanitizeContentPattern(@Nullable String contentPattern) {
 		if (contentPattern == null) {
 			return contentPattern;
 		}

File: lib/src/main/java/com/diffplug/spotless/java/ImportOrderStep.java
Patch:
@@ -35,6 +35,8 @@
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public final class ImportOrderStep {
 	private static final boolean WILDCARDS_LAST_DEFAULT = false;
 
@@ -77,6 +79,7 @@ private FormatterStep createFrom(boolean wildcardsLast, Supplier<List<String>> i
 				State::toFormatter);
 	}
 
+	@SuppressFBWarnings("RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE") // workaround https://github.com/spotbugs/spotbugs/issues/756
 	private static List<String> getImportOrder(File importsFile) {
 		try (Stream<String> lines = Files.lines(importsFile.toPath())) {
 			return lines.filter(line -> !line.startsWith("#"))

File: lib/src/main/java/com/diffplug/spotless/npm/SimpleRestClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
 import java.util.Map;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 class SimpleRestClient {
 	private final String baseUrl;
@@ -49,7 +50,7 @@ String post(String endpoint) throws SimpleRestException {
 		return postJson(endpoint, (String) null);
 	}
 
-	String postJson(String endpoint, String rawJson) throws SimpleRestException {
+	String postJson(String endpoint, @Nullable String rawJson) throws SimpleRestException {
 		try {
 			URL url = new URL(this.baseUrl + endpoint);
 			HttpURLConnection con = (HttpURLConnection) url.openConnection();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitRatchet.java
Patch:
@@ -169,7 +169,7 @@ protected Repository repositoryFor(Project project) throws IOException {
 
 	protected abstract @Nullable Project getParent(Project project);
 
-	private static @Nullable Repository traverseParentsUntil(File startWith, File file) throws IOException {
+	private static @Nullable Repository traverseParentsUntil(File startWith, @Nullable File file) throws IOException {
 		while (startWith != null && !Objects.equals(startWith, file)) {
 			if (isGitRoot(startWith)) {
 				return createRepo(startWith);

File: lib/src/main/java/com/diffplug/spotless/FormatterProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -93,7 +93,7 @@ private void add(final File settingsFile) throws IllegalArgumentException {
 		try {
 			Properties newSettings = FileParser.parse(settingsFile);
 			properties.putAll(newSettings);
-		} catch (IOException | IllegalArgumentException | NullPointerException exception) {
+		} catch (IOException | IllegalArgumentException exception) {
 			String message = String.format("Failed to add properties from '%s' to formatter settings.", settingsFile);
 			String detailedMessage = exception.getMessage();
 			if (null != detailedMessage) {

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -61,7 +61,7 @@ public static LicenseHeaderStep headerDelimiter(ThrowingEx.Supplier<String> head
 	final String yearSeparator;
 	final Supplier<YearMode> yearMode;
 
-	private LicenseHeaderStep(String name, String contentPattern, ThrowingEx.Supplier<String> headerLazy, String delimiter, String yearSeparator, Supplier<YearMode> yearMode) {
+	private LicenseHeaderStep(@Nullable String name, @Nullable String contentPattern, ThrowingEx.Supplier<String> headerLazy, String delimiter, String yearSeparator, Supplier<YearMode> yearMode) {
 		this.name = sanitizeName(name);
 		this.contentPattern = sanitizeContentPattern(contentPattern);
 		this.headerLazy = Objects.requireNonNull(headerLazy);
@@ -141,7 +141,7 @@ public FormatterStep build() {
 		return formatterStep.filterByContentPattern(contentPattern);
 	}
 
-	private String sanitizeName(String name) {
+	private String sanitizeName(@Nullable String name) {
 		if (name == null) {
 			return DEFAULT_NAME_PREFIX;
 		}
@@ -156,7 +156,7 @@ private String sanitizeName(String name) {
 	}
 
 	@Nullable
-	private String sanitizeContentPattern(String contentPattern) {
+	private String sanitizeContentPattern(@Nullable String contentPattern) {
 		if (contentPattern == null) {
 			return contentPattern;
 		}

File: lib/src/main/java/com/diffplug/spotless/java/ImportOrderStep.java
Patch:
@@ -35,6 +35,8 @@
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public final class ImportOrderStep {
 	private static final boolean WILDCARDS_LAST_DEFAULT = false;
 
@@ -77,6 +79,7 @@ private FormatterStep createFrom(boolean wildcardsLast, Supplier<List<String>> i
 				State::toFormatter);
 	}
 
+	@SuppressFBWarnings("RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE") // workaround https://github.com/spotbugs/spotbugs/issues/756
 	private static List<String> getImportOrder(File importsFile) {
 		try (Stream<String> lines = Files.lines(importsFile.toPath())) {
 			return lines.filter(line -> !line.startsWith("#"))

File: lib/src/main/java/com/diffplug/spotless/npm/SimpleRestClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,7 @@
 import java.util.Map;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 class SimpleRestClient {
 	private final String baseUrl;
@@ -49,7 +50,7 @@ String post(String endpoint) throws SimpleRestException {
 		return postJson(endpoint, (String) null);
 	}
 
-	String postJson(String endpoint, String rawJson) throws SimpleRestException {
+	String postJson(String endpoint, @Nullable String rawJson) throws SimpleRestException {
 		try {
 			URL url = new URL(this.baseUrl + endpoint);
 			HttpURLConnection con = (HttpURLConnection) url.openConnection();

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PrettierIntegrationTest.java
Patch:
@@ -64,11 +64,11 @@ void verifyCleanSpotlessCheckWorks() throws IOException {
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/prettier/config/typescript.dirty");
-		BuildResult spotlessCheckFailsGracefully = gradleRunner().withArguments("--stacktrace", "clean", "spotlessCheck").buildAndFail();
+		BuildResult spotlessCheckFailsGracefully = gradleRunner().withArguments("--stacktrace", "spotlessCheck").buildAndFail();
 		Assertions.assertThat(spotlessCheckFailsGracefully.getOutput()).contains("> The following files had format violations:");
 
-		gradleRunner().withArguments("--stacktrace", "clean", "spotlessApply").build();
-		gradleRunner().withArguments("--stacktrace", "clean", "spotlessCheck").build();
+		gradleRunner().withArguments("--stacktrace", "spotlessApply").build();
+		gradleRunner().withArguments("--stacktrace", "spotlessCheck").build();
 	}
 
 	@Test

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.diffplug.spotless.kotlin;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import com.diffplug.spotless.FormatterStep;
@@ -42,6 +43,7 @@ void behavior() throws Exception {
 	}
 
 	@Test
+	@Disabled
 	void worksShyiko() throws Exception {
 		// Must use jcenter (GONE) because `com.andreapivetta.kolor:kolor:0.0.2` isn't available on mavenCentral.
 		// It is a dependency of ktlint.

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -63,7 +63,7 @@ static void configureCleanTask(Project project, Consumer<Delete> onClean) {
 
 	/** clean removes the SpotlessCache, so we have to run after clean. */
 	static void taskMustRunAfterClean(Project project, TaskProvider<?> task) {
-		configureCleanTask(project, clean -> task.configure(spotless -> spotless.mustRunAfter(clean)));
+		configureCleanTask(project, clean -> task.get().mustRunAfter(clean));
 	}
 
 	static String capitalize(String input) {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtensionImpl.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.gradle.api.Action;
 import org.gradle.api.Project;
-import org.gradle.api.ProjectConfigurationException;
+import org.gradle.api.UnknownTaskException;
 import org.gradle.api.plugins.JavaBasePlugin;
 import org.gradle.api.tasks.TaskContainer;
 import org.gradle.api.tasks.TaskProvider;
@@ -51,7 +51,7 @@ public SpotlessExtensionImpl(Project project) {
 				try {
 					project.getTasks().named(JavaBasePlugin.CHECK_TASK_NAME)
 							.configure(task -> task.dependsOn(rootCheckTask));
-				} catch (ProjectConfigurationException e) {
+				} catch (UnknownTaskException e) {
 					// no action needed, it's okay if there's no `check` task
 				}
 			}

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.43.0";
+	private static final String DEFAULT_VERSION = "0.43.2";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.43.0";
+	private static final String DEFAULT_VERSION = "0.43.2";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GroovyExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -127,7 +127,7 @@ protected void setupTask(SpotlessTask task) {
 		// LicenseHeaderStep completely blows apart package-info.java/groovy - this common-sense check
 		// ensures that it skips both. See https://github.com/diffplug/spotless/issues/1
 		steps.replaceAll(step -> {
-			if (LicenseHeaderStep.name().equals(step.getName())) {
+			if (isLicenseHeaderStep(step)) {
 				return step.filterByFile(LicenseHeaderStep.unsupportedJvmFilesFilter());
 			} else {
 				return step;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -217,7 +217,7 @@ protected void setupTask(SpotlessTask task) {
 		}
 
 		steps.replaceAll(step -> {
-			if (LicenseHeaderStep.name().equals(step.getName())) {
+			if (isLicenseHeaderStep(step)) {
 				return step.filterByFile(LicenseHeaderStep.unsupportedJvmFilesFilter());
 			} else {
 				return step;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/RegisterDependenciesTask.java
Patch:
@@ -54,7 +54,8 @@ void setup() {
 		Preconditions.checkArgument(getProject().getRootProject() == getProject(), "Can only be used on the root project");
 
 		BuildServiceRegistry buildServices = getProject().getGradle().getSharedServices();
-		getTaskService().set(buildServices.registerIfAbsent("SpotlessTaskService" + System.identityHashCode(RegisterDependenciesTask.class.getClassLoader()), SpotlessTaskService.class, spec -> {}));
+		getTaskService().set(buildServices.registerIfAbsent("SpotlessTaskService" +
+				(getProject().getSubprojects().size() > 1 ? System.identityHashCode(RegisterDependenciesTask.class.getClassLoader()) : ""), SpotlessTaskService.class, spec -> {}));
 		getBuildEventsListenerRegistry().onTaskCompletion(getTaskService());
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtensionImpl.java
Patch:
@@ -40,7 +40,8 @@ public SpotlessExtensionImpl(Project project) {
 		});
 
 		TaskContainer rootProjectTasks = project.getRootProject().getTasks();
-		String taskName = RegisterDependenciesTask.TASK_NAME + System.identityHashCode(RegisterDependenciesTask.class.getClassLoader());
+		String taskName = RegisterDependenciesTask.TASK_NAME +
+				(project.getRootProject().getSubprojects().size() > 1 ? System.identityHashCode(RegisterDependenciesTask.class.getClassLoader()) : "");
 		if (!rootProjectTasks.getNames().contains(taskName)) {
 			this.registerDependenciesTask = rootProjectTasks.register(taskName, RegisterDependenciesTask.class, RegisterDependenciesTask::setup);
 		} else {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/RegisterDependenciesTask.java
Patch:
@@ -54,7 +54,7 @@ void setup() {
 		Preconditions.checkArgument(getProject().getRootProject() == getProject(), "Can only be used on the root project");
 
 		BuildServiceRegistry buildServices = getProject().getGradle().getSharedServices();
-		getTaskService().set(buildServices.registerIfAbsent("SpotlessTaskService", SpotlessTaskService.class, spec -> {}));
+		getTaskService().set(buildServices.registerIfAbsent("SpotlessTaskService" + System.identityHashCode(RegisterDependenciesTask.class.getClassLoader()), SpotlessTaskService.class, spec -> {}));
 		getBuildEventsListenerRegistry().onTaskCompletion(getTaskService());
 	}
 

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -55,7 +55,7 @@ public static LicenseHeaderStep headerDelimiter(ThrowingEx.Supplier<String> head
 	}
 
 	final String name;
-	final String contentPattern;
+	final @Nullable String contentPattern;
 	final ThrowingEx.Supplier<String> headerLazy;
 	final String delimiter;
 	final String yearSeparator;
@@ -155,6 +155,7 @@ private String sanitizeName(String name) {
 		return DEFAULT_NAME_PREFIX + "-" + name;
 	}
 
+	@Nullable
 	private String sanitizeContentPattern(String contentPattern) {
 		if (contentPattern == null) {
 			return contentPattern;

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -49,7 +49,9 @@ public interface FormatterStep extends Serializable {
 	 * Returns a new FormatterStep which will only apply its changes
 	 * to files which pass the given filter.
 	 *
-	 * The provided filter must be serializable.
+	 * @param contentPattern
+	 *            java regular expression used to filter out files which content doesn't contain pattern
+	 * @return FormatterStep
 	 */
 	public default FormatterStep filterByContentPattern(String contentPattern) {
 		return new FilterByContentPatternFormatterStep(this, contentPattern);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GroovyExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -127,7 +127,7 @@ protected void setupTask(SpotlessTask task) {
 		// LicenseHeaderStep completely blows apart package-info.java/groovy - this common-sense check
 		// ensures that it skips both. See https://github.com/diffplug/spotless/issues/1
 		steps.replaceAll(step -> {
-			if (LicenseHeaderStep.name().equals(step.getName())) {
+			if (isLicenseHeaderStep(step)) {
 				return step.filterByFile(LicenseHeaderStep.unsupportedJvmFilesFilter());
 			} else {
 				return step;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -217,7 +217,7 @@ protected void setupTask(SpotlessTask task) {
 		}
 
 		steps.replaceAll(step -> {
-			if (LicenseHeaderStep.name().equals(step.getName())) {
+			if (isLicenseHeaderStep(step)) {
 				return step.filterByFile(LicenseHeaderStep.unsupportedJvmFilesFilter());
 			} else {
 				return step;

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -93,7 +93,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 				State::createFormat);
 	}
 
-	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.11.0");
+	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.12.0");
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.42.1";
+	private static final String DEFAULT_VERSION = "0.43.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -32,7 +32,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.27";
+	private static final String DEFAULT_VERSION = "0.29";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -41,7 +41,7 @@ private ScalaFmtStep() {}
 
 	private static final Pattern VERSION_PRE_2_0 = Pattern.compile("[10]\\.(\\d+)\\.\\d+");
 	private static final Pattern VERSION_PRE_3_0 = Pattern.compile("2\\.(\\d+)\\.\\d+");
-	private static final String DEFAULT_VERSION = "3.0.0";
+	private static final String DEFAULT_VERSION = "3.0.8";
 	static final String NAME = "scalafmt";
 	static final String MAVEN_COORDINATE_PRE_2_0 = "com.geirsson:scalafmt-core_2.11:";
 	static final String MAVEN_COORDINATE_PRE_3_0 = "org.scalameta:scalafmt-core_2.11:";

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -41,7 +41,7 @@ private ScalaFmtStep() {}
 
 	private static final Pattern VERSION_PRE_2_0 = Pattern.compile("[10]\\.(\\d+)\\.\\d+");
 	private static final Pattern VERSION_PRE_3_0 = Pattern.compile("2\\.(\\d+)\\.\\d+");
-	private static final String DEFAULT_VERSION = "3.0.0";
+	private static final String DEFAULT_VERSION = "3.0.8";
 	static final String NAME = "scalafmt";
 	static final String MAVEN_COORDINATE_PRE_2_0 = "com.geirsson:scalafmt-core_2.11:";
 	static final String MAVEN_COORDINATE_PRE_3_0 = "org.scalameta:scalafmt-core_2.11:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -32,7 +32,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.27";
+	private static final String DEFAULT_VERSION = "0.29";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.42.1";
+	private static final String DEFAULT_VERSION = "0.43.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -93,7 +93,7 @@ public static FormatterStep create(String groupArtifact, String version, String
 				State::createFormat);
 	}
 
-	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.11.0");
+	static final Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support(NAME).add(8, "1.7").add(11, "1.12.0");
 
 	public static String defaultGroupArtifact() {
 		return MAVEN_COORDINATE;

File: lib-extra/src/main/java/com/diffplug/spotless/extra/integration/DiffMessageFormatter.java
Patch:
@@ -102,7 +102,6 @@ public Charset getEncoding() {
 
 		@Override
 		public String getFormatted(File file, String rawUnix) {
-			Path relative = rootDir.relativize(file.toPath());
 			Path clean = cleanDir.resolve(rootDir.relativize(file.toPath()));
 			byte[] content = Errors.rethrow().get(() -> Files.readAllBytes(clean));
 			return new String(content, encoding);

File: lib/src/main/java/com/diffplug/spotless/Jvm.java
Patch:
@@ -242,7 +242,7 @@ public int compare(V version0, V version1) {
 
 			private static <V> int[] convert(V versionObject) {
 				try {
-					return Arrays.asList(versionObject.toString().split("\\.")).stream().mapToInt(s -> Integer.valueOf(s)).toArray();
+					return Arrays.asList(versionObject.toString().split("\\.")).stream().mapToInt(Integer::parseInt).toArray();
 				} catch (Exception e) {
 					throw new IllegalArgumentException(String.format("Not a semantic version: %s", versionObject), e);
 				}

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -85,7 +85,7 @@ public FormatterFunc createFormatterFunc() {
 				PrettierRestService restService = new PrettierRestService(prettierRestServer.getBaseUrl());
 				String prettierConfigOptions = restService.resolveConfig(this.prettierConfig.getPrettierConfigPath(), this.prettierConfig.getOptions());
 				return Closeable.ofDangerous(() -> endServer(restService, prettierRestServer), new PrettierFilePathPassingFormatterFunc(prettierConfigOptions, restService));
-			} catch (Exception e) {
+			} catch (IOException e) {
 				throw ThrowingEx.asRuntime(e);
 			}
 		}

File: lib/src/main/java/com/diffplug/spotless/npm/TsFmtFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -92,7 +92,7 @@ public FormatterFunc createFormatterFunc() {
 				ServerProcessInfo tsfmtRestServer = npmRunServer();
 				TsFmtRestService restService = new TsFmtRestService(tsfmtRestServer.getBaseUrl());
 				return Closeable.ofDangerous(() -> endServer(restService, tsfmtRestServer), input -> restService.format(input, tsFmtOptions));
-			} catch (Exception e) {
+			} catch (IOException e) {
 				throw ThrowingEx.asRuntime(e);
 			}
 		}

File: lib/src/main/java/com/diffplug/spotless/pom/SortPomStep.java
Patch:
@@ -30,13 +30,13 @@ public class SortPomStep {
 
 	private SortPomStep() {}
 
-	private SortPomCfg cfg;
-
 	public static FormatterStep create(SortPomCfg cfg, Provisioner provisioner) {
 		return FormatterStep.createLazy(NAME, () -> new State(cfg, provisioner), State::createFormat);
 	}
 
 	static class State implements Serializable {
+		private static final long serialVersionUID = 1;
+
 		SortPomCfg cfg;
 		JarState jarState;
 

File: testlib/src/test/java/com/diffplug/spotless/java/GoogleJavaFormatStepTest.java
Patch:
@@ -124,6 +124,7 @@ protected FormatterStep create() {
 	}
 
 	@Test
+	@EnabledForJreRange(min = JAVA_11) // google-java-format requires JRE 11+
 	void equalityGroupArtifact() throws Exception {
 		new SerializableEqualityTester() {
 			String groupArtifact = GoogleJavaFormatStep.defaultGroupArtifact();

File: testlib/src/test/java/com/diffplug/spotless/java/GoogleJavaFormatStepTest.java
Patch:
@@ -124,6 +124,7 @@ protected FormatterStep create() {
 	}
 
 	@Test
+	@EnabledForJreRange(min = JAVA_11) // google-java-format requires JRE 11+
 	void equalityGroupArtifact() throws Exception {
 		new SerializableEqualityTester() {
 			String groupArtifact = GoogleJavaFormatStep.defaultGroupArtifact();

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -85,7 +85,7 @@ public FormatterFunc createFormatterFunc() {
 				PrettierRestService restService = new PrettierRestService(prettierRestServer.getBaseUrl());
 				String prettierConfigOptions = restService.resolveConfig(this.prettierConfig.getPrettierConfigPath(), this.prettierConfig.getOptions());
 				return Closeable.ofDangerous(() -> endServer(restService, prettierRestServer), new PrettierFilePathPassingFormatterFunc(prettierConfigOptions, restService));
-			} catch (Exception e) {
+			} catch (IOException e) {
 				throw ThrowingEx.asRuntime(e);
 			}
 		}

File: lib/src/main/java/com/diffplug/spotless/npm/TsFmtFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -92,7 +92,7 @@ public FormatterFunc createFormatterFunc() {
 				ServerProcessInfo tsfmtRestServer = npmRunServer();
 				TsFmtRestService restService = new TsFmtRestService(tsfmtRestServer.getBaseUrl());
 				return Closeable.ofDangerous(() -> endServer(restService, tsfmtRestServer), input -> restService.format(input, tsFmtOptions));
-			} catch (Exception e) {
+			} catch (IOException e) {
 				throw ThrowingEx.asRuntime(e);
 			}
 		}

File: lib/src/main/java/com/diffplug/spotless/pom/SortPomStep.java
Patch:
@@ -30,13 +30,13 @@ public class SortPomStep {
 
 	private SortPomStep() {}
 
-	private SortPomCfg cfg;
-
 	public static FormatterStep create(SortPomCfg cfg, Provisioner provisioner) {
 		return FormatterStep.createLazy(NAME, () -> new State(cfg, provisioner), State::createFormat);
 	}
 
 	static class State implements Serializable {
+		private static final long serialVersionUID = 1;
+
 		SortPomCfg cfg;
 		JarState jarState;
 

File: lib/src/main/java/com/diffplug/spotless/Jvm.java
Patch:
@@ -242,7 +242,7 @@ public int compare(V version0, V version1) {
 
 			private static <V> int[] convert(V versionObject) {
 				try {
-					return Arrays.asList(versionObject.toString().split("\\.")).stream().mapToInt(s -> Integer.valueOf(s)).toArray();
+					return Arrays.asList(versionObject.toString().split("\\.")).stream().mapToInt(Integer::parseInt).toArray();
 				} catch (Exception e) {
 					throw new IllegalArgumentException(String.format("Not a semantic version: %s", versionObject), e);
 				}

File: lib-extra/src/main/java/com/diffplug/spotless/extra/integration/DiffMessageFormatter.java
Patch:
@@ -102,7 +102,6 @@ public Charset getEncoding() {
 
 		@Override
 		public String getFormatted(File file, String rawUnix) {
-			Path relative = rootDir.relativize(file.toPath());
 			Path clean = cleanDir.resolve(rootDir.relativize(file.toPath()));
 			byte[] content = Errors.rethrow().get(() -> Files.readAllBytes(clean));
 			return new String(content, encoding);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/UpToDateTest.java
Patch:
@@ -88,7 +88,7 @@ void testPathologicalCase() throws IOException {
 		// the format task is UP-TO-DATE (same inputs), but the apply tasks will run again
 		pauseForFilesystem();
 		BuildResult buildResult = gradleRunner().withArguments("spotlessApply").build();
-		Assertions.assertThat(buildResult.taskPaths(TaskOutcome.UP_TO_DATE)).containsExactly(":spotlessMisc");
+		Assertions.assertThat(buildResult.taskPaths(TaskOutcome.UP_TO_DATE)).containsExactly(":spotlessInternalRegisterDependencies", ":spotlessMisc");
 		Assertions.assertThat(buildResult.taskPaths(TaskOutcome.SUCCESS)).containsExactly(":spotlessMiscApply", ":spotlessApply");
 		assertFile("README.md").hasContent("abc");
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -83,7 +83,8 @@ public void performAction(InputChanges inputs) throws Exception {
 				}
 			}
 		} else {
-			throw new GradleException("Spotless doesn't support configuration cache yet");
+			throw new GradleException("Spotless doesn't support configuration cache yet.\n" +
+					"Rerun with --no-configuration-cache");
 		}
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -75,7 +75,7 @@ public FormatExtension(SpotlessExtension spotless) {
 	}
 
 	protected final Provisioner provisioner() {
-		return GradleProvisioner.forProject(spotless.project);
+		return spotless.getRegisterDependenciesTask().getTaskService().get().provisionerFor(spotless.project);
 	}
 
 	private String formatName() {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -770,8 +770,7 @@ public SpotlessApply createIndependentApplyTask(String taskName) {
 		spotlessTask.mustRunAfter(clean);
 		// create the apply task
 		SpotlessApply applyTask = spotless.project.getTasks().create(taskName, SpotlessApply.class);
-		applyTask.getSpotlessOutDirectory().set(spotlessTask.getOutputDirectory());
-		applyTask.getTaskService().set(spotless.getTaskService());
+		applyTask.init(spotlessTask);
 		applyTask.dependsOn(spotlessTask);
 
 		return applyTask;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtensionImpl.java
Patch:
@@ -112,8 +112,10 @@ protected void createFormatTasks(String name, FormatExtension formatExtension) {
 		});
 
 		TaskProvider<SpotlessCheck> checkTask = tasks.register(taskName + CHECK, SpotlessCheck.class, task -> {
-			task.getSpotlessOutDirectory().set(spotlessTask.get().getOutputDirectory());
+			SpotlessTask source = spotlessTask.get();
+			task.getSpotlessOutDirectory().set(source.getOutputDirectory());
 			task.getTaskService().set(taskService);
+			task.getEncoding().set(source.getEncoding());
 			task.setEnabled(!isIdeHook);
 			task.dependsOn(spotlessTask);
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -42,7 +42,7 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 
-public class SpotlessTask extends DefaultTask {
+public abstract class SpotlessTask extends DefaultTask {
 	// set by SpotlessExtension, but possibly overridden by FormatExtension
 	protected String encoding = "UTF-8";
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -70,6 +71,7 @@ private SpotlessCheck createCheckTask(String name, SpotlessTask source) {
 			SpotlessCheck task = project.getTasks().create("spotless" + SpotlessPlugin.capitalize(name) + "Check", SpotlessCheck.class);
 			task.getSpotlessOutDirectory().set(source.getOutputDirectory());
 			task.getTaskService().set(taskService);
+			task.getEncoding().set(StandardCharsets.UTF_8.name());
 			return task;
 		}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Collections;
 
@@ -74,6 +75,7 @@ private SpotlessCheck createCheckTask(String name, SpotlessTask source) {
 			SpotlessCheck task = project.getTasks().create("spotless" + SpotlessPlugin.capitalize(name) + "Check", SpotlessCheck.class);
 			task.getTaskService().set(taskService);
 			task.getSpotlessOutDirectory().set(source.getOutputDirectory());
+			task.getEncoding().set(StandardCharsets.UTF_8.name());
 			return task;
 		}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessApply.java
Patch:
@@ -31,7 +31,7 @@ public void performAction() {
 		getTaskService().get().registerApplyAlreadyRan(this);
 		ConfigurableFileTree files = getProject().fileTree(getSpotlessOutDirectory().get());
 		if (files.isEmpty()) {
-			getState().setDidWork(getSourceDidWork());
+			getState().setDidWork(sourceDidWork());
 		} else {
 			files.visit(new FileVisitor() {
 				@Override

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessCheck.java
Patch:
@@ -46,7 +46,7 @@ public void performAction() throws IOException {
 	private void performAction(boolean isTest) throws IOException {
 		ConfigurableFileTree files = getProject().fileTree(getSpotlessOutDirectory().get());
 		if (files.isEmpty()) {
-			getState().setDidWork(getSourceDidWork());
+			getState().setDidWork(sourceDidWork());
 		} else if (!isTest && applyHasRun()) {
 			// if our matching apply has already run, then we don't need to do anything
 			getState().setDidWork(false);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SerializableMisc.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,7 +39,7 @@ static void toFile(Serializable obj, File file) {
 		}
 	}
 
-	static <T extends Serializable> T fromFile(Class<T> clazz, File file) {
+	static <T> T fromFile(Class<T> clazz, File file) {
 		try (InputStream input = Files.asByteSource(file).openBufferedStream()) {
 			return fromStream(clazz, input);
 		} catch (IOException e) {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/integration/DiffMessageFormatter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -164,8 +164,7 @@ private void addIntendedLine(String indent, String line) {
 	private static String diff(Builder builder, File file) throws IOException {
 		String raw = new String(Files.readAllBytes(file.toPath()), builder.formatter.getEncoding());
 		String rawUnix = LineEnding.toUnix(raw);
-		String formattedUnix;
-		formattedUnix = PaddedCell.check(builder.formatter, file, rawUnix).canonical();
+		String formattedUnix = PaddedCell.check(builder.formatter, file, rawUnix).canonical();
 
 		if (rawUnix.equals(formattedUnix)) {
 			// the formatting is fine, so it's a line-ending issue

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/MultiProjectAfterEvaluate.java
Patch:
@@ -25,7 +25,7 @@ class MultiProjectAfterEvaluate extends GradleIntegrationHarness {
 	@Test
 	void failureDoesntTriggerAll() throws IOException {
 		setFile("settings.gradle").toLines("include 'sub'");
-		setFile("build.gradle").toLines("buildscript { repositories { mavenCentral() }}");
+		setFile("build.gradle").toLines("repositories { mavenCentral() }");
 		setFile("sub/build.gradle")
 				.toLines(
 						"plugins {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SpotlessPluginRedirectTest.java
Patch:
@@ -54,7 +54,7 @@ void redirectPluginOldGradle() throws IOException {
 						"   > We have moved from 'com.diffplug.gradle.spotless'",
 						"                     to 'com.diffplug.spotless'",
 						"     To migrate:",
-						"     - Upgrade gradle to 6.1 or newer (you're on 5.0)",
+						"     - Upgrade gradle to 6.1.1 or newer (you're on 5.0)",
 						"     - Test your build with: id 'com.diffplug.gradle.spotless' version '4.5.1'"));
 	}
 
@@ -68,6 +68,6 @@ void realPluginOldGradle() throws IOException {
 		Assertions.assertThat(gradleRunner().withGradleVersion(GradleVersionSupport.JRE_11.version)
 				.buildAndFail().getOutput().replace("\r", ""))
 				.contains(StringPrinter.buildStringFromLines(
-						"Spotless requires Gradle 6.1 or newer, this was 5.0"));
+						"Spotless requires Gradle 6.1.1 or newer, this was 5.0"));
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/WithinBlockTest.java
Patch:
@@ -26,6 +26,7 @@ void genericFormatTest() throws IOException {
 		// it does, and it doesn't need `it`
 		setFile("build.gradle").toLines(
 				"plugins { id 'com.diffplug.spotless' }",
+				"repositories { mavenCentral() }",
 				"import com.diffplug.gradle.spotless.JavaExtension",
 				"spotless {",
 				"  format 'customJava', JavaExtension, {",
@@ -43,6 +44,7 @@ void withinBlocksTourDeForce() throws IOException {
 		// but down here, we need `it`, or it will bind to the parent context, why?
 		setFile("build.gradle").toLines(
 				"plugins { id 'com.diffplug.spotless' }",
+				"repositories { mavenCentral() }",
 				"import com.diffplug.gradle.spotless.JavaExtension",
 				"spotless {",
 				"  format 'docs', {",

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -168,8 +168,7 @@ static class RuntimeInit {
 			//////////////////////////
 			// REPO-SPECIFIC VALUES //
 			//////////////////////////
-			FileRepositoryBuilder builder = new FileRepositoryBuilder();
-			builder.findGitDir(projectDir);
+			FileRepositoryBuilder builder = GitWorkarounds.fileRepositoryBuilderForProject(projectDir);
 			if (builder.getGitDir() != null) {
 				workTree = builder.getWorkTree();
 				repoConfig = new FileBasedConfig(userConfig, new File(builder.getGitDir(), Constants.CONFIG), FS.DETECTED);

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -168,8 +168,7 @@ static class RuntimeInit {
 			//////////////////////////
 			// REPO-SPECIFIC VALUES //
 			//////////////////////////
-			FileRepositoryBuilder builder = new FileRepositoryBuilder();
-			builder.findGitDir(projectDir);
+			FileRepositoryBuilder builder = GitWorkarounds.fileRepositoryBuilderForProject(projectDir);
 			if (builder.getGitDir() != null) {
 				workTree = builder.getWorkTree();
 				repoConfig = new FileBasedConfig(userConfig, new File(builder.getGitDir(), Constants.CONFIG), FS.DETECTED);

File: _ext/eclipse-jdt/src/main/java/com/diffplug/spotless/extra/eclipse/java/EclipseJdtFormatterStepImpl.java
Patch:
@@ -56,6 +56,7 @@ public void activatePlugins(SpotlessEclipsePluginConfig config) {
 	}
 
 	/** @deprecated  Use {@link #format(String, File)} instead. */
+	@Deprecated
 	public String format(String raw) throws Exception {
 		return format(raw, new File(""));
 	}

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -26,7 +26,7 @@
 
 class EclipseJdtFormatterStepTest extends EclipseResourceHarness {
 	private final static String NON_SEMANTIC_ECLIPSE_VERSION = "4.7.3a";
-	private final static Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support("Oldest Version").add(8, "4.6.1");
+	private final static Jvm.Support<String> JVM_SUPPORT = Jvm.<String> support("Oldest Version").add(8, "4.6.1").add(11, "4.20.0");
 	private final static String INPUT = "package p; class C{}";
 	private final static String EXPECTED = "package p;\nclass C {\n}";
 

File: testlib/src/test/java/com/diffplug/spotless/sql/DBeaverSQLFormatterStepTest.java
Patch:
@@ -35,7 +35,8 @@ void behavior() throws Exception {
 				.testResource("sql/dbeaver/full.dirty", "sql/dbeaver/full.clean")
 				.testResource("sql/dbeaver/V1_initial.sql.dirty", "sql/dbeaver/V1_initial.sql.clean")
 				.testResource("sql/dbeaver/alter-table.dirty", "sql/dbeaver/alter-table.clean")
-				.testResource("sql/dbeaver/create.dirty", "sql/dbeaver/create.clean");
+				.testResource("sql/dbeaver/create.dirty", "sql/dbeaver/create.clean")
+				.testResource("sql/dbeaver/jdbi-params.dirty", "sql/dbeaver/jdbi-params.clean");
 	}
 
 	@Test

File: testlib/src/test/java/com/diffplug/spotless/sql/DBeaverSQLFormatterStepTest.java
Patch:
@@ -35,7 +35,8 @@ void behavior() throws Exception {
 				.testResource("sql/dbeaver/full.dirty", "sql/dbeaver/full.clean")
 				.testResource("sql/dbeaver/V1_initial.sql.dirty", "sql/dbeaver/V1_initial.sql.clean")
 				.testResource("sql/dbeaver/alter-table.dirty", "sql/dbeaver/alter-table.clean")
-				.testResource("sql/dbeaver/create.dirty", "sql/dbeaver/create.clean");
+				.testResource("sql/dbeaver/create.dirty", "sql/dbeaver/create.clean")
+			    .testResource("sql/dbeaver/jdbi-params.dirty", "sql/dbeaver/jdbi-params.clean");
 	}
 
 	@Test

File: lib/src/main/java/com/diffplug/spotless/pom/SortPomStep.java
Patch:
@@ -46,7 +46,7 @@ public State(SortPomCfg cfg, Provisioner provisioner) throws IOException {
 		}
 
 		FormatterFunc createFormat() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
-			Class<?> formatterFunc = jarState.getClassLoader().loadClass("com.diffplug.spotless.ext.pom.SortPomFormatterFunc");
+			Class<?> formatterFunc = jarState.getClassLoader().loadClass("com.diffplug.spotless.glue.pom.SortPomFormatterFunc");
 			Constructor<?> constructor = formatterFunc.getConstructor(SortPomCfg.class);
 			return (FormatterFunc) constructor.newInstance(cfg);
 		}

File: lib/src/sortPom/java/com/diffplug/spotless/pom/DelegatingClassLoader.java
Patch:
@@ -42,8 +42,8 @@ protected Class<?> findClass(String name) throws ClassNotFoundException {
 		if (name.equals(FormatterFunc.class.getName())) {
 			return FormatterFunc.class;
 		}
-		if (name.equals(SortPomState.class.getName())) {
-			return SortPomState.class;
+		if (name.equals(SortPomCfg.class.getName())) {
+			return SortPomCfg.class;
 		}
 		// all other loaded classes need to be associated with this classloader, so we need to load them as resources
 		String path = name.replace('.', '/') + ".class";

File: lib/src/sortPom/java/com/diffplug/spotless/pom/SortPomState.java
Patch:
@@ -19,6 +19,8 @@
 import java.io.Serializable;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.JarState;
@@ -83,7 +85,7 @@ public final class SortPomState implements Serializable {
 	}
 
 	FormatterFunc createFormat() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException {
-		ClassLoader classLoader = new DelegatingClassLoader(this.getClass().getClassLoader(), jarState.getClassLoader());
+		ClassLoader classLoader = AccessController.doPrivileged((PrivilegedAction<DelegatingClassLoader>) () -> new DelegatingClassLoader(this.getClass().getClassLoader(), jarState.getClassLoader()));
 		Constructor<?> constructor = classLoader.loadClass(SortPomFormatterFunc.class.getName()).getConstructor(classLoader.loadClass(SortPomState.class.getName()));
 		constructor.setAccessible(true);
 		return (FormatterFunc) constructor.newInstance(this);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ConfigurationCacheTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ConfigurationCacheTest extends GradleIntegrationHarness {
 	protected void runTasks(String... tasks) throws IOException {

File: testlib/src/test/java/com/diffplug/spotless/java/GoogleJavaFormatStepTest.java
Patch:
@@ -36,7 +36,7 @@ public void suggestJre11() throws Exception {
 				step.testResourceException("java/googlejavaformat/TextBlock.dirty", throwable -> {
 					throwable.hasMessageStartingWith("You are running Spotless on JRE 8")
 							.hasMessageEndingWith(", which limits you to google-java-format 1.7\n"
-									+ "If you upgrade your build JVM to 11+, then you can use google-java-format 1.9, which may have fixed this problem.");
+									+ "If you upgrade your build JVM to 11+, then you can use google-java-format 1.11.0, which may have fixed this problem.");
 				});
 			} else if (JreVersion.thisVm() < 13) {
 				step.testResourceException("java/googlejavaformat/TextBlock.dirty", throwable -> {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -55,7 +55,7 @@
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**
- * Uses [.gitattributes](https://git-scm.com/docs/gitattributes) to determine
+ * Uses <a href="https://git-scm.com/docs/gitattributes">.gitattributes</a> to determine
  * the appropriate line ending. Falls back to the {@code core.eol} property in the
  * git config if there are no applicable git attributes, then finally falls
  * back to the platform native.

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -29,7 +29,7 @@
 import com.diffplug.spotless.Provisioner;
 import com.diffplug.spotless.ThrowingEx.Function;
 
-/** Wraps up [google-java-format](https://github.com/google/google-java-format) as a FormatterStep. */
+/** Wraps up <a href="https://github.com/google/google-java-format">google-java-format</a> as a FormatterStep. */
 public class GoogleJavaFormatStep {
 	// prevent direct instantiation
 	private GoogleJavaFormatStep() {}

File: lib/src/main/java/com/diffplug/spotless/kotlin/DiktatStep.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.diffplug.spotless.*;
 
-/** Wraps up [diktat](https://github.com/cqfn/diKTat) as a FormatterStep. */
+/** Wraps up <a href="https://github.com/cqfn/diKTat">diktat</a> as a FormatterStep. */
 public class DiktatStep {
 
 	// prevent direct instantiation

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -32,7 +32,7 @@
 import com.diffplug.spotless.Provisioner;
 import com.diffplug.spotless.ThrowingEx;
 
-/** Wraps up [ktlint](https://github.com/pinterest/ktlint) as a FormatterStep. */
+/** Wraps up <a href="https://github.com/pinterest/ktlint">ktlint</a> as a FormatterStep. */
 public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -26,7 +26,7 @@
 import com.diffplug.spotless.*;
 
 /**
- * Wraps up [ktfmt](https://github.com/facebookincubator/ktfmt) as a FormatterStep.
+ * Wraps up <a href="https://github.com/facebookincubator/ktfmt">ktfmt</a> as a FormatterStep.
  */
 public class KtfmtStep {
 	// prevent direct instantiation

File: lib/src/main/java/com/diffplug/spotless/markdown/FreshMarkStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@
 import com.diffplug.spotless.Provisioner;
 import com.diffplug.spotless.ThrowingEx.Supplier;
 
-/** A step for [FreshMark](https://github.com/diffplug/freshmark). */
+/** A step for <a href="https://github.com/diffplug/freshmark">FreshMark</a>. */
 public class FreshMarkStep {
 	// prevent direct instantiation
 	private FreshMarkStep() {}

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -34,7 +34,7 @@
 import com.diffplug.spotless.JarState;
 import com.diffplug.spotless.Provisioner;
 
-/** Wraps up [scalafmt](https://github.com/scalameta/scalafmt) as a FormatterStep. */
+/** Wraps up <a href="https://github.com/scalameta/scalafmt">scalafmt</a> as a FormatterStep. */
 public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -748,7 +748,7 @@ protected Project getProject() {
 	 *
 	 * The returned task will not be hooked up to the global {@code spotlessApply}, and there will be no corresponding {@code check} task.
 	 *
-	 * NOTE: does not respect the rarely-used [{@code spotlessFiles} property](https://github.com/diffplug/spotless/blob/b7f8c551a97dcb92cc4b0ee665448da5013b30a3/plugin-gradle/README.md#can-i-apply-spotless-to-specific-files).
+	 * NOTE: does not respect the rarely-used <a href="https://github.com/diffplug/spotless/blob/b7f8c551a97dcb92cc4b0ee665448da5013b30a3/plugin-gradle/README.md#can-i-apply-spotless-to-specific-files">{@code spotlessFiles} property</a>.
 	 */
 	public SpotlessApply createIndependentApplyTask(String taskName) {
 		// create and setup the task

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -86,7 +86,7 @@ public void encoding(String charset) {
 
 	/**
 	 * Limits the target to only the files which have changed since the given git reference,
-	 * which is resolved according to [this](https://javadoc.io/static/org.eclipse.jgit/org.eclipse.jgit/5.6.1.202002131546-r/org/eclipse/jgit/lib/Repository.html#resolve-java.lang.String-)
+	 * which is resolved according to <a href="https://javadoc.io/static/org.eclipse.jgit/org.eclipse.jgit/5.6.1.202002131546-r/org/eclipse/jgit/lib/Repository.html#resolve-java.lang.String-">this</a>
 	 */
 	public void setRatchetFrom(String ratchetFrom) {
 		this.ratchetFrom = ratchetFrom;

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@
 
 /**
  * Harness for running a maven build, same idea as the
- * [GradleRunner from the gradle testkit](https://docs.gradle.org/current/javadoc/org/gradle/testkit/runner/GradleRunner.html).
+ * <a href="https://docs.gradle.org/current/javadoc/org/gradle/testkit/runner/GradleRunner.html">GradleRunner from the gradle testkit</a>.
  */
 public class MavenRunner {
 	public static MavenRunner create() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@
 
 /**
  * Uses [.gitattributes](https://git-scm.com/docs/gitattributes) to determine
- * the appropriate line ending. Falls back to the `core.eol` property in the
+ * the appropriate line ending. Falls back to the {@code core.eol} property in the
  * git config if there are no applicable git attributes, then finally falls
  * back to the platform native.
  */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitRatchet.java
Patch:
@@ -53,7 +53,7 @@
 /**
  * How to use:
  * - For best performance, you should have one instance of GitRatchet, shared by all projects.
- * - Use {@link #rootTreeShaOf(Object, String)} to turn `origin/master` into the SHA of the tree object at that reference
+ * - Use {@link #rootTreeShaOf(Object, String)} to turn {@code origin/master} into the SHA of the tree object at that reference
  * - Use {@link #isClean(Object, ObjectId, File)} to see if the given file is "git clean" relative to that tree
  * - If you have up-to-date checking and want the best possible performance, use {@link #subtreeShaOf(Object, ObjectId)} to optimize up-to-date checks on a per-project basis.
  */
@@ -141,7 +141,7 @@ private static boolean worktreeIsCleanCheckout(TreeWalk treeWalk) {
 	/**
 	 * The first part of making this fast is finding the appropriate git repository quickly.  Because of composite
 	 * builds and submodules, it's quite possible that a single Gradle project will span across multiple git repositories.
-	 * We cache the Repository for every Project in `gitRoots`, and use dynamic programming to populate it.
+	 * We cache the Repository for every Project in {@code gitRoots}, and use dynamic programming to populate it.
 	 */
 	protected Repository repositoryFor(Project project) throws IOException {
 		Repository repo = gitRoots.get(project);

File: lib/src/main/java/com/diffplug/spotless/ForeignExe.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
  * If either part of that fails, it shows you why
  * and helps you fix it.
  *
- * Usage: `ForeignExe.nameAndVersion("grep", "2.5.7").confirmVersionAndGetAbsolutePath()`
+ * Usage: {@code ForeignExe.nameAndVersion("grep", "2.5.7").confirmVersionAndGetAbsolutePath()}
  * will find grep, confirm that it is version 2.5.7, and then return.
  */
 public class ForeignExe {
@@ -55,7 +55,7 @@ public ForeignExe versionFlag(String versionFlag) {
 		return this;
 	}
 
-	/** A regex which can parse the version out of the output of the {@link #versionFlag(String)} command (defaults to `version (\\S*)`) */
+	/** A regex which can parse the version out of the output of the {@link #versionFlag(String)} command (defaults to {@code version (\\S*)}) */
 	public ForeignExe versionRegex(Pattern versionRegex) {
 		this.versionRegex = Objects.requireNonNull(versionRegex);
 		return this;

File: lib/src/main/java/com/diffplug/spotless/FormatExceptionPolicy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,15 +23,15 @@ public interface FormatExceptionPolicy extends Serializable, NoLambda {
 	public void handleError(Throwable e, FormatterStep step, String relativePath);
 
 	/**
-	 * Returns a byte array representation of everything inside this `FormatExceptionPolicy`.
+	 * Returns a byte array representation of everything inside this {@code FormatExceptionPolicy}.
 	 *
 	 * The main purpose of this method is to ensure one can't instantiate this class with lambda
 	 * expressions, which are notoriously difficult to serialize and deserialize properly.
 	 */
 	public byte[] toBytes();
 
 	/**
-	 * A policy which rethrows subclasses of `Error` and logs other kinds of Exception.
+	 * A policy which rethrows subclasses of {@code Error} and logs other kinds of Exception.
 	 */
 	public static FormatExceptionPolicy failOnlyOnError() {
 		return new FormatExceptionPolicyLegacy();

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,8 +37,8 @@ public interface FormatterStep extends Serializable {
 	 * @param rawUnix
 	 *            the content to format, guaranteed to have unix-style newlines ('\n'); never null
 	 * @param file
-	 *            the file which `rawUnix` was obtained from; never null. Pass an empty file using
-	 *            `new File("")` if and only if no file is actually associated with `rawUnix`
+	 *            the file which {@code rawUnix} was obtained from; never null. Pass an empty file using
+	 *            {@code new File("")} if and only if no file is actually associated with {@code rawUnix}
 	 * @return the formatted content, guaranteed to only have unix-style newlines; may return null
 	 *         if the formatter step doesn't have any changes to make
 	 * @throws Exception if the formatter step experiences a problem

File: lib/src/main/java/com/diffplug/spotless/JarState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ URL[] jarUrls() {
 
 	/**
 	 * Returns a classloader containing the only jars in this JarState.
-	 * Look-up of classes in the `org.slf4j` package
+	 * Look-up of classes in the {@code org.slf4j} package
 	 * are not taken from the JarState, but instead redirected to the class loader of this class to enable
 	 * passthrough logging.
 	 * <br/>
@@ -91,7 +91,7 @@ public ClassLoader getClassLoader() {
 
 	/**
 	 * Returns a classloader containing the only jars in this JarState.
-	 * Look-up of classes in the `org.slf4j` package
+	 * Look-up of classes in the {@code org.slf4j} package
 	 * are not taken from the JarState, but instead redirected to the class loader of this class to enable
 	 * passthrough logging.
 	 * <br/>

File: lib/src/main/java/com/diffplug/spotless/NoLambda.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,11 +33,11 @@
  */
 public interface NoLambda extends Serializable {
 	/**
-	 * Returns a byte array representation of everything inside this `SerializableFileFilter`.
+	 * Returns a byte array representation of everything inside this {@code SerializableFileFilter}.
 	 *
 	 * The main purpose of this method is to ensure one can't instantiate this class with lambda
 	 * expressions, which are notoriously difficult to serialize and deserialize properly. (See
-	 * `SerializableFileFilterImpl.SkipFilesNamed` for an example of how to make a serializable
+	 * {@code SerializableFileFilterImpl.SkipFilesNamed} for an example of how to make a serializable
 	 * subclass.)
 	 */
 	public byte[] toBytes();

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -256,7 +256,7 @@ public boolean didNotConverge() {
 
 		private byte[] canonicalBytes() {
 			if (canonicalBytes == null) {
-				throw new IllegalStateException("First make sure that `!isClean()` and `!didNotConverge()`");
+				throw new IllegalStateException("First make sure that {@code !isClean()} and {@code !didNotConverge()}");
 			}
 			return canonicalBytes;
 		}
@@ -270,7 +270,7 @@ public void writeCanonicalTo(OutputStream out) throws IOException {
 		}
 	}
 
-	/** Returns the DirtyState which corresponds to `isClean()`. */
+	/** Returns the DirtyState which corresponds to {@code isClean()}. */
 	public static DirtyState isClean() {
 		return isClean;
 	}

File: lib/src/main/java/com/diffplug/spotless/ProcessRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,12 +48,12 @@ public class ProcessRunner implements AutoCloseable {
 
 	public ProcessRunner() {}
 
-	/** Executes the given shell command (using `cmd` on windows and `sh` on unix). */
+	/** Executes the given shell command (using {@code cmd} on windows and {@code sh} on unix). */
 	public Result shell(String cmd) throws IOException, InterruptedException {
 		return shellWinUnix(cmd, cmd);
 	}
 
-	/** Executes the given shell command (using `cmd` on windows and `sh` on unix). */
+	/** Executes the given shell command (using {@code cmd} on windows and {@code sh} on unix). */
 	public Result shellWinUnix(String cmdWin, String cmdUnix) throws IOException, InterruptedException {
 		List<String> args;
 		if (FileSignature.machineIsWin()) {

File: lib/src/main/java/com/diffplug/spotless/SpotlessCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -96,8 +96,8 @@ private static void clear() {
 	private static volatile Object lastClear;
 
 	/**
-	 * Closes all cached classloaders iff `key` is not `.equals()` to the last call to `clearOnce()`.
-	 * If `key` is null, the clear will always happen (as though null != null).
+	 * Closes all cached classloaders iff {@code key} is not {@code .equals()} to the last call to {@code clearOnce()}.
+	 * If {@code key} is null, the clear will always happen (as though null != null).
 	 */
 	public static boolean clearOnce(@Nullable Object key) {
 		synchronized (instance) {

File: lib/src/main/java/com/diffplug/spotless/annotations/Internal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,8 +22,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Signifies that a `public` API is actually an implementation detail, and should be treated as if it
- * were `private`.
+ * Signifies that a {@code public} API is actually an implementation detail, and should be treated as if it
+ * were {@code private}.
  *
  * The user of the API should be warned that it may unexpectedly disappear in future versions of
  * Spotless. Usually the best place to put this warning is in the API's class JavaDoc.

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -69,7 +69,7 @@ public FormatterStep create() {
 	private State createState() throws IOException, InterruptedException {
 		String howToInstall = "" +
 				"You can download clang-format from https://releases.llvm.org and " +
-				"then point Spotless to it with `pathToExe('/path/to/clang-format')` " +
+				"then point Spotless to it with {@code pathToExe('/path/to/clang-format')} " +
 				"or you can use your platform's package manager:" +
 				"\n  win:   choco install llvm --version {version}  (try dropping version if it fails)" +
 				"\n  mac:   brew install clang-format (TODO: how to specify version?)" +
@@ -79,7 +79,7 @@ private State createState() throws IOException, InterruptedException {
 				.pathToExe(pathToExe)
 				.fixCantFind(howToInstall)
 				.fixWrongVersion(
-						"You can tell Spotless to use the version you already have with `clangFormat('{versionFound}')`" +
+						"You can tell Spotless to use the version you already have with {@code clangFormat('{versionFound}')}" +
 								"or you can download the currently specified version, {version}.\n" + howToInstall)
 				.confirmVersionAndGetAbsolutePath();
 		return new State(this, exeAbsPath);

File: lib/src/main/java/com/diffplug/spotless/generic/PipeStepPair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 public class PipeStepPair {
-	/** The two steps will be named `<name>In` and `<name>Out`. */
+	/** The two steps will be named {@code <name>In} and {@code <name>Out}. */
 	public static Builder named(String name) {
 		return new Builder(name);
 	}

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -94,7 +94,7 @@ public static FormatterStep create(String version, String style, Provisioner pro
 		}
 	}
 
-	/** On JRE 11+, returns `1.9`. On earlier JREs, returns `1.7`. */
+	/** On JRE 11+, returns {@code 1.9}. On earlier JREs, returns {@code 1.7}. */
 	public static String defaultVersion() {
 		return JRE_VERSION >= 11 ? LATEST_VERSION_JRE_11 : LATEST_VERSION_JRE_8;
 	}

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2020-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,8 +63,8 @@ private State createState() throws IOException, InterruptedException {
 		String trackingIssue = "\n  github issue to handle this better: https://github.com/diffplug/spotless/issues/674";
 		String exeAbsPath = ForeignExe.nameAndVersion("black", version)
 				.pathToExe(pathToExe)
-				.fixCantFind("Try running `pip install black=={version}`, or else tell Spotless where it is with `black().pathToExe('path/to/executable')`" + trackingIssue)
-				.fixWrongVersion("Try running `pip install --force-reinstall black=={version}`, or else specify `black('{versionFound}')` to Spotless" + trackingIssue)
+				.fixCantFind("Try running {@code pip install black=={version}}, or else tell Spotless where it is with {@code black().pathToExe('path/to/executable')}" + trackingIssue)
+				.fixWrongVersion("Try running {@code pip install --force-reinstall black=={version}}, or else specify {@code black('{versionFound}')} to Spotless" + trackingIssue)
 				.confirmVersionAndGetAbsolutePath();
 		return new State(this, exeAbsPath);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -35,7 +35,7 @@ public void apply(Project project) {
 		if (project.hasProperty(SPOTLESS_MODERN)) {
 			project.getLogger().warn("'spotlessModern' has no effect as of Spotless 5.0, recommend removing it.");
 		}
-		// make sure there's a `clean` task
+		// make sure there's a {@code clean} task
 		project.getPlugins().apply(BasePlugin.class);
 
 		// setup the extension

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -74,7 +74,7 @@ private void processInputFile(Formatter formatter, File input) throws IOExceptio
 			// Remove previous output if it exists
 			Files.deleteIfExists(output.toPath());
 		} else if (dirtyState.didNotConverge()) {
-			getLogger().warn("Skipping '" + input + "' because it does not converge.  Run `spotlessDiagnose` to understand why");
+			getLogger().warn("Skipping '" + input + "' because it does not converge.  Run {@code spotlessDiagnose} to understand why");
 		} else {
 			Path parentDir = output.toPath().getParent();
 			if (parentDir == null) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -73,7 +73,7 @@ private static Project createProject(Consumer<SpotlessExtensionImpl> test) throw
 		return project;
 	}
 
-	/** Runs against the `spotlessSelfApply.gradle` file. */
+	/** Runs against the {@code spotlessSelfApply.gradle} file. */
 	static void runWithTestKit(String taskType) throws Exception {
 		GradleRunner.create()
 				.withPluginClasspath()

File: testlib/src/main/java/com/diffplug/spotless/StepHarness.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Assert;
 
-/** An api for testing a `FormatterStep` that doesn't depend on the File path. DO NOT ADD FILE SUPPORT TO THIS, use {@link StepHarnessWithFile} if you need that. */
+/** An api for testing a {@code FormatterStep} that doesn't depend on the File path. DO NOT ADD FILE SUPPORT TO THIS, use {@link StepHarnessWithFile} if you need that. */
 public class StepHarness implements AutoCloseable {
 	private final FormatterFunc formatter;
 

File: testlib/src/main/java/com/diffplug/spotless/StepHarnessWithFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Assert;
 
-/** An api for testing a `FormatterStep` that depends on the File path. */
+/** An api for testing a {@code FormatterStep} that depends on the File path. */
 public class StepHarnessWithFile implements AutoCloseable {
 	private final FormatterFunc formatter;
 

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -100,7 +100,7 @@ public static String defaultVersion() {
 	}
 
 	private static final String LATEST_VERSION_JRE_8 = "1.7";
-	private static final String LATEST_VERSION_JRE_11 = "1.10.0";
+	private static final String LATEST_VERSION_JRE_11 = "1.11.0";
 
 	public static String defaultStyle() {
 		return DEFAULT_STYLE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.35.0";
+	private static final String DEFAULT_VERSION = "0.42.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -32,7 +32,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.24";
+	private static final String DEFAULT_VERSION = "0.27";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -126,8 +126,7 @@ public void indentStep() throws IOException {
 				"    }",
 				"}");
 		setFile("configuration.gradle.kts").toResource("kotlin/ktlint/basic.dirty");
-		BuildResult result = gradleRunner().withArguments("spotlessApply").buildAndFail();
-		assertThat(result.getOutput()).contains("Unexpected indentation (4) (it should be 6)");
+		gradleRunner().withArguments("spotlessCheck").buildAndFail();
 	}
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -126,8 +126,7 @@ public void indentStep() throws IOException {
 				"    }",
 				"}");
 		setFile("configuration.gradle.kts").toResource("kotlin/ktlint/basic.dirty");
-		BuildResult result = gradleRunner().withArguments("spotlessApply").buildAndFail();
-		assertThat(result.getOutput()).contains("Unexpected indentation (4) (it should be 6)");
+		gradleRunner().withArguments("spotlessCheck").buildAndFail();
 	}
 
 	@Test

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -100,7 +100,7 @@ public static String defaultVersion() {
 	}
 
 	private static final String LATEST_VERSION_JRE_8 = "1.7";
-	private static final String LATEST_VERSION_JRE_11 = "1.10.0";
+	private static final String LATEST_VERSION_JRE_11 = "1.11.0";
 
 	public static String defaultStyle() {
 		return DEFAULT_STYLE;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -37,7 +37,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.35.0";
+	private static final String DEFAULT_VERSION = "0.42.1";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -32,7 +32,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.24";
+	private static final String DEFAULT_VERSION = "0.27";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -34,14 +34,14 @@
 import com.diffplug.spotless.JarState;
 import com.diffplug.spotless.Provisioner;
 
-/** Wraps up [scalafmt](https://github.com/olafurpg/scalafmt) as a FormatterStep. */
+/** Wraps up [scalafmt](https://github.com/scalameta/scalafmt) as a FormatterStep. */
 public class ScalaFmtStep {
 	// prevent direct instantiation
 	private ScalaFmtStep() {}
 
 	private static final Pattern VERSION_PRE_2_0 = Pattern.compile("[10]\\.(\\d+)\\.\\d+");
 	private static final Pattern VERSION_PRE_3_0 = Pattern.compile("2\\.(\\d+)\\.\\d+");
-	private static final String DEFAULT_VERSION = "2.0.1";
+	private static final String DEFAULT_VERSION = "3.0.0";
 	static final String NAME = "scalafmt";
 	static final String MAVEN_COORDINATE_PRE_2_0 = "com.geirsson:scalafmt-core_2.11:";
 	static final String MAVEN_COORDINATE_PRE_3_0 = "org.scalameta:scalafmt-core_2.11:";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ScalaExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,6 +36,6 @@ public void integration() throws IOException {
 		setFile("scalafmt.conf").toResource("scala/scalafmt/scalafmt.conf");
 		setFile("src/main/scala/basic.scala").toResource("scala/scalafmt/basic.dirty");
 		gradleRunner().withArguments("spotlessApply").build();
-		assertFile("src/main/scala/basic.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
+		assertFile("src/main/scala/basic.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_3.0.0");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/IncludesExcludesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@ public class IncludesExcludesTest extends MavenIntegrationHarness {
 	private static final String JAVA_FORMATTED = "java/eclipse/JavaCodeFormatted.test";
 	private static final String JAVA_UNFORMATTED = "java/eclipse/JavaCodeUnformatted.test";
 	private static final String SCALA_UNFORMATTED = "scala/scalafmt/basic.dirty";
-	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean_2.0.1";
+	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean_3.0.0";
 
 	@Test
 	public void testDefaultIncludesJava() throws Exception {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MultiModuleProjectTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -93,7 +93,7 @@ public void testConfigurationDependency() throws Exception {
 		assertFile("two/src/main/java/test1.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 		assertFile("two/src/test/java/test2.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 
-		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
-		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
+		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_3.0.0");
+		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_3.0.0");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/scala/ScalafmtTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,7 @@ public class ScalafmtTest extends MavenIntegrationHarness {
 	public void testScalafmtWithDefaultConfig() throws Exception {
 		writePomWithScalaSteps("<scalafmt/>");
 
-		runTest("scala/scalafmt/basic.clean_2.0.1");
+		runTest("scala/scalafmt/basic.clean_3.0.0");
 	}
 
 	@Test
@@ -36,7 +36,7 @@ public void testScalafmtWithCustomConfig() throws Exception {
 				"  <file>${project.basedir}/scalafmt.conf</file>",
 				"</scalafmt>");
 
-		runTest("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
+		runTest("scala/scalafmt/basic.cleanWithCustomConf_3.0.0");
 	}
 
 	private void runTest(String s) throws Exception {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -233,7 +233,7 @@ private final FileCollection parseTargetIsExclude(Object target, boolean isExclu
 			if (isExclude) {
 				return matchedFiles;
 			}
-			if (targetString.startsWith("**/*") || targetString.startsWith("**\\*")) {
+			if (targetString.startsWith("**/") || targetString.startsWith("**\\")) {
 				List<String> excludes = new ArrayList<>();
 				// no git
 				excludes.add(".git");

File: testlib/src/test/java/com/diffplug/spotless/scala/ScalaFmtStepTest.java
Patch:
@@ -105,6 +105,6 @@ public void invalidConfiguration() throws Exception {
 
 		exception = assertThrows(InvocationTargetException.class,
 				() -> StepHarness.forStep(ScalaFmtStep.create("2.0.1", provisioner, invalidConfFile)).test("", ""));
-		assertThat(exception.getTargetException().getMessage(), containsString("Invalid fields: invalidScalaFmtConfigField"));
+		assertThat(exception.getTargetException().getMessage(), containsString("Invalid field: invalidScalaFmtConfigField"));
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -100,7 +100,7 @@ public static String defaultVersion() {
 	}
 
 	private static final String LATEST_VERSION_JRE_8 = "1.7";
-	private static final String LATEST_VERSION_JRE_11 = "1.9";
+	private static final String LATEST_VERSION_JRE_11 = "1.10.0";
 
 	public static String defaultStyle() {
 		return DEFAULT_STYLE;

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -100,7 +100,7 @@ public static String defaultVersion() {
 	}
 
 	private static final String LATEST_VERSION_JRE_8 = "1.7";
-	private static final String LATEST_VERSION_JRE_11 = "1.9";
+	private static final String LATEST_VERSION_JRE_11 = "1.10.0";
 
 	public static String defaultStyle() {
 		return DEFAULT_STYLE;

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/kotlin/DiktatTest.java
Patch:
@@ -51,7 +51,7 @@ public void testDiktatConfig() throws Exception {
 
 		String configPath = "src/main/kotlin/diktat-analysis.yml";
 		File conf = setFile(configPath).toResource("kotlin/diktat/diktat-analysis.yml");
-		writePomWithKotlinSteps("<diktat><version>0.4.0</version><configPath>" + conf.getAbsolutePath() + "</configPath></diktat>");
+		writePomWithKotlinSteps("<diktat><version>0.4.0</version><configFile>" + conf.getAbsolutePath() + "</configFile></diktat>");
 
 		String path = "src/main/kotlin/Main.kt";
 		setFile(path).toResource("kotlin/diktat/main.dirty");

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.18";
+	private static final String DEFAULT_VERSION = "0.19";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2021 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ private static int badSemver(int major, int minor) {
 
 	private static final Pattern BAD_SEMVER = Pattern.compile("(\\d+)\\.(\\d+)\\.");
 
-	private static final String DEFAULT_VERSION = "0.40.0";
+	private static final String DEFAULT_VERSION = "0.35.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtfmtStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtfmtStep {
 	// prevent direct instantiation
 	private KtfmtStep() {}
 
-	private static final String DEFAULT_VERSION = "0.18";
+	private static final String DEFAULT_VERSION = "0.19";
 	static final String NAME = "ktfmt";
 	static final String PACKAGE = "com.facebook";
 	static final String MAVEN_COORDINATE = PACKAGE + ":ktfmt:";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ private static int badSemver(int major, int minor) {
 
 	private static final Pattern BAD_SEMVER = Pattern.compile("(\\d+)\\.(\\d+)\\.");
 
-	private static final String DEFAULT_VERSION = "0.35.0";
+	private static final String DEFAULT_VERSION = "0.40.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016-2020 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -113,7 +113,7 @@ public PrettierFilePathPassingFormatterFunc(String prettierConfigOptions, Pretti
 
 		@Override
 		public String applyWithFile(String unix, File file) throws Exception {
-			FormattedPrinter.SYSOUT.print("formatting String '" + unix.substring(0, Math.min(50, unix.length() - 1)) + "[...]' in file '" + file + "'");
+			FormattedPrinter.SYSOUT.print("formatting String '" + unix.substring(0, Math.min(50, unix.length())) + "[...]' in file '" + file + "'");
 
 			final String prettierConfigOptionsWithFilepath = assertFilepathInConfigOptions(file);
 			return restService.format(unix, prettierConfigOptionsWithFilepath);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/kotlin/Ktfmt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2021 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@ public class Ktfmt implements FormatterStepFactory {
 
 	@Parameter
 	private String version;
-	
+
 	@Parameter
 	private boolean dropboxStyle;
 

File: lib/src/main/java/com/diffplug/spotless/sql/dbeaver/DBeaverSQLFormatterConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@ public class DBeaverSQLFormatterConfiguration {
 	 */
 	private static final String SQL_FORMATTER_STATEMENT_DELIMITER = "sql.formatter.statement.delimiter";
 	/**
-	 * space or tag
+	 * space or tab
 	 */
 	private static final String SQL_FORMATTER_INDENT_TYPE = "sql.formatter.indent.type";
 	/**

File: lib/src/main/java/com/diffplug/spotless/sql/dbeaver/DBeaverSQLFormatterConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public class DBeaverSQLFormatterConfiguration {
 	 */
 	private static final String SQL_FORMATTER_STATEMENT_DELIMITER = "sql.formatter.statement.delimiter";
 	/**
-	 * space or tag
+	 * space or tab
 	 */
 	private static final String SQL_FORMATTER_INDENT_TYPE = "sql.formatter.indent.type";
 	/**

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/groovy/ImportOrder.java
Patch:
@@ -38,7 +38,7 @@ public FormatterStep newFormatterStep(FormatterStepConfig config) {
 				File importsFile = config.getFileLocator().locateFile(file);
 				return ImportOrderStep.forGroovy().createFrom(importsFile);
 			} else {
-				return ImportOrderStep.forGroovy().createFrom(order.split(","));
+				return ImportOrderStep.forGroovy().createFrom(order.split(",", -1));
 			}
 		} else if (file == null && order == null) {
 			return ImportOrderStep.forGroovy().createFrom();

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/ImportOrder.java
Patch:
@@ -38,7 +38,7 @@ public FormatterStep newFormatterStep(FormatterStepConfig config) {
 				File importsFile = config.getFileLocator().locateFile(file);
 				return ImportOrderStep.forJava().createFrom(importsFile);
 			} else {
-				return ImportOrderStep.forJava().createFrom(order.split(","));
+				return ImportOrderStep.forJava().createFrom(order.split(",", -1));
 			}
 		} else if (file == null && order == null) {
 			return ImportOrderStep.forJava().createFrom();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -24,7 +24,7 @@
 
 public class SpotlessPlugin implements Plugin<Project> {
 	static final String SPOTLESS_MODERN = "spotlessModern";
-	static final String MINIMUM_GRADLE = "5.4";
+	static final String MINIMUM_GRADLE = "6.1";
 
 	@Override
 	public void apply(Project project) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GitRatchetGradleTest.java
Patch:
@@ -128,11 +128,11 @@ private void assertDirty() throws Exception {
 	}
 
 	private BuildResultAssertion assertPass(String... tasks) throws Exception {
-		return new BuildResultAssertion(gradleRunner().withGradleVersion(GradleVersionSupport.SETTINGS_PLUGINS.version).withArguments(tasks).build());
+		return new BuildResultAssertion(gradleRunner().withArguments(tasks).build());
 	}
 
 	private BuildResultAssertion assertFail(String... tasks) throws Exception {
-		return new BuildResultAssertion(gradleRunner().withGradleVersion(GradleVersionSupport.SETTINGS_PLUGINS.version).withArguments(tasks).buildAndFail());
+		return new BuildResultAssertion(gradleRunner().withArguments(tasks).buildAndFail());
 	}
 
 	private static final String BASELINE_ROOT = "cf049829afeba064f27cd67911dc36e585c9d869";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationHarness.java
Patch:
@@ -39,7 +39,9 @@
 
 public class GradleIntegrationHarness extends ResourceHarness {
 	public enum GradleVersionSupport {
-		JRE_11("5.0"), MINIMUM(SpotlessPlugin.MINIMUM_GRADLE), SETTINGS_PLUGINS("6.0");
+		JRE_11("5.0"), MINIMUM(SpotlessPlugin.MINIMUM_GRADLE),
+		// technically, this API exists in 6.5, but the flags for it change in 6.6, so we build to that
+		CONFIGURATION_CACHE("6.6");
 
 		final String version;
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SpotlessPluginRedirectTest.java
Patch:
@@ -52,7 +52,7 @@ public void redirectPluginOldGradle() throws IOException {
 						"   > We have moved from 'com.diffplug.gradle.spotless'",
 						"                     to 'com.diffplug.spotless'",
 						"     To migrate:",
-						"     - Upgrade gradle to 5.4 or newer (you're on 5.0)",
+						"     - Upgrade gradle to 6.1 or newer (you're on 5.0)",
 						"     - Test your build with: id 'com.diffplug.gradle.spotless' version '4.5.1'"));
 	}
 
@@ -66,6 +66,6 @@ public void realPluginOldGradle() throws IOException {
 		Assertions.assertThat(gradleRunner().withGradleVersion(GradleVersionSupport.JRE_11.version)
 				.buildAndFail().getOutput().replace("\r", ""))
 				.contains(StringPrinter.buildStringFromLines(
-						"Spotless requires Gradle 5.4 or newer, this was 5.0"));
+						"Spotless requires Gradle 6.1 or newer, this was 5.0"));
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FreshMarkExtensionTest.java
Patch:
@@ -19,9 +19,12 @@
 
 import org.junit.Test;
 
+import com.diffplug.spotless.JreVersion;
+
 public class FreshMarkExtensionTest extends GradleIntegrationHarness {
 	@Test
 	public void integration() throws IOException {
+		JreVersion.assumeLessThan15();
 		setFile("build.gradle").toLines(
 				"buildscript { repositories { mavenCentral() } }",
 				"plugins {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SpotlessPluginRedirectTest.java
Patch:
@@ -32,7 +32,6 @@ public void redirectPluginModernGradle() throws IOException {
 				"}");
 		Assertions.assertThat(gradleRunner().buildAndFail().getOutput().replace("\r", ""))
 				.contains(StringPrinter.buildStringFromLines(
-						"> Failed to apply plugin [id 'com.diffplug.gradle.spotless']",
 						"   > We have moved from 'com.diffplug.gradle.spotless'",
 						"                     to 'com.diffplug.spotless'",
 						"     To migrate:",

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -211,7 +211,7 @@ public <T extends FormatExtension> void format(String name, Class<T> clazz, Acti
 	protected final <T extends FormatExtension> T maybeCreate(String name, Class<T> clazz) {
 		FormatExtension existing = formats.get(name);
 		if (existing != null) {
-			if (!existing.getClass().equals(clazz)) {
+			if (!clazz.isInstance(existing)) {
 				throw new GradleException("Tried to add format named '" + name + "'" +
 						" of type " + clazz + " but one has already been created of type " + existing.getClass());
 			} else {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -649,7 +649,7 @@ public void withinBlocks(String name, String open, String close, Action<FormatEx
 	 * spotless {
 	 *   format 'examples', {
 	 *     target 'src/**\/*.md'
-	 *     withinBlocks 'java examples', '\n```java\n', '\n```\n`, com.diffplug.spotless.JavaExtension, {
+	 *     withinBlocks 'java examples', '\n```java\n', '\n```\n`, com.diffplug.gradle.spotless.JavaExtension, {
 	 *       googleJavaFormat()
 	 *     }
 	 *     ...

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/sql/Sql.java
Patch:
@@ -26,16 +26,14 @@
  * It defines a formatter for sql source files.
  */
 public class Sql extends FormatterFactory {
-	private static final String LICENSE_HEADER_DELIMITER = null;
-
 	@Override
 	public Set<String> defaultIncludes() {
 		return Collections.emptySet();
 	}
 
 	@Override
 	public String licenseHeaderDelimiter() {
-		return LICENSE_HEADER_DELIMITER;
+		return null;
 	}
 
 	public void addDbeaver(DBeaver dbeaver) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/typescript/Typescript.java
Patch:
@@ -26,16 +26,14 @@
  * It defines a formatter for typescript source files.
  */
 public class Typescript extends FormatterFactory {
-	private static final String LICENSE_HEADER_DELIMITER = null;
-
 	@Override
 	public Set<String> defaultIncludes() {
 		return Collections.emptySet();
 	}
 
 	@Override
 	public String licenseHeaderDelimiter() {
-		return LICENSE_HEADER_DELIMITER;
+		return null;
 	}
 
 	public void addTsfmt(Tsfmt tsfmt) {

File: lib/src/main/java/com/diffplug/spotless/generic/PipeStepPair.java
Patch:
@@ -105,6 +105,7 @@ public FormatterStep out() {
 		return out;
 	}
 
+	@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 	static class StateApplyToBlock extends StateIn implements Serializable {
 		private static final long serialVersionUID = -844178006407733370L;
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/generic/LicenseHeaderTest.java
Patch:
@@ -141,11 +141,11 @@ private void testUnsupportedFile(String file) throws Exception {
 				"</licenseHeader>");
 
 		String path = "src/main/java/com/diffplug/spotless/" + file;
-		setFile(path).toResource("license/" + file);
+		setFile(path).toResource("license/" + file + ".test");
 
 		mavenRunner().withArguments("spotless:apply").runNoError();
 
 		// file should remain the same
-		assertFile(path).sameAsResource("license/" + file);
+		assertFile(path).sameAsResource("license/" + file + ".test");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/generic/LicenseHeaderTest.java
Patch:
@@ -141,11 +141,11 @@ private void testUnsupportedFile(String file) throws Exception {
 				"</licenseHeader>");
 
 		String path = "src/main/java/com/diffplug/spotless/" + file;
-		setFile(path).toResource("license/" + file);
+		setFile(path).toResource("license/" + file + ".test");
 
 		mavenRunner().withArguments("spotless:apply").runNoError();
 
 		// file should remain the same
-		assertFile(path).sameAsResource("license/" + file);
+		assertFile(path).sameAsResource("license/" + file + ".test");
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -60,10 +60,11 @@ public FormatterStep create() {
 	}
 
 	private State createState() throws IOException, InterruptedException {
+		String trackingIssue = "\n  github issue to handle this better: https://github.com/diffplug/spotless/issues/674";
 		String exeAbsPath = ForeignExe.nameAndVersion("black", version)
 				.pathToExe(pathToExe)
-				.fixCantFind("Try running `pip install black=={version}`, or else tell Spotless where it is with `black().pathToExe('path/to/executable')`")
-				.fixWrongVersion("Try running `pip install --force-reinstall black=={version}`, or else specify `black('{versionFound}')` to Spotless")
+				.fixCantFind("Try running `pip install black=={version}`, or else tell Spotless where it is with `black().pathToExe('path/to/executable')`" + trackingIssue)
+				.fixWrongVersion("Try running `pip install --force-reinstall black=={version}`, or else specify `black('{versionFound}')` to Spotless" + trackingIssue)
 				.confirmVersionAndGetAbsolutePath();
 		return new State(this, exeAbsPath);
 	}

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -73,7 +73,8 @@ private State createState() throws IOException, InterruptedException {
 				"or you can use your platform's package manager:" +
 				"\n  win:   choco install llvm --version {version}  (try dropping version if it fails)" +
 				"\n  mac:   brew install clang-format (TODO: how to specify version?)" +
-				"\n  linux: apt install clang-format  (try clang-format-{version} with dropped minor versions)";
+				"\n  linux: apt install clang-format  (try clang-format-{version} with dropped minor versions)" +
+				"\n    github issue to handle this better: https://github.com/diffplug/spotless/issues/673";
 		String exeAbsPath = ForeignExe.nameAndVersion("clang-format", version)
 				.pathToExe(pathToExe)
 				.fixCantFind(howToInstall)

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.diffplug.spotless.kotlin;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
 import com.diffplug.spotless.FormatterStep;
@@ -28,6 +29,7 @@
  * causes these problems. The root is still a gradle bug, but in the meantime we don't
  * need to hold up *every* PR with this: https://github.com/gradle/gradle/issues/11752
  */
+@Ignore
 public class KtLintStepTest extends ResourceHarness {
 	@Test
 	public void behavior() throws Exception {

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -71,15 +71,15 @@ private State createState() throws IOException, InterruptedException {
 				"You can download clang-format from https://releases.llvm.org and " +
 				"then point Spotless to it with `pathToExe('/path/to/clang-format')` " +
 				"or you can use your platform's package manager:" +
-				"\n  win:   choco install llvm --version {version}" +
-				"\n  mac:   brew install clang-format TODO: how to specify version?" +
+				"\n  win:   choco install llvm --version {version}  (try dropping version if it fails)" +
+				"\n  mac:   brew install clang-format (TODO: how to specify version?)" +
 				"\n  linux: apt install clang-format  (try clang-format-{version} with dropped minor versions)";
 		String exeAbsPath = ForeignExe.nameAndVersion("clang-format", version)
 				.pathToExe(pathToExe)
 				.fixCantFind(howToInstall)
 				.fixWrongVersion(
 						"You can tell Spotless to use the version you already have with `clangFormat('{versionFound}')`" +
-								"or you can download the currently specified version, {version}.\n\n" + howToInstall)
+								"or you can download the currently specified version, {version}.\n" + howToInstall)
 				.confirmVersionAndGetAbsolutePath();
 		return new State(this, exeAbsPath);
 	}

File: lib/src/main/java/com/diffplug/spotless/ForeignExe.java
Patch:
@@ -129,7 +129,6 @@ private RuntimeException exceptionFmt(String msgPrimary, ProcessRunner.Result cm
 			errorMsg.append(msgFix);
 			errorMsg.append('\n');
 		}
-		errorMsg.append('\n');
 		errorMsg.append(cmd.toString());
 		return new RuntimeException(errorMsg.toString());
 	}

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -78,7 +78,7 @@ private State createState() throws IOException, InterruptedException {
 				.pathToExe(pathToExe)
 				.fixCantFind(howToInstall)
 				.fixWrongVersion(
-						"You can tell Spotless to use the version you already have with `clangFormat('{versionActual}')`" +
+						"You can tell Spotless to use the version you already have with `clangFormat('{versionFound}')`" +
 								"or you can download the currently specified version, {version}.\n\n" + howToInstall)
 				.confirmVersionAndGetAbsolutePath();
 		return new State(this, exeAbsPath);

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -63,7 +63,7 @@ private State createState() throws IOException, InterruptedException {
 		String exeAbsPath = ForeignExe.nameAndVersion("black", version)
 				.pathToExe(pathToExe)
 				.fixCantFind("Try running `pip install black=={version}`, or else tell Spotless where it is with `black().pathToExe('path/to/executable')`")
-				.fixWrongVersion("Try running `pip install --force-reinstall black=={version}`, or else specify `black('{versionActual}')` to Spotless")
+				.fixWrongVersion("Try running `pip install --force-reinstall black=={version}`, or else specify `black('{versionFound}')` to Spotless")
 				.confirmVersionAndGetAbsolutePath();
 		return new State(this, exeAbsPath);
 	}

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -75,19 +75,19 @@ static class State implements Serializable {
 		final String version;
 		// used for executing
 		final transient List<String> args;
-		final transient ProcessRunner runner = new ProcessRunner();
 
 		State(BlackStep step, String exeAbsPath) {
 			this.version = step.version;
 			this.args = Arrays.asList(exeAbsPath, "-");
 		}
 
-		String format(String input) throws IOException, InterruptedException {
+		String format(ProcessRunner runner, String input) throws IOException, InterruptedException {
 			return runner.exec(input.getBytes(StandardCharsets.UTF_8), args).assertExitZero(StandardCharsets.UTF_8);
 		}
 
 		FormatterFunc.Closeable toFunc() {
-			return FormatterFunc.Closeable.of(runner, this::format);
+			ProcessRunner runner = new ProcessRunner();
+			return FormatterFunc.Closeable.of(runner, input -> format(runner, input));
 		}
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/ForeignExe.java
Patch:
@@ -80,12 +80,12 @@ public enum ErrorKind {
 		CANT_FIND, WRONG_VERSION
 	}
 
-	public class SetupException extends Exception {
+	public static class SetupException extends Exception {
 		private static final long serialVersionUID = -3515370807495069599L;
 
 		private final ErrorKind kind;
 		private final String msg;
-		private final ProcessRunner.Result result;
+		private final transient ProcessRunner.Result result;
 
 		SetupException(ErrorKind kind, String msg, ProcessRunner.Result result) {
 			this.kind = kind;

File: lib/src/main/java/com/diffplug/spotless/ProcessRunner.java
Patch:
@@ -27,6 +27,8 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Shelling out to a process is harder than it ought to be in Java.
  * If you don't read stdout and stderr on their own threads, you risk
@@ -113,6 +115,7 @@ public void close() {
 		executor.shutdown();
 	}
 
+	@SuppressFBWarnings({"EI_EXPOSE_REP", "EI_EXPOSE_REP2"})
 	public static class Result {
 		private final List<String> args;
 		private final int exitCode;

File: lib/src/main/java/com/diffplug/spotless/cpp/ClangFormatStep.java
Patch:
@@ -29,6 +29,8 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.ProcessRunner;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public class ClangFormatStep {
 	public static String name() {
 		return "clang";
@@ -69,6 +71,7 @@ private State createState() throws ForeignExe.SetupException, IOException, Inter
 		return new State(this, exeAbsPath);
 	}
 
+	@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 	static class State implements Serializable {
 		private static final long serialVersionUID = -1825662356883926318L;
 		// used for up-to-date checks and caching

File: lib/src/main/java/com/diffplug/spotless/python/BlackStep.java
Patch:
@@ -28,6 +28,8 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.ProcessRunner;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public class BlackStep {
 	public static String name() {
 		return "black";
@@ -62,6 +64,7 @@ private State createState() throws ForeignExe.SetupException, IOException, Inter
 		return new State(this, exeAbsPath);
 	}
 
+	@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 	static class State implements Serializable {
 		private static final long serialVersionUID = -1825662356883926318L;
 		// used for up-to-date checks and caching

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterFactory.java
Patch:
@@ -45,8 +45,8 @@ public abstract class FormatterFactory {
 	/** Sentinel to distinguish between "don't ratchet this format" and "use spotless parent format". */
 	private static final String RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL = " not set at format level ";
 
-	@Parameter(defaultValue = RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL)
-	private String ratchetFrom;
+	@Parameter
+	private String ratchetFrom = RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL;
 
 	@Parameter
 	private String[] includes;
@@ -136,7 +136,7 @@ private LineEnding lineEndings(FormatterConfig config) {
 	}
 
 	Optional<String> ratchetFrom(FormatterConfig config) {
-		if (ratchetFrom == RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL) {
+		if (RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL.equals(ratchetFrom)) {
 			return config.getRatchetFrom();
 		} else {
 			return Optional.ofNullable(ratchetFrom);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterFactory.java
Patch:
@@ -45,8 +45,8 @@ public abstract class FormatterFactory {
 	/** Sentinel to distinguish between "don't ratchet this format" and "use spotless parent format". */
 	private static final String RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL = " not set at format level ";
 
-	@Parameter(defaultValue = RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL)
-	private String ratchetFrom;
+	@Parameter
+	private String ratchetFrom = RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL;
 
 	@Parameter
 	private String[] includes;
@@ -136,7 +136,7 @@ private LineEnding lineEndings(FormatterConfig config) {
 	}
 
 	Optional<String> ratchetFrom(FormatterConfig config) {
-		if (ratchetFrom == RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL) {
+		if (RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL.equals(ratchetFrom)) {
 			return config.getRatchetFrom();
 		} else {
 			return Optional.ofNullable(ratchetFrom);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/ImportOrder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,6 +40,8 @@ public FormatterStep newFormatterStep(FormatterStepConfig config) {
 			} else {
 				return ImportOrderStep.forJava().createFrom(order.split(","));
 			}
+		} else if (file == null && order == null) {
+			return ImportOrderStep.forJava().createFrom();
 		} else {
 			throw new IllegalArgumentException("Must specify exactly one of 'file' or 'order'.");
 		}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/ImportOrder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,6 +40,8 @@ public FormatterStep newFormatterStep(FormatterStepConfig config) {
 			} else {
 				return ImportOrderStep.forJava().createFrom(order.split(","));
 			}
+		} else if (file == null && order == null) {
+			return ImportOrderStep.forJava().createFrom();
 		} else {
 			throw new IllegalArgumentException("Must specify exactly one of 'file' or 'order'.");
 		}

File: lib/src/main/java/com/diffplug/spotless/FormatterStepImpl.java
Patch:
@@ -81,6 +81,7 @@ protected String format(State state, String rawUnix, File file) throws Exception
 		void cleanupFormatterFunc() {
 			if (formatter instanceof FormatterFunc.Closeable) {
 				((FormatterFunc.Closeable) formatter).close();
+				formatter = null;
 			}
 		}
 	}

File: lib/src/main/java/com/diffplug/spotless/npm/NpmFormatterStepStateBase.java
Patch:
@@ -74,7 +74,9 @@ private NodeServerLayout prepareNodeServer(File buildDir) throws IOException {
 				this.npmConfig.getPackageJsonContent());
 		NpmResourceHelper
 				.writeUtf8StringToFile(layout.serveJsFile(), this.npmConfig.getServeScriptContent());
+		FormattedPrinter.SYSOUT.print("running npm install");
 		runNpmInstall(layout.nodeModulesDir());
+		FormattedPrinter.SYSOUT.print("npm install finished");
 		return layout;
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessApply.java
Patch:
@@ -68,7 +68,7 @@ public void visitFile(FileVisitDetails fileVisitDetails) {
 					File originalSource = new File(getProject().getProjectDir(), path);
 					try {
 						getLogger().debug("Copying " + fileVisitDetails.getFile() + " to " + originalSource);
-						Files.copy(fileVisitDetails.getFile().toPath(), originalSource.toPath(), StandardCopyOption.REPLACE_EXISTING);
+						Files.copy(fileVisitDetails.getFile().toPath(), originalSource.toPath(), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
 					} catch (IOException e) {
 						throw new RuntimeException(e);
 					}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.Comparator;
 
 import org.gradle.api.GradleException;
@@ -80,6 +81,8 @@ private void processInputFile(Formatter formatter, File input) throws IOExceptio
 				throw new IllegalStateException("Every file has a parent folder.");
 			}
 			Files.createDirectories(parentDir);
+			// Need to copy the original file to the tmp location just to remember the file attributes
+			Files.copy(input.toPath(), output.toPath(), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
 			dirtyState.writeCanonicalTo(output);
 		}
 	}

File: lib/src/main/java/com/diffplug/spotless/npm/FormattedPrinter.java
Patch:
@@ -23,7 +23,8 @@
 public enum FormattedPrinter {
 	SYSOUT(System.out);
 
-	final boolean enabled = true;
+	private static final boolean enabled = false;
+
 	private final PrintStream printStream;
 
 	FormattedPrinter(PrintStream printStream) {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessApply.java
Patch:
@@ -68,7 +68,7 @@ public void visitFile(FileVisitDetails fileVisitDetails) {
 					File originalSource = new File(getProject().getProjectDir(), path);
 					try {
 						getLogger().debug("Copying " + fileVisitDetails.getFile() + " to " + originalSource);
-						Files.copy(fileVisitDetails.getFile().toPath(), originalSource.toPath(), StandardCopyOption.REPLACE_EXISTING);
+						Files.copy(fileVisitDetails.getFile().toPath(), originalSource.toPath(), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
 					} catch (IOException e) {
 						throw new RuntimeException(e);
 					}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.Comparator;
 
 import org.gradle.api.GradleException;
@@ -80,6 +81,8 @@ private void processInputFile(Formatter formatter, File input) throws IOExceptio
 				throw new IllegalStateException("Every file has a parent folder.");
 			}
 			Files.createDirectories(parentDir);
+			// Need to copy the original file to the tmp location just to remember the file attributes
+			Files.copy(input.toPath(), output.toPath(), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
 			dirtyState.writeCanonicalTo(output);
 		}
 	}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -157,8 +157,6 @@ public void paddedCellApplyCheck() throws Exception {
 		assertFile(converge.file).hasContent("");	// converge -> converges
 		assertFile(diverge.file).hasContent("CCC");	// diverge -> no change
 
-		assertFileAttributesEqual(wellbehaved.file, wellbehaved.outputFile);
-
 		// After apply, check should pass
 		wellbehaved.check();
 		cycle.check();

File: lib/src/main/java/com/diffplug/spotless/npm/NpmFormatterStepStateBase.java
Patch:
@@ -66,7 +66,9 @@ private NodeServerLayout prepareNodeServer() throws IOException {
 				this.npmConfig.getPackageJsonContent());
 		NpmResourceHelper
 				.writeUtf8StringToFile(layout.serveJsFile(), this.npmConfig.getServeScriptContent());
+		FormattedPrinter.SYSOUT.print("running npm install");
 		runNpmInstall(layout.nodeModulesDir());
+		FormattedPrinter.SYSOUT.print("npm install finished");
 		return layout;
 	}
 
@@ -76,6 +78,7 @@ private void runNpmInstall(File npmProjectDir) throws IOException {
 
 	protected ServerProcessInfo npmRunServer() throws ServerStartException {
 		try {
+			FormattedPrinter.SYSOUT.print("preparing node server");
 			final NodeServerLayout nodeServerLayout = prepareNodeServer();
 			// The npm process will output the randomly selected port of the http server process to 'server.port' file
 			// so in order to be safe, remove such a file if it exists before starting.

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -157,6 +157,8 @@ public void paddedCellApplyCheck() throws Exception {
 		assertFile(converge.file).hasContent("");	// converge -> converges
 		assertFile(diverge.file).hasContent("CCC");	// diverge -> no change
 
+		assertFileAttributesEqual(wellbehaved.file, wellbehaved.outputFile);
+
 		// After apply, check should pass
 		wellbehaved.check();
 		cycle.check();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -82,7 +82,7 @@ private void processInputFile(Formatter formatter, File input) throws IOExceptio
 			}
 			Files.createDirectories(parentDir);
 			// Need to copy the original file to the tmp location just to remember the file attributes
-			Files.copy(input.toPath(), output.toPath(), StandardCopyOption.COPY_ATTRIBUTES);
+			Files.copy(input.toPath(), output.toPath(), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
 			dirtyState.writeCanonicalTo(output);
 		}
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessApply.java
Patch:
@@ -68,7 +68,7 @@ public void visitFile(FileVisitDetails fileVisitDetails) {
 					File originalSource = new File(getProject().getProjectDir(), path);
 					try {
 						getLogger().debug("Copying " + fileVisitDetails.getFile() + " to " + originalSource);
-						Files.copy(fileVisitDetails.getFile().toPath(), originalSource.toPath(), StandardCopyOption.REPLACE_EXISTING);
+						Files.copy(fileVisitDetails.getFile().toPath(), originalSource.toPath(), StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
 					} catch (IOException e) {
 						throw new RuntimeException(e);
 					}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskImpl.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.util.Comparator;
 
 import org.gradle.api.GradleException;
@@ -80,6 +81,8 @@ private void processInputFile(Formatter formatter, File input) throws IOExceptio
 				throw new IllegalStateException("Every file has a parent folder.");
 			}
 			Files.createDirectories(parentDir);
+			// Need to copy the original file to the tmp location just to remember the file attributes
+			Files.copy(input.toPath(), output.toPath(), StandardCopyOption.COPY_ATTRIBUTES);
 			dirtyState.writeCanonicalTo(output);
 		}
 	}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -142,7 +142,7 @@ public void integration_ktfmt_with_dropbox_style() throws IOException {
 		setFile("build.gradle").toLines(
 				"plugins {",
 				"    id 'nebula.kotlin' version '1.0.6'",
-				"    id 'com.diffplug.gradle.spotless'",
+				"    id 'com.diffplug.spotless'",
 				"}",
 				"repositories { mavenCentral() }",
 				"spotless {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationHarness.java
Patch:
@@ -38,7 +38,7 @@
 
 public class GradleIntegrationHarness extends ResourceHarness {
 	public enum GradleVersionSupport {
-		MINIMUM("5.4"), SETTINGS_PLUGINS("6.0");
+		MINIMUM(SpotlessPlugin.MINIMUM_GRADLE), SETTINGS_PLUGINS("6.0");
 
 		final String version;
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -116,6 +116,7 @@ public void useTsConfigFileConfig() throws IOException {
 				"}",
 				"spotless {",
 				"    typescript {",
+				"        target 'src/**/*.ts'",
 				"        tsfmt().tsconfigFile('tsconfig.json')",
 				"    }",
 				"}");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationHarness.java
Patch:
@@ -33,7 +33,7 @@
 import com.diffplug.common.base.StringPrinter;
 import com.diffplug.common.tree.TreeDef;
 import com.diffplug.common.tree.TreeStream;
-import com.diffplug.spotless.LineEnding;
+import com.diffplug.spotless.FileSignature;
 import com.diffplug.spotless.ResourceHarness;
 
 public class GradleIntegrationHarness extends ResourceHarness {
@@ -111,8 +111,7 @@ protected void checkIsUpToDate(boolean upToDate) throws IOException {
 		taskIsUpToDate("spotlessCheck", upToDate);
 	}
 
-	private static final boolean IS_UNIX = LineEnding.PLATFORM_NATIVE.str().equals("\n");
-	private static final int FILESYSTEM_RESOLUTION_MS = IS_UNIX ? 2000 : 150;
+	private static final int FILESYSTEM_RESOLUTION_MS = FileSignature.machineIsWin() ? 150 : 2000;
 
 	void pauseForFilesystem() {
 		Errors.rethrow().run(() -> Thread.sleep(FILESYSTEM_RESOLUTION_MS));

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FreshMarkExtensionTest.java
Patch:
@@ -30,6 +30,7 @@ public void integration() throws IOException {
 				"}",
 				"spotless {",
 				"    freshmark {",
+				"        target '*.md'",
 				"        properties {",
 				"            it.put('lib', 'MyLib')",
 				"            it.put('author', 'Me')",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SqlExtensionTest.java
Patch:
@@ -29,6 +29,7 @@ public void should_format_sql_with_default_configuration() throws IOException {
 				"}",
 				"spotless {",
 				"    sql {",
+				"       target 'src/**'",
 				"       dbeaver()",
 				"    }",
 				"}");
@@ -46,6 +47,7 @@ public void should_format_sql_with_alternative_configuration() throws IOExceptio
 				"}",
 				"spotless {",
 				"    sql {",
+				"       target 'src/**'",
 				"       dbeaver().configFile 'myConfig.properties'",
 				"    }",
 				"}");

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FreshMarkExtension.java
Patch:
@@ -62,8 +62,7 @@ public void propertiesFile(Object... files) {
 	protected void setupTask(SpotlessTask task) {
 		// defaults to all markdown files
 		if (target == null) {
-			noDefaultTarget();
-			target = parseTarget("**/*.md");
+			throw noDefaultTargetException();
 		}
 		super.setupTask(task);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SqlExtension.java
Patch:
@@ -56,8 +56,7 @@ private FormatterStep createStep() {
 	@Override
 	protected void setupTask(SpotlessTask task) {
 		if (target == null) {
-			target("**/*.sql");
-			noDefaultTarget();
+			throw noDefaultTargetException();
 		}
 		super.setupTask(task);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/TypescriptExtension.java
Patch:
@@ -170,8 +170,7 @@ private void fixParserToTypescript() {
 	protected void setupTask(SpotlessTask task) {
 		// defaults to all typescript files
 		if (target == null) {
-			noDefaultTarget();
-			target = parseTarget("**/*.ts");
+			throw noDefaultTargetException();
 		}
 		super.setupTask(task);
 	}

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -31,6 +31,7 @@
 
 import javax.annotation.Nullable;
 
+import com.diffplug.spotless.FileSignature;
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
@@ -288,7 +289,7 @@ private String setLicenseHeaderYearsFromGitHistory(String raw, File file) throws
 		private static String parseYear(String cmd, File file) throws IOException {
 			String fullCmd = cmd + " " + file.getAbsolutePath();
 			ProcessBuilder builder = new ProcessBuilder().directory(file.getParentFile());
-			if (LineEnding.nativeIsWin()) {
+			if (FileSignature.machineIsWin()) {
 				builder.command("cmd", "/c", fullCmd);
 			} else {
 				builder.command("bash", "-c", fullCmd);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessCheck.java
Patch:
@@ -30,8 +30,8 @@
 import org.gradle.api.tasks.PathSensitivity;
 import org.gradle.api.tasks.TaskAction;
 
+import com.diffplug.spotless.FileSignature;
 import com.diffplug.spotless.Formatter;
-import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.extra.integration.DiffMessageFormatter;
 
 public class SpotlessCheck extends DefaultTask {
@@ -105,6 +105,6 @@ private String getTaskPathPrefix() {
 	}
 
 	private static String calculateGradleCommand() {
-		return LineEnding.nativeIsWin() ? "gradlew.bat" : "./gradlew";
+		return FileSignature.machineIsWin() ? "gradlew.bat" : "./gradlew";
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Test;
 
 import com.diffplug.common.base.StringPrinter;
+import com.diffplug.spotless.FileSignature;
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
@@ -110,7 +111,7 @@ private void assertCheckFailure(Bundle spotless, String... expectedLines) throws
 		Assertions.assertThat(middle).isEqualTo(expectedMessage.substring(0, expectedMessage.length() - 1));
 	}
 
-	static final String EXPECTED_RUN_SPOTLESS_APPLY_SUGGESTION = LineEnding.nativeIsWin()
+	static final String EXPECTED_RUN_SPOTLESS_APPLY_SUGGESTION = FileSignature.machineIsWin()
 			? "Run 'gradlew.bat :spotlessApply' to fix these violations."
 			: "Run './gradlew :spotlessApply' to fix these violations.";
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SpecificFilesTest.java
Patch:
@@ -23,13 +23,13 @@
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 
-import com.diffplug.spotless.LineEnding;
+import com.diffplug.spotless.FileSignature;
 
 @Category(ExcludeFromPluginGradleModern.class)
 public class SpecificFilesTest extends GradleIntegrationHarness {
 
 	private static String regexWinSafe(String input) {
-		return LineEnding.nativeIsWin() ? input.replace("/", "\\\\") : input;
+		return FileSignature.machineIsWin() ? input.replace("/", "\\\\") : input;
 	}
 
 	private String testFilePath(int number) {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenRunner.java
Patch:
@@ -28,7 +28,7 @@
 
 import com.diffplug.common.base.Throwables;
 import com.diffplug.common.io.ByteStreams;
-import com.diffplug.spotless.LineEnding;
+import com.diffplug.spotless.FileSignature;
 
 /**
  * Harness for running a maven build, same idea as the
@@ -128,7 +128,7 @@ public String toString() {
 
 	/** Prepends any arguments necessary to run a console command. */
 	private static List<String> getPlatformCmds(String cmd) {
-		if (LineEnding.nativeIsWin()) {
+		if (FileSignature.machineIsWin()) {
 			return Arrays.asList("cmd", "/c", "mvnw " + cmd);
 		} else {
 			return Arrays.asList("/bin/sh", "-c", "./mvnw " + cmd);

File: lib/src/main/java/com/diffplug/spotless/cpp/CppDefaults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@ public class CppDefaults {
 	 * Filter based on Eclipse-CDT <code>org.eclipse.core.contenttype.contentTypes</code>
 	 * extension <code>cSource</code>, <code>cHeader</code>, <code>cxxSource</code> and <code>cxxHeader</code>.
 	 */
+	@Deprecated
 	public static final List<String> FILE_FILTER = Collections.unmodifiableList(
 			Arrays.asList("c", "h", "C", "cpp", "cxx", "cc", "c++", "h", "hpp", "hh", "hxx", "inc")
 					.stream().map(s -> {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/CppExtension.java
Patch:
@@ -65,6 +65,7 @@ protected void setupTask(SpotlessTask task) {
 			 * Hence file extension based filtering is used in line with the org.eclipse.core.contenttype.contentTypes<
 			 * defined by the CDT plugin.
 			 */
+			noDefaultTarget();
 			target(CppDefaults.FILE_FILTER.toArray());
 		}
 		super.setupTask(task);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FreshMarkExtension.java
Patch:
@@ -62,6 +62,7 @@ public void propertiesFile(Object... files) {
 	protected void setupTask(SpotlessTask task) {
 		// defaults to all markdown files
 		if (target == null) {
+			noDefaultTarget();
 			target = parseTarget("**/*.md");
 		}
 		super.setupTask(task);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SqlExtension.java
Patch:
@@ -57,6 +57,7 @@ private FormatterStep createStep() {
 	protected void setupTask(SpotlessTask task) {
 		if (target == null) {
 			target("**/*.sql");
+			noDefaultTarget();
 		}
 		super.setupTask(task);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/TypescriptExtension.java
Patch:
@@ -170,6 +170,7 @@ private void fixParserToTypescript() {
 	protected void setupTask(SpotlessTask task) {
 		// defaults to all typescript files
 		if (target == null) {
+			noDefaultTarget();
 			target = parseTarget("**/*.ts");
 		}
 		super.setupTask(task);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -148,6 +148,9 @@ private List<File> collectFiles(FormatterFactory formatterFactory) throws MojoEx
 		Set<String> configuredExcludes = formatterFactory.excludes();
 
 		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes() : configuredIncludes;
+		if (includes.isEmpty()) {
+			throw new MojoExecutionException("You must specify some files to include, such as '<includes><include>src/**</include></includes>'");
+		}
 
 		Set<String> excludes = new HashSet<>(FileUtils.getDefaultExcludesAsList());
 		excludes.add(withTrailingSeparator(buildDir.toString()));

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationHarness.java
Patch:
@@ -119,7 +119,7 @@ protected void writePomWithCppSteps(String... steps) throws IOException {
 	}
 
 	protected void writePomWithTypescriptSteps(String... steps) throws IOException {
-		writePom(groupWithSteps("typescript", steps));
+		writePom(groupWithSteps("typescript", including("**/*.ts"), steps));
 	}
 
 	protected void writePomWithPrettierSteps(String includes, String... steps) throws IOException {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/generic/LicenseHeaderTest.java
Patch:
@@ -37,6 +37,7 @@ public void fromFileJava() throws Exception {
 	public void fromContentCpp() throws Exception {
 		String cppLicense = "//my license";
 		writePomWithCppSteps(
+				"<includes><include>src/**</include></includes>",
 				"<licenseHeader>",
 				"  <content>",
 				cppLicense,

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationHarness.java
Patch:
@@ -119,7 +119,7 @@ protected void writePomWithCppSteps(String... steps) throws IOException {
 	}
 
 	protected void writePomWithTypescriptSteps(String... steps) throws IOException {
-		writePom(groupWithSteps("typescript", steps));
+		writePom(groupWithSteps("typescript", including("**/*.ts"), steps));
 	}
 
 	protected void writePomWithPrettierSteps(String includes, String... steps) throws IOException {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/generic/LicenseHeaderTest.java
Patch:
@@ -37,6 +37,7 @@ public void fromFileJava() throws Exception {
 	public void fromContentCpp() throws Exception {
 		String cppLicense = "//my license";
 		writePomWithCppSteps(
+				"<includes><include>src/**</include></includes>",
 				"<licenseHeader>",
 				"  <content>",
 				cppLicense,

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SqlExtension.java
Patch:
@@ -57,6 +57,7 @@ private FormatterStep createStep() {
 	protected void setupTask(SpotlessTask task) {
 		if (target == null) {
 			target("**/*.sql");
+			noDefaultTarget();
 		}
 		super.setupTask(task);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FreshMarkExtension.java
Patch:
@@ -62,6 +62,7 @@ public void propertiesFile(Object... files) {
 	protected void setupTask(SpotlessTask task) {
 		// defaults to all markdown files
 		if (target == null) {
+			noDefaultTarget();
 			target = parseTarget("**/*.md");
 		}
 		super.setupTask(task);

File: lib/src/main/java/com/diffplug/spotless/cpp/CppDefaults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@ public class CppDefaults {
 	 * Filter based on Eclipse-CDT <code>org.eclipse.core.contenttype.contentTypes</code>
 	 * extension <code>cSource</code>, <code>cHeader</code>, <code>cxxSource</code> and <code>cxxHeader</code>.
 	 */
+	@Deprecated
 	public static final List<String> FILE_FILTER = Collections.unmodifiableList(
 			Arrays.asList("c", "h", "C", "cpp", "cxx", "cc", "c++", "h", "hpp", "hh", "hxx", "inc")
 					.stream().map(s -> {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/CppExtension.java
Patch:
@@ -65,6 +65,7 @@ protected void setupTask(SpotlessTask task) {
 			 * Hence file extension based filtering is used in line with the org.eclipse.core.contenttype.contentTypes<
 			 * defined by the CDT plugin.
 			 */
+			noDefaultTarget();
 			target(CppDefaults.FILE_FILTER.toArray());
 		}
 		super.setupTask(task);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/TypescriptExtension.java
Patch:
@@ -170,6 +170,7 @@ private void fixParserToTypescript() {
 	protected void setupTask(SpotlessTask task) {
 		// defaults to all typescript files
 		if (target == null) {
+			noDefaultTarget();
 			target = parseTarget("**/*.ts");
 		}
 		super.setupTask(task);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -148,6 +148,9 @@ private List<File> collectFiles(FormatterFactory formatterFactory) throws MojoEx
 		Set<String> configuredExcludes = formatterFactory.excludes();
 
 		Set<String> includes = configuredIncludes.isEmpty() ? formatterFactory.defaultIncludes() : configuredIncludes;
+		if (includes.isEmpty()) {
+			throw new MojoExecutionException("You must specify some files to include, such as '<includes><include>src/**</include></includes>'");
+		}
 
 		Set<String> excludes = new HashSet<>(FileUtils.getDefaultExcludesAsList());
 		excludes.add(withTrailingSeparator(buildDir.toString()));

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/Antlr4Extension.java
Patch:
@@ -53,7 +53,7 @@ private FormatterStep createStep() {
 	@Override
 	protected void setupTask(SpotlessTask task) {
 		if (target == null) {
-			target = parseTarget(Antlr4Defaults.defaultIncludes());
+			target = parseTarget(Antlr4Defaults.includes());
 		}
 		super.setupTask(task);
 	}

File: lib/src/main/java/com/diffplug/spotless/antlr4/Antlr4Defaults.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.diffplug.spotless.antlr4;
 
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 public class Antlr4Defaults {
 
 	private static final String LICENSE_HEADER_DELIMITER = "(grammar|lexer grammar|parser grammar)";
 
-	private static final List<String> defaultIncludes = Arrays.asList("src/main/antlr4/**/*.g4", "src/test/antlr4/**/*.g4");
+	private static final List<String> defaultIncludes = Collections.singletonList("src/*/antlr4/**/*.g4");
 
 	private Antlr4Defaults() {}
 

File: lib/src/main/java/com/diffplug/spotless/npm/NpmProcess.java
Patch:
@@ -79,6 +79,8 @@ private String commandLine(String... args) {
 	}
 
 	static class NpmProcessException extends RuntimeException {
+		private static final long serialVersionUID = 6424331316676759525L;
+
 		public NpmProcessException(String message) {
 			super(message);
 		}

File: lib/src/main/java/com/diffplug/spotless/npm/NpmResourceHelper.java
Patch:
@@ -28,9 +28,8 @@ private NpmResourceHelper() {
 		// no instance required
 	}
 
-	static void writeUtf8StringToFile(File targetDir, String fileName, String stringToWrite) throws IOException {
-		File packageJsonFile = new File(targetDir, fileName);
-		Files.write(packageJsonFile.toPath(), stringToWrite.getBytes(StandardCharsets.UTF_8));
+	static void writeUtf8StringToFile(File file, String stringToWrite) throws IOException {
+		Files.write(file.toPath(), stringToWrite.getBytes(StandardCharsets.UTF_8));
 	}
 
 	static void writeUtf8StringToOutputStream(String stringToWrite, OutputStream outputStream) throws IOException {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/RegisterDependenciesTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -106,10 +106,10 @@ public void trivialFunction() throws IOException {
 		Files.write(Integer.toString(getSteps().size()), unitOutput, StandardCharsets.UTF_8);
 	}
 
-	GitRatchet gitRatchet = new GitRatchet();
+	GitRatchetGradle gitRatchet = new GitRatchetGradle();
 
 	@Internal
-	GitRatchet getGitRatchet() {
+	GitRatchetGradle getGitRatchet() {
 		return gitRatchet;
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -61,6 +61,9 @@ public String getFilePatterns() {
 	}
 
 	public void setFilePatterns(String filePatterns) {
+		if (!filePatterns.equals("") && this instanceof SpotlessTaskModern) {
+			throw new IllegalArgumentException("-PspotlessFiles is not supported in the modern plugin");
+		}
 		this.filePatterns = Objects.requireNonNull(filePatterns);
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/XmlExtension.java
Patch:
@@ -19,9 +19,9 @@
 
 import org.gradle.api.Project;
 
+import com.diffplug.gradle.spotless.libdeprecated.XmlDefaults;
 import com.diffplug.spotless.extra.EclipseBasedStepBuilder;
 import com.diffplug.spotless.extra.wtp.EclipseWtpFormatterStep;
-import com.diffplug.spotless.xml.XmlDefaults;
 
 /**
  * The XML extension is deprecated. Use the generic {@link FormatExtension} instead.
@@ -46,7 +46,7 @@ public class EclipseConfig {
 		private final EclipseBasedStepBuilder builder;
 
 		EclipseConfig(String version) {
-			builder = EclipseWtpFormatterStep.createXmlBuilder(provisioner());
+			builder = EclipseWtpFormatterStep.XML.createBuilder(provisioner());
 			builder.setVersion(version);
 			addStep(builder.build());
 		}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/libdeprecated/CssDefaults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.spotless.css;
+package com.diffplug.gradle.spotless.libdeprecated;
 
 import java.util.Arrays;
 import java.util.Collections;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/libdeprecated/XmlDefaults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.spotless.xml;
+package com.diffplug.gradle.spotless.libdeprecated;
 
 import java.util.Arrays;
 import java.util.Collections;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,14 +37,14 @@ public class FormatTaskTest extends ResourceHarness {
 	public void createTask() throws IOException {
 		Project project = TestProvisioner.gradleProject(rootFolder());
 		spotlessTask = project.getTasks().create("spotlessTaskUnderTest", SpotlessTask.class);
+		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 	}
 
 	@Test
 	public void testLineEndings() throws Exception {
 		File testFile = setFile("testFile").toContent("\r\n");
 		File outputFile = new File(spotlessTask.getOutputDirectory(), "testFile");
 
-		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 		spotlessTask.setTarget(Collections.singleton(testFile));
 		execute(spotlessTask);
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GitRatchetGradleTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.gradle.testkit.runner.TaskOutcome;
 import org.junit.Test;
 
-public class RatchetFromTest extends GradleIntegrationHarness {
+public class GitRatchetGradleTest extends GradleIntegrationHarness {
 	private static final String TEST_PATH = "src/markdown/test.md";
 
 	private Git initRepo() throws IllegalStateException, GitAPIException, IOException {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/LicenseHeaderTest.java
Patch:
@@ -46,7 +46,7 @@ private void assertUnchanged(String year) throws IOException {
 
 	private void assertTransform(String yearBefore, String yearAfter) throws IOException {
 		setFile(TEST_JAVA).toContent("/** " + yearBefore + " */\n" + CONTENT);
-		gradleRunner().withArguments("spotlessApply", "--stacktrace").build();
+		gradleRunner().withArguments("spotlessApply", "--stacktrace").forwardOutput().build();
 		assertFile(TEST_JAVA).hasContent("/** " + yearAfter + " */\n" + CONTENT);
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/libdeprecated/CssDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.spotless.css;
+package com.diffplug.gradle.spotless.libdeprecated;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -33,7 +33,7 @@ public class CssDefaultsTest extends ResourceHarness {
 	@Test
 	public void testDelimiterExpr() throws Exception {
 		final String header = "/*My tests header*/";
-		FormatterStep step = LicenseHeaderStep.createFromHeader(header, CssDefaults.DELIMITER_EXPR);
+		FormatterStep step = LicenseHeaderStep.headerDelimiter(header, CssDefaults.DELIMITER_EXPR).build();
 		final File dummyFile = setFile("src/main/cpp/file1.dummy").toContent("");
 		for (String testSource : Arrays.asList(
 				"/* Starts with element selector */@\np {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/libdeprecated/XmlDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.spotless.xml;
+package com.diffplug.gradle.spotless.libdeprecated;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -33,7 +33,7 @@ public class XmlDefaultsTest extends ResourceHarness {
 	@Test
 	public void testDelimiterExpr() throws Exception {
 		final String header = "<!--My tests header-->";
-		FormatterStep step = LicenseHeaderStep.createFromHeader(header, XmlDefaults.DELIMITER_EXPR);
+		FormatterStep step = LicenseHeaderStep.headerDelimiter(header, XmlDefaults.DELIMITER_EXPR).build();
 		final File dummyFile = setFile("src/main/file.dummy").toContent("");
 		for (String testSource : Arrays.asList(
 				"<!--XML starts with element-->@\n<a></a>",

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessApplyMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.List;
 
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugins.annotations.Mojo;
@@ -35,7 +34,7 @@ public class SpotlessApplyMojo extends AbstractSpotlessMojo {
 	private boolean skip;
 
 	@Override
-	protected void process(List<File> files, Formatter formatter) throws MojoExecutionException {
+	protected void process(Iterable<File> files, Formatter formatter) throws MojoExecutionException {
 		if (skip) {
 			getLog().info("Spotless apply skipped");
 			return;

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessCheckMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public class SpotlessCheckMojo extends AbstractSpotlessMojo {
 	private boolean skip;
 
 	@Override
-	protected void process(List<File> files, Formatter formatter) throws MojoExecutionException {
+	protected void process(Iterable<File> files, Formatter formatter) throws MojoExecutionException {
 		if (skip) {
 			getLog().info("Spotless check skipped");
 			return;

File: testlib/src/test/java/com/diffplug/spotless/cpp/CppDefaultsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,7 @@ public class CppDefaultsTest extends ResourceHarness {
 	@Test
 	public void testDelimiterExpr() throws Exception {
 		final String header = "/*My tests header*/";
-		FormatterStep step = LicenseHeaderStep.createFromHeader(header, CppDefaults.DELIMITER_EXPR);
+		FormatterStep step = LicenseHeaderStep.headerDelimiter(header, CppDefaults.DELIMITER_EXPR).build();
 		final File dummyFile = setFile("src/main/cpp/file1.dummy").toContent("");
 		for (String testSource : Arrays.asList(
 				"//Accpet multiple spaces between composed term.@using  namespace std;",

File: lib/src/main/java/com/diffplug/spotless/npm/NpmResourceHelper.java
Patch:
@@ -28,9 +28,8 @@ private NpmResourceHelper() {
 		// no instance required
 	}
 
-	static void writeUtf8StringToFile(File targetDir, String fileName, String stringToWrite) throws IOException {
-		File packageJsonFile = new File(targetDir, fileName);
-		Files.write(packageJsonFile.toPath(), stringToWrite.getBytes(StandardCharsets.UTF_8));
+	static void writeUtf8StringToFile(File file, String stringToWrite) throws IOException {
+		Files.write(file.toPath(), stringToWrite.getBytes(StandardCharsets.UTF_8));
 	}
 
 	static void writeUtf8StringToOutputStream(String stringToWrite, OutputStream outputStream) throws IOException {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -61,6 +61,9 @@ public String getFilePatterns() {
 	}
 
 	public void setFilePatterns(String filePatterns) {
+		if (!filePatterns.equals("") && this instanceof SpotlessTaskModern) {
+			throw new IllegalArgumentException("-PspotlessFiles is not supported in the modern plugin");
+		}
 		this.filePatterns = Objects.requireNonNull(filePatterns);
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTaskBase.java
Patch:
@@ -63,7 +63,7 @@ public void setEncoding(String encoding) {
 		this.encoding = Objects.requireNonNull(encoding);
 	}
 
-	protected LineEnding.Policy lineEndingsPolicy = LineEnding.UNIX.createPolicy();
+	protected LineEnding.Policy lineEndingsPolicy;
 
 	@Input
 	public LineEnding.Policy getLineEndingsPolicy() {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,14 +37,14 @@ public class FormatTaskTest extends ResourceHarness {
 	public void createTask() throws IOException {
 		Project project = TestProvisioner.gradleProject(rootFolder());
 		spotlessTask = project.getTasks().create("spotlessTaskUnderTest", SpotlessTask.class);
+		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 	}
 
 	@Test
 	public void testLineEndings() throws Exception {
 		File testFile = setFile("testFile").toContent("\r\n");
 		File outputFile = new File(spotlessTask.getOutputDirectory(), "testFile");
 
-		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 		spotlessTask.setTarget(Collections.singleton(testFile));
 		execute(spotlessTask);
 

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/GitRatchetMaven.java
Patch:
@@ -35,7 +35,7 @@ protected File getParent(File project) {
 		return project.getParentFile();
 	}
 
-	private static GitRatchetMaven instance = new GitRatchetMaven();
+	private static volatile GitRatchetMaven instance = new GitRatchetMaven();
 
 	static GitRatchetMaven instance() {
 		if (instance == null) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -37,14 +37,14 @@ public class FormatTaskTest extends ResourceHarness {
 	public void createTask() throws IOException {
 		Project project = TestProvisioner.gradleProject(rootFolder());
 		spotlessTask = project.getTasks().create("spotlessTaskUnderTest", SpotlessTask.class);
+		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 	}
 
 	@Test
 	public void testLineEndings() throws Exception {
 		File testFile = setFile("testFile").toContent("\r\n");
 		File outputFile = new File(spotlessTask.getOutputDirectory(), "testFile");
 
-		spotlessTask.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 		spotlessTask.setTarget(Collections.singleton(testFile));
 		execute(spotlessTask);
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/Antlr4Extension.java
Patch:
@@ -24,7 +24,7 @@
 public class Antlr4Extension extends FormatExtension implements HasBuiltinDelimiterForLicense {
 	static final String NAME = "antlr4";
 
-	public Antlr4Extension(SpotlessExtension rootExtension) {
+	public Antlr4Extension(SpotlessExtensionBase rootExtension) {
 		super(rootExtension);
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/Antlr4ExtensionTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 
-public class Antlr4ExtensionTest extends GradleIntegrationTest {
+public class Antlr4ExtensionTest extends GradleIntegrationHarness {
 
 	@Test
 	public void applyUsingDefaultVersion() throws IOException {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/antlr4/Antlr4FormatterTest.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.junit.Test;
 
-import com.diffplug.spotless.maven.MavenIntegrationTest;
+import com.diffplug.spotless.maven.MavenIntegrationHarness;
 
-public class Antlr4FormatterTest extends MavenIntegrationTest {
+public class Antlr4FormatterTest extends MavenIntegrationHarness {
 
 	@Test
 	public void applyUsingCustomVersion() throws Exception {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GitRatchet.java
Patch:
@@ -186,6 +186,9 @@ public synchronized ObjectId rootTreeShaOf(Project project, String reference) {
 			ObjectId treeSha = rootTreeShaCache.get(repo, reference);
 			if (treeSha == null) {
 				ObjectId commitSha = repo.resolve(reference);
+				if (commitSha == null) {
+					throw new IllegalArgumentException("No such reference '" + reference + "'");
+				}
 				try (RevWalk revWalk = new RevWalk(repo)) {
 					RevCommit revCommit = revWalk.parseCommit(commitSha);
 					treeSha = revCommit.getTree();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GitRatchet.java
Patch:
@@ -186,6 +186,9 @@ public synchronized ObjectId rootTreeShaOf(Project project, String reference) {
 			ObjectId treeSha = rootTreeShaCache.get(repo, reference);
 			if (treeSha == null) {
 				ObjectId commitSha = repo.resolve(reference);
+				if (commitSha == null) {
+					throw new IllegalArgumentException("No such reference '" + reference + "'");
+				}
 				try (RevWalk revWalk = new RevWalk(repo)) {
 					RevCommit revCommit = revWalk.parseCommit(commitSha);
 					treeSha = revCommit.getTree();

File: testlib/src/test/java/com/diffplug/spotless/npm/PrettierFormatterStepTest.java
Patch:
@@ -88,16 +88,17 @@ public void parserInferenceIsWorking() throws Exception {
 		}
 
 		@Test
-		public void recreate500InternalServerError() throws Exception {
+		public void verifyPrettierErrorMessageIsRelayed() throws Exception {
 			FormatterStep formatterStep = PrettierFormatterStep.create(
 					PrettierFormatterStep.defaultDevDependenciesWithPrettier("2.0.5"),
 					TestProvisioner.mavenCentral(),
 					buildDir(),
 					npmExecutable(),
 					new PrettierConfig(null, ImmutableMap.of("parser", "postcss")));
 			try (StepHarness stepHarness = StepHarness.forStep(formatterStep)) {
-				stepHarness.testException("npm/prettier/filetypes/scss/causes500error.dirty", exception -> {
+				stepHarness.testException("npm/prettier/filetypes/scss/scss.dirty", exception -> {
 					exception.hasMessageContaining("HTTP 501");
+					exception.hasMessageContaining("Couldn't resolve parser \"postcss\"");
 				});
 			}
 		}

File: lib/src/main/java/com/diffplug/spotless/npm/NpmFormatterStepStateBase.java
Patch:
@@ -45,6 +45,7 @@ abstract class NpmFormatterStepStateBase implements Serializable {
 	@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 	public final transient File nodeModulesDir;
 
+	@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 	private final transient File npmExecutable;
 
 	private final NpmConfig npmConfig;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -115,7 +115,7 @@ public void setEncoding(String name) {
 
 	private String ratchetFrom = RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL;
 
-	/** @See {@link #setRatchetFrom(String)} */
+	/** @see #setRatchetFrom(String) */
 	public String getRatchetFrom() {
 		return ratchetFrom == RATCHETFROM_NOT_SET_AT_FORMAT_LEVEL ? spotless.getRatchetFrom() : ratchetFrom;
 	}
@@ -128,7 +128,7 @@ public void setRatchetFrom(String ratchetFrom) {
 		this.ratchetFrom = ratchetFrom;
 	}
 
-	/** @See {@link #setRatchetFrom(String)} */
+	/** @see #setRatchetFrom(String) */
 	public void ratchetFrom(String ratchetFrom) {
 		setRatchetFrom(ratchetFrom);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtensionBase.java
Patch:
@@ -104,12 +104,12 @@ public void setRatchetFrom(String ratchetFrom) {
 		this.ratchetFrom = ratchetFrom;
 	}
 
-	/** @See {@link #setRatchetFrom(String)} */
+	/** @see #setRatchetFrom(String) */
 	public @Nullable String getRatchetFrom() {
 		return ratchetFrom;
 	}
 
-	/** @See {@link #setRatchetFrom(String)} */
+	/** @see #setRatchetFrom(String) */
 	public void ratchetFrom(String ratchetFrom) {
 		setRatchetFrom(ratchetFrom);
 	}

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -36,6 +36,8 @@
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.SerializableFileFilter;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /** Prefixes a license header before the package statement. */
 public final class LicenseHeaderStep implements Serializable {
 	private static final long serialVersionUID = 1L;
@@ -262,6 +264,7 @@ private static String parseYear(String cmd, File file) throws IOException {
 
 	private static final Pattern FIND_YEAR = Pattern.compile("Date:   .* ([0-9]{4}) ");
 
+	@SuppressFBWarnings("DM_DEFAULT_ENCODING")
 	private static String drain(InputStream stream) throws IOException {
 		ByteArrayOutputStream output = new ByteArrayOutputStream();
 		byte[] buf = new byte[1024];

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitRatchet.java
Patch:
@@ -200,7 +200,7 @@ public synchronized ObjectId rootTreeShaOf(Project project, String reference) {
 				rootTreeShaCache.put(repo, reference, treeSha);
 			}
 			return treeSha;
-		} catch (Exception e) {
+		} catch (IOException e) {
 			throw Errors.asRuntime(e);
 		}
 	}
@@ -225,7 +225,7 @@ public synchronized ObjectId subtreeShaOf(Project project, ObjectId rootTreeSha)
 				subtreeShaCache.put(project, subtreeSha);
 			}
 			return subtreeSha;
-		} catch (Exception e) {
+		} catch (IOException e) {
 			throw Errors.asRuntime(e);
 		}
 	}

File: lib/src/main/java/com/diffplug/spotless/FileSignature.java
Patch:
@@ -112,7 +112,7 @@ public File getOnlyFile() {
 
 	/** Transforms a native path to a unix one. */
 	public static String pathNativeToUnix(String pathNative) {
-		return LineEnding.nativeIsWin() ? pathNative : pathNative.replace('\\', '/');
+		return LineEnding.nativeIsWin() ? pathNative.replace('\\', '/') : pathNative;
 	}
 
 	/** Transforms a unix path to a native one. */

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GitRatchet.java
Patch:
@@ -44,6 +44,7 @@
 import com.diffplug.common.base.Errors;
 import com.diffplug.common.collect.HashBasedTable;
 import com.diffplug.common.collect.Table;
+import com.diffplug.spotless.FileSignature;
 
 class GitRatchet implements AutoCloseable {
 	/**
@@ -54,7 +55,7 @@ class GitRatchet implements AutoCloseable {
 	 */
 	public boolean isClean(Project project, ObjectId treeSha, File file) throws IOException {
 		Repository repo = repositoryFor(project);
-		String path = repo.getWorkTree().toPath().relativize(file.toPath()).toString();
+		String path = FileSignature.pathNativeToUnix(repo.getWorkTree().toPath().relativize(file.toPath()).toString());
 
 		// TODO: should be cached-per-repo if it is thread-safe, or per-repo-per-thread if it is not
 		DirCache dirCache = repo.readDirCache();

File: lib/src/main/java/com/diffplug/spotless/FileSignature.java
Patch:
@@ -112,7 +112,7 @@ public File getOnlyFile() {
 
 	/** Transforms a native path to a unix one. */
 	public static String pathNativeToUnix(String pathNative) {
-		return LineEnding.nativeIsWin() ? pathNative : pathNative.replace('\\', '/');
+		return LineEnding.nativeIsWin() ? pathNative.replace('\\', '/') : pathNative;
 	}
 
 	/** Transforms a unix path to a native one. */

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,7 +24,6 @@
 import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.List;
-import java.util.Locale;
 import java.util.Objects;
 
 import com.diffplug.common.base.Throwables;

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -138,7 +138,6 @@ FormatterFunc createFormat() throws Exception {
 			};
 		}
 
-		@SuppressWarnings({"unchecked", "rawtypes"})
 		FormatterFunc createRemoveUnusedImportsOnly() throws Exception {
 			ClassLoader classLoader = jarState.getClassLoader();
 
@@ -161,6 +160,7 @@ private static Function<String, String> constructRemoveUnusedFunction(ClassLoade
 
 			Function<String, String> removeUnused;
 			if (removeJavadocOnlyClass != null) {
+				@SuppressWarnings({"unchecked", "rawtypes"})
 				Object removeJavadocConstant = Enum.valueOf((Class<Enum>) removeJavadocOnlyClass, REMOVE_UNUSED_IMPORT_JavadocOnlyImports_Keep);
 				Method removeUnusedMethod = removeUnusedClass.getMethod(REMOVE_UNUSED_METHOD, String.class, removeJavadocOnlyClass);
 				removeUnused = (x) -> (String) removeUnusedMethod.invoke(null, x, removeJavadocConstant);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ErrorShouldRethrowJre11Test.java
Patch:
@@ -32,7 +32,7 @@
 import com.diffplug.spotless.LineEnding;
 
 /** Tests the desired behavior from https://github.com/diffplug/spotless/issues/46. */
-public class ErrorShouldRethrowJre11 extends GradleIntegrationHarness {
+public class ErrorShouldRethrowJre11Test extends GradleIntegrationHarness {
 	private void writeBuild(String... toInsert) throws IOException {
 		List<String> lines = new ArrayList<>();
 		lines.add("plugins {");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ErrorShouldRethrowJre8Test.java
Patch:
@@ -32,7 +32,7 @@
 import com.diffplug.spotless.LineEnding;
 
 /** Tests the desired behavior from https://github.com/diffplug/spotless/issues/46. */
-public class ErrorShouldRethrowJre8 extends GradleIntegrationHarness {
+public class ErrorShouldRethrowJre8Test extends GradleIntegrationHarness {
 	private void writeBuild(String... toInsert) throws IOException {
 		List<String> lines = new ArrayList<>();
 		lines.add("plugins {");

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -235,9 +235,9 @@ public static DirtyState calculateDirtyState(Formatter formatter, File file, byt
 	/**
 	 * The clean/dirty state of a single file.  Intended use:
 	 * - {@link #isClean()} means that the file is is clean, and there's nothing else to say
-	 * - {@link #isConverged()} means that we were able to determine a clean state
+	 * - {@link #didNotConverge()} means that we were unable to determine a clean state
 	 * - once you've tested the above conditions and you know that it's a dirty file with a converged state,
-	 *   then you can call {@link #writeCanonicalTo()} to get the canonical form of the given file.
+	 *   then you can call {@link #writeCanonicalTo(OutputStream)} to get the canonical form of the given file.
 	 */
 	public static class DirtyState {
 		private final byte[] canonicalBytes;

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 DiffPlug
+ * Copyright 2016-2020 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
-/** COMPLETELY DEPRECATED, use {@link PaddedCell#canonicalIfDirty(Formatter, File)} instead. */
+/** COMPLETELY DEPRECATED, use {@link PaddedCell#calculateDirtyState(Formatter, File)} instead. */
 @Deprecated
 public final class PaddedCellBulk {
 	private static final Logger logger = Logger.getLogger(PaddedCellBulk.class.getName());

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.gradle.api.Action;
 import org.gradle.api.Project;
+import org.gradle.api.internal.project.ProjectInternal;
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
 import org.gradle.testkit.runner.GradleRunner;
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinExtensionTest.java
Patch:
@@ -18,7 +18,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.IOException;
-import java.time.YearMonth;
 
 import org.gradle.testkit.runner.BuildResult;
 import org.junit.Test;
@@ -223,7 +222,7 @@ public void testWithNonStandardYearSeparatorKtfmt() throws IOException {
 			matcher.startsWith("// License Header 2012, 2014");
 		});
 		assertFile("src/main/kotlin/test2.kt").matches(matcher -> {
-			matcher.startsWith(HEADER_WITH_YEAR.replace("$YEAR", String.valueOf(YearMonth.now().getYear())));
+			matcher.startsWith("// License Header 2012, 2014");
 		});
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinExtensionTest.java
Patch:
@@ -193,7 +193,7 @@ public void testWithNonStandardYearSeparator() throws IOException {
 			matcher.startsWith("// License Header 2012, 2014");
 		});
 		assertFile("src/main/kotlin/test2.kt").matches(matcher -> {
-			matcher.startsWith(HEADER_WITH_YEAR.replace("$YEAR", String.valueOf(YearMonth.now().getYear())));
+			matcher.startsWith("// License Header 2012, 2014");
 		});
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GitRatchet.java
Patch:
@@ -66,6 +66,7 @@ public static boolean isClean(Project project, ObjectId treeSha, File file) thro
 		DirCache dirCache = repo.readDirCache();
 
 		try (TreeWalk treeWalk = new TreeWalk(repo)) {
+			treeWalk.setRecursive(true);
 			treeWalk.addTree(treeSha);
 			treeWalk.addTree(new DirCacheIterator(dirCache));
 			treeWalk.addTree(new FileTreeIterator(repo));

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GitRatchet.java
Patch:
@@ -66,6 +66,7 @@ public static boolean isClean(Project project, ObjectId treeSha, File file) thro
 		DirCache dirCache = repo.readDirCache();
 
 		try (TreeWalk treeWalk = new TreeWalk(repo)) {
+			treeWalk.setRecursive(true);
 			treeWalk.addTree(treeSha);
 			treeWalk.addTree(new DirCacheIterator(dirCache));
 			treeWalk.addTree(new FileTreeIterator(repo));

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/LicenseHeaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 DiffPlug
+ * Copyright 2016 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: testlib/src/test/java/com/diffplug/spotless/generic/LicenseHeaderStepTest.java
Patch:
@@ -93,7 +93,7 @@ public void should_apply_license_containing_YEAR_token() throws Throwable {
 	}
 
 	@Test
-	public void overwriteYearWithLatest() throws Throwable {
+	public void updateYearWithLatest() throws Throwable {
 		FormatterStep step = LicenseHeaderStep.createFromFile(createLicenseWith(LICENSE_HEADER_YEAR), StandardCharsets.UTF_8, LICENSE_HEADER_DELIMITER, "-", true);
 		StepHarness.forStep(step)
 				.testUnaffected(fileWithLicenseContaining(LICENSE_HEADER_YEAR, currentYear()))

File: lib/src/main/java/com/diffplug/spotless/npm/NpmFormatterStepStateBase.java
Patch:
@@ -96,14 +96,14 @@ private File resolveNpm(@Nullable File npm) {
 	}
 
 	protected NodeJSWrapper nodeJSWrapper() {
-		return new NodeJSWrapper(this.jarState.getClassLoader()); // TODO (simschla, 02.08.18): cache this instance
+		return new NodeJSWrapper(this.jarState.getClassLoader());
 	}
 
 	protected File nodeModulePath() {
 		return new File(new File(this.nodeModulesDir, "node_modules"), this.npmConfig.getNpmModule());
 	}
 
-	private String j2v8MavenCoordinate() {
+	static String j2v8MavenCoordinate() {
 		return "com.eclipsesource.j2v8:j2v8_" + PlatformInfo.normalizedOSName() + "_" + PlatformInfo.normalizedArchName() + ":4.6.0";
 	}
 

File: lib/src/main/java/com/diffplug/spotless/npm/NpmFormatterStepStateBase.java
Patch:
@@ -103,7 +103,7 @@ protected File nodeModulePath() {
 		return new File(new File(this.nodeModulesDir, "node_modules"), this.npmConfig.getNpmModule());
 	}
 
-	private String j2v8MavenCoordinate() {
+	static String j2v8MavenCoordinate() {
 		return "com.eclipsesource.j2v8:j2v8_" + PlatformInfo.normalizedOSName() + "_" + PlatformInfo.normalizedArchName() + ":4.6.0";
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -635,7 +635,7 @@ public SpotlessApply createIndependentApplyTask(String taskName) {
 		// create the apply task
 		SpotlessApply applyTask = root.project.getTasks().create(taskName, SpotlessApply.class);
 		applyTask.setSpotlessOutDirectory(spotlessTask.getOutputDirectory());
-		applyTask.source = spotlessTask;
+		applyTask.linkSource(spotlessTask);
 		applyTask.dependsOn(spotlessTask);
 
 		return applyTask;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -76,7 +76,7 @@ private SpotlessCheck createCheckTask(String name, SpotlessTask source) {
 
 		private SpotlessApply createApplyTask(String name, SpotlessTask source) {
 			SpotlessApply task = project.getTasks().create("spotless" + SpotlessPlugin.capitalize(name) + "Apply", SpotlessApply.class);
-			task.source = source;
+			task.linkSource(source);
 			task.setSpotlessOutDirectory(source.getOutputDirectory());
 			return task;
 		}
@@ -107,7 +107,7 @@ void apply() throws Exception {
 
 		void check() throws Exception {
 			execute(task);
-			check.performAction();
+			check.performActionTest();
 		}
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -107,7 +107,7 @@ void apply() throws Exception {
 
 		void check() throws Exception {
 			execute(task);
-			check.performAction();
+			check.performActionTest();
 		}
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ScalaExtension.java
Patch:
@@ -64,7 +64,7 @@ private FormatterStep createStep() {
 		}
 	}
 
-	/** If the user hasn't specified the files yet, we'll assume he/she means all of the kotlin files. */
+	/** If the user hasn't specified the files yet, we'll assume he/she means all of the scala files. */
 	@Override
 	protected void setupTask(SpotlessTask task) {
 		if (target == null) {

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -191,9 +191,9 @@ public static DirtyState calculateDirtyState(Formatter formatter, File file) thr
 	public static DirtyState calculateDirtyState(Formatter formatter, File file, byte[] rawBytes) throws IOException {
 		String raw = new String(rawBytes, formatter.getEncoding());
 		// check that all characters were encodable
-		byte[] roundtrippedBytes = raw.getBytes(formatter.getEncoding());
-		if (!Arrays.equals(rawBytes, roundtrippedBytes)) {
-			throw new IllegalArgumentException("Check Spotless encoding, not all characters are encodable");
+		String encodingError = EncodingErrorMsg.msg(raw, rawBytes, formatter.getEncoding());
+		if (encodingError != null) {
+			throw new IllegalArgumentException(encodingError);
 		}
 		String rawUnix = LineEnding.toUnix(raw);
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/IndependentTaskTest.java
Patch:
@@ -34,9 +34,9 @@ public void independent() throws IOException {
 				"underTest.target file('test.java')",
 				"underTest.googleJavaFormat('1.2')",
 				"",
-				"def independent = underTest.createIndependentTask('independent')");
+				"def independent = underTest.createIndependentApplyTask('independent')");
 		setFile("test.java").toResource("java/googlejavaformat/JavaCodeUnformatted.test");
 		gradleRunner().withArguments("independent").build();
-		assertFile("build/spotless/independent/test.java").sameAsResource("java/googlejavaformat/JavaCodeFormatted.test");
+		assertFile("test.java").sameAsResource("java/googlejavaformat/JavaCodeFormatted.test");
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -620,8 +620,6 @@ protected Project getProject() {
 	 * let you do that.
 	 *
 	 * The returned task will have no dependencies on any other task.
-	 * You need to call {@link SpotlessTask#setApply()} and/or {@link SpotlessTask#setCheck()}
-	 * on the return value, otherwise you will get a runtime error when the task tries to run.
 	 *
 	 * NOTE: does not respect the rarely-used [`spotlessFiles` property](https://github.com/diffplug/spotless/blob/b7f8c551a97dcb92cc4b0ee665448da5013b30a3/plugin-gradle/README.md#can-i-apply-spotless-to-specific-files).
 	 */

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/IndependentTaskTest.java
Patch:
@@ -34,10 +34,9 @@ public void independent() throws IOException {
 				"underTest.target file('test.java')",
 				"underTest.googleJavaFormat('1.2')",
 				"",
-				"def independent = underTest.createIndependentTask('independent')",
-				"independent.setApply()");
+				"def independent = underTest.createIndependentTask('independent')");
 		setFile("test.java").toResource("java/googlejavaformat/JavaCodeUnformatted.test");
 		gradleRunner().withArguments("independent").build();
-		assertFile("test.java").sameAsResource("java/googlejavaformat/JavaCodeFormatted.test");
+		assertFile("build/spotless/independent/test.java").sameAsResource("java/googlejavaformat/JavaCodeFormatted.test");
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ConfigAvoidanceTest.java
Patch:
@@ -59,6 +59,6 @@ public void noConfigOnHelp() throws IOException {
 		String help_4_9 = gradleRunnerConfigAvoidance().withArguments("help").build().getOutput();
 		Assertions.assertThat(help_4_9).doesNotContain("Canary was configured");
 		String check_4_9 = gradleRunnerConfigAvoidance().withArguments("check").buildAndFail().getOutput();
-		Assertions.assertThat(check_4_9).contains("Canary was configured", "Canary ran", "Execution failed for task ':spotlessJava'");
+		Assertions.assertThat(check_4_9).contains("Canary was configured", "Canary ran", "Execution failed for task ':spotlessJavaCheck'");
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -43,7 +43,6 @@ public void runAllTasks(Project project) {
 						.map(task -> (SpotlessTask) task)
 						.forEach(task -> Errors.rethrow().run(() -> {
 							IncrementalTaskInputs inputs = Mocks.mockIncrementalTaskInputs(task.getTarget());
-							task.setCheck();
 							task.performAction(inputs);
 						}));
 			}
@@ -61,7 +60,6 @@ public void runAllTasks(Project project) {
 						.map(task -> (SpotlessTask) task)
 						.forEach(task -> Errors.rethrow().run(() -> {
 							IncrementalTaskInputs inputs = Mocks.mockIncrementalTaskInputs(task.getTarget());
-							task.setApply();
 							task.performAction(inputs);
 						}));
 			}

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.file.Files;
-import java.nio.file.StandardOpenOption;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -258,7 +257,7 @@ private byte[] canonicalBytes() {
 		}
 
 		public void writeCanonicalTo(File file) throws IOException {
-			Files.write(file.toPath(), canonicalBytes(), StandardOpenOption.TRUNCATE_EXISTING);
+			Files.write(file.toPath(), canonicalBytes());
 		}
 
 		public void writeCanonicalTo(OutputStream out) throws IOException {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/IdeHook.java
Patch:
@@ -58,6 +58,8 @@ static void performHook(SpotlessTask spotlessTask) {
 						dirty.writeCanonicalTo(file);
 					}
 				}
+				System.err.close();
+				System.out.close();
 			} catch (IOException e) {
 				e.printStackTrace(System.err);
 				throw Errors.asRuntime(e);

File: testlib/src/test/java/com/diffplug/spotless/npm/TsFmtFormatterStepTest.java
Patch:
@@ -57,7 +57,9 @@ public void formattingUsingConfigFile() throws Exception {
 			final String cleanFile = filedir + configFileNameWithoutExtension + ".clean";
 
 			// some config options expect to see at least one file in the baseDir, so let's write one there
-			Files.write(new File(configFile.getParentFile(), configFileNameWithoutExtension + ".ts").toPath(), getTestResource(dirtyFile).getBytes(StandardCharsets.UTF_8));
+			File srcDir = new File(rootFolder(), "src/main/typescript");
+			Files.createDirectories(srcDir.toPath());
+			Files.write(new File(srcDir, configFileNameWithoutExtension + ".ts").toPath(), getTestResource(dirtyFile).getBytes(StandardCharsets.UTF_8));
 
 			final FormatterStep formatterStep = TsFmtFormatterStep.create(
 					TsFmtFormatterStep.defaultDevDependencies(),

File: testlib/src/test/java/com/diffplug/spotless/java/GoogleJavaFormatStepTest.java
Patch:
@@ -35,7 +35,7 @@ public void behavior18() throws Exception {
 		}
 		FormatterStep step = GoogleJavaFormatStep.create("1.8", TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
-				.testResource("java/googlejavaformat/JavaCodeUnformatted.test", "java/googlejavaformat/JavaCodeFormatted.test")
+				.testResource("java/googlejavaformat/JavaCodeUnformatted.test", "java/googlejavaformat/JavaCodeFormatted18.test")
 				.testResource("java/googlejavaformat/JavaCodeWithLicenseUnformatted.test", "java/googlejavaformat/JavaCodeWithLicenseFormatted.test")
 				.testResource("java/googlejavaformat/JavaCodeWithLicensePackageUnformatted.test", "java/googlejavaformat/JavaCodeWithLicensePackageFormatted.test")
 				.testResource("java/googlejavaformat/JavaCodeWithPackageUnformatted.test", "java/googlejavaformat/JavaCodeWithPackageFormatted.test");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ErrorShouldRethrowJre11.java
Patch:
@@ -140,7 +140,6 @@ private void assertResultAndMessages(BuildResult result, TaskOutcome outcome, St
 		String expectedToStartWith = StringPrinter.buildStringFromLines(messages).trim();
 		int numNewlines = CharMatcher.is('\n').countIn(expectedToStartWith);
 		List<String> actualLines = Splitter.on('\n').splitToList(LineEnding.toUnix(result.getOutput().trim()));
-		System.out.println("out=" + result.getOutput());
 		String actualStart = String.join("\n", actualLines.subList(0, numNewlines + 1));
 		Assertions.assertThat(actualStart).isEqualTo(expectedToStartWith);
 		Assertions.assertThat(result.tasks(outcome).size() + result.tasks(TaskOutcome.UP_TO_DATE).size() + result.tasks(TaskOutcome.NO_SOURCE).size())

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationTest.java
Patch:
@@ -75,8 +75,7 @@ protected static String requestGradleForJre8and11(String ver) {
 
 	protected final GradleRunner gradleRunner() throws IOException {
 		return GradleRunner.create()
-				//.withGradleVersion(requestGradleForJre8and11("2.14"))
-				.withGradleVersion(requestGradleForJre8and11("5.0"))
+				.withGradleVersion(requestGradleForJre8and11("2.14"))
 				.withProjectDir(rootFolder())
 				.withPluginClasspath();
 	}

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -22,7 +22,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.SimpleFileVisitor;
-import java.nio.file.StandardOpenOption;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -186,7 +185,7 @@ public static boolean applyAnyChanged(Formatter formatter, File file) throws IOE
 		if (dirtyState.isClean() || dirtyState.didNotConverge()) {
 			return false;
 		} else {
-			Files.write(file.toPath(), dirtyState.canonicalBytes(), StandardOpenOption.TRUNCATE_EXISTING);
+			dirtyState.writeCanonicalTo(file);
 			return true;
 		}
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -18,8 +18,6 @@
 import java.io.File;
 import java.io.Serializable;
 import java.nio.charset.Charset;
-import java.nio.file.Files;
-import java.nio.file.StandardOpenOption;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -272,7 +270,7 @@ private List<File> applyAnyChanged(Formatter formatter, List<File> outOfDate) th
 			} else if (dirtyState.didNotConverge()) {
 				getLogger().warn("Skipping '" + file + "' because it does not converge.  Run `spotlessDiagnose` to understand why");
 			} else {
-				Files.write(file.toPath(), dirtyState.canonicalBytes(), StandardOpenOption.TRUNCATE_EXISTING);
+				dirtyState.writeCanonicalTo(file);
 				changed.add(file);
 			}
 		}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessDiagnoseTask.java
Patch:
@@ -29,6 +29,8 @@
 import com.diffplug.spotless.Formatter;
 import com.diffplug.spotless.PaddedCell;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 public class SpotlessDiagnoseTask extends DefaultTask {
 	SpotlessTask source;
 
@@ -38,6 +40,7 @@ public SpotlessTask getSource() {
 	}
 
 	@TaskAction
+	@SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
 	public void performAction() throws IOException {
 		Path srcRoot = getProject().getProjectDir().toPath();
 		Path diagnoseRoot = getProject().getBuildDir().toPath().resolve("spotless-diagnose-" + source.formatName());

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/prettier/PrettierFormatStepTest.java
Patch:
@@ -40,7 +40,7 @@ public void prettier_typescript() throws Exception {
 		String suffix = "ts";
 		writePomWithPrettierSteps("**/*." + suffix,
 				"<prettier>",
-				"  <devDependencies><prettier>1.16.4</prettier><node>10</node></devDependencies>",
+			"  <prettierVersion>1.16.4</prettierVersion>",
 				"  <configFile>.prettierrc.yml</configFile>",
 				"</prettier>");
 		run("typescript", suffix);

File: testlib/src/test/java/com/diffplug/spotless/npm/PrettierFormatterStepTest.java
Patch:
@@ -95,7 +95,7 @@ public static class PrettierFormattingOptionsAreWorking extends NpmFormatterStep
 
 		public void runFormatTest(PrettierConfig config, String cleanFileNameSuffix) throws Exception {
 
-			final String dirtyFile = FILEDIR + "tsx.dirty";
+			final String dirtyFile = FILEDIR + "typescript.dirty";
 			final String cleanFile = FILEDIR + "typescript." + cleanFileNameSuffix + ".clean";
 
 			final FormatterStep formatterStep = PrettierFormatterStep.create(

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -78,7 +78,7 @@ public void tsfmtInline() throws Exception {
 	public void tsconfig() throws Exception {
 		writePomWithTypescriptSteps(
 				"<tsfmt>",
-				"  <tsconfigFile>${basedir}/tsconfig.json</tsconfigFile>",
+				"  <tsconfigFile>${project.basedir}/tsconfig.json</tsconfigFile>",
 				"</tsfmt>");
 		setFile("tsconfig.json").toResource("npm/tsfmt/tsconfig/tsconfig.json");
 		run("tsconfig");

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -179,7 +179,7 @@ private FileLocator getFileLocator() {
 		resourceManager.addSearchPath(FileResourceLoader.ID, baseDir.getAbsolutePath());
 		resourceManager.addSearchPath("url", "");
 		resourceManager.setOutputDirectory(targetDir);
-		return new FileLocator(resourceManager);
+		return new FileLocator(resourceManager, targetDir);
 	}
 
 	private List<FormatterFactory> getFormatterFactories() {

File: lib/src/main/java/com/diffplug/spotless/npm/NodeJSWrapper.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.Objects;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import com.diffplug.spotless.LineEnding;
+
 class NodeJSWrapper extends ReflectiveObjectWrapper {
 
 	public static final String V8_RUNTIME_CLASS = "com.eclipsesource.v8.V8";
@@ -33,7 +35,7 @@ public NodeJSWrapper(ClassLoader classLoader) {
 		super(Reflective.withClassLoader(classLoader),
 				reflective -> {
 					final boolean firstRun = flagsSet.compareAndSet(false, true);
-					if (firstRun) {
+					if (firstRun && LineEnding.PLATFORM_NATIVE.str().equals("\r\n")) {
 						reflective.invokeStaticMethod(V8_RUNTIME_CLASS, "setFlags", "-color=false"); // required to run prettier on windows
 					}
 					return reflective.invokeStaticMethod(WRAPPED_CLASS, "createNodeJS");

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/typescript/Typescript.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class Typescript extends FormatterFactory {
 
-	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("**/*.ts");
+	private static final Set<String> DEFAULT_INCLUDES = ImmutableSet.of("src/**/*.ts");
 
 	private static final String LICENSE_HEADER_DELIMITER = null;
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/typescript/TypescriptFormatStepTest.java
Patch:
@@ -94,7 +94,7 @@ public void testTypescriptTsfmtInlineConfig() throws Exception {
 				"<tsfmt>",
 				"  <config>",
 				"    <indentSize>1</indentSize>",
-				"    <convertTabsToSpaces>true</indentSize>",
+				"    <convertTabsToSpaces>true</convertTabsToSpaces>",
 				"  </config>", 
 				"  <typescriptFormatterVersion>7.2.2</typescriptFormatterVersion>",
 				"</tsfmt>");

File: lib/src/main/java/com/diffplug/spotless/antlr4/Antlr4FormatterStep.java
Patch:
@@ -29,7 +29,7 @@ public class Antlr4FormatterStep {
 	private Antlr4FormatterStep() {}
 
 	private static final String MAVEN_COORDINATE = "com.khubla.antlr4formatter:antlr4-formatter:";
-	private static final String DEFAULT_VERSION = "1.1.0";
+	private static final String DEFAULT_VERSION = "1.2.1";
 
 	public static FormatterStep create(Provisioner provisioner) {
 		return create(defaultVersion(), provisioner);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/Antlr4ExtensionTest.java
Patch:
@@ -56,7 +56,7 @@ public void applyUsingCustomVersion() throws IOException {
 				"spotless {",
 				"    antlr4 {",
 				"        target 'src/main/antlr4/**/*.g4'",
-				"        antlr4Formatter('1.1.0')",
+				"        antlr4Formatter('1.2.1')",
 				"    }",
 				"}"};
 

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/antlr4/Antlr4FormatterTest.java
Patch:
@@ -25,7 +25,7 @@ public class Antlr4FormatterTest extends MavenIntegrationTest {
 	public void applyUsingCustomVersion() throws Exception {
 		writePomWithAntlr4Steps(
 				"<antlr4Formatter>",
-				"  <version>1.1.0</version>",
+				"  <version>1.2.1</version>",
 				"</antlr4Formatter>");
 		runTest();
 	}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/MultiProjectAfterEvaluate.java
Patch:
@@ -35,7 +35,7 @@ public void failureDoesntTriggerAll() throws IOException {
 						"}",
 						"spotless { java { googleJavaFormat() } }");
 		String output = gradleRunner6().withArguments("spotlessApply", "--warning-mode", "all").build().getOutput().replace("\r\n", "\n");
-		Assertions.assertThat(output).contains("Using method Project#afterEvaluate(Action) when the project is already evaluated has been deprecated.");
+		Assertions.assertThat(output).doesNotContain("Using method Project#afterEvaluate(Action) when the project is already evaluated has been deprecated.");
 	}
 
 	private final GradleRunner gradleRunner6() throws IOException {

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/osgi/ServiceCollection.java
Patch:
@@ -56,7 +56,7 @@ public void set(String key, String value) {
 	}
 
 	@Override
-	public <S> void add(Class<S> interfaceClass, S service) {
+	public <S> void add(Class<S> interfaceClass, S service) throws ServiceException {
 		String className = interfaceClass.getName();
 		if (null != className2Service.put(interfaceClass.getName(), new FrameworkServiceReference<S>(className, service))) {
 			throw new ServiceException(

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/package-info.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-/** Eclipse WTP SEE formatter helper */
+/** Eclipse WTP Structured Source Editing (SEE) formatter helper */
 @ParametersAreNonnullByDefault
 package com.diffplug.spotless.extra.eclipse.wtp.sse;
 

File: _ext/eclipse-cdt/src/test/java/com/diffplug/spotless/extra/eclipse/cdt/EclipseCdtFormatterStepImplTest.java
Patch:
@@ -46,7 +46,7 @@ public class EclipseCdtFormatterStepImplTest {
 	private final static String ILLEGAL_CHAR = Character.toString((char) 254);
 
 	private final static String FUNCT_PTR_UNFORMATTED = "void  (*getFunc(void))  (int);";
-	private final static String FUNCT_PTR_FORMATTED = "void (*getFunc(void)) (int);";
+	private final static String FUNCT_PTR_FORMATTED = "void (* getFunc(void)) (int);";
 
 	@Test
 	public void defaultFormat() throws Throwable {

File: _ext/eclipse-groovy/src/main/java/com/diffplug/spotless/extra/eclipse/groovy/GrEclipseFormatterStepImpl.java
Patch:
@@ -55,14 +55,14 @@ public class GrEclipseFormatterStepImpl {
 	private final boolean ignoreFormatterProblems;
 
 	public GrEclipseFormatterStepImpl(final Properties properties) throws Exception {
-		if (SpotlessEclipseFramework.setup(
+		SpotlessEclipseFramework.setup(
 				config -> {
 					config.applyDefault();
 					config.useSlf4J(GrEclipseFormatterStepImpl.class.getPackage().getName());
 				},
 				plugins -> {
 					plugins.add(new GroovyCoreActivator());
-				})) {}
+				});
 		PreferenceStore preferences = createPreferences(properties);
 		preferencesStore = new FormatterPreferencesOnStore(preferences);
 		ignoreFormatterProblems = Boolean.parseBoolean(properties.getProperty(IGNORE_FORMATTER_PROBLEMS, "false"));

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseXmlFormatterStepImpl.java
Patch:
@@ -67,7 +67,7 @@ public EclipseXmlFormatterStepImpl(Properties properties) throws Exception {
 		xmlAdapterFactory = new ModelQueryAdapterFactoryForXML();
 	}
 
-	private static void setupFramework(boolean resolveExternalURI) throws BundleException {
+	private synchronized static void setupFramework(boolean resolveExternalURI) throws BundleException {
 		if (SpotlessEclipseFramework.setup(
 				config -> {
 					config.applyDefault();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -30,7 +30,7 @@ private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.cdt.EclipseCdtFormatterStepImpl";
-	private static final String DEFAULT_VERSION = "4.11.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -35,7 +35,7 @@ private GrEclipseFormatterStep() {}
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.groovy.GrEclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.groovy.eclipse.GrEclipseFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-groovy";
-	private static final String DEFAULT_VERSION = "4.10.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	/** Creates a formatter step using the default version for the given settings file. */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.11.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public enum EclipseWtpFormatterStep {
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";
-	private static final String DEFAULT_VERSION = "4.8.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	private final String implementationClassName;

File: lib-extra/src/test/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseCdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.11.0"};
+		return new String[]{"4.7.3a", "4.11.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -25,7 +25,7 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
 		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0", "4.10.0",
-				"4.11.0"};
+				"4.11.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStepTest.java
Patch:
@@ -76,7 +76,7 @@ public static Iterable<WTP> data() {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.7.3b", "4.8.0"};
+		return new String[]{"4.7.3a", "4.7.3b", "4.8.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorter.java
Patch:
@@ -92,6 +92,9 @@ private static boolean isBeginningOfScope(String line) {
 	}
 
 	private static String applyImportsToDocument(final String document, int firstImportLine, int lastImportLine, List<String> strings) {
+		if (document.isEmpty()) {
+			return document;
+		}
 		boolean importsAlreadyAppended = false;
 		Scanner scanner = new Scanner(document);
 		int curentLine = 0;

File: lib/src/main/java/com/diffplug/spotless/markdown/LibMarkdownPreconditions.java
Patch:
@@ -25,8 +25,9 @@ private LibMarkdownPreconditions() {}
 	static <K, V> Map<K, V> requireKeysAndValuesNonNull(Map<K, V> map) {
 		Objects.requireNonNull(map);
 		map.forEach((key, value) -> {
-			Objects.requireNonNull(key);
-			Objects.requireNonNull(value);
+			String errorMessage = key + "=" + value;
+			Objects.requireNonNull(key, errorMessage);
+			Objects.requireNonNull(value, errorMessage);
 		});
 		return map;
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -178,7 +178,7 @@ protected void setupTask(SpotlessTask task) {
 		if (target == null) {
 			JavaPluginConvention javaPlugin = getProject().getConvention().findPlugin(JavaPluginConvention.class);
 			if (javaPlugin == null) {
-				throw new GradleException("You must apply the java plugin before the spotless plugin if you are using the java extension.");
+				throw new GradleException("You must either specify 'target' manually or apply the 'java' plugin.");
 			}
 			FileCollection union = getProject().files();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -46,7 +46,7 @@ public LicenseHeaderConfig licenseHeaderFile(Object licenseHeaderFile) {
 		return licenseHeaderFile(licenseHeaderFile, LICENSE_HEADER_DELIMITER);
 	}
 
-	/** Adds the specified version of [ktlint](https://github.com/shyiko/ktlint). */
+	/** Adds the specified version of [ktlint](https://github.com/pinterest/ktlint). */
 	public KotlinFormatExtension ktlint(String version) {
 		Objects.requireNonNull(version);
 		return new KotlinFormatExtension(version, Collections.emptyMap());

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinGradleExtension.java
Patch:
@@ -32,7 +32,7 @@ public KotlinGradleExtension(SpotlessExtension rootExtension) {
 		super(rootExtension);
 	}
 
-	/** Adds the specified version of [ktlint](https://github.com/shyiko/ktlint). */
+	/** Adds the specified version of [ktlint](https://github.com/pinterest/ktlint). */
 	public KotlinFormatExtension ktlint(String version) {
 		Objects.requireNonNull(version, "version");
 		return new KotlinFormatExtension(version, Collections.emptyMap());

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -27,13 +27,13 @@
 import org.assertj.core.api.Assertions;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.junit.Test;
 
 import com.diffplug.common.base.StringPrinter;
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
+import com.diffplug.spotless.TestProvisioner;
 import com.diffplug.spotless.extra.integration.DiffMessageFormatter;
 
 public class DiffMessageFormatterTest extends ResourceHarness {
@@ -42,7 +42,7 @@ private SpotlessTask create(File... files) throws IOException {
 	}
 
 	private SpotlessTask create(List<File> files) throws IOException {
-		Project project = ProjectBuilder.builder().withProjectDir(rootFolder()).build();
+		Project project = TestProvisioner.gradleProject(rootFolder());
 		SpotlessTask task = project.getTasks().create("underTest", SpotlessTask.class);
 		task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 		task.setTarget(files);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -24,21 +24,21 @@
 import org.assertj.core.api.Assertions;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
+import com.diffplug.spotless.TestProvisioner;
 
 public class FormatTaskTest extends ResourceHarness {
 	private SpotlessTask checkTask;
 	private SpotlessTask applyTask;
 
 	@Before
-	public void createTask() {
-		Project project = ProjectBuilder.builder().build();
+	public void createTask() throws IOException {
+		Project project = TestProvisioner.gradleProject(rootFolder());
 		checkTask = project.getTasks().create("checkTaskUnderTest", SpotlessTask.class);
 		checkTask.setCheck();
 		applyTask = project.getTasks().create("applyTaskUnderTest", SpotlessTask.class);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -74,7 +74,7 @@ public void integration_default() throws IOException {
 	}
 
 	@Test
-	public void integration_shyiko() throws IOException {
+	public void integration_pinterest() throws IOException {
 		setFile("build.gradle").toLines(
 				"plugins {",
 				"    id 'nebula.kotlin' version '1.0.6'",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ScalaExtensionTest.java
Patch:
@@ -36,6 +36,6 @@ public void integration() throws IOException {
 		setFile("scalafmt.conf").toResource("scala/scalafmt/scalafmt.conf");
 		setFile("src/main/scala/basic.scala").toResource("scala/scalafmt/basic.dirty");
 		gradleRunner().withArguments("spotlessApply").build();
-		assertFile("src/main/scala/basic.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
+		assertFile("src/main/scala/basic.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -20,13 +20,13 @@
 
 import org.gradle.api.Project;
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.gradle.testkit.runner.GradleRunner;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import com.diffplug.common.base.Errors;
 import com.diffplug.common.base.StandardSystemProperty;
+import com.diffplug.spotless.TestProvisioner;
 
 /**
  * If you'd like to step through the full spotless plugin,
@@ -117,12 +117,11 @@ private static void runTasksManually(Type type) throws Exception {
 
 	/** Creates a Project which has had the SpotlessExtension setup. */
 	private static Project createProject(Consumer<SpotlessExtension> test) throws Exception {
-		Project project = ProjectBuilder.builder().withProjectDir(new File("").getAbsoluteFile()).build();
+		Project project = TestProvisioner.gradleProject(new File("").getAbsoluteFile());
 		// create the spotless plugin
 		SpotlessPlugin plugin = project.getPlugins().apply(SpotlessPlugin.class);
 		// setup the plugin
 		test.accept(plugin.getExtension());
-		plugin.createTasks(project);
 		// return the configured plugin
 		return project;
 	}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/ArtifactResolver.java
Patch:
@@ -57,7 +57,7 @@ public ArtifactResolver(RepositorySystem repositorySystem, RepositorySystemSessi
 		this.log = Objects.requireNonNull(log);
 	}
 
-	/** Use {@link ArtifactResolver#resolve(boolean, Collection)) instead.} */
+	/** Use {@link ArtifactResolver#resolve(boolean, Collection)} instead. */
 	@Deprecated
 	public Set<File> resolve(String mavenCoordinate) {
 		return resolve(true, Arrays.asList(mavenCoordinate));

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/IncludesExcludesTest.java
Patch:
@@ -24,7 +24,7 @@ public class IncludesExcludesTest extends MavenIntegrationTest {
 	private static final String JAVA_FORMATTED = "java/eclipse/JavaCodeFormatted.test";
 	private static final String JAVA_UNFORMATTED = "java/eclipse/JavaCodeUnformatted.test";
 	private static final String SCALA_UNFORMATTED = "scala/scalafmt/basic.dirty";
-	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean";
+	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean_2.0.1";
 
 	@Test
 	public void testDefaultIncludesJava() throws Exception {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MultiModuleProjectTest.java
Patch:
@@ -93,7 +93,7 @@ public void testConfigurationDependency() throws Exception {
 		assertFile("two/src/main/java/test1.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 		assertFile("two/src/test/java/test2.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 
-		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
-		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
+		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
+		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/scala/ScalafmtTest.java
Patch:
@@ -24,7 +24,7 @@ public class ScalafmtTest extends MavenIntegrationTest {
 	public void testScalafmtWithDefaultConfig() throws Exception {
 		writePomWithScalaSteps("<scalafmt/>");
 
-		runTest("scala/scalafmt/basic.clean");
+		runTest("scala/scalafmt/basic.clean_2.0.1");
 	}
 
 	@Test
@@ -36,7 +36,7 @@ public void testScalafmtWithCustomConfig() throws Exception {
 				"  <file>${project.basedir}/scalafmt.conf</file>",
 				"</scalafmt>");
 
-		runTest("scala/scalafmt/basic.cleanWithCustomConf");
+		runTest("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 
 	private void runTest(String s) throws Exception {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -406,7 +406,7 @@ public void indentWithTabs() {
 		addStep(IndentStep.Type.TAB.create());
 	}
 
-	abstract class LicenseHeaderConfig {
+	public abstract class LicenseHeaderConfig {
 		String delimiter;
 		String yearSeparator = LicenseHeaderStep.defaultYearDelimiter();
 
@@ -437,7 +437,7 @@ public LicenseHeaderConfig yearSeparator(String yearSeparator) {
 		abstract FormatterStep createStep();
 	}
 
-	class LicenseStringHeaderConfig extends LicenseHeaderConfig {
+	public class LicenseStringHeaderConfig extends LicenseHeaderConfig {
 
 		private String header;
 
@@ -451,7 +451,7 @@ FormatterStep createStep() {
 		}
 	}
 
-	class LicenseFileHeaderConfig extends LicenseHeaderConfig {
+	public class LicenseFileHeaderConfig extends LicenseHeaderConfig {
 
 		private Object headerFile;
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -603,6 +603,9 @@ protected void setupTask(SpotlessTask task) {
 		}
 		task.setSteps(steps);
 		task.setLineEndingsPolicy(getLineEndings().createPolicy(getProject().getProjectDir(), () -> task.target));
+		if (root.project != root.project.getRootProject()) {
+			root.registerDependenciesTask.hookSubprojectTask(task);
+		}
 	}
 
 	/** Returns the project that this extension is attached to. */

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -178,7 +178,7 @@ protected void setupTask(SpotlessTask task) {
 		if (target == null) {
 			JavaPluginConvention javaPlugin = getProject().getConvention().findPlugin(JavaPluginConvention.class);
 			if (javaPlugin == null) {
-				throw new GradleException("You must apply the java plugin before the spotless plugin if you are using the java extension.");
+				throw new GradleException("You must either specify 'target' manually or apply the 'java' plugin.");
 			}
 			FileCollection union = getProject().files();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -178,7 +178,7 @@ protected void setupTask(SpotlessTask task) {
 		if (target == null) {
 			JavaPluginConvention javaPlugin = getProject().getConvention().findPlugin(JavaPluginConvention.class);
 			if (javaPlugin == null) {
-				throw new GradleException("You must apply the java plugin before the spotless plugin if you are using the java extension.");
+				throw new GradleException("You must either specify 'target' manually or apply the 'java' plugin.");
 			}
 			FileCollection union = getProject().files();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {

File: lib/src/main/java/com/diffplug/spotless/markdown/LibMarkdownPreconditions.java
Patch:
@@ -25,8 +25,9 @@ private LibMarkdownPreconditions() {}
 	static <K, V> Map<K, V> requireKeysAndValuesNonNull(Map<K, V> map) {
 		Objects.requireNonNull(map);
 		map.forEach((key, value) -> {
-			Objects.requireNonNull(key);
-			Objects.requireNonNull(value);
+			String errorMessage = key + "=" + value;
+			Objects.requireNonNull(key, errorMessage);
+			Objects.requireNonNull(value, errorMessage);
 		});
 		return map;
 	}

File: _ext/eclipse-groovy/src/main/java/com/diffplug/spotless/extra/eclipse/groovy/GrEclipseFormatterStepImpl.java
Patch:
@@ -55,14 +55,14 @@ public class GrEclipseFormatterStepImpl {
 	private final boolean ignoreFormatterProblems;
 
 	public GrEclipseFormatterStepImpl(final Properties properties) throws Exception {
-		if (SpotlessEclipseFramework.setup(
+		SpotlessEclipseFramework.setup(
 				config -> {
 					config.applyDefault();
 					config.useSlf4J(GrEclipseFormatterStepImpl.class.getPackage().getName());
 				},
 				plugins -> {
 					plugins.add(new GroovyCoreActivator());
-				})) {}
+				});
 		PreferenceStore preferences = createPreferences(properties);
 		preferencesStore = new FormatterPreferencesOnStore(preferences);
 		ignoreFormatterProblems = Boolean.parseBoolean(properties.getProperty(IGNORE_FORMATTER_PROBLEMS, "false"));

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseXmlFormatterStepImpl.java
Patch:
@@ -67,7 +67,7 @@ public EclipseXmlFormatterStepImpl(Properties properties) throws Exception {
 		xmlAdapterFactory = new ModelQueryAdapterFactoryForXML();
 	}
 
-	private static void setupFramework(boolean resolveExternalURI) throws BundleException {
+	private synchronized static void setupFramework(boolean resolveExternalURI) throws BundleException {
 		if (SpotlessEclipseFramework.setup(
 				config -> {
 					config.applyDefault();

File: _ext/eclipse-groovy/src/main/java/com/diffplug/spotless/extra/eclipse/groovy/GrEclipseFormatterStepImpl.java
Patch:
@@ -55,14 +55,14 @@ public class GrEclipseFormatterStepImpl {
 	private final boolean ignoreFormatterProblems;
 
 	public GrEclipseFormatterStepImpl(final Properties properties) throws Exception {
-		if (SpotlessEclipseFramework.setup(
+		SpotlessEclipseFramework.setup(
 				config -> {
 					config.applyDefault();
 					config.useSlf4J(GrEclipseFormatterStepImpl.class.getPackage().getName());
 				},
 				plugins -> {
 					plugins.add(new GroovyCoreActivator());
-				})) {}
+				});
 		PreferenceStore preferences = createPreferences(properties);
 		preferencesStore = new FormatterPreferencesOnStore(preferences);
 		ignoreFormatterProblems = Boolean.parseBoolean(properties.getProperty(IGNORE_FORMATTER_PROBLEMS, "false"));

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseXmlFormatterStepImpl.java
Patch:
@@ -67,7 +67,7 @@ public EclipseXmlFormatterStepImpl(Properties properties) throws Exception {
 		xmlAdapterFactory = new ModelQueryAdapterFactoryForXML();
 	}
 
-	private static void setupFramework(boolean resolveExternalURI) throws BundleException {
+	private synchronized static void setupFramework(boolean resolveExternalURI) throws BundleException {
 		if (SpotlessEclipseFramework.setup(
 				config -> {
 					config.applyDefault();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -30,7 +30,7 @@ private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.cdt.EclipseCdtFormatterStepImpl";
-	private static final String DEFAULT_VERSION = "4.12.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -35,7 +35,7 @@ private GrEclipseFormatterStep() {}
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.groovy.GrEclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.groovy.eclipse.GrEclipseFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-groovy";
-	private static final String DEFAULT_VERSION = "4.12.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	/** Creates a formatter step using the default version for the given settings file. */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.12.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public enum EclipseWtpFormatterStep {
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";
-	private static final String DEFAULT_VERSION = "4.12.0";
+	private static final String DEFAULT_VERSION = "4.13.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	private final String implementationClassName;

File: lib-extra/src/test/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseCdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.11.0", "4.12.0"};
+		return new String[]{"4.7.3a", "4.11.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0", "4.12.0"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -25,7 +25,7 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
 		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0", "4.10.0",
-				"4.11.0", "4.12.0"};
+				"4.11.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStepTest.java
Patch:
@@ -76,7 +76,7 @@ public static Iterable<WTP> data() {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.7.3b", "4.8.0", "4.12.0"};
+		return new String[]{"4.7.3a", "4.7.3b", "4.8.0", "4.12.0", "4.13.0"};
 	}
 
 	@Override

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -40,7 +40,7 @@ public class KtLintStep {
 	private KtLintStep() {}
 
 	private static final Pattern VERSION_MATCHER = Pattern.compile("0\\.(\\d+)\\.\\d+");
-	private static final String DEFAULT_VERSION = "0.34.2";
+	private static final String DEFAULT_VERSION = "0.35.0";
 	static final String NAME = "ktlint";
 	static final String PACKAGE_PRE_0_32 = "com.github.shyiko";
 	static final String PACKAGE = "com.pinterest";

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorter.java
Patch:
@@ -92,6 +92,9 @@ private static boolean isBeginningOfScope(String line) {
 	}
 
 	private static String applyImportsToDocument(final String document, int firstImportLine, int lastImportLine, List<String> strings) {
+		if (document.isEmpty()) {
+			return document;
+		}
 		boolean importsAlreadyAppended = false;
 		Scanner scanner = new Scanner(document);
 		int curentLine = 0;

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -146,7 +146,7 @@ FormatterFunc createFormat() throws Exception {
 				//
 
 				// grab the Params class
-				Class<?> paramsClass = classLoader.loadClass(pkg + ".ktlint.core.KtLint.Params");
+				Class<?> paramsClass = classLoader.loadClass(pkg + ".ktlint.core.KtLint$Params");
 				// and its format method
 				Constructor<?> constructor = paramsClass.getConstructor(
 					/* fileName, nullable */ String.class,

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -34,6 +34,7 @@
 import org.gradle.api.GradleException;
 import org.gradle.api.tasks.Input;
 import org.gradle.api.tasks.InputFiles;
+import org.gradle.api.tasks.Internal;
 import org.gradle.api.tasks.OutputFiles;
 import org.gradle.api.tasks.TaskAction;
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
@@ -47,7 +48,6 @@
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.PaddedCell;
 import com.diffplug.spotless.PaddedCellBulk;
-import com.diffplug.spotless.annotations.Internal;
 import com.diffplug.spotless.extra.integration.DiffMessageFormatter;
 
 public class SpotlessTask extends DefaultTask {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -47,6 +47,7 @@
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.PaddedCell;
 import com.diffplug.spotless.PaddedCellBulk;
+import com.diffplug.spotless.annotations.Internal;
 import com.diffplug.spotless.extra.integration.DiffMessageFormatter;
 
 public class SpotlessTask extends DefaultTask {
@@ -109,6 +110,7 @@ public FormatExceptionPolicy getExceptionPolicy() {
 
 	protected Iterable<File> target;
 
+	@Internal
 	public Iterable<File> getTarget() {
 		return target;
 	}

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -40,7 +40,7 @@ public class ScalaFmtStep {
 	private ScalaFmtStep() {}
 
 	private static final Pattern VERSION_PRE_2_0 = Pattern.compile("[10]\\.(\\d+)\\.\\d+");
-	private static final String DEFAULT_VERSION = "1.1.0";
+	private static final String DEFAULT_VERSION = "2.0.1";
 	static final String NAME = "scalafmt";
 	static final String MAVEN_COORDINATE_PRE_2_0 = "com.geirsson:scalafmt-core_2.11:";
 	static final String MAVEN_COORDINATE = "org.scalameta:scalafmt-core_2.11:";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ScalaExtensionTest.java
Patch:
@@ -36,6 +36,6 @@ public void integration() throws IOException {
 		setFile("scalafmt.conf").toResource("scala/scalafmt/scalafmt.conf");
 		setFile("src/main/scala/basic.scala").toResource("scala/scalafmt/basic.dirty");
 		gradleRunner().withArguments("spotlessApply").build();
-		assertFile("src/main/scala/basic.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
+		assertFile("src/main/scala/basic.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/IncludesExcludesTest.java
Patch:
@@ -24,7 +24,7 @@ public class IncludesExcludesTest extends MavenIntegrationTest {
 	private static final String JAVA_FORMATTED = "java/eclipse/JavaCodeFormatted.test";
 	private static final String JAVA_UNFORMATTED = "java/eclipse/JavaCodeUnformatted.test";
 	private static final String SCALA_UNFORMATTED = "scala/scalafmt/basic.dirty";
-	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean";
+	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean_2.0.1";
 
 	@Test
 	public void testDefaultIncludesJava() throws Exception {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MultiModuleProjectTest.java
Patch:
@@ -93,7 +93,7 @@ public void testConfigurationDependency() throws Exception {
 		assertFile("two/src/main/java/test1.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 		assertFile("two/src/test/java/test2.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 
-		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
-		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
+		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
+		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/scala/ScalafmtTest.java
Patch:
@@ -24,7 +24,7 @@ public class ScalafmtTest extends MavenIntegrationTest {
 	public void testScalafmtWithDefaultConfig() throws Exception {
 		writePomWithScalaSteps("<scalafmt/>");
 
-		runTest("scala/scalafmt/basic.clean");
+		runTest("scala/scalafmt/basic.clean_2.0.1");
 	}
 
 	@Test
@@ -36,7 +36,7 @@ public void testScalafmtWithCustomConfig() throws Exception {
 				"  <file>${project.basedir}/scalafmt.conf</file>",
 				"</scalafmt>");
 
-		runTest("scala/scalafmt/basic.cleanWithCustomConf");
+		runTest("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 
 	private void runTest(String s) throws Exception {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/IncludesExcludesTest.java
Patch:
@@ -24,7 +24,7 @@ public class IncludesExcludesTest extends MavenIntegrationTest {
 	private static final String JAVA_FORMATTED = "java/eclipse/JavaCodeFormatted.test";
 	private static final String JAVA_UNFORMATTED = "java/eclipse/JavaCodeUnformatted.test";
 	private static final String SCALA_UNFORMATTED = "scala/scalafmt/basic.dirty";
-	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean";
+	private static final String SCALA_FORMATTED = "scala/scalafmt/basic.clean_2.0.1";
 
 	@Test
 	public void testDefaultIncludesJava() throws Exception {

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MultiModuleProjectTest.java
Patch:
@@ -93,7 +93,7 @@ public void testConfigurationDependency() throws Exception {
 		assertFile("two/src/main/java/test1.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 		assertFile("two/src/test/java/test2.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
 
-		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
-		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf");
+		assertFile("three/src/main/scala/test1.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
+		assertFile("three/src/test/scala/test2.scala").sameAsResource("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/scala/ScalafmtTest.java
Patch:
@@ -24,7 +24,7 @@ public class ScalafmtTest extends MavenIntegrationTest {
 	public void testScalafmtWithDefaultConfig() throws Exception {
 		writePomWithScalaSteps("<scalafmt/>");
 
-		runTest("scala/scalafmt/basic.clean");
+		runTest("scala/scalafmt/basic.clean_2.0.1");
 	}
 
 	@Test
@@ -36,7 +36,7 @@ public void testScalafmtWithCustomConfig() throws Exception {
 				"  <file>${project.basedir}/scalafmt.conf</file>",
 				"</scalafmt>");
 
-		runTest("scala/scalafmt/basic.cleanWithCustomConf");
+		runTest("scala/scalafmt/basic.cleanWithCustomConf_2.0.1");
 	}
 
 	private void runTest(String s) throws Exception {

File: lib/src/main/java/com/diffplug/spotless/scala/ScalaFmtStep.java
Patch:
@@ -40,7 +40,7 @@ public class ScalaFmtStep {
 	private ScalaFmtStep() {}
 
 	private static final Pattern VERSION_PRE_2_0 = Pattern.compile("[10]\\.(\\d+)\\.\\d+");
-	private static final String DEFAULT_VERSION = "1.1.0";
+	private static final String DEFAULT_VERSION = "2.0.1";
 	static final String NAME = "scalafmt";
 	static final String MAVEN_COORDINATE_PRE_2_0 = "com.geirsson:scalafmt-core_2.11:";
 	static final String MAVEN_COORDINATE = "org.scalameta:scalafmt-core_2.11:";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -27,13 +27,13 @@
 import org.assertj.core.api.Assertions;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.junit.Test;
 
 import com.diffplug.common.base.StringPrinter;
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
+import com.diffplug.spotless.TestProvisioner;
 import com.diffplug.spotless.extra.integration.DiffMessageFormatter;
 
 public class DiffMessageFormatterTest extends ResourceHarness {
@@ -42,7 +42,7 @@ private SpotlessTask create(File... files) throws IOException {
 	}
 
 	private SpotlessTask create(List<File> files) throws IOException {
-		Project project = ProjectBuilder.builder().withProjectDir(rootFolder()).build();
+		Project project = TestProvisioner.gradleProject(rootFolder());
 		SpotlessTask task = project.getTasks().create("underTest", SpotlessTask.class);
 		task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 		task.setTarget(files);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -24,21 +24,21 @@
 import org.assertj.core.api.Assertions;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
+import com.diffplug.spotless.TestProvisioner;
 
 public class FormatTaskTest extends ResourceHarness {
 	private SpotlessTask checkTask;
 	private SpotlessTask applyTask;
 
 	@Before
-	public void createTask() {
-		Project project = ProjectBuilder.builder().build();
+	public void createTask() throws IOException {
+		Project project = TestProvisioner.gradleProject(rootFolder());
 		checkTask = project.getTasks().create("checkTaskUnderTest", SpotlessTask.class);
 		checkTask.setCheck();
 		applyTask = project.getTasks().create("applyTaskUnderTest", SpotlessTask.class);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.assertj.core.api.Assertions;
 import org.gradle.api.Project;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -35,6 +34,7 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
+import com.diffplug.spotless.TestProvisioner;
 
 public class PaddedCellTaskTest extends ResourceHarness {
 	private static final boolean IS_WIN = StandardSystemProperty.OS_NAME.value().toLowerCase(Locale.US).contains("win");
@@ -44,7 +44,7 @@ private static String slashify(String input) {
 	}
 
 	private class Bundle {
-		Project project = ProjectBuilder.builder().withProjectDir(rootFolder()).build();
+		Project project = TestProvisioner.gradleProject(rootFolder());
 		File file;
 		SpotlessTask check;
 		SpotlessTask apply;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -20,13 +20,13 @@
 
 import org.gradle.api.Project;
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
-import org.gradle.testfixtures.ProjectBuilder;
 import org.gradle.testkit.runner.GradleRunner;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import com.diffplug.common.base.Errors;
 import com.diffplug.common.base.StandardSystemProperty;
+import com.diffplug.spotless.TestProvisioner;
 
 /**
  * If you'd like to step through the full spotless plugin,
@@ -117,7 +117,7 @@ private static void runTasksManually(Type type) throws Exception {
 
 	/** Creates a Project which has had the SpotlessExtension setup. */
 	private static Project createProject(Consumer<SpotlessExtension> test) throws Exception {
-		Project project = ProjectBuilder.builder().withProjectDir(new File("").getAbsoluteFile()).build();
+		Project project = TestProvisioner.gradleProject(new File("").getAbsoluteFile());
 		// create the spotless plugin
 		SpotlessPlugin plugin = project.getPlugins().apply(SpotlessPlugin.class);
 		// setup the plugin

File: testlib/src/main/java/com/diffplug/spotless/ResourceHarness.java
Patch:
@@ -39,6 +39,7 @@
 import org.junit.rules.TestWatcher;
 import org.junit.runner.Description;
 
+import com.diffplug.common.base.Errors;
 import com.diffplug.common.io.Resources;
 
 public class ResourceHarness {
@@ -77,8 +78,8 @@ private void logFailure(String message, Description description) {
 	};
 
 	/** Returns the root folder (canonicalized to fix OS X issue) */
-	protected File rootFolder() throws IOException {
-		return folderDontUseDirectly.getRoot().getCanonicalFile();
+	protected File rootFolder() {
+		return Errors.rethrow().get(() -> folderDontUseDirectly.getRoot().getCanonicalFile());
 	}
 
 	/** Returns a new child of the root folder. */

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/ArtifactResolver.java
Patch:
@@ -57,7 +57,7 @@ public ArtifactResolver(RepositorySystem repositorySystem, RepositorySystemSessi
 		this.log = Objects.requireNonNull(log);
 	}
 
-	/** Use {@link ArtifactResolver#resolve(boolean, Collection)) instead.} */
+	/** Use {@link ArtifactResolver#resolve(boolean, Collection)} instead. */
 	@Deprecated
 	public Set<File> resolve(String mavenCoordinate) {
 		return resolve(true, Arrays.asList(mavenCoordinate));

File: testlib/src/main/java/com/diffplug/spotless/ResourceHarness.java
Patch:
@@ -46,7 +46,7 @@ public class ResourceHarness {
 	 * On OS X, the temp folder is a symlink,
 	 * and some of gradle's stuff breaks symlinks.
 	 * By only accessing it through the {@link #rootFolder()}
-	 * and {@link #newFile()} apis, we can guarantee there
+	 * and {@link #newFile(String)} apis, we can guarantee there
 	 * will be no symlink problems.
 	 */
 	@Rule

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -30,7 +30,7 @@ private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.cdt.EclipseCdtFormatterStepImpl";
-	private static final String DEFAULT_VERSION = "4.11.0";
+	private static final String DEFAULT_VERSION = "4.12.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -35,7 +35,7 @@ private GrEclipseFormatterStep() {}
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.groovy.GrEclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.groovy.eclipse.GrEclipseFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-groovy";
-	private static final String DEFAULT_VERSION = "4.10.0";
+	private static final String DEFAULT_VERSION = "4.12.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	/** Creates a formatter step using the default version for the given settings file. */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.11.0";
+	private static final String DEFAULT_VERSION = "4.12.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public enum EclipseWtpFormatterStep {
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";
-	private static final String DEFAULT_VERSION = "4.8.0";
+	private static final String DEFAULT_VERSION = "4.12.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	private final String implementationClassName;

File: lib-extra/src/test/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseCdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.11.0"};
+		return new String[]{"4.7.3a", "4.11.0", "4.12.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0", "4.12.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -25,7 +25,7 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
 		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0", "4.10.0",
-				"4.11.0"};
+				"4.11.0", "4.12.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStepTest.java
Patch:
@@ -76,7 +76,7 @@ public static Iterable<WTP> data() {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.7.3b", "4.8.0"};
+		return new String[]{"4.7.3a", "4.7.3b", "4.8.0", "4.12.0"};
 	}
 
 	@Override

File: testlib/src/test/java/com/diffplug/spotless/scala/ScalaFmtStepTest.java
Patch:
@@ -45,14 +45,14 @@ public void behaviorCustomConfig() throws Exception {
 	public void behaviorDefaultConfigVersion_2_0_0() throws Exception {
 		FormatterStep step = ScalaFmtStep.create("2.0.0", TestProvisioner.mavenCentral(), null);
 		StepHarness.forStep(step)
-				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basic.clean");
+				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basicPost2.0.0.clean");
 	}
 
 	@Test
 	public void behaviorCustomConfigVersion_2_0_0() throws Exception {
 		FormatterStep step = ScalaFmtStep.create("2.0.0", TestProvisioner.mavenCentral(), createTestFile("scala/scalafmt/scalafmt.conf"));
 		StepHarness.forStep(step)
-				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basic.cleanWithCustomConf");
+				.testResource("scala/scalafmt/basic.dirty", "scala/scalafmt/basicPost2.0.0.cleanWithCustomConf");
 	}
 
 	@Test

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/service/TemporaryLocation.java
Patch:
@@ -81,6 +81,7 @@ public boolean isReadOnly() {
 	}
 
 	@Override
+	@Deprecated
 	public boolean setURL(URL value, boolean lock) throws IllegalStateException {
 		throw new IllegalStateException("URL not modifyable.");
 	}

File: _ext/eclipse-base/src/test/java/com/diffplug/spotless/extra/eclipse/base/osgi/TestBundle.java
Patch:
@@ -45,6 +45,7 @@ public int getState() {
 	}
 
 	@Override
+	@Deprecated
 	public Dictionary<String, String> getHeaders() {
 		return null;
 	}
@@ -70,6 +71,7 @@ public URL getResource(String name) {
 	}
 
 	@Override
+	@Deprecated
 	public Dictionary<String, String> getHeaders(String locale) {
 		return null;
 	}
@@ -100,6 +102,7 @@ public URL getEntry(String path) {
 	}
 
 	@Override
+	@Deprecated
 	public Enumeration<URL> findEntries(String path, String filePattern, boolean recurse) {
 		return null;
 	}

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseHtmlFormatterStepImpl.java
Patch:
@@ -47,6 +47,7 @@
 import com.diffplug.spotless.extra.eclipse.wtp.html.JsRegionProcessor;
 import com.diffplug.spotless.extra.eclipse.wtp.html.StructuredDocumentProcessor;
 import com.diffplug.spotless.extra.eclipse.wtp.sse.CleanupStep;
+import com.diffplug.spotless.extra.eclipse.wtp.sse.PreventExternalURIResolverExtension;
 import com.diffplug.spotless.extra.eclipse.wtp.sse.SpotlessPreferences;
 
 /** Formatter step which calls out to the Eclipse HTML cleanup and formatter. */
@@ -67,6 +68,8 @@ public EclipseHtmlFormatterStepImpl(Properties properties) throws Exception {
 			additionalPlugins.add(new org.eclipse.core.internal.filesystem.Activator());
 			additionalPlugins.add(new JavaScriptCore());
 			additionalPlugins.add(new HTMLCorePlugin());
+			//The HTML formatter only uses the DOCTYPE/SCHEMA for content model selection.
+			additionalPlugins.add(new PreventExternalURIResolverExtension());
 		});
 		/*
 		 * The cleanup processor tries to load DTDs into the cache (which we have not setup).

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/CleanupStep.java
Patch:
@@ -92,6 +92,7 @@ protected CleanupStep(T processor, Consumer<SpotlessEclipseCoreConfig> core, Con
 					config.add(IContentTypeManager.class, new ContentTypeManager(processor));
 					//The preference lookup via the ContentTypeManager, requires a preference service
 					config.add(IPreferencesService.class, PreferencesService.getDefault());
+					config.useSlf4J(this.getClass().getPackage().getName());
 				},
 				plugins -> {
 					plugins.applyDefault();

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -30,7 +30,7 @@ private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.cdt.EclipseCdtFormatterStepImpl";
-	private static final String DEFAULT_VERSION = "4.7.3a";
+	private static final String DEFAULT_VERSION = "4.11.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -35,7 +35,7 @@ private GrEclipseFormatterStep() {}
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.groovy.GrEclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.groovy.eclipse.GrEclipseFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-groovy";
-	private static final String DEFAULT_VERSION = "4.8.1";
+	private static final String DEFAULT_VERSION = "4.10.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	/** Creates a formatter step using the default version for the given settings file. */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.9.0";
+	private static final String DEFAULT_VERSION = "4.11.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public enum EclipseWtpFormatterStep {
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";
-	private static final String DEFAULT_VERSION = "4.7.3a";
+	private static final String DEFAULT_VERSION = "4.8.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	private final String implementationClassName;

File: lib-extra/src/test/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseCdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a"};
+		return new String[]{"4.7.3a", "4.11.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -24,7 +24,8 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0"};
+		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0", "4.10.0",
+				"4.11.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStepTest.java
Patch:
@@ -76,7 +76,7 @@ public static Iterable<WTP> data() {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a"};
+		return new String[]{"4.7.3a", "4.7.3b", "4.8.0"};
 	}
 
 	@Override

File: lib/src/main/java/com/diffplug/spotless/SpotlessCache.java
Patch:
@@ -66,7 +66,7 @@ synchronized ClassLoader classloader(JarState state) {
 	synchronized ClassLoader classloader(Serializable key, JarState state) {
 		SerializedKey serializedKey = new SerializedKey(key);
 		return cache
-				.computeIfAbsent(serializedKey, k -> new URLClassLoader(state.jarUrls(), null));
+				.computeIfAbsent(serializedKey, k -> new FeatureClassLoader(state.jarUrls(), this.getClass().getClassLoader()));
 	}
 
 	static SpotlessCache instance() {

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -31,7 +31,7 @@ public class GoogleJavaFormatStep {
 	// prevent direct instantiation
 	private GoogleJavaFormatStep() {}
 
-	private static final String DEFAULT_VERSION = "1.5";
+	private static final String DEFAULT_VERSION = "1.7";
 	private static final String DEFAULT_STYLE = "GOOGLE";
 	static final String NAME = "google-java-format";
 	static final String MAVEN_COORDINATE = "com.google.googlejavaformat:google-java-format:";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FileLocator.java
Patch:
@@ -46,7 +46,7 @@ public File locateFile(String path) {
 		} catch (ResourceNotFoundException e) {
 			throw new RuntimeException("Unable to locate file with path: " + path, e);
 		} catch (FileResourceCreationException e) {
-			throw new RuntimeException("Unable to create temporaty file '" + outputFile + "' in the output directory", e);
+			throw new RuntimeException("Unable to create temporary file '" + outputFile + "' in the output directory", e);
 		}
 	}
 

File: testlib/src/test/java/com/diffplug/spotless/npm/TsFmtFormatterStepTest.java
Patch:
@@ -60,10 +60,10 @@ public void formattingUsingConfigFile() throws Exception {
 			Files.write(new File(configFile.getParentFile(), configFileNameWithoutExtension + ".ts").toPath(), getTestResource(dirtyFile).getBytes(StandardCharsets.UTF_8));
 
 			final FormatterStep formatterStep = TsFmtFormatterStep.create(
+					TsFmtFormatterStep.defaultDevDependencies(),
 					TestProvisioner.mavenCentral(),
 					buildDir(),
 					npmExecutable(),
-					configFile.getParentFile(),
 					TypedTsFmtConfigFile.named(configFileNameWithoutExtension, configFile),
 					Collections.emptyMap());
 
@@ -81,10 +81,10 @@ public void formattingUsingInlineConfigWorks() throws Exception {
 			final ImmutableMap<String, Object> inlineConfig = ImmutableMap.of("indentSize", 1, "convertTabsToSpaces", true);
 
 			final FormatterStep formatterStep = TsFmtFormatterStep.create(
+					TsFmtFormatterStep.defaultDevDependencies(),
 					TestProvisioner.mavenCentral(),
 					buildDir(),
 					npmExecutable(),
-					buildDir().getAbsoluteFile(),
 					null,
 					inlineConfig);
 

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -36,7 +36,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.21.0";
+	private static final String DEFAULT_VERSION = "0.32.0";
 	static final String NAME = "ktlint";
 	static final String MAVEN_COORDINATE = "com.pinterest:ktlint:";
 

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -38,7 +38,7 @@ private KtLintStep() {}
 
 	private static final String DEFAULT_VERSION = "0.21.0";
 	static final String NAME = "ktlint";
-	static final String MAVEN_COORDINATE = "com.github.shyiko:ktlint:";
+	static final String MAVEN_COORDINATE = "com.pinterest:ktlint:";
 
 	public static FormatterStep create(Provisioner provisioner) {
 		return create(defaultVersion(), provisioner);

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -151,9 +151,9 @@ private List<File> collectFiles(FormatterFactory formatterFactory) throws MojoEx
 					.anyMatch(filePattern -> filePattern.matcher(file.getAbsolutePath())
 							.matches());
 			return files
-				.stream()
-				.filter(shouldInclude)
-				.collect(toList());
+					.stream()
+					.filter(shouldInclude)
+					.collect(toList());
 		} catch (IOException e) {
 			throw new MojoExecutionException("Unable to scan file tree rooted at " + baseDir, e);
 		}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FileLocator.java
Patch:
@@ -46,7 +46,7 @@ public File locateFile(String path) {
 		} catch (ResourceNotFoundException e) {
 			throw new RuntimeException("Unable to locate file with path: " + path, e);
 		} catch (FileResourceCreationException e) {
-			throw new RuntimeException("Unable to create temporaty file '" + outputFile + "' in the output directory", e);
+			throw new RuntimeException("Unable to create temporary file '" + outputFile + "' in the output directory", e);
 		}
 	}
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStep.java
Patch:
@@ -30,7 +30,7 @@ private EclipseCdtFormatterStep() {}
 
 	private static final String NAME = "eclipse cdt formatter";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.cdt.EclipseCdtFormatterStepImpl";
-	private static final String DEFAULT_VERSION = "4.7.3a";
+	private static final String DEFAULT_VERSION = "4.11.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/cpp/EclipseCdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseCdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a"};
+		return new String[]{"4.7.3a", "4.11.0"};
 	}
 
 	@Override

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.10.0";
+	private static final String DEFAULT_VERSION = "4.11.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -24,7 +24,8 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0", "4.10.0"};
+		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0", "4.10.0",
+				"4.11.0"};
 	}
 
 	@Override

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -35,7 +35,7 @@ private GrEclipseFormatterStep() {}
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.groovy.GrEclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.groovy.eclipse.GrEclipseFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-groovy";
-	private static final String DEFAULT_VERSION = "4.8.1";
+	private static final String DEFAULT_VERSION = "4.10.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	/** Creates a formatter step using the default version for the given settings file. */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public enum EclipseWtpFormatterStep {
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";
-	private static final String DEFAULT_VERSION = "4.7.3b";
+	private static final String DEFAULT_VERSION = "4.8.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	private final String implementationClassName;

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStepTest.java
Patch:
@@ -76,7 +76,7 @@ public static Iterable<WTP> data() {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.7.3b"};
+		return new String[]{"4.7.3a", "4.7.3b", "4.8.0"};
 	}
 
 	@Override

File: lib-extra/src/main/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStep.java
Patch:
@@ -35,7 +35,7 @@ private GrEclipseFormatterStep() {}
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.groovy.GrEclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.groovy.eclipse.GrEclipseFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-groovy";
-	private static final String DEFAULT_VERSION = "4.8.1";
+	private static final String DEFAULT_VERSION = "4.10.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	/** Creates a formatter step using the default version for the given settings file. */

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public enum EclipseWtpFormatterStep {
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";
-	private static final String DEFAULT_VERSION = "4.7.3b";
+	private static final String DEFAULT_VERSION = "4.8.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	private final String implementationClassName;

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0", "4.8.1", "4.10.0"};
 	}
 
 	@Override

File: lib-extra/src/test/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStepTest.java
Patch:
@@ -76,7 +76,7 @@ public static Iterable<WTP> data() {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.7.3a", "4.7.3b"};
+		return new String[]{"4.7.3a", "4.7.3b", "4.8.0"};
 	}
 
 	@Override

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseHtmlFormatterStepImpl.java
Patch:
@@ -47,6 +47,7 @@
 import com.diffplug.spotless.extra.eclipse.wtp.html.JsRegionProcessor;
 import com.diffplug.spotless.extra.eclipse.wtp.html.StructuredDocumentProcessor;
 import com.diffplug.spotless.extra.eclipse.wtp.sse.CleanupStep;
+import com.diffplug.spotless.extra.eclipse.wtp.sse.PreventExternalURIResolverExtension;
 import com.diffplug.spotless.extra.eclipse.wtp.sse.SpotlessPreferences;
 
 /** Formatter step which calls out to the Eclipse HTML cleanup and formatter. */

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/CleanupStep.java
Patch:
@@ -92,6 +92,7 @@ protected CleanupStep(T processor, Consumer<SpotlessEclipseCoreConfig> core, Con
 					config.add(IContentTypeManager.class, new ContentTypeManager(processor));
 					//The preference lookup via the ContentTypeManager, requires a preference service
 					config.add(IPreferencesService.class, PreferencesService.getDefault());
+					config.useSlf4J(this.getClass().getPackage().getName());
 				},
 				plugins -> {
 					plugins.applyDefault();

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/PreventExternalURIResolverExtension.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.spotless.extra.eclipse.wtp;
+package com.diffplug.spotless.extra.eclipse.wtp.sse;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.emf.common.util.URI;

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseHtmlFormatterStepImpl.java
Patch:
@@ -47,6 +47,7 @@
 import com.diffplug.spotless.extra.eclipse.wtp.html.JsRegionProcessor;
 import com.diffplug.spotless.extra.eclipse.wtp.html.StructuredDocumentProcessor;
 import com.diffplug.spotless.extra.eclipse.wtp.sse.CleanupStep;
+import com.diffplug.spotless.extra.eclipse.wtp.sse.PreventExternalURIResolverExtension;
 import com.diffplug.spotless.extra.eclipse.wtp.sse.SpotlessPreferences;
 
 /** Formatter step which calls out to the Eclipse HTML cleanup and formatter. */

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/CleanupStep.java
Patch:
@@ -92,6 +92,7 @@ protected CleanupStep(T processor, Consumer<SpotlessEclipseCoreConfig> core, Con
 					config.add(IContentTypeManager.class, new ContentTypeManager(processor));
 					//The preference lookup via the ContentTypeManager, requires a preference service
 					config.add(IPreferencesService.class, PreferencesService.getDefault());
+					config.useSlf4J(this.getClass().getPackage().getName());
 				},
 				plugins -> {
 					plugins.applyDefault();

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/sse/PreventExternalURIResolverExtension.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.spotless.extra.eclipse.wtp;
+package com.diffplug.spotless.extra.eclipse.wtp.sse;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.emf.common.util.URI;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -58,7 +58,7 @@ public void allowToSpecifyMultipleVersionStrings() throws IOException {
 				"spotless {",
 				"    typescript {",
 				"        target 'test.ts'",
-				"        tsfmt(['tslint': '5.1.0', 'typescript': '2.9.2']).config(tsfmtconfig)",
+				"        tsfmt(['typescript-formatter': '7.2.1', 'tslint': '5.1.0', 'typescript': '2.9.2']).config(tsfmtconfig)",
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/tsfmt/tsfmt/tsfmt.dirty");

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/TypescriptExtension.java
Patch:
@@ -52,7 +52,9 @@ public TypescriptFormatExtension tsfmt(String version) {
 
 	/** Creates a {@code TypescriptFormatExtension} using exactly the specified npm packages. */
 	public TypescriptFormatExtension tsfmt(Map<String, String> devDependencies) {
-		return new TypescriptFormatExtension(devDependencies);
+		TypescriptFormatExtension tsfmt = new TypescriptFormatExtension(devDependencies);
+		addStep(tsfmt.createStep());
+		return tsfmt;
 	}
 
 	public class TypescriptFormatExtension extends NpmStepConfig<TypescriptFormatExtension> {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -58,7 +58,7 @@ public void allowToSpecifyMultipleVersionStrings() throws IOException {
 				"spotless {",
 				"    typescript {",
 				"        target 'test.ts'",
-				"        tsfmt(tslintVersion: '5.1.0', typescriptVersion: '2.9.2').config(tsfmtconfig)",
+				"        tsfmt(['tslint': '5.1.0', 'typescript': '2.9.2']).config(tsfmtconfig)",
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/tsfmt/tsfmt/tsfmt.dirty");

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/EclipseHtmlFormatterStepImpl.java
Patch:
@@ -67,6 +67,8 @@ public EclipseHtmlFormatterStepImpl(Properties properties) throws Exception {
 			additionalPlugins.add(new org.eclipse.core.internal.filesystem.Activator());
 			additionalPlugins.add(new JavaScriptCore());
 			additionalPlugins.add(new HTMLCorePlugin());
+			//The HTML formatter only uses the DOCTYPE/SCHEMA for content model selection.
+			additionalPlugins.add(new PreventExternalURIResolverExtension());
 		});
 		/*
 		 * The cleanup processor tries to load DTDs into the cache (which we have not setup).

File: _ext/eclipse-wtp/src/main/java/com/diffplug/spotless/extra/eclipse/wtp/PreventExternalURIResolverExtension.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class PreventExternalURIResolverExtension implements URIResolverExtension, BundleActivator {
 
-	private final String REFUSE_EXTERNAL_URI = "file://refused.external.uri";
+	private static final String REFUSE_EXTERNAL_URI = "file://refused.external.uri";
 
 	/**
 	 * @param file the in-workspace base resource, if one exists

File: lib/src/main/java/com/diffplug/spotless/npm/TsFmtFormatterStep.java
Patch:
@@ -35,9 +35,9 @@ public class TsFmtFormatterStep {
 
 	public static final String DEFAULT_TYPESCRIPT_FORMATTER_VERSION = "7.2.2";
 
-	public static final String DEFAULT_TYPESCRIPT_FORMATTER_TYPESCRIPT_VERSION = "2.9.2";
+	public static final String DEFAULT_TYPESCRIPT_FORMATTER_TYPESCRIPT_VERSION = "3.3.3";
 
-	public static final String DEFAULT_TYPESCRIPT_FORMATTER_TSLINT_VERSION = "5.1.0";
+	public static final String DEFAULT_TYPESCRIPT_FORMATTER_TSLINT_VERSION = "5.12.1";
 
 	public static final String NAME = "tsfmt-format";
 

File: lib/src/main/java/com/diffplug/spotless/npm/PrettierFormatterStep.java
Patch:
@@ -37,7 +37,7 @@ public class PrettierFormatterStep {
 
 	public static final String NAME = "prettier-format";
 
-	static final String DEFAULT_PRETTIER_VERSION = "1.13.4";
+	static final String DEFAULT_PRETTIER_VERSION = "1.16.4";
 
 	public static final String defaultVersion() {
 		return DEFAULT_PRETTIER_VERSION;

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -31,7 +31,7 @@ public class GoogleJavaFormatStep {
 	// prevent direct instantiation
 	private GoogleJavaFormatStep() {}
 
-	private static final String DEFAULT_VERSION = "1.5";
+	private static final String DEFAULT_VERSION = "1.7";
 	private static final String DEFAULT_STYLE = "GOOGLE";
 	static final String NAME = "google-java-format";
 	static final String MAVEN_COORDINATE = "com.google.googlejavaformat:google-java-format:";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/css/Eclipse.java
Patch:
@@ -25,7 +25,10 @@
 import com.diffplug.spotless.extra.wtp.EclipseWtpFormatterStep;
 import com.diffplug.spotless.maven.FormatterStepConfig;
 import com.diffplug.spotless.maven.FormatterStepFactory;
+import com.diffplug.spotless.maven.generic.EclipseWtp;
 
+/** CSS Eclipse is deprecated. Use {@link EclipseWtp} instead.*/
+@Deprecated
 public class Eclipse implements FormatterStepFactory {
 
 	@Parameter

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/xml/Eclipse.java
Patch:
@@ -25,7 +25,10 @@
 import com.diffplug.spotless.extra.wtp.EclipseWtpFormatterStep;
 import com.diffplug.spotless.maven.FormatterStepConfig;
 import com.diffplug.spotless.maven.FormatterStepFactory;
+import com.diffplug.spotless.maven.generic.EclipseWtp;
 
+/** XML Eclipse is deprecated. Use {@link EclipseWtp} instead.*/
+@Deprecated
 public class Eclipse implements FormatterStepFactory {
 
 	@Parameter

File: testlib/src/test/java/com/diffplug/spotless/css/CssDefaultsTest.java
Patch:
@@ -26,6 +26,8 @@
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.generic.LicenseHeaderStep;
 
+/** The CSS extension is discontinued. */
+@Deprecated
 public class CssDefaultsTest extends ResourceHarness {
 
 	@Test

File: testlib/src/test/java/com/diffplug/spotless/xml/XmlDefaultsTest.java
Patch:
@@ -26,6 +26,8 @@
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.generic.LicenseHeaderStep;
 
+/** The XML extension is discontinued. */
+@Deprecated
 public class XmlDefaultsTest extends ResourceHarness {
 
 	@Test

File: lib/src/main/java/com/diffplug/spotless/antlr4/Antlr4Defaults.java
Patch:
@@ -20,7 +20,7 @@
 
 public class Antlr4Defaults {
 
-	private static final String LICENSE_HEADER_DELIMITER = "grammar ";
+	private static final String LICENSE_HEADER_DELIMITER = "(grammar|lexer grammar|parser grammar)";
 
 	private static final List<String> defaultIncludes = Arrays.asList("src/main/antlr4/**/*.g4", "src/test/antlr4/**/*.g4");
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.7.3a";
+	private static final String DEFAULT_VERSION = "4.9.0";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0"};
+		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0", "4.9.0"};
 	}
 
 	@Override

File: lib-extra/src/main/java/com/diffplug/spotless/extra/EclipseBasedStepBuilder.java
Patch:
@@ -152,7 +152,7 @@ public static class State implements Serializable {
 
 		/** State constructor expects that all passed items are not modified afterwards */
 		protected State(String formatterStepExt, Provisioner jarProvisioner, List<String> dependencies, Iterable<File> settingsFiles) throws IOException {
-			this.jarState = JarState.from(dependencies, jarProvisioner);
+			this.jarState = JarState.withoutTransitives(dependencies, jarProvisioner);
 			this.settingsFiles = FileSignature.signAsList(settingsFiles);
 			this.formatterStepExt = formatterStepExt;
 		}

File: lib-extra/src/main/java/com/diffplug/spotless/extra/wtp/EclipseWtpFormatterStep.java
Patch:
@@ -25,9 +25,9 @@
 import com.diffplug.spotless.extra.EclipseBasedStepBuilder;
 
 /** Formatter step which calls out to the Groovy-Eclipse formatter. */
-public final class WtpEclipseFormatterStep {
+public final class EclipseWtpFormatterStep {
 	// prevent direct instantiation
-	private WtpEclipseFormatterStep() {}
+	private EclipseWtpFormatterStep() {}
 
 	private static final String NAME = "eclipse wtp formatters";
 	private static final String FORMATTER_PACKAGE = "com.diffplug.spotless.extra.eclipse.wtp.";

File: lib-extra/src/test/java/com/diffplug/spotless/extra/eclipse/EclipseCommonTests.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.Test;
 
 import com.diffplug.spotless.FormatterStep;
+import com.diffplug.spotless.LineEnding;
 import com.diffplug.spotless.ResourceHarness;
 
 /**
@@ -78,7 +79,7 @@ public void testSupportedVersions() throws Exception {
 			}
 			String output = null;
 			try {
-				output = step.format(input, inputFile);
+				output = LineEnding.toUnix(step.format(input, inputFile));
 			} catch (Exception e) {
 				fail("Exception occured when formatting input with version: " + version, e);
 			}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -32,13 +32,14 @@ private GradleProvisioner() {}
 
 	public static Provisioner fromProject(Project project) {
 		Objects.requireNonNull(project);
-		return mavenCoords -> {
+		return (withTransitives, mavenCoords) -> {
 			try {
 				Dependency[] deps = mavenCoords.stream()
 						.map(project.getBuildscript().getDependencies()::create)
 						.toArray(Dependency[]::new);
 				Configuration config = project.getRootProject().getBuildscript().getConfigurations().detachedConfiguration(deps);
 				config.setDescription(mavenCoords.toString());
+				config.setTransitive(withTransitives);
 				return config.resolve();
 			} catch (Exception e) {
 				logger.log(Level.SEVERE,
@@ -53,4 +54,5 @@ public static Provisioner fromProject(Project project) {
 	}
 
 	private static final Logger logger = Logger.getLogger(GradleProvisioner.class.getName());
+
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PrettierIntegrationTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.diffplug.gradle.spotless;
 
-import java.io.File;
 import java.io.IOException;
 
 import org.junit.Test;
@@ -48,7 +47,7 @@ public void useInlineConfig() throws IOException {
 
 	@Test
 	public void useFileConfig() throws IOException {
-		File formattingFile = setFile(".prettierrc.yml").toResource("npm/prettier/config/.prettierrc.yml");
+		setFile(".prettierrc.yml").toResource("npm/prettier/config/.prettierrc.yml");
 		setFile("build.gradle").toLines(
 				"buildscript { repositories { mavenCentral() } }",
 				"plugins {",
@@ -57,7 +56,7 @@ public void useFileConfig() throws IOException {
 				"spotless {",
 				"    format 'mytypescript', {",
 				"        target 'test.ts'",
-				"        prettier().configFile('" + formattingFile.getAbsolutePath() + "')",
+				"        prettier().configFile('.prettierrc.yml')",
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/prettier/config/typescript.dirty");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/TypescriptExtensionTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.diffplug.gradle.spotless;
 
-import java.io.File;
 import java.io.IOException;
 
 import org.junit.Test;
@@ -48,7 +47,7 @@ public void useTsfmtInlineConfig() throws IOException {
 
 	@Test
 	public void useTsfmtFileConfig() throws IOException {
-		File formattingFile = setFile("tsfmt.json").toLines(
+		setFile("tsfmt.json").toLines(
 				"{",
 				"    \"indentSize\": 1,",
 				"    \"convertTabsToSpaces\": true",
@@ -61,7 +60,7 @@ public void useTsfmtFileConfig() throws IOException {
 				"spotless {",
 				"    typescript {",
 				"        target 'test.ts'",
-				"        tsfmt().tsfmtFile('" + formattingFile.getAbsolutePath() + "')",
+				"        tsfmt().tsfmtFile('tsfmt.json')",
 				"    }",
 				"}");
 		setFile("test.ts").toResource("npm/tsfmt/tsfmt/tsfmt.dirty");

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -118,7 +118,7 @@ public void sql(Action<SqlExtension> closure) {
 		configure(SqlExtension.NAME, SqlExtension.class, closure);
 	}
 
-	/** Configures the special typescript-specific extension for SQL files. */
+	/** Configures the special typescript-specific extension for typescript files. */
 	public void typescript(Action<TypescriptExtension> closure) {
 		configure(TypescriptExtension.NAME, TypescriptExtension.class, closure);
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/TypescriptExtension.java
Patch:
@@ -25,11 +25,11 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.extra.npm.TsFmtFormatterStep;
 
-public class TypescriptGradleExtension extends FormatExtension {
+public class TypescriptExtension extends FormatExtension {
 
 	static final String NAME = "typescript";
 
-	public TypescriptGradleExtension(SpotlessExtension root) {
+	public TypescriptExtension(SpotlessExtension root) {
 		super(root);
 	}
 

File: lib-extra/src/main/java/com/diffplug/spotless/extra/npm/BlacklistedOptionException.java
Patch:
@@ -16,6 +16,7 @@
 package com.diffplug.spotless.extra.npm;
 
 public class BlacklistedOptionException extends RuntimeException {
+	private static final long serialVersionUID = -5876348893394153811L;
 
 	public BlacklistedOptionException(String blacklistedOption) {
 		super("The config option '" + blacklistedOption + "' is not supported.");

File: lib-extra/src/main/java/com/diffplug/spotless/extra/npm/Reflective.java
Patch:
@@ -266,6 +266,8 @@ public int hashCode() {
 	}
 
 	public static class ReflectiveException extends RuntimeException {
+		private static final long serialVersionUID = -5764607170953013791L;
+
 		public ReflectiveException(String message, Throwable cause) {
 			super(message, cause);
 		}

File: lib-extra/src/test/java/com/diffplug/spotless/extra/npm/TsFmtFormatterStepTest.java
Patch:
@@ -88,7 +88,7 @@ public static Iterable<String> blacklistedOption() {
 
 		@Test(expected = BlacklistedOptionException.class)
 		public void blacklistedOptionIsThrown() throws Exception {
-			final FormatterStep formatterStep = TsFmtFormatterStep.create(
+			TsFmtFormatterStep.create(
 					TestProvisioner.mavenCentral(),
 					buildDir(),
 					npmExecutable(),
@@ -97,6 +97,7 @@ ImmutableMap.<String, Object> builder()
 							.build());
 
 			fail("should never be reached!");
+
 		}
 
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -431,7 +431,7 @@ public LicenseHeaderConfig licenseHeaderFile(Object licenseHeaderFile, String de
 		return config;
 	}
 
-	public abstract class NpmStepConfig<T extends NpmStepConfig> {
+	public abstract class NpmStepConfig<T extends NpmStepConfig<?>> {
 		@Nullable
 		protected Object npmFile;
 

File: testlib/src/main/java/com/diffplug/spotless/StepHarness.java
Patch:
@@ -40,7 +40,7 @@ public static StepHarness forStep(FormatterStep step) {
 		return new StepHarness(FormatterFunc.Closeable.of(
 				() -> {
 					if (step instanceof FormatterStepImpl.Standard) {
-						((FormatterStepImpl.Standard) step).cleanupFormatterFunc();
+						((FormatterStepImpl.Standard<?>) step).cleanupFormatterFunc();
 					}
 				},
 				input -> LineEnding.toUnix(step.format(input, new File("")))));

File: lib-extra/src/main/java/com/diffplug/spotless/extra/npm/PrettierConfig.java
Patch:
@@ -41,7 +41,7 @@ public class PrettierConfig implements Serializable {
 	public PrettierConfig(File prettierConfigPath, Map<String, Object> options) {
 		try {
 			this.prettierConfigPath = prettierConfigPath;
-			this.prettierConfigPathSignature = FileSignature.signAsList(this.prettierConfigPath);
+			this.prettierConfigPathSignature = prettierConfigPath != null ? FileSignature.signAsList(this.prettierConfigPath) : FileSignature.signAsList();
 			this.options = options == null ? new TreeMap<>() : new TreeMap<>(options);
 		} catch (IOException e) {
 			throw ThrowingEx.asRuntime(e);

File: lib-extra/src/main/java/com/diffplug/spotless/extra/npm/Reflective.java
Patch:
@@ -99,7 +99,7 @@ private Method method(Object target, Class<?> clazz, String methodName, Object[]
 			} else {
 				// try with primitives
 
-				throw new ReflectiveException("Could not find method " + methodName + " with parameters " + parameters + " on object " + target, e);
+				throw new ReflectiveException("Could not find method " + methodName + " with parameters " + Arrays.toString(parameters) + " on object " + target, e);
 			}
 		}
 	}
@@ -114,7 +114,7 @@ private Method method(Object target, Class<?> clazz, String methodName, TypedVal
 			} else {
 				// try with primitives
 
-				throw new ReflectiveException("Could not find method " + methodName + " with parameters " + parameters + " on object " + target, e);
+				throw new ReflectiveException("Could not find method " + methodName + " with parameters " + Arrays.toString(parameters) + " on object " + target, e);
 			}
 		}
 	}

File: _ext/eclipse-groovy/src/main/java/com/diffplug/spotless/extra/eclipse/groovy/SpotlessLogService.java
Patch:
@@ -369,7 +369,7 @@ public SimpleLogEntry(LogLevel level, String message) {
 		}
 
 		public SimpleLogEntry(LogLevel level, String message, Throwable execption) {
-			this(level, message, Optional.of(execption));
+			this(level, message, Optional.ofNullable(execption));
 		}
 
 		private SimpleLogEntry(LogLevel level, String message, Optional<Throwable> execption) {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/groovy/GrEclipseFormatterStepTest.java
Patch:
@@ -23,7 +23,7 @@
 public class GrEclipseFormatterStepTest extends EclipseCommonTests {
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"2.3.0", "4.6.3"};
+		return new String[]{"2.3.0", "4.6.3", "4.8.0"};
 	}
 
 	@Override

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStep.java
Patch:
@@ -32,7 +32,7 @@ private EclipseJdtFormatterStep() {}
 	private static final String FORMATTER_CLASS_OLD = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";
 	private static final String FORMATTER_CLASS = "com.diffplug.spotless.extra.eclipse.java.EclipseJdtFormatterStepImpl";
 	private static final String MAVEN_GROUP_ARTIFACT = "com.diffplug.spotless:spotless-eclipse-jdt";
-	private static final String DEFAULT_VERSION = "4.8.0";
+	private static final String DEFAULT_VERSION = "4.7.3a";
 	private static final String FORMATTER_METHOD = "format";
 
 	public static String defaultVersion() {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.6.1", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.8.0"};
+		return new String[]{"4.6.1", "4.6.2", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.7.3a", "4.8.0"};
 	}
 
 	@Override

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -35,7 +35,7 @@
 public final class PaddedCell {
 	/** The kind of result. */
 	public enum Type {
-	CONVERGE, CYCLE, DIVERGE;
+		CONVERGE, CYCLE, DIVERGE;
 
 		/** Creates a PaddedCell with the given file and steps. */
 		PaddedCell create(File file, List<String> steps) {

File: lib-extra/src/test/java/com/diffplug/spotless/extra/java/EclipseJdtFormatterStepTest.java
Patch:
@@ -24,7 +24,7 @@ public class EclipseJdtFormatterStepTest extends EclipseCommonTests {
 
 	@Override
 	protected String[] getSupportedVersions() {
-		return new String[]{"4.6.1", "4.6.3", "4.7.0", "4.7.1", "4.7.2"};
+		return new String[]{"4.6.1", "4.6.3", "4.7.0", "4.7.1", "4.7.2", "4.8.0"};
 	}
 
 	@Override

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -35,7 +35,7 @@
 public final class PaddedCell {
 	/** The kind of result. */
 	public enum Type {
-		CONVERGE, CYCLE, DIVERGE;
+	CONVERGE, CYCLE, DIVERGE;
 
 		/** Creates a PaddedCell with the given file and steps. */
 		PaddedCell create(File file, List<String> steps) {

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/SpotlessEclipseCoreConfig.java
Patch:
@@ -28,7 +28,7 @@
  * Hence they do not require a registration, which allows a lightweight
  * setup.
  * </p>
- * @see org.eclipse.core.internal.runtime.PlatformActivator
+ * See {@code org.eclipse.core.internal.runtime.PlatformActivator} implementation for details.
  */
 public class SpotlessEclipseCoreConfig extends BundleConfig<SpotlessEclipseFramework.DefaultBundles> {
 

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/SpotlessEclipseFramework.java
Patch:
@@ -105,7 +105,7 @@ public enum DefaultPlugins {
 		 * The resources plugin initialized the Eclipse workspace and allows URL look-up.
 		 * Most formatters using the workspace to resolve URLs or create
 		 * file interfaces.
-		 * @see org.eclipse.core.resources.IFile
+		 * See {@code org.eclipse.core.resources.IFile} implementation for details.
 		 */
 		RESOURCES(org.eclipse.core.resources.ResourcesPlugin.class);
 

File: _ext/eclipse-base/src/main/java/com/diffplug/spotless/extra/eclipse/base/osgi/BundleConfig.java
Patch:
@@ -76,7 +76,8 @@ public void add(T bundle) {
 	}
 
 	/** Add a set of default bundles with their default states */
-	public void add(@SuppressWarnings("unchecked") T... bundles) {
+	@SuppressWarnings("unchecked")
+	public void add(T... bundles) {
 		Arrays.asList(bundles).forEach(bundle -> add(bundle));
 	}
 

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -33,7 +33,8 @@ public void behavior() throws Exception {
 				.testResource("kotlin/ktlint/basic.dirty", "kotlin/ktlint/basic.clean")
 				.testException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
-					assertion.hasMessage("Wildcard import");
+					assertion.hasMessage("Error on line: 1, column: 1\n" +
+							"Wildcard import");
 				});
 	}
 

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -33,7 +33,8 @@ public void behavior() throws Exception {
 				.testResource("kotlin/ktlint/basic.dirty", "kotlin/ktlint/basic.clean")
 				.testException("kotlin/ktlint/unsolvable.dirty", assertion -> {
 					assertion.isInstanceOf(AssertionError.class);
-					assertion.hasMessage("Wildcard import");
+					assertion.hasMessage("Error on line: 1, column: 1\n" +
+							"Wildcard import");
 				});
 	}
 

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -140,7 +140,8 @@ public String format(String raw) {
 
 	private boolean matchesLicenseWithYearToken(String raw, Matcher matcher) {
 		int startOfTheSecondPart = raw.indexOf(licenseHeaderAfterYearToken);
-		return (raw.startsWith(licenseHeaderBeforeYearToken) && startOfTheSecondPart + licenseHeaderAfterYearToken.length() == matcher.start())
+		return startOfTheSecondPart > licenseHeaderBeforeYearToken.length()
+				&& (raw.startsWith(licenseHeaderBeforeYearToken) && startOfTheSecondPart + licenseHeaderAfterYearToken.length() == matcher.start())
 				&& yearMatcherPattern.matcher(raw.substring(licenseHeaderBeforeYearToken.length(), startOfTheSecondPart)).matches();
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/generic/LicenseHeaderStep.java
Patch:
@@ -140,7 +140,8 @@ public String format(String raw) {
 
 	private boolean matchesLicenseWithYearToken(String raw, Matcher matcher) {
 		int startOfTheSecondPart = raw.indexOf(licenseHeaderAfterYearToken);
-		return (raw.startsWith(licenseHeaderBeforeYearToken) && startOfTheSecondPart + licenseHeaderAfterYearToken.length() == matcher.start())
+		return startOfTheSecondPart > licenseHeaderBeforeYearToken.length()
+				&& (raw.startsWith(licenseHeaderBeforeYearToken) && startOfTheSecondPart + licenseHeaderAfterYearToken.length() == matcher.start())
 				&& yearMatcherPattern.matcher(raw.substring(licenseHeaderBeforeYearToken.length(), startOfTheSecondPart)).matches();
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/java/ImportOrderStep.java
Patch:
@@ -39,7 +39,7 @@ public final class ImportOrderStep {
 	private ImportOrderStep() {}
 
 	/** Method interface has been changed to
-	 * {@link ImportOrderStep#importOrder(String...)}.*/
+	 * {@link ImportOrderStep#createFromOrder(String...)}.*/
 	@Deprecated
 	public static FormatterStep createFromOrder(List<String> importOrder) {
 		// defensive copying and null checking

File: lib/src/main/java/com/diffplug/spotless/FormatExceptionPolicyStrict.java
Patch:
@@ -34,7 +34,7 @@ public void excludeStep(String stepName) {
 		excludeSteps.add(Objects.requireNonNull(stepName));
 	}
 
-	/** Adds a realtive pathx to exclude. */
+	/** Adds a relative path to exclude. */
 	public void excludePath(String relativePath) {
 		excludePaths.add(Objects.requireNonNull(relativePath));
 	}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/AbstractSpotlessMojo.java
Patch:
@@ -102,7 +102,6 @@ private void execute(FormatterFactory formatterFactory) throws MojoExecutionExce
 		process(files, formatter);
 	}
 
-	@SuppressWarnings("unchecked")
 	private List<File> collectFiles(FormatterFactory formatterFactory) throws MojoExecutionException {
 		Set<String> configuredIncludes = formatterFactory.includes();
 		Set<String> configuredExcludes = formatterFactory.excludes();

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/FormatterFactory.java
Patch:
@@ -101,7 +101,7 @@ private LineEnding lineEndings(FormatterConfig config) {
 	}
 
 	private FormatterStepConfig stepConfig(Charset encoding, FormatterConfig config) {
-		return new FormatterStepConfig(encoding, licenseHeaderDelimiter(), config.getProvisioner());
+		return new FormatterStepConfig(encoding, licenseHeaderDelimiter(), config.getProvisioner(), config.getFileLocator());
 	}
 
 	private static List<FormatterStepFactory> gatherStepFactories(List<FormatterStepFactory> allGlobal, List<FormatterStepFactory> allConfigured) {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/generic/LicenseHeader.java
Patch:
@@ -26,7 +26,7 @@
 
 public class LicenseHeader implements FormatterStepFactory {
 	@Parameter
-	private File file;
+	private String file;
 
 	@Parameter
 	private String content;
@@ -43,7 +43,8 @@ public final FormatterStep newFormatterStep(FormatterStepConfig config) {
 
 		if (file != null ^ content != null) {
 			if (file != null) {
-				return LicenseHeaderStep.createFromFile(file, config.getEncoding(), delimiterString);
+				File licenseHeaderFile = config.getFileLocator().locateFile(file);
+				return LicenseHeaderStep.createFromFile(licenseHeaderFile, config.getEncoding(), delimiterString);
 			} else {
 				return LicenseHeaderStep.createFromHeader(content, delimiterString);
 			}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/ImportOrder.java
Patch:
@@ -26,7 +26,7 @@
 
 public class ImportOrder implements FormatterStepFactory {
 	@Parameter
-	private File file;
+	private String file;
 
 	@Parameter
 	private String order;
@@ -35,7 +35,8 @@ public class ImportOrder implements FormatterStepFactory {
 	public FormatterStep newFormatterStep(FormatterStepConfig config) {
 		if (file != null ^ order != null) {
 			if (file != null) {
-				return ImportOrderStep.createFromFile(file);
+				File importsFile = config.getFileLocator().locateFile(file);
+				return ImportOrderStep.createFromFile(importsFile);
 			} else {
 				return ImportOrderStep.createFromOrder(order.split(","));
 			}

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/scala/Scalafmt.java
Patch:
@@ -27,14 +27,15 @@
 public class Scalafmt implements FormatterStepFactory {
 
 	@Parameter
-	private File file;
+	private String file;
 
 	@Parameter
 	private String version;
 
 	@Override
 	public FormatterStep newFormatterStep(FormatterStepConfig config) {
 		String scalafmtVersion = version != null ? version : ScalaFmtStep.defaultVersion();
-		return ScalaFmtStep.create(scalafmtVersion, config.getProvisioner(), file);
+		File configFile = config.getFileLocator().locateFile(file);
+		return ScalaFmtStep.create(scalafmtVersion, config.getProvisioner(), configFile);
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -332,7 +332,7 @@ public void indentWithSpaces(int numSpacesPerTab) {
 
 	/** Ensures that the files are indented using spaces. */
 	public void indentWithSpaces() {
-		indentWithSpaces(4);
+		addStep(IndentStep.Type.SPACE.create());
 	}
 
 	/** Ensures that the files are indented using tabs. */
@@ -342,7 +342,7 @@ public void indentWithTabs(int tabToSpaces) {
 
 	/** Ensures that the files are indented using tabs. */
 	public void indentWithTabs() {
-		indentWithTabs(4);
+		addStep(IndentStep.Type.TAB.create());
 	}
 
 	abstract class LicenseHeaderConfig {

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/java/Java.java
Patch:
@@ -20,9 +20,9 @@
 
 import java.util.Set;
 
-import com.diffplug.spotless.maven.FormatterFactory;
+import com.diffplug.spotless.maven.generic.Format;
 
-public class Java extends FormatterFactory {
+public class Java extends Format {
 	private static final Set<String> DEFAULT_INCLUDES = unmodifiableSet(newHashSet("src/main/java/**/*.java",
 			"src/test/java/**/*.java"));
 	private static final String LICENSE_HEADER_DELIMITER = "package ";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/scala/Scala.java
Patch:
@@ -20,9 +20,9 @@
 
 import java.util.Set;
 
-import com.diffplug.spotless.maven.FormatterFactory;
+import com.diffplug.spotless.maven.generic.Format;
 
-public class Scala extends FormatterFactory {
+public class Scala extends Format {
 	private static final Set<String> DEFAULT_INCLUDES = unmodifiableSet(newHashSet("src/main/scala/**/*.scala",
 			"src/test/scala/**/*.scala", "src/main/scala/**/*.sc", "src/test/scala/**/*.sc"));
 	private static final String LICENSE_HEADER_DELIMITER = "package ";

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/EclipseFormatStepTest.java
Patch:
@@ -30,8 +30,9 @@ public void testEclipse() throws Exception {
 				"</eclipse>");
 		setFile("formatter.xml").toResource("java/eclipse/formatter.xml");
 
-		setFile("src/main/java/test.java").toResource("java/eclipse/JavaCodeUnformatted.test");
+		String path = "src/main/java/test.java";
+		setFile(path).toResource("java/eclipse/JavaCodeUnformatted.test");
 		mavenRunner().withArguments("spotless:apply").runNoError();
-		assertFile("src/main/java/test.java").sameAsResource("java/eclipse/JavaCodeFormatted.test");
+		assertFile(path).sameAsResource("java/eclipse/JavaCodeFormatted.test");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/ImportOrderTest.java
Patch:
@@ -40,8 +40,9 @@ public void order() throws Exception {
 	}
 
 	private void runTest() throws Exception {
-		setFile("src/main/java/test.java").toResource("java/importsorter/JavaCodeUnsortedImports.test");
+		String path = "src/main/java/test.java";
+		setFile(path).toResource("java/importsorter/JavaCodeUnsortedImports.test");
 		mavenRunner().withArguments("spotless:apply").runNoError();
-		assertFile("src/main/java/test.java").sameAsResource("java/importsorter/JavaCodeSortedImports.test");
+		assertFile(path).sameAsResource("java/importsorter/JavaCodeSortedImports.test");
 	}
 }

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/RemoveUnusedImportsStepTest.java
Patch:
@@ -25,8 +25,9 @@ public class RemoveUnusedImportsStepTest extends MavenIntegrationTest {
 	public void testRemoveUnusedInports() throws Exception {
 		writePomWithJavaSteps("<removeUnusedImports/>");
 
-		setFile("src/main/java/test.java").toResource("java/removeunusedimports/JavaCodeWithPackageUnformatted.test");
+		String path = "src/main/java/test.java";
+		setFile(path).toResource("java/removeunusedimports/JavaCodeWithPackageUnformatted.test");
 		mavenRunner().withArguments("spotless:apply").runNoError();
-		assertFile("src/main/java/test.java").sameAsResource("java/removeunusedimports/JavaCodeWithPackageFormatted.test");
+		assertFile(path).sameAsResource("java/removeunusedimports/JavaCodeWithPackageFormatted.test");
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/BumpThisNumberIfACustomStepChangesTest.java
Patch:
@@ -46,7 +46,7 @@ private void writeContentWithBadFormatting() throws IOException {
 	protected void applyIsUpToDate(boolean upToDate) throws IOException {
 		super.applyIsUpToDate(upToDate);
 		String result = read("README.md");
-		Assert.assertEquals("abc\n", result);
+		Assert.assertEquals("abc", result);
 	}
 
 	@Test

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/CustomLazyGroovyTest.java
Patch:
@@ -38,6 +38,6 @@ public void integration() throws IOException {
 		write("README.md", "ABC");
 		gradleRunner().withArguments("spotlessApply").build();
 		String result = read("README.md");
-		Assert.assertEquals("abc\n", result);
+		Assert.assertEquals("abc", result);
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/JavaDefaultTargetTest.java
Patch:
@@ -33,7 +33,7 @@ public void integration() throws IOException {
 				"",
 				"spotless {",
 				"    java {",
-				"        googleJavaFormat()",
+				"        googleJavaFormat('1.2')",
 				"    }",
 				"}");
 		String input = getTestResource("java/googlejavaformat/JavaCodeUnformatted.test");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/KotlinGradleExtensionTest.java
Patch:
@@ -93,7 +93,7 @@ public void integration_lint_script_files_without_top_level_declaration() throws
 		write("configuration.gradle.kts", "buildscript {}");
 		gradleRunner().withArguments("spotlessApply").build();
 		String result = read("configuration.gradle.kts");
-		String formatted = "buildscript {}\n";
+		String formatted = "buildscript {}";
 		Assert.assertEquals(formatted, result);
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ScalaExtensionTest.java
Patch:
@@ -38,7 +38,7 @@ public void integration() throws IOException {
 		write("scalafmt.conf", getTestResource("scala/scalafmt/scalafmt.conf"));
 		gradleRunner().withArguments("spotlessApply").build();
 		String result = read("src/main/scala/basic.scala");
-		String formatted = getTestResource("scala/scalafmt/basic.clean");
+		String formatted = getTestResource("scala/scalafmt/basic.cleanWithCustomConf");
 		Assert.assertEquals(formatted, result);
 	}
 }

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SqlExtensionTest.java
Patch:
@@ -56,7 +56,7 @@ public void should_format_sql_with_alternative_configuration() throws IOExceptio
 				"}");
 
 		File sqlFile = write("src/main/resources/aFolder/create.sql", getTestResource("sql/dbeaver/create.dirty"));
-		write("myConfig.properties", getTestResource("sql/dbeaver/myConfig.properties"));
+		write("myConfig.properties", getTestResource("sql/dbeaver/sqlConfig2.properties"));
 
 		// Run
 		gradleRunner().withArguments("spotlessApply").build();

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/java/EclipseFormatStepTest.java
Patch:
@@ -31,12 +31,12 @@ public void testEclipse() throws Exception {
 				"  <version>4.7.1</version>",
 				"</eclipse>");
 
-		write("src/main/java/test.java", getTestResource("java/eclipse/format/JavaCodeUnformatted.test"));
-		write("formatter.xml", getTestResource("java/eclipse/format/formatter.xml"));
+		write("src/main/java/test.java", getTestResource("java/eclipse/JavaCodeUnformatted.test"));
+		write("formatter.xml", getTestResource("java/eclipse/formatter.xml"));
 
 		mavenRunner().withArguments("spotless:apply").runNoError();
 
 		String actual = read("src/main/java/test.java");
-		assertThat(actual).isEqualTo(getTestResource("java/eclipse/format/JavaCodeFormatted.test"));
+		assertThat(actual).isEqualTo(getTestResource("java/eclipse/JavaCodeFormatted.test"));
 	}
 }

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/ArtifactResolutionException.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.diffplug.spotless.maven;
 
+@SuppressWarnings("serial")
 public class ArtifactResolutionException extends RuntimeException {
 
 	public ArtifactResolutionException(String message, Throwable cause) {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -346,9 +346,8 @@ public void indentWithTabs() {
 	}
 
 	abstract class LicenseHeaderConfig {
-
 		String delimiter;
-		String yearSeparator;
+		String yearSeparator = LicenseHeaderStep.defaultYearDelimiter();
 
 		public LicenseHeaderConfig(String delimiter) {
 			this.delimiter = Objects.requireNonNull(delimiter, "delimiter");

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenRunner.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.diffplug.spotless.maven;
 
+import static java.util.stream.Collectors.joining;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.ByteArrayOutputStream;
@@ -26,7 +27,6 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
-import java.util.stream.Collectors;
 
 import com.diffplug.common.base.Throwables;
 import com.diffplug.common.io.ByteStreams;
@@ -65,7 +65,8 @@ private Result run() throws IOException, InterruptedException {
 		Objects.requireNonNull(projectDir, "Need to call withProjectDir() first");
 		Objects.requireNonNull(args, "Need to call withArguments() first");
 		// run maven with the given args in the given directory
-		List<String> cmds = getPlatformCmds("-X -Dmaven.repo.local=" + localRepositoryDir + " " + Arrays.stream(args).collect(Collectors.joining(" ")));
+		String argsString = Arrays.stream(args).collect(joining(" "));
+		List<String> cmds = getPlatformCmds("-e -Dmaven.repo.local=" + localRepositoryDir + ' ' + argsString);
 		ProcessBuilder builder = new ProcessBuilder(cmds);
 		builder.directory(projectDir);
 		Process process = builder.start();

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenRunner.java
Patch:
@@ -61,7 +61,7 @@ private Result run() throws IOException, InterruptedException {
 		// run maven with the given args in the given directory
 		//   -e to display execution errors at the console
 		//   -o to force offline mode, so that it uses the locally-built plugin and not one from a snapshot repo
-		List<String> cmds = getPlatformCmds("-e -o " + Arrays.stream(args).collect(Collectors.joining(" ")));
+		List<String> cmds = getPlatformCmds("-X -o " + Arrays.stream(args).collect(Collectors.joining(" ")));
 		ProcessBuilder builder = new ProcessBuilder(cmds);
 		builder.directory(projectDir);
 		Process process = builder.start();

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationTest.java
Patch:
@@ -33,12 +33,13 @@
 
 import org.junit.Before;
 
-import com.diffplug.common.io.Resources;
-import com.diffplug.spotless.ResourceHarness;
 import com.github.mustachejava.DefaultMustacheFactory;
 import com.github.mustachejava.Mustache;
 import com.github.mustachejava.MustacheFactory;
 
+import com.diffplug.common.io.Resources;
+import com.diffplug.spotless.ResourceHarness;
+
 public class MavenIntegrationTest extends ResourceHarness {
 
 	private static final String LOCAL_MAVEN_REPOSITORY_DIR = "localMavenRepositoryDir";

File: plugin-maven/src/main/java/com/diffplug/spotless/maven/SpotlessCheckMojo.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
 
@@ -31,7 +32,7 @@
  * Performs code formatting analysis and prints all violations to the console.
  * Fails the build if violations are discovered.
  */
-@Mojo(name = "check", threadSafe = true)
+@Mojo(name = "check", defaultPhase = LifecyclePhase.VERIFY, threadSafe = true)
 public class SpotlessCheckMojo extends AbstractSpotlessMojo {
 
 	@Parameter(property = "spotless.check.skip", defaultValue = "false")

File: plugin-maven/src/test/java/com/diffplug/spotless/maven/MavenIntegrationTest.java
Patch:
@@ -99,8 +99,8 @@ private static Map<String, String> buildPomXmlParams(String group, String... ste
 		params.put(LOCAL_MAVEN_REPOSITORY_DIR, getSystemProperty(LOCAL_MAVEN_REPOSITORY_DIR));
 		params.put(SPOTLESS_MAVEN_PLUGIN_VERSION, getSystemProperty(SPOTLESS_MAVEN_PLUGIN_VERSION));
 
-		String prefix = String.format("<%s>\n<steps>\n", group);
-		String suffix = String.format("\n</steps>\n</%s>", group);
+		String prefix = String.format("<%s>\n", group);
+		String suffix = String.format("\n</%s>", group);
 		String stepsXml = Arrays.stream(steps).collect(joining("\n", prefix, suffix));
 		params.put(CONFIGURATION, stepsXml);
 

File: plugin-maven/src/main/java/com/diffplug/maven/spotless/AbstractSpotlessMojo.java
Patch:
@@ -74,7 +74,7 @@ protected List<Path> getAllSourceRoots() {
 	}
 
 	protected MojoConfig getMojoConfig() {
-		ArtifactResolver resolver = new ArtifactResolver(repositorySystem, repositorySystemSession, repositories);
+		ArtifactResolver resolver = new ArtifactResolver(repositorySystem, repositorySystemSession, repositories, getLog());
 		Provisioner provisioner = MavenProvisioner.create(resolver);
 		return new MojoConfig(baseDir, encoding, lineEndings, provisioner);
 	}

File: plugin-maven/src/main/java/com/diffplug/maven/spotless/MavenProvisioner.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Objects;
 
 import com.diffplug.spotless.Provisioner;
-import com.diffplug.spotless.ThrowingEx;
 
 /** Maven integration for Provisioner. */
 public class MavenProvisioner {
@@ -30,7 +29,7 @@ public static Provisioner create(ArtifactResolver artifactResolver) {
 		Objects.requireNonNull(artifactResolver);
 
 		return mavenCoords -> mavenCoords.stream()
-				.map(ThrowingEx.wrap(artifactResolver::resolve))
+				.flatMap(coord -> artifactResolver.resolve(coord).stream())
 				.collect(toSet());
 	}
 }

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseFormatterStep.java
Patch:
@@ -34,7 +34,7 @@ public final class EclipseFormatterStep {
 	// prevent direct instantiation
 	private EclipseFormatterStep() {}
 
-	private static final String DEFAULT_VERSION = "4.7.1";
+	private static final String DEFAULT_VERSION = "4.7.2";
 	private static final String NAME = "eclipse formatter";
 	private static final String MAVEN_COORDINATE = "com.diffplug.spotless:spotless-ext-eclipse-jdt:";
 	private static final String FORMATTER_CLASS = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -31,7 +31,7 @@ public class GoogleJavaFormatStep {
 	// prevent direct instantiation
 	private GoogleJavaFormatStep() {}
 
-	private static final String DEFAULT_VERSION = "1.3";
+	private static final String DEFAULT_VERSION = "1.5";
 	static final String NAME = "google-java-format";
 	static final String MAVEN_COORDINATE = "com.google.googlejavaformat:google-java-format:";
 	static final String FORMATTER_CLASS = "com.google.googlejavaformat.java.Formatter";

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -34,7 +34,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.6.1";
+	private static final String DEFAULT_VERSION = "0.14.0";
 	static final String NAME = "ktlint";
 	static final String MAVEN_COORDINATE = "com.github.shyiko:ktlint:";
 

File: testlib/src/test/java/com/diffplug/spotless/kotlin/KtLintStepTest.java
Patch:
@@ -26,7 +26,9 @@
 public class KtLintStepTest extends ResourceHarness {
 	@Test
 	public void behavior() throws Exception {
-		FormatterStep step = KtLintStep.create(TestProvisioner.mavenCentral());
+		// Must use jcenter because `com.andreapivetta.kolor:kolor:0.0.2` isn't available on mavenCentral.
+		// It is a dependency of ktlint.
+		FormatterStep step = KtLintStep.create(TestProvisioner.jcenter());
 		StepHarness.forStep(step)
 				.testResource("kotlin/ktlint/basic.dirty", "kotlin/ktlint/basic.clean")
 				.testException("kotlin/ktlint/unsolvable.dirty", assertion -> {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/EncodingTest.java
Patch:
@@ -78,10 +78,10 @@ public void globalIsRespectedButCanBeOverridden() throws Exception {
 				"}");
 		write("test.java", "µ");
 		write("utf32.encoded", LineEnding.UNIX, Charset.forName("UTF-32"), "µ");
-		Assert.assertEquals("µ\n", read("utf32.encoded", LineEnding.UNIX, Charset.forName("UTF-32")));
+		Assert.assertEquals("µ\n", read("utf32.encoded", Charset.forName("UTF-32")));
 
 		gradleRunner().withArguments("spotlessApply").build();
 		Assert.assertEquals("??\n", read("test.java"));
-		Assert.assertEquals("A\n", read("utf32.encoded", LineEnding.UNIX, Charset.forName("UTF-32")));
+		Assert.assertEquals("A\n", read("utf32.encoded", Charset.forName("UTF-32")));
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/sql/DBeaverSQLFormatter.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Properties;
 
-import com.diffplug.spotless.sql.dbeaver.SQLFormatterConfiguration;
+import com.diffplug.spotless.sql.dbeaver.DBeaverSQLFormatterConfiguration;
 import com.diffplug.spotless.sql.dbeaver.SQLTokenizedFormatter;
 
 /**
@@ -28,7 +28,7 @@ public class DBeaverSQLFormatter {
 	private final SQLTokenizedFormatter sqlTokenizedFormatter;
 
 	DBeaverSQLFormatter(Properties properties) {
-		SQLFormatterConfiguration configuration = new SQLFormatterConfiguration(properties);
+		DBeaverSQLFormatterConfiguration configuration = new DBeaverSQLFormatterConfiguration(properties);
 		sqlTokenizedFormatter = new SQLTokenizedFormatter(configuration);
 	}
 

File: lib/src/main/java/com/diffplug/spotless/sql/dbeaver/KeywordCase.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * @author Baptiste Mesta.
  */
-public enum KeywordCase {
+enum KeywordCase {
 	UPPER {
 		public String transform(String value) {
 			return value.toUpperCase(Locale.ENGLISH);

File: lib/src/main/java/com/diffplug/spotless/sql/dbeaver/SQLConstants.java
Patch:
@@ -20,7 +20,8 @@
  * DBeaver - Universal Database Manager
  * Copyright (C) 2010-2017 Serge Rider (serge@jkiss.org)
  *
- * SQL editor constants
+ * Based on SQLConstants from https://github.com/serge-rider/dbeaver,
+ * which itself is licensed under the Apache 2.0 license.
  */
 class SQLConstants {
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/EncodingTest.java
Patch:
@@ -78,10 +78,10 @@ public void globalIsRespectedButCanBeOverridden() throws Exception {
 				"}");
 		write("test.java", "µ");
 		write("utf32.encoded", LineEnding.UNIX, Charset.forName("UTF-32"), "µ");
-		Assert.assertEquals("µ\n", read("utf32.encoded", LineEnding.UNIX, Charset.forName("UTF-32")));
+		Assert.assertEquals("µ\n", read("utf32.encoded", Charset.forName("UTF-32")));
 
 		gradleRunner().withArguments("spotlessApply").build();
 		Assert.assertEquals("??\n", read("test.java"));
-		Assert.assertEquals("A\n", read("utf32.encoded", LineEnding.UNIX, Charset.forName("UTF-32")));
+		Assert.assertEquals("A\n", read("utf32.encoded", Charset.forName("UTF-32")));
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -183,7 +183,7 @@ public void performAction(IncrementalTaskInputs inputs) throws Exception {
 		if (getCacheFile().exists()) {
 			LastApply lastApply = SerializableMisc.fromFile(LastApply.class, getCacheFile());
 			for (File file : lastApply.changedFiles) {
-				if (!outOfDate.contains(file) && file.exists()) {
+				if (!outOfDate.contains(file) && file.exists() && Iterables.contains(target, file)) {
 					outOfDate.add(file);
 				}
 			}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -122,7 +122,7 @@ private static Project createProject(Consumer<SpotlessExtension> test) throws Ex
 		SpotlessPlugin plugin = project.getPlugins().apply(SpotlessPlugin.class);
 		// setup the plugin
 		test.accept(plugin.getExtension());
-		plugin.createTasks();
+		plugin.createTasks(project);
 		// return the configured plugin
 		return project;
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -111,7 +111,7 @@ public Object doCall(TaskExecutionGraph graph) {
 		Task clean = project.getTasks().getByName(BasePlugin.CLEAN_TASK_NAME);
 		clean.doLast(unused -> SpotlessCache.clear());
 		project.getTasks()
-				.matching(task -> task instanceof SpotlessTask)
+				.withType(SpotlessTask.class)
 				.all(task -> task.mustRunAfter(clean));
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -122,7 +122,7 @@ private static Project createProject(Consumer<SpotlessExtension> test) throws Ex
 		SpotlessPlugin plugin = project.getPlugins().apply(SpotlessPlugin.class);
 		// setup the plugin
 		test.accept(plugin.getExtension());
-		plugin.createTasks();
+		plugin.createTasks(project);
 		// return the configured plugin
 		return project;
 	}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -33,7 +33,6 @@
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
 import org.gradle.api.file.FileCollection;
-import org.gradle.api.internal.file.UnionFileCollection;
 
 import com.diffplug.spotless.FormatExceptionPolicyStrict;
 import com.diffplug.spotless.FormatterFunc;
@@ -144,9 +143,9 @@ public void target(Object... targets) {
 			if (Stream.of(targets).allMatch(o -> o instanceof String)) {
 				this.target = parseTarget(Arrays.asList(targets));
 			} else {
-				UnionFileCollection union = new UnionFileCollection();
+				FileCollection union = getProject().files();
 				for (Object target : targets) {
-					union.add(parseTarget(target));
+					union = union.plus(parseTarget(target));
 				}
 				this.target = union;
 			}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
-import org.gradle.api.internal.file.UnionFileCollection;
+import org.gradle.api.file.FileCollection;
 import org.gradle.api.plugins.JavaPluginConvention;
 import org.gradle.api.tasks.SourceSet;
 
@@ -154,9 +154,9 @@ protected void setupTask(SpotlessTask task) {
 			if (javaPlugin == null) {
 				throw new GradleException("You must apply the java plugin before the spotless plugin if you are using the java extension.");
 			}
-			UnionFileCollection union = new UnionFileCollection();
+			FileCollection union = getProject().files();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {
-				union.add(sourceSet.getAllJava());
+				union = union.plus(sourceSet.getAllJava());
 			}
 			target = union;
 		}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Objects;
 
 import org.gradle.api.GradleException;
-import org.gradle.api.internal.file.UnionFileCollection;
+import org.gradle.api.file.FileCollection;
 import org.gradle.api.plugins.JavaPluginConvention;
 import org.gradle.api.tasks.SourceSet;
 
@@ -59,9 +59,9 @@ protected void setupTask(SpotlessTask task) {
 			if (javaPlugin == null) {
 				throw new GradleException("You must either specify 'target' manually or apply a kotlin plugin.");
 			}
-			UnionFileCollection union = new UnionFileCollection();
+			FileCollection union = getProject().files();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {
-				union.add(sourceSet.getAllSource().filter(file -> {
+				union = union.plus(sourceSet.getAllSource().filter(file -> {
 					String name = file.getName();
 					return name.endsWith(".kt") || name.endsWith(".kts");
 				}));

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ScalaExtension.java
Patch:
@@ -21,7 +21,7 @@
 import javax.annotation.Nullable;
 
 import org.gradle.api.GradleException;
-import org.gradle.api.internal.file.UnionFileCollection;
+import org.gradle.api.file.FileCollection;
 import org.gradle.api.plugins.JavaPluginConvention;
 import org.gradle.api.tasks.SourceSet;
 
@@ -72,9 +72,9 @@ protected void setupTask(SpotlessTask task) {
 			if (javaPlugin == null) {
 				throw new GradleException("You must either specify 'target' manually or apply the 'scala' plugin.");
 			}
-			UnionFileCollection union = new UnionFileCollection();
+			FileCollection union = getProject().files();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {
-				union.add(sourceSet.getAllSource().filter(file -> {
+				union = union.plus(sourceSet.getAllSource().filter(file -> {
 					String name = file.getName();
 					return name.endsWith(".scala") || name.endsWith(".sc");
 				}));

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseFormatterStep.java
Patch:
@@ -34,7 +34,7 @@ public final class EclipseFormatterStep {
 	// prevent direct instantiation
 	private EclipseFormatterStep() {}
 
-	private static final String DEFAULT_VERSION = "4.6.3";
+	private static final String DEFAULT_VERSION = "4.7.1";
 	private static final String NAME = "eclipse formatter";
 	private static final String MAVEN_COORDINATE = "com.diffplug.spotless:spotless-ext-eclipse-jdt:";
 	private static final String FORMATTER_CLASS = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -25,8 +25,8 @@
 import com.diffplug.spotless.kotlin.KtLintStep;
 
 public class KotlinExtension extends FormatExtension {
-	// The delimiter has the '^' prepended to the regex where the pattern is compiled.
-	static final String LICENSE_HEADER_DELIMITER = "(package |@file)";
+	// '^' is prepended to the regex in LICENSE_HEADER_DELIMITER later in FormatExtension.licenseHeader(String, String)
+	private static final String LICENSE_HEADER_DELIMITER = "(package |@file)";
 	static final String NAME = "kotlin";
 
 	public KotlinExtension(SpotlessExtension rootExtension) {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinGradleExtension.java
Patch:
@@ -31,7 +31,7 @@ public KotlinGradleExtension(SpotlessExtension rootExtension) {
 	/** Adds the specified version of [ktlint](https://github.com/shyiko/ktlint). */
 	public void ktlint(String version) {
 		Objects.requireNonNull(version, "version");
-		addStep(KtLintStep.create(version, GradleProvisioner.fromProject(getProject())));
+		addStep(KtLintStep.createForScript(version, GradleProvisioner.fromProject(getProject())));
 	}
 
 	public void ktlint() {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -25,7 +25,7 @@
 import com.diffplug.spotless.kotlin.KtLintStep;
 
 public class KotlinExtension extends FormatExtension {
-	static final String NAME = "kotin";
+	static final String NAME = "kotlin";
 
 	public KotlinExtension(SpotlessExtension rootExtension) {
 		super(rootExtension);

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/EclipseFormatterStep.java
Patch:
@@ -34,7 +34,7 @@ public final class EclipseFormatterStep {
 	// prevent direct instantiation
 	private EclipseFormatterStep() {}
 
-	private static final String DEFAULT_VERSION = "4.6.1";
+	private static final String DEFAULT_VERSION = "4.6.3";
 	private static final String NAME = "eclipse formatter";
 	private static final String MAVEN_COORDINATE = "com.diffplug.spotless:spotless-ext-eclipse-jdt:";
 	private static final String FORMATTER_CLASS = "com.diffplug.gradle.spotless.java.eclipse.EclipseFormatterStepImpl";

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -151,7 +151,7 @@ public static List<File> check(File rootDir, File diagnoseDir, Formatter formatt
 				} else {
 					// if the input is resolvable, we'll use that to try again at
 					// determining if it's clean
-					paddedCellStep.set(problemFile, padded.steps().get(0));
+					paddedCellStep.set(problemFile, padded.canonical());
 					if (!paddedFormatter.isClean(problemFile)) {
 						stillFailing.add(problemFile);
 					}

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -151,7 +151,7 @@ public static List<File> check(File rootDir, File diagnoseDir, Formatter formatt
 				} else {
 					// if the input is resolvable, we'll use that to try again at
 					// determining if it's clean
-					paddedCellStep.set(problemFile, padded.steps().get(0));
+					paddedCellStep.set(problemFile, padded.canonical());
 					if (!paddedFormatter.isClean(problemFile)) {
 						stillFailing.add(problemFile);
 					}

File: lib/src/main/java/com/diffplug/spotless/FilterByFileFormatterStep.java
Patch:
@@ -36,6 +36,8 @@ public String getName() {
 
 	@Override
 	public @Nullable String format(String raw, File file) throws Exception {
+		Objects.requireNonNull(raw, "raw");
+		Objects.requireNonNull(file, "file");
 		if (filter.accept(file)) {
 			return delegateStep.format(raw, file);
 		} else {

File: lib/src/main/java/com/diffplug/spotless/FormatExceptionPolicy.java
Patch:
@@ -20,7 +20,7 @@
 /** A policy for handling exceptions in the format. */
 public interface FormatExceptionPolicy extends Serializable, NoLambda {
 	/** Called for every error in the formatter. */
-	void handleError(Throwable e, FormatterStep step, String relativePath);
+	public void handleError(Throwable e, FormatterStep step, String relativePath);
 
 	/**
 	 * Returns a byte array representation of everything inside this `FormatExceptionPolicy`.

File: lib/src/main/java/com/diffplug/spotless/FormatterStep.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.File;
 import java.io.Serializable;
+import java.util.Objects;
 
 import javax.annotation.Nullable;
 
@@ -108,6 +109,7 @@ public static <State extends Serializable> FormatterStep create(
 			String name,
 			State state,
 			ThrowingEx.Function<State, FormatterFunc> stateToFormatter) {
+		Objects.requireNonNull(state, "state");
 		return createLazy(name, () -> state, stateToFormatter);
 	}
 
@@ -137,6 +139,7 @@ public static FormatterStep createNeverUpToDateLazy(
 	public static FormatterStep createNeverUpToDate(
 			String name,
 			FormatterFunc function) {
+		Objects.requireNonNull(function, "function");
 		return createNeverUpToDateLazy(name, () -> function);
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/ThrowingEx.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.diffplug.spotless;
 
-import static java.util.Objects.requireNonNull;
-
 /**
  * Basic functional interfaces which throw exception, along with
  * static helper methods for calling them.
@@ -28,16 +26,19 @@ public final class ThrowingEx {
 	private ThrowingEx() {}
 
 	/** A function that can throw any exception. */
+	@FunctionalInterface
 	public interface Function<T, R> {
 		R apply(T input) throws Exception;
 	}
 
 	/** A supplier that can throw any exception. */
+	@FunctionalInterface
 	public interface Supplier<T> {
 		T get() throws Exception;
 	}
 
 	/** A runnable that can throw any exception. */
+	@FunctionalInterface
 	public interface Runnable {
 		void run() throws Exception;
 	}
@@ -79,7 +80,6 @@ public static <T, R> java.util.function.Function<T, R> wrap(ThrowingEx.Function<
 	 * {@link WrappedAsRuntimeException} and returned.
 	 */
 	public static RuntimeException asRuntime(Exception e) {
-		requireNonNull(e);
 		if (e instanceof RuntimeException) {
 			return (RuntimeException) e;
 		} else {

File: lib/src/main/java/com/diffplug/spotless/generic/IndentStep.java
Patch:
@@ -16,6 +16,7 @@
 package com.diffplug.spotless.generic;
 
 import java.io.Serializable;
+import java.util.Objects;
 
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
@@ -40,6 +41,7 @@ public FormatterStep create(int numSpacesPerTab) {
 
 	/** Creates a step which will indent with the given type of whitespace, converting between tabs and spaces at the given ratio. */
 	public static FormatterStep create(Type type, int numSpacesPerTab) {
+		Objects.requireNonNull(type, "type");
 		return FormatterStep.create("indentWith" + type.tabSpace("Tabs", "Spaces"),
 				new State(type, numSpacesPerTab), State::toFormatter);
 	}

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.io.Serializable;
 import java.lang.reflect.Method;
+import java.util.Objects;
 
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
@@ -52,6 +53,8 @@ public static FormatterStep create(Provisioner provisioner) {
 
 	/** Creates a step which formats everything - code, import order, and unused imports. */
 	public static FormatterStep create(String version, Provisioner provisioner) {
+		Objects.requireNonNull(version, "version");
+		Objects.requireNonNull(provisioner, "provisioner");
 		return FormatterStep.createLazy(NAME,
 				() -> new State(NAME, version, provisioner),
 				State::createFormat);

File: lib/src/main/java/com/diffplug/spotless/java/RemoveUnusedImportsStep.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.diffplug.spotless.java;
 
+import java.util.Objects;
+
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.Provisioner;
 
@@ -26,6 +28,7 @@ private RemoveUnusedImportsStep() {}
 	static final String NAME = "removeUnusedImports";
 
 	public static FormatterStep create(Provisioner provisioner) {
+		Objects.requireNonNull(provisioner, "provisioner");
 		return FormatterStep.createLazy(NAME,
 				() -> new GoogleJavaFormatStep.State(NAME, GoogleJavaFormatStep.defaultVersion(), provisioner),
 				GoogleJavaFormatStep.State::createRemoveUnusedImportsOnly);

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -21,6 +21,7 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.Collections;
+import java.util.Objects;
 
 import com.diffplug.spotless.FormatterFunc;
 import com.diffplug.spotless.FormatterStep;
@@ -42,6 +43,8 @@ public static FormatterStep create(Provisioner provisioner) {
 	}
 
 	public static FormatterStep create(String version, Provisioner provisioner) {
+		Objects.requireNonNull(version, "version");
+		Objects.requireNonNull(provisioner, "provisioner");
 		return FormatterStep.createLazy(NAME,
 				() -> new State(version, provisioner),
 				State::createFormat);

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.diffplug.gradle.spotless;
 
+import java.util.Objects;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -29,6 +30,7 @@ public class GradleProvisioner {
 	private GradleProvisioner() {}
 
 	public static Provisioner fromProject(Project project) {
+		Objects.requireNonNull(project);
 		return mavenCoords -> {
 			try {
 				Dependency[] deps = mavenCoords.stream()

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/KotlinExtension.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.diffplug.gradle.spotless;
 
+import java.util.Objects;
+
 import org.gradle.api.GradleException;
 import org.gradle.api.internal.file.UnionFileCollection;
 import org.gradle.api.plugins.JavaPluginConvention;
@@ -39,6 +41,7 @@ public void licenseHeaderFile(Object licenseHeaderFile) {
 
 	/** Adds the specified version of [ktlint](https://github.com/shyiko/ktlint). */
 	public void ktlint(String version) {
+		Objects.requireNonNull(version);
 		addStep(KtLintStep.create(version, GradleProvisioner.fromProject(getProject())));
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/PaddedCellGradle.java
Patch:
@@ -49,7 +49,8 @@
  * to {@link #check(SpotlessTask, Formatter, List)}.  If there were no problem files, then `paddedCell`
  * is no longer necessary, so users might as well turn it off, so we give that info as a warning.
  */
-// TODO: Cleanup this javadoc
+// TODO: Cleanup this javadoc - it's a copy of the javadoc of PaddedCellBulk, so some info
+// is out-of-date (like the link to #anyMisbehave(Formatter, List))
 class PaddedCellGradle {
 	/** URL to a page which describes the padded cell thing. */
 	private static final String URL = "https://github.com/diffplug/spotless/blob/master/PADDEDCELL.md";

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ScalaExtension.java
Patch:
@@ -54,7 +54,7 @@ public class ScalaFmtConfig {
 		}
 
 		public void configFile(Object configFile) {
-			this.configFile = configFile;
+			this.configFile = Objects.requireNonNull(configFile);
 			replaceStep(createStep());
 		}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GroovyDefaultTargetTest.java
Patch:
@@ -22,8 +22,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.diffplug.gradle.spotless.GradleIntegrationTest;
-
 public class GroovyDefaultTargetTest extends GradleIntegrationTest {
 
 	private final String HEADER = "//My tests header";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/JavaDefaultTargetTest.java
Patch:
@@ -20,8 +20,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.diffplug.gradle.spotless.GradleIntegrationTest;
-
 public class JavaDefaultTargetTest extends GradleIntegrationTest {
 	@Test
 	public void integration() throws IOException {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/Mocks.java
Patch:
@@ -21,10 +21,10 @@
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
 import org.gradle.api.tasks.incremental.InputFileDetails;
 
-public final class Mocks {
+final class Mocks {
 	private Mocks() {}
 
-	public static IncrementalTaskInputs mockIncrementalTaskInputs(Iterable<File> target) {
+	static IncrementalTaskInputs mockIncrementalTaskInputs(Iterable<File> target) {
 		return new IncrementalTaskInputs() {
 			@Override
 			public boolean isIncremental() {

File: testlib/src/main/java/com/diffplug/spotless/ResourceHarness.java
Patch:
@@ -57,7 +57,7 @@ public class ResourceHarness {
 		protected void failed(Throwable e, Description description) {
 			if (e instanceof ComparisonFailure) {
 				ComparisonFailure failure = (ComparisonFailure) e;
-				String msg = new String();
+				String msg = "";
 				msg += String.format("Output:  %n%1$s%n%2$s%n%1$s%n", COMPARISON_SEPARATOR, failure.getActual());
 				msg += String.format("Expected:%n%1$s%n%2$s%n%1$s%n", COMPARISON_SEPARATOR, failure.getExpected());
 				logFailure(msg, description);
@@ -151,7 +151,7 @@ protected static String getTestResource(String filename) throws IOException {
 
 	/** Returns Files (in a temporary folder) which has the contents of the given file from the src/test/resources directory. */
 	protected List<File> createTestFiles(String... filenames) throws IOException {
-		List<File> files = new ArrayList<File>(filenames.length);
+		List<File> files = new ArrayList<>(filenames.length);
 		for (String filename : filenames) {
 			files.add(createTestFile(filename));
 		}

File: testlib/src/test/java/com/diffplug/spotless/FileSignatureTest.java
Patch:
@@ -50,7 +50,7 @@ public void testFromSet() throws IOException {
 	}
 
 	private List<File> getTestFiles(final String[] paths) throws IOException {
-		final List<File> result = new ArrayList<File>(paths.length);
+		final List<File> result = new ArrayList<>(paths.length);
 		for (String path : paths) {
 			result.add(createTestFile(path, ""));
 		}

File: testlib/src/test/java/com/diffplug/spotless/LazyForwardingEqualityTest.java
Patch:
@@ -15,12 +15,11 @@
  */
 package com.diffplug.spotless;
 
-import static com.diffplug.common.testing.SerializableTester.*;
+import static com.diffplug.common.testing.SerializableTester.reserializeAndAssert;
 
 import org.junit.Test;
 
 import com.diffplug.common.testing.EqualsTester;
-import com.diffplug.spotless.LazyForwardingEquality;
 
 @SuppressWarnings("serial")
 public class LazyForwardingEqualityTest {

File: testlib/src/test/java/com/diffplug/spotless/ProvisionerTest.java
Patch:
@@ -22,8 +22,6 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 
-import com.diffplug.spotless.Provisioner;
-
 public class ProvisionerTest {
 	@Test
 	public void testManipulation() {

File: testlib/src/test/java/com/diffplug/spotless/generic/IndentStepTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.SerializableEqualityTester;
-import com.diffplug.spotless.generic.IndentStep;
 
 public class IndentStepTest extends ResourceHarness {
 	@Test

File: testlib/src/test/java/com/diffplug/spotless/generic/LicenseHeaderStepTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.ResourceHarness;
 import com.diffplug.spotless.SerializableEqualityTester;
-import com.diffplug.spotless.generic.LicenseHeaderStep;
 
 public class LicenseHeaderStepTest extends ResourceHarness {
 	private static final String KEY_LICENSE = "license/TestLicense";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/Mocks.java
Patch:
@@ -21,10 +21,10 @@
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
 import org.gradle.api.tasks.incremental.InputFileDetails;
 
-public final class Mocks {
+final class Mocks {
 	private Mocks() {}
 
-	public static IncrementalTaskInputs mockIncrementalTaskInputs(Iterable<File> target) {
+	static IncrementalTaskInputs mockIncrementalTaskInputs(Iterable<File> target) {
 		return new IncrementalTaskInputs() {
 			@Override
 			public boolean isIncremental() {

File: testlib/src/main/java/com/diffplug/spotless/ResourceHarness.java
Patch:
@@ -57,7 +57,7 @@ public class ResourceHarness {
 		protected void failed(Throwable e, Description description) {
 			if (e instanceof ComparisonFailure) {
 				ComparisonFailure failure = (ComparisonFailure) e;
-				String msg = new String();
+				String msg = "";
 				msg += String.format("Output:  %n%1$s%n%2$s%n%1$s%n", COMPARISON_SEPARATOR, failure.getActual());
 				msg += String.format("Expected:%n%1$s%n%2$s%n%1$s%n", COMPARISON_SEPARATOR, failure.getExpected());
 				logFailure(msg, description);

File: testlib/src/test/java/com/diffplug/spotless/FileSignatureTest.java
Patch:
@@ -50,7 +50,7 @@ public void testFromSet() throws IOException {
 	}
 
 	private List<File> getTestFiles(final String[] paths) throws IOException {
-		final List<File> result = new ArrayList<File>(paths.length);
+		final List<File> result = new ArrayList<>(paths.length);
 		for (String path : paths) {
 			result.add(createTestFile(path, ""));
 		}

File: testlib/src/test/java/com/diffplug/spotless/FormatterPropertiesTest.java
Patch:
@@ -69,7 +69,7 @@ public void differntPropertyFileTypes() throws IOException {
 
 	@Test
 	public void multiplePropertyFiles() throws IOException {
-		LinkedList<File> settingsFiles = new LinkedList<File>();
+		LinkedList<File> settingsFiles = new LinkedList<>();
 		for (String settingsResource : VALID_SETTINGS_RESOURCES) {
 			File settingsFile = createTestFile(settingsResource);
 			settingsFiles.add(settingsFile);

File: testlib/src/test/java/com/diffplug/spotless/LazyForwardingEqualityTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.diffplug.spotless;
 
-import static com.diffplug.common.testing.SerializableTester.*;
+import static com.diffplug.common.testing.SerializableTester.reserializeAndAssert;
 
 import org.junit.Test;
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -28,9 +28,9 @@ private GradleProvisioner() {}
 	public static Provisioner fromProject(Project project) {
 		return mavenCoords -> {
 			Dependency[] deps = mavenCoords.stream()
-					.map(project.getDependencies()::create)
+					.map(project.getBuildscript().getDependencies()::create)
 					.toArray(Dependency[]::new);
-			Configuration config = project.getConfigurations().detachedConfiguration(deps);
+			Configuration config = project.getBuildscript().getConfigurations().detachedConfiguration(deps);
 			config.setDescription(mavenCoords.toString());
 			return config.resolve();
 		};

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FreshMarkExtensionTest.java
Patch:
@@ -24,11 +24,11 @@ public class FreshMarkExtensionTest extends GradleIntegrationTest {
 	@Test
 	public void integration() throws IOException {
 		write("build.gradle",
+				"buildscript { repositories { mavenCentral() } }",
 				"plugins {",
 				"    id 'java'",
 				"    id 'com.diffplug.gradle.spotless'",
 				"}",
-				"repositories { mavenCentral() }",
 				"spotless {",
 				"    freshmark {",
 				"        properties {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GoogleJavaFormatIntegrationTest.java
Patch:
@@ -24,10 +24,10 @@ public class GoogleJavaFormatIntegrationTest extends GradleIntegrationTest {
 	@Test
 	public void integration() throws IOException {
 		write("build.gradle",
+				"buildscript { repositories { mavenCentral() } }",
 				"plugins {",
 				"    id 'com.diffplug.gradle.spotless'",
 				"}",
-				"repositories { mavenCentral() }",
 				"",
 				"spotless {",
 				"    java {",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/JavaDefaultTargetTest.java
Patch:
@@ -26,10 +26,10 @@ public class JavaDefaultTargetTest extends GradleIntegrationTest {
 	@Test
 	public void integration() throws IOException {
 		write("build.gradle",
+				"buildscript { repositories { mavenCentral() } }",
 				"plugins {",
 				"    id 'com.diffplug.gradle.spotless'",
 				"}",
-				"repositories { mavenCentral() }",
 				"",
 				"apply plugin: 'groovy'",
 				"",

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ScalaExtensionTest.java
Patch:
@@ -24,11 +24,11 @@ public class ScalaExtensionTest extends GradleIntegrationTest {
 	@Test
 	public void integration() throws IOException {
 		write("build.gradle",
+				"buildscript { repositories { mavenCentral() } }",
 				"plugins {",
 				"    id 'com.diffplug.gradle.spotless'",
 				"}",
 				"apply plugin: 'scala'",
-				"repositories { mavenCentral() }",
 				"spotless {",
 				"    scala {",
 				"        scalafmt().configFile('scalafmt.conf')",

File: lib/src/main/java/com/diffplug/spotless/SerializableFileFilter.java
Patch:
@@ -20,8 +20,8 @@
 
 /** A file filter with full support for serialization. */
 public interface SerializableFileFilter extends FileFilter, Serializable, NoLambda {
-	/** Creates a FileFilter which will accept all files except files with the given name. */
-	public static SerializableFileFilter skipFilesNamed(String name) {
-		return new SerializableFileFilterImpl.SkipFilesNamed(name);
+	/** Creates a FileFilter which will accept all files except files with the given name(s). */
+	public static SerializableFileFilter skipFilesNamed(String... names) {
+		return new SerializableFileFilterImpl.SkipFilesNamed(names);
 	}
 }

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -39,7 +39,7 @@ public JavaExtension(SpotlessExtension rootExtension) {
 
 	// If this constant changes, don't forget to change the similarly-named one in
 	// testlib/src/test/java/com/diffplug/spotless/generic/LicenseHeaderStepTest.java as well
-	private static final String LICENSE_HEADER_DELIMITER = "package ";
+	static final String LICENSE_HEADER_DELIMITER = "package ";
 
 	public void licenseHeader(String licenseHeader) {
 		licenseHeader(licenseHeader, LICENSE_HEADER_DELIMITER);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GroovyDefaultTargetTest.java
Patch:
@@ -39,7 +39,7 @@ public void excludeJava() throws IOException {
 	}
 
 	private void testIncludeExcludeOption(boolean excludeJava) throws IOException {
-		String excludeStatement = excludeJava ? "excludeJava" : "";
+		String excludeStatement = excludeJava ? "excludeJava()" : "";
 		write("build.gradle",
 				"plugins {",
 				"    id 'com.diffplug.gradle.spotless'",

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -212,7 +212,7 @@ public String computeLineEndings(String unix, File file) {
 	 * The input must have unix line endings, and the output
 	 * is guaranteed to also have unix line endings.
 	 */
-	public String compute(String unix, File file) throws Error {
+	public String compute(String unix, File file) {
 		for (FormatterStep step : steps) {
 			try {
 				String formatted = step.format(unix, file);

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -118,6 +118,7 @@ public static List<File> check(File rootDir, File diagnoseDir, Formatter formatt
 				.encoding(formatter.getEncoding())
 				.rootDir(formatter.getRootDir())
 				.steps(Collections.singletonList(paddedCellStep))
+				.exceptionPolicy(formatter.getExceptionPolicy())
 				.build();
 
 		// empty out the diagnose folder

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -61,10 +61,10 @@ public void eclipseFormatFile(Object eclipseFormatFile) {
 		eclipseFormatFile(EclipseFormatterStep.defaultVersion(), eclipseFormatFile);
 	}
 
-	public void eclipseFormatFile(String eclipseVersion, Object... eclipseFormatFiles) {
+	public void eclipseFormatFile(String eclipseVersion, Object eclipseFormatFile) {
 		Project project = getProject();
 		addStep(EclipseFormatterStep.create(eclipseVersion,
-				project.files(eclipseFormatFiles).getFiles(),
+				project.files(eclipseFormatFile).getFiles(),
 				GradleProvisioner.fromProject(project)));
 	}
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -152,6 +152,7 @@ public void performAction(IncrementalTaskInputs inputs) throws Exception {
 				.encoding(Charset.forName(encoding))
 				.rootDir(getProject().getProjectDir().toPath())
 				.steps(steps)
+				.exceptionPolicy(exceptionPolicy)
 				.build();
 		// find the outOfDate files
 		List<File> outOfDate = new ArrayList<>();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GroovyExtension.java
Patch:
@@ -31,8 +31,8 @@
 import com.diffplug.spotless.java.ImportOrderStep;
 
 public class GroovyExtension extends FormatExtension {
-	public static final String NAME = "groovy";
-	public static final boolean EXCLUDE_JAVA_DEFAULT = false;
+	static final String NAME = "groovy";
+	private static final boolean EXCLUDE_JAVA_DEFAULT = false;
 	private boolean excludeJava;
 
 	public GroovyExtension(SpotlessExtension rootExtension) {

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -212,7 +212,7 @@ public String computeLineEndings(String unix, File file) {
 	 * The input must have unix line endings, and the output
 	 * is guaranteed to also have unix line endings.
 	 */
-	public String compute(String unix, File file) throws Error {
+	public String compute(String unix, File file) {
 		for (FormatterStep step : steps) {
 			try {
 				String formatted = step.format(unix, file);

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -118,6 +118,7 @@ public static List<File> check(File rootDir, File diagnoseDir, Formatter formatt
 				.encoding(formatter.getEncoding())
 				.rootDir(formatter.getRootDir())
 				.steps(Collections.singletonList(paddedCellStep))
+				.exceptionPolicy(formatter.getExceptionPolicy())
 				.build();
 
 		// empty out the diagnose folder

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessTask.java
Patch:
@@ -152,6 +152,7 @@ public void performAction(IncrementalTaskInputs inputs) throws Exception {
 				.encoding(Charset.forName(encoding))
 				.rootDir(getProject().getProjectDir().toPath())
 				.steps(steps)
+				.exceptionPolicy(exceptionPolicy)
 				.build();
 		// find the outOfDate files
 		List<File> outOfDate = new ArrayList<>();

File: lib/src/main/java/com/diffplug/spotless/SerializableFileFilter.java
Patch:
@@ -20,8 +20,8 @@
 
 /** A file filter with full support for serialization. */
 public interface SerializableFileFilter extends FileFilter, Serializable, NoLambda {
-	/** Creates a FileFilter which will accept all files except files with the given name. */
-	public static SerializableFileFilter skipFilesNamed(String name) {
-		return new SerializableFileFilterImpl.SkipFilesNamed(name);
+	/** Creates a FileFilter which will accept all files except files with the given name(s). */
+	public static SerializableFileFilter skipFilesNamed(String... names) {
+		return new SerializableFileFilterImpl.SkipFilesNamed(names);
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/kotlin/KtLintStep.java
Patch:
@@ -33,7 +33,7 @@ public class KtLintStep {
 	// prevent direct instantiation
 	private KtLintStep() {}
 
-	private static final String DEFAULT_VERSION = "0.3.1";
+	private static final String DEFAULT_VERSION = "0.6.1";
 	static final String NAME = "ktlint";
 	static final String MAVEN_COORDINATE = "com.github.shyiko:ktlint:";
 
@@ -67,7 +67,7 @@ FormatterFunc createFormat() throws Exception {
 			// String KtLint::format(String input, Iterable<RuleSet> rules, Function2 errorCallback)
 
 			// first, we get the standard rules
-			Class<?> standardRuleSetProviderClass = classLoader.loadClass("com.gihub.shyiko.ktlint.ruleset.standard.StandardRuleSetProvider");
+			Class<?> standardRuleSetProviderClass = classLoader.loadClass("com.github.shyiko.ktlint.ruleset.standard.StandardRuleSetProvider");
 			Object standardRuleSet = standardRuleSetProviderClass.getMethod("get").invoke(standardRuleSetProviderClass.newInstance());
 			Iterable<?> ruleSets = Collections.singletonList(standardRuleSet);
 

File: lib/src/main/java/com/diffplug/spotless/java/GoogleJavaFormatStep.java
Patch:
@@ -30,7 +30,7 @@ public class GoogleJavaFormatStep {
 	// prevent direct instantiation
 	private GoogleJavaFormatStep() {}
 
-	private static final String DEFAULT_VERSION = "1.1";
+	private static final String DEFAULT_VERSION = "1.2";
 	static final String NAME = "google-java-format";
 	static final String MAVEN_COORDINATE = "com.google.googlejavaformat:google-java-format:";
 	static final String FORMATTER_CLASS = "com.google.googlejavaformat.java.Formatter";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/EncodingTest.java
Patch:
@@ -36,7 +36,7 @@ public void defaultIsUtf8() throws Exception {
 				"    }",
 				"}");
 		write("test.java", "µ");
-		gradleRunner().withArguments("spotlessApply").forwardOutput().build();
+		gradleRunner().withArguments("spotlessApply").build();
 		Assert.assertEquals("A\n", read("test.java"));
 	}
 

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationTest.java
Patch:
@@ -37,7 +37,7 @@
 
 public class GradleIntegrationTest extends ResourceHarness {
 	protected GradleRunner gradleRunner() throws IOException {
-		return GradleRunner.create().withProjectDir(rootFolder()).withPluginClasspath().forwardOutput();
+		return GradleRunner.create().withProjectDir(rootFolder()).withPluginClasspath();
 	}
 
 	/** Dumps the complete file contents of the folder to the console. */

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/JavaDefaultTargetTest.java
Patch:
@@ -46,7 +46,7 @@ public void integration() throws IOException {
 		// write appends a line ending so re-read to see what groovy currently looks like
 		String groovyInput = read("src/main/groovy/test.groovy");
 
-		gradleRunner().forwardOutput().withArguments("spotlessApply").build();
+		gradleRunner().withArguments("spotlessApply").build();
 
 		String result = read("src/main/java/test.java");
 		String output = getTestResource("java/googlejavaformat/JavaCodeFormatted.test");

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GoogleJavaFormatIntegrationTest.java
Patch:
@@ -21,6 +21,9 @@
 import org.junit.Test;
 
 public class GoogleJavaFormatIntegrationTest extends GradleIntegrationTest {
+	// TODO: This test throws an exception because google-java-format-1.0 doesn't have
+	// RemoveUnusedImports.java (only 1.1+ does), but despite that, the test passes!
+	// Discover why this test passes and/or fix it or remove it.
 	@Test
 	public void integration() throws IOException {
 		write("build.gradle",

File: testlib/src/test/java/com/diffplug/spotless/java/RemoveUnusedImportsStepTest.java
Patch:
@@ -28,6 +28,8 @@ public void behavior() throws Exception {
 		FormatterStep step = RemoveUnusedImportsStep.create(TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
 				.testResource("java/removeunusedimports/JavaCodeUnformatted.test", "java/removeunusedimports/JavaCodeFormatted.test")
+				.testResource("java/removeunusedimports/JavaCodeWithLicenseUnformatted.test", "java/removeunusedimports/JavaCodeWithLicenseFormatted.test")
+				.testResource("java/removeunusedimports/JavaCodeWithLicensePackageUnformatted.test", "java/removeunusedimports/JavaCodeWithLicensePackageFormatted.test")
 				.testResource("java/removeunusedimports/JavaCodeWithPackageUnformatted.test", "java/removeunusedimports/JavaCodeWithPackageFormatted.test");
 	}
 

File: testlib/src/test/java/com/diffplug/spotless/java/RemoveUnusedImportsStepTest.java
Patch:
@@ -27,8 +27,8 @@ public class RemoveUnusedImportsStepTest {
 	public void behavior() throws Exception {
 		FormatterStep step = RemoveUnusedImportsStep.create(TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
-				.testResource("java/removeunusedimport/JavaCodeUnformatted.test", "java/removeunusedimport/JavaCodeFormatted.test")
-				.testResource("java/removeunusedimport/JavaCodeWithPackageUnformatted.test", "java/removeunusedimport/JavaCodeWithPackageFormatted.test");
+				.testResource("java/removeunusedimports/JavaCodeUnformatted.test", "java/removeunusedimports/JavaCodeFormatted.test")
+				.testResource("java/removeunusedimports/JavaCodeWithPackageUnformatted.test", "java/removeunusedimports/JavaCodeWithPackageFormatted.test");
 	}
 
 	@Test

File: testlib/src/test/java/com/diffplug/spotless/java/RemoveUnusedImportsStepTest.java
Patch:
@@ -27,8 +27,8 @@ public class RemoveUnusedImportsStepTest {
 	public void behavior() throws Exception {
 		FormatterStep step = RemoveUnusedImportsStep.create(TestProvisioner.mavenCentral());
 		StepHarness.forStep(step)
-				.testResource("java/googlejavaformat/JavaCodeUnformatted.test", "java/googlejavaformat/JavaCodeFormatted.test")
-				.testResource("java/googlejavaformat/JavaCodeWithPackageUnformatted.test", "java/googlejavaformat/JavaCodeWithPackageFormatted.test");
+				.testResource("java/removeunusedimport/JavaCodeUnformatted.test", "java/removeunusedimport/JavaCodeFormatted.test")
+				.testResource("java/removeunusedimport/JavaCodeWithPackageUnformatted.test", "java/removeunusedimport/JavaCodeWithPackageFormatted.test");
 	}
 
 	@Test

File: lib/src/main/java/com/diffplug/spotless/Formatter.java
Patch:
@@ -136,8 +136,7 @@ public void applyTo(File file) throws IOException {
 	 * Returns null if the file was already clean, or the
 	 * formatted result with unix newlines if it was not.
 	 */
-	@Nullable
-	public String applyToAndReturnResultIfDirty(File file) throws IOException {
+	public @Nullable String applyToAndReturnResultIfDirty(File file) throws IOException {
 		byte[] rawBytes = Files.readAllBytes(file.toPath());
 		String raw = new String(rawBytes, encoding);
 		String rawUnix = LineEnding.toUnix(raw);

File: lib/src/main/java/com/diffplug/spotless/LazyForwardingEquality.java
Patch:
@@ -34,8 +34,7 @@
 public abstract class LazyForwardingEquality<T extends Serializable> implements Serializable {
 	private static final long serialVersionUID = 1L;
 
-	/** Null indicates that the state has not yet been set. */
-	@Nullable
+	/** Lazily initialized - null indicates that the state has not yet been set. */
 	private transient volatile T state;
 
 	/**

File: lib/src/main/java/com/diffplug/spotless/LineEnding.java
Patch:
@@ -63,8 +63,7 @@ public Policy createPolicy(File projectDir, Supplier<Iterable<File>> toFormat) {
 		}
 	}
 
-	@Nullable
-	private static volatile BiFunction<File, Supplier<Iterable<File>>, Policy> gitAttributesPolicyCreator;
+	private static volatile @Nullable BiFunction<File, Supplier<Iterable<File>>, Policy> gitAttributesPolicyCreator;
 
 	// @formatter:off
 	/** Should use {@link #createPolicy(File, Supplier)} instead, but this will work iff its a path-independent LineEnding policy. */

File: lib/src/main/java/com/diffplug/spotless/FilterByFileFormatterStep.java
Patch:
@@ -25,8 +25,8 @@ final class FilterByFileFormatterStep implements FormatterStep {
 	private final SerializableFileFilter filter;
 
 	FilterByFileFormatterStep(FormatterStep delegateStep, SerializableFileFilter filter) {
-		this.delegateStep = delegateStep;
-		this.filter = filter;
+		this.delegateStep = Objects.requireNonNull(delegateStep);
+		this.filter = Objects.requireNonNull(filter);
 	}
 
 	@Override

File: testlib/src/test/java/com/diffplug/spotless/java/ImportOrderStepTest.java
Patch:
@@ -17,9 +17,10 @@
 
 import java.util.Arrays;
 
-import org.gradle.internal.impldep.com.google.common.collect.ImmutableList;
 import org.junit.Test;
 
+import com.google.common.collect.ImmutableList;
+
 import com.diffplug.spotless.FormatterStep;
 import com.diffplug.spotless.NonSerializableList;
 import com.diffplug.spotless.ResourceHarness;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.diffplug.common.base.Errors;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import groovy.lang.Closure;
 
 public class SpotlessPlugin implements Plugin<Project> {
@@ -77,7 +78,7 @@ void createTasks() throws Exception {
 				private static final long serialVersionUID = 1L;
 
 				// called by gradle
-				@SuppressWarnings("unused")
+				@SuppressFBWarnings("UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS")
 				public Object doCall(TaskExecutionGraph graph) {
 					if (graph.hasTask(checkTask)) {
 						spotlessTask.setCheck();

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/JavaExtension.java
Patch:
@@ -90,7 +90,7 @@ protected void setupTask(BaseFormatTask task) {
 			}
 			UnionFileCollection union = new UnionFileCollection();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {
-				union.add(sourceSet.getJava());
+				union.add(sourceSet.getAllJava());
 			}
 			target = union;
 		}

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -81,7 +81,7 @@ protected void setupTask(FormatTask task) throws Exception {
 			}
 			UnionFileCollection union = new UnionFileCollection();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {
-				union.add(sourceSet.getJava());
+				union.add(sourceSet.getAllJava());
 			}
 			target = union;
 		}

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -81,7 +81,7 @@ protected void setupTask(FormatTask task) throws Exception {
 			}
 			UnionFileCollection union = new UnionFileCollection();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {
-				union.add(sourceSet.getJava());
+				union.add(sourceSet.getAllJava());
 			}
 			target = union;
 		}

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -373,7 +373,7 @@ private static List<AttributesRule> parseRules(@Nullable File file) {
 	}
 
 	/** Parses an attribute value from a list of rules, returning null if there is no match for the given key. */
-	private static String findAttributeInRules(String subpath, boolean isFolder, String key, List<AttributesRule> rules) {
+	private static @Nullable String findAttributeInRules(String subpath, boolean isFolder, String key, List<AttributesRule> rules) {
 		String value = null;
 		// later rules override earlier ones
 		for (AttributesRule rule : rules) {

File: lib-extra/src/main/java/com/diffplug/spotless/extra/java/package-info.java
Patch:
@@ -1,4 +1,7 @@
 @ParametersAreNonnullByDefault
+@ReturnValuesAreNonnullByDefault
 package com.diffplug.spotless.extra.java;
 
+import com.diffplug.spotless.annotations.ReturnValuesAreNonnullByDefault;
+
 import javax.annotation.ParametersAreNonnullByDefault;

File: lib-extra/src/main/java/com/diffplug/spotless/extra/package-info.java
Patch:
@@ -1,4 +1,7 @@
 @ParametersAreNonnullByDefault
+@ReturnValuesAreNonnullByDefault
 package com.diffplug.spotless.extra;
 
+import com.diffplug.spotless.annotations.ReturnValuesAreNonnullByDefault;
+
 import javax.annotation.ParametersAreNonnullByDefault;

File: lib/src/main/java/com/diffplug/spotless/LineEnding.java
Patch:
@@ -58,6 +58,7 @@ public Policy createPolicy(File projectDir, Supplier<Iterable<File>> toFormat) {
 					throw new IllegalStateException("LineEnding.GIT_ATTRIBUTES requires the spotless-lib-extra library, but it is not on the classpath", e);
 				}
 			}
+			// gitAttributesPolicyCreator will always be nonnull at this point
 			return gitAttributesPolicyCreator.apply(projectDir, toFormat);
 		}
 	}

File: lib/src/main/java/com/diffplug/spotless/generic/package-info.java
Patch:
@@ -1,4 +1,7 @@
 @ParametersAreNonnullByDefault
+@ReturnValuesAreNonnullByDefault
 package com.diffplug.spotless.generic;
 
+import com.diffplug.spotless.annotations.ReturnValuesAreNonnullByDefault;
+
 import javax.annotation.ParametersAreNonnullByDefault;

File: lib/src/main/java/com/diffplug/spotless/java/ImportSorterImpl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.diffplug.spotless.java;
 
+import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -99,7 +100,7 @@ private void filterMatchingImports(List<String> imports) {
 		notMatching.addAll(allImportOrderItems);
 	}
 
-	private String getBestMatchingImportOrderItem(String anImport) {
+	private @Nullable String getBestMatchingImportOrderItem(String anImport) {
 		String matchingImport = null;
 		for (String orderItem : allImportOrderItems) {
 			if (anImport.startsWith(orderItem)) {
@@ -229,7 +230,7 @@ private List<String> getResult() {
 		return strings;
 	}
 
-	private static String betterMatching(String order1, String order2, String anImport) {
+	private static @Nullable String betterMatching(String order1, String order2, String anImport) {
 		if (order1.equals(order2)) {
 			throw new IllegalArgumentException("orders are same");
 		}

File: lib/src/main/java/com/diffplug/spotless/java/package-info.java
Patch:
@@ -1,4 +1,7 @@
 @ParametersAreNonnullByDefault
+@ReturnValuesAreNonnullByDefault
 package com.diffplug.spotless.java;
 
+import com.diffplug.spotless.annotations.ReturnValuesAreNonnullByDefault;
+
 import javax.annotation.ParametersAreNonnullByDefault;

File: lib/src/main/java/com/diffplug/spotless/package-info.java
Patch:
@@ -1,4 +1,7 @@
 @ParametersAreNonnullByDefault
+@ReturnValuesAreNonnullByDefault
 package com.diffplug.spotless;
 
+import com.diffplug.spotless.annotations.ReturnValuesAreNonnullByDefault;
+
 import javax.annotation.ParametersAreNonnullByDefault;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/freshmark/FreshMarkExtensionTest.java
Patch:
@@ -41,7 +41,7 @@ public void integration() throws IOException {
 				"}");
 		String unformatted = getTestResource("freshmark/FreshMarkUnformatted.test");
 		write("README.md", unformatted);
-		gradleRunner().withArguments("spotlessApply", "--quiet").forwardOutput().build();
+		gradleRunner().withArguments("spotlessApply").build();
 		String result = read("README.md");
 		String formatted = getTestResource("freshmark/FreshMarkFormatted.test");
 		Assert.assertEquals(formatted, result);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/LicenseHeaderStepTest.java
Patch:
@@ -45,7 +45,7 @@ public void efficient() throws Throwable {
 		String alreadyCorrect = "LicenseHeader\ncontentstart";
 		Assert.assertEquals(alreadyCorrect, step.format(alreadyCorrect));
 		// If no change is required, it should return the exact same string for efficiency reasons
-		Assert.assertTrue(alreadyCorrect == step.format(alreadyCorrect));
+		Assert.assertSame(alreadyCorrect, step.format(alreadyCorrect));
 	}
 
 	@Test
@@ -54,7 +54,7 @@ public void sanitized() throws Throwable {
 		LicenseHeaderStep step = new LicenseHeaderStep("LicenseHeader", "contentstart");
 		String alreadyCorrect = "LicenseHeader\ncontentstart";
 		Assert.assertEquals(alreadyCorrect, step.format(alreadyCorrect));
-		Assert.assertTrue(alreadyCorrect == step.format(alreadyCorrect));
+		Assert.assertSame(alreadyCorrect, step.format(alreadyCorrect));
 	}
 
 	@Test
@@ -63,6 +63,6 @@ public void sanitizerDoesntGoTooFar() throws Throwable {
 		LicenseHeaderStep step = new LicenseHeaderStep("LicenseHeader\n\n", "contentstart");
 		String alreadyCorrect = "LicenseHeader\n\ncontentstart";
 		Assert.assertEquals(alreadyCorrect, step.format(alreadyCorrect));
-		Assert.assertTrue(alreadyCorrect == step.format(alreadyCorrect));
+		Assert.assertSame(alreadyCorrect, step.format(alreadyCorrect));
 	}
 }

File: lib/src/main/java/com/diffplug/spotless/LineEnding.java
Patch:
@@ -54,16 +54,16 @@ public Policy createPolicy(File projectDir, Supplier<Iterable<File>> toFormat) {
 					Class<?> clazz = Class.forName("com.diffplug.spotless.extra.GitAttributesLineEndings");
 					Method method = clazz.getMethod("create", File.class, Supplier.class);
 					gitAttributesPolicyCreator = (proj, target) -> ThrowingEx.get(() -> (Policy) method.invoke(null, proj, target));
-				} catch (Exception e) {
-					throw new IllegalStateException("LineEnding.GIT_ATTRIBUTES requires the spotless-lib-extra library, but it is not on the classpath");
+				} catch (ClassNotFoundException | NoSuchMethodException | SecurityException e) {
+					throw new IllegalStateException("LineEnding.GIT_ATTRIBUTES requires the spotless-lib-extra library, but it is not on the classpath", e);
 				}
 			}
 			return gitAttributesPolicyCreator.apply(projectDir, toFormat);
 		}
 	}
 
 	@Nullable
-	private static BiFunction<File, Supplier<Iterable<File>>, Policy> gitAttributesPolicyCreator;
+	private static volatile BiFunction<File, Supplier<Iterable<File>>, Policy> gitAttributesPolicyCreator;
 
 	// @formatter:off
 	/** Should use {@link #createPolicy(File, Supplier)} instead, but this will work iff its a path-independent LineEnding policy. */

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -97,7 +97,7 @@ public void testStepApply() throws IOException {
 		File testFile = createTestFile("testFile", "apple");
 		applyTask.setTarget(Collections.singleton(testFile));
 
-		checkTask.addStep(FormatterStep.createNeverUpToDate("double-p", content -> content.replace("pp", "p")));
+		applyTask.addStep(FormatterStep.createNeverUpToDate("double-p", content -> content.replace("pp", "p")));
 		applyTask.execute();
 
 		assertFileContent("aple", testFile);

File: lib-extra/src/main/java/com/diffplug/spotless/extra/GitAttributesLineEndings.java
Patch:
@@ -124,6 +124,7 @@ static class FileState implements Serializable {
 		/** The signature of *all* of the files below. */
 		final FileSignature signature;
 
+		@SuppressFBWarnings("SIC_INNER_SHOULD_BE_STATIC_ANON")
 		FileState(File projectDir, Iterable<File> toFormat) throws IOException {
 			Objects.requireNonNull(projectDir);
 			Objects.requireNonNull(toFormat);

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -106,7 +106,7 @@ public static boolean anyMisbehave(Formatter formatter, List<File> problemFiles,
 	@SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
 	public static List<File> check(File rootDir, File diagnoseDir, Formatter formatter, List<File> problemFiles) throws IOException {
 		// "fake" Formatter which can use the already-computed result of a PaddedCell as
-		Step paddedCellStep = new Step();
+		FakeStep paddedCellStep = new FakeStep();
 		Formatter paddedFormatter = Formatter.builder()
 				.lineEndingsPolicy(formatter.lineEndingsPolicy)
 				.encoding(formatter.encoding)
@@ -159,7 +159,8 @@ public static List<File> check(File rootDir, File diagnoseDir, Formatter formatt
 
 	/** Helper for check(). */
 	@SuppressWarnings("serial")
-	static class Step implements FormatterStep {
+	@SuppressFBWarnings("SE_NO_SERIALVERSIONID")
+	static class FakeStep implements FormatterStep {
 		private File file;
 		private String formatted;
 

File: lib/src/main/java/com/diffplug/spotless/FormatterFunc.java
Patch:
@@ -27,7 +27,7 @@ public static Closeable of(AutoCloseable closeable, FormatterFunc function) {
 			return new Closeable() {
 				@Override
 				public void close() {
-					Errors.rethrow().run(closeable::close);
+					Throwing.run(closeable::close);
 				}
 
 				@Override

File: lib/src/main/java/com/diffplug/spotless/JarState.java
Patch:
@@ -69,7 +69,7 @@ public JarState(String mavenCoordinate, Provisioner provisioner) throws IOExcept
 	}
 
 	private URL[] jarUrls() {
-		return jars.stream().map(Errors.rethrow().wrapFunction(file -> file.toURI().toURL())).toArray(URL[]::new);
+		return jars.stream().map(Throwing.wrap(file -> file.toURI().toURL())).toArray(URL[]::new);
 	}
 
 	@SuppressFBWarnings("DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED")

File: lib/src/main/java/com/diffplug/spotless/LazyForwardingEquality.java
Patch:
@@ -58,7 +58,7 @@ protected final T key() {
 					try {
 						key = calculateKey();
 					} catch (Throwable e) {
-						throw Errors.asRuntime(e);
+						throw Throwing.asRuntime(e);
 					}
 				}
 			}
@@ -105,7 +105,7 @@ static byte[] toBytes(Serializable obj) {
 		try (ObjectOutputStream objectOutput = new ObjectOutputStream(byteOutput)) {
 			objectOutput.writeObject(obj);
 		} catch (IOException e) {
-			throw Errors.asRuntime(e);
+			throw Throwing.asRuntime(e);
 		}
 		return byteOutput.toByteArray();
 	}

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -77,7 +77,7 @@ public List<String> steps() {
 	 *
 	 */
 	public static PaddedCell check(Formatter formatter, File file) {
-		byte[] rawBytes = Errors.rethrow().get(() -> Files.readAllBytes(file.toPath()));
+		byte[] rawBytes = Throwing.get(() -> Files.readAllBytes(file.toPath()));
 		String raw = new String(rawBytes, formatter.encoding);
 		String original = LineEnding.toUnix(raw);
 		return check(formatter, file, original, MAX_CYCLE);

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
@@ -234,7 +235,7 @@ public FileVisitResult visitFileFailed(final Path file, final IOException e) {
 					}
 
 					private FileVisitResult handleException(final IOException e) {
-						Errors.log().accept(e);
+						logger.log(Level.SEVERE, e.getMessage(), e);
 						return FileVisitResult.TERMINATE;
 					}
 

File: lib/src/main/java/com/diffplug/spotless/FormatterFunc.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.diffplug.spotless;
 
-import com.diffplug.common.base.Errors;
-
 /** A `Function<String, String>` which can throw an exception. */
 public interface FormatterFunc extends Throwing.Function<String, String> {
 	/** A `Function<String, String>` whose implementation requires a resource which should be released when the function is no longer needed. */

File: lib/src/main/java/com/diffplug/spotless/JarState.java
Patch:
@@ -26,8 +26,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.diffplug.common.base.Errors;
-
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**

File: lib/src/main/java/com/diffplug/spotless/LazyForwardingEquality.java
Patch:
@@ -27,8 +27,6 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-import com.diffplug.common.base.Errors;
-
 /**
  * Implements equality, hashcode, and serialization entirely in terms
  * of a lazily-computed key.  The key's serialized form is used to implement

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -33,8 +33,6 @@
 import java.util.Objects;
 import java.util.logging.Logger;
 
-import com.diffplug.common.base.Errors;
-
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -49,13 +49,13 @@
  * If they encounter a scenario where `spotlessCheck` fails after calling `spotlessApply`, then they would
  * justifiably be frustrated.  Luckily, every time `spotlessCheck` fails, it passes the failed files to
  * {@link #anyMisbehave(Formatter, List)}, which checks to see if any of the rules are causing a cycle
- * or some other kind of mischief.  If they are, it throws a special error message,
- * {@link #youShouldTurnOnPaddedCell(CheckFormatTask)} which tells them to turn on paddedCell.
+ * or some other kind of mischief.  If they are, it can give the user a special error message instructing
+ * them to turn on paddedCell.
  *
  * ### spotlessCheck with paddedCell on
  *
  * Spotless check behaves as normal, finding a list of problem files, but then passes that list
- * to {@link #check(CheckFormatTask, Formatter, List)}.  If there were no problem files, then `paddedCell`
+ * to {@link #check(File, File, Formatter, List)}.  If there were no problem files, then `paddedCell`
  * is no longer necessary, so users might as well turn it off, so we give that info as a warning.
  */
 public class PaddedCellBulk {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -44,7 +44,7 @@ private static String slashify(String input) {
 	}
 
 	private class Bundle {
-		Project project = ProjectBuilder.builder().withProjectDir(folder.getRoot()).build();
+		Project project = ProjectBuilder.builder().withProjectDir(rootFolder()).build();
 		File file;
 		CheckFormatTask check;
 		ApplyFormatTask apply;
@@ -153,8 +153,8 @@ public void paddedCellCheckFailureFiles() throws Throwable {
 				"test.diverge.diverge9");
 	}
 
-	private void assertFolderContents(String subfolderName, String... files) {
-		File subfolder = new File(folder.getRoot(), subfolderName);
+	private void assertFolderContents(String subfolderName, String... files) throws IOException {
+		File subfolder = new File(rootFolder(), subfolderName);
 		Assert.assertTrue(subfolder.isDirectory());
 		String asList = Arrays.stream(subfolder.list()).sorted().collect(Collectors.joining("\n"));
 		Assert.assertEquals(StringPrinter.buildStringFromLines(files).trim(), asList);

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/java/GoogleJavaFormatTest.java
Patch:
@@ -65,8 +65,8 @@ public void integration() throws IOException {
 
 	/** This passes, and confirms that the steps we're creating have proper equality. */
 	@Test
-	public void testStepEquality() {
-		Project project = ProjectBuilder.builder().withProjectDir(folder.getRoot()).build();
+	public void testStepEquality() throws IOException {
+		Project project = ProjectBuilder.builder().withProjectDir(rootFolder()).build();
 		project.getRepositories().mavenCentral();
 		// copied from JavaExtension.googleJavaFormat
 		Function<String, FormatterStep> create = version -> GoogleJavaFormat.createStep(version, GradleProvisioner.fromProject(project));

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -35,6 +35,8 @@
 
 import com.diffplug.common.base.Errors;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Incorporates the PaddedCell machinery into broader apply / check usage.
  *
@@ -102,6 +104,7 @@ public static boolean anyMisbehave(Formatter formatter, List<File> problemFiles,
 	 * @param problemFiles	The files with which we have a problem.
 	 * @return	A list of files which are failing because of paddedCell problems, but could be fixed. (specifically, the files for which spotlessApply would be effective)
 	 */
+	@SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
 	public static List<File> check(File rootDir, File diagnoseDir, Formatter formatter, List<File> problemFiles) throws IOException {
 		// "fake" Formatter which can use the already-computed result of a PaddedCell as
 		Step paddedCellStep = new Step();

File: lib/src/main/java/com/diffplug/spotless/FileSignature.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.io.IOException;

File: lib/src/main/java/com/diffplug/spotless/FilterByFileFormatterStep.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.util.Objects;

File: lib/src/main/java/com/diffplug/spotless/FormatterFunc.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import com.diffplug.common.base.Errors;
 import com.diffplug.common.base.Throwing;

File: lib/src/main/java/com/diffplug/spotless/GitAttributesLineEndings.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.io.FileInputStream;

File: lib/src/main/java/com/diffplug/spotless/JarState.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.io.IOException;

File: lib/src/main/java/com/diffplug/spotless/LazyForwardingEquality.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: lib/src/main/java/com/diffplug/spotless/LineEnding.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.io.Serializable;

File: lib/src/main/java/com/diffplug/spotless/PaddedCell.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.nio.file.Files;
@@ -34,7 +34,7 @@
  *
  * See {@link #check(Formatter, File)} as the entry point to this class.
  */
-class PaddedCell {
+public class PaddedCell {
 	/** The kind of result. */
 	public enum Type {
 		CONVERGE, CYCLE, DIVERGE;

File: lib/src/main/java/com/diffplug/spotless/PaddedCellBulk.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.io.IOException;
@@ -108,7 +108,7 @@ public static List<File> check(File rootDir, File diagnoseDir, Formatter formatt
 		Formatter paddedFormatter = Formatter.builder()
 				.lineEndingsPolicy(formatter.lineEndingsPolicy)
 				.encoding(formatter.encoding)
-				.projectDirectory(formatter.projectDirectory)
+				.rootDir(formatter.rootDir)
 				.steps(Collections.singletonList(paddedCellStep))
 				.build();
 

File: lib/src/main/java/com/diffplug/spotless/Provisioner.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.util.Arrays;

File: lib/src/main/java/com/diffplug/spotless/SerializableFileFilter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.FileFilter;
 import java.io.Serializable;

File: lib/src/main/java/com/diffplug/spotless/SerializableFileFilterImpl.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.util.Objects;

File: lib/src/test/java/com/diffplug/spotless/GitAttributesTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.io.IOException;

File: lib/src/test/java/com/diffplug/spotless/LazyForwardingEqualityTest.java
Patch:
@@ -13,13 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import static com.diffplug.common.testing.SerializableTester.*;
 
 import org.junit.Test;
 
 import com.diffplug.common.testing.EqualsTester;
+import com.diffplug.spotless.LazyForwardingEquality;
 
 @SuppressWarnings("serial")
 public class LazyForwardingEqualityTest {

File: lib/src/test/java/com/diffplug/spotless/ProvisionerTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.diffplug.gradle.spotless;
+package com.diffplug.spotless;
 
 import java.io.File;
 import java.util.Arrays;
@@ -22,6 +22,8 @@
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 
+import com.diffplug.spotless.Provisioner;
+
 public class ProvisionerTest {
 	@Test
 	public void testManipulation() {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/ApplyFormatTask.java
Patch:
@@ -19,6 +19,9 @@
 
 import org.gradle.api.tasks.TaskAction;
 
+import com.diffplug.spotless.Formatter;
+import com.diffplug.spotless.PaddedCellBulk;
+
 public class ApplyFormatTask extends BaseFormatTask {
 	@TaskAction
 	public void apply() throws Exception {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/CheckFormatTask.java
Patch:
@@ -26,6 +26,9 @@
 import org.gradle.api.tasks.TaskAction;
 import org.gradle.api.tasks.incremental.IncrementalTaskInputs;
 
+import com.diffplug.spotless.Formatter;
+import com.diffplug.spotless.PaddedCellBulk;
+
 public class CheckFormatTask extends BaseFormatTask {
 	@TaskAction
 	public void check(IncrementalTaskInputs inputs) throws Exception {

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/GradleProvisioner.java
Patch:
@@ -19,6 +19,8 @@
 import org.gradle.api.artifacts.Configuration;
 import org.gradle.api.artifacts.Dependency;
 
+import com.diffplug.spotless.Provisioner;
+
 /** Gradle integration for Provisioner. */
 public class GradleProvisioner {
 	private GradleProvisioner() {}

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/LicenseHeaderStep.java
Patch:
@@ -26,6 +26,8 @@
 
 import org.gradle.api.GradleException;
 
+import com.diffplug.spotless.LineEnding;
+
 /** Prefixes a license header before the package statement. */
 public class LicenseHeaderStep implements Serializable {
 	private static final long serialVersionUID = 1L;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/PaddedCellGradle.java
Patch:
@@ -23,6 +23,8 @@
 import org.gradle.api.GradleException;
 
 import com.diffplug.common.base.StringPrinter;
+import com.diffplug.spotless.Formatter;
+import com.diffplug.spotless.PaddedCellBulk;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.diffplug.gradle.spotless.freshmark.FreshMarkExtension;
 import com.diffplug.gradle.spotless.java.JavaExtension;
+import com.diffplug.spotless.LineEnding;
 
 public class SpotlessExtension {
 	final Project project;

File: plugin-gradle/src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -26,8 +26,8 @@
 import com.diffplug.gradle.spotless.FormatExtension;
 import com.diffplug.gradle.spotless.GradleProvisioner;
 import com.diffplug.gradle.spotless.LicenseHeaderStep;
-import com.diffplug.gradle.spotless.SerializableFileFilter;
 import com.diffplug.gradle.spotless.SpotlessExtension;
+import com.diffplug.spotless.SerializableFileFilter;
 
 public class JavaExtension extends FormatExtension {
 	public static final String NAME = "java";

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.Test;
 
 import com.diffplug.common.base.StringPrinter;
+import com.diffplug.spotless.LineEnding;
 
 public class DiffMessageFormatterTest extends ResourceHarness {
 	private CheckFormatTask create(File... files) {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/EncodingTest.java
Patch:
@@ -20,6 +20,8 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.diffplug.spotless.LineEnding;
+
 public class EncodingTest extends GradleIntegrationTest {
 	@Test
 	public void defaultIsUtf8() throws Exception {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ErrorShouldRethrow.java
Patch:
@@ -27,6 +27,7 @@
 import com.diffplug.common.base.CharMatcher;
 import com.diffplug.common.base.Splitter;
 import com.diffplug.common.base.StringPrinter;
+import com.diffplug.spotless.LineEnding;
 
 /** Tests the desired behavior from https://github.com/diffplug/spotless/issues/46. */
 public class ErrorShouldRethrow extends GradleIntegrationTest {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -28,6 +28,8 @@
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import com.diffplug.spotless.LineEnding;
+
 @RunWith(Enclosed.class)
 public class FormatTaskTest extends ResourceHarness {
 	private CheckFormatTask checkTask;

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/GradleIntegrationTest.java
Patch:
@@ -36,6 +36,7 @@
 import com.diffplug.common.base.StringPrinter;
 import com.diffplug.common.tree.TreeDef;
 import com.diffplug.common.tree.TreeStream;
+import com.diffplug.spotless.LineEnding;
 
 public class GradleIntegrationTest extends ResourceHarness {
 	protected File write(String path, String... lines) throws IOException {

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/NeverUpToDate.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.Random;
 
 import com.diffplug.common.base.Throwing;
+import com.diffplug.spotless.FormatterStep;
+import com.diffplug.spotless.LazyForwardingEquality;
 
 /**
  * Creates trivial tasks which are always out-of-date,

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/ResourceHarness.java
Patch:
@@ -38,6 +38,7 @@
 import com.diffplug.common.base.Throwing;
 import com.diffplug.common.collect.Iterables;
 import com.diffplug.common.io.Resources;
+import com.diffplug.spotless.LineEnding;
 
 public class ResourceHarness {
 	@Rule

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/java/GoogleJavaFormatTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.Test;
 
 import com.diffplug.gradle.spotless.CheckFormatTask;
-import com.diffplug.gradle.spotless.FormatterStep;
 import com.diffplug.gradle.spotless.GradleIntegrationTest;
 import com.diffplug.gradle.spotless.GradleProvisioner;
+import com.diffplug.spotless.FormatterStep;
 
 public class GoogleJavaFormatTest extends GradleIntegrationTest {
 	@Test

File: plugin-maven/src/main/java/com/diffplug/gradle/spotless/MavenProvisioner.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.diffplug.gradle.spotless;
 
+import com.diffplug.spotless.Provisioner;
+
 /** Maven integration for Provisioner. */
 public class MavenProvisioner {
 	private MavenProvisioner() {}

File: plugin-gradle/src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -126,7 +126,7 @@ private static Project createProject(Consumer<SpotlessExtension> test) throws Ex
 	static void runWithTestKit(Type type) throws Exception {
 		GradleRunner.create()
 				.withPluginClasspath()
-				.withProjectDir(new File(StandardSystemProperty.USER_DIR.value()))
+				.withProjectDir(new File(StandardSystemProperty.USER_DIR.value()).getParentFile())
 				.withArguments("-b", "spotlessSelf.gradle", "spotless" + type.checkApply("Check", "Apply"), "--stacktrace")
 				.forwardOutput()
 				.build();

File: src/main/java/com/diffplug/gradle/spotless/FormatterStep.java
Patch:
@@ -120,8 +120,9 @@ public static <Key extends Serializable> FormatterStep create(
 	/**
 	 * @param name
 	 *             The name of the formatter step
-	 * @param key
-	 *             If the rule has any state, this key must contain all of it
+	 * @param keySupplier
+	 *             If the rule has any state, this supplier will calculate it lazily, and the result
+	 *             will be passed to keyToFormatter
 	 * @param keyToFormatter
 	 *             A pure function which generates a closeable formatting function using
 	 *             only the state supplied by key and nowhere else.

File: src/main/java/com/diffplug/gradle/spotless/FormatterStepStandardImpl.java
Patch:
@@ -22,15 +22,17 @@
 import com.diffplug.common.base.Throwing;
 import com.diffplug.gradle.spotless.FormatterStep.Strict;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Standard implementation of FormatExtension which cleanly enforces
  * separation of serializable configuration and a pure format function.
  *
  * Not an inner-class of FormatterStep so that it can stay entirely private
  * from the API.
  */
+@SuppressFBWarnings("SE_TRANSIENT_FIELD_NOT_RESTORED")
 final class FormatterStepStandardImpl<Key extends Serializable> extends Strict<Key> {
-
 	private static final long serialVersionUID = 1L;
 
 	/** Transient because only the key matters. */

File: src/main/java/com/diffplug/gradle/spotless/LineEnding.java
Patch:
@@ -45,7 +45,7 @@ public Policy createPolicy(File projectDir, Supplier<Iterable<File>> toFormat) {
 		}
 	}
 
-	/** Should use {@link #createPolicy(File, Iterable)} instead, but this will work iff its a path-independent LineEnding policy. */
+	/** Should use {@link #createPolicy(File, Supplier)} instead, but this will work iff its a path-independent LineEnding policy. */
 	public Policy createPolicy() {
 		switch (this) {
 		case PLATFORM_NATIVE:

File: src/test/java/com/diffplug/gradle/spotless/CustomLazyGroovyTest.java
Patch:
@@ -33,6 +33,7 @@ public void integration() throws IOException {
 				"        customLazyGroovy('lowercase') {",
 				"             return { str -> str.toLowerCase(Locale.US) }",
 				"        }",
+				"        bumpThisNumberIfACustomRuleChanges(1)",
 				"    }",
 				"}");
 		write("README.md", "ABC");

File: src/test/java/com/diffplug/gradle/spotless/ErrorShouldRethrow.java
Patch:
@@ -86,6 +86,7 @@ public void noSwearingPassesIfNoSwears() throws Exception {
 				"                 throw new AssertionError('No swearing!');",
 				"             }",
 				"        }",
+				"        bumpThisNumberIfACustomRuleChanges(1)",
 				"    }",
 				"}");
 		write("README.md", "This code is fun.");

File: src/main/java/com/diffplug/gradle/spotless/FilterByFileFormatterStep.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.diffplug.gradle.spotless;
 
-import com.diffplug.gradle.spotless.fi.SerializablePredicate;
-
 import java.io.File;
 import java.util.Objects;
 
+import com.diffplug.gradle.spotless.fi.SerializablePredicate;
+
 final class FilterByFileFormatterStep implements FormatterStep {
 	private final FormatterStep delegateStep;
 	private final SerializablePredicate<File> filter;

File: src/test/java/com/diffplug/gradle/spotless/PaddedCellTaskTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Locale;
 import java.util.stream.Collectors;
 
-import com.diffplug.gradle.spotless.fi.SerializableThrowingFunction;
 import org.assertj.core.api.Assertions;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
@@ -34,6 +33,7 @@
 import com.diffplug.common.base.StandardSystemProperty;
 import com.diffplug.common.base.StringPrinter;
 import com.diffplug.common.base.Throwing;
+import com.diffplug.gradle.spotless.fi.SerializableThrowingFunction;
 
 public class PaddedCellTaskTest extends ResourceHarness {
 	private static final boolean IS_WIN = StandardSystemProperty.OS_NAME.value().toLowerCase(Locale.US).contains("win");

File: src/test/java/com/diffplug/gradle/spotless/PaddedCellTest.java
Patch:
@@ -27,13 +27,13 @@
 import java.util.List;
 import java.util.function.BiConsumer;
 
-import com.diffplug.gradle.spotless.fi.SerializableThrowingFunction;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
 
 import com.diffplug.common.base.Throwing;
+import com.diffplug.gradle.spotless.fi.SerializableThrowingFunction;
 
 public class PaddedCellTest {
 	@Rule

File: src/main/java/com/diffplug/gradle/spotless/ApplyFormatTask.java
Patch:
@@ -23,10 +23,10 @@ public class ApplyFormatTask extends BaseFormatTask {
 	@TaskAction
 	public void apply() throws Exception {
 		Formatter formatter = buildFormatter();
-		for (File file : target) {
+		for (File file : getTarget()) {
 			getLogger().debug("Applying format to " + file);
 			// keep track of the problem toFormat
-			if (paddedCell) {
+			if (isPaddedCell()) {
 				PaddedCellTaskMisc.apply(formatter, file);
 			} else {
 				formatter.applyFormat(file);

File: src/main/java/com/diffplug/gradle/spotless/DiffMessageFormatter.java
Patch:
@@ -127,7 +127,7 @@ private static String diff(CheckFormatTask task, Formatter formatter, File file)
 		String raw = new String(Files.readAllBytes(file.toPath()), formatter.encoding);
 		String rawUnix = LineEnding.toUnix(raw);
 		String formattedUnix;
-		if (task.paddedCell) {
+		if (task.isPaddedCell()) {
 			formattedUnix = PaddedCell.check(formatter, file, rawUnix).canonical();
 		} else {
 			formattedUnix = formatter.applySteps(rawUnix, file);

File: src/main/java/com/diffplug/gradle/spotless/LineEnding.java
Patch:
@@ -16,6 +16,7 @@
 package com.diffplug.gradle.spotless;
 
 import java.io.File;
+import java.io.Serializable;
 
 import com.diffplug.common.base.StandardSystemProperty;
 
@@ -76,7 +77,7 @@ public String str() {
 	private static final String _platformNative = StandardSystemProperty.LINE_SEPARATOR.value();
 
 	/** A policy for line endings which can vary based on the specific file being requested. */
-	public interface Policy {
+	public interface Policy extends Serializable {
 		/** Returns the line ending appropriate for the given file. */
 		String getEndingFor(File file);
 

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -16,8 +16,10 @@
 package com.diffplug.gradle.spotless.java;
 
 import java.io.File;
+import java.io.Serializable;
 import java.util.Collections;
 import java.util.List;
+import java.util.function.Predicate;
 
 import org.gradle.api.GradleException;
 import org.gradle.api.internal.file.UnionFileCollection;

File: src/test/java/com/diffplug/gradle/spotless/DiffMessageFormatterTest.java
Patch:
@@ -36,8 +36,8 @@ private CheckFormatTask create(File... files) {
 	private CheckFormatTask create(List<File> files) {
 		Project project = ProjectBuilder.builder().withProjectDir(folder.getRoot()).build();
 		CheckFormatTask task = project.getTasks().create("underTest", CheckFormatTask.class);
-		task.lineEndingsPolicy = LineEnding.UNIX.createPolicy();
-		task.target = files;
+		task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
+		task.setTarget(files);
 		return task;
 	}
 
@@ -70,7 +70,7 @@ public void lineEndingProblem() throws Exception {
 	@Test
 	public void whitespaceProblem() throws Exception {
 		CheckFormatTask task = create(createTestFile("testFile", "A \nB\t\nC  \n"));
-		task.steps.add(NonUpToDateCheckingTasks.create("trimTrailing", input -> {
+		task.addStep(NonUpToDateCheckingTasks.create("trimTrailing", input -> {
 			Pattern pattern = Pattern.compile("[ \t]+$", Pattern.UNIX_LINES | Pattern.MULTILINE);
 			return pattern.matcher(input).replaceAll("");
 		}));

File: src/test/java/com/diffplug/gradle/spotless/LicenseHeaderStepTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.diffplug.gradle.spotless.LicenseHeaderStep;
 import com.diffplug.gradle.spotless.java.JavaExtension;
 
 public class LicenseHeaderStepTest extends ResourceHarness {

File: src/test/java/com/diffplug/gradle/spotless/ResourceHarness.java
Patch:
@@ -109,12 +109,12 @@ protected void assertTask(Consumer<FormatExtension> test, String before, String
 		// create the task
 		ApplyFormatTask task = createApplyTask(test);
 		// force unix line endings, since we're passing in raw strings
-		task.lineEndingsPolicy = LineEnding.UNIX.createPolicy();
+		task.setLineEndingsPolicy(LineEnding.UNIX.createPolicy());
 		// create the test file
 		File testFile = folder.newFile();
 		Files.write(testFile.toPath(), before.getBytes(StandardCharsets.UTF_8));
 		// set the task to use this test file
-		task.target = Collections.singleton(testFile);
+		task.setTarget(Collections.singleton(testFile));
 		// run the task
 		task.apply();
 		// check what the task did

File: src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -42,7 +42,7 @@ public void runAllTasks(Project project) {
 						.filter(task -> task instanceof CheckFormatTask)
 						.map(task -> (CheckFormatTask) task)
 						.forEach(task -> Errors.rethrow().run(() -> {
-							IncrementalTaskInputs inputs = Mocks.mockIncrementalTaskInputs(task.target);
+							IncrementalTaskInputs inputs = Mocks.mockIncrementalTaskInputs(task.getTarget());
 							task.check(inputs);
 						}));
 			}

File: src/test/java/com/diffplug/gradle/spotless/java/GoogleJavaFormatStepTest.java
Patch:
@@ -100,7 +100,7 @@ public void testTaskEquality() throws Exception {
 				java.googleJavaFormat("1.1");
 			});
 		});
-		Assertions.assertThat(checks1_0a.steps).isEqualTo(checks1_0b.steps);
-		Assertions.assertThat(checks1_0a.steps).isNotEqualTo(checks1_1.steps);
+		Assertions.assertThat(checks1_0a.getSteps()).isEqualTo(checks1_0b.getSteps());
+		Assertions.assertThat(checks1_0a.getSteps()).isNotEqualTo(checks1_1.getSteps());
 	}
 }

File: src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -70,9 +70,9 @@ public void testStepCheckFail() throws IOException {
 		checkTask.steps.add(NonUpToDateCheckingTasks.create("double-p", content -> content.replace("pp", "p")));
 
 		String diff = String.join("\n",
-				"      @@ -1 +1 @@",
-				"      -apple",
-				"      +aple");
+				"        @@ -1 +1 @@",
+				"        -apple",
+				"        +aple");
 		Assertions.assertThatThrownBy(() -> checkTask.execute()).hasStackTraceContaining(diff);
 
 		assertFileContent("apple", testFile);

File: src/main/java/com/diffplug/gradle/spotless/java/GoogleJavaFormat.java
Patch:
@@ -32,7 +32,6 @@ class GoogleJavaFormat {
 	static final String FORMATTER_METHOD = "formatSource";
 
 	/** Returns a function which will call the google-java-format tool. */
-	@SuppressFBWarnings("DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED")
 	static Throwing.Specific.Function<String, String, Exception> createRule(JarState state) throws Exception {
 		URLClassLoader classLoader = state.openClassLoader();
 		// TODO: dispose the classloader when the function

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -75,10 +75,10 @@ public void googleJavaFormat() {
 	 */
 	public void googleJavaFormat(String version) {
 		addStep(FormatterStep.create(GoogleJavaFormat.NAME,
-				NoKey.VALUE,
+				version,
 				(key, input) -> {
 					try {
-						return GoogleJavaFormat.createRule(version, getProject()).apply(input);
+						return GoogleJavaFormat.createRule(key, getProject()).apply(input);
 					} catch (Exception e) {
 						throw Errors.asRuntime(e);
 					}

File: src/main/java/com/diffplug/gradle/spotless/LazyForwardingEquality.java
Patch:
@@ -36,7 +36,7 @@
  */
 public abstract class LazyForwardingEquality<T extends Serializable> implements Serializable {
 	private static final long serialVersionUID = 1L;
-  
+
 	/** Null indicates that the key has not yet been set. */
 	@Nullable
 	private transient volatile T key;

File: src/test/java/com/diffplug/gradle/spotless/SelfTest.java
Patch:
@@ -40,7 +40,7 @@ public void runAllTasks(Project project) {
 				project.getTasks().stream()
 						.filter(task -> task instanceof CheckFormatTask)
 						.map(task -> (CheckFormatTask) task)
-						.forEach(task -> Errors.rethrow().wrap(task::run).run());
+						.forEach(task -> Errors.rethrow().run(task::run));
 			}
 
 			@Override
@@ -54,7 +54,7 @@ public void runAllTasks(Project project) {
 				project.getTasks().stream()
 						.filter(task -> task instanceof ApplyFormatTask)
 						.map(task -> (ApplyFormatTask) task)
-						.forEach(task -> Errors.rethrow().wrap(task::run).run());
+						.forEach(task -> Errors.rethrow().run(task::run));
 			}
 
 			@Override

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -181,10 +181,11 @@ public void bumpThisNumberIfACustomRuleChanges(int number) {
 
 	static class NeverUpToDateBetweenRuns extends LazyForwardingEquality<Integer> {
 		private static final long serialVersionUID = 1L;
+		private static final Random RANDOM = new Random();
 
 		@Override
 		protected Integer calculateKey() throws Exception {
-			return new Random().nextInt();
+			return RANDOM.nextInt();
 		}
 	}
 

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -17,14 +17,12 @@
 
 import java.util.List;
 
-import com.diffplug.gradle.spotless.ApplyFormatTask;
-import com.diffplug.gradle.spotless.BaseFormatTask;
-import com.diffplug.gradle.spotless.CheckFormatTask;
 import org.gradle.api.GradleException;
 import org.gradle.api.internal.file.UnionFileCollection;
 import org.gradle.api.plugins.JavaPluginConvention;
 import org.gradle.api.tasks.SourceSet;
 
+import com.diffplug.gradle.spotless.BaseFormatTask;
 import com.diffplug.gradle.spotless.FormatExtension;
 import com.diffplug.gradle.spotless.LicenseHeaderStep;
 import com.diffplug.gradle.spotless.SpotlessExtension;

File: src/main/java/com/diffplug/gradle/spotless/DiffMessageFormatter.java
Patch:
@@ -65,7 +65,7 @@ private DiffMessageFormatter(FormatTask task, Formatter formatter, List<File> pr
 		if (problemIter.hasNext()) {
 			int remainingFiles = problemFiles.size() - problemIter.nextIndex();
 			if (remainingFiles >= MAX_FILES_TO_LIST) {
-				buffer.append("Violations also present in " + remainingFiles + " other files.\n");
+				buffer.append("Violations also present in ").append(remainingFiles).append(" other files.\n");
 			} else {
 				buffer.append("Violations also present in:\n");
 				while (problemIter.hasNext()) {

File: src/main/java/com/diffplug/gradle/spotless/PaddedCell.java
Patch:
@@ -60,7 +60,7 @@ public File file() {
 		return file;
 	}
 
-	/** Returns the type of the result (either {@link Cycle}, {@link Converge}, or {@link Diverge}). */
+	/** Returns the type of the result (either {@link Type#CONVERGE}, {@link Type#CYCLE}, or {@link Type#DIVERGE}). */
 	public Type type() {
 		return type;
 	}

File: src/main/java/com/diffplug/gradle/spotless/java/GoogleJavaFormat.java
Patch:
@@ -56,7 +56,7 @@ static Throwing.Function<String, String> createRule(String version, Project proj
 			throw e;
 		}
 		URL[] jarUrls = jars.stream().map(Errors.rethrow().wrapFunction(
-				file -> file.toURI().toURL())).toArray(size -> new URL[size]);
+				file -> file.toURI().toURL())).toArray(URL[]::new);
 		URLClassLoader classLoader = new URLClassLoader(jarUrls);
 		// TODO: dispose the classloader when the function
 		// that we return gets garbage-collected

File: src/test/java/com/diffplug/gradle/spotless/EndWithNewlineStepTest.java
Patch:
@@ -33,8 +33,6 @@ private void endWithNewlineTest(String before) throws Exception {
 	}
 
 	private void endWithNewlineTest(String before, String after) throws Exception {
-		super.assertTask(test -> {
-			test.endWithNewline();
-		}, before, after);
+		super.assertTask(FormatExtension::endWithNewline, before, after);
 	}
 }

File: src/test/java/com/diffplug/gradle/spotless/TrimTrailingWhitespaceTest.java
Patch:
@@ -48,8 +48,6 @@ private void trimTrailingWhitespaceTestCase(String before) throws Exception {
 	}
 
 	private void trimTrailingWhitespaceTestCase(String before, String after) throws Exception {
-		super.assertTask(test -> {
-			test.trimTrailingWhitespace();
-		}, before, after);
+		super.assertTask(FormatExtension::trimTrailingWhitespace, before, after);
 	}
 }

File: src/main/java/com/diffplug/gradle/spotless/DiffMessageFormatter.java
Patch:
@@ -65,7 +65,7 @@ private DiffMessageFormatter(FormatTask task, Formatter formatter, List<File> pr
 		if (problemIter.hasNext()) {
 			int remainingFiles = problemFiles.size() - problemIter.nextIndex();
 			if (remainingFiles >= MAX_FILES_TO_LIST) {
-				buffer.append("Violations also present in " + remainingFiles + " other files.\n");
+				buffer.append("Violations also present in ").append(remainingFiles).append(" other files.\n");
 			} else {
 				buffer.append("Violations also present in:\n");
 				while (problemIter.hasNext()) {

File: src/main/java/com/diffplug/gradle/spotless/FormatterStep.java
Patch:
@@ -41,7 +41,7 @@ public interface FormatterStep {
 	 * @param file
 	 *            the File which is being formatted
 	 * @return The formatted content, guaranteed to only have unix-style newlines
-	 * @throws Throwable
+	 * @throws Throwable when the formatter steps experiences a problem
 	 */
 	String format(String raw, File file) throws Throwable;
 

File: src/main/java/com/diffplug/gradle/spotless/PaddedCell.java
Patch:
@@ -60,7 +60,7 @@ public File file() {
 		return file;
 	}
 
-	/** Returns the type of the result (either {@link Cycle}, {@link Converge}, or {@link Diverge}). */
+	/** Returns the type of the result (either {@link Type#CONVERGE}, {@link Type#CYCLE}, or {@link Type#DIVERGE}). */
 	public Type type() {
 		return type;
 	}

File: src/main/java/com/diffplug/gradle/spotless/FormatterStep.java
Patch:
@@ -68,7 +68,7 @@ public String format(String raw, File file) throws Throwable {
 	}
 
 	/** A FormatterStep which doesn't depend on the input file. */
-	static class FileIndependent implements FormatterStep {
+	class FileIndependent implements FormatterStep {
 		private final String name;
 		private final Throwing.Function<String, String> formatter;
 
@@ -89,12 +89,12 @@ public String format(String raw, File file) throws Throwable {
 	}
 
 	/** Creates a FormatterStep from the given function. */
-	public static FormatterStep create(String name, Throwing.Function<String, String> formatter) {
+	static FormatterStep create(String name, Throwing.Function<String, String> formatter) {
 		return new FileIndependent(name, formatter);
 	}
 
 	/** Creates a FormatterStep lazily from the given formatterSupplier function. */
-	public static FormatterStep createLazy(String name, Throwing.Supplier<Throwing.Function<String, String>> formatterSupplier) {
+	static FormatterStep createLazy(String name, Throwing.Supplier<Throwing.Function<String, String>> formatterSupplier) {
 		// wrap the supplier as a regular Supplier (not a Throwing.Supplier)
 		Supplier<Throwing.Function<String, String>> rethrowFormatterSupplier = Errors.rethrow().wrap(formatterSupplier);
 		// memoize its result

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -46,12 +46,12 @@ public FormatExtension(String name, SpotlessExtension root) {
 
 	boolean paddedCell = false;
 
-	/** Enables paddedCell mode {@see https://github.com/diffplug/spotless/blob/master/PADDEDCELL.md}. */
+	/** Enables paddedCell mode. @see <a href="https://github.com/diffplug/spotless/blob/master/PADDEDCELL.md">Padded cell</a> */
 	public void paddedCell() {
 		paddedCell(true);
 	}
 
-	/** Enables or disables paddedCell mode {@see https://github.com/diffplug/spotless/blob/master/PADDEDCELL.md}. */
+	/** Enables paddedCell mode. @see <a href="https://github.com/diffplug/spotless/blob/master/PADDEDCELL.md">Padded cell</a> */
 	public void paddedCell(boolean paddedCell) {
 		this.paddedCell = paddedCell;
 	}

File: src/main/java/com/diffplug/gradle/spotless/PaddedCellTaskMisc.java
Patch:
@@ -37,6 +37,8 @@
 import com.diffplug.common.base.Errors;
 import com.diffplug.common.base.StringPrinter;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /**
  * Incorporates the PaddedCell machinery into FormatTask.apply() and FormatTask.check().
  *
@@ -123,6 +125,7 @@ private static Path diagnoseDir(FormatTask task) {
 		return task.getProject().getBuildDir().toPath().resolve("spotless-diagnose-" + task.getFormatName());
 	}
 
+	@SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
 	static void check(FormatTask task, Formatter formatter, List<File> problemFiles) throws IOException {
 		if (problemFiles.isEmpty()) {
 			// if the first pass was successful, then paddedCell() mode is unnecessary

File: src/main/java/com/diffplug/gradle/spotless/FormatTask.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 import org.gradle.api.DefaultTask;
 import org.gradle.api.GradleException;
@@ -39,9 +40,9 @@ public String getFormatName() {
 		if (name.startsWith(SpotlessPlugin.EXTENSION)) {
 			String after = name.substring(SpotlessPlugin.EXTENSION.length());
 			if (after.endsWith(SpotlessPlugin.CHECK)) {
-				return after.substring(0, after.length() - SpotlessPlugin.CHECK.length());
+				return after.substring(0, after.length() - SpotlessPlugin.CHECK.length()).toLowerCase(Locale.US);
 			} else if (after.endsWith(SpotlessPlugin.APPLY)) {
-				return after.substring(0, after.length() - SpotlessPlugin.APPLY.length());
+				return after.substring(0, after.length() - SpotlessPlugin.APPLY.length()).toLowerCase(Locale.US);
 			}
 		}
 		return name;

File: src/main/java/com/diffplug/gradle/spotless/PaddedCell.java
Patch:
@@ -88,8 +88,8 @@ public static PaddedCell check(Formatter formatter, File file) {
 		return check(formatter, file, original, MAX_CYCLE);
 	}
 
-	public static PaddedCell check(Formatter formatter, File file, String original) {
-		return check(formatter, file, original, MAX_CYCLE);
+	public static PaddedCell check(Formatter formatter, File file, String originalUnix) {
+		return check(formatter, file, originalUnix, MAX_CYCLE);
 	}
 
 	private static final int MAX_CYCLE = 10;

File: src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -74,7 +74,7 @@ FormatTask createTask(String name, FormatExtension format, boolean check) throws
 		return task;
 	}
 
-	private static String capitalize(String input) {
+	static String capitalize(String input) {
 		return Character.toUpperCase(input.charAt(0)) + input.substring(1);
 	}
 }

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -69,7 +69,6 @@ public void target(Object... targets) {
 		}
 	}
 
-	@SuppressWarnings("unchecked")
 	protected FileCollection parseTarget(Object target) {
 		if (target instanceof FileCollection) {
 			return (FileCollection) target;

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -57,7 +57,7 @@ public void target(Object... targets) {
 		} else if (targets.length == 1) {
 			this.target = parseTarget(targets[0]);
 		} else {
-			if (Arrays.asList(targets).stream().allMatch(o -> o instanceof String)) {
+			if (Arrays.stream(targets).allMatch(o -> o instanceof String)) {
 				this.target = parseTarget(Arrays.asList(targets));
 			} else {
 				UnionFileCollection union = new UnionFileCollection();
@@ -76,12 +76,12 @@ protected FileCollection parseTarget(Object target) {
 		} else if (target instanceof String) {
 			Map<String, Object> args = new HashMap<>();
 			args.put("dir", getProject().getProjectDir());
-			args.put("include", (String) target);
+			args.put("include", target);
 			return getProject().fileTree(args);
 		} else if (target instanceof List && ((List<?>) target).stream().allMatch(o -> o instanceof String)) {
 			Map<String, Object> args = new HashMap<>();
 			args.put("dir", getProject().getProjectDir());
-			args.put("includes", (List<String>) target);
+			args.put("includes", target);
 			return getProject().fileTree(args);
 		} else {
 			return getProject().files(target);

File: src/main/java/com/diffplug/gradle/spotless/java/GoogleJavaFormat.java
Patch:
@@ -28,6 +28,8 @@
 import com.diffplug.common.base.Errors;
 import com.diffplug.common.base.Throwing;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
 /** Wraps up [google-java-format](https://github.com/google/google-java-format) as a FormatterStep. */
 class GoogleJavaFormat {
 	static final String NAME = "google-java-format";
@@ -37,6 +39,7 @@ class GoogleJavaFormat {
 	static final String FORMATTER_METHOD = "formatSource";
 
 	/** Returns a function which will call the google-java-format tool. */
+	@SuppressFBWarnings("DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED")
 	static Throwing.Function<String, String> createRule(String version, Project project) throws Exception {
 		// get the googleJavaFormat configuration
 		Dependency googleJavaFormatJar = project.getDependencies().create(MAVEN_COORDINATE + version);

File: src/main/java/com/diffplug/gradle/spotless/Formatter.java
Patch:
@@ -78,7 +78,7 @@ public void applyFormat(File file) throws IOException {
 		// convert the line endings if necessary
 		String formatted;
 		String ending = lineEndingPolicy.getEndingFor(file);
-		if (!ending.equals(LineEnding.UNIX)) {
+		if (!ending.equals(LineEnding.UNIX.str())) {
 			formatted = formattedUnix.replace("\n", ending);
 		} else {
 			formatted = formattedUnix;

File: src/main/java/com/diffplug/gradle/spotless/LineEnding.java
Patch:
@@ -24,7 +24,7 @@
  */
 public enum LineEnding {
 	// @formatter:off
-	/** Uses the same line endings as Git, including `.gitattributes`. */
+	/** Uses the same line endings as Git, using `.gitattributes` and the `core.eol` property. */
 	GIT_ATTRIBUTES,
 	/** `\n` on unix systems, `\r\n` on windows systems. */
 	PLATFORM_NATIVE,

File: src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -33,7 +33,7 @@ public SpotlessExtension(Project project) {
 	}
 
 	/** Line endings (if any). */
-	LineEnding lineEndings = LineEnding.PLATFORM_NATIVE;
+	LineEnding lineEndings = LineEnding.GIT_ATTRIBUTES;
 
 	public LineEnding getLineEndings() {
 		return lineEndings;

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -28,7 +28,6 @@
 import org.gradle.api.internal.file.UnionFileCollection;
 
 import com.diffplug.common.base.Throwing;
-
 import groovy.lang.Closure;
 
 /** Adds a `spotless{Name}Check` and `spotless{Name}Apply` task. */
@@ -49,7 +48,7 @@ public FormatExtension(String name, SpotlessExtension root) {
 	 * FileCollections pass through raw.
 	 * Strings are treated as the 'include' arg to fileTree, with project.rootDir as the dir.
 	 * List<String> are treates as the 'includes' arg to fileTree, with project.rootDir as the dir.
-	 * Anything else gets passed to getProject().files(). 
+	 * Anything else gets passed to getProject().files().
 	 */
 	public void target(Object... targets) {
 		if (targets.length == 0) {
@@ -93,7 +92,7 @@ protected FileCollection parseTarget(Object target) {
 
 	/**
 	 * Adds the given custom step, which is constructed lazily for performance reasons.
-	 * 
+	 *
 	 * The resulting function will receive a string with unix-newlines, and it must return a string unix newlines.
 	 */
 	public void customLazy(String name, Throwing.Supplier<Throwing.Function<String, String>> formatterSupplier) {

File: src/main/java/com/diffplug/gradle/spotless/FormatTask.java
Patch:
@@ -40,7 +40,9 @@ public class FormatTask extends DefaultTask {
 
 	@TaskAction
 	public void format() throws Exception {
-		if (target == null) { throw new GradleException("You must specify 'Iterable<File> toFormat'"); }
+		if (target == null) {
+			throw new GradleException("You must specify 'Iterable<File> toFormat'");
+		}
 		// combine them into the master formatter
 		Formatter formatter = new Formatter(lineEndings, getProject().getProjectDir().toPath(), steps);
 

File: src/main/java/com/diffplug/gradle/spotless/IndentStep.java
Patch:
@@ -78,7 +78,7 @@ public String format(String raw) {
 				builder.append(raw.subSequence(contentStart, raw.length()));
 				return builder.toString();
 			} else {
-				// increment lineStart by 1 so that we start after the newline next time 
+				// increment lineStart by 1 so that we start after the newline next time
 				++lineStart;
 				builder.append(raw.subSequence(contentStart, lineStart));
 			}

File: src/main/java/com/diffplug/gradle/spotless/freshmark/FreshMarkExtension.java
Patch:
@@ -30,7 +30,7 @@ public class FreshMarkExtension extends FormatExtension {
 	public FreshMarkExtension(SpotlessExtension root) {
 		super(NAME, root);
 		customLazy(NAME, () -> {
-			// defaults to all project properties 
+			// defaults to all project properties
 			if (properties == null) {
 				properties = getProject().getProperties();
 			}

File: src/test/java/com/diffplug/gradle/spotless/TrimTrailingWhitespaceTest.java
Patch:
@@ -40,6 +40,7 @@ public void trimTrailingWhitespace() throws Exception {
 		trimTrailingWhitespaceTestCase("Line\nLine  ", "Line\nLine");
 		trimTrailingWhitespaceTestCase("Line  \nLine  ", "Line\nLine");
 		trimTrailingWhitespaceTestCase("  Line  \nLine  ", "  Line\nLine");
+		trimTrailingWhitespaceTestCase("  Line  \n  Line  ", "  Line\n  Line");
 	}
 
 	private void trimTrailingWhitespaceTestCase(String before) throws Exception {

File: src/main/java/com/diffplug/gradle/spotless/java/ImportSorterStep.java
Patch:
@@ -51,7 +51,7 @@ public ImportSorterStep(File importsFile) throws IOException {
 				.map(line -> {
 					String[] pieces = line.split("=");
 					int idx = Integer.parseInt(pieces[0]);
-					String name = pieces[1];
+					String name = pieces.length == 2 ? pieces[1] : "";
 					return new AbstractMap.SimpleEntry<Integer, String>(idx, name);
 				})
 				// collect into map

File: src/main/java/com/diffplug/gradle/spotless/FormatTask.java
Patch:
@@ -58,7 +58,7 @@ public void format() throws Exception {
 	private void formatCheck(Formatter formatter) throws IOException {
 		List<File> problemFiles = new ArrayList<>();
 		for (File file : target) {
-			getLogger().info("Checking format on " + file);
+			getLogger().debug("Checking format on " + file);
 			// keep track of the problem toFormat
 			if (!formatter.isClean(file)) {
 				problemFiles.add(file);
@@ -75,7 +75,7 @@ private void formatCheck(Formatter formatter) throws IOException {
 	/** Applies the format. */
 	private void formatApply(Formatter formatter) throws IOException {
 		for (File file : target) {
-			getLogger().info("Applying format to " + file);
+			getLogger().debug("Applying format to " + file);
 			// keep track of the problem toFormat
 			formatter.applyFormat(file);
 		}

File: src/main/java/com/diffplug/gradle/spotless/Formatter.java
Patch:
@@ -88,7 +88,8 @@ String applyAll(String unix, File file) {
 			try {
 				unix = step.format(unix);
 			} catch (Throwable e) {
-				logger.warn("Unable to apply step " + step.getName() + " to " + rootDir.relativize(file.toPath()) + ": " + e.getMessage());
+				logger.warn("Unable to apply step " + step.getName() + " to " + projectDirectory.relativize(file.toPath()) + ": " + e.getMessage());
+				logger.info("Exception is ", e);
 			}
 		}
 		return unix;

File: spotless.license.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/FormatTask.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/Formatter.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/FormatterStep.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/IndentStep.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/LicenseHeaderStep.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/LineEnding.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/SpotlessExtension.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/SpotlessPlugin.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -61,8 +61,8 @@ void createTasks() throws Exception {
 		// getTasks() returns a "live" collection, so this works even if the
 		// task doesn't exist at the time this call is made
 		project.getTasks()
-			.matching(task -> task.getName().equals(JavaBasePlugin.CHECK_TASK_NAME))
-			.all(task -> task.dependsOn(rootCheckTask));
+				.matching(task -> task.getName().equals(JavaBasePlugin.CHECK_TASK_NAME))
+				.all(task -> task.dependsOn(rootCheckTask));
 	}
 
 	FormatTask createTask(String name, FormatExtension subExtension, boolean check) throws Exception {

File: src/main/java/com/diffplug/gradle/spotless/java/EclipseFormatterStep.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/java/ImportSorterImpl.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/java/ImportSorterStep.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/EndWithNewlineTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/IndentStepTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/LicenseHeaderStepTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/ResourceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/TrimTrailingWhitespaceTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/java/EclipseFormatterStepTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/test/java/com/diffplug/gradle/spotless/java/ImportSorterStepTest.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright 2015 DiffPlug
  *
  * Licensed under the Apache License, Version 2.0 (the "License");

File: src/main/java/com/diffplug/gradle/spotless/java/JavaExtension.java
Patch:
@@ -46,7 +46,7 @@ protected void setupTask(FormatTask task) throws Exception {
 		if (target == null) {
 			JavaPluginConvention javaPlugin = getProject().getConvention().getPlugin(JavaPluginConvention.class);
 			if (javaPlugin == null) {
-				throw new GradleException("Must apply the java plugin before you apply the spotless plugin.");
+				throw new GradleException("You must apply the java plugin before the spotless plugin if you are using the java extension.");
 			}
 			UnionFileCollection union = new UnionFileCollection();
 			for (SourceSet sourceSet : javaPlugin.getSourceSets()) {

File: src/main/java/com/diffplug/gradle/spotless/FormatExtension.java
Patch:
@@ -113,7 +113,7 @@ public void indentWithTabs(int tabToSpaces) {
 
 	/** Ensures that the files are indented using tabs. */
 	public void indentWithTabs() {
-		indentWithSpaces(4);
+		indentWithTabs(4);
 	}
 
 	/**

File: src/main/java/com/diffplug/gradle/spotless/IndentStep.java
Patch:
@@ -17,9 +17,9 @@ public IndentStep(Type type, int tabsToSpaces) {
 	public String format(String raw) {
 		// reset the buffer
 		builder.setLength(0);
-		int lineStart = 0;
-		int contentStart = 0;
+		int lineStart = 0; // beginning of line
 		do {
+			int contentStart = lineStart; // beginning of non-whitespace
 			int numSpaces = 0;
 			char c;
 			while (contentStart < raw.length() && isSpaceOrTab(c = raw.charAt(contentStart))) {
@@ -28,6 +28,7 @@ public String format(String raw) {
 				case '\t':	numSpaces += tabsToSpaces;	break;
 				default:	throw new IllegalArgumentException("Unexpected char " + c);
 				}
+				++contentStart;
 			}
 
 			// add the leading space in a canonical way

File: src/main/java/com/diffplug/gradle/spotless/Formatter.java
Patch:
@@ -72,7 +72,7 @@ private String applyAll(String unix, File file) {
 		for (FormatterStep step : steps) {
 			try {
 				unix = step.format(unix);
-			} catch (Exception e) {
+			} catch (Throwable e) {
 				logger.warn("Unable to apply step " + step.getName() + " to " + rootDir.relativize(file.toPath()) + ": " + e.getMessage());
 			}
 		}

File: src/test/java/com/diffplug/gradle/spotless/FormatTaskTest.java
Patch:
@@ -54,7 +54,7 @@ public void testStepCheckFail() throws IOException {
 		task.toFormat = Collections.singleton(testFile);
 
 		task.check = true;
-		task.steps.add(FormatterStep.of("double-p", content -> content.replace("pp", "p")));
+		task.steps.add(FormatterStep.create("double-p", content -> content.replace("pp", "p")));
 		task.execute();
 
 		assertFileContent("\n", testFile);
@@ -66,7 +66,7 @@ public void testStepCheckPass() throws IOException {
 		task.toFormat = Collections.singleton(testFile);
 
 		task.check = true;
-		task.steps.add(FormatterStep.of("double-p", content -> content.replace("pp", "p")));
+		task.steps.add(FormatterStep.create("double-p", content -> content.replace("pp", "p")));
 		task.execute();
 	}
 
@@ -76,7 +76,7 @@ public void testStepApply() throws IOException {
 		task.toFormat = Collections.singleton(testFile);
 
 		task.check = false;
-		task.steps.add(FormatterStep.of("double-p", content -> content.replace("pp", "p")));
+		task.steps.add(FormatterStep.create("double-p", content -> content.replace("pp", "p")));
 		task.execute();
 
 		super.assertFileContent("aple", testFile);

File: src/test/java/com/diffplug/gradle/spotless/ResourceTest.java
Patch:
@@ -49,9 +49,9 @@ protected void assertFileContent(String expectedContent, File actual) throws IOE
 	}
 
 	/** Reads the given resource from "before", applies the step, and makes sure the result is "after". */
-	protected void assertStep(FormatterStep step, String unformattedPath, String expectedPath) throws Exception {
+	protected void assertStep(Throwing.Function<String, String> step, String unformattedPath, String expectedPath) throws Throwable {
 		String unformatted = getTestResource(unformattedPath).replace("\r", "");	// unix-ified input
-		String formatted = step.format(unformatted);
+		String formatted = step.apply(unformatted);
 		// no windows newlines
 		Assert.assertEquals(-1, formatted.indexOf('\r'));
 

File: src/main/java/com/github/youribonnaffe/gradle/format/FormatTask.java
Patch:
@@ -85,7 +85,7 @@ private void formatCheck(Formatter formatter) throws IOException {
 		}
 		if (!problemFiles.isEmpty()) {
 			Path rootDir = getProject().getRootDir().toPath();
-			throw new GradleException("Format violations were found. Run formatApply to fix them.\n"
+			throw new GradleException("Format violations were found. Run 'gradlew " + FormatPlugin.TASK_APPLY + "' to fix them.\n"
 					+ problemFiles.stream().map(file -> "    " + rootDir.relativize(file.toPath()).toString())
 							.collect(Collectors.joining("\n")));
 		}

File: src/main/groovy/com/github/youribonnaffe/gradle/format/ImportSorterAdapter.java
Patch:
@@ -46,6 +46,7 @@ public String sortImports(String document) {
                         endIndex != -1 ? endIndex : next.length()));
             }
         }
+        scanner.close();
 
         List<String> sortedImports = ImportsSorter.sort(imports, importsOrder);
         return applyImportsToDocument(document, firstImportLine, lastImportLine, sortedImports);
@@ -75,6 +76,7 @@ private String applyImportsToDocument(final String document, int firstImportLine
                 append(sb, next);
             }
         }
+        scanner.close();
         return sb.toString();
     }
 

