File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/ClientMethod.java
Patch:
@@ -393,6 +393,7 @@ public void addImportsTo(Set<String> imports, boolean includeImplementationImpor
 
         imports.add("java.util.Objects");
         imports.add("java.util.stream.Collectors");
+        ClassType.BINARY_DATA.addImportsTo(imports, includeImplementationImports);
         ClassType.RESPONSE.addImportsTo(imports, includeImplementationImports);
         ClassType.SIMPLE_RESPONSE.addImportsTo(imports, includeImplementationImports);
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/test/java/payload/pageable/PageableTests.java
Patch:
@@ -13,7 +13,7 @@ public class PageableTests {
 
     @Test
     public void test() {
-        PagedIterable<Pet> pagedIterable = client.link(null);
+        PagedIterable<Pet> pagedIterable = client.link();
 
         Assertions.assertEquals(4, pagedIterable.stream().count());
     }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ClientMethodTemplate.java
Patch:
@@ -1591,7 +1591,7 @@ private String getPagingSinglePageExpression(ClientMethod clientMethod, String m
         if (settings.isDataPlaneClient() && settings.isPageSizeEnabled()) {
             Optional<String> maxPageSizeSerializedName
                 = MethodUtil.serializedNameOfMaxPageSizeParameter(clientMethod.getProxyMethod());
-            if (maxPageSizeSerializedName.isPresent() && settings.isBranded()) {
+            if (maxPageSizeSerializedName.isPresent()) {
                 argumentLine = argumentLine.replace("requestOptions", "requestOptionsLocal");
                 StringBuilder expression = new StringBuilder();
                 expression.append("(pageSize) -> {");
@@ -1625,7 +1625,7 @@ private String getPagingNextPageExpression(ClientMethod clientMethod, String met
         if (settings.isDataPlaneClient() && settings.isPageSizeEnabled()) {
             Optional<String> maxPageSizeSerializedName
                 = MethodUtil.serializedNameOfMaxPageSizeParameter(clientMethod.getProxyMethod());
-            if (maxPageSizeSerializedName.isPresent() && settings.isBranded()) {
+            if (maxPageSizeSerializedName.isPresent()) {
                 argumentLine = argumentLine.replace("requestOptions", "requestOptionsLocal");
                 StringBuilder expression = new StringBuilder();
                 expression.append("(nextLink, pageSize) -> {");

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/TypeSpecPlugin.java
Patch:
@@ -294,6 +294,7 @@ public TypeSpecPlugin(EmitterOptions options, boolean sdkIntegration) {
             SETTINGS_MAP.put("license-header", "SMALL_TYPESPEC");
 
             SETTINGS_MAP.put("sync-methods", "sync-only");
+            SETTINGS_MAP.put("enable-page-size", false);
             SETTINGS_MAP.put("use-default-http-status-code-to-exception-type-mapping", false);
             SETTINGS_MAP.put("generate-samples", false);
             SETTINGS_MAP.put("generate-tests", false);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/authentication/apikey/ApiKeyClientBuilder.java
Patch:
@@ -11,19 +11,19 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
 import io.clientcore.core.http.pipeline.KeyCredentialPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.KeyCredentialTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -244,7 +244,7 @@ private HttpPipeline createHttpPipeline() {
         if (keyCredential != null) {
             policies.add(new KeyCredentialPolicy("x-ms-api-key", keyCredential, null));
         }
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/authentication/http/custom/CustomClientBuilder.java
Patch:
@@ -11,19 +11,19 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
 import io.clientcore.core.http.pipeline.KeyCredentialPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.KeyCredentialTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -244,7 +244,7 @@ private HttpPipeline createHttpPipeline() {
         if (keyCredential != null) {
             policies.add(new KeyCredentialPolicy("authorization", keyCredential, "SharedAccessKey"));
         }
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/authentication/oauth2/OAuth2ClientBuilder.java
Patch:
@@ -11,19 +11,19 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
 import io.clientcore.core.http.pipeline.KeyCredentialPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.KeyCredentialTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -244,7 +244,7 @@ private HttpPipeline createHttpPipeline() {
         if (keyCredential != null) {
             policies.add(new KeyCredentialPolicy("authorization", keyCredential, "Bearer"));
         }
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/authentication/union/UnionClientBuilder.java
Patch:
@@ -11,19 +11,19 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
 import io.clientcore.core.http.pipeline.KeyCredentialPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.KeyCredentialTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -243,7 +243,7 @@ private HttpPipeline createHttpPipeline() {
         if (keyCredential != null) {
             policies.add(new KeyCredentialPolicy("authorization", keyCredential, "Bearer"));
         }
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/encode/numeric/NumericClientBuilder.java
Patch:
@@ -10,17 +10,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/basic/BasicClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/bodyoptionality/BodyOptionalityClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/collectionformat/CollectionFormatClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/spread/SpreadClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/contentnegotiation/ContentNegotiationClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/jsonmergepatch/JsonMergePatchClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/mediatype/MediaTypeClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/multipart/MultiPartClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -227,7 +227,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/pageable/PageableClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/pageable/serverdrivenpagination/implementation/LinkResponse.java
Patch:
@@ -1,6 +1,6 @@
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package payload.pageable.serverdrivenpagination;
+package payload.pageable.serverdrivenpagination.implementation;
 
 import io.clientcore.core.annotation.Metadata;
 import io.clientcore.core.annotation.TypeConditions;

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/pageable/serverdrivenpagination/implementation/package-info.java
Patch:
@@ -4,4 +4,4 @@
  * Package containing the data models for Pageable.
  * Test for pageable payload.
  */
-package payload.pageable.serverdrivenpagination;
+package payload.pageable.serverdrivenpagination.implementation;

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/routes/RoutesClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -239,7 +239,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/serialization/encodedname/json/JsonClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/endpoint/notdefined/NotDefinedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/path/multiple/MultipleClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -241,7 +241,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/path/single/SingleClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/versions/notversioned/NotVersionedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/versions/versioned/VersionedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -242,7 +242,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/specialwords/SpecialWordsClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -227,7 +227,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/array/ArrayClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -236,7 +236,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/dictionary/DictionaryClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -234,7 +234,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/enums/extensible/ExtensibleClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/enums/fixed/FixedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/empty/EmptyClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/enumdiscriminator/EnumDiscriminatorClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/nesteddiscriminator/NestedDiscriminatorClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/notdiscriminated/NotDiscriminatedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/recursive/RecursiveClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/singlediscriminator/SingleDiscriminatorClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/usage/UsageClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -221,7 +221,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/visibility/VisibilityClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -222,7 +222,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/additionalproperties/AdditionalPropertiesClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -255,7 +255,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/nullable/NullableClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -229,7 +229,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/optional/OptionalClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -238,7 +238,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/valuetypes/ValueTypesClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -252,7 +252,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/scalar/ScalarClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -229,7 +229,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/union/UnionClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -232,7 +232,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/added/AddedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -260,7 +260,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/madeoptional/MadeOptionalClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -262,7 +262,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/removed/RemovedClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -261,7 +261,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/renamedfrom/RenamedFromClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -262,7 +262,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/returntypechangedfrom/ReturnTypeChangedFromClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -262,7 +262,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/typechangedfrom/TypeChangedFromClientBuilder.java
Patch:
@@ -9,17 +9,17 @@
 import io.clientcore.core.http.models.HttpRedirectOptions;
 import io.clientcore.core.http.models.HttpRetryOptions;
 import io.clientcore.core.http.models.ProxyOptions;
-import io.clientcore.core.http.pipeline.HttpLoggingPolicy;
+import io.clientcore.core.http.pipeline.HttpInstrumentationPolicy;
 import io.clientcore.core.http.pipeline.HttpPipeline;
 import io.clientcore.core.http.pipeline.HttpPipelineBuilder;
 import io.clientcore.core.http.pipeline.HttpPipelinePolicy;
 import io.clientcore.core.http.pipeline.HttpRedirectPolicy;
 import io.clientcore.core.http.pipeline.HttpRetryPolicy;
+import io.clientcore.core.instrumentation.logging.ClientLogger;
 import io.clientcore.core.models.traits.ConfigurationTrait;
 import io.clientcore.core.models.traits.EndpointTrait;
 import io.clientcore.core.models.traits.HttpTrait;
 import io.clientcore.core.models.traits.ProxyTrait;
-import io.clientcore.core.util.ClientLogger;
 import io.clientcore.core.util.configuration.Configuration;
 import java.util.ArrayList;
 import java.util.List;
@@ -262,7 +262,7 @@ private HttpPipeline createHttpPipeline() {
         policies.add(redirectOptions == null ? new HttpRedirectPolicy() : new HttpRedirectPolicy(redirectOptions));
         policies.add(retryOptions == null ? new HttpRetryPolicy() : new HttpRetryPolicy(retryOptions));
         this.pipelinePolicies.stream().forEach(p -> policies.add(p));
-        policies.add(new HttpLoggingPolicy(localHttpLogOptions));
+        policies.add(new HttpInstrumentationPolicy(null, localHttpLogOptions));
         httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));
         return httpPipelineBuilder.build();
     }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/projectmodel/Project.java
Patch:
@@ -63,8 +63,7 @@ public enum Dependency {
         AZURE_IDENTITY("com.azure", "azure-identity", "1.15.0"),
         AZURE_CORE_EXPERIMENTAL("com.azure", "azure-core-experimental", "1.0.0-beta.56"),
 
-        CLIENTCORE("io.clientcore", "core", "1.0.0-beta.1"),
-        CLIENTCORE_JSON("io.clientcore", "core-json", "1.0.0-beta.1");
+        CLIENTCORE("io.clientcore", "core", "1.0.0-beta.2");
 
         private final String groupId;
         private final String artifactId;

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ServiceClientBuilderTemplate.java
Patch:
@@ -523,6 +523,7 @@ protected void addHttpPolicyImports(Set<String> imports) {
         imports.add(HttpPolicyProviders.class.getName());
         ClassType.HTTP_PIPELINE_POLICY.addImportsTo(imports, false);
         ClassType.HTTP_LOGGING_POLICY.addImportsTo(imports, false);
+        ClassType.HTTP_INSTRUMENTATION_POLICY.addImportsTo(imports, false);
         imports.add(AddHeadersPolicy.class.getName());
         imports.add(RequestIdPolicy.class.getName());
         imports.add(AddHeadersFromContextPolicy.class.getName());

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/TemplateHelper.java
Patch:
@@ -76,7 +76,7 @@ private static void createGenericHttpPipelineMethod(JavaSettings settings, Strin
                     + "\", keyCredential, " + prefixExpr + "));");
             });
         }
-        function.line("policies.add(new HttpLoggingPolicy(%s));", localHttpLogOptionsName);
+        function.line("policies.add(new HttpInstrumentationPolicy(null, %s));", localHttpLogOptionsName);
         function.line("httpPipelineBuilder.policies(policies.toArray(new HttpPipelinePolicy[0]));");
         function.methodReturn("httpPipelineBuilder.build()");
     }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/projectmodel/Project.java
Patch:
@@ -60,7 +60,7 @@ public enum Dependency {
         AZURE_CORE_MANAGEMENT("com.azure", "azure-core-management", "1.15.6"),
         AZURE_CORE_HTTP_NETTY("com.azure", "azure-core-http-netty", "1.15.7"),
         AZURE_CORE_TEST("com.azure", "azure-core-test", "1.27.0-beta.4"),
-        AZURE_IDENTITY("com.azure", "azure-identity", "1.14.2"),
+        AZURE_IDENTITY("com.azure", "azure-identity", "1.15.0"),
         AZURE_CORE_EXPERIMENTAL("com.azure", "azure-core-experimental", "1.0.0-beta.56"),
 
         CLIENTCORE("io.clientcore", "core", "1.0.0-beta.1"),

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/clientnamespace/package-info.java
Patch:
@@ -4,8 +4,8 @@
 
 /**
  * <!-- start generated doc -->
- * Package containing the data models for Pageable.
- * Test for pageable payload.
+ * Package containing the classes for ClientNamespace.
+ * Illustrates the clientNamespace cases.
  * <!-- end generated doc -->
  */
-package payload.pageable.serverdrivenpagination.models;
+package client.clientnamespace;

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/authentication/apikey/implementation/ApiKeyClientImpl.java
Patch:
@@ -59,8 +59,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public ApiKeyClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(ApiKeyClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/authentication/http/custom/implementation/CustomClientImpl.java
Patch:
@@ -59,8 +59,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public CustomClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(CustomClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/encode/numeric/implementation/NumericClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public PropertiesImpl getProperties() {
      * @param endpoint Service host.
      */
     public NumericClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.properties = new PropertiesImpl(this);
     }
 }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/basic/implementation/BasicClientImpl.java
Patch:
@@ -71,8 +71,8 @@ public ImplicitBodiesImpl getImplicitBodies() {
      * @param endpoint Service host.
      */
     public BasicClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.explicitBodies = new ExplicitBodiesImpl(this);
         this.implicitBodies = new ImplicitBodiesImpl(this);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/bodyoptionality/implementation/BodyOptionalityClientImpl.java
Patch:
@@ -74,8 +74,8 @@ public OptionalExplicitsImpl getOptionalExplicits() {
      * @param endpoint Service host.
      */
     public BodyOptionalityClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.optionalExplicits = new OptionalExplicitsImpl(this);
         this.service = RestProxy.create(BodyOptionalityClientService.class, this.httpPipeline);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/collectionformat/implementation/CollectionFormatClientImpl.java
Patch:
@@ -71,8 +71,8 @@ public HeadersImpl getHeaders() {
      * @param endpoint Service host.
      */
     public CollectionFormatClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.queries = new QueriesImpl(this);
         this.headers = new HeadersImpl(this);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/parameters/spread/implementation/SpreadClientImpl.java
Patch:
@@ -71,8 +71,8 @@ public AliasImpl getAlias() {
      * @param endpoint Service host.
      */
     public SpreadClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.models = new ModelsImpl(this);
         this.alias = new AliasImpl(this);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/contentnegotiation/implementation/ContentNegotiationClientImpl.java
Patch:
@@ -71,8 +71,8 @@ public DifferentBodiesImpl getDifferentBodies() {
      * @param endpoint Service host.
      */
     public ContentNegotiationClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.sameBodies = new SameBodiesImpl(this);
         this.differentBodies = new DifferentBodiesImpl(this);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/jsonmergepatch/implementation/JsonMergePatchClientImpl.java
Patch:
@@ -62,8 +62,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public JsonMergePatchClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(JsonMergePatchClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/mediatype/implementation/MediaTypeClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public StringBodiesImpl getStringBodies() {
      * @param endpoint Service host.
      */
     public MediaTypeClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringBodies = new StringBodiesImpl(this);
     }
 }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/multipart/implementation/MultiPartClientImpl.java
Patch:
@@ -99,8 +99,8 @@ public FormDataHttpPartsNonStringsImpl getFormDataHttpPartsNonStrings() {
      * @param endpoint Service host.
      */
     public MultiPartClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.formDatas = new FormDatasImpl(this);
         this.formDataHttpParts = new FormDataHttpPartsImpl(this);
         this.formDataHttpPartsContentTypes = new FormDataHttpPartsContentTypesImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/payload/pageable/implementation/PageableClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public ServerDrivenPaginationsImpl getServerDrivenPaginations() {
      * @param endpoint Service host.
      */
     public PageableClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.serverDrivenPaginations = new ServerDrivenPaginationsImpl(this);
     }
 }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/routes/implementation/RoutesClientImpl.java
Patch:
@@ -281,8 +281,8 @@ public InInterfacesImpl getInInterfaces() {
      * @param endpoint Service host.
      */
     public RoutesClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.pathParameters = new PathParametersImpl(this);
         this.pathParametersReservedExpansions = new PathParametersReservedExpansionsImpl(this);
         this.pathParametersSimpleExpansionStandards = new PathParametersSimpleExpansionStandardsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/serialization/encodedname/json/implementation/JsonClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public PropertiesImpl getProperties() {
      * @param endpoint Service host.
      */
     public JsonClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.properties = new PropertiesImpl(this);
     }
 }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/endpoint/notdefined/implementation/NotDefinedClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public NotDefinedClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = endpoint;
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(NotDefinedClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/path/multiple/implementation/MultipleClientImpl.java
Patch:
@@ -74,9 +74,9 @@ public HttpPipeline getHttpPipeline() {
      * @param serviceVersion Service version.
      */
     public MultipleClientImpl(HttpPipeline httpPipeline, String endpoint, MultipleServiceVersion serviceVersion) {
-        this.endpoint = endpoint;
-        this.serviceVersion = MultipleServiceVersion.getLatest();
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
+        this.serviceVersion = serviceVersion;
         this.service = RestProxy.create(MultipleClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/path/single/implementation/SingleClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Need to be set as 'http://localhost:3000' in client.
      */
     public SingleClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = endpoint;
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(SingleClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/versions/notversioned/implementation/NotVersionedClientImpl.java
Patch:
@@ -59,8 +59,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Need to be set as 'http://localhost:3000' in client.
      */
     public NotVersionedClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = endpoint;
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(NotVersionedClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/server/versions/versioned/implementation/VersionedClientImpl.java
Patch:
@@ -75,9 +75,9 @@ public HttpPipeline getHttpPipeline() {
      * @param serviceVersion Service version.
      */
     public VersionedClientImpl(HttpPipeline httpPipeline, String endpoint, VersionedServiceVersion serviceVersion) {
-        this.endpoint = endpoint;
-        this.serviceVersion = VersionedServiceVersion.getLatest();
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
+        this.serviceVersion = serviceVersion;
         this.service = RestProxy.create(VersionedClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/specialwords/implementation/SpecialWordsClientImpl.java
Patch:
@@ -99,8 +99,8 @@ public ParametersImpl getParameters() {
      * @param endpoint Service host.
      */
     public SpecialWordsClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.models = new ModelsImpl(this);
         this.modelProperties = new ModelPropertiesImpl(this);
         this.operations = new OperationsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/array/implementation/ArrayClientImpl.java
Patch:
@@ -239,8 +239,8 @@ public NullableModelValuesImpl getNullableModelValues() {
      * @param endpoint Service host.
      */
     public ArrayClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.int32Values = new Int32ValuesImpl(this);
         this.int64Values = new Int64ValuesImpl(this);
         this.booleanValues = new BooleanValuesImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/dictionary/implementation/DictionaryClientImpl.java
Patch:
@@ -197,8 +197,8 @@ public NullableFloatValuesImpl getNullableFloatValues() {
      * @param endpoint Service host.
      */
     public DictionaryClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.int32Values = new Int32ValuesImpl(this);
         this.int64Values = new Int64ValuesImpl(this);
         this.booleanValues = new BooleanValuesImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/enums/extensible/implementation/ExtensibleClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public StringOperationsImpl getStringOperations() {
      * @param endpoint Service host.
      */
     public ExtensibleClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringOperations = new StringOperationsImpl(this);
     }
 }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/enums/fixed/implementation/FixedClientImpl.java
Patch:
@@ -57,8 +57,8 @@ public StringOperationsImpl getStringOperations() {
      * @param endpoint Service host.
      */
     public FixedClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringOperations = new StringOperationsImpl(this);
     }
 }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/empty/implementation/EmptyClientImpl.java
Patch:
@@ -62,8 +62,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public EmptyClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(EmptyClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/enumdiscriminator/implementation/EnumDiscriminatorClientImpl.java
Patch:
@@ -62,8 +62,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public EnumDiscriminatorClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(EnumDiscriminatorClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/nesteddiscriminator/implementation/NestedDiscriminatorClientImpl.java
Patch:
@@ -61,8 +61,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public NestedDiscriminatorClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(NestedDiscriminatorClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/notdiscriminated/implementation/NotDiscriminatedClientImpl.java
Patch:
@@ -61,8 +61,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public NotDiscriminatedClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(NotDiscriminatedClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/recursive/implementation/RecursiveClientImpl.java
Patch:
@@ -61,8 +61,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public RecursiveClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(RecursiveClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/inheritance/singlediscriminator/implementation/SingleDiscriminatorClientImpl.java
Patch:
@@ -62,8 +62,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public SingleDiscriminatorClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(SingleDiscriminatorClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/usage/implementation/UsageClientImpl.java
Patch:
@@ -62,8 +62,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public UsageClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(UsageClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/model/visibility/implementation/VisibilityClientImpl.java
Patch:
@@ -62,8 +62,8 @@ public HttpPipeline getHttpPipeline() {
      * @param endpoint Service host.
      */
     public VisibilityClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.service = RestProxy.create(VisibilityClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/additionalproperties/implementation/AdditionalPropertiesClientImpl.java
Patch:
@@ -491,8 +491,8 @@ public SpreadRecordNonDiscriminatedUnion3sImpl getSpreadRecordNonDiscriminatedUn
      * @param endpoint Service host.
      */
     public AdditionalPropertiesClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.extendsUnknowns = new ExtendsUnknownsImpl(this);
         this.extendsUnknownDeriveds = new ExtendsUnknownDerivedsImpl(this);
         this.extendsUnknownDiscriminateds = new ExtendsUnknownDiscriminatedsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/nullable/implementation/NullableClientImpl.java
Patch:
@@ -141,8 +141,8 @@ public CollectionsStringsImpl getCollectionsStrings() {
      * @param endpoint Service host.
      */
     public NullableClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringOperations = new StringOperationsImpl(this);
         this.bytes = new BytesImpl(this);
         this.datetimeOperations = new DatetimeOperationsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/optional/implementation/OptionalClientImpl.java
Patch:
@@ -267,8 +267,8 @@ public RequiredAndOptionalsImpl getRequiredAndOptionals() {
      * @param endpoint Service host.
      */
     public OptionalClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringOperations = new StringOperationsImpl(this);
         this.bytes = new BytesImpl(this);
         this.datetimeOperations = new DatetimeOperationsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/property/valuetypes/implementation/ValueTypesClientImpl.java
Patch:
@@ -449,8 +449,8 @@ public UnionEnumValuesImpl getUnionEnumValues() {
      * @param endpoint Service host.
      */
     public ValueTypesClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.booleanOperations = new BooleanOperationsImpl(this);
         this.stringOperations = new StringOperationsImpl(this);
         this.bytes = new BytesImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/scalar/implementation/ScalarClientImpl.java
Patch:
@@ -141,8 +141,8 @@ public Decimal128VerifiesImpl getDecimal128Verifies() {
      * @param endpoint Service host.
      */
     public ScalarClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringOperations = new StringOperationsImpl(this);
         this.booleanOperations = new BooleanOperationsImpl(this);
         this.unknowns = new UnknownsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/type/union/implementation/UnionClientImpl.java
Patch:
@@ -183,8 +183,8 @@ public MixedTypesImpl getMixedTypes() {
      * @param endpoint Service host.
      */
     public UnionClientImpl(HttpPipeline httpPipeline, String endpoint) {
-        this.endpoint = "http://localhost:3000";
         this.httpPipeline = httpPipeline;
+        this.endpoint = endpoint;
         this.stringsOnlies = new StringsOnliesImpl(this);
         this.stringExtensibles = new StringExtensiblesImpl(this);
         this.stringExtensibleNameds = new StringExtensibleNamedsImpl(this);

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/added/implementation/AddedClientImpl.java
Patch:
@@ -109,10 +109,10 @@ public InterfaceV2sImpl getInterfaceV2s() {
      */
     public AddedClientImpl(HttpPipeline httpPipeline, String endpoint, Versions version,
         AddedServiceVersion serviceVersion) {
+        this.httpPipeline = httpPipeline;
         this.endpoint = endpoint;
         this.version = version;
-        this.serviceVersion = AddedServiceVersion.getLatest();
-        this.httpPipeline = httpPipeline;
+        this.serviceVersion = serviceVersion;
         this.interfaceV2s = new InterfaceV2sImpl(this);
         this.service = RestProxy.create(AddedClientService.class, this.httpPipeline);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/madeoptional/implementation/MadeOptionalClientImpl.java
Patch:
@@ -94,10 +94,10 @@ public HttpPipeline getHttpPipeline() {
      */
     public MadeOptionalClientImpl(HttpPipeline httpPipeline, String endpoint, Versions version,
         MadeOptionalServiceVersion serviceVersion) {
+        this.httpPipeline = httpPipeline;
         this.endpoint = endpoint;
         this.version = version;
-        this.serviceVersion = MadeOptionalServiceVersion.getLatest();
-        this.httpPipeline = httpPipeline;
+        this.serviceVersion = serviceVersion;
         this.service = RestProxy.create(MadeOptionalClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/removed/implementation/RemovedClientImpl.java
Patch:
@@ -95,10 +95,10 @@ public HttpPipeline getHttpPipeline() {
      */
     public RemovedClientImpl(HttpPipeline httpPipeline, String endpoint, Versions version,
         RemovedServiceVersion serviceVersion) {
+        this.httpPipeline = httpPipeline;
         this.endpoint = endpoint;
         this.version = version;
-        this.serviceVersion = RemovedServiceVersion.getLatest();
-        this.httpPipeline = httpPipeline;
+        this.serviceVersion = serviceVersion;
         this.service = RestProxy.create(RemovedClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/renamedfrom/implementation/RenamedFromClientImpl.java
Patch:
@@ -109,10 +109,10 @@ public NewInterfacesImpl getNewInterfaces() {
      */
     public RenamedFromClientImpl(HttpPipeline httpPipeline, String endpoint, Versions version,
         RenamedFromServiceVersion serviceVersion) {
+        this.httpPipeline = httpPipeline;
         this.endpoint = endpoint;
         this.version = version;
-        this.serviceVersion = RenamedFromServiceVersion.getLatest();
-        this.httpPipeline = httpPipeline;
+        this.serviceVersion = serviceVersion;
         this.newInterfaces = new NewInterfacesImpl(this);
         this.service = RestProxy.create(RenamedFromClientService.class, this.httpPipeline);
     }

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/returntypechangedfrom/implementation/ReturnTypeChangedFromClientImpl.java
Patch:
@@ -93,10 +93,10 @@ public HttpPipeline getHttpPipeline() {
      */
     public ReturnTypeChangedFromClientImpl(HttpPipeline httpPipeline, String endpoint, Versions version,
         ReturnTypeChangedFromServiceVersion serviceVersion) {
+        this.httpPipeline = httpPipeline;
         this.endpoint = endpoint;
         this.version = version;
-        this.serviceVersion = ReturnTypeChangedFromServiceVersion.getLatest();
-        this.httpPipeline = httpPipeline;
+        this.serviceVersion = serviceVersion;
         this.service = RestProxy.create(ReturnTypeChangedFromClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator-clientcore-test/src/main/java/versioning/typechangedfrom/implementation/TypeChangedFromClientImpl.java
Patch:
@@ -95,10 +95,10 @@ public HttpPipeline getHttpPipeline() {
      */
     public TypeChangedFromClientImpl(HttpPipeline httpPipeline, String endpoint, Versions version,
         TypeChangedFromServiceVersion serviceVersion) {
+        this.httpPipeline = httpPipeline;
         this.endpoint = endpoint;
         this.version = version;
-        this.serviceVersion = TypeChangedFromServiceVersion.getLatest();
-        this.httpPipeline = httpPipeline;
+        this.serviceVersion = serviceVersion;
         this.service = RestProxy.create(TypeChangedFromClientService.class, this.httpPipeline);
     }
 

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/Main.java
Patch:
@@ -43,6 +43,7 @@
 public class Main {
     private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);
     private static final String DEFAULT_OUTPUT_DIR = "http-client-generator-test/tsp-output/";
+    // private static final String DEFAULT_OUTPUT_DIR = "http-client-generator-clientcore-test/tsp-output/";
 
     private static Yaml yaml = null;
 

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/util/ModelTestCaseUtil.java
Patch:
@@ -98,6 +98,8 @@ public static Object jsonFromType(int depth, IType type) {
             return RANDOM.nextInt() & Integer.MAX_VALUE;
         } else if (type.asNullable() == ClassType.LONG) {
             return RANDOM.nextLong() & Long.MAX_VALUE;
+        } else if (type.asNullable() == ClassType.BIG_DECIMAL) {
+            return RANDOM.nextLong() & Long.MAX_VALUE;
         } else if (type.asNullable() == ClassType.FLOAT) {
             return RANDOM.nextFloat() * 100;
         } else if (type.asNullable() == ClassType.DOUBLE) {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/ClientMethodMapper.java
Patch:
@@ -167,7 +167,7 @@ private List<ClientMethod> createClientMethods(Operation operation, boolean isPr
         ClientMethod.Builder builder = getClientMethodBuilder()
             .clientReference((operation.getOperationGroup() == null
                 || operation.getOperationGroup().getLanguage().getJava().getName().isEmpty()) ? "this" : "this.client")
-            .setCrossLanguageDefinitionId(operation.getCrossLanguageDefinitionId());
+            .setCrossLanguageDefinitionId(SchemaUtil.getCrossLanguageDefinitionId(operation));
 
         // merge summary and description
         String summary = operation.getSummary();

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/MapperUtils.java
Patch:
@@ -120,7 +120,7 @@ public static IType createEnumType(ChoiceSchema enumType, boolean expandable, bo
                 .implementationDetails(
                     new ImplementationDetails.Builder().usages(SchemaUtil.mapSchemaContext(enumType.getUsage()))
                         .build())
-                .crossLanguageDefinitionId(enumType.getCrossLanguageDefinitionId())
+                .crossLanguageDefinitionId(SchemaUtil.getCrossLanguageDefinitionId(enumType))
                 .fromMethodName(deserializationMethodName)
                 .toMethodName(serializationMethodName)
                 .build();

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/MethodGroupMapper.java
Patch:
@@ -17,6 +17,7 @@
 import com.microsoft.typespec.http.client.generator.core.util.ClientModelUtil;
 import com.microsoft.typespec.http.client.generator.core.util.CodeNamer;
 import com.microsoft.typespec.http.client.generator.core.util.MethodUtil;
+import com.microsoft.typespec.http.client.generator.core.util.SchemaUtil;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -165,6 +166,8 @@ private MethodGroupClient createMethodGroupClient(OperationGroup methodGroup,
                 .collect(Collectors.toList()));
         }
 
+        builder.crossLanguageDefinitionId(SchemaUtil.getCrossLanguageDefinitionId(methodGroup));
+
         return builder.build();
     }
 

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/ModelMapper.java
Patch:
@@ -350,7 +350,7 @@ public ClientModel map(ObjectSchema compositeType) {
 
             builder.properties(properties);
             builder.propertyReferences(propertyReferences);
-            builder.crossLanguageDefinitionId(compositeType.getCrossLanguageDefinitionId());
+            builder.crossLanguageDefinitionId(SchemaUtil.getCrossLanguageDefinitionId(compositeType));
 
             result = builder.build();
 

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/android/AndroidMethodGroupClient.java
Patch:
@@ -19,7 +19,7 @@ protected AndroidMethodGroupClient(String packageKeyword, String className, Stri
             classBaseName != null
                 ? classBaseName
                 : (className.endsWith("Impl") ? className.substring(0, className.length() - 4) : className),
-            null);
+            null, null);
     }
 
     @Override

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/util/ClientModelUtil.java
Patch:
@@ -86,7 +86,7 @@ public static void getAsyncSyncClients(Client client, ServiceClient serviceClien
 
             AsyncSyncClient.Builder builder = new AsyncSyncClient.Builder().packageName(packageName)
                 .serviceClient(serviceClient)
-                .crossLanguageDefinitionId(client.getCrossLanguageDefinitionId());
+                .crossLanguageDefinitionId(SchemaUtil.getCrossLanguageDefinitionId(client));
 
             final List<ConvenienceMethod> convenienceMethods = client.getOperationGroups()
                 .stream()
@@ -117,7 +117,8 @@ public static void getAsyncSyncClients(Client client, ServiceClient serviceClien
         for (MethodGroupClient methodGroupClient : serviceClient.getMethodGroupClients()) {
             AsyncSyncClient.Builder builder = new AsyncSyncClient.Builder().packageName(packageName)
                 .serviceClient(serviceClient)
-                .methodGroupClient(methodGroupClient);
+                .methodGroupClient(methodGroupClient)
+                .crossLanguageDefinitionId(methodGroupClient.getCrossLanguageDefinitionId());
 
             final List<ConvenienceMethod> convenienceMethods = client.getOperationGroups()
                 .stream()

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/mapper/TypeSpecServiceClientMapper.java
Patch:
@@ -86,7 +86,7 @@ public ServiceClient map(Client client, CodeModel codeModel) {
 
         processPipelinePolicyDetails(builder, client);
 
-        builder.crossLanguageDefinitionId(client.getCrossLanguageDefinitionId());
+        builder.crossLanguageDefinitionId(SchemaUtil.getCrossLanguageDefinitionId(client));
 
         List<ClientAccessorMethod> clientAccessorMethods = new ArrayList<>();
         for (Client subClient : client.getSubClients()) {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/ProxyMethodMapper.java
Patch:
@@ -99,6 +99,7 @@ public Map<Request, List<ProxyMethod>> map(Operation operation) {
         builder.responseExpectedStatusCodes(expectedStatusCodes);
 
         IType responseBodyType = MapperUtils.handleResponseSchema(operation, settings);
+        // unbranded would use the model, instead of BinaryData, as return type
         if (settings.isDataPlaneClient() && settings.isBranded()) {
             builder.rawResponseBodyType(responseBodyType);
             responseBodyType = SchemaUtil.removeModelFromResponse(responseBodyType, operation);

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/ClassType.java
Patch:
@@ -451,7 +451,9 @@ private static ClassType.Builder getClassTypeBuilder(Class<?> classKey) {
     public static final ClassType INPUT_STREAM = new ClassType.Builder(false).knownClass(InputStream.class).build();
 
     public static final ClassType CONTEXT = ClassType.getClassTypeBuilder(Context.class)
-        .defaultValueExpressionConverter(epr -> "com.azure.core.util.Context.NONE")
+        .defaultValueExpressionConverter(
+            epr -> (JavaSettings.getInstance().isBranded() ? "com.azure.core.util." : "io.clientcore.core.util.")
+                + TemplateUtil.getContextNone())
         .build();
 
     public static final ClassType ANDROID_CONTEXT

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ClientMethodTemplateBase.java
Patch:
@@ -86,7 +86,7 @@ protected static void generateProtocolMethodJavadoc(ClientMethod clientMethod, J
 
             // Response body
             IType responseBodyType;
-            if (JavaSettings.getInstance().isDataPlaneClient()) {
+            if (JavaSettings.getInstance().isDataPlaneClient() && JavaSettings.getInstance().isBranded()) {
                 // special handling for paging method
                 if (clientMethod.getType().isPaging()) {
                     String itemName = clientMethod.getMethodPageDetails().getItemName();

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/example/ProtocolExampleWriter.java
Patch:
@@ -30,6 +30,7 @@
 import com.microsoft.typespec.http.client.generator.core.model.javamodel.JavaBlock;
 import com.microsoft.typespec.http.client.generator.core.util.CodeNamer;
 import com.microsoft.typespec.http.client.generator.core.util.ModelExampleUtil;
+import com.microsoft.typespec.http.client.generator.core.util.TemplateUtil;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -222,7 +223,7 @@ public ProtocolExampleWriter(ProtocolExample protocolExample) {
                 if (parameter.getClientType() == ClassType.REQUEST_OPTIONS) {
                     params.set(i, "requestOptions");
                 } else if (parameter.getClientType() == ClassType.CONTEXT) {
-                    params.set(i, "Context.NONE");
+                    params.set(i, TemplateUtil.getContextNone());
                 }
             }
             String methodCall = String.format("%s.%s(%s)", clientVarName, method.getName(), String.join(", ", params));

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/util/ModelUtil.java
Patch:
@@ -3,6 +3,7 @@
 
 package com.microsoft.typespec.http.client.generator.util;
 
+import com.microsoft.typespec.http.client.generator.core.extension.plugin.JavaSettings;
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ClassType;
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ClientModel;
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ClientResponse;
@@ -12,13 +13,13 @@
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.UnionModel;
 import com.microsoft.typespec.http.client.generator.core.util.ClientModelUtil;
 
-public class ModelUtil {
+public final class ModelUtil {
 
     public static boolean isGeneratingModel(ClientModel model) {
         return model.getImplementationDetails() != null
             && (model.getImplementationDetails().isPublic() || model.getImplementationDetails().isInternal())
             && !(isExternalModel(model.getImplementationDetails()))
-            && !(isPagedModel(model.getImplementationDetails()));
+            && !(JavaSettings.getInstance().isBranded() && isPagedModel(model.getImplementationDetails()));
     }
 
     public static boolean isGeneratingModel(EnumType model) {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/PomTemplate.java
Patch:
@@ -216,17 +216,17 @@ protected void writeStandAlonePlugins(XmlBlock pluginsBlock) {
         pluginsBlock.block("plugin", pluginBlock -> {
             pluginBlock.tag("groupId", "org.apache.maven.plugins");
             pluginBlock.tag("artifactId", "maven-compiler-plugin");
-            pluginBlock.tag("version", "3.10.1");
+            pluginBlock.tag("version", "3.13.0");
             pluginBlock.block("configuration", configurationBlock -> {
-                configurationBlock.tag("release", "11");
+                configurationBlock.tag("release", JavaSettings.getInstance().isBranded() ? "11" : "17");
             });
         });
 
         // maven-source-plugin
         pluginsBlock.block("plugin", pluginBlock -> {
             pluginBlock.tag("groupId", "org.apache.maven.plugins");
             pluginBlock.tag("artifactId", "maven-source-plugin");
-            pluginBlock.tag("version", "3.3.0");
+            pluginBlock.tag("version", "3.3.1");
             pluginBlock.block("executions", executionsBlock -> {
                 executionsBlock.block("execution", executionBlock -> {
                     executionBlock.tag("id", "attach-sources");

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/RelativeModelInOperationAsyncClient.java
Patch:
@@ -80,7 +80,7 @@ Mono<Response<BinaryData>> operationWithResponse(String name, RequestOptions req
     }
 
     /**
-     * Expected query parameter: kind= "real"
+     * Expected query parameter: kind="real"
      * Expected response body:
      * ```json
      * {
@@ -147,7 +147,7 @@ Mono<OuterModel> operation(String name) {
     }
 
     /**
-     * Expected query parameter: kind= "real"
+     * Expected query parameter: kind="real"
      * Expected response body:
      * ```json
      * {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/RelativeModelInOperationClient.java
Patch:
@@ -77,7 +77,7 @@ Response<BinaryData> operationWithResponse(String name, RequestOptions requestOp
     }
 
     /**
-     * Expected query parameter: kind= "real"
+     * Expected query parameter: kind="real"
      * Expected response body:
      * ```json
      * {
@@ -141,7 +141,7 @@ OuterModel operation(String name) {
     }
 
     /**
-     * Expected query parameter: kind= "real"
+     * Expected query parameter: kind="real"
      * Expected response body:
      * ```json
      * {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/RelativeModelInOperationsImpl.java
Patch:
@@ -177,7 +177,7 @@ public Response<BinaryData> operationWithResponse(String name, RequestOptions re
     }
 
     /**
-     * Expected query parameter: kind= "real"
+     * Expected query parameter: kind="real"
      * Expected response body:
      * ```json
      * {
@@ -213,7 +213,7 @@ public Mono<Response<BinaryData>> discriminatorWithResponseAsync(String kind, Re
     }
 
     /**
-     * Expected query parameter: kind= "real"
+     * Expected query parameter: kind="real"
      * Expected response body:
      * ```json
      * {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/payload/pageable/models/User.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package payload.pageable.models;
+package azure.payload.pageable.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/pageable/PageableClientBuilder.java
Patch:
@@ -270,7 +270,7 @@ private HttpPipeline createHttpPipeline() {
      */
     @Generated
     public PageableAsyncClient buildAsyncClient() {
-        return new PageableAsyncClient(buildInnerClient());
+        return new PageableAsyncClient(buildInnerClient().getServerDrivenPaginations());
     }
 
     /**
@@ -280,7 +280,7 @@ public PageableAsyncClient buildAsyncClient() {
      */
     @Generated
     public PageableClient buildClient() {
-        return new PageableClient(buildInnerClient());
+        return new PageableClient(buildInnerClient().getServerDrivenPaginations());
     }
 
     private static final ClientLogger LOGGER = new ClientLogger(PageableClientBuilder.class);

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/pageable/implementation/package-info.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * <!-- start generated doc -->
  * Package containing the implementations for Pageable.
- * Test describing pageable.
+ * Test for pageable payload.
  * <!-- end generated doc -->
  */
 package payload.pageable.implementation;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/pageable/models/package-info.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * <!-- start generated doc -->
  * Package containing the data models for Pageable.
- * Test describing pageable.
+ * Test for pageable payload.
  * <!-- end generated doc -->
  */
 package payload.pageable.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/pageable/package-info.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * <!-- start generated doc -->
  * Package containing the classes for Pageable.
- * Test describing pageable.
+ * Test for pageable payload.
  * <!-- end generated doc -->
  */
 package payload.pageable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/removed/models/Versions.java
Patch:
@@ -9,7 +9,7 @@
  */
 public enum Versions {
     /**
-     * The original version v1.
+     * The version v1.
      */
     V1("v1"),
 
@@ -19,7 +19,7 @@ public enum Versions {
     V2PREVIEW("v2preview"),
 
     /**
-     * The latest version v2.
+     * The version v2.
      */
     V2("v2");
 

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/_specs_/azure/core/model/ModelClientTests.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.jupiter.api.Test;
 
 public class ModelClientTests {
-    ModelClient client = new ModelClientBuilder().buildClient();
+    private final ModelClient client = new ModelClientBuilder().buildClient();
 
     @Test
     public void get() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/azure/payload/pageable/PageableTests.java
Patch:
@@ -1,16 +1,16 @@
 // Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT License.
 
-package payload.pageable;
+package azure.payload.pageable;
 
+import azure.payload.pageable.models.User;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.http.rest.PagedIterable;
 import java.util.Arrays;
 import java.util.HashSet;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
-import payload.pageable.models.User;
 
 public class PageableTests {
 

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/azure/payload/pageable/generated/PageableClientTestBase.java
Patch:
@@ -2,19 +2,19 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package payload.pageable.generated;
+package azure.payload.pageable.generated;
 
 // The Java test files under 'generated' package are generated for your reference.
 // If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
 // See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.
 
+import azure.payload.pageable.PageableClient;
+import azure.payload.pageable.PageableClientBuilder;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.test.TestMode;
 import com.azure.core.test.TestProxyTestBase;
 import com.azure.core.util.Configuration;
-import payload.pageable.PageableClient;
-import payload.pageable.PageableClientBuilder;
 
 class PageableClientTestBase extends TestProxyTestBase {
     protected PageableClient pageableClient;

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/org/utils/FileUtils.java
Patch:
@@ -14,11 +14,11 @@ private FileUtils() {
     }
 
     public static Path getJpgFile() {
-        return Paths.get("node_modules/@azure-tools/cadl-ranch-specs/assets/image.jpg");
+        return Paths.get("node_modules/@typespec/http-specs/assets/image.jpg");
     }
 
     public static Path getPngFile() {
-        return Paths.get("node_modules/@azure-tools/cadl-ranch-specs/assets/image.png");
+        return Paths.get("node_modules/@typespec/http-specs/assets/image.png");
     }
 
     public static byte[] getJpgBytes() {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/ClassType.java
Patch:
@@ -143,6 +143,7 @@ public String getGenericClass() {
             put(SimpleResponse.class, new ClassDetails(SimpleResponse.class, "io.clientcore.core.http.SimpleResponse"));
             put(ExpandableStringEnum.class,
                 new ClassDetails(ExpandableStringEnum.class, "io.clientcore.core.util.ExpandableEnum"));
+            put(ExpandableEnum.class, new ClassDetails(ExpandableEnum.class, "io.clientcore.core.util.ExpandableEnum"));
             put(HttpResponseException.class, new ClassDetails(HttpResponseException.class,
                 "io.clientcore.core.http.exception.HttpResponseException"));
             put(HttpTrait.class, new ClassDetails(HttpTrait.class, "io.clientcore.core.models.traits.HttpTrait"));

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/EnumType.java
Patch:
@@ -120,8 +120,7 @@ public final String defaultValueExpression(String sourceExpression) {
                     return getName() + "." + enumValue.getName();
                 }
             }
-            return String.format("%1$s.from%2$s(%3$s)", getName(),
-                CodeNamer.toPascalCase(this.getElementType().toString()),
+            return String.format("%1$s.%2$s(%3$s)", getName(), getFromMethodName(),
                 this.getElementType().defaultValueExpression(sourceExpression));
         } else {
             for (ClientEnumValue enumValue : this.getValues()) {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/ExternalPackage.java
Patch:
@@ -8,7 +8,7 @@
 public class ExternalPackage {
 
     public static final String CLIENTCORE_PACKAGE_NAME = "io.clientcore.core";
-    public static final String CLIENTCORE_JSON_PACKAGE_NAME = "io.clientcore.core.json";
+    public static final String CLIENTCORE_JSON_PACKAGE_NAME = "io.clientcore.core.serialization.json";
 
     public static final String AZURE_CORE_PACKAGE_NAME = "com.azure.core";
     public static final String AZURE_JSON_PACKAGE_NAME = "com.azure.json";

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/PomMapper.java
Patch:
@@ -78,8 +78,6 @@ private Pom createGenericPom(Project project) {
         List<String> dependencyIdentifiers = new ArrayList<>();
         // for generic pom, stream style is always true
         addDependencyIdentifier(dependencyIdentifiers, addedDependencyPrefixes, Project.Dependency.CLIENTCORE, false);
-        addDependencyIdentifier(dependencyIdentifiers, addedDependencyPrefixes, Project.Dependency.CLIENTCORE_JSON,
-            false);
 
         // merge dependencies in POM and dependencies added above
         dependencyIdentifiers.addAll(project.getPomDependencyIdentifiers()

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/armresourceprovider/fluent/models/OperationInner.java
Patch:
@@ -32,7 +32,7 @@ public final class OperationInner {
     /*
      * Localized display information for this particular operation.
      */
-    @JsonProperty(value = "display", access = JsonProperty.Access.WRITE_ONLY)
+    @JsonProperty(value = "display")
     private OperationDisplay display;
 
     /*
@@ -45,7 +45,7 @@ public final class OperationInner {
     /*
      * Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
      */
-    @JsonProperty(value = "actionType")
+    @JsonProperty(value = "actionType", access = JsonProperty.Access.WRITE_ONLY)
     private ActionType actionType;
 
     /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/visibility/VisibilityWriteAsyncClient.java
Patch:
@@ -46,6 +46,7 @@ public final class VisibilityWriteAsyncClient {
      * <pre>
      * {@code
      * {
+     *     secretName: String (Required)
      *     name: String (Required)
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/visibility/VisibilityWriteClient.java
Patch:
@@ -44,6 +44,7 @@ public final class VisibilityWriteClient {
      * <pre>
      * {@code
      * {
+     *     secretName: String (Required)
      *     name: String (Required)
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/visibility/implementation/VisibilityWritesImpl.java
Patch:
@@ -86,6 +86,7 @@ Response<BinaryData> createSync(@HostParam("endpoint") String endpoint,
      * <pre>
      * {@code
      * {
+     *     secretName: String (Required)
      *     name: String (Required)
      * }
      * }
@@ -126,6 +127,7 @@ public Mono<Response<BinaryData>> createWithResponseAsync(BinaryData dog, Reques
      * <pre>
      * {@code
      * {
+     *     secretName: String (Required)
      *     name: String (Required)
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/visibility/models/ReadDog.java
Patch:
@@ -36,7 +36,7 @@ public final class ReadDog implements JsonSerializable<ReadDog> {
      * @param name the name value to set.
      */
     @Generated
-    public ReadDog(int id, String name) {
+    private ReadDog(int id, String name) {
         this.id = id;
         this.name = name;
     }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ServiceAsyncClientTemplate.java
Patch:
@@ -23,6 +23,7 @@
 import com.microsoft.typespec.http.client.generator.core.model.javamodel.JavaFile;
 import com.microsoft.typespec.http.client.generator.core.model.javamodel.JavaVisibility;
 import com.microsoft.typespec.http.client.generator.core.util.ClientModelUtil;
+import com.microsoft.typespec.http.client.generator.core.util.MethodUtil;
 import com.microsoft.typespec.http.client.generator.core.util.ModelNamer;
 import com.microsoft.typespec.http.client.generator.core.util.TemplateUtil;
 import java.util.HashSet;
@@ -241,7 +242,7 @@ static void writeSubClientAccessors(ServiceClient serviceClient, JavaClass class
             classBlock.javadocComment(comment -> {
                 comment.description("Gets an instance of " + subClientClassName + " class.");
                 for (ClientMethodParameter property : methodParameters) {
-                    comment.param(property.getName(), property.getDescription());
+                    comment.param(property.getName(), MethodUtil.methodParameterDescriptionOrDefault(property));
                 }
                 comment.methodReturns("an instance of " + subClientClassName + "class");
             });

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ServiceClientTemplate.java
Patch:
@@ -19,6 +19,7 @@
 import com.microsoft.typespec.http.client.generator.core.template.prototype.MethodTemplate;
 import com.microsoft.typespec.http.client.generator.core.util.ClientModelUtil;
 import com.microsoft.typespec.http.client.generator.core.util.CodeNamer;
+import com.microsoft.typespec.http.client.generator.core.util.MethodUtil;
 import com.microsoft.typespec.http.client.generator.core.util.ModelNamer;
 import com.microsoft.typespec.http.client.generator.core.util.TemplateUtil;
 import java.util.ArrayList;
@@ -386,7 +387,7 @@ private static void writeClientAccessorMethods(JavaClass classBlock,
             classBlock.javadocComment(comment -> {
                 comment.description("Gets an instance of " + subClientName + " class.");
                 for (ClientMethodParameter parameter : methodParameters) {
-                    comment.param(parameter.getName(), parameter.getDescription());
+                    comment.param(parameter.getName(), MethodUtil.methodParameterDescriptionOrDefault(parameter));
                 }
                 comment.methodReturns("an instance of " + subClientName + "class");
             });

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/clientinitialization/ClientInitializationAsyncClient.java
Patch:
@@ -29,7 +29,7 @@ public final class ClientInitializationAsyncClient {
     /**
      * Gets an instance of SubAsyncClient class.
      * 
-     * @param name
+     * @param name The name parameter.
      * @return an instance of SubAsyncClientclass.
      */
     public SubAsyncClient getSubAsyncClient(String name) {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/clientinitialization/ClientInitializationClient.java
Patch:
@@ -29,7 +29,7 @@ public final class ClientInitializationClient {
     /**
      * Gets an instance of SubClient class.
      * 
-     * @param name
+     * @param name The name parameter.
      * @return an instance of SubClientclass.
      */
     public SubClient getSubClient(String name) {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/clientinitialization/implementation/ClientInitializationClientImpl.java
Patch:
@@ -95,7 +95,7 @@ public ClientInitializationClientImpl(HttpPipeline httpPipeline, SerializerAdapt
     /**
      * Gets an instance of SubClientImpl class.
      * 
-     * @param name
+     * @param name The name parameter.
      * @return an instance of SubClientImplclass.
      */
     public SubClientImpl getSubClient(String name) {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ExceptionTemplate.java
Patch:
@@ -3,6 +3,7 @@
 
 package com.microsoft.typespec.http.client.generator.core.template;
 
+import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ClassType;
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ClientException;
 import com.microsoft.typespec.http.client.generator.core.model.javamodel.JavaFile;
 import com.microsoft.typespec.http.client.generator.core.model.javamodel.JavaJavadocComment;
@@ -69,6 +70,6 @@ public final void write(ClientException exception, JavaFile javaFile) {
     }
 
     protected String getHttpResponseImport() {
-        return "com.azure.core.http.HttpResponse";
+        return ClassType.HTTP_RESPONSE.getFullName();
     }
 }

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/TypeSpecPlugin.java
Patch:
@@ -294,6 +294,7 @@ public TypeSpecPlugin(EmitterOptions options, boolean sdkIntegration) {
             SETTINGS_MAP.put("license-header", "SMALL_TYPESPEC");
 
             SETTINGS_MAP.put("sync-methods", "sync-only");
+            SETTINGS_MAP.put("use-default-http-status-code-to-exception-type-mapping", false);
             SETTINGS_MAP.put("generate-samples", false);
             SETTINGS_MAP.put("generate-tests", false);
         }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/ModelMapper.java
Patch:
@@ -663,7 +663,7 @@ private static boolean hasFlattenedProperty(ObjectSchema compositeType,
      * @return Whether the type is predefined.
      */
     protected boolean isPredefinedModel(ClassType compositeType) {
-        if (JavaSettings.getInstance().isDataPlaneClient()) {
+        if (JavaSettings.getInstance().isDataPlaneClient() && JavaSettings.getInstance().isBranded()) {
             // see ObjectMapper.mapPredefinedModel
             // this might be too simplified, and Android might require a different implementation
             return compositeType.getPackage().startsWith(ExternalPackage.CORE.getPackageName() + ".");

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/InternalOperationAsyncClient.java
Patch:
@@ -5,9 +5,9 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.InternalOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.implementation.models.InternalDecoratorModelInInternal;
-import _specs_.azure.clientgenerator.core.access.implementation.models.NoDecoratorModelInInternal;
-import _specs_.azure.clientgenerator.core.access.models.PublicDecoratorModelInInternal;
+import _specs_.azure.clientgenerator.core.access.internaloperation.implementation.models.InternalDecoratorModelInInternal;
+import _specs_.azure.clientgenerator.core.access.internaloperation.implementation.models.NoDecoratorModelInInternal;
+import _specs_.azure.clientgenerator.core.access.internaloperation.models.PublicDecoratorModelInInternal;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/InternalOperationClient.java
Patch:
@@ -5,9 +5,9 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.InternalOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.implementation.models.InternalDecoratorModelInInternal;
-import _specs_.azure.clientgenerator.core.access.implementation.models.NoDecoratorModelInInternal;
-import _specs_.azure.clientgenerator.core.access.models.PublicDecoratorModelInInternal;
+import _specs_.azure.clientgenerator.core.access.internaloperation.implementation.models.InternalDecoratorModelInInternal;
+import _specs_.azure.clientgenerator.core.access.internaloperation.implementation.models.NoDecoratorModelInInternal;
+import _specs_.azure.clientgenerator.core.access.internaloperation.models.PublicDecoratorModelInInternal;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/PublicOperationAsyncClient.java
Patch:
@@ -5,8 +5,8 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.PublicOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.models.NoDecoratorModelInPublic;
-import _specs_.azure.clientgenerator.core.access.models.PublicDecoratorModelInPublic;
+import _specs_.azure.clientgenerator.core.access.publicoperation.models.NoDecoratorModelInPublic;
+import _specs_.azure.clientgenerator.core.access.publicoperation.models.PublicDecoratorModelInPublic;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/PublicOperationClient.java
Patch:
@@ -5,8 +5,8 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.PublicOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.models.NoDecoratorModelInPublic;
-import _specs_.azure.clientgenerator.core.access.models.PublicDecoratorModelInPublic;
+import _specs_.azure.clientgenerator.core.access.publicoperation.models.NoDecoratorModelInPublic;
+import _specs_.azure.clientgenerator.core.access.publicoperation.models.PublicDecoratorModelInPublic;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/RelativeModelInOperationAsyncClient.java
Patch:
@@ -5,8 +5,8 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.RelativeModelInOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.implementation.models.AbstractModel;
-import _specs_.azure.clientgenerator.core.access.implementation.models.OuterModel;
+import _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models.AbstractModel;
+import _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models.OuterModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/RelativeModelInOperationClient.java
Patch:
@@ -5,8 +5,8 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.RelativeModelInOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.implementation.models.AbstractModel;
-import _specs_.azure.clientgenerator.core.access.implementation.models.OuterModel;
+import _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models.AbstractModel;
+import _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models.OuterModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/SharedModelInOperationAsyncClient.java
Patch:
@@ -5,7 +5,7 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.SharedModelInOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.models.SharedModel;
+import _specs_.azure.clientgenerator.core.access.sharedmodelinoperation.models.SharedModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/SharedModelInOperationClient.java
Patch:
@@ -5,7 +5,7 @@
 package _specs_.azure.clientgenerator.core.access;
 
 import _specs_.azure.clientgenerator.core.access.implementation.SharedModelInOperationsImpl;
-import _specs_.azure.clientgenerator.core.access.models.SharedModel;
+import _specs_.azure.clientgenerator.core.access.sharedmodelinoperation.models.SharedModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/internaloperation/implementation/models/InternalDecoratorModelInInternal.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.internaloperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/internaloperation/implementation/models/NoDecoratorModelInInternal.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.internaloperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/internaloperation/models/PublicDecoratorModelInInternal.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.internaloperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/internaloperation/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for internal decorator.
  * <!-- end generated doc -->
  */
-package _specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.internaloperation.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/publicoperation/models/NoDecoratorModelInPublic.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.publicoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/publicoperation/models/PublicDecoratorModelInPublic.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.publicoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/publicoperation/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for internal decorator.
  * <!-- end generated doc -->
  */
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.publicoperation.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/relativemodelinoperation/implementation/models/AbstractModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/relativemodelinoperation/implementation/models/BaseModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/relativemodelinoperation/implementation/models/InnerModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/relativemodelinoperation/implementation/models/OuterModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/relativemodelinoperation/implementation/models/RealModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/sharedmodelinoperation/models/SharedModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.sharedmodelinoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/UsageAsyncClient.java
Patch:
@@ -5,9 +5,9 @@
 package _specs_.azure.clientgenerator.core.usage;
 
 import _specs_.azure.clientgenerator.core.usage.implementation.ModelInOperationsImpl;
-import _specs_.azure.clientgenerator.core.usage.models.InputModel;
-import _specs_.azure.clientgenerator.core.usage.models.OutputModel;
-import _specs_.azure.clientgenerator.core.usage.models.RoundTripModel;
+import _specs_.azure.clientgenerator.core.usage.modelinoperation.models.InputModel;
+import _specs_.azure.clientgenerator.core.usage.modelinoperation.models.OutputModel;
+import _specs_.azure.clientgenerator.core.usage.modelinoperation.models.RoundTripModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/UsageClient.java
Patch:
@@ -5,9 +5,9 @@
 package _specs_.azure.clientgenerator.core.usage;
 
 import _specs_.azure.clientgenerator.core.usage.implementation.ModelInOperationsImpl;
-import _specs_.azure.clientgenerator.core.usage.models.InputModel;
-import _specs_.azure.clientgenerator.core.usage.models.OutputModel;
-import _specs_.azure.clientgenerator.core.usage.models.RoundTripModel;
+import _specs_.azure.clientgenerator.core.usage.modelinoperation.models.InputModel;
+import _specs_.azure.clientgenerator.core.usage.modelinoperation.models.OutputModel;
+import _specs_.azure.clientgenerator.core.usage.modelinoperation.models.RoundTripModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/modelinoperation/models/InputModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.modelinoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/modelinoperation/models/OutputModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.modelinoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/modelinoperation/models/ResultModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.modelinoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/modelinoperation/models/RoundTripModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.modelinoperation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/BasicServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic;
+package azure.example.basic;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/implementation/AzureExampleClientImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic.implementation;
+package azure.example.basic.implementation;
 
-import _specs_.azure.example.basic.BasicServiceVersion;
+import azure.example.basic.BasicServiceVersion;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.HeaderParam;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/implementation/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for loading JSON example and generating sample code.
  * <!-- end generated doc -->
  */
-package _specs_.azure.example.basic.implementation;
+package azure.example.basic.implementation;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/models/ActionRequest.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic.models;
+package azure.example.basic.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.annotation.Generated;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/models/ActionResponse.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic.models;
+package azure.example.basic.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/models/Enum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic.models;
+package azure.example.basic.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.util.ExpandableStringEnum;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/models/Model.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic.models;
+package azure.example.basic.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.annotation.Generated;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for loading JSON example and generating sample code.
  * <!-- end generated doc -->
  */
-package _specs_.azure.example.basic.models;
+package azure.example.basic.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/example/basic/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for loading JSON example and generating sample code.
  * <!-- end generated doc -->
  */
-package _specs_.azure.example.basic;
+package azure.example.basic;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/ClientModelAsyncClient.java
Patch:
@@ -5,8 +5,8 @@
 package client.naming;
 
 import client.naming.implementation.ClientModelsImpl;
-import client.naming.models.ClientModel;
-import client.naming.models.JavaModel;
+import client.naming.model.models.ClientModel;
+import client.naming.model.models.JavaModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/ClientModelClient.java
Patch:
@@ -5,8 +5,8 @@
 package client.naming;
 
 import client.naming.implementation.ClientModelsImpl;
-import client.naming.models.ClientModel;
-import client.naming.models.JavaModel;
+import client.naming.model.models.ClientModel;
+import client.naming.model.models.JavaModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/NamingAsyncClient.java
Patch:
@@ -5,9 +5,9 @@
 package client.naming;
 
 import client.naming.implementation.NamingClientImpl;
-import client.naming.models.ClientNameAndJsonEncodedNameModel;
-import client.naming.models.ClientNameModel;
-import client.naming.models.LanguageClientNameModel;
+import client.naming.property.models.ClientNameAndJsonEncodedNameModel;
+import client.naming.property.models.ClientNameModel;
+import client.naming.property.models.LanguageClientNameModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/NamingClient.java
Patch:
@@ -5,9 +5,9 @@
 package client.naming;
 
 import client.naming.implementation.NamingClientImpl;
-import client.naming.models.ClientNameAndJsonEncodedNameModel;
-import client.naming.models.ClientNameModel;
-import client.naming.models.LanguageClientNameModel;
+import client.naming.property.models.ClientNameAndJsonEncodedNameModel;
+import client.naming.property.models.ClientNameModel;
+import client.naming.property.models.LanguageClientNameModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/UnionEnumAsyncClient.java
Patch:
@@ -5,8 +5,8 @@
 package client.naming;
 
 import client.naming.implementation.UnionEnumsImpl;
-import client.naming.models.ClientExtensibleEnum;
-import client.naming.models.ExtensibleEnum;
+import client.naming.unionenum.models.ClientExtensibleEnum;
+import client.naming.unionenum.models.ExtensibleEnum;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/UnionEnumClient.java
Patch:
@@ -5,8 +5,8 @@
 package client.naming;
 
 import client.naming.implementation.UnionEnumsImpl;
-import client.naming.models.ClientExtensibleEnum;
-import client.naming.models.ExtensibleEnum;
+import client.naming.unionenum.models.ClientExtensibleEnum;
+import client.naming.unionenum.models.ExtensibleEnum;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/model/models/ClientModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.model.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/model/models/JavaModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.model.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/model/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Describe changing names of types in a client with `&#064;clientName`.
  * <!-- end generated doc -->
  */
-package client.naming.models;
+package client.naming.model.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/property/models/ClientNameAndJsonEncodedNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/property/models/ClientNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/property/models/LanguageClientNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/unionenum/models/ClientExtensibleEnum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.unionenum.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.util.ExpandableStringEnum;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/unionenum/models/ExtensibleEnum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.naming.models;
+package client.naming.unionenum.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.util.ExpandableStringEnum;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/anotherclientoperationgroup/subnamespace/Group5AsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.subnamespace;
+package client.structure.anotherclientoperationgroup.subnamespace;
 
-import client.structure.service.implementation.Group5sImpl;
+import client.structure.clientoperationgroup.implementation.Group5sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/anotherclientoperationgroup/subnamespace/Group5Client.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.subnamespace;
+package client.structure.anotherclientoperationgroup.subnamespace;
 
-import client.structure.service.implementation.Group5sImpl;
+import client.structure.clientoperationgroup.implementation.Group5sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/anotherclientoperationgroup/subnamespace/SecondAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.subnamespace;
+package client.structure.anotherclientoperationgroup.subnamespace;
 
-import client.structure.service.implementation.SecondClientImpl;
+import client.structure.clientoperationgroup.implementation.SecondClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/anotherclientoperationgroup/subnamespace/SecondClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.subnamespace;
+package client.structure.anotherclientoperationgroup.subnamespace;
 
-import client.structure.service.implementation.SecondClientImpl;
+import client.structure.clientoperationgroup.implementation.SecondClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/anotherclientoperationgroup/subnamespace/SecondClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.subnamespace;
+package client.structure.anotherclientoperationgroup.subnamespace;
 
-import client.structure.service.implementation.SecondClientImpl;
+import client.structure.clientoperationgroup.implementation.SecondClientImpl;
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
@@ -53,7 +53,7 @@ public final class SecondClientBuilder implements HttpTrait<SecondClientBuilder>
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("client-structure-service.properties");
+        = CoreUtils.getProperties("client-structure-clientoperationgroup.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/anotherclientoperationgroup/subnamespace/package-info.java
Patch:
@@ -15,4 +15,4 @@
  * 6. have two clients with a hierarchy relation.
  * <!-- end generated doc -->
  */
-package client.structure.service.subnamespace;
+package client.structure.anotherclientoperationgroup.subnamespace;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/FirstAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.FirstClientImpl;
+import client.structure.clientoperationgroup.implementation.FirstClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/FirstClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.FirstClientImpl;
+import client.structure.clientoperationgroup.implementation.FirstClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/FirstClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.FirstClientImpl;
+import client.structure.clientoperationgroup.implementation.FirstClientImpl;
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
@@ -59,7 +59,7 @@ public final class FirstClientBuilder implements HttpTrait<FirstClientBuilder>,
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("client-structure-service.properties");
+        = CoreUtils.getProperties("client-structure-clientoperationgroup.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/Group3AsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.Group3sImpl;
+import client.structure.clientoperationgroup.implementation.Group3sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/Group3Client.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.Group3sImpl;
+import client.structure.clientoperationgroup.implementation.Group3sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/Group4AsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.Group4sImpl;
+import client.structure.clientoperationgroup.implementation.Group4sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/Group4Client.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.clientoperationgroup;
 
-import client.structure.service.implementation.Group4sImpl;
+import client.structure.clientoperationgroup.implementation.Group4sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/implementation/FirstClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.clientoperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/implementation/Group3sImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.clientoperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/implementation/Group4sImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.clientoperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/implementation/Group5sImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.clientoperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/clientoperationgroup/implementation/SecondClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.clientoperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/ClientAAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.multiclient;
 
-import client.structure.service.implementation.ClientAClientImpl;
+import client.structure.multiclient.implementation.ClientAClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/ClientAClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.multiclient;
 
-import client.structure.service.implementation.ClientAClientImpl;
+import client.structure.multiclient.implementation.ClientAClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/ClientAClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.multiclient;
 
-import client.structure.service.implementation.ClientAClientImpl;
+import client.structure.multiclient.implementation.ClientAClientImpl;
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
@@ -52,7 +52,7 @@ public final class ClientAClientBuilder implements HttpTrait<ClientAClientBuilde
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("client-structure-service.properties");
+        = CoreUtils.getProperties("client-structure-multiclient.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/ClientBAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.multiclient;
 
-import client.structure.service.implementation.ClientBClientImpl;
+import client.structure.multiclient.implementation.ClientBClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/ClientBClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.multiclient;
 
-import client.structure.service.implementation.ClientBClientImpl;
+import client.structure.multiclient.implementation.ClientBClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/ClientBClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.multiclient;
 
-import client.structure.service.implementation.ClientBClientImpl;
+import client.structure.multiclient.implementation.ClientBClientImpl;
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
@@ -52,7 +52,7 @@ public final class ClientBClientBuilder implements HttpTrait<ClientBClientBuilde
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("client-structure-service.properties");
+        = CoreUtils.getProperties("client-structure-multiclient.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/implementation/ClientAClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.multiclient.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/multiclient/implementation/ClientBClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.multiclient.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/GroupAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.renamedoperation;
 
-import client.structure.service.implementation.GroupsImpl;
+import client.structure.renamedoperation.implementation.GroupsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/GroupClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.renamedoperation;
 
-import client.structure.service.implementation.GroupsImpl;
+import client.structure.renamedoperation.implementation.GroupsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/RenamedOperationAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.renamedoperation;
 
-import client.structure.service.implementation.RenamedOperationClientImpl;
+import client.structure.renamedoperation.implementation.RenamedOperationClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/RenamedOperationClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.renamedoperation;
 
-import client.structure.service.implementation.RenamedOperationClientImpl;
+import client.structure.renamedoperation.implementation.RenamedOperationClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/RenamedOperationClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.renamedoperation;
 
-import client.structure.service.implementation.RenamedOperationClientImpl;
+import client.structure.renamedoperation.implementation.RenamedOperationClientImpl;
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
@@ -57,7 +57,7 @@ public final class RenamedOperationClientBuilder implements HttpTrait<RenamedOpe
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("client-structure-service.properties");
+        = CoreUtils.getProperties("client-structure-renamedoperation.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/implementation/GroupsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.renamedoperation.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/renamedoperation/implementation/RenamedOperationClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.renamedoperation.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/Group1AsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.twooperationgroup;
 
-import client.structure.service.implementation.Group1sImpl;
+import client.structure.twooperationgroup.implementation.Group1sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/Group1Client.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.twooperationgroup;
 
-import client.structure.service.implementation.Group1sImpl;
+import client.structure.twooperationgroup.implementation.Group1sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/Group2AsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.twooperationgroup;
 
-import client.structure.service.implementation.Group2sImpl;
+import client.structure.twooperationgroup.implementation.Group2sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/Group2Client.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.twooperationgroup;
 
-import client.structure.service.implementation.Group2sImpl;
+import client.structure.twooperationgroup.implementation.Group2sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/TwoOperationGroupClientBuilder.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service;
+package client.structure.twooperationgroup;
 
-import client.structure.service.implementation.TwoOperationGroupClientImpl;
 import client.structure.service.models.ClientType;
+import client.structure.twooperationgroup.implementation.TwoOperationGroupClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -53,7 +53,7 @@ public final class TwoOperationGroupClientBuilder implements HttpTrait<TwoOperat
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("client-structure-service.properties");
+        = CoreUtils.getProperties("client-structure-twooperationgroup.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/implementation/Group1sImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.twooperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/implementation/Group2sImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.twooperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/twooperationgroup/implementation/TwoOperationGroupClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package client.structure.service.implementation;
+package client.structure.twooperationgroup.implementation;
 
 import client.structure.service.models.ClientType;
 import com.azure.core.http.HttpPipeline;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/DefaultDurationProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.duration.models;
+package encode.duration.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/Float64SecondsDurationProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.duration.models;
+package encode.duration.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/FloatSecondsDurationArrayProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.duration.models;
+package encode.duration.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/FloatSecondsDurationProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.duration.models;
+package encode.duration.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/ISO8601DurationProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.duration.models;
+package encode.duration.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/Int32SecondsDurationProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.duration.models;
+package encode.duration.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/duration/property/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for encode decorator on duration.
  * <!-- end generated doc -->
  */
-package encode.duration.models;
+package encode.duration.property.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/numeric/NumericAsyncClient.java
Patch:
@@ -17,9 +17,9 @@
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
 import encode.numeric.implementation.PropertiesImpl;
-import encode.numeric.models.SafeintAsStringProperty;
-import encode.numeric.models.Uint32AsStringProperty;
-import encode.numeric.models.Uint8AsStringProperty;
+import encode.numeric.property.models.SafeintAsStringProperty;
+import encode.numeric.property.models.Uint32AsStringProperty;
+import encode.numeric.property.models.Uint8AsStringProperty;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/numeric/NumericClient.java
Patch:
@@ -16,9 +16,9 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import encode.numeric.implementation.PropertiesImpl;
-import encode.numeric.models.SafeintAsStringProperty;
-import encode.numeric.models.Uint32AsStringProperty;
-import encode.numeric.models.Uint8AsStringProperty;
+import encode.numeric.property.models.SafeintAsStringProperty;
+import encode.numeric.property.models.Uint32AsStringProperty;
+import encode.numeric.property.models.Uint8AsStringProperty;
 
 /**
  * Initializes a new instance of the synchronous NumericClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/numeric/property/models/SafeintAsStringProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.numeric.models;
+package encode.numeric.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/numeric/property/models/Uint32AsStringProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.numeric.models;
+package encode.numeric.property.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.annotation.Generated;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/numeric/property/models/Uint8AsStringProperty.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package encode.numeric.models;
+package encode.numeric.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/encode/numeric/property/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for encode decorator on integer.
  * <!-- end generated doc -->
  */
-package encode.numeric.models;
+package encode.numeric.property.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/ExplicitBodyAsyncClient.java
Patch:
@@ -16,8 +16,8 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
+import parameters.basic.explicitbody.models.User;
 import parameters.basic.implementation.ExplicitBodiesImpl;
-import parameters.basic.models.User;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/ExplicitBodyClient.java
Patch:
@@ -15,8 +15,8 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
+import parameters.basic.explicitbody.models.User;
 import parameters.basic.implementation.ExplicitBodiesImpl;
-import parameters.basic.models.User;
 
 /**
  * Initializes a new instance of the synchronous BasicClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/ImplicitBodyAsyncClient.java
Patch:
@@ -17,7 +17,7 @@
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
 import parameters.basic.implementation.ImplicitBodiesImpl;
-import parameters.basic.implementation.models.SimpleRequest;
+import parameters.basic.implicitbody.implementation.models.SimpleRequest;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/ImplicitBodyClient.java
Patch:
@@ -16,7 +16,7 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import parameters.basic.implementation.ImplicitBodiesImpl;
-import parameters.basic.implementation.models.SimpleRequest;
+import parameters.basic.implicitbody.implementation.models.SimpleRequest;
 
 /**
  * Initializes a new instance of the synchronous BasicClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/explicitbody/models/User.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package parameters.basic.models;
+package parameters.basic.explicitbody.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/explicitbody/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for basic parameters cases.
  * <!-- end generated doc -->
  */
-package parameters.basic.models;
+package parameters.basic.explicitbody.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/implicitbody/implementation/models/SimpleRequest.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package parameters.basic.implementation.models;
+package parameters.basic.implicitbody.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/basic/implicitbody/implementation/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for basic parameters cases.
  * <!-- end generated doc -->
  */
-package parameters.basic.implementation.models;
+package parameters.basic.implicitbody.implementation.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/AliasAsyncClient.java
Patch:
@@ -17,8 +17,8 @@
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
 import java.util.List;
+import parameters.spread.alias.implementation.models.SpreadAsRequestBodyRequest;
 import parameters.spread.implementation.AliasImpl;
-import parameters.spread.implementation.models.SpreadAsRequestBodyRequest;
 import parameters.spread.implementation.models.SpreadAsRequestParameterRequest;
 import parameters.spread.implementation.models.SpreadParameterWithInnerAliasRequest;
 import parameters.spread.implementation.models.SpreadParameterWithInnerModelRequest;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/AliasClient.java
Patch:
@@ -16,8 +16,8 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import java.util.List;
+import parameters.spread.alias.implementation.models.SpreadAsRequestBodyRequest;
 import parameters.spread.implementation.AliasImpl;
-import parameters.spread.implementation.models.SpreadAsRequestBodyRequest;
 import parameters.spread.implementation.models.SpreadAsRequestParameterRequest;
 import parameters.spread.implementation.models.SpreadParameterWithInnerAliasRequest;
 import parameters.spread.implementation.models.SpreadParameterWithInnerModelRequest;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/ModelAsyncClient.java
Patch:
@@ -18,7 +18,7 @@
 import com.azure.core.util.FluxUtil;
 import parameters.spread.implementation.ModelsImpl;
 import parameters.spread.implementation.models.SpreadCompositeRequestMixRequest;
-import parameters.spread.models.BodyParameter;
+import parameters.spread.model.models.BodyParameter;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/ModelClient.java
Patch:
@@ -17,7 +17,7 @@
 import com.azure.core.util.BinaryData;
 import parameters.spread.implementation.ModelsImpl;
 import parameters.spread.implementation.models.SpreadCompositeRequestMixRequest;
-import parameters.spread.models.BodyParameter;
+import parameters.spread.model.models.BodyParameter;
 
 /**
  * Initializes a new instance of the synchronous SpreadClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/alias/implementation/models/SpreadAsRequestBodyRequest.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package parameters.spread.implementation.models;
+package parameters.spread.alias.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/model/models/BodyParameter.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package parameters.spread.models;
+package parameters.spread.model.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/parameters/spread/model/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test for the spread operator.
  * <!-- end generated doc -->
  */
-package parameters.spread.models;
+package parameters.spread.model.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/contentnegotiation/DifferentBodyAsyncClient.java
Patch:
@@ -16,8 +16,8 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
+import payload.contentnegotiation.differentbody.models.PngImageAsJson;
 import payload.contentnegotiation.implementation.DifferentBodiesImpl;
-import payload.contentnegotiation.models.PngImageAsJson;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/contentnegotiation/DifferentBodyClient.java
Patch:
@@ -15,8 +15,8 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
+import payload.contentnegotiation.differentbody.models.PngImageAsJson;
 import payload.contentnegotiation.implementation.DifferentBodiesImpl;
-import payload.contentnegotiation.models.PngImageAsJson;
 
 /**
  * Initializes a new instance of the synchronous ContentNegotiationClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/contentnegotiation/differentbody/models/PngImageAsJson.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package payload.contentnegotiation.models;
+package payload.contentnegotiation.differentbody.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/contentnegotiation/differentbody/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Test describing optionality of the request body.
  * <!-- end generated doc -->
  */
-package payload.contentnegotiation.models;
+package payload.contentnegotiation.differentbody.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/multipart/FormDataHttpPartsNonStringAsyncClient.java
Patch:
@@ -16,9 +16,9 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
+import payload.multipart.formdata.httpparts.nonstring.models.FloatRequest;
 import payload.multipart.implementation.FormDataHttpPartsNonStringsImpl;
 import payload.multipart.implementation.MultipartFormDataHelper;
-import payload.multipart.models.FloatRequest;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/multipart/FormDataHttpPartsNonStringClient.java
Patch:
@@ -15,9 +15,9 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
+import payload.multipart.formdata.httpparts.nonstring.models.FloatRequest;
 import payload.multipart.implementation.FormDataHttpPartsNonStringsImpl;
 import payload.multipart.implementation.MultipartFormDataHelper;
-import payload.multipart.models.FloatRequest;
 
 /**
  * Initializes a new instance of the synchronous MultiPartClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/payload/multipart/formdata/httpparts/nonstring/models/FloatRequest.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package payload.multipart.models;
+package payload.multipart.formdata.httpparts.nonstring.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/serialization/encodedname/json/JsonAsyncClient.java
Patch:
@@ -18,7 +18,7 @@
 import com.azure.core.util.FluxUtil;
 import reactor.core.publisher.Mono;
 import serialization.encodedname.json.implementation.PropertiesImpl;
-import serialization.encodedname.json.models.JsonEncodedNameModel;
+import serialization.encodedname.json.property.models.JsonEncodedNameModel;
 
 /**
  * Initializes a new instance of the asynchronous JsonClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/serialization/encodedname/json/JsonClient.java
Patch:
@@ -16,7 +16,7 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import serialization.encodedname.json.implementation.PropertiesImpl;
-import serialization.encodedname.json.models.JsonEncodedNameModel;
+import serialization.encodedname.json.property.models.JsonEncodedNameModel;
 
 /**
  * Initializes a new instance of the synchronous JsonClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/serialization/encodedname/json/property/models/JsonEncodedNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package serialization.encodedname.json.models;
+package serialization.encodedname.json.property.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/serialization/encodedname/json/property/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Projection.
  * <!-- end generated doc -->
  */
-package serialization.encodedname.json.models;
+package serialization.encodedname.json.property.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/ModelPropertiesAsyncClient.java
Patch:
@@ -18,7 +18,7 @@
 import com.azure.core.util.FluxUtil;
 import reactor.core.publisher.Mono;
 import specialwords.implementation.ModelPropertiesImpl;
-import specialwords.models.SameAsModel;
+import specialwords.modelproperties.models.SameAsModel;
 
 /**
  * Initializes a new instance of the asynchronous SpecialWordsClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/ModelPropertiesClient.java
Patch:
@@ -16,7 +16,7 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import specialwords.implementation.ModelPropertiesImpl;
-import specialwords.models.SameAsModel;
+import specialwords.modelproperties.models.SameAsModel;
 
 /**
  * Initializes a new instance of the synchronous SpecialWordsClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/modelproperties/models/SameAsModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.modelproperties.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/And.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/As.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Assert.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Async.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Await.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Break.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/ClassModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Constructor.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Continue.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Def.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Del.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Elif.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Else.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Except.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Exec.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Finally.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/For.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/From.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Global.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/If.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Import.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/In.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Is.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Lambda.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Not.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Or.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Pass.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Raise.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Return.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Try.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/While.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/With.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/Yield.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package specialwords.models;
+package specialwords.models.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/specialwords/models/models/package-info.java
Patch:
@@ -45,4 +45,4 @@
  * ```.
  * <!-- end generated doc -->
  */
-package specialwords.models;
+package specialwords.models.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/removed/RemovedClientBuilder.java
Patch:
@@ -191,13 +191,13 @@ public RemovedClientBuilder endpoint(String endpoint) {
     }
 
     /*
-     * Need to be set as 'v1' or 'v2' in client.
+     * Need to be set as 'v1', 'v2preview' or 'v2' in client.
      */
     @Generated
     private Versions version;
 
     /**
-     * Sets Need to be set as 'v1' or 'v2' in client.
+     * Sets Need to be set as 'v1', 'v2preview' or 'v2' in client.
      * 
      * @param version the version value.
      * @return the RemovedClientBuilder.

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/_specs_/azure/clientgenerator/core/access/AccessTests.java
Patch:
@@ -3,9 +3,9 @@
 
 package _specs_.azure.clientgenerator.core.access;
 
-import _specs_.azure.clientgenerator.core.access.implementation.models.AbstractModel;
-import _specs_.azure.clientgenerator.core.access.implementation.models.RealModel;
-import _specs_.azure.clientgenerator.core.access.models.SharedModel;
+import _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models.AbstractModel;
+import _specs_.azure.clientgenerator.core.access.relativemodelinoperation.implementation.models.RealModel;
+import _specs_.azure.clientgenerator.core.access.sharedmodelinoperation.models.SharedModel;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/azure/example/basic/generated/AzureExampleClientTestBase.java
Patch:
@@ -2,14 +2,14 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package _specs_.azure.example.basic.generated;
+package azure.example.basic.generated;
 
 // The Java test files under 'generated' package are generated for your reference.
 // If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
 // See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.
 
-import _specs_.azure.example.basic.AzureExampleClient;
-import _specs_.azure.example.basic.AzureExampleClientBuilder;
+import azure.example.basic.AzureExampleClient;
+import azure.example.basic.AzureExampleClientBuilder;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.test.TestMode;

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/ClientOperationGroupTests.java
Patch:
@@ -3,9 +3,9 @@
 
 package client.structure;
 
-import client.structure.service.FirstClientBuilder;
+import client.structure.anotherclientoperationgroup.subnamespace.SecondClientBuilder;
+import client.structure.clientoperationgroup.FirstClientBuilder;
 import client.structure.service.models.ClientType;
-import client.structure.service.subnamespace.SecondClientBuilder;
 import org.junit.jupiter.api.Test;
 
 public class ClientOperationGroupTests {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/OperationGroupClientTests.java
Patch:
@@ -3,10 +3,10 @@
 
 package client.structure;
 
-import client.structure.service.Group1Client;
-import client.structure.service.Group2Client;
-import client.structure.service.TwoOperationGroupClientBuilder;
 import client.structure.service.models.ClientType;
+import client.structure.twooperationgroup.Group1Client;
+import client.structure.twooperationgroup.Group2Client;
+import client.structure.twooperationgroup.TwoOperationGroupClientBuilder;
 import org.junit.jupiter.api.Test;
 
 public class OperationGroupClientTests {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/RenameOperationTests.java
Patch:
@@ -3,9 +3,9 @@
 
 package client.structure;
 
-import client.structure.service.GroupClient;
-import client.structure.service.RenamedOperationClient;
-import client.structure.service.RenamedOperationClientBuilder;
+import client.structure.renamedoperation.GroupClient;
+import client.structure.renamedoperation.RenamedOperationClient;
+import client.structure.renamedoperation.RenamedOperationClientBuilder;
 import client.structure.service.models.ClientType;
 import org.junit.jupiter.api.Test;
 

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/encode/numeric/StringEncodeTests.java
Patch:
@@ -3,9 +3,9 @@
 
 package encode.numeric;
 
-import encode.numeric.models.SafeintAsStringProperty;
-import encode.numeric.models.Uint32AsStringProperty;
-import encode.numeric.models.Uint8AsStringProperty;
+import encode.numeric.property.models.SafeintAsStringProperty;
+import encode.numeric.property.models.Uint32AsStringProperty;
+import encode.numeric.property.models.Uint8AsStringProperty;
 import org.junit.jupiter.api.Test;
 
 public class StringEncodeTests {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/parameters/basic/BasicClientTests.java
Patch:
@@ -4,7 +4,7 @@
 package parameters.basic;
 
 import org.junit.jupiter.api.Test;
-import parameters.basic.models.User;
+import parameters.basic.explicitbody.models.User;
 
 public class BasicClientTests {
     private final ExplicitBodyClient explicitBodyClient = new BasicClientBuilder().buildExplicitBodyClient();

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/parameters/spread/SpreadTests.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.List;
 import org.junit.jupiter.api.Test;
-import parameters.spread.models.BodyParameter;
+import parameters.spread.model.models.BodyParameter;
 
 public class SpreadTests {
 

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/payload/contentnegotiation/SharedRouteTests.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.utils.FileUtils;
-import payload.contentnegotiation.models.PngImageAsJson;
+import payload.contentnegotiation.differentbody.models.PngImageAsJson;
 
 public class SharedRouteTests {
 

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/payload/multipart/MultipartTests.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.utils.FileUtils;
+import payload.multipart.formdata.httpparts.nonstring.models.FloatRequest;
 import payload.multipart.models.Address;
 import payload.multipart.models.BinaryArrayPartsRequest;
 import payload.multipart.models.ComplexHttpPartsModelRequest;
@@ -28,7 +29,6 @@
 import payload.multipart.models.FileWithHttpPartOptionalContentTypeRequest;
 import payload.multipart.models.FileWithHttpPartRequiredContentTypeRequest;
 import payload.multipart.models.FileWithHttpPartSpecificContentTypeRequest;
-import payload.multipart.models.FloatRequest;
 import payload.multipart.models.JsonPartRequest;
 import payload.multipart.models.MultiBinaryPartsRequest;
 import payload.multipart.models.MultiPartRequest;

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/specialwords/ModelPropertyClientTest.java
Patch:
@@ -4,7 +4,7 @@
 package specialwords;
 
 import org.junit.jupiter.api.Test;
-import specialwords.models.SameAsModel;
+import specialwords.modelproperties.models.SameAsModel;
 
 public class ModelPropertyClientTest {
 

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/Javagen.java
Patch:
@@ -294,7 +294,7 @@ protected JavaPackage writeToTemplates(CodeModel codeModel, Client client, JavaS
             // Test
             if (settings.isDataPlaneClient() && settings.isGenerateTests()) {
                 if (!client.getSyncClients().isEmpty()
-                    && client.getSyncClients().iterator().next().getClientBuilder() != null) {
+                    && client.getSyncClients().stream().anyMatch(c -> c.getClientBuilder() != null)) {
                     List<ServiceClient> serviceClients = client.getServiceClients();
                     if (CoreUtils.isNullOrEmpty(serviceClients)) {
                         serviceClients = Collections.singletonList(client.getServiceClient());

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/TestContext.java
Patch:
@@ -49,6 +49,7 @@ public String getPackageName() {
     }
 
     public String getTestBaseClassName() {
-        return serviceClients.iterator().next().getInterfaceName() + "TestBase";
+        return serviceClients.stream().filter(c -> !c.isBuilderDisabled()).findFirst().get().getInterfaceName()
+            + "TestBase";
     }
 }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/android/AndroidServiceClient.java
Patch:
@@ -11,6 +11,7 @@
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.SecurityInfo;
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ServiceClient;
 import com.microsoft.typespec.http.client.generator.core.model.clientmodel.ServiceClientProperty;
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
@@ -26,7 +27,7 @@ protected AndroidServiceClient(String packageName, String className, String inte
         super(packageName, className, interfaceName, proxy, methodGroupClients, properties, constructors, clientMethods,
             azureEnvironmentParameter, tokenCredentialParameter, httpPipelineParameter, serializerAdapterParameter,
             defaultPollIntervalParameter, defaultCredentialScopes, builderDisabled, null, securityInfo, baseUrl, null,
-            null);
+            Collections.emptyList(), null);
     }
 
     @Override

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/renamedfrom/RenamedFromClientTests.java
Patch:
@@ -13,7 +13,9 @@ public class RenamedFromClientTests {
     private final RenamedFromClient renamedFromClient
         = new RenamedFromClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
     private final NewInterfaceClient newInterfaceClient
-        = new RenamedFromClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildNewInterfaceClient();
+        = new RenamedFromClientBuilder().endpoint("http://localhost:3000")
+            .version(Versions.V2)
+            .buildNewInterfaceClient();
 
     @Test
     public void testNewOp() {

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/model/EmitterOptions.java
Patch:
@@ -17,7 +17,7 @@
 public class EmitterOptions implements JsonSerializable<EmitterOptions> {
     private String namespace;
     private String outputDir;
-    private String flavor = "Azure";
+    private String flavor = "generic";
     private String serviceName;
     private List<String> serviceVersions;
     private Boolean generateTests = true;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientAClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service;
 
 import client.structure.service.implementation.ClientAClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -194,7 +195,7 @@ public ClientAClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -203,7 +204,7 @@ public ClientAClientBuilder endpoint(String endpoint) {
      * @return the ClientAClientBuilder.
      */
     @Generated
-    public ClientAClientBuilder client(String client) {
+    public ClientAClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientBClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service;
 
 import client.structure.service.implementation.ClientBClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -194,7 +195,7 @@ public ClientBClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -203,7 +204,7 @@ public ClientBClientBuilder endpoint(String endpoint) {
      * @return the ClientBClientBuilder.
      */
     @Generated
-    public ClientBClientBuilder client(String client) {
+    public ClientBClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/FirstClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service;
 
 import client.structure.service.implementation.FirstClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -201,7 +202,7 @@ public FirstClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -210,7 +211,7 @@ public FirstClientBuilder endpoint(String endpoint) {
      * @return the FirstClientBuilder.
      */
     @Generated
-    public FirstClientBuilder client(String client) {
+    public FirstClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/RenamedOperationClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service;
 
 import client.structure.service.implementation.RenamedOperationClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -199,7 +200,7 @@ public RenamedOperationClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -208,7 +209,7 @@ public RenamedOperationClientBuilder endpoint(String endpoint) {
      * @return the RenamedOperationClientBuilder.
      */
     @Generated
-    public RenamedOperationClientBuilder client(String client) {
+    public RenamedOperationClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ServiceClientClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service;
 
 import client.structure.service.implementation.ServiceClientClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -207,7 +208,7 @@ public ServiceClientClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -216,7 +217,7 @@ public ServiceClientClientBuilder endpoint(String endpoint) {
      * @return the ServiceClientClientBuilder.
      */
     @Generated
-    public ServiceClientClientBuilder client(String client) {
+    public ServiceClientClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/TwoOperationGroupClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service;
 
 import client.structure.service.implementation.TwoOperationGroupClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -195,7 +196,7 @@ public TwoOperationGroupClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -204,7 +205,7 @@ public TwoOperationGroupClientBuilder endpoint(String endpoint) {
      * @return the TwoOperationGroupClientBuilder.
      */
     @Generated
-    public TwoOperationGroupClientBuilder client(String client) {
+    public TwoOperationGroupClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/implementation/BazFoosImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 package client.structure.service.implementation;
 
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Host;
 import com.azure.core.annotation.HostParam;
@@ -60,7 +61,7 @@ public interface BazFoosService {
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Mono<Response<Void>> seven(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Mono<Response<Void>> seven(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
 
         @Post("/seven")
@@ -69,7 +70,7 @@ Mono<Response<Void>> seven(@HostParam("endpoint") String endpoint, @HostParam("c
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Response<Void> sevenSync(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Response<Void> sevenSync(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/implementation/Group4sImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 package client.structure.service.implementation;
 
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Host;
 import com.azure.core.annotation.HostParam;
@@ -60,7 +61,7 @@ public interface Group4sService {
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Mono<Response<Void>> four(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Mono<Response<Void>> four(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
 
         @Post("/four")
@@ -69,7 +70,7 @@ Mono<Response<Void>> four(@HostParam("endpoint") String endpoint, @HostParam("cl
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Response<Void> fourSync(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Response<Void> fourSync(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/implementation/Group5sImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 package client.structure.service.implementation;
 
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Host;
 import com.azure.core.annotation.HostParam;
@@ -60,7 +61,7 @@ public interface Group5sService {
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Mono<Response<Void>> six(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Mono<Response<Void>> six(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
 
         @Post("/six")
@@ -69,7 +70,7 @@ Mono<Response<Void>> six(@HostParam("endpoint") String endpoint, @HostParam("cli
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Response<Void> sixSync(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Response<Void> sixSync(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/implementation/QuxBarsImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 package client.structure.service.implementation;
 
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Host;
 import com.azure.core.annotation.HostParam;
@@ -60,7 +61,7 @@ public interface QuxBarsService {
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Mono<Response<Void>> nine(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Mono<Response<Void>> nine(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
 
         @Post("/nine")
@@ -69,7 +70,7 @@ Mono<Response<Void>> nine(@HostParam("endpoint") String endpoint, @HostParam("cl
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Response<Void> nineSync(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Response<Void> nineSync(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/implementation/QuxesImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 package client.structure.service.implementation;
 
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Host;
 import com.azure.core.annotation.HostParam;
@@ -60,7 +61,7 @@ public interface QuxesService {
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Mono<Response<Void>> eight(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Mono<Response<Void>> eight(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
 
         @Post("/eight")
@@ -69,7 +70,7 @@ Mono<Response<Void>> eight(@HostParam("endpoint") String endpoint, @HostParam("c
         @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
-        Response<Void> eightSync(@HostParam("endpoint") String endpoint, @HostParam("client") String client,
+        Response<Void> eightSync(@HostParam("endpoint") String endpoint, @HostParam("client") ClientType client,
             RequestOptions requestOptions, Context context);
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/subnamespace/SecondClientBuilder.java
Patch:
@@ -5,6 +5,7 @@
 package client.structure.service.subnamespace;
 
 import client.structure.service.implementation.SecondClientImpl;
+import client.structure.service.models.ClientType;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -195,7 +196,7 @@ public SecondClientBuilder endpoint(String endpoint) {
      * Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
      */
     @Generated
-    private String client;
+    private ClientType client;
 
     /**
      * Sets Need to be set as 'default', 'multi-client', 'renamed-operation', 'two-operation-group' in client.
@@ -204,7 +205,7 @@ public SecondClientBuilder endpoint(String endpoint) {
      * @return the SecondClientBuilder.
      */
     @Generated
-    public SecondClientBuilder client(String client) {
+    public SecondClientBuilder client(ClientType client) {
         this.client = client;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/added/AddedClientBuilder.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Objects;
 import versioning.added.implementation.AddedClientImpl;
+import versioning.added.models.Versions;
 
 /**
  * A builder for creating a new instance of the AddedClient type.
@@ -198,7 +199,7 @@ public AddedClientBuilder endpoint(String endpoint) {
      * Need to be set as 'v1' or 'v2' in client.
      */
     @Generated
-    private String version;
+    private Versions version;
 
     /**
      * Sets Need to be set as 'v1' or 'v2' in client.
@@ -207,7 +208,7 @@ public AddedClientBuilder endpoint(String endpoint) {
      * @return the AddedClientBuilder.
      */
     @Generated
-    public AddedClientBuilder version(String version) {
+    public AddedClientBuilder version(Versions version) {
         this.version = version;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/added/implementation/InterfaceV2sImpl.java
Patch:
@@ -26,6 +26,7 @@
 import com.azure.core.util.FluxUtil;
 import reactor.core.publisher.Mono;
 import versioning.added.AddedServiceVersion;
+import versioning.added.models.Versions;
 
 /**
  * An instance of this class provides access to all the operations defined in InterfaceV2s.
@@ -75,7 +76,7 @@ public interface InterfaceV2sService {
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
         Mono<Response<BinaryData>> v2InInterface(@HostParam("endpoint") String endpoint,
-            @HostParam("version") String version, @HeaderParam("Content-Type") String contentType,
+            @HostParam("version") Versions version, @HeaderParam("Content-Type") String contentType,
             @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
             RequestOptions requestOptions, Context context);
 
@@ -86,7 +87,7 @@ Mono<Response<BinaryData>> v2InInterface(@HostParam("endpoint") String endpoint,
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
         Response<BinaryData> v2InInterfaceSync(@HostParam("endpoint") String endpoint,
-            @HostParam("version") String version, @HeaderParam("Content-Type") String contentType,
+            @HostParam("version") Versions version, @HeaderParam("Content-Type") String contentType,
             @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
             RequestOptions requestOptions, Context context);
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/madeoptional/MadeOptionalClientBuilder.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Objects;
 import versioning.madeoptional.implementation.MadeOptionalClientImpl;
+import versioning.madeoptional.models.Versions;
 
 /**
  * A builder for creating a new instance of the MadeOptionalClient type.
@@ -193,7 +194,7 @@ public MadeOptionalClientBuilder endpoint(String endpoint) {
      * Need to be set as 'v1' or 'v2' in client.
      */
     @Generated
-    private String version;
+    private Versions version;
 
     /**
      * Sets Need to be set as 'v1' or 'v2' in client.
@@ -202,7 +203,7 @@ public MadeOptionalClientBuilder endpoint(String endpoint) {
      * @return the MadeOptionalClientBuilder.
      */
     @Generated
-    public MadeOptionalClientBuilder version(String version) {
+    public MadeOptionalClientBuilder version(Versions version) {
         this.version = version;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/removed/RemovedClientBuilder.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Objects;
 import versioning.removed.implementation.RemovedClientImpl;
+import versioning.removed.models.Versions;
 
 /**
  * A builder for creating a new instance of the RemovedClient type.
@@ -193,7 +194,7 @@ public RemovedClientBuilder endpoint(String endpoint) {
      * Need to be set as 'v1' or 'v2' in client.
      */
     @Generated
-    private String version;
+    private Versions version;
 
     /**
      * Sets Need to be set as 'v1' or 'v2' in client.
@@ -202,7 +203,7 @@ public RemovedClientBuilder endpoint(String endpoint) {
      * @return the RemovedClientBuilder.
      */
     @Generated
-    public RemovedClientBuilder version(String version) {
+    public RemovedClientBuilder version(Versions version) {
         this.version = version;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/renamedfrom/RenamedFromClientBuilder.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Objects;
 import versioning.renamedfrom.implementation.RenamedFromClientImpl;
+import versioning.renamedfrom.models.Versions;
 
 /**
  * A builder for creating a new instance of the RenamedFromClient type.
@@ -198,7 +199,7 @@ public RenamedFromClientBuilder endpoint(String endpoint) {
      * Need to be set as 'v1' or 'v2' in client.
      */
     @Generated
-    private String version;
+    private Versions version;
 
     /**
      * Sets Need to be set as 'v1' or 'v2' in client.
@@ -207,7 +208,7 @@ public RenamedFromClientBuilder endpoint(String endpoint) {
      * @return the RenamedFromClientBuilder.
      */
     @Generated
-    public RenamedFromClientBuilder version(String version) {
+    public RenamedFromClientBuilder version(Versions version) {
         this.version = version;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/renamedfrom/implementation/NewInterfacesImpl.java
Patch:
@@ -26,6 +26,7 @@
 import com.azure.core.util.FluxUtil;
 import reactor.core.publisher.Mono;
 import versioning.renamedfrom.RenamedFromServiceVersion;
+import versioning.renamedfrom.models.Versions;
 
 /**
  * An instance of this class provides access to all the operations defined in NewInterfaces.
@@ -75,7 +76,7 @@ public interface NewInterfacesService {
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
         Mono<Response<BinaryData>> newOpInNewInterface(@HostParam("endpoint") String endpoint,
-            @HostParam("version") String version, @HeaderParam("Content-Type") String contentType,
+            @HostParam("version") Versions version, @HeaderParam("Content-Type") String contentType,
             @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
             RequestOptions requestOptions, Context context);
 
@@ -86,7 +87,7 @@ Mono<Response<BinaryData>> newOpInNewInterface(@HostParam("endpoint") String end
         @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
         @UnexpectedResponseExceptionType(HttpResponseException.class)
         Response<BinaryData> newOpInNewInterfaceSync(@HostParam("endpoint") String endpoint,
-            @HostParam("version") String version, @HeaderParam("Content-Type") String contentType,
+            @HostParam("version") Versions version, @HeaderParam("Content-Type") String contentType,
             @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
             RequestOptions requestOptions, Context context);
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/returntypechangedfrom/ReturnTypeChangedFromClientBuilder.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Objects;
 import versioning.returntypechangedfrom.implementation.ReturnTypeChangedFromClientImpl;
+import versioning.returntypechangedfrom.models.Versions;
 
 /**
  * A builder for creating a new instance of the ReturnTypeChangedFromClient type.
@@ -194,7 +195,7 @@ public ReturnTypeChangedFromClientBuilder endpoint(String endpoint) {
      * Need to be set as 'v1' or 'v2' in client.
      */
     @Generated
-    private String version;
+    private Versions version;
 
     /**
      * Sets Need to be set as 'v1' or 'v2' in client.
@@ -203,7 +204,7 @@ public ReturnTypeChangedFromClientBuilder endpoint(String endpoint) {
      * @return the ReturnTypeChangedFromClientBuilder.
      */
     @Generated
-    public ReturnTypeChangedFromClientBuilder version(String version) {
+    public ReturnTypeChangedFromClientBuilder version(Versions version) {
         this.version = version;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/versioning/typechangedfrom/TypeChangedFromClientBuilder.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Objects;
 import versioning.typechangedfrom.implementation.TypeChangedFromClientImpl;
+import versioning.typechangedfrom.models.Versions;
 
 /**
  * A builder for creating a new instance of the TypeChangedFromClient type.
@@ -194,7 +195,7 @@ public TypeChangedFromClientBuilder endpoint(String endpoint) {
      * Need to be set as 'v1' or 'v2' in client.
      */
     @Generated
-    private String version;
+    private Versions version;
 
     /**
      * Sets Need to be set as 'v1' or 'v2' in client.
@@ -203,7 +204,7 @@ public TypeChangedFromClientBuilder endpoint(String endpoint) {
      * @return the TypeChangedFromClientBuilder.
      */
     @Generated
-    public TypeChangedFromClientBuilder version(String version) {
+    public TypeChangedFromClientBuilder version(Versions version) {
         this.version = version;
         return this;
     }

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/ClientOperationGroupTests.java
Patch:
@@ -4,6 +4,7 @@
 package client.structure;
 
 import client.structure.service.FirstClientBuilder;
+import client.structure.service.models.ClientType;
 import client.structure.service.subnamespace.SecondClientBuilder;
 import org.junit.jupiter.api.Test;
 
@@ -12,9 +13,9 @@ public class ClientOperationGroupTests {
     @Test
     public void test() {
         FirstClientBuilder clientBuilder1
-            = new FirstClientBuilder().endpoint("http://localhost:3000").client("client-operation-group");
+            = new FirstClientBuilder().endpoint("http://localhost:3000").client(ClientType.CLIENT_OPERATION_GROUP);
         SecondClientBuilder clientBuilder2
-            = new SecondClientBuilder().endpoint("http://localhost:3000").client("client-operation-group");
+            = new SecondClientBuilder().endpoint("http://localhost:3000").client(ClientType.CLIENT_OPERATION_GROUP);
 
         clientBuilder1.buildClient().one();
         clientBuilder1.buildGroup3Client().two();

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/MultiClientTests.java
Patch:
@@ -7,14 +7,15 @@
 import client.structure.service.ClientAClientBuilder;
 import client.structure.service.ClientBClient;
 import client.structure.service.ClientBClientBuilder;
+import client.structure.service.models.ClientType;
 import org.junit.jupiter.api.Test;
 
 public class MultiClientTests {
 
     private final ClientAClient client1
-        = new ClientAClientBuilder().endpoint("http://localhost:3000").client("multi-client").buildClient();
+        = new ClientAClientBuilder().endpoint("http://localhost:3000").client(ClientType.MULTI_CLIENT).buildClient();
     private final ClientBClient client2
-        = new ClientBClientBuilder().endpoint("http://localhost:3000").client("multi-client").buildClient();
+        = new ClientBClientBuilder().endpoint("http://localhost:3000").client(ClientType.MULTI_CLIENT).buildClient();
 
     @Test
     public void testClient() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/OperationGroupClientTests.java
Patch:
@@ -6,15 +6,16 @@
 import client.structure.service.Group1Client;
 import client.structure.service.Group2Client;
 import client.structure.service.TwoOperationGroupClientBuilder;
+import client.structure.service.models.ClientType;
 import org.junit.jupiter.api.Test;
 
 public class OperationGroupClientTests {
 
     private final Group1Client client1 = new TwoOperationGroupClientBuilder().endpoint("http://localhost:3000")
-        .client("two-operation-group")
+        .client(ClientType.TWO_OPERATION_GROUP)
         .buildGroup1Client();
     private final Group2Client client2 = new TwoOperationGroupClientBuilder().endpoint("http://localhost:3000")
-        .client("two-operation-group")
+        .client(ClientType.TWO_OPERATION_GROUP)
         .buildGroup2Client();
 
     @Test

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/RenameOperationTests.java
Patch:
@@ -6,15 +6,16 @@
 import client.structure.service.GroupClient;
 import client.structure.service.RenamedOperationClient;
 import client.structure.service.RenamedOperationClientBuilder;
+import client.structure.service.models.ClientType;
 import org.junit.jupiter.api.Test;
 
 public class RenameOperationTests {
 
     private final RenamedOperationClient client = new RenamedOperationClientBuilder().endpoint("http://localhost:3000")
-        .client("renamed-operation")
+        .client(ClientType.RENAMED_OPERATION)
         .buildClient();
     private final GroupClient groupClient = new RenamedOperationClientBuilder().endpoint("http://localhost:3000")
-        .client("renamed-operation")
+        .client(ClientType.RENAMED_OPERATION)
         .buildGroupClient();
 
     @Test

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/service/generated/ClientAClientTestBase.java
Patch:
@@ -12,6 +12,7 @@
 import client.structure.service.ClientAClientBuilder;
 import client.structure.service.ClientBClient;
 import client.structure.service.ClientBClientBuilder;
+import client.structure.service.models.ClientType;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.test.TestMode;
@@ -27,7 +28,7 @@ class ClientAClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         ClientAClientBuilder clientAClientbuilder
             = new ClientAClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-                .client(Configuration.getGlobalConfiguration().get("CLIENT", "client"))
+                .client(ClientType.fromString(Configuration.getGlobalConfiguration().get("CLIENT", "client")))
                 .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                 .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {
@@ -37,7 +38,7 @@ protected void beforeTest() {
 
         ClientBClientBuilder clientBClientbuilder
             = new ClientBClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-                .client(Configuration.getGlobalConfiguration().get("CLIENT", "client"))
+                .client(ClientType.fromString(Configuration.getGlobalConfiguration().get("CLIENT", "client")))
                 .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                 .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/service/generated/RenamedOperationClientTestBase.java
Patch:
@@ -11,6 +11,7 @@
 import client.structure.service.GroupClient;
 import client.structure.service.RenamedOperationClient;
 import client.structure.service.RenamedOperationClientBuilder;
+import client.structure.service.models.ClientType;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.test.TestMode;
@@ -26,7 +27,7 @@ class RenamedOperationClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         RenamedOperationClientBuilder renamedOperationClientbuilder = new RenamedOperationClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .client(Configuration.getGlobalConfiguration().get("CLIENT", "client"))
+            .client(ClientType.fromString(Configuration.getGlobalConfiguration().get("CLIENT", "client")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {
@@ -36,7 +37,7 @@ protected void beforeTest() {
 
         RenamedOperationClientBuilder groupClientbuilder = new RenamedOperationClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .client(Configuration.getGlobalConfiguration().get("CLIENT", "client"))
+            .client(ClientType.fromString(Configuration.getGlobalConfiguration().get("CLIENT", "client")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/client/structure/service/generated/TwoOperationGroupClientTestBase.java
Patch:
@@ -11,6 +11,7 @@
 import client.structure.service.Group1Client;
 import client.structure.service.Group2Client;
 import client.structure.service.TwoOperationGroupClientBuilder;
+import client.structure.service.models.ClientType;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.test.TestMode;
@@ -26,7 +27,7 @@ class TwoOperationGroupClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         TwoOperationGroupClientBuilder group1Clientbuilder = new TwoOperationGroupClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .client(Configuration.getGlobalConfiguration().get("CLIENT", "client"))
+            .client(ClientType.fromString(Configuration.getGlobalConfiguration().get("CLIENT", "client")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {
@@ -36,7 +37,7 @@ protected void beforeTest() {
 
         TwoOperationGroupClientBuilder group2Clientbuilder = new TwoOperationGroupClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .client(Configuration.getGlobalConfiguration().get("CLIENT", "client"))
+            .client(ClientType.fromString(Configuration.getGlobalConfiguration().get("CLIENT", "client")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/added/AddedClientTests.java
Patch:
@@ -9,12 +9,13 @@
 import versioning.added.models.EnumV2;
 import versioning.added.models.ModelV1;
 import versioning.added.models.ModelV2;
+import versioning.added.models.Versions;
 
 public class AddedClientTests {
     private final AddedClient addedClient
-        = new AddedClientBuilder().endpoint("http://localhost:3000").version("v2").buildClient();
+        = new AddedClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
     private final InterfaceV2Client interfaceV2Client
-        = new AddedClientBuilder().endpoint("http://localhost:3000").version("v2").buildInterfaceV2Client();
+        = new AddedClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildInterfaceV2Client();
 
     @Test
     public void testAddedClient() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/added/generated/AddedClientTestBase.java
Patch:
@@ -16,6 +16,7 @@
 import versioning.added.AddedClient;
 import versioning.added.AddedClientBuilder;
 import versioning.added.InterfaceV2Client;
+import versioning.added.models.Versions;
 
 class AddedClientTestBase extends TestProxyTestBase {
     protected AddedClient addedClient;
@@ -26,7 +27,7 @@ class AddedClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         AddedClientBuilder addedClientbuilder
             = new AddedClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+                .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
                 .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                 .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {
@@ -36,7 +37,7 @@ protected void beforeTest() {
 
         AddedClientBuilder interfaceV2Clientbuilder
             = new AddedClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+                .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
                 .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                 .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/madeoptional/MadeOptionalClienTests.java
Patch:
@@ -5,10 +5,11 @@
 
 import org.junit.jupiter.api.Test;
 import versioning.madeoptional.models.TestModel;
+import versioning.madeoptional.models.Versions;
 
 public class MadeOptionalClienTests {
     private final MadeOptionalClient madeOptionalClient
-        = new MadeOptionalClientBuilder().endpoint("http://localhost:3000").version("v2").buildClient();
+        = new MadeOptionalClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
 
     @Test
     public void testMadeOptionalClient() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/madeoptional/generated/MadeOptionalClientTestBase.java
Patch:
@@ -15,6 +15,7 @@
 import com.azure.core.util.Configuration;
 import versioning.madeoptional.MadeOptionalClient;
 import versioning.madeoptional.MadeOptionalClientBuilder;
+import versioning.madeoptional.models.Versions;
 
 class MadeOptionalClientTestBase extends TestProxyTestBase {
     protected MadeOptionalClient madeOptionalClient;
@@ -23,7 +24,7 @@ class MadeOptionalClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         MadeOptionalClientBuilder madeOptionalClientbuilder = new MadeOptionalClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+            .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/removed/RemovedClientTests.java
Patch:
@@ -7,14 +7,15 @@
 import org.junit.jupiter.api.Test;
 import versioning.removed.models.EnumV2;
 import versioning.removed.models.ModelV2;
+import versioning.removed.models.Versions;
 
 public class RemovedClientTests {
 
     private final RemovedClient removedClientV1
-        = new RemovedClientBuilder().endpoint("http://localhost:3000").version("v1").buildClient();
+        = new RemovedClientBuilder().endpoint("http://localhost:3000").version(Versions.V1).buildClient();
 
     private final RemovedClient removedClientV2
-        = new RemovedClientBuilder().endpoint("http://localhost:3000").version("v2").buildClient();
+        = new RemovedClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
 
     @Test
     public void tesRemovedClient() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/removed/generated/RemovedClientTestBase.java
Patch:
@@ -15,6 +15,7 @@
 import com.azure.core.util.Configuration;
 import versioning.removed.RemovedClient;
 import versioning.removed.RemovedClientBuilder;
+import versioning.removed.models.Versions;
 
 class RemovedClientTestBase extends TestProxyTestBase {
     protected RemovedClient removedClient;
@@ -23,7 +24,7 @@ class RemovedClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         RemovedClientBuilder removedClientbuilder
             = new RemovedClientBuilder().endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-                .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+                .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
                 .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                 .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/renamedfrom/RenamedFromClientTests.java
Patch:
@@ -7,12 +7,13 @@
 import org.junit.jupiter.api.Test;
 import versioning.renamedfrom.models.NewEnum;
 import versioning.renamedfrom.models.NewModel;
+import versioning.renamedfrom.models.Versions;
 
 public class RenamedFromClientTests {
     private final RenamedFromClient renamedFromClient
-        = new RenamedFromClientBuilder().endpoint("http://localhost:3000").version("v2").buildClient();
+        = new RenamedFromClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
     private final NewInterfaceClient newInterfaceClient
-        = new RenamedFromClientBuilder().endpoint("http://localhost:3000").version("v2").buildNewInterfaceClient();
+        = new RenamedFromClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildNewInterfaceClient();
 
     @Test
     public void testNewOp() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/renamedfrom/generated/RenamedFromClientTestBase.java
Patch:
@@ -16,6 +16,7 @@
 import versioning.renamedfrom.NewInterfaceClient;
 import versioning.renamedfrom.RenamedFromClient;
 import versioning.renamedfrom.RenamedFromClientBuilder;
+import versioning.renamedfrom.models.Versions;
 
 class RenamedFromClientTestBase extends TestProxyTestBase {
     protected RenamedFromClient renamedFromClient;
@@ -26,7 +27,7 @@ class RenamedFromClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         RenamedFromClientBuilder renamedFromClientbuilder = new RenamedFromClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+            .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {
@@ -36,7 +37,7 @@ protected void beforeTest() {
 
         RenamedFromClientBuilder newInterfaceClientbuilder = new RenamedFromClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+            .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/returntypechangedfrom/ReturnTypeChangedFromClientTests.java
Patch:
@@ -4,10 +4,11 @@
 package versioning.returntypechangedfrom;
 
 import org.junit.jupiter.api.Test;
+import versioning.returntypechangedfrom.models.Versions;
 
 public class ReturnTypeChangedFromClientTests {
     private final ReturnTypeChangedFromClient returnTypeChangedFromClient
-        = new ReturnTypeChangedFromClientBuilder().endpoint("http://localhost:3000").version("v2").buildClient();
+        = new ReturnTypeChangedFromClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
 
     @Test
     public void testReturnTypeChangedFromClient() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/returntypechangedfrom/generated/ReturnTypeChangedFromClientTestBase.java
Patch:
@@ -15,6 +15,7 @@
 import com.azure.core.util.Configuration;
 import versioning.returntypechangedfrom.ReturnTypeChangedFromClient;
 import versioning.returntypechangedfrom.ReturnTypeChangedFromClientBuilder;
+import versioning.returntypechangedfrom.models.Versions;
 
 class ReturnTypeChangedFromClientTestBase extends TestProxyTestBase {
     protected ReturnTypeChangedFromClient returnTypeChangedFromClient;
@@ -23,7 +24,7 @@ class ReturnTypeChangedFromClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         ReturnTypeChangedFromClientBuilder returnTypeChangedFromClientbuilder = new ReturnTypeChangedFromClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+            .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/typechangedfrom/TypeChangedFromClientTests.java
Patch:
@@ -5,10 +5,11 @@
 
 import org.junit.jupiter.api.Test;
 import versioning.typechangedfrom.models.TestModel;
+import versioning.typechangedfrom.models.Versions;
 
 public class TypeChangedFromClientTests {
     private final TypeChangedFromClient typeChangedFromClient
-        = new TypeChangedFromClientBuilder().endpoint("http://localhost:3000").version("v2").buildClient();
+        = new TypeChangedFromClientBuilder().endpoint("http://localhost:3000").version(Versions.V2).buildClient();
 
     @Test
     public void testTypeChangedFromClient() {

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/versioning/typechangedfrom/generated/TypeChangedFromClientTestBase.java
Patch:
@@ -15,6 +15,7 @@
 import com.azure.core.util.Configuration;
 import versioning.typechangedfrom.TypeChangedFromClient;
 import versioning.typechangedfrom.TypeChangedFromClientBuilder;
+import versioning.typechangedfrom.models.Versions;
 
 class TypeChangedFromClientTestBase extends TestProxyTestBase {
     protected TypeChangedFromClient typeChangedFromClient;
@@ -23,7 +24,7 @@ class TypeChangedFromClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         TypeChangedFromClientBuilder typeChangedFromClientbuilder = new TypeChangedFromClientBuilder()
             .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
-            .version(Configuration.getGlobalConfiguration().get("VERSION", "version"))
+            .version(Versions.fromString(Configuration.getGlobalConfiguration().get("VERSION", "version")))
             .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/partialupdate/PartialUpdateAsyncClient.java
Patch:
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation. All rights reserved.
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
-package com.cadl.partialupdate;
+package tsptest.partialupdate;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
@@ -15,9 +15,9 @@
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.BinaryData;
 import com.azure.core.util.FluxUtil;
-import com.cadl.partialupdate.implementation.PartialUpdateClientImpl;
-import com.cadl.partialupdate.models.PartialUpdateModel;
 import reactor.core.publisher.Mono;
+import tsptest.partialupdate.implementation.PartialUpdateClientImpl;
+import tsptest.partialupdate.models.PartialUpdateModel;
 
 /**
  * Initializes a new instance of the asynchronous PartialUpdateClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/partialupdate/implementation/PartialUpdateClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.cadl.partialupdate.implementation;
+package tsptest.partialupdate.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/tsptest/partialupdate/implementation/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * Package containing the implementations for PartialUpdate.
  * <!-- end generated doc -->
  */
-package com.cadl.partialupdate.implementation;
+package tsptest.partialupdate.implementation;

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/util/TypeUtil.java
Patch:
@@ -41,7 +41,7 @@ private static Class<?> getGenericClass(GenericType type) {
             try {
                 return Optional.of(Class.forName(key));
             } catch (ClassNotFoundException e) {
-                LOGGER.warn("class " + key + " not found!", e);
+                LOGGER.warn("class {} not found, skip subclass checking.", key);
                 return Optional.empty();
             }
         }).orElse(null);

File: packages/http-client-java/generator/http-client-generator-test/customization/src/main/java/CustomizationTest.java
Patch:
@@ -14,7 +14,7 @@ public class CustomizationTest extends Customization {
     @Override
     public void customize(LibraryCustomization customization, Logger logger) {
         logger.info("Customizing the NamingClient javadoc");
-        PackageCustomization packageCustomization = customization.getPackage("com.cadl.naming");
+        PackageCustomization packageCustomization = customization.getPackage("tsptest.naming");
         ClassCustomization classCustomization = packageCustomization.getClass("NamingClient");
         classCustomization.getMethod("postWithResponse")
                 .getJavadoc()

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/AccessClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access;
+package _specs_.azure.clientgenerator.core.access;
 
-import com._specs_.azure.clientgenerator.core.access.implementation.AccessClientImpl;
+import _specs_.azure.clientgenerator.core.access.implementation.AccessClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/SharedModelInOperationAsyncClient.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access;
+package _specs_.azure.clientgenerator.core.access;
 
-import com._specs_.azure.clientgenerator.core.access.implementation.SharedModelInOperationsImpl;
-import com._specs_.azure.clientgenerator.core.access.models.SharedModel;
+import _specs_.azure.clientgenerator.core.access.implementation.SharedModelInOperationsImpl;
+import _specs_.azure.clientgenerator.core.access.models.SharedModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/SharedModelInOperationClient.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access;
+package _specs_.azure.clientgenerator.core.access;
 
-import com._specs_.azure.clientgenerator.core.access.implementation.SharedModelInOperationsImpl;
-import com._specs_.azure.clientgenerator.core.access.models.SharedModel;
+import _specs_.azure.clientgenerator.core.access.implementation.SharedModelInOperationsImpl;
+import _specs_.azure.clientgenerator.core.access.models.SharedModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/AccessClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation;
+package _specs_.azure.clientgenerator.core.access.implementation;
 
 import com.azure.core.http.HttpPipeline;
 import com.azure.core.http.HttpPipelineBuilder;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/InternalOperationsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation;
+package _specs_.azure.clientgenerator.core.access.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/PublicOperationsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation;
+package _specs_.azure.clientgenerator.core.access.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/RelativeModelInOperationsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation;
+package _specs_.azure.clientgenerator.core.access.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/SharedModelInOperationsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation;
+package _specs_.azure.clientgenerator.core.access.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/models/AbstractModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/models/BaseModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/models/InternalDecoratorModelInInternal.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/models/NoDecoratorModelInInternal.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/models/OuterModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/implementation/models/RealModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.implementation.models;
+package _specs_.azure.clientgenerator.core.access.implementation.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/models/NoDecoratorModelInPublic.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/models/PublicDecoratorModelInInternal.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/models/PublicDecoratorModelInPublic.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/access/models/SharedModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.access.models;
+package _specs_.azure.clientgenerator.core.access.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/flattenproperty/FlattenPropertyClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.flattenproperty;
+package _specs_.azure.clientgenerator.core.flattenproperty;
 
-import com._specs_.azure.clientgenerator.core.flattenproperty.implementation.FlattenPropertyClientImpl;
+import _specs_.azure.clientgenerator.core.flattenproperty.implementation.FlattenPropertyClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/flattenproperty/implementation/FlattenPropertyClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.flattenproperty.implementation;
+package _specs_.azure.clientgenerator.core.flattenproperty.implementation;
 
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/flattenproperty/models/ChildFlattenModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.flattenproperty.models;
+package _specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/flattenproperty/models/ChildModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.flattenproperty.models;
+package _specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/flattenproperty/models/FlattenModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.flattenproperty.models;
+package _specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/flattenproperty/models/NestedFlattenModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.flattenproperty.models;
+package _specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/implementation/ModelInOperationsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.usage.implementation;
+package _specs_.azure.clientgenerator.core.usage.implementation;
 
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/models/InputModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/models/OrphanModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/models/OutputModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/clientgenerator/core/usage/models/ResultModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.clientgenerator.core.usage.models;
+package _specs_.azure.clientgenerator.core.usage.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/basic/models/UserList.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.basic.models;
+package _specs_.azure.core.basic.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/rpc/RpcClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.rpc;
+package _specs_.azure.core.lro.rpc;
 
-import com._specs_.azure.core.lro.rpc.implementation.RpcClientImpl;
+import _specs_.azure.core.lro.rpc.implementation.RpcClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/rpc/RpcServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.rpc;
+package _specs_.azure.core.lro.rpc;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/rpc/models/GenerationOptions.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.rpc.models;
+package _specs_.azure.core.lro.rpc.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/rpc/models/GenerationResult.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.rpc.models;
+package _specs_.azure.core.lro.rpc.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/standard/StandardClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.standard;
+package _specs_.azure.core.lro.standard;
 
-import com._specs_.azure.core.lro.standard.implementation.StandardClientImpl;
+import _specs_.azure.core.lro.standard.implementation.StandardClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/standard/StandardServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.standard;
+package _specs_.azure.core.lro.standard;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/lro/standard/models/ExportedUser.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.lro.standard.models;
+package _specs_.azure.core.lro.standard.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/model/ModelServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.model;
+package _specs_.azure.core.model;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/model/implementation/AzureCoreEmbeddingVectorsImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.model.implementation;
+package _specs_.azure.core.model.implementation;
 
-import com._specs_.azure.core.model.ModelServiceVersion;
+import _specs_.azure.core.model.ModelServiceVersion;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/model/models/AzureEmbeddingModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.model.models;
+package _specs_.azure.core.model.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/PageClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page;
+package _specs_.azure.core.page;
 
-import com._specs_.azure.core.page.implementation.PageClientImpl;
+import _specs_.azure.core.page.implementation.PageClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/PageServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page;
+package _specs_.azure.core.page;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/implementation/PageClientImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page.implementation;
+package _specs_.azure.core.page.implementation;
 
-import com._specs_.azure.core.page.PageServiceVersion;
+import _specs_.azure.core.page.PageServiceVersion;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/implementation/TwoModelsAsPageItemsImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page.implementation;
+package _specs_.azure.core.page.implementation;
 
-import com._specs_.azure.core.page.PageServiceVersion;
+import _specs_.azure.core.page.PageServiceVersion;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;
 import com.azure.core.annotation.HeaderParam;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/models/FirstItem.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page.models;
+package _specs_.azure.core.page.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/models/ListItemInputBody.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page.models;
+package _specs_.azure.core.page.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/models/ListItemInputExtensibleEnum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page.models;
+package _specs_.azure.core.page.models;
 
 /**
  * An extensible enum input parameter.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/page/models/SecondItem.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.page.models;
+package _specs_.azure.core.page.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/scalar/ScalarAsyncClient.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.scalar;
+package _specs_.azure.core.scalar;
 
-import com._specs_.azure.core.scalar.implementation.AzureLocationScalarsImpl;
-import com._specs_.azure.core.scalar.models.AzureLocationModel;
+import _specs_.azure.core.scalar.implementation.AzureLocationScalarsImpl;
+import _specs_.azure.core.scalar.models.AzureLocationModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/scalar/ScalarClient.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.scalar;
+package _specs_.azure.core.scalar;
 
-import com._specs_.azure.core.scalar.implementation.AzureLocationScalarsImpl;
-import com._specs_.azure.core.scalar.models.AzureLocationModel;
+import _specs_.azure.core.scalar.implementation.AzureLocationScalarsImpl;
+import _specs_.azure.core.scalar.models.AzureLocationModel;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/scalar/ScalarServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.scalar;
+package _specs_.azure.core.scalar;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/scalar/implementation/AzureLocationScalarsImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.scalar.implementation;
+package _specs_.azure.core.scalar.implementation;
 
-import com._specs_.azure.core.scalar.ScalarServiceVersion;
+import _specs_.azure.core.scalar.ScalarServiceVersion;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/scalar/models/AzureLocationModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.scalar.models;
+package _specs_.azure.core.scalar.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/traits/TraitsClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.traits;
+package _specs_.azure.core.traits;
 
-import com._specs_.azure.core.traits.implementation.TraitsClientImpl;
+import _specs_.azure.core.traits.implementation.TraitsClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/traits/TraitsServiceVersion.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.traits;
+package _specs_.azure.core.traits;
 
 import com.azure.core.util.ServiceVersion;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/traits/implementation/TraitsClientImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.traits.implementation;
+package _specs_.azure.core.traits.implementation;
 
-import com._specs_.azure.core.traits.TraitsServiceVersion;
+import _specs_.azure.core.traits.TraitsServiceVersion;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/traits/models/UserActionParam.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.traits.models;
+package _specs_.azure.core.traits.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/core/traits/models/UserActionResponse.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.core.traits.models;
+package _specs_.azure.core.traits.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/example/basic/AzureExampleClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.example.basic;
+package _specs_.azure.example.basic;
 
-import com._specs_.azure.example.basic.implementation.AzureExampleClientImpl;
+import _specs_.azure.example.basic.implementation.AzureExampleClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/example/basic/implementation/AzureExampleClientImpl.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.example.basic.implementation;
+package _specs_.azure.example.basic.implementation;
 
-import com._specs_.azure.example.basic.BasicServiceVersion;
+import _specs_.azure.example.basic.BasicServiceVersion;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.HeaderParam;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/example/basic/models/ActionRequest.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.example.basic.models;
+package _specs_.azure.example.basic.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.annotation.Generated;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/example/basic/models/ActionResponse.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.example.basic.models;
+package _specs_.azure.example.basic.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/_specs_/azure/example/basic/models/Enum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com._specs_.azure.example.basic.models;
+package _specs_.azure.example.basic.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.util.ExpandableStringEnum;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/apikey/ApiKeyAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.apikey;
+package authentication.apikey;
 
-import com.authentication.apikey.implementation.ApiKeyClientImpl;
+import authentication.apikey.implementation.ApiKeyClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/apikey/ApiKeyClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.apikey;
+package authentication.apikey;
 
-import com.authentication.apikey.implementation.ApiKeyClientImpl;
+import authentication.apikey.implementation.ApiKeyClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/apikey/ApiKeyClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.apikey;
+package authentication.apikey;
 
-import com.authentication.apikey.implementation.ApiKeyClientImpl;
+import authentication.apikey.implementation.ApiKeyClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/apikey/implementation/ApiKeyClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.apikey.implementation;
+package authentication.apikey.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/http/custom/CustomAsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.http.custom;
+package authentication.http.custom;
 
-import com.authentication.http.custom.implementation.CustomClientImpl;
+import authentication.http.custom.implementation.CustomClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/http/custom/CustomClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.http.custom;
+package authentication.http.custom;
 
-import com.authentication.http.custom.implementation.CustomClientImpl;
+import authentication.http.custom.implementation.CustomClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/http/custom/CustomClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.http.custom;
+package authentication.http.custom;
 
-import com.authentication.http.custom.implementation.CustomClientImpl;
+import authentication.http.custom.implementation.CustomClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/http/custom/implementation/CustomClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.http.custom.implementation;
+package authentication.http.custom.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/oauth2/OAuth2AsyncClient.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.oauth2;
+package authentication.oauth2;
 
-import com.authentication.oauth2.implementation.OAuth2ClientImpl;
+import authentication.oauth2.implementation.OAuth2ClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/oauth2/OAuth2Client.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.oauth2;
+package authentication.oauth2;
 
-import com.authentication.oauth2.implementation.OAuth2ClientImpl;
+import authentication.oauth2.implementation.OAuth2ClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/oauth2/OAuth2ClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.oauth2;
+package authentication.oauth2;
 
-import com.authentication.oauth2.implementation.OAuth2ClientImpl;
+import authentication.oauth2.implementation.OAuth2ClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/authentication/oauth2/implementation/OAuth2ClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.authentication.oauth2.implementation;
+package authentication.oauth2.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/fluent/CommonPropertiesClient.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.fluent;
+package azure.resourcemanager.commonproperties.fluent;
 
 import com.azure.core.http.HttpPipeline;
 import java.time.Duration;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/fluent/ManagedIdentitiesClient.java
Patch:
@@ -2,13 +2,13 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.fluent;
+package azure.resourcemanager.commonproperties.fluent;
 
+import azure.resourcemanager.commonproperties.fluent.models.ManagedIdentityTrackedResourceInner;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceMethod;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.Context;
-import com.azure.resourcemanager.commonproperties.fluent.models.ManagedIdentityTrackedResourceInner;
 
 /**
  * An instance of this class provides access to all the operations defined in ManagedIdentitiesClient.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/fluent/models/ManagedIdentityTrackedResourceInner.java
Patch:
@@ -2,16 +2,16 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.fluent.models;
+package azure.resourcemanager.commonproperties.fluent.models;
 
+import azure.resourcemanager.commonproperties.models.ManagedIdentityTrackedResourceProperties;
+import azure.resourcemanager.commonproperties.models.ManagedServiceIdentity;
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.Resource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.commonproperties.models.ManagedIdentityTrackedResourceProperties;
-import com.azure.resourcemanager.commonproperties.models.ManagedServiceIdentity;
 import java.io.IOException;
 import java.util.Map;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/implementation/CommonPropertiesClientBuilder.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.implementation;
+package azure.resourcemanager.commonproperties.implementation;
 
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.http.HttpPipeline;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/implementation/CommonPropertiesClientImpl.java
Patch:
@@ -2,8 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.implementation;
+package azure.resourcemanager.commonproperties.implementation;
 
+import azure.resourcemanager.commonproperties.fluent.CommonPropertiesClient;
+import azure.resourcemanager.commonproperties.fluent.ManagedIdentitiesClient;
 import com.azure.core.annotation.ServiceClient;
 import com.azure.core.http.HttpHeaderName;
 import com.azure.core.http.HttpHeaders;
@@ -23,8 +25,6 @@
 import com.azure.core.util.polling.PollerFlux;
 import com.azure.core.util.serializer.SerializerAdapter;
 import com.azure.core.util.serializer.SerializerEncoding;
-import com.azure.resourcemanager.commonproperties.fluent.CommonPropertiesClient;
-import com.azure.resourcemanager.commonproperties.fluent.ManagedIdentitiesClient;
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.nio.ByteBuffer;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/implementation/ManagedIdentitiesClientImpl.java
Patch:
@@ -2,8 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.implementation;
+package azure.resourcemanager.commonproperties.implementation;
 
+import azure.resourcemanager.commonproperties.fluent.ManagedIdentitiesClient;
+import azure.resourcemanager.commonproperties.fluent.models.ManagedIdentityTrackedResourceInner;
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;
@@ -24,8 +26,6 @@
 import com.azure.core.management.exception.ManagementException;
 import com.azure.core.util.Context;
 import com.azure.core.util.FluxUtil;
-import com.azure.resourcemanager.commonproperties.fluent.ManagedIdentitiesClient;
-import com.azure.resourcemanager.commonproperties.fluent.models.ManagedIdentityTrackedResourceInner;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/models/ManagedIdentities.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.models;
+package azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.Context;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/commonproperties/models/ManagedIdentityTrackedResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.commonproperties.models;
+package azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.annotation.Immutable;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/NestedsClient.java
Patch:
@@ -2,16 +2,16 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent;
+package azure.resourcemanager.resources.fluent;
 
+import azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceMethod;
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;
 import com.azure.core.management.polling.PollResult;
 import com.azure.core.util.Context;
 import com.azure.core.util.polling.SyncPoller;
-import com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 
 /**
  * An instance of this class provides access to all the operations defined in NestedsClient.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/ResourcesClient.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent;
+package azure.resourcemanager.resources.fluent;
 
 import com.azure.core.http.HttpPipeline;
 import java.time.Duration;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/SingletonsClient.java
Patch:
@@ -2,16 +2,16 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent;
+package azure.resourcemanager.resources.fluent;
 
+import azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceMethod;
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;
 import com.azure.core.management.polling.PollResult;
 import com.azure.core.util.Context;
 import com.azure.core.util.polling.SyncPoller;
-import com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 
 /**
  * An instance of this class provides access to all the operations defined in SingletonsClient.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/TopLevelsClient.java
Patch:
@@ -2,17 +2,17 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent;
+package azure.resourcemanager.resources.fluent;
 
+import azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
+import azure.resourcemanager.resources.models.NotificationDetails;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceMethod;
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;
 import com.azure.core.management.polling.PollResult;
 import com.azure.core.util.Context;
 import com.azure.core.util.polling.SyncPoller;
-import com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
-import com.azure.resourcemanager.resources.models.NotificationDetails;
 
 /**
  * An instance of this class provides access to all the operations defined in TopLevelsClient.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/models/NestedProxyResourceInner.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent.models;
+package azure.resourcemanager.resources.fluent.models;
 
+import azure.resourcemanager.resources.models.NestedProxyResourceProperties;
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.ProxyResource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.resources.models.NestedProxyResourceProperties;
 import java.io.IOException;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/models/SingletonTrackedResourceInner.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent.models;
+package azure.resourcemanager.resources.fluent.models;
 
+import azure.resourcemanager.resources.models.SingletonTrackedResourceProperties;
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.Resource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.resources.models.SingletonTrackedResourceProperties;
 import java.io.IOException;
 import java.util.Map;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/fluent/models/TopLevelTrackedResourceInner.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.fluent.models;
+package azure.resourcemanager.resources.fluent.models;
 
+import azure.resourcemanager.resources.models.TopLevelTrackedResourceProperties;
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.Resource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.resources.models.TopLevelTrackedResourceProperties;
 import java.io.IOException;
 import java.util.Map;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/implementation/ResourcesClientBuilder.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.implementation;
+package azure.resourcemanager.resources.implementation;
 
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.http.HttpPipeline;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/implementation/models/NestedProxyResourceListResult.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.implementation.models;
+package azure.resourcemanager.resources.implementation.models;
 
+import azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 import com.azure.core.annotation.Immutable;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonSerializable;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 import java.io.IOException;
 import java.util.List;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/implementation/models/SingletonTrackedResourceListResult.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.implementation.models;
+package azure.resourcemanager.resources.implementation.models;
 
+import azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import com.azure.core.annotation.Immutable;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonSerializable;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import java.io.IOException;
 import java.util.List;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/implementation/models/TopLevelTrackedResourceListResult.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.implementation.models;
+package azure.resourcemanager.resources.implementation.models;
 
+import azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
 import com.azure.core.annotation.Immutable;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonSerializable;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
 import java.io.IOException;
 import java.util.List;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/NestedProxyResource.java
Patch:
@@ -2,11 +2,11 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
+import azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 import com.azure.core.management.SystemData;
 import com.azure.core.util.Context;
-import com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 
 /**
  * An immutable client-side representation of NestedProxyResource.
@@ -55,7 +55,7 @@ public interface NestedProxyResource {
     String resourceGroupName();
 
     /**
-     * Gets the inner com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner object.
+     * Gets the inner azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner object.
      * 
      * @return the inner object.
      */

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/NestedProxyResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/Nesteds.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/NotificationDetails.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.util.logging.ClientLogger;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/SingletonTrackedResource.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
+import azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import com.azure.core.management.SystemData;
-import com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import java.util.Map;
 
 /**
@@ -62,7 +62,7 @@ public interface SingletonTrackedResource {
     SystemData systemData();
 
     /**
-     * Gets the inner com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner object.
+     * Gets the inner azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner object.
      * 
      * @return the inner object.
      */

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/SingletonTrackedResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/Singletons.java
Patch:
@@ -2,12 +2,12 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
+import azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.Context;
-import com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 
 /**
  * Resource collection API of Singletons.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/TopLevelTrackedResource.java
Patch:
@@ -2,13 +2,13 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
+import azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
 import com.azure.core.http.rest.Response;
 import com.azure.core.management.Region;
 import com.azure.core.management.SystemData;
 import com.azure.core.util.Context;
-import com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
 import java.util.Map;
 
 /**
@@ -86,7 +86,7 @@ public interface TopLevelTrackedResource {
     String resourceGroupName();
 
     /**
-     * Gets the inner com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner object.
+     * Gets the inner azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner object.
      * 
      * @return the inner object.
      */

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/TopLevelTrackedResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/resourcemanager/resources/models/TopLevels.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.resources.models;
+package azure.resourcemanager.resources.models;
 
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/specialheaders/xmsclientrequestid/XmsClientRequestIdAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.specialheaders.xmsclientrequestid;
+package azure.specialheaders.xmsclientrequestid;
 
+import azure.specialheaders.xmsclientrequestid.implementation.XmsClientRequestIdClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.azure.specialheaders.xmsclientrequestid.implementation.XmsClientRequestIdClientImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/specialheaders/xmsclientrequestid/XmsClientRequestIdClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.specialheaders.xmsclientrequestid;
+package azure.specialheaders.xmsclientrequestid;
 
+import azure.specialheaders.xmsclientrequestid.implementation.XmsClientRequestIdClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.azure.specialheaders.xmsclientrequestid.implementation.XmsClientRequestIdClientImpl;
 
 /**
  * Initializes a new instance of the synchronous XmsClientRequestIdClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/specialheaders/xmsclientrequestid/XmsClientRequestIdClientBuilder.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.specialheaders.xmsclientrequestid;
+package azure.specialheaders.xmsclientrequestid;
 
+import azure.specialheaders.xmsclientrequestid.implementation.XmsClientRequestIdClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -31,7 +32,6 @@
 import com.azure.core.util.builder.ClientBuilderUtil;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.serializer.JacksonAdapter;
-import com.azure.specialheaders.xmsclientrequestid.implementation.XmsClientRequestIdClientImpl;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/azure/specialheaders/xmsclientrequestid/implementation/XmsClientRequestIdClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.specialheaders.xmsclientrequestid.implementation;
+package azure.specialheaders.xmsclientrequestid.implementation;
 
 import com.azure.core.annotation.ExpectedResponses;
 import com.azure.core.annotation.Get;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/implementation/ClientModelsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.implementation;
+package client.naming.implementation;
 
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/implementation/UnionEnumsImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.implementation;
+package client.naming.implementation;
 
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/ClientExtensibleEnum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.util.ExpandableStringEnum;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/ClientModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/ClientNameAndJsonEncodedNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/ClientNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/ExtensibleEnum.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.util.ExpandableStringEnum;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/JavaModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/naming/models/LanguageClientNameModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.naming.models;
+package client.naming.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/BarAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.BarsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.BarsImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/BarClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.BarsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.BarsImpl;
 
 /**
  * Initializes a new instance of the synchronous ServiceClientClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/BazFooAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.BazFoosImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.BazFoosImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/BazFooClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.BazFoosImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.BazFoosImpl;
 
 /**
  * Initializes a new instance of the synchronous ServiceClientClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientAAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ClientAClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.ClientAClientImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientAClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ClientAClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.ClientAClientImpl;
 
 /**
  * Initializes a new instance of the synchronous ClientAClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientAClientBuilder.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ClientAClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -31,7 +32,6 @@
 import com.azure.core.util.builder.ClientBuilderUtil;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.serializer.JacksonAdapter;
-import com.client.structure.service.implementation.ClientAClientImpl;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientBAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ClientBClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.ClientBClientImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientBClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ClientBClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.ClientBClientImpl;
 
 /**
  * Initializes a new instance of the synchronous ClientBClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ClientBClientBuilder.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ClientBClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -31,7 +32,6 @@
 import com.azure.core.util.builder.ClientBuilderUtil;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.serializer.JacksonAdapter;
-import com.client.structure.service.implementation.ClientBClientImpl;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/FooAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.FoosImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.FoosImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/FooClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.FoosImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.FoosImpl;
 
 /**
  * Initializes a new instance of the synchronous ServiceClientClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group1AsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group1sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.Group1sImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group1Client.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group1sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.Group1sImpl;
 
 /**
  * Initializes a new instance of the synchronous TwoOperationGroupClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group2AsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group2sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.Group2sImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group2Client.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group2sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.Group2sImpl;
 
 /**
  * Initializes a new instance of the synchronous TwoOperationGroupClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group3AsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group3sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.Group3sImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group3Client.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group3sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.Group3sImpl;
 
 /**
  * Initializes a new instance of the synchronous FirstClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group4AsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group4sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.Group4sImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/Group4Client.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.Group4sImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.Group4sImpl;
 
 /**
  * Initializes a new instance of the synchronous FirstClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/GroupAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.GroupsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.GroupsImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/GroupClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.GroupsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.GroupsImpl;
 
 /**
  * Initializes a new instance of the synchronous RenamedOperationClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/QuxAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.QuxesImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.QuxesImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/QuxBarAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.QuxBarsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.QuxBarsImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/QuxBarClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.QuxBarsImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.QuxBarsImpl;
 
 /**
  * Initializes a new instance of the synchronous ServiceClientClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/QuxClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.QuxesImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.QuxesImpl;
 
 /**
  * Initializes a new instance of the synchronous ServiceClientClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/RenamedOperationAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.RenamedOperationClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.RenamedOperationClientImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/RenamedOperationClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.RenamedOperationClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.RenamedOperationClientImpl;
 
 /**
  * Initializes a new instance of the synchronous RenamedOperationClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/RenamedOperationClientBuilder.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.RenamedOperationClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -31,7 +32,6 @@
 import com.azure.core.util.builder.ClientBuilderUtil;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.serializer.JacksonAdapter;
-import com.client.structure.service.implementation.RenamedOperationClientImpl;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ServiceClientAsyncClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ServiceClientClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -15,7 +16,6 @@
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.FluxUtil;
-import com.client.structure.service.implementation.ServiceClientClientImpl;
 import reactor.core.publisher.Mono;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ServiceClientClient.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ServiceClientClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ReturnType;
 import com.azure.core.annotation.ServiceClient;
@@ -14,7 +15,6 @@
 import com.azure.core.exception.ResourceNotFoundException;
 import com.azure.core.http.rest.RequestOptions;
 import com.azure.core.http.rest.Response;
-import com.client.structure.service.implementation.ServiceClientClientImpl;
 
 /**
  * Initializes a new instance of the synchronous ServiceClientClient type.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/ServiceClientClientBuilder.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.ServiceClientClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -31,7 +32,6 @@
 import com.azure.core.util.builder.ClientBuilderUtil;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.serializer.JacksonAdapter;
-import com.client.structure.service.implementation.ServiceClientClientImpl;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/client/structure/service/TwoOperationGroupClientBuilder.java
Patch:
@@ -2,8 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.client.structure.service;
+package client.structure.service;
 
+import client.structure.service.implementation.TwoOperationGroupClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -31,7 +32,6 @@
 import com.azure.core.util.builder.ClientBuilderUtil;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.serializer.JacksonAdapter;
-import com.client.structure.service.implementation.TwoOperationGroupClientImpl;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/ClassType.java
Patch:
@@ -321,8 +321,9 @@ private static ClassType.Builder getClassTypeBuilder(Class<?> classKey) {
     public static final ClassType DURATION = new Builder(false).knownClass(Duration.class)
         .defaultValueExpressionConverter(defaultValueExpression -> "Duration.parse(\"" + defaultValueExpression + "\")")
         .jsonToken("JsonToken.STRING")
-        .serializationValueGetterModifier(
-            valueGetter -> CORE_UTILS.getName() + ".durationToStringWithDays(" + valueGetter + ")")
+        .serializationValueGetterModifier(valueGetter -> JavaSettings.getInstance().isBranded()
+            ? CORE_UTILS.getName() + ".durationToStringWithDays(" + valueGetter + ")"
+            : "Objects.toString(" + valueGetter + ", null)")
         .jsonDeserializationMethod("getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()))")
         .serializationMethodBase("writeString")
         .xmlElementDeserializationMethod("getNullableElement(Duration::parse)")

File: packages/http-client-java/generator/http-client-generator-core/src/test/java/com/microsoft/typespec/http/client/generator/core/model/projectmodel/ProjectTests.java
Patch:
@@ -19,6 +19,6 @@ public void testParsePom() throws URISyntaxException {
         List<String> dependencyIdentifiers = Project.findPomDependencies(pomPath);
 
         Assertions.assertTrue(
-            dependencyIdentifiers.contains("com.azure.resourcemanager:azure-resourcemanager-resources:2.42.0:test"));
+            dependencyIdentifiers.contains("com.azure.resourcemanager:azure-resourcemanager-resources:2.43.0:test"));
     }
 }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/union/implementation/models/SendLongRequest.java
Patch:
@@ -186,7 +186,8 @@ public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeIntField("dataInt", this.dataInt);
         jsonWriter.writeJsonField("user", this.user);
         if (this.dataUnion != null) {
-            jsonWriter.writeUntypedField("dataUnion", this.dataUnion.toObject(Object.class));
+            jsonWriter.writeFieldName("dataUnion");
+            this.dataUnion.writeTo(jsonWriter);
         }
         jsonWriter.writeNumberField("dataLong", this.dataLong);
         jsonWriter.writeNumberField("data_float", this.dataFloat);

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/union/implementation/models/SendRequest.java
Patch:
@@ -80,7 +80,8 @@ public BinaryData getInput() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("input", this.input.toObject(Object.class));
+        jsonWriter.writeFieldName("input");
+        this.input.writeTo(jsonWriter);
         jsonWriter.writeJsonField("user", this.user);
         return jsonWriter.writeEndObject();
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/union/models/Result.java
Patch:
@@ -98,7 +98,8 @@ public BinaryData getData() {
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
         jsonWriter.writeStringField("name", this.name);
-        jsonWriter.writeUntypedField("data", this.data.toObject(Object.class));
+        jsonWriter.writeFieldName("data");
+        this.data.writeTo(jsonWriter);
         jsonWriter.writeJsonField("result", this.result);
         return jsonWriter.writeEndObject();
     }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/models/UnknownArrayProperty.java
Patch:
@@ -51,7 +51,8 @@ public BinaryData getProperty() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("property", this.property.toObject(Object.class));
+        jsonWriter.writeFieldName("property");
+        this.property.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/models/UnknownDictProperty.java
Patch:
@@ -51,7 +51,8 @@ public BinaryData getProperty() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("property", this.property.toObject(Object.class));
+        jsonWriter.writeFieldName("property");
+        this.property.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/models/UnknownIntProperty.java
Patch:
@@ -51,7 +51,8 @@ public BinaryData getProperty() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("property", this.property.toObject(Object.class));
+        jsonWriter.writeFieldName("property");
+        this.property.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/models/UnknownStringProperty.java
Patch:
@@ -51,7 +51,8 @@ public BinaryData getProperty() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("property", this.property.toObject(Object.class));
+        jsonWriter.writeFieldName("property");
+        this.property.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/union/implementation/models/SendRequest4.java
Patch:
@@ -51,7 +51,8 @@ public BinaryData getProp() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("prop", this.prop.toObject(Object.class));
+        jsonWriter.writeFieldName("prop");
+        this.prop.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/union/models/GetResponse4.java
Patch:
@@ -51,7 +51,8 @@ public BinaryData getProp() {
     @Override
     public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
-        jsonWriter.writeUntypedField("prop", this.prop.toObject(Object.class));
+        jsonWriter.writeFieldName("prop");
+        this.prop.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/versioning/added/models/ModelV1.java
Patch:
@@ -89,7 +89,8 @@ public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
         jsonWriter.writeStringField("prop", this.prop);
         jsonWriter.writeStringField("enumProp", this.enumProp == null ? null : this.enumProp.toString());
-        jsonWriter.writeUntypedField("unionProp", this.unionProp.toObject(Object.class));
+        jsonWriter.writeFieldName("unionProp");
+        this.unionProp.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/versioning/added/models/ModelV2.java
Patch:
@@ -89,7 +89,8 @@ public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
         jsonWriter.writeStringField("prop", this.prop);
         jsonWriter.writeStringField("enumProp", this.enumProp == null ? null : this.enumProp.toString());
-        jsonWriter.writeUntypedField("unionProp", this.unionProp.toObject(Object.class));
+        jsonWriter.writeFieldName("unionProp");
+        this.unionProp.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/versioning/removed/models/ModelV2.java
Patch:
@@ -89,7 +89,8 @@ public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
         jsonWriter.writeStringField("prop", this.prop);
         jsonWriter.writeStringField("enumProp", this.enumProp == null ? null : this.enumProp.toString());
-        jsonWriter.writeUntypedField("unionProp", this.unionProp.toObject(Object.class));
+        jsonWriter.writeFieldName("unionProp");
+        this.unionProp.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/versioning/renamedfrom/models/NewModel.java
Patch:
@@ -89,7 +89,8 @@ public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
         jsonWriter.writeStartObject();
         jsonWriter.writeStringField("newProp", this.newProp);
         jsonWriter.writeStringField("enumProp", this.enumProp == null ? null : this.enumProp.toString());
-        jsonWriter.writeUntypedField("unionProp", this.unionProp.toObject(Object.class));
+        jsonWriter.writeFieldName("unionProp");
+        this.unionProp.writeTo(jsonWriter);
         return jsonWriter.writeEndObject();
     }
 

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/Annotation.java
Patch:
@@ -60,7 +60,7 @@ public class Annotation {
         = new Annotation(CLIENTCORE_PACKAGE, "HttpRequestInformation");
     public static final Annotation UNEXPECTED_RESPONSE_EXCEPTION_INFORMATION
         = new Annotation(CLIENTCORE_PACKAGE, "UnexpectedResponseExceptionDetail");
-    public static final Annotation TYPE_CONDITIONS = new Annotation(CLIENTCORE_PACKAGE, "TypeConditions");
+    public static final Annotation TYPE_CONDITIONS = new Annotation("io.clientcore.core.annotation", "TypeConditions");
 
     private final String fullName;
     private final String packageName;

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/template/ModelTemplate.java
Patch:
@@ -217,7 +217,8 @@ public final void write(ClientModel model, JavaFile javaFile) {
                         && definedByModel
                         && streamStyle
                         && !property.isPolymorphicDiscriminator()
-                        && !modelIsJsonMergePatch) {
+                        && !modelIsJsonMergePatch
+                        && !property.isConstant()) {
                         generateSetterJavadoc(classBlock, model, property);
                         addGeneratedAnnotation(classBlock);
                         classBlock.method(JavaVisibility.PackagePrivate, null,
@@ -621,7 +622,7 @@ private void addProperty(ClientModelProperty property, ClientModel model, JavaCl
         addGeneratedAnnotation(classBlock);
         addFieldAnnotations(model, property, classBlock, settings);
 
-        if (ClientModelUtil.includePropertyInConstructor(property, settings)) {
+        if (ClientModelUtil.includePropertyInConstructor(property, settings) || property.isConstant()) {
             classBlock.privateFinalMemberVariable(fieldSignature);
         } else {
             classBlock.privateMemberVariable(fieldSignature);

File: packages/http-client-java/generator/http-client-generator-mgmt/src/main/java/com/microsoft/typespec/http/client/generator/mgmt/template/FluentManagerTemplate.java
Patch:
@@ -10,6 +10,7 @@
 import com.azure.core.http.HttpPipelinePosition;
 import com.azure.core.http.policy.AddDatePolicy;
 import com.azure.core.http.policy.AddHeadersFromContextPolicy;
+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.http.policy.HttpLoggingPolicy;
 import com.azure.core.http.policy.HttpPipelinePolicy;
@@ -18,7 +19,6 @@
 import com.azure.core.http.policy.RetryOptions;
 import com.azure.core.http.policy.RetryPolicy;
 import com.azure.core.http.policy.UserAgentPolicy;
-import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
 import com.azure.core.management.profile.AzureProfile;
 import com.azure.core.util.Configuration;
 import com.azure.core.util.logging.ClientLogger;
@@ -98,7 +98,7 @@ public void write(FluentManager manager, FluentProject project, JavaFile javaFil
             HttpPolicyProviders.class.getName(), RetryOptions.class.getName(),
             AddHeadersFromContextPolicy.class.getName(), RequestIdPolicy.class.getName(), RetryPolicy.class.getName(),
             AddDatePolicy.class.getName(), HttpLoggingPolicy.class.getName(), HttpLogOptions.class.getName(),
-            ArmChallengeAuthenticationPolicy.class.getName(), UserAgentPolicy.class.getName(),
+            BearerTokenAuthenticationPolicy.class.getName(), UserAgentPolicy.class.getName(),
             // azure-core-management
             AzureProfile.class.getName()));
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/CommonPropertiesManager.java
Patch:
@@ -11,6 +11,7 @@
 import com.azure.core.http.HttpPipelinePosition;
 import com.azure.core.http.policy.AddDatePolicy;
 import com.azure.core.http.policy.AddHeadersFromContextPolicy;
+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.http.policy.HttpLoggingPolicy;
 import com.azure.core.http.policy.HttpPipelinePolicy;
@@ -19,7 +20,6 @@
 import com.azure.core.http.policy.RetryOptions;
 import com.azure.core.http.policy.RetryPolicy;
 import com.azure.core.http.policy.UserAgentPolicy;
-import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
 import com.azure.core.management.profile.AzureProfile;
 import com.azure.core.util.Configuration;
 import com.azure.core.util.logging.ClientLogger;
@@ -238,7 +238,7 @@ public CommonPropertiesManager authenticate(TokenCredential credential, AzurePro
             HttpPolicyProviders.addBeforeRetryPolicies(policies);
             policies.add(retryPolicy);
             policies.add(new AddDatePolicy());
-            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
+            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
             policies.addAll(this.policies.stream()
                 .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                 .collect(Collectors.toList()));

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/ResourcesManager.java
Patch:
@@ -11,6 +11,7 @@
 import com.azure.core.http.HttpPipelinePosition;
 import com.azure.core.http.policy.AddDatePolicy;
 import com.azure.core.http.policy.AddHeadersFromContextPolicy;
+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.http.policy.HttpLoggingPolicy;
 import com.azure.core.http.policy.HttpPipelinePolicy;
@@ -19,7 +20,6 @@
 import com.azure.core.http.policy.RetryOptions;
 import com.azure.core.http.policy.RetryPolicy;
 import com.azure.core.http.policy.UserAgentPolicy;
-import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
 import com.azure.core.management.profile.AzureProfile;
 import com.azure.core.util.Configuration;
 import com.azure.core.util.logging.ClientLogger;
@@ -246,7 +246,7 @@ public ResourcesManager authenticate(TokenCredential credential, AzureProfile pr
             HttpPolicyProviders.addBeforeRetryPolicies(policies);
             policies.add(retryPolicy);
             policies.add(new AddDatePolicy());
-            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
+            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
             policies.addAll(this.policies.stream()
                 .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                 .collect(Collectors.toList()));

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/ArmResourceProviderManager.java
Patch:
@@ -11,6 +11,7 @@
 import com.azure.core.http.HttpPipelinePosition;
 import com.azure.core.http.policy.AddDatePolicy;
 import com.azure.core.http.policy.AddHeadersFromContextPolicy;
+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.http.policy.HttpLoggingPolicy;
 import com.azure.core.http.policy.HttpPipelinePolicy;
@@ -19,7 +20,6 @@
 import com.azure.core.http.policy.RetryOptions;
 import com.azure.core.http.policy.RetryPolicy;
 import com.azure.core.http.policy.UserAgentPolicy;
-import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
 import com.azure.core.management.profile.AzureProfile;
 import com.azure.core.util.Configuration;
 import com.azure.core.util.logging.ClientLogger;
@@ -254,7 +254,7 @@ public ArmResourceProviderManager authenticate(TokenCredential credential, Azure
             HttpPolicyProviders.addBeforeRetryPolicies(policies);
             policies.add(retryPolicy);
             policies.add(new AddDatePolicy());
-            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
+            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
             policies.addAll(this.policies.stream()
                 .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                 .collect(Collectors.toList()));

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armstreamstyleserialization/ArmStreamStyleSerializationManager.java
Patch:
@@ -11,6 +11,7 @@
 import com.azure.core.http.HttpPipelinePosition;
 import com.azure.core.http.policy.AddDatePolicy;
 import com.azure.core.http.policy.AddHeadersFromContextPolicy;
+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
 import com.azure.core.http.policy.HttpLogOptions;
 import com.azure.core.http.policy.HttpLoggingPolicy;
 import com.azure.core.http.policy.HttpPipelinePolicy;
@@ -19,7 +20,6 @@
 import com.azure.core.http.policy.RetryOptions;
 import com.azure.core.http.policy.RetryPolicy;
 import com.azure.core.http.policy.UserAgentPolicy;
-import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
 import com.azure.core.management.profile.AzureProfile;
 import com.azure.core.util.Configuration;
 import com.azure.core.util.logging.ClientLogger;
@@ -244,7 +244,7 @@ public ArmStreamStyleSerializationManager authenticate(TokenCredential credentia
             HttpPolicyProviders.addBeforeRetryPolicies(policies);
             policies.add(retryPolicy);
             policies.add(new AddDatePolicy());
-            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
+            policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));
             policies.addAll(this.policies.stream()
                 .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                 .collect(Collectors.toList()));

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/ExtendsUnknownAsyncClient.java
Patch:
@@ -47,7 +47,7 @@ public final class ExtendsUnknownAsyncClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -75,7 +75,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/ExtendsUnknownClient.java
Patch:
@@ -45,7 +45,7 @@ public final class ExtendsUnknownClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -73,7 +73,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/ExtendsUnknownDerivedAsyncClient.java
Patch:
@@ -47,7 +47,7 @@ public final class ExtendsUnknownDerivedAsyncClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)
@@ -77,7 +77,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/ExtendsUnknownDerivedClient.java
Patch:
@@ -45,7 +45,7 @@ public final class ExtendsUnknownDerivedClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)
@@ -75,7 +75,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/ExtendsUnknownDiscriminatedAsyncClient.java
Patch:
@@ -48,7 +48,7 @@ public final class ExtendsUnknownDiscriminatedAsyncClient {
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -77,7 +77,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/ExtendsUnknownDiscriminatedClient.java
Patch:
@@ -46,7 +46,7 @@ public final class ExtendsUnknownDiscriminatedClient {
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -75,7 +75,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/IsUnknownAsyncClient.java
Patch:
@@ -47,7 +47,7 @@ public final class IsUnknownAsyncClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -75,7 +75,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/IsUnknownClient.java
Patch:
@@ -45,7 +45,7 @@ public final class IsUnknownClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -73,7 +73,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/IsUnknownDerivedAsyncClient.java
Patch:
@@ -47,7 +47,7 @@ public final class IsUnknownDerivedAsyncClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)
@@ -77,7 +77,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/IsUnknownDerivedClient.java
Patch:
@@ -45,7 +45,7 @@ public final class IsUnknownDerivedClient {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)
@@ -75,7 +75,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * {
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      *     index: int (Required)
      *     age: Double (Optional)

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/IsUnknownDiscriminatedAsyncClient.java
Patch:
@@ -48,7 +48,7 @@ public final class IsUnknownDiscriminatedAsyncClient {
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -77,7 +77,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/IsUnknownDiscriminatedClient.java
Patch:
@@ -46,7 +46,7 @@ public final class IsUnknownDiscriminatedClient {
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }
@@ -75,7 +75,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      *     kind: String (Required)
      *     name: String (Required)
      *      (Optional): {
-     *         String: Object (Required)
+     *         String: BinaryData (Required)
      *     }
      * }
      * }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownArrayAsyncClient.java
Patch:
@@ -45,7 +45,7 @@ public final class UnknownArrayAsyncClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -70,7 +70,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownArrayClient.java
Patch:
@@ -43,7 +43,7 @@ public final class UnknownArrayClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -68,7 +68,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownDictAsyncClient.java
Patch:
@@ -45,7 +45,7 @@ public final class UnknownDictAsyncClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -70,7 +70,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownDictClient.java
Patch:
@@ -43,7 +43,7 @@ public final class UnknownDictClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -68,7 +68,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownIntAsyncClient.java
Patch:
@@ -45,7 +45,7 @@ public final class UnknownIntAsyncClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -70,7 +70,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownIntClient.java
Patch:
@@ -43,7 +43,7 @@ public final class UnknownIntClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -68,7 +68,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownStringAsyncClient.java
Patch:
@@ -45,7 +45,7 @@ public final class UnknownStringAsyncClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -70,7 +70,7 @@ public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions)
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/valuetypes/UnknownStringClient.java
Patch:
@@ -43,7 +43,7 @@ public final class UnknownStringClient {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>
@@ -68,7 +68,7 @@ public Response<BinaryData> getWithResponse(RequestOptions requestOptions) {
      * <pre>
      * {@code
      * {
-     *     property: Object (Required)
+     *     property: BinaryData (Required)
      * }
      * }
      * </pre>

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/com/routes/RouteTests.java
Patch:
@@ -73,7 +73,7 @@ public void testQueryExpansionExplode() {
 
         client.primitive("a");
 
-//        client.array(List.of("a", "b"));
+        client.array(List.of("a", "b"));
     }
 
     @Test
@@ -85,6 +85,6 @@ public void buildQueryParametersQueryContinuationExplode() {
 
         client.primitive("a");
 
-//        client.array(List.of("a", "b"));
+        client.array(List.of("a", "b"));
     }
 }

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/TypeSpecPlugin.java
Patch:
@@ -257,6 +257,9 @@ public TypeSpecPlugin(EmitterOptions options, boolean sdkIntegration) {
         if (options.getStreamStyleSerialization() != null) {
             SETTINGS_MAP.put("stream-style-serialization", options.getStreamStyleSerialization());
         }
+        if (options.getUseObjectForUnknown()) {
+            SETTINGS_MAP.put("use-object-for-unknown", emitterOptions.getUseObjectForUnknown());
+        }
 
         SETTINGS_MAP.put("sdk-integration", sdkIntegration);
         SETTINGS_MAP.put("regenerate-pom", sdkIntegration);

File: packages/http-client-java/generator/http-client-generator/src/main/java/com/microsoft/typespec/http/client/generator/fluent/TypeSpecFluentPlugin.java
Patch:
@@ -53,6 +53,7 @@ public TypeSpecFluentPlugin(EmitterOptions emitterOptions, boolean sdkIntegratio
         SETTINGS_MAP.put("output-model-immutable", true);
         SETTINGS_MAP.put("uuid-as-string", true);
         SETTINGS_MAP.put("stream-style-serialization", emitterOptions.getStreamStyleSerialization());
+        SETTINGS_MAP.put("use-object-for-unknown", emitterOptions.getUseObjectForUnknown());
 
         JavaSettingsAccessor.setHost(this);
         LOGGER.info("Output folder: {}", emitterOptions.getOutputDir());

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/model/inheritance/enumnesteddiscriminator/EnumNestedDiscriminatorClientBuilder.java
Patch:
@@ -218,16 +218,16 @@ public EnumNestedDiscriminatorClientBuilder retryPolicy(RetryPolicy retryPolicy)
     private EnumNestedDiscriminatorClientImpl buildInnerClient() {
         this.validateClient();
         HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
-        String localEndpoint = (endpoint != null) ? endpoint : "http://localhost:3000";
         EnumNestedDiscriminatorClientImpl client = new EnumNestedDiscriminatorClientImpl(localPipeline,
-            JacksonAdapter.createDefaultSerializerAdapter(), localEndpoint);
+            JacksonAdapter.createDefaultSerializerAdapter(), this.endpoint);
         return client;
     }
 
     @Generated
     private void validateClient() {
         // This method is invoked from 'buildInnerClient'/'buildClient' method.
         // Developer can customize this method, to validate that the necessary conditions are met for the new client.
+        Objects.requireNonNull(endpoint, "'endpoint' cannot be null.");
     }
 
     @Generated

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/com/azure/resourcemanager/commonproperties/ManagedIdentityManagerTests.java
Patch:
@@ -4,14 +4,13 @@
 package com.azure.resourcemanager.commonproperties;
 
 import com.azure.core.management.Region;
-import java.util.HashMap;
-import java.util.Map;
-
 import com.azure.resourcemanager.commonproperties.models.ManagedIdentityTrackedResource;
 import com.azure.resourcemanager.commonproperties.models.ManagedIdentityTrackedResourceProperties;
 import com.azure.resourcemanager.commonproperties.models.ManagedServiceIdentity;
 import com.azure.resourcemanager.commonproperties.models.ManagedServiceIdentityType;
 import com.azure.resourcemanager.commonproperties.models.UserAssignedIdentity;
+import java.util.HashMap;
+import java.util.Map;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 import org.utils.ArmUtils;

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/com/type/model/inheritance/enumnesteddiscriminator/generated/EnumNestedDiscriminatorClientTestBase.java
Patch:
@@ -23,7 +23,7 @@ class EnumNestedDiscriminatorClientTestBase extends TestProxyTestBase {
     protected void beforeTest() {
         EnumNestedDiscriminatorClientBuilder enumNestedDiscriminatorClientbuilder
             = new EnumNestedDiscriminatorClientBuilder()
-                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "http://localhost:3000"))
+                .endpoint(Configuration.getGlobalConfiguration().get("ENDPOINT", "endpoint"))
                 .httpClient(getHttpClientOrUsePlayback(getHttpClients().findFirst().orElse(null)))
                 .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
         if (getTestMode() == TestMode.RECORD) {

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/fluent/models/ManagedIdentityTrackedResourceInner.java
Patch:
@@ -2,16 +2,16 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.fluent.models;
+package com.azure.resourcemanager.commonproperties.fluent.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.Resource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedIdentityTrackedResourceProperties;
-import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedServiceIdentity;
+import com.azure.resourcemanager.commonproperties.models.ManagedIdentityTrackedResourceProperties;
+import com.azure.resourcemanager.commonproperties.models.ManagedServiceIdentity;
 import java.io.IOException;
 import java.util.Map;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/fluent/models/package-info.java
Patch:
@@ -3,7 +3,7 @@
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
 /**
- * Package containing the data models for ManagedIdentity.
+ * Package containing the inner data models for CommonProperties.
  * Arm Managed Identity Provider management API.
  */
-package com.azure.resourcemanager.models.commontypes.managedidentity.models;
+package com.azure.resourcemanager.commonproperties.fluent.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/fluent/package-info.java
Patch:
@@ -3,7 +3,7 @@
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
 /**
- * Package containing the classes for ManagedIdentity.
+ * Package containing the service clients for CommonProperties.
  * Arm Managed Identity Provider management API.
  */
-package com.azure.resourcemanager.models.commontypes.managedidentity;
+package com.azure.resourcemanager.commonproperties.fluent;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/implementation/ResourceManagerUtils.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.implementation;
+package com.azure.resourcemanager.commonproperties.implementation;
 
 import com.azure.core.http.rest.PagedFlux;
 import com.azure.core.http.rest.PagedIterable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/implementation/package-info.java
Patch:
@@ -3,7 +3,7 @@
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
 /**
- * Package containing the service clients for ManagedIdentity.
+ * Package containing the implementations for CommonProperties.
  * Arm Managed Identity Provider management API.
  */
-package com.azure.resourcemanager.models.commontypes.managedidentity.fluent;
+package com.azure.resourcemanager.commonproperties.implementation;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/models/ManagedIdentities.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.models;
+package com.azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.Context;
 
 /**
- * Resource collection API of ManagedIdentityTrackedResources.
+ * Resource collection API of ManagedIdentities.
  */
-public interface ManagedIdentityTrackedResources {
+public interface ManagedIdentities {
     /**
      * Get a ManagedIdentityTrackedResource.
      * 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/models/ManagedIdentityTrackedResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.models;
+package com.azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.annotation.Immutable;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/models/ManagedServiceIdentity.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.models;
+package com.azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.util.logging.ClientLogger;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/models/ManagedServiceIdentityType.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.models;
+package com.azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.util.ExpandableStringEnum;
 import java.util.Collection;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/models/UserAssignedIdentity.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.models;
+package com.azure.resourcemanager.commonproperties.models;
 
 import com.azure.core.annotation.Immutable;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/commonproperties/models/package-info.java
Patch:
@@ -3,7 +3,7 @@
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
 /**
- * Package containing the implementations for ManagedIdentity.
+ * Package containing the data models for CommonProperties.
  * Arm Managed Identity Provider management API.
  */
-package com.azure.resourcemanager.models.commontypes.managedidentity.implementation;
+package com.azure.resourcemanager.commonproperties.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/fluent/models/NestedProxyResourceInner.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.fluent.models;
+package com.azure.resourcemanager.resources.fluent.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.ProxyResource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.resources.models.NestedProxyResourceProperties;
+import com.azure.resourcemanager.resources.models.NestedProxyResourceProperties;
 import java.io.IOException;
 
 /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/fluent/models/SingletonTrackedResourceInner.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.fluent.models;
+package com.azure.resourcemanager.resources.fluent.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.Resource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.resources.models.SingletonTrackedResourceProperties;
+import com.azure.resourcemanager.resources.models.SingletonTrackedResourceProperties;
 import java.io.IOException;
 import java.util.Map;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/fluent/models/TopLevelTrackedResourceInner.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.fluent.models;
+package com.azure.resourcemanager.resources.fluent.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.management.Resource;
 import com.azure.core.management.SystemData;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.resources.models.TopLevelTrackedResourceProperties;
+import com.azure.resourcemanager.resources.models.TopLevelTrackedResourceProperties;
 import java.io.IOException;
 import java.util.Map;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/fluent/models/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * Package containing the inner data models for Resources.
  * Arm Resource Provider management API.
  */
-package com.azure.resourcemanager.models.resources.fluent.models;
+package com.azure.resourcemanager.resources.fluent.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/fluent/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * Package containing the service clients for Resources.
  * Arm Resource Provider management API.
  */
-package com.azure.resourcemanager.models.resources.fluent;
+package com.azure.resourcemanager.resources.fluent;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/implementation/ResourceManagerUtils.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.commontypes.managedidentity.implementation;
+package com.azure.resourcemanager.resources.implementation;
 
 import com.azure.core.http.rest.PagedFlux;
 import com.azure.core.http.rest.PagedIterable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/implementation/ResourcesClientBuilder.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.implementation;
+package com.azure.resourcemanager.resources.implementation;
 
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.http.HttpPipeline;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/implementation/models/NestedProxyResourceListResult.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.implementation.models;
+package com.azure.resourcemanager.resources.implementation.models;
 
 import com.azure.core.annotation.Immutable;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonSerializable;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.resources.fluent.models.NestedProxyResourceInner;
+import com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 import java.io.IOException;
 import java.util.List;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/implementation/models/SingletonTrackedResourceListResult.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.implementation.models;
+package com.azure.resourcemanager.resources.implementation.models;
 
 import com.azure.core.annotation.Immutable;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonSerializable;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.resources.fluent.models.SingletonTrackedResourceInner;
+import com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import java.io.IOException;
 import java.util.List;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/implementation/models/TopLevelTrackedResourceListResult.java
Patch:
@@ -2,15 +2,15 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.implementation.models;
+package com.azure.resourcemanager.resources.implementation.models;
 
 import com.azure.core.annotation.Immutable;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.json.JsonReader;
 import com.azure.json.JsonSerializable;
 import com.azure.json.JsonToken;
 import com.azure.json.JsonWriter;
-import com.azure.resourcemanager.models.resources.fluent.models.TopLevelTrackedResourceInner;
+import com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
 import java.io.IOException;
 import java.util.List;
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/implementation/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * Package containing the implementations for Resources.
  * Arm Resource Provider management API.
  */
-package com.azure.resourcemanager.models.resources.implementation;
+package com.azure.resourcemanager.resources.implementation;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/NestedProxyResource.java
Patch:
@@ -2,11 +2,11 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.management.SystemData;
 import com.azure.core.util.Context;
-import com.azure.resourcemanager.models.resources.fluent.models.NestedProxyResourceInner;
+import com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner;
 
 /**
  * An immutable client-side representation of NestedProxyResource.
@@ -55,7 +55,7 @@ public interface NestedProxyResource {
     String resourceGroupName();
 
     /**
-     * Gets the inner com.azure.resourcemanager.models.resources.fluent.models.NestedProxyResourceInner object.
+     * Gets the inner com.azure.resourcemanager.resources.fluent.models.NestedProxyResourceInner object.
      * 
      * @return the inner object.
      */

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/NestedProxyResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/Nesteds.java
Patch:
@@ -2,16 +2,16 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.Context;
 
 /**
- * Resource collection API of NestedProxyResources.
+ * Resource collection API of Nesteds.
  */
-public interface NestedProxyResources {
+public interface Nesteds {
     /**
      * Get a NestedProxyResource.
      * 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/NotificationDetails.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.core.util.logging.ClientLogger;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/ProvisioningState.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.util.ExpandableStringEnum;
 import java.util.Collection;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/SingletonTrackedResource.java
Patch:
@@ -2,10 +2,10 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.management.SystemData;
-import com.azure.resourcemanager.models.resources.fluent.models.SingletonTrackedResourceInner;
+import com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner;
 import java.util.Map;
 
 /**
@@ -62,7 +62,7 @@ public interface SingletonTrackedResource {
     SystemData systemData();
 
     /**
-     * Gets the inner com.azure.resourcemanager.models.resources.fluent.models.SingletonTrackedResourceInner object.
+     * Gets the inner com.azure.resourcemanager.resources.fluent.models.SingletonTrackedResourceInner object.
      * 
      * @return the inner object.
      */

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/SingletonTrackedResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/TopLevelTrackedResource.java
Patch:
@@ -2,13 +2,13 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.http.rest.Response;
 import com.azure.core.management.Region;
 import com.azure.core.management.SystemData;
 import com.azure.core.util.Context;
-import com.azure.resourcemanager.models.resources.fluent.models.TopLevelTrackedResourceInner;
+import com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner;
 import java.util.Map;
 
 /**
@@ -86,7 +86,7 @@ public interface TopLevelTrackedResource {
     String resourceGroupName();
 
     /**
-     * Gets the inner com.azure.resourcemanager.models.resources.fluent.models.TopLevelTrackedResourceInner object.
+     * Gets the inner com.azure.resourcemanager.resources.fluent.models.TopLevelTrackedResourceInner object.
      * 
      * @return the inner object.
      */

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/TopLevelTrackedResourceProperties.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.annotation.Fluent;
 import com.azure.json.JsonReader;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/TopLevels.java
Patch:
@@ -2,16 +2,16 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;
 
 import com.azure.core.http.rest.PagedIterable;
 import com.azure.core.http.rest.Response;
 import com.azure.core.util.Context;
 
 /**
- * Resource collection API of TopLevelTrackedResources.
+ * Resource collection API of TopLevels.
  */
-public interface TopLevelTrackedResources {
+public interface TopLevels {
     /**
      * Get a TopLevelTrackedResource.
      * 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/models/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * Package containing the data models for Resources.
  * Arm Resource Provider management API.
  */
-package com.azure.resourcemanager.models.resources.models;
+package com.azure.resourcemanager.resources.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/resources/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * Package containing the classes for Resources.
  * Arm Resource Provider management API.
  */
-package com.azure.resourcemanager.models.resources;
+package com.azure.resourcemanager.resources;

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/SchemaMapper.java
Patch:
@@ -49,10 +49,10 @@ public IType map(Schema value) {
     private IType createSchemaType(Schema value) {
         if (value instanceof PrimitiveSchema) {
             return Mappers.getPrimitiveMapper().map((PrimitiveSchema) value);
-        } else if (value instanceof ChoiceSchema) {
-            return Mappers.getChoiceMapper().map((ChoiceSchema) value);
         } else if (value instanceof SealedChoiceSchema) {
             return Mappers.getSealedChoiceMapper().map((SealedChoiceSchema) value);
+        } else if (value instanceof ChoiceSchema) {
+            return Mappers.getChoiceMapper().map((ChoiceSchema) value);
         } else if (value instanceof ArraySchema) {
             return Mappers.getArrayMapper().map((ArraySchema) value);
         } else if (value instanceof DictionarySchema) {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/model/clientmodel/ClassType.java
Patch:
@@ -45,6 +45,7 @@
 import com.azure.core.util.Context;
 import com.azure.core.util.CoreUtils;
 import com.azure.core.util.DateTimeRfc1123;
+import com.azure.core.util.ExpandableEnum;
 import com.azure.core.util.ExpandableStringEnum;
 import com.azure.core.util.logging.ClientLogger;
 import com.azure.core.util.logging.LogLevel;
@@ -178,6 +179,7 @@ private static ClassType.Builder getClassTypeBuilder(Class<?> classKey) {
     public static final ClassType RESPONSE = getClassTypeBuilder(Response.class).build();
     public static final ClassType SIMPLE_RESPONSE = getClassTypeBuilder(SimpleResponse.class).build();
     public static final ClassType EXPANDABLE_STRING_ENUM = getClassTypeBuilder(ExpandableStringEnum.class).build();
+    public static final ClassType EXPANDABLE_ENUM = getClassTypeBuilder(ExpandableEnum.class).build();
     public static final ClassType HTTP_PIPELINE_BUILDER = getClassTypeBuilder(HttpPipelineBuilder.class).build();
     public static final ClassType KEY_CREDENTIAL_POLICY = getClassTypeBuilder(KeyCredentialPolicy.class).build();
     public static final ClassType KEY_CREDENTIAL_TRAIT = getClassTypeBuilder(KeyCredentialTrait.class).build();

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/model/inheritance/enumdiscriminator/models/Snake.java
Patch:
@@ -21,7 +21,7 @@ public class Snake implements JsonSerializable<Snake> {
      * discriminator property
      */
     @Generated
-    private SnakeKind kind = SnakeKind.fromString("Snake");
+    private SnakeKind kind;
 
     /*
      * Length of the snake

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/models/commontypes/managedidentity/models/ManagedServiceIdentityType.java
Patch:
@@ -29,7 +29,7 @@ public final class ManagedServiceIdentityType extends ExpandableStringEnum<Manag
     /**
      * System and user assigned managed identity.
      */
-    public static final ManagedServiceIdentityType SYSTEM_AND_USER_ASSIGNED_V3
+    public static final ManagedServiceIdentityType SYSTEM_ASSIGNED_USER_ASSIGNED
         = fromString("SystemAssigned,UserAssigned");
 
     /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/ManagedServiceIdentityType.java
Patch:
@@ -30,7 +30,7 @@ public final class ManagedServiceIdentityType extends ExpandableStringEnum<Manag
     /**
      * System and user assigned managed identity.
      */
-    public static final ManagedServiceIdentityType SYSTEM_AND_USER_ASSIGNED_V3
+    public static final ManagedServiceIdentityType SYSTEM_ASSIGNED_USER_ASSIGNED
         = fromString("SystemAssigned,UserAssigned");
 
     /**

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/ExtendsFloatAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public final class ExtendsFloatAdditionalProperties implements JsonSerializable<
     private final double id;
 
     /*
-     * Additional properties
+     * The model extends from Record<float32> type.
      */
     @Generated
     private Map<String, Double> additionalProperties;
@@ -52,7 +52,7 @@ public double getId() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model extends from Record&lt;float32&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, Double> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model extends from Record&lt;float32&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the ExtendsFloatAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/ExtendsModelAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public final class ExtendsModelAdditionalProperties implements JsonSerializable<
     private final ModelForRecord knownProp;
 
     /*
-     * Additional properties
+     * The model extends from Record<ModelForRecord> type.
      */
     @Generated
     private Map<String, ModelForRecord> additionalProperties;
@@ -52,7 +52,7 @@ public ModelForRecord getKnownProp() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model extends from Record&lt;ModelForRecord&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, ModelForRecord> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model extends from Record&lt;ModelForRecord&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the ExtendsModelAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/ExtendsModelArrayAdditionalProperties.java
Patch:
@@ -28,7 +28,7 @@ public final class ExtendsModelArrayAdditionalProperties
     private final List<ModelForRecord> knownProp;
 
     /*
-     * Additional properties
+     * The model extends from Record<ModelForRecord[]> type.
      */
     @Generated
     private Map<String, List<ModelForRecord>> additionalProperties;
@@ -54,7 +54,7 @@ public List<ModelForRecord> getKnownProp() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model extends from Record&lt;ModelForRecord[]&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -64,7 +64,7 @@ public Map<String, List<ModelForRecord>> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model extends from Record&lt;ModelForRecord[]&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the ExtendsModelArrayAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/ExtendsStringAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public final class ExtendsStringAdditionalProperties implements JsonSerializable
     private final String name;
 
     /*
-     * Additional properties
+     * The model extends from Record<string> type.
      */
     @Generated
     private Map<String, String> additionalProperties;
@@ -52,7 +52,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model extends from Record&lt;string&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, String> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model extends from Record&lt;string&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the ExtendsStringAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/ExtendsUnknownAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public class ExtendsUnknownAdditionalProperties implements JsonSerializable<Exte
     private final String name;
 
     /*
-     * Additional properties
+     * The model extends from Record<unknown> type.
      */
     @Generated
     private Map<String, Object> additionalProperties;
@@ -52,7 +52,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model extends from Record&lt;unknown&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, Object> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model extends from Record&lt;unknown&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the ExtendsUnknownAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/ExtendsUnknownAdditionalPropertiesDiscriminated.java
Patch:
@@ -33,7 +33,7 @@ public class ExtendsUnknownAdditionalPropertiesDiscriminated
     private final String name;
 
     /*
-     * Additional properties
+     * The model extends from Record<unknown> with a discriminator.
      */
     @Generated
     private Map<String, Object> additionalProperties;
@@ -69,7 +69,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model extends from Record&lt;unknown&gt; with a discriminator.
      * 
      * @return the additionalProperties value.
      */
@@ -79,7 +79,7 @@ public Map<String, Object> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model extends from Record&lt;unknown&gt; with a discriminator.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the ExtendsUnknownAdditionalPropertiesDiscriminated object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/IsFloatAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public final class IsFloatAdditionalProperties implements JsonSerializable<IsFlo
     private final double id;
 
     /*
-     * Additional properties
+     * The model is from Record<float32> type.
      */
     @Generated
     private Map<String, Double> additionalProperties;
@@ -52,7 +52,7 @@ public double getId() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model is from Record&lt;float32&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, Double> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model is from Record&lt;float32&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the IsFloatAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/IsModelAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public final class IsModelAdditionalProperties implements JsonSerializable<IsMod
     private final ModelForRecord knownProp;
 
     /*
-     * Additional properties
+     * The model is from Record<ModelForRecord> type.
      */
     @Generated
     private Map<String, ModelForRecord> additionalProperties;
@@ -52,7 +52,7 @@ public ModelForRecord getKnownProp() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model is from Record&lt;ModelForRecord&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, ModelForRecord> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model is from Record&lt;ModelForRecord&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the IsModelAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/IsModelArrayAdditionalProperties.java
Patch:
@@ -27,7 +27,7 @@ public final class IsModelArrayAdditionalProperties implements JsonSerializable<
     private final List<ModelForRecord> knownProp;
 
     /*
-     * Additional properties
+     * The model is from Record<ModelForRecord[]> type.
      */
     @Generated
     private Map<String, List<ModelForRecord>> additionalProperties;
@@ -53,7 +53,7 @@ public List<ModelForRecord> getKnownProp() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model is from Record&lt;ModelForRecord[]&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -63,7 +63,7 @@ public Map<String, List<ModelForRecord>> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model is from Record&lt;ModelForRecord[]&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the IsModelArrayAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/IsStringAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public final class IsStringAdditionalProperties implements JsonSerializable<IsSt
     private final String name;
 
     /*
-     * Additional properties
+     * The model is from Record<string> type.
      */
     @Generated
     private Map<String, String> additionalProperties;
@@ -52,7 +52,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model is from Record&lt;string&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, String> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model is from Record&lt;string&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the IsStringAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/IsUnknownAdditionalProperties.java
Patch:
@@ -26,7 +26,7 @@ public class IsUnknownAdditionalProperties implements JsonSerializable<IsUnknown
     private final String name;
 
     /*
-     * Additional properties
+     * The model is from Record<unknown> type.
      */
     @Generated
     private Map<String, Object> additionalProperties;
@@ -52,7 +52,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model is from Record&lt;unknown&gt; type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, Object> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model is from Record&lt;unknown&gt; type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the IsUnknownAdditionalProperties object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/IsUnknownAdditionalPropertiesDiscriminated.java
Patch:
@@ -33,7 +33,7 @@ public class IsUnknownAdditionalPropertiesDiscriminated
     private final String name;
 
     /*
-     * Additional properties
+     * The model is Record<unknown> with a discriminator.
      */
     @Generated
     private Map<String, Object> additionalProperties;
@@ -69,7 +69,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model is Record&lt;unknown&gt; with a discriminator.
      * 
      * @return the additionalProperties value.
      */
@@ -79,7 +79,7 @@ public Map<String, Object> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model is Record&lt;unknown&gt; with a discriminator.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the IsUnknownAdditionalPropertiesDiscriminated object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/MultipleSpreadRecord.java
Patch:
@@ -27,7 +27,7 @@ public final class MultipleSpreadRecord implements JsonSerializable<MultipleSpre
     private final boolean flag;
 
     /*
-     * Additional properties
+     * The model spread Record<string> and Record<float32>
      */
     @Generated
     private Map<String, BinaryData> additionalProperties;
@@ -53,7 +53,7 @@ public boolean isFlag() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;string&gt; and Record&lt;float32&gt;.
      * 
      * @return the additionalProperties value.
      */
@@ -63,7 +63,7 @@ public Map<String, BinaryData> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;string&gt; and Record&lt;float32&gt;.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the MultipleSpreadRecord object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadFloatRecord.java
Patch:
@@ -26,7 +26,7 @@ public final class SpreadFloatRecord implements JsonSerializable<SpreadFloatReco
     private final double id;
 
     /*
-     * Additional properties
+     * The model spread Record<float32> with the same known property type
      */
     @Generated
     private Map<String, Double> additionalProperties;
@@ -52,7 +52,7 @@ public double getId() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;float32&gt; with the same known property type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, Double> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;float32&gt; with the same known property type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadFloatRecord object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadRecordForDiscriminatedUnion.java
Patch:
@@ -27,7 +27,7 @@ public final class SpreadRecordForDiscriminatedUnion implements JsonSerializable
     private final String name;
 
     /*
-     * Additional properties
+     * The model spread Record<WidgetData>
      */
     @Generated
     private Map<String, BinaryData> additionalProperties;
@@ -53,7 +53,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;WidgetData&gt;.
      * 
      * @return the additionalProperties value.
      */
@@ -63,7 +63,7 @@ public Map<String, BinaryData> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;WidgetData&gt;.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadRecordForDiscriminatedUnion object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadRecordForNonDiscriminatedUnion.java
Patch:
@@ -28,7 +28,7 @@ public final class SpreadRecordForNonDiscriminatedUnion
     private final String name;
 
     /*
-     * Additional properties
+     * The model spread Record<WidgetData0 | WidgetData1>
      */
     @Generated
     private Map<String, BinaryData> additionalProperties;
@@ -54,7 +54,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;WidgetData0 | WidgetData1&gt;.
      * 
      * @return the additionalProperties value.
      */
@@ -64,7 +64,7 @@ public Map<String, BinaryData> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;WidgetData0 | WidgetData1&gt;.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadRecordForNonDiscriminatedUnion object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadRecordForNonDiscriminatedUnion2.java
Patch:
@@ -28,7 +28,7 @@ public final class SpreadRecordForNonDiscriminatedUnion2
     private final String name;
 
     /*
-     * Additional properties
+     * The model spread Record<WidgetData2 | WidgetData1>
      */
     @Generated
     private Map<String, BinaryData> additionalProperties;
@@ -54,7 +54,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;WidgetData2 | WidgetData1&gt;.
      * 
      * @return the additionalProperties value.
      */
@@ -64,7 +64,7 @@ public Map<String, BinaryData> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;WidgetData2 | WidgetData1&gt;.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadRecordForNonDiscriminatedUnion2 object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadRecordForNonDiscriminatedUnion3.java
Patch:
@@ -28,7 +28,7 @@ public final class SpreadRecordForNonDiscriminatedUnion3
     private final String name;
 
     /*
-     * Additional properties
+     * The model spread Record<WidgetData2[] | WidgetData1>
      */
     @Generated
     private Map<String, BinaryData> additionalProperties;
@@ -54,7 +54,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;WidgetData2[] | WidgetData1&gt;.
      * 
      * @return the additionalProperties value.
      */
@@ -64,7 +64,7 @@ public Map<String, BinaryData> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;WidgetData2[] | WidgetData1&gt;.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadRecordForNonDiscriminatedUnion3 object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadRecordForUnion.java
Patch:
@@ -27,7 +27,7 @@ public final class SpreadRecordForUnion implements JsonSerializable<SpreadRecord
     private final boolean flag;
 
     /*
-     * Additional properties
+     * The model spread Record<string | float32>
      */
     @Generated
     private Map<String, BinaryData> additionalProperties;
@@ -53,7 +53,7 @@ public boolean isFlag() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;string | float32&gt;.
      * 
      * @return the additionalProperties value.
      */
@@ -63,7 +63,7 @@ public Map<String, BinaryData> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;string | float32&gt;.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadRecordForUnion object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/type/property/additionalproperties/models/SpreadStringRecord.java
Patch:
@@ -26,7 +26,7 @@ public final class SpreadStringRecord implements JsonSerializable<SpreadStringRe
     private final String name;
 
     /*
-     * Additional properties
+     * The model spread Record<string> with the same known property type
      */
     @Generated
     private Map<String, String> additionalProperties;
@@ -52,7 +52,7 @@ public String getName() {
     }
 
     /**
-     * Get the additionalProperties property: Additional properties.
+     * Get the additionalProperties property: The model spread Record&lt;string&gt; with the same known property type.
      * 
      * @return the additionalProperties value.
      */
@@ -62,7 +62,7 @@ public Map<String, String> getAdditionalProperties() {
     }
 
     /**
-     * Set the additionalProperties property: Additional properties.
+     * Set the additionalProperties property: The model spread Record&lt;string&gt; with the same known property type.
      * 
      * @param additionalProperties the additionalProperties value to set.
      * @return the SpreadStringRecord object itself.

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/com/azure/resourcemanager/models/commontypes/managedidentity/ManagedIdentityManagerTests.java
Patch:
@@ -45,10 +45,10 @@ public void testManagedIdentityManager() {
         Map<String, UserAssignedIdentity> userAssignedIdentityMap = new HashMap<>();
         userAssignedIdentityMap.put(USER_ASSIGNED_IDENTITIES_KEY, new UserAssignedIdentity());
         resource.update()
-            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED_V3)
+            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                 .withUserAssignedIdentities(userAssignedIdentityMap))
             .apply();
-        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED_V3, resource.identity().type());
+        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, resource.identity().type());
         Assertions.assertNotNull(resource.identity().principalId());
         Assertions.assertNotNull(resource.identity().tenantId());
         Assertions.assertNotNull(resource.identity().userAssignedIdentities());

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/versioning/removed/RemovedClientBuilder.java
Patch:
@@ -190,13 +190,13 @@ public RemovedClientBuilder endpoint(String endpoint) {
     }
 
     /*
-     * Need to be set as 'v1' or 'v2' in client.
+     * Need to be set as 'v1', 'v2preview' or 'v2' in client.
      */
     @Generated
     private String version;
 
     /**
-     * Sets Need to be set as 'v1' or 'v2' in client.
+     * Sets Need to be set as 'v1', 'v2preview' or 'v2' in client.
      * 
      * @param version the version value.
      * @return the RemovedClientBuilder.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/multipart/models/InheritFileData.java
Patch:
@@ -9,9 +9,7 @@
 import com.azure.core.util.BinaryData;
 
 /**
- * Image file of content-type "image/jpeg"
- * 
- * The file details for the "fileData1" field.
+ * Image file of content-type "image/jpeg".
  */
 @Immutable
 public final class InheritFileData {

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/ChoiceMapper.java
Patch:
@@ -17,7 +17,7 @@ public class ChoiceMapper implements IMapper<ChoiceSchema, IType> {
     private static final ChoiceMapper INSTANCE = new ChoiceMapper();
     Map<ChoiceSchema, IType> parsed = new ConcurrentHashMap<>();
 
-    private ChoiceMapper() {
+    protected ChoiceMapper() {
     }
 
     /**
@@ -47,6 +47,6 @@ public IType map(ChoiceSchema enumType) {
     }
 
     private IType createChoiceType(ChoiceSchema enumType) {
-        return MapperUtils.createEnumType(enumType, true);
+        return MapperUtils.createEnumType(enumType, true, true);
     }
 }

File: packages/http-client-java/generator/http-client-generator-core/src/main/java/com/microsoft/typespec/http/client/generator/core/mapper/SealedChoiceMapper.java
Patch:
@@ -13,7 +13,7 @@ public class SealedChoiceMapper implements IMapper<SealedChoiceSchema, IType> {
     private static final SealedChoiceMapper INSTANCE = new SealedChoiceMapper();
     Map<SealedChoiceSchema, IType> parsed = new ConcurrentHashMap<>();
 
-    private SealedChoiceMapper() {
+    protected SealedChoiceMapper() {
     }
 
     public static SealedChoiceMapper getInstance() {
@@ -38,6 +38,6 @@ public IType map(SealedChoiceSchema enumType) {
     }
 
     private IType createSealedChoiceType(SealedChoiceSchema enumType) {
-        return MapperUtils.createEnumType(enumType, false);
+        return MapperUtils.createEnumType(enumType, false, true);
     }
 }

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/azure/resourcemanager/models/resources/models/ProvisioningState.java
Patch:
@@ -12,17 +12,17 @@
  */
 public final class ProvisioningState extends ExpandableStringEnum<ProvisioningState> {
     /**
-     * Static value Succeeded for ProvisioningState.
+     * Resource has been created.
      */
     public static final ProvisioningState SUCCEEDED = fromString("Succeeded");
 
     /**
-     * Static value Failed for ProvisioningState.
+     * Resource creation failed.
      */
     public static final ProvisioningState FAILED = fromString("Failed");
 
     /**
-     * Static value Canceled for ProvisioningState.
+     * Resource creation was canceled.
      */
     public static final ProvisioningState CANCELED = fromString("Canceled");
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/ActionType.java
Patch:
@@ -13,7 +13,7 @@
  */
 public final class ActionType extends ExpandableStringEnum<ActionType> {
     /**
-     * Static value Internal for ActionType.
+     * Actions are for internal-only APIs.
      */
     public static final ActionType INTERNAL = fromString("Internal");
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/Dog.java
Patch:
@@ -16,7 +16,7 @@
  */
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "kind", defaultImpl = Dog.class, visible = true)
 @JsonTypeName("Dog")
-@JsonSubTypes({ @JsonSubTypes.Type(name = "golden", value = Golden.class) })
+@JsonSubTypes({ @JsonSubTypes.Type(name = "golden_dog", value = Golden.class) })
 @Fluent
 public class Dog {
     /*

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/DogKind.java
Patch:
@@ -13,9 +13,9 @@
  */
 public final class DogKind extends ExpandableStringEnum<DogKind> {
     /**
-     * Static value golden for DogKind.
+     * Species golden.
      */
-    public static final DogKind GOLDEN = fromString("golden");
+    public static final DogKind GOLDEN = fromString("golden_dog");
 
     /**
      * Creates a new instance of DogKind value.

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/Golden.java
Patch:
@@ -14,7 +14,7 @@
  * Golden dog model.
  */
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "kind", defaultImpl = Golden.class, visible = true)
-@JsonTypeName("golden")
+@JsonTypeName("golden_dog")
 @Fluent
 public final class Golden extends Dog {
     /*

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/Origin.java
Patch:
@@ -14,17 +14,17 @@
  */
 public final class Origin extends ExpandableStringEnum<Origin> {
     /**
-     * Static value user for Origin.
+     * Indicates the operation is initiated by a user.
      */
     public static final Origin USER = fromString("user");
 
     /**
-     * Static value system for Origin.
+     * Indicates the operation is initiated by a system.
      */
     public static final Origin SYSTEM = fromString("system");
 
     /**
-     * Static value user,system for Origin.
+     * Indicates the operation is initiated by a user or system.
      */
     public static final Origin USER_SYSTEM = fromString("user,system");
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/armresourceprovider/models/ProvisioningState.java
Patch:
@@ -13,17 +13,17 @@
  */
 public final class ProvisioningState extends ExpandableStringEnum<ProvisioningState> {
     /**
-     * Static value Succeeded for ProvisioningState.
+     * Resource has been created.
      */
     public static final ProvisioningState SUCCEEDED = fromString("Succeeded");
 
     /**
-     * Static value Failed for ProvisioningState.
+     * Resource creation failed.
      */
     public static final ProvisioningState FAILED = fromString("Failed");
 
     /**
-     * Static value Canceled for ProvisioningState.
+     * Resource creation was canceled.
      */
     public static final ProvisioningState CANCELED = fromString("Canceled");
 

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/discriminatoredgecases/implementation/package-info.java
Patch:
@@ -4,8 +4,7 @@
 
 /**
  * <!-- start generated doc -->
- * Package containing the implementations for Naming.
- * description of Naming.
+ * Package containing the implementations for DiscriminatorEdgeCases.
  * <!-- end generated doc -->
  */
-package com.cadl.naming.implementation;
+package com.cadl.discriminatoredgecases.implementation;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/discriminatoredgecases/models/package-info.java
Patch:
@@ -4,8 +4,7 @@
 
 /**
  * <!-- start generated doc -->
- * Package containing the data models for Naming.
- * description of Naming.
+ * Package containing the data models for DiscriminatorEdgeCases.
  * <!-- end generated doc -->
  */
-package com.cadl.naming.models;
+package com.cadl.discriminatoredgecases.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/cadl/discriminatoredgecases/package-info.java
Patch:
@@ -4,8 +4,7 @@
 
 /**
  * <!-- start generated doc -->
- * Package containing the classes for Naming.
- * description of Naming.
+ * Package containing the classes for DiscriminatorEdgeCases.
  * <!-- end generated doc -->
  */
-package com.cadl.naming;
+package com.cadl.discriminatoredgecases;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/FlattenPropertyClientBuilder.java
Patch:
@@ -2,9 +2,9 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty;
+package com._specs_.azure.clientgenerator.core.flattenproperty;
 
-import com.azure.clientgenerator.core.flattenproperty.implementation.FlattenPropertyClientImpl;
+import com._specs_.azure.clientgenerator.core.flattenproperty.implementation.FlattenPropertyClientImpl;
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.ServiceClientBuilder;
 import com.azure.core.client.traits.ConfigurationTrait;
@@ -51,7 +51,7 @@ public final class FlattenPropertyClientBuilder implements HttpTrait<FlattenProp
 
     @Generated
     private static final Map<String, String> PROPERTIES
-        = CoreUtils.getProperties("azure-clientgenerator-core-flattenproperty.properties");
+        = CoreUtils.getProperties("_specs_-azure-clientgenerator-core-flattenproperty.properties");
 
     @Generated
     private final List<HttpPipelinePolicy> pipelinePolicies;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/implementation/FlattenPropertyClientImpl.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty.implementation;
+package com._specs_.azure.clientgenerator.core.flattenproperty.implementation;
 
 import com.azure.core.annotation.BodyParam;
 import com.azure.core.annotation.ExpectedResponses;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/implementation/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Illustrates the model flatten cases.
  * <!-- end generated doc -->
  */
-package com.azure.clientgenerator.core.flattenproperty.implementation;
+package com._specs_.azure.clientgenerator.core.flattenproperty.implementation;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/models/ChildFlattenModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty.models;
+package com._specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/models/ChildModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty.models;
+package com._specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/models/FlattenModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty.models;
+package com._specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/models/NestedFlattenModel.java
Patch:
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty.models;
+package com._specs_.azure.clientgenerator.core.flattenproperty.models;
 
 import com.azure.core.annotation.Generated;
 import com.azure.core.annotation.Immutable;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/models/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Illustrates the model flatten cases.
  * <!-- end generated doc -->
  */
-package com.azure.clientgenerator.core.flattenproperty.models;
+package com._specs_.azure.clientgenerator.core.flattenproperty.models;

File: packages/http-client-java/generator/http-client-generator-test/src/main/java/com/_specs_/azure/clientgenerator/core/flattenproperty/package-info.java
Patch:
@@ -8,4 +8,4 @@
  * Illustrates the model flatten cases.
  * <!-- end generated doc -->
  */
-package com.azure.clientgenerator.core.flattenproperty;
+package com._specs_.azure.clientgenerator.core.flattenproperty;

File: packages/http-client-java/generator/http-client-generator-test/src/test/java/com/_specs_/azure/clientgenerator/core/flattenproperty/generated/FlattenPropertyClientTestBase.java
Patch:
@@ -2,14 +2,14 @@
 // Licensed under the MIT License.
 // Code generated by Microsoft (R) TypeSpec Code Generator.
 
-package com.azure.clientgenerator.core.flattenproperty.generated;
+package com._specs_.azure.clientgenerator.core.flattenproperty.generated;
 
 // The Java test files under 'generated' package are generated for your reference.
 // If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
 // See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.
 
-import com.azure.clientgenerator.core.flattenproperty.FlattenPropertyClient;
-import com.azure.clientgenerator.core.flattenproperty.FlattenPropertyClientBuilder;
+import com._specs_.azure.clientgenerator.core.flattenproperty.FlattenPropertyClient;
+import com._specs_.azure.clientgenerator.core.flattenproperty.FlattenPropertyClientBuilder;
 import com.azure.core.http.HttpClient;
 import com.azure.core.http.policy.HttpLogDetailLevel;
 import com.azure.core.http.policy.HttpLogOptions;

