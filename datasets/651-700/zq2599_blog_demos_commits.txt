File: tutorials/springai-tutorials/ollama-chat/src/main/java/com/bolingcavalry/ollamachat/controller/ChatController.java
Patch:
@@ -59,7 +59,7 @@ public void accept(ChatResponse t) {
     }
 
     @GetMapping(value = "/ai/streamresp", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
-	public Flux<String> streamResp(@RequestParam(value = "message", defaultValue = "假设你是秦国的司马错，你如何制定消灭苴国、巴国、蜀国的战略？") String message) throws InterruptedException {
+	public Flux<String> streamResp(@RequestParam(value = "message", defaultValue = "Hello!") String message) throws InterruptedException {
         Prompt prompt = new Prompt(new UserMessage(message));
         Flux<ChatResponse> chatResp = chatClient.stream(prompt);
         return chatResp.map(chatObj -> chatObj.getResult().getOutput().getContent());

File: tutorials/springai-tutorials/hello-openai/src/main/java/com/bolingcavalry/helloopenai/controller/SimpleAiController.java
Patch:
@@ -1,7 +1,6 @@
 package com.bolingcavalry.helloopenai.controller;
 
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
@@ -11,10 +10,9 @@
 
 @RestController
 public class SimpleAiController {
-
+	// 负责处理OpenAI的bean，所需参数来自properties文件
 	private final ChatClient chatClient;
 
-	@Autowired
 	public SimpleAiController(ChatClient chatClient) {
 		this.chatClient = chatClient;
 	}

File: quarkus-tutorials/multi-db-demo/src/main/java/com/bolingcavalry/multidb/entity/firstdb/Seller.java
Patch:
@@ -9,7 +9,7 @@
 public class Seller {
 
     @Id
-    @GeneratedValue(strategy = GenerationType.AUTO)
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
 
     @Column

File: quarkus-tutorials/multi-db-demo/src/main/java/com/bolingcavalry/multidb/entity/seconddb/Buyer.java
Patch:
@@ -9,7 +9,7 @@
 public class Buyer {
 
     @Id
-    @GeneratedValue(strategy = GenerationType.AUTO)
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Integer id;
 
     @Column

File: quarkus-tutorials/basic-di/src/main/java/com/bolingcavalry/config/SelectBeanConfiguration.java
Patch:
@@ -29,7 +29,7 @@ public TryLookupIfProperty tryLookupIfPropertyBeta() {
     }
 
     @Produces
-    @IfBuildProfile("prod")
+    @IfBuildProfile("test")
     public TryIfBuildProfile tryIfBuildProfileProd() {
         return new TryIfBuildProfileProd();
     }

File: quarkus-tutorials/basic-di/src/test/java/com/bolingcavalry/BeanInstanceSwitchTest.java
Patch:
@@ -16,7 +16,7 @@
  * @author will
  * @email zq2599@gmail.com
  * @date 2022/3/15 8:37 PM
- * @description 功能介绍
+ * @description 条件启用bean的configuration类，对应的单元测试
  */
 @QuarkusTest
 public class BeanInstanceSwitchTest {

File: spring-cloud-square-tutorials/consumer-retrofit-webflux/src/main/java/com/bolingcavalry/consumer/AppConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  */
 @Configuration
 @EnableRetrofitClients
-class OkHttpClientConfig {
+class AppConfiguration {
     @Bean
     @LoadBalanced
     public WebClient.Builder builder() {

File: disruptor-tutorials/basic-event/src/main/java/com/bolingcavalry/service/impl/BasicEventServiceImpl.java
Patch:
@@ -27,7 +27,7 @@
 @Slf4j
 public class BasicEventServiceImpl implements BasicEventService {
 
-    private static final int BUFFER_SIZE = 1024;
+    private static final int BUFFER_SIZE = 16;
 
     private Disruptor<StringEvent> disruptor;
 

File: jetcd-tutorials/base-operate/src/test/java/com/bolingcavalry/dao/impl/EtcdServiceImplTest.java
Patch:
@@ -377,7 +377,7 @@ void deleteWithPrefix() throws Exception {
     }
 
     @Test
-    @Order(11)
+    @Order(12)
     @DisplayName("删除(删到指定key就结束)")
     void deleteWithEndKey() throws Exception {
         String prefix = key("deleteWithEndKey");

File: jetcd-tutorials/base-operate/src/main/java/com/bolingcavalry/dao/impl/EtcdServiceImpl.java
Patch:
@@ -18,8 +18,8 @@
  */
 public class EtcdServiceImpl implements EtcdService {
 
-//    private static final String IP = "192.168.133.218";
-    private static final String IP = "192.168.50.239";
+    private static final String IP = "192.168.133.218";
+//    private static final String IP = "192.168.50.239";
 
     private Client client;
 

File: jetcd-tutorials/base-operate/src/test/java/com/bolingcavalry/dao/impl/EtcdServiceImplTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.bolingcavalry.dao.impl;
 
 import com.bolingcavalry.dao.EtcdService;
-import io.etcd.jetcd.Client;
 import io.etcd.jetcd.KeyValue;
 import io.etcd.jetcd.Response;
 import io.etcd.jetcd.kv.GetResponse;
@@ -346,7 +345,7 @@ void deleteSingle() throws Exception {
     }
 
     @Test
-    @Order(10)
+    @Order(11)
     @DisplayName("删除(指定前缀)")
     void deleteWithPrefix() throws Exception {
         String prefix = key("deleteWithPrefix");

File: mybatis/druidtwosource/src/main/java/com/bolingcavalry/druidtwosource/DruidConfigSecond.java
Patch:
@@ -39,4 +39,5 @@ public SqlSessionTemplate sqlSessionTemplate(@Qualifier("secondSqlSessionFactory
         return new SqlSessionTemplate(sqlSessionFactory);
     }
 
-}
\ No newline at end of file
+}
+

File: mybatis/druidtwosource/src/main/java/com/bolingcavalry/druidtwosource/DuridTwoSourceApplication.java
Patch:
@@ -9,7 +9,6 @@
         DataSourceAutoConfiguration.class,
         DataSourceTransactionManagerAutoConfiguration.class,
 })
-
 public class DuridTwoSourceApplication {
 
     public static void main(String[] args) {

File: mybatis/druidtwosource/src/main/java/com/bolingcavalry/druidtwosource/SwaggerConfig.java
Patch:
@@ -26,8 +26,7 @@ public Docket createRestApi() {
         return new Docket(DocumentationType.SWAGGER_2)
                 .apiInfo(apiInfo())
                 .tags(new Tag("UserController", "用户服务"),
-                        new Tag("LogController", "日志服务"),
-                        new Tag("TestAddressController", "地址服务"))
+                        new Tag("AddressController", "地址服务"))
                 .select()
                 // 当前包路径
                 .apis(RequestHandlerSelectors.basePackage("com.bolingcavalry.druidtwosource.controller"))

File: mybatis/druidtwosource/src/main/java/com/bolingcavalry/druidtwosource/controller/AddressController.java
Patch:
@@ -16,9 +16,9 @@
  * @date: 2020/8/4 8:31
  */
 @RestController
-@RequestMapping("/addr")
-@Api(tags = {"testAddressController"})
-public class TestAddressController {
+@RequestMapping("/address")
+@Api(tags = {"AddressController"})
+public class AddressController {
 
     @Autowired
     private AddressService addressService;

File: mybatis/druidtwosource/src/main/java/com/bolingcavalry/druidtwosource/mapper/second/AddressMapper.java
Patch:
@@ -1,8 +1,6 @@
 package com.bolingcavalry.druidtwosource.mapper.second;
 
 import com.bolingcavalry.druidtwosource.entity.Address;
-import com.bolingcavalry.druidtwosource.entity.LogExtend;
-import com.bolingcavalry.druidtwosource.entity.User;
 import org.springframework.stereotype.Repository;
 
 import java.util.List;

File: customizepropertyverify/src/main/java/com/bolingcavalry/customizepropertyverify/context/CustomApplicationContext.java
Patch:
@@ -1,14 +1,14 @@
 package com.bolingcavalry.customizepropertyverify.context;
 
-import org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext;
+import org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext;
 
 /**
- * @Description : AnnotationConfigReactiveWebServerApplicationContext的子类，重写了initPropertySources方法，
+ * @Description : AnnotationConfigServletWebServerApplicationContext，重写了initPropertySources方法，
  * 要求spring启动的时候环境变量MYSQL_HOST必须存在
  * @Author : zq2599@gmail.com
  * @Date : 2018-08-10 21:40
  */
-public class CustomApplicationContext extends AnnotationConfigReactiveWebServerApplicationContext {
+public class CustomApplicationContext extends AnnotationConfigServletWebServerApplicationContext {
 
     @Override
     protected void initPropertySources() {

File: springboot-redis-kyro-demo/src/main/java/com/bolingcavalry/springbootrediskyrodemo/config/RedisConfig.java
Patch:
@@ -17,7 +17,7 @@
 public class RedisConfig {
 
     /**
-     * redisTemplate 序列化使用的jdkSerializeable, 存储二进制字节码, 所以自定义序列化类
+     * redisTemplate 序列化使用的Serializeable, 存储二进制字节码, 所以自定义序列化类
      * @param redisConnectionFactory
      * @return
      */

File: kafkaclusterconsumerdemo/src/main/java/com/bolingcavalry/service/Processer.java
Patch:
@@ -27,7 +27,6 @@ public class Processer implements Runnable {
     static{
         Map<String, String> map = System.getenv();
         TOMCAT_ID = map.get("TOMCAT_SERVER_ID");
-        TOMCAT_ID = "tomcat_consumer1";
     }
 
     public Processer(KafkaStream<String, String> stream, int threadNumber) {
@@ -55,6 +54,6 @@ public void run() {
                     value.message());
         }
         // 3. 表示当前线程执行完成
-        System.out.println("Shutdown Thread:" + this.threadNumber);
+        logger.info("Shutdown Thread:" + this.threadNumber);
     }
 }

File: kafkaclusterproducerdemo/src/main/java/com/bolingcavalry/controller/MessageProduceController.java
Patch:
@@ -36,7 +36,6 @@ public class MessageProduceController {
     static{
         Map<String, String> map = System.getenv();
         TOMCAT_ID = map.get("TOMCAT_SERVER_ID");
-        TOMCAT_ID = "tomcat_producer2";
     }
 
     @Autowired

File: kafkaclusterproducerdemo/src/main/java/com/bolingcavalry/service/BusinessPartition.java
Patch:
@@ -18,7 +18,7 @@ public class BusinessPartition implements Partitioner {
      * @param props
      */
     public BusinessPartition(VerifiableProperties props) {
-        //注意 ：
+        super();
     }
 
     public int partition(Object o, int i) {

File: kafkaclusterproducerdemo/src/main/java/com/bolingcavalry/service/impl/MessageServiceImpl.java
Patch:
@@ -26,8 +26,8 @@ public void init(){
         try {
             Properties props = new Properties();
             props.put("serializer.class", "kafka.serializer.StringEncoder");
-            props.put("zk.connect", "broker1:2181,broker2:2181,broker3:2181");
-            props.put("metadata.broker.list", "broker1:9092,broker2:9092,broker3:9092");
+            props.put("zk.connect", "hostb1:2181,hostb1:2181,hostb1:2181");
+            props.put("metadata.broker.list", "hostb1:9092,hostb1:9092,hostb1:9092");
             props.put("partitioner.class","com.bolingcavalry.service.BusinessPartition");
             producer = new kafka.javaapi.producer.Producer<String, String>(new ProducerConfig(props));
         } catch (Exception e) {

