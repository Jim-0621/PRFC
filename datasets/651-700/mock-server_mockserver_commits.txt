File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -67,9 +67,7 @@ protected HttpResponse localNotFoundResponse() {
             .withReasonPhrase(NOT_FOUND_404.reasonPhrase());
     }
 
-    protected boolean supportsHTTP2() {
-        return true;
-    }
+    protected abstract boolean supportsHTTP2();
 
     @Test
     public void shouldReturnResponseWithOnlyBody() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/ShadedJarRunner.java
Patch:
@@ -31,7 +31,9 @@ public static MockServerClient startServerUsingShadedJar(int mockServerPort) {
         }
         List<String> arguments = new ArrayList<>(Collections.singletonList(getJavaBin()));
         arguments.add("-Dfile.encoding=UTF-8");
-        arguments.add("-Dmockserver.logLevel=" + ConfigurationProperties.logLevel());
+        if (MockServerLogger.isEnabled(Level.TRACE)) {
+            arguments.add("-Dmockserver.logLevel=" + ConfigurationProperties.logLevel());
+        }
         if (DEBUG) {
             arguments.add("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005");
         }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExtendedShadedJarMockingIntegrationTest.java
Patch:
@@ -4,7 +4,6 @@
 import io.netty.handler.ssl.SslProvider;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.netty.integration.ShadedJarRunner;
 import org.mockserver.socket.PortFactory;
@@ -22,7 +21,7 @@ public class ExtendedShadedJarMockingIntegrationTest extends AbstractBasicMockin
 
     protected boolean supportsHTTP2() {
         // TODO(jamesdbloom) support copying native content into the no-dependencies jar
-        return SslProvider.isAlpnSupported(SslContext.defaultServerProvider()) || SslProvider.isAlpnSupported(SslProvider.JDK) || SslProvider.isAlpnSupported(SslProvider.OPENSSL);
+        return SslProvider.isAlpnSupported(SslProvider.JDK);
     }
 
     @BeforeClass

File: mockserver-war/src/test/java/org/mockserver/mockservlet/integration/AbstractExtendedDeployableWARMockingIntegrationTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockserver.mockservlet.integration;
 
+import io.netty.handler.ssl.SslContext;
+import io.netty.handler.ssl.SslProvider;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -191,15 +191,16 @@ private String formatProcessingReport(Set<ValidationMessage> validationMessages,
                 .stream()
                 .map(validationMessage -> {
                     String validationMessageText = String.valueOf(validationMessage);
-                    if ((validationMessageText.startsWith("$.httpRequest") && validationMessageText.contains(".body: should be valid to any of the schemas")) || validationMessageText.contains("$.body: should be valid to any of the schemas")) {
+                    if (((validationMessageText.startsWith("$.httpRequest") && validationMessageText.contains(".body: ")) || validationMessageText.contains("$.body: "))
+                    && !validationMessageText.contains("is not defined in the schema and the schema does not allow additional properties")) {
                         return StringUtils.substringBefore(validationMessageText, ":") + ": should match one of its valid types: " + FileReader.readFileFromClassPathOrPath("org/mockserver/model/schema/body.json")
                             .replaceAll("#/definitions/draft-07", "http://json-schema.org/draft-07/schema")
                             .replaceAll(NEW_LINE, NEW_LINE + "   ");
                     }
                     if (validationMessageText.contains(".specUrlOrPayload: is missing but it is required")) {
                         return StringUtils.substringBefore(validationMessageText, ":") + ": is missing, but is required, if specifying OpenAPI request matcher";
                     }
-                    if (validationMessageText.startsWith("$.httpResponse.body: should be valid to any of the schemas")) {
+                    if (validationMessageText.startsWith("$.httpResponse.body: ")) {
                         return "$.httpResponse.body: should match one of its valid types: " + FileReader.readFileFromClassPathOrPath("org/mockserver/model/schema/bodyWithContentType.json")
                             .replaceAll(NEW_LINE, NEW_LINE + "   ");
                     }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/NettyAssymetricBinaryForwardingIntegrationTest.java
Patch:
@@ -154,7 +154,7 @@ private void executeTestRun(
     ) throws Exception {
         try (FlexibleServer listenerServer = new FlexibleServer()) {
             mockServer = new MockServer(Configuration.configuration().forwardBinaryRequestsAsynchronously(true),
-                listenerServer.getLocalPort(), "127.0.0.1", 50505);
+                listenerServer.getLocalPort(), "127.0.0.1", 0);
 
             AtomicInteger handlerCalledRequest = new AtomicInteger(0);
             AtomicInteger handlerCalledResponse = new AtomicInteger(0);
@@ -218,7 +218,7 @@ private static class FlexibleServer implements AutoCloseable {
 
         public FlexibleServer() throws InterruptedException {
             try {
-                listenerServer = new ServerSocket(60606);
+                listenerServer = new ServerSocket(0);
             } catch (IOException e) {
                 throw new RuntimeException(e);
             }

File: mockserver-client-java/src/main/java/org/mockserver/client/ForwardChainExpectation.java
Patch:
@@ -59,7 +59,7 @@ public ForwardChainExpectation withId(String id) {
 
     /**
      * <p>
-     * Set priority of this expectation which is used to determin the matching
+     * Set priority of this expectation which is used to determine the matching
      * order of expectations when a request is received.
      * </p>
      * <p>

File: mockserver-core/src/main/java/org/mockserver/authentication/jwt/JWKGenerator.java
Patch:
@@ -45,7 +45,7 @@ public String generateJWK(AsymmetricKeyPair asymmetricKeyPair) {
                 )
             );
         } catch (Throwable throwable) {
-            throw new RuntimeException("Exception createing JWK", throwable);
+            throw new RuntimeException("Exception creating JWK", throwable);
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -106,7 +106,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         mockServerLogger.logEvent(
             new LogEntry()
                 .setLogLevel(Level.ERROR)
-                .setMessageFormat("echo server server caught exception")
+                .setMessageFormat("echo server caught exception")
                 .setThrowable(cause)
         );
         if (!lastRequest.httpRequest.get().isDone()) {

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -126,7 +126,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         mockServerLogger.logEvent(
             new LogEntry()
                 .setLogLevel(Level.ERROR)
-                .setMessageFormat("echo server server caught exception")
+                .setMessageFormat("echo server caught exception")
                 .setThrowable(cause)
         );
         ctx.close();

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoWebSocketServerHandler.java
Patch:
@@ -128,7 +128,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         mockServerLogger.logEvent(
             new LogEntry()
                 .setLogLevel(Level.ERROR)
-                .setMessageFormat("echo server server caught exception")
+                .setMessageFormat("echo server caught exception")
                 .setThrowable(cause)
         );
         ctx.close();

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerHttpResponseToFullHttpResponse.java
Patch:
@@ -138,7 +138,7 @@ private void setHeaders(HttpResponse httpResponse, DefaultHttpResponse response,
     private void setCookies(HttpResponse httpResponse, DefaultHttpResponse response) {
         if (httpResponse.getCookieMap() != null) {
             for (Map.Entry<NottableString, NottableString> cookie : httpResponse.getCookieMap().entrySet()) {
-                if (httpResponse.cookieHeadeDoesNotAlreadyExists(cookie.getKey().getValue(), cookie.getValue().getValue())) {
+                if (httpResponse.cookieHeaderDoesNotAlreadyExists(cookie.getKey().getValue(), cookie.getValue().getValue())) {
                     response.headers().add(SET_COOKIE, io.netty.handler.codec.http.cookie.ServerCookieEncoder.LAX.encode(new DefaultCookie(cookie.getKey().getValue(), cookie.getValue().getValue())));
                 }
             }

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerHttpResponseToHttpServletResponseEncoder.java
Patch:
@@ -62,7 +62,7 @@ private void setHeaders(HttpResponse httpResponse, HttpServletResponse httpServl
     private void setCookies(HttpResponse httpResponse, HttpServletResponse httpServletResponse) {
         if (httpResponse.getCookieList() != null) {
             for (Cookie cookie : httpResponse.getCookieList()) {
-                if (httpResponse.cookieHeadeDoesNotAlreadyExists(cookie)) {
+                if (httpResponse.cookieHeaderDoesNotAlreadyExists(cookie)) {
                     httpServletResponse.addHeader(SET_COOKIE.toString(), ServerCookieEncoder.LAX.encode(new DefaultCookie(cookie.getName().getValue(), cookie.getValue().getValue())));
                 }
             }

File: mockserver-core/src/main/java/org/mockserver/mock/Expectation.java
Patch:
@@ -286,7 +286,7 @@ public String getId() {
 
     /**
      * <p>
-     * Set priority of this expectation which is used to determin the matching
+     * Set priority of this expectation which is used to determine the matching
      * order of expectations when a request is received.
      * </p>
      * <p>

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -488,7 +488,7 @@ public Map<NottableString, NottableString> getCookieMap() {
         }
     }
 
-    public boolean cookieHeadeDoesNotAlreadyExists(Cookie cookieValue) {
+    public boolean cookieHeaderDoesNotAlreadyExists(Cookie cookieValue) {
         List<String> setCookieHeaders = getHeader(SET_COOKIE.toString());
         for (String setCookieHeader : setCookieHeaders) {
             String existingCookieName = ClientCookieDecoder.LAX.decode(setCookieHeader).name();
@@ -500,7 +500,7 @@ public boolean cookieHeadeDoesNotAlreadyExists(Cookie cookieValue) {
         return true;
     }
 
-    public boolean cookieHeadeDoesNotAlreadyExists(String name, String value) {
+    public boolean cookieHeaderDoesNotAlreadyExists(String name, String value) {
         List<String> setCookieHeaders = getHeader(SET_COOKIE.toString());
         for (String setCookieHeader : setCookieHeaders) {
             String existingCookieName = ClientCookieDecoder.LAX.decode(setCookieHeader).name();

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpResponseSerializer.java
Patch:
@@ -150,9 +150,9 @@ public HttpResponse[] deserializeArray(String jsonHttpResponses) {
                 throw new IllegalArgumentException("1 error:" + NEW_LINE + " - a response or array of response is required");
             } else {
                 List<String> validationErrorsList = new ArrayList<>();
-                for (String jsonExpecation : jsonResponseList) {
+                for (String jsonExpectation : jsonResponseList) {
                     try {
-                        httpResponses.add(deserialize(jsonExpecation));
+                        httpResponses.add(deserialize(jsonExpectation));
                     } catch (IllegalArgumentException iae) {
                         validationErrorsList.add(iae.getMessage());
                     }

File: mockserver-core/src/main/java/org/mockserver/serialization/ObjectMapperFactory.java
Patch:
@@ -248,7 +248,7 @@ private static void addSerializers(SimpleModule module, JsonSerializer[] replace
             new HeadersSerializer(),
             new ParametersSerializer(),
             new CookiesSerializer(),
-            // certifcates
+            // certificates
             new X509CertificateSerializer(),
             new CertificateSerializer(),
             // log

File: mockserver-core/src/main/java/org/mockserver/serialization/OpenAPIExpectationSerializer.java
Patch:
@@ -145,9 +145,9 @@ public OpenAPIExpectation[] deserializeArray(String jsonOpenAPIExpectations, boo
             List<String> jsonOpenAPIExpectationList = jsonArraySerializer.splitJSONArray(jsonOpenAPIExpectations);
             if (!jsonOpenAPIExpectationList.isEmpty()) {
                 List<String> validationErrorsList = new ArrayList<String>();
-                for (String jsonExpecation : jsonOpenAPIExpectationList) {
+                for (String jsonExpectation : jsonOpenAPIExpectationList) {
                     try {
-                        expectations.add(deserialize(jsonExpecation));
+                        expectations.add(deserialize(jsonExpectation));
                     } catch (IllegalArgumentException iae) {
                         validationErrorsList.add(iae.getMessage());
                     }

File: mockserver-core/src/test/java/org/mockserver/authentication/mtls/MTLSAuthenticationHandlerTest.java
Patch:
@@ -157,7 +157,7 @@ public void shouldNotValidateCertificateChain() {
     }
 
     @Test
-    public void shouldNotValidateEmptyClientCertifcates() {
+    public void shouldNotValidateEmptyClientCertificates() {
         // given
         AuthenticationHandler authenticationHandler = new MTLSAuthenticationHandler(
             mockServerLogger,
@@ -174,7 +174,7 @@ public void shouldNotValidateEmptyClientCertifcates() {
     }
 
     @Test
-    public void shouldNotValidateNoClientCertifcates() {
+    public void shouldNotValidateNoClientCertificates() {
         // given
         AuthenticationHandler authenticationHandler = new MTLSAuthenticationHandler(
             mockServerLogger,

File: mockserver-core/src/test/java/org/mockserver/codec/BodyDecoderEncoderTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldSerialiseBodyToByteBufWithNoContentType() {
     }
 
     @Test
-    public void shouldSerialiseBodyToByteBufWithIvalidContentType() {
+    public void shouldSerialiseBodyToByteBufWithInvalidContentType() {
         // given
         String bodyValue = new String(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
         Body body = new StringBody(bodyValue);

File: mockserver-core/src/test/java/org/mockserver/logging/MockServerLoggerTest.java
Patch:
@@ -25,7 +25,7 @@ public class MockServerLoggerTest {
     private static boolean disableSystemOut;
 
     @BeforeClass
-    public static void recordeSystemProperties() {
+    public static void recordSystemProperties() {
         disableSystemOut = ConfigurationProperties.disableSystemOut();
         ConfigurationProperties.disableSystemOut(false);
     }

File: mockserver-core/src/test/java/org/mockserver/matchers/JsonSchemaMatcherTest.java
Patch:
@@ -27,7 +27,7 @@ public class JsonSchemaMatcherTest {
     private static boolean disableSystemOut;
 
     @BeforeClass
-    public static void recordeSystemProperties() {
+    public static void recordSystemProperties() {
         disableSystemOut = ConfigurationProperties.disableSystemOut();
         ConfigurationProperties.disableSystemOut(false);
     }

File: mockserver-core/src/test/java/org/mockserver/matchers/XPathMatcherTest.java
Patch:
@@ -106,7 +106,7 @@ public void shouldMatchMatchingXPathWithNamespaces() {
         assertFalse(new XPathMatcher(new MockServerLogger(),"//content").matches(null, matched));
         assertTrue(new XPathMatcher(new MockServerLogger(),"//*[local-name()='content']").matches(null, matched));
 
-        // xml is not parsed namespac aware, so this should fail
+        // xml is not parsed namespace aware, so this should fail
         assertFalse(new XPathMatcher(new MockServerLogger(),"//*[local-name()='content' and namespace-uri()='http://bar.example.com']").matches(null, matched));
         
         // when using namespace prefixes, xml is parsed as namespace aware

File: mockserver-core/src/test/java/org/mockserver/matchers/XmlSchemaMatcherTest.java
Patch:
@@ -27,7 +27,7 @@ public class XmlSchemaMatcherTest {
     private static boolean disableSystemOut;
 
     @BeforeClass
-    public static void recordeSystemProperties() {
+    public static void recordSystemProperties() {
         disableSystemOut = ConfigurationProperties.disableSystemOut();
         ConfigurationProperties.disableSystemOut(false);
     }

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -1794,8 +1794,8 @@ public void shouldVerifySequenceOfRequestsReceivedByExceptionIdWithIdenticalRequ
         assertThat(thirdAssertionError.getMessage(), startsWith("Request sequence not found"));
         AssertionError fourthAssertionError = assertThrows(AssertionError.class, () -> mockServerClient.verify(firstExpectation.getId(), firstExpectation.getId(), firstExpectation.getId(), secondExpectation.getId()));
         assertThat(fourthAssertionError.getMessage(), startsWith("Request sequence not found"));
-        AssertionError fithAssertionError = assertThrows(AssertionError.class, () -> mockServerClient.verify(thirdExpectation.getId()));
-        assertThat(fithAssertionError.getMessage(), startsWith("Request sequence not found"));
+        AssertionError fifthAssertionError = assertThrows(AssertionError.class, () -> mockServerClient.verify(thirdExpectation.getId()));
+        assertThat(fifthAssertionError.getMessage(), startsWith("Request sequence not found"));
         AssertionError sixAssertionError = assertThrows(AssertionError.class, () -> mockServerClient.verify(UUID.randomUUID().toString(), UUID.randomUUID().toString()));
         assertThat(sixAssertionError.getMessage(), startsWith("No expectation found with id "));
     }

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/MockServerExtensionLifecycleMethodInjectionTest.java
Patch:
@@ -19,7 +19,7 @@ class MockServerExtensionLifecycleMethodInjectionTest {
     private MockServerClient client;
 
     @BeforeEach
-    public void beforeEachLifecyleMethod(MockServerClient client) {
+    public void beforeEachLifecycleMethod(MockServerClient client) {
         this.client = client;
     }
 

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -228,13 +228,13 @@ private static Map<String, String> parseArguments(String... arguments) {
         }
 
         if (!errorMessages.isEmpty()) {
-            printValidationEror(errorMessages);
+            printValidationError(errorMessages);
             throw new IllegalArgumentException(errorMessages.toString());
         }
         return parsedArguments;
     }
 
-    private static void printValidationEror(List<String> errorMessages) {
+    private static void printValidationError(List<String> errorMessages) {
         int maxLengthMessage = 0;
         for (String errorMessage : errorMessages) {
             if (errorMessage.length() > maxLengthMessage) {

File: mockserver-netty/src/test/java/org/mockserver/dashboard/DashboardWebSocketHandlerTest.java
Patch:
@@ -1506,7 +1506,7 @@ private void shouldRenderFilteredLogEntriesCorrectly(boolean contains, RequestDe
 
     public static class MockChannelHandlerContext extends EmbeddedChannel {
 
-        // can't use future as called mutiple times
+        // can't use future as called multiple times
         TextWebSocketFrame textWebSocketFrame;
 
         @Override

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerSOCKSErrorTest.java
Patch:
@@ -102,15 +102,15 @@ public void shouldHandleErrorsDuringSOCKSConnection() throws DecoderException {
 
         // then - CONNECT response
         byte[] domainInBytes = "127.0.0.1".getBytes(CharsetUtil.US_ASCII);
-        String dominLegnthAndBytes = Strings.padStart(BigInteger.valueOf(domainInBytes.length).toString(16), 2, '0') + new BigInteger(domainInBytes).toString(16);
+        String domainLengthAndBytes = Strings.padStart(BigInteger.valueOf(domainInBytes.length).toString(16), 2, '0') + new BigInteger(domainInBytes).toString(16);
         assertThat(ByteBufUtil.hexDump((ByteBuf) embeddedChannel.readOutbound()), is(
             Hex.encodeHexString(new byte[]{
                 (byte) 0x05,                                        // SOCKS5
                 (byte) 0x01,                                        // general failure (caused by connection failure)
                 (byte) 0x00,                                        // reserved (must be 0x00)
                 (byte) 0x03,                                        // address type domain
             }) +
-                dominLegnthAndBytes +                               // ip address
+                domainLengthAndBytes +                              // ip address
                 portInHex                                           // port
         ));
 

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/request/HttpRequestDTOSerializer.java
Patch:
@@ -48,6 +48,9 @@ public void serialize(HttpRequestDTO httpRequest, JsonGenerator jgen, Serializer
         if (httpRequest.getSecure() != null) {
             jgen.writeBooleanField("secure", httpRequest.getSecure());
         }
+        if (httpRequest.getProtocol() != null) {
+            jgen.writeStringField("protocol", httpRequest.getProtocol().name());
+        }
         if (httpRequest.getClientCertificateChain() != null && !httpRequest.getClientCertificateChain().isEmpty()) {
             jgen.writeObjectField("clientCertificateChain", httpRequest.getClientCertificateChain());
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/request/HttpRequestSerializer.java
Patch:
@@ -48,6 +48,9 @@ public void serialize(HttpRequest httpRequest, JsonGenerator jgen, SerializerPro
         if (httpRequest.isSecure() != null) {
             jgen.writeBooleanField("secure", httpRequest.isSecure());
         }
+        if (httpRequest.getProtocol() != null) {
+            jgen.writeStringField("protocol", httpRequest.getProtocol().name());
+        }
         if (httpRequest.getClientCertificateChain() != null && !httpRequest.getClientCertificateChain().isEmpty()) {
             jgen.writeObjectField("clientCertificateChain", httpRequest.getClientCertificateChain());
         }

File: mockserver-core/src/test/java/org/mockserver/server/ServletResponseWriterTest.java
Patch:
@@ -78,7 +78,7 @@ public void shouldWriteContentTypeForStringBody() {
     public void shouldWriteContentTypeForJsonBody() {
         // given
         HttpRequest request = request("some_request");
-        HttpResponse response = response().withBody(json("some_response"));
+        HttpResponse response = response().withBody(json("\"some_response\""));
 
         // when
         servletResponseWriter.writeResponse(request, response, false);
@@ -87,7 +87,7 @@ public void shouldWriteContentTypeForJsonBody() {
         verify(mockServerResponseToHttpServletResponseEncoder).mapMockServerResponseToHttpServletResponse(
             response()
                 .withHeader("connection", "close")
-                .withBody(json("some_response")),
+                .withBody(json("\"some_response\"")),
             httpServletResponse
         );
     }

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/relay/UpstreamProxyRelayHandler.java
Patch:
@@ -18,6 +18,7 @@
 import static org.mockserver.exception.ExceptionHandling.connectionClosedException;
 import static org.mockserver.netty.unification.PortUnificationHandler.isSslEnabledDownstream;
 import static org.mockserver.netty.unification.PortUnificationHandler.nettySslContextFactory;
+import static org.mockserver.socket.tls.SniHandler.isHTTP2Enabled;
 
 public class UpstreamProxyRelayHandler extends SimpleChannelInboundHandler<FullHttpRequest> {
 
@@ -41,7 +42,7 @@ public void channelActive(ChannelHandlerContext ctx) {
     @Override
     public void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest request) {
         if (isSslEnabledDownstream(upstreamChannel) && downstreamChannel.pipeline().get(SslHandler.class) == null) {
-            downstreamChannel.pipeline().addFirst(nettySslContextFactory(ctx.channel()).createClientSslContext(true).newHandler(ctx.alloc()));
+            downstreamChannel.pipeline().addFirst(nettySslContextFactory(ctx.channel()).createClientSslContext(true, isHTTP2Enabled(mockServerLogger, ctx)).newHandler(ctx.alloc()));
         }
         downstreamChannel.writeAndFlush(request).addListener((ChannelFutureListener) future -> {
             if (future.isSuccess()) {

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/socks/SocksProxyHandler.java
Patch:
@@ -12,7 +12,7 @@
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.mockserver.exception.ExceptionHandling.connectionClosedException;
-import static org.mockserver.netty.HttpRequestHandler.PROXYING;
+import static org.mockserver.netty.HttpRequestHandler.setProxyingRequest;
 import static org.mockserver.netty.unification.PortUnificationHandler.disableSslDownstream;
 import static org.mockserver.netty.unification.PortUnificationHandler.enableSslDownstream;
 
@@ -32,7 +32,7 @@ public SocksProxyHandler(Configuration configuration, MockServerLogger mockServe
 
     protected void forwardConnection(final ChannelHandlerContext ctx, ChannelHandler forwarder, final String addr, int port) {
         Channel channel = ctx.channel();
-        channel.attr(PROXYING).set(Boolean.TRUE);
+        setProxyingRequest(ctx, Boolean.TRUE);
         if (String.valueOf(port).endsWith("80")) {
             disableSslDownstream(channel);
         } else if (String.valueOf(port).endsWith("443")) {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/NettyUnidirectionalBinaryForwardingIntegrationTest.java
Patch:
@@ -184,7 +184,7 @@ private static void readSingleResponseMessage(Socket socket) throws IOException,
                 + " bytes available, wanted " + RESPONSE_MESSAGE.length() + ")");
         byte[] buffer = new byte[RESPONSE_MESSAGE.length() + 1];
         log("Before reading from buffer. Currently "+socket.getInputStream().available()+" bytes available");
-        socket.getInputStream().read(buffer, 0, buffer.length);
+        input.read(buffer, 0, buffer.length);
         log("After reading from buffer. Currently "+socket.getInputStream().available()+" bytes available");
         assertEquals(RESPONSE_MESSAGE, new String(buffer));
     }

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -228,13 +228,13 @@ private static Map<String, String> parseArguments(String... arguments) {
         }
 
         if (!errorMessages.isEmpty()) {
-            printValidationEror(errorMessages);
+            printValidationError(errorMessages);
             throw new IllegalArgumentException(errorMessages.toString());
         }
         return parsedArguments;
     }
 
-    private static void printValidationEror(List<String> errorMessages) {
+    private static void printValidationError(List<String> errorMessages) {
         int maxLengthMessage = 0;
         for (String errorMessage : errorMessages) {
             if (errorMessage.length() > maxLengthMessage) {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -519,7 +519,6 @@ private void proxyRequestsUsingSocketViaSOCKS5(EchoServer echoServer, Socket soc
         inputStream.read(echoServerResponse);
         assertThat(new String(echoServerResponse, StandardCharsets.UTF_8), startsWith("" +
             "HTTP/1.1 200 OK\r\n" +
-            "content-encoding: .*\r\n" +
             "accept-encoding: gzip,deflate\r\n" +
             "connection: keep-alive\r\n" +
             "content-length: 0\r\n" +

File: mockserver-core/src/main/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngine.java
Patch:
@@ -51,9 +51,9 @@ public JavaScriptTemplateEngine(MockServerLogger mockServerLogger) {
         this(mockServerLogger, null);
     }
 
-    public JavaScriptTemplateEngine(MockServerLogger mockServerLogger, Configuration configuration) {
+    public JavaScriptTemplateEngine(MockServerLogger mockServerLogger, Configuration _configuration) {
         System.setProperty("nashorn.args", "--language=es6");
-        this.configuration = (configuration == null) ? configuration() : configuration;
+        configuration = (_configuration == null) ? configuration() : _configuration;
         if (engine == null) {
             engine = new NashornScriptEngineFactory().getScriptEngine(new SecureFilter());
         }

File: mockserver-core/src/main/java/org/mockserver/templates/engine/velocity/VelocityTemplateEngine.java
Patch:
@@ -120,14 +120,14 @@ public VelocityTemplateEngine(MockServerLogger mockServerLogger) {
         this(mockServerLogger, null);
     }
 
-    public VelocityTemplateEngine(MockServerLogger mockServerLogger, Configuration configuration) {
+    public VelocityTemplateEngine(MockServerLogger mockServerLogger, Configuration _configuration) {
         this.mockServerLogger = mockServerLogger;
         this.httpTemplateOutputDeserializer = new HttpTemplateOutputDeserializer(mockServerLogger);
         if (objectMapper == null) {
             objectMapper = ObjectMapperFactory.createObjectMapper();
         }
-        this.configuration = (configuration == null) ? configuration() : configuration;
-        if (this.configuration.velocityDenyClasses()) {
+        configuration = (_configuration == null) ? configuration() : _configuration;
+        if (configuration.velocityDenyClasses()) {
             velocityEngine.setProperty(RuntimeConstants.UBERSPECT_CLASSNAME, SecureUberspector.class.getName());
         }
     }

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletRequestToMockServerHttpRequestDecoder.java
Patch:
@@ -46,7 +46,7 @@ public HttpRequest mapHttpServletRequestToMockServerRequest(HttpServletRequest h
         request.withKeepAlive(isKeepAlive(httpServletRequest));
         request.withSecure(httpServletRequest.isSecure());
         request.withLocalAddress(httpServletRequest.getLocalAddr() + ":" + httpServletRequest.getLocalPort());
-        request.withRemoteAddress(httpServletRequest.getRemoteHost());
+        request.withRemoteAddress(httpServletRequest.getRemoteHost() + ":" + httpServletRequest.getRemotePort());
         return request;
     }
 

File: mockserver-core/src/test/java/org/mockserver/mappers/HttpServletRequestToMockServerHttpRequestDecoderTest.java
Patch:
@@ -69,7 +69,7 @@ public void shouldMapHttpServletRequestToHttpRequest() {
             new Cookie("cookieName2", "cookieValue2")
         ), httpRequest.getCookieList());
         assertThat(httpRequest.getLocalAddress(), equalTo("local_addr:1234"));
-        assertThat(httpRequest.getRemoteAddress(), equalTo("remote_addr"));
+        assertThat(httpRequest.getRemoteAddress(), equalTo("remote_addr:80"));
     }
 
     @Test

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -2818,7 +2818,7 @@ public void shouldForwardOverriddenRequestWithRequestModifier() {
                 .withSecure(false)
                 .withSocketAddress("localhost", insecureEchoServer.getPort(), SocketAddress.Scheme.HTTP)
                 .withLocalAddress("127.0.0.1:" + insecureEchoServer.getPort())
-                .withRemoteAddress("127.0.0.1")
+                .withRemoteAddress("127.0.0.1:" + echoServerRequest.getRemoteAddress().split(":")[1])
                 .withBody("some_overridden_body")
         );
         assertEquals(
@@ -2966,7 +2966,7 @@ public void shouldForwardOverriddenRequestWithRequestAndResponseModifiers() {
                 .withSecure(false)
                 .withSocketAddress("localhost", insecureEchoServer.getPort(), SocketAddress.Scheme.HTTP)
                 .withLocalAddress("127.0.0.1:" + insecureEchoServer.getPort())
-                .withRemoteAddress("127.0.0.1")
+                .withRemoteAddress("127.0.0.1:" + echoServerRequest.getRemoteAddress().split(":")[1])
                 .withBody("some_overridden_body")
         );
         assertEquals(
@@ -3047,7 +3047,7 @@ public void shouldForwardOverriddenRequestWithEmptyRequestAndResponseModifiers()
                 .withSecure(false)
                 .withSocketAddress("localhost", insecureEchoServer.getPort(), SocketAddress.Scheme.HTTP)
                 .withLocalAddress("127.0.0.1:" + insecureEchoServer.getPort())
-                .withRemoteAddress("127.0.0.1")
+                .withRemoteAddress("127.0.0.1:" + echoServerRequest.getRemoteAddress().split(":")[1])
                 .withBody("some_overridden_body")
         );
         assertEquals(

File: mockserver-core/src/main/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngine.java
Patch:
@@ -167,7 +167,7 @@ boolean validateTemplate(String template) {
      * If this property is not set, or has the value as *... it exposes any java class to javascript
      * Ex: mockserver.javascript.class.deny=java.lang.Runtime will deny exposing java.lang.Runtime class to javascript, while all other classes will be exposed.
      */
-    class SecureFilter implements ClassFilter {
+    static class SecureFilter implements ClassFilter {
         ArrayList<String> restrictedClassesList = null;
 
         SecureFilter() {

File: mockserver-core/src/main/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngine.java
Patch:
@@ -192,7 +192,7 @@ void init() {
          * @return true if the java class can be exposed to javascript, false otherwise
          */
         public boolean exposeToScripts(String className) {
-            if ((restrictedClassesList == null) || (restrictedClassesList.size() < 1) || (restrictedClassesList.contains("*"))) {
+            if ((restrictedClassesList == null) || (restrictedClassesList.size() < 1) ||  restrictedClassesList.contains("*")) {
                 return true;
             }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestsPropertiesMatcher.java
Patch:
@@ -448,8 +448,8 @@ private BiConsumer<String, MediaType> handleRequestBody(OpenAPIDefinition openAP
                 return;
             }
             if (!contentType.equals("*/*") && required) {
-                // ensure that parameters added to the content type such as charset don't break the matching
-                httpRequest.withHeader(CONTENT_TYPE.toString(), contentType.replaceAll("\\*", ".*") + ".*");
+                // ensure that parameters added to the content type such as charset don't break the matching (but escape special characters in header value so they don't break regex)
+                httpRequest.withHeader(CONTENT_TYPE.toString(), contentType.replaceAll("[_ :;.,/\"'?!(){}\\[\\]@<>=\\-+*#$&`|~^%]", "\\\\$0").replaceAll("\\*", ".*") + ".*");
             }
             if (mediaType != null && mediaType.getSchema() != null) {
                 Map<String, ParameterStyle> parameterStyle = null;

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/PortUnificationHandler.java
Patch:
@@ -368,13 +368,14 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable throwable) {
                     .setThrowable(throwable)
             );
         } else if (sslHandshakeException(throwable)) {
-            if (throwable.getMessage().contains("certificate_unknown")) {
+            if (throwable.getMessage().contains("certificate_unknown") || throwable.getMessage().toLowerCase().contains("unknown_ca")) {
                 if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(Level.WARN)
                             .setMessageFormat("TLS handshake failure:" + NEW_LINE + NEW_LINE + " Client does not trust MockServer Certificate Authority for:{}See http://mock-server.com/mock_server/HTTPS_TLS.html to enable the client to trust MocksServer Certificate Authority." + NEW_LINE)
                             .setArguments(ctx.channel())
+                            .setThrowable(throwable)
                     );
                 }
             } else if (!throwable.getMessage().contains("close_notify during handshake")) {

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -363,7 +363,7 @@ private NettyHttpClient getNettyHttpClient() {
                         }
                     };
             }
-            this.nettyHttpClient = new NettyHttpClient(configuration(), MOCK_SERVER_LOGGER, eventLoopGroup, proxyConfiguration != null ? ImmutableList.of(proxyConfiguration) : null, false, nettySslContextFactory.withClientSslContextBuilderFunction(clientSslContextBuilderFunction));
+            this.nettyHttpClient = new NettyHttpClient(configuration.toServerConfiguration(), MOCK_SERVER_LOGGER, eventLoopGroup, proxyConfiguration != null ? ImmutableList.of(proxyConfiguration) : null, false, nettySslContextFactory.withClientSslContextBuilderFunction(clientSslContextBuilderFunction));
         }
         return nettyHttpClient;
     }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/BinaryProxyIntegrationTest.java
Patch:
@@ -181,7 +181,7 @@ public void shouldCloseConnectionForBinaryMessagesWithNoRemoteAddress() throws E
             .get(10, SECONDS);
 
         // then
-        assertThat(ByteBufUtil.hexDump(binaryResponse.getBytes()), is(ByteBufUtil.hexDump("unknown message format".getBytes(StandardCharsets.UTF_8))));
+        assertThat(new String(binaryResponse.getBytes(), StandardCharsets.UTF_8), is("unknown message format, only HTTP requests are supported for mocking or HTTP & binary requests for proxying, but request is not being proxied and request is not valid HTTP"));
     }
 
 }

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIConverter.java
Patch:
@@ -82,7 +82,7 @@ private HttpResponse buildHttpResponse(OpenAPI openAPI, ApiResponses apiResponse
                             if (example != null) {
                                 response.withHeader(entry.getKey(), String.valueOf(example.getValue()));
                             } else if (value.getSchema() != null) {
-                                org.mockserver.openapi.examples.models.Example generatedExample = ExampleBuilder.fromSchema(value.getSchema(), openAPI.getComponents().getSchemas());
+                                org.mockserver.openapi.examples.models.Example generatedExample = ExampleBuilder.fromSchema(value.getSchema(), openAPI.getComponents() != null ? openAPI.getComponents().getSchemas() : null);
                                 if (generatedExample instanceof StringExample) {
                                     response.withHeader(entry.getKey(), ((StringExample) generatedExample).getValue());
                                 } else {
@@ -125,7 +125,7 @@ private HttpResponse buildHttpResponse(OpenAPI openAPI, ApiResponses apiResponse
                                             response.withBody(((StringExample) generatedExample).getValue());
                                         }
                                     } else {
-                                        org.mockserver.openapi.examples.models.Example exampleFromSchema = ExampleBuilder.fromSchema(mediaType.getSchema(), openAPI.getComponents().getSchemas());
+                                        org.mockserver.openapi.examples.models.Example exampleFromSchema = ExampleBuilder.fromSchema(mediaType.getSchema(), openAPI.getComponents() != null ? openAPI.getComponents().getSchemas() : null);
                                         if (exampleFromSchema != null) {
                                             String serialise = serialise(exampleFromSchema);
                                             if (isJsonContentType(contentType.getKey())) {

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIConverter.java
Patch:
@@ -82,7 +82,7 @@ private HttpResponse buildHttpResponse(OpenAPI openAPI, ApiResponses apiResponse
                             if (example != null) {
                                 response.withHeader(entry.getKey(), String.valueOf(example.getValue()));
                             } else if (value.getSchema() != null) {
-                                org.mockserver.openapi.examples.models.Example generatedExample = ExampleBuilder.fromSchema(value.getSchema(), openAPI.getComponents().getSchemas());
+                                org.mockserver.openapi.examples.models.Example generatedExample = ExampleBuilder.fromSchema(value.getSchema(), openAPI.getComponents() != null ? openAPI.getComponents().getSchemas() : null);
                                 if (generatedExample instanceof StringExample) {
                                     response.withHeader(entry.getKey(), ((StringExample) generatedExample).getValue());
                                 } else {
@@ -125,7 +125,7 @@ private HttpResponse buildHttpResponse(OpenAPI openAPI, ApiResponses apiResponse
                                             response.withBody(((StringExample) generatedExample).getValue());
                                         }
                                     } else {
-                                        org.mockserver.openapi.examples.models.Example exampleFromSchema = ExampleBuilder.fromSchema(mediaType.getSchema(), openAPI.getComponents().getSchemas());
+                                        org.mockserver.openapi.examples.models.Example exampleFromSchema = ExampleBuilder.fromSchema(mediaType.getSchema(), openAPI.getComponents() != null ? openAPI.getComponents().getSchemas() : null);
                                         if (exampleFromSchema != null) {
                                             String serialise = serialise(exampleFromSchema);
                                             if (isJsonContentType(contentType.getKey())) {

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerHttpResponseToFullHttpResponse.java
Patch:
@@ -116,7 +116,7 @@ private void setHeaders(HttpResponse httpResponse, DefaultHttpResponse response,
         if (isBlank(httpResponse.getFirstHeader(CONTENT_LENGTH.toString()))) {
             boolean overrideContentLength = connectionOptions != null && connectionOptions.getContentLengthHeaderOverride() != null;
             boolean addContentLength = connectionOptions == null || !Boolean.TRUE.equals(connectionOptions.getSuppressContentLengthHeader());
-            boolean chunkedEncoding = connectionOptions != null && connectionOptions.getChunkSize() != null;
+            boolean chunkedEncoding = (connectionOptions != null && connectionOptions.getChunkSize() != null) || response.headers().contains(HttpHeaderNames.TRANSFER_ENCODING);
             if (overrideContentLength) {
                 response.headers().set(CONTENT_LENGTH, connectionOptions.getContentLengthHeaderOverride());
             } else if (addContentLength && !chunkedEncoding) {

File: mockserver-examples/src/main/java/org/mockserver/examples/mockserver/CallbackActionExamples.java
Patch:
@@ -9,7 +9,6 @@
 import org.mockserver.model.HttpResponse;
 import org.mockserver.model.HttpStatusCode;
 
-import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.mockserver.model.BinaryBody.binary;
 import static org.mockserver.model.Header.header;

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/HttpContentLengthRemover.java
Patch:
@@ -1,10 +1,10 @@
 package org.mockserver.netty.unification;
 
-import com.google.common.net.HttpHeaders;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
 import io.netty.handler.codec.http.DefaultHttpMessage;
+import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.util.ReferenceCountUtil;
 
 import java.util.List;
@@ -17,8 +17,8 @@ public class HttpContentLengthRemover extends MessageToMessageEncoder<DefaultHtt
     @Override
     @SuppressWarnings("unchecked")
     protected void encode(ChannelHandlerContext ctx, DefaultHttpMessage defaultHttpMessage, List out) {
-        if (defaultHttpMessage.headers().contains(HttpHeaders.CONTENT_LENGTH, "", true)) {
-            defaultHttpMessage.headers().remove(HttpHeaders.CONTENT_LENGTH);
+        if (defaultHttpMessage.headers().contains(HttpHeaderNames.CONTENT_LENGTH, "", true)) {
+            defaultHttpMessage.headers().remove(HttpHeaderNames.CONTENT_LENGTH);
         }
         ReferenceCountUtil.retain(defaultHttpMessage);
         out.add(defaultHttpMessage);

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardWebSocketHandler.java
Patch:
@@ -336,7 +336,7 @@ private void sendUpdate(ChannelOutboundInvoker ctx, RequestDefinition httpReques
         mockServerEventLog
             .retrieveLogEntriesInReverseForUI(
                 httpRequest,
-                logEntry -> true,
+                logEntry -> !logEntry.isDeleted(),
                 DashboardLogEntryDTO::new,
                 reverseLogEventsStream -> {
                     List<ImmutableMap<String, Object>> activeExpectations = requestMatchers

File: mockserver-core/src/main/java/org/mockserver/model/NottableString.java
Patch:
@@ -160,7 +160,7 @@ public ParameterStyle getParameterStyle() {
     }
 
     public NottableString withStyle(ParameterStyle style) {
-        if (style.equals(DEEP_OBJECT)) {
+        if (style != null && style.equals(DEEP_OBJECT)) {
             throw new IllegalArgumentException("deep object style is not supported");
         }
         this.parameterStyle = style;

File: mockserver-core/src/main/java/org/mockserver/codec/PathParametersDecoder.java
Patch:
@@ -87,8 +87,6 @@ public Parameters extractPathParameters(HttpRequest matcher, HttpRequest matched
                 }
             }
         }
-        // ensure actions have path parameters available to them
-        matched.withPathParameters(parsedParameters);
         return parsedParameters;
     }
 

File: mockserver-core/src/test/java/org/mockserver/matchers/HttpRequestPropertiesMatcherTest.java
Patch:
@@ -741,7 +741,7 @@ public void shouldMatchPathParameterInPathForControlPlane() {
                 new Parameter("someKey", "someValueOne", "someValueTwo")
             )
         ));
-        assertTrue(updateForControlPlane(new HttpRequest()
+        assertFalse(updateForControlPlane(new HttpRequest()
             .withPath(
                 "/some/path/someValue"
             )
@@ -756,7 +756,7 @@ public void shouldMatchPathParameterInPathForControlPlane() {
                 new Parameter("someKey", "someValue")
             )
         ));
-        assertTrue(updateForControlPlane(new HttpRequest()
+        assertFalse(updateForControlPlane(new HttpRequest()
             .withPath(
                 "/some/path/someValueOne,someValueTwo"
             )

File: mockserver-core/src/main/java/org/mockserver/codec/ExpandedParameterDecoder.java
Patch:
@@ -60,7 +60,6 @@ public Parameters retrieveFormParameters(String parameterString, boolean hasPath
     public Parameters retrieveQueryParameters(String parameterString, boolean hasPath) {
         if (isNotBlank(parameterString)) {
             String rawParameterString = parameterString.contains("?") ? StringUtils.substringAfter(parameterString, "?") : parameterString;
-            Parameters parameters = new Parameters().withRawParameterString(rawParameterString);
             Map<String, List<String>> parameterMap = new HashMap<>();
             try {
                 hasPath = parameterString.startsWith("/") || parameterString.contains("?") || hasPath;
@@ -74,7 +73,7 @@ public Parameters retrieveQueryParameters(String parameterString, boolean hasPat
                         .setThrowable(iae)
                 );
             }
-            return parameters.withEntries(parameterMap);
+            return new Parameters().withEntries(parameterMap).withRawParameterString(rawParameterString);
         }
         return null;
     }

File: mockserver-core/src/main/java/org/mockserver/model/Headers.java
Patch:
@@ -31,6 +31,9 @@ public Header build(NottableString name, Collection<NottableString> values) {
         return new Header(name, values);
     }
 
+    protected void isModified() {
+    }
+
     public Headers withKeyMatchStyle(KeyMatchStyle keyMatchStyle) {
         super.withKeyMatchStyle(keyMatchStyle);
         return this;

File: mockserver-core/src/test/java/org/mockserver/codec/NettyHttpToMockServerHttpRequestDecoderTest.java
Patch:
@@ -7,7 +7,6 @@
 import io.netty.handler.codec.http.HttpVersion;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockserver.configuration.Configuration;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
 

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/PortUnificationHandler.java
Patch:
@@ -15,6 +15,7 @@
 import io.netty.util.AttributeKey;
 import org.apache.commons.lang3.StringUtils;
 import org.mockserver.codec.MockServerHttpServerCodec;
+import org.mockserver.codec.PreserveHeadersNettyRemoves;
 import org.mockserver.configuration.Configuration;
 import org.mockserver.dashboard.DashboardWebSocketHandler;
 import org.mockserver.lifecycle.LifeCycle;
@@ -67,6 +68,7 @@ public class PortUnificationHandler extends ReplayingDecoder<Void> {
     protected final MockServerLogger mockServerLogger;
     private final LoggingHandler loggingHandler = new LoggingHandler(PortUnificationHandler.class.getName() + "-first");
     private final HttpContentLengthRemover httpContentLengthRemover = new HttpContentLengthRemover();
+    private final PreserveHeadersNettyRemoves preserveHeadersNettyRemoves = new PreserveHeadersNettyRemoves();
     private final Configuration configuration;
     private final LifeCycle server;
     private final HttpState httpState;
@@ -219,6 +221,7 @@ private void switchToHttp(ChannelHandlerContext ctx, ByteBuf msg) {
             configuration.maxHeaderSize(),
             configuration.maxChunkSize()
         ));
+        addLastIfNotPresent(pipeline, preserveHeadersNettyRemoves);
         addLastIfNotPresent(pipeline, new HttpContentDecompressor());
         addLastIfNotPresent(pipeline, httpContentLengthRemover);
         addLastIfNotPresent(pipeline, new HttpObjectAggregator(Integer.MAX_VALUE));

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -515,10 +515,11 @@ private void proxyRequestsUsingSocketViaSOCKS5(EchoServer echoServer, Socket soc
         ).getBytes(StandardCharsets.UTF_8));
         outputStream.flush();
 
-        byte[] echoServerResponse = new byte[95];
+        byte[] echoServerResponse = new byte[125];
         inputStream.read(echoServerResponse);
         assertThat(new String(echoServerResponse, StandardCharsets.UTF_8), startsWith("" +
             "HTTP/1.1 200 OK\r\n" +
+            "content-encoding: .*\r\n" +
             "accept-encoding: gzip,deflate\r\n" +
             "connection: keep-alive\r\n" +
             "content-length: 0\r\n" +

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/direct/DirectProxyUnificationHandlerTest.java
Patch:
@@ -142,6 +142,7 @@ public void shouldSwitchToHttp() {
         } else {
             assertThat(String.valueOf(embeddedChannel.pipeline().names()), embeddedChannel.pipeline().names(), contains(
                 "HttpServerCodec#0",
+                "PreserveHeadersNettyRemoves#0",
                 "HttpContentDecompressor#0",
                 "HttpContentLengthRemover#0",
                 "HttpObjectAggregator#0",

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerSOCKSErrorTest.java
Patch:
@@ -149,6 +149,7 @@ public void shouldSwitchToHttp() {
         } else {
             assertThat(String.valueOf(embeddedChannel.pipeline().names()), embeddedChannel.pipeline().names(), contains(
                 "HttpServerCodec#0",
+                "PreserveHeadersNettyRemoves#0",
                 "HttpContentDecompressor#0",
                 "HttpContentLengthRemover#0",
                 "HttpObjectAggregator#0",

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerTest.java
Patch:
@@ -107,6 +107,7 @@ public void shouldSwitchToHttp() {
         // then - should add HTTP handlers last
         assertThat(String.valueOf(embeddedChannel.pipeline().names()), embeddedChannel.pipeline().names(), contains(
             "HttpServerCodec#0",
+            "PreserveHeadersNettyRemoves#0",
             "HttpContentDecompressor#0",
             "HttpContentLengthRemover#0",
             "HttpObjectAggregator#0",

File: mockserver-war/src/test/java/org/mockserver/mockservlet/integration/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.mockservlet.integration;
 
+import io.netty.handler.codec.http.HttpHeaderNames;
 import org.apache.catalina.Context;
 import org.apache.catalina.Service;
 import org.apache.catalina.connector.Connector;
@@ -14,6 +15,8 @@
 import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 
 import static org.mockserver.configuration.Configuration.configuration;

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -210,7 +210,7 @@ public synchronized SslContext createServerSslContext() {
                     .protocols(TLS_PROTOCOLS)
 //                    .sslProvider(SslProvider.JDK)
                     .clientAuth(configuration.tlsMutualAuthenticationRequired() ? ClientAuth.REQUIRE : ClientAuth.OPTIONAL);
-                if (isNotBlank(configuration.tlsMutualAuthenticationCertificateChain())) {
+                if (isNotBlank(configuration.tlsMutualAuthenticationCertificateChain()) || configuration.tlsMutualAuthenticationRequired()) {
                     sslContextBuilder.trustManager(trustCertificateChain());
                 } else {
                     sslContextBuilder.trustManager(InsecureTrustManagerFactory.INSTANCE);

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/ExampleNettySslContextFactory.java
Patch:
@@ -200,7 +200,7 @@ public synchronized SslContext createServerSslContext() {
                     .protocols(TLS_PROTOCOLS)
 //                    .sslProvider(SslProvider.JDK)
                     .clientAuth(configuration.tlsMutualAuthenticationRequired() ? ClientAuth.REQUIRE : ClientAuth.OPTIONAL);
-                if (isNotBlank(configuration.tlsMutualAuthenticationCertificateChain())) {
+                if (isNotBlank(configuration.tlsMutualAuthenticationCertificateChain()) || configuration.tlsMutualAuthenticationRequired()) {
                     sslContextBuilder.trustManager(trustCertificateChain());
                 } else {
                     sslContextBuilder.trustManager(InsecureTrustManagerFactory.INSTANCE);

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -81,7 +81,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
                 httpResponse.replaceHeader(CONTENT_LENGTH.toString(), String.valueOf(length));
             }
 
-            if (MockServerLogger.isEnabled(INFO)) {
+            if (MockServerLogger.isEnabled(INFO) && mockServerLogger != null) {
                 mockServerEventLog.add(
                     new LogEntry()
                         .setLogLevel(INFO)

File: mockserver-core/src/main/java/org/mockserver/exception/ExceptionHandling.java
Patch:
@@ -36,7 +36,7 @@ public static void swallowThrowable(Runnable runnable) {
         try {
             runnable.run();
         } catch (Throwable throwable) {
-            if (MockServerLogger.isEnabled(WARN)) {
+            if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(WARN)

File: mockserver-core/src/main/java/org/mockserver/mappers/JDKCertificateToMockServerX509Certificate.java
Patch:
@@ -38,7 +38,7 @@ public HttpRequest setClientCertificates(HttpRequest httpRequest, Certificate[]
                                     .withCertificate(certificate)
                             );
                         } catch (Throwable throwable) {
-                            if (MockServerLogger.isEnabled(INFO)) {
+                            if (MockServerLogger.isEnabled(INFO) && mockServerLogger != null) {
                                 mockServerLogger.logEvent(
                                     new LogEntry()
                                         .setLogLevel(INFO)

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestsPropertiesMatcher.java
Patch:
@@ -116,7 +116,7 @@ public boolean apply(RequestDefinition requestDefinition, List<LogEntry> logEntr
                 logEntries.forEach(mockServerLogger::logEvent);
             }
             this.hashCode = 0;
-            if (MockServerLogger.isEnabled(TRACE)) {
+            if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(TRACE)

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonPathMatcher.java
Patch:
@@ -28,7 +28,7 @@ public class JsonPathMatcher extends BodyMatcher<String> {
             try {
                 jsonPath = JsonPath.compile(matcher);
             } catch (Throwable throwable) {
-                if (MockServerLogger.isEnabled(DEBUG)) {
+                if (MockServerLogger.isEnabled(DEBUG) && mockServerLogger != null) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(DEBUG)

File: mockserver-core/src/main/java/org/mockserver/matchers/XPathMatcher.java
Patch:
@@ -44,7 +44,7 @@ public class XPathMatcher extends BodyMatcher<String> {
             try {
                 xPathEvaluator = new XPathEvaluator(matcher, namespacePrefixes);
             } catch (Throwable throwable) {
-                if (MockServerLogger.isEnabled(DEBUG)) {
+                if (MockServerLogger.isEnabled(DEBUG) && mockServerLogger != null) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(DEBUG)

File: mockserver-core/src/main/java/org/mockserver/mock/HttpState.java
Patch:
@@ -129,7 +129,7 @@ public HttpState(Configuration configuration, MockServerLogger mockServerLogger,
             }
         }
         this.memoryMonitoring = new MemoryMonitoring(configuration, this.mockServerLog, this.requestMatchers);
-        if (MockServerLogger.isEnabled(TRACE)) {
+        if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
             mockServerLogger.logEvent(
                 new LogEntry()
                     .setLogLevel(TRACE)

File: mockserver-core/src/main/java/org/mockserver/mock/RequestMatchers.java
Patch:
@@ -61,7 +61,7 @@ public RequestMatchers(Configuration configuration, MockServerLogger mockServerL
             httpRequestMatcher -> httpRequestMatcher.getExpectation() != null ? httpRequestMatcher.getExpectation().getId() : ""
         );
         expectationRequestDefinitions = new CircularHashMap<>(configuration.maxExpectations());
-        if (MockServerLogger.isEnabled(TRACE)) {
+        if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
             mockServerLogger.logEvent(
                 new LogEntry()
                     .setLogLevel(TRACE)

File: mockserver-core/src/main/java/org/mockserver/persistence/ExpectationFileSystemPersistence.java
Patch:
@@ -58,7 +58,7 @@ public ExpectationFileSystemPersistence(Configuration configuration, MockServerL
             }
             this.initializationPathMatchesPersistencePath = FilePath.expandFilePathGlobs(configuration.initializationJsonPath()).contains(configuration.persistedExpectationsPath());
             requestMatchers.registerListener(this);
-            if (MockServerLogger.isEnabled(INFO)) {
+            if (MockServerLogger.isEnabled(INFO) && mockServerLogger != null) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(INFO)
@@ -89,14 +89,14 @@ public void updated(RequestMatchers requestMatchers, MockServerMatcherNotifier.C
                     ) {
                         if (fileLock != null) {
                             List<Expectation> expectations = requestMatchers.retrieveActiveExpectations(null);
-                            if (MockServerLogger.isEnabled(TRACE)) {
+                            if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
                                 mockServerLogger.logEvent(
                                     new LogEntry()
                                         .setLogLevel(TRACE)
                                         .setMessageFormat("persisting expectations{}to{}")
                                         .setArguments(expectations, configuration.persistedExpectationsPath())
                                 );
-                            } else if (MockServerLogger.isEnabled(DEBUG)) {
+                            } else if (MockServerLogger.isEnabled(DEBUG) && mockServerLogger != null) {
                                 mockServerLogger.logEvent(
                                     new LogEntry()
                                         .setLogLevel(DEBUG)

File: mockserver-core/src/main/java/org/mockserver/persistence/ExpectationFileWatcher.java
Patch:
@@ -41,7 +41,7 @@ public ExpectationFileWatcher(Configuration configuration, MockServerLogger mock
                     .map(initializationJsonPath -> {
                         try {
                             return new FileWatcher(Paths.get(initializationJsonPath), () -> {
-                                if (MockServerLogger.isEnabled(DEBUG)) {
+                                if (MockServerLogger.isEnabled(DEBUG) && mockServerLogger != null) {
                                     mockServerLogger.logEvent(
                                         new LogEntry()
                                             .setLogLevel(DEBUG)
@@ -51,7 +51,7 @@ public ExpectationFileWatcher(Configuration configuration, MockServerLogger mock
                                 }
                                 addExpectationsFromInitializer();
                             }, throwable -> {
-                                if (MockServerLogger.isEnabled(WARN)) {
+                                if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                                     mockServerLogger.logEvent(
                                         new LogEntry()
                                             .setLogLevel(WARN)
@@ -82,7 +82,7 @@ public ExpectationFileWatcher(Configuration configuration, MockServerLogger mock
                         .setThrowable(throwable)
                 );
             }
-            if (MockServerLogger.isEnabled(INFO)) {
+            if (MockServerLogger.isEnabled(INFO) && mockServerLogger != null) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(INFO)

File: mockserver-core/src/main/java/org/mockserver/serialization/ExpectationSerializer.java
Patch:
@@ -169,14 +169,14 @@ public Expectation[] deserializeArray(String jsonExpectations, boolean allowEmpt
                 for (int i = 0; i < jsonExpectationList.size(); i++) {
                     String jsonExpectation = JacksonUtils.prettyPrint(jsonExpectationList.get(i));
                     if (jsonExpectationList.size() > 100) {
-                        if (MockServerLogger.isEnabled(DEBUG)) {
+                        if (MockServerLogger.isEnabled(DEBUG) && mockServerLogger != null) {
                             mockServerLogger.logEvent(
                                 new LogEntry()
                                     .setLogLevel(DEBUG)
                                     .setMessageFormat("processing JSON expectation " + (i + 1) + " of " + jsonExpectationList.size() + ":{}")
                                     .setArguments(jsonExpectation)
                             );
-                        } else if (MockServerLogger.isEnabled(INFO)) {
+                        } else if (MockServerLogger.isEnabled(INFO) && mockServerLogger != null) {
                             mockServerLogger.logEvent(
                                 new LogEntry()
                                     .setLogLevel(INFO)

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/StrictBodyDTODeserializer.java
Patch:
@@ -217,7 +217,7 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                         }
                         namespacePrefixes = objectMapper.readValue(objectWriter.writeValueAsString(entry.getValue()), new TypeReference<Map<String, String>>(){});
                     }
-                  
+
                 }
             }
             if (type != null) {

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -142,7 +142,7 @@ public KeyStore loadOrCreateKeyStore(PrivateKey privateKey, X509Certificate x509
 
     private SSLContext getSSLContextInstance() throws NoSuchAlgorithmException {
         try {
-            if (MockServerLogger.isEnabled(DEBUG)) {
+            if (MockServerLogger.isEnabled(DEBUG) && mockServerLogger != null) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setType(SERVER_CONFIGURATION)
@@ -153,7 +153,7 @@ private SSLContext getSSLContextInstance() throws NoSuchAlgorithmException {
             }
             return SSLContext.getInstance(SSL_CONTEXT_PROTOCOL);
         } catch (NoSuchAlgorithmException nsae) {
-            if (MockServerLogger.isEnabled(WARN)) {
+            if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(WARN)
@@ -197,7 +197,7 @@ private KeyStore savePrivateKeyAndX509InKeyStore(KeyStore existingKeyStore, Key
             String keyStoreFileAbsolutePath = new File(keyStoreFileName).getAbsolutePath();
             try (FileOutputStream fileOutputStream = new FileOutputStream(keyStoreFileAbsolutePath)) {
                 keyStore.store(fileOutputStream, keyStorePassword);
-                if (MockServerLogger.isEnabled(TRACE)) {
+                if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(TRACE)

File: mockserver-core/src/main/java/org/mockserver/socket/tls/SniHandler.java
Patch:
@@ -94,7 +94,7 @@ public static Certificate[] retrieveClientCertificates(MockServerLogger mockServ
                         ctx.channel().attr(UPSTREAM_CLIENT_CERTIFICATES).set(peerCertificates);
                         return peerCertificates;
                     } catch (SSLPeerUnverifiedException ignore) {
-                        if (MockServerLogger.isEnabled(TRACE)) {
+                        if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
                             mockServerLogger.logEvent(
                                 new LogEntry()
                                     .setLogLevel(Level.TRACE)

File: mockserver-netty/src/main/java/org/mockserver/netty/responsewriter/NettyResponseWriter.java
Patch:
@@ -70,15 +70,15 @@ private void disconnectAndCloseChannel(ChannelFuture future) {
                             .close()
                             .addListener(closeFuture -> {
                                 if (disconnectFuture.isSuccess()) {
-                                    if (MockServerLogger.isEnabled(TRACE)) {
+                                    if (MockServerLogger.isEnabled(TRACE) && mockServerLogger != null) {
                                         mockServerLogger
                                             .logEvent(new LogEntry()
                                                 .setLogLevel(TRACE)
                                                 .setMessageFormat("disconnected and closed socket " + future.channel().localAddress())
                                             );
                                     }
                                 } else {
-                                    if (MockServerLogger.isEnabled(WARN)) {
+                                    if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                                         mockServerLogger
                                             .logEvent(new LogEntry()
                                                 .setLogLevel(WARN)
@@ -88,7 +88,7 @@ private void disconnectAndCloseChannel(ChannelFuture future) {
                                     }
                                 }
                             });
-                    } else if (MockServerLogger.isEnabled(WARN)) {
+                    } else if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                         mockServerLogger
                             .logEvent(new LogEntry()
                                 .setLogLevel(WARN)

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/PortUnificationHandler.java
Patch:
@@ -346,7 +346,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable throwable) {
             );
         } else if (sslHandshakeException(throwable)) {
             if (throwable.getMessage().contains("certificate_unknown")) {
-                if (MockServerLogger.isEnabled(WARN)) {
+                if (MockServerLogger.isEnabled(WARN) && mockServerLogger != null) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(Level.WARN)

File: mockserver-core/src/test/java/org/mockserver/mappers/MockServerHttpResponseToHttpServletResponseEncoderCookieHeaderTest.java
Patch:
@@ -44,7 +44,7 @@ public void shouldOnlyMapACookieIfThereIsNoSetCookieHeader() {
         assertEquals(HttpStatusCode.OK_200.code(), httpServletResponse.getStatus());
         assertThat(httpServletResponse.getHeaders("Set-Cookie"), containsInAnyOrder(
             "cookieName1=\"\"; Path=/; Max-Age=15552000; Expires=Sat, 19 Mar 2016 18:43:26 GMT",
-            "cookieName2=\"cookie==Value2\"; Path=/; Max-Age=15552000; Expires=Sat, 19 Mar 2016 18:43:26 GMT",
+            "cookieName2=\"cookie==Value2\"; Path=/; Max-Age=15552000; Expires=Sat, 19 Mar 2016 18:43:26 GMT; Comment=\"Anonymous cookie for site\"",
             "cookieName3=cookie==Value3"
         ));
         assertThat(httpServletResponse.getHeaderNames(), contains("Set-Cookie"));

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -133,7 +133,8 @@ public synchronized SslContext createClientSslContext(boolean forwardProxyClient
                     }
                     sslContextBuilder.trustManager(jvmCAX509TrustCertificates(mockServerX509Certificates));
                 }
-                clientSslContext = instanceClientSslContextBuilderFunction.apply(sslContextBuilder);
+                clientSslContext = instanceClientSslContextBuilderFunction.apply(
+                    sslClientContextBuilderCustomizer.apply(sslContextBuilder));
                 configuration.rebuildTLSContext(false);
             } catch (Throwable throwable) {
                 throw new RuntimeException("Exception creating SSL context for client", throwable);

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -339,7 +339,7 @@ private String calculatePath(String path) {
 
     private NettyHttpClient getNettyHttpClient() {
         if (nettyHttpClient == null) {
-            NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration.toServerConfiguration(), MOCK_SERVER_LOGGER);
+            NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration.toServerConfiguration(), MOCK_SERVER_LOGGER, false);
             Function<SslContextBuilder, SslContext> clientSslContextBuilderFunction = NettySslContextFactory.clientSslContextBuilderFunction;
             if (configuration.controlPlaneTLSMutualAuthenticationRequired()) {
                 if (isBlank(configuration.controlPlanePrivateKeyPath()) || isBlank(configuration.controlPlaneX509CertificatePath()) || isBlank(configuration.controlPlaneTLSMutualAuthenticationCAChain())) {

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -59,7 +59,7 @@ public void initChannel(SocketChannel channel) {
         }
 
         if (secure) {
-            pipeline.addLast((sslContext != null ? sslContext : new NettySslContextFactory(configuration, mockServerLogger).createServerSslContext()).newHandler(channel.alloc()));
+            pipeline.addLast((sslContext != null ? sslContext : new NettySslContextFactory(configuration, mockServerLogger, true).createServerSslContext()).newHandler(channel.alloc()));
         }
 
         if (MockServerLogger.isEnabled(TRACE)) {

File: mockserver-core/src/main/java/org/mockserver/httpclient/NettyHttpClient.java
Patch:
@@ -52,7 +52,7 @@ public class NettyHttpClient {
     private final NettySslContextFactory nettySslContextFactory;
 
     public NettyHttpClient(Configuration configuration, MockServerLogger mockServerLogger, EventLoopGroup eventLoopGroup, List<ProxyConfiguration> proxyConfigurations, boolean forwardProxyClient) {
-        this(configuration, mockServerLogger, eventLoopGroup, proxyConfigurations, forwardProxyClient, new NettySslContextFactory(configuration, mockServerLogger));
+        this(configuration, mockServerLogger, eventLoopGroup, proxyConfigurations, forwardProxyClient, new NettySslContextFactory(configuration, mockServerLogger, false));
     }
 
     public NettyHttpClient(Configuration configuration, MockServerLogger mockServerLogger, EventLoopGroup eventLoopGroup, List<ProxyConfiguration> proxyConfigurations, boolean forwardProxyClient, NettySslContextFactory nettySslContextFactory) {

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactory.java
Patch:
@@ -5,6 +5,7 @@
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
 import java.util.Date;
+import java.util.List;
 
 /**
  * @author jamesdbloom
@@ -65,4 +66,6 @@ public interface KeyAndCertificateFactory {
 
     X509Certificate certificateAuthorityX509Certificate();
 
+    List<X509Certificate> certificateChain();
+
 }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/authenticatedcontrolplane/AuthenticatedControlPlaneUsingMTLSClientNotAuthenticatedIntegrationTest.java
Patch:
@@ -84,7 +84,7 @@ public static void startServer() {
 
         mockServerClient = new MockServerClient("localhost", mockServerClient.getPort()).withSecure(true);
         MockServerLogger mockServerLogger = new MockServerLogger();
-        NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration(), MOCK_SERVER_LOGGER);
+        NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration(), MOCK_SERVER_LOGGER, false);
         nettySslContextFactory.withClientSslContextBuilderFunction(
             sslContextBuilder -> {
                 try {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/tls/inbound/ClientAuthenticationAdditionalCertificateChainMockingIntegrationTest.java
Patch:
@@ -135,7 +135,8 @@ public void shouldReturnResponseInHttpsApacheClient() throws Exception {
     }
 
     private SSLContext getSslContext() {
-        KeyAndCertificateFactory keyAndCertificateFactory = KeyAndCertificateFactoryFactory.createKeyAndCertificateFactory(configuration(), new MockServerLogger());
+        KeyAndCertificateFactory keyAndCertificateFactory
+            = KeyAndCertificateFactoryFactory.createKeyAndCertificateFactory(configuration(), new MockServerLogger());
         assertThat(keyAndCertificateFactory, notNullValue());
         keyAndCertificateFactory.buildAndSavePrivateKeyAndX509Certificate();
         return new KeyStoreFactory(configuration(), new MockServerLogger())

File: mockserver-proxy-war/src/main/java/org/mockserver/proxyservlet/ProxyServlet.java
Patch:
@@ -66,7 +66,7 @@ public ProxyServlet() {
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
         this.workerGroup = new NioEventLoopGroup(configuration.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
-        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger));
+        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger, true));
     }
 
     @Override

File: mockserver-war/src/main/java/org/mockserver/mockservlet/MockServerServlet.java
Patch:
@@ -66,7 +66,7 @@ public MockServerServlet() {
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
         this.workerGroup = new NioEventLoopGroup(configuration.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
-        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger));
+        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger, true));
     }
 
     @Override

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -339,7 +339,7 @@ private String calculatePath(String path) {
 
     private NettyHttpClient getNettyHttpClient() {
         if (nettyHttpClient == null) {
-            NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration.toServerConfiguration(), MOCK_SERVER_LOGGER);
+            NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration.toServerConfiguration(), MOCK_SERVER_LOGGER, false);
             Function<SslContextBuilder, SslContext> clientSslContextBuilderFunction = NettySslContextFactory.clientSslContextBuilderFunction;
             if (configuration.controlPlaneTLSMutualAuthenticationRequired()) {
                 if (isBlank(configuration.controlPlanePrivateKeyPath()) || isBlank(configuration.controlPlaneX509CertificatePath()) || isBlank(configuration.controlPlaneTLSMutualAuthenticationCAChain())) {

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -59,7 +59,7 @@ public void initChannel(SocketChannel channel) {
         }
 
         if (secure) {
-            pipeline.addLast((sslContext != null ? sslContext : new NettySslContextFactory(configuration, mockServerLogger).createServerSslContext()).newHandler(channel.alloc()));
+            pipeline.addLast((sslContext != null ? sslContext : new NettySslContextFactory(configuration, mockServerLogger, true).createServerSslContext()).newHandler(channel.alloc()));
         }
 
         if (MockServerLogger.isEnabled(TRACE)) {

File: mockserver-core/src/main/java/org/mockserver/httpclient/NettyHttpClient.java
Patch:
@@ -52,7 +52,7 @@ public class NettyHttpClient {
     private final NettySslContextFactory nettySslContextFactory;
 
     public NettyHttpClient(Configuration configuration, MockServerLogger mockServerLogger, EventLoopGroup eventLoopGroup, List<ProxyConfiguration> proxyConfigurations, boolean forwardProxyClient) {
-        this(configuration, mockServerLogger, eventLoopGroup, proxyConfigurations, forwardProxyClient, new NettySslContextFactory(configuration, mockServerLogger));
+        this(configuration, mockServerLogger, eventLoopGroup, proxyConfigurations, forwardProxyClient, new NettySslContextFactory(configuration, mockServerLogger, false));
     }
 
     public NettyHttpClient(Configuration configuration, MockServerLogger mockServerLogger, EventLoopGroup eventLoopGroup, List<ProxyConfiguration> proxyConfigurations, boolean forwardProxyClient, NettySslContextFactory nettySslContextFactory) {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/authenticatedcontrolplane/AuthenticatedControlPlaneUsingMTLSClientNotAuthenticatedIntegrationTest.java
Patch:
@@ -84,7 +84,7 @@ public static void startServer() {
 
         mockServerClient = new MockServerClient("localhost", mockServerClient.getPort()).withSecure(true);
         MockServerLogger mockServerLogger = new MockServerLogger();
-        NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration(), MOCK_SERVER_LOGGER);
+        NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(configuration(), MOCK_SERVER_LOGGER, false);
         nettySslContextFactory.withClientSslContextBuilderFunction(
             sslContextBuilder -> {
                 try {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/tls/inbound/ClientAuthenticationAdditionalCertificateChainMockingIntegrationTest.java
Patch:
@@ -135,7 +135,8 @@ public void shouldReturnResponseInHttpsApacheClient() throws Exception {
     }
 
     private SSLContext getSslContext() {
-        KeyAndCertificateFactory keyAndCertificateFactory = KeyAndCertificateFactoryFactory.createKeyAndCertificateFactory(configuration(), new MockServerLogger());
+        KeyAndCertificateFactory keyAndCertificateFactory
+            = KeyAndCertificateFactoryFactory.createKeyAndCertificateFactory(configuration(), new MockServerLogger());
         assertThat(keyAndCertificateFactory, notNullValue());
         keyAndCertificateFactory.buildAndSavePrivateKeyAndX509Certificate();
         return new KeyStoreFactory(configuration(), new MockServerLogger())

File: mockserver-proxy-war/src/main/java/org/mockserver/proxyservlet/ProxyServlet.java
Patch:
@@ -66,7 +66,7 @@ public ProxyServlet() {
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
         this.workerGroup = new NioEventLoopGroup(configuration.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
-        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger));
+        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger, true));
     }
 
     @Override

File: mockserver-war/src/main/java/org/mockserver/mockservlet/MockServerServlet.java
Patch:
@@ -66,7 +66,7 @@ public MockServerServlet() {
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
         this.workerGroup = new NioEventLoopGroup(configuration.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
-        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger));
+        this.actionHandler = new HttpActionHandler(configuration(), workerGroup, httpStateHandler, null, new NettySslContextFactory(this.configuration, this.mockServerLogger, true));
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/collections/NottableStringHashMap.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.matchers.MatchDifference;
 import org.mockserver.matchers.RegexStringMatcher;
 import org.mockserver.model.KeyAndValue;
 import org.mockserver.model.NottableString;
@@ -37,8 +38,8 @@ public NottableStringHashMap(MockServerLogger mockServerLogger, boolean controlP
         }
     }
 
-    public boolean containsAll(NottableStringHashMap subset) {
-        return containsSubset(regexStringMatcher, subset.entryList(), entryList());
+    public boolean containsAll(MockServerLogger mockServerLogger, MatchDifference context, NottableStringHashMap subset) {
+        return containsSubset(mockServerLogger, context, regexStringMatcher, subset.entryList(), entryList());
     }
 
     public boolean allKeysNotted() {

File: mockserver-core/src/main/java/org/mockserver/collections/NottableStringMultiMap.java
Patch:
@@ -49,7 +49,7 @@ public KeyMatchStyle getKeyMatchStyle() {
     public boolean containsAll(MockServerLogger mockServerLogger, MatchDifference context, NottableStringMultiMap subset) {
         switch (subset.keyMatchStyle) {
             case SUB_SET: {
-                boolean isSubset = containsSubset(regexStringMatcher, subset.entryList(), entryList());
+                boolean isSubset = containsSubset(mockServerLogger, context, regexStringMatcher, subset.entryList(), entryList());
                 if (!isSubset && context != null) {
                     context.addDifference(mockServerLogger, "multimap subset match failed subset:{}was not a subset of:{}", subset.entryList(), entryList());
                 }

File: mockserver-core/src/main/java/org/mockserver/matchers/HashMapMatcher.java
Patch:
@@ -44,7 +44,7 @@ public boolean matches(final MatchDifference context, KeysAndValues<? extends Ke
             }
             result = allKeysNotted || allKeysOptional;
         } else {
-            result = new NottableStringHashMap(mockServerLogger, controlPlaneMatcher, matched.getEntries()).containsAll(matcher);
+            result = new NottableStringHashMap(mockServerLogger, controlPlaneMatcher, matched.getEntries()).containsAll(mockServerLogger, context, matcher);
         }
 
         if (!result && context != null) {

File: mockserver-core/src/test/java/org/mockserver/collections/nottablestring/hashmap/NottableStringHashMapContainAllTest.java
Patch:
@@ -1391,22 +1391,22 @@ void shouldPassScenarios(boolean bothDirectionsSubSet, boolean controlPlane, Tes
 
     private void bidirectionMatch(boolean bothDirections, TestScenario testScenario, NottableStringHashMap matcher, NottableStringHashMap matched, boolean result, boolean controlPlane) {
         try {
-            assertThat(matched.containsAll(matcher), is(result));
+            assertThat(matched.containsAll(null, null, matcher), is(result));
         } catch (Throwable throwable) {
             System.out.println("expected " + (controlPlane ? "control plane " : "") + "matcher: " + doubleArrayToString(testScenario.matcher) + " to " + (result ? "match" : "not match") + " matched: " + doubleArrayToString(testScenario.matched));
             throw throwable;
         }
         if (bothDirections) {
             try {
-                assertThat(matcher.containsAll(matched), is(result));
+                assertThat(matcher.containsAll(null, null, matched), is(result));
             } catch (Throwable throwable) {
                 System.out.println("expected reverse direction " + (controlPlane ? "control plane " : "") + "matcher: " + doubleArrayToString(testScenario.matched) + " to " + (result ? "match" : "not match") + " matched: " + doubleArrayToString(testScenario.matcher));
                 throw throwable;
             }
         } else if (result) {
             // only do not match in reverse for single directory when matches in non-reverse
             try {
-                assertThat(matcher.containsAll(matched), is(false));
+                assertThat(matcher.containsAll(null, null, matched), is(false));
             } catch (Throwable throwable) {
                 System.out.println("expected reverse direction " + (controlPlane ? "control plane " : "") + "matcher: " + doubleArrayToString(testScenario.matched) + " to not match matched: " + doubleArrayToString(testScenario.matcher));
                 throw throwable;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationInitializerIntegrationTest.java
Patch:
@@ -142,7 +142,7 @@ public void shouldLoadOpenAPIExpectationsFromJson() throws Exception {
                     request()
                         .withMethod("GET")
                         .withHeader(HOST.toString(), "localhost:" + mockServer.getLocalPort())
-                        .withPath("/pets")
+                        .withPath("/v1/pets")
                 ).get(10, TimeUnit.SECONDS).getBodyAsString(),
                 is("{" + NEW_LINE +
                     "  \"code\" : 0," + NEW_LINE +

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -928,7 +928,7 @@ public MockServerClient verify(ExpectationId... expectationIds) throws Assertion
      */
     public MockServerClient verify(Integer maximumNumberOfRequestToReturnInVerificationFailure, ExpectationId... expectationIds) throws AssertionError {
         if (expectationIds == null || expectationIds.length == 0 || expectationIds[0] == null) {
-            throw new IllegalArgumentException("verify(RequestDefinition...) requires a non-null non-empty array of RequestDefinition objects");
+            throw new IllegalArgumentException("verify(ExpectationId...) requires a non-null non-empty array of ExpectationId objects");
         }
 
         try {
@@ -1110,10 +1110,10 @@ public MockServerClient verify(ExpectationId expectationId, VerificationTimes ti
     @SuppressWarnings("DuplicatedCode")
     public MockServerClient verify(ExpectationId expectationId, VerificationTimes times, Integer maximumNumberOfRequestToReturnInVerificationFailure) throws AssertionError {
         if (expectationId == null) {
-            throw new IllegalArgumentException("verify(RequestDefinition, VerificationTimes) requires a non null RequestDefinition object");
+            throw new IllegalArgumentException("verify(ExpectationId, VerificationTimes) requires a non null ExpectationId object");
         }
         if (times == null) {
-            throw new IllegalArgumentException("verify(RequestDefinition, VerificationTimes) requires a non null VerificationTimes object");
+            throw new IllegalArgumentException("verify(ExpectationId, VerificationTimes) requires a non null VerificationTimes object");
         }
 
         try {

File: mockserver-core/src/main/java/org/mockserver/matchers/MatchDifference.java
Patch:
@@ -51,7 +51,7 @@ public MatchDifference(boolean detailedMatchFailures, RequestDefinition httpRequ
 
     @SuppressWarnings("UnusedReturnValue")
     public MatchDifference addDifference(MockServerLogger mockServerLogger, Throwable throwable, String messageFormat, Object... arguments) {
-        if (MockServerLogger.isEnabled(TRACE)) {
+        if (mockServerLogger != null && MockServerLogger.isEnabled(TRACE)) {
             mockServerLogger.logEvent(
                 new LogEntry()
                     .setLogLevel(TRACE)

File: mockserver-core/src/main/java/org/mockserver/matchers/MultiValueMapMatcher.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.mockserver.collections.NottableStringMultiMap;
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.model.KeyMatchStyle;
 import org.mockserver.model.KeyToMultiValue;
 import org.mockserver.model.KeysToMultiValues;
 
@@ -46,11 +47,11 @@ public boolean matches(final MatchDifference context, KeysToMultiValues<? extend
             }
             result = allKeysNotted || allKeysOptional;
         } else {
-            result = new NottableStringMultiMap(mockServerLogger, controlPlaneMatcher, matched.getKeyMatchStyle(), matched.getEntries()).containsAll(matcher);
+            result = new NottableStringMultiMap(mockServerLogger, controlPlaneMatcher, matched.getKeyMatchStyle(), matched.getEntries()).containsAll(mockServerLogger, context, matcher);
         }
 
         if (!result && context != null) {
-            context.addDifference(mockServerLogger, "multimap subset match failed expected:{}found:{}failed because:{}", keysToMultiValues, matched != null ? matched : "none", matched != null ? "multimap is not a subset" : "none is not a subset");
+            context.addDifference(mockServerLogger, "multimap match failed expected:{}found:{}failed because:{}", keysToMultiValues, matched != null ? matched : "none", matched != null ? (matcher.getKeyMatchStyle() == KeyMatchStyle.SUB_SET ? "multimap is not a subset" : "multimap values don't match") : "none is not a subset");
         }
 
         return not != result;

File: mockserver-core/src/test/java/org/mockserver/collections/nottablestring/multimap/NottableStringMultiMapContainAllTest.java
Patch:
@@ -2338,22 +2338,22 @@ void shouldPassScenarios(boolean bothDirectionsSubSet, boolean bothDirectionsMat
 
     private void bidirectionMatch(boolean bothDirections, TestScenario testScenario, NottableStringMultiMap matcher, NottableStringMultiMap matched, boolean result, KeyMatchStyle keyMatchStyle, boolean controlPlane) {
         try {
-            assertThat(matched.containsAll(matcher), is(result));
+            assertThat(matched.containsAll(null, null, matcher), is(result));
         } catch (Throwable throwable) {
             System.out.println("expected " + (controlPlane ? "control plane " : "") + keyMatchStyle + " matcher: " + doubleArrayToString(testScenario.matcher) + " to " + (result ? "match" : "not match") + " matched: " + doubleArrayToString(testScenario.matched));
             throw throwable;
         }
         if (bothDirections) {
             try {
-                assertThat(matcher.containsAll(matched), is(result));
+                assertThat(matcher.containsAll(null, null, matched), is(result));
             } catch (Throwable throwable) {
                 System.out.println("expected reverse direction " + (controlPlane ? "control plane " : "") + keyMatchStyle + " matcher: " + doubleArrayToString(testScenario.matched) + " to " + (result ? "match" : "not match") + " matched: " + doubleArrayToString(testScenario.matcher));
                 throw throwable;
             }
         } else if (result) {
             // only do not match in reverse for single directory when matches in non-reverse
             try {
-                assertThat(matcher.containsAll(matched), is(false));
+                assertThat(matcher.containsAll(null, null, matched), is(false));
             } catch (Throwable throwable) {
                 System.out.println("expected reverse direction " + (controlPlane ? "control plane " : "") + keyMatchStyle + " matcher: " + doubleArrayToString(testScenario.matched) + " to not match matched: " + doubleArrayToString(testScenario.matcher));
                 throw throwable;

File: mockserver-core/src/test/java/org/mockserver/model/NottableSchemaStringMatchesTest.java
Patch:
@@ -165,9 +165,9 @@ public void shouldMatchStringByHostnamePattern() {
         NottableSchemaString string = schemaString(schema);
         NottableSchemaString notString = schemaString("!" + schema);
         assertThat(string.matches("mock-server.com"), is(true));
-        assertThat(string.matches("12345"), is(false));
+        assertThat(string.matches("%@12345"), is(false));
         assertThat(notString.matches("mock-server.com"), is(false));
-        assertThat(notString.matches("12345"), is(true));
+        assertThat(notString.matches("12$^345"), is(true));
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -93,6 +93,7 @@ public MockServerLogger setHttpStateHandler(HttpState httpStateHandler) {
     public void logEvent(LogEntry logEntry) {
         if (logEntry.getType() == RECEIVED_REQUEST
             || logEntry.getType() == FORWARDED_REQUEST
+            || logEntry.getType() == EXPECTATION_RESPONSE
             || logEntry.isAlwaysLog()
             || isEnabled(logEntry.getLogLevel())) {
             if (httpStateHandler != null) {

File: mockserver-core/src/main/java/org/mockserver/mock/HttpState.java
Patch:
@@ -555,6 +555,7 @@ public Future<String> verify(Verification verification) {
 
     public void verify(Verification verification, Consumer<String> resultConsumer) {
         if (verification.getExpectationId() != null) {
+            // check valid expectation id and populate for error message
             verification.withRequest(resolveExpectationId(verification.getExpectationId()));
         }
         mockServerLog.verify(verification, resultConsumer);

File: mockserver-core/src/main/java/org/mockserver/closurecallback/websocketregistry/LocalCallbackRegistry.java
Patch:
@@ -45,6 +45,7 @@ public static Map<String, ExpectationForwardAndResponseCallback> forwardAndRespo
     }
 
     public static void registerCallback(String clientId, ExpectationCallback<?> expectationCallback) {
+        // if not added to local registry then web socket will be used
         if (enabled && expectationCallback != null) {
             if (expectationCallback instanceof ExpectationResponseCallback) {
                 responseCallbackRegistry().put(clientId, (ExpectationResponseCallback) expectationCallback);

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExtendedShadedJarMockingIntegrationTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.netty.integration.ShadedJarRunner;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
@@ -16,7 +17,7 @@ public class ExtendedShadedJarMockingIntegrationTest extends AbstractBasicMockin
     private static final int mockServerPort = PortFactory.findFreePort();
 
     @BeforeClass
-    public static void startServerUsingShadedJar() throws Exception {
+    public static void startServerUsingShadedJar() {
         mockServerClient = ShadedJarRunner.startServerUsingShadedJar(mockServerPort);
     }
 

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockserver.server.initialize.ExpectationInitializerExample;
 import org.mockserver.socket.tls.ForwardProxyTLSX509CertificatesTrustManager;
@@ -198,6 +199,7 @@ public void shouldSetAndGetMetricsEnabled() {
     }
 
     @Test
+    @Ignore
     public void shouldSetAndGetMaxExpectations() {
         int original = ConfigurationProperties.maxExpectations();
         try {
@@ -223,6 +225,7 @@ public void shouldSetAndGetMaxExpectations() {
     }
 
     @Test
+    @Ignore
     public void shouldSetAndGetMaxLogEntries() {
         int original = ConfigurationProperties.maxLogEntries();
         try {

File: mockserver-core/src/main/java/org/mockserver/mock/listeners/MockServerMatcherNotifier.java
Patch:
@@ -48,7 +48,6 @@ public Cause(String source, Type type) {
         public static final Cause API = new Cause("", Type.API);
 
         public enum Type {
-            FILE_WATCHER,
             FILE_INITIALISER,
             CLASS_INITIALISER,
             API

File: mockserver-core/src/test/java/org/mockserver/persistence/ExpectationFileSystemPersistenceTest.java
Patch:
@@ -524,7 +524,7 @@ public void shouldPersistExpectationsToJsonOnUpdateAllFromFileWatcher() throws E
                     response()
                         .withBody("some fourth response")
                 )
-            }, new MockServerMatcherNotifier.Cause(persistedExpectations.getAbsolutePath(), MockServerMatcherNotifier.Cause.Type.FILE_WATCHER));
+            }, new MockServerMatcherNotifier.Cause(persistedExpectations.getAbsolutePath(), MockServerMatcherNotifier.Cause.Type.FILE_INITIALISER));
             MILLISECONDS.sleep(1500);
 
             // then

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationTest.java
Patch:
@@ -443,7 +443,7 @@ public void shouldSetAndGetMaxFutureTimeoutInMillis() {
         long original = ConfigurationProperties.maxFutureTimeout();
         try {
             // then - default value
-            assertThat(configuration.maxFutureTimeoutInMillis(), equalTo(60000L));
+            assertThat(configuration.maxFutureTimeoutInMillis(), equalTo(90000L));
 
             // when - system property setter
             ConfigurationProperties.maxFutureTimeout(10L);

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidator.java
Patch:
@@ -33,7 +33,8 @@ private JsonSchemaExpectationValidator(MockServerLogger mockServerLogger) {
             "connectionOptions",
             "keyToMultiValue",
             "keyToValue",
-            "socketAddress"
+            "socketAddress",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestAndHttpResponseValidator.java
Patch:
@@ -25,7 +25,8 @@ private JsonSchemaHttpRequestAndHttpResponseValidator(MockServerLogger mockServe
             "httpResponse",
             "bodyWithContentType",
             "delay",
-            "connectionOptions"
+            "connectionOptions",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestValidator.java
Patch:
@@ -18,7 +18,8 @@ private JsonSchemaHttpRequestValidator(MockServerLogger mockServerLogger) {
             "body",
             "keyToMultiValue",
             "keyToValue",
-            "socketAddress"
+            "socketAddress",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpResponseValidator.java
Patch:
@@ -19,7 +19,8 @@ private JsonSchemaHttpResponseValidator(MockServerLogger mockServerLogger) {
             "delay",
             "connectionOptions",
             "keyToMultiValue",
-            "keyToValue"
+            "keyToValue",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaRequestDefinitionValidator.java
Patch:
@@ -21,7 +21,8 @@ private JsonSchemaRequestDefinitionValidator(MockServerLogger mockServerLogger)
             "keyToMultiValue",
             "keyToValue",
             "socketAddress",
-            "openAPIDefinition"
+            "openAPIDefinition",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidator.java
Patch:
@@ -22,7 +22,8 @@ private JsonSchemaVerificationSequenceValidator(MockServerLogger mockServerLogge
             "body",
             "keyToMultiValue",
             "keyToValue",
-            "socketAddress"
+            "socketAddress",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidator.java
Patch:
@@ -23,7 +23,8 @@ private JsonSchemaVerificationValidator(MockServerLogger mockServerLogger) {
             "keyToMultiValue",
             "keyToValue",
             "verificationTimes",
-            "socketAddress"
+            "socketAddress",
+            "draft-07"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/authentication/jwt/JWKGenerator.java
Patch:
@@ -16,7 +16,7 @@
 
 public class JWKGenerator {
 
-    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     public String generateJWK(AsymmetricKeyPair asymmetricKeyPair) {
         try {

File: mockserver-core/src/main/java/org/mockserver/authentication/jwt/JWTGenerator.java
Patch:
@@ -18,7 +18,7 @@
 
 public class JWTGenerator {
 
-    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     private final JWKGenerator jwkGenerator;
     private final AsymmetricKeyPair asymmetricKeyPair;

File: mockserver-core/src/main/java/org/mockserver/authentication/mtls/MTLSAuthenticationHandler.java
Patch:
@@ -76,7 +76,7 @@ public boolean controlPlaneRequestAuthenticated(HttpRequest request) {
 
     private String getClientCertificateInformation(String serialNumber, String issuerDistinguishedName, String subjectDistinguishedName) {
         try {
-            return ObjectMapperFactory.createObjectMapper(true).writeValueAsString(ImmutableMap.of(
+            return ObjectMapperFactory.createObjectMapper(true, false).writeValueAsString(ImmutableMap.of(
                 "serialNumber", serialNumber,
                 "issuerDistinguishedName", issuerDistinguishedName,
                 "subjectDistinguishedName", subjectDistinguishedName

File: mockserver-core/src/main/java/org/mockserver/log/model/LogEntry.java
Patch:
@@ -522,7 +522,7 @@ public int hashCode() {
     public String toString() {
         try {
             return ObjectMapperFactory
-                .createObjectMapper(true)
+                .createObjectMapper(true, false)
                 .writeValueAsString(this);
         } catch (Exception e) {
             return super.toString();

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestPropertiesMatcher.java
Patch:
@@ -40,7 +40,7 @@ public class HttpRequestPropertiesMatcher extends AbstractHttpRequestMatcher {
     private static final String EXPECTATION_REQUEST_NOT_OPERATOR_IS_ENABLED = COMMA + NEW_LINE + "expectation's request 'not' operator is enabled";
     private static final String EXPECTATION_REQUEST_MATCHER_NOT_OPERATOR_IS_ENABLED = COMMA + NEW_LINE + "expectation's request matcher 'not' operator is enabled";
     private static final PathParametersDecoder pathParametersParser = new PathParametersDecoder();
-    private static final ObjectWriter TO_STRING_OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true);
+    private static final ObjectWriter TO_STRING_OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true, false);
     private final ExpandedParameterDecoder expandedParameterDecoder;
     private int hashCode;
     private HttpRequest httpRequest;

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestsPropertiesMatcher.java
Patch:
@@ -42,7 +42,7 @@
 
 public class HttpRequestsPropertiesMatcher extends AbstractHttpRequestMatcher {
 
-    private static final ObjectWriter TO_STRING_OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true);
+    private static final ObjectWriter TO_STRING_OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true, false);
     private int hashCode;
     private OpenAPIDefinition openAPIDefinition;
     private List<HttpRequestPropertiesMatcher> httpRequestPropertiesMatchers;

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonStringMatcher.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class JsonStringMatcher extends BodyMatcher<String> {
     private static final String[] EXCLUDED_FIELDS = {"mockServerLogger"};
-    private static final ObjectWriter PRETTY_PRINTER = ObjectMapperFactory.createObjectMapper(true);
+    private static final ObjectWriter PRETTY_PRINTER = ObjectMapperFactory.createObjectMapper(true, false);
     private final MockServerLogger mockServerLogger;
     private final String matcher;
     private JsonNode matcherJsonNode;

File: mockserver-core/src/main/java/org/mockserver/model/ObjectWithJsonToString.java
Patch:
@@ -13,7 +13,7 @@ public abstract class ObjectWithJsonToString extends ObjectWithReflectiveEqualsH
     public String toString() {
         try {
             String valueAsString = ObjectMapperFactory
-                .createObjectMapper(true)
+                .createObjectMapper(true, false)
                 .writeValueAsString(this);
             if (valueAsString.startsWith(ESCAPED_QUOTE) && valueAsString.endsWith(ESCAPED_QUOTE)) {
                 valueAsString = valueAsString.substring(1, valueAsString.length() - 1);

File: mockserver-core/src/main/java/org/mockserver/persistence/ExpectationFileSystemPersistence.java
Patch:
@@ -43,7 +43,7 @@ public ExpectationFileSystemPersistence(Configuration configuration, MockServerL
         if (configuration.persistExpectations()) {
             this.mockServerLogger = mockServerLogger;
             this.requestMatchers = requestMatchers;
-            this.objectWriter = createObjectMapper(true, new TimeToLiveSerializer());
+            this.objectWriter = createObjectMapper(true, false, new TimeToLiveSerializer());
             this.filePath = Paths.get(configuration.persistedExpectationsPath());
             try {
                 Files.createFile(filePath);

File: mockserver-core/src/main/java/org/mockserver/serialization/ExpectationIdSerializer.java
Patch:
@@ -27,7 +27,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class ExpectationIdSerializer implements Serializer<ExpectationId> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();
     private JsonSchemaExpectationIdValidator expectationIdValidator;

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpRequestAndHttpResponseSerializer.java
Patch:
@@ -28,7 +28,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class HttpRequestAndHttpResponseSerializer implements Serializer<HttpRequestAndHttpResponse> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();
     private JsonSchemaHttpRequestAndHttpResponseValidator jsonSchemaHttpRequestAndHttpResponseValidator;

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpRequestSerializer.java
Patch:
@@ -10,7 +10,6 @@
 import org.mockserver.model.HttpRequest;
 import org.mockserver.serialization.model.HttpRequestDTO;
 import org.mockserver.serialization.model.HttpRequestPrettyPrintedDTO;
-import org.mockserver.templates.engine.model.HttpRequestTemplateObject;
 import org.mockserver.validator.jsonschema.JsonSchemaHttpRequestValidator;
 import org.slf4j.event.Level;
 
@@ -30,7 +29,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class HttpRequestSerializer implements Serializer<HttpRequest> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();
     private JsonSchemaHttpRequestValidator httpRequestValidator;

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpResponseSerializer.java
Patch:
@@ -28,7 +28,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class HttpResponseSerializer implements Serializer<HttpResponse> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();
     private JsonSchemaHttpResponseValidator httpResponseValidator;

File: mockserver-core/src/main/java/org/mockserver/serialization/OpenAPIExpectationSerializer.java
Patch:
@@ -29,7 +29,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class OpenAPIExpectationSerializer implements Serializer<OpenAPIExpectation> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();
     private JsonSchemaOpenAPIExpectationValidator expectationValidator;

File: mockserver-core/src/main/java/org/mockserver/serialization/PortBindingSerializer.java
Patch:
@@ -13,7 +13,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class PortBindingSerializer implements Serializer<PortBinding> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
 
     public PortBindingSerializer(MockServerLogger mockServerLogger) {

File: mockserver-core/src/main/java/org/mockserver/serialization/RequestDefinitionSerializer.java
Patch:
@@ -14,7 +14,6 @@
 import org.mockserver.serialization.model.HttpRequestPrettyPrintedDTO;
 import org.mockserver.serialization.model.OpenAPIDefinitionDTO;
 import org.mockserver.serialization.model.RequestDefinitionDTO;
-import org.mockserver.templates.engine.model.HttpRequestTemplateObject;
 import org.mockserver.validator.jsonschema.JsonSchemaRequestDefinitionValidator;
 import org.slf4j.event.Level;
 
@@ -34,7 +33,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class RequestDefinitionSerializer implements Serializer<RequestDefinition> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonArraySerializer jsonArraySerializer = new JsonArraySerializer();
     private JsonSchemaRequestDefinitionValidator requestDefinitionValidator;

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSequenceSerializer.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class VerificationSequenceSerializer implements Serializer<VerificationSequence> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonSchemaVerificationSequenceValidator verificationSequenceValidator;
 

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSerializer.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings("FieldMayBeFinal")
 public class VerificationSerializer implements Serializer<Verification> {
     private final MockServerLogger mockServerLogger;
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private JsonSchemaVerificationValidator verificationValidator;
 

File: mockserver-core/src/main/java/org/mockserver/serialization/WebSocketMessageSerializer.java
Patch:
@@ -19,7 +19,7 @@
 @SuppressWarnings({"rawtypes", "unchecked", "FieldMayBeFinal"})
 public class WebSocketMessageSerializer {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private Map<Class, Serializer> serializers;
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -127,7 +127,7 @@ private String addReferencesIntoSchema(String routePath, String mainSchemeFile,
                 }
             }
             combinedSchema = ObjectMapperFactory
-                .createObjectMapper(true)
+                .createObjectMapper(true, false)
                 .writeValueAsString(jsonSchema);
         } catch (Throwable throwable) {
             mockServerLogger.logEvent(

File: mockserver-core/src/test/java/org/mockserver/mock/HttpStateTest.java
Patch:
@@ -75,6 +75,7 @@ public class HttpStateTest {
     private final RequestDefinitionSerializer requestDefinitionSerializer = new RequestDefinitionSerializer(new MockServerLogger());
     private final ExpectationIdSerializer expectationIdSerializer = new ExpectationIdSerializer(new MockServerLogger());
     private final ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
+    private final ExpectationSerializer expectationSerializerWithDefaultFields = new ExpectationSerializer(new MockServerLogger(), true);
     private final OpenAPIExpectationSerializer openAPIExpectationSerializer = new OpenAPIExpectationSerializer(new MockServerLogger());
     private final ExpectationToJavaSerializer expectationToJavaSerializer = new ExpectationToJavaSerializer();
     private final PortBindingSerializer portBindingSerializer = new PortBindingSerializer(new MockServerLogger());
@@ -237,7 +238,7 @@ public void shouldHandleRetrieveRecordedExpectationsRequest() {
         // then
         assertThat(handle, is(true));
         assertThat(responseWriter.response.getStatusCode(), is(200));
-        assertThat(responseWriter.response.getBodyAsString(), is(expectationSerializer.serialize(Collections.singletonList(
+        assertThat(responseWriter.response.getBodyAsString(), is(expectationSerializerWithDefaultFields.serialize(Collections.singletonList(
             new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited(), 0).withId("key_one").thenRespond(response("response_one"))
         ))));
     }
@@ -1684,7 +1685,7 @@ public void shouldRetrieveRecordedExpectationsAsJson() {
 
         // then
         assertThat(response,
-            is(response().withBody(expectationSerializer.serialize(Arrays.asList(
+            is(response().withBody(expectationSerializerWithDefaultFields.serialize(Arrays.asList(
                 new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited(), 0).withId("key_one").thenRespond(response("response_one")),
                 new Expectation(request("request_two"), Times.once(), TimeToLive.unlimited(), 0).withId("key_two").thenRespond(response("response_two"))
             )), MediaType.JSON_UTF_8).withStatusCode(200))

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/collections/CookiesDeserializerTest.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class CookiesDeserializerTest {
 
-    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private final ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/collections/HeadersDeserializerTest.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class HeadersDeserializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/collections/ParametersDeserializerTest.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ParametersDeserializerTest {
 
-    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private final ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/collections/CookiesSerializerTest.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class CookiesSerializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldSerializeCompleteObject() throws IOException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/collections/HeadersSerializerTest.java
Patch:
@@ -20,7 +20,7 @@
  */
 public class HeadersSerializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldSerializeCompleteObject() throws IOException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/collections/ParametersSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class ParametersSerializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldSerializeCompleteObject() throws IOException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/expectation/OpenAPIExpectationDTOSerializerTest.java
Patch:
@@ -16,7 +16,7 @@
 
 public class OpenAPIExpectationDTOSerializerTest {
 
-    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldReturnJsonWithNoFieldsSet() throws JsonProcessingException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/expectation/OpenAPIExpectationSerializerTest.java
Patch:
@@ -16,7 +16,7 @@
 
 public class OpenAPIExpectationSerializerTest {
 
-    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldReturnJsonWithNoFieldsSet() throws JsonProcessingException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/HttpRequestDTOSerializerTest.java
Patch:
@@ -26,7 +26,7 @@
 
 public class HttpRequestDTOSerializerTest {
 
-    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldReturnJsonWithNoFieldsSet() throws JsonProcessingException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/OpenAPIDefinitionDTOSerializerTest.java
Patch:
@@ -15,7 +15,7 @@
 
 public class OpenAPIDefinitionDTOSerializerTest {
 
-    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldReturnJsonWithNoFieldsSet() throws JsonProcessingException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/OpenAPIDefinitionSerializerTest.java
Patch:
@@ -14,7 +14,7 @@
 
 public class OpenAPIDefinitionSerializerTest {
 
-    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectMapper = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldReturnJsonWithNoFieldsSet() throws JsonProcessingException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/TimeToLiveDTOSerializerTest.java
Patch:
@@ -15,7 +15,7 @@
 
 public class TimeToLiveDTOSerializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
     private ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/TimeToLiveSerializerTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class TimeToLiveSerializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldSerializeUnlimitedTimeToLive() throws JsonProcessingException {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/TimesSerializerTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class TimesSerializerTest {
 
-    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
+    private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true, false);
 
     @Test
     public void shouldSerializeOnceTimes() throws JsonProcessingException {

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/servicebackend/BookServer.java
Patch:
@@ -34,7 +34,7 @@ public class BookServer {
 
     private static ServerBootstrap serverBootstrap;
     private final Map<String, Book> booksDB = createBookData();
-    private final ObjectWriter objectWriter = org.mockserver.serialization.ObjectMapperFactory.createObjectMapper(true);
+    private final ObjectWriter objectWriter = org.mockserver.serialization.ObjectMapperFactory.createObjectMapper(true, false);
     private final int httpPort;
     private final boolean secure;
     private final NettySslContextFactory nettySslContextFactory;

File: mockserver-netty/src/test/java/org/mockserver/dashboard/serializers/DashboardLogEntryDTOGroupSerializerTest.java
Patch:
@@ -21,7 +21,7 @@
 public class DashboardLogEntryDTOGroupSerializerTest {
 
     final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true,
-        new DashboardLogEntryDTOSerializer(),
+            false, new DashboardLogEntryDTOSerializer(),
         new DashboardLogEntryDTOGroupSerializer(),
         new DescriptionSerializer(),
         new ThrowableSerializer()

File: mockserver-netty/src/test/java/org/mockserver/dashboard/serializers/DashboardLogEntryDTOSerializerTest.java
Patch:
@@ -28,7 +28,7 @@
 public class DashboardLogEntryDTOSerializerTest {
 
     final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true,
-        new DashboardLogEntryDTOSerializer(),
+            false, new DashboardLogEntryDTOSerializer(),
         new DashboardLogEntryDTOGroupSerializer(),
         new DescriptionSerializer(),
         new ThrowableSerializer()

File: mockserver-netty/src/test/java/org/mockserver/dashboard/serializers/DescriptionProcessorTest.java
Patch:
@@ -23,7 +23,7 @@
 public class DescriptionProcessorTest {
 
     final ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true,
-        new DashboardLogEntryDTOSerializer(),
+            false, new DashboardLogEntryDTOSerializer(),
         new DescriptionSerializer(),
         new ThrowableSerializer()
     );

File: mockserver-netty/src/test/java/org/mockserver/netty/HttpRequestHandlerTest.java
Patch:
@@ -69,6 +69,7 @@ public class HttpRequestHandlerTest {
     private HttpRequestHandler mockServerHandler;
     private final HttpRequestSerializer httpRequestSerializer = new HttpRequestSerializer(new MockServerLogger());
     private final ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
+    private final ExpectationSerializer expectationSerializerWithDefaultFields = new ExpectationSerializer(new MockServerLogger(), true);
     private final PortBindingSerializer portBindingSerializer = new PortBindingSerializer(new MockServerLogger());
 
     @BeforeClass
@@ -247,7 +248,7 @@ public void shouldRetrieveRecordedExpectations() {
         // then
         HttpResponse httpResponse = embeddedChannel.readOutbound();
         assertThat(httpResponse.getStatusCode(), is(200));
-        assertThat(httpResponse.getBodyAsString(), is(expectationSerializer.serialize(Collections.singletonList(
+        assertThat(httpResponse.getBodyAsString(), is(expectationSerializerWithDefaultFields.serialize(Collections.singletonList(
             new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited(), 0).withId("key_one").thenRespond(response("response_one"))
         ))));
     }

File: mockserver-proxy-war/src/test/java/org/mockserver/proxyservlet/ProxyServletTest.java
Patch:
@@ -52,6 +52,7 @@ public class ProxyServletTest {
 
     private final HttpRequestSerializer httpRequestSerializer = new HttpRequestSerializer(new MockServerLogger());
     private final ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
+    private final ExpectationSerializer expectationSerializerWithDefaultFields = new ExpectationSerializer(new MockServerLogger(), true);
     private final PortBindingSerializer portBindingSerializer = new PortBindingSerializer(new MockServerLogger());
 
     private HttpState httpStateHandler;
@@ -238,7 +239,7 @@ public void shouldRetrieveRecordedExpectations() {
         proxyServlet.service(expectationRetrieveExpectationsRequest, response);
 
         // then
-        assertResponse(response, 200, expectationSerializer.serialize(Collections.singletonList(
+        assertResponse(response, 200, expectationSerializerWithDefaultFields.serialize(Collections.singletonList(
             new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited(), 0).withId("key_one").thenRespond(response("response_one"))
         )));
     }

File: mockserver-war/src/test/java/org/mockserver/mockservlet/MockServerServletTest.java
Patch:
@@ -50,6 +50,7 @@ public class MockServerServletTest {
 
     private final HttpRequestSerializer httpRequestSerializer = new HttpRequestSerializer(new MockServerLogger());
     private final ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
+    private final ExpectationSerializer expectationSerializerWithDefaultFields = new ExpectationSerializer(new MockServerLogger(), true);
     private final PortBindingSerializer portBindingSerializer = new PortBindingSerializer(new MockServerLogger());
 
     private HttpState httpStateHandler;
@@ -251,7 +252,7 @@ public void shouldRetrieveRecordedExpectations() {
         mockServerServlet.service(expectationRetrieveExpectationsRequest, response);
 
         // then
-        assertResponse(response, 200, expectationSerializer.serialize(Collections.singletonList(
+        assertResponse(response, 200, expectationSerializerWithDefaultFields.serialize(Collections.singletonList(
             new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited(), 0).withId("key_one").thenRespond(response("response_one"))
         )));
     }

File: mockserver-core/src/main/java/org/mockserver/configuration/Configuration.java
Patch:
@@ -156,6 +156,7 @@ public Level logLevel() {
      */
     public Configuration logLevel(Level level) {
         this.logLevel = level;
+        ConfigurationProperties.logLevel(this.logLevel.name());
         return this;
     }
 
@@ -166,6 +167,7 @@ public Configuration logLevel(Level level) {
      */
     public Configuration logLevel(String level) {
         this.logLevel = Level.valueOf(level);
+        ConfigurationProperties.logLevel(this.logLevel.name());
         return this;
     }
 

File: mockserver-examples/src/main/java/org/mockserver/examples/mockserver/CallbackActionExamples.java
Patch:
@@ -233,10 +233,9 @@ public HttpRequest handle(HttpRequest httpRequest) throws Exception {
                 },
                 new ExpectationForwardAndResponseCallback() {
                     @Override
-                    public HttpResponse handle(HttpRequest httpRequest, HttpResponse httpResponse) throws Exception {
+                    public HttpResponse handle(HttpRequest httpRequest, HttpResponse httpResponse) {
                         return httpResponse
                             .withHeader("x-response-test", "x-response-test")
-                            .removeHeader(CONTENT_LENGTH.toString())
                             .withBody("some_overridden_response_body");
                     }
                 }
@@ -263,7 +262,6 @@ public void forwardObjectCallbackWithResponseOverride() {
                 (httpRequest, httpResponse) ->
                     httpResponse
                         .withHeader("x-response-test", "x-response-test")
-                        .removeHeader(CONTENT_LENGTH.toString())
                         .withBody("some_overridden_response_body")
             );
     }

File: mockserver-core/src/main/java/org/mockserver/httpclient/HttpClientInitializer.java
Patch:
@@ -86,7 +86,7 @@ public void initChannel(SocketChannel channel) {
 
             pipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));
 
-            pipeline.addLast(new MockServerHttpClientCodec(mockServerLogger));
+            pipeline.addLast(new MockServerHttpClientCodec(mockServerLogger, proxyConfigurations));
         } else {
             pipeline.addLast(new MockServerBinaryClientCodec());
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/curl/HttpRequestToCurlSerializer.java
Patch:
@@ -80,7 +80,7 @@ private boolean hasDefaultMethod(HttpRequest request) {
     }
 
     private String getUri(HttpRequest request) {
-        String uri = new MockServerHttpRequestToFullHttpRequest(mockServerLogger).getURI(request);
+        String uri = new MockServerHttpRequestToFullHttpRequest(mockServerLogger, null).getURI(request, null);
         if (isBlank(uri)) {
             uri = "/";
         } else if (!startsWith(uri, "/")) {

File: mockserver-netty/src/test/java/org/mockserver/clientandserver/ClientAndServerListenerTest.java
Patch:
@@ -1,6 +1,7 @@
-package org.mockserver.integration;
+package org.mockserver.clientandserver;
 
 import org.junit.Test;
+import org.mockserver.integration.ClientAndServer;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardWebSocketHandler.java
Patch:
@@ -263,7 +263,7 @@ private void sendMessage(ChannelOutboundInvoker ctx, RequestDefinition httpReque
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(Level.ERROR)
-                            .setMessageFormat("exception will serialising UI data " + jpe.getMessage())
+                            .setMessageFormat("exception with serialising UI data " + jpe.getMessage())
                             .setThrowable(jpe)
                     );
                 }

File: mockserver-core/src/main/java/org/mockserver/closurecallback/websocketclient/WebSocketClient.java
Patch:
@@ -91,7 +91,7 @@ protected void initChannel(SocketChannel ch) throws URISyntaxException {
                         ch.pipeline().addLast(new WebSocketClientHandler(mockServerLogger, clientId, serverAddress, contextPath, WebSocketClient.this, isSecure));
                         // add logging
                         if (MockServerLogger.isEnabled(TRACE)) {
-                            ch.pipeline().addLast(new LoggingHandler("WebSocketClient last -->"));
+                            ch.pipeline().addLast(new LoggingHandler(WebSocketClient.class.getName() + "-last"));
                         }
                     }
                 })

File: mockserver-core/src/main/java/org/mockserver/closurecallback/websocketclient/WebSocketClientHandler.java
Patch:
@@ -95,7 +95,7 @@ public void channelRead0(ChannelHandlerContext ctx, Object msg) {
                 }
                 // add extra logging
                 if (MockServerLogger.isEnabled(TRACE)) {
-                    ch.pipeline().addFirst(new LoggingHandler("WebSocketClient first -->"));
+                    ch.pipeline().addFirst(new LoggingHandler(WebSocketClient.class.getName() + "-first"));
                 }
             } else if (httpResponse.status().equals(HttpResponseStatus.NOT_IMPLEMENTED)) {
                 String message = readRequestBody(httpResponse);

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -63,7 +63,7 @@ public void initChannel(SocketChannel channel) {
         }
 
         if (MockServerLogger.isEnabled(TRACE)) {
-            pipeline.addLast(new LoggingHandler("EchoServer <-->"));
+            pipeline.addLast(new LoggingHandler(EchoServer.class.getName() + " <-->"));
         }
 
         pipeline.addLast(new HttpServerCodec());

File: mockserver-core/src/main/java/org/mockserver/httpclient/HttpClientInitializer.java
Patch:
@@ -76,7 +76,7 @@ public void initChannel(SocketChannel channel) {
 
         // add logging
         if (MockServerLogger.isEnabled(TRACE)) {
-            pipeline.addLast(new LoggingHandler("NettyHttpClient -->"));
+            pipeline.addLast(new LoggingHandler(HttpClientHandler.class.getName()));
         }
 
         if (isHttp) {

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/relay/RelayConnectHandler.java
Patch:
@@ -79,7 +79,7 @@ public void channelRead(ChannelHandlerContext mockServerCtx, Object msg) {
                                     }
 
                                     if (MockServerLogger.isEnabled(Level.TRACE)) {
-                                        pipelineToMockServer.addLast(new LoggingHandler("downstream                -->"));
+                                        pipelineToMockServer.addLast(new LoggingHandler(RelayConnectHandler.class.getName() + "-downstream -->"));
                                     }
 
                                     pipelineToMockServer.addLast(new HttpClientCodec(configuration.maxInitialLineLength(), configuration.maxHeaderSize(), configuration.maxChunkSize()));
@@ -98,7 +98,7 @@ public void channelRead(ChannelHandlerContext mockServerCtx, Object msg) {
                                     }
 
                                     if (MockServerLogger.isEnabled(Level.TRACE)) {
-                                        pipelineToProxyClient.addLast(new LoggingHandler("upstream <-- "));
+                                        pipelineToProxyClient.addLast(new LoggingHandler(RelayConnectHandler.class.getName() + "-upstream <-- "));
                                     }
 
                                     pipelineToProxyClient.addLast(new HttpServerCodec(configuration.maxInitialLineLength(), configuration.maxHeaderSize(), configuration.maxChunkSize()));

File: mockserver-core/src/main/java/org/mockserver/model/HttpClassCallback.java
Patch:
@@ -49,7 +49,8 @@ public static HttpClassCallback callback(String callbackClass) {
      *
      * @param callbackClass class to callback as a fully qualified class name, i.e. "com.foo.MyExpectationResponseCallback"
      */
-    public static HttpClassCallback callback(Class<? extends ExpectationCallback<HttpRequest>> callbackClass) {
+    @SuppressWarnings("rawtypes")
+    public static HttpClassCallback callback(Class<? extends ExpectationCallback<? extends HttpMessage>> callbackClass) {
         return new HttpClassCallback().withCallbackClass(callbackClass);
     }
 

File: mockserver-core/src/main/java/org/mockserver/servlet/responsewriter/ServletResponseWriter.java
Patch:
@@ -18,7 +18,7 @@ public class ServletResponseWriter extends ResponseWriter {
     private MockServerHttpResponseToHttpServletResponseEncoder mockServerResponseToHttpServletResponseEncoder;
 
     public ServletResponseWriter(Configuration configuration, MockServerLogger mockServerLogger, HttpServletResponse httpServletResponse) {
-        super(configuration);
+        super(configuration, mockServerLogger);
         this.httpServletResponse = httpServletResponse;
         this.mockServerResponseToHttpServletResponseEncoder = new MockServerHttpResponseToHttpServletResponseEncoder(mockServerLogger);
     }

File: mockserver-core/src/test/java/org/mockserver/mock/HttpStateTest.java
Patch:
@@ -100,7 +100,7 @@ private static class FakeResponseWriter extends ResponseWriter {
         public HttpResponse response;
 
         protected FakeResponseWriter() {
-            super(configuration());
+            super(configuration(), new MockServerLogger());
         }
 
         @Override

File: mockserver-netty/src/main/java/org/mockserver/netty/responsewriter/NettyResponseWriter.java
Patch:
@@ -22,13 +22,11 @@
  */
 public class NettyResponseWriter extends ResponseWriter {
 
-    private final MockServerLogger mockServerLogger;
     private final ChannelHandlerContext ctx;
     private final Scheduler scheduler;
 
     public NettyResponseWriter(Configuration configuration, MockServerLogger mockServerLogger, ChannelHandlerContext ctx, Scheduler scheduler) {
-        super(configuration);
-        this.mockServerLogger = mockServerLogger;
+        super(configuration, mockServerLogger);
         this.ctx = ctx;
         this.scheduler = scheduler;
     }

File: mockserver-core/src/main/java/org/mockserver/responsewriter/ResponseWriter.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.netty.handler.codec.http.HttpResponseStatus;
 import org.mockserver.configuration.Configuration;
-import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.cors.CORSHeaders;
 import org.mockserver.model.ConnectionOptions;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngine.java
Patch:
@@ -41,6 +41,7 @@ public class JavaScriptTemplateEngine implements TemplateEngine {
     private HttpTemplateOutputDeserializer httpTemplateOutputDeserializer;
 
     public JavaScriptTemplateEngine(MockServerLogger mockServerLogger) {
+        System.setProperty("nashorn.args", "--language=es6");
         if (engine == null) {
             engine = new ScriptEngineManager().getEngineByName("nashorn");
         }

File: mockserver-core/src/main/java/org/mockserver/templates/engine/velocity/VelocityTemplateEngine.java
Patch:
@@ -57,7 +57,7 @@ public class VelocityTemplateEngine implements TemplateEngine {
         velocityProperties.put("directive.parse.max_depth", "10");
         velocityProperties.put("context.scope_control.template", "false");
         velocityProperties.put("context.scope_control.evaluate", "false");
-        velocityProperties.put("context.scope_control.foreach", "false");
+        velocityProperties.put("context.scope_control.foreach", "true");
         velocityProperties.put("context.scope_control.macro", "false");
         velocityProperties.put("context.scope_control.define", "false");
         velocityProperties.put("runtime.strict_mode.enable", "false");

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIConverter.java
Patch:
@@ -111,7 +111,7 @@ private HttpResponse buildHttpResponse(OpenAPI openAPI, ApiResponses apiResponse
                                         response.withBody(String.valueOf(example.getValue()));
                                     }
                                 } else if (mediaType.getSchema() != null) {
-                                    org.mockserver.openapi.examples.models.Example generatedExample = ExampleBuilder.fromSchema(mediaType.getSchema(), openAPI.getComponents().getSchemas());
+                                    org.mockserver.openapi.examples.models.Example generatedExample = ExampleBuilder.fromSchema(mediaType.getSchema(), openAPI.getComponents() != null ? openAPI.getComponents().getSchemas() : null);
                                     if (generatedExample instanceof StringExample) {
                                         if (isJsonContentType(contentType.getKey())) {
                                             response.withBody(json(serialise(((StringExample) generatedExample).getValue())));

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationInitializerIntegrationTest.java
Patch:
@@ -92,7 +92,7 @@ public void shouldLoadOpenAPIExpectationsFromJson() throws Exception {
 
         try {
             // when
-            String specUrlOrPayload = "org/mockserver/mock/openapi_petstore_example.json";
+            String specUrlOrPayload = "org/mockserver/openapi/openapi_petstore_example.json";
             ConfigurationProperties.initializationJsonPath("org/mockserver/netty/integration/mock/initializer/openAPIExpectionInitializerJson.json");
             mockServer = new ClientAndServer();
 

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractMockingIntegrationTestBase.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.configuration.Configuration;
-import org.mockserver.httpclient.NettyHttpClient;
 import org.mockserver.echo.http.EchoServer;
+import org.mockserver.httpclient.NettyHttpClient;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.MatcherBuilder;
@@ -39,7 +39,7 @@
  */
 public abstract class AbstractMockingIntegrationTestBase {
 
-    private static final Configuration CONFIGURATION = configuration();;
+    private static final Configuration CONFIGURATION = configuration();
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(AbstractMockingIntegrationTestBase.class);
     protected static MockServerClient mockServerClient;
     protected static String servletContext = "";

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -923,7 +923,7 @@ public void shouldSetAndReadControlPlaneJWTAuthenticationRequiredClaims() {
             System.clearProperty("mockserver.controlPlaneJWTAuthenticationRequiredClaims");
 
             // then
-            assertThat(controlPlaneJWTAuthenticationRequiredClaims(), is(ImmutableSet.of("")));
+            assertThat(controlPlaneJWTAuthenticationRequiredClaims(), is(ImmutableSet.of()));
 
             // when
             controlPlaneJWTAuthenticationRequiredClaims(ImmutableSet.of("a", "b"));

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -2,7 +2,6 @@
 
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 import org.mockserver.configuration.Configuration;
-import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.uuid.UUIDService;

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -6,7 +6,6 @@
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 import org.mockserver.configuration.Configuration;
-import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.slf4j.event.Level;

File: mockserver-core/src/main/java/org/mockserver/socket/tls/SniHandler.java
Patch:
@@ -10,7 +10,6 @@
 import io.netty.util.concurrent.Future;
 import io.netty.util.internal.PlatformDependent;
 import org.mockserver.configuration.Configuration;
-import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.slf4j.event.Level;

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -374,7 +374,7 @@ public MockServerClient openUI(TimeUnit timeUnit, long pause) {
             Desktop desktop = Desktop.getDesktop();
             if (desktop != null) {
                 if (desktop.isSupported(Desktop.Action.BROWSE)) {
-                    desktop.browse(new URI("http" + (Boolean.TRUE.equals(secure) ? "s" : "") + "://" + host + ":" + port() + "/mockserver/dashboard"));
+                    desktop.browse(new URI("http://" + host + ":" + port() + "/mockserver/dashboard"));
                     timeUnit.sleep(pause);
                 } else {
                     if (MockServerLogger.isEnabled(WARN)) {

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -441,7 +441,7 @@ public static void maxSocketTimeout(long milliseconds) {
     }
 
     public static long maxFutureTimeout() {
-        return readLongProperty(MOCKSERVER_MAX_FUTURE_TIMEOUT, "DEFAULT_MAX_FUTURE_TIMEOUT", TimeUnit.SECONDS.toMillis(DEFAULT_MAX_FUTURE_TIMEOUT));
+        return readLongProperty(MOCKSERVER_MAX_FUTURE_TIMEOUT, "MOCKSERVER_MAX_FUTURE_TIMEOUT", TimeUnit.SECONDS.toMillis(DEFAULT_MAX_FUTURE_TIMEOUT));
     }
 
     public static void maxFutureTimeout(long milliseconds) {

File: mockserver-core/src/main/java/org/mockserver/codec/BodyDecoderEncoder.java
Patch:
@@ -5,6 +5,7 @@
 import org.mockserver.model.*;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.mockserver.model.JsonBody.DEFAULT_MATCH_TYPE;
@@ -60,7 +61,7 @@ byte[] bodyToBytes(Body body, String contentTypeHeader) {
             } else if (body.getValue() instanceof String) {
                 Charset contentTypeCharset = MediaType.parse(contentTypeHeader).getCharsetOrDefault();
                 Charset bodyCharset = body.getCharset(contentTypeCharset);
-                return ((String) body.getValue()).getBytes(bodyCharset);
+                return ((String) body.getValue()).getBytes(bodyCharset != null ? bodyCharset : MediaType.DEFAULT_TEXT_HTTP_CHARACTER_SET);
             } else {
                 return body.getRawBytes();
             }

File: mockserver-core/src/test/java/org/mockserver/mappers/HttpServletRequestToMockServerHttpRequestDecoderTest.java
Patch:
@@ -10,6 +10,7 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Enumeration;
+import java.util.HashSet;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static junit.framework.TestCase.assertEquals;
@@ -46,10 +47,10 @@ public void shouldMapHttpServletRequestToHttpRequest() {
             new Parameter("bodyParameterNameOne", "bodyParameterValueOne_Two"),
             new Parameter("bodyParameterNameTwo", "bodyParameterValueTwo_One")
         ).toString(), httpRequest.getBody().toString());
-        assertEquals(Arrays.asList(
+        assertEquals(new HashSet<>(Arrays.asList(
             new Parameter("queryStringParameterNameOne", "queryStringParameterValueOne_One", "queryStringParameterValueOne_Two"),
             new Parameter("queryStringParameterNameTwo", "queryStringParameterValueTwo_One")
-        ), httpRequest.getQueryStringParameterList());
+        )), new HashSet<>(httpRequest.getQueryStringParameterList()));
         assertEquals(Lists.newArrayList(
             new Header("headerName1", "headerValue1_1", "headerValue1_2"),
             new Header("headerName2", "headerValue2"),

File: mockserver-core/src/main/java/org/mockserver/persistence/ExpectationFileSystemPersistence.java
Patch:
@@ -105,7 +105,7 @@ public void updated(RequestMatchers requestMatchers, MockServerMatcherNotifier.C
                             byte[] data = serialize(expectations).getBytes(UTF_8);
                             ByteBuffer buffer = ByteBuffer.wrap(data);
                             buffer.put(data);
-                            buffer.flip();
+                            buffer.rewind();
                             while (buffer.hasRemaining()) {
                                 fileChannel.write(buffer);
                             }

File: mockserver-core/src/test/java/org/mockserver/persistence/ExpectationFileSystemPersistenceTest.java
Patch:
@@ -1,8 +1,6 @@
 package org.mockserver.persistence;
 
-import org.junit.AfterClass;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockserver.closurecallback.websocketregistry.WebSocketClientRegistry;
 import org.mockserver.configuration.ConfigurationProperties;
@@ -15,7 +13,6 @@
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
-import java.util.concurrent.TimeUnit;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.hamcrest.CoreMatchers.is;

File: mockserver-core/src/test/java/org/mockserver/streams/IOStreamUtilsTest.java
Patch:
@@ -166,7 +166,7 @@ public void shouldHandleExceptionWriteToOutputStream() throws IOException {
     public void shouldCreateBasicByteBuffer() {
         // when
         ByteBuffer byteBuffer = ByteBuffer.allocateDirect("byte_buffer".length()).put("byte_buffer".getBytes(UTF_8));
-        byteBuffer.flip();
+        byteBuffer.rewind();
 
         // then
         byte[] content = new byte[byteBuffer.limit()];

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -632,7 +632,7 @@ public void shouldSetAndReadDirectoryToSaveDynamicSSLCertificate() throws IOExce
         System.clearProperty("mockserver.directoryToSaveDynamicSSLCertificate");
 
         // when
-        assertThat(directoryToSaveDynamicSSLCertificate(), is(""));
+        assertThat(directoryToSaveDynamicSSLCertificate(), is("."));
         try {
             directoryToSaveDynamicSSLCertificate("some/random/path");
             fail("expected exception to be thrown");

File: mockserver-core/src/main/java/org/mockserver/socket/tls/PEMToFile.java
Patch:
@@ -62,7 +62,7 @@ private static String toPEM(final byte[] key, final String begin, final String e
     }
 
     public static byte[] privateKeyBytesFromPEM(final String pem) {
-        if ((pem.contains(BEGIN_RSA_PRIVATE_KEY) || pem.contains(END_RSA_PRIVATE_KEY))) {
+        if (!ConfigurationProperties.useBouncyCastleForKeyAndCertificateGeneration() && (pem.contains(BEGIN_RSA_PRIVATE_KEY) || pem.contains(END_RSA_PRIVATE_KEY))) {
             new MockServerLogger().logEvent(
                 new LogEntry()
                     .setLogLevel(Level.ERROR)

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactoryFactory.java
Patch:
@@ -24,7 +24,7 @@ public static KeyAndCertificateFactory createKeyAndCertificateFactory(MockServer
         if (customKeyAndCertificateFactorySupplier != null) {
             return customKeyAndCertificateFactorySupplier.apply(mockServerLogger);
         } else {
-            if (canNotLoadSunSecurityPackages() || ConfigurationProperties.useBouncyCastleForKeyAndCertificateGeneration()) {
+            if (ConfigurationProperties.useBouncyCastleForKeyAndCertificateGeneration() || canNotLoadSunSecurityPackages()) {
                 if (canNotLoadBouncyCastleClasses()) {
                     if (ConfigurationProperties.useBouncyCastleForKeyAndCertificateGeneration()) {
                         mockServerLogger.logEvent(

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -561,7 +561,7 @@ public void shouldSetAndReadUseBouncyCastleForKeyAndCertificateGeneration() {
         System.clearProperty("mockserver.useBouncyCastleForKeyAndCertificateGeneration");
 
         // when
-        assertFalse(useBouncyCastleForKeyAndCertificateGeneration());
+        assertTrue(useBouncyCastleForKeyAndCertificateGeneration());
         useBouncyCastleForKeyAndCertificateGeneration(false);
 
         // then

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/JUnitJupiterExtensionIntegrationTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.junit.jupiter.MockServerExtension;
 import org.mockserver.test.TestLoggerExtension;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 /**
  * @author jamesdbloom
@@ -13,7 +14,7 @@
     MockServerExtension.class,
     TestLoggerExtension.class,
 })
-class JUnitJupiterExtensionIntegrationTest extends AbstractBasicMockingIntegrationTest {
+class JUnitJupiterExtensionIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     public JUnitJupiterExtensionIntegrationTest(ClientAndServer client) {
         mockServerClient = client;

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class Main {
     static final String USAGE = "" +
-        "   java -jar <path to mockserver-jetty-jar-with-dependencies.jar> -serverPort <port> [-proxyRemotePort <port>] [-proxyRemoteHost <hostname>] [-logLevel <level>] " + NEW_LINE +
+        "   java -jar <path to mockserver-jetty-shaded.jar> -serverPort <port> [-proxyRemotePort <port>] [-proxyRemoteHost <hostname>] [-logLevel <level>] " + NEW_LINE +
         "                                                                                                                                                                 " + NEW_LINE +
         "     valid options are:                                                                                                                                          " + NEW_LINE +
         "        -serverPort <port>           The HTTP, HTTPS, SOCKS and HTTP CONNECT                                                                                     " + NEW_LINE +
@@ -54,7 +54,7 @@ public class Main {
         "                                     Logger levels: FINEST, FINE, INFO, WARNING,                                                                                 " + NEW_LINE +
         "                                     SEVERE or OFF. If not specified default is INFO                                                                             " + NEW_LINE +
         "                                                                                                                                                                 " + NEW_LINE +
-        "   i.e. java -jar ./mockserver-jetty-jar-with-dependencies.jar -serverPort 1080 -proxyRemotePort 80 -proxyRemoteHost www.mock-server.com -logLevel WARN          " + NEW_LINE +
+        "   i.e. java -jar ./mockserver-jetty-shaded.jar -serverPort 1080 -proxyRemotePort 80 -proxyRemoteHost www.mock-server.com -logLevel WARN          " + NEW_LINE +
         "                                                                                                                                                                 " + NEW_LINE;
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(Main.class);
     private static final IntegerStringListParser INTEGER_STRING_LIST_PARSER = new IntegerStringListParser();

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ClientAndServerMockingIntegrationTest.java
Patch:
@@ -2,16 +2,15 @@
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.mockserver.integration.ClientAndServer;
-import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 import static org.mockserver.integration.ClientAndServer.startClientAndServer;
 import static org.mockserver.stop.Stop.stopQuietly;
 
 /**
  * @author jamesdbloom
  */
-public class ClientAndServerMockingIntegrationTest extends AbstractBasicMockingIntegrationTest {
+public class ClientAndServerMockingIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     private static int mockServerPort;
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/MainMethodMockingIntegrationTest.java
Patch:
@@ -5,14 +5,14 @@
 import org.mockserver.cli.Main;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.socket.PortFactory;
-import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 import static org.mockserver.stop.Stop.stopQuietly;
 
 /**
  * @author jamesdbloom
  */
-public class MainMethodMockingIntegrationTest extends AbstractBasicMockingIntegrationTest {
+public class MainMethodMockingIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     private static final int severHttpPort = PortFactory.findFreePort();
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/PreAllocatedPortMockingIntegrationTest.java
Patch:
@@ -3,15 +3,15 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.mockserver.socket.PortFactory;
-import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 import static org.mockserver.integration.ClientAndServer.startClientAndServer;
 import static org.mockserver.stop.Stop.stopQuietly;
 
 /**
  * @author jamesdbloom
  */
-public class PreAllocatedPortMockingIntegrationTest extends AbstractBasicMockingIntegrationTest {
+public class PreAllocatedPortMockingIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     private static final int severHttpPort = PortFactory.findFreePort();
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/CustomCertificateAuthorityMockingIntegrationTest.java
Patch:
@@ -2,8 +2,7 @@
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
-import org.mockserver.integration.ClientAndServer;
-import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 import static org.mockserver.configuration.ConfigurationProperties.certificateAuthorityCertificate;
 import static org.mockserver.configuration.ConfigurationProperties.certificateAuthorityPrivateKey;
@@ -13,7 +12,7 @@
 /**
  * @author jamesdbloom
  */
-public class CustomCertificateAuthorityMockingIntegrationTest extends AbstractBasicMockingIntegrationTest {
+public class CustomCertificateAuthorityMockingIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     private static int mockServerPort;
     private static String originalCertificateAuthorityCertificate;

File: mockserver-spring-test-listener/src/test/java/org/mockserver/springtest/integration/MockServerTestExecutionListenerIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.springtest.MockServerPort;
 import org.mockserver.springtest.MockServerTest;
-import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
 import static org.slf4j.event.Level.WARN;
@@ -16,7 +16,7 @@
  */
 @RunWith(SpringRunner.class)
 @MockServerTest
-public class MockServerTestExecutionListenerIntegrationTest extends AbstractBasicMockingIntegrationTest {
+public class MockServerTestExecutionListenerIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     @MockServerPort
     private Integer mockServerPort;

File: mockserver-war/src/test/java/org/mockserver/mockservlet/integration/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -7,11 +7,11 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.mockserver.client.MockServerClient;
-import org.mockserver.testing.integration.mock.AbstractBasicMockingIntegrationTest;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mockservlet.MockServerServlet;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.socket.tls.KeyStoreFactory;
+import org.mockserver.testing.integration.mock.AbstractBasicMockingSameJVMIntegrationTest;
 
 import java.io.File;
 import java.util.concurrent.TimeUnit;
@@ -21,7 +21,7 @@
 /**
  * @author jamesdbloom
  */
-public class ClientServerWarWithContextPathIntegrationTest extends AbstractBasicMockingIntegrationTest {
+public class ClientServerWarWithContextPathIntegrationTest extends AbstractBasicMockingSameJVMIntegrationTest {
 
     private static final int SERVER_HTTP_PORT = PortFactory.findFreePort();
     private static final int SERVER_HTTPS_PORT = PortFactory.findFreePort();

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class JsonSchemaValidator extends ObjectWithReflectiveEqualsHashCodeToString implements Validator<String> {
 
-    public static final String OPEN_API_SPECIFICATION_URL = "OpenAPI Specification: https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi/5.11.x" + NEW_LINE +
+    public static final String OPEN_API_SPECIFICATION_URL = "OpenAPI Specification: https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi/5.12.x" + NEW_LINE +
         "Documentation: https://mock-server.com/mock_server/creating_expectations.html";
     private static final Map<String, String> schemaCache = new ConcurrentHashMap<>();
     // using draft 07 as default due to TLS issues downloading draft 2019-09 which causes errors

File: mockserver-core/src/main/java/org/mockserver/codec/ExpandedParameterDecoder.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.netty.handler.codec.http.HttpConstants;
 import io.netty.handler.codec.http.QueryStringDecoder;
+import org.apache.commons.lang3.StringUtils;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
@@ -53,7 +54,8 @@ public Parameters retrieveFormParameters(String parameterString, boolean hasPath
     }
 
     public Parameters retrieveQueryParameters(String parameterString, boolean hasPath) {
-        Parameters parameters = new Parameters();
+        Parameters parameters = new Parameters()
+            .withRawParameterString(parameterString.contains("?") ? StringUtils.substringAfter(parameterString, "?") : parameterString);
         Map<String, List<String>> parameterMap = new HashMap<>();
         if (isNotBlank(parameterString)) {
             try {

File: mockserver-core/src/main/java/org/mockserver/scheduler/Scheduler.java
Patch:
@@ -13,6 +13,7 @@
 
 import java.util.concurrent.*;
 import java.util.function.BiConsumer;
+import java.util.function.Predicate;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.mockserver.log.model.LogEntry.LogMessageType.WARN;
@@ -145,7 +146,7 @@ public void submit(Runnable command, boolean synchronous) {
         }
     }
 
-    public void submit(HttpForwardActionResult future, Runnable command, boolean synchronous) {
+    public void submit(HttpForwardActionResult future, Runnable command, boolean synchronous, Predicate<Throwable> logException) {
         Integer port = getPort();
         if (future != null) {
             if (this.synchronous || synchronous) {
@@ -159,7 +160,7 @@ public void submit(HttpForwardActionResult future, Runnable command, boolean syn
                 run(command, port);
             } else {
                 future.getHttpResponse().whenCompleteAsync((httpResponse, throwable) -> {
-                    if (throwable != null && MockServerLogger.isEnabled(Level.INFO)) {
+                    if (throwable != null && MockServerLogger.isEnabled(Level.INFO) && logException.test(throwable)) {
                         mockServerLogger.logEvent(
                             new LogEntry()
                                 .setType(WARN)

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -222,7 +222,6 @@ private static Map<String, String> parseArguments(String... arguments) {
                     }
                 }
             } else {
-                showUsage();
                 break;
             }
         }

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -487,7 +487,7 @@ public void stop() {
     /**
      * Stop MockServer gracefully (only support for Netty version, not supported for WAR version)
      */
-    public Future<MockServerClient> stop(boolean ignoreFailure) {
+    public CompletableFuture<MockServerClient> stop(boolean ignoreFailure) {
         if (!stopFuture.isDone()) {
             getMockServerEventBus().publish(EventType.STOP);
             removeMockServerEventBus();

File: mockserver-core/src/main/java/org/mockserver/model/Body.java
Patch:
@@ -3,11 +3,9 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 
 import java.nio.charset.Charset;
-import java.util.Arrays;
 import java.util.Objects;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/main/java/org/mockserver/model/BodyWithContentType.java
Patch:
@@ -5,8 +5,6 @@
 import java.nio.charset.Charset;
 import java.util.Objects;
 
-import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
-
 /**
  * @author jamesdbloom
  */

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Arrays;
 import java.util.Objects;
 
-import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_TEXT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom
@@ -41,7 +41,7 @@ public JsonBody(String json, byte[] rawBytes, MediaType contentType, MatchType m
         this.matchType = matchType;
 
         if (rawBytes == null && json != null) {
-            this.rawBytes = json.getBytes(determineCharacterSet(contentType, DEFAULT_HTTP_CHARACTER_SET));
+            this.rawBytes = json.getBytes(determineCharacterSet(contentType, DEFAULT_TEXT_HTTP_CHARACTER_SET));
         } else {
             this.rawBytes = rawBytes;
         }

File: mockserver-core/src/main/java/org/mockserver/model/StringBody.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Objects;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
-import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_TEXT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom
@@ -37,7 +37,7 @@ public StringBody(String value, byte[] rawBytes, boolean subString, MediaType co
         this.subString = subString;
 
         if (rawBytes == null && value != null) {
-            this.rawBytes = value.getBytes(determineCharacterSet(contentType, DEFAULT_HTTP_CHARACTER_SET));
+            this.rawBytes = value.getBytes(determineCharacterSet(contentType, DEFAULT_TEXT_HTTP_CHARACTER_SET));
         } else {
             this.rawBytes = rawBytes;
         }

File: mockserver-core/src/main/java/org/mockserver/model/XmlBody.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Arrays;
 import java.util.Objects;
 
-import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_TEXT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom
@@ -35,7 +35,7 @@ public XmlBody(String xml, byte[] rawBytes, MediaType contentType) {
         this.xml = xml;
 
         if (rawBytes == null && xml != null) {
-            this.rawBytes = xml.getBytes(determineCharacterSet(contentType, DEFAULT_HTTP_CHARACTER_SET));
+            this.rawBytes = xml.getBytes(determineCharacterSet(contentType, DEFAULT_TEXT_HTTP_CHARACTER_SET));
         } else {
             this.rawBytes = rawBytes;
         }

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerHttpToNettyHttpResponseEncoderBasicMappingTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.mockserver.model.BinaryBody.binary;
 import static org.mockserver.model.ConnectionOptions.connectionOptions;
 import static org.mockserver.model.HttpResponse.response;
-import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_TEXT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom
@@ -175,7 +175,7 @@ public void shouldEncodeStringBody() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.content().toString(DEFAULT_HTTP_CHARACTER_SET), is("somebody"));
+        assertThat(fullHttpResponse.content().toString(DEFAULT_TEXT_HTTP_CHARACTER_SET), is("somebody"));
     }
 
     @Test
@@ -224,7 +224,7 @@ public void shouldEncodeNullBody() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.content().toString(DEFAULT_HTTP_CHARACTER_SET), is(""));
+        assertThat(fullHttpResponse.content().toString(DEFAULT_TEXT_HTTP_CHARACTER_SET), is(""));
     }
 
 }

File: mockserver-core/src/test/java/org/mockserver/matchers/HttpRequestsPropertiesMatcherTest.java
Patch:
@@ -226,7 +226,7 @@ public void shouldThrowExceptionForAllowReserved() {
         // then
         assertThat(httpRequestsPropertiesMatcher.getHttpRequestPropertiesMatchers().size(), equalTo(0));
         assertThat(logEntries.size(), equalTo(1));
-        assertThat(logEntries.get(0), equalTo(
+            assertThat(logEntries.get(0), equalTo(
             new LogEntry()
                 .setEpochTime(logEntries.get(0).getEpochTime())
                 .setLogLevel(ERROR)

File: mockserver-core/src/main/java/org/mockserver/url/URLParser.java
Patch:
@@ -7,8 +7,8 @@
  */
 public class URLParser {
 
-    private static final String schemeRegex = "(https?:)?//.*";
-    private static final String schemeHostAndPortRegex = "(https?:)?//([A-z0-9-_.:]*@)?[A-z0-9-_.]*(:[0-9]*)?";
+    private static final String schemeRegex = "https?://.*";
+    private static final String schemeHostAndPortRegex = "https?://([A-z0-9-_.:]*@)?[A-z0-9-_.]*(:[0-9]*)?";
 
     public static boolean isFullUrl(String uri) {
         return uri != null && uri.matches(schemeRegex);

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestPropertiesMatcher.java
Patch:
@@ -144,7 +144,7 @@ private BodyMatcher buildBodyMatcher(Body body) {
                     break;
                 case XPATH:
                     XPathBody xPathBody = (XPathBody) body;
-                    bodyMatcher = new XPathMatcher(mockServerLogger, xPathBody.getValue());
+                    bodyMatcher = new XPathMatcher(mockServerLogger, xPathBody.getValue(), xPathBody.getNamespacePrefixes());
                     break;
                 case XML:
                     XmlBody xmlBody = (XmlBody) body;

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestsPropertiesMatcher.java
Patch:
@@ -70,7 +70,7 @@ public boolean apply(RequestDefinition requestDefinition) {
                 httpRequests = new ArrayList<>();
                 OpenAPISerialiser openAPISerialiser = new OpenAPISerialiser(mockServerLogger);
                 try {
-                    OpenAPI openAPI = buildOpenAPI(openAPIDefinition.getSpecUrlOrPayload());
+                    OpenAPI openAPI = buildOpenAPI(openAPIDefinition.getSpecUrlOrPayload(), mockServerLogger);
                     final Map<String, List<Pair<String, Operation>>> stringListMap = openAPISerialiser.retrieveOperations(openAPI, openAPIDefinition.getOperationId());
                     stringListMap
                         .forEach((path, operations) -> operations

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIConverter.java
Patch:
@@ -38,7 +38,7 @@ public OpenAPIConverter(MockServerLogger mockServerLogger) {
     }
 
     public List<Expectation> buildExpectations(String specUrlOrPayload, Map<String, String> operationsAndResponses) {
-        OpenAPI openAPI = buildOpenAPI(specUrlOrPayload);
+        OpenAPI openAPI = buildOpenAPI(specUrlOrPayload, mockServerLogger);
         return openAPI
             .getPaths()
             .values()

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationIdValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.model.ExpectationId;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaExpectationIdValidator extends JsonSchemaValidator {
     private JsonSchemaExpectationIdValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            ExpectationId.class,
             "org/mockserver/model/schema/",
             "expectationId"
         );

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.mock.Expectation;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaExpectationValidator extends JsonSchemaValidator {
     private JsonSchemaExpectationValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            Expectation.class,
             "org/mockserver/model/schema/",
             "expectation",
             "requestDefinition",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestAndHttpResponseValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.model.HttpRequestAndHttpResponse;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaHttpRequestAndHttpResponseValidator extends JsonSchemaVal
     private JsonSchemaHttpRequestAndHttpResponseValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            HttpRequestAndHttpResponse.class,
             "org/mockserver/model/schema/",
             "httpRequestAndHttpResponse",
             "requestDefinition",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.model.HttpRequest;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaHttpRequestValidator extends JsonSchemaValidator {
     private JsonSchemaHttpRequestValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            HttpRequest.class,
             "org/mockserver/model/schema/",
             "httpRequest",
             "stringOrJsonSchema",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpResponseValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.model.HttpResponse;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaHttpResponseValidator extends JsonSchemaValidator {
     private JsonSchemaHttpResponseValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            HttpResponse.class,
             "org/mockserver/model/schema/",
             "httpResponse",
             "stringOrJsonSchema",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaOpenAPIExpectationValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.mock.OpenAPIExpectation;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaOpenAPIExpectationValidator extends JsonSchemaValidator {
     private JsonSchemaOpenAPIExpectationValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            OpenAPIExpectation.class,
             "org/mockserver/model/schema/",
             "openAPIExpectation"
         );

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaRequestDefinitionValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.model.RequestDefinition;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaRequestDefinitionValidator extends JsonSchemaValidator {
     private JsonSchemaRequestDefinitionValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            RequestDefinition.class,
             "org/mockserver/model/schema/",
             "requestDefinition",
             "httpRequest",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.verify.VerificationSequence;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaVerificationSequenceValidator extends JsonSchemaValidator
     private JsonSchemaVerificationSequenceValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            VerificationSequence.class,
             "org/mockserver/model/schema/",
             "verificationSequence",
             "expectationId",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidator.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.verify.Verification;
 
 /**
  * @author jamesdbloom
@@ -10,6 +11,7 @@ public class JsonSchemaVerificationValidator extends JsonSchemaValidator {
     private JsonSchemaVerificationValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
+            Verification.class,
             "org/mockserver/model/schema/",
             "verification",
             "expectationId",

File: mockserver-core/src/main/java/org/mockserver/verify/Verification.java
Patch:
@@ -10,7 +10,7 @@
  * @author jamesdbloom
  */
 public class Verification extends ObjectWithJsonToString {
-    private RequestDefinition httpRequest = request();
+    private RequestDefinition httpRequest;
     private ExpectationId expectationId;
     private VerificationTimes times = VerificationTimes.atLeast(1);
 

File: mockserver-core/src/test/java/org/mockserver/serialization/VerificationSerializationErrorsTest.java
Patch:
@@ -51,7 +51,6 @@ public void shouldHandleExceptionWhileSerializingObject() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
         thrown.expectMessage("Exception while serializing verification to JSON with value {" + NEW_LINE +
-            "  \"httpRequest\" : { }," + NEW_LINE +
             "  \"times\" : {" + NEW_LINE +
             "    \"atLeast\" : 1" + NEW_LINE +
             "  }" + NEW_LINE +

File: mockserver-core/src/test/java/org/mockserver/serialization/VerificationSerializerTest.java
Patch:
@@ -91,7 +91,6 @@ public void serializeHandlesException() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
         thrown.expectMessage("Exception while serializing verification to JSON with value {" + NEW_LINE +
-            "  \"httpRequest\" : { }," + NEW_LINE +
             "  \"times\" : {" + NEW_LINE +
             "    \"atLeast\" : 1" + NEW_LINE +
             "  }" + NEW_LINE +

File: mockserver-core/src/test/java/org/mockserver/serialization/model/VerificationDTOTest.java
Patch:
@@ -80,7 +80,7 @@ public void shouldHandleNullFieldInput() {
         VerificationDTO verificationDTO = new VerificationDTO(new Verification());
 
         // then
-        assertThat(verificationDTO.getHttpRequest(), is(new HttpRequestDTO(request())));
+        assertThat(verificationDTO.getHttpRequest(), nullValue());
         assertThat(verificationDTO.getTimes(), is(new VerificationTimesDTO(VerificationTimes.atLeast(1))));
     }
 

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidatorIntegrationTest.java
Patch:
@@ -312,7 +312,8 @@ public void shouldValidateInvalidExtraField() {
                 "  }" + NEW_LINE +
                 "]}"),
             is(
-                "1 error:" + NEW_LINE +
+                "2 errors:" + NEW_LINE +
+                    " - $.httpRequests[0].invalidField: is not defined in the schema and the schema does not allow additional properties" + NEW_LINE +
                     " - $.httpRequests[0].specUrlOrPayload: is missing, but is required, if specifying OpenAPI request matcher" + NEW_LINE +
                     NEW_LINE +
                     OPEN_API_SPECIFICATION_URL

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/proxy/AbstractProxyIntegrationTest.java
Patch:
@@ -902,7 +902,7 @@ public void shouldReturnErrorForInvalidRequestToClear() throws Exception {
             "   - $.keepAlive: string found, boolean expected\n" +
             "   - $.method: boolean found, string expected\n" +
             "   - $.path: integer found, string expected\n" +
-            "   - $.specUrlOrPayload: is missing but it is required" + NEW_LINE +
+            "   - $.specUrlOrPayload: is missing, but is required, if specifying OpenAPI request matcher" + NEW_LINE +
             "  " + NEW_LINE +
             "  " + OPEN_API_SPECIFICATION_URL.replaceAll(NEW_LINE, NEW_LINE + "  ")));
     }

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -1833,7 +1833,7 @@ public void shouldErrorForInvalidRequest() throws Exception {
             "   - $.keepAlive: string found, boolean expected\n" +
             "   - $.method: boolean found, string expected\n" +
             "   - $.path: integer found, string expected\n" +
-            "   - $.specUrlOrPayload: is missing but it is required" + NEW_LINE +
+            "   - $.specUrlOrPayload: is missing, but is required, if specifying OpenAPI request matcher" + NEW_LINE +
             "  " + NEW_LINE +
             "  " + OPEN_API_SPECIFICATION_URL.replaceAll(NEW_LINE, NEW_LINE + "  ")));
     }

File: mockserver-core/src/main/java/org/mockserver/mock/HttpState.java
Patch:
@@ -460,7 +460,7 @@ public HttpResponse retrieve(HttpRequest request) {
                                     .setLogLevel(Level.INFO)
                                     .setCorrelationId(logCorrelationId)
                                     .setHttpRequest(requestDefinition)
-                                    .setMessageFormat("retrieved active expectations in " + format.name().toLowerCase() + " that match:{}")
+                                    .setMessageFormat("retrieved " + expectations.size() + " active expectations in " + format.name().toLowerCase() + " that match:{}")
                                     .setArguments(requestDefinition)
                             );
                         }

File: mockserver-core/src/main/java/org/mockserver/persistence/ExpectationFileSystemPersistence.java
Patch:
@@ -76,7 +76,7 @@ public ExpectationFileSystemPersistence(MockServerLogger mockServerLogger, Reque
     @Override
     public void updated(RequestMatchers requestMatchers, MockServerMatcherNotifier.Cause cause) {
         // ignore non-API changes from the same file
-        if (cause == MockServerMatcherNotifier.Cause.API || !initializationPathMatchesPersistencePath) {
+        if (cause == MockServerMatcherNotifier.Cause.API || cause.getType() == MockServerMatcherNotifier.Cause.Type.CLASS_INITIALISER || !initializationPathMatchesPersistencePath) {
             fileWriteLock.lock();
             try {
                 try {

File: mockserver-core/src/main/java/org/mockserver/mock/action/http/HttpActionHandler.java
Patch:
@@ -425,10 +425,10 @@ void handleExceptionDuringForwardingRequest(Action action, HttpRequest request,
                     .setLogLevel(Level.ERROR)
                     .setCorrelationId(request.getLogCorrelationId())
                     .setHttpRequest(request)
-                    .setMessageFormat(exception.getMessage())
+                    .setMessageFormat(exception != null ? isNotBlank(exception.getMessage()) ? exception.getMessage() : exception.getClass().getSimpleName() : null)
                     .setThrowable(exception)
             );
-            returnNotFound(responseWriter, request, null);
+            returnNotFound(responseWriter, request, exception != null ? exception.getMessage() : null);
         }
     }
 
@@ -469,7 +469,7 @@ private void returnNotFound(ResponseWriter responseWriter, HttpRequest request,
                         .setLogLevel(TRACE)
                         .setCorrelationId(request.getLogCorrelationId())
                         .setHttpRequest(request)
-                        .setMessageFormat("no expectation for:{}returning response:{}")
+                        .setMessageFormat(NO_MATCH_RESPONSE_NO_EXPECTATION_MESSAGE_FORMAT)
                         .setArguments(request, notFoundResponse())
                 );
             }

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -19,8 +19,7 @@
 
 import java.util.List;
 
-import static org.mockserver.echo.http.EchoServer.LOG_FILTER;
-import static org.mockserver.echo.http.EchoServer.NEXT_RESPONSE;
+import static org.mockserver.echo.http.EchoServer.*;
 import static org.slf4j.event.Level.TRACE;
 
 /**
@@ -82,7 +81,8 @@ public void initChannel(SocketChannel channel) {
             error,
             mockServerLogger,
             channel.attr(LOG_FILTER).get(),
-            channel.attr(NEXT_RESPONSE).get()
+            channel.attr(NEXT_RESPONSE).get(),
+            channel.attr(LAST_REQUEST).get()
         ));
     }
 

File: mockserver-core/src/main/java/org/mockserver/serialization/RequestDefinitionSerializer.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockserver.model.OpenAPIDefinition;
 import org.mockserver.model.RequestDefinition;
 import org.mockserver.serialization.model.HttpRequestDTO;
+import org.mockserver.serialization.model.HttpRequestPrettyPrintedDTO;
 import org.mockserver.serialization.model.OpenAPIDefinitionDTO;
 import org.mockserver.serialization.model.RequestDefinitionDTO;
 import org.mockserver.templates.engine.model.HttpRequestTemplateObject;
@@ -56,7 +57,7 @@ public String serialize(RequestDefinition requestDefinition) {
     public String serialize(boolean prettyPrint, RequestDefinition requestDefinition) {
         try {
             if (requestDefinition instanceof HttpRequest) {
-                return objectWriter.writeValueAsString(prettyPrint ? new HttpRequestTemplateObject((HttpRequest) requestDefinition) : new HttpRequestDTO((HttpRequest) requestDefinition));
+                return objectWriter.writeValueAsString(prettyPrint ? new HttpRequestPrettyPrintedDTO((HttpRequest) requestDefinition) : new HttpRequestDTO((HttpRequest) requestDefinition));
             } else if (requestDefinition instanceof OpenAPIDefinition) {
                 return objectWriter.writeValueAsString(new OpenAPIDefinitionDTO((OpenAPIDefinition) requestDefinition));
             } else {
@@ -91,7 +92,7 @@ public String serialize(boolean prettyPrint, RequestDefinition... requestDefinit
                 Object[] requestDefinitionDTOs = new Object[requestDefinitions.length];
                 for (int i = 0; i < requestDefinitions.length; i++) {
                     if (requestDefinitions[i] instanceof HttpRequest) {
-                        requestDefinitionDTOs[i] = prettyPrint ? new HttpRequestTemplateObject((HttpRequest) requestDefinitions[i]) : new HttpRequestDTO((HttpRequest) requestDefinitions[i]);
+                        requestDefinitionDTOs[i] = prettyPrint ? new HttpRequestPrettyPrintedDTO((HttpRequest) requestDefinitions[i]) : new HttpRequestDTO((HttpRequest) requestDefinitions[i]);
                     } else if (requestDefinitions[i] instanceof OpenAPIDefinition) {
                         requestDefinitionDTOs[i] = new OpenAPIDefinitionDTO((OpenAPIDefinition) requestDefinitions[i]);
                     }

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -23,12 +23,12 @@
 import static io.netty.handler.codec.http.HttpHeaderNames.HOST;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.fail;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.StringStartsWith.startsWith;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.matchers.Times.exactly;
 import static org.mockserver.matchers.Times.once;

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/springresttemplate/BookServiceSpringRestTemplate.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.service.springclient;
+package org.mockserver.examples.proxy.service.springresttemplate;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.http.HttpHost;
@@ -25,7 +25,7 @@
  * @author jamesdbloom
  */
 @Component
-public class BookServiceSpringRestTemplateClient implements BookService {
+public class BookServiceSpringRestTemplate implements BookService {
 
     @Resource
     private Environment environment;

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/web/controller/BooksPageController.java
Patch:
@@ -29,4 +29,5 @@ public String getBook(@PathVariable String id, Model model) {
         model.addAttribute("book", bookService.getBook(id));
         return "book";
     }
+
 }

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/BooksPageEndToEndIntegrationTest.java
Patch:
@@ -52,6 +52,7 @@ public static void stopProxy() {
         System.clearProperty("http.proxyPort");
     }
 
+    @SuppressWarnings("JUnit3StyleTestMethodInJUnit4Class")
     public void testProxyTypeEnabled() {
 
     }

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/BooksPageIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.examples.proxy.model.Book;
 import org.mockserver.examples.proxy.web.controller.pageobjects.BookPage;
 import org.mockserver.examples.proxy.web.controller.pageobjects.BooksPage;
@@ -46,6 +47,7 @@ public abstract class BooksPageIntegrationTest {
 
     @BeforeClass
     public static void startProxy() {
+        ConfigurationProperties.logLevel("TRACE");
         proxy = ClientAndServer.startClientAndServer();
         System.setProperty("http.proxyHost", "127.0.0.1");
         System.setProperty("http.proxyPort", String.valueOf(proxy.getPort()));

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/googleclient/BooksPageGoogleClientSOCKSProxyEndToEndIntegrationTest.java
Patch:
@@ -17,7 +17,6 @@
 /**
  * @author jamesdbloom
  */
-@SuppressWarnings("unchecked")
 @RunWith(SpringJUnit4ClassRunner.class)
 @WebAppConfiguration
 @ContextHierarchy({
@@ -36,7 +35,6 @@
 public class BooksPageGoogleClientSOCKSProxyEndToEndIntegrationTest extends BooksPageEndToEndIntegrationTest {
 
     @Override
-    @SuppressWarnings("unchecked")
     public void testProxyTypeEnabled() {
         assumeThat("SOCKS5 is broken in JRE <9", System.getProperty("java.version"), not(anyOf(
             startsWith("1.7."), equalTo("1.7"),

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/javaclient/BooksPageJavaClientHTTPProxyEndToEndIntegrationTest.java
Patch:
@@ -29,6 +29,6 @@
     )
 })
 @ActiveProfiles(profiles = {"backend", "javaClientHttpProxy"})
-public class BooksPageJavaClientEndToEndHTTPProxyIntegrationTest extends BooksPageEndToEndIntegrationTest {
+public class BooksPageJavaClientHTTPProxyEndToEndIntegrationTest extends BooksPageEndToEndIntegrationTest {
 
 }

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/javaclient/BooksPageJavaClientHTTPSProxyIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.web.controller.springclient;
+package org.mockserver.examples.proxy.web.controller.javaclient;
 
 import org.junit.runner.RunWith;
 import org.mockserver.examples.proxy.configuration.RootConfiguration;
@@ -27,7 +27,7 @@
         }
     )
 })
-@ActiveProfiles(profiles = {"springClient"})
-public class BooksPageSpringClientIntegrationTest extends BooksPageIntegrationTest {
+@ActiveProfiles(profiles = {"javaClientHttpsProxy"})
+public class BooksPageJavaClientHTTPSProxyIntegrationTest extends BooksPageIntegrationTest {
 
 }

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/javaclient/BooksPageJavaClientSOCKSProxyEndToEndIntegrationTest.java
Patch:
@@ -17,7 +17,6 @@
 /**
  * @author jamesdbloom
  */
-@SuppressWarnings("unchecked")
 @RunWith(SpringJUnit4ClassRunner.class)
 @WebAppConfiguration
 @ContextHierarchy({
@@ -36,7 +35,6 @@
 public class BooksPageJavaClientSOCKSProxyEndToEndIntegrationTest extends BooksPageEndToEndIntegrationTest {
 
     @Override
-    @SuppressWarnings("unchecked")
     public void testProxyTypeEnabled() {
         assumeThat("SOCKS5 is broken in JRE <9", System.getProperty("java.version"), not(anyOf(
             startsWith("1.7."), equalTo("1.7"),

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/springresttemplate/BooksPageSpringRestTemplateEndToEndIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.web.controller.springclient;
+package org.mockserver.examples.proxy.web.controller.springresttemplate;
 
 import org.junit.runner.RunWith;
 import org.mockserver.examples.proxy.configuration.RootConfiguration;
@@ -27,7 +27,7 @@
         }
     )
 })
-@ActiveProfiles(profiles = {"backend", "springClient"})
-public class BooksPageSpringClientEndToEndIntegrationTest extends BooksPageEndToEndIntegrationTest {
+@ActiveProfiles(profiles = {"backend", "springRestTemplate"})
+public class BooksPageSpringRestTemplateEndToEndIntegrationTest extends BooksPageEndToEndIntegrationTest {
 
 }

File: mockserver-core/src/main/java/org/mockserver/codec/ExpandedParameterDecoder.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.netty.handler.codec.http.HttpConstants;
 import io.netty.handler.codec.http.QueryStringDecoder;
+import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.NottableString;
@@ -37,7 +38,7 @@ public Parameters retrieveFormParameters(String parameterString, boolean hasPath
         Map<String, List<String>> parameterMap = new HashMap<>();
         if (isNotBlank(parameterString)) {
             try {
-                parameterMap.putAll(new QueryStringDecoder(parameterString, parameterString.contains("/") || hasPath).parameters());
+                parameterMap.putAll(new QueryStringDecoder(parameterString, HttpConstants.DEFAULT_CHARSET, parameterString.contains("/") || hasPath, 1024, !ConfigurationProperties.useSemicolonAsQueryParameterSeparator()).parameters());
             } catch (IllegalArgumentException iae) {
                 mockServerLogger.logEvent(
                     new LogEntry()

File: mockserver-core/src/test/java/org/mockserver/serialization/HttpResponseSerializerIntegrationTest.java
Patch:
@@ -33,6 +33,7 @@
 /**
  * @author jamesdbloom
  */
+@SuppressWarnings("deprecation")
 public class HttpResponseSerializerIntegrationTest {
 
     private static final ObjectWriter OBJECT_WRITER = ObjectMapperFactory.createObjectMapper(true);

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -57,7 +57,7 @@ public class MockServerClient implements Stoppable {
 
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(MockServerClient.class);
     private static final Map<Integer, MockServerEventBus> EVENT_BUS_MAP = new ConcurrentHashMap<>();
-    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(5, new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(ConfigurationProperties.clientNioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
     private final String host;
     private final String contextPath;
     private final Class<MockServerClient> clientClass;

File: mockserver-core/src/main/java/org/mockserver/client/NettyHttpClient.java
Patch:
@@ -69,7 +69,9 @@ public CompletableFuture<HttpResponse> sendRequest(final HttpRequest httpRequest
     public CompletableFuture<HttpResponse> sendRequest(final HttpRequest httpRequest, @Nullable InetSocketAddress remoteAddress, Integer connectionTimeoutMillis) throws SocketConnectionException {
         if (!eventLoopGroup.isShuttingDown()) {
             if (proxyConfigurations != null && !Boolean.TRUE.equals(httpRequest.isSecure()) && proxyConfigurations.containsKey(ProxyConfiguration.Type.HTTP)) {
-                remoteAddress = proxyConfigurations.get(ProxyConfiguration.Type.HTTP).getProxyAddress();
+                ProxyConfiguration proxyConfiguration = proxyConfigurations.get(ProxyConfiguration.Type.HTTP);
+                remoteAddress = proxyConfiguration.getProxyAddress();
+                proxyConfiguration.addProxyAuthenticationHeader(httpRequest);
             } else if (remoteAddress == null) {
                 remoteAddress = httpRequest.socketAddressFromHostHeader();
             }

File: mockserver-core/src/main/java/org/mockserver/log/model/LogEntry.java
Patch:
@@ -531,5 +531,7 @@ public enum LogMessageType {
         FORWARDED_REQUEST,
         TEMPLATE_GENERATED,
         SERVER_CONFIGURATION,
+        AUTHENTICATION_FAILED,
     }
+
 }

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonSchemaMatcher.java
Patch:
@@ -13,6 +13,7 @@
  *
  * @author jamesdbloom
  */
+@SuppressWarnings("FieldMayBeFinal")
 public class JsonSchemaMatcher extends BodyMatcher<String> {
     private static final String[] EXCLUDED_FIELDS = {"mockServerLogger", "jsonSchemaValidator"};
     private final MockServerLogger mockServerLogger;

File: mockserver-core/src/test/java/org/mockserver/matchers/HttpRequestPropertiesMatcherLogTest.java
Patch:
@@ -1952,7 +1952,7 @@ public void doesNotMatchIncorrectJSONSchemaBody() {
                     "     failed because:" + NEW_LINE +
                     "  " + NEW_LINE +
                     "      1 error:" + NEW_LINE +
-                    "       - field: \"/tags\" for schema: \"/properties/tags\" has error: \"array is too short: must have at least 1 elements but instance has 0 elements\"" + NEW_LINE +
+                    "       - $.tags: there must be a minimum of 1 items in the array" + NEW_LINE +
                     NEW_LINE +
                     NEW_LINE
             ));

File: mockserver-core/src/test/java/org/mockserver/serialization/HttpResponseSerializerIntegrationTest.java
Patch:
@@ -59,9 +59,9 @@ public void shouldIgnoreExtraFields() {
             " schema validation errors:" + NEW_LINE +
             "" + NEW_LINE +
             "  1 error:" + NEW_LINE +
-            "   - object instance has properties which are not allowed by the schema: [\"extra_field\"]" + NEW_LINE +
+            "   - $.extra_field: is not defined in the schema and the schema does not allow additional properties" + NEW_LINE +
             "  " + NEW_LINE +
-            "  " + OPEN_API_SPECIFICATION_URL);
+            "  " + OPEN_API_SPECIFICATION_URL.replaceAll(NEW_LINE, NEW_LINE + "  " ));
 
         // when
         new HttpResponseSerializer(new MockServerLogger()).deserialize(requestBytes);

File: mockserver-core/src/test/java/org/mockserver/serialization/OpenAPIExpectationSerializerIntegrationTest.java
Patch:
@@ -56,9 +56,9 @@ public void shouldIgnoreExtraFields() {
             " schema validation errors:" + NEW_LINE +
             "" + NEW_LINE +
             "  1 error:" + NEW_LINE +
-            "   - object instance has properties which are not allowed by the schema: [\"extra_field\"]" + NEW_LINE +
+            "   - $.extra_field: is not defined in the schema and the schema does not allow additional properties" + NEW_LINE +
             "  " + NEW_LINE +
-            "  " + OPEN_API_SPECIFICATION_URL);
+            "  " + OPEN_API_SPECIFICATION_URL.replaceAll(NEW_LINE, NEW_LINE + "  " ));
 
         // when
         new OpenAPIExpectationSerializer(new MockServerLogger()).deserialize(requestBytes);

File: mockserver-core/src/test/java/org/mockserver/serialization/VerificationSequenceSerializationErrorsTest.java
Patch:
@@ -129,9 +129,9 @@ public void shouldHandleExceptionWhileDeserializingObjectWithExpectationIdsAndRe
                 " schema validation errors:" + NEW_LINE +
                 "" + NEW_LINE +
                 "  1 error:" + NEW_LINE +
-                "   - instance failed to match exactly one schema (matched 2 out of 2)" + NEW_LINE +
+                "   - $: should be valid to one and only one of the schemas but more than one schemas {{\"required\":[\"expectationIds\"]}{\"required\":[\"httpRequests\"]}} are valid " + NEW_LINE +
                 "  " + NEW_LINE +
-                "  " + OPEN_API_SPECIFICATION_URL));
+                "  " + OPEN_API_SPECIFICATION_URL.replaceAll(NEW_LINE, NEW_LINE + "  " )));
         }
     }
 

File: mockserver-core/src/test/java/org/mockserver/serialization/VerificationSerializationErrorsTest.java
Patch:
@@ -116,9 +116,9 @@ public void shouldHandleExceptionWhileDeserializingObjectWithExpectationIdsAndRe
                 " schema validation errors:" + NEW_LINE +
                 "" + NEW_LINE +
                 "  1 error:" + NEW_LINE +
-                "   - instance failed to match exactly one schema (matched 2 out of 2)" + NEW_LINE +
+                "   - $: should be valid to one and only one of the schemas but more than one schemas {{\"required\":[\"expectationId\"]}{\"required\":[\"httpRequest\"]}} are valid " + NEW_LINE +
                 "  " + NEW_LINE +
-                "  " + OPEN_API_SPECIFICATION_URL));
+                "  " + OPEN_API_SPECIFICATION_URL.replaceAll(NEW_LINE, NEW_LINE + "  " )));
         }
     }
 

File: mockserver-junit-rule/src/main/java/org/mockserver/junit/MockServerRule.java
Patch:
@@ -11,6 +11,7 @@
 import java.lang.reflect.Field;
 import java.util.List;
 
+@SuppressWarnings("FieldMayBeFinal")
 public class MockServerRule implements TestRule {
 
     @VisibleForTesting

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/AbstractClientAuthenticationMockingIntegrationTest.java
Patch:
@@ -6,7 +6,6 @@
 import org.apache.http.client.utils.URIBuilder;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.util.EntityUtils;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.socket.tls.KeyStoreFactory;
@@ -120,7 +119,6 @@ public void shouldReturnResponseInHttpsApacheClient() throws Exception {
     }
 
     @Test
-    @Ignore("need to investigate why this is failing after changes to uniqueCertificateChainSSLContext() that work correctly for numerous other tests")
     public void shouldFailToAuthenticateInHttpsApacheClient() {
         // given
         mockServerClient

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIParser.java
Patch:
@@ -66,13 +66,13 @@ public static OpenAPI buildOpenAPI(String specUrlOrPayload) {
                     }
                 }
             } catch (Throwable throwable) {
-                throw new IllegalArgumentException(OPEN_API_LOAD_ERROR + (isNotBlank(throwable.getMessage()) ? ", " + throwable.getMessage() : ", " + Joiner.on(", ").skipNulls().join(errorMessage)), throwable);
+                throw new IllegalArgumentException(OPEN_API_LOAD_ERROR + (errorMessage.isEmpty() ? ", " + throwable.getMessage() : ", " + Joiner.on(", ").skipNulls().join(errorMessage)), throwable);
             }
             if (openAPI != null) {
                 try {
                     openAPI = resolve(openAPI, auths, specUrlOrPayload);
                 } catch (Throwable throwable) {
-                    throw new IllegalArgumentException(OPEN_API_LOAD_ERROR + (isNotBlank(throwable.getMessage()) ? ", " + throwable.getMessage() : ", " + Joiner.on(", ").skipNulls().join(errorMessage)), throwable);
+                    throw new IllegalArgumentException(OPEN_API_LOAD_ERROR + (errorMessage.isEmpty() ? ", " + throwable.getMessage() : ", " + Joiner.on(", ").skipNulls().join(errorMessage)), throwable);
                 }
             } else {
                 if (swaggerParseResult != null) {

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -55,7 +55,6 @@ public KeyStoreFactory(MockServerLogger mockServerLogger) {
         this.keyAndCertificateFactory = createKeyAndCertificateFactory(mockServerLogger);
     }
 
-    @SuppressWarnings("InfiniteRecursion")
     public synchronized SSLContext sslContext() {
         if (keyAndCertificateFactory.certificateNotYetCreated()) {
             keyAndCertificateFactory.buildAndSavePrivateKeyAndX509Certificate();

File: mockserver-core/src/main/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngine.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author jamesdbloom
  */
-@SuppressWarnings({"RedundantSuppression", "deprecation", "removal"})
+@SuppressWarnings({"RedundantSuppression", "deprecation", "removal", "FieldMayBeFinal"})
 public class JavaScriptTemplateEngine implements TemplateEngine {
 
     private static final ObjectMapper OBJECT_MAPPER = ObjectMapperFactory.createObjectMapper();

File: mockserver-core/src/test/java/org/mockserver/socket/PortFactoryTest.java
Patch:
@@ -20,4 +20,5 @@ public void shouldFindFreePort() throws IOException {
         // then
         assertTrue(new ServerSocket(freePort).isBound());
     }
+
 }

File: mockserver-core/src/test/java/org/mockserver/validator/xmlschema/XmlSchemaValidatorTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.text.MessageFormat;
 
 import static junit.framework.TestCase.fail;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -182,7 +183,7 @@ public void shouldHandleEmptyExpectation() {
     @Test
     public void shouldHandleNullTest() {
         // given
-        assertThat(new XmlSchemaValidator(new MockServerLogger(), XML_SCHEMA).isValid(null), is("NullPointerException - null"));
+        assertThat(new XmlSchemaValidator(new MockServerLogger(), XML_SCHEMA).isValid(null), containsString("NullPointerException - "));
     }
 
     @Test

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/AbstractClientAuthenticationMockingIntegrationTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.apache.http.client.utils.URIBuilder;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.util.EntityUtils;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.socket.tls.KeyStoreFactory;
@@ -119,6 +120,7 @@ public void shouldReturnResponseInHttpsApacheClient() throws Exception {
     }
 
     @Test
+    @Ignore("need to investigate why this is failing after changes to uniqueCertificateChainSSLContext() that work correctly for numerous other tests")
     public void shouldFailToAuthenticateInHttpsApacheClient() {
         // given
         mockServerClient
@@ -139,7 +141,7 @@ public void shouldFailToAuthenticateInHttpsApacheClient() {
             httpClient.execute(new HttpPost(new URIBuilder()
                 .setScheme("https")
                 .setHost("localhost")
-                .setPort(getServerPort())
+                .setPort(getServerSecurePort())
                 .setPath(calculatePath("some_path"))
                 .build()));
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyContentLengthIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.netty.integration.proxy.http;
 
+import com.google.common.collect.ImmutableList;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import org.junit.AfterClass;
@@ -90,10 +91,10 @@ public void shouldHandleProxiedResponseWithoutContentLength() throws Exception {
         HttpResponse httpResponse = new NettyHttpClient(
             new MockServerLogger(),
             clientEventLoopGroup,
-            proxyConfiguration(
+            ImmutableList.of(proxyConfiguration(
                 ProxyConfiguration.Type.HTTPS,
                 "localhost:" + proxyClientAndServer.getPort()
-            ), false)
+            )), false)
             .sendRequest(
                 request()
                     .withPath("/noContentLengthHeader")

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/BodyDTODeserializer.java
Patch:
@@ -302,6 +302,9 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
         } else if (currentToken == JsonToken.VALUE_STRING) {
             result = new StringBodyDTO(new StringBody(jsonParser.getText()));
         }
+        if (result == null && jsonParser.currentToken() == JsonToken.END_OBJECT) {
+            result = new JsonBodyDTO(JsonBody.json("{ }"));
+        }
         if (result != null) {
             result.withOptional(optional);
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/BodyWithContentTypeDTODeserializer.java
Patch:
@@ -216,6 +216,9 @@ public BodyWithContentTypeDTO deserialize(JsonParser jsonParser, Deserialization
         } else if (currentToken == JsonToken.VALUE_STRING) {
             result = new StringBodyDTO(new StringBody(jsonParser.getText()));
         }
+        if (result == null && jsonParser.currentToken() == JsonToken.END_OBJECT) {
+            result = new JsonBodyDTO(JsonBody.json("{ }"));
+        }
         if (result != null) {
             result.withOptional(optional);
         }

File: mockserver-core/src/test/java/org/mockserver/codec/BodyDecoderEncoderTest.java
Patch:
@@ -13,7 +13,7 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.BinaryBody.binary;
 import static org.mockserver.model.JsonBody.json;
 import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;

File: mockserver-core/src/test/java/org/mockserver/codec/BodyServletDecoderEncoderTest.java
Patch:
@@ -22,7 +22,7 @@
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.mockserver.model.BinaryBody.binary;

File: mockserver-core/src/test/java/org/mockserver/collections/CircularConcurrentLinkedDequeTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.Matchers.contains;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/collections/CircularPriorityQueueTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.hamcrest.Matchers.*;
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.mock.Expectation.when;
 import static org.mockserver.mock.SortableExpectationId.EXPECTATION_SORTABLE_PRIORITY_COMPARATOR;
 import static org.mockserver.model.HttpRequest.request;

File: mockserver-core/src/test/java/org/mockserver/cors/CORSHeadersTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.cors.CORSHeaders.isPreflightRequest;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;

File: mockserver-core/src/test/java/org/mockserver/formatting/StringFormatterTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.nio.charset.StandardCharsets;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.formatting.StringFormatter.formatBytes;
 import static org.mockserver.model.HttpForward.forward;

File: mockserver-core/src/test/java/org/mockserver/log/MockServerEventLogRequestLogEntryVerificationSequenceTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.log.model.LogEntry.LogMessageType.RECEIVED_REQUEST;

File: mockserver-core/src/test/java/org/mockserver/log/MockServerEventLogRequestLogEntryVerificationTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.log.model.LogEntry.LogMessageType.RECEIVED_REQUEST;

File: mockserver-core/src/test/java/org/mockserver/mappers/MockServerHttpResponseToHttpServletResponseEncoderCookieHeaderTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/model/CookiesTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsIterableContaining.hasItems;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Cookie.cookie;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;

File: mockserver-core/src/test/java/org/mockserver/model/HeadersTest.java
Patch:
@@ -10,7 +10,7 @@
 import static junit.framework.TestCase.assertFalse;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsIterableContaining.hasItems;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.mockserver.model.Header.header;
 import static org.mockserver.model.NottableString.not;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithErrorSerializerTest.java
Patch:
@@ -24,7 +24,7 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithForwardClassCallbackSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithForwardObjectCallbackSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithForwardSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithForwardTemplateSerializerTest.java
Patch:
@@ -24,7 +24,7 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithOverrideForwardedRequestSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithResponseClassCallbackSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithResponseObjectCallbackSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithResponseSerializerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationWithResponseTemplateSerializerTest.java
Patch:
@@ -24,7 +24,7 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/serialization/OpenAPIExpectationSerializerIntegrationTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.mock.OpenAPIExpectation.openAPIExpectation;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;

File: mockserver-core/src/test/java/org/mockserver/serialization/curl/HttpRequestToCurlSerializerTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static io.netty.handler.codec.http.HttpHeaderNames.HOST;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.Parameter.param;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/body/ParameterBodyDTODeserializerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.io.IOException;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/condition/TimeToLiveDeserializerTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/condition/VerificationTimesDTODeserializerTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/expectation/OpenAPIExpectationDTODeserializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.serialization.model.OpenAPIExpectationDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.mock.OpenAPIExpectation.openAPIExpectation;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/request/RequestDefinitionDTODeserializerTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.file.FileReader.openStreamToFileFromClassPathOrPath;
 import static org.mockserver.model.BinaryBody.binary;

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/string/NottableStringDeserializerTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.IOException;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.NottableSchemaString.schemaString;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/BinaryBodyDTOSerializerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class BinaryBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/BinaryBodySerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class BinaryBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonBodyDTOSerializerTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.nio.charset.StandardCharsets;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class JsonBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonPathBodyDTOSerializerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.serialization.model.JsonPathBodyDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class JsonPathBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonPathBodySerializerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class JsonPathBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonSchemaBodyDTOSerializerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockserver.serialization.model.JsonSchemaBodyDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class JsonSchemaBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonSchemaBodySerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class JsonSchemaBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/ParameterBodyDTOSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.IOException;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/ParameterBodySerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.IOException;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/RegexBodyDTOSerializerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.model.RegexBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class RegexBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/RegexBodySerializerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.model.RegexBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class RegexBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/StringBodyDTOSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.model.StringBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class StringBodyDTOSerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/StringBodySerializerTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.nio.charset.StandardCharsets;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class StringBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XPathBodyDTOSerializerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.model.XPathBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class XPathBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XPathBodySerializerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.model.XPathBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class XPathBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XmlBodyDTOSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.model.XmlBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class XmlBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XmlBodySerializerTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.nio.charset.StandardCharsets;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class XmlBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XmlSchemaBodyDTOSerializerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.model.XmlSchemaBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class XmlSchemaBodyDTOSerializerTest {
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XmlSchemaBodySerializerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.model.XmlSchemaBody;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.model.Not.not;
 
 public class XmlSchemaBodySerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/condition/VerificationTimesDTOSerializerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.serialization.model.VerificationTimesDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.verify.VerificationTimes.*;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/condition/VerificationTimesSerializerTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.verify.VerificationTimes.*;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/expectation/OpenAPIExpectationDTOSerializerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockserver.serialization.model.OpenAPIExpectationDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.mock.OpenAPIExpectation.openAPIExpectation;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/expectation/OpenAPIExpectationSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.mock.OpenAPIExpectation.openAPIExpectation;
 import static org.mockserver.model.OpenAPIDefinition.openAPI;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/HttpRequestDTOSerializerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockserver.serialization.model.HttpRequestDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.JsonBody.json;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/HttpRequestSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.JsonBody.json;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/OpenAPIDefinitionDTOSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.serialization.model.OpenAPIDefinitionDTO;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.OpenAPIDefinition.openAPI;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/OpenAPIDefinitionSerializerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.OpenAPIDefinition.openAPI;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/HttpResponseDTOSerializerTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.ConnectionOptions.connectionOptions;
 import static org.mockserver.model.HttpResponse.response;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/HttpResponseSerializerTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.HttpResponse.response;
 import static org.mockserver.model.JsonBody.json;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/TimeToLiveDTOSerializerTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 
 public class TimeToLiveDTOSerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/TimeToLiveSerializerTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 
 public class TimeToLiveSerializerTest {

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/TimesSerializerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.matchers.Times.*;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/string/NottableStringSerializerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.NottableSchemaString.schemaString;

File: mockserver-core/src/test/java/org/mockserver/url/URLParserTest.java
Patch:
@@ -4,7 +4,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 /**
@@ -38,7 +38,7 @@ public void shouldReturnPath() {
         assertThat(URLParser.returnPath("/some/path"), is("/some/path"));
         assertThat(URLParser.returnPath("/123/456"), is("/123/456"));
     }
-    
+
     @Test
     public void shouldStripQueryString() {
         assertThat(URLParser.returnPath("http://www.mock-server.com/some/path?foo=bar"), is("/some/path"));

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidatorIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static java.util.concurrent.TimeUnit.MICROSECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.Cookie.cookie;
 import static org.mockserver.model.Header.header;

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestAndHttpResponseValidatorIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.validator.jsonschema.JsonSchemaHttpRequestAndHttpResponseValidator.jsonSchemaHttpRequestAndHttpResponseValidator;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestValidatorIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.BinaryBody.binary;
 import static org.mockserver.model.HttpRequest.request;

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpResponseValidatorIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.validator.jsonschema.JsonSchemaHttpResponseValidator.jsonSchemaHttpResponseValidator;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaValidatorTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidatorIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;
 import static org.mockserver.validator.jsonschema.JsonSchemaVerificationSequenceValidator.jsonSchemaVerificationSequenceValidator;

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidatorIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.validator.jsonschema.JsonSchemaHttpRequestValidator.jsonSchemaHttpRequestValidator;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;

File: mockserver-core/src/test/java/org/mockserver/validator/xmlschema/XmlSchemaValidatorTest.java
Patch:
@@ -14,7 +14,7 @@
 import static junit.framework.TestCase.fail;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.MockitoAnnotations.openMocks;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.XmlSchemaBody.xmlSchemaFromResource;

File: mockserver-junit-rule/src/test/java/org/mockserver/junit/MockServerClassRuleTestWithMocks.java
Patch:
@@ -14,7 +14,7 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 

File: mockserver-junit-rule/src/test/java/org/mockserver/junit/MockServerRuleClientGetterTest.java
Patch:
@@ -6,7 +6,7 @@
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-junit-rule/src/test/java/org/mockserver/junit/MockServerRuleSubClassTest.java
Patch:
@@ -6,7 +6,7 @@
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-junit-rule/src/test/java/org/mockserver/junit/MockServerRuleTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
 import static org.hamcrest.core.IsSame.sameInstance;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  * @author jamesdbloom

File: mockserver-junit-rule/src/test/java/org/mockserver/junit/MockServerRuleTestWithMocks.java
Patch:
@@ -15,7 +15,7 @@
 import static org.hamcrest.Matchers.sameInstance;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.openMocks;
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileSystemPersistenceIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@
 import static io.netty.handler.codec.http.HttpHeaderNames.HOST;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileWatcherIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationInitializerIntegrationTest.java
Patch:
@@ -16,8 +16,8 @@
 
 import static io.netty.handler.codec.http.HttpHeaderNames.HOST;
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
-import static org.junit.Assert.assertThat;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.stop.Stop.stopQuietly;
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyContentLengthIntegrationTest.java
Patch:
@@ -16,7 +16,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.integration.ClientAndServer.startClientAndServer;
 import static org.mockserver.model.ConnectionOptions.connectionOptions;

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/direct/DirectProxyUnificationHandlerTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.slf4j.event.Level.TRACE;
 

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerSOCKSErrorTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.slf4j.event.Level.TRACE;

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class HttpProxyUnificationInitializerTest {

File: mockserver-spring-test-listener/src/test/java/org/mockserver/springtest/MockServerPropertyCustomizerTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 @RunWith(SpringRunner.class)
 @MockServerTest("server.url.path-b=http://localhost:${mockServerPort}/b")

File: mockserver-spring-test-listener/src/test/java/org/mockserver/springtest/MockServerTestExecutionListenerTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 @MockServerTest
 @RunWith(SpringRunner.class)

File: mockserver-spring-test-listener/src/main/java/org/mockserver/springtest/MockServerPropertyCustomizer.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.util.SocketUtils;
 
 import java.util.List;
+import java.util.Objects;
 import java.util.regex.Pattern;
 
 public class MockServerPropertyCustomizer implements ContextCustomizer {
@@ -34,8 +35,10 @@ public void customizeContext(ConfigurableApplicationContext context, MergedConte
 
                 TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, replacement);
             }
+        );
     }
 
+
     @Override
     public boolean equals(Object other) {
         if (this == other) {

File: mockserver-core/src/main/java/org/mockserver/mock/HttpState.java
Patch:
@@ -162,7 +162,6 @@ public void clear(HttpRequest request) {
             );
             throw new IllegalArgumentException("\"" + request.getFirstQueryStringParameter("type") + "\" is not a valid value for \"type\" parameter, only the following values are supported " + Arrays.stream(ClearType.values()).map(input -> input.name().toLowerCase()).collect(Collectors.toList()));
         }
-        System.gc();
     }
 
     private RequestDefinition resolveExpectationId(ExpectationId expectationId) {
@@ -193,7 +192,6 @@ public void reset() {
                     .setMessageFormat("resetting all expectations and request logs")
             );
         }
-        System.gc();
         new Scheduler.SchedulerThreadFactory("MockServer Memory Metrics").newThread(() -> {
             try {
                 SECONDS.sleep(10);

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/PortUnificationHandler.java
Patch:
@@ -355,15 +355,15 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable throwable) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(Level.WARN)
-                            .setMessageFormat("TSL handshake failure:" + NEW_LINE + NEW_LINE + " Client does not trust MockServer Certificate Authority for:{}See http://mock-server.com/mock_server/HTTPS_TLS.html to enable the client to trust MocksServer Certificate Authority." + NEW_LINE)
+                            .setMessageFormat("TLS handshake failure:" + NEW_LINE + NEW_LINE + " Client does not trust MockServer Certificate Authority for:{}See http://mock-server.com/mock_server/HTTPS_TLS.html to enable the client to trust MocksServer Certificate Authority." + NEW_LINE)
                             .setArguments(ctx.channel())
                     );
                 }
             } else if (!throwable.getMessage().contains("close_notify during handshake")) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(Level.ERROR)
-                        .setMessageFormat("TSL handshake failure while a client attempted to connect to " + ctx.channel())
+                        .setMessageFormat("TLS handshake failure while a client attempted to connect to " + ctx.channel())
                         .setThrowable(throwable)
                 );
             }

File: mockserver-netty/src/test/java/org/mockserver/cors/OverridePreFlightRequestIntegrationTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldReturnDefaultPreFlightResponse() throws Exception {
         // then
         HttpResponse response = responseFuture.get(10, TimeUnit.SECONDS);
         assertThat(response.getStatusCode(), is(200));
-        assertThat(response.getHeader("access-control-allow-origin"), containsInAnyOrder("*"));
+        assertThat(response.getHeader("access-control-allow-origin"), containsInAnyOrder("http://127.0.0.1:1234"));
         assertThat(response.getHeader("access-control-allow-methods"), containsInAnyOrder("CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE"));
         assertThat(response.getHeader("access-control-allow-headers"), containsInAnyOrder("Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization"));
         assertThat(response.getHeader("access-control-expose-headers"), containsInAnyOrder("Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization"));
@@ -101,7 +101,7 @@ public void shouldReturnDefaultPreFlightResponseForPathRequestWithExtraHeaders()
         // then
         HttpResponse httpResponse = responseFuture.get(10, TimeUnit.SECONDS);
         assertThat(httpResponse.getStatusCode(), is(200));
-        assertThat(httpResponse.getHeader("access-control-allow-origin"), containsInAnyOrder("*"));
+        assertThat(httpResponse.getHeader("access-control-allow-origin"), containsInAnyOrder("http://localhost:8000"));
         assertThat(httpResponse.getHeader("access-control-allow-methods"), containsInAnyOrder("CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE"));
         assertThat(httpResponse.getHeader("access-control-allow-headers"), containsInAnyOrder("Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization, extra-header, other-extra-header"));
         assertThat(httpResponse.getHeader("access-control-expose-headers"), containsInAnyOrder("Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization, extra-header, other-extra-header"));

File: mockserver-netty/src/test/java/org/mockserver/cors/OverridePreFlightRequestIntegrationTest.java
Patch:
@@ -101,7 +101,7 @@ public void shouldReturnDefaultPreFlightResponseForPathRequestWithExtraHeaders()
         // then
         HttpResponse httpResponse = responseFuture.get(10, TimeUnit.SECONDS);
         assertThat(httpResponse.getStatusCode(), is(200));
-        assertThat(httpResponse.getHeader("access-control-allow-origin"), containsInAnyOrder("*"));
+        assertThat(httpResponse.getHeader("access-control-allow-origin"), containsInAnyOrder("http://localhost:8000"));
         assertThat(httpResponse.getHeader("access-control-allow-methods"), containsInAnyOrder("CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE"));
         assertThat(httpResponse.getHeader("access-control-allow-headers"), containsInAnyOrder("Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization, extra-header, other-extra-header"));
         assertThat(httpResponse.getHeader("access-control-expose-headers"), containsInAnyOrder("Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization, extra-header, other-extra-header"));

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -511,12 +511,12 @@ public static void rebuildServerTLSContext(boolean rebuildServerTLSContext) {
      * <pre>&lt;dependency&gt;
      *   &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
      *   &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
-     *   &lt;version&gt;1.67&lt;/version&gt;
+     *   &lt;version&gt;1.69&lt;/version&gt;
      * &lt;/dependency&gt;
      * &lt;dependency&gt;
      *   &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
      *   &lt;artifactId&gt;bcpkix-jdk15on&lt;/artifactId&gt;
-     *   &lt;version&gt;1.67&lt;/version&gt;
+     *   &lt;version&gt;1.69&lt;/version&gt;
      * &lt;/dependency&gt;</pre>
      *
      * @param enable enable BouncyCastle instead of the Java JDK to generate Certificate and Keys

File: mockserver-core/src/main/java/org/mockserver/model/MediaType.java
Patch:
@@ -254,6 +254,8 @@ public boolean isCompatible(MediaType other) {
     public boolean isJson() {
         return !isBlank && contentTypeContains(new String[]{
             "json"
+        }) && !contentTypeContains(new String[]{
+            "ndjson"
         });
     }
 

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactoryFactory.java
Patch:
@@ -34,12 +34,12 @@ public static KeyAndCertificateFactory createKeyAndCertificateFactory(MockServer
                         .setArguments("<dependency>\n" +
                             "    <groupId>org.bouncycastle</groupId>\n" +
                             "    <artifactId>bcprov-jdk15on</artifactId>\n" +
-                            "    <version>1.67</version>\n" +
+                            "    <version>1.69</version>\n" +
                             "</dependency>\n" +
                             "<dependency>\n" +
                             "    <groupId>org.bouncycastle</groupId>\n" +
                             "    <artifactId>bcpkix-jdk15on</artifactId>\n" +
-                            "    <version>1.67</version>\n" +
+                            "    <version>1.69</version>\n" +
                             "</dependency>")
                 );
             }

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidator.java
Patch:
@@ -19,7 +19,8 @@ private JsonSchemaVerificationSequenceValidator(MockServerLogger mockServerLogge
             "stringOrJsonSchema",
             "body",
             "keyToMultiValue",
-            "keyToValue"
+            "keyToValue",
+            "socketAddress"
         );
     }
 

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidator.java
Patch:
@@ -20,7 +20,8 @@ private JsonSchemaVerificationValidator(MockServerLogger mockServerLogger) {
             "body",
             "keyToMultiValue",
             "keyToValue",
-            "verificationTimes"
+            "verificationTimes",
+            "socketAddress"
         );
     }
 

File: mockserver-core/src/test/java/org/mockserver/serialization/HttpRequestSerializerIntegrationTest.java
Patch:
@@ -1155,8 +1155,8 @@ public void shouldSerializeParameterBody() {
             "  \"body\" : {" + NEW_LINE +
             "    \"type\" : \"PARAMETERS\"," + NEW_LINE +
             "    \"parameters\" : {" + NEW_LINE +
-            "      \"nameOne\" : [ \"valueOne\" ]," + NEW_LINE +
-            "      \"nameTwo\" : [ \"valueTwo_One\", \"valueTwo_Two\" ]" + NEW_LINE +
+            "      \"nameTwo\" : [ \"valueTwo_One\", \"valueTwo_Two\" ]," + NEW_LINE +
+            "      \"nameOne\" : [ \"valueOne\" ]" + NEW_LINE +
             "    }" + NEW_LINE +
             "  }" + NEW_LINE +
             "}", jsonHttpRequest);

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/collections/HeadersSerializerTest.java
Patch:
@@ -26,8 +26,8 @@ public class HeadersSerializerTest {
     public void shouldSerializeCompleteObject() throws IOException {
         // given
         String expectedString = "{" + NEW_LINE +
-            "  \"some_name\" : [ \"some_value\", \"some_other_value\" ]," + NEW_LINE +
-            "  \"some_other_name\" : [ \"some_value\", \"!some_other_value\" ]" + NEW_LINE +
+            "  \"some_other_name\" : [ \"some_value\", \"!some_other_value\" ]," + NEW_LINE +
+            "  \"some_name\" : [ \"some_value\", \"some_other_value\" ]" + NEW_LINE +
             "}";
 
         // when

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/HttpRequestDTOSerializerTest.java
Patch:
@@ -393,8 +393,8 @@ public void shouldReturnJsonWithParameterBodyInToString() throws JsonProcessingE
                 "  \"body\" : {" + NEW_LINE +
                 "    \"type\" : \"PARAMETERS\"," + NEW_LINE +
                 "    \"parameters\" : {" + NEW_LINE +
-                "      \"path_parameterOneName\" : [ \"path_parameterOneValueOne\", \"path_parameterOneValueTwo\" ]," + NEW_LINE +
-                "      \"path_parameterTwoName\" : [ \"path_parameterTwoValue\" ]" + NEW_LINE +
+                "      \"path_parameterTwoName\" : [ \"path_parameterTwoValue\" ]," + NEW_LINE +
+                "      \"path_parameterOneName\" : [ \"path_parameterOneValueOne\", \"path_parameterOneValueTwo\" ]" + NEW_LINE +
                 "    }" + NEW_LINE +
                 "  }" + NEW_LINE +
                 "}")

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/AbstractExtendedNettyMockingIntegrationTest.java
Patch:
@@ -885,8 +885,8 @@ public void shouldForwardByObjectCallbackViaLocalJVMWithPathVariables() {
                     header("x-test", "test_headers_and_body")
                 )
                 .withBody("some_overridden_body {" + NEW_LINE +
-                    "  \"variableOne\" : [ \"variableOneValue\" ]," + NEW_LINE +
-                    "  \"variableTwo\" : [ \"variableTwoValue\" ]" + NEW_LINE +
+                    "  \"variableTwo\" : [ \"variableTwoValue\" ]," + NEW_LINE +
+                    "  \"variableOne\" : [ \"variableOneValue\" ]" + NEW_LINE +
                     "}"),
             makeRequest(
                 request()

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/DirectProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -169,8 +169,8 @@ public void shouldReturnExpectationForTargetMockServer() throws Exception {
                 "    \"statusCode\" : 200," + NEW_LINE +
                 "    \"reasonPhrase\" : \"OK\"," + NEW_LINE +
                 "    \"headers\" : {" + NEW_LINE +
-                "      \"connection\" : [ \"keep-alive\" ]," + NEW_LINE +
-                "      \"content-length\" : [ \"15\" ]" + NEW_LINE +
+                "      \"content-length\" : [ \"15\" ]," + NEW_LINE +
+                "      \"connection\" : [ \"keep-alive\" ]" + NEW_LINE +
                 "    }," + NEW_LINE +
                 "    \"body\" : \"target_response\"" + NEW_LINE +
                 "  }" + NEW_LINE +

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -519,8 +519,8 @@ private void proxyRequestsUsingSocketViaSOCKS5(EchoServer echoServer, Socket soc
         assertThat(new String(echoServerResponse, StandardCharsets.UTF_8), startsWith("" +
             "HTTP/1.1 200 OK\r\n" +
             "accept-encoding: gzip,deflate\r\n" +
-            "content-length: 0\r\n" +
             "connection: keep-alive\r\n" +
+            "content-length: 0\r\n" +
             "\r\n"
         ));
 

File: mockserver-netty/src/main/java/org/mockserver/dashboard/serializers/DescriptionProcessor.java
Patch:
@@ -62,7 +62,7 @@ public Description description(Object object, String id) {
             }
         } else if (object instanceof DashboardLogEntryDTO) {
             DashboardLogEntryDTO logEntryDTO = (DashboardLogEntryDTO) object;
-            description = new LogMessageDescription(idMessage + StringUtils.substringAfter(logEntryDTO.getTimestamp(), "-"), logEntryDTO.getType().name(), this);
+            description = new LogMessageDescription(idMessage + StringUtils.substringAfter(logEntryDTO.getTimestamp(), "-"), logEntryDTO.getType() != null ? logEntryDTO.getType().name() : "", this);
             if (description.length() >= maxLogEventLength) {
                 maxLogEventLength = description.length();
             }

File: mockserver-core/src/main/java/org/mockserver/mappers/FullHttpRequestToMockServerHttpRequest.java
Patch:
@@ -81,7 +81,7 @@ private void setPath(HttpRequest httpRequest, FullHttpRequest fullHttpRequest) {
 
     private void setQueryString(HttpRequest httpRequest, FullHttpRequest fullHttpRequest) {
         if (fullHttpRequest.uri().contains("?")) {
-            httpRequest.withQueryStringParameters(formParameterParser.retrieveFormParameters(fullHttpRequest.uri(), true));
+            httpRequest.withQueryStringParameters(formParameterParser.retrieveQueryParameters(fullHttpRequest.uri(), true));
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletRequestToMockServerHttpRequestDecoder.java
Patch:
@@ -55,7 +55,7 @@ private void setPath(HttpRequest httpRequest, HttpServletRequest httpServletRequ
     private void setQueryString(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {
         Parameters parameters;
         if (isNotBlank(httpServletRequest.getQueryString())) {
-            parameters = formParameterParser.retrieveFormParameters(httpServletRequest.getQueryString(), false);
+            parameters = formParameterParser.retrieveQueryParameters(httpServletRequest.getQueryString(), false);
         } else {
             parameters = new Parameters();
         }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/ClientAuthenticationDynamicCAMockingIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@ public class ClientAuthenticationDynamicCAMockingIntegrationTest extends Abstrac
     public static void startServer() throws Exception {
         tlsMutualAuthenticationRequired(true);
         dynamicallyCreateCertificateAuthorityCertificate(true);
-        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent() + UUIDService.getUUID());
+        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent(), UUIDService.getUUID());
         temporaryDirectory.mkdirs();
         directoryToSaveDynamicSSLCertificate(temporaryDirectory.getAbsolutePath());
         Main.main("-serverPort", "" + severHttpPort);

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/bouncycastle/ClientAuthenticationDynamicCAMockingIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@ public class ClientAuthenticationDynamicCAMockingIntegrationTest extends Abstrac
     @SuppressWarnings("ResultOfMethodCallIgnored")
     public static void startServer() throws Exception {
         // temporary directory
-        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent() + UUIDService.getUUID());
+        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent(), UUIDService.getUUID());
         temporaryDirectory.mkdirs();
 
         useBouncyCastleForKeyAndCertificateGeneration(true);

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/ClientAuthenticationDynamicCAMockingIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@ public class ClientAuthenticationDynamicCAMockingIntegrationTest extends Abstrac
     public static void startServer() throws Exception {
         tlsMutualAuthenticationRequired(true);
         dynamicallyCreateCertificateAuthorityCertificate(true);
-        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent() + UUIDService.getUUID());
+        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent(), UUIDService.getUUID());
         temporaryDirectory.mkdirs();
         directoryToSaveDynamicSSLCertificate(temporaryDirectory.getAbsolutePath());
         Main.main("-serverPort", "" + severHttpPort);

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/bouncycastle/ClientAuthenticationDynamicCAMockingIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@ public class ClientAuthenticationDynamicCAMockingIntegrationTest extends Abstrac
     @SuppressWarnings("ResultOfMethodCallIgnored")
     public static void startServer() throws Exception {
         // temporary directory
-        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent() + UUIDService.getUUID());
+        File temporaryDirectory = new File(File.createTempFile("random", "temp").getParent(), UUIDService.getUUID());
         temporaryDirectory.mkdirs();
 
         useBouncyCastleForKeyAndCertificateGeneration(true);

File: mockserver-core/src/main/java/org/mockserver/mappers/FullHttpRequestToMockServerHttpRequest.java
Patch:
@@ -81,7 +81,7 @@ private void setPath(HttpRequest httpRequest, FullHttpRequest fullHttpRequest) {
 
     private void setQueryString(HttpRequest httpRequest, FullHttpRequest fullHttpRequest) {
         if (fullHttpRequest.uri().contains("?")) {
-            httpRequest.withQueryStringParameters(formParameterParser.retrieveFormParameters(fullHttpRequest.uri(), true));
+            httpRequest.withQueryStringParameters(formParameterParser.retrieveQueryParameters(fullHttpRequest.uri(), true));
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletRequestToMockServerHttpRequestDecoder.java
Patch:
@@ -55,7 +55,7 @@ private void setPath(HttpRequest httpRequest, HttpServletRequest httpServletRequ
     private void setQueryString(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {
         Parameters parameters;
         if (isNotBlank(httpServletRequest.getQueryString())) {
-            parameters = formParameterParser.retrieveFormParameters(httpServletRequest.getQueryString(), false);
+            parameters = formParameterParser.retrieveQueryParameters(httpServletRequest.getQueryString(), false);
         } else {
             parameters = new Parameters();
         }

File: mockserver-core/src/test/java/org/mockserver/matchers/HttpRequestsPropertiesMatcherTest.java
Patch:
@@ -14,6 +14,7 @@
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNull.nullValue;
+import static org.hamcrest.core.StringContains.containsString;
 import static org.junit.Assert.*;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.matchers.MatchDifference.Field.*;
@@ -6036,7 +6037,7 @@ public void shouldHandleInvalidOpenAPIUrl() {
             // then
             fail("expected exception");
         } catch (IllegalArgumentException iae) {
-            assertThat(iae.getMessage(), is("Unable to load API spec, Unable to read location `org/mockserver/mock/does_not_exist.json`"));
+            assertThat(iae.getMessage(), containsString("Unable to load API spec, Unable to read location `org/mockserver/mock/does_not_exist.json`"));
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/AbstractHttpRequestMatcher.java
Patch:
@@ -76,7 +76,7 @@ public boolean matches(RequestDefinition requestDefinition) {
     }
 
     @Override
-    public abstract boolean matches(MatchDifference matchDifference, RequestDefinition requestDefinition);
+    public abstract boolean matches(MatchDifference context, RequestDefinition requestDefinition);
 
     @Override
     public Expectation getExpectation() {

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -12,7 +12,7 @@ public interface HttpRequestMatcher extends Matcher<RequestDefinition> {
 
     boolean matches(final RequestDefinition request);
 
-    boolean matches(MatchDifference matchDifference, RequestDefinition httpRequest);
+    boolean matches(MatchDifference context, RequestDefinition httpRequest);
 
     Expectation getExpectation();
 

File: mockserver-netty/src/main/java/org/mockserver/integration/ClientAndServer.java
Patch:
@@ -101,7 +101,7 @@ public boolean hasStarted() {
     public Future stopAsync() {
         Future<String> stopAsync = mockServer.stopAsync();
         if (stopAsync instanceof CompletableFuture) {
-            ((CompletableFuture<String>) stopAsync).thenAccept(ignore -> super.stop());
+            ((CompletableFuture<String>) stopAsync).thenAccept(ignore -> super.stop(true));
         } else {
             // no need to wait for client to clean up event loop
             super.stopAsync();

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -223,6 +223,4 @@ public void shouldSendComplexRequestWithBinaryBody() throws Exception {
         ));
     }
 
-    // TODO (jamesdbloom) binary test scenarios for requests and responses
-
 }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/BinaryProxyIntegrationTest.java
Patch:
@@ -187,6 +187,4 @@ public void shouldCloseConnectionForBinaryMessagesWithNoRemoteAddress() throws E
         assertThat(ByteBufUtil.hexDump(binaryResponse.getBytes()), is(ByteBufUtil.hexDump("unknown message format".getBytes(StandardCharsets.UTF_8))));
     }
 
-    // TODO (jamesdbloom) binary test for proxying via SOCKS4/5 and HTTP CONNECT?
-
 }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -58,7 +58,6 @@
 /**
  * @author jamesdbloom
  */
-@SuppressWarnings("unchecked")
 public class NettyHttpProxySOCKSIntegrationTest {
 
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(NettyHttpProxySOCKSIntegrationTest.class);

File: mockserver-core/src/main/java/org/mockserver/codec/ExpandedParameterDecoder.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.regex.Pattern;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
-import static org.mockserver.model.NottableOptionalString.optionalString;
+import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.NottableString.string;
 
 public class ExpandedParameterDecoder {
@@ -72,14 +72,14 @@ public List<NottableString> splitOnDelimiter(ParameterStyle style, String name,
                 Matcher quotedValue = QUOTED_PARAMETER_VALUE.matcher(value.getValue());
                 if (quotedValue.matches()) {
                     if (value.isOptional()) {
-                        splitValues.add(optionalString(quotedValue.group(1), value.isNot()));
+                        splitValues.add(optional(quotedValue.group(1), value.isNot()));
                     } else {
                         splitValues.add(string(quotedValue.group(1), value.isNot()));
                     }
                 } else if (!JSON_VALUE.matcher(value.getValue()).matches()) {
                     for (String splitValue : value.getValue().split(style.getRegex().replaceAll("<name>", name))) {
                         if (value.isOptional()) {
-                            splitValues.add(optionalString(splitValue, value.isNot()));
+                            splitValues.add(optional(splitValue, value.isNot()));
                         } else {
                             splitValues.add(string(splitValue, value.isNot()));
                         }

File: mockserver-core/src/main/java/org/mockserver/codec/PathParametersDecoder.java
Patch:
@@ -36,7 +36,6 @@ public String validatePath(HttpRequest matcher) {
                 }
             }
         }
-        // Unable to load API spec from provided URL or payload attribute paths.'/pets/{petId}'. Declared path parameter petId needs to be defined as a path parameter in path or operation level
         return error;
     }
 
@@ -63,7 +62,7 @@ public NottableString normalisePathWithParametersForMatching(HttpRequest matcher
                 result = matcher.getPath();
             }
         }
-        // Unable to load API spec from provided URL or payload attribute paths.'/pets/{petId}'. Declared path parameter petId needs to be defined as a path parameter in path or operation level
+        // Unable to load API spec attribute paths.'/pets/{petId}'. Declared path parameter petId needs to be defined as a path parameter in path or operation level
         return result;
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestsPropertiesMatcher.java
Patch:
@@ -29,7 +29,7 @@
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.mockserver.model.JsonSchemaBody.jsonSchema;
-import static org.mockserver.model.NottableOptionalString.optionalString;
+import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.NottableSchemaString.schemaString;
 import static org.mockserver.model.NottableString.string;
 import static org.mockserver.model.ParameterStyle.*;
@@ -126,7 +126,7 @@ private HttpRequest createHttpRequest(OpenAPIDefinition openAPIDefinition, OpenA
                     );
                 if (schema != null) {
                     try {
-                        NottableString name = (parameter.getRequired() != null && parameter.getRequired() ? string(parameter.getName()) : optionalString(parameter.getName())).withStyle(parameterStyle(parameter.getExplode(), parameter.getStyle()));
+                        NottableString name = (parameter.getRequired() != null && parameter.getRequired() ? string(parameter.getName()) : optional(parameter.getName())).withStyle(parameterStyle(parameter.getExplode(), parameter.getStyle()));
                         if (parameter.getAllowEmptyValue() != null && parameter.getAllowEmptyValue()) {
                             schema.nullable(true);
                         }

File: mockserver-core/src/main/java/org/mockserver/model/NottableString.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.mockserver.model.NottableOptionalString.OPTIONAL_CHAR;
-import static org.mockserver.model.NottableOptionalString.optionalString;
+import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.ParameterStyle.DEEP_OBJECT;
 
 /**
@@ -113,7 +113,7 @@ public static NottableString string(String value) {
             }
         }
         if (optional) {
-            return optionalString(value, not);
+            return optional(value, not);
         } else {
             return new NottableString(value, not);
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/ExpectationSerializer.java
Patch:
@@ -127,7 +127,7 @@ public Expectation deserialize(String jsonExpectation) {
                             .setArguments(jsonExpectation)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonExpectation + "] for Expectation", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonExpectation + "] for Expectation", throwable);
                 }
                 return expectation;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpRequestAndHttpResponseSerializer.java
Patch:
@@ -107,7 +107,7 @@ public HttpRequestAndHttpResponse deserialize(String jsonHttpRequest) {
                             .setArguments(jsonHttpRequest)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonHttpRequest + "] for HttpRequestAndHttpResponse", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonHttpRequest + "] for HttpRequestAndHttpResponse", throwable);
                 }
             }
             String validationErrors = getValidator().isValid(jsonHttpRequest);
@@ -126,7 +126,7 @@ public HttpRequestAndHttpResponse deserialize(String jsonHttpRequest) {
                             .setArguments(jsonHttpRequest)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonHttpRequest + "] for HttpRequestAndHttpResponse", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonHttpRequest + "] for HttpRequestAndHttpResponse", throwable);
                 }
                 return httpRequestAndHttpResponse;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpRequestSerializer.java
Patch:
@@ -131,7 +131,7 @@ public HttpRequest deserialize(String jsonHttpRequest) {
                             .setArguments(jsonHttpRequest)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonHttpRequest + "] for HttpRequest", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonHttpRequest + "] for HttpRequest", throwable);
                 }
             }
             String validationErrors = getValidator().isValid(jsonHttpRequest);
@@ -150,7 +150,7 @@ public HttpRequest deserialize(String jsonHttpRequest) {
                             .setArguments(jsonHttpRequest)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonHttpRequest + "] for HttpRequest", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonHttpRequest + "] for HttpRequest", throwable);
                 }
                 return httpRequest;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpResponseSerializer.java
Patch:
@@ -106,7 +106,7 @@ public HttpResponse deserialize(String jsonHttpResponse) {
                             .setArguments(jsonHttpResponse)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonHttpResponse + "] for HttpResponse", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonHttpResponse + "] for HttpResponse", throwable);
                 }
             }
             String validationErrors = getValidator().isValid(jsonHttpResponse);
@@ -125,7 +125,7 @@ public HttpResponse deserialize(String jsonHttpResponse) {
                             .setArguments(jsonHttpResponse)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonHttpResponse + "] for HttpResponse", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonHttpResponse + "] for HttpResponse", throwable);
                 }
                 return httpResponse;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/LogEventRequestAndResponseSerializer.java
Patch:
@@ -75,7 +75,7 @@ public String serialize(LogEventRequestAndResponse... httpRequestAndHttpResponse
                     .setMessageFormat("exception while serializing HttpRequestAndHttpResponse to JSON with value " + Arrays.asList(httpRequestAndHttpResponses))
                     .setThrowable(e)
             );
-            throw new RuntimeException("Exception while serializing HttpRequestAndHttpResponse to JSON with value " + Arrays.asList(httpRequestAndHttpResponses), e);
+            throw new IllegalArgumentException("Exception while serializing HttpRequestAndHttpResponse to JSON with value " + Arrays.asList(httpRequestAndHttpResponses), e);
         }
     }
 
@@ -97,7 +97,7 @@ public LogEventRequestAndResponse deserialize(String jsonHttpRequestAndHttpRespo
                         .setArguments(jsonHttpRequestAndHttpResponse)
                         .setThrowable(throwable)
                 );
-                throw new  RuntimeException("exception while parsing [" + jsonHttpRequestAndHttpResponse + "] for HttpRequestAndHttpResponse", throwable);
+                throw new  IllegalArgumentException("exception while parsing [" + jsonHttpRequestAndHttpResponse + "] for HttpRequestAndHttpResponse", throwable);
             }
             return httpRequestAndHttpResponse;
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/OpenAPIExpectationSerializer.java
Patch:
@@ -113,7 +113,7 @@ public OpenAPIExpectation deserialize(String jsonOpenAPIExpectation) {
                             .setArguments(jsonOpenAPIExpectation)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonOpenAPIExpectation + "] for OpenAPIExpectation", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonOpenAPIExpectation + "] for OpenAPIExpectation", throwable);
                 }
                 return expectation;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/PortBindingSerializer.java
Patch:
@@ -46,7 +46,7 @@ public PortBinding deserialize(String jsonPortBinding) {
                         .setArguments(jsonPortBinding)
                         .setThrowable(throwable)
                 );
-                throw new  RuntimeException("exception while parsing PortBinding for [" + jsonPortBinding + "]", throwable);
+                throw new  IllegalArgumentException("exception while parsing PortBinding for [" + jsonPortBinding + "]", throwable);
             }
         }
         return portBinding;

File: mockserver-core/src/main/java/org/mockserver/serialization/RequestDefinitionSerializer.java
Patch:
@@ -133,7 +133,7 @@ public RequestDefinition deserialize(String jsonRequestDefinition) {
                             .setArguments(jsonRequestDefinition)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonRequestDefinition + "] for RequestDefinition", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonRequestDefinition + "] for RequestDefinition", throwable);
                 }
             } else if (jsonRequestDefinition.contains("\"openAPIDefinition\"")) {
                 try {
@@ -149,7 +149,7 @@ public RequestDefinition deserialize(String jsonRequestDefinition) {
                             .setArguments(jsonRequestDefinition)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonRequestDefinition + "] for RequestDefinition", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonRequestDefinition + "] for RequestDefinition", throwable);
                 }
             }
             String validationErrors = getValidator().isValid(jsonRequestDefinition);
@@ -168,7 +168,7 @@ public RequestDefinition deserialize(String jsonRequestDefinition) {
                             .setArguments(jsonRequestDefinition)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonRequestDefinition + "] for RequestDefinition", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonRequestDefinition + "] for RequestDefinition", throwable);
                 }
                 return requestDefinition;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSequenceSerializer.java
Patch:
@@ -75,7 +75,7 @@ public VerificationSequence deserialize(String jsonVerificationSequence) {
                             .setArguments(jsonVerificationSequence)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonVerificationSequence + "] for VerificationSequence", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonVerificationSequence + "] for VerificationSequence", throwable);
                 }
                 return verificationSequence;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSerializer.java
Patch:
@@ -75,7 +75,7 @@ public Verification deserialize(String jsonVerification) {
                             .setArguments(jsonVerification)
                             .setThrowable(throwable)
                     );
-                    throw new RuntimeException("exception while parsing [" + jsonVerification + "] for Verification", throwable);
+                    throw new IllegalArgumentException("exception while parsing [" + jsonVerification + "] for Verification", throwable);
                 }
                 return verification;
             } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/string/NottableStringDeserializer.java
Patch:
@@ -13,7 +13,7 @@
 import java.io.IOException;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
-import static org.mockserver.model.NottableOptionalString.optionalString;
+import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.NottableSchemaString.schemaString;
 import static org.mockserver.model.NottableString.string;
 
@@ -61,7 +61,7 @@ public NottableString deserialize(JsonParser jsonParser, DeserializationContext
             if (schema != null) {
                 result = schemaString(schema.toPrettyString(), not);
             } else if (Boolean.TRUE.equals(optional)) {
-                result = optionalString(value, not);
+                result = optional(value, not);
             } else if (isNotBlank(value)) {
                 result = string(value, not);
             }

File: mockserver-core/src/main/java/org/mockserver/serialization/java/CookieToJavaSerializer.java
Patch:
@@ -16,8 +16,8 @@ public class CookieToJavaSerializer implements MultiValueToJavaSerializer<Cookie
     @Override
     public String serialize(int numberOfSpacesToIndent, Cookie cookie) {
         return NEW_LINE + Strings.padStart("", numberOfSpacesToIndent * INDENT_SIZE, ' ') + "new Cookie(" +
-            NottableStringToJavaSerializer.serialize(cookie.getName()) + ", " +
-            NottableStringToJavaSerializer.serialize(cookie.getValue()) + ")";
+            NottableStringToJavaSerializer.serialize(cookie.getName(), false) + ", " +
+            NottableStringToJavaSerializer.serialize(cookie.getValue(), false) + ")";
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/serialization/java/HeaderToJavaSerializer.java
Patch:
@@ -18,9 +18,10 @@ public class HeaderToJavaSerializer implements MultiValueToJavaSerializer<Header
     public String serialize(int numberOfSpacesToIndent, Header header) {
         StringBuilder output = new StringBuilder();
         output.append(NEW_LINE).append(Strings.padStart("", numberOfSpacesToIndent * INDENT_SIZE, ' '));
-        output.append("new Header(").append(NottableStringToJavaSerializer.serialize(header.getName()));
+        String serializedKey = NottableStringToJavaSerializer.serialize(header.getName(), false);
+        output.append("new Header(").append(serializedKey);
         for (NottableString value : header.getValues()) {
-            output.append(", ").append(NottableStringToJavaSerializer.serialize(value));
+            output.append(", ").append(NottableStringToJavaSerializer.serialize(value, serializedKey.endsWith(")")));
         }
         output.append(")");
         return output.toString();

File: mockserver-core/src/main/java/org/mockserver/serialization/java/ParameterToJavaSerializer.java
Patch:
@@ -18,9 +18,10 @@ public class ParameterToJavaSerializer implements MultiValueToJavaSerializer<Par
     public String serialize(int numberOfSpacesToIndent, Parameter parameter) {
         StringBuilder output = new StringBuilder();
         output.append(NEW_LINE).append(Strings.padStart("", numberOfSpacesToIndent * INDENT_SIZE, ' '));
-        output.append("new Parameter(").append(NottableStringToJavaSerializer.serialize(parameter.getName()));
+        String serializedKey = NottableStringToJavaSerializer.serialize(parameter.getName(), false);
+        output.append("new Parameter(").append(serializedKey);
         for (NottableString value : parameter.getValues()) {
-            output.append(", ").append(NottableStringToJavaSerializer.serialize(value));
+            output.append(", ").append(NottableStringToJavaSerializer.serialize(value, serializedKey.endsWith(")")));
         }
         output.append(")");
         return output.toString();

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -391,6 +391,9 @@ private String formatProcessingReport(ProcessingReport processingMessages, boole
             } else {
                 validationErrors.addAll(extractMessage(processingMessageJson));
             }
+            if (validationErrors.isEmpty() && processingMessageJson.get("message") != null && isNotBlank(processingMessageJson.get("message").asText())) {
+                validationErrors.add(processingMessageJson.get("message").asText());
+            }
         }
         validationErrors.sort(String::compareToIgnoreCase);
         return validationErrors.size() + " error" + (validationErrors.size() > 1 ? "s" : "") + ":" + NEW_LINE

File: mockserver-core/src/test/java/org/mockserver/mock/HttpStateTest.java
Patch:
@@ -391,7 +391,7 @@ public void shouldHandleInvalidOpenAPIJsonRequest() {
         // then
         assertThat(handle, is(true));
         assertThat(responseWriter.response.getStatusCode(), is(400));
-        assertThat(responseWriter.response.getBodyAsString(), is("Unable to load API spec from provided URL or payload, while parsing a block mapping" + NEW_LINE +
+        assertThat(responseWriter.response.getBodyAsString(), is("Unable to load API spec, while parsing a block mapping" + NEW_LINE +
             " in 'reader', line 1, column 1:" + NEW_LINE +
             "    \"openapi\": \"3.0.0\"," + NEW_LINE +
             "    ^" + NEW_LINE +
@@ -463,7 +463,7 @@ public void shouldHandleInvalidOpenAPIYamlRequest() {
         // then
         assertThat(handle, is(true));
         assertThat(responseWriter.response.getStatusCode(), is(400));
-        assertThat(responseWriter.response.getBodyAsString(), is("Unable to load API spec from provided URL or payload, while scanning a simple key" + NEW_LINE +
+        assertThat(responseWriter.response.getBodyAsString(), is("Unable to load API spec, while scanning a simple key" + NEW_LINE +
             " in 'reader', line 8, column 1:" + NEW_LINE +
             "    servers" + NEW_LINE +
             "    ^" + NEW_LINE +

File: mockserver-core/src/test/java/org/mockserver/serialization/VerificationSequenceSerializationErrorsTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectWriter;
 import org.junit.Before;
 import org.junit.Rule;

File: mockserver-core/src/test/java/org/mockserver/serialization/VerificationSerializerIntegrationTest.java
Patch:
@@ -1,15 +1,13 @@
 package org.mockserver.serialization;
 
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.serialization.model.HttpRequestDTO;
 import org.mockserver.serialization.model.VerificationDTO;
 import org.mockserver.serialization.model.VerificationTimesDTO;
-import org.mockserver.logging.MockServerLogger;
 import org.mockserver.verify.Verification;
 import org.mockserver.verify.VerificationTimes;
 
-import java.io.IOException;
-
 import static org.junit.Assert.assertEquals;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.model.HttpRequest.request;

File: mockserver-examples/src/main/java/org/mockserver/examples/mockserver/RequestPropertiesMatcherExamples.java
Patch:
@@ -21,7 +21,7 @@
 import static org.mockserver.model.JsonBody.json;
 import static org.mockserver.model.JsonPathBody.jsonPath;
 import static org.mockserver.model.JsonSchemaBody.jsonSchema;
-import static org.mockserver.model.NottableOptionalString.optionalString;
+import static org.mockserver.model.NottableOptionalString.optional;
 import static org.mockserver.model.NottableSchemaString.schemaString;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;
@@ -217,8 +217,8 @@ public void matchRequestByOptionalQueryParameterRegexValue() {
                     .withPath("/some/path")
                     .withQueryStringParameters(
                         optionalParam("cartId", "[A-Z0-9\\-]+"),
-                        param(optionalString("maxItemCount"), schemaString("{ \"type\": \"integer\" }")),
-                        schemaParam(optionalString("userId"), "{ \"type\": \"string\", \"format\": \"uuid\" }")
+                        param(optional("maxItemCount"), schemaString("{ \"type\": \"integer\" }")),
+                        schemaParam(optional("userId"), "{ \"type\": \"string\", \"format\": \"uuid\" }")
                     )
             )
             .respond(

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIConverter.java
Patch:
@@ -77,6 +77,9 @@ public static OpenAPI buildOpenAPI(String specUrlOrPayload) {
                 return resolve(swaggerParseResult.getOpenAPI());
             } else {
                 String mesage = String.join(" and ", swaggerParseResult.getMessages()).trim();
+                if (mesage.equals("attribute openapi is missing")) {
+                    mesage += " only OpenAPI '3.0.0' is supported";
+                }
                 throw new IllegalArgumentException(OPEN_API_LOAD_ERROR + (isNotBlank(mesage) ? ", " + mesage : ""));
             }
         }

File: mockserver-core/src/main/java/org/mockserver/model/LogEntryBody.java
Patch:
@@ -5,11 +5,11 @@
 /**
  * @author jamesdbloom
  */
-public class LogEventBody extends BodyWithContentType<Object> {
+public class LogEntryBody extends BodyWithContentType<Object> {
     private int hashCode;
     private final Object value;
 
-    public LogEventBody(Object value) {
+    public LogEntryBody(Object value) {
         super(Type.LOG_EVENT, null);
         this.value = value;
     }
@@ -33,7 +33,7 @@ public boolean equals(Object o) {
         if (!super.equals(o)) {
             return false;
         }
-        LogEventBody that = (LogEventBody) o;
+        LogEntryBody that = (LogEntryBody) o;
         return Objects.equals(value, that.value);
     }
 

File: mockserver-core/src/main/java/org/mockserver/serialization/ObjectMapperFactory.java
Patch:
@@ -202,8 +202,8 @@ private static void addSerializers(SimpleModule module, JsonSerializer[] replace
             new XmlSchemaBodyDTOSerializer(),
             new XPathBodySerializer(),
             new XPathBodyDTOSerializer(),
-            new LogEventBodySerializer(),
-            new LogEventBodyDTOSerializer(),
+            new LogEntryBodySerializer(),
+            new LogEntryBodyDTOSerializer(),
             // condition
             new VerificationTimesDTOSerializer(),
             new VerificationTimesSerializer(),

File: mockserver-core/src/main/java/org/mockserver/serialization/model/BodyWithContentTypeDTO.java
Patch:
@@ -31,9 +31,9 @@ public static BodyWithContentTypeDTO createWithContentTypeDTO(BodyWithContentTyp
         } else if (body instanceof XmlBody) {
             XmlBody xmlBody = (XmlBody) body;
             result = new XmlBodyDTO(xmlBody, xmlBody.getNot());
-        } else if (body instanceof LogEventBody) {
-            LogEventBody logEventBody = (LogEventBody) body;
-            result = new LogEventBodyDTO(logEventBody);
+        } else if (body instanceof LogEntryBody) {
+            LogEntryBody logEventBody = (LogEntryBody) body;
+            result = new LogEntryBodyDTO(logEventBody);
         }
 
         if (result != null) {

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/response/HttpResponseDTOSerializer.java
Patch:
@@ -41,7 +41,7 @@ public void serialize(HttpResponseDTO httpResponseDTO, JsonGenerator jgen, Seria
                 jgen.writeObjectField("body", body);
             } else if (body instanceof BinaryBodyDTO) {
                 jgen.writeObjectField("body", body);
-            } else if (body instanceof LogEventBodyDTO) {
+            } else if (body instanceof LogEntryBodyDTO) {
                 jgen.writeObjectField("body", body);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/response/HttpResponseSerializer.java
Patch:
@@ -43,7 +43,7 @@ public void serialize(HttpResponse httpResponse, JsonGenerator jgen, SerializerP
                 jgen.writeObjectField("body", body);
             } else if (body instanceof XmlBody && !((XmlBody) body).getValue().isEmpty()) {
                 jgen.writeObjectField("body", body);
-            } else if (body instanceof LogEventBody) {
+            } else if (body instanceof LogEntryBody) {
                 jgen.writeObjectField("body", body);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/body/ParameterBodySerializer.java
Patch:
@@ -27,7 +27,7 @@ public void serialize(ParameterBody parameterBody, JsonGenerator jgen, Serialize
         }
         jgen.writeStringField("type", parameterBody.getType().name());
         if (!parameterBody.getValue().isEmpty()) {
-            jgen.writeObjectField("value", parameterBody.getValue());
+            jgen.writeObjectField("parameters", parameterBody.getValue());
         }
         jgen.writeEndObject();
     }

File: mockserver-core/src/test/java/org/mockserver/matchers/HttpRequestPropertiesMatcherLogTest.java
Patch:
@@ -1267,7 +1267,7 @@ public void doesNotMatchIncorrectParameterName() {
                     "  {" + NEW_LINE +
                     "    \"body\" : {" + NEW_LINE +
                     "      \"type\" : \"PARAMETERS\"," + NEW_LINE +
-                    "      \"value\" : {" + NEW_LINE +
+                    "      \"parameters\" : {" + NEW_LINE +
                     "        \"name\" : [ \"value\" ]" + NEW_LINE +
                     "      }" + NEW_LINE +
                     "    }" + NEW_LINE +
@@ -1327,7 +1327,7 @@ public void doesNotMatchIncorrectParameterValueRegex() {
                     "  {" + NEW_LINE +
                     "    \"body\" : {" + NEW_LINE +
                     "      \"type\" : \"PARAMETERS\"," + NEW_LINE +
-                    "      \"value\" : {" + NEW_LINE +
+                    "      \"parameters\" : {" + NEW_LINE +
                     "        \"name\" : [ \"va[0-9]{1}ue\" ]" + NEW_LINE +
                     "      }" + NEW_LINE +
                     "    }" + NEW_LINE +

File: mockserver-core/src/main/java/org/mockserver/model/HttpClassCallback.java
Patch:
@@ -87,7 +87,8 @@ public HttpClassCallback withCallbackClass(String callbackClass) {
      *
      * @param callbackClass class to callback as a fully qualified class name, i.e. "com.foo.MyExpectationResponseCallback"
      */
-    public HttpClassCallback withCallbackClass(Class<? extends ExpectationCallback<HttpRequest>> callbackClass) {
+    @SuppressWarnings("rawtypes")
+    public HttpClassCallback withCallbackClass(Class<? extends ExpectationCallback<? extends HttpMessage>> callbackClass) {
         this.callbackClass = callbackClass.getName();
         this.hashCode = 0;
         return this;

File: mockserver-examples/src/main/java/org/mockserver/examples/mockserver/CallbackActionExamples.java
Patch:
@@ -32,7 +32,7 @@ public void responseClassCallback() {
             )
             .respond(
                 callback()
-                    .withCallbackClass("org.mockserver.examples.mockserver.CallbackActionExamples$TestExpectationResponseCallback")
+                    .withCallbackClass(CallbackActionExamples.TestExpectationResponseCallback.class)
             );
     }
 
@@ -44,7 +44,7 @@ public void forwardClassCallback() {
             )
             .forward(
                 callback()
-                    .withCallbackClass("org.mockserver.examples.mockserver.CallbackActionExamples$TestExpectationForwardCallback")
+                    .withCallbackClass(CallbackActionExamples.TestExpectationForwardCallback.class)
             );
     }
 

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractExtendedSameJVMMockingIntegrationTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldCallbackToSpecifiedClassWithDynamicResponse() {
             )
             .respond(
                 callback()
-                    .withCallbackClass("org.mockserver.testing.integration.callback.StaticTestExpectationResponseCallback")
+                    .withCallbackClass(StaticTestExpectationResponseCallback.class)
             );
 
         // then

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.testing.integration.callback.PrecannedTestExpectationForwardCallbackRequest;
 import org.mockserver.testing.integration.callback.PrecannedTestExpectationForwardCallbackRequestAndResponse;
+import org.mockserver.testing.integration.callback.PrecannedTestExpectationResponseCallback;
 import org.mockserver.uuid.UUIDService;
 import org.mockserver.verify.VerificationTimes;
 import org.slf4j.event.Level;
@@ -339,7 +340,7 @@ public void shouldReturnResponseForCallbackClassWithDelay() {
             )
             .respond(
                 callback()
-                    .withCallbackClass("org.mockserver.testing.integration.callback.PrecannedTestExpectationResponseCallback")
+                    .withCallbackClass(PrecannedTestExpectationResponseCallback.class)
                     .withDelay(new Delay(SECONDS, 2))
             );
 
@@ -382,7 +383,7 @@ public void shouldReturnResponseForCallbackToSpecifiedClassWithPrecannedResponse
             )
             .respond(
                 callback()
-                    .withCallbackClass("org.mockserver.testing.integration.callback.PrecannedTestExpectationResponseCallback")
+                    .withCallbackClass(PrecannedTestExpectationResponseCallback.class)
             );
 
         // then

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() {
                 request()
                     .withPath("/my/echo")
             )
-            .respond(callback().withCallbackClass("org.mockserver.netty.integration.mock.ConcurrencyBasicResponseMockingIntegrationTest$ClassCallback"));
+            .respond(callback().withCallbackClass(ConcurrencyBasicResponseMockingIntegrationTest.ClassCallback.class));
         httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 

File: mockserver-war/src/test/java/org/mockserver/mockservlet/integration/AbstractExtendedDeployableWARMockingIntegrationTest.java
Patch:
@@ -218,7 +218,7 @@ public void shouldCallbackForResponseToSpecifiedClassInTestClasspath() {
             )
             .respond(
                 callback()
-                    .withCallbackClass("org.mockserver.mockservlet.integration.TestClasspathTestExpectationResponseCallback")
+                    .withCallbackClass(TestClasspathTestExpectationResponseCallback.class)
             );
 
         // then
@@ -287,7 +287,7 @@ public void shouldCallbackForwardCallbackToOverrideRequestInTestClasspath() {
             )
             .forward(
                 callback()
-                    .withCallbackClass("org.mockserver.mockservlet.integration.TestClasspathTestExpectationForwardCallback")
+                    .withCallbackClass(TestClasspathTestExpectationForwardCallback.class)
             );
 
         // then
@@ -361,7 +361,7 @@ public void shouldCallbackForwardCallbackToOverrideRequestAndResponseInTestClass
             )
             .forward(
                 callback()
-                    .withCallbackClass("org.mockserver.mockservlet.integration.TestClasspathTestExpectationForwardCallbackWithResponseOverride")
+                    .withCallbackClass(TestClasspathTestExpectationForwardCallbackWithResponseOverride.class)
             );
 
         // then

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -796,7 +796,7 @@ public static void detailedMatchFailures(boolean enable) {
     }
 
     public static boolean launchUIForLogLevelDebug() {
-        return Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG, "MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG", "" + true));
+        return Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG, "MOCKSERVER_LAUNCH_UI_FOR_LOG_LEVEL_DEBUG", "" + false));
     }
 
     /**

File: mockserver-netty/src/main/java/org/mockserver/closurecallback/websocketregistry/CallbackWebSocketServerHandler.java
Patch:
@@ -9,7 +9,7 @@
 import io.netty.util.AttributeKey;
 import io.netty.util.ReferenceCountUtil;
 import org.mockserver.codec.MockServerHttpServerCodec;
-import org.mockserver.dashboard.DashboardWebSocketServerHandler;
+import org.mockserver.dashboard.DashboardWebSocketHandler;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.HttpState;
@@ -93,7 +93,7 @@ private void upgradeChannel(final ChannelHandlerContext ctx, FullHttpRequest htt
                         ctx.channel().newPromise()
                     )
                     .addListener((ChannelFutureListener) future -> {
-                        ctx.pipeline().remove(DashboardWebSocketServerHandler.class);
+                        ctx.pipeline().remove(DashboardWebSocketHandler.class);
                         ctx.pipeline().remove(MockServerHttpServerCodec.class);
                         ctx.pipeline().remove(HttpRequestHandler.class);
                         mockServerLogger.logEvent(

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardWebSocketHandler.java
Patch:
@@ -53,7 +53,7 @@
  * @author jamesdbloom
  */
 @ChannelHandler.Sharable
-public class DashboardWebSocketServerHandler extends ChannelInboundHandlerAdapter implements MockServerLogListener, MockServerMatcherListener {
+public class DashboardWebSocketHandler extends ChannelInboundHandlerAdapter implements MockServerLogListener, MockServerMatcherListener {
 
     private static final Predicate<DashboardLogEntryDTO> recordedRequestsPredicate = input
         -> input.getType() == RECEIVED_REQUEST;
@@ -77,7 +77,7 @@ public class DashboardWebSocketServerHandler extends ChannelInboundHandlerAdapte
     private ScheduledExecutorService throttleExecutorService;
     private Semaphore semaphore;
 
-    public DashboardWebSocketServerHandler(HttpState httpState, boolean sslEnabledUpstream, boolean prettyPrint) {
+    public DashboardWebSocketHandler(HttpState httpState, boolean sslEnabledUpstream, boolean prettyPrint) {
         this.httpState = httpState;
         this.mockServerLogger = httpState.getMockServerLogger();
         this.sslEnabledUpstream = sslEnabledUpstream;
@@ -178,7 +178,7 @@ private void upgradeChannel(final ChannelHandlerContext ctx, FullHttpRequest htt
     }
 
     @VisibleForTesting
-    protected DashboardWebSocketServerHandler registerListeners() {
+    protected DashboardWebSocketHandler registerListeners() {
         if (mockServerEventLog == null) {
             mockServerEventLog = httpState.getMockServerLog();
             mockServerEventLog.registerListener(this);

File: mockserver-netty/src/main/java/org/mockserver/integration/ClientAndServer.java
Patch:
@@ -78,11 +78,11 @@ public ClientAndServer openUI() {
      * shutdown function, such as After, AfterClass, AfterAll, etc
      *
      * @param timeUnit TimeUnit the time unit, for example TimeUnit.SECONDS
-     * @param delay    the number of time units to delay before the function returns to ensure the UI is receiving logs
+     * @param pause    the number of time units to delay before the function returns to ensure the UI is receiving logs
      */
     @Override
-    public ClientAndServer openUI(TimeUnit timeUnit, long delay) {
-        super.openUI(timeUnit, delay);
+    public ClientAndServer openUI(TimeUnit timeUnit, long pause) {
+        super.openUI(timeUnit, pause);
         return this;
     }
 

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/PortUnificationHandler.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockserver.closurecallback.websocketregistry.CallbackWebSocketServerHandler;
 import org.mockserver.codec.MockServerHttpServerCodec;
 import org.mockserver.configuration.ConfigurationProperties;
-import org.mockserver.dashboard.DashboardWebSocketServerHandler;
+import org.mockserver.dashboard.DashboardWebSocketHandler;
 import org.mockserver.lifecycle.LifeCycle;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.LoggingHandler;
@@ -249,7 +249,7 @@ private void switchToHttp(ChannelHandlerContext ctx, ByteBuf msg) {
                 .addListener((ChannelFuture future) -> future.channel().disconnect().awaitUninterruptibly());
         } else {
             addLastIfNotPresent(pipeline, new CallbackWebSocketServerHandler(httpStateHandler));
-            addLastIfNotPresent(pipeline, new DashboardWebSocketServerHandler(httpStateHandler, isSslEnabledUpstream(ctx.channel()), false));
+            addLastIfNotPresent(pipeline, new DashboardWebSocketHandler(httpStateHandler, isSslEnabledUpstream(ctx.channel()), false));
             addLastIfNotPresent(pipeline, new MockServerHttpServerCodec(mockServerLogger, isSslEnabledUpstream(ctx.channel())));
             addLastIfNotPresent(pipeline, new HttpRequestHandler(server, httpStateHandler, actionHandler));
             pipeline.remove(this);

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/direct/DirectProxyUnificationHandlerTest.java
Patch:
@@ -133,7 +133,7 @@ public void shouldSwitchToHttp() {
                 "HttpContentLengthRemover#0",
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
-                "DashboardWebSocketServerHandler#0",
+                "DashboardWebSocketHandler#0",
                 "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"
@@ -145,7 +145,7 @@ public void shouldSwitchToHttp() {
                 "HttpContentLengthRemover#0",
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
-                "DashboardWebSocketServerHandler#0",
+                "DashboardWebSocketHandler#0",
                 "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerSOCKSErrorTest.java
Patch:
@@ -140,7 +140,7 @@ public void shouldSwitchToHttp() {
                 "HttpContentLengthRemover#0",
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
-                "DashboardWebSocketServerHandler#0",
+                "DashboardWebSocketHandler#0",
                 "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"
@@ -152,7 +152,7 @@ public void shouldSwitchToHttp() {
                 "HttpContentLengthRemover#0",
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
-                "DashboardWebSocketServerHandler#0",
+                "DashboardWebSocketHandler#0",
                 "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerTest.java
Patch:
@@ -110,7 +110,7 @@ public void shouldSwitchToHttp() {
             "HttpContentLengthRemover#0",
             "HttpObjectAggregator#0",
             "CallbackWebSocketServerHandler#0",
-            "DashboardWebSocketServerHandler#0",
+            "DashboardWebSocketHandler#0",
             "MockServerHttpServerCodec#0",
             "HttpRequestHandler#0",
             "DefaultChannelPipeline$TailContext#0"

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.core.JsonProcessingException;
-import jdk.nashorn.internal.ir.annotations.Ignore;
 import org.mockserver.matchers.MatchType;
 import org.mockserver.serialization.ObjectMapperFactory;
 

File: mockserver-netty/src/test/java/org/mockserver/dashboard/serializers/DescriptionProcessorTest.java
Patch:
@@ -111,7 +111,7 @@ public void shouldSerialiseMultipleOpenAPIDefinitions() throws JsonProcessingExc
             "    }" + NEW_LINE +
             "  }," + NEW_LINE +
             "  \"first\" : \"spec:\"," + NEW_LINE +
-            "  \"second\" : \"                          showPetById\"" + NEW_LINE +
+            "  \"second\" : \" showPetById\"" + NEW_LINE +
             "}, " +
             "{" + NEW_LINE +
             "  \"json\" : true," + NEW_LINE +
@@ -129,7 +129,7 @@ public void shouldSerialiseMultipleOpenAPIDefinitions() throws JsonProcessingExc
             "    }" + NEW_LINE +
             "  }," + NEW_LINE +
             "  \"first\" : \"spec:\"," + NEW_LINE +
-            "  \"second\" : \"                                     \"" + NEW_LINE +
+            "  \"second\" : \"            \"" + NEW_LINE +
             "}, " +
             "\"openapi_petstore_example.json                      \", " +
             "\"openapi_petstore_example.json  someOtherOperationId\", " +
@@ -249,7 +249,7 @@ public void shouldSerialiseMultipleHttpRequestAndOpenAPIDefinitions() throws Jso
             "    }" + NEW_LINE +
             "  }," + NEW_LINE +
             "  \"first\" : \"spec:\"," + NEW_LINE +
-            "  \"second\" : \"                                     \"" + NEW_LINE +
+            "  \"second\" : \" \"" + NEW_LINE +
             "}, " +
             "\"openapi_petstore_example.json                      \", " +
             "\"openapi_petstore_example.json  someOtherOperationId\" " +

File: mockserver-core/src/main/java/org/mockserver/codec/ExpandedParameterDecoder.java
Patch:
@@ -53,10 +53,10 @@ public Parameters retrieveFormParameters(String parameterString, boolean hasPath
     public void splitParameters(Parameters matcher, Parameters matched) {
         if (matcher != null && matched != null) {
             for (Parameter matcherEntry : matcher.getEntries()) {
-                if (matcherEntry.getName().getStyle() != null && matcherEntry.getName().getStyle().isExploded()) {
+                if (matcherEntry.getName().getParameterStyle() != null && matcherEntry.getName().getParameterStyle().isExploded()) {
                     for (Parameter matchedEntry : matched.getEntries()) {
-                        if (matcherEntry.getName().getValue().equals(matchedEntry.getName().getValue())) {
-                            matchedEntry.replaceValues(new ExpandedParameterDecoder(mockServerLogger).splitOnDelimiter(matcherEntry.getName().getStyle(), matcherEntry.getName().getValue(), matchedEntry.getValues()));
+                        if (matcherEntry.getName().getValue().equals(matchedEntry.getName().getValue()) || matchedEntry.getName().getValue().matches(matcherEntry.getName().getValue())) {
+                            matchedEntry.replaceValues(new ExpandedParameterDecoder(mockServerLogger).splitOnDelimiter(matcherEntry.getName().getParameterStyle(), matcherEntry.getName().getValue(), matchedEntry.getValues()));
                             matched.replaceEntry(matchedEntry);
                         }
                     }

File: mockserver-core/src/main/java/org/mockserver/serialization/LogEventRequestAndResponseSerializer.java
Patch:
@@ -97,7 +97,7 @@ public LogEventRequestAndResponse deserialize(String jsonHttpRequestAndHttpRespo
                         .setArguments(jsonHttpRequestAndHttpResponse)
                         .setThrowable(throwable)
                 );
-                throw new RuntimeException("Exception while parsing [" + jsonHttpRequestAndHttpResponse + "] for HttpRequestAndHttpResponse", throwable);
+                throw new  RuntimeException("exception while parsing [" + jsonHttpRequestAndHttpResponse + "] for HttpRequestAndHttpResponse", throwable);
             }
             return httpRequestAndHttpResponse;
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/PortBindingSerializer.java
Patch:
@@ -46,7 +46,7 @@ public PortBinding deserialize(String jsonPortBinding) {
                         .setArguments(jsonPortBinding)
                         .setThrowable(throwable)
                 );
-                throw new RuntimeException("Exception while parsing PortBinding for [" + jsonPortBinding + "]", throwable);
+                throw new  RuntimeException("exception while parsing PortBinding for [" + jsonPortBinding + "]", throwable);
             }
         }
         return portBinding;

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/string/NottableStringSerializer.java
Patch:
@@ -27,7 +27,7 @@ public NottableStringSerializer() {
     public void serialize(NottableString nottableString, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         if (nottableString instanceof NottableSchemaString) {
             writeObject(nottableString, jgen, "schema", OBJECT_MAPPER.readTree(nottableString.getValue()));
-        } else if (nottableString.getStyle() != null) {
+        } else if (nottableString.getParameterStyle() != null) {
             writeObject(nottableString, jgen, "value", nottableString.getValue());
         } else {
             jgen.writeString(serialiseNottableString(nottableString));
@@ -42,8 +42,8 @@ private void writeObject(NottableString nottableString, JsonGenerator jgen, Stri
         if (Boolean.TRUE.equals(nottableString.isOptional())) {
             jgen.writeBooleanField("optional", true);
         }
-        if (nottableString.getStyle() != null) {
-            jgen.writeObjectField("style", nottableString.getStyle());
+        if (nottableString.getParameterStyle() != null) {
+            jgen.writeObjectField("parameterStyle", nottableString.getParameterStyle());
         }
         jgen.writeObjectField(valueFieldName, value);
         jgen.writeEndObject();

File: mockserver-core/src/test/java/org/mockserver/serialization/PortBindingSerializerTest.java
Patch:
@@ -59,7 +59,7 @@ public void deserialize() throws IOException {
     public void deserializeHandleException() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while parsing PortBinding for [requestBytes]");
+        thrown.expectMessage("exception while parsing PortBinding for [requestBytes]");
         // and
         when(objectMapper.readValue(eq("requestBytes"), same(PortBinding.class))).thenThrow(new RuntimeException("TEST EXCEPTION"));
 

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestValidatorIntegrationTest.java
Patch:
@@ -388,9 +388,9 @@ public void shouldValidateMultipleInvalidFieldTypes() {
             is(
                 "4 errors:" + NEW_LINE +
                     " - field: \"/method\" for schema: \"stringOrJsonSchema/oneOf/0\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"string\"])\"" + NEW_LINE +
-                    " - field: \"/method\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
+                    " - field: \"/method\" for schema: \"stringOrJsonSchema/oneOf/1\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
                     " - field: \"/path\" for schema: \"stringOrJsonSchema/oneOf/0\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"string\"])\"" + NEW_LINE +
-                    " - field: \"/path\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
+                    " - field: \"/path\" for schema: \"stringOrJsonSchema/oneOf/1\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
                     NEW_LINE +
                     OPEN_API_SPECIFICATION_URL
             ));

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidatorIntegrationTest.java
Patch:
@@ -193,10 +193,10 @@ public void shouldValidateMultipleInvalidFieldTypes() {
                     " - field: \"/httpRequests/0\" for schema: \"openAPIDefinition\" has error: \"object instance has properties which are not allowed by the schema: [\"method\",\"path\"]\"" + NEW_LINE +
                     " - field: \"/httpRequests/0/method\" for schema: \"stringOrJsonSchema\" has error: \"instance failed to match exactly one schema (matched 0 out of 2)\"" + NEW_LINE +
                     " - field: \"/httpRequests/0/method\" for schema: \"stringOrJsonSchema/oneOf/0\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"string\"])\"" + NEW_LINE +
-                    " - field: \"/httpRequests/0/method\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
+                    " - field: \"/httpRequests/0/method\" for schema: \"stringOrJsonSchema/oneOf/1\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
                     " - field: \"/httpRequests/0/path\" for schema: \"stringOrJsonSchema\" has error: \"instance failed to match exactly one schema (matched 0 out of 2)\"" + NEW_LINE +
                     " - field: \"/httpRequests/0/path\" for schema: \"stringOrJsonSchema/oneOf/0\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"string\"])\"" + NEW_LINE +
-                    " - field: \"/httpRequests/0/path\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
+                    " - field: \"/httpRequests/0/path\" for schema: \"stringOrJsonSchema/oneOf/1\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
                     NEW_LINE +
                     OPEN_API_SPECIFICATION_URL
             ));

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidatorIntegrationTest.java
Patch:
@@ -171,10 +171,10 @@ public void shouldValidateMultipleInvalidFieldTypes() {
             is(
                 "4 errors:" + NEW_LINE +
                     " - field: \"/method\" for schema: \"stringOrJsonSchema/oneOf/0\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"string\"])\"" + NEW_LINE +
-                    " - field: \"/method\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
+                    " - field: \"/method\" for schema: \"stringOrJsonSchema/oneOf/1\" has error: \"instance type (integer) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
                     " - field: \"/path\" for schema: \"stringOrJsonSchema/oneOf/0\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"string\"])\"" + NEW_LINE +
-                    " - field: \"/path\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
-                    NEW_LINE +
+                    " - field: \"/path\" for schema: \"stringOrJsonSchema/oneOf/1\" has error: \"instance type (boolean) does not match any allowed primitive type (allowed: [\"object\"])\"" + NEW_LINE +
+                    "" + NEW_LINE +
                     OPEN_API_SPECIFICATION_URL
             ));
     }

File: mockserver-core/src/main/java/org/mockserver/closurecallback/websocketclient/WebSocketClientHandler.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.mappers.FullHttpResponseToMockServerResponse;
+import org.mockserver.mappers.FullHttpResponseToMockServerHttpResponse;
 import org.mockserver.model.MediaType;
 import org.slf4j.event.Level;
 
@@ -117,7 +117,7 @@ public void channelRead0(ChannelHandlerContext ctx, Object msg) {
                 }
                 registrationFuture.complete(clientId);
             } else {
-                registrationFuture.completeExceptionally(new WebSocketException("handshake failure unsupported message received " + new FullHttpResponseToMockServerResponse(mockServerLogger).mapFullHttpResponseToMockServerResponse(httpResponse)));
+                registrationFuture.completeExceptionally(new WebSocketException("handshake failure unsupported message received " + new FullHttpResponseToMockServerHttpResponse(mockServerLogger).mapFullHttpResponseToMockServerResponse(httpResponse)));
                 if (MockServerLogger.isEnabled(WARN)) {
                     mockServerLogger.logEvent(
                         new LogEntry()

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerBinaryToNettyBinaryRequestEncoder.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.List;
 
-public class MockServerBinaryToNettyRequestEncoder extends MessageToMessageEncoder<BinaryMessage> {
+public class MockServerBinaryToNettyBinaryRequestEncoder extends MessageToMessageEncoder<BinaryMessage> {
     @Override
     protected void encode(ChannelHandlerContext ctx, BinaryMessage binaryMessage, List<Object> out) {
         out.add(Unpooled.copiedBuffer(binaryMessage.getBytes()));

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerHttpToNettyHttpRequestEncoder.java
Patch:
@@ -11,11 +11,11 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerHttpToNettyRequestEncoder extends MessageToMessageEncoder<HttpRequest> {
+public class MockServerHttpToNettyHttpRequestEncoder extends MessageToMessageEncoder<HttpRequest> {
 
     private final MockServerHttpRequestToFullHttpRequest mockServerHttpRequestToFullHttpRequest;
 
-    MockServerHttpToNettyRequestEncoder(MockServerLogger mockServerLogger) {
+    MockServerHttpToNettyHttpRequestEncoder(MockServerLogger mockServerLogger) {
         mockServerHttpRequestToFullHttpRequest = new MockServerHttpRequestToFullHttpRequest(mockServerLogger);
     }
 

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerHttpToNettyHttpResponseEncoder.java
Patch:
@@ -11,11 +11,11 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerHttpToNettyResponseEncoder extends MessageToMessageEncoder<HttpResponse> {
+public class MockServerHttpToNettyHttpResponseEncoder extends MessageToMessageEncoder<HttpResponse> {
 
     private final MockServerHttpResponseToFullHttpResponse mockServerHttpResponseToFullHttpResponse;
 
-    public MockServerHttpToNettyResponseEncoder(MockServerLogger mockServerLogger) {
+    public MockServerHttpToNettyHttpResponseEncoder(MockServerLogger mockServerLogger) {
         mockServerHttpResponseToFullHttpResponse = new MockServerHttpResponseToFullHttpResponse(mockServerLogger);
     }
 

File: mockserver-core/src/main/java/org/mockserver/codec/NettyBinaryToMockServerBinaryResponseDecoder.java
Patch:
@@ -9,7 +9,7 @@
 
 import static org.mockserver.model.BinaryMessage.bytes;
 
-public class NettyBinaryToMockServerResponseDecoder extends MessageToMessageDecoder<ByteBuf> {
+public class NettyBinaryToMockServerBinaryResponseDecoder extends MessageToMessageDecoder<ByteBuf> {
     @Override
     protected void decode(ChannelHandlerContext ctx, ByteBuf byteBuf, List<Object> out) {
         out.add(bytes(ByteBufUtil.getBytes(byteBuf)));

File: mockserver-core/src/main/java/org/mockserver/codec/PathParametersDecoder.java
Patch:
@@ -70,7 +70,7 @@ public Parameters retrievePathParameters(HttpRequest matcher, HttpRequest matche
                     if (pathParameterName.matches()) {
                         String parameterName = pathParameterName.group(1);
                         List<String> parameterValues = new ArrayList<>();
-                        Matcher pathParameterValue = Pattern.compile("[.;]?(?:" + parameterName + "=)?([^.,;]+)[.,;]?").matcher(matchedPathParts[i]);
+                        Matcher pathParameterValue = Pattern.compile("[.;]?(?:" + parameterName + "=)?([^,]++)[.,;]?").matcher(matchedPathParts[i]);
                         while (pathParameterValue.find()) {
                             parameterValues.add(pathParameterValue.group(1));
                         }

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -10,7 +10,7 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
 import io.netty.handler.ssl.SslContext;
-import org.mockserver.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerHttpServerCodec;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.logging.MockServerLogger;
@@ -72,7 +72,7 @@ public void initChannel(SocketChannel channel) {
 
         pipeline.addLast(new WebSocketServerHandler(mockServerLogger, registeredClients, websocketChannels, textWebSocketFrames, secure));
 
-        pipeline.addLast(new MockServerServerCodec(mockServerLogger, secure));
+        pipeline.addLast(new MockServerHttpServerCodec(mockServerLogger, secure));
 
         if (!secure && error == EchoServer.Error.CLOSE_CONNECTION) {
             throw new IllegalArgumentException("Error type CLOSE_CONNECTION is not supported in non-secure mode");

File: mockserver-core/src/main/java/org/mockserver/echo/http/WebSocketServerHandler.java
Patch:
@@ -7,7 +7,7 @@
 import io.netty.handler.codec.http.websocketx.*;
 import io.netty.util.AttributeKey;
 import io.netty.util.ReferenceCountUtil;
-import org.mockserver.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerHttpServerCodec;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.uuid.UUIDService;
@@ -87,7 +87,7 @@ private void upgradeChannel(final ChannelHandlerContext ctx, FullHttpRequest htt
                     ctx.channel().newPromise()
                 )
                 .addListener((ChannelFutureListener) future -> {
-                    ctx.pipeline().remove(MockServerServerCodec.class);
+                    ctx.pipeline().remove(MockServerHttpServerCodec.class);
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(Level.TRACE)

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -37,7 +37,7 @@ public static void configureLogger() {
                     "org.mockserver.logging.StandardOutConsoleHandler.level=ALL" + NEW_LINE +
                     "org.mockserver.logging.StandardOutConsoleHandler.formatter=java.util.logging.SimpleFormatter" + NEW_LINE +
                     "java.util.logging.SimpleFormatter.format=%1$tF %1$tT " + Version.getVersion() + " %3$s  %4$s  %5$s %6$s%n" + NEW_LINE +
-                    ".level=WARN" + NEW_LINE +
+                    ".level=WARNING" + NEW_LINE +
                     "org.mockserver.level=" + javaLoggerLogLevel() + NEW_LINE +
                     "io.netty.handler.ssl.SslHandler.level=WARNING";
                 LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(loggingConfiguration.getBytes(UTF_8)));

File: mockserver-core/src/main/java/org/mockserver/mappers/FullHttpResponseToMockServerHttpResponse.java
Patch:
@@ -15,12 +15,12 @@
 /**
  * @author jamesdbloom
  */
-public class FullHttpResponseToMockServerResponse {
+public class FullHttpResponseToMockServerHttpResponse {
 
     private final MockServerLogger mockServerLogger;
     private final BodyDecoderEncoder bodyDecoderEncoder;
 
-    public FullHttpResponseToMockServerResponse(MockServerLogger mockServerLogger) {
+    public FullHttpResponseToMockServerHttpResponse(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
         this.bodyDecoderEncoder = new BodyDecoderEncoder();
     }

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerHttpResponseToHttpServletResponseEncoder.java
Patch:
@@ -17,11 +17,11 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerResponseToHttpServletResponseEncoder {
+public class MockServerHttpResponseToHttpServletResponseEncoder {
 
     private final BodyServletDecoderEncoder bodyDecoderEncoder;
 
-    public MockServerResponseToHttpServletResponseEncoder(MockServerLogger mockServerLogger) {
+    public MockServerHttpResponseToHttpServletResponseEncoder(MockServerLogger mockServerLogger) {
         bodyDecoderEncoder = new BodyServletDecoderEncoder(mockServerLogger);
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/ParameterStringMatcher.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.matchers;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import org.mockserver.codec.FormParameterDecoder;
+import org.mockserver.codec.ExpandedParameterDecoder;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.Parameters;
 
@@ -11,11 +11,11 @@
 public class ParameterStringMatcher extends BodyMatcher<String> {
     private static final String[] EXCLUDED_FIELDS = {"mockServerLogger"};
     private final MultiValueMapMatcher matcher;
-    private final FormParameterDecoder formParameterParser;
+    private final ExpandedParameterDecoder formParameterParser;
 
     ParameterStringMatcher(MockServerLogger mockServerLogger, Parameters parameters, boolean controlPlaneMatcher) {
         this.matcher = new MultiValueMapMatcher(mockServerLogger, parameters, controlPlaneMatcher);
-        this.formParameterParser = new FormParameterDecoder(mockServerLogger);
+        this.formParameterParser = new ExpandedParameterDecoder(mockServerLogger);
     }
 
     public boolean matches(final MatchDifference context, String matched) {

File: mockserver-core/src/main/java/org/mockserver/servlet/responsewriter/ServletResponseWriter.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.mockserver.cors.CORSHeaders;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.mappers.MockServerResponseToHttpServletResponseEncoder;
+import org.mockserver.mappers.MockServerHttpResponseToHttpServletResponseEncoder;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.responsewriter.ResponseWriter;
@@ -20,11 +20,11 @@
 public class ServletResponseWriter extends ResponseWriter {
     private static final CORSHeaders CORS_HEADERS = new CORSHeaders();
     private final HttpServletResponse httpServletResponse;
-    private MockServerResponseToHttpServletResponseEncoder mockServerResponseToHttpServletResponseEncoder;
+    private MockServerHttpResponseToHttpServletResponseEncoder mockServerResponseToHttpServletResponseEncoder;
 
     public ServletResponseWriter(MockServerLogger mockServerLogger, HttpServletResponse httpServletResponse) {
         this.httpServletResponse = httpServletResponse;
-        this.mockServerResponseToHttpServletResponseEncoder = new MockServerResponseToHttpServletResponseEncoder(mockServerLogger);
+        this.mockServerResponseToHttpServletResponseEncoder = new MockServerHttpResponseToHttpServletResponseEncoder(mockServerLogger);
     }
 
     @Override

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerHttpToNettyHttpResponseEncoderContentLengthTest.java
Patch:
@@ -23,15 +23,15 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerToNettyResponseEncoderContentLengthTest {
+public class MockServerHttpToNettyHttpResponseEncoderContentLengthTest {
 
-    private MockServerHttpToNettyResponseEncoder mockServerResponseEncoder;
+    private MockServerHttpToNettyHttpResponseEncoder mockServerResponseEncoder;
     private List<Object> output;
     private HttpResponse httpResponse;
 
     @Before
     public void setupFixture() {
-        mockServerResponseEncoder = new MockServerHttpToNettyResponseEncoder(new MockServerLogger());
+        mockServerResponseEncoder = new MockServerHttpToNettyHttpResponseEncoder(new MockServerLogger());
         output = new ArrayList<>();
         httpResponse = response();
     }

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerHttpToNettyHttpResponseEncoderCookieHeaderTest.java
Patch:
@@ -21,15 +21,15 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerToNettyResponseEncoderCookieHeaderTest {
+public class MockServerHttpToNettyHttpResponseEncoderCookieHeaderTest {
 
-    private MockServerHttpToNettyResponseEncoder mockServerResponseEncoder;
+    private MockServerHttpToNettyHttpResponseEncoder mockServerResponseEncoder;
     private List<Object> output;
     private HttpResponse httpResponse;
 
     @Before
     public void setupFixture() {
-        mockServerResponseEncoder = new MockServerHttpToNettyResponseEncoder(new MockServerLogger());
+        mockServerResponseEncoder = new MockServerHttpToNettyHttpResponseEncoder(new MockServerLogger());
         output = new ArrayList<Object>();
         httpResponse = response();
     }

File: mockserver-core/src/test/java/org/mockserver/codec/NettyHttpToMockServerHttpResponseDecoderTest.java
Patch:
@@ -28,15 +28,15 @@
  * @author jamesdbloom
  */
 @SuppressWarnings("rawtypes")
-public class NettyToMockServerResponseDecoderTest {
+public class NettyHttpToMockServerHttpResponseDecoderTest {
 
-    private NettyHttpToMockServerResponseDecoder mockServerResponseDecoder;
+    private NettyHttpToMockServerHttpResponseDecoder mockServerResponseDecoder;
     private List<Object> output;
     private FullHttpResponse fullHttpResponse;
 
     @Before
     public void setupFixture() {
-        mockServerResponseDecoder = new NettyHttpToMockServerResponseDecoder(new MockServerLogger());
+        mockServerResponseDecoder = new NettyHttpToMockServerHttpResponseDecoder(new MockServerLogger());
         output = new ArrayList<>();
     }
 

File: mockserver-core/src/test/java/org/mockserver/collections/ContainIgnoreCaseTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockito.internal.util.collections.Sets;
 
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 import static org.mockserver.collections.ContainIgnoreCase.containsIgnoreCase;
 
 /**

File: mockserver-core/src/test/java/org/mockserver/collections/hashmap/nottablematcher/CaseInsensitiveRegexHashMapTestNottableContainsAll.java
Patch:
@@ -7,7 +7,6 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockserver.collections.CaseInsensitiveRegexHashMap.hashMap;
-import static org.mockserver.model.NottableOptionalString.optionalString;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;
 

File: mockserver-core/src/test/java/org/mockserver/mappers/MockServerHttpResponseToHttpServletResponseEncoderBasicMappingTest.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerResponseToHttpServletResponseEncoderBasicMappingTest {
+public class MockServerHttpResponseToHttpServletResponseEncoderBasicMappingTest {
 
     @Test
     public void shouldMapHttpResponseToHttpServletResponse() throws UnsupportedEncodingException {
@@ -36,7 +36,7 @@ public void shouldMapHttpResponseToHttpServletResponse() throws UnsupportedEncod
         MockHttpServletResponse httpServletResponse = new MockHttpServletResponse();
 
         // when
-        new MockServerResponseToHttpServletResponseEncoder(new MockServerLogger()).mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
+        new MockServerHttpResponseToHttpServletResponseEncoder(new MockServerLogger()).mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
 
         // then
         assertEquals(HttpStatusCode.OK_200.code(), httpServletResponse.getStatus());
@@ -63,6 +63,6 @@ public void shouldHandleExceptionWhenReadingBody() throws IOException {
         when(httpServletResponse.getOutputStream()).thenThrow(new IOException("TEST EXCEPTION"));
 
         // when
-        new MockServerResponseToHttpServletResponseEncoder(new MockServerLogger()).mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
+        new MockServerHttpResponseToHttpServletResponseEncoder(new MockServerLogger()).mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
     }
 }

File: mockserver-core/src/test/java/org/mockserver/matchers/MatcherBuilderTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.mappers.FullHttpRequestToMockServerRequest;
+import org.mockserver.mappers.FullHttpRequestToMockServerHttpRequest;
 import org.mockserver.mock.Expectation;
 import org.mockserver.model.*;
 
@@ -54,7 +54,7 @@ public void shouldSupportSpecialCharactersWhenCharsetSpecified() {
         String bodyTestString = "UTF_8 characters: Bj\u00F6rk";
 
         // given
-        FullHttpRequestToMockServerRequest fullHttpRequestToMockServerRequest = new FullHttpRequestToMockServerRequest(mockServerLogger, false);
+        FullHttpRequestToMockServerHttpRequest fullHttpRequestToMockServerRequest = new FullHttpRequestToMockServerHttpRequest(mockServerLogger, false);
         FullHttpRequest fullHttpRequest = new DefaultFullHttpRequest(
             HTTP_1_1,
             GET,
@@ -83,7 +83,7 @@ public void shouldSupportSpecialCharactersWithDefaultCharset() {
         String bodyTestString = "UTF_8 characters: Bj\u00F6rk";
 
         // given
-        FullHttpRequestToMockServerRequest fullHttpRequestToMockServerRequest = new FullHttpRequestToMockServerRequest(mockServerLogger, false);
+        FullHttpRequestToMockServerHttpRequest fullHttpRequestToMockServerRequest = new FullHttpRequestToMockServerHttpRequest(mockServerLogger, false);
         FullHttpRequest fullHttpRequest = new DefaultFullHttpRequest(
             HTTP_1_1,
             GET,

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/collections/CookiesSerializerTest.java
Patch:
@@ -22,7 +22,7 @@ public class CookiesSerializerTest {
     private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
 
     @Test
-    public void shouldAllowSingleObjectForArray() throws IOException {
+    public void shouldSerializeCompleteObject() throws IOException {
         // given
         String expectedString = "{" + NEW_LINE +
             "  \"some_name\" : \"some_value\"," + NEW_LINE +
@@ -31,7 +31,7 @@ public void shouldAllowSingleObjectForArray() throws IOException {
 
         // when
         String actualString = objectWriter
-            .writeValueAsString(new Cookies().withEntries(
+            .writeValueAsString(new Cookies(
                 cookie(string("some_name"), string("some_value")),
                 cookie(string("some_other_name"), string("some_value")),
                 cookie(string("some_other_name"), not("some_other_value"))

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/collections/HeadersSerializerTest.java
Patch:
@@ -23,7 +23,7 @@ public class HeadersSerializerTest {
     private ObjectWriter objectWriter = ObjectMapperFactory.createObjectMapper(true);
 
     @Test
-    public void shouldAllowSingleObjectForArray() throws IOException {
+    public void shouldSerializeCompleteObject() throws IOException {
         // given
         String expectedString = "{" + NEW_LINE +
             "  \"some_name\" : [ \"some_value\", \"some_other_value\" ]," + NEW_LINE +
@@ -32,7 +32,7 @@ public void shouldAllowSingleObjectForArray() throws IOException {
 
         // when
         String actualString = objectWriter
-            .writeValueAsString(new Headers().withEntries(
+            .writeValueAsString(new Headers(
                 header(string("some_name"), Arrays.asList(string("some_value"), string("some_other_value"))),
                 header(string("some_other_name"), string("some_value")),
                 header(string("some_other_name"), not("some_other_value"))

File: mockserver-core/src/test/java/org/mockserver/server/ServletResponseWriterTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.mappers.MockServerResponseToHttpServletResponseEncoder;
+import org.mockserver.mappers.MockServerHttpResponseToHttpServletResponseEncoder;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.servlet.responsewriter.ServletResponseWriter;
@@ -26,7 +26,7 @@
 public class ServletResponseWriterTest {
 
     @Mock
-    private MockServerResponseToHttpServletResponseEncoder mockServerResponseToHttpServletResponseEncoder;
+    private MockServerHttpResponseToHttpServletResponseEncoder mockServerResponseToHttpServletResponseEncoder;
     @InjectMocks
     private ServletResponseWriter servletResponseWriter;
     private MockHttpServletResponse httpServletResponse;

File: mockserver-netty/src/main/java/org/mockserver/closurecallback/websocketregistry/CallbackWebSocketServerHandler.java
Patch:
@@ -8,7 +8,7 @@
 import io.netty.handler.codec.http.websocketx.*;
 import io.netty.util.AttributeKey;
 import io.netty.util.ReferenceCountUtil;
-import org.mockserver.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerHttpServerCodec;
 import org.mockserver.dashboard.DashboardWebSocketServerHandler;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
@@ -94,7 +94,7 @@ private void upgradeChannel(final ChannelHandlerContext ctx, FullHttpRequest htt
                     )
                     .addListener((ChannelFutureListener) future -> {
                         ctx.pipeline().remove(DashboardWebSocketServerHandler.class);
-                        ctx.pipeline().remove(MockServerServerCodec.class);
+                        ctx.pipeline().remove(MockServerHttpServerCodec.class);
                         ctx.pipeline().remove(HttpRequestHandler.class);
                         mockServerLogger.logEvent(
                             new LogEntry()

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/connect/HttpConnectHandler.java
Patch:
@@ -7,12 +7,11 @@
 import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.HttpServerCodec;
-import io.netty.handler.ssl.SslHandler;
 import org.mockserver.lifecycle.LifeCycle;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.netty.proxy.relay.RelayConnectHandler;
-import org.mockserver.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerHttpServerCodec;
 
 import static org.mockserver.model.HttpResponse.response;
 
@@ -28,7 +27,7 @@ protected void removeCodecSupport(ChannelHandlerContext ctx) {
         removeHandler(pipeline, HttpServerCodec.class);
         removeHandler(pipeline, HttpContentDecompressor.class);
         removeHandler(pipeline, HttpObjectAggregator.class);
-        removeHandler(pipeline, MockServerServerCodec.class);
+        removeHandler(pipeline, MockServerHttpServerCodec.class);
         if (pipeline.get(this.getClass()) != null) {
             pipeline.remove(this);
         }

File: mockserver-netty/src/main/java/org/mockserver/netty/unification/PortUnificationHandler.java
Patch:
@@ -15,7 +15,7 @@
 import io.netty.util.AttributeKey;
 import org.apache.commons.lang3.StringUtils;
 import org.mockserver.closurecallback.websocketregistry.CallbackWebSocketServerHandler;
-import org.mockserver.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerHttpServerCodec;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.dashboard.DashboardWebSocketServerHandler;
 import org.mockserver.lifecycle.LifeCycle;
@@ -249,7 +249,7 @@ private void switchToHttp(ChannelHandlerContext ctx, ByteBuf msg) {
         } else {
             addLastIfNotPresent(pipeline, new CallbackWebSocketServerHandler(httpStateHandler));
             addLastIfNotPresent(pipeline, new DashboardWebSocketServerHandler(httpStateHandler, isSslEnabledUpstream(ctx.channel())));
-            addLastIfNotPresent(pipeline, new MockServerServerCodec(mockServerLogger, isSslEnabledUpstream(ctx.channel())));
+            addLastIfNotPresent(pipeline, new MockServerHttpServerCodec(mockServerLogger, isSslEnabledUpstream(ctx.channel())));
             addLastIfNotPresent(pipeline, new HttpRequestHandler(server, httpStateHandler, actionHandler));
             pipeline.remove(this);
 

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/direct/DirectProxyUnificationHandlerTest.java
Patch:
@@ -134,7 +134,7 @@ public void shouldSwitchToHttp() {
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
                 "DashboardWebSocketServerHandler#0",
-                "MockServerServerCodec#0",
+                "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"
             ));
@@ -146,7 +146,7 @@ public void shouldSwitchToHttp() {
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
                 "DashboardWebSocketServerHandler#0",
-                "MockServerServerCodec#0",
+                "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"
             ));

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerSOCKSErrorTest.java
Patch:
@@ -141,7 +141,7 @@ public void shouldSwitchToHttp() {
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
                 "DashboardWebSocketServerHandler#0",
-                "MockServerServerCodec#0",
+                "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"
             ));
@@ -153,7 +153,7 @@ public void shouldSwitchToHttp() {
                 "HttpObjectAggregator#0",
                 "CallbackWebSocketServerHandler#0",
                 "DashboardWebSocketServerHandler#0",
-                "MockServerServerCodec#0",
+                "MockServerHttpServerCodec#0",
                 "HttpRequestHandler#0",
                 "DefaultChannelPipeline$TailContext#0"
             ));

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerTest.java
Patch:
@@ -111,7 +111,7 @@ public void shouldSwitchToHttp() {
             "HttpObjectAggregator#0",
             "CallbackWebSocketServerHandler#0",
             "DashboardWebSocketServerHandler#0",
-            "MockServerServerCodec#0",
+            "MockServerHttpServerCodec#0",
             "HttpRequestHandler#0",
             "DefaultChannelPipeline$TailContext#0"
         ));

File: mockserver-proxy-war/src/main/java/org/mockserver/proxyservlet/ProxyServlet.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.log.MockServerEventLog;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.mappers.HttpServletRequestToMockServerRequestDecoder;
+import org.mockserver.mappers.HttpServletRequestToMockServerHttpRequestDecoder;
 import org.mockserver.mock.HttpState;
 import org.mockserver.mock.action.http.HttpActionHandler;
 import org.mockserver.model.HttpRequest;
@@ -48,15 +48,15 @@ public class ProxyServlet extends HttpServlet implements ServletContextListener
     // serializers
     private PortBindingSerializer portBindingSerializer;
     // mappers
-    private HttpServletRequestToMockServerRequestDecoder httpServletRequestToMockServerRequestDecoder;
+    private HttpServletRequestToMockServerHttpRequestDecoder httpServletRequestToMockServerRequestDecoder;
     // mockserver
     private HttpActionHandler actionHandler;
     private EventLoopGroup workerGroup = new NioEventLoopGroup(ConfigurationProperties.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
 
     @SuppressWarnings("WeakerAccess")
     public ProxyServlet() {
         this.mockServerLogger = new MockServerLogger(MockServerEventLog.class);
-        this.httpServletRequestToMockServerRequestDecoder = new HttpServletRequestToMockServerRequestDecoder(this.mockServerLogger);
+        this.httpServletRequestToMockServerRequestDecoder = new HttpServletRequestToMockServerHttpRequestDecoder(this.mockServerLogger);
         this.scheduler = new Scheduler(mockServerLogger);
         this.httpStateHandler = new HttpState(this.mockServerLogger, this.scheduler);
         this.mockServerLogger = httpStateHandler.getMockServerLogger();

File: mockserver-war/src/main/java/org/mockserver/mockservlet/MockServerServlet.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.log.MockServerEventLog;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.mappers.HttpServletRequestToMockServerRequestDecoder;
+import org.mockserver.mappers.HttpServletRequestToMockServerHttpRequestDecoder;
 import org.mockserver.mock.HttpState;
 import org.mockserver.mock.action.http.HttpActionHandler;
 import org.mockserver.model.HttpRequest;
@@ -48,15 +48,15 @@ public class MockServerServlet extends HttpServlet implements ServletContextList
     // serializers
     private PortBindingSerializer portBindingSerializer;
     // mappers
-    private HttpServletRequestToMockServerRequestDecoder httpServletRequestToMockServerRequestDecoder;
+    private HttpServletRequestToMockServerHttpRequestDecoder httpServletRequestToMockServerRequestDecoder;
     // mockserver
     private HttpActionHandler actionHandler;
     private EventLoopGroup workerGroup = new NioEventLoopGroup(ConfigurationProperties.nioEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-eventLoop"));
 
     @SuppressWarnings("WeakerAccess")
     public MockServerServlet() {
         this.mockServerLogger = new MockServerLogger(MockServerEventLog.class);
-        this.httpServletRequestToMockServerRequestDecoder = new HttpServletRequestToMockServerRequestDecoder(this.mockServerLogger);
+        this.httpServletRequestToMockServerRequestDecoder = new HttpServletRequestToMockServerHttpRequestDecoder(this.mockServerLogger);
         this.scheduler = new Scheduler(mockServerLogger);
         this.httpStateHandler = new HttpState(this.mockServerLogger, this.scheduler);
         this.mockServerLogger = httpStateHandler.getMockServerLogger();

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -37,7 +37,8 @@ public static void configureLogger() {
                     "org.mockserver.logging.StandardOutConsoleHandler.level=ALL" + NEW_LINE +
                     "org.mockserver.logging.StandardOutConsoleHandler.formatter=java.util.logging.SimpleFormatter" + NEW_LINE +
                     "java.util.logging.SimpleFormatter.format=%1$tF %1$tT " + Version.getVersion() + " %3$s  %4$s  %5$s %6$s%n" + NEW_LINE +
-                    ".level=" + javaLoggerLogLevel() + NEW_LINE +
+                    ".level=WARN" + NEW_LINE +
+                    "org.mockserver.level=" + javaLoggerLogLevel() + NEW_LINE +
                     "io.netty.handler.ssl.SslHandler.level=WARNING";
                 LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(loggingConfiguration.getBytes(UTF_8)));
             }

File: mockserver-core/src/main/java/org/mockserver/model/BinaryBody.java
Patch:
@@ -36,6 +36,7 @@ public byte[] getValue() {
         return bytes;
     }
 
+    @JsonIgnore
     public byte[] getRawBytes() {
         return bytes;
     }

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.core.JsonProcessingException;
+import jdk.nashorn.internal.ir.annotations.Ignore;
 import org.mockserver.matchers.MatchType;
 import org.mockserver.serialization.ObjectMapperFactory;
 
@@ -109,6 +110,7 @@ public String getValue() {
         return json;
     }
 
+    @JsonIgnore
     public byte[] getRawBytes() {
         return rawBytes;
     }

File: mockserver-core/src/main/java/org/mockserver/model/StringBody.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockserver.model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
 import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.Objects;
@@ -69,6 +71,7 @@ public String getValue() {
         return value;
     }
 
+    @JsonIgnore
     public byte[] getRawBytes() {
         return rawBytes;
     }

File: mockserver-core/src/main/java/org/mockserver/model/XmlBody.java
Patch:
@@ -57,6 +57,7 @@ public String getValue() {
         return xml;
     }
 
+    @JsonIgnore
     public byte[] getRawBytes() {
         return rawBytes;
     }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/BinaryBodyDTO.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.serialization.model;
 
 import org.mockserver.model.BinaryBody;
+import org.mockserver.model.JsonBody;
 
 /**
  * @author jamesdbloom
@@ -27,6 +28,6 @@ public byte[] getBase64Bytes() {
     }
 
     public BinaryBody buildObject() {
-        return new BinaryBody(getBase64Bytes(), getMediaType());
+        return (BinaryBody) new BinaryBody(getBase64Bytes(), getMediaType()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/JsonBodyDTO.java
Patch:
@@ -37,6 +37,6 @@ public byte[] getRawBytes() {
     }
 
     public JsonBody buildObject() {
-        return new JsonBody(getJson(), getRawBytes(), getMediaType(), getMatchType());
+        return (JsonBody) new JsonBody(getJson(), getRawBytes(), getMediaType(), getMatchType()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/JsonPathBodyDTO.java
Patch:
@@ -25,6 +25,6 @@ public String getJsonPath() {
     }
 
     public JsonPathBody buildObject() {
-        return new JsonPathBody(getJsonPath());
+        return (JsonPathBody) new JsonPathBody(getJsonPath()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/JsonSchemaBodyDTO.java
Patch:
@@ -25,6 +25,6 @@ public String getJson() {
     }
 
     public JsonSchemaBody buildObject() {
-        return new JsonSchemaBody(getJson());
+        return (JsonSchemaBody) new JsonSchemaBody(getJson()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/LogEventBodyDTO.java
Patch:
@@ -21,6 +21,6 @@ public Object getValue() {
 
     @Override
     public LogEventBody buildObject() {
-        return new LogEventBody(value);
+        return (LogEventBody) new LogEventBody(value).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/ParameterBodyDTO.java
Patch:
@@ -27,7 +27,7 @@ public Parameters getParameters() {
     }
 
     public ParameterBody buildObject() {
-        return new ParameterBody(parameters);
+        return (ParameterBody) new ParameterBody(parameters).withOptional(getOptional());
     }
 
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/RegexBodyDTO.java
Patch:
@@ -25,6 +25,6 @@ public String getRegex() {
     }
 
     public RegexBody buildObject() {
-        return new RegexBody(getRegex());
+        return (RegexBody) new RegexBody(getRegex()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/StringBodyDTO.java
Patch:
@@ -35,6 +35,6 @@ public byte[] getRawBytes() {
     }
 
     public StringBody buildObject() {
-        return new StringBody(getString(), getRawBytes(), isSubString(), getMediaType());
+        return (StringBody) new StringBody(getString(), getRawBytes(), isSubString(), getMediaType()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/XPathBodyDTO.java
Patch:
@@ -25,6 +25,6 @@ public String getXPath() {
     }
 
     public XPathBody buildObject() {
-        return new XPathBody(getXPath());
+        return (XPathBody) new XPathBody(getXPath()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/XmlBodyDTO.java
Patch:
@@ -30,6 +30,6 @@ public byte[] getRawBytes() {
     }
 
     public XmlBody buildObject() {
-        return new XmlBody(getXml(), getRawBytes(), getMediaType());
+        return (XmlBody) new XmlBody(getXml(), getRawBytes(), getMediaType()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/XmlSchemaBodyDTO.java
Patch:
@@ -25,6 +25,6 @@ public String getXml() {
     }
 
     public XmlSchemaBody buildObject() {
-        return new XmlSchemaBody(getXml());
+        return (XmlSchemaBody) new XmlSchemaBody(getXml()).withOptional(getOptional());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/body/StringBodySerializer.java
Patch:
@@ -32,9 +32,6 @@ public void serialize(StringBody stringBody, JsonGenerator jgen, SerializerProvi
             }
             jgen.writeStringField("type", stringBody.getType().name());
             jgen.writeStringField("string", stringBody.getValue());
-            if (stringBody.getRawBytes() != null) {
-                jgen.writeObjectField("rawBytes", stringBody.getRawBytes());
-            }
             if (subStringFieldNotDefault) {
                 jgen.writeBooleanField("subString", true);
             }

File: mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest.java
Patch:
@@ -168,7 +168,6 @@ public void shouldReturnFormattedRequestInToString() {
                 "  \"body\" : {" + NEW_LINE +
                 "    \"type\" : \"STRING\"," + NEW_LINE +
                 "    \"string\" : \"some_body\"," + NEW_LINE +
-                "    \"rawBytes\" : \"c29tZV9ib2R5\"," + NEW_LINE +
                 "    \"contentType\" : \"text/plain; charset=iso-8859-1\"" + NEW_LINE +
                 "  }," + NEW_LINE +
                 "  \"delay\" : {" + NEW_LINE +

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/StrictBodyDTODeserializer.java
Patch:
@@ -23,6 +23,7 @@
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.slf4j.event.Level.DEBUG;
+import static org.slf4j.event.Level.TRACE;
 
 /**
  * @author jamesdbloom
@@ -77,10 +78,10 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                         try {
                             type = Body.Type.valueOf(String.valueOf(entry.getValue()));
                         } catch (IllegalArgumentException iae) {
-                            if (MockServerLogger.isEnabled(DEBUG)) {
+                            if (MockServerLogger.isEnabled(TRACE)) {
                                 MOCK_SERVER_LOGGER.logEvent(
                                     new LogEntry()
-                                        .setLogLevel(DEBUG)
+                                        .setLogLevel(TRACE)
                                         .setMessageFormat("ignoring invalid value for \"type\" field of \"" + entry.getValue() + "\"")
                                         .setThrowable(iae)
                                 );

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/string/NottableStringDeserializerTest.java
Patch:
@@ -138,7 +138,7 @@ public void shouldParseJSONWithSchemaMethod() throws IOException {
         assertThat(expectationDTO, is(new ExpectationDTO()
             .setHttpRequest(
                 new HttpRequestDTO()
-                    .setPath(schemaString("{" + NEW_LINE +
+                    .setMethod(schemaString("{" + NEW_LINE +
                         "  \"type\" : \"string\"" + NEW_LINE +
                         "}"))
             )));
@@ -160,9 +160,9 @@ public void shouldParseJSONWithNottedSchemaMethod() throws IOException {
         assertThat(expectationDTO, is(new ExpectationDTO()
             .setHttpRequest(
                 new HttpRequestDTO()
-                    .setPath(schemaString("{" + NEW_LINE +
+                    .setMethod(schemaString("{" + NEW_LINE +
                         "  \"type\" : \"string\"" + NEW_LINE +
-                        "}"))
+                        "}", true))
             )));
     }
 

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/string/NottableStringSerializer.java
Patch:
@@ -12,7 +12,6 @@
 
 import java.io.IOException;
 
-import static org.mockserver.model.NottableString.NOT_CHAR;
 import static org.mockserver.model.NottableString.serialiseNottableString;
 
 /**
@@ -31,7 +30,7 @@ public void serialize(NottableString nottableString, JsonGenerator jgen, Seriali
         if (nottableString instanceof NottableSchemaString) {
             JsonNode jsonNode = OBJECT_MAPPER.readTree(nottableString.getValue());
             if (Boolean.TRUE.equals(nottableString.isNot()) && jsonNode instanceof ObjectNode) {
-                ((ObjectNode)jsonNode).put("not", true);
+                ((ObjectNode) jsonNode).put("not", true);
             }
             jgen.writeObject(jsonNode);
         } else {

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonStringMatcher.java
Patch:
@@ -64,15 +64,14 @@ public boolean matches(final MatchDifference context, String matched) {
                     if (matcherJsonNode == null) {
                         matcherJsonNode = ObjectMapperFactory.createObjectMapper().readTree(matcher);
                     }
-                    Diff diff = Diff
+                    result = Diff
                         .create(
                             matcherJsonNode,
                             ObjectMapperFactory.createObjectMapper().readTree(matched),
                             "",
                             "",
                             diffConfig
-                        );
-                    result = diff
+                        )
                         .similar();
                 } catch (Throwable throwable) {
                     if (context != null) {

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/BodyDTODeserializer.java
Patch:
@@ -93,10 +93,10 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                         }
                         if (Map.class.isAssignableFrom(entry.getValue().getClass()) ||
                             containsIgnoreCase(key, "json", "jsonSchema") && !String.class.isAssignableFrom(entry.getValue().getClass())) {
-                            if (objectWriter == null) {
-                                objectWriter = ObjectMapperFactory.createObjectMapper().writerWithDefaultPrettyPrinter();
+                            if (jsonBodyObjectWriter == null) {
+                                jsonBodyObjectWriter = new ObjectMapper().writerWithDefaultPrettyPrinter();
                             }
-                            valueJsonValue = objectWriter.writeValueAsString(entry.getValue());
+                            valueJsonValue = jsonBodyObjectWriter.writeValueAsString(entry.getValue());
                         } else {
                             valueJsonValue = String.valueOf(entry.getValue());
                         }

File: mockserver-core/src/main/java/org/mockserver/log/MockServerEventLog.java
Patch:
@@ -102,17 +102,17 @@ private void startRingBuffer() {
         final ExceptionHandler<LogEntry> errorHandler = new ExceptionHandler<LogEntry>() {
             @Override
             public void handleEventException(Throwable ex, long sequence, LogEntry logEntry) {
-                logger.error("Exception handling log entry in log ring buffer, for log entry: " + logEntry, ex);
+                logger.error("exception handling log entry in log ring buffer, for log entry: " + logEntry, ex);
             }
 
             @Override
             public void handleOnStartException(Throwable ex) {
-                logger.error("Exception starting log ring buffer", ex);
+                logger.error("exception starting log ring buffer", ex);
             }
 
             @Override
             public void handleOnShutdownException(Throwable ex) {
-                logger.error("Exception during shutdown of log ring buffer", ex);
+                logger.error("exception during shutdown of log ring buffer", ex);
             }
         };
         disruptor.setDefaultExceptionHandler(errorHandler);

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -37,7 +37,7 @@ public static void configureLogger() {
                     "org.mockserver.logging.StandardOutConsoleHandler.level=ALL" + NEW_LINE +
                     "org.mockserver.logging.StandardOutConsoleHandler.formatter=java.util.logging.SimpleFormatter" + NEW_LINE +
                     "java.util.logging.SimpleFormatter.format=%1$tF %1$tT " + Version.getVersion() + " %3$s  %4$s  %5$s %6$s%n" + NEW_LINE +
-                    ".level=" + javaLoggerLogLevel() + "" + NEW_LINE +
+                    ".level=" + javaLoggerLogLevel() + NEW_LINE +
                     "io.netty.handler.ssl.SslHandler.level=WARNING";
                 LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(loggingConfiguration.getBytes(UTF_8)));
             }

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestPropertiesMatcher.java
Patch:
@@ -321,6 +321,9 @@ private static boolean combinedResultAreTrue(boolean... inputs) {
 
     @SuppressWarnings("unchecked")
     private boolean bodyMatches(MatchDifference context, HttpRequest request) {
+        if (controlPlaneMatcher && httpRequest.getBody() != null && httpRequest.getBody().equals(request.getBody())) {
+            return true;
+        }
         boolean bodyMatches;
         String bodyAsString = request.getBody() != null ? new String(request.getBody().getRawBytes(), request.getBody().getCharset(DEFAULT_HTTP_CHARACTER_SET)) : "";
         if (bodyMatcher instanceof BinaryMatcher) {

File: mockserver-core/src/main/java/org/mockserver/matchers/RegexStringMatcher.java
Patch:
@@ -41,15 +41,15 @@ public boolean matches(String matched) {
     public boolean matches(final MatchDifference context, NottableString matched) {
         boolean result = false;
 
-        if (matcher == null || matches(matcher.getValue(), matched.getValue(), true)) {
+        if (matcher == null || matches(matcher, matched, true)) {
             result = true;
         }
 
         if (!result && context != null) {
             context.addDifference(mockServerLogger, "string or regex match failed expected:{}found:{}", this.matcher, matched);
         }
 
-        return matched.isNot() == (matcher.isNot() == (not != result));
+        return not != result;
     }
 
     public boolean matches(NottableString matcher, NottableString matched, boolean ignoreCase) {

File: mockserver-core/src/main/java/org/mockserver/model/NottableSchemaString.java
Patch:
@@ -134,7 +134,8 @@ private NottableSchemaString(String schema) {
     public boolean matches(String json) {
         if (schemaJsonNode != null) {
             try {
-                return isNot() != VALIDATOR.validate(schemaJsonNode, convertToJsonNode(json, type, format), true).isSuccess();
+                JsonNode instance = convertToJsonNode(json, type, format);
+                return isNot() != VALIDATOR.validate(schemaJsonNode, instance, true).isSuccess();
             } catch (Throwable throwable) {
                 MOCK_SERVER_LOGGER.logEvent(
                     new LogEntry()

File: mockserver-core/src/main/java/org/mockserver/model/NottableString.java
Patch:
@@ -13,7 +13,7 @@
  */
 public class NottableString extends ObjectWithJsonToString implements Comparable<NottableString> {
 
-    private static final char NOT_CHAR = '!';
+    public static final char NOT_CHAR = '!';
     private final String value;
     private final boolean isBlank;
     private final Boolean not;

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPIConverter.java
Patch:
@@ -182,7 +182,7 @@ private String serialise(Object example) {
             mockServerLogger.logEvent(
                 new LogEntry()
                     .setLogLevel(ERROR)
-                    .setMessageFormat("Exception while serialising " + example.getClass() + " {}")
+                    .setMessageFormat("exception while serialising " + example.getClass() + " {}")
                     .setArguments(example)
                     .setThrowable(throwable)
             );

File: mockserver-core/src/main/java/org/mockserver/openapi/OpenAPISerialiser.java
Patch:
@@ -49,7 +49,7 @@ public String asString(OpenAPIDefinition openAPIDefinition) {
             mockServerLogger.logEvent(
                 new LogEntry()
                     .setLogLevel(ERROR)
-                    .setMessageFormat("Exception while serialising specification for OpenAPIDefinition{}")
+                    .setMessageFormat("exception while serialising specification for OpenAPIDefinition{}")
                     .setArguments(openAPIDefinition)
                     .setThrowable(throwable)
             );

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/collections/CookiesSerializer.java
Patch:
@@ -23,7 +23,7 @@ public CookiesSerializer() {
     public void serialize(Cookies collection, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         jgen.writeStartObject();
         for (Cookie cookie : collection.getEntries()) {
-            jgen.writeStringField(serialiseNottableString(cookie.getName()), serialiseNottableString(cookie.getValue()));
+            jgen.writeObjectField(serialiseNottableString(cookie.getName()), cookie.getValue());
         }
         jgen.writeEndObject();
     }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/collections/KeysToMultiValuesSerializer.java
Patch:
@@ -29,7 +29,7 @@ public void serialize(T collection, JsonGenerator jgen, SerializerProvider provi
             Collection<NottableString> values = collection.getValues(key);
             jgen.writeStartArray(values.size());
             for (NottableString nottableString : values) {
-                jgen.writeString(serialiseNottableString(nottableString));
+                jgen.writeObject(nottableString);
             }
             jgen.writeEndArray();
         }

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactoryFactory.java
Patch:
@@ -29,7 +29,7 @@ public static KeyAndCertificateFactory createKeyAndCertificateFactory(MockServer
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(Level.ERROR)
-                        .setMessageFormat("Failed to instantiate the BouncyCastle KeyAndCertificateFactory because BouncyCastle library is not available in classpath please ensure the following dependencies are available")
+                        .setMessageFormat("failed to instantiate the BouncyCastle KeyAndCertificateFactory because BouncyCastle library is not available in classpath please ensure the following dependencies are available")
                         .setArguments("<dependency>\n" +
                             "    <groupId>org.bouncycastle</groupId>\n" +
                             "    <artifactId>bcprov-jdk15on</artifactId>\n" +
@@ -51,7 +51,7 @@ public static KeyAndCertificateFactory createKeyAndCertificateFactory(MockServer
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(Level.ERROR)
-                        .setMessageFormat("Failed to instantiate the BouncyCastle KeyAndCertificateFactory")
+                        .setMessageFormat("failed to instantiate the BouncyCastle KeyAndCertificateFactory")
                         .setThrowable(throwable)
                 );
             }

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -144,7 +144,7 @@ public synchronized SslContext createServerSslContext() {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(Level.ERROR)
-                        .setMessageFormat("Exception creating SSL context for server" + throwable.getMessage())
+                        .setMessageFormat("exception creating SSL context for server" + throwable.getMessage())
                         .setThrowable(throwable)
                 );
             }

File: mockserver-core/src/main/java/org/mockserver/socket/tls/jdk/X509Generator.java
Patch:
@@ -167,7 +167,7 @@ private GeneralName buildGeneralName(final String subjectAlternativeName) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(Level.WARN)
-                        .setMessageFormat("Unable to use ip address with the value \"" + subjectAlternativeName + "\" as Subject Alternative Name (SAN) for X509 as JDK does not support SANs with that format")
+                        .setMessageFormat("unable to use ip address with the value \"" + subjectAlternativeName + "\" as Subject Alternative Name (SAN) for X509 as JDK does not support SANs with that format")
                         .setThrowable(throwable)
                 );
             }
@@ -181,7 +181,7 @@ private GeneralName buildGeneralName(final String subjectAlternativeName) {
                     mockServerLogger.logEvent(
                         new LogEntry()
                             .setLogLevel(Level.WARN)
-                            .setMessageFormat("Unable to use domain name with the value \"" + subjectAlternativeName + "\" as Subject Alternative Name (SAN) for X509 as JDK does not support SANs with that format")
+                            .setMessageFormat("unable to use domain name with the value \"" + subjectAlternativeName + "\" as Subject Alternative Name (SAN) for X509 as JDK does not support SANs with that format")
                             .setThrowable(throwable)
                     );
                 }
@@ -193,7 +193,7 @@ private GeneralName buildGeneralName(final String subjectAlternativeName) {
                 mockServerLogger.logEvent(
                     new LogEntry()
                         .setLogLevel(Level.WARN)
-                        .setMessageFormat("Unable to use domain name with the value \"" + subjectAlternativeName + "\" as Subject Alternative Name (SAN) for X509 as JDK does not support SANs with that format")
+                        .setMessageFormat("unable to use domain name with the value \"" + subjectAlternativeName + "\" as Subject Alternative Name (SAN) for X509 as JDK does not support SANs with that format")
                         .setThrowable(throwable)
                 );
             }

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidator.java
Patch:
@@ -13,8 +13,8 @@ private JsonSchemaExpectationValidator(MockServerLogger mockServerLogger) {
             "org/mockserver/model/schema/",
             "expectation",
             "requestDefinition",
-            "httpRequest",
             "openAPIDefinition",
+            "httpRequest",
             "httpResponse",
             "httpTemplate",
             "httpForward",
@@ -24,6 +24,7 @@ private JsonSchemaExpectationValidator(MockServerLogger mockServerLogger) {
             "httpError",
             "times",
             "timeToLive",
+            "stringOrJsonSchema",
             "body",
             "bodyWithContentType",
             "delay",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestAndHttpResponseValidator.java
Patch:
@@ -13,8 +13,9 @@ private JsonSchemaHttpRequestAndHttpResponseValidator(MockServerLogger mockServe
             "org/mockserver/model/schema/",
             "httpRequestAndHttpResponse",
             "requestDefinition",
-            "httpRequest",
             "openAPIDefinition",
+            "httpRequest",
+            "stringOrJsonSchema",
             "body",
             "keyToMultiValue",
             "keyToValue",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestValidator.java
Patch:
@@ -12,6 +12,7 @@ private JsonSchemaHttpRequestValidator(MockServerLogger mockServerLogger) {
             mockServerLogger,
             "org/mockserver/model/schema/",
             "httpRequest",
+            "stringOrJsonSchema",
             "body",
             "keyToMultiValue",
             "keyToValue",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaHttpResponseValidator.java
Patch:
@@ -12,6 +12,7 @@ private JsonSchemaHttpResponseValidator(MockServerLogger mockServerLogger) {
             mockServerLogger,
             "org/mockserver/model/schema/",
             "httpResponse",
+            "stringOrJsonSchema",
             "bodyWithContentType",
             "delay",
             "connectionOptions",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaRequestDefinitionValidator.java
Patch:
@@ -13,6 +13,7 @@ private JsonSchemaRequestDefinitionValidator(MockServerLogger mockServerLogger)
             "org/mockserver/model/schema/",
             "requestDefinition",
             "httpRequest",
+            "stringOrJsonSchema",
             "openAPIDefinition",
             "body",
             "keyToMultiValue",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidator.java
Patch:
@@ -13,8 +13,9 @@ private JsonSchemaVerificationSequenceValidator(MockServerLogger mockServerLogge
             "org/mockserver/model/schema/",
             "verificationSequence",
             "requestDefinition",
-            "httpRequest",
             "openAPIDefinition",
+            "httpRequest",
+            "stringOrJsonSchema",
             "body",
             "keyToMultiValue",
             "keyToValue"

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidator.java
Patch:
@@ -13,8 +13,9 @@ private JsonSchemaVerificationValidator(MockServerLogger mockServerLogger) {
             "org/mockserver/model/schema/",
             "verification",
             "requestDefinition",
-            "httpRequest",
             "openAPIDefinition",
+            "httpRequest",
+            "stringOrJsonSchema",
             "body",
             "keyToMultiValue",
             "keyToValue",

File: mockserver-core/src/test/java/org/mockserver/openapi/OpenAPIConverterTest.java
Patch:
@@ -316,7 +316,7 @@ public void shouldHandleInvalidOpenAPIJson() {
                 " in 'reader', line 1, column 19:" + NEW_LINE +
                 "    \"openapi\": \"3.0.0\"," + NEW_LINE +
                 "                      ^" + NEW_LINE +
-                "" + NEW_LINE +
+                NEW_LINE +
                 " at [Source: (StringReader); line: 1, column: 19]"));
         }
     }
@@ -370,7 +370,7 @@ public void shouldHandleInvalidOpenAPIJsonUrl() {
                 " in 'reader', line 1, column 19:" + NEW_LINE +
                 "    \"openapi\": \"3.0.0\"," + NEW_LINE +
                 "                      ^" + NEW_LINE +
-                "" + NEW_LINE +
+                NEW_LINE +
                 " at [Source: (StringReader); line: 1, column: 19]"));
         }
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/OpenAPIExpectationSerializerIntegrationTest.java
Patch:
@@ -281,7 +281,7 @@ public void shouldReturnJsonWithOpenAPISpec() throws JsonProcessingException {
                 .withSpecUrlOrPayload(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json"))
         ), is("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}"
         ));
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/expectation/OpenAPIExpectationDTODeserializerTest.java
Patch:
@@ -102,7 +102,7 @@ public void shouldParseJsonWithOpenAPISpecAndOperationId() throws JsonProcessing
     public void shouldParseJsonWithOpenAPISpec() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().readValue("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}", OpenAPIExpectationDTO.class), is(
             new OpenAPIExpectationDTO(openAPIExpectation()
                 .withSpecUrlOrPayload(ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString())

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/request/RequestDefinitionDTODeserializerTest.java
Patch:
@@ -105,7 +105,7 @@ public void shouldParseJsonWithOpenAPISpecAndOperationId() throws JsonProcessing
     public void shouldParseJsonWithOpenAPISpec() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().readValue("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}", RequestDefinitionDTO.class), is(
             new OpenAPIDefinitionDTO(openAPI()
                 .withSpecUrlOrPayload(ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString())

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonSchemaBodyDTOSerializerTest.java
Patch:
@@ -14,13 +14,13 @@ public class JsonSchemaBodyDTOSerializerTest {
     @Test
     public void shouldSerializeJsonBodyDTO() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new JsonSchemaBodyDTO(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}"), false)),
-                is("{\"type\":\"JSON_SCHEMA\",\"jsonSchema\":\"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}}, \\\"required\\\": [\\\"id\\\"]}\"}"));
+                is("{\"type\":\"JSON_SCHEMA\",\"jsonSchema\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"required\":[\"id\"]}}"));
     }
 
     @Test
     public void shouldSerializeJsonBodyDTOWithNot() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new JsonSchemaBodyDTO(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}"), true)),
-                is("{\"not\":true,\"type\":\"JSON_SCHEMA\",\"jsonSchema\":\"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}}, \\\"required\\\": [\\\"id\\\"]}\"}"));
+                is("{\"not\":true,\"type\":\"JSON_SCHEMA\",\"jsonSchema\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"required\":[\"id\"]}}"));
     }
 
 }
\ No newline at end of file

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonSchemaBodySerializerTest.java
Patch:
@@ -14,13 +14,13 @@ public class JsonSchemaBodySerializerTest {
     @Test
     public void shouldSerializeJsonBody() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}")),
-                is("{\"type\":\"JSON_SCHEMA\",\"jsonSchema\":\"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}}, \\\"required\\\": [\\\"id\\\"]}\"}"));
+                is("{\"type\":\"JSON_SCHEMA\",\"jsonSchema\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"required\":[\"id\"]}}"));
     }
 
     @Test
     public void shouldSerializeJsonBodyWithNot() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(not(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}"))),
-                is("{\"not\":true,\"type\":\"JSON_SCHEMA\",\"jsonSchema\":\"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}}, \\\"required\\\": [\\\"id\\\"]}\"}"));
+                is("{\"not\":true,\"type\":\"JSON_SCHEMA\",\"jsonSchema\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"}},\"required\":[\"id\"]}}"));
     }
 
 }
\ No newline at end of file

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/expectation/OpenAPIExpectationDTOSerializerTest.java
Patch:
@@ -113,7 +113,7 @@ public void shouldReturnJsonWithOpenAPISpec() throws JsonProcessingException {
                 .withSpecUrlOrPayload(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json"))
         )), is("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}"
         ));
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/expectation/OpenAPIExpectationSerializerTest.java
Patch:
@@ -113,7 +113,7 @@ public void shouldReturnJsonWithOpenAPISpec() throws JsonProcessingException {
                 .withSpecUrlOrPayload(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json"))
         ), is("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}"
         ));
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/HttpRequestSerializerTest.java
Patch:
@@ -79,7 +79,9 @@ public void shouldReturnJsontWithJsonBodyInToString() throws JsonProcessingExcep
                 "  }," + NEW_LINE +
                 "  \"body\" : {" + NEW_LINE +
                 "    \"type\" : \"JSON\"," + NEW_LINE +
-                "    \"json\" : \"{ \\\"key\\\": \\\"some_value\\\" }\"" + NEW_LINE +
+                "    \"json\" : {" + NEW_LINE +
+                "      \"key\" : \"some_value\"" + NEW_LINE +
+                "    }" + NEW_LINE +
                 "  }" + NEW_LINE +
                 "}"));
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/OpenAPIDefinitionDTOSerializerTest.java
Patch:
@@ -94,7 +94,7 @@ public void shouldReturnJsonWithOpenAPISpec() throws JsonProcessingException {
                 .withSpecUrlOrPayload(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json"))
         )), is("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}"
         ));
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/request/OpenAPIDefinitionSerializerTest.java
Patch:
@@ -93,7 +93,7 @@ public void shouldReturnJsonWithOpenAPISpec() throws JsonProcessingException {
                 .withSpecUrlOrPayload(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json"))
         ), is("" +
             "{" + NEW_LINE +
-            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + "" + NEW_LINE +
+            "  \"specUrlOrPayload\" : " + ObjectMapperFactory.createObjectMapper().readTree(FileReader.readFileFromClassPathOrPath("org/mockserver/mock/openapi_simple_example.json")).toPrettyString().replaceAll("\\R", "\n  ") + NEW_LINE +
             "}"
         ));
     }

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/HttpResponseDTOSerializerTest.java
Patch:
@@ -103,7 +103,9 @@ public void shouldReturnFormattedResponseWithJsonBodyInToString() throws JsonPro
                 "  }," + NEW_LINE +
                 "  \"body\" : {" + NEW_LINE +
                 "    \"type\" : \"JSON\"," + NEW_LINE +
-                "    \"json\" : \"{ \\\"key\\\": \\\"some_value\\\" }\"," + NEW_LINE +
+                "    \"json\" : {" + NEW_LINE +
+                "      \"key\" : \"some_value\"" + NEW_LINE +
+                "    }," + NEW_LINE +
                 "    \"rawBytes\" : \"eyAia2V5IjogInNvbWVfdmFsdWUiIH0=\"" + NEW_LINE +
                 "  }" + NEW_LINE +
                 "}"));

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/response/HttpResponseSerializerTest.java
Patch:
@@ -95,7 +95,9 @@ public void shouldReturnFormattedResponseWithJsonBodyInToString() throws JsonPro
                 "  }," + NEW_LINE +
                 "  \"body\" : {" + NEW_LINE +
                 "    \"type\" : \"JSON\"," + NEW_LINE +
-                "    \"json\" : \"{ \\\"key\\\": \\\"some_value\\\" }\"" + NEW_LINE +
+                "    \"json\" : {" + NEW_LINE +
+                "      \"key\" : \"some_value\"" + NEW_LINE +
+                "    }" + NEW_LINE +
                 "  }" + NEW_LINE +
                 "}"));
     }

File: mockserver-netty/src/test/java/org/mockserver/netty/HttpRequestHandlerTest.java
Patch:
@@ -296,7 +296,7 @@ public void shouldRetrieveLogMessages() {
                     NEW_LINE +
                     "------------------------------------" + NEW_LINE +
                     LOG_DATE_FORMAT.format(new Date(TimeService.currentTimeMillis())) + " - retrieving logs that match:" + NEW_LINE +
-                    "" + NEW_LINE +
+                    NEW_LINE +
                     "  {" + NEW_LINE +
                     "    \"path\" : \"request_one\"" + NEW_LINE +
                     "  }" + NEW_LINE +

File: mockserver-war/src/test/java/org/mockserver/mockservlet/MockServerServletTest.java
Patch:
@@ -335,7 +335,7 @@ public void shouldRetrieveLogMessages() {
             // then
             assertThat(response.getStatus(), is(200));
             assertThat(new String(response.getContentAsByteArray(), UTF_8), containsString("creating expectation:" + NEW_LINE +
-                "" + NEW_LINE +
+                NEW_LINE +
                 "  {" + NEW_LINE +
                 "    \"id\" : \"" + UUIDService.getUUID() + "\"," + NEW_LINE +
                 "    \"priority\" : 0," + NEW_LINE +

File: mockserver-core/src/main/java/org/mockserver/log/MockServerEventLog.java
Patch:
@@ -293,7 +293,7 @@ private <T> void retrieveLogEntries(RequestDefinition requestDefinition, Predica
         );
     }
 
-    public <T> void retrieveLogEntriesInReverse(HttpRequest httpRequest, Predicate<LogEntry> logEntryPredicate, Function<LogEntry, T> logEntryMapper, Consumer<Stream<T>> consumer) {
+    public <T> void retrieveLogEntriesInReverse(RequestDefinition httpRequest, Predicate<LogEntry> logEntryPredicate, Function<LogEntry, T> logEntryMapper, Consumer<Stream<T>> consumer) {
         disruptor.publishEvent(new LogEntry()
             .setType(RUNNABLE)
             .setConsumer(() -> {

File: mockserver-core/src/main/java/org/mockserver/matchers/ParameterStringMatcher.java
Patch:
@@ -2,12 +2,9 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.netty.handler.codec.http.QueryStringDecoder;
-import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.Parameters;
 
-import static org.slf4j.event.Level.DEBUG;
-
 /**
  * @author jamesdbloom
  */

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardHandler.java
Patch:
@@ -27,7 +27,7 @@
 public class DashboardHandler {
 
     private static final Map<String, String> MIME_MAP = new HashMap<>();
-    private static final List<String> IS_TEST = ImmutableList.of(
+    private static final List<String> IS_STRING_CONTENT = ImmutableList.of(
         "css",
         "js",
         "map",
@@ -57,7 +57,7 @@ public void renderDashboard(final ChannelHandlerContext ctx, final HttpRequest r
             InputStream contentStream = DashboardHandler.class.getResourceAsStream("/org/mockserver/dashboard" + path);
             if (contentStream != null) {
                 final String extension = substringAfterLast(path, ".");
-                if (IS_TEST.contains(extension)) {
+                if (IS_STRING_CONTENT.contains(extension)) {
                     final String content = new String(ByteStreams.toByteArray(contentStream), UTF_8.name());
                     response =
                         response()

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardWebSocketServerHandler.java
Patch:
@@ -280,7 +280,7 @@ public void updated(RequestMatchers requestMatchers, MockServerMatcherNotifier.C
         }
     }
 
-    private void sendUpdate(HttpRequest httpRequest, ChannelHandlerContext channelHandlerContext) {
+    private void sendUpdate(RequestDefinition httpRequest, ChannelHandlerContext channelHandlerContext) {
         mockServerEventLog
             .retrieveLogEntriesInReverse(
                 httpRequest,

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -348,14 +348,14 @@ private String bestSchemaDefinition(String fieldName, JsonNode jsonNode) {
 
     private boolean isErrorForField(JsonNode reports, String fieldPointer, String fieldName) {
         return fieldPointer.endsWith(fieldName) // http response
-            || (fieldPointer.endsWith("/httpRequest") && reports.has("/definitions/requestDefinition/oneOf/0") && stream(reports.get("/definitions/requestDefinition/oneOf/0").iterator()).anyMatch(jsonNode -> pointerValue(jsonNode.get("instance")).endsWith(fieldName))); // http request
+            || (fieldPointer.contains("/httpRequest") && reports.has("/definitions/requestDefinition/oneOf/0") && stream(reports.get("/definitions/requestDefinition/oneOf/0").iterator()).anyMatch(jsonNode -> pointerValue(jsonNode.get("instance")).endsWith(fieldName))); // http request(s)
     }
 
     private String deepFieldName(JsonNode reports, String fieldPointer, String fieldName) {
         if (fieldPointer.endsWith(fieldName)) {
             // http response
             return fieldPointer;
-        } else if (fieldPointer.endsWith("/httpRequest") && reports.has("/definitions/requestDefinition/oneOf/0") && stream(reports.get("/definitions/requestDefinition/oneOf/0").iterator()).anyMatch(jsonNode -> pointerValue(jsonNode.get("instance")).endsWith(fieldName))) {
+        } else if (fieldPointer.contains("/httpRequest") && reports.has("/definitions/requestDefinition/oneOf/0") && stream(reports.get("/definitions/requestDefinition/oneOf/0").iterator()).anyMatch(jsonNode -> pointerValue(jsonNode.get("instance")).endsWith(fieldName))) {
             // http request
             return stream(reports.get("/definitions/requestDefinition/oneOf/0").iterator()).filter(jsonNode -> pointerValue(jsonNode.get("instance")).endsWith(fieldName)).findFirst().map(instanceNode -> pointerValue(instanceNode.get("instance"))).orElse("");
         } else {

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSequenceSerializer.java
Patch:
@@ -14,6 +14,7 @@
 import static org.mockserver.log.model.LogEntry.LogMessageType.VERIFICATION_FAILED;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;
+import static org.mockserver.validator.jsonschema.JsonSchemaVerificationSequenceValidator.jsonSchemaVerificationSequenceValidator;
 
 /**
  * @author jamesdbloom
@@ -26,7 +27,7 @@ public class VerificationSequenceSerializer implements Serializer<VerificationSe
 
     public VerificationSequenceSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        verificationSequenceValidator = new JsonSchemaVerificationSequenceValidator(mockServerLogger);
+        verificationSequenceValidator = jsonSchemaVerificationSequenceValidator(mockServerLogger);
     }
 
     public String serialize(VerificationSequence verificationSequence) {

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSerializer.java
Patch:
@@ -14,6 +14,7 @@
 import static org.mockserver.log.model.LogEntry.LogMessageType.VERIFICATION_FAILED;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;
+import static org.mockserver.validator.jsonschema.JsonSchemaVerificationValidator.jsonSchemaVerificationValidator;
 
 /**
  * @author jamesdbloom
@@ -26,7 +27,7 @@ public class VerificationSerializer implements Serializer<Verification> {
 
     public VerificationSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        verificationValidator = new JsonSchemaVerificationValidator(mockServerLogger);
+        verificationValidator = jsonSchemaVerificationValidator(mockServerLogger);
     }
 
     public String serialize(Verification verification) {

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidator.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class JsonSchemaVerificationSequenceValidator extends JsonSchemaValidator {
 
-    public JsonSchemaVerificationSequenceValidator(MockServerLogger mockServerLogger) {
+    private JsonSchemaVerificationSequenceValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
             "org/mockserver/model/schema/",

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidator.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class JsonSchemaVerificationValidator extends JsonSchemaValidator {
 
-    public JsonSchemaVerificationValidator(MockServerLogger mockServerLogger) {
+    private JsonSchemaVerificationValidator(MockServerLogger mockServerLogger) {
         super(
             mockServerLogger,
             "org/mockserver/model/schema/",

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidatorIntegrationTest.java
Patch:
@@ -7,13 +7,14 @@
 import static org.junit.Assert.assertThat;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.validator.jsonschema.JsonSchemaValidator.OPEN_API_SPECIFICATION_URL;
+import static org.mockserver.validator.jsonschema.JsonSchemaVerificationSequenceValidator.jsonSchemaVerificationSequenceValidator;
 
 /**
  * @author jamesdbloom
  */
 public class JsonSchemaVerificationSequenceValidatorIntegrationTest {
 
-    private final JsonSchemaValidator jsonSchemaValidator = new JsonSchemaVerificationSequenceValidator(new MockServerLogger());
+    private final JsonSchemaValidator jsonSchemaValidator = jsonSchemaVerificationSequenceValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
+import org.apache.commons.lang3.StringUtils;
 import org.mockserver.Version;
 import org.mockserver.client.MockServerEventBus.EventType;
 import org.mockserver.configuration.ConfigurationProperties;
@@ -194,8 +195,8 @@ private HttpResponse sendRequest(HttpRequest request, boolean ignoreErrors) {
                 }
                 String serverVersion = response.getFirstHeader("version");
                 String clientVersion = Version.getVersion();
-                if (isNotBlank(serverVersion) && isNotBlank(clientVersion) && !clientVersion.equals(serverVersion)) {
-                    throw new ClientException("Client version \"" + clientVersion + "\" does not match server version \"" + serverVersion + "\"");
+                if (!Version.matchesMajorMinorVersion(serverVersion)) {
+                    throw new ClientException("Client version \"" + clientVersion + "\" major and minor versions do not match server version \"" + serverVersion + "\"");
                 }
             }
 

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -14,7 +14,8 @@
 public class JsonBody extends BodyWithContentType<String> {
 
     public static final MatchType DEFAULT_MATCH_TYPE = MatchType.ONLY_MATCHING_FIELDS;
-    public static final MediaType DEFAULT_CONTENT_TYPE = MediaType.create("application", "json");
+    // setting default to UTF8 as per https://tools.ietf.org/html/rfc8259#section-8.1
+    public static final MediaType DEFAULT_CONTENT_TYPE = MediaType.APPLICATION_JSON_UTF_8;
     private final String json;
     private final MatchType matchType;
     private final byte[] rawBytes;

File: mockserver-core/src/main/java/org/mockserver/model/XmlBody.java
Patch:
@@ -9,7 +9,8 @@
  */
 public class XmlBody extends BodyWithContentType<String> {
 
-    public static final MediaType DEFAULT_CONTENT_TYPE = MediaType.create("application", "xml");
+    // setting default to UTF8 as per https://tools.ietf.org/html/rfc3470#section-5.1
+    public static final MediaType DEFAULT_CONTENT_TYPE = MediaType.APPLICATION_XML_UTF_8;
     private final String xml;
     private final byte[] rawBytes;
 

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/response/HttpResponseDTOSerializer.java
Patch:
@@ -36,9 +36,9 @@ public void serialize(HttpResponseDTO httpResponseDTO, JsonGenerator jgen, Seria
             if (body instanceof StringBodyDTO && !((StringBodyDTO) body).getString().isEmpty()) {
                 jgen.writeObjectField("body", body);
             } else if (body instanceof JsonBodyDTO && !((JsonBodyDTO) body).getJson().isEmpty()) {
-                jgen.writeObjectField("body", ((JsonBodyDTO) body).getJson());
+                jgen.writeObjectField("body", body);
             } else if (body instanceof XmlBodyDTO && !((XmlBodyDTO) body).getXml().isEmpty()) {
-                jgen.writeObjectField("body", ((XmlBodyDTO) body).getXml());
+                jgen.writeObjectField("body", body);
             } else if (body instanceof BinaryBodyDTO) {
                 jgen.writeObjectField("body", body);
             } else if (body instanceof LogEventBodyDTO) {

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/response/HttpResponseSerializer.java
Patch:
@@ -31,7 +31,7 @@ public void serialize(HttpResponse httpResponse, JsonGenerator jgen, SerializerP
         if (httpResponse.getCookieList() != null && !httpResponse.getCookieList().isEmpty()) {
             jgen.writeObjectField("cookies", httpResponse.getCookies());
         }
-        Body body = httpResponse.getBody();
+        Body<?> body = httpResponse.getBody();
         if (body != null) {
             if (body instanceof StringBody && !((StringBody) body).getValue().isEmpty()) {
                 jgen.writeObjectField("body", body);

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerToNettyRequestEncoderContentTypeTest.java
Patch:
@@ -243,7 +243,7 @@ public void shouldReturnContentTypeForJsonBody() {
 
         // then
         FullHttpRequest fullHttpResponse = (FullHttpRequest) output.get(0);
-        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/json"));
+        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/json; charset=utf-8"));
     }
 
     @Test
@@ -295,7 +295,7 @@ public void shouldReturnContentTypeForXmlBody() {
 
         // then
         FullHttpRequest fullHttpResponse = (FullHttpRequest) output.get(0);
-        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/xml"));
+        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/xml; charset=utf-8"));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerToNettyResponseEncoderContentTypeTest.java
Patch:
@@ -240,7 +240,7 @@ public void shouldReturnContentTypeForJsonBody() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/json"));
+        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/json; charset=utf-8"));
     }
 
     @Test
@@ -292,7 +292,7 @@ public void shouldReturnContentTypeForXmlBody() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/xml"));
+        assertThat(fullHttpResponse.headers().getAll("Content-Type"), containsInAnyOrder("application/xml; charset=utf-8"));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/mappers/MockServerResponseToHttpServletResponseEncoderContentTypeTest.java
Patch:
@@ -84,7 +84,7 @@ public void shouldReturnContentTypeForJsonBody() {
         new MockServerResponseToHttpServletResponseEncoder(new MockServerLogger()).mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
 
         // then
-        assertThat(httpServletResponse.getHeader("Content-Type"), is("application/json"));
+        assertThat(httpServletResponse.getHeader("Content-Type"), is("application/json; charset=utf-8"));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/model/XmlBodyTest.java
Patch:
@@ -33,7 +33,7 @@ public void shouldReturnValuesSetInConstructor() {
         assertThat(xmlBody.getType(), is(Body.Type.XML));
         assertThat(xmlBody.getContentType(), is(XmlBody.DEFAULT_CONTENT_TYPE.toString()));
         assertThat(xmlBody.getCharset(StandardCharsets.UTF_8), is(StandardCharsets.UTF_8));
-        assertThat(xmlBody.getContentType(), is(MediaType.create("application", "xml").toString()));
+        assertThat(xmlBody.getContentType(), is(MediaType.create("application", "xml").withCharset("utf-8").toString()));
     }
 
     @Test
@@ -59,7 +59,7 @@ public void shouldReturnValueSetInStaticConstructor() {
         assertThat(xmlBody.getType(), is(Body.Type.XML));
         assertThat(xmlBody.getContentType(), is(XmlBody.DEFAULT_CONTENT_TYPE.toString()));
         assertThat(xmlBody.getCharset(StandardCharsets.UTF_8), is(StandardCharsets.UTF_8));
-        assertThat(xmlBody.getContentType(), is(MediaType.create("application", "xml").toString()));
+        assertThat(xmlBody.getContentType(), is(MediaType.create("application", "xml").withCharset("utf-8").toString()));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/serialization/model/XmlBodyDTOTest.java
Patch:
@@ -26,7 +26,7 @@ public void shouldReturnValuesSetInConstructor() {
         // then
         assertThat(xmlBody.getXml(), is("some_body"));
         assertThat(xmlBody.getType(), is(Body.Type.XML));
-        assertThat(xmlBody.getMediaType(), is(MediaType.create("application", "xml")));
+        assertThat(xmlBody.getMediaType(), is(MediaType.create("application", "xml").withCharset("utf-8")));
     }
 
     @Test
@@ -74,7 +74,7 @@ public void shouldBuildCorrectObject() {
         // then
         assertThat(xmlBody.getValue(), is("some_body"));
         assertThat(xmlBody.getType(), is(Body.Type.XML));
-        assertThat(xmlBody.getContentType(), is("application/xml"));
+        assertThat(xmlBody.getContentType(), is("application/xml; charset=utf-8"));
         assertThat(xmlBody.getRawBytes(), is("some_body".getBytes(StandardCharsets.UTF_8)));
     }
 

File: mockserver-core/src/main/java/org/mockserver/socket/tls/jdk/CertificateSigningRequest.java
Patch:
@@ -38,7 +38,7 @@ public class CertificateSigningRequest {
      * <p>
      * Hundred years in the future from starting the proxy should be enough.
      */
-    public static final Date NOT_AFTER = new Date(System.currentTimeMillis() + 86400000L * 365 * 5);
+    public static final Date NOT_AFTER = new Date(System.currentTimeMillis() + 86400000L * 365);
     // distinguishing name
     public static final String ROOT_COMMON_NAME = "www.mockserver.com";
     public static final String ORGANISATION = "MockServer";

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/direct/DirectProxyUnificationHandlerTest.java
Patch:
@@ -67,9 +67,7 @@ public void shouldSwitchToSsl() {
     @Test
     public void shouldSwitchToSOCKS() {
         // given - embedded channel
-        short localPort = 1234;
         EmbeddedChannel embeddedChannel = new EmbeddedChannel(new MockServerUnificationInitializer(mock(LifeCycle.class), new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class), null));
-//        embeddedChannel.attr(HTTP_CONNECT_SOCKET).set(new InetSocketAddress(localPort));
 
         // and - no SOCKS handlers
         assertThat(embeddedChannel.pipeline().get(Socks5ProxyHandler.class), is(nullValue()));

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerTest.java
Patch:
@@ -57,9 +57,7 @@ public void shouldSwitchToSsl() {
     @Test
     public void shouldSwitchToSOCKS() {
         // given - embedded channel
-        short localPort = 1234;
         EmbeddedChannel embeddedChannel = new EmbeddedChannel(new MockServerUnificationInitializer(mock(LifeCycle.class), new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class), null));
-//        embeddedChannel.attr(HTTP_CONNECT_SOCKET).set(new InetSocketAddress(localPort));
 
         // and - no SOCKS handlers
         assertThat(embeddedChannel.pipeline().get(Socks5ProxyHandler.class), is(nullValue()));

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/socks/SocksDetectorTest.java
Patch:
@@ -331,7 +331,7 @@ public void failParsingSocks5RequestWithAdditionalReadableBytes() {
             0x05, // protocol version
             0x01, // amount of authentication methods
             0x00, // authentication methods
-            0x00 // additional byte
+            0x00  // additional byte
         });
         assertFalse(SocksDetector.isSocks5(msg, msg.readableBytes()));
     }

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.logging;
 
 import com.google.common.annotations.VisibleForTesting;
+import org.mockserver.Version;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.mock.HttpStateHandler;
@@ -35,7 +36,7 @@ public static void configureLogger() {
                     (!disableSystemOut() ? "handlers=org.mockserver.logging.StandardOutConsoleHandler" + NEW_LINE : "") +
                     "org.mockserver.logging.StandardOutConsoleHandler.level=ALL" + NEW_LINE +
                     "org.mockserver.logging.StandardOutConsoleHandler.formatter=java.util.logging.SimpleFormatter" + NEW_LINE +
-                    "java.util.logging.SimpleFormatter.format=%1$tF %1$tT  %3$s  %4$s  %5$s %6$s%n" + NEW_LINE +
+                    "java.util.logging.SimpleFormatter.format=%1$tF %1$tT " + Version.getVersion() + " %3$s  %4$s  %5$s %6$s%n" + NEW_LINE +
                     ".level=" + javaLoggerLogLevel() + "" + NEW_LINE +
                     "io.netty.handler.ssl.SslHandler.level=WARNING";
                 LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(loggingConfiguration.getBytes(UTF_8)));

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpErrorActionHandler.java
Patch:
@@ -19,6 +19,7 @@ public void handle(HttpError httpError, ChannelHandlerContext ctx) {
             }
         }
         if (httpError.getDropConnection() != null && httpError.getDropConnection()) {
+            ctx.disconnect();
             ctx.close();
         }
     }

File: mockserver-core/src/main/java/org/mockserver/streams/IOStreamUtils.java
Patch:
@@ -52,7 +52,7 @@ public static String readInputStreamToString(Socket socket) throws IOException {
 
     public String readInputStreamToString(ServletRequest request) {
         try {
-            return new String(ByteStreams.toByteArray(request.getInputStream()), UTF_8.name());
+            return new String(ByteStreams.toByteArray(request.getInputStream()), request.getCharacterEncoding() != null ? request.getCharacterEncoding() : UTF_8.name());
         } catch (IOException ioe) {
             mockServerLogger.logEvent(
                 new LogEntry()

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -43,7 +43,6 @@ public class ConfigurationProperties {
     private static final int DEFAULT_CONNECT_TIMEOUT = 20000;
     private static final String DEFAULT_MOCKSERVER_ALWAYS_CLOSE_SOCKET_CONNECTIONS = "false";
     private static final int DEFAULT_MAX_FUTURE_TIMEOUT = 60;
-    private static final int DEFAULT_MAX_EXPECTATIONS = 5000;
     private static final String DEFAULT_OUTPUT_MEMORY_USAGE_CSV = "false";
     private static final int DEFAULT_MAX_WEB_SOCKET_EXPECTATIONS = 1500;
     private static final int DEFAULT_MAX_INITIAL_LINE_LENGTH = Integer.MAX_VALUE;

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -327,7 +327,8 @@ void writeForwardActionResponse(final HttpForwardActionResult responseFuture, fi
                         .setHttpRequest(request)
                         .setHttpResponse(response)
                         .setExpectation(request, response)
-                        .setMessageFormat("returning response:{}for forwarded request\n\n in json:{}\n\n in curl:{}for action:{}")
+                        .setMessageFormat("returning response:{}for forwarded request" + NEW_LINE + NEW_LINE + " in json:{}" + NEW_LINE + NEW_LINE + " in curl:{}for action:{}")
+                        .setMessageFormat("returning response:{}for forwarded request" + NEW_LINE + NEW_LINE + " in json:{}" + NEW_LINE + NEW_LINE + " in curl:{}for action:{}")
                         .setArguments(response, responseFuture.getHttpRequest(), httpRequestToCurlSerializer.toCurl(responseFuture.getHttpRequest(), responseFuture.getRemoteAddress()), action)
                 );
             } catch (Throwable throwable) {
@@ -380,7 +381,7 @@ void writeForwardActionResponse(final HttpResponse response, final ResponseWrite
                     .setHttpRequest(request)
                     .setHttpResponse(response)
                     .setExpectation(request, response)
-                    .setMessageFormat("returning response:{}for forwarded request\n\n in json:{}\n\n in curl:{}for action:{}")
+                    .setMessageFormat("returning response:{}for forwarded request" + NEW_LINE + NEW_LINE + " in json:{}" + NEW_LINE + NEW_LINE + " in curl:{}for action:{}")
                     .setArguments(response, response, httpRequestToCurlSerializer.toCurl(request), action)
             );
         } catch (Throwable throwable) {

File: mockserver-core/src/main/java/org/mockserver/templates/engine/velocity/VelocityTemplateEngine.java
Patch:
@@ -13,6 +13,7 @@
 import javax.script.ScriptContext;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
+import javax.script.SimpleScriptContext;
 import java.io.StringWriter;
 import java.io.Writer;
 
@@ -44,10 +45,10 @@ public <T> T executeTemplate(String template, HttpRequest request, Class<? exten
         T result;
         try {
             Writer writer = new StringWriter();
-            ScriptContext context = engine.getContext();
+            ScriptContext context = new SimpleScriptContext();
             context.setWriter(writer);
             context.setAttribute("request", new HttpRequestTemplateObject(request), ScriptContext.ENGINE_SCOPE);
-            engine.eval(template);
+            engine.eval(template, context);
             logFormatter.logEvent(
                 new LogEntry()
                     .setType(TEMPLATE_GENERATED)

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardHandler.java
Patch:
@@ -62,7 +62,7 @@ public void renderDashboard(final ChannelHandlerContext ctx, final HttpRequest r
                     response =
                         response()
                             .withHeader(HttpHeaderNames.CONTENT_TYPE.toString(), MIME_MAP.get(extension))
-                            .withHeader(HttpHeaderNames.CONTENT_LENGTH.toString(), String.valueOf(content.length()))
+                            .withHeader(HttpHeaderNames.CONTENT_LENGTH.toString(), String.valueOf(content.getBytes().length))
                             .withBody(content);
                 } else {
                     final byte[] bytes = ByteStreams.toByteArray(contentStream);

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -710,6 +710,7 @@ public static boolean disableSystemOut() {
     public static void disableSystemOut(boolean disable) {
         System.setProperty(MOCKSERVER_DISABLE_SYSTEM_OUT, "" + disable);
         disableSystemOut = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_DISABLE_SYSTEM_OUT, "MOCKSERVER_DISABLE_SYSTEM_OUT", "" + false));
+        configureLogger();
     }
 
     public static boolean metricsEnabled() {

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -87,7 +87,7 @@ public synchronized SSLContext sslContext(PrivateKey privateKey, X509Certificate
         return sslContext;
     }
 
-    @SuppressWarnings("InfiniteRecursion")
+    @SuppressWarnings({"InfiniteRecursion", "UnusedReturnValue"})
     public KeyStore loadOrCreateKeyStore(String keyStoreType) {
         keyAndCertificateFactory.buildAndSavePrivateKeyAndX509Certificate();
         return loadOrCreateKeyStore(

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -77,15 +77,15 @@ public synchronized SslContext createClientSslContext(boolean forwardProxyClient
     }
 
     private PrivateKey forwardProxyPrivateKey() {
-        if (isNotBlank(ConfigurationProperties.forwardProxyPrivateKey()) || isNotBlank(ConfigurationProperties.forwardProxyCertificateChain())) {
+        if (isNotBlank(ConfigurationProperties.forwardProxyPrivateKey())) {
             return X509Generator.privateKeyFromPEMFile(ConfigurationProperties.forwardProxyPrivateKey());
         } else {
             return keyAndCertificateFactory.privateKey();
         }
     }
 
     private X509Certificate[] forwardProxyCertificateChain() {
-        if (isNotBlank(ConfigurationProperties.forwardProxyPrivateKey()) || isNotBlank(ConfigurationProperties.forwardProxyCertificateChain())) {
+        if (isNotBlank(ConfigurationProperties.forwardProxyCertificateChain())) {
             return X509Generator.x509ChainFromPEMFile(ConfigurationProperties.forwardProxyCertificateChain()).toArray(new X509Certificate[0]);
         } else {
             return new X509Certificate[]{

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/AbstractClientAuthenticationMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.inbound;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
@@ -19,7 +19,6 @@
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockserver.configuration.ConfigurationProperties.tlsMutualAuthenticationRequired;
 import static org.mockserver.echo.tls.UniqueCertificateChainSSLContextBuilder.uniqueCertificateChainSSLContext;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;
@@ -31,7 +30,7 @@
 public abstract class AbstractClientAuthenticationMockingIntegrationTest extends AbstractMockingIntegrationTestBase {
 
     @Test
-    public void shouldReturnUpdateInHttp() {
+    public void shouldReturnUpgradeForHttp() {
         // when
         mockServerClient
             .when(

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/ClientAuthenticationAdditionalCertificateChainMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.inbound;
 
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/ClientAuthenticationCustomCertificateAuthorityMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.inbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/ClientAuthenticationDynamicCAMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.inbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -7,7 +7,6 @@
 import org.mockserver.socket.PortFactory;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.UUID;
 
 import static org.mockserver.configuration.ConfigurationProperties.*;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/ClientAuthenticationMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.inbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/inbound/CustomCertificateAuthorityMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.inbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/AbstractForwardViaHttpsProxyMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import io.netty.handler.ssl.ClientAuth;
 import io.netty.handler.ssl.SslContextBuilder;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardViaHttpsProxyWithAnyTrustManagerMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardViaHttpsProxyWithCustomTrustManagerWithCustomCAMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardViaHttpsProxyWithCustomTrustManagerWithMockServerCAMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardViaHttpsProxyWithJVMTrustManagerMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardWithAnyTrustManagerMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardWithCustomTrustManagerWithCustomCAMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardWithCustomTrustManagerWithMockServerCAMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/tls/outbound/ForwardWithJVMTrustManagerMockingIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.netty.integration.mock.tls.outbound;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/BodyDTODeserializer.java
Patch:
@@ -86,7 +86,8 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                         if (fieldNameToType.containsKey(fieldName)) {
                             type = fieldNameToType.get(fieldName);
                         }
-                        if (Map.class.isAssignableFrom(entry.getValue().getClass())) {
+                        if (Map.class.isAssignableFrom(entry.getValue().getClass()) ||
+                            containsIgnoreCase(key, "json", "jsonSchema") && !String.class.isAssignableFrom(entry.getValue().getClass())) {
                             if (objectMapper == null) {
                                 objectMapper = ObjectMapperFactory.createObjectMapper();
                             }

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/body/BodyWithContentTypeDTODeserializer.java
Patch:
@@ -77,7 +77,8 @@ public BodyWithContentTypeDTO deserialize(JsonParser jsonParser, Deserialization
                         if (fieldNameToType.containsKey(fieldName)) {
                             type = fieldNameToType.get(fieldName);
                         }
-                        if (Map.class.isAssignableFrom(entry.getValue().getClass())) {
+                        if (Map.class.isAssignableFrom(entry.getValue().getClass()) ||
+                            containsIgnoreCase(key, "json", "jsonSchema") && !String.class.isAssignableFrom(entry.getValue().getClass())) {
                             if (objectMapper == null) {
                                 objectMapper = ObjectMapperFactory.createObjectMapper();
                             }

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -43,8 +43,8 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
 
         mockServerEventLog.add(
             new LogEntry()
-                .setLogLevel(INFO)
                 .setType(RECEIVED_REQUEST)
+                .setLogLevel(INFO)
                 .setHttpRequest(request)
                 .setMessageFormat("EchoServer received request{}")
                 .setArguments(request)

File: mockserver-netty/src/main/java/org/mockserver/netty/MockServerHandler.java
Patch:
@@ -173,8 +173,8 @@ protected void channelRead0(final ChannelHandlerContext ctx, final HttpRequest r
         } catch (Exception ex) {
             mockServerLogger.logEvent(
                 new LogEntry()
-                    .setLogLevel(Level.ERROR)
                     .setType(LogEntry.LogMessageType.EXCEPTION)
+                    .setLogLevel(Level.ERROR)
                     .setHttpRequest(request)
                     .setMessageFormat("exception processing " + request)
                     .setThrowable(ex)

File: mockserver-core/src/main/java/org/mockserver/persistence/FileWatcher.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.mockserver.scheduler.Scheduler;
 
+import java.io.File;
 import java.nio.file.*;
 import java.util.function.Consumer;
 
@@ -16,7 +17,8 @@ public FileWatcher(String filePath, Runnable updatedHandler, Consumer<Throwable>
         Path directoryPath = Paths.get(filePath);
         Path fileName = directoryPath.getFileName();
         watchService = FileSystems.getDefault().newWatchService();
-        directoryPath.getParent()
+        Path parent = directoryPath.getParent() != null ? directoryPath.getParent() : new File(".").toPath();
+        parent
             .register(
                 watchService,
                 StandardWatchEventKinds.OVERFLOW,

File: mockserver-client-java/src/main/java/org/mockserver/client/ForwardChainExpectation.java
Patch:
@@ -231,6 +231,7 @@ private <T extends HttpObject> String registerWebSocketClient(ExpectationCallbac
         try {
             String clientId = UUID.randomUUID().toString();
             LocalCallbackRegistry.registerCallback(clientId, expectationCallback);
+            LocalCallbackRegistry.registerCallback(clientId, expectationForwardResponseCallback);
             final WebSocketClient<T> webSocketClient = new WebSocketClient<>(
                 new NioEventLoopGroup(ConfigurationProperties.webSocketClientEventLoopThreadCount(), new Scheduler.SchedulerThreadFactory(WebSocketClient.class.getSimpleName() + "-eventLoop")),
                 clientId,

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardObjectCallbackActionHandler.java
Patch:
@@ -58,11 +58,12 @@ private void handleLocally(ActionHandler actionHandler, HttpObjectCallback httpO
                 null,
                 null
             );
-            if (expectationForwardCallback instanceof ExpectationForwardAndResponseCallback) {
+            ExpectationForwardAndResponseCallback expectationForwardAndResponseCallback = LocalCallbackRegistry.retrieveForwardAndResponseCallback(clientId);
+            if (expectationForwardAndResponseCallback != null) {
                 actionHandler.executeAfterForwardActionResponse(responseFuture, (httpResponse, exception) -> {
                     if (httpResponse != null) {
                         try {
-                            HttpResponse callbackResponse = ((ExpectationForwardAndResponseCallback) expectationForwardCallback).handle(request, httpResponse);
+                            HttpResponse callbackResponse = expectationForwardAndResponseCallback.handle(request, httpResponse);
                             actionHandler.writeForwardActionResponse(callbackResponse, responseWriter, request, httpObjectCallback, synchronous);
                         } catch (Throwable throwable) {
                             mockServerLogger.logEvent(

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardObjectCallbackActionHandler.java
Patch:
@@ -35,7 +35,7 @@ public HttpForwardObjectCallbackActionHandler(HttpStateHandler httpStateHandler,
 
     public void handle(final ActionHandler actionHandler, final HttpObjectCallback httpObjectCallback, final HttpRequest request, final ResponseWriter responseWriter, final boolean synchronous, Runnable expectationPostProcessor) {
         final String clientId = httpObjectCallback.getClientId();
-        if (LocalCallbackRegistry.responseClientExists(clientId)) {
+        if (LocalCallbackRegistry.forwardClientExists(clientId)) {
             handleLocally(actionHandler, httpObjectCallback, request, responseWriter, synchronous, clientId);
         } else {
             handleViaWebSocket(actionHandler, httpObjectCallback, request, responseWriter, synchronous, expectationPostProcessor, clientId);

File: mockserver-client-java/src/main/java/org/mockserver/client/initialize/ExpectationInitializer.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * @author jamesdbloom
- * @deprecated use org.mockserver.client.initialize.ClientExpectationInitializer instead
+ * @deprecated use org.mockserver.client.initialize.PluginExpectationInitializer instead
  */
 @Deprecated
 public interface ExpectationInitializer {

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientIntegrationTest.java
Patch:
@@ -64,8 +64,8 @@ public class MockServerClientIntegrationTest {
 
     @BeforeClass
     public static void startEchoServer() {
-        echoServerOne = new EchoServer(false, false);
-        echoServerTwo = new EchoServer(false, false);
+        echoServerOne = new EchoServer(false);
+        echoServerTwo = new EchoServer(false);
     }
 
     @AfterClass

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientServerValidationErrorsTest.java
Patch:
@@ -27,7 +27,7 @@ public class MockServerClientServerValidationErrorsTest {
 
     @Before
     public void setupTestFixture() {
-        echoServer = new EchoServer(false, false);
+        echoServer = new EchoServer(false);
         mockServerClient = new MockServerClient("localhost", echoServer.getPort());
     }
 

File: mockserver-core/src/main/java/org/mockserver/echo/http/WebSocketServerHandler.java
Patch:
@@ -127,7 +127,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
             new LogEntry()
                 .setType(LogEntry.LogMessageType.EXCEPTION)
                 .setLogLevel(Level.ERROR)
-                .setMessageFormat("web socket server caught exception")
+                .setMessageFormat("echo server server caught exception")
                 .setThrowable(cause)
         );
         ctx.close();

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -63,7 +63,7 @@ public void shouldThrowSocketCommunicationExceptionForConnectException() throws
     @Test
     public void shouldHandleConnectionClosure() throws Exception {
         // given
-        EchoServer echoServer = new EchoServer(true, false, EchoServer.Error.CLOSE_CONNECTION);
+        EchoServer echoServer = new EchoServer(true, EchoServer.Error.CLOSE_CONNECTION);
 
         try {
             // then
@@ -85,7 +85,7 @@ public void shouldHandleConnectionClosure() throws Exception {
     @Test
     public void shouldHandleSmallerContentLengthHeader() throws Exception {
         // given
-        EchoServer echoServer = new EchoServer(true, false, EchoServer.Error.SMALLER_CONTENT_LENGTH);
+        EchoServer echoServer = new EchoServer(true, EchoServer.Error.SMALLER_CONTENT_LENGTH);
 
         try {
             // when

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -42,7 +42,7 @@ public class NettyHttpClientTest {
 
     @BeforeClass
     public static void startEchoServer() {
-        echoServer = new EchoServer(false, false);
+        echoServer = new EchoServer(false);
     }
 
     @AfterClass

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractMockingIntegrationTestBase.java
Patch:
@@ -69,10 +69,10 @@ public abstract class AbstractMockingIntegrationTestBase {
     @BeforeClass
     public static void startEchoServer() {
         if (insecureEchoServer == null) {
-            insecureEchoServer = new EchoServer(false, false);
+            insecureEchoServer = new EchoServer(false);
         }
         if (secureEchoServer == null) {
-            secureEchoServer = new EchoServer(true, false);
+            secureEchoServer = new EchoServer(true);
         }
     }
 

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractMockingIntegrationTestBase.java
Patch:
@@ -69,10 +69,10 @@ public abstract class AbstractMockingIntegrationTestBase {
     @BeforeAll
     public static void startEchoServer() {
         if (insecureEchoServer == null) {
-            insecureEchoServer = new EchoServer(false, false);
+            insecureEchoServer = new EchoServer(false);
         }
         if (secureEchoServer == null) {
-            secureEchoServer = new EchoServer(true, false);
+            secureEchoServer = new EchoServer(true);
         }
     }
 

File: mockserver-netty/src/test/java/org/mockserver/cli/MainTest.java
Patch:
@@ -77,7 +77,7 @@ public void shouldStartMockServerWithRemotePortAndHost() {
         final int freePort = PortFactory.findFreePort();
         MockServerClient mockServerClient = new MockServerClient("127.0.0.1", freePort);
         try {
-            EchoServer echoServer = new EchoServer(false, false);
+            EchoServer echoServer = new EchoServer(false);
             echoServer.withNextResponse(response("port_forwarded_response"));
 
             // when
@@ -108,7 +108,7 @@ public void shouldStartMockServerWithRemotePort() {
         final int freePort = PortFactory.findFreePort();
         MockServerClient mockServerClient = new MockServerClient("127.0.0.1", freePort);
         try {
-            EchoServer echoServer = new EchoServer(false, false);
+            EchoServer echoServer = new EchoServer(false);
             echoServer.withNextResponse(response("port_forwarded_response"));
 
             // when

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ClientAuthenticationAdditionalCertificateChainMockingIntegrationTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockserver.configuration.ConfigurationProperties.*;
-import static org.mockserver.echo.tls.NonMatchingX509KeyManager.invalidClientSSLContext;
+import static org.mockserver.echo.tls.UniqueCertificateChainSSLContextBuilder.uniqueCertificateChainSSLContext;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;
 import static org.mockserver.model.HttpStatusCode.OK_200;
@@ -165,7 +165,7 @@ public void shouldFailToAuthenticateInHttpsApacheClient() {
 
         // when
         try {
-            HttpClient httpClient = HttpClients.custom().setSSLContext(invalidClientSSLContext()).build();
+            HttpClient httpClient = HttpClients.custom().setSSLContext(uniqueCertificateChainSSLContext()).build();
             httpClient.execute(new HttpPost(new URIBuilder()
                 .setScheme("https")
                 .setHost("localhost")

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/NettyPortForwardingProxyIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@ public class NettyPortForwardingProxyIntegrationTest {
 
     @BeforeClass
     public static void setupFixture() {
-        echoServer = new EchoServer(false, false);
+        echoServer = new EchoServer(false);
 
         mockServer = new MockServer(echoServer.getPort(), "127.0.0.1", 0);
     }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/NettyPortForwardingSecureProxyIntegrationTest.java
Patch:
@@ -5,7 +5,9 @@
 import org.junit.Test;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.echo.http.EchoServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.netty.MockServer;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.mockserver.streams.IOStreamUtils;
 
 import java.io.OutputStream;
@@ -29,7 +31,7 @@ public class NettyPortForwardingSecureProxyIntegrationTest {
 
     @BeforeClass
     public static void setupFixture() {
-        echoServer = new EchoServer(true, false);
+        echoServer = new EchoServer(true);
 
         mockServer = new MockServer(echoServer.getPort(), "127.0.0.1");
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/NettyHttpProxyIntegrationTest.java
Patch:
@@ -41,7 +41,7 @@ public static void setupFixture() {
         mockServerPort = new MockServer().getLocalPort();
         mockServerClient = new MockServerClient("localhost", mockServerPort);
 
-        echoServer = new EchoServer(false, false);
+        echoServer = new EchoServer(false);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/NettyHttpSecureProxyIntegrationTest.java
Patch:
@@ -5,6 +5,8 @@
 import org.junit.BeforeClass;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.echo.http.EchoServer;
+import org.mockserver.logging.MockServerLogger;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.mockserver.testing.integration.proxy.AbstractSecureProxyIntegrationTest;
 import org.mockserver.netty.MockServer;
 
@@ -27,7 +29,7 @@ public static void setupFixture() {
         System.setProperty("http.proxyHost", "127.0.0.1");
         System.setProperty("http.proxyPort", String.valueOf(mockServerPort));
 
-        echoServer = new EchoServer(true, false);
+        echoServer = new EchoServer(true);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -63,8 +63,8 @@ public class NettyHttpProxySOCKSIntegrationTest {
 
     @BeforeClass
     public static void setupFixture() {
-        insecureEchoServer = new EchoServer(false, false);
-        secureEchoServer = new EchoServer(true, false);
+        insecureEchoServer = new EchoServer(false);
+        secureEchoServer = new EchoServer(true);
 
         mockServerPort = new MockServer().getLocalPort();
 

File: mockserver-proxy-war/src/test/java/org/mockserver/proxyservlet/integration/ServletProxyIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ public static void startServer() throws Exception {
         servletContext = "";
 
         // start server
-        echoServer = new EchoServer(false, false);
+        echoServer = new EchoServer(false);
 
         // wait for server to start up
         TimeUnit.MILLISECONDS.sleep(500);

File: mockserver-proxy-war/src/test/java/org/mockserver/proxyservlet/integration/ServletProxyWithContextPathIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ public static void startServer() throws Exception {
         servletContext = "proxy";
 
         // start server
-        echoServer = new EchoServer(false, false);
+        echoServer = new EchoServer(false);
 
         // wait for server to start up
         TimeUnit.MILLISECONDS.sleep(500);

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServer.java
Patch:
@@ -41,7 +41,6 @@ public class EchoServer implements Stoppable {
     private final List<String> registeredClients;
     private final List<Channel> websocketChannels;
     private final List<TextWebSocketFrame> textWebSocketFrames;
-    private final NettySslContextFactory nettySslContextFactory;
     private EventLoopGroup bossGroup;
     private EventLoopGroup workerGroup;
 
@@ -53,15 +52,14 @@ public EchoServer(final boolean secure, boolean trustNoneTLS, final Error error)
         registeredClients = new ArrayList<>();
         websocketChannels = new ArrayList<>();
         textWebSocketFrames = new ArrayList<>();
-        nettySslContextFactory = new NettySslContextFactory(mockServerLogger);
         new Thread(() -> {
             bossGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-bossEventLoop"));
             workerGroup = new NioEventLoopGroup(5, new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName() + "-workerEventLoop"));
             new ServerBootstrap().group(bossGroup, workerGroup)
                 .channel(NioServerSocketChannel.class)
                 .option(ChannelOption.SO_BACKLOG, 100)
                 .handler(new LoggingHandler(EchoServer.class))
-                .childHandler(new EchoServerInitializer(mockServerLogger, secure, trustNoneTLS, error, registeredClients, websocketChannels, textWebSocketFrames, nettySslContextFactory))
+                .childHandler(new EchoServerInitializer(mockServerLogger, secure, trustNoneTLS, error, registeredClients, websocketChannels, textWebSocketFrames))
                 .childAttr(LOG_FILTER, mockServerEventLog)
                 .childAttr(NEXT_RESPONSE, nextResponse)
                 .bind(0)

File: mockserver-core/src/main/java/org/mockserver/log/model/LogEntry.java
Patch:
@@ -86,7 +86,7 @@ public Level getLogLevel() {
     public LogEntry setLogLevel(Level logLevel) {
         this.logLevel = logLevel;
         if (type == null) {
-            LogMessageType.valueOf(logLevel.name());
+            type = LogMessageType.valueOf(logLevel.name());
         }
         return this;
     }
@@ -350,9 +350,9 @@ private HttpResponse updateBody(HttpResponse httpResponse) {
     @SuppressWarnings("MethodDoesntCallSuperMethod")
     public LogEntry clone() {
         return new LogEntry()
+            .setType(getType())
             .setLogLevel(getLogLevel())
             .setEpochTime(getEpochTime())
-            .setType(getType())
             .setHttpRequests(getHttpRequests())
             .setHttpResponse(getHttpResponse())
             .setHttpError(getHttpError())
@@ -366,9 +366,9 @@ public LogEntry clone() {
     @Override
     public void translateTo(LogEntry event, long sequence) {
         event
+            .setType(getType())
             .setLogLevel(getLogLevel())
             .setEpochTime(getEpochTime())
-            .setType(getType())
             .setHttpRequests(getHttpRequests())
             .setHttpResponse(getHttpResponse())
             .setHttpError(getHttpError())

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileWatcherIntegrationTest.java
Patch:
@@ -79,7 +79,7 @@ public void shouldDetectModifiedInitialiserJsonOnAdd() throws Exception {
                 },
                 persistedExpectationsContents::completeExceptionally
             );
-            MILLISECONDS.sleep(1000);
+            MILLISECONDS.sleep(2000);
 
             // when
             String watchedFileContents = "[ {" + NEW_LINE +
@@ -252,7 +252,7 @@ public void shouldDetectModifiedInitialiserJsonOnDeletion() throws Exception {
                 },
                 persistedExpectationsContents::completeExceptionally
             );
-            MILLISECONDS.sleep(1000);
+            MILLISECONDS.sleep(2000);
 
             // when
             watchedFileContents = "[]";
@@ -383,7 +383,7 @@ public void shouldDetectModifiedInitialiserJsonOnUpdate() throws Exception {
                 },
                 persistedExpectationsContents::completeExceptionally
             );
-            MILLISECONDS.sleep(1000);
+            MILLISECONDS.sleep(2000);
 
             // when
             watchedFileContents = "[ {" + NEW_LINE +

File: mockserver-proxy-war/src/main/java/org/mockserver/proxyservlet/ProxyServlet.java
Patch:
@@ -16,6 +16,7 @@
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.PortBindingSerializer;
 import org.mockserver.servlet.responsewriter.ServletResponseWriter;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.slf4j.event.Level;
 
 import javax.servlet.ServletContextEvent;
@@ -60,7 +61,7 @@ public ProxyServlet() {
         this.httpStateHandler = new HttpStateHandler(this.mockServerLogger, this.scheduler);
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
-        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null, null);
+        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null, new NettySslContextFactory(mockServerLogger));
     }
 
     @Override

File: mockserver-war/src/main/java/org/mockserver/mockservlet/MockServerServlet.java
Patch:
@@ -16,6 +16,7 @@
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.PortBindingSerializer;
 import org.mockserver.servlet.responsewriter.ServletResponseWriter;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.slf4j.event.Level;
 
 import javax.servlet.ServletContextEvent;
@@ -60,7 +61,7 @@ public MockServerServlet() {
         this.httpStateHandler = new HttpStateHandler(this.mockServerLogger, this.scheduler);
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
-        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null, null);
+        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null, new NettySslContextFactory(mockServerLogger));
     }
 
     @Override

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -56,7 +56,7 @@ public void shouldThrowSocketCommunicationExceptionForConnectException() throws
         ));
 
         // when
-        new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false, null).sendRequest(request().withHeader(HOST.toString(), "127.0.0.1:" + freePort))
+        new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false).sendRequest(request().withHeader(HOST.toString(), "127.0.0.1:" + freePort))
             .get(10, TimeUnit.SECONDS);
     }
 
@@ -75,7 +75,7 @@ public void shouldHandleConnectionClosure() throws Exception {
             ));
 
             // when
-            new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false, null).sendRequest(request().withSecure(true).withHeader(HOST.toString(), "127.0.0.1:" + echoServer.getPort()))
+            new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false).sendRequest(request().withSecure(true).withHeader(HOST.toString(), "127.0.0.1:" + echoServer.getPort()))
                 .get(10, TimeUnit.SECONDS);
         } finally {
             stopQuietly(echoServer);
@@ -90,7 +90,7 @@ public void shouldHandleSmallerContentLengthHeader() throws Exception {
         try {
             // when
             InetSocketAddress socket = new InetSocketAddress("127.0.0.1", echoServer.getPort());
-            HttpResponse httpResponse = new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false, null)
+            HttpResponse httpResponse = new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false)
                 .sendRequest(
                     request()
                         .withHeader(CONTENT_TYPE.toString(), MediaType.TEXT_PLAIN.toString())

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/servicebackend/BookServer.java
Patch:
@@ -37,10 +37,12 @@ public class BookServer {
     private final ObjectMapper objectMapper = ObjectMapperFactory.createObjectMapper();
     private final int httpPort;
     private final boolean secure;
+    private final NettySslContextFactory nettySslContextFactory;
 
     BookServer(int httpPort, boolean secure) {
         this.httpPort = httpPort;
         this.secure = secure;
+        this.nettySslContextFactory = new NettySslContextFactory(new MockServerLogger());
     }
 
     @PostConstruct
@@ -57,7 +59,7 @@ public void initChannel(SocketChannel ch) {
 
                             // add HTTPS support
                             if (secure) {
-                                pipeline.addLast(new NettySslContextFactory(new MockServerLogger()).createServerSslContext().newHandler(ch.alloc()));
+                                pipeline.addLast(nettySslContextFactory.createServerSslContext().newHandler(ch.alloc()));
                             }
 
                             pipeline.addLast(new HttpServerCodec());

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractMockingIntegrationTestBase.java
Patch:
@@ -112,7 +112,7 @@ protected String calculatePath(String path) {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(AbstractMockingIntegrationTestBase.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterClass

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -885,7 +885,7 @@ public void shouldResetRequests() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequestToClear() throws Exception {
         // when
-        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null).sendRequest(
+        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "127.0.0.1:" + getProxyPort())
@@ -910,7 +910,7 @@ public void shouldReturnErrorForInvalidRequestToClear() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequestToVerify() throws Exception {
         // when
-        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null).sendRequest(
+        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "127.0.0.1:" + getProxyPort())
@@ -934,7 +934,7 @@ public void shouldReturnErrorForInvalidRequestToVerify() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequestToVerifySequence() throws Exception {
         // when
-        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null).sendRequest(
+        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "127.0.0.1:" + getProxyPort())

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -366,7 +366,7 @@ public void shouldPreventUnauthenticatedConnectRequestWhenClientConfiguredWithPr
                     proxyConfiguration(
                         ProxyConfiguration.Type.HTTPS,
                         "127.0.0.1:" + getProxyPort()
-                    ), false, null)
+                    ), false)
                     .sendRequest(
                         request()
                             .withPath("/target")
@@ -404,7 +404,7 @@ public void shouldAuthenticateConnectRequestWhenClientConfiguredWithProxyConfigu
                     "127.0.0.1:" + getProxyPort(),
                     username,
                     password
-                ), false, null)
+                ), false)
                 .sendRequest(
                     request()
                         .withPath("/target")

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractMockingIntegrationTestBase.java
Patch:
@@ -112,7 +112,7 @@ protected String calculatePath(String path) {
     @BeforeAll
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(AbstractMockingIntegrationTestBase.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterAll

File: mockserver-netty/src/test/java/org/mockserver/cli/MainTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldStartMockServerWithRemotePortAndHost() {
                 "-proxyRemotePort", String.valueOf(echoServer.getPort()),
                 "-proxyRemoteHost", "127.0.0.1"
             );
-            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
+            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
                 .sendRequest(
                     request()
                         .withHeader(HOST.toString(), "127.0.0.1:" + freePort),
@@ -116,7 +116,7 @@ public void shouldStartMockServerWithRemotePort() {
                 "-serverPort", String.valueOf(freePort),
                 "-proxyRemotePort", String.valueOf(echoServer.getPort())
             );
-            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
+            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
                 .sendRequest(
                     request()
                         .withHeader(HOST.toString(), "127.0.0.1:" + freePort),

File: mockserver-netty/src/test/java/org/mockserver/cors/OverridePreFlightRequestIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public class OverridePreFlightRequestIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(OverridePreFlightRequestIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() {
                     .withPath("/my/echo")
             )
             .respond(callback().withCallbackClass("org.mockserver.netty.integration.mock.ConcurrencyBasicResponseMockingIntegrationTest$ClassCallback"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ConcurrencyResponseWebSocketMockingIntegrationTest.java
Patch:
@@ -53,7 +53,7 @@ public void setUp() {
                     .withHeader(CONTENT_LENGTH.toString(), String.valueOf(request.getBodyAsString().length()))
                     .withBody(request.getBodyAsString())
             );
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileSystemPersistenceIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ public class ExpectationFileSystemPersistenceIntegrationTest {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ExpectationFileSystemPersistenceIntegrationTest.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileWatcherIntegrationTest.java
Patch:
@@ -42,7 +42,7 @@ public class ExpectationFileWatcherIntegrationTest {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ExpectationFileSystemPersistenceIntegrationTest.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationInitializerIntegrationTest.java
Patch:
@@ -32,7 +32,7 @@ public class ExpectationInitializerIntegrationTest {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ExpectationInitializerIntegrationTest.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/ProxyToInvalidSocketIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public class ProxyToInvalidSocketIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ProxyToInvalidSocketIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/DirectProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@ public class DirectProxyViaLoadBalanceIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(DirectProxyViaLoadBalanceIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyChainedIntegrationTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldAuthenticateForwardHTTPConnect() throws Exception {
             ConfigurationProperties.forwardProxyAuthenticationPassword(password);
             proxyClientAndServer = startClientAndServer();
 
-            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
+            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
                 .sendRequest(
                     request()
                         .withPath("/target")
@@ -114,7 +114,7 @@ public void shouldForwardHTTPConnect() throws Exception {
             ConfigurationProperties.forwardHttpsProxy("localhost:" + targetClientAndServer.getLocalPort());
             proxyClientAndServer = startClientAndServer();
 
-            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
+            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
                 .sendRequest(
                     request()
                         .withPath("/target")
@@ -150,7 +150,7 @@ public void shouldNotForwardHTTPConnectIfNotSecure() throws Exception {
             ConfigurationProperties.forwardHttpsProxy("localhost:" + targetClientAndServer.getLocalPort());
             proxyClientAndServer = startClientAndServer();
 
-            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
+            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
                 .sendRequest(
                     request()
                         .withPath("/target")

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyContentLengthIntegrationTest.java
Patch:
@@ -92,7 +92,7 @@ public void shouldHandleProxiedResponseWithoutContentLength() throws Exception {
             proxyConfiguration(
                 ProxyConfiguration.Type.HTTPS,
                 "localhost:" + proxyClientAndServer.getLocalPort()
-            ), false, null)
+            ), false)
             .sendRequest(
                 request()
                     .withPath("/noContentLengthHeader")

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@ public class HttpProxyViaLoadBalanceIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(HttpProxyViaLoadBalanceIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockserver.model.*;
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.*;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.mockserver.stop.Stoppable;
 import org.mockserver.verify.Verification;
 import org.mockserver.verify.VerificationSequence;
@@ -53,7 +54,7 @@ public class MockServerClient implements Stoppable {
     protected CompletableFuture<Integer> portFuture;
     private Boolean secure;
     private Integer port;
-    private NettyHttpClient nettyHttpClient = new NettyHttpClient(MOCK_SERVER_LOGGER, eventLoopGroup, null, false);
+    private NettyHttpClient nettyHttpClient = new NettyHttpClient(MOCK_SERVER_LOGGER, eventLoopGroup, null, false, new NettySslContextFactory(MOCK_SERVER_LOGGER));
     private HttpRequest requestOverride;
     private HttpRequestSerializer httpRequestSerializer = new HttpRequestSerializer(MOCK_SERVER_LOGGER);
     private LogEventRequestAndResponseSerializer httpRequestResponseSerializer = new LogEventRequestAndResponseSerializer(MOCK_SERVER_LOGGER);

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -56,7 +56,7 @@ public void shouldThrowSocketCommunicationExceptionForConnectException() throws
         ));
 
         // when
-        new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false).sendRequest(request().withHeader(HOST.toString(), "127.0.0.1:" + freePort))
+        new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false, null).sendRequest(request().withHeader(HOST.toString(), "127.0.0.1:" + freePort))
             .get(10, TimeUnit.SECONDS);
     }
 
@@ -75,7 +75,7 @@ public void shouldHandleConnectionClosure() throws Exception {
             ));
 
             // when
-            new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false).sendRequest(request().withSecure(true).withHeader(HOST.toString(), "127.0.0.1:" + echoServer.getPort()))
+            new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false, null).sendRequest(request().withSecure(true).withHeader(HOST.toString(), "127.0.0.1:" + echoServer.getPort()))
                 .get(10, TimeUnit.SECONDS);
         } finally {
             stopQuietly(echoServer);
@@ -90,7 +90,7 @@ public void shouldHandleSmallerContentLengthHeader() throws Exception {
         try {
             // when
             InetSocketAddress socket = new InetSocketAddress("127.0.0.1", echoServer.getPort());
-            HttpResponse httpResponse = new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false)
+            HttpResponse httpResponse = new NettyHttpClient(mockServerLogger, clientEventLoopGroup, null, false, null)
                 .sendRequest(
                     request()
                         .withHeader(CONTENT_TYPE.toString(), MediaType.TEXT_PLAIN.toString())

File: mockserver-core/src/test/java/org/mockserver/mock/action/ActionHandlerTest.java
Patch:
@@ -105,7 +105,7 @@ public void setupMocks() {
         scheduler = spy(new Scheduler(mockServerLogger));
         when(mockHttpStateHandler.getScheduler()).thenReturn(scheduler);
         when(mockHttpStateHandler.getUniqueLoopPreventionHeaderValue()).thenReturn("MockServer_" + UUID.randomUUID().toString());
-        actionHandler = new ActionHandler(null, mockHttpStateHandler, null);
+        actionHandler = new ActionHandler(null, mockHttpStateHandler, null, null);
 
         initMocks(this);
         request = request("some_path");

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/mock/AbstractMockingIntegrationTestBase.java
Patch:
@@ -112,7 +112,7 @@ protected String calculatePath(String path) {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(AbstractMockingIntegrationTestBase.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterClass

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -885,7 +885,7 @@ public void shouldResetRequests() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequestToClear() throws Exception {
         // when
-        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false).sendRequest(
+        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "127.0.0.1:" + getProxyPort())
@@ -910,7 +910,7 @@ public void shouldReturnErrorForInvalidRequestToClear() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequestToVerify() throws Exception {
         // when
-        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false).sendRequest(
+        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "127.0.0.1:" + getProxyPort())
@@ -934,7 +934,7 @@ public void shouldReturnErrorForInvalidRequestToVerify() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequestToVerifySequence() throws Exception {
         // when
-        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false).sendRequest(
+        org.mockserver.model.HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "127.0.0.1:" + getProxyPort())

File: mockserver-integration-testing/src/main/java/org/mockserver/testing/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -366,7 +366,7 @@ public void shouldPreventUnauthenticatedConnectRequestWhenClientConfiguredWithPr
                     proxyConfiguration(
                         ProxyConfiguration.Type.HTTPS,
                         "127.0.0.1:" + getProxyPort()
-                    ), false)
+                    ), false, null)
                     .sendRequest(
                         request()
                             .withPath("/target")
@@ -404,7 +404,7 @@ public void shouldAuthenticateConnectRequestWhenClientConfiguredWithProxyConfigu
                     "127.0.0.1:" + getProxyPort(),
                     username,
                     password
-                ), false)
+                ), false, null)
                 .sendRequest(
                     request()
                         .withPath("/target")

File: mockserver-junit-jupiter/src/test/java/org/mockserver/junit/jupiter/integration/AbstractMockingIntegrationTestBase.java
Patch:
@@ -112,7 +112,7 @@ protected String calculatePath(String path) {
     @BeforeAll
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(AbstractMockingIntegrationTestBase.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterAll

File: mockserver-netty/src/main/java/org/mockserver/netty/MockServer.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.proxyconfiguration.ProxyConfiguration;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.slf4j.event.Level;
 
 import javax.annotation.Nullable;
@@ -101,14 +102,15 @@ private void createServerBootstrap(final ProxyConfiguration proxyConfiguration,
             portBindings = Arrays.asList(localPorts);
         }
 
+        NettySslContextFactory nettySslContextFactory = new NettySslContextFactory(mockServerLogger);
         serverServerBootstrap = new ServerBootstrap()
             .group(bossGroup, workerGroup)
             .option(ChannelOption.SO_BACKLOG, 1024)
             .channel(NioServerSocketChannel.class)
             .childOption(ChannelOption.AUTO_READ, true)
             .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
             .option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(8 * 1024, 32 * 1024))
-            .childHandler(new MockServerUnificationInitializer(MockServer.this, httpStateHandler, new ActionHandler(getEventLoopGroup(), httpStateHandler, proxyConfiguration)))
+            .childHandler(new MockServerUnificationInitializer(MockServer.this, httpStateHandler, new ActionHandler(getEventLoopGroup(), httpStateHandler, proxyConfiguration, nettySslContextFactory), nettySslContextFactory))
             .childAttr(REMOTE_SOCKET, remoteSocket)
             .childAttr(PROXYING, remoteSocket != null);
 

File: mockserver-netty/src/main/java/org/mockserver/netty/MockServerUnificationInitializer.java
Patch:
@@ -16,11 +16,11 @@ public class MockServerUnificationInitializer extends ChannelHandlerAdapter {
     private final ActionHandler actionHandler;
     private final NettySslContextFactory nettySslContextFactory;
 
-    public MockServerUnificationInitializer(LifeCycle server, HttpStateHandler httpStateHandler, ActionHandler actionHandler) {
+    public MockServerUnificationInitializer(LifeCycle server, HttpStateHandler httpStateHandler, ActionHandler actionHandler, NettySslContextFactory nettySslContextFactory) {
         this.server = server;
         this.httpStateHandler = httpStateHandler;
         this.actionHandler = actionHandler;
-        this.nettySslContextFactory = new NettySslContextFactory(httpStateHandler.getMockServerLogger());
+        this.nettySslContextFactory = nettySslContextFactory;
     }
 
     @Override

File: mockserver-netty/src/test/java/org/mockserver/cli/MainTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldStartMockServerWithRemotePortAndHost() {
                 "-proxyRemotePort", String.valueOf(echoServer.getPort()),
                 "-proxyRemoteHost", "127.0.0.1"
             );
-            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
+            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
                 .sendRequest(
                     request()
                         .withHeader(HOST.toString(), "127.0.0.1:" + freePort),
@@ -116,7 +116,7 @@ public void shouldStartMockServerWithRemotePort() {
                 "-serverPort", String.valueOf(freePort),
                 "-proxyRemotePort", String.valueOf(echoServer.getPort())
             );
-            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
+            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
                 .sendRequest(
                     request()
                         .withHeader(HOST.toString(), "127.0.0.1:" + freePort),

File: mockserver-netty/src/test/java/org/mockserver/cors/OverridePreFlightRequestIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public class OverridePreFlightRequestIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(OverridePreFlightRequestIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() {
                     .withPath("/my/echo")
             )
             .respond(callback().withCallbackClass("org.mockserver.netty.integration.mock.ConcurrencyBasicResponseMockingIntegrationTest$ClassCallback"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ConcurrencyResponseWebSocketMockingIntegrationTest.java
Patch:
@@ -53,7 +53,7 @@ public void setUp() {
                     .withHeader(CONTENT_LENGTH.toString(), String.valueOf(request.getBodyAsString().length()))
                     .withBody(request.getBodyAsString())
             );
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileSystemPersistenceIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ public class ExpectationFileSystemPersistenceIntegrationTest {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ExpectationFileSystemPersistenceIntegrationTest.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationFileWatcherIntegrationTest.java
Patch:
@@ -42,7 +42,7 @@ public class ExpectationFileWatcherIntegrationTest {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ExpectationFileSystemPersistenceIntegrationTest.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ExpectationInitializerIntegrationTest.java
Patch:
@@ -32,7 +32,7 @@ public class ExpectationInitializerIntegrationTest {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ExpectationInitializerIntegrationTest.class.getSimpleName() + "-eventLoop"));
-        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/ProxyToInvalidSocketIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public class ProxyToInvalidSocketIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(ProxyToInvalidSocketIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/direct/DirectProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@ public class DirectProxyViaLoadBalanceIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(DirectProxyViaLoadBalanceIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyChainedIntegrationTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldAuthenticateForwardHTTPConnect() throws Exception {
             ConfigurationProperties.forwardProxyAuthenticationPassword(password);
             proxyClientAndServer = startClientAndServer();
 
-            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
+            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
                 .sendRequest(
                     request()
                         .withPath("/target")
@@ -114,7 +114,7 @@ public void shouldForwardHTTPConnect() throws Exception {
             ConfigurationProperties.forwardHttpsProxy("localhost:" + targetClientAndServer.getLocalPort());
             proxyClientAndServer = startClientAndServer();
 
-            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
+            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
                 .sendRequest(
                     request()
                         .withPath("/target")
@@ -150,7 +150,7 @@ public void shouldNotForwardHTTPConnectIfNotSecure() throws Exception {
             ConfigurationProperties.forwardHttpsProxy("localhost:" + targetClientAndServer.getLocalPort());
             proxyClientAndServer = startClientAndServer();
 
-            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false)
+            HttpResponse httpResponse = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null)
                 .sendRequest(
                     request()
                         .withPath("/target")

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyContentLengthIntegrationTest.java
Patch:
@@ -92,7 +92,7 @@ public void shouldHandleProxiedResponseWithoutContentLength() throws Exception {
             proxyConfiguration(
                 ProxyConfiguration.Type.HTTPS,
                 "localhost:" + proxyClientAndServer.getLocalPort()
-            ), false)
+            ), false, null)
             .sendRequest(
                 request()
                     .withPath("/noContentLengthHeader")

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/proxy/http/HttpProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@ public class HttpProxyViaLoadBalanceIntegrationTest {
 
     private static final EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup(3, new Scheduler.SchedulerThreadFactory(HttpProxyViaLoadBalanceIntegrationTest.class.getSimpleName() + "-eventLoop"));
 
-    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false);
+    private static final NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null, false, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/netty/proxy/http/HttpProxyUnificationInitializerSOCKSErrorTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldHandleErrorsDuringSOCKSConnection() {
         short localPort = 1234;
         final LifeCycle lifeCycle = mock(LifeCycle.class);
         when(lifeCycle.getScheduler()).thenReturn(mock(Scheduler.class));
-        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new MockServerUnificationInitializer(lifeCycle, new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class)));
+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new MockServerUnificationInitializer(lifeCycle, new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class), null));
 
         // and - no SOCKS handlers
         assertThat(embeddedChannel.pipeline().get(Socks5ProxyHandler.class), is(nullValue()));
@@ -106,7 +106,7 @@ public void shouldHandleErrorsDuringSOCKSConnection() {
     public void shouldSwitchToHttp() {
         // given
         EmbeddedChannel embeddedChannel = new EmbeddedChannel();
-        embeddedChannel.pipeline().addLast(new MockServerUnificationInitializer(mock(LifeCycle.class), new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class)));
+        embeddedChannel.pipeline().addLast(new MockServerUnificationInitializer(mock(LifeCycle.class), new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class), null));
 
         // and - no HTTP handlers
         assertThat(embeddedChannel.pipeline().get(HttpServerCodec.class), is(nullValue()));
@@ -148,7 +148,7 @@ public void shouldSwitchToHttp() {
     @Test
     public void shouldSupportUnknownProtocol() {
         // given
-        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new MockServerUnificationInitializer(mock(LifeCycle.class), new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class)));
+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new MockServerUnificationInitializer(mock(LifeCycle.class), new HttpStateHandler(new MockServerLogger(), mock(Scheduler.class)), mock(ActionHandler.class), null));
 
         // and - channel open
         assertThat(embeddedChannel.isOpen(), is(true));

File: mockserver-proxy-war/src/main/java/org/mockserver/proxyservlet/ProxyServlet.java
Patch:
@@ -60,7 +60,7 @@ public ProxyServlet() {
         this.httpStateHandler = new HttpStateHandler(this.mockServerLogger, this.scheduler);
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
-        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null);
+        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null, null);
     }
 
     @Override

File: mockserver-war/src/main/java/org/mockserver/mockservlet/MockServerServlet.java
Patch:
@@ -60,7 +60,7 @@ public MockServerServlet() {
         this.httpStateHandler = new HttpStateHandler(this.mockServerLogger, this.scheduler);
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
-        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null);
+        this.actionHandler = new ActionHandler(workerGroup, httpStateHandler, null, null);
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -501,7 +501,7 @@ public static String directoryToSaveDynamicSSLCertificate() {
      * @param directoryToSaveDynamicSSLCertificate location to save private key and X509 certificate
      */
     public static void directoryToSaveDynamicSSLCertificate(String directoryToSaveDynamicSSLCertificate) {
-        if (!new File(directoryToSaveDynamicSSLCertificate).exists()) {
+        if (isNotBlank(directoryToSaveDynamicSSLCertificate) && !new File(directoryToSaveDynamicSSLCertificate).exists()) {
             throw new RuntimeException(directoryToSaveDynamicSSLCertificate + " does not exist or is not accessible");
         }
         System.setProperty(MOCKSERVER_CERTIFICATE_DIRECTORY_TO_SAVE_DYNAMIC_SSL_CERTIFICATE, directoryToSaveDynamicSSLCertificate);

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -44,7 +44,7 @@ public class KeyStoreFactory {
      */
     private static final String SSL_CONTEXT_FALLBACK_PROTOCOL = "TLSv1";
 
-    private static SSLContext sslContext;
+    private SSLContext sslContext;
     private final MockServerLogger mockServerLogger;
     private final KeyAndCertificateFactory keyAndCertificateFactory;
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ForwardViaHttpsProxyWithAnyTrustManagerMockingIntegrationTest.java
Patch:
@@ -41,7 +41,9 @@ public class ForwardViaHttpsProxyWithAnyTrustManagerMockingIntegrationTest exten
 
     @BeforeClass
     public static void startServer() {
+        // save original value
         originalForwardProxyTLSX509CertificatesTrustManager = forwardProxyTLSX509CertificatesTrustManager();
+
         forwardProxyTLSX509CertificatesTrustManager(ForwardProxyTLSX509CertificatesTrustManager.ANY.name());
 
         proxy = new MockServer();
@@ -56,6 +58,7 @@ public static void stopServer() {
         stopQuietly(mockServer);
         stopQuietly(mockServerClient);
 
+        // set back to original value
         forwardProxyTLSX509CertificatesTrustManager(originalForwardProxyTLSX509CertificatesTrustManager.name());
     }
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ForwardViaHttpsProxyWithCustomTrustManagerWithCustomCAMockingIntegrationTest.java
Patch:
@@ -47,13 +47,15 @@ public class ForwardViaHttpsProxyWithCustomTrustManagerWithCustomCAMockingIntegr
     private static ForwardProxyTLSX509CertificatesTrustManager originalForwardProxyTLSX509CertificatesTrustManager;
     private static String originalCertificateAuthorityCertificate;
     private static String originalCertificateAuthorityPrivateKey;
+    private static String originalForwardProxyTLSCustomTrustX509Certificates;
 
     @BeforeClass
     public static void startServer() {
         // save original value
         originalCertificateAuthorityCertificate = certificateAuthorityCertificate();
         originalCertificateAuthorityPrivateKey = certificateAuthorityPrivateKey();
         originalForwardProxyTLSX509CertificatesTrustManager = forwardProxyTLSX509CertificatesTrustManager();
+        originalForwardProxyTLSCustomTrustX509Certificates = forwardProxyTLSCustomTrustX509Certificates();
 
         // set new certificate authority values
         certificateAuthorityCertificate("org/mockserver/netty/integration/tls/ca.pem");
@@ -77,6 +79,7 @@ public static void stopServer() {
         certificateAuthorityCertificate(originalCertificateAuthorityCertificate);
         certificateAuthorityPrivateKey(originalCertificateAuthorityPrivateKey);
         forwardProxyTLSX509CertificatesTrustManager(originalForwardProxyTLSX509CertificatesTrustManager.name());
+        forwardProxyTLSCustomTrustX509Certificates(originalForwardProxyTLSCustomTrustX509Certificates);
     }
 
     @Override

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ForwardViaHttpsProxyWithJVMTrustManagerMockingIntegrationTest.java
Patch:
@@ -48,7 +48,9 @@ public class ForwardViaHttpsProxyWithJVMTrustManagerMockingIntegrationTest exten
 
     @BeforeClass
     public static void startServer() {
+        // save original value
         originalForwardProxyTLSX509CertificatesTrustManager = forwardProxyTLSX509CertificatesTrustManager();
+
         forwardProxyTLSX509CertificatesTrustManager(ForwardProxyTLSX509CertificatesTrustManager.JVM.name());
 
         proxy = new MockServer();
@@ -63,6 +65,7 @@ public static void stopServer() {
         stopQuietly(mockServer);
         stopQuietly(mockServerClient);
 
+        // set back to original value
         forwardProxyTLSX509CertificatesTrustManager(originalForwardProxyTLSX509CertificatesTrustManager.name());
     }
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ForwardWithAnyTrustManagerMockingIntegrationTest.java
Patch:
@@ -21,7 +21,9 @@ public class ForwardWithAnyTrustManagerMockingIntegrationTest extends AbstractFo
 
     @BeforeClass
     public static void startServer() {
+        // save original value
         originalForwardProxyTLSX509CertificatesTrustManager = forwardProxyTLSX509CertificatesTrustManager();
+
         forwardProxyTLSX509CertificatesTrustManager(ForwardProxyTLSX509CertificatesTrustManager.ANY.name());
 
         mockServer = new MockServer();
@@ -34,6 +36,7 @@ public static void stopServer() {
         stopQuietly(mockServer);
         stopQuietly(mockServerClient);
 
+        // set back to original value
         forwardProxyTLSX509CertificatesTrustManager(originalForwardProxyTLSX509CertificatesTrustManager.name());
     }
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ForwardWithCustomTrustManagerWithCustomCAMockingIntegrationTest.java
Patch:
@@ -20,13 +20,15 @@ public class ForwardWithCustomTrustManagerWithCustomCAMockingIntegrationTest ext
     private static ForwardProxyTLSX509CertificatesTrustManager originalForwardProxyTLSX509CertificatesTrustManager;
     private static String originalCertificateAuthorityCertificate;
     private static String originalCertificateAuthorityPrivateKey;
+    private static String originalForwardProxyTLSCustomTrustX509Certificates;
 
     @BeforeClass
     public static void startServer() {
         // save original value
         originalCertificateAuthorityCertificate = certificateAuthorityCertificate();
         originalCertificateAuthorityPrivateKey = certificateAuthorityPrivateKey();
         originalForwardProxyTLSX509CertificatesTrustManager = forwardProxyTLSX509CertificatesTrustManager();
+        originalForwardProxyTLSCustomTrustX509Certificates = forwardProxyTLSCustomTrustX509Certificates();
 
         // set new certificate authority values
         certificateAuthorityCertificate("org/mockserver/netty/integration/tls/ca.pem");
@@ -48,6 +50,7 @@ public static void stopServer() {
         certificateAuthorityCertificate(originalCertificateAuthorityCertificate);
         certificateAuthorityPrivateKey(originalCertificateAuthorityPrivateKey);
         forwardProxyTLSX509CertificatesTrustManager(originalForwardProxyTLSX509CertificatesTrustManager.name());
+        forwardProxyTLSCustomTrustX509Certificates(originalForwardProxyTLSCustomTrustX509Certificates);
     }
 
     @Override

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ForwardWithJVMTrustManagerMockingIntegrationTest.java
Patch:
@@ -21,7 +21,9 @@ public class ForwardWithJVMTrustManagerMockingIntegrationTest extends AbstractFo
 
     @BeforeClass
     public static void startServer() {
+        // save original value
         originalForwardProxyTLSX509CertificatesTrustManager = forwardProxyTLSX509CertificatesTrustManager();
+
         forwardProxyTLSX509CertificatesTrustManager(ForwardProxyTLSX509CertificatesTrustManager.JVM.name());
 
         mockServer = new MockServer();
@@ -34,6 +36,7 @@ public static void stopServer() {
         stopQuietly(mockServer);
         stopQuietly(mockServerClient);
 
+        // set back to original value
         forwardProxyTLSX509CertificatesTrustManager(originalForwardProxyTLSX509CertificatesTrustManager.name());
     }
 

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ClientAuthenticationCustomCertificateAuthorityMockingIntegrationTest.java
Patch:
@@ -208,9 +208,9 @@ public void shouldFailToAuthenticateInHttpsApacheClient() {
         } catch (Throwable throwable) {
             assertThat(throwable.getMessage(),
                 anyOf(
-                    is("Received fatal alert: certificate_unknown"),
-                    is("readHandshakeRecord"),
-                    is("Broken pipe")
+                    containsString("Received fatal alert: certificate_unknown"),
+                    containsString("readHandshakeRecord"),
+                    containsString("Broken pipe")
                 )
             );
         }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ClientAuthenticationCustomCertificateAuthorityMockingIntegrationTest.java
Patch:
@@ -136,7 +136,7 @@ public void shouldReturnResponseInHttpsNettyClient() {
     }
 
     @Test
-    // @Ignore("TODO (jamesdbloom) determine why this test fails in build server but not else where?")
+    @Ignore("TODO (jamesdbloom) determine why this test fails in build server but not else where?")
     public void shouldReturnResponseInHttpsApacheClient() throws Exception {
         StatusLine statusLine = null;
         String responseBody = null;
@@ -209,7 +209,8 @@ public void shouldFailToAuthenticateInHttpsApacheClient() {
             assertThat(throwable.getMessage(),
                 anyOf(
                     is("Received fatal alert: certificate_unknown"),
-                    is("readHandshakeRecord")
+                    is("readHandshakeRecord"),
+                    is("Broken pipe")
                 )
             );
         }

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -52,7 +52,7 @@ public class ConfigurationProperties {
     private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = Math.max(35, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
     private static final int DEFAULT_ACTION_HANDLER_THREAD_COUNT = Math.max(20, Runtime.getRuntime().availableProcessors());
     private static final int DEFAULT_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT = 5;
-    private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = "org/mockserver/socket/PKCS#8CertificateAuthorityPrivateKey.pem";
+    private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = "org/mockserver/socket/PKCS8CertificateAuthorityPrivateKey.pem";
     private static final String DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = "org/mockserver/socket/CertificateAuthorityCertificate.pem";
     private static final String DEFAULT_CORS_ALLOW_HEADERS = "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization";
     private static final String DEFAULT_CORS_ALLOW_METHODS = "CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE";

File: mockserver-core/src/main/java/org/mockserver/socket/tls/bouncycastle/BCKeyAndCertificateFactory.java
Patch:
@@ -63,7 +63,7 @@ public synchronized void buildAndSaveCertificateAuthorityPrivateKeyAndX509Certif
             KeyPair caKeyPair = generateKeyPair(ROOT_KEYSIZE);
 
             saveAsPEMFile(createCACert(caKeyPair.getPublic(), caKeyPair.getPrivate()), "CertificateAuthorityCertificate.pem", false, "X509 key");
-            saveAsPEMFile(caKeyPair.getPrivate(), "PKCS#1CertificateAuthorityPrivateKey.pem", false, "private key");
+            saveAsPEMFile(caKeyPair.getPrivate(), "PKCS1CertificateAuthorityPrivateKey.pem", false, "private key");
         } catch (Exception e) {
             mockServerLogger.logEvent(
                 new LogEntry()
@@ -122,7 +122,7 @@ public synchronized void buildAndSavePrivateKeyAndX509Certificate() {
             try {
                 caPrivateKey = privateKeyFromPEMFile(ConfigurationProperties.certificateAuthorityPrivateKey());
             } catch (Throwable throwable) {
-                caPrivateKey = privateKeyFromPEMFile(ConfigurationProperties.certificateAuthorityPrivateKey().replaceAll("PKCS#8", "PKCS#1"));
+                caPrivateKey = privateKeyFromPEMFile(ConfigurationProperties.certificateAuthorityPrivateKey().replaceAll("PKCS8", "PKCS1"));
             }
             X509Certificate caCert = certificateAuthorityX509Certificate();
 

File: mockserver-core/src/main/java/org/mockserver/socket/tls/jdk/JDKKeyAndCertificateFactory.java
Patch:
@@ -49,7 +49,7 @@ public void buildAndSaveCertificateAuthorityPrivateKeyAndX509Certificate() {
             );
 
             savePEMToFile(x509AndPrivateKey.getCert(), "CertificateAuthorityCertificate.pem", false, "X509 key");
-            savePEMToFile(x509AndPrivateKey.getPrivateKey(), "PKCS#8CertificateAuthorityPrivateKey.pem", false, "private key");
+            savePEMToFile(x509AndPrivateKey.getPrivateKey(), "PKCS8CertificateAuthorityPrivateKey.pem", false, "private key");
         } catch (Exception e) {
             mockServerLogger.logEvent(
                 new LogEntry()

File: mockserver-core/src/main/java/org/mockserver/socket/tls/jdk/X509Generator.java
Patch:
@@ -198,8 +198,8 @@ static byte[] privateKeyBytesFromPEM(final String pem) {
         if (pem.contains(BEGIN_RSA_PRIVATE_KEY) || pem.contains(END_RSA_PRIVATE_KEY)) {
             new MockServerLogger().logEvent(
                 new LogEntry()
-                    .setType(LogEntry.LogMessageType.EXCEPTION)
-                    .setLogLevel(Level.ERROR)
+                    .setType(LogEntry.LogMessageType.WARN)
+                    .setLogLevel(Level.WARN)
                     .setMessageFormat("Private key provided in unsupported PKCS#1 only PKCS#8 format is support, to convert use openssl, for example{}")
                     .setArguments("openssl pkcs8 -topk8 -inform PEM -in private_key_PKCS_1.pem -out private_key_PKCS_8.pem -nocrypt")
             );

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -529,7 +529,7 @@ public void shouldSetAndReadCertificateAuthorityPrivateKey() {
         System.clearProperty("mockserver.certificateAuthorityPrivateKey");
 
         // when
-        assertEquals("org/mockserver/socket/PKCS#8CertificateAuthorityPrivateKey.pem", certificateAuthorityPrivateKey());
+        assertEquals("org/mockserver/socket/PKCS8CertificateAuthorityPrivateKey.pem", certificateAuthorityPrivateKey());
         certificateAuthorityPrivateKey("some/private_key.pem");
 
         // then

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactory.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.socket.tls;
 
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.socket.tls.jdk.JDKKeyAndCertificateFactory;
+import org.mockserver.socket.tls.bouncycastle.BCKeyAndCertificateFactory;
 
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
@@ -51,7 +51,7 @@ public interface KeyAndCertificateFactory {
     X509Certificate certificateAuthorityX509Certificate();
 
     static void main(String[] args) {
-        new JDKKeyAndCertificateFactory(new MockServerLogger()).buildAndSaveCertificateAuthorityPrivateKeyAndX509Certificate();
+        new BCKeyAndCertificateFactory(new MockServerLogger()).buildAndSaveCertificateAuthorityPrivateKeyAndX509Certificate();
     }
 
 }

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.socket.tls.jdk.JDKKeyAndCertificateFactory;
+import org.mockserver.socket.tls.bouncycastle.BCKeyAndCertificateFactory;
 
 import javax.net.ssl.KeyManagerFactory;
 import javax.net.ssl.SSLContext;
@@ -54,7 +54,7 @@ public class KeyStoreFactory {
 
     public KeyStoreFactory(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        keyAndCertificateFactory = new JDKKeyAndCertificateFactory(mockServerLogger);
+        keyAndCertificateFactory = new BCKeyAndCertificateFactory(mockServerLogger);
     }
 
     public static String defaultKeyStoreFileName() {

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -5,7 +5,7 @@
 import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.socket.tls.jdk.JDKKeyAndCertificateFactory;
+import org.mockserver.socket.tls.bouncycastle.BCKeyAndCertificateFactory;
 
 import javax.net.ssl.SSLException;
 
@@ -19,7 +19,7 @@ public class NettySslContextFactory {
     private SslContext serverSslContext = null;
 
     public NettySslContextFactory(MockServerLogger mockServerLogger) {
-        keyAndCertificateFactory = new JDKKeyAndCertificateFactory(mockServerLogger);
+        keyAndCertificateFactory = new BCKeyAndCertificateFactory(mockServerLogger);
         System.setProperty("https.protocols", "SSLv3,TLSv1,TLSv1.1,TLSv1.2");
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/HttpClientConnectionHandler.java
Patch:
@@ -16,7 +16,7 @@ public class HttpClientConnectionHandler extends ChannelDuplexHandler {
     public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {
         CompletableFuture<HttpResponse> responseFuture = ctx.channel().attr(RESPONSE_FUTURE).get();
         if (responseFuture != null && !responseFuture.isDone()) {
-            responseFuture.completeExceptionally(new SocketConnectionException("Channel " + "handler removed" + " before valid response has been received"));
+            responseFuture.completeExceptionally(new SocketConnectionException("Channel handler removed before valid response has been received"));
         }
         super.handlerRemoved(ctx);
     }

File: mockserver-netty/src/test/java/org/mockserver/netty/integration/mock/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -65,7 +65,7 @@ public void sendMultipleRequestsMultiThreaded() throws ExecutionException, Inter
     private void scheduleTasksAndWaitForResponses(int parallelThreads) throws InterruptedException, ExecutionException, TimeoutException {
         ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(parallelThreads);
 
-        List<ScheduledFuture> scheduledFutures = new ArrayList<>();
+        List<ScheduledFuture<?>> scheduledFutures = new ArrayList<>();
         for (int i = 0; i < parallelThreads; i++) {
             scheduledFutures.add(executor.schedule(new Task(), 1L, TimeUnit.SECONDS));
         }
@@ -98,6 +98,7 @@ public void run() {
         }
     }
 
+    @SuppressWarnings("unused")
     public static class ClassCallback implements ExpectationResponseCallback {
         @Override
         public HttpResponse handle(HttpRequest request) {

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -505,7 +505,7 @@ public void shouldThrowIllegalArgumentExceptionForInvalidLogLevel() {
         try {
             logLevel("WRONG");
         } catch (IllegalArgumentException iae) {
-            assertThat(iae.getMessage(), is("log level \"WRONG\" is not legal it must be one of SL4J levels: \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\" or the Java Logger levels: \"FINEST\", \"FINE\", \"INFO\", \"WARNING\", \"SEVERE\", \"OFF\""));
+            assertThat(iae.getMessage(), is("log level \"WRONG\" is not legal it must be one of SL4J levels: \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\", or the Java Logger levels: \"FINEST\", \"FINE\", \"INFO\", \"WARNING\", \"SEVERE\", \"OFF\""));
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -51,7 +51,7 @@ public class ConfigurationProperties {
     private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = Math.max(20, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
     private static final int DEFAULT_ACTION_HANDLER_THREAD_COUNT = Math.max(20, Runtime.getRuntime().availableProcessors());
     private static final int DEFAULT_WEB_SOCKET_CLIENT_EVENT_LOOP_THREAD_COUNT = 5;
-    private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = "org/mockserver/socket/CertificateAuthorityPrivateKey.pem";
+    private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = "org/mockserver/socket/PKCS#8CertificateAuthorityPrivateKey.pem";
     private static final String DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = "org/mockserver/socket/CertificateAuthorityCertificate.pem";
     private static final String DEFAULT_CORS_ALLOW_HEADERS = "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization";
     private static final String DEFAULT_CORS_ALLOW_METHODS = "CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH, TRACE";

File: mockserver-core/src/main/java/org/mockserver/socket/tls/jdk/CertificateSigningRequest.java
Patch:
@@ -24,7 +24,7 @@ public class CertificateSigningRequest {
 
     private String commonName;
     private int keyPairSize;
-    private List<String> subjectAlternativeNames;
+    private String[] subjectAlternativeNames;
     private String signingAlgorithm = DEFAULT_SIGNING_ALGORITHM;
     private String keyPairAlgorithm = DEFAULT_KEY_GENERATION_ALGORITHM;
     private Long validityInMillis = DAYS.toMillis(DEFAULT_VALIDITY);
@@ -51,11 +51,11 @@ public CertificateSigningRequest setKeyPairSize(int keyPairSize) {
         return this;
     }
 
-    public List<String> getSubjectAlternativeNames() {
+    public String[] getSubjectAlternativeNames() {
         return subjectAlternativeNames;
     }
 
-    public CertificateSigningRequest setSubjectAlternativeNames(List<String> subjectAlternativeNames) {
+    public CertificateSigningRequest setSubjectAlternativeNames(String[] subjectAlternativeNames) {
         this.subjectAlternativeNames = subjectAlternativeNames;
         return this;
     }

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -515,7 +515,7 @@ public void shouldSetAndReadCertificateAuthorityPrivateKey() {
         System.clearProperty("mockserver.certificateAuthorityPrivateKey");
 
         // when
-        assertEquals("org/mockserver/socket/CertificateAuthorityPrivateKey.pem", certificateAuthorityPrivateKey());
+        assertEquals("org/mockserver/socket/PKCS#8CertificateAuthorityPrivateKey.pem", certificateAuthorityPrivateKey());
         certificateAuthorityPrivateKey("some/private_key.pem");
 
         // then

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerToNettyResponseEncoder.java
Patch:
@@ -8,7 +8,6 @@
 import io.netty.handler.codec.http.HttpVersion;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 import io.netty.handler.codec.http.cookie.ServerCookieEncoder;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.ConnectionOptions;
@@ -21,6 +20,7 @@
 
 import static io.netty.handler.codec.http.HttpHeaderNames.*;
 import static org.apache.commons.lang3.StringUtils.isBlank;
+import static org.apache.commons.lang3.StringUtils.isEmpty;
 import static org.mockserver.model.ConnectionOptions.isFalseOrNull;
 
 /**
@@ -67,7 +67,7 @@ public DefaultFullHttpResponse encode(HttpResponse httpResponse) {
 
     private HttpResponseStatus getStatus(HttpResponse httpResponse) {
         int statusCode = httpResponse.getStatusCode() != null ? httpResponse.getStatusCode() : 200;
-        if (!StringUtils.isEmpty(httpResponse.getReasonPhrase())) {
+        if (!isEmpty(httpResponse.getReasonPhrase())) {
             return new HttpResponseStatus(statusCode, httpResponse.getReasonPhrase());
         } else {
             return HttpResponseStatus.valueOf(statusCode);

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletRequestToMockServerRequestDecoder.java
Patch:
@@ -3,7 +3,6 @@
 import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpHeaderValues;
 import io.netty.handler.codec.http.QueryStringDecoder;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.codec.BodyDecoderEncoder;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
@@ -13,6 +12,8 @@
 import java.util.Enumeration;
 import java.util.List;
 
+import static org.apache.commons.lang3.StringUtils.isNotEmpty;
+
 /**
  * @author jamesdbloom
  */
@@ -50,7 +51,7 @@ private void setPath(HttpRequest httpRequest, HttpServletRequest httpServletRequ
 
     private void setQueryString(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {
         Parameters parameters = new Parameters();
-        if (StringUtils.isNotEmpty(httpServletRequest.getQueryString())) {
+        if (isNotEmpty(httpServletRequest.getQueryString())) {
             parameters.withEntries(new QueryStringDecoder("?" + httpServletRequest.getQueryString()).parameters());
         }
         httpRequest.withQueryStringParameters(parameters);

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonPathMatcher.java
Patch:
@@ -3,11 +3,11 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.jayway.jsonpath.JsonPath;
 import net.minidev.json.JSONArray;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 
+import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.slf4j.event.Level.DEBUG;
 import static org.slf4j.event.Level.TRACE;
 
@@ -25,7 +25,7 @@ public class JsonPathMatcher extends BodyMatcher<String> {
     JsonPathMatcher(MockServerLogger mockServerLogger, String matcher) {
         this.mockServerLogger = mockServerLogger;
         this.matcher = matcher;
-        if (StringUtils.isNotBlank(matcher)) {
+        if (isNotBlank(matcher)) {
             try {
                 jsonPath = JsonPath.compile(matcher);
             } catch (Throwable throwable) {

File: mockserver-core/src/main/java/org/mockserver/matchers/XPathMatcher.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.matchers;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
@@ -11,6 +10,7 @@
 import javax.xml.xpath.XPathExpressionException;
 import javax.xml.xpath.XPathFactory;
 
+import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.slf4j.event.Level.*;
 
 /**
@@ -26,7 +26,7 @@ public class XPathMatcher extends BodyMatcher<String> {
     XPathMatcher(MockServerLogger mockServerLogger, String matcher) {
         this.mockServerLogger = mockServerLogger;
         this.matcher = matcher;
-        if (StringUtils.isNotBlank(matcher)) {
+        if (isNotBlank(matcher)) {
             try {
                 xpathExpression = XPathFactory.newInstance().newXPath().compile(matcher);
             } catch (XPathExpressionException e) {

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -3,7 +3,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.EventLoopGroup;
 import io.netty.util.AttributeKey;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.client.SocketCommunicationException;
 import org.mockserver.client.SocketConnectionException;
@@ -27,6 +26,7 @@
 import static io.netty.handler.codec.http.HttpHeaderNames.HOST;
 import static io.netty.handler.codec.http.HttpResponseStatus.OK;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.apache.commons.lang3.StringUtils.isEmpty;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.configuration.ConfigurationProperties.*;
 import static org.mockserver.cors.CORSHeaders.isPreflightRequest;
@@ -82,7 +82,7 @@ public void processAction(final HttpRequest request, final ResponseWriter respon
         }
         final Expectation expectation = httpStateHandler.firstMatchingExpectation(request);
         Runnable expectationPostProcessor = () -> httpStateHandler.postProcess(expectation);
-        final boolean potentiallyHttpProxy = !StringUtils.isEmpty(request.getFirstHeader(HOST.toString())) && !localAddresses.contains(request.getFirstHeader(HOST.toString()));
+        final boolean potentiallyHttpProxy = !isEmpty(request.getFirstHeader(HOST.toString())) && !localAddresses.contains(request.getFirstHeader(HOST.toString()));
 
         if (expectation != null && expectation.getAction() != null) {
 

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpRequestAndHttpResponseSerializer.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectWriter;
 import com.google.common.base.Joiner;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;

File: mockserver-core/src/main/java/org/mockserver/serialization/deserializers/string/NottableStringDeserializer.java
Patch:
@@ -1,15 +1,14 @@
 package org.mockserver.serialization.deserializers.string;
 
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.JsonToken;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.model.NottableString;
 
 import java.io.IOException;
 
+import static org.apache.commons.lang3.StringUtils.isEmpty;
 import static org.mockserver.model.NottableString.string;
 
 /**
@@ -38,7 +37,7 @@ public NottableString deserialize(JsonParser jsonParser, DeserializationContext
                 }
             }
 
-            if (StringUtils.isEmpty(string)) {
+            if (isEmpty(string)) {
                 return null;
             }
 

File: mockserver-core/src/main/java/org/mockserver/server/initialize/ExpectationInitializerLoader.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.server.initialize;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.file.FileReader;
 import org.mockserver.log.model.LogEntry;
@@ -13,6 +12,7 @@
 import java.lang.reflect.Constructor;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
+import static org.apache.commons.lang3.StringUtils.isNotEmpty;
 import static org.mockserver.log.model.LogEntry.LogMessageType.SERVER_CONFIGURATION;
 import static org.slf4j.event.Level.WARN;
 
@@ -43,7 +43,7 @@ private Expectation[] retrieveExpectationsFromInitializerClass() {
             String initializationClass = ConfigurationProperties.initializationClass();
             if (isNotBlank(initializationClass)) {
                 ClassLoader contextClassLoader = ExpectationInitializerLoader.class.getClassLoader();
-                if (contextClassLoader != null && StringUtils.isNotEmpty(initializationClass)) {
+                if (contextClassLoader != null && isNotEmpty(initializationClass)) {
                     Constructor<?> initializerClassConstructor = contextClassLoader.loadClass(initializationClass).getDeclaredConstructor();
                     Object expectationInitializer = initializerClassConstructor.newInstance();
                     if (expectationInitializer instanceof ExpectationInitializer) {

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactoryBC.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.socket.tls;
 
-import org.apache.commons.lang3.StringUtils;
 import org.bouncycastle.asn1.*;
 import org.bouncycastle.asn1.x500.X500Name;
 import org.bouncycastle.asn1.x509.*;
@@ -36,6 +35,7 @@
 import java.util.*;
 
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
+import static org.apache.commons.lang3.StringUtils.substringBefore;
 import static org.mockserver.configuration.ConfigurationProperties.directoryToSaveDynamicSSLCertificate;
 import static org.slf4j.event.Level.DEBUG;
 import static org.slf4j.event.Level.WARN;
@@ -86,7 +86,7 @@ public class KeyAndCertificateFactoryBC implements KeyAndCertificateFactory {
 
     public void addSubjectAlternativeName(String host) {
         if (host != null) {
-            String hostWithoutPort = StringUtils.substringBefore(host, ":");
+            String hostWithoutPort = substringBefore(host, ":");
             if (IPAddress.isValid(hostWithoutPort)) {
                 ConfigurationProperties.addSslSubjectAlternativeNameIps(hostWithoutPort);
             } else {

File: mockserver-core/src/main/java/org/mockserver/url/URLParser.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.url;
 
-import org.apache.commons.lang3.StringUtils;
+import static org.apache.commons.lang3.StringUtils.substringBefore;
 
 /**
  * @author jamesdbloom
@@ -21,6 +21,6 @@ public static String returnPath(String path) {
         } else {
             result = path;
         }
-        return StringUtils.substringBefore(result, "?");
+        return substringBefore(result, "?");
     }
 }

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -546,7 +546,7 @@ public void shouldSetAndReadDirectoryToSaveDynamicSSLCertificate() throws IOExce
         assertThat(directoryToSaveDynamicSSLCertificate(), is(""));
         try {
             directoryToSaveDynamicSSLCertificate("some/random/path");
-            fail();
+            fail("expected exception to be thrown");
         } catch (Throwable throwable) {
             assertThat(throwable, instanceOf(RuntimeException.class));
             assertThat(throwable.getMessage(), is("some/random/path does not exist or is not accessible"));

File: mockserver-core/src/test/java/org/mockserver/serialization/ExpectationSerializerIntegrationTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.concurrent.TimeUnit.MICROSECONDS;
+import static junit.framework.TestCase.fail;
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.*;
@@ -81,7 +82,7 @@ public void shouldValidateSingleObjectForArray() {
         // when
         try {
             new ExpectationSerializer(new MockServerLogger()).deserializeArray(requestBytes, false);
-            fail();
+            fail("expected exception to be thrown");
         } catch (Throwable throwable) {
             assertThat(throwable, instanceOf(IllegalArgumentException.class));
             assertThat(throwable.getMessage(), is("" +
@@ -188,7 +189,7 @@ public void shouldValidateMultipleObjectsForArray() {
         // when
         try {
             new ExpectationSerializer(new MockServerLogger()).deserializeArray(requestBytes, false);
-            fail();
+            fail("expected exception to be thrown");
         } catch (Throwable throwable) {
             assertThat(throwable, instanceOf(IllegalArgumentException.class));
             assertThat(throwable.getMessage(), is("" +

File: mockserver-core/src/test/java/org/mockserver/serialization/HttpRequestSerializationErrorsTest.java
Patch:
@@ -84,7 +84,7 @@ public void shouldHandleExceptionWhileDeserializingObject() {
         try {
             // when
             httpRequestSerializer.deserialize("requestBytes");
-            fail();
+            fail("expected exception to be thrown");
         } catch (IllegalArgumentException iae) {
             // then
             assertThat(iae.getMessage(), is("JsonParseException - Unrecognized token 'requestBytes': was expecting (JSON String, Number (or 'NaN'/'INF'/'+INF'), Array, Object or token 'null', 'true' or 'false')\n" +

File: mockserver-core/src/test/java/org/mockserver/serialization/HttpResponseSerializationErrorsTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldHandleExceptionWhileDeserializingObject() {
         try {
             // when
             httpResponseSerializer.deserialize("responseBytes");
-            fail();
+            fail("expected exception to be thrown");
         } catch (IllegalArgumentException iae) {
             // then
             assertThat(iae.getMessage(), is("JsonParseException - Unrecognized token 'responseBytes': was expecting (JSON String, Number (or 'NaN'/'INF'/'+INF'), Array, Object or token 'null', 'true' or 'false')\n" +
@@ -99,7 +99,7 @@ public void shouldHandleExceptionWhileDeserializingArray() {
         try {
             // when
             httpResponseSerializer.deserializeArray("responseBytes");
-            fail();
+            fail("expected exception to be thrown");
         } catch (IllegalArgumentException iae) {
             // then
             assertThat(iae.getMessage(), is("com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'responseBytes': was expecting (JSON String, Number (or 'NaN'/'INF'/'+INF'), Array, Object or token 'null', 'true' or 'false')\n" +

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/mock/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -1207,7 +1207,7 @@ public void shouldVerifyNotEnoughRequestsReceived() {
                     request()
                         .withPath(calculatePath("some_path")), VerificationTimes.atLeast(2)
                 );
-            fail();
+            fail("expected exception to be thrown");
         } catch (AssertionError ae) {
             assertThat(ae.getMessage(), startsWith("Request not found at least 2 times, expected:<{" + NEW_LINE +
                 "  \"path\" : \"" + calculatePath("some_path") + "\"" + NEW_LINE +

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -374,7 +374,7 @@ public void shouldPreventUnauthenticatedConnectRequestWhenClientConfiguredWithPr
                             .withHeader(HOST.toString(), "127.0.0.1:" + getServerSecurePort())
                     )
                     .get(10, SECONDS);
-                fail();
+                fail("expected exception to be thrown");
             } catch (Throwable throwable) {
                 assertThat(throwable.getCause().getMessage(), containsString("407 Proxy Authentication Required"));
 

File: mockserver-junit-4/src/test/java/org/mockserver/junit/integration/JUnitClassRuleIntegrationTest.java
Patch:
@@ -1,7 +1,8 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.junit.integration;
 
 import org.junit.*;
 import org.mockserver.integration.mock.AbstractBasicMockingIntegrationTest;
+import org.mockserver.integration.mock.AbstractMockingIntegrationTestBase;
 import org.mockserver.junit.MockServerRule;
 import org.mockserver.socket.PortFactory;
 
@@ -19,7 +20,7 @@ public class JUnitClassRuleIntegrationTest extends AbstractBasicMockingIntegrati
     @Before
     @Override
     public void resetServer() {
-        mockServerClient.reset();
+        mockServerRule.getClient().reset();
     }
 
     @Override

File: mockserver-junit-4/src/test/java/org/mockserver/junit/integration/JUnitRuleIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.integration.mock;
+package org.mockserver.junit.integration;
 
 import org.junit.*;
 import org.mockserver.integration.mock.AbstractBasicMockingIntegrationTest;

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Strings;
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.configuration.IntegerStringListParser;
 import org.mockserver.log.model.LogEntry;
@@ -13,6 +12,7 @@
 import java.util.*;
 
 import static org.apache.commons.lang3.StringUtils.isBlank;
+import static org.apache.commons.lang3.StringUtils.substringAfter;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.cli.Main.Arguments.*;
 import static org.mockserver.log.model.LogEntry.LogMessageType.SERVER_CONFIGURATION;
@@ -128,7 +128,7 @@ private static Map<String, String> parseArguments(String... arguments) {
         Iterator<String> argumentsIterator = Arrays.asList(arguments).iterator();
         while (argumentsIterator.hasNext()) {
             final String next = argumentsIterator.next();
-            String argumentName = StringUtils.substringAfter(next, "-");
+            String argumentName = substringAfter(next, "-");
             if (argumentsIterator.hasNext()) {
                 String argumentValue = argumentsIterator.next();
                 if (!Arguments.names().containsIgnoreCase(argumentName)) {

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -545,7 +545,7 @@ public MockServerClient verify(HttpRequest httpRequest, VerificationTimes times)
     }
 
     /**
-     * Verify no requests have been have been sent.
+     * Verify no requests have been sent.
      *
      * @throws AssertionError if any request has been found
      */

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerToNettyRequestEncoder.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
-import org.mockserver.codec.mappers.MockServerHttpRequestToFullHttpRequest;
+import org.mockserver.mappers.MockServerHttpRequestToFullHttpRequest;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 

File: mockserver-core/src/main/java/org/mockserver/codec/NettyToMockServerResponseDecoder.java
Patch:
@@ -3,7 +3,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageDecoder;
 import io.netty.handler.codec.http.FullHttpResponse;
-import org.mockserver.codec.mappers.FullHttpResponseToMockServerResponse;
+import org.mockserver.mappers.FullHttpResponseToMockServerResponse;
 import org.mockserver.logging.MockServerLogger;
 
 import java.util.List;

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -4,6 +4,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.http.DefaultFullHttpResponse;
+import org.apache.commons.codec.binary.Hex;
 import org.mockserver.codec.MockServerToNettyResponseEncoder;
 import org.mockserver.log.MockServerEventLog;
 import org.mockserver.log.model.LogEntry;

File: mockserver-core/src/main/java/org/mockserver/mappers/FullHttpResponseToMockServerResponse.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.codec.mappers;
+package org.mockserver.mappers;
 
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerHttpRequestToFullHttpRequest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.codec.mappers;
+package org.mockserver.mappers;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.http.*;

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -317,7 +317,7 @@ private boolean matchFailed(HttpRequest request, StringBuilder becauseBuilder, b
 
     @SuppressWarnings("unchecked")
     private boolean bodyMatches(HttpRequest context, HttpRequest request) {
-        boolean bodyMatches = true;
+        boolean bodyMatches;
         String bodyAsString = request.getBody() != null ? new String(request.getBody().getRawBytes(), request.getBody().getCharset(DEFAULT_HTTP_CHARACTER_SET)) : "";
         if (bodyMatcher instanceof BinaryMatcher) {
             bodyMatches = matches(context, bodyMatcher, request.getBodyAsRawBytes());
@@ -333,7 +333,8 @@ private boolean bodyMatches(HttpRequest context, HttpRequest request) {
         }
         if (!bodyMatches) {
             try {
-                bodyMatches = bodyDTOMatcher.equals(objectMapper.readValue(bodyAsString, BodyDTO.class));
+                BodyDTO bodyDTO = objectMapper.readValue(bodyAsString, BodyDTO.class);
+                bodyMatches = bodyDTOMatcher.equals(bodyDTO);
             } catch (Throwable e) {
                 // ignore this exception as this exception would typically get thrown for "normal" HTTP requests (i.e. not clear or retrieve)
             }

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardObjectCallbackActionHandler.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.mock.action;
 
+import org.apache.commons.codec.binary.Hex;
 import org.mockserver.callback.WebSocketClientRegistry;
 import org.mockserver.callback.WebSocketRequestCallback;
 import org.mockserver.client.NettyHttpClient;

File: mockserver-core/src/main/java/org/mockserver/model/BodyWithContentType.java
Patch:
@@ -7,7 +7,7 @@
 /**
  * @author jamesdbloom
  */
-public abstract class BodyWithContentType<T> extends Body {
+public abstract class BodyWithContentType<T> extends Body<T> {
 
     protected final MediaType contentType;
 

File: mockserver-core/src/main/java/org/mockserver/model/ParameterBody.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author jamesdbloom
  */
-public class ParameterBody extends BodyWithContentType<List<Parameter>> {
+public class ParameterBody extends Body<Parameters> {
 
     public static final MediaType DEFAULT_CONTENT_TYPE = MediaType.FORM_DATA;
     private Parameters parameters = new Parameters();
@@ -22,7 +22,7 @@ public ParameterBody(List<Parameter> parameters) {
     }
 
     public ParameterBody(Parameters parameters) {
-        super(Type.PARAMETERS, DEFAULT_CONTENT_TYPE);
+        super(Type.PARAMETERS);
         if (parameters != null) {
             this.parameters = parameters;
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/curl/HttpRequestToCurlSerializer.java
Patch:
@@ -4,7 +4,7 @@
 import io.netty.handler.codec.http.cookie.Cookie;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 import org.apache.commons.lang3.StringUtils;
-import org.mockserver.codec.mappers.MockServerHttpRequestToFullHttpRequest;
+import org.mockserver.mappers.MockServerHttpRequestToFullHttpRequest;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/serialization/model/BodyWithContentTypeDTO.java
Patch:
@@ -25,9 +25,6 @@ public static BodyWithContentTypeDTO createDTO(BodyWithContentType body) {
         } else if (body instanceof JsonBody) {
             JsonBody jsonBody = (JsonBody) body;
             result = new JsonBodyDTO(jsonBody, jsonBody.getNot());
-        } else if (body instanceof ParameterBody) {
-            ParameterBody parameterBody = (ParameterBody) body;
-            result = new ParameterBodyDTO(parameterBody, parameterBody.getNot());
         } else if (body instanceof StringBody) {
             StringBody stringBody = (StringBody) body;
             result = new StringBodyDTO(stringBody, stringBody.getNot());

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/body/BinaryBodyDTOSerializer.java
Patch:
@@ -23,7 +23,7 @@ public void serialize(BinaryBodyDTO binaryBodyDTO, JsonGenerator jgen, Serialize
             jgen.writeBooleanField("not", binaryBodyDTO.getNot());
         }
         jgen.writeStringField("type", binaryBodyDTO.getType().name());
-        jgen.writeStringField("base64Bytes", binaryBodyDTO.getValue());
+        jgen.writeObjectField("base64Bytes", binaryBodyDTO.getBase64Bytes());
         if (binaryBodyDTO.getContentType() != null) {
             jgen.writeStringField("contentType", binaryBodyDTO.getContentType());
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/body/JsonBodyDTOSerializer.java
Patch:
@@ -28,6 +28,9 @@ public void serialize(JsonBodyDTO jsonBodyDTO, JsonGenerator jgen, SerializerPro
         }
         jgen.writeStringField("type", jsonBodyDTO.getType().name());
         jgen.writeStringField("json", jsonBodyDTO.getJson());
+        if (jsonBodyDTO.getRawBinaryData() != null) {
+            jgen.writeObjectField("rawBinaryData", jsonBodyDTO.getRawBinaryData());
+        }
         if (jsonBodyDTO.getMatchType() != JsonBody.DEFAULT_MATCH_TYPE) {
             jgen.writeStringField("matchType", jsonBodyDTO.getMatchType().name());
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/body/StringBodyDTOSerializer.java
Patch:
@@ -28,6 +28,9 @@ public void serialize(StringBodyDTO stringBodyDTO, JsonGenerator jgen, Serialize
             }
             jgen.writeStringField("type", stringBodyDTO.getType().name());
             jgen.writeStringField("string", stringBodyDTO.getString());
+            if (stringBodyDTO.getRawBinaryData() != null) {
+                jgen.writeObjectField("rawBinaryData", stringBodyDTO.getRawBinaryData());
+            }
             if (subStringFieldNotDefault) {
                 jgen.writeBooleanField("subString", true);
             }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/body/XmlBodyDTOSerializer.java
Patch:
@@ -25,6 +25,9 @@ public void serialize(XmlBodyDTO xmlBodyDTO, JsonGenerator jgen, SerializerProvi
         }
         jgen.writeStringField("type", xmlBodyDTO.getType().name());
         jgen.writeStringField("xml", xmlBodyDTO.getXml());
+        if (xmlBodyDTO.getRawBinaryData() != null) {
+            jgen.writeObjectField("rawBinaryData", xmlBodyDTO.getRawBinaryData());
+        }
         if (xmlBodyDTO.getContentType() != null && !xmlBodyDTO.getContentType().equals(XmlBody.DEFAULT_CONTENT_TYPE.toString())) {
             jgen.writeStringField("contentType", xmlBodyDTO.getContentType());
         }

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/response/HttpResponseDTOSerializer.java
Patch:
@@ -39,8 +39,6 @@ public void serialize(HttpResponseDTO httpResponseDTO, JsonGenerator jgen, Seria
                 jgen.writeObjectField("body", ((JsonBodyDTO) body).getJson());
             } else if (body instanceof XmlBodyDTO && !((XmlBodyDTO) body).getXml().isEmpty()) {
                 jgen.writeObjectField("body", ((XmlBodyDTO) body).getXml());
-            } else if (body instanceof ParameterBodyDTO && !((ParameterBodyDTO) body).getParameters().isEmpty()) {
-                jgen.writeObjectField("body", ((ParameterBodyDTO) body).buildObject().toString());
             } else if (body instanceof BinaryBodyDTO) {
                 jgen.writeObjectField("body", body);
             } else if (body instanceof LogEventBodyDTO) {

File: mockserver-core/src/main/java/org/mockserver/websocket/WebSocketClientHandler.java
Patch:
@@ -7,7 +7,7 @@
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.websocketx.*;
-import org.mockserver.codec.mappers.FullHttpResponseToMockServerResponse;
+import org.mockserver.mappers.FullHttpResponseToMockServerResponse;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.MediaType;

File: mockserver-core/src/test/java/org/mockserver/model/JsonBodyTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldReturnValuesSetInConstructorWithMatchType() {
     @Test
     public void shouldReturnValuesSetInConstructorWithMatchTypeAndCharset() {
         // when
-        JsonBody jsonBody = new JsonBody("some_body", StandardCharsets.UTF_16, MatchType.STRICT);
+        JsonBody jsonBody = new JsonBody("some_body", null, (StandardCharsets.UTF_16 != null ? MediaType.create("application", "json").withCharset(StandardCharsets.UTF_16) : null), MatchType.STRICT);
 
         // then
         assertThat(jsonBody.getValue(), is("some_body"));
@@ -55,7 +55,7 @@ public void shouldReturnValuesSetInConstructorWithMatchTypeAndCharset() {
     @Test
     public void shouldReturnValuesSetInConstructorWithMatchTypeAndMediaType() {
         // when
-        JsonBody jsonBody = new JsonBody("some_body", MediaType.JSON_UTF_8, MatchType.STRICT);
+        JsonBody jsonBody = new JsonBody("some_body", null, MediaType.JSON_UTF_8, MatchType.STRICT);
 
         // then
         assertThat(jsonBody.getValue(), is("some_body"));

File: mockserver-core/src/test/java/org/mockserver/model/StringBodyTest.java
Patch:
@@ -40,7 +40,7 @@ public void shouldReturnValuesSetInConstructor() {
     @Test
     public void shouldReturnValuesSetInConstructorWithSubString() {
         // when
-        StringBody stringBody = new StringBody("some_body", true);
+        StringBody stringBody = new StringBody("some_body", null, true, (MediaType) null);
 
         // then
         assertThat(stringBody.getValue(), is("some_body"));

File: mockserver-core/src/test/java/org/mockserver/serialization/model/BinaryBodyDTOTest.java
Patch:
@@ -23,7 +23,7 @@ public void shouldReturnValuesSetInConstructor() {
         BinaryBodyDTO binaryBody = new BinaryBodyDTO(new BinaryBody(body));
 
         // then
-        assertThat(binaryBody.getValue(), is(DatatypeConverter.printBase64Binary(body)));
+        assertThat(binaryBody.getBase64Bytes(), is(body));
         assertThat(binaryBody.getType(), is(Body.Type.BINARY));
     }
 

File: mockserver-core/src/test/java/org/mockserver/serialization/model/JsonBodyDTOTest.java
Patch:
@@ -45,7 +45,7 @@ public void shouldReturnValuesSetInConstructorWithMatchType() {
     @Test
     public void shouldReturnValuesSetInConstructorWithMatchTypeAndCharset() {
         // when
-        JsonBodyDTO jsonBody = new JsonBodyDTO(new JsonBody("some_body", StandardCharsets.UTF_16, STRICT));
+        JsonBodyDTO jsonBody = new JsonBodyDTO(new JsonBody("some_body", null, (StandardCharsets.UTF_16 != null ? MediaType.create("application", "json").withCharset(StandardCharsets.UTF_16) : null), STRICT));
 
         // then
         assertThat(jsonBody.getJson(), is("some_body"));
@@ -57,7 +57,7 @@ public void shouldReturnValuesSetInConstructorWithMatchTypeAndCharset() {
     @Test
     public void shouldReturnValuesSetInConstructorWithMatchTypeAndMediaType() {
         // when
-        JsonBodyDTO jsonBody = new JsonBodyDTO(new JsonBody("some_body", MediaType.JSON_UTF_8, STRICT));
+        JsonBodyDTO jsonBody = new JsonBodyDTO(new JsonBody("some_body", null, MediaType.JSON_UTF_8, STRICT));
 
         // then
         assertThat(jsonBody.getJson(), is("some_body"));
@@ -93,7 +93,7 @@ public void shouldBuildCorrectObjectWithMatchType() {
     @Test
     public void shouldBuildCorrectObjectWithMatchTypeAndCharset() {
         // when
-        JsonBody jsonBody = new JsonBodyDTO(new JsonBody("some_body", StandardCharsets.UTF_16, STRICT)).buildObject();
+        JsonBody jsonBody = new JsonBodyDTO(new JsonBody("some_body", null, (StandardCharsets.UTF_16 != null ? MediaType.create("application", "json").withCharset(StandardCharsets.UTF_16) : null), STRICT)).buildObject();
 
         // then
         assertThat(jsonBody.getValue(), is("some_body"));

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/StringBodySerializerTest.java
Patch:
@@ -18,13 +18,13 @@ public class StringBodySerializerTest {
     public void shouldSerializeStringBody() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new StringBody("string_body")),
                 is("\"string_body\""));
-        assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new StringBody("string_body", false)),
+        assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new StringBody("string_body", null, false, (MediaType) null)),
             is("\"string_body\""));
     }
 
     @Test
     public void shouldSerializeStringBodyDTOWithSubString() throws JsonProcessingException {
-        assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new StringBody("string_body", true)),
+        assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new StringBody("string_body", null, true, (MediaType) null)),
             is("{\"type\":\"STRING\",\"string\":\"string_body\",\"subString\":true}"));
     }
 

File: mockserver-core/src/main/java/org/mockserver/mock/HttpStateHandler.java
Patch:
@@ -413,7 +413,7 @@ public HttpResponse retrieve(HttpRequest request) {
 
     public Future<String> verify(Verification verification) {
         CompletableFuture<String> result = new CompletableFuture<>();
-        mockServerLog.verify(verification, result::complete);
+        verify(verification, result::complete);
         return result;
     }
 
@@ -423,7 +423,7 @@ public void verify(Verification verification, Consumer<String> resultConsumer) {
 
     public Future<String> verify(VerificationSequence verification) {
         CompletableFuture<String> result = new CompletableFuture<>();
-        mockServerLog.verify(verification, result::complete);
+        verify(verification, result::complete);
         return result;
     }
 

File: mockserver-netty/src/test/java/org/mockserver/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -88,9 +88,7 @@ public static void shutdownFixture() {
     @Before
     public void resetProxy() {
         if (mockServerClient != null) {
-            System.out.println("mockServerPort reset start = " + mockServerPort);
             mockServerClient.reset();
-            System.out.println("mockServerPort reset end = " + mockServerPort);
         }
     }
 

File: mockserver-netty/src/test/java/org/mockserver/integration/proxy/http/NettyHttpProxyIntegrationTest.java
Patch:
@@ -37,9 +37,7 @@ public static void stopServer() {
 
     @Before
     public void resetProxy() {
-        System.out.println("mockServerPort reset start = " + mockServerPort);
         mockServerClient.reset();
-        System.out.println("mockServerPort reset end = " + mockServerPort);
     }
 
     @Override

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ExpectationFileWatcherIntegrationTest.java
Patch:
@@ -80,6 +80,7 @@ public void shouldDetectModifiedInitialiserJsonOnAdd() throws Exception {
                 },
                 persistedExpectationsContents::completeExceptionally
             );
+            MILLISECONDS.sleep(1000);
 
             // when
             String watchedFileContents = "[ {" + NEW_LINE +
@@ -252,6 +253,7 @@ public void shouldDetectModifiedInitialiserJsonOnDeletion() throws Exception {
                 },
                 persistedExpectationsContents::completeExceptionally
             );
+            MILLISECONDS.sleep(1000);
 
             // when
             watchedFileContents = "[]";
@@ -382,6 +384,7 @@ public void shouldDetectModifiedInitialiserJsonOnUpdate() throws Exception {
                 },
                 persistedExpectationsContents::completeExceptionally
             );
+            MILLISECONDS.sleep(1000);
 
             // when
             watchedFileContents = "[ {" + NEW_LINE +

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientIntegrationTest.java
Patch:
@@ -327,7 +327,7 @@ public void shouldSetupExpectationWithResponseObjectCallback() {
                     "    \"clientId\" : \"" + echoServerOne.getRegisteredClients().get(0) + "\"" + NEW_LINE +
                     "  }," + NEW_LINE +
                     "  \"times\" : {" + NEW_LINE +
-                    "    \"unlimited\" : true" + NEW_LINE +
+                    "    \"remainingTimes\" : 1" + NEW_LINE +
                     "  }," + NEW_LINE +
                     "  \"timeToLive\" : {" + NEW_LINE +
                     "    \"unlimited\" : true" + NEW_LINE +

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ConcurrencyResponseWebSocketMockingIntegrationTest.java
Patch:
@@ -57,18 +57,20 @@ public void tearDown() {
     }
 
     @Test
+    @Ignore
     public void sendMultipleRequestsSingleThreaded() throws ExecutionException, InterruptedException, TimeoutException {
         scheduleTasksAndWaitForResponses(1);
     }
 
     @Test
+    @Ignore
     public void sendMultipleRequestsMultiThreaded() throws ExecutionException, InterruptedException, TimeoutException {
         scheduleTasksAndWaitForResponses(25);
     }
 
     @SuppressWarnings("rawtypes")
     private void scheduleTasksAndWaitForResponses(int parallelThreads) throws InterruptedException, ExecutionException, TimeoutException {
-        ExecutorService executor = Executors.newFixedThreadPool(parallelThreads * 2, new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName()));
+        ExecutorService executor = Executors.newFixedThreadPool(parallelThreads * 3, new Scheduler.SchedulerThreadFactory(this.getClass().getSimpleName()));
 
         List<CompletableFuture> completableFutures = new ArrayList<>();
         for (int i = 0; i < parallelThreads; i++) {

File: mockserver-core/src/main/java/org/mockserver/persistence/ExpectationFileSystemPersistence.java
Patch:
@@ -33,7 +33,7 @@ public class ExpectationFileSystemPersistence implements MockServerMatcherListen
     private final MockServerLogger mockServerLogger;
     private final Path filePath;
     private final boolean initializationPathMatchesPersistencePath;
-    private final static ReentrantLock FILE_WRITE_LOCK = new ReentrantLock();
+    private final ReentrantLock fileWriteLock = new ReentrantLock();
     private final MockServerMatcher mockServerMatcher;
 
     public ExpectationFileSystemPersistence(MockServerLogger mockServerLogger, MockServerMatcher mockServerMatcher) {
@@ -75,7 +75,7 @@ public ExpectationFileSystemPersistence(MockServerLogger mockServerLogger, MockS
     public void updated(MockServerMatcher mockServerLog, MockServerMatcherNotifier.Cause cause) {
         // ignore non-API changes from the same file
         if (cause == MockServerMatcherNotifier.Cause.API || !initializationPathMatchesPersistencePath) {
-            FILE_WRITE_LOCK.lock();
+            fileWriteLock.lock();
             try {
                 try {
                     try (
@@ -103,7 +103,7 @@ public void updated(MockServerMatcher mockServerLog, MockServerMatcherNotifier.C
                     );
                 }
             } finally {
-                FILE_WRITE_LOCK.unlock();
+                fileWriteLock.unlock();
             }
         }
     }

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/BookService.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.examples.proxy.service;
 
 import org.mockserver.examples.proxy.model.Book;
-import org.mockserver.examples.proxy.service.googleclient.BookServiceGoogleHttpClient;
+import org.mockserver.examples.proxy.service.googleclient.http.BookServiceGoogleHttpClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/googleclient/http/BookServiceGoogleHttpClient.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.service.googleclient;
+package org.mockserver.examples.proxy.service.googleclient.http;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.api.client.http.*;
@@ -43,7 +43,7 @@ private HttpResponse sendRequestViaProxy(URL url, String method, @Nullable HttpC
             ProxySelector.setDefault(new ProxySelector() {
                 @Override
                 public List<Proxy> select(URI uri) {
-                    return Collections.singletonList(new Proxy(Proxy.Type.valueOf(System.getProperty("http.proxyType")), new InetSocketAddress(System.getProperty("http.proxyHost"), Integer.parseInt(System.getProperty("http.proxyPort")))));
+                    return Collections.singletonList(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(System.getProperty("http.proxyHost"), Integer.parseInt(System.getProperty("http.proxyPort")))));
                 }
 
                 @Override

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/googleclient/http/GoogleHttpClientConfigurationHttpProxy.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.service.googleclient;
+package org.mockserver.examples.proxy.service.googleclient.http;
 
 import org.mockserver.examples.proxy.service.BookService;
 import org.springframework.context.annotation.Bean;
@@ -12,9 +12,9 @@
  * @author jamesdbloom
  */
 @Configuration
-@Profile("googleClient")
+@Profile("googleClientHttpProxy")
 @PropertySource({"classpath:application.properties"})
-public class GoogleHttpClientConfiguration {
+public class GoogleHttpClientConfigurationHttpProxy {
 
     @Bean
     BookService bookService() {

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/javaclient/http/BookServiceJavaHttpClient.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.service.javaclient;
+package org.mockserver.examples.proxy.service.javaclient.http;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.mockserver.examples.proxy.model.Book;
@@ -36,7 +36,7 @@ private void initialise() {
     }
 
     private HttpURLConnection sendRequestViaProxy(URL url) throws IOException {
-        Proxy proxy = new Proxy(Proxy.Type.valueOf(System.getProperty("http.proxyType")), new InetSocketAddress(System.getProperty("http.proxyHost"), Integer.parseInt(System.getProperty("http.proxyPort"))));
+        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(System.getProperty("http.proxyHost"), Integer.parseInt(System.getProperty("http.proxyPort"))));
         return (HttpURLConnection) url.openConnection(proxy);
     }
 

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/service/javaclient/http/JavaHttpClientConfigurationHttpProxy.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.examples.proxy.service.javaclient;
+package org.mockserver.examples.proxy.service.javaclient.http;
 
 import org.mockserver.examples.proxy.service.BookService;
 import org.springframework.context.annotation.Bean;
@@ -12,9 +12,9 @@
  * @author jamesdbloom
  */
 @Configuration
-@Profile("javaClient")
+@Profile("javaClientHttpProxy")
 @PropertySource({"classpath:application.properties"})
-public class JavaHttpClientConfiguration {
+public class JavaHttpClientConfigurationHttpProxy {
 
     @Bean
     BookService bookService() {

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -90,6 +90,8 @@ private HttpClient createHttpClient() {
 
     public abstract int getProxyPort();
 
+    public abstract int getSecureProxyPort();
+
     public abstract MockServerClient getMockServerClient();
 
     public abstract int getServerPort();

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -76,7 +76,7 @@ private KeyStore saveCertificateAsKeyStore(KeyStore existingKeyStore, boolean de
             KeyStore keyStore = existingKeyStore;
             if (keyStore == null) {
                 // create new key store
-                keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
+                keyStore = KeyStore.getInstance(ConfigurationProperties.javaKeyStoreType());
                 keyStore.load(null, keyStorePassword);
             }
 
@@ -160,7 +160,7 @@ public KeyStore loadOrCreateKeyStore() {
         File keyStoreFile = new File(ConfigurationProperties.javaKeyStoreFilePath());
         if (keyStoreFile.exists()) {
             try (FileInputStream fileInputStream = new FileInputStream(keyStoreFile)) {
-                keystore = KeyStore.getInstance(KeyStore.getDefaultType());
+                keystore = KeyStore.getInstance(ConfigurationProperties.javaKeyStoreType());
                 keystore.load(fileInputStream, ConfigurationProperties.javaKeyStorePassword().toCharArray());
             } catch (Exception e) {
                 throw new RuntimeException("Exception while loading KeyStore from " + keyStoreFile.getAbsolutePath(), e);

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -240,7 +240,7 @@ public void processAction(final HttpRequest request, final ResponseWriter respon
                                 new LogEntry()
                                     .setType(LogEntry.LogMessageType.TRACE)
                                     .setLogLevel(TRACE)
-                                    .setMessageFormat("Failed to connect to proxied socket due to exploratory HTTP proxy for: {}falling back to no proxy: {}")
+                                    .setMessageFormat("Failed to connect to proxied socket due to exploratory HTTP proxy for: {}due to: {} falling back to no proxy")
                                     .setArguments(request, ex.getCause())
                             );
                             returnNotFound(responseWriter, request);

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -153,7 +153,7 @@ private static Map<String, String> getSLF4JOrJavaLoggerToSLF4JLevelMapping() {
                 .put("DEBUG", "DEBUG")
                 .put("WARN", "WARN")
                 .put("ERROR", "ERROR")
-                .put("OFF", "OFF")
+                .put("OFF", "ERROR")
                 .build();
         }
         return slf4jOrJavaLoggerToSLF4JLevelMapping;

File: mockserver-netty/src/main/java/org/mockserver/integration/ClientAndServer.java
Patch:
@@ -50,7 +50,7 @@ public boolean hasStarted() {
     @Override
     public void stop() {
         mockServer.stop();
-        stop(true);
+        super.stop();
     }
 
     /**

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -47,7 +47,7 @@ public class ConfigurationProperties {
     private static final String DEFAULT_ENABLE_CORS_FOR_API = "false";
     private static final String DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES = "false";
     private static final String DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE = "false";
-    private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = Math.max(15, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
+    private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = Math.max(20, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
     private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = "org/mockserver/socket/CertificateAuthorityPrivateKey.pem";
     private static final String DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = "org/mockserver/socket/CertificateAuthorityCertificate.pem";
     private static final String DEFAULT_CORS_ALLOW_HEADERS = "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization";

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -53,7 +53,7 @@ public void restoreProperties() throws IOException {
     public void shouldSetAndReadNIOEventLoopThreadCount() {
         // given
         System.clearProperty("mockserver.nioEventLoopThreadCount");
-        int eventLoopCount = Math.max(10, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
+        int eventLoopCount = Math.max(20, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
 
         // when
         assertEquals(eventLoopCount, ConfigurationProperties.nioEventLoopThreadCount());
@@ -68,7 +68,7 @@ public void shouldSetAndReadNIOEventLoopThreadCount() {
     public void shouldHandleInvalidNIOEventLoopThreadCount() {
         // given
         System.setProperty("mockserver.nioEventLoopThreadCount", "invalid");
-        int eventLoopCount = Math.max(10, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
+        int eventLoopCount = Math.max(20, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
 
         // then
         assertEquals(eventLoopCount, ConfigurationProperties.nioEventLoopThreadCount());

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -53,7 +53,7 @@ public void restoreProperties() throws IOException {
     public void shouldSetAndReadNIOEventLoopThreadCount() {
         // given
         System.clearProperty("mockserver.nioEventLoopThreadCount");
-        int eventLoopCount = Math.max(1, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors() * 5));
+        int eventLoopCount = Math.max(10, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
 
         // when
         assertEquals(eventLoopCount, ConfigurationProperties.nioEventLoopThreadCount());
@@ -68,7 +68,7 @@ public void shouldSetAndReadNIOEventLoopThreadCount() {
     public void shouldHandleInvalidNIOEventLoopThreadCount() {
         // given
         System.setProperty("mockserver.nioEventLoopThreadCount", "invalid");
-        int eventLoopCount = Math.max(1, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors() * 5));
+        int eventLoopCount = Math.max(10, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
 
         // then
         assertEquals(eventLoopCount, ConfigurationProperties.nioEventLoopThreadCount());

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -47,7 +47,7 @@ public class ConfigurationProperties {
     private static final String DEFAULT_ENABLE_CORS_FOR_API = "false";
     private static final String DEFAULT_ENABLE_CORS_FOR_ALL_RESPONSES = "false";
     private static final String DEFAULT_PREVENT_CERTIFICATE_DYNAMIC_UPDATE = "false";
-    private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = Math.max(1, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors() * 5));
+    private static final int DEFAULT_NIO_EVENT_LOOP_THREAD_COUNT = Math.max(10, SystemPropertyUtil.getInt("io.netty.eventLoopThreads", NettyRuntime.availableProcessors()));
     private static final String DEFAULT_CERTIFICATE_AUTHORITY_PRIVATE_KEY = "org/mockserver/socket/CertificateAuthorityPrivateKey.pem";
     private static final String DEFAULT_CERTIFICATE_AUTHORITY_X509_CERTIFICATE = "org/mockserver/socket/CertificateAuthorityCertificate.pem";
     private static final String DEFAULT_CORS_ALLOW_HEADERS = "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary, Authorization";
@@ -159,8 +159,8 @@ private static Map<String, String> getSLF4JOrJavaLoggerToSLF4JLevelMapping() {
         return slf4jOrJavaLoggerToSLF4JLevelMapping;
     }
 
-    private static Level logLevel = Level.valueOf(DEFAULT_LOG_LEVEL);
-    private static String javaLoggerLogLevel = DEFAULT_LOG_LEVEL;
+    private static Level logLevel = Level.valueOf(getSLF4JOrJavaLoggerToSLF4JLevelMapping().get(readPropertyHierarchically(MOCKSERVER_LOG_LEVEL, "MOCKSERVER_LOG_LEVEL", DEFAULT_LOG_LEVEL).toUpperCase()));
+    private static String javaLoggerLogLevel = getSLF4JOrJavaLoggerToJavaLoggerLevelMapping().get(readPropertyHierarchically(MOCKSERVER_LOG_LEVEL, "MOCKSERVER_LOG_LEVEL", DEFAULT_LOG_LEVEL).toUpperCase());
     private static boolean metricsEnabled = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_METRICS_ENABLED, "MOCKSERVER_METRICS_ENABLED", "" + false));
     private static boolean disableSystemOut = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_DISABLE_SYSTEM_OUT, "MOCKSERVER_DISABLE_SYSTEM_OUT", "" + false));
     private static boolean enableCORSForAPI = Boolean.parseBoolean(readPropertyHierarchically(MOCKSERVER_ENABLE_CORS_FOR_API, "MOCKSERVER_ENABLE_CORS_FOR_API", DEFAULT_ENABLE_CORS_FOR_API));

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -64,7 +64,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
             }
 
             // set hop-by-hop headers
-            final int length = httpResponse.getBodyAsString() != null ? httpResponse.getBodyAsString().length() : 0;
+            final int length = httpResponse.getBody() != null ? httpResponse.getBody().getRawBytes().length : 0;
             if (error == EchoServer.Error.LARGER_CONTENT_LENGTH) {
                 httpResponse.replaceHeader(CONTENT_LENGTH.toString(), String.valueOf(length * 2));
             } else if (error == EchoServer.Error.SMALLER_CONTENT_LENGTH) {

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -15,7 +15,7 @@
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.log.model.LogEntry.LogMessageType.EXPECTATION_MATCHED;
 import static org.mockserver.log.model.LogEntry.LogMessageType.EXPECTATION_NOT_MATCHED;
-import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 import static org.mockserver.model.NottableString.string;
 
 /**

File: mockserver-core/src/main/java/org/mockserver/model/HttpObject.java
Patch:
@@ -40,6 +40,8 @@ public interface HttpObject<T extends HttpObject, B extends Body> {
 
     T withHeader(NottableString name, NottableString... values);
 
+    T withContentType(MediaType mediaType);
+
     T replaceHeader(Header header);
 
     List<Header> getHeaderList();

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.nio.charset.Charset;
 
-import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/main/java/org/mockserver/model/StringBody.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.nio.charset.Charset;
 
-import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/main/java/org/mockserver/model/XmlBody.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.nio.charset.Charset;
 
-import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/collections/hashmap/CaseInsensitiveRegexHashMapTestKeysAndValue.java
Patch:
@@ -61,6 +61,7 @@ public void shouldReturnValuesForMapWithMultipleEntries() {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldReturnEntrySet() {
         // given
         CaseInsensitiveRegexHashMap hashMap = hashMap(

File: mockserver-core/src/test/java/org/mockserver/collections/multimap/CaseInsensitiveRegexMultiMapTestKeysAndValue.java
Patch:
@@ -39,6 +39,7 @@ public void shouldReturnValues() {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldReturnEntrySet() {
         // given
         CaseInsensitiveRegexMultiMap multiMap = multiMap(
@@ -55,6 +56,7 @@ public void shouldReturnEntrySet() {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldReturnEntryList() {
         // given
         CaseInsensitiveRegexMultiMap multiMap = multiMap(

File: mockserver-core/src/test/java/org/mockserver/mappers/HttpServletRequestToMockServerRequestDecoderTest.java
Patch:
@@ -32,6 +32,7 @@ public void shouldMapHttpServletRequestToHttpRequest() {
         httpServletRequest.addHeader("headerName1", "headerValue1_1");
         httpServletRequest.addHeader("headerName1", "headerValue1_2");
         httpServletRequest.addHeader("headerName2", "headerValue2");
+        httpServletRequest.addHeader("Content-Type", "multipart/form-data");
         httpServletRequest.setCookies(new javax.servlet.http.Cookie("cookieName1", "cookieValue1"), new javax.servlet.http.Cookie("cookieName2", "cookieValue2"));
         httpServletRequest.setContent("bodyParameterNameOne=bodyParameterValueOne_One&bodyParameterNameOne=bodyParameterValueOne_Two&bodyParameterNameTwo=bodyParameterValueTwo_One".getBytes(UTF_8));
 
@@ -52,6 +53,7 @@ public void shouldMapHttpServletRequestToHttpRequest() {
         assertEquals(Lists.newArrayList(
             new Header("headerName1", "headerValue1_1", "headerValue1_2"),
             new Header("headerName2", "headerValue2"),
+            new Header("Content-Type", "multipart/form-data"),
             new Header("Cookie", "cookieName1=cookieValue1; cookieName2=cookieValue2")
         ), httpRequest.getHeaderList());
         assertEquals(Lists.newArrayList(

File: mockserver-core/src/test/java/org/mockserver/matchers/MatcherBuilderTest.java
Patch:
@@ -18,7 +18,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
-import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/mock/action/ActionHandlerTest.java
Patch:
@@ -207,7 +207,6 @@ public void shouldHandleResponseTemplateActionException() {
         // then
         verify(mockHttpResponseTemplateActionHandler).handle(template, request);
         verify(mockResponseWriter).writeResponse(request, notFoundResponse(), false);
-        InetSocketAddress remoteAddress = httpForwardActionResult.getRemoteAddress();
         verify(mockServerLogger).logEvent(
             new LogEntry()
                 .setType(RECEIVED_REQUEST)
@@ -378,7 +377,6 @@ public void shouldHandleForwardTemplateActionException() {
         // then
         verify(mockHttpForwardTemplateActionHandler).handle(template, request);
         verify(mockResponseWriter).writeResponse(request, notFoundResponse(), false);
-        InetSocketAddress remoteAddress = httpForwardActionResult.getRemoteAddress();
         verify(mockServerLogger).logEvent(
             new LogEntry()
                 .setType(RECEIVED_REQUEST)
@@ -533,6 +531,7 @@ public void shouldProcessErrorAction() {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void shouldProxyRequestsWithRemoteSocketAttribute() {
         // given
         HttpRequest request = request("request_one");

File: mockserver-core/src/test/java/org/mockserver/serialization/model/StringBodyDTOTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.Is.is;
-import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
+import static org.mockserver.model.MediaType.DEFAULT_HTTP_CHARACTER_SET;
 import static org.mockserver.model.StringBody.exact;
 import static org.mockserver.model.StringBody.subString;
 

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/AbstractExtendedNettyMockingIntegrationTest.java
Patch:
@@ -808,7 +808,7 @@ public void shouldReturnResponseWithConnectionOptionsAndKeepAliveTrueAndContentL
                 .withHeader(CONTENT_TYPE.toString(), MediaType.ANY_AUDIO_TYPE.toString())
                 .withStatusCode(OK_200.code())
                 .withReasonPhrase(OK_200.reasonPhrase())
-                .withBody(binary("some_lo".getBytes(UTF_8))),
+                .withBody(binary("some_lo".getBytes(UTF_8), MediaType.ANY_AUDIO_TYPE)),
             makeRequest(
                 request()
                     .withPath(calculatePath("")),
@@ -822,7 +822,7 @@ public void shouldReturnResponseWithConnectionOptionsAndKeepAliveTrueAndContentL
                 .withHeader(CONTENT_TYPE.toString(), MediaType.ANY_AUDIO_TYPE.toString())
                 .withStatusCode(OK_200.code())
                 .withReasonPhrase(OK_200.reasonPhrase())
-                .withBody(binary("some_lo".getBytes(UTF_8))),
+                .withBody(binary("some_lo".getBytes(UTF_8), MediaType.ANY_AUDIO_TYPE)),
             makeRequest(
                 request()
                     .withSecure(true)

File: mockserver-core/src/main/java/org/mockserver/mock/action/ExpectationForwardCallback.java
Patch:
@@ -16,7 +16,9 @@ public interface ExpectationForwardCallback extends ExpectationCallback<HttpRequ
      * @param httpRequest the request that satisfied the expectation condition
      * @return the request that will be proxied
      */
-    HttpRequest handle(HttpRequest httpRequest) throws Exception;
+    default HttpRequest handle(HttpRequest httpRequest) throws Exception {
+        return httpRequest;
+    }
 
     /**
      * Called for every response received from a proxied request, the return

File: mockserver-core/src/main/java/org/mockserver/client/HttpClientInitializer.java
Patch:
@@ -25,14 +25,15 @@
 public class HttpClientInitializer extends ChannelInitializer<SocketChannel> {
 
     private final MockServerLogger mockServerLogger;
-    private final HttpClientConnectionHandler httpClientConnectionHandler = new HttpClientConnectionHandler();
+    private final HttpClientConnectionHandler httpClientConnectionHandler;
     private final HttpClientHandler httpClientHandler;
     private final ProxyConfiguration proxyConfiguration;
 
     HttpClientInitializer(ProxyConfiguration proxyConfiguration, MockServerLogger mockServerLogger) {
         this.proxyConfiguration = proxyConfiguration;
         this.mockServerLogger = mockServerLogger;
         this.httpClientHandler = new HttpClientHandler();
+        this.httpClientConnectionHandler = new HttpClientConnectionHandler(mockServerLogger);
     }
 
     @Override

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -396,7 +396,7 @@ public void shouldAuthenticateConnectRequestWhenClientConfiguredWithProxyConfigu
                         .withSecure(true)
                         .withHeader(HOST.toString(), "localhost:" + getServerSecurePort())
                 )
-                .get(10, MINUTES);
+                .get(10, SECONDS);
 
             assertThat(httpResponse.getStatusCode(), is(200));
 
@@ -420,7 +420,7 @@ public void shouldConnectInHTTPSAndForceRequestToHTTPS() throws Exception {
                     .withPath("/target")
                     .withHeader(HOST.toString(), "localhost:" + getServerSecurePort())
             )
-            .get(10, MINUTES);
+            .get(10, SECONDS);
 
         assertThat(httpResponse.getStatusCode(), is(200));
     }

File: mockserver-netty/src/test/java/org/mockserver/integration/proxy/http/HttpProxyChainedIntegrationTest.java
Patch:
@@ -81,7 +81,6 @@ public void shouldAuthenticateForwardHTTPConnect() throws Exception {
                     new InetSocketAddress(proxyClientAndServer.getLocalPort())
                 )
                 .get(10, SECONDS);
-            System.out.println("httpResponse = " + httpResponse);
 
             // and - both proxy and target verify request received
             proxyClientAndServer.verify(request().withPath("/target"));
@@ -121,7 +120,6 @@ public void shouldForwardHTTPConnect() throws Exception {
                     new InetSocketAddress(proxyClientAndServer.getLocalPort())
                 )
                 .get(10, SECONDS);
-            System.out.println("httpResponse = " + httpResponse);
 
             // and - both proxy and target verify request received
             proxyClientAndServer.verify(request().withPath("/target"));

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerClientCodec.java
Patch:
@@ -3,9 +3,9 @@
 import io.netty.channel.CombinedChannelDuplexHandler;
 import org.mockserver.logging.MockServerLogger;
 
-public class MockServerClientCodec extends CombinedChannelDuplexHandler<MockServerResponseDecoder, MockServerRequestEncoder> {
+public class MockServerClientCodec extends CombinedChannelDuplexHandler<NettyToMockServerResponseDecoder, MockServerToNettyRequestEncoder> {
 
     public MockServerClientCodec(MockServerLogger mockServerLogger) {
-        init(new MockServerResponseDecoder(mockServerLogger), new MockServerRequestEncoder(mockServerLogger));
+        init(new NettyToMockServerResponseDecoder(mockServerLogger), new MockServerToNettyRequestEncoder(mockServerLogger));
     }
 }

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerServerCodec.java
Patch:
@@ -6,8 +6,8 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerServerCodec extends CombinedChannelDuplexHandler<MockServerRequestDecoder, MockServerResponseEncoder> {
+public class MockServerServerCodec extends CombinedChannelDuplexHandler<NettyToMockServerRequestDecoder, MockServerToNettyResponseEncoder> {
     public MockServerServerCodec(MockServerLogger mockServerLogger, boolean isSecure) {
-        init(new MockServerRequestDecoder(mockServerLogger, isSecure), new MockServerResponseEncoder(mockServerLogger));
+        init(new NettyToMockServerRequestDecoder(mockServerLogger, isSecure), new MockServerToNettyResponseEncoder(mockServerLogger));
     }
 }

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerToNettyRequestEncoder.java
Patch:
@@ -11,17 +11,17 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerRequestEncoder extends MessageToMessageEncoder<HttpRequest> {
+public class MockServerToNettyRequestEncoder extends MessageToMessageEncoder<HttpRequest> {
 
     private final MockServerLogger mockServerLogger;
 
-    MockServerRequestEncoder(MockServerLogger mockServerLogger) {
+    MockServerToNettyRequestEncoder(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
     }
 
     @Override
     protected void encode(ChannelHandlerContext ctx, HttpRequest httpRequest, List<Object> out) {
-        out.add(new MockServerHttpRequestToFullHttpRequest(mockServerLogger).mapMockServerResponseToHttpServletResponse(httpRequest));
+        out.add(new MockServerHttpRequestToFullHttpRequest(mockServerLogger).mapMockServerResquestToNettyRequest(httpRequest));
     }
 
 }

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerToNettyResponseEncoder.java
Patch:
@@ -29,13 +29,13 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerResponseEncoder extends MessageToMessageEncoder<HttpResponse> {
+public class MockServerToNettyResponseEncoder extends MessageToMessageEncoder<HttpResponse> {
 
     private final MockServerLogger mockServerLogger;
     private final BodyDecoderEncoder bodyDecoderEncoder;
     private final ContentTypeMapper contentTypeMapper;
 
-    public MockServerResponseEncoder(MockServerLogger mockServerLogger) {
+    public MockServerToNettyResponseEncoder(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
         this.bodyDecoderEncoder = new BodyDecoderEncoder(mockServerLogger);
         this.contentTypeMapper = new ContentTypeMapper(mockServerLogger);

File: mockserver-core/src/main/java/org/mockserver/codec/NettyToMockServerRequestDecoder.java
Patch:
@@ -25,13 +25,13 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerRequestDecoder extends MessageToMessageDecoder<FullHttpRequest> {
+public class NettyToMockServerRequestDecoder extends MessageToMessageDecoder<FullHttpRequest> {
 
     private final MockServerLogger mockServerLogger;
     private final boolean isSecure;
     private final BodyDecoderEncoder bodyDecoderEncoder;
 
-    public MockServerRequestDecoder(MockServerLogger mockServerLogger, boolean isSecure) {
+    public NettyToMockServerRequestDecoder(MockServerLogger mockServerLogger, boolean isSecure) {
         this.mockServerLogger = mockServerLogger;
         this.isSecure = isSecure;
         this.bodyDecoderEncoder = new BodyDecoderEncoder(mockServerLogger);

File: mockserver-core/src/main/java/org/mockserver/codec/NettyToMockServerResponseDecoder.java
Patch:
@@ -11,11 +11,11 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerResponseDecoder extends MessageToMessageDecoder<FullHttpResponse> {
+public class NettyToMockServerResponseDecoder extends MessageToMessageDecoder<FullHttpResponse> {
 
     private final MockServerLogger mockServerLogger;
 
-    MockServerResponseDecoder(MockServerLogger mockServerLogger) {
+    NettyToMockServerResponseDecoder(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
     }
 

File: mockserver-core/src/main/java/org/mockserver/codec/mappers/MockServerHttpRequestToFullHttpRequest.java
Patch:
@@ -33,7 +33,7 @@ public MockServerHttpRequestToFullHttpRequest(MockServerLogger mockServerLogger)
         this.bodyDecoderEncoder = new BodyDecoderEncoder(mockServerLogger);
     }
 
-    public FullHttpRequest mapMockServerResponseToHttpServletResponse(HttpRequest httpRequest) {
+    public FullHttpRequest mapMockServerResquestToNettyRequest(HttpRequest httpRequest) {
         // method
         HttpMethod httpMethod = HttpMethod.valueOf(httpRequest.getMethod("GET"));
         try {

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -4,7 +4,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.http.DefaultFullHttpResponse;
-import org.mockserver.codec.MockServerResponseEncoder;
+import org.mockserver.codec.MockServerToNettyResponseEncoder;
 import org.mockserver.log.MockServerEventLog;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
@@ -49,7 +49,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
 
         if (!nextResponse.httpResponse.isEmpty()) {
             // WARNING: this logic is only for unit tests that run in series and is NOT thread safe!!!
-            DefaultFullHttpResponse httpResponse = new MockServerResponseEncoder(mockServerLogger).encode(nextResponse.httpResponse.remove());
+            DefaultFullHttpResponse httpResponse = new MockServerToNettyResponseEncoder(mockServerLogger).encode(nextResponse.httpResponse.remove());
             ctx.writeAndFlush(httpResponse);
         } else {
             HttpResponse httpResponse =

File: mockserver-core/src/main/java/org/mockserver/model/BodyWithContentType.java
Patch:
@@ -17,9 +17,9 @@ public BodyWithContentType(Type type, MediaType contentType) {
     }
 
     @JsonIgnore
-    Charset determineCharacterSet(MediaType contentType, Charset defaultCharset) {
-        if (contentType != null) {
-            Charset charset = contentType.getCharset();
+    Charset determineCharacterSet(MediaType mediaType, Charset defaultCharset) {
+        if (mediaType != null) {
+            Charset charset = mediaType.getCharset();
             if (charset != null) {
                 return charset;
             }

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerRequestDecoderTest.java
Patch:
@@ -32,13 +32,13 @@
  */
 public class MockServerRequestDecoderTest {
 
-    private MockServerRequestDecoder mockServerRequestDecoder;
+    private NettyToMockServerRequestDecoder mockServerRequestDecoder;
     private List<Object> output;
     private FullHttpRequest fullHttpRequest;
 
     @Before
     public void setupFixture() {
-        mockServerRequestDecoder = new MockServerRequestDecoder(new MockServerLogger(), false);
+        mockServerRequestDecoder = new NettyToMockServerRequestDecoder(new MockServerLogger(), false);
         output = new ArrayList<>();
     }
 

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseDecoderTest.java
Patch:
@@ -29,13 +29,13 @@
  */
 public class MockServerResponseDecoderTest {
 
-    private MockServerResponseDecoder mockServerResponseDecoder;
+    private NettyToMockServerResponseDecoder mockServerResponseDecoder;
     private List<Object> output;
     private FullHttpResponse fullHttpResponse;
 
     @Before
     public void setupFixture() {
-        mockServerResponseDecoder = new MockServerResponseDecoder(new MockServerLogger());
+        mockServerResponseDecoder = new NettyToMockServerResponseDecoder(new MockServerLogger());
         output = new ArrayList<>();
     }
 

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseEncoderContentLengthTest.java
Patch:
@@ -25,13 +25,13 @@
  */
 public class MockServerResponseEncoderContentLengthTest {
 
-    private MockServerResponseEncoder mockServerResponseEncoder;
+    private MockServerToNettyResponseEncoder mockServerResponseEncoder;
     private List<Object> output;
     private HttpResponse httpResponse;
 
     @Before
     public void setupFixture() {
-        mockServerResponseEncoder = new MockServerResponseEncoder(new MockServerLogger());
+        mockServerResponseEncoder = new MockServerToNettyResponseEncoder(new MockServerLogger());
         output = new ArrayList<Object>();
         httpResponse = response();
     }

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseEncoderCookieHeaderTest.java
Patch:
@@ -24,13 +24,13 @@
  */
 public class MockServerResponseEncoderCookieHeaderTest {
 
-    private MockServerResponseEncoder mockServerResponseEncoder;
+    private MockServerToNettyResponseEncoder mockServerResponseEncoder;
     private List<Object> output;
     private HttpResponse httpResponse;
 
     @Before
     public void setupFixture() {
-        mockServerResponseEncoder = new MockServerResponseEncoder(new MockServerLogger());
+        mockServerResponseEncoder = new MockServerToNettyResponseEncoder(new MockServerLogger());
         output = new ArrayList<Object>();
         httpResponse = response();
     }

File: mockserver-core/src/test/java/org/mockserver/matchers/MatcherBuilderTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Test;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
-import org.mockserver.codec.MockServerRequestDecoder;
+import org.mockserver.codec.NettyToMockServerRequestDecoder;
 
 import static com.google.common.net.MediaType.PLAIN_TEXT_UTF_8;
 import static io.netty.buffer.Unpooled.wrappedBuffer;
@@ -53,7 +53,7 @@ public void shouldSupportSpecialCharactersWhenCharsetSpecified() {
         String bodyTestString = "UTF_8 characters: Bj\u00F6rk";
 
         // given
-        MockServerRequestDecoder mockServerRequestDecoder = new MockServerRequestDecoder(mockServerLogger, false);
+        NettyToMockServerRequestDecoder mockServerRequestDecoder = new NettyToMockServerRequestDecoder(mockServerLogger, false);
         FullHttpRequest fullHttpRequest = new DefaultFullHttpRequest(
             HTTP_1_1,
             GET,
@@ -82,7 +82,7 @@ public void shouldSupportSpecialCharactersWithDefaultCharset() {
         String bodyTestString = "UTF_8 characters: Bj\u00F6rk";
 
         // given
-        MockServerRequestDecoder mockServerRequestDecoder = new MockServerRequestDecoder(mockServerLogger, false);
+        NettyToMockServerRequestDecoder mockServerRequestDecoder = new NettyToMockServerRequestDecoder(mockServerLogger, false);
         FullHttpRequest fullHttpRequest = new DefaultFullHttpRequest(
             HTTP_1_1,
             GET,

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractExtendedMockingIntegrationTest.java
Patch:
@@ -1228,7 +1228,7 @@ public void shouldReturnResponseByMatchingBodyWithJsonAsRawBody() {
                 .withStatusCode(OK_200.code())
                 .withReasonPhrase(OK_200.reasonPhrase())
                 .withHeader(CONTENT_TYPE.toString(), MediaType.create("application", "json").toString())
-                .withBody(exact("{\"id\":1,\"name\":\"A green door\",\"price\":12.5,\"tags\":[\"home\",\"green\"]}", MediaType.create("application", "json"))),
+                .withBody(json("{\"id\":1,\"name\":\"A green door\",\"price\":12.5,\"tags\":[\"home\",\"green\"]}", (MediaType) null)),
             makeRequest(
                 request()
                     .withPath(calculatePath("some_path"))

File: mockserver-core/src/main/java/org/mockserver/socket/tls/NettySslContextFactory.java
Patch:
@@ -19,7 +19,7 @@ public class NettySslContextFactory {
 
     public NettySslContextFactory(MockServerLogger mockServerLogger) {
         keyAndCertificateFactory = new KeyAndCertificateFactory(mockServerLogger);
-        System.setProperty("https.protocols", "SSLv3,TLSv1,TLSv1.1,TLSv1.2,TLSv1.3");
+        System.setProperty("https.protocols", "SSLv3,TLSv1,TLSv1.1,TLSv1.2");
     }
 
     public synchronized SslContext createClientSslContext() {

File: mockserver-core/src/main/java/org/mockserver/serialization/serializers/string/NottableStringSerializer.java
Patch:
@@ -22,4 +22,5 @@ public NottableStringSerializer() {
     public void serialize(NottableString nottableString, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         jgen.writeString(serialiseNottableString(nottableString));
     }
+
 }

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -109,8 +109,6 @@ public static void main(String... arguments) {
                 showUsage();
             }
 
-        } catch (IllegalArgumentException iae) {
-            showUsage();
         } catch (Throwable throwable) {
             MOCK_SERVER_LOGGER.logEvent(
                 new LogEntry()
@@ -119,6 +117,7 @@ public static void main(String... arguments) {
                     .setMessageFormat("Exception while starting: {}")
                     .setThrowable(throwable)
             );
+            showUsage();
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/model/MediaType.java
Patch:
@@ -87,7 +87,7 @@ private static TreeMap<String, String> createParametersMap(Map<String, String> i
         final TreeMap<String, String> map = new TreeMap<>(String::compareToIgnoreCase);
         if (initialValues != null) {
             for (Map.Entry<String, String> entry : initialValues.entrySet()) {
-                map.put(entry.getKey().toLowerCase(), entry.getValue());
+                map.put(entry.getKey().toLowerCase().trim(), entry.getValue().trim());
             }
         }
         return map;
@@ -192,7 +192,7 @@ public String toString() {
             if (stringBuilder.length() > 0) {
                 stringBuilder.append(PARAMETER_START).append(' ');
             }
-            stringBuilder.append(Joiner.on(";").withKeyValueSeparator("=").join(parameters));
+            stringBuilder.append(Joiner.on("; ").withKeyValueSeparator("=").join(parameters));
         }
         return stringBuilder.toString();
     }

File: mockserver-core/src/test/java/org/mockserver/model/MediaTypeTest.java
Patch:
@@ -157,7 +157,7 @@ public void shouldSupportAdditionParameters() {
     public void shouldSerialiseToStringWithAdditionParameters() {
         assertThat(new MediaType("application", "soap+xml", ImmutableMap.of(
             "action", "somerandomstuff"
-        )).withCharset(StandardCharsets.UTF_8).toString(), is("application/soap+xml; action=somerandomstuff;charset=utf-8"));
+        )).withCharset(StandardCharsets.UTF_8).toString(), is("application/soap+xml; action=somerandomstuff; charset=utf-8"));
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/model/BinaryBody.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
 import org.mockserver.serialization.Base64Converter;
 
 /**

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.google.common.collect.Multimap;
-import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.cookie.ClientCookieDecoder;
 
 import java.nio.charset.Charset;

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.model;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.mockserver.matchers.MatchType;
 import org.mockserver.serialization.ObjectMapperFactory;
 

File: mockserver-core/src/main/java/org/mockserver/model/ParameterBody.java
Patch:
@@ -1,7 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
-
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;

File: mockserver-core/src/main/java/org/mockserver/model/StringBody.java
Patch:
@@ -1,7 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
-
 import java.nio.charset.Charset;
 
 import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;

File: mockserver-core/src/main/java/org/mockserver/model/XmlBody.java
Patch:
@@ -1,7 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
-
 import java.nio.charset.Charset;
 
 import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;

File: mockserver-core/src/main/java/org/mockserver/serialization/model/BodyWithContentTypeDTO.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.serialization.model;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
-import com.google.common.net.MediaType;
 import org.mockserver.model.*;
 
 /**

File: mockserver-core/src/main/java/org/mockserver/serialization/model/JsonBodyDTO.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization.model;
 
-import com.google.common.net.MediaType;
 import org.mockserver.matchers.MatchType;
 import org.mockserver.model.Body;
 import org.mockserver.model.JsonBody;

File: mockserver-core/src/main/java/org/mockserver/serialization/model/StringBodyDTO.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization.model;
 
-import com.google.common.net.MediaType;
 import org.mockserver.model.StringBody;
 
 /**

File: mockserver-core/src/main/java/org/mockserver/serialization/model/XmlBodyDTO.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization.model;
 
-import com.google.common.net.MediaType;
 import org.mockserver.model.Body;
 import org.mockserver.model.XmlBody;
 

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerRequestDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.codec;
 
-import com.google.common.net.MediaType;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.DefaultFullHttpRequest;
 import io.netty.handler.codec.http.FullHttpRequest;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerRequestEncoderBasicMappingTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.codec;
 
-import com.google.common.net.MediaType;
+import org.mockserver.model.MediaType;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpMethod;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerRequestEncoderContentTypeTest.java
Patch:
@@ -1,13 +1,13 @@
 package org.mockserver.codec;
 
-import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.FullHttpRequest;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mappers.ContentTypeMapper;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
+import org.mockserver.model.MediaType;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseDecoderTest.java
Patch:
@@ -1,15 +1,13 @@
 package org.mockserver.codec;
 
-import com.google.common.net.MediaType;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.*;
 import org.hamcrest.core.Is;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.model.Body;
+import org.mockserver.model.*;
 import org.mockserver.model.Cookie;
-import org.mockserver.model.Header;
 import org.mockserver.model.HttpResponse;
 
 import java.nio.charset.StandardCharsets;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseEncoderContentTypeTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.codec;
 
-import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.util.CharsetUtil;
 import org.junit.Before;
@@ -9,6 +8,7 @@
 import org.mockserver.mappers.ContentTypeMapper;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpResponse;
+import org.mockserver.model.MediaType;
 
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
@@ -54,7 +54,7 @@ public void shouldDecodeBodyWithContentTypeAndNoCharset() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.content().array(), is("avro işarəsi: \u20AC".getBytes(CharsetUtil.UTF_8)));
+        assertThat(fullHttpResponse.content().array(), is("avro işarəsi: \u20AC".getBytes(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/model/BinaryBodyTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
 import org.junit.Test;
 import org.mockserver.serialization.Base64Converter;
 

File: mockserver-core/src/test/java/org/mockserver/model/JsonBodyTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
 import org.junit.Test;
 import org.mockserver.matchers.MatchType;
 

File: mockserver-core/src/test/java/org/mockserver/model/StringBodyTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
 import org.junit.Test;
 
 import java.nio.charset.Charset;

File: mockserver-core/src/test/java/org/mockserver/model/XmlBodyTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.model;
 
-import com.google.common.net.MediaType;
 import org.junit.Test;
 
 import java.nio.charset.Charset;

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/body/BodyDTODeserializerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization.deserializers.body;
 
-import com.google.common.net.MediaType;
 import io.netty.util.CharsetUtil;
 import org.apache.commons.text.StringEscapeUtils;
 import org.junit.Test;

File: mockserver-core/src/test/java/org/mockserver/serialization/deserializers/body/BodyWithContentTypeDTODeserializerTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization.deserializers.body;
 
-import com.google.common.net.MediaType;
 import io.netty.util.CharsetUtil;
 import org.junit.Test;
 import org.mockserver.matchers.MatchType;

File: mockserver-core/src/test/java/org/mockserver/serialization/model/JsonBodyDTOTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.mockserver.serialization.model;
 
-import com.google.common.net.MediaType;
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 import org.mockserver.model.Body;
 import org.mockserver.model.JsonBody;
 import org.mockserver.model.JsonBody;
+import org.mockserver.model.MediaType;
 
 import java.nio.charset.StandardCharsets;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/model/StringBodyDTOTest.java
Patch:
@@ -1,10 +1,10 @@
 package org.mockserver.serialization.model;
 
-import com.google.common.net.MediaType;
 import io.netty.util.CharsetUtil;
 import org.apache.commons.lang3.CharSetUtils;
 import org.junit.Test;
 import org.mockserver.model.Body;
+import org.mockserver.model.MediaType;
 import org.mockserver.model.StringBody;
 
 import java.nio.charset.StandardCharsets;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/BinaryBodyDTOSerializerTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
+import org.mockserver.model.MediaType;
 import org.junit.Test;
 import org.mockserver.serialization.Base64Converter;
 import org.mockserver.serialization.ObjectMapperFactory;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/BinaryBodySerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.model.BinaryBody;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonBodyDTOSerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.serialization.model.JsonBodyDTO;
 import org.mockserver.matchers.MatchType;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/JsonBodySerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.matchers.MatchType;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/StringBodyDTOSerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.serialization.model.StringBodyDTO;
 import org.mockserver.model.StringBody;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/StringBodySerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.model.StringBody;
 

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XmlBodyDTOSerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.serialization.model.XmlBodyDTO;
 import org.mockserver.model.XmlBody;

File: mockserver-core/src/test/java/org/mockserver/serialization/serializers/body/XmlBodySerializerTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockserver.serialization.serializers.body;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.google.common.net.MediaType;
 import org.junit.Test;
+import org.mockserver.model.MediaType;
 import org.mockserver.serialization.ObjectMapperFactory;
 import org.mockserver.model.XmlBody;
 

File: mockserver-examples/src/main/java/org/mockserver/examples/mockserver/ResponseActionExamples.java
Patch:
@@ -1,11 +1,11 @@
 package org.mockserver.examples.mockserver;
 
-import com.google.common.net.MediaType;
 import org.apache.commons.io.IOUtils;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.matchers.Times;
 import org.mockserver.model.HttpStatusCode;
 import org.mockserver.model.HttpTemplate;
+import org.mockserver.model.MediaType;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/web/configuration/WebMvcConfiguration.java
Patch:
@@ -1,11 +1,11 @@
 package org.mockserver.examples.proxy.web.configuration;
 
-import com.google.common.net.MediaType;
 import freemarker.cache.ClassTemplateLoader;
 import freemarker.cache.MultiTemplateLoader;
 import freemarker.cache.TemplateLoader;
 import freemarker.template.TemplateException;
 import freemarker.template.TemplateExceptionHandler;
+import org.mockserver.model.MediaType;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractExtendedMockingIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.integration.server;
 
-import com.google.common.net.MediaType;
 import com.google.common.util.concurrent.Uninterruptibles;
 import io.netty.util.CharsetUtil;
 import org.apache.commons.io.IOUtils;

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.mockserver;
 
-import com.google.common.net.MediaType;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
@@ -13,6 +12,7 @@
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.HttpRequest;
+import org.mockserver.model.MediaType;
 import org.mockserver.model.PortBinding;
 import org.mockserver.proxy.connect.HttpConnectHandler;
 import org.mockserver.responsewriter.NettyResponseWriter;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/AbstractExtendedNettyMockingIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.integration.mocking;
 
-import com.google.common.net.MediaType;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.junit.Test;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/MultiplePortMockingIntegrationTest.java
Patch:
@@ -1,12 +1,12 @@
 package org.mockserver.integration.mocking;
 
 import com.google.common.base.Joiner;
-import com.google.common.net.MediaType;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.integration.server.AbstractBasicMockingIntegrationTest;
+import org.mockserver.model.MediaType;
 import org.mockserver.socket.PortFactory;
 
 import java.util.List;

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
+import org.mockserver.model.MediaType;
 import org.mockserver.model.RetrieveType;
 import org.mockserver.responsewriter.NettyResponseWriter;
 import org.mockserver.scheduler.Scheduler;
@@ -141,7 +142,7 @@ public void shouldClear() {
             .withMethod("PUT")
             .withBody(
                 httpRequestSerializer.serialize(request("request_one"))
-            )), is(response().withBody("[]", JSON_UTF_8).withStatusCode(200)));
+            )), is(response().withBody("[]", MediaType.JSON_UTF_8).withStatusCode(200)));
     }
 
     @Test

File: mockserver-proxy-war/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.proxy;
 
 import com.google.common.collect.ImmutableSet;
-import com.google.common.net.MediaType;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import org.mockserver.configuration.ConfigurationProperties;
@@ -12,6 +11,7 @@
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.HttpRequest;
+import org.mockserver.model.MediaType;
 import org.mockserver.responsewriter.ResponseWriter;
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.PortBindingSerializer;

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyServletTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.HttpRequest;
+import org.mockserver.model.MediaType;
 import org.mockserver.model.RetrieveType;
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.ExpectationSerializer;
@@ -140,7 +141,7 @@ public void shouldClear() {
             .withMethod("PUT")
             .withBody(
                 httpRequestSerializer.serialize(request("request_one"))
-            )), is(response().withBody("[]", JSON_UTF_8).withStatusCode(200)));
+            )), is(response().withBody("[]", MediaType.JSON_UTF_8).withStatusCode(200)));
     }
 
     @Test

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.server;
 
 import com.google.common.collect.ImmutableSet;
-import com.google.common.net.MediaType;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import org.mockserver.configuration.ConfigurationProperties;
@@ -12,6 +11,7 @@
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.HttpRequest;
+import org.mockserver.model.MediaType;
 import org.mockserver.responsewriter.ResponseWriter;
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.PortBindingSerializer;

File: mockserver-war/src/test/java/org/mockserver/server/AbstractExtendedDeployableWARMockingIntegrationTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.server;
 
-import com.google.common.net.MediaType;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -12,6 +11,7 @@
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.model.HttpStatusCode;
+import org.mockserver.model.MediaType;
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;

File: mockserver-core/src/main/java/org/mockserver/model/HttpRequest.java
Patch:
@@ -683,13 +683,13 @@ public HttpRequest update(HttpRequest replaceRequest) {
             withPath(replaceRequest.getPath());
         }
         for (Header header : replaceRequest.getHeaderList()) {
-            getHeaders().replaceEntry(header);
+            getOrCreateHeaders().replaceEntry(header);
         }
         for (Cookie cookie : replaceRequest.getCookieList()) {
             withCookie(cookie);
         }
         for (Parameter parameter : replaceRequest.getQueryStringParameterList()) {
-            getQueryStringParameters().replaceEntry(parameter);
+            getOrCreateQueryStringParameters().replaceEntry(parameter);
         }
         if (replaceRequest.getBody() != null) {
             withBody(replaceRequest.getBody());

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -506,7 +506,7 @@ public HttpResponse update(HttpResponse replaceResponse) {
             withReasonPhrase(replaceResponse.getReasonPhrase());
         }
         for (Header header : replaceResponse.getHeaderList()) {
-            getHeaders().replaceEntry(header);
+            getOrCreateHeaders().replaceEntry(header);
         }
         for (Cookie cookie : replaceResponse.getCookieList()) {
             withCookie(cookie);

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -117,6 +117,7 @@ public static void writeToSystemOut(Logger logger, LogEntry logEntry) {
     }
 
     public static boolean isEnabled(final Level level) {
-        return logLevel() != null && level.toInt() >= logLevel().toInt();
+        return (logLevel() == null && level.toInt() >= Level.WARN.toInt())
+            || (logLevel() != null && level.toInt() >= logLevel().toInt());
     }
 }

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/BooksPageEndToEndIntegrationTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockserver.examples.proxy.web.controller.pageobjects.BooksPage;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.model.Parameter;
+import org.mockserver.socket.PortFactory;
 import org.springframework.http.MediaType;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.MvcResult;
@@ -38,6 +39,7 @@ public abstract class BooksPageEndToEndIntegrationTest {
 
     @BeforeClass
     public static void startProxy() {
+        System.setProperty("bookService.port", "" + PortFactory.findFreePort());
         proxy = ClientAndServer.startClientAndServer();
         System.setProperty("http.proxyHost", "127.0.0.1");
         System.setProperty("http.proxyPort", String.valueOf(proxy.getLocalPort()));

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.Map;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.SET_COOKIE;
-import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import static org.mockserver.model.Header.header;
 import static org.mockserver.model.HttpStatusCode.NOT_FOUND_404;
 import static org.mockserver.model.HttpStatusCode.OK_200;
@@ -20,7 +19,6 @@
  * @author jamesdbloom
  */
 public class HttpResponse extends Action<HttpResponse> implements HttpObject<HttpResponse, BodyWithContentType> {
-    private static final HttpResponse NOT_FOUND_RESPONSE = new HttpResponse().withStatusCode(NOT_FOUND_404.code()).withReasonPhrase(NOT_FOUND_404.reasonPhrase());
     private Integer statusCode;
     private String reasonPhrase;
     private BodyWithContentType body;
@@ -48,7 +46,7 @@ public static HttpResponse response(String body) {
      * Static builder to create a not found response.
      */
     public static HttpResponse notFoundResponse() {
-        return NOT_FOUND_RESPONSE;
+        return new HttpResponse().withStatusCode(NOT_FOUND_404.code()).withReasonPhrase(NOT_FOUND_404.reasonPhrase());
     }
 
     /**

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientIntegrationTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.mockserver.verify.VerificationSequence;
 import org.mockserver.verify.VerificationTimes;
 
-import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -30,8 +29,8 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsCollectionContaining.hasItems;
+import static org.hamcrest.core.IsSame.sameInstance;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.same;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.matchers.Times.exactly;
 import static org.mockserver.matchers.Times.unlimited;
@@ -360,7 +359,7 @@ public void shouldReconnectWebSocketIfClosed() throws InterruptedException {
         // then
         assertThat(retrieveRequests(request()).size(), is(1));
         assertThat(echoServerOne.getWebsocketChannels().size(), is(1));
-        assertThat(echoServerOne.getWebsocketChannels().get(0), IsNot.not(same(initialChannel)));
+        assertThat(echoServerOne.getWebsocketChannels().get(0), IsNot.not(sameInstance(initialChannel)));
     }
 
     @Test

File: mockserver-netty/src/test/java/org/mockserver/mock/action/DirectProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -84,13 +84,13 @@ public void shouldNotForwardInLoopIndefinitely() throws Exception {
         // and - logs hide proxied request
         String[] loadBalancerLogMessages = loadBalancerClientAndServer.retrieveLogMessagesArray(null);
         String[] targetLogMessages = targetClientAndServer.retrieveLogMessagesArray(null);
-        assertThat(loadBalancerLogMessages[3], containsString("no expectation for:" + NEW_LINE +
+        assertThat(loadBalancerLogMessages[2], containsString("no expectation for:" + NEW_LINE +
             "" + NEW_LINE +
             "\t{" + NEW_LINE +
             "\t  \"method\" : \"GET\"," + NEW_LINE +
             "\t  \"path\" : \"/some_path\"")
         );
-        assertThat(loadBalancerLogMessages[3], containsString(" returning response:" + NEW_LINE +
+        assertThat(loadBalancerLogMessages[2], containsString(" returning response:" + NEW_LINE +
             "" + NEW_LINE +
             "\t{" + NEW_LINE +
             "\t  \"statusCode\" : 404," + NEW_LINE +

File: mockserver-netty/src/test/java/org/mockserver/mock/action/HttpProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -25,6 +25,7 @@
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;
 import static org.mockserver.stop.Stop.stopQuietly;
+import static org.mockserver.verify.VerificationTimes.once;
 
 /**
  * @author jamesdbloom
@@ -76,7 +77,8 @@ public void shouldNotForwardInLoopIndefinitely() throws Exception {
         assertThat(responseSettableFuture.get(10, TimeUnit.MINUTES).getStatusCode(), is(404));
 
         // and - verify request received by proxy (not possible for target due to loop prevention)
-        loadBalancerClientAndServer.verify(request().withPath("/some_path"));
+        loadBalancerClientAndServer.verify(request().withPath("/some_path"), once());
+        targetClientAndServer.verify(request().withPath("/some_path"), once());
 
         // and - logs hide proxied request
         String[] loadBalancerLogMessages = loadBalancerClientAndServer.retrieveLogMessagesArray(null);

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpForwardObjectCallbackActionHandlerTest.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.Test;
 import org.mockserver.callback.WebSocketClientRegistry;
 import org.mockserver.callback.WebSocketRequestCallback;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.model.HttpObjectCallback;
 import org.mockserver.model.HttpRequest;
@@ -27,6 +28,7 @@ public void shouldHandleHttpRequests() {
         HttpRequest request = request().withBody("some_body");
         ResponseWriter mockResponseWriter = mock(ResponseWriter.class);
         when(mockHttpStateHandler.getWebSocketClientRegistry()).thenReturn(mockWebSocketClientRegistry);
+        when(mockHttpStateHandler.getMockServerLogger()).thenReturn(new MockServerLogger());
 
         // when
         new HttpForwardObjectCallbackActionHandler(mockHttpStateHandler, null).handle(mock(ActionHandler.class), httpObjectCallback, request, mockResponseWriter, true);

File: mockserver-core/src/main/java/org/mockserver/mock/action/ExpectationCallback.java
Patch:
@@ -16,5 +16,5 @@ public interface ExpectationCallback<T extends HttpObject> {
      * @param httpRequest the request that satisfied the expectation condition
      * @return the request that will be proxied or the response that will be returned
      */
-    T handle(HttpRequest httpRequest);
+    T handle(HttpRequest httpRequest) throws Exception;
 }

File: mockserver-core/src/main/java/org/mockserver/mock/action/ExpectationForwardCallback.java
Patch:
@@ -16,6 +16,6 @@ public interface ExpectationForwardCallback extends ExpectationCallback<HttpRequ
      * @param httpRequest the request that satisfied the expectation condition
      * @return the request that will be proxied
      */
-    HttpRequest handle(HttpRequest httpRequest);
+    HttpRequest handle(HttpRequest httpRequest) throws Exception;
 
 }

File: mockserver-core/src/main/java/org/mockserver/mock/action/ExpectationResponseCallback.java
Patch:
@@ -16,6 +16,6 @@ public interface ExpectationResponseCallback extends ExpectationCallback<HttpRes
      * @param httpRequest the request that satisfied the expectation condition
      * @return the response that will be returned
      */
-    HttpResponse handle(HttpRequest httpRequest);
+    HttpResponse handle(HttpRequest httpRequest) throws Exception;
 
 }

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpResponseClassCallbackActionHandler.java
Patch:
@@ -10,6 +10,7 @@
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
+import static org.mockserver.log.model.LogEntry.LogMessageType.WARN;
 import static org.mockserver.model.HttpResponse.notFoundResponse;
 
 /**
@@ -80,7 +81,8 @@ private HttpResponse invokeCallbackMethod(HttpClassCallback httpClassCallback, H
                         new LogEntry()
                             .setType(LogEntry.LogMessageType.EXCEPTION)
                             .setLogLevel(Level.ERROR)
-                            .setMessageFormat(httpClassCallback.getCallbackClass() + " throw exception while executing handle callback method")
+                            .setHttpRequest(httpRequest)
+                            .setMessageFormat(httpClassCallback.getCallbackClass() + " throw exception while executing handle callback method - " + throwable.getMessage())
                             .setThrowable(throwable)
                     );
                     return notFoundResponse();

File: mockserver-core/src/main/java/org/mockserver/websocket/WebSocketClient.java
Patch:
@@ -123,7 +123,8 @@ void receivedTextWebSocketFrame(TextWebSocketFrame textWebSocketFrame) {
                             new LogEntry()
                                 .setType(LogEntry.LogMessageType.EXCEPTION)
                                 .setLogLevel(Level.ERROR)
-                                .setMessageFormat("Exception thrown while handling callback")
+                                .setHttpRequest(httpRequest)
+                                .setMessageFormat("Exception thrown while handling callback - " + throwable.getMessage())
                                 .setThrowable(throwable)
                         );
                         channel.writeAndFlush(new TextWebSocketFrame(webSocketMessageSerializer.serialize(

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -37,8 +37,7 @@ public void setUp() {
                 request()
                     .withPath("/my/echo")
             )
-            .respond(callback()
-                .withCallbackClass("org.mockserver.integration.mocking.ConcurrencyBasicResponseMockingIntegrationTest$ClassCallback"));
+            .respond(callback().withCallbackClass("org.mockserver.integration.mocking.ConcurrencyBasicResponseMockingIntegrationTest$ClassCallback"));
         httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
     }
 

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -208,6 +208,7 @@ public void processAction(final HttpRequest request, final ResponseWriter respon
                                     .setType(EXPECTATION_NOT_MATCHED_RESPONSE)
                                     .setLogLevel(Level.INFO)
                                     .setHttpRequest(request)
+                                    .setHttpResponse(notFoundResponse())
                                     .setMessageFormat("no expectation for:{}returning response:{}")
                                     .setArguments(request, notFoundResponse())
                             );
@@ -333,6 +334,7 @@ private void returnNotFound(ResponseWriter responseWriter, HttpRequest request)
                     .setType(EXPECTATION_NOT_MATCHED_RESPONSE)
                     .setLogLevel(Level.INFO)
                     .setHttpRequest(request)
+                    .setHttpResponse(notFoundResponse())
                     .setMessageFormat("no expectation for:{}returning response:{}")
                     .setArguments(request, notFoundResponse())
             );

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -120,7 +120,7 @@ public String isValid(String json) {
     }
 
     private String formatProcessingReport(ProcessingReport validate) {
-        List<String> validationErrors = new ArrayList<String>();
+        List<String> validationErrors = new ArrayList<>();
         for (ProcessingMessage processingMessage : validate) {
             String fieldPointer = "";
             if (processingMessage.asJson().get("instance") != null && processingMessage.asJson().get("instance").get("pointer") != null) {

File: mockserver-core/src/main/java/org/mockserver/matchers/MatcherBuilder.java
Patch:
@@ -20,7 +20,7 @@ public HttpRequestMatcher transformsToMatcher(HttpRequest httpRequest) {
     }
 
     public HttpRequestMatcher transformsToMatcher(Expectation expectation) {
-        return new HttpRequestMatcher(expectation, mockServerLogger);
+        return new HttpRequestMatcher(mockServerLogger, expectation);
     }
 
 }

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/AbstractExtendedNettyMockingIntegrationTest.java
Patch:
@@ -462,7 +462,7 @@ public void shouldErrorWhenBindingToUnavailableSocket() throws InterruptedExcept
 
             // then
             assertThat(response.getStatusCode(), is(400));
-            assertThat(response.getBodyAsString(), is("Exception while binding MockServer to port " + newPort));
+            assertThat(response.getBodyAsString(), containsString("Exception while binding MockServer to port " + newPort));
 
         } finally {
             if (server != null) {

File: mockserver-core/src/main/java/org/mockserver/client/HttpClientInitializer.java
Patch:
@@ -13,12 +13,12 @@
 import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.socket.tls.NettySslContextFactory;
 
 import java.net.InetSocketAddress;
 
 import static org.mockserver.client.NettyHttpClient.REMOTE_SOCKET;
 import static org.mockserver.client.NettyHttpClient.SECURE;
-import static org.mockserver.socket.tls.NettySslContextFactory.nettySslContextFactory;
 import static org.slf4j.event.Level.TRACE;
 
 @ChannelHandler.Sharable
@@ -50,7 +50,7 @@ public void initChannel(SocketChannel channel) {
 
         if (channel.attr(SECURE) != null && channel.attr(SECURE).get() != null && channel.attr(SECURE).get()) {
             InetSocketAddress remoteAddress = channel.attr(REMOTE_SOCKET).get();
-            pipeline.addLast(nettySslContextFactory().createClientSslContext().newHandler(channel.alloc(), remoteAddress.getHostName(), remoteAddress.getPort()));
+            pipeline.addLast(new NettySslContextFactory(mockServerLogger).createClientSslContext().newHandler(channel.alloc(), remoteAddress.getHostName(), remoteAddress.getPort()));
         }
 
         // add logging

File: mockserver-core/src/main/java/org/mockserver/configuration/IntegerStringListParser.java
Patch:
@@ -22,7 +22,7 @@ public Integer[] toArray(String integers) {
         return integerList.toArray(new Integer[0]);
     }
 
-    public List<Integer> toList(String integers) {
+    List<Integer> toList(String integers) {
         List<Integer> integerList = new ArrayList<Integer>();
         for (String integer : Splitter.on(",").split(integers)) {
             try {

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -9,9 +9,9 @@
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.codec.MockServerServerCodec;
+import org.mockserver.socket.tls.NettySslContextFactory;
 
 import static org.mockserver.echo.http.EchoServer.*;
-import static org.mockserver.socket.tls.NettySslContextFactory.nettySslContextFactory;
 import static org.slf4j.event.Level.TRACE;
 
 /**
@@ -32,15 +32,15 @@ public class EchoServerInitializer extends ChannelInitializer<SocketChannel> {
         this.error = error;
     }
 
-    public void initChannel(SocketChannel channel) throws Exception {
+    public void initChannel(SocketChannel channel) {
         ChannelPipeline pipeline = channel.pipeline();
 
         if (error != null) {
             pipeline.addLast(new ErrorHandler(error));
         }
 
         if (secure) {
-            pipeline.addLast(nettySslContextFactory().createServerSslContext().newHandler(channel.alloc()));
+            pipeline.addLast(new NettySslContextFactory(mockServerLogger).createServerSslContext().newHandler(channel.alloc()));
         }
 
         if (MockServerLogger.isEnabled(TRACE)) {

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletRequestToMockServerRequestDecoder.java
Patch:
@@ -23,9 +23,11 @@
 public class HttpServletRequestToMockServerRequestDecoder {
 
     private final ContentTypeMapper contentTypeMapper;
+    private final IOStreamUtils ioStreamUtils;
 
     public HttpServletRequestToMockServerRequestDecoder(MockServerLogger mockServerLogger) {
         this.contentTypeMapper = new ContentTypeMapper(mockServerLogger);
+        ioStreamUtils = new IOStreamUtils(mockServerLogger);
     }
 
     public HttpRequest mapHttpServletRequestToMockServerRequest(HttpServletRequest httpServletRequest) {
@@ -61,7 +63,7 @@ private void setQueryString(HttpRequest httpRequest, HttpServletRequest httpServ
     }
 
     private void setBody(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {
-        byte[] bodyBytes = IOStreamUtils.readInputStreamToByteArray(httpServletRequest);
+        byte[] bodyBytes = ioStreamUtils.readInputStreamToByteArray(httpServletRequest);
         if (bodyBytes.length > 0) {
             if (ContentTypeMapper.isBinary(httpServletRequest.getHeader(CONTENT_TYPE.toString()))) {
                 httpRequest.withBody(new BinaryBody(bodyBytes));

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonSchemaMatcher.java
Patch:
@@ -22,7 +22,7 @@ public class JsonSchemaMatcher extends BodyMatcher<String> {
     public JsonSchemaMatcher(MockServerLogger mockServerLogger, String schema) {
         this.mockServerLogger = mockServerLogger;
         this.schema = schema;
-        jsonSchemaValidator = new JsonSchemaValidator(schema);
+        jsonSchemaValidator = new JsonSchemaValidator(mockServerLogger, schema);
     }
 
     public boolean matches(final HttpRequest context, String matched) {

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -23,7 +23,6 @@
 import java.net.ConnectException;
 import java.net.InetSocketAddress;
 import java.util.Set;
-import java.util.concurrent.Callable;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.HOST;
 import static io.netty.handler.codec.http.HttpResponseStatus.OK;
@@ -65,7 +64,7 @@ public ActionHandler(EventLoopGroup eventLoopGroup, HttpStateHandler httpStateHa
         this.httpStateHandler = httpStateHandler;
         this.scheduler = httpStateHandler.getScheduler();
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
-        this.httpClient = new NettyHttpClient(eventLoopGroup, proxyConfiguration);
+        this.httpClient = new NettyHttpClient(mockServerLogger, eventLoopGroup, proxyConfiguration);
     }
 
     public void processAction(final HttpRequest request, final ResponseWriter responseWriter, final ChannelHandlerContext ctx, Set<String> localAddresses, boolean proxyingRequest, final boolean synchronous) {

File: mockserver-core/src/main/java/org/mockserver/model/ObjectWithJsonToString.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.model;
 
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.serialization.ObjectMapperFactory;
 
 /**

File: mockserver-core/src/main/java/org/mockserver/serialization/ExpectationSerializer.java
Patch:
@@ -28,7 +28,7 @@ public class ExpectationSerializer implements Serializer<Expectation> {
 
     public ExpectationSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        expectationValidator = jsonSchemaExpectationValidator();
+        expectationValidator = jsonSchemaExpectationValidator(mockServerLogger);
     }
 
     public String serialize(Expectation expectation) {

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpRequestSerializer.java
Patch:
@@ -30,7 +30,7 @@ public class HttpRequestSerializer implements Serializer<HttpRequest> {
 
     public HttpRequestSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        httpRequestValidator = jsonSchemaHttpRequestValidator();
+        httpRequestValidator = jsonSchemaHttpRequestValidator(mockServerLogger);
     }
 
     public String serialize(HttpRequest httpRequest) {

File: mockserver-core/src/main/java/org/mockserver/serialization/HttpResponseSerializer.java
Patch:
@@ -29,7 +29,7 @@ public class HttpResponseSerializer implements Serializer<HttpResponse> {
 
     public HttpResponseSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        httpResponseValidator = jsonSchemaHttpResponseValidator();
+        httpResponseValidator = jsonSchemaHttpResponseValidator(mockServerLogger);
     }
 
     public String serialize(HttpResponse httpResponse) {

File: mockserver-core/src/main/java/org/mockserver/serialization/ObjectMapperFactory.java
Patch:
@@ -2,13 +2,13 @@
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import org.mockserver.log.model.LogEntry;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.Times;
 import org.mockserver.model.*;
 import org.mockserver.serialization.deserializers.body.BodyDTODeserializer;

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSequenceSerializer.java
Patch:
@@ -23,7 +23,7 @@ public class VerificationSequenceSerializer implements Serializer<VerificationSe
 
     public VerificationSequenceSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        verificationSequenceValidator = new JsonSchemaVerificationSequenceValidator();
+        verificationSequenceValidator = new JsonSchemaVerificationSequenceValidator(mockServerLogger);
     }
 
     public String serialize(VerificationSequence verificationSequence) {

File: mockserver-core/src/main/java/org/mockserver/serialization/VerificationSerializer.java
Patch:
@@ -23,7 +23,7 @@ public class VerificationSerializer implements Serializer<Verification> {
 
     public VerificationSerializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        verificationValidator = new JsonSchemaVerificationValidator();
+        verificationValidator = new JsonSchemaVerificationValidator(mockServerLogger);
     }
 
     public String serialize(Verification verification) {

File: mockserver-core/src/main/java/org/mockserver/templates/engine/serializer/HttpTemplateOutputDeserializer.java
Patch:
@@ -28,8 +28,8 @@ public class HttpTemplateOutputDeserializer {
 
     public HttpTemplateOutputDeserializer(MockServerLogger mockServerLogger) {
         this.mockServerLogger = mockServerLogger;
-        httpRequestValidator = jsonSchemaHttpRequestValidator();
-        httpResponseValidator = jsonSchemaHttpResponseValidator();
+        httpRequestValidator = jsonSchemaHttpRequestValidator(mockServerLogger);
+        httpResponseValidator = jsonSchemaHttpResponseValidator(mockServerLogger);
     }
 
     public <T> T deserializer(HttpRequest request, String json, Class<? extends DTO<T>> dtoClass) {

File: mockserver-core/src/main/java/org/mockserver/websocket/WebSocketClient.java
Patch:
@@ -36,15 +36,15 @@
 public class WebSocketClient<T extends HttpObject> {
 
     static final AttributeKey<SettableFuture<String>> REGISTRATION_FUTURE = AttributeKey.valueOf("REGISTRATION_FUTURE");
-    private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(WebSocketClient.class);
     private final MockServerLogger mockServerLogger;
     private final Semaphore availableWebSocketCallbackRegistrations;
     private Channel channel;
-    private WebSocketMessageSerializer webSocketMessageSerializer = new WebSocketMessageSerializer(MOCK_SERVER_LOGGER);
+    private WebSocketMessageSerializer webSocketMessageSerializer;
     private ExpectationCallback<T> expectationCallback;
 
     public WebSocketClient(MockServerLogger mockServerLogger, Semaphore availableWebSocketCallbackRegistrations) {
         this.mockServerLogger = mockServerLogger;
+        this.webSocketMessageSerializer = new WebSocketMessageSerializer(mockServerLogger);
         this.availableWebSocketCallbackRegistrations = availableWebSocketCallbackRegistrations;
     }
 
@@ -119,7 +119,7 @@ void receivedTextWebSocketFrame(TextWebSocketFrame textWebSocketFrame) {
                         result.withHeader(WEB_SOCKET_CORRELATION_ID_HEADER_NAME, webSocketCorrelationId);
                         channel.writeAndFlush(new TextWebSocketFrame(webSocketMessageSerializer.serialize(result)));
                     } catch (Throwable throwable) {
-                        MOCK_SERVER_LOGGER.logEvent(
+                        mockServerLogger.logEvent(
                             new LogEntry()
                                 .setType(LogEntry.LogMessageType.EXCEPTION)
                                 .setLogLevel(Level.ERROR)

File: mockserver-core/src/test/java/org/mockserver/server/initialize/ExpectationInitializerLoaderTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Test;
 import org.mockserver.configuration.ConfigurationProperties;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.Expectation;
 
 import static org.hamcrest.CoreMatchers.is;
@@ -22,7 +23,7 @@ public void shouldLoadExpectationsFromJson() {
             ConfigurationProperties.initializationJsonPath("org/mockserver/server/initialize/initializerJson.json");
 
             // when
-            final Expectation[] expectations = ExpectationInitializerLoader.loadExpectations();
+            final Expectation[] expectations = new ExpectationInitializerLoader(new MockServerLogger()).loadExpectations();
 
             // then
             assertThat(expectations, is(new Expectation[]{
@@ -56,7 +57,7 @@ public void shouldLoadExpectationsFromInitializerClass() {
             ConfigurationProperties.initializationClass(ExpectationInitializerExample.class.getName());
 
             // when
-            final Expectation[] expectations = ExpectationInitializerLoader.loadExpectations();
+            final Expectation[] expectations = new ExpectationInitializerLoader(new MockServerLogger()).loadExpectations();
 
             // then
             assertThat(expectations, is(new Expectation[]{

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidatorIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 public class JsonSchemaExpectationValidatorIntegrationTest {
 
     // given
-    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaExpectationValidator();
+    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaExpectationValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteExpectationWithHttpResponse() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpRequestValidatorIntegrationTest.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class JsonSchemaHttpRequestValidatorIntegrationTest {
 
-    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaHttpRequestValidator();
+    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaHttpRequestValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestFromRawJson() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpResponseValidatorIntegrationTest.java
Patch:
@@ -14,7 +14,7 @@
 public class JsonSchemaHttpResponseValidatorIntegrationTest {
 
     // given
-    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaHttpResponseValidator();
+    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaHttpResponseValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidatorIntegrationTest.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class JsonSchemaVerificationSequenceValidatorIntegrationTest {
 
-    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaVerificationSequenceValidator();
+    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaVerificationSequenceValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidatorIntegrationTest.java
Patch:
@@ -13,7 +13,7 @@
  */
 public class JsonSchemaVerificationValidatorIntegrationTest {
 
-    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaHttpRequestValidator();
+    private JsonSchemaValidator jsonSchemaValidator = jsonSchemaHttpRequestValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.apache.http.util.EntityUtils;
 import org.junit.Test;
 import org.mockserver.client.MockServerClient;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpStatusCode;
 import org.mockserver.socket.tls.KeyStoreFactory;
 import org.mockserver.streams.IOStreamUtils;
@@ -145,7 +146,7 @@ public void shouldForwardRequestsToSecurePortUsingHttpClientViaHTTP_CONNECT() th
         // given
         HttpClient httpClient = HttpClients
                 .custom()
-                .setSSLSocketFactory(new SSLConnectionSocketFactory(KeyStoreFactory.keyStoreFactory().sslContext(), NoopHostnameVerifier.INSTANCE))
+                .setSSLSocketFactory(new SSLConnectionSocketFactory(new KeyStoreFactory(new MockServerLogger()).sslContext(), NoopHostnameVerifier.INSTANCE))
                 .setRoutePlanner(
                         new DefaultProxyRoutePlanner(
                                 new HttpHost(

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractMockingIntegrationTestBase.java
Patch:
@@ -94,7 +94,7 @@ protected String calculatePath(String path) {
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup();
-        httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
     }
 
     @AfterClass

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -57,7 +57,7 @@ public class Main {
         "                                                                                                                                                                 " + NEW_LINE;
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(Main.class);
     private static final IntegerStringListParser INTEGER_STRING_LIST_PARSER = new IntegerStringListParser();
-    public static PrintStream systemOut = System.out;
+    static PrintStream systemOut = System.out;
 
     /**
      * Run the MockServer directly providing the arguments as specified below.

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -46,7 +46,6 @@ public class MockServerHandler extends SimpleChannelInboundHandler<HttpRequest>
 
     public static final AttributeKey<Boolean> PROXYING = AttributeKey.valueOf("PROXYING");
     public static final AttributeKey<Set> LOCAL_HOST_HEADERS = AttributeKey.valueOf("LOCAL_HOST_HEADERS");
-    private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(MockServerHandler.class);
     private MockServerLogger mockServerLogger;
     private HttpStateHandler httpStateHandler;
     private PortBindingSerializer portBindingSerializer;
@@ -183,7 +182,7 @@ public void channelReadComplete(ChannelHandlerContext ctx) {
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         if (shouldNotIgnoreException(cause)) {
-            MOCK_SERVER_LOGGER.logEvent(
+            mockServerLogger.logEvent(
                 new LogEntry()
                     .setType(LogEntry.LogMessageType.EXCEPTION)
                     .setLogLevel(Level.ERROR)

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/UpstreamProxyRelayHandler.java
Patch:
@@ -6,14 +6,14 @@
 import io.netty.handler.ssl.SslHandler;
 import org.mockserver.log.model.LogEntry;
 import org.mockserver.logging.MockServerLogger;
+import org.mockserver.socket.tls.NettySslContextFactory;
 import org.slf4j.event.Level;
 
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ClosedSelectorException;
 
 import static org.mockserver.exception.ExceptionHandler.closeOnFlush;
 import static org.mockserver.exception.ExceptionHandler.shouldNotIgnoreException;
-import static org.mockserver.socket.tls.NettySslContextFactory.nettySslContextFactory;
 import static org.mockserver.unification.PortUnificationHandler.isSslEnabledDownstream;
 
 public class UpstreamProxyRelayHandler extends SimpleChannelInboundHandler<FullHttpRequest> {
@@ -38,7 +38,7 @@ public void channelActive(ChannelHandlerContext ctx) {
     @Override
     public void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest request) {
         if (isSslEnabledDownstream(upstreamChannel) && downstreamChannel.pipeline().get(SslHandler.class) == null) {
-            downstreamChannel.pipeline().addFirst(nettySslContextFactory().createClientSslContext().newHandler(ctx.alloc()));
+            downstreamChannel.pipeline().addFirst(new NettySslContextFactory(mockServerLogger).createClientSslContext().newHandler(ctx.alloc()));
         }
         downstreamChannel.writeAndFlush(request).addListener(new ChannelFutureListener() {
             @Override

File: mockserver-netty/src/main/java/org/mockserver/unification/PortUnificationHandler.java
Patch:
@@ -162,7 +162,7 @@ private void enableSocks(ChannelHandlerContext ctx, ByteBuf msg, ChannelHandler.
 
     private void enableSsl(ChannelHandlerContext ctx, ByteBuf msg) {
         ChannelPipeline pipeline = ctx.pipeline();
-        pipeline.addFirst(new SniHandler());
+        pipeline.addFirst(new SniHandler(mockServerLogger));
         enableSslUpstreamAndDownstream(ctx.channel());
 
         // re-unify (with SSL enabled)

File: mockserver-netty/src/test/java/org/mockserver/cli/MainTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.echo.http.EchoServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.socket.PortFactory;
 import org.slf4j.event.Level;
@@ -77,7 +78,7 @@ public void shouldStartMockServerWithRemotePortAndHost() {
                 "-proxyRemotePort", String.valueOf(echoServer.getPort()),
                 "-proxyRemoteHost", "127.0.0.1"
             );
-            final HttpResponse response = new NettyHttpClient(clientEventLoopGroup, null)
+            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null)
                 .sendRequest(
                     request()
                         .withHeader(HOST.toString(), "127.0.0.1:" + freePort),
@@ -107,7 +108,7 @@ public void shouldStartMockServerWithRemotePort() {
                 "-serverPort", String.valueOf(freePort),
                 "-proxyRemotePort", String.valueOf(echoServer.getPort())
             );
-            final HttpResponse response = new NettyHttpClient(clientEventLoopGroup, null)
+            final HttpResponse response = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null)
                 .sendRequest(
                     request()
                         .withHeader(HOST.toString(), "127.0.0.1:" + freePort),

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.*;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.action.ExpectationResponseCallback;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
@@ -38,7 +39,7 @@ public void setUp() {
             )
             .respond(callback()
                 .withCallbackClass("org.mockserver.integration.mocking.ConcurrencyBasicResponseMockingIntegrationTest$ClassCallback"));
-        httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ConcurrencyResponseWebSocketMockingIntegrationTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.*;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.action.ExpectationResponseCallback;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
@@ -43,7 +44,7 @@ public HttpResponse handle(HttpRequest request) {
                         .withBody(request.getBodyAsString());
                 }
             });
-        httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ExpectationInitializerIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.integration.mocking.initializer.ExpectationInitializerIntegrationExample;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mockserver.MockServer;
 
 import java.util.concurrent.TimeUnit;
@@ -24,13 +25,13 @@
  */
 public class ExpectationInitializerIntegrationTest {
 
-    static NettyHttpClient httpClient;
+    private static NettyHttpClient httpClient;
     private static EventLoopGroup clientEventLoopGroup;
 
     @BeforeClass
     public static void createClientAndEventLoopGroup() {
         clientEventLoopGroup = new NioEventLoopGroup();
-        httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+        httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
     }
 
     @AfterClass

File: mockserver-netty/src/test/java/org/mockserver/mock/action/DirectProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.verify.VerificationTimes;
 
@@ -37,7 +38,7 @@ public class DirectProxyViaLoadBalanceIntegrationTest {
 
     private static EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup();
 
-    private static NettyHttpClient httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+    private static NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/mock/action/HttpProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpResponse;
 
 import java.net.InetSocketAddress;
@@ -35,7 +36,7 @@ public class HttpProxyViaLoadBalanceIntegrationTest {
 
     private static EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup();
 
-    private static NettyHttpClient httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+    private static NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/mock/action/OverridePreFlightRequestIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpResponse;
 
 import java.net.InetSocketAddress;
@@ -33,7 +34,7 @@ public class OverridePreFlightRequestIntegrationTest {
 
     private static EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup();
 
-    private static NettyHttpClient httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+    private static NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-netty/src/test/java/org/mockserver/mock/action/ProxyToInvalidSocketIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.Test;
 import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.verify.VerificationTimes;
@@ -33,7 +34,7 @@ public class ProxyToInvalidSocketIntegrationTest {
 
     private static EventLoopGroup clientEventLoopGroup = new NioEventLoopGroup();
 
-    private static NettyHttpClient httpClient = new NettyHttpClient(clientEventLoopGroup, null);
+    private static NettyHttpClient httpClient = new NettyHttpClient(new MockServerLogger(), clientEventLoopGroup, null);
 
     @BeforeClass
     public static void startServer() {

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockserver.client.MockServerClient;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.integration.server.AbstractBasicMockingIntegrationTest;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.socket.tls.KeyStoreFactory;
 
@@ -37,7 +38,7 @@ public static void startServer() throws Exception {
         tomcat.setPort(SERVER_HTTP_PORT);
 
         // add https connector
-        KeyStoreFactory.keyStoreFactory().loadOrCreateKeyStore();
+        new KeyStoreFactory(new MockServerLogger()).loadOrCreateKeyStore();
         Connector httpsConnector = new Connector();
         httpsConnector.setPort(SERVER_HTTPS_PORT);
         httpsConnector.setSecure(true);

File: mockserver-war/src/test/java/org/mockserver/server/ExtendedWARMockingIntegrationTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.BeforeClass;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.configuration.ConfigurationProperties;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.socket.tls.KeyStoreFactory;
 
@@ -36,7 +37,7 @@ public static void startServer() throws Exception {
         tomcat.setPort(SERVER_HTTP_PORT);
 
         // add https connector
-        KeyStoreFactory.keyStoreFactory().loadOrCreateKeyStore();
+        new KeyStoreFactory(new MockServerLogger()).loadOrCreateKeyStore();
         Connector httpsConnector = new Connector();
         httpsConnector.setPort(SERVER_HTTPS_PORT);
         httpsConnector.setSecure(true);

File: mockserver-core/src/main/java/org/mockserver/collections/CaseInsensitiveRegexMultiMap.java
Patch:
@@ -184,7 +184,7 @@ public synchronized NottableString put(NottableString key, NottableString value)
         }
         List<NottableString> list = Collections.synchronizedList(new ArrayList<NottableString>());
         for (Entry<NottableString, NottableString> entry : entryList()) {
-            if (EqualsBuilder.reflectionEquals(entry.getKey(), key)) {
+            if (EqualsBuilder.reflectionEquals(entry.getKey(), key, "key")) {
                 list.add(entry.getValue());
             }
         }

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static com.google.common.net.MediaType.JSON_UTF_8;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.hamcrest.CoreMatchers.endsWith;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
@@ -219,8 +220,8 @@ public void shouldRetrieveRecordedExpectations() {
     @Test
     public void shouldRetrieveLogMessages() throws InterruptedException {
         // given
-        Expectation expectationOne = new Expectation(request("request_one")).thenRespond(response("response_one"));
-        httpStateHandler.add(expectationOne);
+        httpStateHandler.add(new Expectation(request("request_one")).thenRespond(response("response_one")));
+        MILLISECONDS.sleep(100);
 
         // when
         HttpRequest retrieveLogRequest = request("/mockserver/retrieve")

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -175,6 +175,6 @@ private void addLogEvents(final MessageLogEntry.LogMessageType type, final Level
     }
 
     public boolean isEnabled(final Level level) {
-        return level.toInt() >= logLevel().toInt();
+        return logLevel() != null && level.toInt() >= logLevel().toInt();
     }
 }

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyStoreFactory.java
Patch:
@@ -152,8 +152,6 @@ public KeyStore loadOrCreateKeyStore() {
             }
         }
         System.setProperty("javax.net.ssl.trustStore", keyStoreFile.getAbsolutePath());
-        // don't rebuild again and again and again
-        ConfigurationProperties.rebuildKeyStore(false);
         return populateKeyStore(keystore);
     }
 

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -409,10 +409,10 @@ public String retrieveRecordedRequests(HttpRequest httpRequest, Format format) {
     }
 
     /**
-     * Retrieve the recorded requests that match the httpRequest parameter, use null for the parameter to retrieve all requests
+     * Retrieve the recorded requests and responses that match the httpRequest parameter, use null for the parameter to retrieve all requests and responses
      *
-     * @param httpRequest the http request that is matched against when deciding whether to return each request, use null for the parameter to retrieve for all requests
-     * @return an array of all requests that have been recorded by the MockServer in the order they have been received and including duplicates where the same request has been received multiple times
+     * @param httpRequest the http request that is matched against when deciding whether to return each request (and its corresponding response), use null for the parameter to retrieve for all requests
+     * @return an array of all requests and responses that have been recorded by the MockServer in the order they have been received and including duplicates where the same request has been received multiple times
      */
     public HttpRequestAndHttpResponse[] retrieveRecordedRequestsAndResponses(HttpRequest httpRequest) {
         String recordedRequests = retrieveRecordedRequestsAndResponses(httpRequest, Format.JSON);

File: mockserver-core/src/main/java/org/mockserver/logging/MockServerLogger.java
Patch:
@@ -40,7 +40,7 @@ public static void configureLogger() {
                     "handlers=org.mockserver.logging.StandardOutConsoleHandler\n" +
                     "org.mockserver.logging.StandardOutConsoleHandler.level=ALL\n" +
                     "org.mockserver.logging.StandardOutConsoleHandler.formatter=java.util.logging.SimpleFormatter\n" +
-                    "java.util.logging.SimpleFormatter.format=%1$tF %1$tT  %4$s  %5$s %n\n" +
+                    "java.util.logging.SimpleFormatter.format=%1$tF %1$tT  %3$s  %4$s  %5$s %n\n" +
                     ".level=" + javaLoggerLogLevel() + "\n" +
                     "io.netty.handler.ssl.SslHandler.level=WARNING";
                 LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(loggingConfiguration.getBytes(Charset.forName("UTF-8"))));

File: mockserver-core/src/main/java/org/mockserver/socket/tls/KeyAndCertificateFactory.java
Patch:
@@ -89,7 +89,7 @@ public static void addSubjectAlternativeName(String host) {
         if (host != null) {
             String hostWithoutPort = StringUtils.substringBefore(host, ":");
 
-            // TODO make IP resolution as an optional setting
+            // TODO(jamesdbloom) make IP resolution as an optional setting
             if (!ConfigurationProperties.containsSslSubjectAlternativeName(hostWithoutPort)) {
                 try {
                     // resolve host name for subject alternative name in case host name is ip address

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientServerValidationErrorsTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerClientServerVallidationErrorsTest {
+public class MockServerClientServerValidationErrorsTest {
 
     @Rule
     public ExpectedException exception = ExpectedException.none();
@@ -36,7 +36,7 @@ public void shouldHandleServerValidationFailure() {
         // given
         String responseBody = "2 errors:" + NEW_LINE +
                 " - object instance has properties which are not allowed by the schema: [\"paths\"] for field \"/httpRequest\"" + NEW_LINE +
-                " - for field \"/httpRequest/body\" a plain string or one of the following example bodies must be specified " + NEW_LINE +
+                " - for field \"/httpRequest/body\" a plain string, JSON object or one of the following example bodies must be specified " + NEW_LINE +
                 "   {" + NEW_LINE +
                 "     \"not\": false," + NEW_LINE +
                 "     \"type\": \"BINARY\"," + NEW_LINE +

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/AbstractExtendedNettyMockingIntegrationTest.java
Patch:
@@ -532,7 +532,6 @@ public void shouldReturnResponseWithCustomReasonPhrase() {
     @Test
     public void shouldReturnResponseByMatchingVeryLargeHeader() {
         // when
-        ConfigurationProperties.logLevel("DEBUG");
         String largeHeaderValue = RandomStringUtils.randomAlphanumeric(1024 * 2 * 2 * 2 * 2);
         mockServerClient
             .when(

File: mockserver-examples/src/test/java/org/mockserver/examples/proxy/web/controller/BooksPageIntegrationTest.java
Patch:
@@ -35,8 +35,8 @@
 public abstract class BooksPageIntegrationTest {
 
     static {
-        MockServerLogger.setRootLogLevel("org.springframework");
-        MockServerLogger.setRootLogLevel("org.eclipse");
+        MockServerLogger.setRootLogLevel("org.springframework", System.getProperty("root.logLevel", "WARN"));
+        MockServerLogger.setRootLogLevel("org.eclipse", System.getProperty("root.logLevel", "WARN"));
     }
     private static ClientAndServer proxy;
     private ClientAndServer mockServer;

File: mockserver-core/src/main/java/org/mockserver/mappers/ContentTypeMapper.java
Patch:
@@ -28,7 +28,7 @@ public class ContentTypeMapper {
      *     "ISO-8859-1" or its subsets MUST be labeled with an appropriate charset value.
      * </pre>
      */
-    public static final Charset DEFAULT_HTTP_CHARACTER_SET = CharsetUtil.UTF_8;
+    public static final Charset DEFAULT_HTTP_CHARACTER_SET = CharsetUtil.ISO_8859_1;
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(ContentTypeMapper.class);
 
     private static final Set<String> UTF_8_CONTENT_TYPES = ImmutableSet.<String>builder()

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -12,6 +12,7 @@
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.log.model.MessageLogEntry.LogMessageType.EXPECTATION_MATCHED;
 import static org.mockserver.log.model.MessageLogEntry.LogMessageType.EXPECTATION_NOT_MATCHED;
+import static org.mockserver.mappers.ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET;
 import static org.mockserver.model.NottableString.string;
 
 import java.nio.charset.StandardCharsets;
@@ -227,7 +228,7 @@ private boolean matches(HttpRequest context, HttpRequest request, boolean logMat
 
     private boolean bodyMatches(HttpRequest context, HttpRequest request) {
         boolean bodyMatches = true;
-        String bodyAsString = request.getBody() != null ? new String(request.getBody().getRawBytes(), request.getBody().getCharset(StandardCharsets.UTF_8)) : "";
+        String bodyAsString = request.getBody() != null ? new String(request.getBody().getRawBytes(), request.getBody().getCharset(DEFAULT_HTTP_CHARACTER_SET)) : "";
         if (!bodyAsString.isEmpty()) {
             if (bodyMatcher instanceof BinaryMatcher) {
                 bodyMatches = matches(context, bodyMatcher, request.getBodyAsRawBytes());

File: mockserver-core/src/test/java/org/mockserver/serialization/model/StringBodyDTOTest.java
Patch:
@@ -89,7 +89,7 @@ public void shouldNotSetDefaultCharset() {
         assertThat(stringBody.getValue(), is("some_body"));
         assertThat(stringBody.isSubString(), is(true));
         assertThat(stringBody.getType(), is(Body.Type.STRING));
-        assertThat(stringBody.getContentType(), is(MediaType.PLAIN_TEXT_UTF_8.toString()));
+        assertThat(stringBody.getContentType(), is(MediaType.PLAIN_TEXT_UTF_8.withCharset(DEFAULT_HTTP_CHARACTER_SET).toString()));
     }
 
     @Test

File: mockserver-client-java/src/main/java/org/mockserver/client/ForwardChainExpectation.java
Patch:
@@ -3,8 +3,8 @@
 import com.google.common.annotations.VisibleForTesting;
 import org.mockserver.client.MockServerEventBus.EventType;
 import org.mockserver.client.MockServerEventBus.SubscriberHandler;
-import org.mockserver.client.netty.websocket.WebSocketClient;
-import org.mockserver.client.netty.websocket.WebSocketException;
+import org.mockserver.websocket.WebSocketClient;
+import org.mockserver.websocket.WebSocketException;
 import org.mockserver.mock.Expectation;
 import org.mockserver.mock.action.ExpectationCallback;
 import org.mockserver.mock.action.ExpectationForwardCallback;

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -6,8 +6,6 @@
 import org.apache.commons.lang3.StringUtils;
 import org.mockserver.Version;
 import org.mockserver.client.MockServerEventBus.EventType;
-import org.mockserver.client.netty.NettyHttpClient;
-import org.mockserver.client.netty.SocketConnectionException;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;

File: mockserver-client-java/src/test/java/org/mockserver/client/ForwardChainExpectationTest.java
Patch:
@@ -4,9 +4,8 @@
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
-import org.mockserver.client.netty.websocket.WebSocketClient;
+import org.mockserver.websocket.WebSocketClient;
 import org.mockserver.mock.Expectation;
-import org.mockserver.mock.action.ExpectationForwardCallback;
 import org.mockserver.model.*;
 
 import java.util.concurrent.Semaphore;

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientIntegrationTest.java
Patch:
@@ -236,7 +236,7 @@ public void shouldSetupExpectationWithResponseClassCallback() {
                     "}"))
         ));
         if (result != null && !result.isEmpty()) {
-            throw new AssertionError(result);
+             throw new AssertionError(result);
         }
     }
 

File: mockserver-client-java/src/test/java/org/mockserver/client/MockServerClientTest.java
Patch:
@@ -8,8 +8,6 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.Version;
-import org.mockserver.client.netty.NettyHttpClient;
-import org.mockserver.client.netty.SocketConnectionException;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
 import org.mockserver.model.*;

File: mockserver-core/src/main/java/org/mockserver/callback/WebSocketClientRegistry.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
-import org.mockserver.client.netty.websocket.WebSocketException;
+import org.mockserver.websocket.WebSocketException;
 import org.mockserver.collections.CircularHashMap;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.metrics.Metrics;

File: mockserver-core/src/main/java/org/mockserver/client/HttpClientConnectionHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty;
+package org.mockserver.client;
 
 import com.google.common.util.concurrent.SettableFuture;
 import io.netty.channel.ChannelDuplexHandler;
@@ -7,7 +7,7 @@
 import io.netty.channel.ChannelPromise;
 import org.mockserver.model.HttpResponse;
 
-import static org.mockserver.client.netty.NettyHttpClient.RESPONSE_FUTURE;
+import static org.mockserver.client.NettyHttpClient.RESPONSE_FUTURE;
 
 @ChannelHandler.Sharable
 public class HttpClientConnectionHandler extends ChannelDuplexHandler {

File: mockserver-core/src/main/java/org/mockserver/client/HttpClientHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty;
+package org.mockserver.client;
 
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
@@ -9,7 +9,7 @@
 
 import javax.net.ssl.SSLException;
 
-import static org.mockserver.client.netty.NettyHttpClient.RESPONSE_FUTURE;
+import static org.mockserver.client.NettyHttpClient.RESPONSE_FUTURE;
 
 @ChannelHandler.Sharable
 public class HttpClientHandler extends SimpleChannelInboundHandler<HttpResponse> {

File: mockserver-core/src/main/java/org/mockserver/client/NettyHttpClient.java
Patch:
@@ -1,13 +1,12 @@
-package org.mockserver.client.netty;
+package org.mockserver.client;
 
 import com.google.common.util.concurrent.SettableFuture;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.buffer.PooledByteBufAllocator;
 import io.netty.channel.*;
-import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.nio.NioSocketChannel;
 import io.netty.util.AttributeKey;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/client/SocketCommunicationException.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty;
+package org.mockserver.client;
 
 /**
  * This exception indicates there was an error while trying to communicate over a socket

File: mockserver-core/src/main/java/org/mockserver/client/SocketConnectionException.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty;
+package org.mockserver.client;
 
 /**
  * This exception indicates there was an error while trying to communicate over a socket

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerClientCodec.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.channel.CombinedChannelDuplexHandler;
 

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerRequestEncoder.java
Patch:
@@ -1,8 +1,8 @@
-package org.mockserver.client.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
-import org.mockserver.client.netty.codec.mappers.MockServerHttpRequestToFullHttpRequest;
+import org.mockserver.codec.mappers.MockServerHttpRequestToFullHttpRequest;
 import org.mockserver.model.HttpRequest;
 
 import java.util.List;

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerResponseDecoder.java
Patch:
@@ -1,9 +1,9 @@
-package org.mockserver.client.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageDecoder;
 import io.netty.handler.codec.http.FullHttpResponse;
-import org.mockserver.client.netty.codec.mappers.FullHttpResponseToMockServerResponse;
+import org.mockserver.codec.mappers.FullHttpResponseToMockServerResponse;
 
 import java.util.List;
 

File: mockserver-core/src/main/java/org/mockserver/codec/MockServerServerCodec.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.server.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.channel.CombinedChannelDuplexHandler;
 import org.mockserver.logging.MockServerLogger;

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerHandler.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockserver.model.BodyWithContentType;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
-import org.mockserver.server.netty.codec.MockServerResponseEncoder;
+import org.mockserver.codec.MockServerResponseEncoder;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServerInitializer.java
Patch:
@@ -8,7 +8,7 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.logging.MockServerLogger;
-import org.mockserver.server.netty.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerServerCodec;
 
 import static org.mockserver.echo.http.EchoServer.*;
 import static org.mockserver.socket.tls.NettySslContextFactory.nettySslContextFactory;

File: mockserver-core/src/main/java/org/mockserver/mappers/ContentTypeMapper.java
Patch:
@@ -28,7 +28,7 @@ public class ContentTypeMapper {
      *     "ISO-8859-1" or its subsets MUST be labeled with an appropriate charset value.
      * </pre>
      */
-    public static final Charset DEFAULT_HTTP_CHARACTER_SET = CharsetUtil.ISO_8859_1;
+    public static final Charset DEFAULT_HTTP_CHARACTER_SET = CharsetUtil.UTF_8;
     private static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(ContentTypeMapper.class);
 
     private static final Set<String> UTF_8_CONTENT_TYPES = ImmutableSet.<String>builder()

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardAction.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.mock.action;
 
 import com.google.common.util.concurrent.SettableFuture;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.filters.HopByHopHeaderFilter;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardActionHandler.java
Patch:
@@ -1,11 +1,9 @@
 package org.mockserver.mock.action;
 
-import com.google.common.util.concurrent.SettableFuture;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpForward;
 import org.mockserver.model.HttpRequest;
-import org.mockserver.model.HttpResponse;
 
 import java.net.InetSocketAddress;
 

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardClassCallbackActionHandler.java
Patch:
@@ -1,11 +1,9 @@
 package org.mockserver.mock.action;
 
-import com.google.common.util.concurrent.SettableFuture;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpClassCallback;
 import org.mockserver.model.HttpRequest;
-import org.mockserver.model.HttpResponse;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardObjectCallbackActionHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.mockserver.callback.WebSocketClientRegistry;
 import org.mockserver.callback.WebSocketRequestCallback;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.model.HttpObjectCallback;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardTemplateActionHandler.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.mock.action;
 
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.serialization.model.HttpRequestDTO;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpOverrideForwardedRequestActionHandler.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.mock.action;
 
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpOverrideForwardedRequest;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/proxy/ProxyConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.proxy;
+package org.mockserver.proxy;
 
 import java.net.InetSocketAddress;
 

File: mockserver-core/src/main/java/org/mockserver/scheduler/Scheduler.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.scheduler;
 
-import org.mockserver.client.netty.SocketCommunicationException;
+import org.mockserver.client.SocketCommunicationException;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.mock.action.HttpForwardActionResult;
 import org.mockserver.model.Delay;

File: mockserver-core/src/main/java/org/mockserver/serialization/curl/HttpRequestToCurlSerializer.java
Patch:
@@ -5,7 +5,7 @@
 import io.netty.handler.codec.http.cookie.Cookie;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 import org.apache.commons.lang3.StringUtils;
-import org.mockserver.client.netty.codec.mappers.MockServerHttpRequestToFullHttpRequest;
+import org.mockserver.codec.mappers.MockServerHttpRequestToFullHttpRequest;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.NottableString;

File: mockserver-core/src/main/java/org/mockserver/servlet/responsewriter/ServletResponseWriter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.server;
+package org.mockserver.servlet.responsewriter;
 
 import io.netty.handler.codec.http.HttpResponseStatus;
 import org.mockserver.cors.CORSHeaders;

File: mockserver-core/src/main/java/org/mockserver/websocket/WebSocketClient.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.websocket;
+package org.mockserver.websocket;
 
 import com.google.common.util.concurrent.SettableFuture;
 import io.netty.bootstrap.Bootstrap;

File: mockserver-core/src/main/java/org/mockserver/websocket/WebSocketClientHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.websocket;
+package org.mockserver.websocket;
 
 import com.google.common.base.Strings;
 import com.google.common.util.concurrent.SettableFuture;
@@ -9,7 +9,7 @@
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.websocketx.*;
-import org.mockserver.client.netty.codec.mappers.FullHttpResponseToMockServerResponse;
+import org.mockserver.codec.mappers.FullHttpResponseToMockServerResponse;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mappers.ContentTypeMapper;
 
@@ -21,7 +21,7 @@
 import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
 import static io.netty.handler.codec.http.HttpHeaderNames.UPGRADE;
 import static io.netty.handler.codec.http.HttpHeaderValues.WEBSOCKET;
-import static org.mockserver.client.netty.websocket.WebSocketClient.REGISTRATION_FUTURE;
+import static org.mockserver.websocket.WebSocketClient.REGISTRATION_FUTURE;
 
 public class WebSocketClientHandler extends SimpleChannelInboundHandler<Object> {
 

File: mockserver-core/src/main/java/org/mockserver/websocket/WebSocketException.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.websocket;
+package org.mockserver.websocket;
 
 /**
  * @author jamesdbloom

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.echo.http.EchoServer;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.socket.PortFactory;

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.echo.http.EchoServer;
 import org.mockserver.model.HttpResponse;
 

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerRequestEncoderBasicMappingTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.codec;
+package org.mockserver.codec;
 
 import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.FullHttpRequest;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerRequestEncoderContentTypeTest.java
Patch:
@@ -1,8 +1,7 @@
-package org.mockserver.client.netty.codec;
+package org.mockserver.codec;
 
 import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.FullHttpRequest;
-import org.hamcrest.collection.IsEmptyCollection;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.mappers.ContentTypeMapper;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseDecoderTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.netty.codec;
+package org.mockserver.codec;
 
 import com.google.common.net.MediaType;
 import io.netty.buffer.Unpooled;
@@ -120,7 +120,7 @@ public void shouldDecodeUTF8Body() {
 
         // then
         Body body = ((HttpResponse) output.get(0)).getBody();
-        assertThat(body, Is.<Body>is(exact("some_random_string")));
+        assertThat(body, Is.<Body>is(exact("some_random_string", MediaType.create("text", "plain"))));
     }
 
     @Test
@@ -134,7 +134,7 @@ public void shouldDecodeUTF16Body() {
 
         // then
         Body body = ((HttpResponse) output.get(0)).getBody();
-        assertThat(body, Is.<Body>is(exact("我说中国话")));
+        assertThat(body, Is.<Body>is(exact("我说中国话", MediaType.create("text", "plain").withCharset(StandardCharsets.UTF_16))));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseEncoderBasicMappingTest.java
Patch:
@@ -1,12 +1,11 @@
-package org.mockserver.server.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.mappers.ContentTypeMapper;
 import org.mockserver.model.*;
-import org.mockserver.server.netty.codec.MockServerResponseEncoder;
 
 import java.util.ArrayList;
 import java.util.List;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseEncoderContentLengthTest.java
Patch:
@@ -1,12 +1,11 @@
-package org.mockserver.server.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.model.ConnectionOptions;
 import org.mockserver.model.HttpResponse;
-import org.mockserver.server.netty.codec.MockServerResponseEncoder;
 
 import java.util.ArrayList;
 import java.util.List;

File: mockserver-core/src/test/java/org/mockserver/codec/MockServerResponseEncoderCookieHeaderTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.server.netty.codec;
+package org.mockserver.codec;
 
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;
@@ -7,7 +7,6 @@
 import org.mockserver.model.Cookie;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpResponse;
-import org.mockserver.server.netty.codec.MockServerResponseEncoder;
 
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;

File: mockserver-core/src/test/java/org/mockserver/mock/action/ActionHandlerTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.Spy;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.log.model.ExpectationMatchLogEntry;
 import org.mockserver.log.model.RequestResponseLogEntry;

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpForwardActionHandlerTest.java
Patch:
@@ -3,9 +3,7 @@
 import com.google.common.util.concurrent.SettableFuture;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpForward;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpForwardClassCallbackActionHandlerTest.java
Patch:
@@ -3,9 +3,7 @@
 import com.google.common.util.concurrent.SettableFuture;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpClassCallback;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpForwardTemplateActionHandlerTest.java
Patch:
@@ -3,9 +3,7 @@
 import com.google.common.util.concurrent.SettableFuture;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;

File: mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.model;
 
+import io.netty.util.CharsetUtil;
 import org.junit.Test;
 import org.mockserver.serialization.Base64Converter;
 
@@ -167,7 +168,7 @@ public void shouldReturnFormattedRequestInToString() {
                 "  \"body\" : {" + NEW_LINE +
                 "    \"type\" : \"STRING\"," + NEW_LINE +
                 "    \"string\" : \"some_body\"," + NEW_LINE +
-                "    \"contentType\" : \"text/plain; charset=utf-8\"" + NEW_LINE +
+                "    \"contentType\" : \"text/plain; charset=iso-8859-1\"" + NEW_LINE +
                 "  }," + NEW_LINE +
                 "  \"delay\" : {" + NEW_LINE +
                 "    \"timeUnit\" : \"SECONDS\"," + NEW_LINE +
@@ -179,7 +180,7 @@ public void shouldReturnFormattedRequestInToString() {
                 "  }" + NEW_LINE +
                 "}",
             response()
-                .withBody("some_body", UTF_8)
+                .withBody("some_body", CharsetUtil.ISO_8859_1)
                 .withStatusCode(666)
                 .withReasonPhrase("randomPhrase")
                 .withHeaders(new Header("some_header", "some_header_value"))

File: mockserver-core/src/test/java/org/mockserver/server/ServletResponseWriterTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.mockserver.mappers.MockServerResponseToHttpServletResponseEncoder;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
+import org.mockserver.servlet.responsewriter.ServletResponseWriter;
 import org.springframework.mock.web.MockHttpServletResponse;
 
 import static java.nio.charset.StandardCharsets.UTF_8;

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockserver.client.MockServerClient;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.matchers.Times;
 import org.mockserver.model.HttpStatusCode;
 import org.mockserver.socket.tls.KeyStoreFactory;

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractMockingIntegrationTestBase.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.client.MockServerClient;
 import org.mockserver.echo.http.EchoServer;
 import org.mockserver.logging.MockServerLogger;

File: mockserver-netty/src/main/java/org/mockserver/callback/CallbackWebSocketServerHandler.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.mockserver.MockServerHandler;
-import org.mockserver.server.netty.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerServerCodec;
 
 import java.util.UUID;
 

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -5,7 +5,7 @@
 import io.netty.channel.ChannelOption;
 import io.netty.channel.WriteBufferWaterMark;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.lifecycle.LifeCycle;
 
 import javax.annotation.Nullable;
@@ -14,7 +14,7 @@
 import java.util.List;
 
 import static java.util.Collections.singletonList;
-import static org.mockserver.client.netty.proxy.ProxyConfiguration.proxyConfiguration;
+import static org.mockserver.proxy.ProxyConfiguration.proxyConfiguration;
 import static org.mockserver.log.model.MessageLogEntry.LogMessageType.SERVER_CONFIGURATION;
 import static org.mockserver.mock.action.ActionHandler.REMOTE_SOCKET;
 import static org.mockserver.mockserver.MockServerHandler.PROXYING;

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -5,7 +5,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.util.AttributeKey;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.serialization.Base64Converter;
 import org.mockserver.serialization.PortBindingSerializer;
 import org.mockserver.configuration.ConfigurationProperties;

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerUnificationInitializer.java
Patch:
@@ -3,7 +3,7 @@
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerAdapter;
 import io.netty.channel.ChannelHandlerContext;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.lifecycle.LifeCycle;
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.unification.PortUnificationHandler;

File: mockserver-netty/src/main/java/org/mockserver/proxy/connect/HttpConnectHandler.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.proxy.relay.RelayConnectHandler;
-import org.mockserver.server.netty.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerServerCodec;
 
 import static org.mockserver.model.HttpResponse.response;
 

File: mockserver-netty/src/main/java/org/mockserver/unification/PortUnificationHandler.java
Patch:
@@ -18,7 +18,7 @@
 import org.apache.commons.collections4.KeyValue;
 import org.apache.commons.collections4.keyvalue.DefaultKeyValue;
 import org.mockserver.callback.CallbackWebSocketServerHandler;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.dashboard.DashboardWebSocketServerHandler;
 import org.mockserver.lifecycle.LifeCycle;
@@ -29,7 +29,7 @@
 import org.mockserver.proxy.socks.Socks4ProxyHandler;
 import org.mockserver.proxy.socks.Socks5ProxyHandler;
 import org.mockserver.proxy.socks.SocksDetector;
-import org.mockserver.server.netty.codec.MockServerServerCodec;
+import org.mockserver.codec.MockServerServerCodec;
 import org.mockserver.socket.tls.SniHandler;
 import org.slf4j.LoggerFactory;
 

File: mockserver-netty/src/test/java/org/mockserver/cli/MainTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.AfterClass;
 import org.junit.Test;
 import org.mockserver.client.MockServerClient;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.echo.http.EchoServer;
 import org.mockserver.model.HttpResponse;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ConcurrencyBasicResponseMockingIntegrationTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import org.junit.*;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.mock.action.ExpectationResponseCallback;
 import org.mockserver.model.HttpRequest;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ConcurrencyResponseWebSocketMockingIntegrationTest.java
Patch:
@@ -3,7 +3,7 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import org.junit.*;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.mock.action.ExpectationResponseCallback;
 import org.mockserver.model.HttpRequest;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ExpectationInitializerIntegrationTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.integration.mocking.initializer.ExpectationInitializerIntegrationExample;
 import org.mockserver.mockserver.MockServer;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ForwardViaHttpProxyMockingIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockserver.client.MockServerClient;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.integration.server.AbstractMockingIntegrationTestBase;
 import org.mockserver.mockserver.MockServer;
 import org.mockserver.model.HttpStatusCode;
@@ -13,7 +13,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.junit.Assert.assertEquals;
 import static org.mockserver.character.Character.NEW_LINE;
-import static org.mockserver.client.netty.proxy.ProxyConfiguration.proxyConfiguration;
+import static org.mockserver.proxy.ProxyConfiguration.proxyConfiguration;
 import static org.mockserver.matchers.Times.once;
 import static org.mockserver.model.Header.header;
 import static org.mockserver.model.HttpClassCallback.callback;

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/ForwardViaHttpsProxyMockingIntegrationTest.java
Patch:
@@ -4,8 +4,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockserver.client.MockServerClient;
-import org.mockserver.client.netty.proxy.ProxyConfiguration;
-import org.mockserver.echo.http.EchoServer;
+import org.mockserver.proxy.ProxyConfiguration;
 import org.mockserver.integration.server.AbstractMockingIntegrationTestBase;
 import org.mockserver.mockserver.MockServer;
 import org.mockserver.model.HttpForward;
@@ -15,7 +14,7 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.junit.Assert.assertEquals;
 import static org.mockserver.character.Character.NEW_LINE;
-import static org.mockserver.client.netty.proxy.ProxyConfiguration.proxyConfiguration;
+import static org.mockserver.proxy.ProxyConfiguration.proxyConfiguration;
 import static org.mockserver.matchers.Times.once;
 import static org.mockserver.model.Header.header;
 import static org.mockserver.model.HttpClassCallback.callback;

File: mockserver-netty/src/test/java/org/mockserver/mock/action/OverridePreFlightRequestIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.model.HttpResponse;
 

File: mockserver-netty/src/test/java/org/mockserver/mock/action/ProxyToInvalidSocketIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.socket.PortFactory;

File: mockserver-netty/src/test/java/org/mockserver/mock/action/ProxyViaLoadBalanceIntegrationTest.java
Patch:
@@ -6,13 +6,12 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.client.NettyHttpClient;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.verify.VerificationTimes;
 
 import java.net.InetSocketAddress;
-import java.util.Arrays;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 

File: mockserver-proxy-war/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockserver.responsewriter.ResponseWriter;
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.PortBindingSerializer;
-import org.mockserver.server.ServletResponseWriter;
+import org.mockserver.servlet.responsewriter.ServletResponseWriter;
 import org.mockserver.socket.tls.KeyAndCertificateFactory;
 
 import javax.servlet.ServletContextEvent;

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyServletTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.RetrieveType;
 import org.mockserver.scheduler.Scheduler;
-import org.mockserver.server.ServletResponseWriter;
+import org.mockserver.servlet.responsewriter.ServletResponseWriter;
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;
 

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockserver.responsewriter.ResponseWriter;
 import org.mockserver.scheduler.Scheduler;
 import org.mockserver.serialization.PortBindingSerializer;
+import org.mockserver.servlet.responsewriter.ServletResponseWriter;
 import org.mockserver.socket.tls.KeyAndCertificateFactory;
 
 import javax.servlet.ServletContextEvent;

File: mockserver-war/src/test/java/org/mockserver/server/AbstractExtendedDeployableWARMockingIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.server;
 
+import com.google.common.net.MediaType;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -273,7 +274,7 @@ public void shouldReturnStatus() {
                 .withHeader(CONTENT_TYPE.toString(), "application/json; charset=utf-8")
                 .withBody("{" + NEW_LINE +
                     "  \"ports\" : [ " + getServerPort() + " ]" + NEW_LINE +
-                    "}"),
+                    "}", MediaType.JSON_UTF_8),
             makeRequest(
                 request()
                     .withPath(calculatePath("mockserver/status"))
@@ -288,7 +289,7 @@ public void shouldReturnStatus() {
                 .withHeader(CONTENT_TYPE.toString(), "application/json; charset=utf-8")
                 .withBody("{" + NEW_LINE +
                     "  \"ports\" : [ " + getServerSecurePort() + " ]" + NEW_LINE +
-                    "}"),
+                    "}", MediaType.JSON_UTF_8),
             makeRequest(
                 request()
                     .withSecure(true)

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.RetrieveType;
 import org.mockserver.scheduler.Scheduler;
+import org.mockserver.servlet.responsewriter.ServletResponseWriter;
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;
 

File: mockserver-core/src/test/java/org/mockserver/matchers/XmlSchemaMatcherTest.java
Patch:
@@ -136,7 +136,7 @@ public void shouldNotMatchXml() {
     }
 
     @Test
-    public void shouldHandleExpection() {
+    public void shouldHandleExpectation() {
         Level originalLevel = logLevel();
         try {
             // given

File: mockserver-core/src/test/java/org/mockserver/mock/action/ActionHandlerTest.java
Patch:
@@ -35,7 +35,6 @@
 import static org.mockserver.log.model.MessageLogEntry.LogMessageType.FORWARDED_REQUEST;
 import static org.mockserver.mock.action.ActionHandler.REMOTE_SOCKET;
 import static org.mockserver.model.Delay.milliseconds;
-import static org.mockserver.model.Delay.minutes;
 import static org.mockserver.model.HttpClassCallback.callback;
 import static org.mockserver.model.HttpError.error;
 import static org.mockserver.model.HttpForward.forward;
@@ -87,7 +86,6 @@ public class ActionHandlerTest {
     @Spy
     private HttpRequestToCurlSerializer httpRequestToCurlSerializer = new HttpRequestToCurlSerializer();
 
-
     @Mock
     private NettyHttpClient mockNettyHttpClient;
 
@@ -108,7 +106,7 @@ public void setupMocks() {
         mockHttpStateHandler = mock(HttpStateHandler.class);
         scheduler = spy(new Scheduler());
         when(mockHttpStateHandler.getScheduler()).thenReturn(scheduler);
-        actionHandler = new ActionHandler(mockHttpStateHandler, null);
+        actionHandler = new ActionHandler(null, mockHttpStateHandler, null);
 
         initMocks(this);
         request = request("some_path");

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -509,7 +509,7 @@ public void shouldCallbackForResponseToSpecifiedClassWithPrecannedResponse() {
     @Test
     public void shouldSupportBatchedExpectations() throws Exception {
         // when
-        new NettyHttpClient().sendRequest(
+        new NettyHttpClient(clientEventLoopGroup, null).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + this.getServerPort())
@@ -1652,7 +1652,7 @@ public void shouldReset() {
     @Test
     public void shouldReturnErrorForInvalidExpectation() throws Exception {
         // when
-        HttpResponse httpResponse = new NettyHttpClient().sendRequest(
+        HttpResponse httpResponse = new NettyHttpClient(clientEventLoopGroup, null).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + this.getServerPort())
@@ -1683,7 +1683,7 @@ public void shouldReturnErrorForInvalidExpectation() throws Exception {
     @Test
     public void shouldReturnErrorForInvalidRequest() throws Exception {
         // when
-        HttpResponse httpResponse = new NettyHttpClient().sendRequest(
+        HttpResponse httpResponse = new NettyHttpClient(clientEventLoopGroup, null).sendRequest(
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + this.getServerPort())

File: mockserver-netty/src/main/java/org/mockserver/integration/ClientAndServer.java
Patch:
@@ -41,9 +41,9 @@ public boolean isRunning() {
     @Override
     public MockServerClient stop() {
         mockServer.stop();
-        return super.stop();
+        return stop(true);
     }
-    
+
     /**
      * @deprecated use getLocalPort instead of getPort
      */

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -63,7 +63,7 @@ public MockServerHandler(LifeCycle server, HttpStateHandler httpStateHandler, @N
         this.httpStateHandler = httpStateHandler;
         this.mockServerLogger = httpStateHandler.getMockServerLogger();
         this.portBindingSerializer = new PortBindingSerializer(mockServerLogger);
-        this.actionHandler = new ActionHandler(httpStateHandler, proxyConfiguration);
+        this.actionHandler = new ActionHandler(server.getEventLoopGroup(), httpStateHandler, proxyConfiguration);
     }
 
     private static boolean isProxyingRequest(ChannelHandlerContext ctx) {

File: mockserver-netty/src/test/java/org/mockserver/lifecycle/StopIntegrationTest.java
Patch:
@@ -31,7 +31,7 @@ public class StopIntegrationTest {
     public void returnsExceptionWhenAlreadyStopped() {
         // given
         exception.expect(IllegalStateException.class);
-        exception.expectMessage(Matchers.containsString("MockServerClient has already been closed, please create new MockServerClient instance"));
+        exception.expectMessage(Matchers.containsString("Request sent after client has been stopped - the event loop has been shutdown so it is not possible to send a request"));
 
         // when - server started
         new MockServer(MOCK_SERVER_PORT);

File: mockserver-core/src/main/java/org/mockserver/serialization/model/BinaryBodyDTO.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.serialization.model;
 
-import com.google.common.net.MediaType;
 import org.mockserver.model.BinaryBody;
 
 import javax.xml.bind.DatatypeConverter;
@@ -28,6 +27,6 @@ public String getValue() {
     }
 
     public BinaryBody buildObject() {
-        return new BinaryBody(DatatypeConverter.parseBase64Binary(value), getMediaType());
+        return new BinaryBody(DatatypeConverter.parseBase64Binary(value == null ? "" : value), getMediaType());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -232,6 +232,8 @@ private String formatProcessingReport(ProcessingReport validate) {
                 }
                 oneOfErrorMessage.append(" but ").append(String.valueOf(processingMessage.asJson().get("matched"))).append(" found");
                 validationErrors.add(oneOfErrorMessage.toString() + (fieldPointer.isEmpty() ? "" : " for field \"" + fieldPointer + "\""));
+            } else if (fieldPointer.endsWith("/times") && processingMessage.toString().contains("has properties which are not allowed by the schema") && String.valueOf(processingMessage.asJson().get("schema")).contains("verificationTimes")) {
+                validationErrors.add(processingMessage.getMessage() + " for field \"" + fieldPointer + "\", allowed fields are [\"atLeast\", \"atMost\"]");
             } else {
                 validationErrors.add(processingMessage.getMessage() + (fieldPointer.isEmpty() ? "" : " for field \"" + fieldPointer + "\""));
             }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/BinaryBodyDTO.java
Patch:
@@ -28,6 +28,6 @@ public String getValue() {
     }
 
     public BinaryBody buildObject() {
-        return new BinaryBody(DatatypeConverter.parseBase64Binary(value), (contentType != null ? MediaType.parse(contentType) : null));
+        return new BinaryBody(DatatypeConverter.parseBase64Binary(value), getMediaType());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/JsonBodyDTO.java
Patch:
@@ -32,6 +32,6 @@ public MatchType getMatchType() {
     }
 
     public JsonBody buildObject() {
-        return new JsonBody(getJson(), (contentType != null ? MediaType.parse(contentType) : null), matchType);
+        return new JsonBody(getJson(), getMediaType(), matchType);
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/StringBodyDTO.java
Patch:
@@ -30,6 +30,6 @@ public boolean isSubString() {
     }
 
     public StringBody buildObject() {
-        return new StringBody(string, subString, (contentType != null ? MediaType.parse(contentType) : null));
+        return new StringBody(string, subString, getMediaType());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/serialization/model/XmlBodyDTO.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.serialization.model;
 
+import com.google.common.net.MediaType;
 import org.mockserver.model.Body;
 import org.mockserver.model.XmlBody;
 
@@ -24,6 +25,6 @@ public String getXml() {
     }
 
     public XmlBody buildObject() {
-        return new XmlBody(getXml());
+        return new XmlBody(getXml(), getMediaType());
     }
 }

File: mockserver-netty/src/main/java/org/mockserver/dashboard/DashboardHandler.java
Patch:
@@ -42,6 +42,8 @@ public DashboardHandler() {
         MIME_MAP.put("json", "application/json; charset=UTF-8");
         MIME_MAP.put("html", "text/html; charset=utf-8");
         MIME_MAP.put("ico", "image/x-icon");
+        MIME_MAP.put("woff2", "application/font-woff2");
+        MIME_MAP.put("ttf", "application/octet-stream");
         MIME_MAP.put("png", "image/png");
     }
 

File: mockserver-examples/src/main/java/org/mockserver/examples/mockserver/RequestMatcherExamples.java
Patch:
@@ -20,6 +20,7 @@
 import static org.mockserver.model.NottableString.string;
 import static org.mockserver.model.Parameter.param;
 import static org.mockserver.model.ParameterBody.params;
+import static org.mockserver.model.RegexBody.regex;
 import static org.mockserver.model.StringBody.exact;
 import static org.mockserver.model.StringBody.subString;
 import static org.mockserver.model.XPathBody.xpath;
@@ -270,7 +271,7 @@ public void matchRequestByRegexBody() {
         new MockServerClient("localhost", 1080)
             .when(
                 request()
-                    .withBody("starts_with_.*")
+                    .withBody(regex("starts_with_.*"))
             )
             .respond(
                 response()

File: mockserver-core/src/main/java/org/mockserver/file/FileReader.java
Patch:
@@ -11,8 +11,8 @@
 public class FileReader {
 
     public static String readFileFromClassPathOrPath(String filePath) {
-        try {
-            return IOUtils.toString(openStreamToFileFromClassPathOrPath(filePath), StandardCharsets.UTF_8.name());
+        try (InputStream inputStream = openStreamToFileFromClassPathOrPath(filePath)) {
+            return IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());
         } catch (IOException ioe) {
             throw new RuntimeException("Exception while loading \"" + filePath + "\"", ioe);
         }

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.util.concurrent.SettableFuture;
 import org.apache.commons.lang3.StringUtils;
 import org.mockserver.Version;
+import org.mockserver.client.MockServerEventBus.MockServerEvent;
 import org.mockserver.client.netty.NettyHttpClient;
 import org.mockserver.client.netty.SocketConnectionException;
 import org.mockserver.client.serialization.*;
@@ -197,6 +198,7 @@ public List<Integer> bind(Integer... ports) {
      * Stop MockServer gracefully (only support for Netty version, not supported for WAR version)
      */
     public MockServerClient stop() {
+    	MockServerEventBus.getInstance().publish(MockServerEvent.STOP);
         return stop(false);
     }
 
@@ -228,6 +230,7 @@ public void close() {
      * Reset MockServer by clearing all expectations
      */
     public MockServerClient reset() {
+    	MockServerEventBus.getInstance().publish(MockServerEvent.RESET);
         sendRequest(request().withMethod("PUT").withPath(calculatePath("reset")));
         return clientClass.cast(this);
     }

File: mockserver-core/src/main/java/org/mockserver/client/netty/websocket/WebSocketClient.java
Patch:
@@ -88,14 +88,15 @@ void receivedTextWebSocketFrame(TextWebSocketFrame textWebSocketFrame) {
     }
 
     public void stopClient() {
+    	group.shutdownGracefully();
         try {
             if (channel != null) {
-                channel.closeFuture().sync();
+                channel.close().sync();
+                channel = null;
             }
         } catch (InterruptedException e) {
             throw new WebSocketException("Exception while closing client", e);
         }
-        group.shutdownGracefully();
     }
 
     public WebSocketClient registerExpectationCallback(ExpectationResponseCallback expectationResponseCallback) {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/deserializers/collections/KeysToMultiValuesDeserializer.java
Patch:
@@ -42,7 +42,7 @@ private T deserializeObject(JsonParser jsonParser, DeserializationContext ctxt,
             JsonToken token = jsonParser.nextToken();
             switch (token) {
                 case FIELD_NAME:
-                    key = ctxt.readValue(jsonParser, NottableString.class);
+                    key = string(jsonParser.getText());
                     break;
                 case START_ARRAY:
                     enteries.withEntry(key, ctxt.readValue(jsonParser, NottableString[].class));

File: mockserver-core/src/main/java/org/mockserver/client/serialization/java/ExpectationToJavaSerializer.java
Patch:
@@ -31,7 +31,7 @@ public String serialize(int numberOfSpacesToIndent, Expectation expectation) {
             appendNewLineAndIndent(numberOfSpacesToIndent * INDENT_SIZE, output).append("new MockServerClient(\"localhost\", 1080)");
             appendNewLineAndIndent(numberOfSpacesToIndent * INDENT_SIZE, output).append(".when(");
             output.append(new HttpRequestToJavaSerializer().serialize(numberOfSpacesToIndent + 1, expectation.getHttpRequest()));
-            if (expectation.getTimeToLive() != null) {
+            if (expectation.getTimes() != null) {
                 output.append(",").append(new TimesToJavaSerializer().serialize(numberOfSpacesToIndent + 1, expectation.getTimes()));
             }
             if (expectation.getTimeToLive() != null) {

File: mockserver-core/src/test/java/org/mockserver/client/serialization/java/ExpectationToJavaSerializerTest.java
Patch:
@@ -37,7 +37,8 @@ public void shouldSerializeArrayOfObjectsAsJava() {
                 "new MockServerClient(\"localhost\", 1080)" + NEW_LINE +
                 ".when(" + NEW_LINE +
                 "        request()" + NEW_LINE +
-                "                .withPath(\"somePathOne\")" + NEW_LINE +
+                "                .withPath(\"somePathOne\"),\n" +
+                "        Times.once()" + NEW_LINE +
                 ")" + NEW_LINE +
                 ".respond(" + NEW_LINE +
                 "        response()" + NEW_LINE +

File: mockserver-core/src/test/java/org/mockserver/filters/LogFilterTest.java
Patch:
@@ -106,7 +106,7 @@ public void shouldClearWithRequestMatcher() {
             new ExpectationMatchLogEntry(request("request_four"), new Expectation(request("request_four")).thenRespond(response("response_four")))
         ));
         assertThat(logFilter.retrieveExpectations(null), contains(
-            new Expectation(request("request_three"), Times.once(), TimeToLive.unlimited()).thenRespond(response("response_three"))
+            new Expectation(request("request_three"), Times.once(), null).thenRespond(response("response_three"))
         ));
         assertThat(logFilter.retrieveLogEntries(null, expectationLogPredicate, logEntryToLogEntry), IsIterableContainingInOrder.<LogEntry>contains(
             new RequestResponseLogEntry(request("request_three"), response("response_three"))
@@ -224,8 +224,8 @@ public void shouldRetrieveRecordedExpectations() {
 
         // then
         assertThat(logFilter.retrieveExpectations(null), contains(
-            new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited()).thenRespond(response("response_one")),
-            new Expectation(request("request_three"), Times.once(), TimeToLive.unlimited()).thenRespond(response("response_three"))
+            new Expectation(request("request_one"), Times.once(), null).thenRespond(response("response_one")),
+            new Expectation(request("request_three"), Times.once(), null).thenRespond(response("response_three"))
         ));
         assertThat(logFilter.retrieveLogEntries(null, expectationLogPredicate, logEntryToLogEntry), IsIterableContainingInOrder.<LogEntry>contains(
             new RequestResponseLogEntry(request("request_one"), response("response_one")),

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -199,7 +199,7 @@ public void shouldRetrieveRecordedExpectations() {
 
         // then
         assertResponse(200, expectationSerializer.serialize(Collections.singletonList(
-            new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited()).thenRespond(response("response_one"))
+            new Expectation(request("request_one"), Times.once(), null).thenRespond(response("response_one"))
         )));
     }
 

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyServletTest.java
Patch:
@@ -195,7 +195,7 @@ public void shouldRetrieveRecordedExpectations() {
 
         // then
         assertResponse(response, 200, expectationSerializer.serialize(Collections.singletonList(
-            new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited()).thenRespond(response("response_one"))
+            new Expectation(request("request_one"), Times.once(), null).thenRespond(response("response_one"))
         )));
     }
 

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -192,7 +192,7 @@ public void shouldRetrieveRecordedExpectations() {
 
         // then
         assertResponse(response, 200, expectationSerializer.serialize(Collections.singletonList(
-            new Expectation(request("request_one"), Times.once(), TimeToLive.unlimited()).thenRespond(response("response_one"))
+            new Expectation(request("request_one"), Times.once(), null).thenRespond(response("response_one"))
         )));
     }
 

File: mockserver-client-java/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -122,7 +122,7 @@ public String contextPath() {
     }
 
     private String calculatePath(String path) {
-        String cleanedPath = path;
+        String cleanedPath = "/mockserver/" + path;
         if (!Strings.isNullOrEmpty(contextPath)) {
             cleanedPath =
                 (!contextPath.startsWith("/") ? "/" : "") +

File: mockserver-core/src/main/java/org/mockserver/log/model/RequestResponseLogEntry.java
Patch:
@@ -27,7 +27,7 @@ public HttpResponse getHttpResponse() {
 
     @JsonIgnore
     public Expectation getExpectation() {
-        return new Expectation(getHttpRequests().get(0), Times.once(), TimeToLive.unlimited()).thenRespond(httpResponse);
+        return new Expectation(getHttpRequests().get(0), Times.once(), null).thenRespond(httpResponse);
     }
 
 }

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -842,7 +842,7 @@ public void shouldReturnErrorForInvalidRequestToClear() throws Exception {
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + getProxyPort())
-                .withPath(addContextToPath("/clear"))
+                .withPath(addContextToPath("mockserver/clear"))
                 .withBody("{" + NEW_LINE +
                     "    \"path\" : 500," + NEW_LINE +
                     "    \"method\" : true," + NEW_LINE +
@@ -865,7 +865,7 @@ public void shouldReturnErrorForInvalidRequestToVerify() throws Exception {
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + getProxyPort())
-                .withPath(addContextToPath("/verify"))
+                .withPath(addContextToPath("mockserver/verify"))
                 .withBody("{" + NEW_LINE +
                     "    \"httpRequest\": {" + NEW_LINE +
                     "        \"path\": \"/simple\"" + NEW_LINE +
@@ -887,7 +887,7 @@ public void shouldReturnErrorForInvalidRequestToVerifySequence() throws Exceptio
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + getProxyPort())
-                .withPath(addContextToPath("/verifySequence"))
+                .withPath(addContextToPath("mockserver/verifySequence"))
                 .withBody("{" + NEW_LINE +
                     "    \"httpRequest\": {" + NEW_LINE +
                     "        \"path\": false" + NEW_LINE +

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -513,7 +513,7 @@ public void shouldSupportBatchedExpectations() throws Exception {
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + this.getServerPort())
-                .withPath(addContextToPath("/expectation"))
+                .withPath(addContextToPath("mockserver/expectation"))
                 .withBody("" +
                     "[" +
                     new ExpectationSerializer(new MockServerLogger())
@@ -1677,7 +1677,7 @@ public void shouldReturnErrorForInvalidExpectation() throws Exception {
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + this.getServerPort())
-                .withPath(addContextToPath("/expectation"))
+                .withPath(addContextToPath("mockserver/expectation"))
                 .withBody("{" + NEW_LINE +
                     "  \"httpRequest\" : {" + NEW_LINE +
                     "    \"path\" : \"/path_one\"" + NEW_LINE +
@@ -1708,7 +1708,7 @@ public void shouldReturnErrorForInvalidRequest() throws Exception {
             request()
                 .withMethod("PUT")
                 .withHeader(HOST.toString(), "localhost:" + this.getServerPort())
-                .withPath(addContextToPath("/clear"))
+                .withPath(addContextToPath("mockserver/clear"))
                 .withBody("{" + NEW_LINE +
                     "    \"path\" : 500," + NEW_LINE +
                     "    \"method\" : true," + NEW_LINE +

File: mockserver-war/src/test/java/org/mockserver/server/AbstractExtendedDeployableWARMockingIntegrationTest.java
Patch:
@@ -277,7 +277,7 @@ public void shouldReturnStatus() {
                     "}"),
             makeRequest(
                 request()
-                    .withPath(calculatePath("status"))
+                    .withPath(calculatePath("mockserver/status"))
                     .withMethod("PUT"),
                 headersToIgnore)
         );
@@ -293,7 +293,7 @@ public void shouldReturnStatus() {
             makeRequest(
                 request()
                     .withSecure(true)
-                    .withPath(calculatePath("status"))
+                    .withPath(calculatePath("mockserver/status"))
                     .withMethod("PUT"),
                 headersToIgnore)
         );

File: mockserver-core/src/main/java/org/mockserver/client/netty/websocket/WebSocketClientHandler.java
Patch:
@@ -54,7 +54,7 @@ public void channelActive(ChannelHandlerContext ctx) {
 
     @Override
     public void channelInactive(ChannelHandlerContext ctx) {
-        mockServerLogger.debug("web socket client disconnected");
+        mockServerLogger.trace("web socket client disconnected");
     }
 
     @Override
@@ -65,7 +65,7 @@ public void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception
             if (httpResponse.headers().contains(UPGRADE, WEBSOCKET, true) && !handshaker.isHandshakeComplete()) {
                 handshaker.finishHandshake(ch, httpResponse);
                 webSocketClient.registrationFuture().set(httpResponse.headers().get("X-CLIENT-REGISTRATION-ID"));
-                mockServerLogger.debug("web socket client " + webSocketClient.registrationFuture().get() + " connected!");
+                mockServerLogger.trace("web socket client " + webSocketClient.registrationFuture().get() + " connected!");
             } else if (httpResponse.status().equals(HttpResponseStatus.NOT_IMPLEMENTED)) {
                 String message = readRequestBody(httpResponse);
                 webSocketClient.registrationFuture().setException(new WebSocketException(message));
@@ -78,7 +78,7 @@ public void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception
             if (frame instanceof TextWebSocketFrame) {
                 webSocketClient.receivedTextWebSocketFrame((TextWebSocketFrame) frame);
             } else if (frame instanceof CloseWebSocketFrame) {
-                mockServerLogger.debug("web socket client received request to close");
+                mockServerLogger.trace("web socket client received request to close");
                 ch.close();
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/ExpectationSerializer.java
Patch:
@@ -80,7 +80,7 @@ public Expectation deserialize(String jsonExpectation) {
                 }
                 return expectation;
             } else {
-                mockServerLogger.info("Validation failed:{}" + NEW_LINE + " Expectation:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonExpectation, expectationValidator.getSchema());
+                mockServerLogger.error("Validation failed:{}" + NEW_LINE + " Expectation:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonExpectation, expectationValidator.getSchema());
                 throw new IllegalArgumentException(validationErrors);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/HttpRequestSerializer.java
Patch:
@@ -121,7 +121,7 @@ public HttpRequest deserialize(String jsonHttpRequest) {
                 }
                 return httpRequest;
             } else {
-                mockServerLogger.info("Validation failed:{}" + NEW_LINE + " HttpRequest:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonHttpRequest, httpRequestValidator.getSchema());
+                mockServerLogger.error("Validation failed:{}" + NEW_LINE + " HttpRequest:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonHttpRequest, httpRequestValidator.getSchema());
                 throw new IllegalArgumentException(validationErrors);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/HttpResponseSerializer.java
Patch:
@@ -93,7 +93,7 @@ public HttpResponse deserialize(String jsonHttpResponse) {
                 return httpResponse;
             } else {
 
-                mockServerLogger.info("Validation failed:{}" + NEW_LINE + " HttpResponse:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonHttpResponse, httpResponseValidator.getSchema());
+                mockServerLogger.error("Validation failed:{}" + NEW_LINE + " HttpResponse:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonHttpResponse, httpResponseValidator.getSchema());
                 throw new IllegalArgumentException(validationErrors);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/LogEventJsonSerializer.java
Patch:
@@ -54,7 +54,7 @@ public MessageLogEntry deserialize(String jsonMessageLogEntry) {
             try {
                 messageLogEntry = objectMapper.readValue(jsonMessageLogEntry, MessageLogEntry.class);
             } catch (Exception e) {
-                mockServerLogger.info("Exception while parsing MessageLogEntry for [" + jsonMessageLogEntry + "]", e);
+                mockServerLogger.error("Exception while parsing MessageLogEntry for [" + jsonMessageLogEntry + "]", e);
                 throw new RuntimeException("Exception while parsing MessageLogEntry for [" + jsonMessageLogEntry + "]", e);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/PortBindingSerializer.java
Patch:
@@ -32,7 +32,7 @@ public PortBinding deserialize(String jsonPortBinding) {
             try {
                 portBinding = objectMapper.readValue(jsonPortBinding, PortBinding.class);
             } catch (Exception e) {
-                mockServerLogger.info("Exception while parsing PortBinding for [" + jsonPortBinding + "]", e);
+                mockServerLogger.error("Exception while parsing PortBinding for [" + jsonPortBinding + "]", e);
                 throw new RuntimeException("Exception while parsing PortBinding for [" + jsonPortBinding + "]", e);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/VerificationSequenceSerializer.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockserver.verify.VerificationSequence;
 
 import static org.mockserver.character.Character.NEW_LINE;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.VERIFICATION_FAILED;
 
 /**
  * @author jamesdbloom
@@ -51,7 +52,7 @@ public VerificationSequence deserialize(String jsonVerificationSequence) {
                 }
                 return verificationSequence;
             } else {
-                mockServerLogger.info("Validation failed:{}" + NEW_LINE + " VerificationSequence:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonVerificationSequence, verificationSequenceValidator.getSchema());
+                mockServerLogger.info(VERIFICATION_FAILED, "Validation failed:{}" + NEW_LINE + " VerificationSequence:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonVerificationSequence, verificationSequenceValidator.getSchema());
                 throw new IllegalArgumentException(validationErrors);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/VerificationSerializer.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockserver.verify.Verification;
 
 import static org.mockserver.character.Character.NEW_LINE;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.VERIFICATION_FAILED;
 
 /**
  * @author jamesdbloom
@@ -51,7 +52,7 @@ public Verification deserialize(String jsonVerification) {
                 }
                 return verification;
             } else {
-                mockServerLogger.info("Validation failed:{}" + NEW_LINE + " Verification:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonVerification, verificationValidator.getSchema());
+                mockServerLogger.info(VERIFICATION_FAILED, "Validation failed:{}" + NEW_LINE + " Verification:{}" + NEW_LINE + " Schema:{}", validationErrors, jsonVerification, verificationValidator.getSchema());
                 throw new IllegalArgumentException(validationErrors);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/filters/MockServerEventLog.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.configuration.ConfigurationProperties.maxExpectations;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.VERIFICATION_FAILED;
 
 /**
  * @author jamesdbloom
@@ -180,7 +181,7 @@ public String verify(Verification verification) {
                 String serializedRequestToBeVerified = httpRequestSerializer.serialize(true, verification.getHttpRequest());
                 String serializedAllRequestInLog = allRequestsArray.size() == 1 ? httpRequestSerializer.serialize(true, allRequestsArray.get(0)) : httpRequestSerializer.serialize(true, allRequestsArray);
                 failureMessage = "Request not found " + verification.getTimes() + ", expected:<" + serializedRequestToBeVerified + "> but was:<" + serializedAllRequestInLog + ">";
-                logFormatter.info(verification.getHttpRequest(), "request not found " + verification.getTimes() + ", expected:{}" + NEW_LINE + " but was:{}", verification.getHttpRequest(), allRequestsArray.size() == 1 ? allRequestsArray.get(0) : allRequestsArray);
+                logFormatter.info(VERIFICATION_FAILED, verification.getHttpRequest(), "request not found " + verification.getTimes() + ", expected:{}" + NEW_LINE + " but was:{}", verification.getHttpRequest(), allRequestsArray.size() == 1 ? allRequestsArray.get(0) : allRequestsArray);
             }
         }
 
@@ -215,7 +216,7 @@ public String verify(VerificationSequence verificationSequence) {
                         String serializedRequestToBeVerified = httpRequestSerializer.serialize(true, verificationSequence.getHttpRequests());
                         String serializedAllRequestInLog = allRequestsArray.size() == 1 ? httpRequestSerializer.serialize(true, allRequestsArray.get(0)) : httpRequestSerializer.serialize(true, allRequestsArray);
                         failureMessage = "Request sequence not found, expected:<" + serializedRequestToBeVerified + "> but was:<" + serializedAllRequestInLog + ">";
-                        logFormatter.info(verificationSequence.getHttpRequests(), "request sequence not found, expected:{}" + NEW_LINE + " but was:{}", verificationSequence.getHttpRequests(), allRequestsArray.size() == 1 ? allRequestsArray.get(0) : allRequestsArray);
+                        logFormatter.info(VERIFICATION_FAILED, verificationSequence.getHttpRequests(), "request sequence not found, expected:{}" + NEW_LINE + " but was:{}", verificationSequence.getHttpRequests(), allRequestsArray.size() == 1 ? allRequestsArray.get(0) : allRequestsArray);
                         break;
                     }
                 }

File: mockserver-core/src/main/java/org/mockserver/mappers/ContentTypeMapper.java
Patch:
@@ -105,9 +105,9 @@ public static Charset getCharsetFromContentTypeHeader(String contentType) {
                 try {
                     charset = Charset.forName(charsetName);
                 } catch (UnsupportedCharsetException uce) {
-                    MOCK_SERVER_LOGGER.info("Unsupported character set {} in Content-Type header: {}.", StringUtils.substringAfterLast(contentType, CHARSET.toString() + HttpConstants.EQUALS), contentType);
+                    MOCK_SERVER_LOGGER.warn("Unsupported character set {} in Content-Type header: {}.", StringUtils.substringAfterLast(contentType, CHARSET.toString() + HttpConstants.EQUALS), contentType);
                 } catch (IllegalCharsetNameException icne) {
-                    MOCK_SERVER_LOGGER.info("Illegal character set {} in Content-Type header: {}.", StringUtils.substringAfterLast(contentType, CHARSET.toString() + HttpConstants.EQUALS), contentType);
+                    MOCK_SERVER_LOGGER.warn("Illegal character set {} in Content-Type header: {}.", StringUtils.substringAfterLast(contentType, CHARSET.toString() + HttpConstants.EQUALS), contentType);
                 }
             } else if (UTF_8_CONTENT_TYPES.contains(contentType)) {
                 charset = CharsetUtil.UTF_8;

File: mockserver-core/src/main/java/org/mockserver/matchers/XPathStringMatcher.java
Patch:
@@ -36,7 +36,7 @@ public boolean matches(final HttpRequest context, final String matched) {
         boolean result = false;
 
         if (xpathExpression == null) {
-            mockServerLogger.debug(context, "Attempting match against null XPath Expression for [" + matched + "]" + new RuntimeException("Attempting match against null XPath Expression for [" + matched + "]"));
+            mockServerLogger.error(context, "Attempting match against null XPath Expression for [" + matched + "]" + new RuntimeException("Attempting match against null XPath Expression for [" + matched + "]"));
         } else if (matcher.equals(matched)) {
             result = true;
         } else if (matched != null) {
@@ -45,7 +45,7 @@ public boolean matches(final HttpRequest context, final String matched) {
                 result = (Boolean) xpathExpression.evaluate(stringToXmlDocumentParser.buildDocument(matched, new StringToXmlDocumentParser.ErrorLogger() {
                     @Override
                     public void logError(final String matched, final Exception exception) {
-                        mockServerLogger.debug(context, "SAXParseException while performing match between [" + matcher + "] and [" + matched + "]", exception);
+                        mockServerLogger.warn(context, "SAXParseException while performing match between [" + matcher + "] and [" + matched + "]", exception);
                     }
                 }), XPathConstants.BOOLEAN);
             } catch (Exception e) {

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardClassCallbackActionHandler.java
Patch:
@@ -30,7 +30,7 @@ private ExpectationForwardCallback instantiateCallback(HttpClassCallback httpCla
                 Constructor<? extends ExpectationForwardCallback> constructor = expectationResponseCallbackClass.getConstructor();
                 return constructor.newInstance();
             } else {
-                mockServerLogger.error(null, httpClassCallback.getCallbackClass() + " does not implement " + ExpectationForwardCallback.class.getCanonicalName() + " which required for forwarded requests generated from a class callback");
+                mockServerLogger.error(httpClassCallback.getCallbackClass() + " does not implement " + ExpectationForwardCallback.class.getCanonicalName() + " which required for forwarded requests generated from a class callback");
             }
         } catch (ClassNotFoundException e) {
             mockServerLogger.error("ClassNotFoundException - while trying to instantiate ExpectationResponseCallback class \"" + httpClassCallback.getCallbackClass() + "\"", e);

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardObjectCallbackActionHandler.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockserver.callback.WebSocketRequestCallback;
 import org.mockserver.callback.WebSocketClientRegistry;
 import org.mockserver.client.netty.NettyHttpClient;
+import org.mockserver.log.model.MessageLogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.model.HttpObjectCallback;
@@ -16,6 +17,7 @@
 
 import static org.mockserver.callback.WebSocketClientRegistry.WEB_SOCKET_CORRELATION_ID_HEADER_NAME;
 import static org.mockserver.character.Character.NEW_LINE;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.EXPECTATION_RESPONSE;
 
 /**
  * @author jamesdbloom
@@ -44,7 +46,7 @@ public void run() {
                         try {
                             HttpResponse response = responseFuture.get();
                             responseWriter.writeResponse(request, response, false);
-                            logFormatter.info(request, "returning response:{}" + NEW_LINE + " for request:{}" + NEW_LINE + " for object callback action:{}", response, request, httpObjectCallback);
+                            logFormatter.info(EXPECTATION_RESPONSE, request, "returning response:{}" + NEW_LINE + " for request:{}" + NEW_LINE + " for object callback action:{}", response, request, httpObjectCallback);
                         } catch (Exception ex) {
                             logFormatter.error(request, ex, ex.getMessage());
                         }

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpResponseClassCallbackActionHandler.java
Patch:
@@ -31,7 +31,7 @@ private ExpectationResponseCallback instantiateCallback(HttpClassCallback httpCl
                 Constructor<? extends ExpectationResponseCallback> constructor = expectationResponseCallbackClass.getConstructor();
                 return constructor.newInstance();
             } else {
-                mockServerLogger.error(null, httpClassCallback.getCallbackClass() + " does not implement " + ExpectationForwardCallback.class.getCanonicalName() + " which required for forwarded requests generated from a class callback");
+                mockServerLogger.error(httpClassCallback.getCallbackClass() + " does not implement " + ExpectationForwardCallback.class.getCanonicalName() + " which required for forwarded requests generated from a class callback");
             }
         } catch (ClassNotFoundException e) {
             mockServerLogger.error("ClassNotFoundException - while trying to instantiate ExpectationResponseCallback class \"" + httpClassCallback.getCallbackClass() + "\"", e);

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpResponseObjectCallbackActionHandler.java
Patch:
@@ -13,6 +13,7 @@
 
 import static org.mockserver.callback.WebSocketClientRegistry.WEB_SOCKET_CORRELATION_ID_HEADER_NAME;
 import static org.mockserver.character.Character.NEW_LINE;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.EXPECTATION_RESPONSE;
 
 /**
  * @author jamesdbloom
@@ -33,7 +34,7 @@ public void handle(final HttpObjectCallback httpObjectCallback, final HttpReques
             @Override
             public void handle(HttpResponse response) {
                 responseWriter.writeResponse(request, response.removeHeader(WEB_SOCKET_CORRELATION_ID_HEADER_NAME), false);
-                logFormatter.info(request, "returning response:{}" + NEW_LINE + " for request:{}" + NEW_LINE + " for object callback action:{}", response, request, httpObjectCallback);
+                logFormatter.info(EXPECTATION_RESPONSE, request, "returning response:{}" + NEW_LINE + " for request:{}" + NEW_LINE + " for object callback action:{}", response, request, httpObjectCallback);
             }
         });
         webSocketClientRegistry.sendClientMessage(clientId, request.clone().withHeader(WEB_SOCKET_CORRELATION_ID_HEADER_NAME, webSocketCorrelationId));

File: mockserver-core/src/main/java/org/mockserver/server/netty/codec/MockServerRequestDecoder.java
Patch:
@@ -69,7 +69,7 @@ private void setQueryString(HttpRequest httpRequest, QueryStringDecoder queryStr
         try {
             parameters.withEntries(queryStringDecoder.parameters());
         } catch (IllegalArgumentException iae) {
-            mockServerLogger.debug(httpRequest, "Exception while parsing query string", iae);
+            mockServerLogger.error(httpRequest, "Exception while parsing query string", iae);
         }
         httpRequest.withQueryStringParameters(parameters);
     }

File: mockserver-core/src/main/java/org/mockserver/socket/KeyStoreFactory.java
Patch:
@@ -16,6 +16,7 @@
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
 
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.SERVER_CONFIGURATION;
 import static org.mockserver.socket.KeyAndCertificateFactory.keyAndCertificateFactory;
 
 /**
@@ -131,7 +132,7 @@ public synchronized SSLContext sslContext() {
 
     private SSLContext getSSLContextInstance() throws NoSuchAlgorithmException {
         try {
-            MOCK_SERVER_LOGGER.debug("Using protocol {}", SSL_CONTEXT_PROTOCOL);
+            MOCK_SERVER_LOGGER.debug(SERVER_CONFIGURATION, "Using protocol {}", SSL_CONTEXT_PROTOCOL);
             return SSLContext.getInstance(SSL_CONTEXT_PROTOCOL);
         } catch (NoSuchAlgorithmException e) {
             MOCK_SERVER_LOGGER.warn("Protocol {} not available, falling back to {}", SSL_CONTEXT_PROTOCOL, SSL_CONTEXT_FALLBACK_PROTOCOL);

File: mockserver-core/src/main/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngine.java
Patch:
@@ -14,6 +14,7 @@
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.formatting.StringFormatter.formatLogMessage;
 import static org.mockserver.formatting.StringFormatter.indentAndToString;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.TEMPLATE_GENERATED;
 
 /**
  * @author jamesdbloom
@@ -38,7 +39,7 @@ public <T> T executeTemplate(String template, HttpRequest request, Class<? exten
                 engine.eval(script + " function serialise(request) { return JSON.stringify(handle(JSON.parse(request)), null, 2); }");
                 // HttpResponse handle(HttpRequest httpRequest) - ES5
                 Object stringifiedResponse = ((Invocable) engine).invokeFunction("serialise", new HttpRequestTemplateObject(request));
-                logFormatter.info(request, "Generated output:{}" + NEW_LINE + " from template:{}" + NEW_LINE + " for request:{}", stringifiedResponse, script, request);
+                logFormatter.info(TEMPLATE_GENERATED, request, "Generated output:{}" + NEW_LINE + " from template:{}" + NEW_LINE + " for request:{}", stringifiedResponse, script, request);
                 result = httpTemplateOutputDeserializer.deserializer(request, (String) stringifiedResponse, dtoClass);
             } else {
                 logFormatter.error(request, "JavaScript based templating is only available in a JVM with the \"nashorn\" JavaScript engine, " +

File: mockserver-core/src/main/java/org/mockserver/templates/engine/velocity/VelocityTemplateEngine.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.velocity.script.VelocityScriptEngineFactory;
 import org.mockserver.client.serialization.model.DTO;
+import org.mockserver.log.model.MessageLogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.templates.engine.TemplateEngine;
@@ -16,6 +17,7 @@
 
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.formatting.StringFormatter.formatLogMessage;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.TEMPLATE_GENERATED;
 
 /**
  * @author jamesdbloom
@@ -46,7 +48,7 @@ public <T> T executeTemplate(String template, HttpRequest request, Class<? exten
             context.setWriter(writer);
             context.setAttribute("request", new HttpRequestTemplateObject(request), ScriptContext.ENGINE_SCOPE);
             engine.eval(template);
-            logFormatter.info(request, "Generated output:{}" + NEW_LINE + " from template:{}" + NEW_LINE + " for request:{}", writer.toString(), template, request);
+            logFormatter.info(TEMPLATE_GENERATED, request, "Generated output:{}" + NEW_LINE + " from template:{}" + NEW_LINE + " for request:{}", writer.toString(), template, request);
             result = httpTemplateOutputDeserializer.deserializer(request, writer.toString(), dtoClass);
         } catch (Exception e) {
             throw new RuntimeException(formatLogMessage("Exception transforming template:{}" + NEW_LINE + " for request:{}", template, request), e);

File: mockserver-core/src/main/java/org/mockserver/validator/jsonschema/JsonSchemaValidator.java
Patch:
@@ -92,7 +92,7 @@ public String isValid(String json) {
                     validationResult = formatProcessingReport(processingReport);
                 }
             } catch (Exception e) {
-                mockServerLogger.info("Exception validating JSON", e);
+                mockServerLogger.error("Exception validating JSON", e);
                 return e.getClass().getSimpleName() + " - " + e.getMessage();
             }
         }

File: mockserver-core/src/main/java/org/mockserver/validator/xmlschema/XmlSchemaValidator.java
Patch:
@@ -53,7 +53,7 @@ public String isValid(String xml) {
                 errorMessage = e.getMessage();
             }
         } catch (Exception e) {
-            mockServerLogger.info("Exception validating JSON", e);
+            mockServerLogger.error("Exception validating JSON", e);
             return e.getClass().getSimpleName() + " - " + e.getMessage();
         }
         return errorMessage;

File: mockserver-core/src/test/java/org/mockserver/logging/MockServerLoggerTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.mockito.Mockito.*;
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.configuration.ConfigurationProperties.logLevel;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.TRACE;
 import static org.mockserver.model.HttpRequest.request;
 
 public class MockServerLoggerTest {
@@ -54,6 +55,7 @@ public void shouldFormatInfoLogMessagesForRequest() {
 
             // when
             logFormatter.info(
+                TRACE,
                 request,
                 "some random message with {} and {}",
                 "some" + NEW_LINE + "multi-line" + NEW_LINE + "object",
@@ -111,6 +113,7 @@ public void shouldFormatInfoLogMessagesForRequestList() {
 
             // when
             logFormatter.info(
+                TRACE,
                 Arrays.asList(request, request),
                 "some random message with {} and {}",
                 "some" + NEW_LINE + "multi-line" + NEW_LINE + "object",

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -1490,7 +1490,7 @@ public void shouldRetrieveRecordedLogMessages() {
                     "\t  }" + NEW_LINE +
                     "\t}" + NEW_LINE // 7-1
             },
-            "retrieving logs in plain format that match:" + NEW_LINE +
+            "retrieving logs that match:" + NEW_LINE +
                 NEW_LINE +
                 "\t{" + NEW_LINE +
                 "\t  \"path\" : \"/.*\"" + NEW_LINE +

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -5,6 +5,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.mockserver.configuration.ConfigurationProperties;
 import org.mockserver.configuration.IntegerStringListParser;
+import org.mockserver.log.model.MessageLogEntry;
 import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mockserver.MockServer;
 
@@ -13,6 +14,7 @@
 
 import static org.mockserver.character.Character.NEW_LINE;
 import static org.mockserver.cli.Main.Arguments.*;
+import static org.mockserver.log.model.MessageLogEntry.LogMessageType.SERVER_CONFIGURATION;
 
 /**
  * @author jamesdbloom
@@ -67,7 +69,7 @@ public static void main(String... arguments) {
         try {
             Map<String, String> parsedArguments = parseArguments(arguments);
 
-            MOCK_SERVER_LOGGER.debug("Using command line options: {}", Joiner.on(", ").withKeyValueSeparator("=").join(parsedArguments));
+            MOCK_SERVER_LOGGER.debug(SERVER_CONFIGURATION, "Using command line options: {}", Joiner.on(", ").withKeyValueSeparator("=").join(parsedArguments));
 
             if (parsedArguments.size() > 0 && parsedArguments.containsKey(serverPort.name())) {
                 if (parsedArguments.containsKey(logLevel.name())) {

File: mockserver-netty/src/test/java/org/mockserver/integration/mocking/PortForwardingMockingIntegrationTest.java
Patch:
@@ -477,7 +477,7 @@ public void shouldRetrieveRecordedLogMessages() {
                     "\t  }" + NEW_LINE +
                     "\t}" + NEW_LINE
             },
-            "retrieving logs in plain format that match:" + NEW_LINE +
+            "retrieving logs that match:" + NEW_LINE +
                 NEW_LINE +
                 "\t{" + NEW_LINE +
                 "\t  \"path\" : \"/.*\"" + NEW_LINE +

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -246,7 +246,7 @@ public void shouldRetrieveLogMessages() throws InterruptedException {
         );
         assertThat(
             splitBody[1],
-            is(endsWith("retrieving logs in plain format that match:" + NEW_LINE +
+            is(endsWith("retrieving logs that match:" + NEW_LINE +
                 NEW_LINE +
                 "\t{" + NEW_LINE +
                 "\t  \"path\" : \"request_one\"" + NEW_LINE +

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyServletTest.java
Patch:
@@ -218,7 +218,7 @@ public void shouldRetrieveLogMessages() {
         assertThat(splitBody.length, is(1));
         assertThat(
             splitBody[0],
-            is(endsWith("retrieving logs in plain format that match:" + NEW_LINE +
+            is(endsWith("retrieving logs that match:" + NEW_LINE +
                 NEW_LINE +
                 "\t{" + NEW_LINE +
                 "\t  \"path\" : \"request_one\"" + NEW_LINE +

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -277,7 +277,7 @@ public void shouldRetrieveLogMessages() {
         );
         assertThat(
             splitBody[1],
-            is(endsWith("retrieving logs in plain format that match:" + NEW_LINE +
+            is(endsWith("retrieving logs that match:" + NEW_LINE +
                 NEW_LINE +
                 "\t{" + NEW_LINE +
                 "\t  \"path\" : \"request_one\"" + NEW_LINE +

File: mockserver-core/src/main/java/org/mockserver/mock/HttpStateHandler.java
Patch:
@@ -96,7 +96,7 @@ public String apply(ClearType input) {
     public void reset() {
         mockServerMatcher.reset();
         mockServerLog.reset();
-        mockServerLogger.info(request(), "resetting all expectations and request logs" + NEW_LINE);
+        mockServerLogger.info( "resetting all expectations and request logs" + NEW_LINE);
     }
 
     public void add(Expectation... expectations) {
@@ -109,7 +109,7 @@ public void add(Expectation... expectations) {
 
     public Expectation firstMatchingExpectation(HttpRequest request) {
         if (mockServerMatcher.isEmpty()) {
-            mockServerLogger.info(request(), "no active expectations when receiving request:{}", request);
+            mockServerLogger.info(request, "no active expectations when receiving request:{}", request);
             return null;
         } else {
             return mockServerMatcher.firstMatchingExpectation(request);

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidatorIntegrationTest.java
Patch:
@@ -497,7 +497,7 @@ public void shouldValidateInvalidCompleteExpectationMissingAction() {
                 "}"),
             is(
                 "1 error:" + NEW_LINE +
-                    " - oneOf of the following must be specified \"httpResponse\" \"httpResponseTemplate\" \"httpResponseObjectCallback\" \"httpResponseClassCallback\" \"httpForward\" \"httpForwardTemplate\" \"httpForwardObjectCallback\" \"httpForwardClassCallback\" \"httpOverrideForwardedRequest\" \"httpError\" "
+                " - oneOf of the following must be specified [\"httpResponse\", \"httpResponseTemplate\", \"httpResponseObjectCallback\", \"httpResponseClassCallback\", \"httpForward\", \"httpForwardTemplate\", \"httpForwardObjectCallback\", \"httpForwardClassCallback\", \"httpOverrideForwardedRequest\", \"httpError\"] but 0 found"
             ));
     }
 
@@ -510,7 +510,7 @@ public void shouldValidateInvalidExtraField() {
             is(
                 "2 errors:" + NEW_LINE +
                     " - object instance has properties which are not allowed by the schema: [\"invalidField\"]" + NEW_LINE +
-                    " - oneOf of the following must be specified \"httpResponse\" \"httpResponseTemplate\" \"httpResponseObjectCallback\" \"httpResponseClassCallback\" \"httpForward\" \"httpForwardTemplate\" \"httpForwardObjectCallback\" \"httpForwardClassCallback\" \"httpOverrideForwardedRequest\" \"httpError\" "
+                    " - oneOf of the following must be specified [\"httpResponse\", \"httpResponseTemplate\", \"httpResponseObjectCallback\", \"httpResponseClassCallback\", \"httpForward\", \"httpForwardTemplate\", \"httpForwardObjectCallback\", \"httpForwardClassCallback\", \"httpOverrideForwardedRequest\", \"httpError\"] but 0 found"
             ));
     }
 

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractBasicMockingIntegrationTest.java
Patch:
@@ -1686,7 +1686,7 @@ public void shouldReturnErrorForInvalidExpectation() throws Exception {
         assertThat(httpResponse.getStatusCode(), is(400));
         assertThat(httpResponse.getBodyAsString(), is("2 errors:" + NEW_LINE +
             " - object instance has properties which are not allowed by the schema: [\"incorrectField\"]" + NEW_LINE +
-            " - oneOf of the following must be specified \"httpResponse\" \"httpResponseTemplate\" \"httpResponseObjectCallback\" \"httpResponseClassCallback\" \"httpForward\" \"httpForwardTemplate\" \"httpForwardObjectCallback\" \"httpForwardClassCallback\" \"httpOverrideForwardedRequest\" \"httpError\" "));
+            " - oneOf of the following must be specified [\"httpResponse\", \"httpResponseTemplate\", \"httpResponseObjectCallback\", \"httpResponseClassCallback\", \"httpForward\", \"httpForwardTemplate\", \"httpForwardObjectCallback\", \"httpForwardClassCallback\", \"httpOverrideForwardedRequest\", \"httpError\"] but 0 found"));
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/client/serialization/ObjectMapperFactory.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockserver.client.serialization.deserializers.collections.ParametersDeserializer;
 import org.mockserver.client.serialization.deserializers.string.NottableStringDeserializer;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.client.serialization.serializers.response.TimesDTOSerializer;
 import org.mockserver.client.serialization.serializers.response.TimesSerializer;
 import org.mockserver.client.serialization.serializers.body.*;
 import org.mockserver.client.serialization.serializers.collections.CookiesSerializer;
@@ -72,6 +73,7 @@ private static class Module extends SimpleModule {
         Module() {
             // times
             addSerializer(Times.class, new TimesSerializer());
+            addSerializer(TimesDTO.class, new TimesDTOSerializer());
             // request
             addSerializer(HttpRequest.class, new org.mockserver.client.serialization.serializers.request.HttpRequestSerializer());
             addSerializer(HttpRequestDTO.class, new HttpRequestDTOSerializer());

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithErrorSerializerTest.java
Patch:
@@ -82,7 +82,7 @@ public class ExpectationWithErrorSerializerTest {
                     .withResponseBytes("some_bytes".getBytes(UTF_8))
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardClassCallbackSerializerTest.java
Patch:
@@ -75,7 +75,7 @@ public class ExpectationWithForwardClassCallbackSerializerTest {
                     .withCallbackClass("some_random_class")
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardObjectCallbackSerializerTest.java
Patch:
@@ -73,7 +73,7 @@ public class ExpectationWithForwardObjectCallbackSerializerTest {
                     .withClientId("some_random_client_id")
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardSerializerTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.concurrent.TimeUnit;
 
 import static org.hamcrest.core.Is.is;
@@ -86,7 +85,7 @@ public class ExpectationWithForwardSerializerTest {
                                     .withScheme(HttpForward.Scheme.HTTPS)
                     )
             )
-            .setTimes(new TimesDTO(Times.once()))
+            .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
             .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardTemplateSerializerTest.java
Patch:
@@ -83,7 +83,7 @@ public class ExpectationWithForwardTemplateSerializerTest {
                     .withDelay(new Delay(SECONDS, 5))
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithOverrideForwardedRequestSerializerTest.java
Patch:
@@ -81,7 +81,7 @@ public class ExpectationWithOverrideForwardedRequestSerializerTest {
                     )
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseClassCallbackSerializerTest.java
Patch:
@@ -75,7 +75,7 @@ public class ExpectationWithResponseClassCallbackSerializerTest {
                     .withCallbackClass("some_random_class")
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseObjectCallbackSerializerTest.java
Patch:
@@ -73,7 +73,7 @@ public class ExpectationWithResponseObjectCallbackSerializerTest {
                     .withClientId("some_random_client_id")
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseSerializerTest.java
Patch:
@@ -84,7 +84,7 @@ public class ExpectationWithResponseSerializerTest {
                     .withDelay(new Delay(TimeUnit.MICROSECONDS, 1))
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(TimeUnit.HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseTemplateSerializerTest.java
Patch:
@@ -78,7 +78,7 @@ public class ExpectationWithResponseTemplateSerializerTest {
                     .withDelay(new Delay(SECONDS, 5))
             )
         )
-        .setTimes(new TimesDTO(Times.once()))
+        .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.once()))
         .setTimeToLive(new TimeToLiveDTO(TimeToLive.exactly(HOURS, 2l)));
 
     @Rule

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ObjectMapperFactoryTest.java
Patch:
@@ -110,7 +110,7 @@ public void shouldDeserializeCompleteObject() throws IOException {
                             .setValue(1)
                     )
             )
-            .setTimes(new TimesDTO(Times.exactly(5))), expectationDTO);
+            .setTimes(new org.mockserver.client.serialization.model.TimesDTO(Times.exactly(5))), expectationDTO);
     }
 
 }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/java/TimeToLiveToJavaSerializerTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.junit.Test;
 import org.mockserver.matchers.TimeToLive;
-import org.mockserver.matchers.Times;
 
 import java.util.concurrent.TimeUnit;
 

File: mockserver-core/src/test/java/org/mockserver/client/serialization/java/TimesToJavaSerializerTest.java
Patch:
@@ -2,9 +2,6 @@
 
 import org.junit.Test;
 import org.mockserver.matchers.Times;
-import org.mockserver.model.HttpClassCallback;
-
-import java.io.IOException;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockserver.character.Character.NEW_LINE;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/TimesDTOTest.java
Patch:
@@ -14,7 +14,7 @@ public class TimesDTOTest {
     @Test
     public void shouldReturnValuesSetInConstructor() {
         // when
-        TimesDTO times = new TimesDTO(Times.exactly(5));
+        org.mockserver.client.serialization.model.TimesDTO times = new org.mockserver.client.serialization.model.TimesDTO(Times.exactly(5));
 
         // then
         assertThat(times.getRemainingTimes(), is(5));
@@ -24,13 +24,13 @@ public void shouldReturnValuesSetInConstructor() {
     @Test
     public void shouldBuildCorrectObject() {
         // when
-        Times times = new TimesDTO(Times.unlimited()).buildObject();
+        Times times = new org.mockserver.client.serialization.model.TimesDTO(Times.unlimited()).buildObject();
 
         // then
         assertThat(times.isUnlimited(), is(true));
 
         // when
-        times = new TimesDTO(Times.exactly(5)).buildObject();
+        times = new org.mockserver.client.serialization.model.TimesDTO(Times.exactly(5)).buildObject();
 
         // then
         assertThat(times.getRemainingTimes(), is(5));

File: mockserver-netty/src/test/java/org/mockserver/integration/mockserver/ClientAndDirectProxyMockingIntegrationTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.mockserver.integration.server.AbstractBasicClientServerIntegrationTest;
 import org.mockserver.mock.Expectation;
 import org.mockserver.model.HttpStatusCode;
-import org.mockserver.proxy.Proxy;
 import org.mockserver.proxy.ProxyBuilder;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: mockserver-netty/src/test/java/org/mockserver/integration/mockserver/ClientViaHttpProxyIntegrationTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.mockserver.echo.http.EchoServer;
 import org.mockserver.integration.server.AbstractServerIntegrationTestBase;
 import org.mockserver.mockserver.MockServer;
-import org.mockserver.model.HttpForward;
 import org.mockserver.model.HttpStatusCode;
 import org.mockserver.model.HttpTemplate;
 

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -16,9 +16,6 @@
 import org.mockserver.mock.Expectation;
 import org.mockserver.mock.HttpStateHandler;
 import org.mockserver.mock.action.ActionHandler;
-import org.mockserver.model.Cookies;
-import org.mockserver.model.Headers;
-import org.mockserver.model.Parameters;
 import org.mockserver.model.RetrieveType;
 import org.springframework.mock.web.MockHttpServletRequest;
 import org.springframework.mock.web.MockHttpServletResponse;

File: mockserver-core/src/main/java/org/mockserver/filters/MockServerEventLog.java
Patch:
@@ -90,7 +90,7 @@ public void clear(HttpRequest request) {
         if (request != null) {
             HttpRequestMatcher requestMatcher = matcherBuilder.transformsToMatcher(request);
             for (LogEntry logEntry : new LinkedList<>(requestLog)) {
-                if (requestMatcher.matches(logEntry.getHttpRequest(), false)) {
+                if (requestMatcher.matches(logEntry.getHttpRequest())) {
                     requestLog.remove(logEntry);
                 }
             }
@@ -132,7 +132,7 @@ <T> List<T> retrieveLogEntries(HttpRequest httpRequest, Predicate<LogEntry> logE
         List<T> matchingLogEntries = new ArrayList<>();
         HttpRequestMatcher httpRequestMatcher = matcherBuilder.transformsToMatcher(httpRequest);
         for (LogEntry logEntry : new LinkedList<>(this.requestLog)) {
-            if (logEntryPredicate.apply(logEntry) && httpRequestMatcher.matches(logEntry.getHttpRequest(), false)) {
+            if (logEntryPredicate.apply(logEntry) && httpRequestMatcher.matches(logEntry.getHttpRequest())) {
                 matchingLogEntries.add(logEntryToTypeFunction.apply(logEntry));
             }
         }
@@ -182,7 +182,7 @@ public String verify(VerificationSequence verificationSequence) {
                     boolean foundRequest = false;
                     for (; !foundRequest && requestLogCounter < requestLog.size(); requestLogCounter++) {
                         LogEntry logEntry = requestLog.get(requestLogCounter);
-                        if (!(logEntry instanceof MessageLogEntry) && httpRequestMatcher.matches(logEntry.getHttpRequest(), false)) {
+                        if (!(logEntry instanceof MessageLogEntry) && httpRequestMatcher.matches(logEntry.getHttpRequest())) {
                             // move on to next request
                             foundRequest = true;
                         }

File: mockserver-core/src/main/java/org/mockserver/matchers/BinaryMatcher.java
Patch:
@@ -19,18 +19,18 @@ public BinaryMatcher(MockServerLogger mockServerLogger, byte[] matcher) {
         this.matcher = matcher;
     }
 
-    public boolean matches(HttpRequest context, byte[] matched) {
+    public boolean matches(final HttpRequest context, byte[] matched) {
         boolean result = false;
 
         if (matcher == null || matcher.length == 0 || Arrays.equals(matcher, matched)) {
             result = true;
         }
 
         if (!result) {
-            mockServerLogger.trace(context, "Failed to perform binary match [{}] with [{}] because {}", matched);
+            mockServerLogger.trace(context, "Failed to perform binary match [{}] with [{}] because {}", (Object) matched);
         }
 
-        return reverseResultIfNot(result);
+        return not != result;
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/matchers/BooleanMatcher.java
Patch:
@@ -19,7 +19,7 @@ public BooleanMatcher(MockServerLogger mockServerLogger, Boolean matcher) {
     }
 
     @Override
-    public boolean matches(HttpRequest context, Boolean matched) {
+    public boolean matches(final HttpRequest context, Boolean matched) {
         boolean result = false;
 
         if (matcher == null) {

File: mockserver-core/src/main/java/org/mockserver/matchers/HashMapMatcher.java
Patch:
@@ -22,7 +22,7 @@ public HashMapMatcher(MockServerLogger mockServerLogger, KeysAndValues keysAndVa
         }
     }
 
-    public boolean matches(HttpRequest context, KeysAndValues values) {
+    public boolean matches(final HttpRequest context, KeysAndValues values) {
         boolean result = false;
 
         if (hashMap == null || hashMap.isEmpty() || values == null) {
@@ -33,6 +33,6 @@ public boolean matches(HttpRequest context, KeysAndValues values) {
             mockServerLogger.trace(context, "Map [{}] is not a subset of {}", this.hashMap, values);
         }
 
-        return reverseResultIfNot(result);
+        return not != result;
     }
 }

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonSchemaMatcher.java
Patch:
@@ -24,7 +24,7 @@ public JsonSchemaMatcher(MockServerLogger mockServerLogger, String schema) {
         jsonSchemaValidator = new JsonSchemaValidator(mockServerLogger, schema);
     }
 
-    public boolean matches(HttpRequest context, String matched) {
+    public boolean matches(final HttpRequest context, String matched) {
         boolean result = false;
 
         try {
@@ -39,7 +39,7 @@ public boolean matches(HttpRequest context, String matched) {
             mockServerLogger.trace(context, "Failed to match JSON: {}" + NEW_LINE + "with schema: {}" + NEW_LINE + "because: {}", matched, this.schema, e.getMessage());
         }
 
-        return reverseResultIfNot(result);
+        return not != result;
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/matchers/JsonStringMatcher.java
Patch:
@@ -24,7 +24,7 @@ public JsonStringMatcher(MockServerLogger mockServerLogger, String matcher, Matc
         this.matchType = matchType;
     }
 
-    public boolean matches(HttpRequest context, String matched) {
+    public boolean matches(final HttpRequest context, String matched) {
         boolean result = false;
 
         JSONCompareResult jsonCompareResult;
@@ -50,7 +50,7 @@ public boolean matches(HttpRequest context, String matched) {
             mockServerLogger.trace(context, "Failed to perform JSON match \"{}\" with \"{}\" because {}", matched, this.matcher, e.getMessage());
         }
 
-        return reverseResultIfNot(result);
+        return not != result;
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/matchers/RegexStringMatcher.java
Patch:
@@ -93,7 +93,7 @@ public boolean matches(String matched) {
         return matches(null, string(matched));
     }
 
-    public boolean matches(HttpRequest context, NottableString matched) {
+    public boolean matches(final HttpRequest context, NottableString matched) {
         boolean result = false;
 
         if (matches(matcher.getValue(), matched.getValue(), false)) {
@@ -104,7 +104,7 @@ public boolean matches(HttpRequest context, NottableString matched) {
             mockServerLogger.trace(context, "Failed to match [{}] with [{}]", matched, this.matcher);
         }
 
-        return (matcher.isNot() || matched.isNot()) != reverseResultIfNot(result);
+        return matched.isNot() != (matcher.isNot() != (not != result));
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/matchers/XPathStringMatcher.java
Patch:
@@ -57,7 +57,7 @@ public void logError(final String matched, final Exception exception) {
             mockServerLogger.trace("Failed to match [{}] with [{}]", matched, this.matcher);
         }
 
-        return reverseResultIfNot(result);
+        return not != result;
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/matchers/XmlSchemaMatcher.java
Patch:
@@ -26,7 +26,7 @@ protected String[] fieldsExcludedFromEqualsAndHashCode() {
         return new String[]{"logger", "xmlSchemaValidator"};
     }
 
-    public boolean matches(HttpRequest context, String matched) {
+    public boolean matches(final HttpRequest context, String matched) {
         boolean result = false;
 
         try {
@@ -41,7 +41,7 @@ public boolean matches(HttpRequest context, String matched) {
             mockServerLogger.trace(context, "Failed to match XML: {}" + NEW_LINE + "with schema: {}" + NEW_LINE + "because: {}", matched, this.schema, e.getMessage());
         }
 
-        return reverseResultIfNot(result);
+        return not != result;
     }
 
 }

File: mockserver-core/src/main/java/org/mockserver/matchers/XmlStringMatcher.java
Patch:
@@ -57,7 +57,7 @@ public boolean matches(String matched) {
         return matches(null, string(matched));
     }
 
-    public boolean matches(HttpRequest context, NottableString matched) {
+    public boolean matches(final HttpRequest context, NottableString matched) {
         boolean result = false;
 
         try {
@@ -72,7 +72,7 @@ public boolean matches(HttpRequest context, NottableString matched) {
             mockServerLogger.trace(context, "Failed to match [{}] with [{}]", matched, this.matcher);
         }
 
-        return matcher.isNot() != reverseResultIfNot(result);
+        return matcher.isNot() != (not != result);
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -235,7 +235,7 @@ public void run() {
                         httpStateHandler.log(new RequestResponseLogEntry(request, response));
                         mockServerLogger.info(
                             request,
-                            "returning response:{}" + NEW_LINE + " for request as json:{}" + NEW_LINE + " as curl:{}",
+                            "returning response:{}" + NEW_LINE + " for request:{}" + NEW_LINE + " as curl:{}",
                             response,
                             request,
                             httpRequestToCurlSerializer.toCurl(request, remoteAddress)

File: mockserver-core/src/test/java/org/mockserver/mock/action/ActionHandlerTest.java
Patch:
@@ -304,7 +304,7 @@ public void shouldProxyRequestsWithRemoteSocketAttribute() {
         verify(mockNettyHttpClient).sendRequest(request, remoteAddress);
         verify(mockLogFormatter).info(
             request,
-            "returning response:{}" + NEW_LINE + " for request as json:{}" + NEW_LINE + " as curl:{}",
+            "returning response:{}" + NEW_LINE + " for request:{}" + NEW_LINE + " as curl:{}",
             response("some_body"),
             request,
             new HttpRequestToCurlSerializer().toCurl(request, remoteAddress)

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractBasicClientServerIntegrationTest.java
Patch:
@@ -54,7 +54,6 @@
  */
 public abstract class AbstractBasicClientServerIntegrationTest {
 
-    protected static final MockServerLogger MOCK_SERVER_LOGGER = new MockServerLogger(AbstractBasicClientServerIntegrationTest.class);
     protected static MockServerClient mockServerClient;
     protected static String servletContext = "";
     protected static List<String> headersToIgnore = ImmutableList.of(

File: mockserver-netty/src/main/java/org/mockserver/proxy/direct/DirectProxyUnificationInitializer.java
Patch:
@@ -11,6 +11,8 @@
 import org.mockserver.ui.UIWebSocketServerHandler;
 import org.mockserver.unification.PortUnificationHandler;
 
+import static org.mockserver.proxy.Proxy.PROXYING;
+
 /**
  * @author jamesdbloom
  */
@@ -30,6 +32,7 @@ public DirectProxyUnificationInitializer(Proxy server, HttpStateHandler httpStat
 
     @Override
     protected void configurePipeline(ChannelHandlerContext ctx, ChannelPipeline pipeline) {
+        ctx.channel().attr(PROXYING).set(Boolean.TRUE);
         pipeline.addLast(callbackWebSocketServerHandler);
         pipeline.addLast(uiWebSocketServerHandler);
         pipeline.addLast(new MockServerServerCodec(mockServerLogger, isSslEnabledUpstream(ctx.channel())));

File: mockserver-core/src/main/java/org/mockserver/callback/WebSocketClientRegistry.java
Patch:
@@ -6,6 +6,7 @@
 import org.mockserver.client.serialization.WebSocketMessageSerializer;
 import org.mockserver.client.serialization.model.WebSocketClientIdDTO;
 import org.mockserver.collections.CircularHashMap;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 
@@ -14,7 +15,7 @@
  */
 public class WebSocketClientRegistry {
 
-    private WebSocketMessageSerializer webSocketMessageSerializer = new WebSocketMessageSerializer();
+    private WebSocketMessageSerializer webSocketMessageSerializer = new WebSocketMessageSerializer(new MockServerLogger());
     private CircularHashMap<String, ChannelHandlerContext> clientRegistry = new CircularHashMap<>(100);
     private CircularHashMap<String, WebSocketResponseCallback> callbackResponseRegistry = new CircularHashMap<>(100);
     private CircularHashMap<String, WebSocketRequestCallback> callbackForwardRegistry = new CircularHashMap<>(100);

File: mockserver-core/src/main/java/org/mockserver/client/netty/websocket/WebSocketClient.java
Patch:
@@ -13,6 +13,7 @@
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
 import org.mockserver.client.serialization.WebSocketMessageSerializer;
 import org.mockserver.client.serialization.model.WebSocketClientIdDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.action.ExpectationForwardCallback;
 import org.mockserver.mock.action.ExpectationResponseCallback;
 import org.mockserver.model.HttpRequest;
@@ -26,13 +27,12 @@ public class WebSocketClient {
 
     private Channel channel;
     private EventLoopGroup group = new NioEventLoopGroup();
-    private WebSocketMessageSerializer webSocketMessageSerializer = new WebSocketMessageSerializer();
+    private WebSocketMessageSerializer webSocketMessageSerializer = new WebSocketMessageSerializer(new MockServerLogger());
     private SettableFuture<String> registrationFuture = SettableFuture.create();
 
     private ExpectationResponseCallback expectationResponseCallback;
     private ExpectationForwardCallback expectationForwardCallback;
 
-
     public WebSocketClient(InetSocketAddress serverAddress, String contextPath) {
         try {
             final WebSocketClientHandler webSocketClientHandler = new WebSocketClientHandler(serverAddress, contextPath, this);

File: mockserver-core/src/main/java/org/mockserver/log/model/MessageLogEntry.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.mockserver.model.HttpRequest;
 
+import javax.annotation.Nullable;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -15,7 +16,7 @@ public class MessageLogEntry extends LogEntry {
     private final String message;
     protected Date timeStamp = new Date();
 
-    public MessageLogEntry(HttpRequest httpRequest, String message) {
+    public MessageLogEntry(@Nullable HttpRequest httpRequest, String message) {
         super(httpRequest);
         this.message = message;
     }

File: mockserver-core/src/main/java/org/mockserver/matchers/Matcher.java
Patch:
@@ -1,9 +1,11 @@
 package org.mockserver.matchers;
 
+import org.mockserver.model.HttpRequest;
+
 /**
  * @author jamesdbloom
  */
 public interface Matcher<T> {
 
-    public boolean matches(T t);
+    boolean matches(HttpRequest context, T t);
 }

File: mockserver-core/src/main/java/org/mockserver/matchers/MatcherBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.matchers;
 
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.Expectation;
 import org.mockserver.model.HttpRequest;
 
@@ -9,9 +9,9 @@
  */
 public class MatcherBuilder {
 
-    private final LoggingFormatter logFormatter;
+    private final MockServerLogger logFormatter;
 
-    public MatcherBuilder(LoggingFormatter logFormatter) {
+    public MatcherBuilder(MockServerLogger logFormatter) {
         this.logFormatter = logFormatter;
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/StringToXmlDocumentParser.java
Patch:
@@ -30,7 +30,7 @@ public String normaliseXmlString(String matched, ErrorLogger errorLogger)
         return prettyPrintXmlDocument(buildDocument(matched, errorLogger));
     }
 
-    static String prettyPrintXmlDocument(Document document) {
+    private static String prettyPrintXmlDocument(Document document) {
         // Pretty-prints a DOM document to XML using DOM Load and Save's LSSerializer.
         // Note that the "format-pretty-print" DOM configuration parameter can only be set in JDK 1.6+.
         DOMImplementation domImplementation = document.getImplementation();
@@ -76,7 +76,7 @@ public void fatalError(SAXParseException exception) throws SAXException {
         return documentBuilder.parse(new InputSource(new StringReader(matched)));
     }
 
-    public static interface ErrorLogger {
-        public void logError(final String matched, final Exception exception);
+    public interface ErrorLogger {
+        void logError(final String matched, final Exception exception);
     }
 }

File: mockserver-core/src/main/java/org/mockserver/matchers/TimeToLive.java
Patch:
@@ -51,9 +51,6 @@ public boolean stillAlive() {
         if (unlimited || isAfterNow(endDate)) {
             return true;
         } else {
-            if (logger.isTraceEnabled()) {
-                logger.trace("Remaining time is " + (endDate.getTime() - createdDate.getTime()) + "ms");
-            }
             return false;
         }
     }

File: mockserver-core/src/main/java/org/mockserver/matchers/Times.java
Patch:
@@ -39,7 +39,6 @@ public boolean greaterThenZero() {
         if (unlimited || remainingTimes > 0) {
             return true;
         } else {
-            logger.trace("Remaining count is 0");
             return false;
         }
     }

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.mock;
 
 import org.mockserver.collections.CircularLinkedList;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.HttpRequestMatcher;
 import org.mockserver.matchers.MatcherBuilder;
 import org.mockserver.ui.MockServerMatcherNotifier;
@@ -21,7 +21,7 @@ public class MockServerMatcher extends MockServerMatcherNotifier {
     protected final List<HttpRequestMatcher> httpRequestMatchers = Collections.synchronizedList(new CircularLinkedList<HttpRequestMatcher>(maxExpectations()));
     private MatcherBuilder matcherBuilder;
 
-    MockServerMatcher(LoggingFormatter logFormatter) {
+    MockServerMatcher(MockServerLogger logFormatter) {
         this.matcherBuilder = new MatcherBuilder(logFormatter);
     }
 
@@ -42,7 +42,7 @@ public synchronized void reset() {
     public Expectation firstMatchingExpectation(HttpRequest httpRequest) {
         Expectation matchingExpectation = null;
         for (HttpRequestMatcher httpRequestMatcher : cloneMatchers()) {
-            if (httpRequestMatcher.matches(httpRequest)) {
+            if (httpRequestMatcher.matches(null, httpRequest)) {
                 matchingExpectation = httpRequestMatcher.decrementRemainingMatches();
             }
             if (!httpRequestMatcher.isActive()) {

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardActionHandler.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.mock.action;
 
 import com.google.common.util.concurrent.SettableFuture;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpForward;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
@@ -13,7 +13,7 @@
  */
 public class HttpForwardActionHandler extends HttpForwardAction {
 
-    public HttpForwardActionHandler(LoggingFormatter logFormatter) {
+    public HttpForwardActionHandler(MockServerLogger logFormatter) {
         super(logFormatter);
     }
 

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpOverrideForwardedRequestActionHandler.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.mock.action;
 
 import com.google.common.util.concurrent.SettableFuture;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
 
 import static org.mockserver.scheduler.Scheduler.submit;
@@ -11,7 +11,7 @@
  */
 public class HttpOverrideForwardedRequestActionHandler extends HttpForwardAction {
 
-    public HttpOverrideForwardedRequestActionHandler(LoggingFormatter logFormatter) {
+    public HttpOverrideForwardedRequestActionHandler(MockServerLogger logFormatter) {
         super(logFormatter);
     }
 

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpResponseTemplateActionHandler.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockserver.mock.action;
 
 import org.mockserver.client.serialization.model.HttpResponseDTO;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.model.HttpTemplate;
@@ -19,7 +19,7 @@ public class HttpResponseTemplateActionHandler {
     private JavaScriptTemplateEngine javaScriptTemplateEngine;
     private VelocityTemplateEngine velocityTemplateEngine;
 
-    public HttpResponseTemplateActionHandler(LoggingFormatter logFormatter) {
+    public HttpResponseTemplateActionHandler(MockServerLogger logFormatter) {
         javaScriptTemplateEngine = new JavaScriptTemplateEngine(logFormatter);
         velocityTemplateEngine = new VelocityTemplateEngine(logFormatter);
     }

File: mockserver-core/src/main/java/org/mockserver/model/JsonBody.java
Patch:
@@ -3,8 +3,8 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.google.common.net.MediaType;
 import org.mockserver.client.serialization.ObjectMapperFactory;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.MatchType;
-import org.slf4j.LoggerFactory;
 
 import java.nio.charset.Charset;
 
@@ -74,7 +74,7 @@ private static String toJson(Object object) {
         try {
             json = ObjectMapperFactory.createObjectMapper().writeValueAsString(object);
         } catch (JsonProcessingException e) {
-            LoggerFactory.getLogger(JsonBody.class).error("error mapping object for json body to JSON", e);
+            new MockServerLogger(JsonBody.class).error("error mapping object for json body to JSON", e);
         }
         return json;
     }

File: mockserver-core/src/main/java/org/mockserver/server/netty/codec/MockServerServerCodec.java
Patch:
@@ -1,12 +1,13 @@
 package org.mockserver.server.netty.codec;
 
 import io.netty.channel.CombinedChannelDuplexHandler;
+import org.mockserver.logging.MockServerLogger;
 
 /**
  * @author jamesdbloom
  */
 public class MockServerServerCodec extends CombinedChannelDuplexHandler<MockServerRequestDecoder, MockServerResponseEncoder> {
-    public MockServerServerCodec(boolean isSecure) {
-        init(new MockServerRequestDecoder(isSecure), new MockServerResponseEncoder());
+    public MockServerServerCodec(MockServerLogger mockServerLogger, boolean isSecure) {
+        init(new MockServerRequestDecoder(mockServerLogger, isSecure), new MockServerResponseEncoder());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/ui/MockServerEventLogNotifier.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.ui;
 
-import org.mockserver.filters.MockServerLog;
+import org.mockserver.filters.MockServerEventLog;
 import org.mockserver.model.ObjectWithReflectiveEqualsHashCodeToString;
 
 import java.util.ArrayList;
@@ -12,11 +12,11 @@
 /**
  * @author jamesdbloom
  */
-public class MockServerLogNotifier extends ObjectWithReflectiveEqualsHashCodeToString {
+public class MockServerEventLogNotifier extends ObjectWithReflectiveEqualsHashCodeToString {
 
     private List<MockServerLogListener> listeners = Collections.synchronizedList(new ArrayList<MockServerLogListener>());
 
-    protected void notifyListeners(final MockServerLog notifier) {
+    protected void notifyListeners(final MockServerEventLog notifier) {
         submit(
             new Runnable() {
                 public void run() {

File: mockserver-core/src/main/java/org/mockserver/ui/MockServerLogListener.java
Patch:
@@ -1,11 +1,11 @@
 package org.mockserver.ui;
 
-import org.mockserver.filters.MockServerLog;
+import org.mockserver.filters.MockServerEventLog;
 
 /**
  * @author jamesdbloom
  */
 public interface MockServerLogListener {
 
-    void updated(MockServerLog mockServerLog);
+    void updated(MockServerEventLog mockServerLog);
 }

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -55,10 +55,10 @@ public void shouldSendBasicRequest() throws Exception {
             response()
                 .withStatusCode(200)
                 .withReasonPhrase("OK")
-                .withHeader(header(HOST.toString(), "0.0.0.0:" + echoServer.getPort()))
                 .withHeader(header(CONTENT_LENGTH.toString(), 0))
-                .withHeader(header(ACCEPT_ENCODING.toString(), GZIP.toString() + "," + DEFLATE.toString()))
+                .withHeader(header(HOST.toString(), "0.0.0.0:" + echoServer.getPort()))
                 .withHeader(header(CONNECTION.toString(), KEEP_ALIVE.toString()))
+                .withHeader(header(ACCEPT_ENCODING.toString(), GZIP.toString() + "," + DEFLATE.toString()))
         ));
     }
 

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationSerializationErrorsTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.rules.ExpectedException;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mock.Expectation;
 import org.mockserver.validator.jsonschema.JsonSchemaExpectationValidator;
 
@@ -38,7 +39,7 @@ public class ExpectationSerializationErrorsTest {
 
     @Before
     public void setupTestFixture() {
-        expectationSerializer = spy(new ExpectationSerializer());
+        expectationSerializer = spy(new ExpectationSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithErrorSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -97,7 +98,7 @@ public class ExpectationWithErrorSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardClassCallbackSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -90,7 +91,7 @@ public class ExpectationWithForwardClassCallbackSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardObjectCallbackSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -88,7 +89,7 @@ public class ExpectationWithForwardObjectCallbackSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -101,7 +102,7 @@ public class ExpectationWithForwardSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithForwardTemplateSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -98,7 +99,7 @@ public class ExpectationWithForwardTemplateSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithOverrideForwardedRequestSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -95,7 +96,7 @@ public class ExpectationWithOverrideForwardedRequestSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseClassCallbackSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -90,7 +91,7 @@ public class ExpectationWithResponseClassCallbackSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseObjectCallbackSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -88,7 +89,7 @@ public class ExpectationWithResponseObjectCallbackSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -99,7 +100,7 @@ public class ExpectationWithResponseSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseTemplateSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.*;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
@@ -93,7 +94,7 @@ public class ExpectationWithResponseTemplateSerializerTest {
     private JsonSchemaExpectationValidator expectationValidator;
 
     @InjectMocks
-    private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
+    private ExpectationSerializer expectationSerializer = new ExpectationSerializer(new MockServerLogger());
 
 
     @Before

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializationErrorsTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.HttpRequestDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 
 import java.io.IOException;
@@ -38,7 +39,7 @@ public class HttpRequestSerializationErrorsTest {
 
     @Before
     public void setupTestFixture() {
-        httpRequestSerializer = spy(new HttpRequestSerializer());
+        httpRequestSerializer = spy(new HttpRequestSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.HttpRequestDTO;
 import org.mockserver.client.serialization.model.StringBodyDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
 import org.mockserver.validator.jsonschema.JsonSchemaHttpRequestValidator;
 
@@ -73,7 +74,7 @@ public class HttpRequestSerializerTest {
 
     @Before
     public void setupTestFixture() {
-        httpRequestSerializer = spy(new HttpRequestSerializer());
+        httpRequestSerializer = spy(new HttpRequestSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpResponseSerializationErrorsTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.HttpResponseDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpResponse;
 
 import java.io.IOException;
@@ -38,7 +39,7 @@ public class HttpResponseSerializationErrorsTest {
 
     @Before
     public void setupTestFixture() {
-        httpResponseSerializer = spy(new HttpResponseSerializer());
+        httpResponseSerializer = spy(new HttpResponseSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpResponseSerializerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockserver.client.serialization.model.BodyWithContentTypeDTO;
 import org.mockserver.client.serialization.model.DelayDTO;
 import org.mockserver.client.serialization.model.HttpResponseDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
 import org.mockserver.validator.jsonschema.JsonSchemaHttpResponseValidator;
 
@@ -64,7 +65,7 @@ public class HttpResponseSerializerTest {
 
     @Before
     public void setupTestFixture() {
-        httpResponseSerializer = spy(new HttpResponseSerializer());
+        httpResponseSerializer = spy(new HttpResponseSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/PortBindingSerializerTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.rules.ExpectedException;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.PortBinding;
 
 import java.io.IOException;
@@ -38,7 +39,7 @@ public class PortBindingSerializerTest {
 
     @Before
     public void setupTestFixture() {
-        portBindingSerializer = spy(new PortBindingSerializer());
+        portBindingSerializer = spy(new PortBindingSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/VerificationSequenceSerializationErrorsTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.VerificationSequenceDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.verify.VerificationSequence;
 
 import java.io.IOException;
@@ -36,7 +37,7 @@ public class VerificationSequenceSerializationErrorsTest {
 
     @Before
     public void setupTestFixture() {
-        verificationSequenceSerializer = spy(new VerificationSequenceSerializer());
+        verificationSequenceSerializer = spy(new VerificationSequenceSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/VerificationSequenceSerializerTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.VerificationSequenceDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.StringBody;
@@ -55,7 +56,7 @@ public class VerificationSequenceSerializerTest {
 
     @Before
     public void setupTestFixture() {
-        verificationSequenceSerializer = spy(new VerificationSequenceSerializer());
+        verificationSequenceSerializer = spy(new VerificationSequenceSerializer(new MockServerLogger()));
 
         initMocks(this);
     }
@@ -99,4 +100,4 @@ public void serializeHandlesException() throws IOException {
         verificationSequenceSerializer.serialize(new VerificationSequence());
     }
 
-}
\ No newline at end of file
+}

File: mockserver-core/src/test/java/org/mockserver/client/serialization/VerificationSerializationErrorsTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.VerificationDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.verify.Verification;
 
 import java.io.IOException;
@@ -38,7 +39,7 @@ public class VerificationSerializationErrorsTest {
 
     @Before
     public void setupTestFixture() {
-        verificationSerializer = spy(new VerificationSerializer());
+        verificationSerializer = spy(new VerificationSerializer(new MockServerLogger()));
 
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/VerificationSerializerTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockserver.client.serialization.model.HttpRequestDTO;
 import org.mockserver.client.serialization.model.VerificationDTO;
 import org.mockserver.client.serialization.model.VerificationTimesDTO;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.Cookie;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
@@ -61,7 +62,7 @@ public class VerificationSerializerTest {
 
     @Before
     public void setupTestFixture() {
-        verificationSerializer = spy(new VerificationSerializer());
+        verificationSerializer = spy(new VerificationSerializer(new MockServerLogger()));
 
         initMocks(this);
     }
@@ -111,4 +112,4 @@ public void serializeHandlesException() throws IOException {
         verificationSerializer.serialize(new Verification());
     }
 
-}
\ No newline at end of file
+}

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherBasicResponsesTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.*;
 
 import static org.junit.Assert.assertEquals;
@@ -17,13 +17,13 @@ public class MockServerMatcherBasicResponsesTest {
     private MockServerMatcher mockServerMatcher;
     private HttpRequest httpRequest;
     private HttpResponse httpResponse;
-    private LoggingFormatter mockLogFormatter;
+    private MockServerLogger mockLogFormatter;
 
     @Before
     public void prepareTestFixture() {
         httpRequest = new HttpRequest();
         httpResponse = new HttpResponse();
-        mockLogFormatter = mock(LoggingFormatter.class);
+        mockLogFormatter = mock(MockServerLogger.class);
         mockServerMatcher = new MockServerMatcher(mockLogFormatter);
     }
 

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherClearAndResetTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.HttpRequestMatcher;
 import org.mockserver.matchers.MatcherBuilder;
 import org.mockserver.matchers.TimeToLive;
@@ -28,11 +28,11 @@
 public class MockServerMatcherClearAndResetTest {
 
     private MockServerMatcher mockServerMatcher;
-    private LoggingFormatter logFormatter;
+    private MockServerLogger logFormatter;
 
     @Before
     public void prepareTestFixture() {
-        logFormatter = mock(LoggingFormatter.class);
+        logFormatter = mock(MockServerLogger.class);
         mockServerMatcher = new MockServerMatcher(logFormatter);
     }
 

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherOverlappingRequestsTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.model.Cookie;
@@ -21,15 +21,15 @@ public class MockServerMatcherOverlappingRequestsTest {
 
     private HttpResponse[] httpResponse;
 
-    private LoggingFormatter mockLogFormatter;
+    private MockServerLogger mockLogFormatter;
 
     @Before
     public void prepareTestFixture() {
         httpResponse = new HttpResponse[]{
                 new HttpResponse(),
                 new HttpResponse()
         };
-        mockLogFormatter = mock(LoggingFormatter.class);
+        mockLogFormatter = mock(MockServerLogger.class);
         mockServerMatcher = new MockServerMatcher(mockLogFormatter);
     }
 

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherSequentialResponsesTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.model.HttpRequest;
@@ -21,7 +21,7 @@ public class MockServerMatcherSequentialResponsesTest {
 
     private HttpResponse[] httpResponse;
 
-    private LoggingFormatter mockLogFormatter;
+    private MockServerLogger mockLogFormatter;
 
     @Before
     public void prepareTestFixture() {
@@ -30,7 +30,7 @@ public void prepareTestFixture() {
                 new HttpResponse(),
                 new HttpResponse()
         };
-        mockLogFormatter = mock(LoggingFormatter.class);
+        mockLogFormatter = mock(MockServerLogger.class);
         mockServerMatcher = new MockServerMatcher(mockLogFormatter);
     }
 

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpForwardActionHandlerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.netty.NettyHttpClient;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpForward;
 import org.mockserver.model.HttpRequest;
@@ -34,11 +34,11 @@ public class HttpForwardActionHandlerTest {
     private HttpForward httpForward;
     @Mock
     private NettyHttpClient mockHttpClient;
-    private LoggingFormatter logFormatter;
+    private MockServerLogger logFormatter;
 
     @Before
     public void setupMocks() {
-        logFormatter = mock(LoggingFormatter.class);
+        logFormatter = mock(MockServerLogger.class);
         httpForwardActionHandler = new HttpForwardActionHandler(logFormatter);
         initMocks(this);
         when(httpForward.getHost()).thenReturn("some_host");

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpForwardTemplateActionHandlerTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.netty.NettyHttpClient;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.model.HttpTemplate;
@@ -37,11 +37,11 @@ public class HttpForwardTemplateActionHandlerTest {
     @InjectMocks
     private HttpForwardTemplateActionHandler httpForwardTemplateActionHandler;
 
-    private LoggingFormatter mockLogFormatter;
+    private MockServerLogger mockLogFormatter;
 
     @Before
     public void setupMocks() {
-        mockLogFormatter = mock(LoggingFormatter.class);
+        mockLogFormatter = mock(MockServerLogger.class);
         httpForwardTemplateActionHandler = new HttpForwardTemplateActionHandler(mockLogFormatter);
         initMocks(this);
     }

File: mockserver-core/src/test/java/org/mockserver/mock/action/HttpResponseClassCallbackActionHandlerTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.mock.action;
 
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpClassCallback;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
@@ -23,7 +24,7 @@ public void shouldHandleInvalidClass() {
         HttpClassCallback httpClassCallback = callback("org.mockserver.mock.action.FooBar");
 
         // when
-        HttpResponse actualHttpResponse = new HttpResponseClassCallbackActionHandler().handle(httpClassCallback, request().withBody("some_body"));
+        HttpResponse actualHttpResponse = new HttpResponseClassCallbackActionHandler(new MockServerLogger()).handle(httpClassCallback, request().withBody("some_body"));
 
         // then
         assertThat(actualHttpResponse, is(notFoundResponse()));
@@ -35,7 +36,7 @@ public void shouldHandleValidLocalClass() {
         HttpClassCallback httpClassCallback = callback("org.mockserver.mock.action.HttpResponseClassCallbackActionHandlerTest$TestCallback");
 
         // when
-        HttpResponse actualHttpResponse = new HttpResponseClassCallbackActionHandler().handle(httpClassCallback, request().withBody("some_body"));
+        HttpResponse actualHttpResponse = new HttpResponseClassCallbackActionHandler(new MockServerLogger()).handle(httpClassCallback, request().withBody("some_body"));
 
         // then
         assertThat(actualHttpResponse, is(response("some_body")));

File: mockserver-core/src/test/java/org/mockserver/server/netty/codec/MockServerRequestDecoderTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.hamcrest.core.Is;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.mappers.ContentTypeMapper;
 import org.mockserver.model.*;
 import org.mockserver.model.Cookie;
@@ -39,7 +40,7 @@ public class MockServerRequestDecoderTest {
 
     @Before
     public void setupFixture() {
-        mockServerRequestDecoder = new MockServerRequestDecoder(false);
+        mockServerRequestDecoder = new MockServerRequestDecoder(new MockServerLogger(), false);
         output = new ArrayList<Object>();
     }
 

File: mockserver-core/src/test/java/org/mockserver/templates/engine/javascript/JavaScriptTemplateEngineTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.Mock;
 import org.mockserver.client.serialization.model.HttpRequestDTO;
 import org.mockserver.client.serialization.model.HttpResponseDTO;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 
@@ -19,7 +19,6 @@
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.Is.isA;
-import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.MockitoAnnotations.initMocks;
 import static org.mockserver.character.Character.NEW_LINE;
@@ -35,7 +34,7 @@ public class JavaScriptTemplateEngineTest {
     public ExpectedException exception = ExpectedException.none();
 
     @Mock
-    private LoggingFormatter logFormatter;
+    private MockServerLogger logFormatter;
 
     @Before
     public void setupTestFixture() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaExpectationValidatorIntegrationTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
@@ -12,7 +13,7 @@
 public class JsonSchemaExpectationValidatorIntegrationTest {
 
     // given
-    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaExpectationValidator();
+    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaExpectationValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteExpectationWithHttpResponse() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaHttpResponseValidatorIntegrationTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
@@ -12,7 +13,7 @@
 public class JsonSchemaHttpResponseValidatorIntegrationTest {
 
     // given
-    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaHttpResponseValidator();
+    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaHttpResponseValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationSequenceValidatorIntegrationTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
@@ -11,7 +12,7 @@
  */
 public class JsonSchemaVerificationSequenceValidatorIntegrationTest {
 
-    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaVerificationSequenceValidator();
+    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaVerificationSequenceValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-core/src/test/java/org/mockserver/validator/jsonschema/JsonSchemaVerificationValidatorIntegrationTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.validator.jsonschema;
 
 import org.junit.Test;
+import org.mockserver.logging.MockServerLogger;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
@@ -11,7 +12,7 @@
  */
 public class JsonSchemaVerificationValidatorIntegrationTest {
 
-    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaHttpRequestValidator();
+    private JsonSchemaValidator jsonSchemaValidator = new JsonSchemaHttpRequestValidator(new MockServerLogger());
 
     @Test
     public void shouldValidateValidCompleteRequestWithStringBody() {

File: mockserver-examples/src/main/java/org/mockserver/examples/proxy/servicebackend/BookServer.java
Patch:
@@ -59,7 +59,6 @@ public void initChannel(SocketChannel ch) throws Exception {
                                     pipeline.addLast(nettySslContextFactory().createServerSslContext().newHandler(ch.alloc()));
                                 }
 
-                                // pipeline.addLast("logger", new LoggingHandler("BOOK_HANDLER"));
                                 pipeline.addLast(new HttpServerCodec());
                                 pipeline.addLast(new HttpContentDecompressor());
                                 pipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));

File: mockserver-netty/src/main/java/org/mockserver/proxy/Proxy.java
Patch:
@@ -3,8 +3,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.util.AttributeKey;
 import org.mockserver.lifecycle.LifeCycle;
-import org.mockserver.mock.HttpStateHandler;
-import org.mockserver.model.HttpRequest;
+import org.mockserver.logging.MockServerLogger;
 
 import java.net.InetSocketAddress;
 import java.util.HashSet;
@@ -18,7 +17,6 @@
  */
 public class Proxy<T extends LifeCycle> extends LifeCycle<T> {
 
-    public static final AttributeKey<Proxy> HTTP_PROXY = AttributeKey.valueOf("HTTP_PROXY");
     public static final AttributeKey<InetSocketAddress> HTTP_CONNECT_SOCKET = AttributeKey.valueOf("HTTP_CONNECT_SOCKET");
     public static final AttributeKey<Set> LOCAL_HOST_HEADERS = AttributeKey.valueOf("LOCAL_HOST_HEADERS");
     public static final AttributeKey<Boolean> PROXYING = AttributeKey.valueOf("PROXYING");

File: mockserver-netty/src/main/java/org/mockserver/proxy/connect/HttpConnectHandler.java
Patch:
@@ -8,6 +8,7 @@
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.ssl.SslHandler;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.proxy.relay.RelayConnectHandler;
 import org.mockserver.server.netty.codec.MockServerServerCodec;
@@ -17,8 +18,8 @@
 @ChannelHandler.Sharable
 public final class HttpConnectHandler extends RelayConnectHandler<HttpRequest> {
 
-    public HttpConnectHandler(String host, int port) {
-        super(host, port);
+    public HttpConnectHandler(MockServerLogger mockServerLogger, String host, int port) {
+        super(mockServerLogger, host, port);
     }
 
     protected void removeCodecSupport(ChannelHandlerContext ctx) {

File: mockserver-netty/src/main/java/org/mockserver/proxy/socks/SocksConnectHandler.java
Patch:
@@ -8,13 +8,14 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.socks.*;
 import io.netty.handler.ssl.SslHandler;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.proxy.relay.RelayConnectHandler;
 
 @ChannelHandler.Sharable
 public final class SocksConnectHandler extends RelayConnectHandler<SocksCmdRequest> {
 
-    public SocksConnectHandler(String host, int port) {
-        super(host, port);
+    public SocksConnectHandler(MockServerLogger mockServerLogger, String host, int port) {
+        super(mockServerLogger, host, port);
     }
 
     protected void removeCodecSupport(ChannelHandlerContext ctx) {

File: mockserver-netty/src/main/java/org/mockserver/stop/StopEventQueue.java
Patch:
@@ -3,8 +3,6 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.util.concurrent.SettableFuture;
 import io.netty.channel.EventLoopGroup;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -17,7 +15,6 @@ public class StopEventQueue {
 
     @VisibleForTesting
     protected final List<Stoppable> stoppables = new ArrayList<Stoppable>();
-    private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
     public void register(Stoppable stoppable) {
         synchronized (stoppables) {

File: mockserver-netty/src/main/java/org/mockserver/unification/HttpContentLengthRemover.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.unification;
 
 import com.google.common.net.HttpHeaders;
+import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageEncoder;
 import io.netty.handler.codec.http.DefaultHttpMessage;
@@ -11,6 +12,7 @@
 /**
  * @author jamesdbloom
  */
+@ChannelHandler.Sharable
 public class HttpContentLengthRemover extends MessageToMessageEncoder<DefaultHttpMessage> {
     @Override
     protected void encode(ChannelHandlerContext ctx, DefaultHttpMessage defaultHttpMessage, List out) {

File: mockserver-netty/src/test/java/org/mockserver/integration/mockserver/AbstractMockServerNettyIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Test;
 import org.mockserver.echo.http.EchoServer;
 import org.mockserver.integration.server.SameJVMAbstractClientServerIntegrationTest;
-import org.mockserver.logging.LoggingFormatter;
+import org.mockserver.logging.MockServerLogger;
 import org.mockserver.matchers.MatcherBuilder;
 import org.mockserver.mock.action.ExpectationForwardCallback;
 import org.mockserver.mock.action.ExpectationResponseCallback;
@@ -72,7 +72,7 @@ public HttpResponse handle(HttpRequest httpRequest) {
                                 header("x-test", "test_headers_and_body")
                             )
                             .withBody("an_example_body_http");
-                        if (new MatcherBuilder(mock(LoggingFormatter.class)).transformsToMatcher(expectation).matches(httpRequest)) {
+                        if (new MatcherBuilder(mock(MockServerLogger.class)).transformsToMatcher(expectation).matches(null, httpRequest)) {
                             return response()
                                 .withStatusCode(ACCEPTED_202.code())
                                 .withReasonPhrase(ACCEPTED_202.reasonPhrase())

File: mockserver-war/src/test/java/org/mockserver/server/DeployableWARAbstractClientServerIntegrationTest.java
Patch:
@@ -197,7 +197,6 @@ public void shouldCallbackForResponseToSpecifiedClassInTestClasspath() {
     public void shouldCallbackForForwardCallbackToSpecifiedClassInTestClasspath() {
         // given
         EchoServer secureEchoServer = new EchoServer(false);
-        System.out.println("secureEchoServer.getPort() = " + secureEchoServer.getPort());
         TestClasspathTestExpectationForwardCallback.httpRequests.clear();
         TestClasspathTestExpectationForwardCallback.httpRequestToReturn = request()
             .withHeaders(

File: mockserver-core/src/main/java/org/mockserver/cors/CORSHeaders.java
Patch:
@@ -26,7 +26,7 @@ public void addCORSHeaders(HttpResponse response) {
             response.withHeader("Access-Control-Max-Age", "300");
         }
         if (response.getFirstHeader("X-CORS").isEmpty()) {
-            response.withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.disableCORS=false");
+            response.withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.enableCORSForAPI=false");
         }
     }
 }

File: mockserver-core/src/test/java/org/mockserver/server/ServletResponseWriterTest.java
Patch:
@@ -125,7 +125,7 @@ public void shouldWriteAddCORSHeaders() {
                     .withHeader("Access-Control-Allow-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
                     .withHeader("Access-Control-Expose-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
                     .withHeader("Access-Control-Max-Age", "300")
-                    .withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.disableCORS=false")
+                    .withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.enableCORSForAPI=false")
                     .withHeader("connection", "close"),
                 httpServletResponse
             );

File: mockserver-netty/src/test/java/org/mockserver/responsewriter/NettyResponseWriterTest.java
Patch:
@@ -86,7 +86,7 @@ public void shouldWriteAddCORSHeaders() {
                             .withHeader("Access-Control-Allow-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
                             .withHeader("Access-Control-Expose-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
                             .withHeader("Access-Control-Max-Age", "300")
-                            .withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.disableCORS=false")
+                            .withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.enableCORSForAPI=false")
             );
             verify(mockChannelFuture).addListener(ChannelFutureListener.CLOSE);
         } finally {

File: mockserver-client-java/src/test/java/org/mockserver/client/server/MockServerClientIntegrationTest.java
Patch:
@@ -7,15 +7,14 @@
 import org.mockserver.client.serialization.java.ExpectationToJavaSerializer;
 import org.mockserver.client.serialization.java.HttpRequestToJavaSerializer;
 import org.mockserver.echo.http.EchoServer;
-import org.mockserver.filters.LogFilter;
+import org.mockserver.filters.MockServerLog;
 import org.mockserver.matchers.TimeToLive;
 import org.mockserver.mock.Expectation;
 import org.mockserver.model.*;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.verify.VerificationTimes;
 
 import java.util.Arrays;
-import java.util.List;
 
 import static com.google.common.base.Charsets.UTF_8;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -40,7 +39,7 @@ public class MockServerClientIntegrationTest {
 
     private static MockServerClient mockServerClient;
     private static EchoServer echoServer;
-    private static LogFilter logFilter;
+    private static MockServerLog logFilter;
     private static int freePort;
 
     @Rule

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -296,7 +296,7 @@ public static void overrideLogLevel(String level) {
             overrideLogLevelWithReflection(level, "org.mockserver.proxy");
             overrideLogLevelWithReflection(level, "org.mockserver.proxy.http.HttpProxyHandler");
             overrideLogLevelWithReflection(level, "org.mockserver.matchers.HttpRequestMatcher");
-            overrideLogLevelWithReflection(level, "org.mockserver.filters.LogFilter");
+            overrideLogLevelWithReflection(level, "org.mockserver.filters.MockServerLog");
         }
     }
 

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunAndWaitMojo.java
Patch:
@@ -31,7 +31,7 @@ public void execute() throws MojoExecutionException {
                 );
             }
             try {
-                if (timeout > 0) {
+                if (timeout != null && timeout > 0) {
                     getEmbeddedJettyHolder().start(getServerPorts(), proxyPort, createInitializer());
                     try {
                         settableFuture.get(timeout, TimeUnit.SECONDS);

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -22,7 +22,6 @@ public class Main {
     static {
         if (System.getProperty("logback.configurationFile") == null) {
             System.setProperty("logback.configurationFile", "example_logback.xml");
-            System.setProperty("mockserver.logLevel", "WARN");
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/java/HttpRequestToJavaSerializer.java
Patch:
@@ -94,7 +94,7 @@ public String serialize(int numberOfSpacesToIndent, HttpRequest request) {
                     output.append(".withBody(");
                     appendNewLineAndIndent((numberOfSpacesToIndent + 2) * INDENT_SIZE, output);
                     output.append("new ParameterBody(");
-                    List<Parameter> bodyParameters = ((ParameterBody) request.getBody()).getValue();
+                    List<Parameter> bodyParameters = ((ParameterBody) request.getBody()).getValue().getEntries();
                     output.append(new ParameterToJavaSerializer().serializeAsJava(numberOfSpacesToIndent + 3, bodyParameters));
                     appendNewLineAndIndent((numberOfSpacesToIndent + 2) * INDENT_SIZE, output);
                     output.append(")");

File: mockserver-core/src/main/java/org/mockserver/mock/Expectation.java
Patch:
@@ -63,6 +63,7 @@ public HttpObjectCallback getHttpObjectCallback() {
         return httpObjectCallback;
     }
 
+    @JsonIgnore
     public Action getAction() {
         if (httpResponse != null) {
             return getHttpResponse();

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -42,7 +42,7 @@ public ActionHandler(HttpStateHandler httpStateHandler) {
     public void processAction(HttpRequest request, ResponseWriter responseWriter, ChannelHandlerContext ctx) {
         HttpResponse response = notFoundResponse();
         Expectation expectation = httpStateHandler.firstMatchingExpectation(request);
-        if (expectation != null) {
+        if (expectation != null && expectation.getAction() != null) {
             Action action = expectation.getAction();
             switch (action.getType()) {
                 case FORWARD:

File: mockserver-core/src/main/java/org/mockserver/model/NottableString.java
Patch:
@@ -60,7 +60,7 @@ public static NottableString string(String value, Boolean not) {
     }
 
     public static NottableString string(String value) {
-        return new NottableString(value, null);
+        return new NottableString(value, false);
     }
 
     public static NottableString not(String value) {

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/ParameterBodyDTOTest.java
Patch:
@@ -25,7 +25,7 @@ public void shouldReturnValuesSetInConstructor() {
         ));
 
         // then
-        assertThat(parameterBody.getParameters(), containsInAnyOrder(new ParameterDTO(new Parameter("some", "value"))));
+        assertThat(parameterBody.getParameters().getEntries(), containsInAnyOrder(new Parameter("some", "value")));
         assertThat(parameterBody.getType(), is(Body.Type.PARAMETERS));
     }
 
@@ -37,7 +37,7 @@ public void shouldBuildCorrectObject() {
         )).buildObject();
 
         // then
-        assertThat(parameterBody.getValue(), containsInAnyOrder(new Parameter("some", "value")));
+        assertThat(parameterBody.getValue().getEntries(), containsInAnyOrder(new Parameter("some", "value")));
         assertThat(parameterBody.getType(), is(Body.Type.PARAMETERS));
     }
 

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractClientServerIntegrationTest.java
Patch:
@@ -5394,9 +5394,6 @@ public void shouldRetrieveRecordedLogMessages() {
                 "\t  }," + NEW_LINE +
                 "\t  \"httpResponse\" : {" + NEW_LINE +
                 "\t    \"body\" : \"some_body\"" + NEW_LINE +
-                "\t  }," + NEW_LINE +
-                "\t  \"action\" : {" + NEW_LINE +
-                "\t    \"body\" : \"some_body\"" + NEW_LINE +
                 "\t  }" + NEW_LINE +
                 "\t}" + NEW_LINE,
             new String[]{

File: mockserver-core/src/main/java/org/mockserver/mock/HttpStateHandler.java
Patch:
@@ -185,8 +185,7 @@ public boolean handle(HttpRequest request, ResponseWriter responseWriter, boolea
 
             responseWriter.writeResponse(request, OK);
 
-        }
-        if (request.matches("PUT", "/expectation")) {
+        } else if (request.matches("PUT", "/expectation")) {
 
             for (Expectation expectation : expectationSerializer.deserializeArray(request.getBodyAsString())) {
                 if (!warDeployment || validateSupportedFeatures(expectation, request, responseWriter)) {

File: mockserver-core/src/test/java/org/mockserver/server/ServletResponseWriterTest.java
Patch:
@@ -123,7 +123,7 @@ public void shouldWriteAddCORSHeaders() {
                             .withHeader("Access-Control-Allow-Methods", "CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, TRACE")
                             .withHeader("Access-Control-Allow-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
                             .withHeader("Access-Control-Expose-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
-                            .withHeader("Access-Control-Max-Age", "1")
+                            .withHeader("Access-Control-Max-Age", "300")
                             .withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.disableCORS=false"),
                     httpServletResponse
             );

File: mockserver-netty/src/test/java/org/mockserver/mockserver/NettyResponseWriterTest.java
Patch:
@@ -85,7 +85,7 @@ public void shouldWriteAddCORSHeaders() {
                             .withHeader("Access-Control-Allow-Methods", "CONNECT, DELETE, GET, HEAD, OPTIONS, POST, PUT, TRACE")
                             .withHeader("Access-Control-Allow-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
                             .withHeader("Access-Control-Expose-Headers", "Allow, Content-Encoding, Content-Length, Content-Type, ETag, Expires, Last-Modified, Location, Server, Vary")
-                            .withHeader("Access-Control-Max-Age", "1")
+                            .withHeader("Access-Control-Max-Age", "300")
                             .withHeader("X-CORS", "MockServer CORS support enabled by default, to disable ConfigurationProperties.enableCORSForAPI(false) or -Dmockserver.disableCORS=false")
             );
             verify(mockChannelFuture).addListener(ChannelFutureListener.CLOSE);

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -576,7 +576,7 @@ public void shouldVerifyRequestsSequenceNotFound() throws Exception {
                     "} ]> but was:<[ {" + NEW_LINE +
                     "  \"method\" : \"GET\"," + NEW_LINE +
                     "  \"path\" : \"/test_headers_and_body\"," + NEW_LINE +
-                    "  \"headers\" : [ {"));
+                    "  \"headers\" : {"));
         }
     }
 

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseTemplateSerializerTest.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * @author jamesdbloom
  */
-public class ExpectationWithHttpTemplateResponseSerializerTest {
+public class ExpectationWithResponseTemplateSerializerTest {
 
     private final Expectation fullExpectation = new Expectation(
             new HttpRequest()

File: mockserver-netty/src/main/java/org/mockserver/exception/ExceptionHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.proxy.error;
+package org.mockserver.exception;
 
 import io.netty.buffer.Unpooled;
 import io.netty.channel.Channel;

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -43,7 +43,7 @@
 import static org.mockserver.model.HttpResponse.notFoundResponse;
 import static org.mockserver.model.HttpResponse.response;
 import static org.mockserver.proxy.Proxy.REMOTE_SOCKET;
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 
 @ChannelHandler.Sharable
 public class HttpProxyHandler extends SimpleChannelInboundHandler<HttpRequest> {

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/DownstreamProxyRelayHandler.java
Patch:
@@ -8,8 +8,8 @@
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ClosedSelectorException;
 
-import static org.mockserver.proxy.error.ExceptionHandler.closeOnFlush;
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.closeOnFlush;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 
 public class DownstreamProxyRelayHandler extends SimpleChannelInboundHandler<FullHttpResponse> {
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/ProxyRelayHandler.java
Patch:
@@ -5,8 +5,8 @@
 import io.netty.handler.codec.http.HttpMessage;
 import org.slf4j.Logger;
 
-import static org.mockserver.proxy.error.ExceptionHandler.closeOnFlush;
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.closeOnFlush;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 
 public class ProxyRelayHandler<T extends HttpMessage> extends SimpleChannelInboundHandler<T> {
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/RelayConnectHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.net.InetSocketAddress;
 
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 import static org.mockserver.socket.NettySslContextFactory.nettySslContextFactory;
 
 @ChannelHandler.Sharable

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/UpstreamProxyRelayHandler.java
Patch:
@@ -10,8 +10,8 @@
 import java.nio.channels.ClosedChannelException;
 import java.nio.channels.ClosedSelectorException;
 
-import static org.mockserver.proxy.error.ExceptionHandler.closeOnFlush;
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.closeOnFlush;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 import static org.mockserver.socket.NettySslContextFactory.nettySslContextFactory;
 
 public class UpstreamProxyRelayHandler extends SimpleChannelInboundHandler<FullHttpRequest> {

File: mockserver-netty/src/main/java/org/mockserver/proxy/socks/SocksProxyHandler.java
Patch:
@@ -9,7 +9,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 
 public class SocksProxyHandler extends SimpleChannelInboundHandler<SocksRequest> {
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/unification/PortUnificationHandler.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
 import io.netty.channel.*;
 import io.netty.handler.codec.http.HttpContentDecompressor;
 import io.netty.handler.codec.http.HttpObjectAggregator;
@@ -18,8 +17,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static org.mockserver.proxy.error.ExceptionHandler.closeOnFlush;
-import static org.mockserver.proxy.error.ExceptionHandler.shouldIgnoreException;
+import static org.mockserver.exception.ExceptionHandler.closeOnFlush;
+import static org.mockserver.exception.ExceptionHandler.shouldIgnoreException;
 import static org.mockserver.socket.NettySslContextFactory.nettySslContextFactory;
 
 /**

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -193,6 +193,7 @@ public void run() {
                 Action handle = mockServerMatcher.retrieveAction(request);
                 if (handle instanceof HttpError) {
                     HttpError httpError = ((HttpError) handle).applyDelay();
+                    requestLogFilter.onRequest(request);
                     if (httpError.getResponseBytes() != null) {
                         // write byte directly by skipping over HTTP codec
                         ChannelHandlerContext httpCodecContext = ctx.pipeline().context(HttpServerCodec.class);
@@ -208,10 +209,12 @@ public void run() {
                     webSocketClientRegistry.registerCallbackResponseHandler(clientId, new ExpectationCallbackResponse() {
                         @Override
                         public void handle(HttpResponse response) {
+                            requestLogFilter.onResponse(request, response);
                             writeResponse(ctx, request, response.withConnectionOptions(connectionOptions().withCloseSocket(true)));
                             logFormatter.infoLog("returning response:{}" + NEW_LINE + " for request:{}", response, request);
                         }
                     });
+                    requestLogFilter.onRequest(request);
                     webSocketClientRegistry.sendClientMessage(clientId, request);
                 } else {
                     HttpResponse response = actionHandler.processAction(handle, request);

File: mockserver-core/src/main/java/org/mockserver/client/serialization/deserializers/body/BodyDTODeserializer.java
Patch:
@@ -121,6 +121,9 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                             switch (token) {
                                 case START_ARRAY:
                                     break;
+                                case END_ARRAY:
+                                    objectDepth--;
+                                    break;
                                 case START_OBJECT:
                                     objectDepth++;
                                     parameterName = string("");

File: mockserver-core/src/main/java/org/mockserver/client/serialization/JsonArraySerializer.java
Patch:
@@ -27,7 +27,7 @@ public List<String> returnJSONObjects(String jsonArray) {
                 arrayItems.add(JacksonUtils.prettyPrint(jsonNode));
             }
         } catch (IOException e) {
-            throw new RuntimeException(e);
+            throw new IllegalArgumentException(e);
         }
         return arrayItems;
     }

File: mockserver-core/src/test/java/org/mockserver/validator/JsonSchemaValidatorTest.java
Patch:
@@ -162,8 +162,7 @@ public void shouldHandleEmptyExpectation() {
     @Test
     public void shouldHandleNullTest() {
         // given
-        assertThat(new JsonSchemaValidator(JSON_SCHEMA).isValid(null),
-                is("NullPointerException - null"));
+        assertThat(new JsonSchemaValidator(JSON_SCHEMA).isValid(null), is(""));
     }
 
     @Test

File: mockserver-client-java/src/main/java/org/mockserver/client/AbstractClient.java
Patch:
@@ -7,7 +7,6 @@
 import org.mockserver.client.serialization.HttpRequestSerializer;
 import org.mockserver.client.serialization.VerificationSequenceSerializer;
 import org.mockserver.client.serialization.VerificationSerializer;
-import org.mockserver.mock.Expectation;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.slf4j.Logger;
@@ -73,7 +72,9 @@ protected HttpResponse sendRequest(HttpRequest httpRequest) {
         HttpResponse httpResponse = nettyHttpClient.sendRequest(
                 httpRequest.withHeader(HOST.toString(), host + ":" + port)
         );
-        if (httpResponse.getStatusCode() == BAD_REQUEST.code()) {
+        if (httpResponse != null &&
+                httpResponse.getStatusCode() != null &&
+                httpResponse.getStatusCode() == BAD_REQUEST.code()) {
             throw new IllegalArgumentException(httpResponse.getBodyAsString());
         }
         return httpResponse;

File: mockserver-core/src/main/java/org/mockserver/validator/JsonSchemaValidator.java
Patch:
@@ -63,6 +63,7 @@ public String isValid(String json) {
     private String formatProcessingReport(ProcessingReport validate) {
         List<String> validationErrors = new ArrayList<String>();
         for (ProcessingMessage processingMessage : validate) {
+            System.out.println("processingMessage = " + processingMessage);
             if (String.valueOf(processingMessage.asJson().get("keyword")).equals("\"oneOf\"")) {
                 StringBuilder oneOfErrorMessage = new StringBuilder("oneOf of the following must be specified ");
                 for (JsonNode jsonNode : processingMessage.asJson().get("reports")) {

File: mockserver-core/src/main/java/org/mockserver/validator/JsonSchemaValidator.java
Patch:
@@ -48,13 +48,10 @@ public String isValid(String json) {
                     .getValidator()
                     .validate(objectMapper.readTree(schema), objectMapper.readTree(json), true);
 
-            System.out.println("json = " + json);
-            System.out.println("validate = " + validate);
             if (validate.isSuccess()) {
                 return "";
             } else {
                 for (ProcessingMessage processingMessage : validate) {
-                    System.out.println("processingMessage.getMessage() = " + processingMessage.getMessage());
                     if (String.valueOf(processingMessage.asJson().get("keyword")).equals("\"oneOf\"")) {
                         StringBuilder oneOfErrorMessage = new StringBuilder("oneOf of the following must be specified ");
                         for (JsonNode jsonNode : processingMessage.asJson().get("reports")) {

File: mockserver-netty/src/test/java/org/mockserver/integration/mockserver/AbstractMockServerNettyIntegrationTest.java
Patch:
@@ -464,7 +464,7 @@ public void shouldReturnResponseWithConnectionOptionsAndCloseSocketAndSuppressCo
                 IOStreamUtils.readInputStreamToString(socket);
                 fail("Expected socket read to fail because the socket was closed / reset");
             } catch (SocketException se) {
-                assertThat(se.getMessage(), anyOf(containsString("Broken pipe"), containsString("Connection reset"), containsString("Protocol wrong type")));
+                assertThat(se.getMessage(), anyOf(containsString("Broken pipe"), containsString("(broken pipe)"), containsString("Connection reset"), containsString("Protocol wrong type")));
             }
         } finally {
             if (socket != null) {

File: mockserver-core/src/main/java/org/mockserver/filters/HopByHopHeaderFilter.java
Patch:
@@ -32,7 +32,7 @@ public HttpRequest onRequest(HttpRequest httpRequest) {
                     filteredHeaders.add(header);
                 }
             }
-            return httpRequest.withHeaders(filteredHeaders);
+            return httpRequest.clone().withHeaders(filteredHeaders);
         } else {
             return null;
         }

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -206,7 +206,7 @@ public void setupExpectation() throws IOException {
                                 .withPath("/expectation")
                                 .withBody("requestBytes")
                 );
-        when(mockExpectationSerializer.deserialize("requestBytes")).thenReturn(expectation);
+        when(mockExpectationSerializer.deserializeArray("requestBytes")).thenReturn(new Expectation[]{expectation});
         when(mockMockServerMatcher.when(same(httpRequest), same(times), same(timeToLive))).thenReturn(expectation);
 
         // when

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -206,7 +206,7 @@ public void setupExpectation() throws IOException {
                                 .withPath("/expectation")
                                 .withBody("requestBytes")
                 );
-        when(mockExpectationSerializer.deserialize("requestBytes")).thenReturn(expectation);
+        when(mockExpectationSerializer.deserializeArray("requestBytes")).thenReturn(new Expectation[]{expectation});
         when(mockMockServerMatcher.when(same(httpRequest), same(times), same(timeToLive))).thenReturn(expectation);
 
         // when

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockserver.mockserver.callback.ExpectationCallbackResponse;
 import org.mockserver.mockserver.callback.WebSocketClientRegistry;
 import org.mockserver.model.*;
-import org.mockserver.socket.SSLFactory;
+import org.mockserver.socket.KeyAndCertificateFactory;
 import org.mockserver.validator.ExpectationValidator;
 import org.mockserver.verify.Verification;
 import org.mockserver.verify.VerificationSequence;
@@ -102,7 +102,7 @@ protected void channelRead0(final ChannelHandlerContext ctx, final HttpRequest r
                 for (Expectation expectation : expectationSerializer.deserializeArray(request.getBodyAsString())) {
                     List<String> validationErrors = expectationValidator.isValid(expectation);
                     if (validationErrors.isEmpty()) {
-                        SSLFactory.addSubjectAlternativeName(expectation.getHttpRequest().getFirstHeader(HOST.toString()));
+                        KeyAndCertificateFactory.addSubjectAlternativeName(expectation.getHttpRequest().getFirstHeader(HOST.toString()));
                         mockServerMatcher
                                 .when(expectation.getHttpRequest(), expectation.getTimes(), expectation.getTimeToLive())
                                 .thenRespond(expectation.getHttpResponse())

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -22,6 +22,7 @@
 import org.mockserver.proxy.Proxy;
 import org.mockserver.proxy.connect.HttpConnectHandler;
 import org.mockserver.proxy.unification.PortUnificationHandler;
+import org.mockserver.socket.KeyAndCertificateFactory;
 import org.mockserver.socket.KeyStoreFactory;
 import org.mockserver.verify.Verification;
 import org.mockserver.verify.VerificationSequence;
@@ -84,7 +85,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
                 // assume CONNECT always for SSL
                 PortUnificationHandler.enabledSslUpstreamAndDownstream(ctx.channel());
                 // add Subject Alternative Name for SSL certificate
-                KeyStoreFactory.addSubjectAlternativeName(request.getPath().getValue());
+                KeyAndCertificateFactory.addSubjectAlternativeName(request.getPath().getValue());
                 ctx.pipeline().addLast(new HttpConnectHandler(request.getPath().getValue(), -1));
                 ctx.pipeline().remove(this);
                 ctx.fireChannelRead(request);

File: mockserver-netty/src/main/java/org/mockserver/proxy/socks/SocksProxyHandler.java
Patch:
@@ -5,6 +5,7 @@
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.socks.*;
 import org.mockserver.proxy.unification.PortUnificationHandler;
+import org.mockserver.socket.KeyAndCertificateFactory;
 import org.mockserver.socket.KeyStoreFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -48,7 +49,7 @@ protected void channelRead0(final ChannelHandlerContext ctx, SocksRequest socksR
                     }
 
                     // add Subject Alternative Name for SSL certificate
-                    KeyStoreFactory.addSubjectAlternativeName(req.host());
+                    KeyAndCertificateFactory.addSubjectAlternativeName(req.host());
 
                     ctx.pipeline().addAfter(getClass().getSimpleName() + "#0", SocksConnectHandler.class.getSimpleName() + "#0", new SocksConnectHandler(req.host(), req.port()));
                     ctx.pipeline().remove(this);

File: mockserver-core/src/main/java/org/mockserver/server/unification/PortUnificationHandler.java
Patch:
@@ -11,7 +11,6 @@
 import io.netty.handler.logging.LoggingHandler;
 import io.netty.handler.ssl.SslHandler;
 import io.netty.util.AttributeKey;
-import org.mockserver.socket.NettySslContextFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: mockserver-core/src/main/java/org/mockserver/socket/SSLSocketFactory.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.socket;
 
 import javax.net.ssl.SSLSocket;
+import java.io.IOException;
 import java.net.Socket;
 
 import static org.mockserver.socket.KeyStoreFactory.keyStoreFactory;
@@ -14,7 +15,7 @@ public static SSLSocketFactory sslSocketFactory() {
         return new SSLSocketFactory();
     }
 
-    public synchronized SSLSocket wrapSocket(Socket socket) throws Exception {
+    public synchronized SSLSocket wrapSocket(Socket socket) throws IOException {
         // ssl socket factory
         javax.net.ssl.SSLSocketFactory sslSocketFactory = keyStoreFactory().sslContext().getSocketFactory();
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/Proxy.java
Patch:
@@ -21,7 +21,6 @@ public interface Proxy extends Stoppable {
     public static final AttributeKey<RequestResponseLogFilter> REQUEST_RESPONSE_LOG_FILTER = AttributeKey.valueOf("PROXY_REQUEST_RESPONSE_LOG_FILTER");
     public static final AttributeKey<InetSocketAddress> REMOTE_SOCKET = AttributeKey.valueOf("REMOTE_SOCKET");
     public static final AttributeKey<InetSocketAddress> HTTP_CONNECT_SOCKET = AttributeKey.valueOf("HTTP_CONNECT_SOCKET");
-    public static final AttributeKey<Boolean> ONWARD_SSL_UNKNOWN = AttributeKey.valueOf("ONWARD_SSL_UNKNOWN");
 
     public boolean isRunning();
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/direct/DirectProxyUnificationHandler.java
Patch:
@@ -21,8 +21,7 @@ protected void configurePipeline(ChannelHandlerContext ctx, ChannelPipeline pipe
         pipeline.addLast(new HttpProxyHandler(
                         ctx.channel().attr(Proxy.HTTP_PROXY).get(),
                         ctx.channel().attr(Proxy.REQUEST_LOG_FILTER).get(),
-                        ctx.channel().attr(Proxy.REQUEST_RESPONSE_LOG_FILTER).get(),
-                        ctx.channel().attr(HttpProxy.ONWARD_SSL_UNKNOWN).get())
+                        ctx.channel().attr(Proxy.REQUEST_RESPONSE_LOG_FILTER).get())
         );
     }
 }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyUnificationHandler.java
Patch:
@@ -19,8 +19,7 @@ protected void configurePipeline(ChannelHandlerContext ctx, ChannelPipeline pipe
         pipeline.addLast(new HttpProxyHandler(
                 ctx.channel().attr(Proxy.HTTP_PROXY).get(),
                 ctx.channel().attr(Proxy.REQUEST_LOG_FILTER).get(),
-                ctx.channel().attr(Proxy.REQUEST_RESPONSE_LOG_FILTER).get(),
-                ctx.channel().attr(HttpProxy.ONWARD_SSL_UNKNOWN).get()
+                ctx.channel().attr(Proxy.REQUEST_RESPONSE_LOG_FILTER).get()
         ));
     }
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/RelayConnectHandler.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.proxy.http.HttpProxy;
 import org.mockserver.proxy.unification.PortUnificationHandler;
-import org.mockserver.socket.NettySslContextFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -85,7 +84,7 @@ public void operationComplete(ChannelFuture channelFuture) throws Exception {
 
                                         upstreamPipeline.addLast(new HttpObjectAggregator(Integer.MAX_VALUE));
 
-                                        upstreamPipeline.addLast(new UpstreamProxyRelayHandler(clientCtx.channel(), logger));
+                                        upstreamPipeline.addLast(new UpstreamProxyRelayHandler(serverCtx.channel(), clientCtx.channel(), logger));
                                     }
                                 });
                     }

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/HttpProxyHandlerTest.java
Patch:
@@ -69,7 +69,7 @@ public void setupFixture() {
         mockRequestLogFilter = mock(RequestLogFilter.class);
         mockRequestResponseLogFilter = mock(RequestResponseLogFilter.class);
         mockHttpProxy = mock(Proxy.class);
-        httpProxyHandler = new HttpProxyHandler(mockHttpProxy, mockRequestLogFilter, mockRequestResponseLogFilter, false);
+        httpProxyHandler = new HttpProxyHandler(mockHttpProxy, mockRequestLogFilter, mockRequestResponseLogFilter);
         embeddedChannel = new EmbeddedChannel(httpProxyHandler);
 
         initMocks(this);

File: mockserver-proxy-war/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -188,7 +188,7 @@ private HttpResponse sendRequest(HttpRequest httpRequest) {
                 }
                 InetSocketAddress remoteAddress = new InetSocketAddress(hostHeaderParts[0], port);
 
-                HttpResponse httpResponse = httpClient.sendRequest(httpRequest, remoteAddress, true);
+                HttpResponse httpResponse = httpClient.sendRequest(httpRequest, remoteAddress);
                 httpResponse = filters.applyOnResponseFilters(httpRequest, httpResponse);
                 if (httpResponse != null) {
                     return httpResponse;

File: mockserver-netty/src/test/java/org/mockserver/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -45,6 +45,7 @@
 /**
  * @author jamesdbloom
  */
+@Ignore
 public class NettyHttpProxySOCKSIntegrationTest {
 
     private static final Logger logger = LoggerFactory.getLogger(NettyHttpProxySOCKSIntegrationTest.class);

File: mockserver-netty/src/test/java/org/mockserver/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -45,7 +45,6 @@
 /**
  * @author jamesdbloom
  */
-@Ignore
 public class NettyHttpProxySOCKSIntegrationTest {
 
     private static final Logger logger = LoggerFactory.getLogger(NettyHttpProxySOCKSIntegrationTest.class);

File: mockserver-netty/src/test/java/org/mockserver/integration/proxy/socks/NettyHttpProxySOCKSIntegrationTest.java
Patch:
@@ -45,6 +45,7 @@
 /**
  * @author jamesdbloom
  */
+@Ignore
 public class NettyHttpProxySOCKSIntegrationTest {
 
     private static final Logger logger = LoggerFactory.getLogger(NettyHttpProxySOCKSIntegrationTest.class);

File: mockserver-core/src/main/java/org/mockserver/client/netty/NettyHttpClient.java
Patch:
@@ -62,7 +62,7 @@ public HttpResponse sendRequest(final HttpRequest httpRequest, @Nullable InetSoc
         EventLoopGroup group = new NioEventLoopGroup();
 
         try {
-            final HttpClientInitializer channelInitializer = new HttpClientInitializer(httpRequest.isSecure() != null && httpRequest.isSecure());
+            final HttpClientInitializer channelInitializer = new HttpClientInitializer(httpRequest.isSecure() != null && httpRequest.isSecure(), remoteAddress);
 
             // make the connection attempt
             new Bootstrap()

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -227,7 +227,7 @@ public void handle(HttpResponse response) {
             }
         } catch (Exception e) {
             logger.error("Exception processing " + request, e);
-            writeResponse(ctx, request, response().withStatusCode(BAD_REQUEST.code()));
+            writeResponse(ctx, request, response().withStatusCode(BAD_REQUEST.code()).withBody(e.getMessage()));
         }
 
     }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -176,7 +176,7 @@ public void run() {
             }
         } catch (Exception e) {
             logger.error("Exception processing " + request, e);
-            writeResponse(ctx, request, response().withStatusCode(BAD_REQUEST.code()));
+            writeResponse(ctx, request, response().withStatusCode(BAD_REQUEST.code()).withBody(e.getMessage()));
         }
 
     }

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/HttpProxyHandlerGeneralOperationsTest.java
Patch:
@@ -150,7 +150,7 @@ public void shouldReturnBadRequestAfterException() {
         // and - correct response written to ChannelHandlerContext
         HttpResponse httpResponse = (HttpResponse)embeddedChannel.readOutbound();
         assertThat(httpResponse.getStatusCode(), is(HttpResponseStatus.BAD_REQUEST.code()));
-        assertThat(httpResponse.getBodyAsString(), is(""));
+        assertThat(httpResponse.getBodyAsString(), is("TEST EXCEPTION"));
     }
 
     @Test

File: mockserver-client-java/src/test/java/org/mockserver/client/server/MockServerClientIntegrationTest.java
Patch:
@@ -850,7 +850,6 @@ public void shouldVerifyMultipleRequestsNoVerificationTimes() {
         );
 
         // then
-        System.out.println(new HttpRequestToJavaSerializer().serializeAsJava(3, requestLogFilter.httpRequests(request()).get(0)));
         assertThat(requestLogFilter.httpRequests(request()).size(), is(1));
         String result = requestLogFilter.verify(verification().withRequest(
                 request()

File: mockserver-core/src/main/java/org/mockserver/client/serialization/deserializers/body/BodyDTODeserializer.java
Patch:
@@ -66,7 +66,7 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                     try {
                         type = Body.Type.valueOf(jsonParser.getText());
                     } catch (IllegalArgumentException iae) {
-                        logger.warn("Ignoring invalid value for \"type\" field of \"" + jsonParser.getText() + "\"");
+                        logger.debug("Ignoring invalid value for \"type\" field of \"" + jsonParser.getText() + "\"");
                     }
                 }
                 if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME && containsIgnoreCase(jsonParser.getText(), "string", "regex", "json", "jsonSchema", "xpath", "xml", "bytes", "value") && type != Body.Type.PARAMETERS) {

File: mockserver-client-java/src/test/java/org/mockserver/client/server/MockServerClientTest.java
Patch:
@@ -110,7 +110,7 @@ public void shouldSetupExpectationWithResponse() {
         // then
         Expectation expectation = forwardChainExpectation.getExpectation();
         assertTrue(expectation.matches(httpRequest));
-        assertSame(httpResponse, expectation.getHttpResponse(false));
+        assertSame(httpResponse, expectation.getHttpResponse());
         assertEquals(Times.unlimited(), expectation.getTimes());
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/java/ExpectationToJavaSerializer.java
Patch:
@@ -19,9 +19,9 @@ public String serializeAsJava(int numberOfSpacesToIndent, Expectation expectatio
             output.append(new HttpRequestToJavaSerializer().serializeAsJava(numberOfSpacesToIndent + 1, expectation.getHttpRequest())).append(",");
             appendNewLineAndIndent((numberOfSpacesToIndent + 1) * INDENT_SIZE, output).append("Times.once()");
             appendNewLineAndIndent(numberOfSpacesToIndent * INDENT_SIZE, output).append(")");
-            if (expectation.getHttpResponse(false) != null) {
+            if (expectation.getHttpResponse() != null) {
                 appendNewLineAndIndent(numberOfSpacesToIndent * INDENT_SIZE, output).append(".respond(");
-                output.append(new HttpResponseToJavaSerializer().serializeAsJava(numberOfSpacesToIndent + 1, expectation.getHttpResponse(false)));
+                output.append(new HttpResponseToJavaSerializer().serializeAsJava(numberOfSpacesToIndent + 1, expectation.getHttpResponse()));
                 appendNewLineAndIndent(numberOfSpacesToIndent * INDENT_SIZE, output).append(")");
             }
             if (expectation.getHttpForward() != null) {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/ExpectationDTO.java
Patch:
@@ -25,7 +25,7 @@ public ExpectationDTO(Expectation expectation) {
             if (httpRequest != null) {
                 this.httpRequest = new HttpRequestDTO(httpRequest, httpRequest.getNot());
             }
-            HttpResponse httpResponse = expectation.getHttpResponse(false);
+            HttpResponse httpResponse = expectation.getHttpResponse();
             if (httpResponse != null) {
                 this.httpResponse = new HttpResponseDTO(httpResponse);
             }

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -56,7 +56,7 @@ public Expectation when(final HttpRequest httpRequest, Times times, TimeToLive t
         return expectation;
     }
 
-    public Action handle(HttpRequest httpRequest) {
+    public Action retrieveAction(HttpRequest httpRequest) {
         for (Expectation expectation : new ArrayList<Expectation>(this.expectations)) {
             if (expectation.matches(httpRequest)) {
                 expectation.decrementRemainingMatches();
@@ -65,7 +65,7 @@ public Action handle(HttpRequest httpRequest) {
                         this.expectations.remove(expectation);
                     }
                 }
-                return expectation.getAction(true);
+                return expectation.getAction();
             } else if (!expectation.isStillAlive()) {
                 if (this.expectations.contains(expectation)) {
                     this.expectations.remove(expectation);
@@ -120,7 +120,7 @@ String cleanBase64Response(String serializedExpectation) {
         }
     }
 
-    public synchronized Expectation[] retrieve(HttpRequest httpRequest) {
+    public Expectation[] retrieveExpectations(HttpRequest httpRequest) {
         List<Expectation> expectations = new ArrayList<Expectation>();
         if (httpRequest != null) {
             for (Expectation expectation : new ArrayList<Expectation>(this.expectations)) {

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpResponseActionHandler.java
Patch:
@@ -8,6 +8,6 @@
 public class HttpResponseActionHandler {
 
     public HttpResponse handle(HttpResponse httpResponse) {
-        return httpResponse.shallowClone();
+        return httpResponse.applyDelay().shallowClone();
     }
 }

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -49,7 +49,6 @@ public void shouldThrowSocketCommunicationExceptionForConnectException() {
         new NettyHttpClient().sendRequest(outboundRequest("127.0.0.1", freePort, "", request()));
     }
 
-    @Test
     @Ignore
     public void shouldHandleConnectionClosure() {
         // given

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherClearAndResetTest.java
Patch:
@@ -32,10 +32,10 @@ public void shouldRemoveExpectationWhenNoMoreTimes() {
         mockServerMatcher.when(new HttpRequest().withPath("somepath"), Times.exactly(2), TimeToLive.unlimited()).thenRespond(httpResponse);
 
         // then
-        assertEquals(httpResponse, mockServerMatcher.handle(new HttpRequest().withPath("somepath")));
-        assertEquals(httpResponse, mockServerMatcher.handle(new HttpRequest().withPath("somepath")));
+        assertEquals(httpResponse, mockServerMatcher.retrieveAction(new HttpRequest().withPath("somepath")));
+        assertEquals(httpResponse, mockServerMatcher.retrieveAction(new HttpRequest().withPath("somepath")));
         assertArrayEquals(new Expectation[]{}, mockServerMatcher.expectations.toArray());
-        assertEquals(null, mockServerMatcher.handle(new HttpRequest().withPath("somepath")));
+        assertEquals(null, mockServerMatcher.retrieveAction(new HttpRequest().withPath("somepath")));
     }
 
     @Test

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -106,7 +106,7 @@ protected void channelRead0(final ChannelHandlerContext ctx, final HttpRequest r
                     SSLFactory.addSubjectAlternativeName(expectation.getHttpRequest().getFirstHeader(HOST.toString()));
                     mockServerMatcher
                             .when(expectation.getHttpRequest(), expectation.getTimes(), expectation.getTimeToLive())
-                            .thenRespond(expectation.getHttpResponse(false))
+                            .thenRespond(expectation.getHttpResponse())
                             .thenForward(expectation.getHttpForward())
                             .thenError(expectation.getHttpError())
                             .thenCallback(expectation.getHttpClassCallback())
@@ -151,7 +151,7 @@ protected void channelRead0(final ChannelHandlerContext ctx, final HttpRequest r
 
                 HttpRequest httpRequest = httpRequestSerializer.deserialize(request.getBodyAsString());
                 if (request.hasQueryStringParameter("type", "expectation")) {
-                    Expectation[] expectations = mockServerMatcher.retrieve(httpRequest);
+                    Expectation[] expectations = mockServerMatcher.retrieveExpectations(httpRequest);
                     logFormatter.infoLog("retrieving expectations that match:{}", httpRequest);
                     writeResponse(ctx, request, HttpResponseStatus.OK, expectationSerializer.serialize(expectations), "application/json");
                 } else {
@@ -194,7 +194,7 @@ public void run() {
 
             } else {
 
-                Action handle = mockServerMatcher.handle(request);
+                Action handle = mockServerMatcher.retrieveAction(request);
                 if (handle instanceof HttpError) {
                     HttpError httpError = ((HttpError) handle).applyDelay();
                     if (httpError.getResponseBytes() != null) {

File: mockserver-netty/src/test/java/org/mockserver/integration/mockserver/AbstractMockServerNettyIntegrationTest.java
Patch:
@@ -421,7 +421,7 @@ public void shouldReturnResponseWithConnectionOptionsAndCloseSocketAndSuppressCo
                 IOStreamUtils.readInputStreamToString(socket);
                 fail("Expected socket read to fail because the socket was closed / reset");
             } catch (SocketException se) {
-                assertThat(se.getMessage(), anyOf(containsString("Broken pipe"), containsString("Connection reset")));
+                assertThat(se.getMessage(), anyOf(containsString("Broken pipe"), containsString("Connection reset"), containsString("Protocol wrong type")));
             }
         } finally {
             if (socket != null) {

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -24,7 +24,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -104,7 +103,7 @@ public void setupFixture() {
         // given - an expectation that has been setup
         when(mockExpectation.getHttpRequest()).thenReturn(mockHttpRequest);
         when(mockExpectation.getTimes()).thenReturn(Times.once());
-        when(mockExpectation.getHttpResponse(anyBoolean())).thenReturn(mockHttpResponse);
+        when(mockExpectation.getHttpResponse()).thenReturn(mockHttpResponse);
         when(mockExpectation.getHttpForward()).thenReturn(mockHttpForward);
         when(mockExpectation.getHttpError()).thenReturn(mockHttpError);
         when(mockExpectation.getHttpClassCallback()).thenReturn(mockHttpClassCallback);

File: mockserver-core/src/main/java/org/mockserver/mappers/ContentTypeMapper.java
Patch:
@@ -101,6 +101,8 @@ private static Charset getCharsetFromContentTypeHeader(String contentType) {
                 } catch (IllegalCharsetNameException icne) {
                     logger.info("Illegal character set {} in Content-Type header: {}.", StringUtils.substringAfterLast(contentType, HttpHeaders.Values.CHARSET + HttpConstants.EQUALS), contentType);
                 }
+            } else if (ContentTypeUtil.utf8ContentTypes.containsKey(contentType)) {
+                charset = CharsetUtil.UTF_8;
             }
         }
         return charset;

File: mockserver-netty/src/test/java/org/mockserver/codec/MockServerRequestDecoderTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.net.MediaType;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.*;
+import io.netty.util.CharsetUtil;
 import org.hamcrest.core.Is;
 import org.junit.Before;
 import org.junit.Test;
@@ -201,7 +202,7 @@ public void shouldDecodeBodyWithContentTypeAndNoCharset() {
 
         // then
         Body body = ((HttpRequest) output.get(0)).getBody();
-        assertThat(body, Is.<Body>is(exact("A normal string with ASCII characters")));
+        assertThat(body, Is.<Body>is(exact("A normal string with ASCII characters", CharsetUtil.UTF_8)));
     }
 
     @Test

File: mockserver-netty/src/test/java/org/mockserver/codec/MockServerResponseEncoderContentTypeTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;
+import io.netty.util.CharsetUtil;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.mappers.ContentTypeMapper;
@@ -53,7 +54,7 @@ public void shouldDecodeBodyWithContentTypeAndNoCharset() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.content().array(), is("avro işarəsi: \u20AC".getBytes(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)));
+        assertThat(fullHttpResponse.content().array(), is("avro işarəsi: \u20AC".getBytes(CharsetUtil.UTF_8)));
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/mappers/ContentTypeMapper.java
Patch:
@@ -101,6 +101,8 @@ private static Charset getCharsetFromContentTypeHeader(String contentType) {
                 } catch (IllegalCharsetNameException icne) {
                     logger.info("Illegal character set {} in Content-Type header: {}.", StringUtils.substringAfterLast(contentType, HttpHeaders.Values.CHARSET + HttpConstants.EQUALS), contentType);
                 }
+            } else if (ContentTypeUtil.utf8ContentTypes.containsKey(contentType)) {
+                charset = CharsetUtil.UTF_8;
             }
         }
         return charset;

File: mockserver-netty/src/test/java/org/mockserver/codec/MockServerRequestDecoderTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.net.MediaType;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.*;
+import io.netty.util.CharsetUtil;
 import org.hamcrest.core.Is;
 import org.junit.Before;
 import org.junit.Test;
@@ -201,7 +202,7 @@ public void shouldDecodeBodyWithContentTypeAndNoCharset() {
 
         // then
         Body body = ((HttpRequest) output.get(0)).getBody();
-        assertThat(body, Is.<Body>is(exact("A normal string with ASCII characters")));
+        assertThat(body, Is.<Body>is(exact("A normal string with ASCII characters", CharsetUtil.UTF_8)));
     }
 
     @Test

File: mockserver-netty/src/test/java/org/mockserver/codec/MockServerResponseEncoderContentTypeTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpHeaders;
+import io.netty.util.CharsetUtil;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockserver.mappers.ContentTypeMapper;
@@ -53,7 +54,7 @@ public void shouldDecodeBodyWithContentTypeAndNoCharset() {
 
         // then
         FullHttpResponse fullHttpResponse = (FullHttpResponse) output.get(0);
-        assertThat(fullHttpResponse.content().array(), is("avro işarəsi: \u20AC".getBytes(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)));
+        assertThat(fullHttpResponse.content().array(), is("avro işarəsi: \u20AC".getBytes(CharsetUtil.UTF_8)));
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -135,7 +135,6 @@ public static void addSslSubjectAlternativeNameDomains(String... newSubjectAlter
 
     public static void clearSslSubjectAlternativeNameDomains() {
         ALL_SUBJECT_ALTERNATIVE_DOMAINS.clear();
-        addSslSubjectAlternativeNameDomains(readPropertyHierarchically("mockserver.sslSubjectAlternativeNameDomains", "localhost").split(","));
     }
 
     public static boolean containsSslSubjectAlternativeName(String domainOrIp) {

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerGeneralOperationsTest.java
Patch:
@@ -164,7 +164,6 @@ public void shouldAddSubjectAlternativeName() throws UnknownHostException {
         HttpRequest request = request("/expectation").withMethod("PUT").withBody("some_content");
         when(mockHttpRequest.getFirstHeader(HttpHeaders.Names.HOST)).thenReturn("somehostname");
         Set<String> expectedDomainNames = new TreeSet<String>();
-        expectedDomainNames.add("localhost");
         try {
             for (InetAddress addr : InetAddress.getAllByName("somehostname")) {
                 expectedDomainNames.add(addr.getHostAddress());

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerGeneralOperationsTest.java
Patch:
@@ -157,8 +157,10 @@ public void shouldSetupExpectation() {
 
     @Test
     public void shouldAddSubjectAlternativeName() throws UnknownHostException {
+        System.out.println("ConfigurationProperties.sslSubjectAlternativeNameDomains() = " + Arrays.asList(ConfigurationProperties.sslSubjectAlternativeNameDomains()));
         // given
         ConfigurationProperties.clearSslSubjectAlternativeNameDomains();
+        System.out.println("ConfigurationProperties.sslSubjectAlternativeNameDomains() = " + Arrays.asList(ConfigurationProperties.sslSubjectAlternativeNameDomains()));
         HttpRequest request = request("/expectation").withMethod("PUT").withBody("some_content");
         when(mockHttpRequest.getFirstHeader(HttpHeaders.Names.HOST)).thenReturn("somehostname");
         Set<String> expectedDomainNames = new TreeSet<String>();

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerGeneralOperationsTest.java
Patch:
@@ -177,6 +177,8 @@ public void shouldAddSubjectAlternativeName() throws UnknownHostException {
         embeddedChannel.writeInbound(request);
 
         // then
+        System.out.println("ConfigurationProperties.sslSubjectAlternativeNameDomains() = " + Arrays.asList(ConfigurationProperties.sslSubjectAlternativeNameDomains()));
+        System.out.println("expectedDomainNames = " + expectedDomainNames);
         assertThat(Arrays.asList(ConfigurationProperties.sslSubjectAlternativeNameDomains()), containsInAnyOrder(expectedDomainNames.toArray()));
 
         // cleanup

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerGeneralOperationsTest.java
Patch:
@@ -13,6 +13,7 @@
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 
@@ -172,6 +173,7 @@ public void shouldAddSubjectAlternativeName() throws UnknownHostException {
         embeddedChannel.writeInbound(request);
 
         // then
+        System.out.println("ConfigurationProperties.sslSubjectAlternativeNameDomains() = " + Arrays.asList(ConfigurationProperties.sslSubjectAlternativeNameDomains()));
         if (inetAddress != null) {
             assertThat(Arrays.asList(ConfigurationProperties.sslSubjectAlternativeNameDomains()), containsInAnyOrder("localhost", inetAddress.getHostName(), inetAddress.getCanonicalHostName()));
         } else {

File: mockserver-core/src/main/java/org/mockserver/client/netty/codec/MockServerResponseDecoder.java
Patch:
@@ -3,7 +3,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageDecoder;
 import io.netty.handler.codec.http.FullHttpResponse;
-import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.cookie.ClientCookieDecoder;
 import io.netty.handler.codec.http.cookie.ServerCookieDecoder;
 import org.mockserver.mappers.ContentTypeMapper;
@@ -15,6 +14,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
+
 /**
  * @author jamesdbloom
  */
@@ -74,7 +75,7 @@ private void setBody(HttpResponse httpResponse, FullHttpResponse fullHttpRespons
             byte[] bodyBytes = new byte[fullHttpResponse.content().readableBytes()];
             fullHttpResponse.content().readBytes(bodyBytes);
             if (bodyBytes.length > 0) {
-                if (ContentTypeMapper.isBinary(fullHttpResponse.headers().get(HttpHeaders.Names.CONTENT_TYPE))) {
+                if (ContentTypeMapper.isBinary(fullHttpResponse.headers().get(CONTENT_TYPE))) {
                     httpResponse.withBody(new BinaryBody(bodyBytes));
                 } else {
                     Charset requestCharset = ContentTypeMapper.determineCharsetForMessage(fullHttpResponse);

File: mockserver-core/src/main/java/org/mockserver/client/serialization/ObjectMapperFactory.java
Patch:
@@ -68,6 +68,8 @@ private static class Module extends SimpleModule {
             addDeserializer(BodyDTO.class, new BodyDTODeserializer());
             addSerializer(StringBodyDTO.class, new StringBodyDTOSerializer());
             addSerializer(StringBody.class, new StringBodySerializer());
+            addSerializer(BinaryBodyDTO.class, new BinaryBodyDTOSerializer());
+            addSerializer(BinaryBody.class, new BinaryBodySerializer());
             addSerializer(RegexBodyDTO.class, new RegexBodyDTOSerializer());
             addSerializer(RegexBody.class, new RegexBodySerializer());
             addSerializer(JsonBodyDTO.class, new JsonBodyDTOSerializer());

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/BinaryBodyDTO.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.client.serialization.model;
 
+import com.google.common.net.MediaType;
 import org.mockserver.model.BinaryBody;
 
 import javax.xml.bind.DatatypeConverter;
@@ -16,7 +17,7 @@ public BinaryBodyDTO(BinaryBody binaryBody) {
     }
 
     public BinaryBodyDTO(BinaryBody binaryBody, Boolean not) {
-        super(binaryBody.getType(), not);
+        super(binaryBody.getType(), not, binaryBody.getContentType());
         if (binaryBody.getValue() != null && binaryBody.getValue().length > 0) {
             value = DatatypeConverter.printBase64Binary(binaryBody.getValue());
         }
@@ -30,6 +31,6 @@ public String getValue() {
     }
 
     public BinaryBody buildObject() {
-        return new BinaryBody(DatatypeConverter.parseBase64Binary(value));
+        return new BinaryBody(DatatypeConverter.parseBase64Binary(value), (contentType != null ? MediaType.parse(contentType) : null));
     }
 }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/JsonSchemaBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public JsonSchemaBodyDTO(JsonSchemaBody jsonSchemaBody) {
     }
 
     public JsonSchemaBodyDTO(JsonSchemaBody jsonSchemaBody, Boolean not) {
-        super(Body.Type.JSON_SCHEMA, not);
+        super(Body.Type.JSON_SCHEMA, not, jsonSchemaBody.getContentType());
         this.jsonSchema = jsonSchemaBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/ParameterBodyDTO.java
Patch:
@@ -19,7 +19,7 @@ public ParameterBodyDTO(ParameterBody parameterBody) {
     }
 
     public ParameterBodyDTO(ParameterBody parameterBody, Boolean not) {
-        super(parameterBody.getType(), not);
+        super(parameterBody.getType(), not, parameterBody.getContentType());
         parameters = Lists.transform(parameterBody.getValue(), new Function<Parameter, ParameterDTO>() {
             public ParameterDTO apply(Parameter parameter) {
                 return new ParameterDTO(parameter);

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/RegexBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public RegexBodyDTO(RegexBody regexBody) {
     }
 
     public RegexBodyDTO(RegexBody regexBody, Boolean not) {
-        super(Body.Type.REGEX, not);
+        super(Body.Type.REGEX, not, regexBody.getContentType());
         this.regex = regexBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/XPathBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public XPathBodyDTO(XPathBody xPathBody) {
     }
 
     public XPathBodyDTO(XPathBody xPathBody, Boolean not) {
-        super(Body.Type.XPATH, not);
+        super(Body.Type.XPATH, not, xPathBody.getContentType());
         this.xpath = xPathBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/XmlBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public XmlBodyDTO(XmlBody xmlBody) {
     }
 
     public XmlBodyDTO(XmlBody xmlBody, Boolean not) {
-        super(Body.Type.XML, not);
+        super(Body.Type.XML, not, xmlBody.getContentType());
         this.xml = xmlBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/JsonBodyDTOSerializer.java
Patch:
@@ -24,8 +24,8 @@ public void serialize(JsonBodyDTO jsonBodyDTO, JsonGenerator jgen, SerializerPro
         if (jsonBodyDTO.getNot() != null && jsonBodyDTO.getNot()) {
             jgen.writeBooleanField("not", jsonBodyDTO.getNot());
         }
-        if (jsonBodyDTO.getCharset() != null && !jsonBodyDTO.getCharset().equals(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)) {
-            jgen.writeStringField("charset", jsonBodyDTO.getCharset().name());
+        if (jsonBodyDTO.getContentType() != null && !jsonBodyDTO.getContentType().equals(JsonBody.DEFAULT_CONTENT_TYPE.toString())) {
+            jgen.writeStringField("contentType", jsonBodyDTO.getContentType());
         }
         jgen.writeStringField("type", jsonBodyDTO.getType().name());
         jgen.writeStringField("json", jsonBodyDTO.getJson());

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/JsonBodySerializer.java
Patch:
@@ -23,8 +23,8 @@ public void serialize(JsonBody jsonBody, JsonGenerator jgen, SerializerProvider
         if (jsonBody.getNot() != null && jsonBody.getNot()) {
             jgen.writeBooleanField("not", jsonBody.getNot());
         }
-        if (jsonBody.getCharset() != null && !jsonBody.getCharset().equals(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)) {
-            jgen.writeStringField("charset", jsonBody.getCharset().name());
+        if (jsonBody.getContentType() != null && !jsonBody.getContentType().equals(JsonBody.DEFAULT_CONTENT_TYPE.toString())) {
+            jgen.writeStringField("contentType", jsonBody.getContentType());
         }
         jgen.writeStringField("type", jsonBody.getType().name());
         jgen.writeStringField("json", jsonBody.getValue());

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/XmlBodySerializer.java
Patch:
@@ -22,6 +22,9 @@ public void serialize(XmlBody xmlBody, JsonGenerator jgen, SerializerProvider pr
         if (xmlBody.getNot() != null && xmlBody.getNot()) {
             jgen.writeBooleanField("not", xmlBody.getNot());
         }
+        if (xmlBody.getContentType() != null && !xmlBody.getContentType().equals(XmlBody.DEFAULT_CONTENT_TYPE.toString())) {
+            jgen.writeStringField("contentType", xmlBody.getContentType());
+        }
         jgen.writeStringField("type", xmlBody.getType().name());
         jgen.writeStringField("xml", xmlBody.getValue());
         jgen.writeEndObject();

File: mockserver-core/src/main/java/org/mockserver/model/RegexBody.java
Patch:
@@ -8,7 +8,7 @@ public class RegexBody extends Body {
     private String regex;
 
     public RegexBody(String regex) {
-        super(Type.REGEX);
+        super(Type.REGEX, null);
         this.regex = regex;
     }
 

File: mockserver-core/src/main/java/org/mockserver/model/XPathBody.java
Patch:
@@ -8,7 +8,7 @@ public class XPathBody extends Body {
     private final String xpath;
 
     public XPathBody(String xpath) {
-        super(Type.XPATH);
+        super(Type.XPATH, null);
         this.xpath = xpath;
     }
 

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -106,7 +106,6 @@ public void shouldHandleSmallerContentLengthHeader() {
                             .withHeader(header(CONTENT_LENGTH, "this is an example body".length() / 2))
                             .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))
                             .withHeader(header(CONNECTION, HttpHeaders.Values.KEEP_ALIVE))
-                            .withHeader(header(CONTENT_TYPE, MediaType.create("text", "plain").toString()))
                             .withBody(exact("this is an "))
             ));
         } finally {

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -82,7 +82,6 @@ public void shouldSendComplexRequest() {
                         .withHeader(header(CONTENT_LENGTH, "this is an example body".length()))
                         .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))
                         .withHeader(header(CONNECTION, HttpHeaders.Values.KEEP_ALIVE))
-                        .withHeader(header(CONTENT_TYPE, MediaType.create("text", "plain").toString()))
                         .withHeader(header(COOKIE, "some_cookie_name=some_cookie_value; another_cookie_name=another_cookie_value"))
                         .withHeader(header("some_header_name", "some_header_value"))
                         .withHeader(header("another_header_name", "first_header_value", "second_header_value"))

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerIntegrationTest.java
Patch:
@@ -131,9 +131,10 @@ public void shouldDeserializeJsonBody() throws IOException {
         HttpRequest httpRequest = new HttpRequestSerializer().deserialize(requestBytes);
 
         // then
-        assertEquals(new HttpRequestDTO()
+        HttpRequest expected = new HttpRequestDTO()
                 .setBody(BodyDTO.createDTO(json("{ \"key\": \"value\" }")))
-                .buildObject(), httpRequest);
+                .buildObject();
+        assertEquals(expected, httpRequest);
     }
 
     @Test

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -22,8 +22,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * An HTTP server that sends back the content of the received HTTP request
- * in a pretty plaintext form.
+ * @author jamesdbloom
  */
 public class MockServer implements Stoppable {
 

File: mockserver-netty/src/main/java/org/mockserver/mockserver/callback/server/WebSocketServerHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 import java.util.concurrent.TimeUnit;
 
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
 import static io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;
 import static io.netty.handler.codec.http.HttpResponseStatus.OK;
 import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
@@ -58,7 +59,7 @@ private void handleHttpRequest(ChannelHandlerContext ctx, FullHttpRequest req) {
             ByteBuf content = getContent(getWebSocketLocation(req));
             FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, OK, content);
 
-            res.headers().set(HttpHeaders.Names.CONTENT_TYPE, "text/html; charset=UTF-8");
+            res.headers().set(CONTENT_TYPE, "text/html; charset=UTF-8");
             HttpHeaders.setContentLength(res, content.readableBytes());
 
             ChannelFuture f = ctx.channel().writeAndFlush(res);

File: mockserver-netty/src/test/java/org/mockserver/codec/MockServerResponseEncoderCookieHeaderTest.java
Patch:
@@ -62,12 +62,12 @@ public void shouldOnlyMapACookieIfThereIsNoSetCookieHeader() throws UnsupportedE
 
         // then
         HttpHeaders headers = ((FullHttpResponse) output.get(0)).headers();
+        assertThat(headers.names(), containsInAnyOrder("Set-Cookie", "Content-Length"));
         assertThat(headers.getAll("Set-Cookie"), containsInAnyOrder(
                 cookieOne,
                 cookieTwo,
                 "cookieName3=cookie==Value3"
         ));
-        assertThat(headers.names(), contains("Set-Cookie"));
     }
 
 }

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerGeneralOperationsTest.java
Patch:
@@ -302,7 +302,6 @@ public void shouldActionResult() {
         assertThat(httpResponse.getStatusCode(), is(HttpResponseStatus.PAYMENT_REQUIRED.code()));
         assertThat(httpResponse.getBodyAsString(), is("some_content"));
         assertThat(httpResponse.getHeader("Connection"), containsInAnyOrder("close"));
-        assertThat(httpResponse.getHeader("Content-Length"), containsInAnyOrder(Integer.toString("some_content".getBytes(Charsets.UTF_8).length)));
         assertThat(httpResponse.getBodyAsString(), is("some_content"));
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/netty/codec/MockServerResponseDecoder.java
Patch:
@@ -3,7 +3,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToMessageDecoder;
 import io.netty.handler.codec.http.FullHttpResponse;
-import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.cookie.ClientCookieDecoder;
 import io.netty.handler.codec.http.cookie.ServerCookieDecoder;
 import org.mockserver.mappers.ContentTypeMapper;
@@ -15,6 +14,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
+
 /**
  * @author jamesdbloom
  */
@@ -74,7 +75,7 @@ private void setBody(HttpResponse httpResponse, FullHttpResponse fullHttpRespons
             byte[] bodyBytes = new byte[fullHttpResponse.content().readableBytes()];
             fullHttpResponse.content().readBytes(bodyBytes);
             if (bodyBytes.length > 0) {
-                if (ContentTypeMapper.isBinary(fullHttpResponse.headers().get(HttpHeaders.Names.CONTENT_TYPE))) {
+                if (ContentTypeMapper.isBinary(fullHttpResponse.headers().get(CONTENT_TYPE))) {
                     httpResponse.withBody(new BinaryBody(bodyBytes));
                 } else {
                     Charset requestCharset = ContentTypeMapper.determineCharsetForMessage(fullHttpResponse);

File: mockserver-core/src/main/java/org/mockserver/client/serialization/ObjectMapperFactory.java
Patch:
@@ -68,6 +68,8 @@ private static class Module extends SimpleModule {
             addDeserializer(BodyDTO.class, new BodyDTODeserializer());
             addSerializer(StringBodyDTO.class, new StringBodyDTOSerializer());
             addSerializer(StringBody.class, new StringBodySerializer());
+            addSerializer(BinaryBodyDTO.class, new BinaryBodyDTOSerializer());
+            addSerializer(BinaryBody.class, new BinaryBodySerializer());
             addSerializer(RegexBodyDTO.class, new RegexBodyDTOSerializer());
             addSerializer(RegexBody.class, new RegexBodySerializer());
             addSerializer(JsonBodyDTO.class, new JsonBodyDTOSerializer());

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/BinaryBodyDTO.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.client.serialization.model;
 
+import com.google.common.net.MediaType;
 import org.mockserver.model.BinaryBody;
 
 import javax.xml.bind.DatatypeConverter;
@@ -16,7 +17,7 @@ public BinaryBodyDTO(BinaryBody binaryBody) {
     }
 
     public BinaryBodyDTO(BinaryBody binaryBody, Boolean not) {
-        super(binaryBody.getType(), not);
+        super(binaryBody.getType(), not, binaryBody.getContentType());
         if (binaryBody.getValue() != null && binaryBody.getValue().length > 0) {
             value = DatatypeConverter.printBase64Binary(binaryBody.getValue());
         }
@@ -30,6 +31,6 @@ public String getValue() {
     }
 
     public BinaryBody buildObject() {
-        return new BinaryBody(DatatypeConverter.parseBase64Binary(value));
+        return new BinaryBody(DatatypeConverter.parseBase64Binary(value), (contentType != null ? MediaType.parse(contentType) : null));
     }
 }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/JsonSchemaBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public JsonSchemaBodyDTO(JsonSchemaBody jsonSchemaBody) {
     }
 
     public JsonSchemaBodyDTO(JsonSchemaBody jsonSchemaBody, Boolean not) {
-        super(Body.Type.JSON_SCHEMA, not);
+        super(Body.Type.JSON_SCHEMA, not, jsonSchemaBody.getContentType());
         this.jsonSchema = jsonSchemaBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/ParameterBodyDTO.java
Patch:
@@ -19,7 +19,7 @@ public ParameterBodyDTO(ParameterBody parameterBody) {
     }
 
     public ParameterBodyDTO(ParameterBody parameterBody, Boolean not) {
-        super(parameterBody.getType(), not);
+        super(parameterBody.getType(), not, parameterBody.getContentType());
         parameters = Lists.transform(parameterBody.getValue(), new Function<Parameter, ParameterDTO>() {
             public ParameterDTO apply(Parameter parameter) {
                 return new ParameterDTO(parameter);

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/RegexBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public RegexBodyDTO(RegexBody regexBody) {
     }
 
     public RegexBodyDTO(RegexBody regexBody, Boolean not) {
-        super(Body.Type.REGEX, not);
+        super(Body.Type.REGEX, not, regexBody.getContentType());
         this.regex = regexBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/XPathBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public XPathBodyDTO(XPathBody xPathBody) {
     }
 
     public XPathBodyDTO(XPathBody xPathBody, Boolean not) {
-        super(Body.Type.XPATH, not);
+        super(Body.Type.XPATH, not, xPathBody.getContentType());
         this.xpath = xPathBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/XmlBodyDTO.java
Patch:
@@ -15,7 +15,7 @@ public XmlBodyDTO(XmlBody xmlBody) {
     }
 
     public XmlBodyDTO(XmlBody xmlBody, Boolean not) {
-        super(Body.Type.XML, not);
+        super(Body.Type.XML, not, xmlBody.getContentType());
         this.xml = xmlBody.getValue();
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/JsonBodyDTOSerializer.java
Patch:
@@ -24,8 +24,8 @@ public void serialize(JsonBodyDTO jsonBodyDTO, JsonGenerator jgen, SerializerPro
         if (jsonBodyDTO.getNot() != null && jsonBodyDTO.getNot()) {
             jgen.writeBooleanField("not", jsonBodyDTO.getNot());
         }
-        if (jsonBodyDTO.getCharset() != null && !jsonBodyDTO.getCharset().equals(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)) {
-            jgen.writeStringField("charset", jsonBodyDTO.getCharset().name());
+        if (jsonBodyDTO.getContentType() != null && !jsonBodyDTO.getContentType().equals(JsonBody.DEFAULT_CONTENT_TYPE.toString())) {
+            jgen.writeStringField("contentType", jsonBodyDTO.getContentType());
         }
         jgen.writeStringField("type", jsonBodyDTO.getType().name());
         jgen.writeStringField("json", jsonBodyDTO.getJson());

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/JsonBodySerializer.java
Patch:
@@ -23,8 +23,8 @@ public void serialize(JsonBody jsonBody, JsonGenerator jgen, SerializerProvider
         if (jsonBody.getNot() != null && jsonBody.getNot()) {
             jgen.writeBooleanField("not", jsonBody.getNot());
         }
-        if (jsonBody.getCharset() != null && !jsonBody.getCharset().equals(ContentTypeMapper.DEFAULT_HTTP_CHARACTER_SET)) {
-            jgen.writeStringField("charset", jsonBody.getCharset().name());
+        if (jsonBody.getContentType() != null && !jsonBody.getContentType().equals(JsonBody.DEFAULT_CONTENT_TYPE.toString())) {
+            jgen.writeStringField("contentType", jsonBody.getContentType());
         }
         jgen.writeStringField("type", jsonBody.getType().name());
         jgen.writeStringField("json", jsonBody.getValue());

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/XmlBodySerializer.java
Patch:
@@ -22,6 +22,9 @@ public void serialize(XmlBody xmlBody, JsonGenerator jgen, SerializerProvider pr
         if (xmlBody.getNot() != null && xmlBody.getNot()) {
             jgen.writeBooleanField("not", xmlBody.getNot());
         }
+        if (xmlBody.getContentType() != null && !xmlBody.getContentType().equals(XmlBody.DEFAULT_CONTENT_TYPE.toString())) {
+            jgen.writeStringField("contentType", xmlBody.getContentType());
+        }
         jgen.writeStringField("type", xmlBody.getType().name());
         jgen.writeStringField("xml", xmlBody.getValue());
         jgen.writeEndObject();

File: mockserver-core/src/main/java/org/mockserver/model/RegexBody.java
Patch:
@@ -8,7 +8,7 @@ public class RegexBody extends Body {
     private String regex;
 
     public RegexBody(String regex) {
-        super(Type.REGEX);
+        super(Type.REGEX, null);
         this.regex = regex;
     }
 

File: mockserver-core/src/main/java/org/mockserver/model/XPathBody.java
Patch:
@@ -8,7 +8,7 @@ public class XPathBody extends Body {
     private final String xpath;
 
     public XPathBody(String xpath) {
-        super(Type.XPATH);
+        super(Type.XPATH, null);
         this.xpath = xpath;
     }
 

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -106,7 +106,6 @@ public void shouldHandleSmallerContentLengthHeader() {
                             .withHeader(header(CONTENT_LENGTH, "this is an example body".length() / 2))
                             .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))
                             .withHeader(header(CONNECTION, HttpHeaders.Values.KEEP_ALIVE))
-                            .withHeader(header(CONTENT_TYPE, MediaType.create("text", "plain").toString()))
                             .withBody(exact("this is an "))
             ));
         } finally {

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -82,7 +82,6 @@ public void shouldSendComplexRequest() {
                         .withHeader(header(CONTENT_LENGTH, "this is an example body".length()))
                         .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))
                         .withHeader(header(CONNECTION, HttpHeaders.Values.KEEP_ALIVE))
-                        .withHeader(header(CONTENT_TYPE, MediaType.create("text", "plain").toString()))
                         .withHeader(header(COOKIE, "some_cookie_name=some_cookie_value; another_cookie_name=another_cookie_value"))
                         .withHeader(header("some_header_name", "some_header_value"))
                         .withHeader(header("another_header_name", "first_header_value", "second_header_value"))

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerIntegrationTest.java
Patch:
@@ -131,9 +131,10 @@ public void shouldDeserializeJsonBody() throws IOException {
         HttpRequest httpRequest = new HttpRequestSerializer().deserialize(requestBytes);
 
         // then
-        assertEquals(new HttpRequestDTO()
+        HttpRequest expected = new HttpRequestDTO()
                 .setBody(BodyDTO.createDTO(json("{ \"key\": \"value\" }")))
-                .buildObject(), httpRequest);
+                .buildObject();
+        assertEquals(expected, httpRequest);
     }
 
     @Test

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -22,8 +22,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * An HTTP server that sends back the content of the received HTTP request
- * in a pretty plaintext form.
+ * @author jamesdbloom
  */
 public class MockServer implements Stoppable {
 

File: mockserver-netty/src/main/java/org/mockserver/mockserver/callback/server/WebSocketServerHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 import java.util.concurrent.TimeUnit;
 
+import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
 import static io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;
 import static io.netty.handler.codec.http.HttpResponseStatus.OK;
 import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
@@ -58,7 +59,7 @@ private void handleHttpRequest(ChannelHandlerContext ctx, FullHttpRequest req) {
             ByteBuf content = getContent(getWebSocketLocation(req));
             FullHttpResponse res = new DefaultFullHttpResponse(HTTP_1_1, OK, content);
 
-            res.headers().set(HttpHeaders.Names.CONTENT_TYPE, "text/html; charset=UTF-8");
+            res.headers().set(CONTENT_TYPE, "text/html; charset=UTF-8");
             HttpHeaders.setContentLength(res, content.readableBytes());
 
             ChannelFuture f = ctx.channel().writeAndFlush(res);

File: mockserver-netty/src/test/java/org/mockserver/codec/MockServerResponseEncoderCookieHeaderTest.java
Patch:
@@ -62,12 +62,12 @@ public void shouldOnlyMapACookieIfThereIsNoSetCookieHeader() throws UnsupportedE
 
         // then
         HttpHeaders headers = ((FullHttpResponse) output.get(0)).headers();
+        assertThat(headers.names(), containsInAnyOrder("Set-Cookie", "Content-Length"));
         assertThat(headers.getAll("Set-Cookie"), containsInAnyOrder(
                 cookieOne,
                 cookieTwo,
                 "cookieName3=cookie==Value3"
         ));
-        assertThat(headers.names(), contains("Set-Cookie"));
     }
 
 }

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerGeneralOperationsTest.java
Patch:
@@ -302,7 +302,6 @@ public void shouldActionResult() {
         assertThat(httpResponse.getStatusCode(), is(HttpResponseStatus.PAYMENT_REQUIRED.code()));
         assertThat(httpResponse.getBodyAsString(), is("some_content"));
         assertThat(httpResponse.getHeader("Connection"), containsInAnyOrder("close"));
-        assertThat(httpResponse.getHeader("Content-Length"), containsInAnyOrder(Integer.toString("some_content".getBytes(Charsets.UTF_8).length)));
         assertThat(httpResponse.getBodyAsString(), is("some_content"));
     }
 

File: mockserver-examples/src/main/java/org/mockserver/examples/service/googleclient/BookServiceGoogleHttpClient.java
Patch:
@@ -14,6 +14,7 @@
 import java.io.IOException;
 import java.net.*;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 import static org.mockserver.examples.json.ObjectMapperFactory.createObjectMapper;
@@ -43,7 +44,7 @@ private HttpResponse sendRequestViaProxy(URL url, String method, @Nullable HttpC
             ProxySelector.setDefault(new ProxySelector() {
                 @Override
                 public List<Proxy> select(URI uri) {
-                    return Arrays.asList(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(System.getProperty("http.proxyHost"), Integer.parseInt(System.getProperty("http.proxyPort")))));
+                    return Collections.singletonList(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(System.getProperty("http.proxyHost"), Integer.parseInt(System.getProperty("http.proxyPort")))));
                 }
 
                 @Override

File: mockserver-examples/src/main/java/org/mockserver/examples/model/Book.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.model;
+package org.mockserver.examples.model;
 
 /**
  * @author jamesdbloom

File: mockserver-examples/src/main/java/org/mockserver/examples/service/BookService.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service;
+package org.mockserver.examples.service;
 
-import org.mockserver.model.Book;
+import org.mockserver.examples.model.Book;
 
 /**
  * @author jamesdbloom

File: mockserver-examples/src/main/java/org/mockserver/examples/service/apacheclient/ApacheHttpClientConfiguration.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service.apacheclient;
+package org.mockserver.examples.service.apacheclient;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;

File: mockserver-examples/src/main/java/org/mockserver/examples/service/apacheclient/BookServiceApacheHttpClient.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.service.apacheclient;
+package org.mockserver.examples.service.apacheclient;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
@@ -12,8 +12,8 @@
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.impl.conn.DefaultProxyRoutePlanner;
 import org.apache.http.util.EntityUtils;
-import org.mockserver.model.Book;
-import org.mockserver.service.BookService;
+import org.mockserver.examples.model.Book;
+import org.mockserver.examples.service.BookService;
 import org.springframework.core.env.Environment;
 import org.springframework.stereotype.Component;
 

File: mockserver-examples/src/main/java/org/mockserver/examples/service/googleclient/BookServiceGoogleHttpClient.java
Patch:
@@ -1,12 +1,12 @@
-package org.mockserver.service.googleclient;
+package org.mockserver.examples.service.googleclient;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.api.client.http.*;
 import com.google.api.client.http.javanet.NetHttpTransport;
-import org.mockserver.model.Book;
-import org.mockserver.service.BookService;
+import org.mockserver.examples.model.Book;
+import org.mockserver.examples.service.BookService;
 import org.springframework.core.env.Environment;
 import org.springframework.stereotype.Component;
 

File: mockserver-examples/src/main/java/org/mockserver/examples/service/googleclient/GoogleHttpClientConfiguration.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service.googleclient;
+package org.mockserver.examples.service.googleclient;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;

File: mockserver-examples/src/main/java/org/mockserver/examples/service/javaclient/BookServiceJavaHttpClient.java
Patch:
@@ -1,10 +1,10 @@
-package org.mockserver.service.javaclient;
+package org.mockserver.examples.service.javaclient;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.mockserver.model.Book;
-import org.mockserver.service.BookService;
+import org.mockserver.examples.model.Book;
+import org.mockserver.examples.service.BookService;
 import org.springframework.core.env.Environment;
 import org.springframework.stereotype.Component;
 

File: mockserver-examples/src/main/java/org/mockserver/examples/service/javaclient/JavaHttpClientConfiguration.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service.javaclient;
+package org.mockserver.examples.service.javaclient;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;

File: mockserver-examples/src/main/java/org/mockserver/examples/service/jerseyclient/BookServiceJerseyClient.java
Patch:
@@ -1,11 +1,11 @@
-package org.mockserver.service.jerseyclient;
+package org.mockserver.examples.service.jerseyclient;
 
 import org.glassfish.jersey.apache.connector.ApacheConnectorProvider;
 import org.glassfish.jersey.client.ClientConfig;
 import org.glassfish.jersey.client.ClientProperties;
 import org.glassfish.jersey.jackson.JacksonFeature;
-import org.mockserver.model.Book;
-import org.mockserver.service.BookService;
+import org.mockserver.examples.model.Book;
+import org.mockserver.examples.service.BookService;
 import org.springframework.core.env.Environment;
 import org.springframework.stereotype.Component;
 

File: mockserver-examples/src/main/java/org/mockserver/examples/service/jerseyclient/JerseyClientConfiguration.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service.jerseyclient;
+package org.mockserver.examples.service.jerseyclient;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;

File: mockserver-examples/src/main/java/org/mockserver/examples/service/jettyclient/JettyHttpClientConfiguration.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service.jettyclient;
+package org.mockserver.examples.service.jettyclient;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;

File: mockserver-examples/src/main/java/org/mockserver/examples/service/springclient/BookServiceSpringRestTemplateClient.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.service.springclient;
+package org.mockserver.examples.service.springclient;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
@@ -7,8 +7,8 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.impl.conn.DefaultProxyRoutePlanner;
-import org.mockserver.model.Book;
-import org.mockserver.service.BookService;
+import org.mockserver.examples.model.Book;
+import org.mockserver.examples.service.BookService;
 import org.springframework.core.env.Environment;
 import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
 import org.springframework.http.converter.HttpMessageConverter;

File: mockserver-examples/src/main/java/org/mockserver/examples/service/springclient/SpringRestTemplateConfiguration.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.service.springclient;
+package org.mockserver.examples.service.springclient;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;

File: mockserver-examples/src/main/java/org/mockserver/examples/servicebackend/BackEndServiceConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.servicebackend;
+package org.mockserver.examples.servicebackend;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: mockserver-examples/src/main/java/org/mockserver/examples/servicebackend/BookServer.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.servicebackend;
+package org.mockserver.examples.servicebackend;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.DeserializationFeature;
@@ -11,7 +11,7 @@
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.codec.http.*;
 import io.netty.handler.ssl.SslHandler;
-import org.mockserver.model.Book;
+import org.mockserver.examples.model.Book;
 import org.mockserver.socket.SSLFactory;
 
 import javax.annotation.PostConstruct;

File: mockserver-examples/src/main/java/org/mockserver/examples/web/configuration/WebMvcConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.web.configuration;
+package org.mockserver.examples.web.configuration;
 
 import com.google.common.net.MediaType;
 import freemarker.cache.ClassTemplateLoader;
@@ -24,7 +24,7 @@
  */
 @Configuration
 @EnableWebMvc
-@ComponentScan(basePackages = {"org.mockserver.web"})
+@ComponentScan(basePackages = {"org.mockserver.examples.web"})
 public class WebMvcConfiguration extends WebMvcConfigurerAdapter {
 
     @Override

File: mockserver-examples/src/main/java/org/mockserver/examples/web/controller/BooksPageController.java
Patch:
@@ -1,6 +1,6 @@
-package org.mockserver.web.controller;
+package org.mockserver.examples.web.controller;
 
-import org.mockserver.service.BookService;
+import org.mockserver.examples.service.BookService;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.PathVariable;

File: mockserver-examples/src/test/java/org/mockserver/examples/web/controller/BooksPageControllerTest.java
Patch:
@@ -1,11 +1,11 @@
-package org.mockserver.web.controller;
+package org.mockserver.examples.web.controller;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
-import org.mockserver.model.Book;
-import org.mockserver.service.BookService;
+import org.mockserver.examples.model.Book;
+import org.mockserver.examples.service.BookService;
 import org.springframework.ui.Model;
 
 import static org.junit.Assert.assertEquals;

File: mockserver-examples/src/test/java/org/mockserver/examples/web/controller/PropertyMockingApplicationContextInitializer.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.web.controller;
+package org.mockserver.examples.web.controller;
 
 import org.mockserver.socket.PortFactory;
 import org.springframework.context.ApplicationContextInitializer;

File: mockserver-examples/src/test/java/org/mockserver/examples/web/controller/pageobjects/BookPage.java
Patch:
@@ -1,8 +1,8 @@
-package org.mockserver.web.controller.pageobjects;
+package org.mockserver.examples.web.controller.pageobjects;
 
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
-import org.mockserver.model.Book;
+import org.mockserver.examples.model.Book;
 import org.springframework.test.web.servlet.MvcResult;
 
 import java.io.UnsupportedEncodingException;

File: mockserver-examples/src/test/java/org/mockserver/examples/web/controller/pageobjects/BooksPage.java
Patch:
@@ -1,9 +1,9 @@
-package org.mockserver.web.controller.pageobjects;
+package org.mockserver.examples.web.controller.pageobjects;
 
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
-import org.mockserver.model.Book;
+import org.mockserver.examples.model.Book;
 import org.springframework.test.web.servlet.MvcResult;
 
 import java.io.UnsupportedEncodingException;

File: mockserver-core/src/main/java/org/mockserver/socket/KeyStoreFactory.java
Patch:
@@ -124,7 +124,7 @@ public X509Certificate createCACert(PublicKey publicKey, PrivateKey privateKey)
         //
         // serial
         //
-        BigInteger serial = BigInteger.valueOf(new Random().nextInt());
+        BigInteger serial = BigInteger.valueOf(new Random().nextInt(Integer.MAX_VALUE));
 
         //
         // create the certificate - version 3
@@ -167,7 +167,7 @@ public X509Certificate createClientCert(PublicKey publicKey, X509Certificate cer
         //
         // serial
         //
-        BigInteger serial = BigInteger.valueOf(new Random().nextInt());
+        BigInteger serial = BigInteger.valueOf(new Random().nextInt(Integer.MAX_VALUE));
 
         //
         // create the certificate - version 3

File: mockserver-core/src/main/java/org/mockserver/mappers/ContentTypeMapper.java
Patch:
@@ -47,6 +47,8 @@ public static boolean isBinary(String contentTypeHeader) {
                     || contentType.contains("csv")
                     || contentType.contains("html")
                     || contentType.contains("xhtml")
+                    || contentType.contains("form")
+                    || contentType.contains("urlencoded")
                     || contentType.contains("xml");
             if (!utf8Body) {
                 binary = contentType.contains("ogg")

File: mockserver-core/src/test/java/org/mockserver/mappers/ContentTypeMapperTest.java
Patch:
@@ -34,6 +34,7 @@ public class ContentTypeMapperTest {
             "application/xop+xml",
             "application/xslt+xml",
             "application/xspf+xml",
+            "application/x-www-form-urlencoded",
             "image/svg+xml",
             "text/css",
             "text/csv",

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -272,7 +272,7 @@ private static void overrideLogLevelWithReflection(String level, String loggerNa
                 setLevelMethod.invoke(logger, levelInstance);
             }
         } catch (Exception e) {
-            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
+            ConfigurationProperties.logger.debug("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
         }
 
 
@@ -291,7 +291,7 @@ private static void overrideLogLevelWithReflection(String level, String loggerNa
                 currentLogLevelField.set(logger, logLevelInstance);
             }
         } catch (Exception e) {
-            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
+            ConfigurationProperties.logger.debug("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -160,7 +160,7 @@ public boolean matches(HttpRequest httpRequest, boolean logMatchResults) {
                 } catch (IOException e) {
                     // ignore this exception as this exception will always get thrown for "normal" HTTP requests (i.e. not clear or retrieve)
                 }
-                if (bodyDTO == null) {
+                if (bodyDTO == null || bodyDTOMatcher == null || bodyDTO.getType() == Body.Type.STRING) {
                     if (bodyMatcher instanceof BinaryMatcher) {
                         bodyMatches = matches(bodyMatcher, httpRequest.getBodyAsRawBytes());
                     } else {
@@ -190,8 +190,6 @@ public boolean matches(HttpRequest httpRequest, boolean logMatchResults) {
                         becauseBuilder.append("body matches = ").append(bodyMatches).append(System.getProperty("line.separator"));
                         becauseBuilder.append("headers match = ").append(headersMatch).append(System.getProperty("line.separator"));
                         becauseBuilder.append("cookies match = ").append(cookiesMatch).append(System.getProperty("line.separator"));
-                        becauseBuilder.append("cookies match = ").append(cookiesMatch).append(System.getProperty("line.separator"));
-                        becauseBuilder.append("cookies match = ").append(cookiesMatch).append(System.getProperty("line.separator"));
                         becauseBuilder.append("keep-alive matches = ").append(keepAliveMatches).append(System.getProperty("line.separator"));
                         becauseBuilder.append("ssl matches = ").append(sslMatches).append(System.getProperty("line.separator"));
                         if (httpRequest.isNot()) {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/response/HttpResponseDTOSerializer.java
Patch:
@@ -19,7 +19,7 @@ public HttpResponseDTOSerializer() {
     @Override
     public void serialize(HttpResponseDTO httpResponseDTO, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         jgen.writeStartObject();
-        if (httpResponseDTO.getStatusCode() != null && httpResponseDTO.getStatusCode() != 200) {
+        if (httpResponseDTO.getStatusCode() != null) {
             jgen.writeObjectField("statusCode", httpResponseDTO.getStatusCode());
         }
         if (httpResponseDTO.getHeaders() != null && !httpResponseDTO.getHeaders().isEmpty()) {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/response/HttpResponseSerializer.java
Patch:
@@ -19,7 +19,7 @@ public HttpResponseSerializer() {
     @Override
     public void serialize(HttpResponse httpResponse, JsonGenerator jgen, SerializerProvider provider) throws IOException {
         jgen.writeStartObject();
-        if (httpResponse.getStatusCode() != null && httpResponse.getStatusCode() != 200) {
+        if (httpResponse.getStatusCode() != null) {
             jgen.writeObjectField("statusCode", httpResponse.getStatusCode());
         }
         if (httpResponse.getHeaders() != null && !httpResponse.getHeaders().isEmpty()) {

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerResponseToHttpServletResponseEncoder.java
Patch:
@@ -30,6 +30,8 @@ public void mapMockServerResponseToHttpServletResponse(HttpResponse httpResponse
     private void setStatusCode(HttpResponse httpResponse, HttpServletResponse httpServletResponse) {
         if (httpResponse.getStatusCode() != null) {
             httpServletResponse.setStatus(httpResponse.getStatusCode());
+        } else {
+            httpServletResponse.setStatus(200);
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.base.Charsets;
+import com.google.common.base.Strings;
 import org.mockserver.client.serialization.ObjectMapperFactory;
 import org.mockserver.client.serialization.model.*;
 import org.mockserver.logging.LogFormatter;
@@ -148,8 +149,8 @@ public boolean matches(HttpRequest httpRequest, boolean logMatchResults) {
             return true;
         } else {
             if (httpRequest != null) {
-                boolean methodMatches = matches(methodMatcher, httpRequest.getMethod());
-                boolean pathMatches = matches(pathMatcher, httpRequest.getPath());
+                boolean methodMatches = Strings.isNullOrEmpty(httpRequest.getMethod().getValue()) || matches(methodMatcher, httpRequest.getMethod());
+                boolean pathMatches = Strings.isNullOrEmpty(httpRequest.getPath().getValue()) || matches(pathMatcher, httpRequest.getPath());
                 boolean queryStringParametersMatches = matches(queryStringParameterMatcher, (httpRequest.getQueryStringParameters() != null ? new ArrayList<KeyToMultiValue>(httpRequest.getQueryStringParameters()) : null));
                 boolean bodyMatches;
                 String bodyAsString = httpRequest.getBody() != null ? new String(httpRequest.getBody().getRawBytes(), httpRequest.getBody().getCharset(Charsets.UTF_8)) : "";

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpResponseActionHandler.java
Patch:
@@ -8,6 +8,6 @@
 public class HttpResponseActionHandler {
 
     public HttpResponse handle(HttpResponse httpResponse) {
-        return httpResponse;
+        return httpResponse.shallowClone();
     }
 }

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientErrorHandlingTest.java
Patch:
@@ -97,6 +97,7 @@ public void shouldHandleSmallerContentLengthHeader() {
             // then
             assertThat(httpResponse, is(
                     response()
+                            .withStatusCode(200)
                             .withHeader(header(HOST, "localhost:" + freePort))
                             .withHeader(header(CONTENT_LENGTH, "this is an example body".length() / 2))
                             .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -51,6 +51,7 @@ public void shouldSendBasicRequest() {
         // then
         assertThat(httpResponse, is(
                 response()
+                        .withStatusCode(200)
                         .withHeader(header(HOST, "0.0.0.0:" + freePort))
                         .withHeader(header(CONTENT_LENGTH, 0))
                         .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))
@@ -76,6 +77,7 @@ public void shouldSendComplexRequest() {
         // then
         assertThat(httpResponse, is(
                 response()
+                        .withStatusCode(200)
                         .withHeader(header(HOST, "0.0.0.0:" + freePort))
                         .withHeader(header(CONTENT_LENGTH, "this is an example body".length()))
                         .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationSerializationErrorsTest.java
Patch:
@@ -79,7 +79,7 @@ public void shouldHandleNullAndEmptyWhileSerializingArray() throws IOException {
     public void shouldHandleExceptionWhileDeserializingObject() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while parsing response [requestBytes] for http response expectation");
+        thrown.expectMessage("Exception while parsing response [requestBytes] for Expectation");
         // and
         when(objectMapper.readValue(eq("requestBytes"), same(ExpectationDTO.class))).thenThrow(new IOException("TEST EXCEPTION"));
 
@@ -91,7 +91,7 @@ public void shouldHandleExceptionWhileDeserializingObject() throws IOException {
     public void shouldHandleExceptionWhileDeserializingArray() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while parsing response [requestBytes] for http response expectation array");
+        thrown.expectMessage("Exception while parsing response [requestBytes] for Expectation[]");
         // and
         when(objectMapper.readValue(eq("requestBytes"), same(ExpectationDTO[].class))).thenThrow(new IOException("TEST EXCEPTION"));
 
@@ -103,7 +103,7 @@ public void shouldHandleExceptionWhileDeserializingArray() throws IOException {
     public void shouldValidateInputForObject() throws IOException {
         // given
         thrown.expect(IllegalArgumentException.class);
-        thrown.expectMessage("Expected an JSON expectation object but http body is empty");
+        thrown.expectMessage("Expected an JSON Expectation object but http body is empty");
         // when
         expectationSerializer.deserialize("");
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerTest.java
Patch:
@@ -100,7 +100,7 @@ public void deserializeHttpRequestAsField() throws IOException {
     public void deserializeHandleException() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while parsing response [requestBytes] for http response httpRequest");
+        thrown.expectMessage("Exception while parsing HttpRequest for [requestBytes]");
         // and
         when(objectMapper.readValue(eq("requestBytes"), same(HttpRequestDTO.class))).thenThrow(new RuntimeException("TEST EXCEPTION"));
 
@@ -154,7 +154,7 @@ public void serializeObjectHandlesException() throws IOException {
     public void serializeArrayHandlesException() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while serializing http request to JSON with value [{ }]");
+        thrown.expectMessage("Exception while serializing HttpRequest to JSON with value [{ }]");
         // and
         when(objectMapper.writerWithDefaultPrettyPrinter()).thenReturn(objectWriter);
         when(objectWriter.writeValueAsString(any(HttpRequestDTO.class))).thenThrow(new RuntimeException("TEST EXCEPTION"));

File: mockserver-core/src/test/java/org/mockserver/client/serialization/java/ExpectationToJavaSerializerTest.java
Patch:
@@ -126,7 +126,6 @@ public void shouldSerializeFullObjectWithParameterBodyResponseAsJava() throws IO
                         "        )" + System.getProperty("line.separator") +
                         "        .respond(" + System.getProperty("line.separator") +
                         "                response()" + System.getProperty("line.separator") +
-                        "                        .withStatusCode(200)" + System.getProperty("line.separator") +
                         "                        .withBody(\"responseBody\")" + System.getProperty("line.separator") +
                         "        );",
                 new ExpectationToJavaSerializer().serializeAsJava(1,
@@ -160,7 +159,6 @@ public void shouldSerializeFullObjectWithBinaryBodyResponseAsJava() throws IOExc
                         "        )" + System.getProperty("line.separator") +
                         "        .respond(" + System.getProperty("line.separator") +
                         "                response()" + System.getProperty("line.separator") +
-                        "                        .withStatusCode(200)" + System.getProperty("line.separator") +
                         "                        .withBody(\"responseBody\")" + System.getProperty("line.separator") +
                         "        );",
                 new ExpectationToJavaSerializer().serializeAsJava(1,

File: mockserver-core/src/test/java/org/mockserver/client/serialization/java/HttpResponseToJavaSerializerTest.java
Patch:
@@ -52,7 +52,6 @@ public void shouldSerializeFullObjectWithBinaryBodyResponseAsJava() throws IOExc
         // when
         assertEquals(System.getProperty("line.separator") +
                         "        response()" + System.getProperty("line.separator") +
-                        "                .withStatusCode(200)" + System.getProperty("line.separator") +
                         "                .withBody(Base64Converter.base64StringToBytes(\"" + Base64Converter.bytesToBase64String("responseBody".getBytes()) + "\"))",
                 new HttpResponseToJavaSerializer().serializeAsJava(1,
                         new HttpResponse()

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/HttpResponseDTOTest.java
Patch:
@@ -126,7 +126,7 @@ public void shouldHandleNullFieldInput() {
         assertThat(httpResponseDTO.getBody(), is(nullValue()));
         assertThat(httpResponseDTO.getCookies(), is(empty()));
         assertThat(httpResponseDTO.getHeaders(), is(empty()));
-        assertThat(httpResponseDTO.getStatusCode(), is(200));
+        assertThat(httpResponseDTO.getStatusCode(), is(nullValue()));
         assertThat(httpResponseDTO.getConnectionOptions(), is(nullValue()));
     }
 }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/response/HttpResponseDTOSerializerTest.java
Patch:
@@ -110,6 +110,7 @@ public void shouldReturnFormattedResponseWithDefaultStatusCode() throws JsonProc
                         )
                 ),
                 is("{" + System.getProperty("line.separator") +
+                        "  \"statusCode\" : 200," + System.getProperty("line.separator") +
                         "  \"headers\" : [ {" + System.getProperty("line.separator") +
                         "    \"name\" : \"header_name\"," + System.getProperty("line.separator") +
                         "    \"values\" : [ \"header_value\" ]" + System.getProperty("line.separator") +

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/response/HttpResponseSerializerTest.java
Patch:
@@ -100,6 +100,7 @@ public void shouldReturnFormattedResponseWithDefaultStatusCode() throws JsonProc
                                 .withCookies(new Cookie("cookie_name", "cookie_value"))
                 ),
                 is("{" + System.getProperty("line.separator") +
+                        "  \"statusCode\" : 200," + System.getProperty("line.separator") +
                         "  \"headers\" : [ {" + System.getProperty("line.separator") +
                         "    \"name\" : \"header_name\"," + System.getProperty("line.separator") +
                         "    \"values\" : [ \"header_value\" ]" + System.getProperty("line.separator") +

File: mockserver-core/src/test/java/org/mockserver/mock/ExpectationTest.java
Patch:
@@ -109,9 +109,9 @@ public void shouldMatchCorrectly() {
         assertTrue(new Expectation(request(), Times.unlimited(), TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request()));
 
         // when un-matching request should return false
-        assertFalse(new Expectation(request().withPath("un-matching"), null, TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request()));
-        assertFalse(new Expectation(request().withPath("un-matching"), Times.unlimited(), TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request()));
-        assertFalse(new Expectation(request().withPath("un-matching"), Times.once(), TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request()));
+        assertFalse(new Expectation(request().withPath("some_path"), null, TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request().withPath("some_other_path")));
+        assertFalse(new Expectation(request().withPath("some_path"), Times.unlimited(), TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request().withPath("some_other_path")));
+        assertFalse(new Expectation(request().withPath("some_path"), Times.once(), TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(request().withPath("some_other_path")));
 
         // when no times left should return false
         assertFalse(new Expectation(null, Times.exactly(0), TimeToLive.unlimited()).thenRespond(null).thenForward(null).matches(null));

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationWithResponseSerializerTest.java
Patch:
@@ -16,8 +16,10 @@
 import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 
+import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.mockito.Matchers.same;
 import static org.mockito.Mockito.*;
 import static org.mockito.MockitoAnnotations.initMocks;
@@ -118,7 +120,7 @@ public void shouldDeserializeObject() throws IOException {
         Expectation expectation = expectationSerializer.deserialize("requestBytes");
 
         // then
-        assertEquals(fullExpectation, expectation);
+        assertThat(expectation, is(fullExpectation));
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -272,7 +272,7 @@ private static void overrideLogLevelWithReflection(String level, String loggerNa
                 setLevelMethod.invoke(logger, levelInstance);
             }
         } catch (Exception e) {
-            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath", e);
+            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
         }
 
 
@@ -291,7 +291,7 @@ private static void overrideLogLevelWithReflection(String level, String loggerNa
                 currentLogLevelField.set(logger, logLevelInstance);
             }
         } catch (Exception e) {
-            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath", e);
+            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -240,7 +240,7 @@ public static String readPropertyHierarchically(String key, String defaultValue)
     public static void overrideLogLevel(String level) {
         if (level != null) {
             if (!Arrays.asList("TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF").contains(level)) {
-                throw new IllegalArgumentException("log level \"" + level + "\" is not legel it must be one of \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"");
+                throw new IllegalArgumentException("log level \"" + level + "\" is not legal it must be one of \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"");
             }
             System.setProperty("mockserver.logLevel", level);
             System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", level);
@@ -272,7 +272,7 @@ private static void overrideLogLevelWithReflection(String level, String loggerNa
                 setLevelMethod.invoke(logger, levelInstance);
             }
         } catch (Exception e) {
-            ConfigurationProperties.logger.warn("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
+            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath", e);
         }
 
 
@@ -291,7 +291,7 @@ private static void overrideLogLevelWithReflection(String level, String loggerNa
                 currentLogLevelField.set(logger, logLevelInstance);
             }
         } catch (Exception e) {
-            ConfigurationProperties.logger.warn("Exception updating logging level using reflection, likely cause is Logback is not on the classpath");
+            ConfigurationProperties.logger.info("Exception updating logging level using reflection, likely cause is Logback is not on the classpath", e);
         }
     }
 

File: mockserver-core/src/test/java/org/mockserver/configuration/ConfigurationPropertiesTest.java
Patch:
@@ -292,7 +292,7 @@ public void shouldHandleInvalidProxyPort() {
     @Test
     public void shouldThrowIllegalArgumentExceptionForInvalidLogLevel() {
         exception.expect(IllegalArgumentException.class);
-        exception.expectMessage(containsString("log level \"WRONG\" is not legel it must be one of \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\""));
+        exception.expectMessage(containsString("log level \"WRONG\" is not legal it must be one of \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\""));
 
         ConfigurationProperties.overrideLogLevel("WRONG");
     }

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -79,7 +79,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
                     workerGroup.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS);
                 }
             }
-        }, "MockServer thread").start();
+        }, "MockServer Thread").start();
 
         try {
             hasStarted.get();

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerResponseToHttpServletResponseEncoder.java
Patch:
@@ -1,15 +1,14 @@
 package org.mockserver.mappers;
 
 import com.google.common.base.Strings;
-import io.netty.handler.codec.http.cookie.DefaultCookie;
 import io.netty.handler.codec.http.HttpHeaders;
+import io.netty.handler.codec.http.cookie.DefaultCookie;
 import io.netty.handler.codec.http.cookie.ServerCookieEncoder;
 import org.mockserver.client.serialization.Base64Converter;
 import org.mockserver.model.*;
 import org.mockserver.streams.IOStreamUtils;
 
 import javax.servlet.http.HttpServletResponse;
-
 import java.nio.charset.Charset;
 
 import static io.netty.handler.codec.http.HttpHeaders.Names.SET_COOKIE;
@@ -70,7 +69,7 @@ private void setBody(HttpResponse httpResponse, HttpServletResponse httpServletR
     }
 
     private void addContentTypeHeader(HttpResponse httpResponse, HttpServletResponse httpServletResponse) {
-        if (httpResponse.getBody() != null && Strings.isNullOrEmpty(httpServletResponse.getHeader(HttpHeaders.Names.CONTENT_TYPE))) {
+        if (httpServletResponse.getContentType() == null && httpResponse.getBody() != null) {
             Charset bodyCharset = httpResponse.getBody().getCharset(null);
             String bodyContentType = httpResponse.getBody().getContentType();
             if (bodyCharset != null) {

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class HttpResponse extends Action {
     private Integer statusCode = 200;
-    private Body body = new StringBody("");
+    private Body body;
     private Map<NottableString, Header> headers = new LinkedHashMap<NottableString, Header>();
     private Map<NottableString, Cookie> cookies = new LinkedHashMap<NottableString, Cookie>();
     private Delay delay;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/HttpResponseDTOTest.java
Patch:
@@ -123,7 +123,7 @@ public void shouldHandleNullFieldInput() {
         HttpResponseDTO httpResponseDTO = new HttpResponseDTO(new HttpResponse());
 
         // then
-        assertThat(httpResponseDTO.getBody(), is(BodyDTO.createDTO(exact(""))));
+        assertThat(httpResponseDTO.getBody(), is(nullValue()));
         assertThat(httpResponseDTO.getCookies(), is(empty()));
         assertThat(httpResponseDTO.getHeaders(), is(empty()));
         assertThat(httpResponseDTO.getStatusCode(), is(200));

File: mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest.java
Patch:
@@ -36,7 +36,7 @@ public void returnsBody() {
         assertEquals(Base64Converter.bytesToBase64String("somebody".getBytes()), new HttpResponse().withBody("somebody".getBytes()).getBodyAsString());
         assertEquals("somebody", new HttpResponse().withBody("somebody").getBodyAsString());
         assertNull(new HttpResponse().withBody((byte[]) null).getBodyAsString());
-        assertEquals("", new HttpResponse().withBody((String) null).getBodyAsString());
+        assertEquals(null, new HttpResponse().withBody((String) null).getBodyAsString());
     }
 
     @Test

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/HttpProxyHandlerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.mockserver.verify.VerificationSequence;
 
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.nullValue;
 import static org.hamcrest.core.Is.is;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
@@ -217,7 +218,7 @@ public void shouldReturnNotFoundAfterNoMatch() {
         // and - correct response written to ChannelHandlerContext
         HttpResponse httpResponse = (HttpResponse)embeddedChannel.readOutbound();
         assertThat(httpResponse.getStatusCode(), is(HttpResponseStatus.NOT_FOUND.code()));
-        assertThat(httpResponse.getBodyAsString(), is(""));
+        assertThat(httpResponse.getBodyAsString(), nullValue());
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/client/serialization/Base64Converter.java
Patch:
@@ -19,7 +19,7 @@ public static byte[] base64StringToBytes(String data) {
         return DatatypeConverter.parseBase64Binary(data);
     }
 
-    public static String stringToBase64Bytes(byte[] data) {
+    public static String bytesToBase64String(byte[] data) {
         return DatatypeConverter.printBase64Binary(data);
     }
 }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/java/CookieToJavaSerializer.java
Patch:
@@ -2,18 +2,19 @@
 
 import com.google.common.base.Strings;
 import org.mockserver.model.Cookie;
-import org.mockserver.model.NottableString;
 
 import java.util.Arrays;
 import java.util.List;
 
+import static org.mockserver.client.serialization.java.ExpectationToJavaSerializer.INDENT_SIZE;
+
 /**
  * @author jamesdbloom
  */
 public class CookieToJavaSerializer implements MultiValueToJavaSerializer<Cookie> {
     @Override
     public String serializeAsJava(int numberOfSpacesToIndent, Cookie cookie) {
-        return System.getProperty("line.separator") + Strings.padStart("", numberOfSpacesToIndent, ' ') + "new Cookie(" +
+        return System.getProperty("line.separator") + Strings.padStart("", numberOfSpacesToIndent * INDENT_SIZE, ' ') + "new Cookie(" +
                 NottableStringToJavaSerializer.serializeNottableString(cookie.getName()) + ", " +
                 NottableStringToJavaSerializer.serializeNottableString(cookie.getValue()) + ")";
     }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/java/HeaderToJavaSerializer.java
Patch:
@@ -7,14 +7,16 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static org.mockserver.client.serialization.java.ExpectationToJavaSerializer.INDENT_SIZE;
+
 /**
  * @author jamesdbloom
  */
 public class HeaderToJavaSerializer implements MultiValueToJavaSerializer<Header> {
     @Override
     public String serializeAsJava(int numberOfSpacesToIndent, Header header) {
         StringBuilder output = new StringBuilder();
-        output.append(System.getProperty("line.separator")).append(Strings.padStart("", numberOfSpacesToIndent, ' '));
+        output.append(System.getProperty("line.separator")).append(Strings.padStart("", numberOfSpacesToIndent * INDENT_SIZE, ' '));
         output.append("new Header(").append(NottableStringToJavaSerializer.serializeNottableString(header.getName()));
         for (NottableString value : header.getValues()) {
             output.append(", ").append(NottableStringToJavaSerializer.serializeNottableString(value));

File: mockserver-core/src/main/java/org/mockserver/client/serialization/java/ParameterToJavaSerializer.java
Patch:
@@ -7,14 +7,16 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static org.mockserver.client.serialization.java.ExpectationToJavaSerializer.INDENT_SIZE;
+
 /**
  * @author jamesdbloom
  */
 public class ParameterToJavaSerializer implements MultiValueToJavaSerializer<Parameter> {
     @Override
     public String serializeAsJava(int numberOfSpacesToIndent, Parameter parameter) {
         StringBuilder output = new StringBuilder();
-        output.append(System.getProperty("line.separator")).append(Strings.padStart("", numberOfSpacesToIndent, ' '));
+        output.append(System.getProperty("line.separator")).append(Strings.padStart("", numberOfSpacesToIndent * INDENT_SIZE, ' '));
         output.append("new Parameter(").append(NottableStringToJavaSerializer.serializeNottableString(parameter.getName()));
         for (NottableString value : parameter.getValues()) {
             output.append(", ").append(NottableStringToJavaSerializer.serializeNottableString(value));

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/HttpCallbackDTO.java
Patch:
@@ -11,7 +11,9 @@ public class HttpCallbackDTO extends ObjectWithReflectiveEqualsHashCodeToString
     private String callbackClass;
 
     public HttpCallbackDTO(HttpCallback httpCallback) {
-        callbackClass = httpCallback.getCallbackClass();
+        if (httpCallback != null) {
+            callbackClass = httpCallback.getCallbackClass();
+        }
     }
 
     public HttpCallbackDTO() {

File: mockserver-core/src/main/java/org/mockserver/model/Action.java
Patch:
@@ -13,6 +13,7 @@ public abstract class Action extends ObjectWithJsonToString {
     public enum Type {
         FORWARD,
         RESPONSE,
-        CALLBACK
+        CALLBACK,
+        ERROR
     }
 }

File: mockserver-core/src/main/java/org/mockserver/model/BinaryBody.java
Patch:
@@ -28,6 +28,6 @@ public byte[] getRawBytes() {
 
     @Override
     public String toString() {
-        return bytes != null ? Base64Converter.stringToBase64Bytes(bytes) : null;
+        return bytes != null ? Base64Converter.bytesToBase64String(bytes) : null;
     }
 }

File: mockserver-core/src/main/java/org/mockserver/model/HttpCallback.java
Patch:
@@ -9,9 +9,6 @@ public class HttpCallback extends Action {
 
     private String callbackClass;
 
-    public HttpCallback() {
-    }
-
     public static HttpCallback callback() {
         return new HttpCallback();
     }

File: mockserver-core/src/main/java/org/mockserver/model/HttpForward.java
Patch:
@@ -11,9 +11,6 @@ public class HttpForward extends Action {
     private Integer port = 80;
     private Scheme scheme = Scheme.HTTP;
 
-    public HttpForward() {
-    }
-
     public static HttpForward forward() {
         return new HttpForward();
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/Base64ConverterTest.java
Patch:
@@ -14,12 +14,14 @@ public class Base64ConverterTest {
 
     @Test
     public void shouldConvertToBase64Value() {
-        assertThat(new Base64Converter().stringToBase64Bytes("some_value".getBytes()), is(DatatypeConverter.printBase64Binary("some_value".getBytes())));
+        assertThat(new Base64Converter().bytesToBase64String("some_value".getBytes()), is(DatatypeConverter.printBase64Binary("some_value".getBytes())));
+        assertThat(new Base64Converter().bytesToBase64String("some_value".getBytes()), is("c29tZV92YWx1ZQ=="));
     }
 
     @Test
     public void shouldConvertBase64ValueToString() {
         assertThat(new String(Base64Converter.base64StringToBytes(DatatypeConverter.printBase64Binary("some_value".getBytes()))), is("some_value"));
+        assertThat(Base64Converter.base64StringToBytes("c29tZV92YWx1ZQ=="), is("some_value".getBytes()));
     }
 
     @Test

File: mockserver-core/src/test/java/org/mockserver/client/serialization/deserializers/body/ParameterBodyDTODeserializerTest.java
Patch:
@@ -8,7 +8,6 @@
 
 import java.io.IOException;
 
-import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/deserializers/string/NottableStringDeserializerTest.java
Patch:
@@ -11,7 +11,6 @@
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertThat;
 import static org.mockserver.model.NottableString.not;
 import static org.mockserver.model.NottableString.string;
 
@@ -139,7 +138,7 @@ public void shouldParseJSONWithPath() throws IOException {
 
 
     /*
-    	  "name" : {
+          "name" : {
 	        "not" : false,
 	        "value" : "!name"
 	      },

File: mockserver-core/src/test/java/org/mockserver/client/serialization/java/HttpCallbackToJavaSerializerTest.java
Patch:
@@ -15,9 +15,9 @@ public class HttpCallbackToJavaSerializerTest {
     @Test
     public void shouldSerializeFullObjectWithCallbackAsJava() throws IOException {
         assertEquals(System.getProperty("line.separator") +
-                        "  callback()" + System.getProperty("line.separator") +
-                        "          .withCallbackClass(\"some_class\")",
-                new HttpCallbackToJavaSerializer().serializeAsJava(2,
+                        "        callback()" + System.getProperty("line.separator") +
+                        "                .withCallbackClass(\"some_class\")",
+                new HttpCallbackToJavaSerializer().serializeAsJava(1,
                         new HttpCallback()
                                 .withCallbackClass("some_class")
                 )

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/ConnectionOptionsDTOTest.java
Patch:
@@ -3,8 +3,6 @@
 import org.junit.Test;
 import org.mockserver.model.ConnectionOptions;
 
-import java.util.concurrent.TimeUnit;
-
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/body/JsonSchemaBodyDTOSerializerTest.java
Patch:
@@ -16,6 +16,7 @@ public void shouldSerializeJsonBodyDTO() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new JsonSchemaBodyDTO(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}"), false)),
                 is("{\"type\":\"JSON_SCHEMA\",\"jsonSchema\":\"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}}, \\\"required\\\": [\\\"id\\\"]}\"}"));
     }
+
     @Test
     public void shouldSerializeJsonBodyDTOWithNot() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new JsonSchemaBodyDTO(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}"), true)),

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/body/JsonSchemaBodySerializerTest.java
Patch:
@@ -16,6 +16,7 @@ public void shouldSerializeJsonBody() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}")),
                 is("{\"type\":\"JSON_SCHEMA\",\"jsonSchema\":\"{\\\"type\\\": \\\"object\\\", \\\"properties\\\": {\\\"id\\\": {\\\"type\\\": \\\"integer\\\"}}, \\\"required\\\": [\\\"id\\\"]}\"}"));
     }
+
     @Test
     public void shouldSerializeJsonBodyWithNot() throws JsonProcessingException {
         assertThat(ObjectMapperFactory.createObjectMapper().writeValueAsString(not(new JsonSchemaBody("{\"type\": \"object\", \"properties\": {\"id\": {\"type\": \"integer\"}}, \"required\": [\"id\"]}"))),

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/body/ParameterBodySerializerTest.java
Patch:
@@ -3,9 +3,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import org.junit.Test;
 import org.mockserver.client.serialization.ObjectMapperFactory;
-import org.mockserver.client.serialization.model.ParameterBodyDTO;
-import org.mockserver.model.Not;
-import org.mockserver.model.ParameterBody;
 
 import java.io.IOException;
 

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/response/HttpResponseDTOSerializerTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.Test;
 import org.mockserver.client.serialization.ObjectMapperFactory;
 import org.mockserver.client.serialization.model.HttpResponseDTO;
-import org.mockserver.model.ConnectionOptions;
 import org.mockserver.model.Cookie;
 import org.mockserver.model.Delay;
 import org.mockserver.model.Header;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/serializers/string/NottableStringSerializerTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.Test;
 import org.mockserver.client.serialization.ObjectMapperFactory;
 import org.mockserver.model.NottableString;
-import org.mockserver.model.StringBody;
 
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assert.assertThat;

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherDumpTest.java
Patch:
@@ -143,7 +143,7 @@ public void shouldCorrectlyMatchRegexForResponsesWithStatusCode() {
                 "  }," + System.getProperty("line.separator") +
                 "  \"httpResponse\" : {" + System.getProperty("line.separator") +
                 "    \"statusCode\" : 200," + System.getProperty("line.separator") +
-                "    \"body\" : \"" + Base64Converter.stringToBase64Bytes("some_response_body".getBytes()) + "\"" + System.getProperty("line.separator") +
+                "    \"body\" : \"" + Base64Converter.bytesToBase64String("some_response_body".getBytes()) + "\"" + System.getProperty("line.separator") +
                 "  }," + System.getProperty("line.separator") +
                 "  \"times\" : {" + System.getProperty("line.separator") +
                 "    \"remainingTimes\" : 0," + System.getProperty("line.separator") +
@@ -175,7 +175,7 @@ public void shouldCorrectlyMatchRegexForResponsesWithDelay() {
                 "        \"path\": \"somePath\"" + System.getProperty("line.separator") +
                 "    }," + System.getProperty("line.separator") +
                 "    \"httpResponse\": {" + System.getProperty("line.separator") +
-                "        \"body\": \"" + Base64Converter.stringToBase64Bytes("someBody".getBytes()) + "\"," + System.getProperty("line.separator") +
+                "        \"body\": \"" + Base64Converter.bytesToBase64String("someBody".getBytes()) + "\"," + System.getProperty("line.separator") +
                 "        \"delay\": {" + System.getProperty("line.separator") +
                 "            \"timeUnit\": null," + System.getProperty("line.separator") +
                 "            \"value\": null" + System.getProperty("line.separator") +
@@ -228,7 +228,7 @@ public void shouldCorrectlyMatchRegexForComplexResponses() {
                 "  }," + System.getProperty("line.separator") +
                 "  \"httpResponse\" : {" + System.getProperty("line.separator") +
                 "    \"statusCode\" : 304," + System.getProperty("line.separator") +
-                "    \"body\" : \"" + Base64Converter.stringToBase64Bytes("someBody".getBytes()) + "\"," + System.getProperty("line.separator") +
+                "    \"body\" : \"" + Base64Converter.bytesToBase64String("someBody".getBytes()) + "\"," + System.getProperty("line.separator") +
                 "    \"cookies\" : [ {" + System.getProperty("line.separator") +
                 "      \"name\" : \"someCookieName\"," + System.getProperty("line.separator") +
                 "      \"values\" : [ \"someCookieValue\" ]" + System.getProperty("line.separator") +

File: mockserver-core/src/test/java/org/mockserver/model/BinaryBodyTest.java
Patch:
@@ -37,6 +37,6 @@ public void shouldReturnValuesSetInConstructor() {
 
     @Test
     public void shouldReturnFormattedRequestInToString() {
-        assertEquals(Base64Converter.stringToBase64Bytes("some_body".getBytes()), binary("some_body".getBytes()).toString());
+        assertEquals(Base64Converter.bytesToBase64String("some_body".getBytes()), binary("some_body".getBytes()).toString());
     }
 }

File: mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest.java
Patch:
@@ -33,7 +33,7 @@ public void returnsResponseCode() {
 
     @Test
     public void returnsBody() {
-        assertEquals(Base64Converter.stringToBase64Bytes("somebody".getBytes()), new HttpResponse().withBody("somebody".getBytes()).getBodyAsString());
+        assertEquals(Base64Converter.bytesToBase64String("somebody".getBytes()), new HttpResponse().withBody("somebody".getBytes()).getBodyAsString());
         assertEquals("somebody", new HttpResponse().withBody("somebody").getBodyAsString());
         assertNull(new HttpResponse().withBody((byte[]) null).getBodyAsString());
         assertEquals("", new HttpResponse().withBody((String) null).getBodyAsString());

File: mockserver-netty/src/test/java/org/mockserver/integration/ClientAndServerIntegrationAutoAllocatedPortTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.mockserver.echo.http.EchoServer;
-import org.mockserver.server.AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest;
+import org.mockserver.server.NettyAbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
 import java.util.concurrent.ExecutionException;
@@ -13,7 +13,7 @@
 /**
  * @author jamesdbloom
  */
-public class ClientAndServerIntegrationAutoAllocatedPortTest extends AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest {
+public class ClientAndServerIntegrationAutoAllocatedPortTest extends NettyAbstractClientServerIntegrationTest {
 
     private final static int TEST_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private static int severHttpPort;

File: mockserver-netty/src/test/java/org/mockserver/integration/ClientAndServerIntegrationTest.java
Patch:
@@ -3,15 +3,15 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.mockserver.echo.http.EchoServer;
-import org.mockserver.server.AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest;
+import org.mockserver.server.NettyAbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
 import static org.mockserver.integration.ClientAndServer.startClientAndServer;
 
 /**
  * @author jamesdbloom
  */
-public class ClientAndServerIntegrationTest extends AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest {
+public class ClientAndServerIntegrationTest extends NettyAbstractClientServerIntegrationTest {
 
     private static final int SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int TEST_SERVER_HTTP_PORT = PortFactory.findFreePort();

File: mockserver-netty/src/test/java/org/mockserver/server/ClientServerNettyIntegrationTest.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * @author jamesdbloom
  */
-public class ClientServerNettyIntegrationTest extends AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest {
+public class ClientServerNettyIntegrationTest extends NettyAbstractClientServerIntegrationTest {
 
     private final static int TEST_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = PortFactory.findFreePort();

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarNoContextPathIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @author jamesdbloom
  */
-public class ClientServerWarNoContextPathIntegrationTest extends AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest {
+public class ClientServerWarNoContextPathIntegrationTest extends DeployableWARAbstractClientServerIntegrationTest {
 
     private final static int SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTPS_PORT = PortFactory.findFreePort();

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @author jamesdbloom
  */
-public class ClientServerWarWithContextPathIntegrationTest extends AbstractClientServerSharedClassloadersAndTestClasspathIntegrationTest {
+public class ClientServerWarWithContextPathIntegrationTest extends DeployableWARAbstractClientServerIntegrationTest {
 
     private final static int SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTPS_PORT = PortFactory.findFreePort();

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/InstanceHolder.java
Patch:
@@ -65,12 +65,12 @@ public void start(final int mockServerPort, final int proxyPort, ExpectationInit
         }
     }
 
-    public void stop(final int mockServerPort, final int proxyPort) {
+    public void stop(final int mockServerPort, final int proxyPort, boolean ignoreFailure) {
         if (mockServerPort != -1) {
-            getMockServerClient(mockServerPort).stop();
+            getMockServerClient(mockServerPort).stop(ignoreFailure);
         }
         if (proxyPort != -1) {
-            getProxyClient(proxyPort).stop();
+            getProxyClient(proxyPort).stop(ignoreFailure);
         }
     }
 

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -68,7 +68,7 @@ public void execute() throws MojoExecutionException {
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getEmbeddedJettyHolder().stop(serverPort, proxyPort);
+            getEmbeddedJettyHolder().stop(serverPort, proxyPort, true);
             try {
                 TimeUnit.SECONDS.sleep(1);
             } catch (InterruptedException e) {

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -22,7 +22,7 @@ public void execute() throws MojoExecutionException {
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getEmbeddedJettyHolder().stop(serverPort, proxyPort);
+            getEmbeddedJettyHolder().stop(serverPort, proxyPort, false);
             if (serverPort != -1) {
                 getLog().info("Stopped MockServer running on port [" + serverPort + "]");
             }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopForkedMojoTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldStopMockServerAndProxySuccessfully() throws MojoExecutionExcep
         mockServerStopForkedMojo.execute();
 
         // then
-        verify(mockEmbeddedJettyHolder).stop(1, 2);
+        verify(mockEmbeddedJettyHolder).stop(1, 2, false);
     }
 
     @Test

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/InstanceHolder.java
Patch:
@@ -65,12 +65,12 @@ public void start(final int mockServerPort, final int proxyPort, ExpectationInit
         }
     }
 
-    public void stop(final int mockServerPort, final int proxyPort) {
+    public void stop(final int mockServerPort, final int proxyPort, boolean ignoreFailure) {
         if (mockServerPort != -1) {
-            getMockServerClient(mockServerPort).stop();
+            getMockServerClient(mockServerPort).stop(ignoreFailure);
         }
         if (proxyPort != -1) {
-            getProxyClient(proxyPort).stop();
+            getProxyClient(proxyPort).stop(ignoreFailure);
         }
     }
 

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -68,7 +68,7 @@ public void execute() throws MojoExecutionException {
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getEmbeddedJettyHolder().stop(serverPort, proxyPort);
+            getEmbeddedJettyHolder().stop(serverPort, proxyPort, true);
             try {
                 TimeUnit.SECONDS.sleep(1);
             } catch (InterruptedException e) {

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -22,7 +22,7 @@ public void execute() throws MojoExecutionException {
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getEmbeddedJettyHolder().stop(serverPort, proxyPort);
+            getEmbeddedJettyHolder().stop(serverPort, proxyPort, false);
             if (serverPort != -1) {
                 getLog().info("Stopped MockServer running on port [" + serverPort + "]");
             }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopForkedMojoTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldStopMockServerAndProxySuccessfully() throws MojoExecutionExcep
         mockServerStopForkedMojo.execute();
 
         // then
-        verify(mockEmbeddedJettyHolder).stop(1, 2);
+        verify(mockEmbeddedJettyHolder).stop(1, 2, false);
     }
 
     @Test

File: mockserver-client-java/src/test/java/org/mockserver/client/serialization/java/CompileGeneratedJavaCodeTest.java
Patch:
@@ -32,7 +32,7 @@ public class CompileGeneratedJavaCodeTest {
     @Test
     public void shouldCompileGeneratedCode() throws URISyntaxException {
 
-        String expectationAsJavaCode = new ExpectationToJavaSerializer().serializeAsJava(8,
+        String expectationAsJavaCode = new ExpectationToJavaSerializer().serializeAsJava(1,
                 new Expectation(
                         request()
                                 .withMethod("GET")

File: mockserver-core/src/main/java/org/mockserver/filters/LogFilter.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class LogFilter implements ResponseFilter, RequestFilter {
 
-    private static final Logger logger = LoggerFactory.getLogger(ResponseFilter.class);
+    private static final Logger logger = LoggerFactory.getLogger(LogFilter.class);
     // request / response persistence
     private final CircularMultiMap<HttpRequest, HttpResponse> requestResponseLog = new CircularMultiMap<HttpRequest, HttpResponse>(100, 100);
     private final CircularLinkedList<HttpRequest> requestLog = new CircularLinkedList<HttpRequest>(100);

File: mockserver-client-java/src/test/java/org/mockserver/client/proxy/ProxyClientTest.java
Patch:
@@ -11,7 +11,6 @@
 import org.mockserver.client.serialization.VerificationSequenceSerializer;
 import org.mockserver.client.serialization.VerificationSerializer;
 import org.mockserver.mock.Expectation;
-import org.mockserver.model.Body;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.OutboundHttpRequest;
 import org.mockserver.model.StringBody;
@@ -66,7 +65,6 @@ public void shouldHandleNullHostnameExceptions() {
         exception.expect(IllegalArgumentException.class);
         exception.expectMessage(containsString("Host can not be null or empty"));
 
-
         // when
         new ProxyClient(null, 8080);
     }
@@ -77,7 +75,6 @@ public void shouldHandleNullContextPathExceptions() {
         exception.expect(IllegalArgumentException.class);
         exception.expectMessage(containsString("ContextPath can not be null"));
 
-
         // when
         new ProxyClient("localhost", 8080, null);
     }

File: mockserver-core/src/main/java/org/mockserver/model/OutboundHttpRequest.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockserver.model;
 
+import com.google.common.base.Strings;
+
 import java.net.InetSocketAddress;
 
 /**
@@ -14,7 +16,7 @@ public class OutboundHttpRequest extends HttpRequest {
     public OutboundHttpRequest(String hostname, int port, String contextPath, HttpRequest httpRequest) {
         this.hostname = hostname;
         this.port = port;
-        this.contextPath = contextPath;
+        this.contextPath = Strings.nullToEmpty(contextPath);
         this.secure = httpRequest.secure;
         this.method = httpRequest.method;
         this.path = httpRequest.path;

File: mockserver-netty/src/main/java/org/mockserver/proxy/socks/SocksConnectHandler.java
Patch:
@@ -20,7 +20,7 @@ protected void removeCodecSupport(ChannelHandlerContext ctx) {
         removeHandler(pipeline, HttpContentDecompressor.class);
         removeHandler(pipeline, HttpObjectAggregator.class);
         removeHandler(pipeline, SocksMessageEncoder.class);
-        pipeline.remove(this);
+        removeHandler(pipeline, this);
     }
 
     protected Object successResponse(Object request) {

File: mockserver-core/src/main/java/org/mockserver/model/ParameterBody.java
Patch:
@@ -42,16 +42,16 @@ public String toString() {
         for (int i = 0; i < bodyParameters.size(); i++) {
             Parameter parameter = bodyParameters.get(i);
             if (parameter.getValues().isEmpty()) {
-                body.append(parameter.getName().isNot() ? "!" : "").append(parameter.getName().getValue());
+                body.append(parameter.getName().getValue());
                 body.append('=');
             } else {
                 List<NottableString> values = parameter.getValues();
                 for (int j = 0; j < values.size(); j++) {
                     String value = values.get(j).getValue();
-                    body.append(parameter.getName().isNot() ? "!" : "").append(parameter.getName().getValue());
+                    body.append(parameter.getName().getValue());
                     body.append('=');
                     try {
-                        body.append(values.get(j).isNot() ? "!" : "").append(URLEncoder.encode(value, Charsets.UTF_8.name()));
+                        body.append(URLEncoder.encode(value, Charsets.UTF_8.name()));
                     } catch (UnsupportedEncodingException uee) {
                         throw new RuntimeException("UnsupportedEncodingException while encoding body parameters for " + parameters, uee);
                     }

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractClientServerIntegrationTest.java
Patch:
@@ -2533,7 +2533,6 @@ public void shouldReturnResponseByMatchingPathAndMethodAndParametersAndHeadersAn
     }
 
     @Test
-    @Ignore
     public void shouldReturnResponseByNotMatchingBodyParameterWithNotOperator() {
         // when
         mockServerClient

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -45,7 +45,7 @@ public Expectation when(final HttpRequest httpRequest, Times times, TimeToLive t
                 for (Expectation existingExpectation : existingExpectationsWithMatchingRequest) {
                     existingExpectation.setNotUnlimitedResponses();
                 }
-                expectation = new Expectation(httpRequest, Times.once(), timeToLive);
+                 expectation = new Expectation(httpRequest, times, timeToLive);
             } else {
                 expectation = new Expectation(httpRequest, Times.unlimited(), timeToLive);
             }

File: mockserver-netty/src/main/java/org/mockserver/proxy/relay/UpstreamProxyRelayHandler.java
Patch:
@@ -30,7 +30,7 @@ public void operationComplete(ChannelFuture future) {
                 if (future.isSuccess()) {
                     ctx.channel().read();
                 } else {
-                    logger.error("Exception while returning writing " + request, future.cause());
+                    logger.error("Exception while returning response for request \"" + request.getMethod() + " " + request.getUri() + "\"", future.cause());
                     future.channel().close();
                 }
             }

File: mockserver-core/src/main/java/org/mockserver/client/netty/codec/MockServerResponseDecoder.java
Patch:
@@ -68,7 +68,7 @@ private void setBody(HttpResponse httpResponse, FullHttpResponse fullHttpRespons
                 if (ContentTypeMapper.isBinary(fullHttpResponse.headers().get(HttpHeaders.Names.CONTENT_TYPE))) {
                     httpResponse.withBody(new BinaryBody(bodyBytes));
                 } else {
-                    Charset requestCharset = ContentTypeMapper.determineCharsetForRequestContentType(fullHttpResponse);
+                    Charset requestCharset = ContentTypeMapper.determineCharsetForMessage(fullHttpResponse);
                     httpResponse.withBody(new String(bodyBytes, requestCharset));
                 }
             }

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletRequestToMockServerRequestDecoder.java
Patch:
@@ -50,7 +50,7 @@ private void setBody(HttpRequest httpRequest, HttpServletRequest httpServletRequ
             if (ContentTypeMapper.isBinary(httpServletRequest.getHeader(HttpHeaders.Names.CONTENT_TYPE))) {
                 httpRequest.withBody(new BinaryBody(bodyBytes));
             } else {
-                Charset requestCharset = ContentTypeMapper.determineCharsetForRequestContentType(httpServletRequest);
+                Charset requestCharset = ContentTypeMapper.determineCharsetForMessage(httpServletRequest);
                 httpRequest.withBody(new StringBody(new String(bodyBytes, requestCharset), DEFAULT_HTTP_CHARACTER_SET.equals(requestCharset) ? null : requestCharset));
             }
         }

File: mockserver-core/src/main/java/org/mockserver/mappers/MockServerResponseToHttpServletResponseEncoder.java
Patch:
@@ -66,7 +66,7 @@ private void setBody(HttpResponse httpResponse, HttpServletResponse httpServletR
             if (httpResponse.getBody() instanceof BinaryBody) {
                 IOStreamUtils.writeToOutputStream(Base64Converter.base64StringToBytes(httpResponse.getBodyAsString()), httpServletResponse);
             } else {
-                Charset bodyCharset = httpResponse.getBody().getCharset(ContentTypeMapper.determineCharsetFromResponseContentType(httpResponse));
+                Charset bodyCharset = httpResponse.getBody().getCharset(ContentTypeMapper.determineCharsetForMessage(httpResponse));
                 IOStreamUtils.writeToOutputStream(httpResponse.getBodyAsString().getBytes(bodyCharset), httpServletResponse);
             }
         }

File: mockserver-core/src/main/java/org/mockserver/model/StringBody.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.model;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.google.common.net.MediaType;
 
 import java.nio.charset.Charset;
 
@@ -58,7 +59,7 @@ public Charset getCharset(Charset defaultIfNotSet) {
 
     @JsonIgnore
     public String getContentType() {
-        return "plain/text";
+        return MediaType.create("text", "plain").toString();
     }
 
     @Override

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.client.netty;
 
+import com.google.common.net.MediaType;
 import io.netty.handler.codec.http.HttpHeaders;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -79,7 +80,7 @@ public void shouldSendComplexRequest() {
                         .withHeader(header(CONTENT_LENGTH, "this is an example body".length()))
                         .withHeader(header(ACCEPT_ENCODING, HttpHeaders.Values.GZIP + "," + HttpHeaders.Values.DEFLATE))
                         .withHeader(header(CONNECTION, HttpHeaders.Values.KEEP_ALIVE))
-                        .withHeader(header(CONTENT_TYPE, "plain/text"))
+                        .withHeader(header(CONTENT_TYPE, MediaType.create("text", "plain").toString()))
                         .withHeader(header(COOKIE, "some_cookie_name=some_cookie_value; another_cookie_name=another_cookie_value"))
                         .withHeader(header("some_header_name", "some_header_value"))
                         .withHeader(header("another_header_name", "first_header_value", "second_header_value"))

File: mockserver-examples/src/main/java/org/mockserver/web/configuration/WebMvcConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.web.configuration;
 
+import com.google.common.net.MediaType;
 import freemarker.cache.ClassTemplateLoader;
 import freemarker.cache.MultiTemplateLoader;
 import freemarker.cache.TemplateLoader;
@@ -53,7 +54,7 @@ public FreeMarkerViewResolver freeMarkerViewResolver() {
         freeMarkerViewResolver.setOrder(1);
         freeMarkerViewResolver.setPrefix("view/");
         freeMarkerViewResolver.setSuffix(".ftl");
-        freeMarkerViewResolver.setContentType("text/html;charset=UTF-8");
+        freeMarkerViewResolver.setContentType(MediaType.HTML_UTF_8.toString());
         return freeMarkerViewResolver;
     }
 

File: mockserver-examples/src/test/java/org/mockserver/web/controller/BooksPageEndToEndIntegrationTest.java
Patch:
@@ -57,7 +57,7 @@ public void shouldLoadListOfBooks() throws Exception {
         // when
         MvcResult response = mockMvc.perform(get("/books").accept(MediaType.TEXT_HTML))
                 .andExpect(status().isOk())
-                .andExpect(content().contentType("text/html;charset=UTF-8"))
+                .andExpect(content().contentType("text/html; charset=utf-8"))
                 .andReturn();
 
         // then
@@ -75,7 +75,7 @@ public void shouldLoadSingleBook() throws Exception {
         // when
         MvcResult response = mockMvc.perform(get("/book/1").accept(MediaType.TEXT_HTML))
                 .andExpect(status().isOk())
-                .andExpect(content().contentType("text/html;charset=UTF-8"))
+                .andExpect(content().contentType("text/html; charset=utf-8"))
                 .andReturn();
 
         // then

File: mockserver-netty/src/main/java/org/mockserver/codec/MockServerRequestDecoder.java
Patch:
@@ -69,7 +69,7 @@ private void setBody(HttpRequest httpRequest, FullHttpRequest fullHttpRequest) {
                 if (ContentTypeMapper.isBinary(fullHttpRequest.headers().get(HttpHeaders.Names.CONTENT_TYPE))) {
                     httpRequest.withBody(new BinaryBody(bodyBytes));
                 } else {
-                    Charset requestCharset = determineCharsetForRequestContentType(fullHttpRequest);
+                    Charset requestCharset = determineCharsetForMessage(fullHttpRequest);
                     httpRequest.withBody(new StringBody(new String(bodyBytes, requestCharset), DEFAULT_HTTP_CHARACTER_SET.equals(requestCharset) ? null : requestCharset));
                 }
             }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.proxy.http;
 
 import com.google.common.base.Strings;
+import com.google.common.net.MediaType;
 import io.netty.channel.*;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpResponseStatus;
@@ -109,7 +110,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
                 if (result.isEmpty()) {
                     writeResponse(ctx, request, HttpResponseStatus.ACCEPTED);
                 } else {
-                    writeResponse(ctx, request, HttpResponseStatus.NOT_ACCEPTABLE, result, "plain/text");
+                    writeResponse(ctx, request, HttpResponseStatus.NOT_ACCEPTABLE, result, MediaType.create("text", "plain").toString());
                 }
 
             } else if (request.matches("PUT", "/verifySequence")) {
@@ -120,7 +121,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
                 if (result.isEmpty()) {
                     writeResponse(ctx, request, HttpResponseStatus.ACCEPTED);
                 } else {
-                    writeResponse(ctx, request, HttpResponseStatus.NOT_ACCEPTABLE, result, "plain/text");
+                    writeResponse(ctx, request, HttpResponseStatus.NOT_ACCEPTABLE, result, MediaType.create("text", "plain").toString());
                 }
 
             } else if (request.matches("PUT", "/stop")) {

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarNoContextPathIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ public static void startServer() throws Exception {
         tomcat.setPort(SERVER_HTTP_PORT);
 
         // add https connector
-        SSLFactory.getInstance().buildKeyStore();
+        SSLFactory.getInstance().buildKeyStore(true);
         Connector httpsConnector = new Connector();
         httpsConnector.setPort(SERVER_HTTPS_PORT);
         httpsConnector.setSecure(true);

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ public static void startServer() throws Exception {
         tomcat.setPort(SERVER_HTTP_PORT);
 
         // add https connector
-        SSLFactory.getInstance().buildKeyStore();
+        SSLFactory.getInstance().buildKeyStore(true);
         Connector httpsConnector = new Connector();
         httpsConnector.setPort(SERVER_HTTPS_PORT);
         httpsConnector.setSecure(true);

File: mockserver-core/src/test/java/org/mockserver/mock/MockServerMatcherOverlappingRequestsTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.model.Cookie;
 import org.mockserver.model.HttpRequest;
@@ -42,7 +43,7 @@ public void respondWhenPathMatchesAlwaysReturnFirstMatching() {
     @Test
     public void respondWhenPathMatchesReturnFirstMatchingWithRemainingTimes() {
         // when
-        mockServerMatcher.when(new HttpRequest().withPath("somepath").withCookies(new Cookie("name", "value")), Times.once()).thenRespond(httpResponse[0].withBody("somebody1"));
+        mockServerMatcher.when(new HttpRequest().withPath("somepath").withCookies(new Cookie("name", "value")), Times.once(), TimeToLive.unlimited()).thenRespond(httpResponse[0].withBody("somebody1"));
         mockServerMatcher.when(new HttpRequest().withPath("somepath")).thenRespond(httpResponse[1].withBody("somebody2"));
 
         // then

File: mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest.java
Patch:
@@ -79,6 +79,7 @@ public void returnsCookies() {
     @Test
     public void setsDelay() {
         assertEquals(new Delay(TimeUnit.MILLISECONDS, 10), new HttpResponse().withDelay(new Delay(TimeUnit.MILLISECONDS, 10)).getDelay());
+        assertEquals(new Delay(TimeUnit.MILLISECONDS, 10), new HttpResponse().withDelay(TimeUnit.MILLISECONDS, 10).getDelay());
     }
 
     @Test

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -62,7 +62,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
             } else if (request.matches("PUT", "/expectation")) {
 
                 Expectation expectation = expectationSerializer.deserialize(request.getBodyAsString());
-                mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward()).thenCallback(expectation.getHttpCallback());
+                mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes(), expectation.getTimeToLive()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward()).thenCallback(expectation.getHttpCallback());
                 logFormatter.infoLog("creating expectation:{}", expectation);
                 writeResponse(ctx, request, HttpResponseStatus.CREATED);
 

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -3,7 +3,6 @@
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.HttpResponseStatus;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -14,6 +13,7 @@
 import org.mockserver.client.serialization.VerificationSequenceSerializer;
 import org.mockserver.client.serialization.VerificationSerializer;
 import org.mockserver.filters.LogFilter;
+import org.mockserver.matchers.TimeToLive;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
 import org.mockserver.mock.MockServerMatcher;
@@ -98,7 +98,7 @@ public void setupFixture() {
         when(mockVerificationSequenceSerializer.deserialize(anyString())).thenReturn(mockVerificationSequence);
 
         // given - an expectation that can be setup
-        when(mockMockServerMatcher.when(any(HttpRequest.class), any(Times.class))).thenReturn(mockExpectation);
+        when(mockMockServerMatcher.when(any(HttpRequest.class), any(Times.class), any(TimeToLive.class))).thenReturn(mockExpectation);
         when(mockExpectation.thenRespond(any(HttpResponse.class))).thenReturn(mockExpectation);
         when(mockExpectation.thenForward(any(HttpForward.class))).thenReturn(mockExpectation);
         when(mockExpectation.thenCallback(any(HttpCallback.class))).thenReturn(mockExpectation);
@@ -123,7 +123,7 @@ public void shouldSetupExpectation() {
         verify(mockExpectationSerializer).deserialize("some_content");
 
         // and - expectation correctly setup
-        verify(mockMockServerMatcher).when(any(HttpRequest.class), any(Times.class));
+        verify(mockMockServerMatcher).when(any(HttpRequest.class), any(Times.class), any(TimeToLive.class));
         verify(mockExpectation).thenRespond(any(HttpResponse.class));
         verify(mockExpectation).thenForward(any(HttpForward.class));
         verify(mockExpectation).thenCallback(any(HttpCallback.class));

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -83,7 +83,7 @@ public void doPut(HttpServletRequest httpServletRequest, HttpServletResponse htt
             } else if (requestPath.equals("/expectation")) {
 
                 Expectation expectation = expectationSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest));
-                mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward()).thenCallback(expectation.getHttpCallback());
+                mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes(), expectation.getTimeToLive()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward()).thenCallback(expectation.getHttpCallback());
                 httpServletResponse.setStatus(HttpStatusCode.CREATED_201.code());
 
             } else if (requestPath.equals("/clear")) {

File: mockserver-core/src/main/java/org/mockserver/configuration/ConfigurationProperties.java
Patch:
@@ -215,11 +215,10 @@ public static String readPropertyHierarchically(String key, String defaultValue)
 
     public static void overrideLogLevel(String level) {
         if (level != null) {
-            if (!Arrays.asList("ALL", "DEBUG", "INFO", "WARN", "ERROR", "OFF").contains(level)) {
-                throw new IllegalArgumentException("log level \"" + level + "\" is not legel it must be one of \"ALL\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"");
+            if (!Arrays.asList("TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF").contains(level)) {
+                throw new IllegalArgumentException("log level \"" + level + "\" is not legel it must be one of \"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"OFF\"");
             }
             System.setProperty("mockserver.logLevel", level);
-            System.setProperty("root.logLevel", level);
         }
     }
 }

File: mockserver-core/src/main/java/org/mockserver/socket/SSLFactory.java
Patch:
@@ -149,6 +149,7 @@ public KeyStore buildKeyStore() {
         boolean rebuildKeyStore = ConfigurationProperties.rebuildKeyStore();
         if (keystore == null || rebuildKeyStore) {
             File keyStoreFile = new File(ConfigurationProperties.javaKeyStoreFilePath());
+            System.setProperty("javax.net.ssl.trustStore", keyStoreFile.getAbsolutePath());
             if (keyStoreFile.exists() && !rebuildKeyStore) {
                 keystore = loadKeyStore(keyStoreFile);
             } else {

File: mockserver-core/src/main/java/org/mockserver/collections/CircularMultiMap.java
Patch:
@@ -9,11 +9,11 @@
  */
 public class CircularMultiMap<K, V> implements Map<K, V> {
     private final int maxValuesPerKeySize;
-    private final CircularHashMap<K, List<V>> backingMap;
+    private final Map<K, List<V>> backingMap;
 
     public CircularMultiMap(int maxNumberOfKeys, int maxNumberOfValuesPerKey) {
         this.maxValuesPerKeySize = maxNumberOfValuesPerKey;
-        backingMap = new CircularHashMap<K, List<V>>(maxNumberOfKeys);
+        backingMap = Collections.synchronizedMap(new CircularHashMap<K, List<V>>(maxNumberOfKeys));
     }
 
     @Override

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -22,7 +22,7 @@ public ActionHandler(LogFilter logFilter) {
         filters.withFilter(new org.mockserver.model.HttpRequest(), logFilter);
     }
 
-    public synchronized HttpResponse processAction(Action action, HttpRequest httpRequest) {
+    public HttpResponse processAction(Action action, HttpRequest httpRequest) {
         HttpResponse httpResponse = notFoundResponse();
         httpRequest = filters.applyOnRequestFilters(httpRequest);
         if (action != null) {

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-run-from-command-line/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8084;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-run-stop-forked-from-command-line/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8086;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-start-using-plugin-stops-using-listener-and-plugin/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8090;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-start-using-plugin-stops-using-listener/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8088;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-starts-stops-forked-server-from-pom/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8092;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-starts-stops-server-from-pom-explicitly/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8094;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-run-from-command-line/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9090;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-run-stop-forked-from-command-line/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9092;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-starts-stops-forked-server-from-pom/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9094;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-starts-stops-server-from-pom-explicitly/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9096;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-starts-using-plugin-stops-using-listener/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9098;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-core/src/main/java/org/mockserver/echo/http/EchoServer.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.echo;
+package org.mockserver.echo.http;
 
 import com.google.common.util.concurrent.SettableFuture;
 import io.netty.bootstrap.ServerBootstrap;
@@ -19,7 +19,7 @@ public class EchoServer {
 
     private NioEventLoopGroup eventLoopGroup;
 
-    public EchoServer(final int port) {
+    public EchoServer(final int port, final boolean secure) {
         final Logger logger = LoggerFactory.getLogger(EchoServer.class);
         final SettableFuture<String> hasStarted = SettableFuture.create();
 
@@ -33,7 +33,7 @@ public void run() {
                         .channel(NioServerSocketChannel.class)
                         .option(ChannelOption.SO_BACKLOG, 100)
                         .handler(new LoggingHandler("EchoServer Handler"))
-                        .childHandler(new EchoServerUnificationHandler())
+                        .childHandler(new EchoServerInitializer(secure))
                         .bind(port)
                         .addListener(new ChannelFutureListener() {
                             @Override

File: mockserver-core/src/main/java/org/mockserver/echo/unification/EchoServerUnificationHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.echo;
+package org.mockserver.echo.unification;
 
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelHandler;

File: mockserver-core/src/test/java/org/mockserver/client/netty/NettyHttpClientTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.socket.PortFactory;
 
@@ -31,7 +31,7 @@ public class NettyHttpClientTest {
     @BeforeClass
     public static void startEchoServer() {
         freePort = PortFactory.findFreePort();
-        echoServer = new EchoServer(freePort);
+        echoServer = new EchoServer(freePort, false);
     }
 
     @AfterClass

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -57,7 +57,7 @@ public void shouldConnectToSecurePort() throws Exception {
 
             // when
             output.write(("" +
-                    "CONNECT localhost:666 HTTP/1.1\r\n" +
+                    "CONNECT localhost:443 HTTP/1.1\r\n" +
                     "Host: localhost:" + getServerSecurePort() + "\r\n" +
                     "\r\n"
             ).getBytes(Charsets.UTF_8));
@@ -83,7 +83,7 @@ public void shouldForwardRequestsToSecurePortUsingSocketDirectly() throws Except
             // when
             // - send CONNECT request
             output.write(("" +
-                    "CONNECT localhost:666 HTTP/1.1\r\n" +
+                    "CONNECT localhost:443 HTTP/1.1\r\n" +
                     "Host: localhost:" + getServerSecurePort() + "\r\n" +
                     "\r\n"
             ).getBytes(Charsets.UTF_8));
@@ -201,7 +201,7 @@ public void shouldForwardRequestsToSecurePortAndUnknownPath() throws Exception {
             // when
             // - send CONNECT request
             output.write(("" +
-                    "CONNECT localhost:666 HTTP/1.1\r\n" +
+                    "CONNECT localhost:443 HTTP/1.1\r\n" +
                     "Host: localhost:" + getServerSecurePort() + "\r\n" +
                     "\r\n"
             ).getBytes(Charsets.UTF_8));

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-run-from-command-line/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8084;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-run-stop-forked-from-command-line/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8086;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-start-using-plugin-stops-using-listener-and-plugin/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8090;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-start-using-plugin-stops-using-listener/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8088;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-starts-stops-forked-server-from-pom/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8092;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-starts-stops-server-from-pom-explicitly/src/test/java/org/mockserver/ClientServerMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.server.AbstractClientServerIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,11 +15,11 @@ public class ClientServerMavenPluginTest extends AbstractClientServerIntegration
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int SERVER_HTTP_PORT = 8094;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
 
     @BeforeClass
     public static void createClient() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-run-from-command-line/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9090;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-run-stop-forked-from-command-line/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9092;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-starts-stops-forked-server-from-pom/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9094;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-starts-stops-server-from-pom-explicitly/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9096;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-maven-plugin-integration-tests/src/integration-tests/proxy-starts-using-plugin-stops-using-listener/src/test/java/org/mockserver/ClientProxyMavenPluginTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.unification.PortUnificationEchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -15,12 +15,12 @@ public class ClientProxyMavenPluginTest extends AbstractClientProxyIntegrationTe
 
     private final static int ECHO_SERVER_HTTP_PORT = PortFactory.findFreePort();
     private final static int PROXY_HTTP_PORT = 9098;
-    private static EchoServer echoServer;
+    private static PortUnificationEchoServer echoServer;
     private static ProxyClient proxyClient;
 
     @BeforeClass
     public static void startServer() throws Exception {
-        echoServer = new EchoServer(ECHO_SERVER_HTTP_PORT);
+        echoServer = new PortUnificationEchoServer(ECHO_SERVER_HTTP_PORT);
         proxyClient = new ProxyClient("127.0.0.1", PROXY_HTTP_PORT);
     }
 

File: mockserver-netty/src/test/java/org/mockserver/proxy/direct/NettyDirectProxyIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.proxy.Proxy;
 import org.mockserver.proxy.ProxyBuilder;
 import org.mockserver.socket.PortFactory;
@@ -35,7 +35,7 @@ public static void setupFixture() throws Exception {
         logger.debug("PROXY_DIRECT_PORT = " + PROXY_DIRECT_PORT);
 
         // start echo server
-        echoServer = new EchoServer(SERVER_HTTP_PORT);
+        echoServer = new EchoServer(SERVER_HTTP_PORT, false);
 
         // start proxy
         httpProxy = new ProxyBuilder()

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/NettyHttpProxyIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.proxy.Proxy;
 import org.mockserver.proxy.ProxyBuilder;
@@ -33,7 +33,7 @@ public static void setupFixture() throws Exception {
         servletContext = "";
 
         // start server
-        echoServer = new EchoServer(SERVER_HTTP_PORT);
+        echoServer = new EchoServer(SERVER_HTTP_PORT, false);
 
         // start proxy
         httpProxy = new ProxyBuilder()

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/NettyHttpProxySecureIntegrationTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.integration.proxy.AbstractClientSecureProxyIntegrationTest;
 import org.mockserver.proxy.Proxy;
 import org.mockserver.proxy.ProxyBuilder;
@@ -31,7 +31,7 @@ public static void setupFixture() throws Exception {
         logger.debug("PROXY_HTTPS_PORT = " + PROXY_HTTPS_PORT);
 
         // start server
-        echoServer = new EchoServer(SERVER_HTTPS_PORT);
+        echoServer = new EchoServer(SERVER_HTTPS_PORT, true);
 
         // start proxy
         httpProxy = new ProxyBuilder()

File: mockserver-netty/src/test/java/org/mockserver/server/ClientServerNettyIntegrationTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.mockserver.MockServer;
 import org.mockserver.socket.PortFactory;
 
@@ -23,7 +23,7 @@ public static void startServer() throws Exception {
         mockServer = new MockServer(SERVER_HTTP_PORT);
 
         // start test server
-        echoServer = new EchoServer(TEST_SERVER_HTTP_PORT);
+        echoServer = new EchoServer(TEST_SERVER_HTTP_PORT, false);
 
         // start client
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyClientWarPathIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -29,7 +29,7 @@ public static void setupFixture() throws Exception {
         servletContext = "";
 
         // start server
-        echoServer = new EchoServer(SERVER_HTTP_PORT);
+        echoServer = new EchoServer(SERVER_HTTP_PORT, false);
 
         // wait for server to start up
         TimeUnit.MILLISECONDS.sleep(500);

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyClientWarWithContextPathIntegrationTest.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.integration.proxy.AbstractClientProxyIntegrationTest;
 import org.mockserver.socket.PortFactory;
 
@@ -29,7 +29,7 @@ public static void setupFixture() throws Exception {
         servletContext = "proxy";
 
         // start server
-        echoServer = new EchoServer(SERVER_HTTP_PORT);
+        echoServer = new EchoServer(SERVER_HTTP_PORT, false);
 
         // wait for server to start up
         TimeUnit.MILLISECONDS.sleep(500);

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarNoContextPathIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
 import org.mockserver.configuration.ConfigurationProperties;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.socket.SSLFactory;
 
@@ -62,7 +62,7 @@ public static void startServer() throws Exception {
         tomcat.start();
 
         // start test server
-        echoServer = new EchoServer(TEST_SERVER_HTTP_PORT);
+        echoServer = new EchoServer(TEST_SERVER_HTTP_PORT, false);
 
         // start client
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.BeforeClass;
 import org.mockserver.client.server.MockServerClient;
 import org.mockserver.configuration.ConfigurationProperties;
-import org.mockserver.echo.EchoServer;
+import org.mockserver.echo.http.EchoServer;
 import org.mockserver.socket.PortFactory;
 import org.mockserver.socket.SSLFactory;
 
@@ -62,7 +62,7 @@ public static void startServer() throws Exception {
         tomcat.start();
 
         // start test server
-        echoServer = new EchoServer(TEST_SERVER_HTTP_PORT);
+        echoServer = new EchoServer(TEST_SERVER_HTTP_PORT, false);
 
         // start client
         mockServerClient = new MockServerClient("localhost", SERVER_HTTP_PORT, servletContext);

File: mockserver-netty/src/test/java/org/mockserver/proxy/socks/NettySocksProxyIntegrationTest.java
Patch:
@@ -77,7 +77,6 @@ public static void setupFixture() throws Exception {
         // setup proxy
         previousProxySelector = ProxySelector.getDefault();
         ProxySelector.setDefault(createProxySelector("127.0.0.1", PROXY_HTTP_PORT));
-        System.setProperty("socksProxySet", "true");
     }
 
     @AfterClass
@@ -90,7 +89,6 @@ public static void shutdownFixture() {
 
         // rollback proxy
         ProxySelector.setDefault(previousProxySelector);
-        System.clearProperty("socksProxySet");
     }
 
     @Before

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -73,7 +73,7 @@ public synchronized void clear(HttpRequest httpRequest) {
         if (httpRequest != null) {
             HttpRequestMatcher httpRequestMatcher = new MatcherBuilder().transformsToMatcher(httpRequest);
             for (Expectation expectation : new ArrayList<Expectation>(expectations)) {
-                if (httpRequestMatcher.matches(expectation.getHttpRequest())) {
+                if (httpRequestMatcher.matches(expectation.getHttpRequest(), true)) {
                     if (this.expectations.contains(expectation)) {
                         this.expectations.remove(expectation);
                     }

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -64,12 +64,12 @@ public static void main(String... arguments) {
         Logging.overrideLogLevel(System.getProperty("mockserver.logLevel"));
 
         if (parseIntegerArguments.size() > 0) {
-            if (parseIntegerArguments.containsKey(PROXY_PORT_KEY)) {
-                httpProxyBuilder.withLocalPort(parseIntegerArguments.get(PROXY_PORT_KEY)).build();
-            }
             if (parseIntegerArguments.containsKey(SERVER_PORT_KEY)) {
                 mockServerBuilder.withHTTPPort(parseIntegerArguments.get(SERVER_PORT_KEY)).build();
             }
+            if (parseIntegerArguments.containsKey(PROXY_PORT_KEY)) {
+                httpProxyBuilder.withLocalPort(parseIntegerArguments.get(PROXY_PORT_KEY)).build();
+            }
         } else {
             showUsage();
         }

File: mockserver-netty/src/main/java/org/mockserver/proxy/direct/DirectProxyUpstreamHandler.java
Patch:
@@ -37,7 +37,7 @@ public void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest
                     public void initChannel(final SocketChannel socketChannel) throws Exception {
                         // downstream
                         ChannelPipeline downstreamPipeline = socketChannel.pipeline();
-                        if (PortUnificationHandler.isSslEnabled(ctx)) {
+                        if (PortUnificationHandler.isSslEnabledDownstream(ctx.channel())) {
                             downstreamPipeline.addLast(new SslHandler(SSLFactory.createClientSSLEngine()));
                         }
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -26,6 +26,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.sound.sampled.Port;
+
 import static io.netty.handler.codec.http.HttpHeaders.Names.CONNECTION;
 import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LENGTH;
 import static org.mockserver.model.Header.header;
@@ -66,7 +68,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpRequest request) {
             if (request.getMethod().getValue().equals("CONNECT")) {
 
                 // assume CONNECT always for SSL
-                ctx.channel().attr(PortUnificationHandler.SSL_ENABLED).set(Boolean.TRUE);
+                PortUnificationHandler.enabledSslUpstreamAndDownstream(ctx.channel());
                 // add Subject Alternative Name for SSL certificate
                 ConfigurationProperties.addSslSubjectAlternativeNameDomains(
                         StringUtils.substringBefore(request.getPath().getValue(), ":")

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyUnificationHandler.java
Patch:
@@ -15,7 +15,7 @@ public class HttpProxyUnificationHandler extends PortUnificationHandler {
 
     @Override
     protected void configurePipeline(ChannelHandlerContext ctx, ChannelPipeline pipeline) {
-        pipeline.addLast(new MockServerServerCodec(isSslEnabled(ctx)));
+        pipeline.addLast(new MockServerServerCodec(isSslEnabledDownstream(ctx.channel())));
         pipeline.addLast(new HttpProxyHandler(ctx.channel().attr(Proxy.HTTP_PROXY).get(), ctx.channel().attr(Proxy.LOG_FILTER).get()));
     }
 

File: mockserver-client-java/src/main/java/org/mockserver/client/proxy/ProxyClient.java
Patch:
@@ -95,7 +95,7 @@ public ProxyClient stop() {
         try {
             sendRequest(request().withMethod("PUT").withPath(calculatePath("stop")));
         } catch (Exception e) {
-            logger.debug("Failed to send stop request to proxy " + e.getMessage());
+            logger.warn("Failed to send stop request to proxy " + e.getMessage());
         }
         return this;
     }

File: mockserver-client-java/src/main/java/org/mockserver/client/server/MockServerClient.java
Patch:
@@ -127,7 +127,7 @@ public MockServerClient stop() {
         try {
             sendRequest(request().withMethod("PUT").withPath(calculatePath("stop")));
         } catch (Exception e) {
-            logger.debug("Failed to send stop request to proxy " + e.getMessage());
+            logger.warn("Failed to send stop request to proxy " + e.getMessage());
         }
         return this;
     }

File: mockserver-core/src/main/java/org/mockserver/mock/Expectation.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author jamesdbloom
  */
-public class Expectation extends ObjectWithReflectiveEqualsHashCodeToString {
+public class Expectation extends ObjectWithJsonToString {
 
     private final HttpRequest httpRequest;
     private final Times times;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/ExpectationSerializerTest.java
Patch:
@@ -116,7 +116,7 @@ public void shouldSerializeArray() throws IOException {
     public void shouldHandleExceptionWhileSerializingObject() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while serializing expectation to JSON with value Expectation[httpRequest=<null>,times=<null>,httpRequestMatcher=null,httpResponse=<null>,httpForward=<null>,httpCallback=<null>]");
+        thrown.expectMessage("Exception while serializing expectation to JSON with value { }");
         // and
         when(objectMapper.writerWithDefaultPrettyPrinter()).thenReturn(objectWriter);
         when(objectWriter.writeValueAsString(any(ExpectationDTO.class))).thenThrow(new RuntimeException("TEST EXCEPTION"));
@@ -129,7 +129,7 @@ public void shouldHandleExceptionWhileSerializingObject() throws IOException {
     public void shouldHandleExceptionWhileSerializingArray() throws IOException {
         // given
         thrown.expect(RuntimeException.class);
-        thrown.expectMessage("Exception while serializing expectation to JSON with value [Expectation[httpRequest=<null>,times=<null>,httpRequestMatcher=null,httpResponse=<null>,httpForward=<null>,httpCallback=<null>]]");
+        thrown.expectMessage("Exception while serializing expectation to JSON with value [{ }]");
         // and
         when(objectMapper.writerWithDefaultPrettyPrinter()).thenReturn(objectWriter);
         when(objectWriter.writeValueAsString(any(ExpectationDTO[].class))).thenThrow(new RuntimeException("TEST EXCEPTION"));

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -85,7 +85,7 @@ public void run() {
             // wait for proxy to start all channels
             hasStarted.get();
         } catch (Exception e) {
-            logger.debug("Exception while waiting for MockServer to complete starting up", e);
+            logger.warn("Exception while waiting for MockServer to complete starting up", e);
         }
     }
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/direct/DirectProxy.java
Patch:
@@ -93,7 +93,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
         try {
             hasStarted.get();
         } catch (Exception e) {
-            logger.debug("Exception while waiting for proxy to complete starting up", e);
+            logger.warn("Exception while waiting for proxy to complete starting up", e);
         }
     }
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxy.java
Patch:
@@ -90,7 +90,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
         try {
             hasStarted.get();
         } catch (Exception e) {
-            logger.debug("Exception while waiting for proxy to complete starting up", e);
+            logger.warn("Exception while waiting for proxy to complete starting up", e);
         }
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/deserializers/body/BodyDTODeserializer.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockserver.client.serialization.Base64Converter;
 import org.mockserver.client.serialization.ObjectMapperFactory;
 import org.mockserver.client.serialization.model.*;
-import org.mockserver.matchers.JsonBodyMatchType;
+import org.mockserver.matchers.MatchType;
 import org.mockserver.model.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,7 +47,7 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
         String valueJsonValue = "";
         Body.Type type = null;
         boolean not = false;
-        JsonBodyMatchType matchType = JsonBody.DEFAULT_MATCH_TYPE;
+        MatchType matchType = JsonBody.DEFAULT_MATCH_TYPE;
         List<Parameter> parameters = new ArrayList<Parameter>();
         if (currentToken == JsonToken.START_OBJECT) {
             while (jsonParser.getCurrentToken() != JsonToken.END_OBJECT) {
@@ -77,7 +77,7 @@ public BodyDTO deserialize(JsonParser jsonParser, DeserializationContext ctxt) t
                 if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME && jsonParser.getText().equalsIgnoreCase("matchType")) {
                     jsonParser.nextToken();
                     try {
-                        matchType = JsonBodyMatchType.valueOf(jsonParser.getText());
+                        matchType = MatchType.valueOf(jsonParser.getText());
                     } catch (IllegalArgumentException iae) {
                         logger.warn("Ignoring incorrect JsonBodyMatchType with value \"" + jsonParser.getText() + "\"");
                     }

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/JsonBodyDTO.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.client.serialization.model;
 
-import org.mockserver.matchers.JsonBodyMatchType;
+import org.mockserver.matchers.MatchType;
 import org.mockserver.model.Body;
 import org.mockserver.model.JsonBody;
 
@@ -10,7 +10,7 @@
 public class JsonBodyDTO extends BodyDTO {
 
     private String json;
-    private JsonBodyMatchType matchType;
+    private MatchType matchType;
 
     public JsonBodyDTO(JsonBody jsonBody) {
         this(jsonBody, false);
@@ -29,7 +29,7 @@ public String getJson() {
         return json;
     }
 
-    public JsonBodyMatchType getMatchType() {
+    public MatchType getMatchType() {
         return matchType;
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/serializers/body/JsonBodySerializer.java
Patch:
@@ -3,7 +3,6 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.ser.std.StdSerializer;
-import org.mockserver.matchers.JsonBodyMatchType;
 import org.mockserver.model.JsonBody;
 
 import java.io.IOException;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/JsonBodyDTOTest.java
Patch:
@@ -6,8 +6,8 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
-import static org.mockserver.matchers.JsonBodyMatchType.ONLY_MATCHING_FIELDS;
-import static org.mockserver.matchers.JsonBodyMatchType.STRICT;
+import static org.mockserver.matchers.MatchType.ONLY_MATCHING_FIELDS;
+import static org.mockserver.matchers.MatchType.STRICT;
 import static org.mockserver.model.JsonBody.json;
 
 

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractClientServerIntegrationTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockserver.client.netty.NettyHttpClient;
 import org.mockserver.client.netty.SocketConnectionException;
 import org.mockserver.client.server.MockServerClient;
-import org.mockserver.matchers.JsonBodyMatchType;
+import org.mockserver.matchers.MatchType;
 import org.mockserver.model.*;
 import org.mockserver.verify.VerificationTimes;
 import org.slf4j.Logger;
@@ -966,7 +966,7 @@ public void shouldReturnResponseByMatchingBodyWithJsonWithMatchType() {
                                         "    \"name\": \"A green door\"," + System.getProperty("line.separator") +
                                         "    \"price\": 12.50," + System.getProperty("line.separator") +
                                         "    \"tags\": [\"home\", \"green\"]" + System.getProperty("line.separator") +
-                                        "}", JsonBodyMatchType.ONLY_MATCHING_FIELDS)),
+                                        "}", MatchType.ONLY_MATCHING_FIELDS)),
                         exactly(2)
                 )
                 .respond(
@@ -2578,7 +2578,7 @@ public void shouldNotReturnResponseForNonMatchingJsonBodyWithMatchType() {
                                         "    \"name\": \"A green door\"," + System.getProperty("line.separator") +
                                         "    \"price\": 12.50," + System.getProperty("line.separator") +
                                         "    \"tags\": [\"home\", \"green\"]" + System.getProperty("line.separator") +
-                                        "}", JsonBodyMatchType.STRICT)),
+                                        "}", MatchType.STRICT)),
                         exactly(2))
                 .respond(
                         response()

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/HttpRequestDTO.java
Patch:
@@ -31,17 +31,17 @@ public HttpRequestDTO(HttpRequest httpRequest, boolean not) {
             path = httpRequest.getPath();
             headers = Lists.transform(httpRequest.getHeaders(), new Function<Header, HeaderDTO>() {
                 public HeaderDTO apply(Header header) {
-                    return new HeaderDTO(header);
+                    return new HeaderDTO(header, header.isNot());
                 }
             });
             cookies = Lists.transform(httpRequest.getCookies(), new Function<Cookie, CookieDTO>() {
                 public CookieDTO apply(Cookie cookie) {
-                    return new CookieDTO(cookie);
+                    return new CookieDTO(cookie, cookie.isNot());
                 }
             });
             queryStringParameters = Lists.transform(httpRequest.getQueryStringParameters(), new Function<Parameter, ParameterDTO>() {
                 public ParameterDTO apply(Parameter parameter) {
-                    return new ParameterDTO(parameter);
+                    return new ParameterDTO(parameter, parameter.isNot());
                 }
             });
             body = BodyDTO.createDTO(httpRequest.getBody());

File: mockserver-core/src/main/java/org/mockserver/model/ObjectWithReflectiveEqualsHashCodeToString.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
 import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
@@ -11,6 +12,8 @@
  * @author jamesdbloom
  */
 public abstract class ObjectWithReflectiveEqualsHashCodeToString {
+
+    @JsonIgnore
     protected Logger logger = LoggerFactory.getLogger(this.getClass());
 
     static {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/ParameterDTO.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.client.serialization.model;
 
+import org.mockserver.model.Not;
 import org.mockserver.model.Parameter;
 
 /**
@@ -19,6 +20,6 @@ protected ParameterDTO() {
     }
 
     public Parameter buildObject() {
-        return new Parameter(getName(), getValues());
+        return Not.not(new Parameter(getName(), getValues()), isNot());
     }
 }

File: mockserver-core/src/main/java/org/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -81,6 +81,9 @@ private HttpRequestMatcher withBody(Body body) {
                     this.bodyMatcher = new BinaryMatcher(binaryBody.getValue());
                     break;
             }
+            if (body.isNot()) {
+                this.bodyMatcher = not(this.bodyMatcher);
+            }
         }
         return this;
     }

File: mockserver-core/src/main/java/org/mockserver/model/NottableString.java
Patch:
@@ -42,7 +42,7 @@ public boolean equals(Object other) {
             return not != (value.equals(other));
         } else if (other instanceof NottableString) {
             NottableString otherNottableString = (NottableString) other;
-            return otherNottableString.isNot() != (isNot() != (value.equals(otherNottableString.getValue())));
+            return otherNottableString.isNot() == (isNot() == (value.equals(otherNottableString.getValue())));
         }
         return false;
     }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/deserializers/body/BodyDTODeserializerTest.java
Patch:
@@ -283,7 +283,7 @@ public void shouldParseJSONWithParametersBodyWithNotParameter() throws IOExcepti
                 .setHttpRequest(
                         new HttpRequestDTO()
                                 .setBody(new ParameterBodyDTO(new ParameterBody(
-                                        new Parameter("parameterOneName", "parameterOneValueOne", "parameterOneValueTwo"),
+                                        Not.not(new Parameter("parameterOneName", "parameterOneValueOne", "parameterOneValueTwo")),
                                         new Parameter("parameterTwoName", "parameterTwoValue")
                                 )))
                 ), expectationDTO);

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/BinaryBodyDTO.java
Patch:
@@ -13,7 +13,9 @@ public class BinaryBodyDTO extends BodyDTO {
 
     public BinaryBodyDTO(BinaryBody binaryBody) {
         super(binaryBody.getType());
-        value = DatatypeConverter.printBase64Binary(binaryBody.getValue());
+        if (binaryBody.getValue() != null && binaryBody.getValue().length > 0) {
+            value = DatatypeConverter.printBase64Binary(binaryBody.getValue());
+        }
     }
 
     protected BinaryBodyDTO() {

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerTest.java
Patch:
@@ -34,7 +34,7 @@ public class HttpRequestSerializerTest {
                             new Parameter("queryStringParameterNameOne", "queryStringParameterValueOne_One", "queryStringParameterValueOne_Two"),
                             new Parameter("queryStringParameterNameTwo", "queryStringParameterValueTwo_One")
                     )
-                    .withBody(new StringBody("somebody", Body.Type.STRING))
+                    .withBody(new StringBody("somebody"))
                     .withHeaders(new Header("headerName", "headerValue"))
                     .withCookies(new Cookie("cookieName", "cookieValue"));
     private final HttpRequestDTO fullHttpRequestDTO =
@@ -45,7 +45,7 @@ public class HttpRequestSerializerTest {
                             new ParameterDTO(new Parameter("queryStringParameterNameOne", "queryStringParameterValueOne_One", "queryStringParameterValueOne_Two")),
                             new ParameterDTO(new Parameter("queryStringParameterNameTwo", "queryStringParameterValueTwo_One"))
                     ))
-                    .setBody(BodyDTO.createDTO(new StringBody("somebody", Body.Type.STRING)))
+                    .setBody(BodyDTO.createDTO(new StringBody("somebody")))
                     .setHeaders(Arrays.<HeaderDTO>asList(new HeaderDTO(new Header("headerName", Arrays.asList("headerValue")))))
                     .setCookies(Arrays.<CookieDTO>asList(new CookieDTO(new Cookie("cookieName", "cookieValue"))));
     @Mock

File: mockserver-core/src/test/java/org/mockserver/client/serialization/VerificationSequenceSerializerTest.java
Patch:
@@ -31,13 +31,13 @@ public class VerificationSequenceSerializerTest {
             request()
                     .withMethod("GET")
                     .withPath("some_path_one")
-                    .withBody(new StringBody("some_body_one", Body.Type.STRING))
+                    .withBody(new StringBody("some_body_one"))
                     .withHeaders(new Header("header_name_two", "header_value_two"));
     private final HttpRequest requestTwo =
             request()
                     .withMethod("GET")
                     .withPath("some_path_two")
-                    .withBody(new StringBody("some_body_two", Body.Type.STRING))
+                    .withBody(new StringBody("some_body_two"))
                     .withHeaders(new Header("header_name_one", "header_value_one"));
     private final VerificationSequence fullVerificationSequence = new VerificationSequence().withRequests(requestOne);
     private final VerificationSequenceDTO fullVerificationSequenceDTO = new VerificationSequenceDTO(fullVerificationSequence);

File: mockserver-core/src/test/java/org/mockserver/client/serialization/VerificationSerializerTest.java
Patch:
@@ -29,7 +29,7 @@ public class VerificationSerializerTest {
 
     private final HttpRequest request = request().withMethod("GET")
             .withPath("somepath")
-            .withBody(new StringBody("somebody", Body.Type.STRING))
+            .withBody(new StringBody("somebody"))
             .withHeaders(new Header("headerName", "headerValue"))
             .withCookies(new Cookie("cookieName", "cookieValue"));
     private final VerificationTimes times = VerificationTimes.atLeast(2);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxy.java
Patch:
@@ -150,8 +150,8 @@ protected void proxyStarted(Integer port) {
 //        System.setProperty("socksProxyVersion", "5");
         System.setProperty("http.proxyHost", "127.0.0.1");
         System.setProperty("http.proxyPort", port.toString());
-        System.setProperty("https.proxyHost", "127.0.0.1");
-        System.setProperty("https.proxyPort", port.toString());
+//        System.setProperty("https.proxyHost", "127.0.0.1");
+//        System.setProperty("https.proxyPort", port.toString());
 //        previousProxySelector = ProxySelector.getDefault();
 //        ProxySelector.setDefault(createProxySelector("127.0.0.1", port));
 //        System.setProperty("socksProxySet", "true");

File: mockserver-netty/src/main/java/org/mockserver/proxy/socks/SocksProxyHandler.java
Patch:
@@ -20,13 +20,13 @@ protected void channelRead0(final ChannelHandlerContext ctx, SocksRequest socksR
 
             case INIT:
 
-                ctx.pipeline().addFirst(SocksCmdRequestDecoder.getName(), new SocksCmdRequestDecoder());
+                ctx.pipeline().addFirst(new SocksCmdRequestDecoder());
                 ctx.write(new SocksInitResponse(SocksAuthScheme.NO_AUTH));
                 break;
 
             case AUTH:
 
-                ctx.pipeline().addFirst(SocksCmdRequestDecoder.getName(), new SocksCmdRequestDecoder());
+                ctx.pipeline().addFirst(new SocksCmdRequestDecoder());
                 ctx.write(new SocksAuthResponse(SocksAuthStatus.SUCCESS));
                 break;
 

File: mockserver-netty/src/test/java/org/mockserver/proxy/socks/NettySocksProxyIntegrationTest.java
Patch:
@@ -24,7 +24,6 @@
 /**
  * @author jamesdbloom
  */
-@Ignore
 public class NettySocksProxyIntegrationTest extends AbstractClientProxyIntegrationTest {
 
     private final static Logger logger = LoggerFactory.getLogger(NettySocksProxyIntegrationTest.class);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxy.java
Patch:
@@ -143,9 +143,9 @@ public Integer getPort() {
     protected void proxyStarted(Integer port) {
         SystemProperties.proxyHttpPort(port);
         System.setProperty("proxySet", "true");
-        System.setProperty("socksProxyHost", "127.0.0.1");
-        System.setProperty("socksProxyPort", port.toString());
-        System.setProperty("socksProxyVersion", "5");
+//        System.setProperty("socksProxyHost", "127.0.0.1");
+//        System.setProperty("socksProxyPort", port.toString());
+//        System.setProperty("socksProxyVersion", "5");
         System.setProperty("http.proxyHost", "127.0.0.1");
         System.setProperty("http.proxyPort", port.toString());
         System.setProperty("https.proxyHost", "127.0.0.1");

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxy.java
Patch:
@@ -8,6 +8,7 @@
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
+import org.mockserver.configuration.SystemProperties;
 import org.mockserver.filters.LogFilter;
 import org.mockserver.proxy.Proxy;
 import org.slf4j.Logger;
@@ -140,6 +141,7 @@ public Integer getPort() {
     }
 
     protected void proxyStarted(Integer port) {
+        SystemProperties.proxyHttpPort(port);
         System.setProperty("proxySet", "true");
         System.setProperty("socksProxyHost", "127.0.0.1");
         System.setProperty("socksProxyPort", port.toString());

File: mockserver-netty/src/main/java/org/mockserver/proxy/socks/SocksProxyHandler.java
Patch:
@@ -3,7 +3,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.socks.*;
-import org.mockserver.proxy.socks.SocksConnectHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunAndWaitMojo.java
Patch:
@@ -28,7 +28,6 @@ public void execute() throws MojoExecutionException {
                         + (serverPort != -1 ? " serverPort " + serverPort : "")
                         + (serverSecurePort != -1 ? " serverSecurePort " + serverSecurePort : "")
                         + (proxyPort != -1 ? " proxyPort " + proxyPort : "")
-                        + (proxySecurePort != -1 ? " proxySecurePort " + proxySecurePort : "")
                 );
             }
             try {

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStartMojo.java
Patch:
@@ -29,7 +29,6 @@ public void execute() throws MojoExecutionException {
                         + (serverPort != -1 ? " serverPort " + serverPort : "")
                         + (serverSecurePort != -1 ? " serverSecurePort " + serverSecurePort : "")
                         + (proxyPort != -1 ? " proxyPort " + proxyPort : "")
-                        + (proxySecurePort != -1 ? " proxySecurePort " + proxySecurePort : "")
                 );
             }
             getEmbeddedJettyHolder().start(serverPort, serverSecurePort, proxyPort, createInitializer());

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -25,9 +25,6 @@ public void execute() throws MojoExecutionException {
             if (proxyPort != -1) {
                 getLog().info("Stopped the proxy running on port [" + proxyPort + "]");
             }
-            if (proxySecurePort != -1) {
-                getLog().info("Stopped the secure proxy running on port [" + proxySecurePort + "]");
-            }
         }
     }
 }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStartMojoTest.java
Patch:
@@ -36,7 +36,6 @@ public void shouldStartMockServer() throws MojoExecutionException {
         mockServerStartMojo.serverPort = 1;
         mockServerStartMojo.serverSecurePort = 2;
         mockServerStartMojo.proxyPort = 3;
-        mockServerStartMojo.proxySecurePort = 4;
         mockServerStartMojo.initializationClass = "org.mockserver.maven.ExampleInitializationClass";
 
         // when

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopForkedMojoTest.java
Patch:
@@ -30,7 +30,6 @@ public void shouldStopMockServerAndProxySuccessfully() throws MojoExecutionExcep
         // given
         mockServerStopForkedMojo.serverPort = 1;
         mockServerStopForkedMojo.proxyPort = 2;
-        mockServerStopForkedMojo.proxySecurePort = 3;
 
         // when
         mockServerStopForkedMojo.execute();

File: mockserver-core/src/main/java/org/mockserver/echo/EchoServer.java
Patch:
@@ -42,7 +42,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
                                     hasStarted.set("STARTED");
                                 } else {
                                     hasStarted.setException(future.cause());
-                                    eventLoopGroup.shutdownGracefully();
+                                    eventLoopGroup.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS);
                                 }
                             }
                         });
@@ -59,6 +59,6 @@ public void operationComplete(ChannelFuture future) throws Exception {
     }
 
     public void stop() {
-        eventLoopGroup.shutdownGracefully(0, 2, TimeUnit.MILLISECONDS);
+        eventLoopGroup.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS);
     }
 }

File: mockserver-core/src/main/java/org/mockserver/mock/action/ActionHandler.java
Patch:
@@ -17,9 +17,9 @@ public class ActionHandler {
     private HttpResponseActionHandler httpResponseActionHandler = new HttpResponseActionHandler();
     private Filters filters = new Filters();
 
-    public ActionHandler() {
+    public ActionHandler(LogFilter logFilter) {
         filters.withFilter(new org.mockserver.model.HttpRequest(), new HopByHopHeaderFilter());
-        filters.withFilter(new org.mockserver.model.HttpRequest(), LogFilter.SERVER_INSTANCE);
+        filters.withFilter(new org.mockserver.model.HttpRequest(), logFilter);
     }
 
     public synchronized HttpResponse processAction(Action action, HttpRequest httpRequest) {

File: mockserver-examples/src/test/java/org/mockserver/web/controller/BooksPageIntegrationTest.java
Patch:
@@ -69,7 +69,6 @@ public void stopMockServer() {
         // for debugging test
         proxy.dumpToLogAsJSON();
         proxy.dumpToLogAsJava();
-
     }
 
     @Test

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunAndWaitMojo.java
Patch:
@@ -28,7 +28,6 @@ public void execute() throws MojoExecutionException {
                         + (serverPort != -1 ? " serverPort " + serverPort : "")
                         + (serverSecurePort != -1 ? " serverSecurePort " + serverSecurePort : "")
                         + (proxyPort != -1 ? " proxyPort " + proxyPort : "")
-                        + (proxySecurePort != -1 ? " proxySecurePort " + proxySecurePort : "")
                 );
             }
             try {

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStartMojo.java
Patch:
@@ -29,7 +29,6 @@ public void execute() throws MojoExecutionException {
                         + (serverPort != -1 ? " serverPort " + serverPort : "")
                         + (serverSecurePort != -1 ? " serverSecurePort " + serverSecurePort : "")
                         + (proxyPort != -1 ? " proxyPort " + proxyPort : "")
-                        + (proxySecurePort != -1 ? " proxySecurePort " + proxySecurePort : "")
                 );
             }
             getEmbeddedJettyHolder().start(serverPort, serverSecurePort, proxyPort, createInitializer());

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -25,9 +25,6 @@ public void execute() throws MojoExecutionException {
             if (proxyPort != -1) {
                 getLog().info("Stopped the proxy running on port [" + proxyPort + "]");
             }
-            if (proxySecurePort != -1) {
-                getLog().info("Stopped the secure proxy running on port [" + proxySecurePort + "]");
-            }
         }
     }
 }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStartMojoTest.java
Patch:
@@ -36,7 +36,6 @@ public void shouldStartMockServer() throws MojoExecutionException {
         mockServerStartMojo.serverPort = 1;
         mockServerStartMojo.serverSecurePort = 2;
         mockServerStartMojo.proxyPort = 3;
-        mockServerStartMojo.proxySecurePort = 4;
         mockServerStartMojo.initializationClass = "org.mockserver.maven.ExampleInitializationClass";
 
         // when

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopForkedMojoTest.java
Patch:
@@ -30,7 +30,6 @@ public void shouldStopMockServerAndProxySuccessfully() throws MojoExecutionExcep
         // given
         mockServerStopForkedMojo.serverPort = 1;
         mockServerStopForkedMojo.proxyPort = 2;
-        mockServerStopForkedMojo.proxySecurePort = 3;
 
         // when
         mockServerStopForkedMojo.execute();

File: mockserver-netty/src/main/java/org/mockserver/proxy/Proxy.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.proxy;
 
 import io.netty.util.AttributeKey;
+import org.mockserver.filters.LogFilter;
 
 import java.net.InetSocketAddress;
 
@@ -14,6 +15,7 @@
 public interface Proxy {
 
     public static final AttributeKey<Proxy> HTTP_PROXY = AttributeKey.valueOf("HTTP_PROXY");
+    public static final AttributeKey<LogFilter> LOG_FILTER = AttributeKey.valueOf("PROXY_LOG_FILTER");
     public static final AttributeKey<InetSocketAddress> REMOTE_SOCKET = AttributeKey.valueOf("REMOTE_SOCKET");
 
     public void stop();

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyUnificationHandler.java
Patch:
@@ -16,7 +16,7 @@ public class HttpProxyUnificationHandler extends PortUnificationHandler {
     @Override
     protected void configurePipeline(ChannelHandlerContext ctx, ChannelPipeline pipeline) {
         pipeline.addLast(new MockServerServerCodec(isSslEnabled(ctx)));
-        pipeline.addLast(new HttpProxyHandler(ctx.channel().attr(Proxy.HTTP_PROXY).get()));
+        pipeline.addLast(new HttpProxyHandler(ctx.channel().attr(Proxy.HTTP_PROXY).get(), ctx.channel().attr(Proxy.LOG_FILTER).get()));
     }
 
 }

File: mockserver-netty/src/test/java/org/mockserver/server/StopClientServerNettyIntegrationTest.java
Patch:
@@ -30,7 +30,7 @@ public void canStartAndStopMultipleTimes() {
 
             // then
             assertFalse(mockServer.isRunning());
-            mockServer = new MockServer(serverPort, serverSecurePort);
+            mockServer = new MockServer(serverPort, null);
             assertTrue(mockServer.isRunning());
         }
 
@@ -40,7 +40,7 @@ public void canStartAndStopMultipleTimes() {
     }
 
     @Test
-    public void canStartAndStopMultipleTimesWithNewProcess() {
+    public void canStartAndStopMultipleTimesWithSSL() {
         // start server
         MockServer mockServer = new MockServer(serverPort, serverSecurePort);
 

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyServletTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockserver.proxy;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;

File: mockserver-core/src/test/java/org/mockserver/client/netty/codec/MockServerRequestEncoderTest.java
Patch:
@@ -90,7 +90,7 @@ public void shouldEscapeQueryParameters() {
         String uri = ((FullHttpRequest) output.get(0)).getUri();
         assertThat(uri, is("/uri?" +
                 "parameter%20name%20with%20spaces=a%20value%20with%20double%20%22quotes%22%20and%20spaces&" +
-                "another%20parameter=a%20value%20with%20single%20'quotes'%20and%20spaces"));
+                "another%20parameter=a%20value%20with%20single%20%27quotes%27%20and%20spaces"));
     }
 
     @Test

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-main-classpath/src/test/java/org/mockserver/InitializerMavenPluginTest.java
Patch:
@@ -79,7 +79,7 @@ public void clientCanCallServer() {
 
     protected HttpResponse makeRequest(HttpRequest httpRequest, Collection<String> headersToIgnore) {
         int port = (httpRequest.isSecure() ? SERVER_HTTPS_PORT : SERVER_HTTP_PORT);
-        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, httpRequest));
+        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, "", httpRequest));
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!headersToIgnore.contains(header.getName().toLowerCase())) {

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-test-classpath/src/test/java/org/mockserver/InitializerMavenPluginTest.java
Patch:
@@ -76,7 +76,7 @@ public void clientCanCallServer() {
 
     protected HttpResponse makeRequest(HttpRequest httpRequest, Collection<String> headersToIgnore) {
         int port = (httpRequest.isSecure() ? SERVER_HTTPS_PORT : SERVER_HTTP_PORT);
-        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, httpRequest));
+        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, "", httpRequest));
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!headersToIgnore.contains(header.getName().toLowerCase())) {

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletToMockServerRequestMapper.java
Patch:
@@ -33,7 +33,7 @@ private void setMethod(HttpRequest httpRequest, HttpServletRequest httpServletRe
     }
 
     private void setPath(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {
-        httpRequest.withPath(httpServletRequest.getRequestURI());
+        httpRequest.withPath(httpServletRequest.getPathInfo() != null && httpServletRequest.getContextPath() != null ? httpServletRequest.getPathInfo() : httpServletRequest.getRequestURI());
     }
 
     private void setQueryString(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {

File: mockserver-core/src/main/java/org/mockserver/mock/action/HttpForwardActionHandler.java
Patch:
@@ -23,7 +23,7 @@ public HttpResponse handle(HttpForward httpForward, HttpRequest httpRequest) {
         } else {
             httpRequest.setSecure(false);
         }
-        return sendRequest(outboundRequest(httpForward.getHost(), httpForward.getPort(), httpRequest));
+        return sendRequest(outboundRequest(httpForward.getHost(), httpForward.getPort(), "", httpRequest));
     }
 
     private HttpResponse sendRequest(OutboundHttpRequest httpRequest) {

File: mockserver-core/src/test/java/org/mockserver/mappers/HttpServletToMockServerRequestMapperTest.java
Patch:
@@ -55,14 +55,14 @@ public void shouldMapPathForRequestsWithAContextPath() {
         // given
         MockHttpServletRequest httpServletRequest = new MockHttpServletRequest("GET", "/requestURI");
         httpServletRequest.setContextPath("contextPath");
-        httpServletRequest.setPathInfo("pathInfo");
+        httpServletRequest.setPathInfo("/pathInfo");
         httpServletRequest.setContent("".getBytes());
 
         // when
         HttpRequest httpRequest = new HttpServletToMockServerRequestMapper().mapHttpServletRequestToMockServerRequest(httpServletRequest);
 
         // then
-        assertEquals("/requestURI", httpRequest.getPath());
+        assertEquals("/pathInfo", httpRequest.getPath());
     }
 
     @Test(expected = RuntimeException.class)

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -61,8 +61,8 @@ protected HttpClient createHttpClient() throws Exception {
 
     public abstract int getServerSecurePort();
 
-    protected String calculatePath(String some_path_one) {
-        return "/" + servletContext + (servletContext.length() > 0 && !servletContext.endsWith("/") ? "/" : "") + some_path_one;
+    protected String calculatePath(String path) {
+        return "/" + path;
     }
 
     @Test

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/server/AbstractClientServerIntegrationTest.java
Patch:
@@ -73,8 +73,8 @@ public AbstractClientServerIntegrationTest() {
 
     public abstract int getTestServerSecurePort();
 
-    protected String calculatePath(String some_path_one) {
-        return "/" + servletContext + (servletContext.length() > 0 && !servletContext.endsWith("/") ? "/" : "") + some_path_one;
+    protected String calculatePath(String path) {
+        return "/" + path;
     }
 
     @Before
@@ -2843,7 +2843,7 @@ public void clientCanResetServerExpectations() {
 
     protected HttpResponse makeRequest(HttpRequest httpRequest, Collection<String> headersToIgnore) {
         int port = (httpRequest.isSecure() ? getMockServerSecurePort() : getMockServerPort());
-        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, httpRequest));
+        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, servletContext, httpRequest));
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!headersToIgnore.contains(header.getName().toLowerCase())) {

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-main-classpath/src/test/java/org/mockserver/InitializerMavenPluginTest.java
Patch:
@@ -79,7 +79,7 @@ public void clientCanCallServer() {
 
     protected HttpResponse makeRequest(HttpRequest httpRequest, Collection<String> headersToIgnore) {
         int port = (httpRequest.isSecure() ? SERVER_HTTPS_PORT : SERVER_HTTP_PORT);
-        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, httpRequest));
+        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, "", httpRequest));
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!headersToIgnore.contains(header.getName().toLowerCase())) {

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-test-classpath/src/test/java/org/mockserver/InitializerMavenPluginTest.java
Patch:
@@ -76,7 +76,7 @@ public void clientCanCallServer() {
 
     protected HttpResponse makeRequest(HttpRequest httpRequest, Collection<String> headersToIgnore) {
         int port = (httpRequest.isSecure() ? SERVER_HTTPS_PORT : SERVER_HTTP_PORT);
-        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, httpRequest));
+        HttpResponse httpResponse = httpClient.sendRequest(outboundRequest("localhost", port, "", httpRequest));
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!headersToIgnore.contains(header.getName().toLowerCase())) {

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -141,7 +141,7 @@ private HttpResponse sendRequest(HttpRequest httpRequest) {
                 if (hostHeaderParts.length > 1) {
                     port = Integer.parseInt(hostHeaderParts[1]);  // non-default
                 }
-                HttpResponse httpResponse = filters.applyOnResponseFilters(httpRequest, httpClient.sendRequest(outboundRequest(hostHeaderParts[0], port, httpRequest)));
+                HttpResponse httpResponse = filters.applyOnResponseFilters(httpRequest, httpClient.sendRequest(outboundRequest(hostHeaderParts[0], port, "", httpRequest)));
                 if (httpResponse != null) {
                     return httpResponse;
                 }

File: mockserver-proxy-war/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -184,7 +184,7 @@ private HttpResponse sendRequest(HttpRequest httpRequest) {
                 if (hostHeaderParts.length > 1) {
                     port = Integer.parseInt(hostHeaderParts[1]);  // non-default
                 }
-                HttpResponse httpResponse = filters.applyOnResponseFilters(httpRequest, httpClient.sendRequest(outboundRequest(hostHeaderParts[0], port, httpRequest)));
+                HttpResponse httpResponse = filters.applyOnResponseFilters(httpRequest, httpClient.sendRequest(outboundRequest(hostHeaderParts[0], port, "", httpRequest)));
                 if (httpResponse != null) {
                     return httpResponse;
                 }

File: mockserver-proxy-war/src/test/java/org/mockserver/proxy/ProxyServletTest.java
Patch:
@@ -73,7 +73,7 @@ public void setupMocks() {
         // additional mock objects
         mockHttpServletRequest = new MockHttpServletRequest();
         mockHttpServletResponse = new MockHttpServletResponse();
-        outboundHttpRequest = outboundRequest("localhost", 80, request().withHeader(header("Host", "localhost")).withPath("some_path"));
+        outboundHttpRequest = outboundRequest("localhost", 80, "", request().withHeader(header("Host", "localhost")).withPath("some_path"));
         httpResponse = new HttpResponse();
 
         // mappers

File: mockserver-core/src/main/java/org/mockserver/model/HttpRequest.java
Patch:
@@ -26,6 +26,9 @@ public HttpRequest() {
     public static HttpRequest request() {
         return new HttpRequest();
     }
+    public static HttpRequest request(String path) {
+        return new HttpRequest().withPath(path);
+    }
 
     /**
      * The HTTP method to match on such as "GET" or "POST"

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -22,6 +22,9 @@ public HttpResponse() {
     public static HttpResponse response() {
         return new HttpResponse();
     }
+    public static HttpResponse response(String body) {
+        return new HttpResponse().withBody(body);
+    }
     public static HttpResponse notFoundResponse() {
         return new HttpResponse().withStatusCode(404);
     }

File: mockserver-core/src/main/java/org/mockserver/collections/CircularLinkedList.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * @author jamesdbloom
  */
-class CircularLinkedList<V> extends LinkedList<V> {
+public class CircularLinkedList<V> extends LinkedList<V> {
     static final long serialVersionUID = -8190199206751953870L;
     private final int maxSize;
 

File: mockserver-core/src/main/java/org/mockserver/filters/HopByHopHeaderFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.proxy.filters;
+package org.mockserver.filters;
 
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
@@ -11,7 +11,7 @@
 /**
  * @author jamesdbloom
  */
-public class HopByHopHeaderFilter implements ProxyRequestFilter {
+public class HopByHopHeaderFilter implements RequestFilter {
 
     public HttpRequest onRequest(HttpRequest httpRequest) {
         if (httpRequest != null) {

File: mockserver-core/src/main/java/org/mockserver/filters/RequestFilter.java
Patch:
@@ -1,11 +1,11 @@
-package org.mockserver.proxy.filters;
+package org.mockserver.filters;
 
 import org.mockserver.model.HttpRequest;
 
 /**
  * @author jamesdbloom
  */
-public interface ProxyRequestFilter {
+public interface RequestFilter extends Filter {
 
     public HttpRequest onRequest(HttpRequest httpRequest);
 

File: mockserver-core/src/main/java/org/mockserver/filters/ResponseFilter.java
Patch:
@@ -1,12 +1,12 @@
-package org.mockserver.proxy.filters;
+package org.mockserver.filters;
 
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 
 /**
  * @author jamesdbloom
  */
-public interface ProxyResponseFilter {
+public interface ResponseFilter extends Filter {
 
     public HttpResponse onResponse(HttpRequest httpRequest, HttpResponse httpResponse);
 

File: mockserver-core/src/main/java/org/mockserver/verify/Verification.java
Patch:
@@ -11,7 +11,7 @@
  */
 public class Verification extends EqualsHashCodeToString {
     private HttpRequest httpRequest = request();
-    private VerificationTimes times = VerificationTimes.once();
+    private VerificationTimes times = VerificationTimes.atLeast(1);
 
     public Verification withRequest(HttpRequest httpRequest) {
         this.httpRequest = httpRequest;

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/VerificationDTOTest.java
Patch:
@@ -81,7 +81,7 @@ public void shouldHandleNullFieldInput() {
 
         // then
         assertThat(verificationDTO.getHttpRequest(), is(new HttpRequestDTO(request())));
-        assertThat(verificationDTO.getTimes(), is(new VerificationTimesDTO(VerificationTimes.once())));
+        assertThat(verificationDTO.getTimes(), is(new VerificationTimesDTO(VerificationTimes.atLeast(1))));
     }
 
 }
\ No newline at end of file

File: mockserver-core/src/test/java/org/mockserver/proxy/filters/HopByHopHeaderFilterTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.proxy.filters;
 
 import org.junit.Test;
+import org.mockserver.filters.HopByHopHeaderFilter;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
 

File: mockserver-core/src/test/java/org/mockserver/proxy/filters/LogFilterDumpToLogTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockserver.client.serialization.ExpectationSerializer;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.matchers.Times;
 import org.mockserver.mock.Expectation;
 import org.mockserver.model.HttpRequest;

File: mockserver-examples/src/test/java/org/mockserver/web/controller/BooksPageEndToEndIntegrationTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.mockserver.client.proxy.Times;
 import org.mockserver.integration.ClientAndProxy;
 import org.mockserver.model.Parameter;
 import org.mockserver.servicebackend.BookServer;
@@ -20,6 +19,7 @@
 
 import static org.mockserver.integration.ClientAndProxy.startClientAndProxy;
 import static org.mockserver.model.HttpRequest.request;
+import static org.mockserver.verify.VerificationTimes.exactly;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@@ -66,7 +66,7 @@ public void shouldLoadListOfBooks() throws Exception {
         proxy.verify(
                 request()
                         .withPath("/get_books"),
-                Times.exactly(1)
+                exactly(1)
         );
     }
 
@@ -87,7 +87,7 @@ public void shouldLoadSingleBook() throws Exception {
                         .withQueryStringParameter(
                                 new Parameter("id", "1")
                         ),
-                Times.exactly(1)
+                exactly(1)
         );
     }
 

File: mockserver-examples/src/test/java/org/mockserver/web/controller/BooksPageIntegrationTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockserver.web.controller;
 
 import org.junit.*;
-import org.mockserver.client.proxy.Times;
 import org.mockserver.integration.ClientAndProxy;
 import org.mockserver.integration.ClientAndServer;
 import org.mockserver.model.Book;
@@ -23,6 +22,7 @@
 import static org.mockserver.integration.ClientAndServer.startClientAndServer;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.model.HttpResponse.response;
+import static org.mockserver.verify.VerificationTimes.exactly;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@@ -127,7 +127,7 @@ public void shouldLoadListOfBooks() throws Exception {
         proxy.verify(
                 request()
                         .withPath("/get_books"),
-                Times.exactly(1)
+                exactly(1)
         );
     }
 
@@ -170,7 +170,7 @@ public void shouldLoadSingleBook() throws Exception {
                         .withQueryStringParameter(
                                 new Parameter("id", "1")
                         ),
-                Times.exactly(1)
+                exactly(1)
         );
     }
 

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -23,10 +23,10 @@
 import java.net.Socket;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockserver.client.proxy.Times.atLeast;
-import static org.mockserver.client.proxy.Times.exactly;
 import static org.mockserver.model.HttpRequest.request;
 import static org.mockserver.test.Assert.assertContains;
+import static org.mockserver.verify.VerificationTimes.atLeast;
+import static org.mockserver.verify.VerificationTimes.exactly;
 
 /**
  * @author jamesdbloom

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -9,7 +9,7 @@
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import org.mockserver.mock.MockServerMatcher;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerInitializer.java
Patch:
@@ -8,7 +8,7 @@
 import io.netty.handler.ssl.SslHandler;
 import org.mockserver.logging.LoggingHandler;
 import org.mockserver.mock.MockServerMatcher;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.socket.SSLFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxy.java
Patch:
@@ -12,7 +12,7 @@
 import io.netty.handler.codec.socks.SocksInitRequestDecoder;
 import io.netty.handler.codec.socks.SocksMessageEncoder;
 import io.netty.handler.ssl.SslHandler;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.proxy.http.direct.DirectProxyUpstreamHandler;
 import org.mockserver.proxy.interceptor.RequestInterceptor;
 import org.mockserver.socket.SSLFactory;

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/ProxyUnificationHandler.java
Patch:
@@ -10,7 +10,7 @@
 import io.netty.handler.codec.socks.SocksMessageEncoder;
 import io.netty.handler.codec.socks.SocksProtocolVersion;
 import io.netty.handler.ssl.SslHandler;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.socket.SSLFactory;
 
 import javax.net.ssl.SSLEngine;

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.mockserver.model.*;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.verify.Verification;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
 import org.mockserver.model.HttpStatusCode;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.streams.IOStreamUtils;
 
 import javax.servlet.http.HttpServlet;
@@ -32,7 +32,7 @@ public class MockServerServlet extends HttpServlet {
     // mappers
     private HttpServletToMockServerRequestMapper httpServletToMockServerRequestMapper = new HttpServletToMockServerRequestMapper();
     private MockServerToHttpServletResponseMapper mockServerToHttpServletResponseMapper = new MockServerToHttpServletResponseMapper();
-    // serializer
+    // serializers
     private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
     private HttpRequestSerializer httpRequestSerializer = new HttpRequestSerializer();
     private VerificationSerializer verificationSerializer = new VerificationSerializer();

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockserver.mock.MockServerMatcher;
 import org.mockserver.mock.action.ActionHandler;
 import org.mockserver.model.*;
-import org.mockserver.proxy.filters.LogFilter;
+import org.mockserver.filters.LogFilter;
 import org.mockserver.verify.Verification;
 import org.mockserver.verify.VerificationTimes;
 import org.springframework.mock.web.MockHttpServletRequest;

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/testserver/TestServer.java
Patch:
@@ -6,6 +6,7 @@
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.ssl.SslHandler;
 import org.mockserver.socket.SSLFactory;
@@ -45,6 +46,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
                                     pipeline.addLast("logger", new LoggingHandler("TEST_SERVER"));
                                     pipeline.addLast("codec", new HttpServerCodec());
+                                    pipeline.addLast("chunk-aggregator", new HttpObjectAggregator(10 * 1024 * 1024));
                                     pipeline.addLast("handler", new TestServerHandler());
                                 }
                             })
@@ -75,6 +77,7 @@ public void initChannel(SocketChannel ch) throws Exception {
                                     pipeline.addLast("ssl", new SslHandler(engine));
                                     pipeline.addLast("logger", new LoggingHandler("TEST_SERVER_SSL"));
                                     pipeline.addLast("codec", new HttpServerCodec());
+                                    pipeline.addLast("chunk-aggregator", new HttpObjectAggregator(10 * 1024 * 1024));
                                     pipeline.addLast("handler", new TestServerHandler());
                                 }
                             })

File: mockserver-netty/src/main/java/org/mockserver/junit/MockServerRule.java
Patch:
@@ -153,7 +153,6 @@ public ClientAndServerFactory(Integer httpPort, Integer httpsPort) {
         }
 
         public ClientAndServer newClientAndServer() {
-            System.out.println("httpPort = " + httpPort);
             if (httpsPort == null) {
                 return ClientAndServer.startClientAndServer(httpPort);
             } else {

File: mockserver-netty/src/main/java/org/mockserver/junit/ProxyRule.java
Patch:
@@ -154,7 +154,6 @@ public ClientAndProxyFactory(Integer httpPort, Integer httpsPort) {
         }
 
         public ClientAndProxy newClientAndProxy() {
-            System.out.println("httpPort = " + httpPort);
             if (httpsPort == null) {
                 return ClientAndProxy.startClientAndProxy(httpPort);
             } else {

File: mockserver-netty/src/main/java/org/mockserver/mappers/NettyToMockServerRequestMapper.java
Patch:
@@ -51,7 +51,7 @@ private void setQueryString(HttpRequest httpRequest, NettyHttpRequest mockServer
     }
 
     private void setBody(HttpRequest httpRequest, NettyHttpRequest mockServerHttpRequest) {
-        if (mockServerHttpRequest.content() != null) {
+        if (mockServerHttpRequest.content() != null && mockServerHttpRequest.content().readableBytes() > 0) {
             byte[] bodyBytes = new byte[mockServerHttpRequest.content().readableBytes()];
             mockServerHttpRequest.content().readBytes(bodyBytes);
             httpRequest.setRawBodyBytes(bodyBytes);

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerInitializer.java
Patch:
@@ -3,6 +3,7 @@
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.socket.SocketChannel;
+import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.ssl.SslHandler;
 import org.mockserver.logging.LoggingHandler;
@@ -40,6 +41,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
         // add msg <-> HTTP
         pipeline.addLast("decoder-encoder", new HttpServerCodec());
+        pipeline.addLast("chunk-aggregator", new HttpObjectAggregator(10 * 1024 * 1024));
 
         // add handler
         pipeline.addLast("handler", mockServerHandler);

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -75,7 +75,7 @@ public void doPut(HttpServletRequest httpServletRequest, HttpServletResponse htt
             httpServletResponse.setStatus(HttpStatusCode.ACCEPTED_202.code());
         } else if (requestPath.equals("/expectation")) {
             Expectation expectation = expectationSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest));
-            mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward());
+            mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward()).thenCallback(expectation.getHttpCallback());
             httpServletResponse.setStatus(HttpStatusCode.CREATED_201.code());
         } else if (requestPath.equals("/retrieve")) {
             Expectation[] expectations = logFilter.retrieve(httpRequestSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest)));

File: mockserver-core/src/main/java/org/mockserver/collections/CaseInsensitiveRegexMultiMap.java
Patch:
@@ -32,7 +32,7 @@ public synchronized boolean containsKeyValue(String key, String value) {
         for (String matcherKey : backingMap.keySet()) {
             for (List<String> allMatcherKeyValues : backingMap.getAll(matcherKey)) {
                 for (String matcherKeyValue : allMatcherKeyValues) {
-                    if (RegexStringMatcher.matches(matcherKey, key, true) && RegexStringMatcher.matches(matcherKeyValue, value, false)) {
+                    if (RegexStringMatcher.matches(matcherKey, key, true) && RegexStringMatcher.matches(value, matcherKeyValue, false)) {
                         return true;
                     }
                 }

File: mockserver-core/src/main/java/org/mockserver/mappers/HttpServletToMockServerRequestMapper.java
Patch:
@@ -42,7 +42,7 @@ private void setUrl(HttpRequest httpRequest, HttpServletRequest httpServletReque
     }
 
     private void setPath(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {
-        httpRequest.withPath(httpServletRequest.getContextPath() == null ? httpServletRequest.getRequestURI() : httpServletRequest.getPathInfo());
+        httpRequest.withPath(httpServletRequest.getPathInfo() != null && httpServletRequest.getContextPath() != null ? httpServletRequest.getPathInfo() : httpServletRequest.getRequestURI());
     }
 
     private void setQueryString(HttpRequest httpRequest, HttpServletRequest httpServletRequest) {

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServer.java
Patch:
@@ -57,7 +57,7 @@ public void run() {
                         httpChannel = new ServerBootstrap()
                                 .group(bossGroup, workerGroup)
                                 .channel(NioServerSocketChannel.class)
-                                .childHandler(new MockServerInitializer(mockServerMatcher, logFilter, MockServer.this, false))
+                                .childHandler(new MockServerInitializer(new MockServerHandler(mockServerMatcher, logFilter, MockServer.this, false)))
                                 .option(ChannelOption.SO_BACKLOG, 1024)
                                 .bind(port)
                                 .sync()
@@ -68,7 +68,7 @@ public void run() {
                         httpsChannel = new ServerBootstrap()
                                 .group(bossGroup, workerGroup)
                                 .channel(NioServerSocketChannel.class)
-                                .childHandler(new MockServerInitializer(mockServerMatcher, logFilter, MockServer.this, true))
+                                .childHandler(new MockServerInitializer(new MockServerHandler(mockServerMatcher, logFilter, MockServer.this, true)))
                                 .option(ChannelOption.SO_BACKLOG, 1024)
                                 .bind(securePort)
                                 .sync()

File: mockserver-netty/src/test/java/org/mockserver/proxy/StopClientProxyNettyIntegrationTest.java
Patch:
@@ -26,7 +26,7 @@ public void canStartAndStopMultipleTimes() {
         // start client
         ProxyClient proxyClient = new ProxyClient("localhost", serverPort);
 
-        for (int i = 0; i < 5; i++) {
+        for (int i = 0; i < 3; i++) {
             // when
             proxyClient.stop();
 

File: mockserver-client-java/src/main/java/org/mockserver/client/proxy/ProxyClient.java
Patch:
@@ -145,7 +145,9 @@ public ProxyClient verify(HttpRequest httpRequest) throws AssertionError {
      * @throws AssertionError if the request has not been found
      */
     public ProxyClient verify(HttpRequest httpRequest, Times times) throws AssertionError {
-        if (httpRequest == null) throw new IllegalArgumentException("verify(HttpRequest) requires a non null HttpRequest object");
+        if (httpRequest == null) {
+            throw new IllegalArgumentException("verify(HttpRequest) requires a non null HttpRequest object");
+        }
 
         Expectation[] expectations = retrieveAsExpectations(httpRequest);
         if (expectations == null) {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/ExpectationSerializer.java
Patch:
@@ -154,7 +154,9 @@ public String serialize(Expectation[] expectation) {
     }
 
     public Expectation deserialize(String jsonExpectation) {
-        if (jsonExpectation == null || jsonExpectation.isEmpty()) throw new IllegalArgumentException("Expected an JSON expectation object but http body is empty");
+        if (jsonExpectation == null || jsonExpectation.isEmpty()) {
+            throw new IllegalArgumentException("Expected an JSON expectation object but http body is empty");
+        }
         Expectation expectation = null;
         try {
             ExpectationDTO expectationDTO = objectMapper.readValue(jsonExpectation, ExpectationDTO.class);

File: mockserver-core/src/main/java/org/mockserver/matchers/BodyMatcher.java
Patch:
@@ -6,4 +6,5 @@
  * @author jamesdbloom
  */
 public abstract class BodyMatcher<T> extends EqualsHashCodeToString implements Matcher<T> {
+
 }

File: mockserver-core/src/main/java/org/mockserver/model/HttpRequest.java
Patch:
@@ -216,6 +216,9 @@ public HttpRequest withBody(String body) {
      * @param body an instance of one of the Body subclasses including StringBody, ParameterBody or BinaryBody
      */
     public HttpRequest withBody(Body body) {
+        if (body instanceof BinaryBody) {
+            setRawBodyBytes(((BinaryBody) body).getValue());
+        }
         this.body = body;
         return this;
     }

File: mockserver-core/src/main/java/org/mockserver/proxy/filters/Filters.java
Patch:
@@ -43,7 +43,9 @@ public HttpResponse applyFilters(HttpRequest httpRequest, HttpResponse httpRespo
             if (httpRequestMatcher.matches(httpRequest)) {
                 for (ProxyResponseFilter proxyFilter : responseFilters.getAll(httpRequestMatcher)) {
                     httpResponse = proxyFilter.onResponse(httpRequest, httpResponse);
-                    if (httpResponse == null) throw new IllegalStateException(proxyFilter.getClass().getName() + " returned a null HttpResponse, Filters are not allowed to return a null HttpResponse object, a Filter can only return null for an HttpRequest which will prevent the request being sent.");
+                    if (httpResponse == null) {
+                        throw new IllegalStateException(proxyFilter.getClass().getName() + " returned a null HttpResponse, Filters are not allowed to return a null HttpResponse object, a Filter can only return null for an HttpRequest which will prevent the request being sent.");
+                    }
                 }
             }
         }

File: mockserver-core/src/main/java/org/mockserver/proxy/filters/LogFilter.java
Patch:
@@ -26,7 +26,7 @@ public class LogFilter implements ProxyResponseFilter {
     private Logger requestLogger = LoggerFactory.getLogger("REQUEST");
 
     public synchronized HttpResponse onResponse(HttpRequest httpRequest, HttpResponse httpResponse) {
-        if(httpRequest != null && httpResponse != null) {
+        if (httpRequest != null && httpResponse != null) {
             requestResponseLog.put(httpRequest, httpResponse);
         }
         return httpResponse;
@@ -104,15 +104,15 @@ public synchronized Expectation[] retrieve(HttpRequest httpRequest) {
         if (httpRequest != null) {
             HttpRequestMatcher httpRequestMatcher = matcherBuilder.transformsToMatcher(httpRequest);
             for (HttpRequest key : requestResponseLog.keySet()) {
-                for(HttpResponse value : requestResponseLog.getAll(key)) {
+                for (HttpResponse value : requestResponseLog.getAll(key)) {
                     if (httpRequestMatcher.matches(key)) {
                         expectations.add(new Expectation(key, Times.once()).thenRespond(value));
                     }
                 }
             }
         } else {
             for (HttpRequest key : requestResponseLog.keySet()) {
-                for(HttpResponse value : requestResponseLog.getAll(key)) {
+                for (HttpResponse value : requestResponseLog.getAll(key)) {
                     expectations.add(new Expectation(key, Times.once()).thenRespond(value));
                 }
             }

File: mockserver-core/src/main/java/org/mockserver/socket/SSLFactory.java
Patch:
@@ -24,8 +24,8 @@ public class SSLFactory {
     public static final String KEY_STORE_PASSWORD = "changeit";
     public static final String KEY_STORE_FILENAME = "keystore.jks";
     private static final SSLFactory sslFactory = new SSLFactory();
-    private final Logger logger = LoggerFactory.getLogger(SSLFactory.class);
-    private final TrustManager DUMMY_TRUST_MANAGER = new X509TrustManager() {
+    private static final Logger logger = LoggerFactory.getLogger(SSLFactory.class);
+    private static final TrustManager DUMMY_TRUST_MANAGER = new X509TrustManager() {
         @Override
         public X509Certificate[] getAcceptedIssuers() {
             return new X509Certificate[0];

File: mockserver-core/src/main/java/org/mockserver/streams/IOStreamUtils.java
Patch:
@@ -30,6 +30,7 @@ public static String readInputStreamToString(Socket socket) throws IOException {
                 contentLength = Integer.parseInt(line.split(":")[1].trim());
             }
             if (line.length() == 0) {
+
                 if (contentLength != null) {
                     result.append('\n');
                     for (int position = 0; position < contentLength; position++) {

File: mockserver-core/src/main/java/org/mockserver/url/URLEncoder.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.client.http;
+package org.mockserver.url;
 
 import com.google.common.base.Charsets;
 import org.slf4j.Logger;
@@ -25,7 +25,7 @@ public class URLEncoder {
         }
     }
 
-    protected static String encodeURL(String input) {
+    public static String encodeURL(String input) {
         try {
             byte[] sourceBytes = URLDecoder.decode(input, Charsets.UTF_8.name()).getBytes(Charsets.UTF_8);
             ByteArrayOutputStream bos = new ByteArrayOutputStream(sourceBytes.length);

File: mockserver-core/src/test/java/org/mockserver/client/http/URLEncoderTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.client.http;
 
 import org.junit.Test;
+import org.mockserver.url.URLEncoder;
 
 import static org.junit.Assert.assertEquals;
 

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerTest.java
Patch:
@@ -120,7 +120,7 @@ public void serializeHandlesException() throws IOException {
         // given
         HttpRequest httpRequest = mock(HttpRequest.class);
         when(objectMapper.writerWithDefaultPrettyPrinter()).thenReturn(objectWriter);
-        when(objectWriter.writeValueAsString(any(HttpRequestDTO.class))).thenThrow(new IOException("TEST EXCEPTION"));
+        when(objectWriter.writeValueAsString(any(HttpRequestDTO.class))).thenThrow(IOException.class);
 
         // when
         httpRequestSerializer.serialize(httpRequest);

File: mockserver-examples/src/main/java/org/mockserver/servicebackend/BookServer.java
Patch:
@@ -7,7 +7,6 @@
 import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.codec.http.*;
-import io.netty.handler.logging.LoggingHandler;
 import io.netty.handler.ssl.SslHandler;
 import org.codehaus.jackson.map.DeserializationConfig;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -34,11 +33,11 @@
  */
 public class BookServer {
 
+    private static ServerBootstrap serverBootstrap;
     private final Map<String, Book> booksDB = createBookData();
     private final ObjectMapper objectMapper = createObjectMapper();
     private final int httpPort;
     private final boolean secure;
-    private static ServerBootstrap serverBootstrap;
 
     public BookServer(int httpPort, boolean secure) {
         this.httpPort = httpPort;
@@ -47,7 +46,7 @@ public BookServer(int httpPort, boolean secure) {
 
     @PostConstruct
     public void startServer() throws InterruptedException {
-        if(serverBootstrap == null) {
+        if (serverBootstrap == null) {
             try {
                 serverBootstrap = new ServerBootstrap()
                         .group(new NioEventLoopGroup(1), new NioEventLoopGroup(1))

File: mockserver-netty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -112,7 +112,9 @@ private static boolean parsePort(Map<String, Integer> parsedArguments, final Str
 
     private static void showUsage() {
         outputPrintStream.println(USAGE);
-        if (shutdownOnUsage) System.exit(1);
+        if (shutdownOnUsage) {
+            System.exit(1);
+        }
     }
 
 }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/BasicHttpDecoder.java
Patch:
@@ -26,7 +26,7 @@ private String readLine() {
         while (byteBuf.isReadable()) {
             char nextCharacter = (char) byteBuf.readByte();
             if (nextCharacter == '\r' || nextCharacter == '\n') {
-                if(byteBuf.isReadable()) {
+                if (byteBuf.isReadable()) {
                     // swallow '\r' or '\n'
                     byteBuf.readByte();
                 }

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-main-classpath/src/test/java/org/mockserver/ClientServerMavenPluginIntegrationTest.java
Patch:
@@ -60,7 +60,7 @@ public void clientCanCallServer() {
     }
 
     protected HttpResponse makeRequest(HttpRequest httpRequest) {
-        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest);
+        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest, false);
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!(header.getName().equals("Server") || header.getName().equals("Expires") || header.getName().equals("Date") || header.getName().equals("Connection"))) {

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-test-classpath/src/test/java/org/mockserver/ClientServerMavenPluginIntegrationTest.java
Patch:
@@ -61,7 +61,7 @@ public void clientCanCallServer() {
     }
 
     protected HttpResponse makeRequest(HttpRequest httpRequest) {
-        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest);
+        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest, false);
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!(header.getName().equals("Server") || header.getName().equals("Expires") || header.getName().equals("Date") || header.getName().equals("Connection"))) {

File: mockserver-core/src/main/java/org/mockserver/client/serialization/HttpRequestSerializer.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockserver.client.serialization;
 
-import org.codehaus.jackson.map.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.mockserver.client.serialization.model.ExpectationDTO;
 import org.mockserver.client.serialization.model.HttpRequestDTO;
 import org.mockserver.model.HttpRequest;

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/ParameterBodyDTO.java
Patch:
@@ -16,7 +16,7 @@ public class ParameterBodyDTO extends BodyDTO {
 
     public ParameterBodyDTO(ParameterBody parameterBody) {
         super(parameterBody.getType());
-        parameters = Lists.transform(parameterBody.getParameters(), new Function<Parameter, ParameterDTO>() {
+        parameters = Lists.transform(parameterBody.getValue(), new Function<Parameter, ParameterDTO>() {
             public ParameterDTO apply(Parameter parameter) {
                 return new ParameterDTO(parameter);
             }

File: mockserver-core/src/main/java/org/mockserver/model/BinaryBody.java
Patch:
@@ -1,11 +1,11 @@
 package org.mockserver.model;
 
-import javax.xml.bind.DatatypeConverter;
+import org.mockserver.client.serialization.Base64Converter;
 
 /**
  * @author jamesdbloom
  */
-public class BinaryBody extends Body {
+public class BinaryBody extends Body<byte[]> {
 
     private final byte[] value;
 
@@ -24,6 +24,6 @@ public byte[] getValue() {
 
     @Override
     public String toString() {
-        return new String(value);
+        return value != null ? Base64Converter.stringToBase64Bytes(value) : null;
     }
 }

File: mockserver-core/src/main/java/org/mockserver/streams/IOStreamUtils.java
Patch:
@@ -54,7 +54,7 @@ public static String readInputStreamToString(ServletRequest request) {
 
     public static byte[] readInputStreamToByteArray(ServletRequest request) {
         try {
-            return IOUtils.toByteArray(new InputStreamReader(request.getInputStream()), Charsets.UTF_8);
+            return IOUtils.toByteArray(request.getInputStream());
         } catch (IOException ioe) {
             logger.error("IOException while reading HttpServletRequest input stream", ioe);
             throw new RuntimeException("IOException while reading HttpServletRequest input stream", ioe);

File: mockserver-core/src/test/java/org/mockserver/client/serialization/Base64ConverterTest.java
Patch:
@@ -13,17 +13,17 @@
 public class Base64ConverterTest {
 
     @Test
-    public void shouldConvertToBase64Value(){
+    public void shouldConvertToBase64Value() {
         assertThat(new Base64Converter().stringToBase64Bytes("some_value".getBytes()), is(DatatypeConverter.printBase64Binary("some_value".getBytes())));
     }
 
     @Test
-    public void shouldConvertBase64ValueToString(){
+    public void shouldConvertBase64ValueToString() {
         assertThat(new String(Base64Converter.base64StringToBytes(DatatypeConverter.printBase64Binary("some_value".getBytes()))), is("some_value"));
     }
 
     @Test
-    public void shouldNotConvertNoneBase64Value(){
+    public void shouldNotConvertNoneBase64Value() {
         assertThat(new String(Base64Converter.base64StringToBytes("some_value")), is("some_value"));
     }
 }

File: mockserver-core/src/test/java/org/mockserver/client/serialization/model/ParameterBodyDTOTest.java
Patch:
@@ -37,7 +37,7 @@ public void shouldBuildCorrectObject() {
         )).buildObject();
 
         // then
-        assertThat(parameterBody.getParameters(), containsInAnyOrder(new Parameter("some", "value")));
+        assertThat(parameterBody.getValue(), containsInAnyOrder(new Parameter("some", "value")));
         assertThat(parameterBody.getType(), is(Body.Type.PARAMETERS));
     }
 

File: mockserver-core/src/test/java/org/mockserver/model/BinaryBodyTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockserver.model;
 
 import org.junit.Test;
+import org.mockserver.client.serialization.Base64Converter;
 
 import javax.xml.bind.DatatypeConverter;
 
@@ -36,6 +37,6 @@ public void shouldReturnValueSetInConstructor() {
 
     @Test
     public void shouldReturnFormattedRequestInToString() {
-        assertEquals("some_body", binary("some_body".getBytes()).toString());
+        assertEquals(Base64Converter.stringToBase64Bytes("some_body".getBytes()), binary("some_body".getBytes()).toString());
     }
 }

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-main-classpath/src/test/java/org/mockserver/ClientServerMavenPluginIntegrationTest.java
Patch:
@@ -60,7 +60,7 @@ public void clientCanCallServer() {
     }
 
     protected HttpResponse makeRequest(HttpRequest httpRequest) {
-        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest);
+        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest, false);
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!(header.getName().equals("Server") || header.getName().equals("Expires") || header.getName().equals("Date") || header.getName().equals("Connection"))) {

File: mockserver-maven-plugin-integration-tests/src/integration-tests/mockserver-initializer-test-classpath/src/test/java/org/mockserver/ClientServerMavenPluginIntegrationTest.java
Patch:
@@ -61,7 +61,7 @@ public void clientCanCallServer() {
     }
 
     protected HttpResponse makeRequest(HttpRequest httpRequest) {
-        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest);
+        HttpResponse httpResponse = apacheHttpClient.sendRequest(httpRequest, false);
         List<Header> headers = new ArrayList<Header>();
         for (Header header : httpResponse.getHeaders()) {
             if (!(header.getName().equals("Server") || header.getName().equals("Expires") || header.getName().equals("Date") || header.getName().equals("Connection"))) {

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -179,7 +179,7 @@ FullHttpResponse forwardRequest(NettyHttpRequest request) {
     FullHttpResponse sendRequest(final org.mockserver.model.HttpRequest httpRequest) {
         // if HttpRequest was set to null by a filter don't send request
         if (httpRequest != null) {
-            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest));
+            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest, false));
             return mockServerToNettyResponseMapper.mapMockServerResponseToNettyResponse(httpResponse);
         } else {
             return new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -232,7 +232,7 @@ private FullHttpResponse forwardRequest(NettyHttpRequest request) {
     private FullHttpResponse sendRequest(final org.mockserver.model.HttpRequest httpRequest) {
         // if HttpRequest was set to null by a filter don't send request
         if (httpRequest != null) {
-            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest));
+            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest, false));
             return mockServerToNettyResponseMapper.mapMockServerResponseToNettyResponse(httpResponse);
         } else {
             return new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);

File: mockserver-netty/src/test/java/org/mockserver/mockserver/MockServerHandlerTest.java
Patch:
@@ -26,7 +26,6 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
-import static org.mockito.Mockito.verify;
 import static org.mockito.MockitoAnnotations.initMocks;
 import static org.mockserver.matchers.Times.once;
 import static org.mockserver.model.HttpForward.forward;
@@ -199,7 +198,7 @@ public void shouldForwardMatchedExpectation() {
         when(nettyToMockServerRequestMapper.mapNettyRequestToMockServerRequest(any(NettyHttpRequest.class))).thenReturn(request);
         when(mockServerMatcher.handle(any(HttpRequest.class))).thenReturn(forward);
         when(filters.applyFilters(any(HttpRequest.class))).thenReturn(request);
-        when(apacheHttpClient.sendRequest(any(HttpRequest.class))).thenReturn(response);
+        when(apacheHttpClient.sendRequest(any(HttpRequest.class), eq(false))).thenReturn(response);
         when(filters.applyFilters(any(HttpRequest.class), any(HttpResponse.class))).thenReturn(response);
         when(mockServerToNettyResponseMapper.mapMockServerResponseToNettyResponse(any(HttpResponse.class))).thenReturn(defaultFullHttpResponse);
 
@@ -209,7 +208,7 @@ public void shouldForwardMatchedExpectation() {
         // then
         verify(mockServerMatcher).handle(request);
         verify(filters).applyFilters(request);
-        verify(apacheHttpClient).sendRequest(request);
+        verify(apacheHttpClient).sendRequest(request, false);
         verify(filters).applyFilters(request, response);
         verify(mockServerToNettyResponseMapper).mapMockServerResponseToNettyResponse(response);
         assertThat(result.getStatus(), is(HttpResponseStatus.NO_CONTENT));

File: mockserver-proxy-war/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -118,7 +118,7 @@ private void forwardRequest(HttpServletRequest request, HttpServletResponse resp
     private void sendRequest(final HttpRequest httpRequest, final HttpServletResponse httpServletResponse) {
         // if HttpRequest was set to null by a filter don't send request
         if (httpRequest != null) {
-            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest));
+            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest, false));
             mockServerToHttpServletResponseMapper.mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
         }
     }

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -124,7 +124,7 @@ private void forwardRequest(HttpServletRequest request, HttpServletResponse resp
     private void sendRequest(final HttpRequest httpRequest, final HttpServletResponse httpServletResponse) {
         // if HttpRequest was set to null by a filter don't send request
         if (httpRequest != null) {
-            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest));
+            HttpResponse httpResponse = filters.applyFilters(httpRequest, apacheHttpClient.sendRequest(httpRequest, false));
             mockServerToHttpServletResponseMapper.mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
         }
     }

File: mockserver-war/src/test/java/org/mockserver/server/MockServerServletTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.server;
 
-import io.netty.handler.codec.http.HttpResponseStatus;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InjectMocks;
@@ -88,7 +87,7 @@ public void forwardWhenPathMatches() throws IOException {
 
         when(mockServerMatcher.handle(httpRequest)).thenReturn(httpForward);
         when(filters.applyFilters(any(HttpRequest.class))).thenReturn(httpRequest);
-        when(apacheHttpClient.sendRequest(any(HttpRequest.class))).thenReturn(httpResponse);
+        when(apacheHttpClient.sendRequest(any(HttpRequest.class), eq(false))).thenReturn(httpResponse);
         when(filters.applyFilters(any(HttpRequest.class), any(HttpResponse.class))).thenReturn(httpResponse);
         when(httpServletToMockServerRequestMapper.mapHttpServletRequestToMockServerRequest(httpServletRequest)).thenReturn(httpRequest);
 
@@ -98,7 +97,7 @@ public void forwardWhenPathMatches() throws IOException {
         // then
         verify(mockServerMatcher).handle(httpRequest);
         verify(filters).applyFilters(httpRequest);
-        verify(apacheHttpClient).sendRequest(httpRequest);
+        verify(apacheHttpClient).sendRequest(httpRequest, false);
         verify(filters).applyFilters(httpRequest, httpResponse);
         verify(mockServerToHttpServletResponseMapper).mapMockServerResponseToHttpServletResponse(httpResponse, httpServletResponse);
         assertThat(httpServletResponse.getStatus(), is(200));

File: mockserver-core/src/main/java/org/mockserver/socket/SSLFactory.java
Patch:
@@ -107,7 +107,7 @@ private void dynamicallyCreateKeyStore() {
                     KEY_STORE_CERT_ALIAS,
                     KEY_STORE_CA_ALIAS,
                     KEY_STORE_PASSWORD.toCharArray(),
-                    "CN=www.mockserver.com, O=MockServer, L=London, S=England, C=UK"
+                    "localhost", null, null
             );
         } catch (Exception e) {
             throw new RuntimeException("Exception while building KeyStore dynamically", e);
@@ -153,5 +153,4 @@ private void saveKeyStore() {
         }
     }
 
-
 }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerRunForkedMojoTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MockServerRunForkedMojoTest {
 
     public final String level = "LEVEL";
-    private final String jarWithDependenciesPath = "/foo";
+    private final String jarWithDependenciesPath = new File("/foo").getAbsolutePath();
     private final String javaBinaryPath = "java";
     @Mock
     protected RepositorySystem mockRepositorySystem;

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerRunForkedMojoTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MockServerRunForkedMojoTest {
 
     public final String level = "LEVEL";
-    private final String jarWithDependenciesPath = "/foo";
+    private final String jarWithDependenciesPath = new File("/foo").getAbsolutePath();
     private final String javaBinaryPath = "java";
     @Mock
     protected RepositorySystem mockRepositorySystem;

File: mockserver-client-java/src/main/java/org/mockserver/client/http/ApacheHttpClient.java
Patch:
@@ -1,15 +1,14 @@
 package org.mockserver.client.http;
 
-import io.netty.handler.codec.http.QueryStringDecoder;
 import com.google.common.base.Charsets;
+import io.netty.handler.codec.http.QueryStringDecoder;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpEntityEnclosingRequest;
 import org.apache.http.client.CircularRedirectException;
 import org.apache.http.client.methods.*;
 import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
 import org.apache.http.conn.ssl.SSLContexts;
 import org.apache.http.conn.ssl.TrustStrategy;
-import org.apache.http.entity.ByteArrayEntity;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;
@@ -154,7 +153,7 @@ public HttpResponse sendRequest(HttpRequest httpRequest) {
 
             // logging
             if (logger.isTraceEnabled()) {
-                logger.trace("Proxy sending request:\n" + new ObjectMapper()
+                logger.trace("Proxy sending request:" + System.getProperty("line.separator") + new ObjectMapper()
                         .setSerializationInclusion(JsonSerialize.Inclusion.NON_DEFAULT)
                         .setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL)
                         .setSerializationInclusion(JsonSerialize.Inclusion.NON_EMPTY)

File: mockserver-core/src/test/java/org/mockserver/client/serialization/HttpRequestSerializerTest.java
Patch:
@@ -77,8 +77,8 @@ public void deserialize() throws IOException {
     @Test
     public void deserializeHttpRequestAsField() throws IOException {
         // given
-        String input = "{\n" +
-                "    \"httpRequest\": \"requestBytes\",\n" +
+        String input = "{" + System.getProperty("line.separator") +
+                "    \"httpRequest\": \"requestBytes\"," + System.getProperty("line.separator") +
                 "}";
         when(objectMapper.readValue(eq(input), same(ExpectationDTO.class))).thenReturn(new ExpectationDTO().setHttpRequest(fullHttpRequestDTO));
 

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -14,7 +14,6 @@
 import org.apache.http.util.EntityUtils;
 import org.junit.Test;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.client.proxy.Times;
 import org.mockserver.model.HttpStatusCode;
 import org.mockserver.socket.SSLFactory;
 import org.mockserver.streams.IOStreamUtils;

File: mockserver-netty/src/main/java/org/mockserver/logging/LoggingHandler.java
Patch:
@@ -219,7 +219,7 @@ private String formatByteBuf(String eventName, ByteBuf buf) {
             if (relIdxMod16 == 15) {
                 dump.append(" |");
                 if (i > 15 && buf.readableBytes() > i) {
-                    dump.append(buf.toString(i - 15, 16, Charsets.UTF_8).replaceAll("\n", "/").replaceAll("\r", "/"));
+                    dump.append(buf.toString(i - 15, 16, Charsets.UTF_8).replaceAll("" + System.getProperty("line.separator"), "/").replaceAll("\r", "/"));
                 } else {
                     for (int j = i - 15; j <= i; j++) {
                         dump.append(BYTE2CHAR[buf.getUnsignedByte(j)]);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/direct/DirectProxyUpstreamHandler.java
Patch:
@@ -179,7 +179,7 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) throw
                 }
 
                 if (logger.isTraceEnabled()) {
-                    logger.trace("CHUNK:                     ---\n-\n" + Unpooled.copiedBuffer(chunk).toString(Charsets.UTF_8) + "\n-\n");
+                    logger.trace("CHUNK:                     ---\n-" + System.getProperty("line.separator") + Unpooled.copiedBuffer(chunk).toString(Charsets.UTF_8) + "\n-" + System.getProperty("line.separator"));
                     logger.trace("CONTENT-SO-FAR-PRE-CHUNK:  --- " + (contentSoFar - Unpooled.copiedBuffer(chunk).toString(Charsets.UTF_8).length()));
                     logger.trace("CHUNK-SIZE:                --- " + chunk.readableBytes());
                     logger.trace("CONTENT-SO-FAR-PRE-CHUNK:  --- " + contentSoFar);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/ProxyRelayHandler.java
Patch:
@@ -118,7 +118,7 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) throw
                 }
 
                 if (logger.isTraceEnabled()) {
-                    logger.trace("CHUNK:                     ---\n-\n" + Unpooled.copiedBuffer(chunk).toString(Charsets.UTF_8) + "\n-\n");
+                    logger.trace("CHUNK:                     ---\n-" + System.getProperty("line.separator") + Unpooled.copiedBuffer(chunk).toString(Charsets.UTF_8) + "\n-" + System.getProperty("line.separator"));
                     logger.trace("CONTENT-SO-FAR-PRE-CHUNK:  --- " + (contentSoFar - Unpooled.copiedBuffer(chunk).toString(Charsets.UTF_8).length()));
                     logger.trace("CHUNK-SIZE:                --- " + chunk.readableBytes());
                     logger.trace("CONTENT-SO-FAR-PRE-CHUNK:  --- " + contentSoFar);

File: mockserver-core/src/main/java/org/mockserver/socket/KeyStoreFactory.java
Patch:
@@ -93,7 +93,7 @@ public X509Certificate createClientCert(PublicKey publicKey, PrivateKey certific
                 subjectAlternativeNames.add(new GeneralName(GeneralName.dNSName, subjectAlternativeName));
             }
         }
-        if (subjectAlternativeNameDomains != null) {
+        if (subjectAlternativeNameIps != null) {
             for (String subjectAlternativeName : subjectAlternativeNameIps) {
                 subjectAlternativeNames.add(new GeneralName(GeneralName.iPAddress, subjectAlternativeName));
             }

File: mockserver-core/src/main/java/org/mockserver/socket/SSLFactory.java
Patch:
@@ -107,7 +107,7 @@ private void dynamicallyCreateKeyStore() {
                     KEY_STORE_CERT_ALIAS,
                     KEY_STORE_CA_ALIAS,
                     KEY_STORE_PASSWORD.toCharArray(),
-                    "CN=www.mockserver.com, O=MockServer, L=London, S=England, C=UK"
+                    "localhost", null, null
             );
         } catch (Exception e) {
             throw new RuntimeException("Exception while building KeyStore dynamically", e);
@@ -153,5 +153,4 @@ private void saveKeyStore() {
         }
     }
 
-
 }

File: mockserver-netty/src/main/java/org/mockserver/mappers/MockServerToNettyResponseMapper.java
Patch:
@@ -35,7 +35,7 @@ private void setHeaders(HttpResponse httpResponse, DefaultFullHttpResponse httpS
         if (httpResponse.getHeaders() != null) {
             for (Header header : httpResponse.getHeaders()) {
                 for (String value : header.getValues()) {
-                    httpServletResponse.headers().set(header.getName(), value);
+                    httpServletResponse.headers().add(header.getName(), value);
                 }
             }
         }

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -69,6 +69,9 @@ public byte[] getBody() {
 
     @JsonIgnore
     public String getBodyAsString() {
+        if (body == null) {
+            return "";
+        }
         return new String(body, Charsets.UTF_8);
     }
 

File: mockserver-core/src/main/java/org/mockserver/matchers/XPathStringMatcher.java
Patch:
@@ -38,6 +38,8 @@ public XPathStringMatcher(String matcher) {
     public boolean matches(final String matched) {
         if (xpathExpression == null) {
             logger.warn("Attempting match against null XPath Expression for [" + matched + "]" + new RuntimeException("Attempting match against null XPath Expression for [" + matched + "]"));
+        } else if (matcher.equals(matched)) {
+            return true;
         } else if (matched != null) {
             // match as xpath - matcher -> matched
             try {

File: mockserver-client/src/test/java/org/mockserver/client/server/MockServerClientTest.java
Patch:
@@ -57,7 +57,7 @@ public void shouldSetupExpectationWithResponse() {
         // then
         Expectation expectation = forwardChainExpectation.getExpectation();
         assertTrue(expectation.matches(httpRequest));
-        assertSame(httpResponse, expectation.getHttpResponse());
+        assertSame(httpResponse, expectation.getHttpResponse(false));
         assertEquals(Times.unlimited(), expectation.getTimes());
     }
 

File: mockserver-core/src/main/java/org/mockserver/client/serialization/ExpectationSerializer.java
Patch:
@@ -38,7 +38,7 @@ public String serializeAsJava(Expectation expectation) {
         StringBuffer output = new StringBuffer();
         if (expectation != null) {
             HttpRequest httpRequest = expectation.getHttpRequest();
-            HttpResponse httpResponse = expectation.getHttpResponse();
+            HttpResponse httpResponse = expectation.getHttpResponse(false);
             HttpForward httpForward = expectation.getHttpForward();
             output.append("\n" +
                     "new MockServerClient()\n" +

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/ExpectationDTO.java
Patch:
@@ -21,8 +21,8 @@ public ExpectationDTO(Expectation expectation) {
         if (expectation.getHttpRequest() != null) {
             httpRequest = new HttpRequestDTO(expectation.getHttpRequest());
         }
-        if (expectation.getHttpResponse() != null) {
-            httpResponse = new HttpResponseDTO(expectation.getHttpResponse());
+        if (expectation.getHttpResponse(false) != null) {
+            httpResponse = new HttpResponseDTO(expectation.getHttpResponse(false));
         }
         if (expectation.getHttpForward() != null) {
             httpForward = new HttpForwardDTO(expectation.getHttpForward());

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -64,7 +64,7 @@ public synchronized Action handle(HttpRequest httpRequest) {
                         this.expectations.remove(expectation);
                     }
                 }
-                return expectation.getAction();
+                return expectation.getAction(true);
             }
         }
         return null;

File: mockserver-core/src/main/java/org/mockserver/model/HttpResponse.java
Patch:
@@ -172,6 +172,7 @@ public Delay getDelay() {
         return delay;
     }
 
+    @JsonIgnore
     public HttpResponse applyDelay() {
         if (delay != null) {
             delay.applyDelay();

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerHandler.java
Patch:
@@ -144,7 +144,7 @@ FullHttpResponse mockResponse(NettyHttpRequest nettyHttpRequest) {
         } else if (nettyHttpRequest.matches(HttpMethod.PUT, "/expectation")) {
 
             Expectation expectation = expectationSerializer.deserialize(content);
-            mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse()).thenForward(expectation.getHttpForward());
+            mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward());
             return new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.CREATED);
 
         } else if (nettyHttpRequest.matches(HttpMethod.PUT, "/retrieve")) {

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -68,7 +68,7 @@ public void doPut(HttpServletRequest httpServletRequest, HttpServletResponse htt
             httpServletResponse.setStatus(HttpStatusCode.ACCEPTED_202.code());
         } else if (requestPath.equals("/expectation")) {
             Expectation expectation = expectationSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest));
-            mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse()).thenForward(expectation.getHttpForward());
+            mockServerMatcher.when(expectation.getHttpRequest(), expectation.getTimes()).thenRespond(expectation.getHttpResponse(false)).thenForward(expectation.getHttpForward());
             httpServletResponse.setStatus(HttpStatusCode.CREATED_201.code());
         } else if (requestPath.equals("/retrieve")) {
             Expectation[] expectations = logFilter.retrieve(httpRequestSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest)));

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -11,7 +11,6 @@
 import org.mockserver.model.Action;
 import org.mockserver.model.EqualsHashCodeToString;
 import org.mockserver.model.HttpRequest;
-import org.mockserver.model.HttpResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -110,7 +109,7 @@ public synchronized void dumpToLog(HttpRequest httpRequest) {
     String cleanBase64Response(String serializedExpectation) {
         Pattern base64ResponseBodyPattern = Pattern.compile("[\\s\\S]*\\\"httpResponse\\\"\\s*\\:\\s*\\{[\\s\\S]*\\\"body\\\"\\s*\\:\\s*\\\"(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==))\\\"[\\s\\S]*");
         Matcher matcher = base64ResponseBodyPattern.matcher(serializedExpectation);
-        if(matcher.find()) {
+        if (matcher.find()) {
             return serializedExpectation.replace(matcher.group(1), new String(Base64Converter.base64StringToBytes(matcher.group(1))));
         } else {
             return serializedExpectation;

File: mockserver-core/src/test/java/org/mockserver/matchers/RegexStringMatcherTest.java
Patch:
@@ -53,6 +53,8 @@ public void shouldNotMatchEmptyTest() {
     @Test
     public void shouldHandleIllegalRegexPatternForExpectationAndTest() {
         assertFalse(new RegexStringMatcher("/{}").matches("/{}"));
+        assertFalse(new RegexStringMatcher("/{}").matches("some_value"));
+        assertFalse(new RegexStringMatcher("some_value").matches("/{}"));
     }
 
     @Test

File: mockserver-netty/src/main/java/org/mockserver/mappers/MockServerToNettyResponseMapper.java
Patch:
@@ -21,7 +21,7 @@ public DefaultFullHttpResponse mapMockServerResponseToNettyResponse(HttpResponse
             DefaultFullHttpResponse defaultFullHttpResponse = new DefaultFullHttpResponse(
                     HttpVersion.HTTP_1_1,
                     HttpResponseStatus.valueOf((httpResponse.getStatusCode() != null ? httpResponse.getStatusCode() : 200)),
-                    Unpooled.copiedBuffer(httpResponse.getBody())
+                    (httpResponse.getBody() != null ? Unpooled.copiedBuffer(httpResponse.getBody()) : Unpooled.buffer(0))
             );
             setHeaders(httpResponse, defaultFullHttpResponse);
             setCookies(httpResponse, defaultFullHttpResponse);

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -136,13 +136,13 @@ String jarWithDependencies() {
 
     @VisibleForTesting
     String getVersion() {
-        String version = "2.8";
+        String version = "2.9";
         try {
             Properties p = new Properties();
             InputStream is = getClass().getResourceAsStream("/META-INF/maven/org.mock-server/mockserver-maven-plugin/pom.properties");
             if (is != null) {
                 p.load(is);
-                version = p.getProperty("version", "2.8");
+                version = p.getProperty("version", "2.9");
             }
         } catch (Exception e) {
             // ignore

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -136,13 +136,13 @@ String jarWithDependencies() {
 
     @VisibleForTesting
     String getVersion() {
-        String version = "2.8";
+        String version = "2.9";
         try {
             Properties p = new Properties();
             InputStream is = getClass().getResourceAsStream("/META-INF/maven/org.mock-server/mockserver-maven-plugin/pom.properties");
             if (is != null) {
                 p.load(is);
-                version = p.getProperty("version", "2.8");
+                version = p.getProperty("version", "2.9");
             }
         } catch (Exception e) {
             // ignore

File: mockserver-client/src/main/java/org/mockserver/client/http/ApacheHttpClient.java
Patch:
@@ -9,6 +9,7 @@
 import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
 import org.apache.http.conn.ssl.SSLContexts;
 import org.apache.http.conn.ssl.TrustStrategy;
+import org.apache.http.entity.ByteArrayEntity;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;

File: mockserver-core/src/main/java/org/mockserver/client/serialization/model/HttpResponseDTO.java
Patch:
@@ -7,6 +7,7 @@
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpResponse;
 
+import javax.xml.bind.DatatypeConverter;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -42,7 +43,7 @@ public HttpResponseDTO() {
     public HttpResponse buildObject() {
         return new HttpResponse()
                 .withStatusCode(statusCode)
-                .withBody(body)
+                .withBody(body != null ? DatatypeConverter.parseBase64Binary(body) : null)
                 .withHeaders(Lists.transform(headers, new Function<HeaderDTO, Header>() {
                     public Header apply(HeaderDTO header) {
                         return header.buildObject();

File: mockserver-jetty/src/main/java/org/mockserver/jetty/runner/AbstractRunner.java
Patch:
@@ -275,7 +275,9 @@ public void run() {
                         }
                     }
                 } finally {
-                    serverSocket.close();
+                    if (serverSocket != null) {
+                        serverSocket.close();
+                    }
                 }
             } catch (Exception e) {
                 logger.trace("Exception while creating " + this.getClass().getSimpleName().replace("Runner", "") + " shutdown thread", e);

File: mockserver-client/src/main/java/org/mockserver/client/server/MockServerClient.java
Patch:
@@ -62,7 +62,7 @@ public MockServerClient(String host, int port, String contextPath) {
      *                           .withBody("some_request_body")
      *           )
      *           .respond(
-     *                   request()
+     *                   response()
      *                           .withBody("some_response_body")
      *                           .withHeaders(
      *                                   new Header("responseName", "responseValue")

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/InstanceHolder.java
Patch:
@@ -6,13 +6,14 @@
 import org.mockserver.initialize.ExpectationInitializer;
 import org.mockserver.mockserver.MockServer;
 import org.mockserver.mockserver.MockServerBuilder;
+import org.mockserver.model.EqualsHashCodeToString;
 import org.mockserver.proxy.http.HttpProxy;
 import org.mockserver.proxy.http.HttpProxyBuilder;
 
 /**
  * @author jamesdbloom
  */
-public class InstanceHolder {
+public class InstanceHolder extends EqualsHashCodeToString {
 
     @VisibleForTesting
     static HttpProxyBuilder proxyBuilder = new HttpProxyBuilder();

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/InstanceHolder.java
Patch:
@@ -6,13 +6,14 @@
 import org.mockserver.initialize.ExpectationInitializer;
 import org.mockserver.mockserver.MockServer;
 import org.mockserver.mockserver.MockServerBuilder;
+import org.mockserver.model.EqualsHashCodeToString;
 import org.mockserver.proxy.http.HttpProxy;
 import org.mockserver.proxy.http.HttpProxyBuilder;
 
 /**
  * @author jamesdbloom
  */
-public class InstanceHolder {
+public class InstanceHolder extends EqualsHashCodeToString {
 
     @VisibleForTesting
     static HttpProxyBuilder proxyBuilder = new HttpProxyBuilder();

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -136,13 +136,13 @@ String jarWithDependencies() {
 
     @VisibleForTesting
     String getVersion() {
-        String version = "2.6";
+        String version = "2.8";
         try {
             Properties p = new Properties();
             InputStream is = getClass().getResourceAsStream("/META-INF/maven/org.mock-server/mockserver-maven-plugin/pom.properties");
             if (is != null) {
                 p.load(is);
-                version = p.getProperty("version", "2.6");
+                version = p.getProperty("version", "2.8");
             }
         } catch (Exception e) {
             // ignore

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -136,13 +136,13 @@ String jarWithDependencies() {
 
     @VisibleForTesting
     String getVersion() {
-        String version = "2.6";
+        String version = "2.8";
         try {
             Properties p = new Properties();
             InputStream is = getClass().getResourceAsStream("/META-INF/maven/org.mock-server/mockserver-maven-plugin/pom.properties");
             if (is != null) {
                 p.load(is);
-                version = p.getProperty("version", "2.6");
+                version = p.getProperty("version", "2.8");
             }
         } catch (Exception e) {
             // ignore

File: mockserver-client/src/main/java/org/mockserver/client/http/ApacheHttpClient.java
Patch:
@@ -52,7 +52,7 @@ public class ApacheHttpClient {
 
     public ApacheHttpClient() {
         try {
-
+//            System.getProperty("http.keepAlive", "false");
             HttpClientBuilder httpClientBuilder = HttpClients
                     .custom()
                     .setSslcontext(

File: mockserver-jetty/src/test/java/org/mockserver/jetty/server/ClientAndServerIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ public int getSecurePort() {
     @AfterClass
     public static void stopServer() {
         if (mockServerClient instanceof ClientAndServer) {
-            ((ClientAndServer) mockServerClient).stop();
+            mockServerClient.stop();
         }
     }
 }

File: mockserver-netty/src/main/java/org/mockserver/integration/ClientAndServer.java
Patch:
@@ -8,16 +8,16 @@
  */
 public class ClientAndServer extends MockServerClient {
 
-    private MockServer mockServer;
+    private MockServer mockServer = new MockServer();
 
     public ClientAndServer(Integer port) {
         super("localhost", port);
-        mockServer = new MockServer(port, null);
+        mockServer.start(port, null);
     }
 
     public ClientAndServer(Integer port, Integer securePort) {
         super("localhost", port);
-        mockServer = new MockServer(port, securePort);
+        mockServer.start(port, securePort);
     }
 
     public static ClientAndServer startClientAndServer(Integer port) {

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxy.java
Patch:
@@ -307,6 +307,8 @@ public void stop() {
             proxyStopping();
             workerGroup.shutdownGracefully(2, 15, TimeUnit.SECONDS);
             bossGroup.shutdownGracefully(2, 15, TimeUnit.SECONDS);
+            // wait for shutdown
+            TimeUnit.SECONDS.sleep(3);
         } catch (Exception ie) {
             logger.trace("Exception while waiting for MockServer to stop", ie);
         }
@@ -317,7 +319,7 @@ public boolean isRunning() {
             try {
                 TimeUnit.SECONDS.sleep(3);
             } catch (InterruptedException e) {
-                e.printStackTrace();
+                logger.trace("Exception while waiting for MockServer to confirm running status", e);
             }
             return !bossGroup.isShuttingDown() && !workerGroup.isShuttingDown();
         } else {

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/HttpProxyHandler.java
Patch:
@@ -241,7 +241,7 @@ private FullHttpResponse sendRequest(final org.mockserver.model.HttpRequest http
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        cause.printStackTrace();
+        logger.warn("Exception caught by http proxy handler closing pipeline", cause);
         ctx.close();
     }
 }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/direct/DirectProxyUpstreamHandler.java
Patch:
@@ -239,7 +239,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        cause.printStackTrace();
+        logger.warn("Exception caught by http direct proxy handler closing pipeline", cause);
         Channel ch = ctx.channel();
         if (ch.isActive()) {
             ch.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/ProxyRelayHandler.java
Patch:
@@ -193,7 +193,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        logger.warn("Exception caught", cause);
+        logger.warn("Exception caught by http proxy relay handler closing pipeline", cause);
         Channel ch = ctx.channel();
         if (ch.isActive()) {
             ch.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/RelayConnectHandler.java
Patch:
@@ -103,7 +103,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        failure("Exception caught", cause, ctx, failureResponse(null));
+        failure("Exception caught by http proxy CONNECT handler closing pipeline", cause, ctx, failureResponse(null));
     }
 
     private void failure(String message, Throwable cause, ChannelHandlerContext ctx, Object response) {

File: mockserver-netty/src/test/java/org/mockserver/server/ClientServerNettyIntegrationTest.java
Patch:
@@ -14,12 +14,12 @@ public class ClientServerNettyIntegrationTest extends AbstractClientServerIntegr
 
     private final static int serverPort = PortFactory.findFreePort();
     private final static int serverSecurePort = PortFactory.findFreePort();
-    private static MockServer mockServer;
+    private static MockServer mockServer = new MockServer();
 
     @BeforeClass
     public static void startServer() throws Exception {
         // start server
-        mockServer = new MockServer(serverPort, serverSecurePort);
+        mockServer.start(serverPort, serverSecurePort);
 
         // start client
         mockServerClient = new MockServerClient("localhost", serverPort, servletContext);

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerAbstractMojo.java
Patch:
@@ -36,7 +36,7 @@ public abstract class MockServerAbstractMojo extends AbstractMojo {
     /**
      * Logging level
      */
-    @Parameter(property = "mockserver.logLevel", defaultValue = "WARN")
+    @Parameter(property = "mockserver.logLevel", defaultValue = "INFO")
     protected String logLevel;
     /**
      * Skip the plugin execution completely

File: mockserver-client/src/main/java/org/mockserver/client/http/ApacheHttpClient.java
Patch:
@@ -58,7 +58,7 @@ public ApacheHttpClient() {
                     .setSslcontext(
                             SSLContexts
                                     .custom()
-                                    .loadTrustMaterial(SSLFactory.buildKeyStore(), new TrustStrategy() {
+                                    .loadTrustMaterial(SSLFactory.getInstance().buildKeyStore(), new TrustStrategy() {
                                         public boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                                             return true;
                                         }

File: mockserver-client/src/test/java/org/mockserver/mappers/ApacheHttpClientToMockServerResponseMapperTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.mappers.jetty;
+package org.mockserver.mappers;
 
 import org.apache.commons.io.Charsets;
 import org.apache.http.ProtocolVersion;
@@ -7,7 +7,6 @@
 import org.apache.http.message.BasicHeader;
 import org.apache.http.message.BasicStatusLine;
 import org.junit.Test;
-import org.mockserver.mappers.ApacheHttpClientToMockServerResponseMapper;
 import org.mockserver.model.Cookie;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpResponse;

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractClientProxyIntegrationTest {
     protected HttpClient createHttpClient() throws Exception {
         HttpClientBuilder httpClientBuilder = HttpClients
                 .custom()
-                .setSslcontext(SSLFactory.sslContext())
+                .setSslcontext(SSLFactory.getInstance().sslContext())
                 .setHostnameVerifier(new AllowAllHostnameVerifier());
         if (Boolean.parseBoolean(System.getProperty("defaultProxySet"))) {
             httpClientBuilder.setRoutePlanner(new SystemDefaultRoutePlanner(ProxySelector.getDefault())).build();

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientSecureProxyIntegrationTest.java
Patch:
@@ -71,7 +71,7 @@ public void shouldForwardRequestsToSecurePortUsingSocketDirectly() throws Except
             // Upgrade the socket to SSL
             SSLSocket sslSocket = null;
             try {
-                sslSocket = SSLFactory.wrapSocket(socket);
+                sslSocket = SSLFactory.getInstance().wrapSocket(socket);
 
                 output = sslSocket.getOutputStream();
 
@@ -156,7 +156,7 @@ public void shouldForwardRequestsToSecurePortAndUnknownPath() throws Exception {
             // Upgrade the socket to SSL
             SSLSocket sslSocket = null;
             try {
-                sslSocket = SSLFactory.wrapSocket(socket);
+                sslSocket = SSLFactory.getInstance().wrapSocket(socket);
 
                 // - send GET request
                 output = sslSocket.getOutputStream();

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/testserver/TestServer.java
Patch:
@@ -70,7 +70,7 @@ public void initChannel(SocketChannel ch) throws Exception {
                                     ChannelPipeline pipeline = ch.pipeline();
 
                                     pipeline.addLast("raw logger", new LoggingHandler("RAW TEST_SERVER_SSL"));
-                                    SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+                                    SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine();
                                     engine.setUseClientMode(false);
                                     pipeline.addLast("ssl", new SslHandler(engine));
                                     pipeline.addLast("logger", new LoggingHandler("TEST_SERVER_SSL"));

File: mockserver-jetty/src/main/java/org/mockserver/jetty/integration/proxy/SSLContextFactory.java
Patch:
@@ -13,10 +13,10 @@ public class SSLContextFactory {
     public static SslContextFactory createSSLContextFactory() {
         if (sslContextFactory == null) {
             sslContextFactory = new SslContextFactory();
-            sslContextFactory.setKeyStore(SSLFactory.buildKeyStore());
+            sslContextFactory.setKeyStore(SSLFactory.getInstance().buildKeyStore());
             sslContextFactory.setKeyStorePassword(SSLFactory.KEY_STORE_PASSWORD);
             sslContextFactory.checkKeyStore();
-            sslContextFactory.setTrustStore(SSLFactory.buildKeyStore());
+            sslContextFactory.setTrustStore(SSLFactory.getInstance().buildKeyStore());
         }
         return sslContextFactory;
     }

File: mockserver-jetty/src/test/java/org/mockserver/jetty/proxy/connect/ConnectHandlerTest.java
Patch:
@@ -162,7 +162,7 @@ public void shouldForwardRequestsToSecurePortUsingSocketDirectly() throws Except
             // Upgrade the socket to SSL
             SSLSocket sslSocket = null;
             try {
-                sslSocket = SSLFactory.wrapSocket(socket);
+                sslSocket = SSLFactory.getInstance().wrapSocket(socket);
                 output = sslSocket.getOutputStream();
 
                 // - send GET request for headers only
@@ -246,7 +246,7 @@ public void shouldForwardRequestsToUnknownPath() throws Exception {
             // Upgrade the socket to SSL
             SSLSocket sslSocket = null;
             try {
-                sslSocket = SSLFactory.wrapSocket(socket);
+                sslSocket = SSLFactory.getInstance().wrapSocket(socket);
 
                 // - send GET request
                 output = sslSocket.getOutputStream();

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerAbstractMojo.java
Patch:
@@ -36,7 +36,7 @@ public abstract class MockServerAbstractMojo extends AbstractMojo {
     /**
      * Logging level
      */
-    @Parameter(property = "mockserver.logLevel", defaultValue = "WARN")
+    @Parameter(property = "mockserver.logLevel", defaultValue = "INFO")
     protected String logLevel;
     /**
      * Skip the plugin execution completely

File: mockserver-netty/src/main/java/org/mockserver/logging/LoggingHandler.java
Patch:
@@ -204,11 +204,9 @@ private String formatByteBuf(String eventName, ByteBuf buf) {
 
         final int startIndex = buf.readerIndex();
         final int endIndex = buf.writerIndex();
-//        final int ninetyPercent = (endIndex > 0 ? (endIndex - startIndex)/90 : 0);
 
         int i;
         for (i = startIndex; i < endIndex; i++) {
-//        for (i = startIndex + ninetyPercent; i < endIndex; i++) {
             int relIdx = i - startIndex;
             int relIdxMod16 = relIdx & 15;
             if (relIdxMod16 == 0) {

File: mockserver-netty/src/main/java/org/mockserver/mockserver/MockServerInitializer.java
Patch:
@@ -36,7 +36,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
         // add HTTPS support
         if (secure) {
-            SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+            SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine();
             engine.setUseClientMode(false);
             pipeline.addLast("ssl", new SslHandler(engine));
         }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/ProxyUnificationHandler.java
Patch:
@@ -105,7 +105,7 @@ private boolean isHttp(ByteBuf msg) {
 
     private void enableSsl(ChannelHandlerContext ctx) {
         ChannelPipeline pipeline = ctx.pipeline();
-        SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+        SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine();
         engine.setUseClientMode(false);
         pipeline.addLast("ssl", new SslHandler(engine));
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/direct/DirectProxyUpstreamHandler.java
Patch:
@@ -82,7 +82,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
                         // add HTTPS proxy -> server support
                         if (secure) {
-                            SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+                            SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine();
                             engine.setUseClientMode(true);
                             pipeline.addLast("proxy -> server ssl", new SslHandler(engine));
                         }

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/RelayConnectHandler.java
Patch:
@@ -51,7 +51,7 @@ public void operationComplete(ChannelFuture channelFuture) throws Exception {
 
                                             // downstream
                                             if (secure) {
-                                                SSLEngine clientEngine = SSLFactory.sslContext().createSSLEngine();
+                                                SSLEngine clientEngine = SSLFactory.getInstance().sslContext().createSSLEngine();
                                                 clientEngine.setUseClientMode(true);
                                                 outboundChannel.pipeline().addLast("outbound relay ssl", new SslHandler(clientEngine));
                                             }
@@ -64,7 +64,7 @@ public void operationComplete(ChannelFuture channelFuture) throws Exception {
 
                                             // upstream
                                             if (secure) {
-                                                SSLEngine serverEngine = SSLFactory.sslContext().createSSLEngine();
+                                                SSLEngine serverEngine = SSLFactory.getInstance().sslContext().createSSLEngine();
                                                 serverEngine.setUseClientMode(false);
                                                 ctx.channel().pipeline().addLast("upstream relay ssl", new SslHandler(serverEngine));
                                             }

File: mockserver-netty/src/test/java/org/mockserver/proxy/StopClientProxyNettyIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@ public class StopClientProxyNettyIntegrationTest {
     private final static int serverSecurePort = PortFactory.findFreePort();
 
     @Test
-    public void clientCanClearServerExpectations() {
+    public void canStartAndStopMultipleTimes() {
         // start server
         HttpProxy httpProxy = new HttpProxyBuilder().withHTTPPort(serverPort).withHTTPSPort(serverSecurePort).build();
 

File: mockserver-netty/src/test/java/org/mockserver/server/StopClientServerNettyIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@ public class StopClientServerNettyIntegrationTest {
     private final static int serverSecurePort = PortFactory.findFreePort();
 
     @Test
-    public void clientCanClearServerExpectations() {
+    public void canStartAndStopMultipleTimes() {
         // start server
         MockServer mockServer = new MockServer(serverPort, serverSecurePort);
 

File: mockserver-vertx/src/main/java/org/mockserver/server/MockServerVertical.java
Patch:
@@ -147,7 +147,7 @@ public void start() {
         }
         if (securePort != -1) {
             startedMessage += " secure port " + securePort;
-            SSLFactory.buildKeyStore();
+            SSLFactory.getInstance().buildKeyStore();
             vertx.createHttpServer().requestHandler(requestHandler).setSSL(true).setKeyStorePath(SSLFactory.KEY_STORE_FILENAME).setKeyStorePassword(SSLFactory.KEY_STORE_PASSWORD).listen(securePort, "localhost");
         }
 

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarNoContextPathIntegrationTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockserver.socket.SSLFactory;
 
 import java.io.File;
-import java.util.concurrent.TimeUnit;
 
 /**
  * @author jamesdbloom
@@ -34,11 +33,11 @@ public static void startServer() throws Exception {
         tomcat.setPort(serverPort);
 
         // add https connector
-        SSLFactory.buildKeyStore();
+        SSLFactory.getInstance().buildKeyStore();
         Connector httpsConnector = new Connector();
         httpsConnector.setPort(serverSecurePort);
         httpsConnector.setSecure(true);
-        httpsConnector.setAttribute("keyAlias", SSLFactory.KEY_STORE_ALIAS);
+        httpsConnector.setAttribute("keyAlias", SSLFactory.KEY_STORE_CERT_ALIAS);
         httpsConnector.setAttribute("keystorePass", SSLFactory.KEY_STORE_PASSWORD);
         httpsConnector.setAttribute("keystoreFile", new File(SSLFactory.KEY_STORE_FILENAME).getAbsoluteFile());
         httpsConnector.setAttribute("sslProtocol", "TLS");

File: mockserver-war/src/test/java/org/mockserver/server/ClientServerWarWithContextPathIntegrationTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockserver.socket.SSLFactory;
 
 import java.io.File;
-import java.util.concurrent.TimeUnit;
 
 /**
  * @author jamesdbloom
@@ -34,11 +33,11 @@ public static void startServer() throws Exception {
         tomcat.setPort(serverPort);
 
         // add https connector
-        SSLFactory.buildKeyStore();
+        SSLFactory.getInstance().buildKeyStore();
         Connector httpsConnector = new Connector();
         httpsConnector.setPort(serverSecurePort);
         httpsConnector.setSecure(true);
-        httpsConnector.setAttribute("keyAlias", SSLFactory.KEY_STORE_ALIAS);
+        httpsConnector.setAttribute("keyAlias", SSLFactory.KEY_STORE_CERT_ALIAS);
         httpsConnector.setAttribute("keystorePass", SSLFactory.KEY_STORE_PASSWORD);
         httpsConnector.setAttribute("keystoreFile", new File(SSLFactory.KEY_STORE_FILENAME).getAbsoluteFile());
         httpsConnector.setAttribute("sslProtocol", "TLS");

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/NettyHttpProxyIntegrationTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.mockserver.client.proxy.ProxyClient;
-import org.mockserver.integration.testserver.TestServer;
 import org.mockserver.integration.proxy.AbstractClientSecureProxyIntegrationTest;
+import org.mockserver.integration.testserver.TestServer;
 import org.mockserver.socket.PortFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -25,7 +25,7 @@ public class NettyHttpProxyIntegrationTest extends AbstractClientSecureProxyInte
     private final static Integer PROXY_DIRECT_PORT = PortFactory.findFreePort();
     private final static Integer PROXY_DIRECT_SECURE_PORT = PortFactory.findFreePort();
     private static TestServer testServer = new TestServer();
-    private static HttpProxy httpProxy;
+    private static HttpProxy httpProxy = new HttpProxy();
     private static ProxyClient proxyClient;
 
     @BeforeClass
@@ -41,7 +41,7 @@ public static void setupFixture() throws Exception {
         testServer.startServer(SERVER_HTTP_PORT, SERVER_HTTPS_PORT);
 
         // start proxy
-        httpProxy = new HttpProxy(PROXY_HTTP_PORT, PROXY_HTTPS_PORT, PROXY_SOCKS_PORT, PROXY_DIRECT_PORT, PROXY_DIRECT_SECURE_PORT, "127.0.0.1", SERVER_HTTP_PORT);
+        httpProxy.start(PROXY_HTTP_PORT, PROXY_HTTPS_PORT, PROXY_SOCKS_PORT, PROXY_DIRECT_PORT, PROXY_DIRECT_SECURE_PORT, "127.0.0.1", SERVER_HTTP_PORT);
 
         // start client
         proxyClient = new ProxyClient("localhost", PROXY_HTTP_PORT);

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -117,7 +117,7 @@ String getJavaBin() {
 
     @VisibleForTesting
     String jarWithDependencies() {
-        Artifact jarWithDependencies = repositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5-SNAPSHOT", "jar", "jar-with-dependencies");
+        Artifact jarWithDependencies = repositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5", "jar", "jar-with-dependencies");
         artifactResolver.resolve(new ArtifactResolutionRequest().setArtifact(jarWithDependencies));
         getLog().debug("Running MockServer using " + jarWithDependencies.getFile().getAbsolutePath());
         return jarWithDependencies.getFile().getAbsolutePath();

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStartMojo.java
Patch:
@@ -3,6 +3,7 @@
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
+import org.mockserver.logging.Logging;
 
 /**
  * Start the MockServer in the initialize phase of the build and continue build so that tests can run that rely on the MockServer
@@ -13,11 +14,12 @@
 public class MockServerStartMojo extends MockServerAbstractMojo {
 
     public void execute() throws MojoExecutionException {
+        Logging.overrideLogLevel(logLevel);
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
             getLog().info("Starting MockServer on port " + serverPort);
-            getEmbeddedJettyHolder().start(serverPort, serverSecurePort, proxyPort, proxySecurePort, logLevel);
+            getEmbeddedJettyHolder().start(serverPort, serverSecurePort, proxyPort, proxySecurePort);
         }
 
     }

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugins.annotations.Mojo;
+import org.mockserver.logging.Logging;
 
 
 /**
@@ -13,10 +14,11 @@
 public class MockServerStopForkedMojo extends MockServerAbstractMojo {
 
     public void execute() throws MojoExecutionException {
+        Logging.overrideLogLevel(logLevel);
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getEmbeddedJettyHolder().stop(serverPort, proxyPort, logLevel);
+            getEmbeddedJettyHolder().stop(serverPort, proxyPort);
             if (serverPort != -1) {
                 getLog().info("Stopped MockServer running on port [" + serverPort + "]");
             }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerRunForkedMojoTest.java
Patch:
@@ -48,7 +48,7 @@ public void setupMocks() {
         initMocks(this);
 
         when(mockServerRunForkedMojo.getJavaBin()).thenReturn(javaBinaryPath);
-        when(mockRepositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5-SNAPSHOT", "jar", "jar-with-dependencies")).thenReturn(mockArtifact);
+        when(mockRepositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5", "jar", "jar-with-dependencies")).thenReturn(mockArtifact);
         when(mockArtifact.getFile()).thenReturn(new File(jarWithDependenciesPath));
         mockServerRunForkedMojo.logLevel = level;
     }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStartMojoTest.java
Patch:
@@ -32,13 +32,12 @@ public void shouldStartMockServer() throws MojoExecutionException {
         mockServerStartMojo.serverSecurePort = 2;
         mockServerStartMojo.proxyPort = 3;
         mockServerStartMojo.proxySecurePort = 4;
-        mockServerStartMojo.logLevel = "LEVEL";
 
         // when
         mockServerStartMojo.execute();
 
         // then
-        verify(mockEmbeddedJettyHolder).start(1, 2, 3, 4, "LEVEL");
+        verify(mockEmbeddedJettyHolder).start(1, 2, 3, 4);
     }
 
     @Test

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopForkedMojoTest.java
Patch:
@@ -29,13 +29,12 @@ public void shouldStopMockServerAndProxySuccessfully() throws MojoExecutionExcep
         // given
         mockServerStopForkedMojo.serverPort = 1;
         mockServerStopForkedMojo.proxyPort = 2;
-        mockServerStopForkedMojo.logLevel = "LEVEL";
 
         // when
         mockServerStopForkedMojo.execute();
 
         // then
-        verify(mockEmbeddedJettyHolder).stop(1, 2, "LEVEL");
+        verify(mockEmbeddedJettyHolder).stop(1, 2);
     }
 
     @Test

File: mockserver-core/src/main/java/org/mockserver/mock/MockServerMatcher.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * @author jamesdbloom
  */
-public class MockServer extends EqualsHashCodeToString {
+public class MockServerMatcher extends EqualsHashCodeToString {
 
     protected final List<Expectation> expectations = new ArrayList<Expectation>();
     private Logger requestLogger = LoggerFactory.getLogger("REQUEST");

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/testserver/TestServerHandler.java
Patch:
@@ -27,7 +27,6 @@
 import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_LENGTH;
 import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
 import static io.netty.handler.codec.http.HttpHeaders.is100ContinueExpected;
-import static io.netty.handler.codec.http.HttpHeaders.isKeepAlive;
 import static io.netty.handler.codec.http.HttpResponseStatus.*;
 import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
 

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -117,7 +117,7 @@ String getJavaBin() {
 
     @VisibleForTesting
     String jarWithDependencies() {
-        Artifact jarWithDependencies = repositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5-SNAPSHOT", "jar", "jar-with-dependencies");
+        Artifact jarWithDependencies = repositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5", "jar", "jar-with-dependencies");
         artifactResolver.resolve(new ArtifactResolutionRequest().setArtifact(jarWithDependencies));
         getLog().debug("Running MockServer using " + jarWithDependencies.getFile().getAbsolutePath());
         return jarWithDependencies.getFile().getAbsolutePath();

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStartMojo.java
Patch:
@@ -3,6 +3,7 @@
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
+import org.mockserver.logging.Logging;
 
 /**
  * Start the MockServer in the initialize phase of the build and continue build so that tests can run that rely on the MockServer
@@ -13,11 +14,12 @@
 public class MockServerStartMojo extends MockServerAbstractMojo {
 
     public void execute() throws MojoExecutionException {
+        Logging.overrideLogLevel(logLevel);
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
             getLog().info("Starting MockServer on port " + serverPort);
-            getEmbeddedJettyHolder().start(serverPort, serverSecurePort, proxyPort, proxySecurePort, logLevel);
+            getEmbeddedJettyHolder().start(serverPort, serverSecurePort, proxyPort, proxySecurePort);
         }
 
     }

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.plugins.annotations.Mojo;
+import org.mockserver.logging.Logging;
 
 
 /**
@@ -13,10 +14,11 @@
 public class MockServerStopForkedMojo extends MockServerAbstractMojo {
 
     public void execute() throws MojoExecutionException {
+        Logging.overrideLogLevel(logLevel);
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getEmbeddedJettyHolder().stop(serverPort, proxyPort, logLevel);
+            getEmbeddedJettyHolder().stop(serverPort, proxyPort);
             if (serverPort != -1) {
                 getLog().info("Stopped MockServer running on port [" + serverPort + "]");
             }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerRunForkedMojoTest.java
Patch:
@@ -48,7 +48,7 @@ public void setupMocks() {
         initMocks(this);
 
         when(mockServerRunForkedMojo.getJavaBin()).thenReturn(javaBinaryPath);
-        when(mockRepositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5-SNAPSHOT", "jar", "jar-with-dependencies")).thenReturn(mockArtifact);
+        when(mockRepositorySystem.createArtifactWithClassifier("org.mock-server", "mockserver-netty", "2.5", "jar", "jar-with-dependencies")).thenReturn(mockArtifact);
         when(mockArtifact.getFile()).thenReturn(new File(jarWithDependenciesPath));
         mockServerRunForkedMojo.logLevel = level;
     }

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStartMojoTest.java
Patch:
@@ -32,13 +32,12 @@ public void shouldStartMockServer() throws MojoExecutionException {
         mockServerStartMojo.serverSecurePort = 2;
         mockServerStartMojo.proxyPort = 3;
         mockServerStartMojo.proxySecurePort = 4;
-        mockServerStartMojo.logLevel = "LEVEL";
 
         // when
         mockServerStartMojo.execute();
 
         // then
-        verify(mockEmbeddedJettyHolder).start(1, 2, 3, 4, "LEVEL");
+        verify(mockEmbeddedJettyHolder).start(1, 2, 3, 4);
     }
 
     @Test

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopForkedMojoTest.java
Patch:
@@ -29,13 +29,12 @@ public void shouldStopMockServerAndProxySuccessfully() throws MojoExecutionExcep
         // given
         mockServerStopForkedMojo.serverPort = 1;
         mockServerStopForkedMojo.proxyPort = 2;
-        mockServerStopForkedMojo.logLevel = "LEVEL";
 
         // when
         mockServerStopForkedMojo.execute();
 
         // then
-        verify(mockEmbeddedJettyHolder).stop(1, 2, "LEVEL");
+        verify(mockEmbeddedJettyHolder).stop(1, 2);
     }
 
     @Test

File: mockserver-netty/src/main/java/org/mockserver/integration/ClientAndProxy.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.mockserver.client.proxy.ProxyClient;
 import org.mockserver.proxy.http.HttpProxy;
+import org.mockserver.proxy.http.HttpProxyBuilder;
 
 /**
  * @author jamesdbloom
@@ -12,12 +13,12 @@ public class ClientAndProxy extends ProxyClient {
 
     public ClientAndProxy(Integer port) {
         super("localhost", port);
-        httpProxy = new HttpProxy().startHttpProxy(port, null);
+        httpProxy = new HttpProxyBuilder().withHTTPPort(port).build();
     }
 
     public ClientAndProxy(Integer port, Integer securePort) {
         super("localhost", port);
-        httpProxy = new HttpProxy().startHttpProxy(port, securePort);
+        httpProxy = new HttpProxyBuilder().withHTTPPort(port).withHTTPSPort(securePort).build();
     }
 
     public static ClientAndProxy startClientAndProxy(Integer port) {

File: mockserver-netty/src/test/java/org/mockserver/proxy/http/NettyHttpProxyIntegrationTest.java
Patch:
@@ -41,7 +41,7 @@ public static void setupFixture() throws Exception {
         testServer.startServer(SERVER_HTTP_PORT, SERVER_HTTPS_PORT);
 
         // start proxy
-        httpProxy = new HttpProxy().startProxy(PROXY_HTTP_PORT, PROXY_HTTPS_PORT, PROXY_SOCKS_PORT, PROXY_DIRECT_PORT, PROXY_DIRECT_SECURE_PORT, "127.0.0.1", SERVER_HTTP_PORT);
+        httpProxy = new HttpProxy(PROXY_HTTP_PORT, PROXY_HTTPS_PORT, PROXY_SOCKS_PORT, PROXY_DIRECT_PORT, PROXY_DIRECT_SECURE_PORT, "127.0.0.1", SERVER_HTTP_PORT);
 
         // start client
         proxyClient = new ProxyClient("localhost", PROXY_HTTP_PORT);

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerAbstractMojoTest.java
Patch:
@@ -16,7 +16,7 @@
 public class MockServerAbstractMojoTest {
 
     @Mock
-    private EmbeddedJettyHolder embeddedJettyHolder;
+    private InstanceHolder embeddedJettyHolder;
 
     @InjectMocks
     private MockServerAbstractMojo mockServerAbstractMojo;

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStartMojoTest.java
Patch:
@@ -16,7 +16,7 @@
 public class MockServerStartMojoTest {
 
     @Mock
-    private EmbeddedJettyHolder mockEmbeddedJettyHolder;
+    private InstanceHolder mockEmbeddedJettyHolder;
     @InjectMocks
     private MockServerStartMojo mockServerStartMojo;
 

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopMojoTest.java
Patch:
@@ -16,7 +16,7 @@
 public class MockServerStopMojoTest {
 
     @Mock
-    private EmbeddedJettyHolder mockEmbeddedJettyHolder;
+    private InstanceHolder mockEmbeddedJettyHolder;
     @InjectMocks
     private MockServerStopMojo mockServerStopMojo;
 

File: mockserver-examples/src/main/java/org/mockserver/service/apacheclient/BookServiceApacheHttpClient.java
Patch:
@@ -65,7 +65,7 @@ private HttpClient createHttpClient() {
             DefaultProxyRoutePlanner defaultProxyRoutePlanner = new DefaultProxyRoutePlanner(httpHost);
             return HttpClients.custom().setRoutePlanner(defaultProxyRoutePlanner).build();
 //            todo - need to support SOCKS protocol for this solution to work - jamesdbloom 12/01/2014
-//            return HttpClients.custom().setRoutePlanner(new SystemDefaultRoutePlanner(PROXY_SELECTOR.getDefault())).build();
+//            return HttpClients.custom().setRoutePlanner(new SystemDefaultRoutePlanner(ProxySelector.getDefault())).build();
         } else {
             return HttpClients.custom().build();
         }

File: mockserver-examples/src/main/java/org/mockserver/service/grizzlyclient/BookServiceGrizzlyHttpClient.java
Patch:
@@ -8,7 +8,7 @@
 import org.codehaus.jackson.map.ObjectMapper;
 import org.codehaus.jackson.map.annotate.JsonSerialize;
 import org.mockserver.model.Book;
-import org.mockserver.jetty.proxy.ProxyRunner;
+import org.mockserver.proxy.http.HttpProxy;
 import org.mockserver.service.BookService;
 import org.springframework.core.env.Environment;
 import org.springframework.stereotype.Component;
@@ -59,7 +59,7 @@ private ObjectMapper createObjectMapper() {
     private AsyncHttpClient createHttpClient() {
         AsyncHttpClientConfig.Builder clientConfigBuilder = new AsyncHttpClientConfig.Builder();
         if (Boolean.parseBoolean(System.getProperty("proxySet"))) {
-            clientConfigBuilder.setProxyServerSelector(ProxyUtils.createProxyServerSelector(ProxyRunner.proxySelector()));
+            clientConfigBuilder.setProxyServerSelector(ProxyUtils.createProxyServerSelector(HttpProxy.proxySelector()));
         }
         return new AsyncHttpClient(clientConfigBuilder.build());
     }

File: mockserver-examples/src/test/java/org/mockserver/web/controller/BooksPageEndToEndIntegrationTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockserver.client.proxy.Times;
-import org.mockserver.jetty.integration.ClientAndProxy;
+import org.mockserver.integration.ClientAndProxy;
 import org.mockserver.model.Parameter;
 import org.mockserver.servicebackend.BookServer;
 import org.mockserver.socket.PortFactory;
@@ -18,7 +18,7 @@
 
 import javax.annotation.Resource;
 
-import static org.mockserver.jetty.integration.ClientAndProxy.startClientAndProxy;
+import static org.mockserver.integration.ClientAndProxy.startClientAndProxy;
 import static org.mockserver.model.HttpRequest.request;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/testserver/TestServerHandler.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package org.mockserver.helloworld;
+package org.mockserver.integration.testserver;
 
 import com.google.common.base.Charsets;
 import io.netty.buffer.Unpooled;
@@ -31,7 +31,7 @@
 import static io.netty.handler.codec.http.HttpResponseStatus.*;
 import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
 
-public class HttpHelloWorldServerHandler extends SimpleChannelInboundHandler<Object> {
+public class TestServerHandler extends SimpleChannelInboundHandler<Object> {
 
     @Override
     public void channelReadComplete(ChannelHandlerContext ctx) {

File: mockserver-jetty/src/main/java/org/mockserver/jetty/cli/Main.java
Patch:
@@ -38,7 +38,7 @@ public class Main {
             "        -proxySecurePort <path>    specifies the HTTPS port for the proxy          \n" +
             "                                   if neither proxyPort or proxySecurePort         \n" +
             "                                   are provide the MockServer is not started       \n";
-    private static final Logger logger = LoggerFactory.getLogger(MockServerRunner.class);
+    private static final Logger logger = LoggerFactory.getLogger(Main.class);
     @VisibleForTesting
     static ProxyRunner proxyRunner = new ProxyRunner();
     @VisibleForTesting

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerAbstractMojoTest.java
Patch:
@@ -16,7 +16,7 @@
 public class MockServerAbstractMojoTest {
 
     @Mock
-    private EmbeddedJettyHolder embeddedJettyHolder;
+    private InstanceHolder embeddedJettyHolder;
 
     @InjectMocks
     private MockServerAbstractMojo mockServerAbstractMojo;

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStartMojoTest.java
Patch:
@@ -16,7 +16,7 @@
 public class MockServerStartMojoTest {
 
     @Mock
-    private EmbeddedJettyHolder mockEmbeddedJettyHolder;
+    private InstanceHolder mockEmbeddedJettyHolder;
     @InjectMocks
     private MockServerStartMojo mockServerStartMojo;
 

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerStopMojoTest.java
Patch:
@@ -16,7 +16,7 @@
 public class MockServerStopMojoTest {
 
     @Mock
-    private EmbeddedJettyHolder mockEmbeddedJettyHolder;
+    private InstanceHolder mockEmbeddedJettyHolder;
     @InjectMocks
     private MockServerStopMojo mockServerStopMojo;
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/BasicHttpDecoder.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.proxy.http.relay;
+package org.mockserver.proxy.http.relay;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.http.HttpHeaders;

File: mockserver-netty/src/main/java/org/mockserver/proxy/http/relay/ProxyRelayHandler.java
Patch:
@@ -1,9 +1,9 @@
-package org.mockserver.netty.proxy.http.relay;
+package org.mockserver.proxy.http.relay;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.*;
-import org.mockserver.netty.proxy.interceptor.Interceptor;
+import org.mockserver.proxy.interceptor.Interceptor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: mockserver-netty/src/main/java/org/mockserver/proxy/interceptor/Interceptor.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.proxy.interceptor;
+package org.mockserver.proxy.interceptor;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;

File: mockserver-netty/src/main/java/org/mockserver/proxy/interceptor/RequestInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.proxy.interceptor;
+package org.mockserver.proxy.interceptor;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: mockserver-netty/src/main/java/org/mockserver/proxy/interceptor/ResponseInterceptor.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.netty.proxy.interceptor;
+package org.mockserver.proxy.interceptor;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;

File: mockserver-proxy-war/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -76,7 +76,9 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
     @Override
     protected void doPut(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException {
         String requestPath = httpServletRequest.getPathInfo() != null && httpServletRequest.getContextPath() != null ? httpServletRequest.getPathInfo() : httpServletRequest.getRequestURI();
-        if (requestPath.equals("/dumpToLog")) {
+        if (requestPath.equals("/stop")) {
+            httpServletResponse.setStatus(HttpStatusCode.NOT_IMPLEMENTED_501.code());
+        } else if (requestPath.equals("/dumpToLog")) {
             logFilter.dumpToLog(httpRequestSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest)), "java".equals(httpServletRequest.getParameter("type")));
             httpServletResponse.setStatus(HttpStatusCode.ACCEPTED_202.code());
         } else if (requestPath.equals("/retrieve")) {

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -38,7 +38,9 @@ public void doPost(HttpServletRequest httpServletRequest, HttpServletResponse ht
 
     public void doPut(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
         String requestPath = httpServletRequest.getPathInfo() != null && httpServletRequest.getContextPath() != null ? httpServletRequest.getPathInfo() : httpServletRequest.getRequestURI();
-        if (requestPath.equals("/dumpToLog")) {
+        if (requestPath.equals("/stop")) {
+            httpServletResponse.setStatus(HttpStatusCode.NOT_IMPLEMENTED_501.code());
+        } else if (requestPath.equals("/dumpToLog")) {
             mockServer.dumpToLog(httpRequestSerializer.deserialize(IOStreamUtils.readInputStreamToString(httpServletRequest)));
             httpServletResponse.setStatus(HttpStatusCode.ACCEPTED_202.code());
         } else if (requestPath.equals("/reset")) {

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/AbstractClientProxyIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@ protected HttpClient createHttpClient() throws Exception {
         return HttpClients
                 .custom()
                 .setRoutePlanner(defaultProxyRoutePlanner)
-                .setSslcontext(SSLFactory.sslContext())
+                .setSslcontext(SSLFactory.getClientContext())
                 .setHostnameVerifier(new AllowAllHostnameVerifier())
                 .build();
     }
@@ -122,6 +122,7 @@ public void shouldForwardRequestsToUnknownPath() throws Exception {
             output.write(("" +
                     "GET /unknown HTTP/1.1\r\n" +
                     "Host: localhost:" + getServerPort() + "\r\n" +
+                    "Connection: close\r\n" +
                     "\r\n"
             ).getBytes(Charsets.UTF_8));
             output.flush();

File: mockserver-integration-testing/src/main/java/org/mockserver/integration/proxy/ServerRunner.java
Patch:
@@ -48,7 +48,7 @@ public void startServer(int serverPort, int serverSecurePort) throws Exception {
         logger.trace("Loading key store from file [" + new File(SSLFactory.KEY_STORE_FILENAME).getAbsoluteFile() + "]");
         httpsConnector.setAttribute("keystoreFile", new File(SSLFactory.KEY_STORE_FILENAME).getAbsoluteFile());
         httpsConnector.setAttribute("clientAuth", "false");
-        httpsConnector.setAttribute("sslProtocol", "TLS");
+        httpsConnector.setAttribute("sslProtocol", "TLSv1");
         httpsConnector.setAttribute("SSLEnabled", true);
 
         Service service = tomcat.getService();

File: mockserver-netty/src/main/java/org/mockserver/netty/mockserver/MockServerInitializer.java
Patch:
@@ -21,7 +21,6 @@
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.ssl.SslHandler;
 import org.mockserver.mock.MockServer;
-import org.mockserver.netty.proxy.LoggingHandler;
 import org.mockserver.proxy.filters.LogFilter;
 import org.mockserver.socket.SSLFactory;
 
@@ -48,7 +47,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
         // add HTTPS support
         if (secure) {
-            SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+            SSLEngine engine = SSLFactory.getServerContext().createSSLEngine();
             engine.setUseClientMode(false);
             pipeline.addLast("ssl", new SslHandler(engine));
         }

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/direct/DirectProxyDownstreamInitializer.java
Patch:
@@ -20,7 +20,7 @@
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.socket.SocketChannel;
 import io.netty.handler.ssl.SslHandler;
-import org.mockserver.netty.proxy.LoggingHandler;
+import org.mockserver.netty.logging.LoggingHandler;
 import org.mockserver.socket.SSLFactory;
 
 import javax.net.ssl.SSLEngine;
@@ -44,7 +44,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
         // add HTTPS support
         if (secure) {
-            SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+            SSLEngine engine = SSLFactory.getServerContext().createSSLEngine();
             engine.setUseClientMode(false);
             pipeline.addLast("ssl", new SslHandler(engine));
         }

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/direct/DirectProxyInitializer.java
Patch:
@@ -44,7 +44,7 @@ public void initChannel(SocketChannel ch) throws Exception {
 
         // add HTTPS support
         if (secure) {
-            SSLEngine engine = SSLFactory.sslContext().createSSLEngine();
+            SSLEngine engine = SSLFactory.getServerContext().createSSLEngine();
             engine.setUseClientMode(false);
             pipeline.addLast("ssl", new SslHandler(engine));
         }

File: mockserver-netty/src/main/java/org/mockserver/netty/proxy/direct/DirectProxyUpstreamHandler.java
Patch:
@@ -123,7 +123,7 @@ public void callDecode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
                 if (httpChunk instanceof HttpRequest) {
                     HttpRequest httpRequest = (HttpRequest) httpChunk;
                     httpRequest.headers().remove(HttpHeaders.Names.ACCEPT_ENCODING);
-                    httpRequest.headers().set(HttpHeaders.Names.HOST, "www.mock-server.com");
+//                    httpRequest.headers().set(HttpHeaders.Names.HOST, "www.mock-server.com");
                     httpRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.CLOSE);
                 }
                 logger.warn("HTTP-FORMATTED -- " + httpChunk.getClass().getSimpleName() + " -- " + httpChunk);

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerRunAndWaitMojoTest.java
Patch:
@@ -60,7 +60,7 @@ public void shouldRunMockServerAndWaitIndefinitelyAndHandleInterruptedException(
         mockServerRunAndWaitMojo.logLevel = "LEVEL";
         mockServerRunAndWaitMojo.timeout = 0;
         when(mockEmbeddedJettyHolder.start(1, 2, 3, 4, "LEVEL")).thenReturn(mockServerRunner);
-        doThrow(new InterruptedException()).when(mockServerRunner).join();
+        doThrow(new InterruptedException("TEST EXCEPTION")).when(mockServerRunner).join();
 
         // when
         mockServerRunAndWaitMojo.execute();
@@ -80,7 +80,7 @@ public void shouldRunMockServerAndWaitForFixedPeriod() throws MojoExecutionExcep
         mockServerRunAndWaitMojo.logLevel = "LEVEL";
         mockServerRunAndWaitMojo.timeout = 2;
         when(mockEmbeddedJettyHolder.start(1, 2, 3, 4, "LEVEL")).thenReturn(mockServerRunner);
-        doThrow(new InterruptedException()).when(mockServerRunner).join(TimeUnit.SECONDS.toMillis(2));
+        doThrow(new InterruptedException("TEST EXCEPTION")).when(mockServerRunner).join(TimeUnit.SECONDS.toMillis(2));
 
         // when
         mockServerRunAndWaitMojo.execute();

File: mockserver-core/src/main/java/org/mockserver/proxy/filters/LogFilter.java
Patch:
@@ -23,7 +23,7 @@ public class LogFilter implements ProxyResponseFilter {
 
     private final CircularMultiMap<HttpRequest, HttpResponse> requestResponseLog = new CircularMultiMap<>(100, 100);
     private final MatcherBuilder matcherBuilder = new MatcherBuilder();
-    private Logger requestLogger = LoggerFactory.getLogger("request");
+    private Logger requestLogger = LoggerFactory.getLogger("REQUEST");
 
     public HttpResponse onResponse(HttpRequest httpRequest, HttpResponse httpResponse) {
         requestResponseLog.put(httpRequest, httpResponse);

File: mockserver-core/src/test/java/org/mockserver/model/HttpResponseTest.java
Patch:
@@ -60,7 +60,7 @@ public void appliesDelay() throws InterruptedException {
     public void applyDelayHandlesException() throws InterruptedException {
         // given
         TimeUnit timeUnit = mock(TimeUnit.class);
-        doThrow(new InterruptedException()).when(timeUnit).sleep(10);
+        doThrow(new InterruptedException("TEST EXCEPTION")).when(timeUnit).sleep(10);
 
         // when
         new HttpResponse().withDelay(new Delay(timeUnit, 10)).applyDelay();

File: mockserver-examples/src/main/java/org/mockserver/web/configuration/WebMvcConfiguration.java
Patch:
@@ -28,6 +28,7 @@ public void configureDefaultServletHandling(DefaultServletHandlerConfigurer conf
     }
 
     @Bean
+    @SuppressWarnings("serial")
     public FreeMarkerConfigurer freemarkerConfig() throws IOException, TemplateException {
         FreeMarkerConfigurer freeMarkerConfigurer = new FreeMarkerConfigurer();
         freeMarkerConfigurer.setTemplateLoaderPath("/");

File: mockserver-examples/src/test/java/org/mockserver/web/controller/apacheclient/BooksPageApacheClientIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockserver.configuration.RootConfiguration;
 import org.mockserver.web.configuration.WebMvcConfiguration;
 import org.mockserver.web.controller.BooksPageIntegrationTest;
+import org.mockserver.web.controller.PropertyMockingApplicationContextInitializer;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.ContextHierarchy;
@@ -19,7 +20,8 @@
         @ContextConfiguration(
                 classes = {
                         RootConfiguration.class
-                }
+                },
+                initializers = PropertyMockingApplicationContextInitializer.class
         ),
         @ContextConfiguration(
                 classes = {

File: mockserver-examples/src/test/java/org/mockserver/web/controller/grizzlyclient/BooksPageGrizzlyClientIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockserver.configuration.RootConfiguration;
 import org.mockserver.web.configuration.WebMvcConfiguration;
 import org.mockserver.web.controller.BooksPageIntegrationTest;
+import org.mockserver.web.controller.PropertyMockingApplicationContextInitializer;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.ContextHierarchy;
@@ -19,7 +20,8 @@
         @ContextConfiguration(
                 classes = {
                         RootConfiguration.class
-                }
+                },
+                initializers = PropertyMockingApplicationContextInitializer.class
         ),
         @ContextConfiguration(
                 classes = {

File: mockserver-examples/src/test/java/org/mockserver/web/controller/jerseyclient/BooksPageJerseyClientIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockserver.configuration.RootConfiguration;
 import org.mockserver.web.configuration.WebMvcConfiguration;
 import org.mockserver.web.controller.BooksPageIntegrationTest;
+import org.mockserver.web.controller.PropertyMockingApplicationContextInitializer;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.ContextHierarchy;
@@ -19,7 +20,8 @@
         @ContextConfiguration(
                 classes = {
                         RootConfiguration.class
-                }
+                },
+                initializers = PropertyMockingApplicationContextInitializer.class
         ),
         @ContextConfiguration(
                 classes = {

File: mockserver-examples/src/test/java/org/mockserver/web/controller/jettyclient/BooksPageJettyClientIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockserver.configuration.RootConfiguration;
 import org.mockserver.web.configuration.WebMvcConfiguration;
 import org.mockserver.web.controller.BooksPageIntegrationTest;
+import org.mockserver.web.controller.PropertyMockingApplicationContextInitializer;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.ContextHierarchy;
@@ -19,7 +20,8 @@
         @ContextConfiguration(
                 classes = {
                         RootConfiguration.class
-                }
+                },
+                initializers = PropertyMockingApplicationContextInitializer.class
         ),
         @ContextConfiguration(
                 classes = {

File: mockserver-examples/src/test/java/org/mockserver/web/controller/springclient/BooksPageSpringClientIntegrationTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockserver.configuration.RootConfiguration;
 import org.mockserver.web.configuration.WebMvcConfiguration;
 import org.mockserver.web.controller.BooksPageIntegrationTest;
+import org.mockserver.web.controller.PropertyMockingApplicationContextInitializer;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.ContextHierarchy;
@@ -19,7 +20,8 @@
         @ContextConfiguration(
                 classes = {
                         RootConfiguration.class
-                }
+                },
+                initializers = PropertyMockingApplicationContextInitializer.class
         ),
         @ContextConfiguration(
                 classes = {

File: mockserver-jetty/src/main/java/org/mockserver/runner/AbstractRunner.java
Patch:
@@ -176,7 +176,7 @@ public boolean isRunning() {
      * Stop this MockServer instance
      */
     public AbstractRunner<T> stop() {
-        if (!isRunning()) throw new IllegalStateException("Server is not running");
+        if (!isRunning()) throw new IllegalStateException(this.getClass().getSimpleName().replace("Runner", "") + " is not running");
         try {
             serverStopped();
             shutdownThread.stopListening();

File: mockserver-maven-plugin/src/test/java/org/mockserver/maven/MockServerRunAndWaitMojoTest.java
Patch:
@@ -60,7 +60,7 @@ public void shouldRunMockServerAndWaitIndefinitelyAndHandleInterruptedException(
         mockServerRunAndWaitMojo.logLevel = "LEVEL";
         mockServerRunAndWaitMojo.timeout = 0;
         when(mockEmbeddedJettyHolder.start(1, 2, 3, 4, "LEVEL")).thenReturn(mockServerRunner);
-        doThrow(new InterruptedException()).when(mockServerRunner).join();
+        doThrow(new InterruptedException("TEST EXCEPTION")).when(mockServerRunner).join();
 
         // when
         mockServerRunAndWaitMojo.execute();
@@ -80,7 +80,7 @@ public void shouldRunMockServerAndWaitForFixedPeriod() throws MojoExecutionExcep
         mockServerRunAndWaitMojo.logLevel = "LEVEL";
         mockServerRunAndWaitMojo.timeout = 2;
         when(mockEmbeddedJettyHolder.start(1, 2, 3, 4, "LEVEL")).thenReturn(mockServerRunner);
-        doThrow(new InterruptedException()).when(mockServerRunner).join(TimeUnit.SECONDS.toMillis(2));
+        doThrow(new InterruptedException("TEST EXCEPTION")).when(mockServerRunner).join(TimeUnit.SECONDS.toMillis(2));
 
         // when
         mockServerRunAndWaitMojo.execute();

File: mockserver-war/src/test/java/org/mockserver/mappers/HttpServletRequestMapperTest.java
Patch:
@@ -70,7 +70,7 @@ public void shouldHandleExceptionWhenReadingBody() throws IOException {
         Enumeration<String> enumeration = mock(Enumeration.class);
         when(enumeration.hasMoreElements()).thenReturn(false);
         when(httpServletRequest.getHeaderNames()).thenReturn(enumeration);
-        when(httpServletRequest.getInputStream()).thenThrow(new IOException());
+        when(httpServletRequest.getInputStream()).thenThrow(new IOException("TEST EXCEPTION"));
 
         // when
         new HttpServletRequestMapper().mapHttpServletRequestToHttpRequest(httpServletRequest);

File: mockserver-war/src/test/java/org/mockserver/mappers/HttpServletResponseMapperTest.java
Patch:
@@ -55,7 +55,7 @@ public void shouldHandleExceptionWhenReadingBody() throws IOException {
         httpResponse.withCookies(new Cookie("cookieName1", "cookieValue1"), new Cookie("cookieName2", "cookieValue2"));
         // - an HttpServletResponse
         HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
-        when(httpServletResponse.getOutputStream()).thenThrow(new IOException());
+        when(httpServletResponse.getOutputStream()).thenThrow(new IOException("TEST EXCEPTION"));
 
         // when
         new HttpServletResponseMapper().mapHttpResponseToHttpServletResponse(httpResponse, httpServletResponse);

File: mockserver-vertx/src/main/java/org/mockserver/server/MockServerVertical.java
Patch:
@@ -94,8 +94,8 @@ public static void overrideLogLevel(String level) {
     /**
      * Starts the MockServer verticle using system properties to override default port and logging level
      * <p/>
-     * -Dmockserver.port=<port> - override the default port (default: 8080)
-     * -Dmockserver.logLevel=<level> - override the default logging level (default: WARN)
+     * -Dmockserver.port=<port> - override the default port
+     * -Dmockserver.logLevel=<level> - override the default logging level
      */
     public void start() {
         int port = Integer.parseInt(System.getProperty("mockserver.port", "-1"));

File: mockserver-jetty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -21,7 +21,7 @@ public class Main {
     public static final String SERVER_PORT_KEY = "serverPort";
     public static final String SERVER_SECURE_PORT_KEY = "serverSecurePort";
     public static final String USAGE = "" +
-            "   java -jar <path to mockserver-jetty-2.0-SNAPSHOT-jar-with-dependencies.jar> [-serverPort <port>] [-proxyPort <port>]\n" +
+            "   java -jar <path to mockserver-jetty-2.0-SNAPSHOT-jar-with-dependencies.jar> [-serverPort <port>] [-serverSecurePort <port>] [-proxyPort <port>] [-proxySecurePort <port>]\n" +
             "   \n" +
             "     valid options are:\n" +
             "        -serverPort <port>         specifies the port for the MockServer           \n" +

File: mockserver-jetty/src/main/java/org/mockserver/proxy/ProxyServlet.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockserver.proxy;
 
-import org.apache.commons.lang3.StringUtils;
 import org.mockserver.client.http.HttpRequestClient;
 import org.mockserver.client.serialization.ExpectationSerializer;
 import org.mockserver.client.serialization.HttpRequestSerializer;
@@ -12,8 +11,6 @@
 import org.mockserver.model.HttpStatusCode;
 import org.mockserver.proxy.filters.*;
 import org.mockserver.streams.IOStreamUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -47,7 +47,7 @@ private void handlePOSTorGET(HttpServletRequest httpServletRequest, HttpServletR
     public void doPut(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
         switch (httpServletRequest.getPathInfo() != null && httpServletRequest.getContextPath() != null ? httpServletRequest.getPathInfo() : httpServletRequest.getRequestURI()) {
             case "/dumpToLog":
-                mockServer.dumpToLog(null);
+                mockServer.dumpToLog(httpRequestSerializer.deserialize(IOStreamUtils.readInputStreamToByteArray(httpServletRequest)));
                 httpServletResponse.setStatus(HttpStatusCode.ACCEPTED_202.code());
                 break;
             case "/reset":

File: mockserver-client/src/main/java/org/mockserver/client/http/HttpRequestClient.java
Patch:
@@ -77,7 +77,6 @@ private void configureHttpClient() {
 
     public ContentResponse sendPUTRequest(String baseUri, String body, String path) {
         try {
-            System.out.println("baseUri + path = " + baseUri + path);
             if (baseUri.endsWith("/") && path.startsWith("/")) {
                 path = StringUtils.substringAfter(path, "/");
             }

File: mockserver-war/src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -37,9 +37,7 @@ public void doPost(HttpServletRequest httpServletRequest, HttpServletResponse ht
     private void handlePOSTorGET(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
         HttpRequest httpRequest = httpServletRequestMapper.mapHttpServletRequestToHttpRequest(httpServletRequest);
         HttpResponse httpResponse = mockServer.handle(httpRequest);
-        System.out.println("httpRequest = " + httpRequest);
         if (httpResponse != null) {
-            System.out.println("httpResponse = " + httpResponse);
             httpServletResponseMapper.mapHttpResponseToHttpServletResponse(httpResponse, httpServletResponse);
         } else {
             httpServletResponse.setStatus(HttpStatusCode.NOT_FOUND_404.code());

File: mockserver-client/src/main/java/org/mockserver/client/http/HttpRequestClient.java
Patch:
@@ -17,7 +17,7 @@
 import org.eclipse.jetty.util.HttpCookieStore;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.mockserver.client.serialization.HttpRequestSerializer;
-import org.mockserver.mappers.HttpClientResponseMapper;
+import org.mockserver.mappers.jetty.HttpClientResponseMapper;
 import org.mockserver.model.Cookie;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpRequest;
@@ -26,7 +26,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.concurrent.TimeUnit;
 
 import static org.mockserver.configuration.SystemProperties.bufferSize;

File: mockserver-client/src/main/java/org/mockserver/mappers/jetty/HttpClientResponseMapper.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockserver.mappers;
+package org.mockserver.mappers.jetty;
 
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.Multimap;

File: mockserver-client/src/test/java/org/mockserver/mappers/jetty/HttpClientResponseMapperTest.java
Patch:
@@ -1,9 +1,10 @@
-package org.mockserver.mappers;
+package org.mockserver.mappers.jetty;
 
 import org.apache.commons.lang3.CharEncoding;
 import org.eclipse.jetty.client.api.Response;
 import org.eclipse.jetty.http.HttpFields;
 import org.junit.Test;
+import org.mockserver.mappers.jetty.HttpClientResponseMapper;
 import org.mockserver.model.Cookie;
 import org.mockserver.model.Header;
 import org.mockserver.model.HttpResponse;

File: mockserver-vertx/src/main/java/org/mockserver/server/MockServerVertical.java
Patch:
@@ -64,8 +64,8 @@ public void handle() {
                         } else {
                             request.response().setStatusCode(HttpStatusCode.NOT_FOUND_404.code());
                             request.response().setStatusMessage(HttpStatusCode.NOT_FOUND_404.reasonPhrase());
+                            request.response().end();
                         }
-                        request.response().end();
                     }
                 }
             });

File: mockserver-jetty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -52,14 +52,15 @@ public class Main {
      */
     public static void main(String... arguments) {
         Map<String, Integer> parseArguments = parseArguments(arguments);
-        AbstractRunner.overrideLogLevel(System.getProperty("mockserver.logLevel"));
 
         if (parseArguments.size() > 0) {
             if (parseArguments.containsKey(PROXY_PORT_KEY) || parseArguments.containsKey(PROXY_SECURE_PORT_KEY)) {
+                proxyRunner.overrideLogLevel(System.getProperty("mockserver.logLevel"));
                 proxyRunner.start(parseArguments.get(PROXY_PORT_KEY), parseArguments.get(PROXY_SECURE_PORT_KEY));
             }
 
             if (parseArguments.containsKey(SERVER_PORT_KEY) || parseArguments.containsKey(SERVER_SECURE_PORT_KEY)) {
+                mockServerRunner.overrideLogLevel(System.getProperty("mockserver.logLevel"));
                 mockServerRunner.start(parseArguments.get(SERVER_PORT_KEY), parseArguments.get(SERVER_SECURE_PORT_KEY));
             }
         } else {

File: mockserver-jetty/src/test/java/org/mockserver/proxy/ClientProxyEmbeddedJettyCommandLineIntegrationTest.java
Patch:
@@ -25,7 +25,7 @@ public static void startProxy() throws InterruptedException {
 
     @AfterClass
     public static void stopProxy() {
-        MockServerRunner.stopRemote("127.0.0.1", proxyPort + 1, "STOP_KEY", 500);
+        new MockServerRunner().stop("127.0.0.1", proxyPort + 1, "STOP_KEY", 500);
     }
 
     @Before

File: mockserver-jetty/src/test/java/org/mockserver/server/ClientServerEmbeddedJettyCommandLineIntegrationTest.java
Patch:
@@ -25,7 +25,7 @@ public static void startServer() throws InterruptedException {
 
     @AfterClass
     public static void stopServer() {
-        MockServerRunner.stopRemote("127.0.0.1", serverPort + 1, "STOP_KEY", 500);
+        new MockServerRunner().stop("127.0.0.1", serverPort + 1, "STOP_KEY", 500);
     }
 
     @Before

File: mockserver-jetty/src/main/java/org/mockserver/cli/Main.java
Patch:
@@ -48,6 +48,9 @@ public static void main(String... arguments) {
     private static Map<String, Integer> parseArguments(String... arguments) {
         Map<String, Integer> parsedArguments = new HashMap<>();
         Iterator<String> argumentsIterator = Arrays.asList(arguments).iterator();
+        for (int i = 0; i < arguments.length; i++) {
+            System.out.println("arguments[" + i + "] = " + arguments[i]);
+        }
         while (argumentsIterator.hasNext()) {
             String argumentName = argumentsIterator.next();
             if (argumentsIterator.hasNext()) {

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/EmbeddedJettyHolder.java
Patch:
@@ -16,15 +16,15 @@ public Future start(final int port, final String logLevel) {
             EmbeddedJettyRunner.overrideLogLevel(logLevel);
             return embeddedJettyRunner.start(port);
         } else {
-            throw new IllegalStateException("Mock Server is already running!");
+            throw new IllegalStateException("MockServer is already running!");
         }
     }
 
     public void stop() {
         if (embeddedJettyRunner.isRunning()) {
             embeddedJettyRunner.stop();
         } else {
-            throw new IllegalStateException("Mock Server is not running!");
+            throw new IllegalStateException("MockServer is not running!");
         }
     }
 }

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopMojo.java
Patch:
@@ -8,7 +8,7 @@
 import org.apache.maven.plugins.annotations.Parameter;
 
 /**
- * Stop the Mock Server in the verify phase of the build after any integration tests have completed
+ * Stop the MockServer in the verify phase of the build after any integration tests have completed
  *
  * @author jamesdbloom
  */
@@ -26,7 +26,7 @@ public void execute() throws MojoExecutionException {
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getLog().info("Stopping the Mock Server");
+            getLog().info("Stopping the MockServer");
             try {
                 new EmbeddedJettyHolder().stop();
             } catch (Exception e) {

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/EmbeddedJettyHolder.java
Patch:
@@ -16,15 +16,15 @@ public Future start(final int port, final String logLevel) {
             EmbeddedJettyRunner.overrideLogLevel(logLevel);
             return embeddedJettyRunner.start(port);
         } else {
-            throw new IllegalStateException("Mock Server is already running!");
+            throw new IllegalStateException("MockServer is already running!");
         }
     }
 
     public void stop() {
         if (embeddedJettyRunner.isRunning()) {
             embeddedJettyRunner.stop();
         } else {
-            throw new IllegalStateException("Mock Server is not running!");
+            throw new IllegalStateException("MockServer is not running!");
         }
     }
 }

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopMojo.java
Patch:
@@ -8,7 +8,7 @@
 import org.apache.maven.plugins.annotations.Parameter;
 
 /**
- * Stop the Mock Server in the verify phase of the build after any integration tests have completed
+ * Stop the MockServer in the verify phase of the build after any integration tests have completed
  *
  * @author jamesdbloom
  */
@@ -26,7 +26,7 @@ public void execute() throws MojoExecutionException {
         if (skip) {
             getLog().info("Skipping plugin execution");
         } else {
-            getLog().info("Stopping the Mock Server");
+            getLog().info("Stopping the MockServer");
             try {
                 new EmbeddedJettyHolder().stop();
             } catch (Exception e) {

File: mockserver-vertx/src/test/java/org/mockserver/server/MockServerVerticalTest.java
Patch:
@@ -100,14 +100,14 @@ public void setupExpectation() throws IOException {
         HttpRequest httpRequest = new HttpRequest();
         Expectation expectation = spy(new Expectation(httpRequest, times).respond(new HttpResponse()));
         when(expectationSerializer.deserialize(httpServerRequest.body())).thenReturn(expectation);
-        // - an mock server that returns the deserialized expectation
+        // - an MockServer that returns the deserialized expectation
         when(mockServer.when(same(httpRequest), same(times))).thenReturn(expectation);
 
         // when - receive an expectation request
         mockServerVertical.getRequestHandler().handle(httpServerRequest);
 
         // then
-        // - expectation is added to mock server
+        // - expectation is added to MockServer
         verify(mockServer).when(same(httpRequest), same(times));
         verify(expectation).respond(expectation.getHttpResponse());
         // - and response code is set

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -63,7 +63,7 @@ public void execute() throws MojoExecutionException {
                     "-Dmockserver.stopPort=" + stopPort,
                     "-Dmockserver.stopKey=" + stopKey,
 //                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006",
-                    "-jar", "/Users/jamesdbloom/git/mockservice/mockserver-jetty/target/mockserver-jetty-1.11-SNAPSHOT-jar-with-dependencies.jar", "" + port
+                    "-jar", "~/.m2/repository/org/mock-server/mockserver-jetty/1.11-SNAPSHOT/mockserver-jetty-1.11-SNAPSHOT-jar-with-dependencies.jar", "" + port
             );
             if (pipeLogToConsole) {
                 processBuilder.redirectErrorStream(true);

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunForkedMojo.java
Patch:
@@ -63,7 +63,7 @@ public void execute() throws MojoExecutionException {
                     "-Dmockserver.stopPort=" + stopPort,
                     "-Dmockserver.stopKey=" + stopKey,
 //                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006",
-                    "-jar", "/Users/jamesdbloom/git/mockservice/mockserver-jetty/target/mockserver-jetty-1.11-SNAPSHOT-jar-with-dependencies.jar", "" + port
+                    "-jar", "~/.m2/repository/org/mock-server/mockserver-jetty/1.11-SNAPSHOT/mockserver-jetty-1.11-SNAPSHOT-jar-with-dependencies.jar", "" + port
             );
             if (pipeLogToConsole) {
                 processBuilder.redirectErrorStream(true);

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/EmbeddedJettyHolder.java
Patch:
@@ -16,15 +16,15 @@ public Future start(final int port, final String logLevel) {
             EmbeddedJettyRunner.overrideLogLevel(logLevel);
             return embeddedJettyRunner.start(port);
         } else {
-            throw new IllegalStateException("Server is already running!");
+            throw new IllegalStateException("Mock Server is already running!");
         }
     }
 
     public void stop() {
         if (embeddedJettyRunner.isRunning()) {
             embeddedJettyRunner.stop();
         } else {
-            throw new IllegalStateException("Server is not running!");
+            throw new IllegalStateException("Mock Server is not running!");
         }
     }
 }

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunAndWaitMojo.java
Patch:
@@ -19,7 +19,7 @@ public class MockServerRunAndWaitMojo extends AbstractMojo {
     /**
      * The port to run Mock Server on
      */
-    @Parameter(property = "mockserver.port", defaultValue = "9090")
+    @Parameter(property = "mockserver.port", defaultValue = "8080")
     private int port;
 
     /**

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStartMojo.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugins.annotations.Execute;
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
@@ -12,13 +13,14 @@
  * @author jamesdbloom
  */
 @Mojo(name = "start", defaultPhase = LifecyclePhase.INITIALIZE)
+//@Execute(goal = "start", phase = LifecyclePhase.INITIALIZE)
 public class MockServerStartMojo extends AbstractMojo {
 
 
     /**
      * The port to run Mock Server on
      */
-    @Parameter(property = "mockserver.port", defaultValue = "9090")
+    @Parameter(property = "mockserver.port", defaultValue = "8080")
     private int port;
 
     /**

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -18,7 +18,7 @@ public class MockServerStopForkedMojo extends AbstractMojo {
     /**
      * The port to stop Mock Server
      */
-    @Parameter(property = "mockserver.stopPort", defaultValue = "9091")
+    @Parameter(property = "mockserver.stopPort", defaultValue = "8081")
     private int stopPort;
 
     /**

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopMojo.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugins.annotations.Execute;
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
@@ -12,13 +13,14 @@
  * @author jamesdbloom
  */
 @Mojo(name = "stop", defaultPhase = LifecyclePhase.VERIFY)
+//@Execute(goal = "stop", phase = LifecyclePhase.VERIFY)
 public class MockServerStopMojo extends AbstractMojo {
 
     /**
      * Skip plugin execution completely.
      */
     @Parameter(property = "mockserver.skip", defaultValue = "false")
-    private boolean skip = false;
+    private boolean skip;
 
     public void execute() throws MojoExecutionException {
         if (skip) {

File: mockserver-client/src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -18,12 +18,10 @@ public class MockServerClient {
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
     private final String mockServerURI;
-    private final int port;
 
     private ExpectationSerializer expectationSerializer = new ExpectationSerializer();
 
     public MockServerClient(String host, int port) {
-        this.port = port;
         mockServerURI = "http://" + host + ":" + port + "/";
     }
 

File: mockserver-jetty/src/main/java/org/mockserver/server/EmbeddedJettyRunner.java
Patch:
@@ -5,6 +5,7 @@
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.ShutdownMonitor;
 import org.eclipse.jetty.servlet.ServletHandler;
+import org.eclipse.jetty.util.thread.ShutdownThread;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -66,6 +67,7 @@ public Future start(final int port) {
             @Override
             public void run() {
                 server = new Server(port);
+                ShutdownThread.register(server);
                 ServletHandler handler = new ServletHandler();
                 server.setHandler(handler);
                 handler.addServletWithMapping(MockServerServlet.class.getName(), "/");

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/EmbeddedJettyHolder.java
Patch:
@@ -16,15 +16,15 @@ public Future start(final int port, final String logLevel) {
             EmbeddedJettyRunner.overrideLogLevel(logLevel);
             return embeddedJettyRunner.start(port);
         } else {
-            throw new IllegalStateException("Server is already running!");
+            throw new IllegalStateException("Mock Server is already running!");
         }
     }
 
     public void stop() {
         if (embeddedJettyRunner.isRunning()) {
             embeddedJettyRunner.stop();
         } else {
-            throw new IllegalStateException("Server is not running!");
+            throw new IllegalStateException("Mock Server is not running!");
         }
     }
 }

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerRunAndWaitMojo.java
Patch:
@@ -19,7 +19,7 @@ public class MockServerRunAndWaitMojo extends AbstractMojo {
     /**
      * The port to run Mock Server on
      */
-    @Parameter(property = "mockserver.port", defaultValue = "9090")
+    @Parameter(property = "mockserver.port", defaultValue = "8080")
     private int port;
 
     /**

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStartMojo.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugins.annotations.Execute;
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
@@ -12,13 +13,14 @@
  * @author jamesdbloom
  */
 @Mojo(name = "start", defaultPhase = LifecyclePhase.INITIALIZE)
+//@Execute(goal = "start", phase = LifecyclePhase.INITIALIZE)
 public class MockServerStartMojo extends AbstractMojo {
 
 
     /**
      * The port to run Mock Server on
      */
-    @Parameter(property = "mockserver.port", defaultValue = "9090")
+    @Parameter(property = "mockserver.port", defaultValue = "8080")
     private int port;
 
     /**

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopForkedMojo.java
Patch:
@@ -18,7 +18,7 @@ public class MockServerStopForkedMojo extends AbstractMojo {
     /**
      * The port to stop Mock Server
      */
-    @Parameter(property = "mockserver.stopPort", defaultValue = "9091")
+    @Parameter(property = "mockserver.stopPort", defaultValue = "8081")
     private int stopPort;
 
     /**

File: mockserver-maven-plugin/src/main/java/org/mockserver/maven/MockServerStopMojo.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugins.annotations.Execute;
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
@@ -12,13 +13,14 @@
  * @author jamesdbloom
  */
 @Mojo(name = "stop", defaultPhase = LifecyclePhase.VERIFY)
+//@Execute(goal = "stop", phase = LifecyclePhase.VERIFY)
 public class MockServerStopMojo extends AbstractMojo {
 
     /**
      * Skip plugin execution completely.
      */
     @Parameter(property = "mockserver.skip", defaultValue = "false")
-    private boolean skip = false;
+    private boolean skip;
 
     public void execute() throws MojoExecutionException {
         if (skip) {

File: mockserver-core/src/main/java/org/mockserver/mock/Expectation.java
Patch:
@@ -26,7 +26,7 @@ public HttpRequest getHttpRequest() {
     }
 
     public HttpResponse getHttpResponse() {
-        return httpResponse.applyDelay();
+        return (httpResponse != null ? httpResponse.applyDelay() : null);
     }
 
     public Times getTimes() {

File: mockserver-jetty/src/main/java/org/mockserver/server/EmbeddedJettyRunner.java
Patch:
@@ -135,7 +135,7 @@ public EmbeddedJettyRunner stop() {
      * @param ipAddress IP address as string of remote Mock Server (i.e. "127.0.0.1")
      * @param stopPort the stopPort for the Mock Server to stop (default is HTTP port + 1)
      * @param stopKey the stopKey for the Mock Server to step (default is "STOP_KEY")
-     * @param stopWait the period to wait for Mock Server to confirm it has stopped, in milliseconds.  A value of <= 0 means do not wait for confirmation Mock Server has stopped.
+     * @param stopWait the period to wait for Mock Server to confirm it has stopped, in seconds.  A value of <= 0 means do not wait for confirmation Mock Server has stopped.
      */
     public static void stopRemote(String ipAddress, int stopPort, String stopKey, int stopWait) {
         if (stopPort <= 0)

File: mockserver-jetty/src/test/java/org/mockserver/ClientServerEmbeddedJettyIntegrationTest.java
Patch:
@@ -30,7 +30,8 @@ public class ClientServerEmbeddedJettyIntegrationTest {
 
     @Before
     public void startServerAndCreateClient() {
-        embeddedJettyRunner = new EmbeddedJettyRunner(8090);
+        embeddedJettyRunner = new EmbeddedJettyRunner();
+        embeddedJettyRunner.start(8090);
         mockServerClient = new MockServerClient("localhost", 8090);
     }
 

File: src/main/java/org/mockserver/server/EmbeddedJettyRunner.java
Patch:
@@ -16,7 +16,8 @@ public class EmbeddedJettyRunner {
     public static void main(String[] args) throws Exception {
         int port = args.length == 1 ? Integer.parseInt(args[0]) : 8080;
         new EmbeddedJettyRunner(port);
-        logger.warn("Started mock server listening on " + port);
+        logger.info("Started mock server listening on " + port);
+        System.out.println("Started mock server listening on " + port);
     }
 
     public EmbeddedJettyRunner(int port) {
@@ -30,7 +31,7 @@ public EmbeddedJettyRunner(int port) {
             server.start();
         } catch (Exception e) {
             logger.error("Failed to start embedded jetty server", e);
-            throw new RuntimeException("Failed to start embedded jetty server", e);
+            System.exit(1);
         }
     }
 

File: src/main/java/org/mockserver/client/serialization/ExpectationSerializer.java
Patch:
@@ -35,7 +35,7 @@ public Expectation deserialize(InputStream inputStream) {
         Expectation expectation = null;
         try {
             byte[] jsonExpectation = IOUtils.toByteArray(new InputStreamReader(inputStream), Charset.forName(CharEncoding.UTF_8));
-            logger.debug("Received JSON expectation:\n" + new String(jsonExpectation));
+            logger.debug("Received JSON expectation:\n" + new String(jsonExpectation, Charset.forName(CharEncoding.UTF_8)));
             ExpectationDTO expectationDTO = objectMapper.readValue(jsonExpectation, ExpectationDTO.class);
             if (expectationDTO != null) {
                 expectation = expectationDTO.buildObject();

File: src/main/java/org/mockserver/client/MockServerClient.java
Patch:
@@ -36,7 +36,7 @@ public void sendExpectation(Expectation expectation) {
         HttpClient httpClient = new HttpClient();
         try {
             httpClient.start();
-            httpClient.newRequest(mockServerURI).method(HttpMethod.PUT).content(new StringContentProvider(expectationSerializer.serialize(expectation))).send();
+            httpClient.newRequest(mockServerURI).method(HttpMethod.PUT).header("Content-Type", "application/json; charset=utf-8").content(new StringContentProvider(expectationSerializer.serialize(expectation))).send();
         } catch (Exception e) {
             logger.error(String.format("Exception sending expectation to MockServer as %s", expectation), e);
             throw new RuntimeException(String.format("Exception sending expectation to MockServer as %s", expectation), e);

File: src/main/java/org/mockserver/server/MockServerServlet.java
Patch:
@@ -3,6 +3,7 @@
 import org.mockserver.client.serialization.ExpectationSerializer;
 import org.mockserver.mappers.HttpServletRequestMapper;
 import org.mockserver.mappers.HttpServletResponseMapper;
+import org.mockserver.mock.Expectation;
 import org.mockserver.mock.MockServer;
 import org.mockserver.model.HttpRequest;
 import org.mockserver.model.HttpResponse;
@@ -44,7 +45,8 @@ private void doPOSTandGET(HttpServletRequest httpServletRequest, HttpServletResp
     }
 
     public void doPut(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException {
-        mockServer.addExpectation(expectationSerializer.deserialize(httpServletRequest.getInputStream()));
+        Expectation expectation = expectationSerializer.deserialize(httpServletRequest.getInputStream());
+        mockServer.when(expectation.getHttpRequest(), expectation.getTimes()).respond(expectation.getHttpResponse());
         httpServletResponse.setStatus(HttpServletResponse.SC_CREATED);
     }
 

File: src/main/java/org/jamesdbloom/mockserver/model/ModelObject.java
Patch:
@@ -15,7 +15,7 @@ public abstract class ModelObject {
 
     @Override
     public String toString() {
-        return ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX_STYLE);
+        return ReflectionToStringBuilder.toStringExclude(this, "logger");
     }
 
     @Override

File: src/test/java/org/jamesdbloom/mockserver/client/serialization/ExpectationSerializerTest.java
Patch:
@@ -30,6 +30,7 @@ public class ExpectationSerializerTest {
 
     private final Expectation fullExpectation = new Expectation(
             new HttpRequest()
+                    .withMethod("GET")
                     .withPath("somepath")
                     .withBody("somebody")
                     .withHeaders(new Header("headerName", "headerValue"))
@@ -46,6 +47,7 @@ public class ExpectationSerializerTest {
     private final ExpectationDTO fullExpectationDTO = new ExpectationDTO()
             .setHttpRequest(
                     new HttpRequestDTO()
+                            .setMethod("GET")
                             .setPath("somepath")
                             .setBody("somebody")
                             .setHeaders(Arrays.<HeaderDTO>asList((HeaderDTO) new HeaderDTO(new Header("headerName", Arrays.asList("headerValue")))))

File: src/main/java/org/jamesdbloom/mockserver/client/ForwardChainExpectation.java
Patch:
@@ -1,7 +1,6 @@
 package org.jamesdbloom.mockserver.client;
 
 import com.google.common.annotations.VisibleForTesting;
-import org.jamesdbloom.mockserver.client.serialization.model.ExpectationDTO;
 import org.jamesdbloom.mockserver.mock.Expectation;
 import org.jamesdbloom.mockserver.model.HttpResponse;
 

File: src/main/java/org/jamesdbloom/mockserver/client/MockServerClient.java
Patch:
@@ -4,7 +4,6 @@
 import org.eclipse.jetty.client.util.StringContentProvider;
 import org.eclipse.jetty.http.HttpMethod;
 import org.jamesdbloom.mockserver.client.serialization.ExpectationSerializer;
-import org.jamesdbloom.mockserver.client.serialization.model.ExpectationDTO;
 import org.jamesdbloom.mockserver.matchers.Times;
 import org.jamesdbloom.mockserver.mock.Expectation;
 import org.jamesdbloom.mockserver.model.HttpRequest;

File: src/main/java/org/jamesdbloom/mockserver/client/serialization/model/CookieDTO.java
Patch:
@@ -1,9 +1,6 @@
 package org.jamesdbloom.mockserver.client.serialization.model;
 
-import org.codehaus.jackson.annotate.JsonCreator;
-import org.codehaus.jackson.annotate.JsonProperty;
 import org.jamesdbloom.mockserver.model.Cookie;
-import org.jamesdbloom.mockserver.model.KeyToMultiValue;
 
 /**
  * @author jamesdbloom
@@ -13,4 +10,7 @@ public class CookieDTO extends KeyToMultiValueDTO<String, String> {
     public CookieDTO(Cookie cookie) {
         super(cookie);
     }
+
+    public CookieDTO() {
+    }
 }

File: src/main/java/org/jamesdbloom/mockserver/client/serialization/model/HeaderDTO.java
Patch:
@@ -1,9 +1,6 @@
 package org.jamesdbloom.mockserver.client.serialization.model;
 
-import org.codehaus.jackson.annotate.JsonCreator;
-import org.codehaus.jackson.annotate.JsonProperty;
 import org.jamesdbloom.mockserver.model.Header;
-import org.jamesdbloom.mockserver.model.KeyToMultiValue;
 
 /**
  * @author jamesdbloom
@@ -13,4 +10,7 @@ public class HeaderDTO extends KeyToMultiValueDTO<String, String> {
     public HeaderDTO(Header header) {
         super(header);
     }
+
+    public HeaderDTO() {
+    }
 }

File: src/main/java/org/jamesdbloom/mockserver/client/serialization/model/ParameterDTO.java
Patch:
@@ -1,8 +1,5 @@
 package org.jamesdbloom.mockserver.client.serialization.model;
 
-import org.codehaus.jackson.annotate.JsonCreator;
-import org.codehaus.jackson.annotate.JsonProperty;
-import org.jamesdbloom.mockserver.model.KeyToMultiValue;
 import org.jamesdbloom.mockserver.model.Parameter;
 
 /**
@@ -13,4 +10,7 @@ public class ParameterDTO extends KeyToMultiValueDTO<String, String> {
     public ParameterDTO(Parameter parameter) {
         super(parameter);
     }
+
+    public ParameterDTO() {
+    }
 }

File: src/main/java/org/jamesdbloom/mockserver/matchers/HttpRequestMatcher.java
Patch:
@@ -1,13 +1,13 @@
 package org.jamesdbloom.mockserver.matchers;
 
-import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
-
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.jamesdbloom.mockserver.model.*;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
+
 /**
  * @author jamesdbloom
  */

File: src/main/java/org/jamesdbloom/mockserver/matchers/MapMatcher.java
Patch:
@@ -1,7 +1,5 @@
 package org.jamesdbloom.mockserver.matchers;
 
-import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
-
 import com.google.common.collect.Multimap;
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.annotate.JsonCreator;
@@ -11,6 +9,8 @@
 
 import java.util.List;
 
+import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
+
 /**
  * @author jamesdbloom
  */

File: src/main/java/org/jamesdbloom/mockserver/matchers/StringMatcher.java
Patch:
@@ -1,13 +1,13 @@
 package org.jamesdbloom.mockserver.matchers;
 
-import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
-
 import com.google.common.base.Strings;
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.annotate.JsonCreator;
 import org.codehaus.jackson.annotate.JsonProperty;
 import org.jamesdbloom.mockserver.model.ModelObject;
 
+import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;
+
 /**
  * @author jamesdbloom
  */

File: src/main/java/org/jamesdbloom/mockserver/mock/MockServer.java
Patch:
@@ -3,7 +3,6 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Collections2;
 import org.jamesdbloom.mockserver.mappers.ExpectationMapper;
-import org.jamesdbloom.mockserver.matchers.HttpRequestMatcher;
 import org.jamesdbloom.mockserver.matchers.Times;
 import org.jamesdbloom.mockserver.model.HttpRequest;
 import org.jamesdbloom.mockserver.model.HttpResponse;

