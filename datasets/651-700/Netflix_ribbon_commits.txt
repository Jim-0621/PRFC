File: ribbon-core/src/main/java/com/netflix/client/config/ReloadableClientConfig.java
Patch:
@@ -147,7 +147,7 @@ private <T> void autoRefreshFromPropertyResolver(final IClientConfigKey<T> key)
                 final Optional<T> next = valueSupplier.get();
                 if (!next.equals(previous.get())) {
                     LOG.info("[{}] new value for {}: {} -> {}", clientName, key.key(), previous.get(), next);
-                    previous.set(next);
+                    previous.set(next); 
                     internalProperties.put(key, next);
                 }
             };

File: ribbon-archaius/src/main/java/com/netflix/client/config/ArchaiusPropertyResolver.java
Patch:
@@ -64,7 +64,7 @@ public <T> Optional<T> get(String key, Class<T> type) {
                         if (type.equals(String.class)) {
                             return (T)value;
                         } else {
-                            return PropertyResolver.resolveWithValueOf(type, value)
+                            return PropertyUtils.resolveWithValueOf(type, value)
                                     .orElseThrow(() -> new IllegalArgumentException("Unable to convert value to desired type " + type));
                         }
                     });

File: ribbon-core/src/test/java/com/netflix/client/config/DefaultClientConfigImplTest.java
Patch:
@@ -27,13 +27,13 @@ protected NewConfigKey(String configKey) {
     
     @Test
     public void testTypedValue() {
-        ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1000");    
+        ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1500");
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
         config.loadProperties("myclient");
-        assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
+        assertEquals(1500, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
         config.set(CommonClientConfigKey.ConnectTimeout, 2000);
         // The archaius property should override code override
-        assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
+        assertEquals(1500, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
     }
 
     @Test

File: ribbon-archaius/src/main/java/com/netflix/client/config/ArchaiusPropertyResolver.java
Patch:
@@ -64,7 +64,7 @@ public <T> Optional<T> get(String key, Class<T> type) {
                         if (type.equals(String.class)) {
                             return (T)value;
                         } else {
-                            return PropertyResolver.resolveWithValueOf(type, value)
+                            return PropertyUtils.resolveWithValueOf(type, value)
                                     .orElseThrow(() -> new IllegalArgumentException("Unable to convert value to desired type " + type));
                         }
                     });

File: ribbon-core/src/test/java/com/netflix/client/config/DefaultClientConfigImplTest.java
Patch:
@@ -27,13 +27,13 @@ protected NewConfigKey(String configKey) {
     
     @Test
     public void testTypedValue() {
-        ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1000");    
+        ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1500");
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
         config.loadProperties("myclient");
-        assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
+        assertEquals(1500, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
         config.set(CommonClientConfigKey.ConnectTimeout, 2000);
         // The archaius property should override code override
-        assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
+        assertEquals(1500, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
     }
 
     @Test

File: ribbon-archaius/src/main/java/com/netflix/client/config/ArchaiusPropertyResolver.java
Patch:
@@ -64,7 +64,7 @@ public <T> Optional<T> get(String key, Class<T> type) {
                         if (type.equals(String.class)) {
                             return (T)value;
                         } else {
-                            return PropertyResolver.resolveWithValueOf(type, value)
+                            return PropertyUtils.resolveWithValueOf(type, value)
                                     .orElseThrow(() -> new IllegalArgumentException("Unable to convert value to desired type " + type));
                         }
                     });

File: ribbon-core/src/test/java/com/netflix/client/config/DefaultClientConfigImplTest.java
Patch:
@@ -27,13 +27,13 @@ protected NewConfigKey(String configKey) {
     
     @Test
     public void testTypedValue() {
-        ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1000");    
+        ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1500");
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
         config.loadProperties("myclient");
-        assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
+        assertEquals(1500, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
         config.set(CommonClientConfigKey.ConnectTimeout, 2000);
         // The archaius property should override code override
-        assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
+        assertEquals(1500, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
     }
 
     @Test

File: ribbon-core/src/main/java/com/netflix/client/config/ClientConfigFactory.java
Patch:
@@ -34,7 +34,8 @@ static ClientConfigFactory findDefaultConfigFactory() {
         return StreamSupport.stream(ServiceLoader.load(ClientConfigFactory.class).spliterator(), false)
                 .sorted(Comparator
                         .comparingInt(ClientConfigFactory::getPriority)
-                        .thenComparing(Comparator.comparing(f -> f.getClass().getCanonicalName())))
+                        .thenComparing(f -> f.getClass().getCanonicalName())
+                        .reversed())
                 .findFirst()
                 .orElseGet(() -> {
                     throw new IllegalStateException("Expecting at least one implementation of ClientConfigFactory discoverable via the ServiceLoader");

File: ribbon-core/src/main/java/com/netflix/client/config/ClientConfigFactory.java
Patch:
@@ -34,7 +34,8 @@ static ClientConfigFactory findDefaultConfigFactory() {
         return StreamSupport.stream(ServiceLoader.load(ClientConfigFactory.class).spliterator(), false)
                 .sorted(Comparator
                         .comparingInt(ClientConfigFactory::getPriority)
-                        .thenComparing(Comparator.comparing(f -> f.getClass().getCanonicalName())))
+                        .thenComparing(f -> f.getClass().getCanonicalName())
+                        .reversed())
                 .findFirst()
                 .orElseGet(() -> {
                     throw new IllegalStateException("Expecting at least one implementation of ClientConfigFactory discoverable via the ServiceLoader");

File: ribbon-archaius/src/main/java/com/netflix/client/config/ArchaiusPropertyResolver.java
Patch:
@@ -44,8 +44,6 @@ private static void invokeAction(Runnable action) {
 
     @Override
     public <T> Optional<T> get(String key, Class<T> type) {
-        LOG.debug("Loading property {}", key);
-
         if (Integer.class.equals(type)) {
             return Optional.ofNullable((T) config.getInteger(key, null));
         } else if (Boolean.class.equals(type)) {
@@ -70,7 +68,8 @@ public <T> Optional<T> get(String key, Class<T> type) {
                                     .orElseThrow(() -> new IllegalArgumentException("Unable to convert value to desired type " + type));
                         }
                     });
-        }    }
+        }
+    }
 
     @Override
     public void forEach(String prefix, BiConsumer<String, String> consumer) {

File: ribbon-archaius/src/main/java/com/netflix/client/config/ArchaiusPropertyResolver.java
Patch:
@@ -44,8 +44,6 @@ private static void invokeAction(Runnable action) {
 
     @Override
     public <T> Optional<T> get(String key, Class<T> type) {
-        LOG.debug("Loading property {}", key);
-
         if (Integer.class.equals(type)) {
             return Optional.ofNullable((T) config.getInteger(key, null));
         } else if (Boolean.class.equals(type)) {
@@ -70,7 +68,8 @@ public <T> Optional<T> get(String key, Class<T> type) {
                                     .orElseThrow(() -> new IllegalArgumentException("Unable to convert value to desired type " + type));
                         }
                     });
-        }    }
+        }
+    }
 
     @Override
     public void forEach(String prefix, BiConsumer<String, String> consumer) {

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/SubsetFilterTest.java
Patch:
@@ -84,7 +84,7 @@ public void testSorting() {
     @Test
     public void testFiltering() {
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
-        config.setClientName("SubsetFilerTest");
+        config.loadProperties("SubsetFilerTest");
 
         ServerListSubsetFilter<Server> filter = new ServerListSubsetFilter<Server>(config);
         LoadBalancerStats stats = new LoadBalancerStats("default");

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/ZoneAwareLoadBalancerTest.java
Patch:
@@ -74,7 +74,7 @@ public void testChooseZone() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("niws.loadbalancer.serverStats.activeRequestsCount.effectiveWindowSeconds", 10);
 
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
-        config.setClientName("testChooseZone");
+        config.loadProperties("testChooseZone");
         ZoneAwareLoadBalancer<Server> balancer = new ZoneAwareLoadBalancer<Server>();
         balancer.init();
         IRule globalRule = new RoundRobinRule();

File: ribbon-core/src/main/java/com/netflix/client/config/UnboxedIntProperty.java
Patch:
@@ -4,7 +4,7 @@ public class UnboxedIntProperty {
     private volatile int value;
 
     public UnboxedIntProperty(Property<Integer> delegate) {
-        this.value = delegate.get();
+        this.value = delegate.getOrDefault();
 
         delegate.onChange(newValue -> this.value = newValue);
     }

File: ribbon-httpclient/src/main/java/com/netflix/http4/ConnectionPoolCleaner.java
Patch:
@@ -110,7 +110,7 @@ public void run() {
     
     void cleanupConnections(){
         connMgr.closeExpiredConnections();
-        connMgr.closeIdleConnections(connIdleEvictTimeMilliSeconds.get(), TimeUnit.MILLISECONDS);       
+        connMgr.closeIdleConnections(connIdleEvictTimeMilliSeconds.getOrDefault(), TimeUnit.MILLISECONDS);
     }
     
     public void shutdown() {

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/AvailabilityPredicate.java
Patch:
@@ -70,9 +70,9 @@ private void initDynamicProperty(IClientConfig clientConfig) {
     }
 
     private int getActiveConnectionsLimit() {
-        Integer limit = activeConnectionsLimit.get();
+        Integer limit = activeConnectionsLimit.getOrDefault();
         if (limit == -1) {
-            limit = defaultActiveConnectionsLimit.get();
+            limit = defaultActiveConnectionsLimit.getOrDefault();
             if (limit == -1) {
                 limit = Integer.MAX_VALUE;
             }
@@ -90,7 +90,7 @@ public boolean apply(@Nullable PredicateKey input) {
     }
     
     private boolean shouldSkipServer(ServerStats stats) {
-        if ((circuitBreakerFiltering.get() && stats.isCircuitBreakerTripped())
+        if ((circuitBreakerFiltering.getOrDefault() && stats.isCircuitBreakerTripped())
                 || stats.getActiveRequestsCount() >= getActiveConnectionsLimit()) {
             return true;
         }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ZoneAvoidancePredicate.java
Patch:
@@ -78,7 +78,7 @@ private void initDynamicProperties(IClientConfig clientConfig) {
 
     @Override
     public boolean apply(@Nullable PredicateKey input) {
-        if (!enabled.get()) {
+        if (!enabled.getOrDefault()) {
             return true;
         }
         String serverZone = input.getServer().getZone();
@@ -102,7 +102,7 @@ public boolean apply(@Nullable PredicateKey input) {
             return true;
         }
         logger.debug("Zone snapshots: {}", zoneSnapshot);
-        Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.get(), triggeringBlackoutPercentage.get());
+        Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.getOrDefault(), triggeringBlackoutPercentage.getOrDefault());
         logger.debug("Available zones: {}", availableZones);
         if (availableZones != null) {
             return availableZones.contains(input.getServer().getZone());

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ZoneAwareLoadBalancer.java
Patch:
@@ -139,7 +139,7 @@ protected void setServerListForZones(Map<String, List<Server>> zoneServersMap) {
         
     @Override
     public Server chooseServer(Object key) {
-        if (!enabled.get() || getLoadBalancerStats().getAvailableZones().size() <= 1) {
+        if (!enabled.getOrDefault() || getLoadBalancerStats().getAvailableZones().size() <= 1) {
             logger.debug("Zone aware logic disabled or there is only one zone");
             return super.chooseServer(key);
         }
@@ -148,7 +148,7 @@ public Server chooseServer(Object key) {
             LoadBalancerStats lbStats = getLoadBalancerStats();
             Map<String, ZoneSnapshot> zoneSnapshot = ZoneAvoidanceRule.createSnapshot(lbStats);
             logger.debug("Zone snapshots: {}", zoneSnapshot);
-            Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.get(), triggeringBlackoutPercentage.get());
+            Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.getOrDefault(), triggeringBlackoutPercentage.getOrDefault());
             logger.debug("Available zones: {}", availableZones);
             if (availableZones != null &&  availableZones.size() < zoneSnapshot.keySet().size()) {
                 String zone = ZoneAvoidanceRule.randomChooseZone(zoneSnapshot, availableZones);

File: ribbon-core/src/main/java/com/netflix/client/config/UnboxedIntProperty.java
Patch:
@@ -4,7 +4,7 @@ public class UnboxedIntProperty {
     private volatile int value;
 
     public UnboxedIntProperty(Property<Integer> delegate) {
-        this.value = delegate.get();
+        this.value = delegate.getOrDefault();
 
         delegate.onChange(newValue -> this.value = newValue);
     }

File: ribbon-httpclient/src/main/java/com/netflix/http4/ConnectionPoolCleaner.java
Patch:
@@ -110,7 +110,7 @@ public void run() {
     
     void cleanupConnections(){
         connMgr.closeExpiredConnections();
-        connMgr.closeIdleConnections(connIdleEvictTimeMilliSeconds.get(), TimeUnit.MILLISECONDS);       
+        connMgr.closeIdleConnections(connIdleEvictTimeMilliSeconds.getOrDefault(), TimeUnit.MILLISECONDS);
     }
     
     public void shutdown() {

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/AvailabilityPredicate.java
Patch:
@@ -70,9 +70,9 @@ private void initDynamicProperty(IClientConfig clientConfig) {
     }
 
     private int getActiveConnectionsLimit() {
-        Integer limit = activeConnectionsLimit.get();
+        Integer limit = activeConnectionsLimit.getOrDefault();
         if (limit == -1) {
-            limit = defaultActiveConnectionsLimit.get();
+            limit = defaultActiveConnectionsLimit.getOrDefault();
             if (limit == -1) {
                 limit = Integer.MAX_VALUE;
             }
@@ -90,7 +90,7 @@ public boolean apply(@Nullable PredicateKey input) {
     }
     
     private boolean shouldSkipServer(ServerStats stats) {
-        if ((circuitBreakerFiltering.get() && stats.isCircuitBreakerTripped())
+        if ((circuitBreakerFiltering.getOrDefault() && stats.isCircuitBreakerTripped())
                 || stats.getActiveRequestsCount() >= getActiveConnectionsLimit()) {
             return true;
         }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ZoneAvoidancePredicate.java
Patch:
@@ -78,7 +78,7 @@ private void initDynamicProperties(IClientConfig clientConfig) {
 
     @Override
     public boolean apply(@Nullable PredicateKey input) {
-        if (!enabled.get()) {
+        if (!enabled.getOrDefault()) {
             return true;
         }
         String serverZone = input.getServer().getZone();
@@ -102,7 +102,7 @@ public boolean apply(@Nullable PredicateKey input) {
             return true;
         }
         logger.debug("Zone snapshots: {}", zoneSnapshot);
-        Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.get(), triggeringBlackoutPercentage.get());
+        Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.getOrDefault(), triggeringBlackoutPercentage.getOrDefault());
         logger.debug("Available zones: {}", availableZones);
         if (availableZones != null) {
             return availableZones.contains(input.getServer().getZone());

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ZoneAwareLoadBalancer.java
Patch:
@@ -139,7 +139,7 @@ protected void setServerListForZones(Map<String, List<Server>> zoneServersMap) {
         
     @Override
     public Server chooseServer(Object key) {
-        if (!enabled.get() || getLoadBalancerStats().getAvailableZones().size() <= 1) {
+        if (!enabled.getOrDefault() || getLoadBalancerStats().getAvailableZones().size() <= 1) {
             logger.debug("Zone aware logic disabled or there is only one zone");
             return super.chooseServer(key);
         }
@@ -148,7 +148,7 @@ public Server chooseServer(Object key) {
             LoadBalancerStats lbStats = getLoadBalancerStats();
             Map<String, ZoneSnapshot> zoneSnapshot = ZoneAvoidanceRule.createSnapshot(lbStats);
             logger.debug("Zone snapshots: {}", zoneSnapshot);
-            Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.get(), triggeringBlackoutPercentage.get());
+            Set<String> availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, triggeringLoad.getOrDefault(), triggeringBlackoutPercentage.getOrDefault());
             logger.debug("Available zones: {}", availableZones);
             if (availableZones != null &&  availableZones.size() < zoneSnapshot.keySet().size()) {
                 String zone = ZoneAvoidanceRule.randomChooseZone(zoneSnapshot, availableZones);

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/reactive/ExecutionContext.java
Patch:
@@ -61,16 +61,16 @@ public ExecutionContext(T request, IClientConfig requestConfig, IClientConfig cl
         this.request = request;
         this.requestConfig = requestConfig;
         this.clientConfig = clientConfig;
-        this.context = new ConcurrentHashMap<String, Object>();
-        this.subContexts = new ConcurrentHashMap<Object, ChildContext<T>>();
+        this.context = new ConcurrentHashMap<>();
+        this.subContexts = new ConcurrentHashMap<>();
         this.retryHandler = retryHandler;
     }
 
     ExecutionContext(T request, IClientConfig requestConfig, IClientConfig clientConfig, RetryHandler retryHandler, ConcurrentHashMap<Object, ChildContext<T>> subContexts) {
         this.request = request;
         this.requestConfig = requestConfig;
         this.clientConfig = clientConfig;
-        this.context = new ConcurrentHashMap<String, Object>();
+        this.context = new ConcurrentHashMap<>();
         this.subContexts = subContexts;
         this.retryHandler = retryHandler;
     }

File: ribbon-core/src/test/java/com/netflix/client/config/DefaultClientConfigImplTest.java
Patch:
@@ -21,7 +21,6 @@ public void testTypedValue() {
         ConfigurationManager.getConfigInstance().setProperty("myclient.ribbon." + CommonClientConfigKey.ConnectTimeout, "1000");    
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
         config.loadProperties("myclient");
-        assertEquals("1000", config.getProperty(CommonClientConfigKey.ConnectTimeout));
         assertEquals(1000, config.get(CommonClientConfigKey.ConnectTimeout).intValue());
         config.set(CommonClientConfigKey.ConnectTimeout, 2000);
         // The archaius property should override code override

File: ribbon-eureka/src/test/java/com/netflix/loadbalancer/EurekaDynamicServerListLoadBalancerTest.java
Patch:
@@ -66,8 +66,8 @@ public EurekaClient get() {
         };
 
         config = DefaultClientConfigImpl.getClientConfigWithDefaultValues();
-        config.setProperty(CommonClientConfigKey.DeploymentContextBasedVipAddresses, vipAddress);
-        config.setProperty(CommonClientConfigKey.ServerListUpdaterClassName, EurekaNotificationServerListUpdater.class.getName());
+        config.set(CommonClientConfigKey.DeploymentContextBasedVipAddresses, vipAddress);
+        config.set(CommonClientConfigKey.ServerListUpdaterClassName, EurekaNotificationServerListUpdater.class.getName());
     }
 
 

File: ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpClient.java
Patch:
@@ -145,7 +145,7 @@ void init(IClientConfig config, boolean registerMonitor) {
 		HttpProtocolParams.setContentCharset(params, "UTF-8");  
 		params.setParameter(ClientPNames.CONNECTION_MANAGER_FACTORY_CLASS_NAME, 
 				ThreadSafeClientConnManager.class.getName());
-		HttpClientParams.setRedirecting(params, config.getPropertyAsBoolean(CommonClientConfigKey.FollowRedirects, true));
+		HttpClientParams.setRedirecting(params, config.get(CommonClientConfigKey.FollowRedirects, true));
 		// set up default headers
 		List<Header> defaultHeaders = new ArrayList<Header>();
 		defaultHeaders.add(new BasicHeader("Netflix.NFHttpClient.Version", "1.0"));

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/FollowRedirectTest.java
Patch:
@@ -73,7 +73,7 @@ public void shutdown() {
     @Test
     public void testRedirectNotFollowed() throws Exception {
         IClientConfig config = DefaultClientConfigImpl.getClientConfigWithDefaultValues("myclient");
-        config.setProperty(CommonClientConfigKey.FollowRedirects, Boolean.FALSE);
+        config.set(CommonClientConfigKey.FollowRedirects, Boolean.FALSE);
         ClientFactory.registerClientFromProperties("myclient", config);
         RestClient client = (RestClient) ClientFactory.getNamedClient("myclient");
         HttpRequest request = HttpRequest.newBuilder().uri(new URI("http://localhost:" + redirectingServer.getPort())).build();

File: ribbon-loadbalancer/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java
Patch:
@@ -146,7 +146,7 @@ protected boolean isRetriable(S request) {
             boolean retryOkayOnOperation = okToRetryOnAllOperations;
             IClientConfig overriddenClientConfig = request.getOverrideConfig();
             if (overriddenClientConfig != null) {
-                retryOkayOnOperation = overriddenClientConfig.getPropertyAsBoolean(CommonClientConfigKey.RequestSpecificRetryOn, okToRetryOnAllOperations);
+                retryOkayOnOperation = overriddenClientConfig.get(CommonClientConfigKey.RequestSpecificRetryOn, okToRetryOnAllOperations);
             }
             return retryOkayOnOperation;
         }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/reactive/ExecutionContextListenerInvoker.java
Patch:
@@ -182,7 +182,7 @@ private boolean isListenerDisabled(ExecutionListener<?, ?> listener) {
                     key = old;
                 }
             }
-            return clientConfig.getPropertyAsBoolean(key, false);
+            return clientConfig.get(key, false);
         }
     }
 }

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/DynamicServerListLoadBalancerTest.java
Patch:
@@ -70,9 +70,9 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     @Test
     public void testDynamicServerListLoadBalancer() throws Exception {
         DefaultClientConfigImpl config = DefaultClientConfigImpl.getClientConfigWithDefaultValues();
-        config.setProperty(CommonClientConfigKey.NIWSServerListClassName, MyServerList.class.getName());
-        config.setProperty(CommonClientConfigKey.NFLoadBalancerClassName, DynamicServerListLoadBalancer.class.getName());
-        config.setProperty(CommonClientConfigKey.ServerListRefreshInterval, "50");
+        config.set(CommonClientConfigKey.NIWSServerListClassName, MyServerList.class.getName());
+        config.set(CommonClientConfigKey.NFLoadBalancerClassName, DynamicServerListLoadBalancer.class.getName());
+        config.set(CommonClientConfigKey.ServerListRefreshInterval, 50);
         DynamicServerListLoadBalancer<Server> lb = new DynamicServerListLoadBalancer<Server>(config);
         try {
             assertTrue(MyServerList.latch.await(2, TimeUnit.SECONDS));

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/http/LoadBalancingHttpClient.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
@@ -184,7 +185,7 @@ public LoadBalancingHttpClient<I, O> build() {
                 backoffStrategy = new Func1<Integer, Integer>() {
                     @Override
                     public Integer call(Integer backoffCount) {
-                        int interval = config.getPropertyAsInteger(IClientConfigKey.Keys.BackoffInterval, DefaultClientConfigImpl.DEFAULT_BACKOFF_INTERVAL);
+                        int interval = config.getOrDefault(IClientConfigKey.Keys.BackoffInterval);
                         if (backoffCount < 0) {
                             backoffCount = 0;
                         }
@@ -455,7 +456,7 @@ private Observable<HttpClientResponse<O>> submitToServerInURI(
         }
         int port = uri.getPort();
         if (port < 0) {
-            if (clientConfig.getPropertyAsBoolean(IClientConfigKey.Keys.IsSecure, false)) {
+            if (Optional.ofNullable(clientConfig.get(IClientConfigKey.Keys.IsSecure)).orElse(false)) {
                 port = 443;
             } else {
                 port = 80;

File: ribbon-eureka/src/test/java/com/netflix/niws/loadbalancer/LBBuilderTest.java
Patch:
@@ -80,7 +80,6 @@ public void setupMock(){
     }
 
     @Test
-    @Ignore
     public void testBuildWithDiscoveryEnabledNIWSServerList() {
         IRule rule = new AvailabilityFilteringRule();
         ServerList<DiscoveryEnabledServer> list = new DiscoveryEnabledNIWSServerList("dummy:7001");
@@ -100,7 +99,6 @@ public void testBuildWithDiscoveryEnabledNIWSServerList() {
     }
 
     @Test
-    @Ignore
     public void testBuildWithDiscoveryEnabledNIWSServerListAndUpdater() {
         IRule rule = new AvailabilityFilteringRule();
         ServerList<DiscoveryEnabledServer> list = new DiscoveryEnabledNIWSServerList("dummy:7001");

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/BaseLoadBalancer.java
Patch:
@@ -235,9 +235,9 @@ private LoadBalancerStats createLoadBalancerStatsFromConfig(IClientConfig client
         try {
             return (LoadBalancerStats) factory.create(loadBalancerStatsClassName, clientConfig);
         } catch (Exception e) {
-            logger.warn("Error initializing configured LoadBalancerStats class - " + String.valueOf(loadBalancerStatsClassName)
-                    + ". Falling-back to a new LoadBalancerStats instance instead.", e);
-            return new LoadBalancerStats(clientConfig.getClientName());
+            throw new RuntimeException(
+                    "Error initializing configured LoadBalancerStats class - " + loadBalancerStatsClassName,
+                    e);
         }
     }
 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/LoadBalancerContext.java
Patch:
@@ -28,6 +28,7 @@
 import com.netflix.servo.monitor.Monitors;
 import com.netflix.servo.monitor.Timer;
 import com.netflix.util.Pair;
+import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -87,7 +88,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
             return;    
         }
         clientName = clientConfig.getClientName();
-        if (clientName == null) {
+        if (StringUtils.isEmpty(clientName)) {
             clientName = "default";
         }
         vipAddresses = clientConfig.resolveDeploymentContextbasedVipAddresses();

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/ZoneAwareLoadBalancerTest.java
Patch:
@@ -70,11 +70,11 @@ private void testChooseServer(ZoneAwareLoadBalancer<Server> balancer, String...
     
     
     @Test
-    @Ignore
     public void testChooseZone() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("niws.loadbalancer.serverStats.activeRequestsCount.effectiveWindowSeconds", 10);
 
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
+        config.setClientName("testChooseZone");
         ZoneAwareLoadBalancer<Server> balancer = new ZoneAwareLoadBalancer<Server>();
         balancer.init();
         IRule globalRule = new RoundRobinRule();

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/DiscoveryLoadBalancerTest.java
Patch:
@@ -25,11 +25,13 @@
 import com.netflix.ribbon.testutils.MockedDiscoveryServerListTest;
 import io.netty.buffer.ByteBuf;
 import org.junit.Test;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 
+@PowerMockIgnore("com.google.*")
 public class DiscoveryLoadBalancerTest extends MockedDiscoveryServerListTest {
 
     @Override

File: ribbon-eureka/src/test/java/com/netflix/niws/loadbalancer/LBBuilderTest.java
Patch:
@@ -80,7 +80,6 @@ public void setupMock(){
     }
 
     @Test
-    @Ignore
     public void testBuildWithDiscoveryEnabledNIWSServerList() {
         IRule rule = new AvailabilityFilteringRule();
         ServerList<DiscoveryEnabledServer> list = new DiscoveryEnabledNIWSServerList("dummy:7001");
@@ -100,7 +99,6 @@ public void testBuildWithDiscoveryEnabledNIWSServerList() {
     }
 
     @Test
-    @Ignore
     public void testBuildWithDiscoveryEnabledNIWSServerListAndUpdater() {
         IRule rule = new AvailabilityFilteringRule();
         ServerList<DiscoveryEnabledServer> list = new DiscoveryEnabledNIWSServerList("dummy:7001");

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/BaseLoadBalancer.java
Patch:
@@ -235,9 +235,9 @@ private LoadBalancerStats createLoadBalancerStatsFromConfig(IClientConfig client
         try {
             return (LoadBalancerStats) factory.create(loadBalancerStatsClassName, clientConfig);
         } catch (Exception e) {
-            logger.warn("Error initializing configured LoadBalancerStats class - " + String.valueOf(loadBalancerStatsClassName)
-                    + ". Falling-back to a new LoadBalancerStats instance instead.", e);
-            return new LoadBalancerStats(clientConfig.getClientName());
+            throw new RuntimeException(
+                    "Error initializing configured LoadBalancerStats class - " + loadBalancerStatsClassName,
+                    e);
         }
     }
 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/LoadBalancerContext.java
Patch:
@@ -28,6 +28,7 @@
 import com.netflix.servo.monitor.Monitors;
 import com.netflix.servo.monitor.Timer;
 import com.netflix.util.Pair;
+import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -87,7 +88,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
             return;    
         }
         clientName = clientConfig.getClientName();
-        if (clientName == null) {
+        if (StringUtils.isEmpty(clientName)) {
             clientName = "default";
         }
         vipAddresses = clientConfig.resolveDeploymentContextbasedVipAddresses();

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/ZoneAwareLoadBalancerTest.java
Patch:
@@ -70,11 +70,11 @@ private void testChooseServer(ZoneAwareLoadBalancer<Server> balancer, String...
     
     
     @Test
-    @Ignore
     public void testChooseZone() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("niws.loadbalancer.serverStats.activeRequestsCount.effectiveWindowSeconds", 10);
 
         DefaultClientConfigImpl config = new DefaultClientConfigImpl();
+        config.setClientName("testChooseZone");
         ZoneAwareLoadBalancer<Server> balancer = new ZoneAwareLoadBalancer<Server>();
         balancer.init();
         IRule globalRule = new RoundRobinRule();

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/DiscoveryLoadBalancerTest.java
Patch:
@@ -25,11 +25,13 @@
 import com.netflix.ribbon.testutils.MockedDiscoveryServerListTest;
 import io.netty.buffer.ByteBuf;
 import org.junit.Test;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 
+@PowerMockIgnore("com.google.*")
 public class DiscoveryLoadBalancerTest extends MockedDiscoveryServerListTest {
 
     @Override

File: ribbon-eureka/src/test/java/com/netflix/niws/loadbalancer/LBBuilderTest.java
Patch:
@@ -43,7 +43,7 @@
 @RunWith(PowerMockRunner.class)
 @PrepareForTest( {DiscoveryManager.class, DiscoveryClient.class} )
 @PowerMockIgnore({"javax.management.*", "com.sun.jersey.*", "com.sun.*", "org.apache.*", "weblogic.*", "com.netflix.config.*", "com.sun.jndi.dns.*",
-    "javax.naming.*", "com.netflix.logging.*", "javax.ws.*"})
+    "javax.naming.*", "com.netflix.logging.*", "javax.ws.*", "com.google.*"})
 public class LBBuilderTest {
     
     static Server expected = new Server("www.example.com", 8001);

File: ribbon/src/test/java/com/netflix/ribbon/DiscoveryEnabledServerListTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 
 import java.io.IOException;
 import java.nio.charset.Charset;
@@ -39,6 +40,7 @@
 /**
  * Created by awang on 7/15/14.
  */
+@PowerMockIgnore("com.google.*")
 public class DiscoveryEnabledServerListTest extends MockedDiscoveryServerListTest {
 
     static MockWebServer server;

File: ribbon-eureka/src/test/java/com/netflix/niws/loadbalancer/LBBuilderTest.java
Patch:
@@ -43,7 +43,7 @@
 @RunWith(PowerMockRunner.class)
 @PrepareForTest( {DiscoveryManager.class, DiscoveryClient.class} )
 @PowerMockIgnore({"javax.management.*", "com.sun.jersey.*", "com.sun.*", "org.apache.*", "weblogic.*", "com.netflix.config.*", "com.sun.jndi.dns.*",
-    "javax.naming.*", "com.netflix.logging.*", "javax.ws.*"})
+    "javax.naming.*", "com.netflix.logging.*", "javax.ws.*", "com.google.*"})
 public class LBBuilderTest {
     
     static Server expected = new Server("www.example.com", 8001);

File: ribbon/src/test/java/com/netflix/ribbon/DiscoveryEnabledServerListTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 
 import java.io.IOException;
 import java.nio.charset.Charset;
@@ -39,6 +40,7 @@
 /**
  * Created by awang on 7/15/14.
  */
+@PowerMockIgnore("com.google.*")
 public class DiscoveryEnabledServerListTest extends MockedDiscoveryServerListTest {
 
     static MockWebServer server;

File: ribbon-core/src/main/java/com/netflix/client/config/ClientConfigFactory.java
Patch:
@@ -37,7 +37,7 @@ static ClientConfigFactory findDefaultConfigFactory() {
                         .thenComparing(Comparator.comparing(f -> f.getClass().getCanonicalName())))
                 .findFirst()
                 .orElseGet(() -> {
-                    throw new IllegalStateException("Expecting on implementation of ClientConfigFactory discoverable via the ServiceLoader");
+                    throw new IllegalStateException("Expecting at least one implementation of ClientConfigFactory discoverable via the ServiceLoader");
                 });
     }
 }

File: ribbon-archaius/src/main/java/com/netflix/utils/ScheduledThreadPoolExectuorWithDynamicSize.java
Patch:
@@ -29,7 +29,9 @@
  *
  * @author awang
  *
+ * @deprecated This class is no longer necessary as part of Ribbon and should not be used by anyone
  */
+@Deprecated
 public class ScheduledThreadPoolExectuorWithDynamicSize extends ScheduledThreadPoolExecutor {
 
     private final Thread shutdownThread;

File: ribbon-guice/src/main/java/com/netflix/ribbon/guice/RibbonModule.java
Patch:
@@ -18,7 +18,6 @@
 import com.google.inject.AbstractModule;
 import com.google.inject.Scopes;
 import com.netflix.client.config.ClientConfigFactory;
-import com.netflix.client.config.ClientConfigFactory.DefaultClientConfigFactory;
 import com.netflix.ribbon.DefaultResourceFactory;
 import com.netflix.ribbon.RibbonResourceFactory;
 import com.netflix.ribbon.RibbonTransportFactory;
@@ -35,7 +34,7 @@
 public class RibbonModule extends AbstractModule {
     @Override
     protected void configure() {
-        bind(ClientConfigFactory.class).to(DefaultClientConfigFactory.class).in(Scopes.SINGLETON);
+        bind(ClientConfigFactory.class).toInstance(ClientConfigFactory.DEFAULT);
         bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
         bind(AnnotationProcessorsProvider.class).to(DefaultAnnotationProcessorsProvider.class).in(Scopes.SINGLETON);
         bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);

File: ribbon-guice/src/test/java/com/netflix/ribbon/examples/rx/RxMovieProxyExampleTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.inject.Injector;
 import com.google.inject.Scopes;
 import com.netflix.client.config.ClientConfigFactory;
-import com.netflix.client.config.ClientConfigFactory.DefaultClientConfigFactory;
 import com.netflix.client.config.DefaultClientConfigImpl;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.ribbon.transport.netty.http.LoadBalancingHttpClient;
@@ -44,7 +43,7 @@
 
 public class RxMovieProxyExampleTest extends RxMovieClientTestBase {
 
-    static class MyClientConfigFactory extends DefaultClientConfigFactory {
+    static class MyClientConfigFactory implements ClientConfigFactory {
         @Override
         public IClientConfig newConfig() {
             return new DefaultClientConfigImpl() {

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/http/LoadBalancingHttpClient.java
Patch:
@@ -22,7 +22,6 @@
 import io.netty.channel.ChannelOption;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpMethod;
-import io.netty.handler.codec.http.HttpResponseStatus;
 import io.reactivex.netty.client.ClientMetricsEvent;
 import io.reactivex.netty.client.CompositePoolLimitDeterminationStrategy;
 import io.reactivex.netty.client.RxClient;
@@ -56,7 +55,6 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
-import com.netflix.client.ClientException;
 import com.netflix.client.RequestSpecificRetryHandler;
 import com.netflix.client.RetryHandler;
 import com.netflix.client.config.CommonClientConfigKey;

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/Server.java
Patch:
@@ -151,8 +151,10 @@ static Pair<String, Integer> getHostPort(String id) {
 
             if (id.toLowerCase().startsWith("http://")) {
                 id = id.substring(7);
+                port = 80;
             } else if (id.toLowerCase().startsWith("https://")) {
                 id = id.substring(8);
+                port = 443;
             }
 
             if (id.contains("/")) {
@@ -164,7 +166,6 @@ static Pair<String, Integer> getHostPort(String id) {
 
             if (colon_idx == -1) {
                 host = id; // default
-                port = 80;
             } else {
                 host = id.substring(0, colon_idx);
                 try {

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/ServerTest.java
Patch:
@@ -28,7 +28,7 @@ public void createSecureSchemeHost() {
         Server server = new Server("https://netflix.com");
         assertEquals("https", server.getScheme());
         assertEquals("netflix.com", server.getHost());
-        assertEquals(80, server.getPort());
+        assertEquals(443, server.getPort());
     }
     
     @Test

File: ribbon-loadbalancer/src/main/java/com/netflix/client/ClientFactory.java
Patch:
@@ -72,7 +72,7 @@ public class ClientFactory {
     		if (client instanceof AbstractLoadBalancerAwareClient) {
     			((AbstractLoadBalancerAwareClient) client).setLoadBalancer(loadBalancer);
     		}
-    	} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
+    	} catch (Throwable e) {
     		String message = "Unable to InitializeAndAssociateNFLoadBalancer set for RestClient:"
     				+ restClientName;
     		logger.warn(message, e);
@@ -168,7 +168,7 @@ public static ILoadBalancer registerNamedLoadBalancerFromclientConfig(String nam
             namedLBMap.put(name, lb);            
             logger.info("Client: {} instantiated a LoadBalancer: {}", name, lb);
             return lb;
-        } catch (Exception e) {           
+        } catch (Throwable e) {           
            throw new ClientException("Unable to instantiate/associate LoadBalancer with Client:" + name, e);
         }    	
     }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/AbstractServerList.java
Patch:
@@ -49,7 +49,7 @@ public AbstractServerListFilter<T> getFilterImpl(IClientConfig niwsClientConfig)
             AbstractServerListFilter<T> abstractNIWSServerListFilter = 
                     (AbstractServerListFilter<T>) ClientFactory.instantiateInstanceWithClientConfig(niwsServerListFilterClassName, niwsClientConfig);
             return abstractNIWSServerListFilter;
-        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
+        } catch (Throwable e) {
             throw new ClientException(
                     ClientException.ErrorType.CONFIGURATION,
                     "Unable to get an instance of CommonClientConfigKey.NIWSServerListFilterClassName. Configured class:"

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/Server.java
Patch:
@@ -61,7 +61,7 @@ public static interface MetaInfo {
     private String host;
     private int port = 80;
     private volatile String id;
-    private boolean isAliveFlag;
+    private volatile boolean isAliveFlag;
     private String zone = UNKNOWN_ZONE;
     private volatile boolean readyToServe = true;
 

File: ribbon-loadbalancer/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -364,7 +364,7 @@ private Boolean connectToServer(final Server s, final PrimeConnectionListener li
         if (listener != null) {
             try {
                 listener.primeCompleted(s, lastException);
-            } catch (Error e) {
+            } catch (Exception e) {
                 logger.error("Error calling PrimeComplete listener for server '{}'", s.getHost(), e);
             }
         }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ResponseTimeWeightedRule.java
Patch:
@@ -207,7 +207,7 @@ public void run() {
             ServerWeight serverWeight = new ServerWeight();
             try {
                 serverWeight.maintainWeights();
-            } catch (Error e) {
+            } catch (Exception e) {
                 logger.error("Error running DynamicServerWeightTask for {}", name, e);
             }
         }
@@ -253,8 +253,8 @@ public void maintainWeights() {
                     finalWeights.add(weightSoFar);   
                 }
                 setWeights(finalWeights);
-            } catch (Error t) {
-                logger.error("Error calculating server weights", t);
+            } catch (Exception e) {
+                logger.error("Error calculating server weights", e);
             } finally {
                 serverWeightAssignmentInProgress.set(false);
             }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/WeightedResponseTimeRule.java
Patch:
@@ -222,7 +222,7 @@ public void run() {
             ServerWeight serverWeight = new ServerWeight();
             try {
                 serverWeight.maintainWeights();
-            } catch (Error e) {
+            } catch (Exception e) {
                 logger.error("Error running DynamicServerWeightTask for {}", name, e);
             }
         }
@@ -268,8 +268,8 @@ public void maintainWeights() {
                     finalWeights.add(weightSoFar);   
                 }
                 setWeights(finalWeights);
-            } catch (Error t) {
-                logger.error("Error calculating server weights", t);
+            } catch (Exception e) {
+                logger.error("Error calculating server weights", e);
             } finally {
                 serverWeightAssignmentInProgress.set(false);
             }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ZoneAwareLoadBalancer.java
Patch:
@@ -136,7 +136,7 @@ public Server chooseServer(Object key) {
                     server = zoneLoadBalancer.chooseServer(key);
                 }
             }
-        } catch (Error e) {
+        } catch (Exception e) {
             logger.error("Error choosing server using zone aware logic for load balancer={}", name, e);
         }
         if (server != null) {

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/BaseLoadBalancer.java
Patch:
@@ -781,7 +781,7 @@ public void markServerDown(String id) {
         }
 
         Lock writeLock = upServerLock.writeLock();
-
+    	writeLock.lock();
         try {
             final List<Server> changedServers = new ArrayList<Server>();
 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/AbstractServerList.java
Patch:
@@ -49,7 +49,7 @@ public AbstractServerListFilter<T> getFilterImpl(IClientConfig niwsClientConfig)
             AbstractServerListFilter<T> abstractNIWSServerListFilter = 
                     (AbstractServerListFilter<T>) ClientFactory.instantiateInstanceWithClientConfig(niwsServerListFilterClassName, niwsClientConfig);
             return abstractNIWSServerListFilter;
-        } catch (Throwable e) {
+        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
             throw new ClientException(
                     ClientException.ErrorType.CONFIGURATION,
                     "Unable to get an instance of CommonClientConfigKey.NIWSServerListFilterClassName. Configured class:"

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ZoneAwareLoadBalancer.java
Patch:
@@ -136,8 +136,8 @@ public Server chooseServer(Object key) {
                     server = zoneLoadBalancer.chooseServer(key);
                 }
             }
-        } catch (Throwable e) {
-            logger.error("Unexpected exception when choosing server using zone aware logic", e);
+        } catch (Error e) {
+            logger.error("Error choosing server using zone aware logic for load balancer={}", name, e);
         }
         if (server != null) {
             return server;

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/DynamicServerListLoadBalancer.java
Patch:
@@ -64,6 +64,7 @@ public class DynamicServerListLoadBalancer<T extends Server> extends
     protected AtomicBoolean serverListUpdateInProgress = new AtomicBoolean(
             false);
 
+    private static long LISTOFSERVERS_CACHE_UPDATE_DELAY = 1000; // msecs;
     private static int LISTOFSERVERS_CACHE_REPEAT_INTERVAL = 30 * 1000; // msecs;
                                                                          // //
                                                                          // every
@@ -244,7 +245,7 @@ private String getIdentifier() {
     private void keepServerListUpdated() {
         scheduledFuture = _serverListRefreshExecutor.scheduleAtFixedRate(
                 new ServerListRefreshExecutorThread(),
-                refeshIntervalMills, refeshIntervalMills,
+                LISTOFSERVERS_CACHE_UPDATE_DELAY, refeshIntervalMills,
                 TimeUnit.MILLISECONDS);
     }
 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/DynamicServerListLoadBalancer.java
Patch:
@@ -64,6 +64,7 @@ public class DynamicServerListLoadBalancer<T extends Server> extends
     protected AtomicBoolean serverListUpdateInProgress = new AtomicBoolean(
             false);
 
+    private static long LISTOFSERVERS_CACHE_UPDATE_DELAY = 1000; // msecs;
     private static int LISTOFSERVERS_CACHE_REPEAT_INTERVAL = 30 * 1000; // msecs;
                                                                          // //
                                                                          // every
@@ -244,7 +245,7 @@ private String getIdentifier() {
     private void keepServerListUpdated() {
         scheduledFuture = _serverListRefreshExecutor.scheduleAtFixedRate(
                 new ServerListRefreshExecutorThread(),
-                refeshIntervalMills, refeshIntervalMills,
+                LISTOFSERVERS_CACHE_UPDATE_DELAY, refeshIntervalMills,
                 TimeUnit.MILLISECONDS);
     }
 

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/TestResource.java
Patch:
@@ -29,8 +29,8 @@
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
+import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.commons.io.IOUtils;
-import org.codehaus.jackson.map.ObjectMapper;
 
 @Produces({"application/xml"})
 @Path("/test")

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -56,7 +56,7 @@ public abstract class CommonClientConfigKey<T> implements IClientConfigKey<T> {
     
     public static final IClientConfigKey<Boolean> EnablePrimeConnections = new CommonClientConfigKey<Boolean>("EnablePrimeConnections"){};
     
-    public static final IClientConfigKey<Boolean> PrimeConnectionsClassName = new CommonClientConfigKey<Boolean>("PrimeConnectionsClassName"){};
+    public static final IClientConfigKey<String> PrimeConnectionsClassName = new CommonClientConfigKey<String>("PrimeConnectionsClassName"){};
     
     public static final IClientConfigKey<Integer> MaxRetriesPerServerPrimeConnection = new CommonClientConfigKey<Integer>("MaxRetriesPerServerPrimeConnection"){};
     

File: ribbon-loadbalancer/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -144,8 +144,8 @@ public PrimeConnections(String name, IClientConfig niwsClientConfig) {
         }
         primeConnectionsURI = String.valueOf(niwsClientConfig.getProperty(CommonClientConfigKey.PrimeConnectionsURI, primeConnectionsURI));
         float primeRatio = Float.parseFloat(String.valueOf(niwsClientConfig.getProperty(CommonClientConfigKey.MinPrimeConnectionsRatio)));
-        className = (String) niwsClientConfig.getProperty(CommonClientConfigKey.PrimeConnectionsClassName, 
-        		DefaultClientConfigImpl.DEFAULT_PRIME_CONNECTIONS_CLASS);
+        className = niwsClientConfig.getPropertyAsString(CommonClientConfigKey.PrimeConnectionsClassName,
+                DefaultClientConfigImpl.DEFAULT_PRIME_CONNECTIONS_CLASS);
         try {
             connector = (IPrimeConnection) Class.forName(className).newInstance();
             connector.initWithNiwsConfig(niwsClientConfig);

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/DynamicServerListLoadBalancer.java
Patch:
@@ -64,7 +64,6 @@ public class DynamicServerListLoadBalancer<T extends Server> extends
     protected AtomicBoolean serverListUpdateInProgress = new AtomicBoolean(
             false);
 
-    private static long LISTOFSERVERS_CACHE_UPDATE_DELAY = 1000; // msecs;
     private static int LISTOFSERVERS_CACHE_REPEAT_INTERVAL = 30 * 1000; // msecs;
                                                                          // //
                                                                          // every
@@ -250,7 +249,7 @@ private String getIdentifier() {
     private void keepServerListUpdated() {
         scheduledFuture = _serverListRefreshExecutor.scheduleAtFixedRate(
                 new ServerListRefreshExecutorThread(),
-                LISTOFSERVERS_CACHE_UPDATE_DELAY, refeshIntervalMills,
+                refeshIntervalMills, refeshIntervalMills,
                 TimeUnit.MILLISECONDS);
     }
 

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/rx/common/RecommendationServiceFallbackHandler.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.netflix.ribbon.examples.rx.common;
 
-import com.netflix.hystrix.HystrixExecutableInfo;
+import com.netflix.hystrix.HystrixInvokableInfo;
 import com.netflix.ribbon.hystrix.FallbackHandler;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.UnpooledByteBufAllocator;
@@ -30,7 +30,7 @@
  */
 public class RecommendationServiceFallbackHandler implements FallbackHandler<ByteBuf> {
     @Override
-    public Observable<ByteBuf> getFallback(HystrixExecutableInfo<?> hystrixInfo, Map<String, Object> requestProperties) {
+    public Observable<ByteBuf> getFallback(HystrixInvokableInfo<?> hystrixInfo, Map<String, Object> requestProperties) {
         byte[] bytes = Movie.ORANGE_IS_THE_NEW_BLACK.toString().getBytes(Charset.defaultCharset());
         ByteBuf byteBuf = UnpooledByteBufAllocator.DEFAULT.buffer(bytes.length);
         byteBuf.writeBytes(bytes);

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/NettyClientTest.java
Patch:
@@ -48,6 +48,7 @@
 
 import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import rx.Observable;
@@ -787,6 +788,7 @@ public String call(ByteBuf t1) {
     }
     
     @Test
+    @Ignore
     public void testRedirect() throws Exception {
         HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet(SERVICE_URI + "testAsync/redirect?port=" + port);
         LoadBalancingHttpClient<ByteBuf, ByteBuf> observableClient =

File: ribbon/src/examples/java/com/netflix/ribbon/RibbonExamples.java
Patch:
@@ -10,7 +10,7 @@
 
 import com.netflix.hystrix.HystrixCommandGroupKey;
 import com.netflix.hystrix.HystrixCommandProperties;
-import com.netflix.hystrix.HystrixExecutableInfo;
+import com.netflix.hystrix.HystrixInvokableInfo;
 import com.netflix.hystrix.HystrixObservableCommand;
 import com.netflix.ribbon.http.HttpRequestTemplate;
 import com.netflix.ribbon.http.HttpResourceGroup;
@@ -33,7 +33,7 @@ public void validate(HttpClientResponse<ByteBuf> response)
         })   
         .withFallbackProvider(new FallbackHandler<ByteBuf>() {
             @Override
-            public Observable<ByteBuf> getFallback(HystrixExecutableInfo<?> t1, Map<String, Object> vars) {
+            public Observable<ByteBuf> getFallback(HystrixInvokableInfo<?> t1, Map<String, Object> vars) {
                 return Observable.empty();
             }
         })

File: ribbon/src/main/java/com/netflix/ribbon/RibbonResponse.java
Patch:
@@ -16,7 +16,7 @@
 package com.netflix.ribbon;
 
 
-import com.netflix.hystrix.HystrixExecutableInfo;
+import com.netflix.hystrix.HystrixInvokableInfo;
 
 /**
  * Response object from {@link RequestWithMetaData} that contains the content
@@ -29,5 +29,5 @@
 public abstract class RibbonResponse<T> {
     public abstract T content();
     
-    public abstract HystrixExecutableInfo<?> getHystrixInfo();   
+    public abstract HystrixInvokableInfo<?> getHystrixInfo();   
 }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpResourceObservableCommand.java
Patch:
@@ -67,16 +67,16 @@ protected String getCacheKey() {
     }
 
     @Override
-    protected Observable<T> getFallback() {
+    protected Observable<T> resumeWithFallback() {
         if (fallbackHandler == null) {
-            return super.getFallback();
+            return super.resumeWithFallback();
         } else {
             return fallbackHandler.getFallback(this, this.requestProperties);
         }
     }
 
     @Override
-    protected Observable<T> run() {
+    protected Observable<T> construct() {
         Observable<HttpClientResponse<ByteBuf>> httpResponseObservable = httpClient.submit(httpRequest);
         if (validator != null) {
             httpResponseObservable = httpResponseObservable.map(new Func1<HttpClientResponse<ByteBuf>, HttpClientResponse<ByteBuf>>() {

File: ribbon/src/main/java/com/netflix/ribbon/hystrix/FallbackHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Map;
 
-import com.netflix.hystrix.HystrixExecutableInfo;
+import com.netflix.hystrix.HystrixInvokableInfo;
 
 import rx.Observable;
 
@@ -28,5 +28,5 @@
  * @param <T> Output entity type
  */
 public interface FallbackHandler<T> {
-    public Observable<T> getFallback(HystrixExecutableInfo<?> hystrixInfo, Map<String, Object> requestProperties);
+    public Observable<T> getFallback(HystrixInvokableInfo<?> hystrixInfo, Map<String, Object> requestProperties);
 }

File: ribbon/src/test/java/com/netflix/ribbon/proxy/sample/HystrixHandlers.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.netflix.ribbon.proxy.sample;
 
-import com.netflix.hystrix.HystrixExecutableInfo;
+import com.netflix.hystrix.HystrixInvokableInfo;
 import com.netflix.ribbon.ServerError;
 import com.netflix.ribbon.UnsuccessfulResponseException;
 import com.netflix.ribbon.http.HttpResponseValidator;
@@ -43,7 +43,7 @@ public void validate(HttpClientResponse<ByteBuf> response) throws UnsuccessfulRe
     public static class MovieFallbackHandler implements FallbackHandler<Movie> {
 
         @Override
-        public Observable<Movie> getFallback(HystrixExecutableInfo<?> hystrixInfo, Map<String, Object> requestProperties) {
+        public Observable<Movie> getFallback(HystrixInvokableInfo<?> hystrixInfo, Map<String, Object> requestProperties) {
             return null;
         }
     }

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -52,7 +52,7 @@ public abstract class CommonClientConfigKey<T> implements IClientConfigKey<T> {
     
     public static final IClientConfigKey<Boolean> RequestSpecificRetryOn = new CommonClientConfigKey<Boolean>("RequestSpecificRetryOn"){};
     
-    public static final IClientConfigKey<Integer> ReceiveBuffferSize = new CommonClientConfigKey<Integer>("ReceiveBuffferSize"){};
+    public static final IClientConfigKey<Integer> ReceiveBufferSize = new CommonClientConfigKey<Integer>("ReceiveBufferSize"){};
     
     public static final IClientConfigKey<Boolean> EnablePrimeConnections = new CommonClientConfigKey<Boolean>("EnablePrimeConnections"){};
     

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -280,16 +280,16 @@ protected Client apacheHttpClientSpecificInitialization() {
         // send/receive - so let's take the bigger of the two values and use
         // it as buffer size
         int bufferSize = Integer.MIN_VALUE;
-        if (ncc.getProperty(CommonClientConfigKey.ReceiveBuffferSize) != null) {
+        if (ncc.getProperty(CommonClientConfigKey.ReceiveBufferSize) != null) {
             try {
                 bufferSize = Integer
                 .parseInt(""
                         + ncc
-                        .getProperty(CommonClientConfigKey.ReceiveBuffferSize));
+                        .getProperty(CommonClientConfigKey.ReceiveBufferSize));
             } catch (Exception e) {
                 throw new IllegalArgumentException(
                         "Invalid value for property:"
-                        + CommonClientConfigKey.ReceiveBuffferSize,
+                        + CommonClientConfigKey.ReceiveBufferSize,
                         e);
             }
             if (ncc.getProperty(CommonClientConfigKey.SendBufferSize) != null) {

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -52,7 +52,7 @@ public abstract class CommonClientConfigKey<T> implements IClientConfigKey<T> {
     
     public static final IClientConfigKey<Boolean> RequestSpecificRetryOn = new CommonClientConfigKey<Boolean>("RequestSpecificRetryOn"){};
     
-    public static final IClientConfigKey<Integer> ReceiveBuffferSize = new CommonClientConfigKey<Integer>("ReceiveBuffferSize"){};
+    public static final IClientConfigKey<Integer> ReceiveBufferSize = new CommonClientConfigKey<Integer>("ReceiveBufferSize"){};
     
     public static final IClientConfigKey<Boolean> EnablePrimeConnections = new CommonClientConfigKey<Boolean>("EnablePrimeConnections"){};
     

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -280,16 +280,16 @@ protected Client apacheHttpClientSpecificInitialization() {
         // send/receive - so let's take the bigger of the two values and use
         // it as buffer size
         int bufferSize = Integer.MIN_VALUE;
-        if (ncc.getProperty(CommonClientConfigKey.ReceiveBuffferSize) != null) {
+        if (ncc.getProperty(CommonClientConfigKey.ReceiveBufferSize) != null) {
             try {
                 bufferSize = Integer
                 .parseInt(""
                         + ncc
-                        .getProperty(CommonClientConfigKey.ReceiveBuffferSize));
+                        .getProperty(CommonClientConfigKey.ReceiveBufferSize));
             } catch (Exception e) {
                 throw new IllegalArgumentException(
                         "Invalid value for property:"
-                        + CommonClientConfigKey.ReceiveBuffferSize,
+                        + CommonClientConfigKey.ReceiveBufferSize,
                         e);
             }
             if (ncc.getProperty(CommonClientConfigKey.SendBufferSize) != null) {

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -56,7 +56,7 @@ public abstract class CommonClientConfigKey<T> implements IClientConfigKey<T> {
     
     public static final IClientConfigKey<Boolean> EnablePrimeConnections = new CommonClientConfigKey<Boolean>("EnablePrimeConnections"){};
     
-    public static final IClientConfigKey<Boolean> PrimeConnectionsClassName = new CommonClientConfigKey<Boolean>("PrimeConnectionsClassName"){};
+    public static final IClientConfigKey<String> PrimeConnectionsClassName = new CommonClientConfigKey<String>("PrimeConnectionsClassName"){};
     
     public static final IClientConfigKey<Integer> MaxRetriesPerServerPrimeConnection = new CommonClientConfigKey<Integer>("MaxRetriesPerServerPrimeConnection"){};
     

File: ribbon-loadbalancer/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -144,8 +144,8 @@ public PrimeConnections(String name, IClientConfig niwsClientConfig) {
         }
         primeConnectionsURI = String.valueOf(niwsClientConfig.getProperty(CommonClientConfigKey.PrimeConnectionsURI, primeConnectionsURI));
         float primeRatio = Float.parseFloat(String.valueOf(niwsClientConfig.getProperty(CommonClientConfigKey.MinPrimeConnectionsRatio)));
-        className = (String) niwsClientConfig.getProperty(CommonClientConfigKey.PrimeConnectionsClassName, 
-        		DefaultClientConfigImpl.DEFAULT_PRIME_CONNECTIONS_CLASS);
+        className = niwsClientConfig.getPropertyAsString(CommonClientConfigKey.PrimeConnectionsClassName,
+                DefaultClientConfigImpl.DEFAULT_PRIME_CONNECTIONS_CLASS);
         try {
             connector = (IPrimeConnection) Class.forName(className).newInstance();
             connector.initWithNiwsConfig(niwsClientConfig);

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ServerStats.java
Patch:
@@ -240,7 +240,7 @@ public int getMonitoredActiveRequestsCount() {
         return activeRequestsCount.get();
     }
     
-    @Monitor(name="CircuitBreakerTripped", type = DataSourceType.GAUGE)    
+    @Monitor(name="CircuitBreakerTripped", type = DataSourceType.INFORMATIONAL)    
     public boolean isCircuitBreakerTripped() {
         return isCircuitBreakerTripped(System.currentTimeMillis());
     }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/DynamicServerListLoadBalancer.java
Patch:
@@ -333,7 +333,7 @@ public void updateListOfServers() {
      */
     protected void updateAllServerList(List<T> ls) {
         // other threads might be doing this - in which case, we pass
-        if (serverListUpdateInProgress.compareAndSet(false, true) {
+        if (serverListUpdateInProgress.compareAndSet(false, true)) {
             for (T s : ls) {
                 s.setAlive(true); // set so that clients can start using these
                                   // servers right away instead

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/ServerStats.java
Patch:
@@ -240,7 +240,7 @@ public int getMonitoredActiveRequestsCount() {
         return activeRequestsCount.get();
     }
     
-    @Monitor(name="CircuitBreakerTripped", type = DataSourceType.GAUGE)    
+    @Monitor(name="CircuitBreakerTripped", type = DataSourceType.INFORMATIONAL)    
     public boolean isCircuitBreakerTripped() {
         return isCircuitBreakerTripped(System.currentTimeMillis());
     }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/WeightedResponseTimeRule.java
Patch:
@@ -181,6 +181,7 @@ public Server choose(ILoadBalancer lb, Object key) {
             // fallback to use round robin
             if (maxTotalWeight < 0.001d) {
                 server =  super.choose(getLoadBalancer(), key); 
+                return server;
             } else {
                 // generate a random weight between 0 (inclusive) to maxTotalWeight (exclusive)
                 double randomWeight = random.nextDouble() * maxTotalWeight;

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -98,6 +98,8 @@ public abstract class CommonClientConfigKey<T> implements IClientConfigKey<T> {
     
     public static final IClientConfigKey<Integer> ConnectTimeout = new CommonClientConfigKey<Integer>("ConnectTimeout"){};
     
+    public static final IClientConfigKey<Integer> BackoffInterval = new CommonClientConfigKey<Integer>("BackoffTimeout"){};
+    
     public static final IClientConfigKey<Integer> ReadTimeout = new CommonClientConfigKey<Integer>("ReadTimeout"){};
     
     public static final IClientConfigKey<Integer> SendBufferSize = new CommonClientConfigKey<Integer>("SendBufferSize"){};

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -23,6 +23,7 @@
 import com.netflix.config.DynamicProperty;
 import com.netflix.config.DynamicPropertyFactory;
 import com.netflix.config.DynamicStringProperty;
+
 import org.apache.commons.configuration.AbstractConfiguration;
 import org.apache.commons.configuration.Configuration;
 import org.slf4j.Logger;
@@ -121,6 +122,8 @@ public class DefaultClientConfigImpl implements IClientConfig {
 
     public static final int DEFAULT_MAX_AUTO_RETRIES = 0;
 
+    public static final int DEFAULT_BACKOFF_INTERVAL = 1000;
+    
     public static final int DEFAULT_READ_TIMEOUT = 5000;
 
     public static final int DEFAULT_CONNECTION_MANAGER_TIMEOUT = 2000;

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/NettyClientTest.java
Patch:
@@ -381,7 +381,7 @@ public void testLoadBalancingObservablesWithReadTimeout() throws Exception {
         IClientConfig config = DefaultClientConfigImpl
                 .getClientConfigWithDefaultValues()
                 .set(CommonClientConfigKey.ReadTimeout, 100);
-        HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet("/testAsync/readTimeout");//.withHeader("Content-length", "-1");
+        HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet("/testAsync/readTimeout");
         
         BaseLoadBalancer lb = new BaseLoadBalancer(new DummyPing(), new AvailabilityFilteringRule());
         LoadBalancingHttpClient<ByteBuf, ByteBuf> lbObservables = RibbonTransport.newHttpClient(lb, config, errorHandler);

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/TestExecutionListener.java
Patch:
@@ -63,8 +63,8 @@ private void checkContext(ExecutionContext<HttpClientRequest<I>> context) {
 
     private void checkExecutionInfo(ExecutionInfo info) {
         try {
-//            assertEquals(numAttemptsOnServer.get(), info.getNumberOfPastAttemptsOnServer());
-//            assertEquals(numServers.get(), info.getNumberOfPastServersAttempted());
+            assertEquals(numAttemptsOnServer.get(), info.getNumberOfPastAttemptsOnServer());
+            assertEquals(numServers.get(), info.getNumberOfPastServersAttempted());
         } catch (Throwable e) {
             e.printStackTrace();
             checkExecutionInfo = false;
@@ -113,7 +113,7 @@ public void onExecutionSuccess(ExecutionContext<HttpClientRequest<I>> context, H
     @Override
     public void onExecutionFailed(ExecutionContext<HttpClientRequest<I>> context, Throwable finalException, ExecutionInfo info) {
         checkContext(context);
-        checkExecutionInfo(info);
+//        checkExecutionInfo(info);
         executionFailedCounter.incrementAndGet();
         finalThrowable = finalException;
     }

File: ribbon-core/src/main/java/com/netflix/client/RetryHandler.java
Patch:
@@ -50,12 +50,12 @@ public interface RetryHandler {
     public boolean isCircuitTrippingException(Throwable e);
         
     /**
-     * Number of maximal retries to be done on one server
+     * @return Number of maximal retries to be done on one server
      */
     public int getMaxRetriesOnSameServer();
 
     /**
-     * Number of maximal different servers to retry
+     * @return Number of maximal different servers to retry
      */
     public int getMaxRetriesOnNextServer();
 }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/reactive/ExecutionInfo.java
Patch:
@@ -20,7 +20,7 @@
 import com.netflix.loadbalancer.Server;
 
 /**
- * Represents the state of execution for an instance of {@link com.netflix.loadbalancer.reactive.LoadBalancerObservableCommand}
+ * Represents the state of execution for an instance of {@link com.netflix.loadbalancer.reactive.LoadBalancerCommand}
  * and is passed to {@link ExecutionListener}
  *
  * @author Allen Wang

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/http/NettyHttpLoadBalancerErrorHandler.java
Patch:
@@ -51,8 +51,8 @@ public NettyHttpLoadBalancerErrorHandler(IClientConfig clientConfig) {
         super(clientConfig);
     }
     
-    public NettyHttpLoadBalancerErrorHandler(int retrySameServer, int retryNextServer, boolean retryEnabled) {
-        super(retrySameServer, retryNextServer, retryEnabled);
+    public NettyHttpLoadBalancerErrorHandler(int retryCount, boolean retryEnabled) {
+        super(0, retryCount, retryEnabled);
     }
     
     /**

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/http/SSEClient.java
Patch:
@@ -26,12 +26,12 @@
 import io.reactivex.netty.protocol.http.client.HttpClientResponse;
 import io.reactivex.netty.protocol.text.sse.ServerSentEvent;
 
-
 import com.netflix.client.RetryHandler;
 import com.netflix.client.config.DefaultClientConfigImpl;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.client.config.IClientConfigKey;
 import com.netflix.loadbalancer.ILoadBalancer;
+import com.netflix.loadbalancer.Server;
 
 public class SSEClient<I> extends LoadBalancingHttpClient<I, ServerSentEvent> {
     
@@ -57,9 +57,9 @@ public SSEClient(
     }
 
     @Override
-    protected HttpClient<I, ServerSentEvent> getRxClient(String host, int port) {
+    protected HttpClient<I, ServerSentEvent> getOrCreateRxClient(Server server) {
         HttpClientBuilder<I, ServerSentEvent> clientBuilder =
-                new HttpClientBuilder<I, ServerSentEvent>(host, port).pipelineConfigurator(pipelineConfigurator);
+                new HttpClientBuilder<I, ServerSentEvent>(server.getHost(), server.getPort()).pipelineConfigurator(pipelineConfigurator);
         int requestConnectTimeout = getProperty(IClientConfigKey.Keys.ConnectTimeout, null, DefaultClientConfigImpl.DEFAULT_CONNECT_TIMEOUT);
         RxClient.ClientConfig rxClientConfig = new HttpClientConfig.Builder().build();
         

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/tcp/LoadBalancingTcpClient.java
Patch:
@@ -52,7 +52,7 @@ public LoadBalancingTcpClient(IClientConfig config,
     }
 
     @Override
-    protected RxClient<I, O> cacheLoadRxClient(Server server) {
+    protected RxClient<I, O> createRxClient(Server server) {
         ClientBuilder<I, O> builder = RxNetty.newTcpClientBuilder(server.getHost(), server.getPort());
         if (pipelineConfigurator != null) {
             builder.pipelineConfigurator(pipelineConfigurator);

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/udp/LoadBalancingUdpClient.java
Patch:
@@ -46,7 +46,7 @@ public LoadBalancingUdpClient(ILoadBalancer lb, IClientConfig config,
     }
 
     @Override
-    protected RxClient<I, O> cacheLoadRxClient(Server server) {
+    protected RxClient<I, O> createRxClient(Server server) {
         UdpClientBuilder<I, O> builder = RxNetty.newUdpClientBuilder(server.getHost(), server.getPort());
         if (pipelineConfigurator != null) {
             builder.pipelineConfigurator(pipelineConfigurator);

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/netty/http/LoadBalancingExample.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.google.common.collect.Lists;
 import com.netflix.ribbon.transport.netty.RibbonTransport;
-import com.netflix.ribbon.transport.netty.http.NettyHttpClient;
+import com.netflix.ribbon.transport.netty.http.LoadBalancingHttpClient;
 import com.netflix.loadbalancer.BaseLoadBalancer;
 import com.netflix.loadbalancer.LoadBalancerBuilder;
 import com.netflix.loadbalancer.Server;
@@ -23,7 +23,7 @@ public static void main(String[] args) throws Exception {
         BaseLoadBalancer lb = LoadBalancerBuilder.newBuilder()
                 .buildFixedServerListLoadBalancer(servers);
             
-        NettyHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient(lb);
+        LoadBalancingHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient(lb);
         final CountDownLatch latch = new CountDownLatch(servers.size()); 
         Observer<HttpClientResponse<ByteBuf>> observer = new Observer<HttpClientResponse<ByteBuf>>() {
             @Override

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/netty/http/SimpleGet.java
Patch:
@@ -1,7 +1,7 @@
 package com.netflix.ribbon.examples.netty.http;
 
 import com.netflix.ribbon.transport.netty.RibbonTransport;
-import com.netflix.ribbon.transport.netty.http.NettyHttpClient;
+import com.netflix.ribbon.transport.netty.http.LoadBalancingHttpClient;
 import io.netty.buffer.ByteBuf;
 import io.reactivex.netty.protocol.http.client.HttpClientRequest;
 import io.reactivex.netty.protocol.http.client.HttpClientResponse;
@@ -14,7 +14,7 @@
 public class SimpleGet {
     @edu.umd.cs.findbugs.annotations.SuppressWarnings
     public static void main(String[] args) throws Exception {
-        NettyHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient();
+        LoadBalancingHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient();
         HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet("http://www.google.com/");
         final CountDownLatch latch = new CountDownLatch(1);
         client.submit(request)

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/rx/transport/RxMovieTransportExample.java
Patch:
@@ -19,7 +19,7 @@
 import com.netflix.client.config.CommonClientConfigKey;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.ribbon.transport.netty.RibbonTransport;
-import com.netflix.ribbon.transport.netty.http.NettyHttpClient;
+import com.netflix.ribbon.transport.netty.http.LoadBalancingHttpClient;
 import com.netflix.ribbon.examples.rx.AbstractRxMovieClient;
 import com.netflix.ribbon.examples.rx.RxMovieServer;
 import com.netflix.ribbon.examples.rx.common.Movie;
@@ -40,7 +40,7 @@
  */
 public class RxMovieTransportExample extends AbstractRxMovieClient {
 
-    private final NettyHttpClient<ByteBuf, ByteBuf> client;
+    private final LoadBalancingHttpClient<ByteBuf, ByteBuf> client;
 
     public RxMovieTransportExample(int port) {
         IClientConfig clientConfig = IClientConfig.Builder.newBuilder("movieServiceClient").build();

File: ribbon-guice/src/test/java/com/netflix/ribbon/examples/rx/RxMovieProxyExampleTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.netflix.client.config.ClientConfigFactory.DefaultClientConfigFactory;
 import com.netflix.client.config.DefaultClientConfigImpl;
 import com.netflix.client.config.IClientConfig;
-import com.netflix.ribbon.transport.netty.http.NettyHttpClient;
+import com.netflix.ribbon.transport.netty.http.LoadBalancingHttpClient;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.ribbon.DefaultResourceFactory;
 import com.netflix.ribbon.RibbonResourceFactory;
@@ -115,7 +115,7 @@ protected void configure() {
 
         RibbonTransportFactory transportFactory = injector.getInstance(RibbonTransportFactory.class);
         HttpClient<ByteBuf, ByteBuf> client = transportFactory.newHttpClient("myClient");
-        IClientConfig config = ((NettyHttpClient) client).getClientConfig();
+        IClientConfig config = ((LoadBalancingHttpClient) client).getClientConfig();
         assertEquals("MyConfig", config.getNameSpace());
     }
 }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/reactive/LoadBalancerObservableCommand.java
Patch:
@@ -77,7 +77,7 @@ private class RetryNextServerOperator implements Operator<T, T> {
 
         @Override
         public Subscriber<? super T> call(final Subscriber<? super T> t1) {
-            if (listenerInvoker != null) {
+            if (listenerInvoker != null && counter.get() == 0) {
                 try {
                     listenerInvoker.onExecutionStart();
                 } catch (AbortExecutionException e) {

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/reactive/LoadBalancerRetrySameServerCommand.java
Patch:
@@ -97,7 +97,7 @@ public Subscriber<? super T> call(final Subscriber<? super T> t1) {
             if (listenerInvoker != null) {
                 executionInfo = ExecutionInfo.create(server, counter.get(), numberServersAttempted);
                 try {
-                    if (invokeOnStartAndEnd) {
+                    if (invokeOnStartAndEnd && counter.get() == 0) {
                         listenerInvoker.onExecutionStart();
                     }
                     listenerInvoker.onStartWithServer(executionInfo);

File: ribbon-transport/src/main/java/com/netflix/ribbon/transport/netty/http/SSEClient.java
Patch:
@@ -33,7 +33,7 @@
 import com.netflix.client.config.IClientConfigKey;
 import com.netflix.loadbalancer.ILoadBalancer;
 
-public class SSEClient<I> extends NettyHttpClient<I, ServerSentEvent> {
+public class SSEClient<I> extends LoadBalancingHttpClient<I, ServerSentEvent> {
     
     public SSEClient(
             ILoadBalancer lb,

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/DiscoveryLoadBalancerTest.java
Patch:
@@ -47,7 +47,7 @@ public void testLoadBalancer() {
         IClientConfig config = IClientConfig.Builder.newBuilder().withDefaultValues()
                 .withDeploymentContextBasedVipAddresses(getVipAddress()).build()
                 .set(IClientConfigKey.Keys.NIWSServerListClassName, DiscoveryEnabledNIWSServerList.class.getName());
-        NettyHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient(config);
+        LoadBalancingHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient(config);
         LoadBalancerContext lbContext = client.getLoadBalancerContext();
         List<Server> serverList = lbContext.getLoadBalancer().getServerList(false);
         assertEquals(getMockServerList(), serverList);

File: ribbon-transport/src/test/java/com/netflix/ribbon/transport/netty/http/ServerListRefreshTest.java
Patch:
@@ -64,7 +64,7 @@ public void testServerListRefresh() throws IOException {
             BaseLoadBalancer lb = new BaseLoadBalancer();
             List<Server> initialList = Lists.newArrayList(new Server("localhost", server1.getPort()), new Server("localhost", server2.getPort()));
             lb.setServersList(initialList);
-            NettyHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient(lb);
+            LoadBalancingHttpClient<ByteBuf, ByteBuf> client = RibbonTransport.newHttpClient(lb);
             HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet("/");
             client.submit(request).toBlocking().last();
             client.submit(request).toBlocking().last();

File: ribbon-eureka/src/main/java/com/netflix/niws/loadbalancer/DiscoveryEnabledServer.java
Patch:
@@ -46,12 +46,12 @@ public String getAppName() {
             }
 
             @Override
-            public String getScalingGroup() {
+            public String getServerGroup() {
                 return instanceInfo.getASGName();
             }
 
             @Override
-            public String getVipAddresses() {
+            public String getServiceIdForDiscovery() {
                 return instanceInfo.getVIPAddress();
             }
 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/reactive/CommandBuilder.java
Patch:
@@ -22,7 +22,7 @@ public class CommandBuilder<T> {
     private ILoadBalancer loadBalancer;
     private IClientConfig config;
     private LoadBalancerContext loadBalancerContext;
-    private List<ExecutionListener<?, T>> listeners;
+    private List<? extends ExecutionListener<?, T>> listeners;
     private Object loadBalancerKey;
     private URI serviceLocator;
 
@@ -38,7 +38,7 @@ public CommandBuilder<T> withLoadBalancer(ILoadBalancer loadBalancer) {
         return this;
     }
 
-    public CommandBuilder<T> withListeners(List<ExecutionListener<?, T>> listeners) {
+    public CommandBuilder<T> withListeners(List<? extends ExecutionListener<?, T>> listeners) {
         this.listeners = listeners;
         return this;
     }

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/LoadBalancerRunnableCommand.java
Patch:
@@ -37,7 +37,7 @@ public LoadBalancerRunnableCommand(LoadBalancerContext loadBalancerContext, Retr
     }
 
     private LoadBalancerCommand2<T> createObservableCommand() {
-        return new LoadBalancerCommand2<T>(loadBalancerContext, retryHandler, loadBalancerURI, loadBalancerKey) {
+        return new LoadBalancerCommand2<T>(loadBalancerContext, retryHandler, loadBalancerURI, loadBalancerKey, null) {
             @Override
             public Observable<T> run(final Server server) {
                 return Observable.create(new OnSubscribe<T>() {

File: ribbon-transport/src/test/java/com/netflix/client/netty/http/NettyClientTest.java
Patch:
@@ -383,6 +383,9 @@ public void testLoadBalancingObservablesWithReadTimeout() throws Exception {
         ObserverWithLatch<Person> observer = new ObserverWithLatch<Person>();
         observableWithRetries.subscribe(observer);
         observer.await();
+        if (observer.error != null) {
+            observer.error.printStackTrace();
+        }
         assertEquals("ribbon", observer.obj.name);
         assertEquals(2, observer.obj.age);
         ServerStats stats = lbObservables.getServerStats(badServer);

File: ribbon-transport/src/test/java/com/netflix/client/netty/http/NettyClientTest.java
Patch:
@@ -383,6 +383,9 @@ public void testLoadBalancingObservablesWithReadTimeout() throws Exception {
         ObserverWithLatch<Person> observer = new ObserverWithLatch<Person>();
         observableWithRetries.subscribe(observer);
         observer.await();
+        if (observer.error != null) {
+            observer.error.printStackTrace();
+        }
         assertEquals("ribbon", observer.obj.name);
         assertEquals(2, observer.obj.age);
         ServerStats stats = lbObservables.getServerStats(badServer);

File: ribbon-core/src/main/java/com/netflix/client/config/ClientConfigFactory.java
Patch:
@@ -26,10 +26,8 @@ public static class DefaultClientConfigFactory implements ClientConfigFactory {
         @Override
         public IClientConfig newConfig() {
             IClientConfig config = new DefaultClientConfigImpl();
-            config.loadDefaultValues();
             return config;
-            
-        }        
+        }
     }
     
     public static final ClientConfigFactory DEFAULT = new DefaultClientConfigFactory();

File: ribbon-guice/src/main/java/com/netflix/ribbon/guice/RibbonModule.java
Patch:
@@ -23,6 +23,8 @@
 import com.netflix.ribbon.RibbonResourceFactory;
 import com.netflix.ribbon.RibbonTransportFactory;
 import com.netflix.ribbon.RibbonTransportFactory.DefaultRibbonTransportFactory;
+import com.netflix.ribbon.proxy.processor.AnnotationProcessorsProvider;
+import com.netflix.ribbon.proxy.processor.AnnotationProcessorsProvider.DefaultAnnotationProcessorsProvider;
 
 /**
  * Default bindings for Ribbon
@@ -35,6 +37,7 @@ public class RibbonModule extends AbstractModule {
     protected void configure() {
         bind(ClientConfigFactory.class).to(DefaultClientConfigFactory.class).in(Scopes.SINGLETON);
         bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
+        bind(AnnotationProcessorsProvider.class).to(DefaultAnnotationProcessorsProvider.class).in(Scopes.SINGLETON);
         bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);
     }
 }

File: ribbon-guice/src/main/java/com/netflix/ribbon/guice/RibbonResourceProvider.java
Patch:
@@ -58,7 +58,7 @@ public <B, V> V acceptExtensionVisitor(
 
     @Inject
     @Toolable
-    void initialize(RibbonResourceFactory factory) {
+    protected void initialize(RibbonResourceFactory factory) {
         this.factory = factory;
     }
 }

File: ribbon-guice/src/test/java/com/netflix/ribbon/examples/rx/RxMovieProxyExampleTest.java
Patch:
@@ -33,6 +33,8 @@
 import com.netflix.ribbon.examples.rx.proxy.RxMovieProxyExample;
 import com.netflix.ribbon.guice.RibbonModule;
 import com.netflix.ribbon.guice.RibbonResourceProvider;
+import com.netflix.ribbon.proxy.processor.AnnotationProcessorsProvider;
+import com.netflix.ribbon.proxy.processor.AnnotationProcessorsProvider.DefaultAnnotationProcessorsProvider;
 import io.netty.buffer.ByteBuf;
 import io.reactivex.netty.protocol.http.client.HttpClient;
 import org.junit.Test;
@@ -83,6 +85,7 @@ public void shouldBindCustomClientConfigFactory() {
                     protected void configure() {
                         bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);
                         bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
+                        bind(AnnotationProcessorsProvider.class).to(DefaultAnnotationProcessorsProvider.class).in(Scopes.SINGLETON);
                         bind(ClientConfigFactory.class).to(MyClientConfigFactory.class).in(Scopes.SINGLETON);
                     }
                 },

File: ribbon-transport/src/main/java/com/netflix/client/netty/LoadBalancingRxClient.java
Patch:
@@ -116,7 +116,7 @@ public LoadBalancingRxClient(ILoadBalancer lb, IClientConfig config, RetryHandle
     public IClientConfig getClientConfig() {
         return clientConfig;
     }
-        
+
     public int getResponseTimeOut() {
         int maxRetryNextServer = 0;
         int maxRetrySameServer = 0;

File: ribbon/src/main/java/com/netflix/ribbon/Ribbon.java
Patch:
@@ -18,6 +18,7 @@
 import com.netflix.client.config.ClientConfigFactory;
 import com.netflix.ribbon.http.HttpResourceGroup;
 import com.netflix.ribbon.http.HttpResourceGroup.Builder;
+import com.netflix.ribbon.proxy.processor.AnnotationProcessorsProvider;
 
 /**
  * A class that can be used to create {@link com.netflix.ribbon.http.HttpResourceGroup}, {@link com.netflix.ribbon.http.HttpResourceGroup.Builder},
@@ -26,7 +27,7 @@
  *
  */
 public final class Ribbon {
-    private static final RibbonResourceFactory factory = new DefaultResourceFactory(ClientConfigFactory.DEFAULT, RibbonTransportFactory.DEFAULT);
+    private static final RibbonResourceFactory factory = new DefaultResourceFactory(ClientConfigFactory.DEFAULT, RibbonTransportFactory.DEFAULT, AnnotationProcessorsProvider.DEFAULT);
     
     private Ribbon() {
     }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpResourceGroup.java
Patch:
@@ -28,7 +28,7 @@ public class HttpResourceGroup extends ResourceGroup<HttpRequestTemplate<?>> {
     private final HttpClient<ByteBuf, ByteBuf> client;
     private final HttpHeaders headers;
 
-    public static class Builder {
+    public static class Builder extends GroupBuilder<HttpResourceGroup> {
         private ClientOptions clientOptions;
         private HttpHeaders httpHeaders = new DefaultHttpHeaders();
         private ClientConfigFactory clientConfigFactory;
@@ -45,6 +45,7 @@ public static Builder newBuilder(String groupName, ClientConfigFactory configFac
             return new Builder(groupName, configFactory, transportFactory);
         }
 
+        @Override
         public Builder withClientOptions(ClientOptions options) {
             this.clientOptions = options;
             return this;
@@ -55,6 +56,7 @@ public Builder withHeader(String name, String value) {
             return this;
         }
 
+        @Override
         public HttpResourceGroup build() {
             return new HttpResourceGroup(name, clientOptions, clientConfigFactory, transportFactory, httpHeaders);
         }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/Utils.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Tomasz Bak
  */
-final class Utils {
+public final class Utils {
     private Utils() {
     }
 

File: ribbon/src/test/java/com/netflix/ribbon/proxy/HttpResourceGroupFactoryTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.netflix.ribbon.DefaultResourceFactory;
 import com.netflix.ribbon.RibbonTransportFactory;
 import com.netflix.ribbon.http.HttpResourceGroup;
+import com.netflix.ribbon.proxy.processor.AnnotationProcessorsProvider;
 import com.netflix.ribbon.proxy.sample.MovieServiceInterfaces.SampleMovieService;
 import com.netflix.ribbon.proxy.sample.MovieServiceInterfaces.SampleMovieServiceWithResourceGroupClassAnnotation;
 import com.netflix.ribbon.proxy.sample.MovieServiceInterfaces.SampleMovieServiceWithResourceGroupNameAnnotation;
@@ -37,8 +38,8 @@ public class HttpResourceGroupFactoryTest {
     @Test
     public void testResourceGroupAnnotationMissing() throws Exception {
         ClassTemplate<SampleMovieService> classTemplate = new ClassTemplate<SampleMovieService>(SampleMovieService.class);
-        new ProxyHttpResourceGroupFactory<SampleMovieService>(classTemplate, new DefaultResourceFactory(ClientConfigFactory.DEFAULT, RibbonTransportFactory.DEFAULT),
-                ClientConfigFactory.DEFAULT.newConfig(), RibbonTransportFactory.DEFAULT).createResourceGroup();
+        new ProxyHttpResourceGroupFactory<SampleMovieService>(classTemplate, new DefaultResourceFactory(ClientConfigFactory.DEFAULT, RibbonTransportFactory.DEFAULT, AnnotationProcessorsProvider.DEFAULT),
+                AnnotationProcessorsProvider.DEFAULT).createResourceGroup();
     }
 
     @Test

File: ribbon-evcache/src/test/java/com/netflix/ribbon/proxy/sample/MovieServiceInterfaces.java
Patch:
@@ -22,8 +22,6 @@
 
 import static com.netflix.ribbon.proxy.sample.ResourceGroupClasses.SampleHttpResourceGroup;
 
-// import com.netflix.ribbon.proxy.annotation.EvCache;
-
 /**
  * @author Tomasz Bak
  */

File: ribbon-guice/src/main/java/com/netflix/ribbon/guice/RibbonResourceProvider.java
Patch:
@@ -58,7 +58,7 @@ public <B, V> V acceptExtensionVisitor(
 
     @Inject
     @Toolable
-    void initialize(RibbonResourceFactory factory) {
+    protected void initialize(RibbonResourceFactory factory) {
         this.factory = factory;
     }
 }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpResourceGroup.java
Patch:
@@ -28,7 +28,7 @@ public class HttpResourceGroup extends ResourceGroup<HttpRequestTemplate<?>> {
     private final HttpClient<ByteBuf, ByteBuf> client;
     private final HttpHeaders headers;
 
-    public static class Builder {
+    public static class Builder extends GroupBuilder<HttpResourceGroup> {
         private ClientOptions clientOptions;
         private HttpHeaders httpHeaders = new DefaultHttpHeaders();
         private ClientConfigFactory clientConfigFactory;
@@ -45,6 +45,7 @@ public static Builder newBuilder(String groupName, ClientConfigFactory configFac
             return new Builder(groupName, configFactory, transportFactory);
         }
 
+        @Override
         public Builder withClientOptions(ClientOptions options) {
             this.clientOptions = options;
             return this;
@@ -55,6 +56,7 @@ public Builder withHeader(String name, String value) {
             return this;
         }
 
+        @Override
         public HttpResourceGroup build() {
             return new HttpResourceGroup(name, clientOptions, clientConfigFactory, transportFactory, httpHeaders);
         }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/MethodTemplateExecutor.java
Patch:
@@ -63,7 +63,7 @@ public ByteBuf call(byte[] toTransform, ByteBufAllocator byteBufAllocator) {
         this.methodTemplate = methodTemplate;
         httpRequestTemplateBuilder = createHttpRequestTemplateBuilder();
         for (AnnotationProcessor processor: annotations.getProcessors()) {
-            processor.process(httpRequestTemplateBuilder, methodTemplate.getMethod());
+            processor.process(methodTemplate.getTemplateName(), httpRequestTemplateBuilder, methodTemplate.getMethod());
         }
     }
 

File: ribbon/src/main/java/com/netflix/ribbon/proxy/ProxyHttpResourceGroupFactory.java
Patch:
@@ -54,7 +54,7 @@ public HttpResourceGroup createResourceGroup() {
             }
             HttpResourceGroup.Builder builder = httpResourceGroupFactory.createHttpResourceGroupBuilder(name);
             for (AnnotationProcessor processor: annotations.getProcessors()) {
-                processor.process(builder, classTemplate.getClientInterface());
+                processor.process(name, builder, httpResourceGroupFactory, classTemplate.getClientInterface());
             }
             return builder.build();
         }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/processor/ProxyAnnotations.java
Patch:
@@ -20,6 +20,7 @@ private ProxyAnnotations() {
         processors.add(new HttpAnnotationProcessor());
         processors.add(new HystrixAnnotationProcessor());
         processors.add(new CacheProviderAnnotationProcessor());
+        processors.add(new ClientPropertiesProcessor());
         ServiceLoader<AnnotationProcessor> loader = ServiceLoader.load(AnnotationProcessor.class);
         Iterator<AnnotationProcessor> iterator = loader.iterator();
         Set<AnnotationProcessor> externalProcessors = new HashSet<AnnotationProcessor>();

File: ribbon-guice/src/main/java/com/netflix/ribbon/guice/RibbonModule.java
Patch:
@@ -33,8 +33,8 @@
 public class RibbonModule extends AbstractModule {
     @Override
     protected void configure() {
-        bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);
-        bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
         bind(ClientConfigFactory.class).to(DefaultClientConfigFactory.class).in(Scopes.SINGLETON);
+        bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
+        bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);
     }
 }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/MethodTemplate.java
Patch:
@@ -147,7 +147,7 @@ public String getHystrixCacheKey() {
         return hystrixCacheKey;
     }
 
-    public FallbackHandler<?> getHystrixFallbackHandler() {
+    public FallbackHandler getHystrixFallbackHandler() {
         return hystrixFallbackHandler;
     }
 

File: ribbon/src/main/java/com/netflix/ribbon/proxy/ProxyHttpResourceGroupFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.netflix.client.config.ClientConfigFactory;
 import com.netflix.client.config.IClientConfig;
+import com.netflix.ribbon.ClientOptions;
 import com.netflix.ribbon.DefaultResourceFactory;
 import com.netflix.ribbon.RibbonResourceFactory;
 import com.netflix.ribbon.RibbonTransportFactory;
@@ -52,7 +53,7 @@ public HttpResourceGroup createResourceGroup() {
                 name = classTemplate.getClientInterface().getSimpleName();
             }
             clientConfig.loadProperties(name);
-            return httpResourceGroupFactory.createHttpResourceGroup(clientConfig);
+            return httpResourceGroupFactory.createHttpResourceGroupBuilder(name).withClientOptions(ClientOptions.from(clientConfig)).build();
         }
     }
 }

File: ribbon-guice/src/main/java/com/netflix/ribbon/guice/RibbonModule.java
Patch:
@@ -33,8 +33,8 @@
 public class RibbonModule extends AbstractModule {
     @Override
     protected void configure() {
-        bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);
-        bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
         bind(ClientConfigFactory.class).to(DefaultClientConfigFactory.class).in(Scopes.SINGLETON);
+        bind(RibbonTransportFactory.class).to(DefaultRibbonTransportFactory.class).in(Scopes.SINGLETON);
+        bind(RibbonResourceFactory.class).to(DefaultResourceFactory.class).in(Scopes.SINGLETON);
     }
 }

File: ribbon/src/main/java/com/netflix/ribbon/RibbonResourceFactory.java
Patch:
@@ -46,7 +46,7 @@ public <T> T from(Class<T> classType) {
         return RibbonDynamicProxy.newInstance(classType, this, clientConfigFactory, transportFactory);
     }
 
-    public Builder createHttpResourceGroup(String name, ClientOptions options) {
+    public Builder createHttpResourceGroupBuilder(String name, ClientOptions options) {
         Builder builder = Builder.newBuilder(name, clientConfigFactory, transportFactory);
         builder.withClientOptions(options);
         return builder;

File: ribbon/src/main/java/com/netflix/ribbon/proxy/MethodTemplate.java
Patch:
@@ -147,7 +147,7 @@ public String getHystrixCacheKey() {
         return hystrixCacheKey;
     }
 
-    public FallbackHandler<?> getHystrixFallbackHandler() {
+    public FallbackHandler getHystrixFallbackHandler() {
         return hystrixFallbackHandler;
     }
 

File: ribbon/src/main/java/com/netflix/ribbon/proxy/ProxyHttpResourceGroupFactory.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.netflix.client.config.ClientConfigFactory;
 import com.netflix.client.config.IClientConfig;
+import com.netflix.ribbon.ClientOptions;
 import com.netflix.ribbon.DefaultResourceFactory;
 import com.netflix.ribbon.RibbonResourceFactory;
 import com.netflix.ribbon.RibbonTransportFactory;
@@ -52,7 +53,7 @@ public HttpResourceGroup createResourceGroup() {
                 name = classTemplate.getClientInterface().getSimpleName();
             }
             clientConfig.loadProperties(name);
-            return httpResourceGroupFactory.createHttpResourceGroup(clientConfig);
+            return httpResourceGroupFactory.createHttpResourceGroupBuilder(name, ClientOptions.from(clientConfig)).build();
         }
     }
 }

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/rx/RxMovieServer.java
Patch:
@@ -81,7 +81,7 @@ public Observable<Void> handle(HttpServerRequest<ByteBuf> request, final HttpSer
                 response.setStatus(HttpResponseStatus.NOT_FOUND);
                 return response.close();
             }
-        }).pipelineConfigurator(PipelineConfigurators.<ByteBuf, ByteBuf>httpServerConfigurator()).enableWireLogging(LogLevel.DEBUG).build();
+        }).pipelineConfigurator(PipelineConfigurators.<ByteBuf, ByteBuf>httpServerConfigurator()).enableWireLogging(LogLevel.ERROR).build();
 
         System.out.println("RxMovie server started...");
         return server;

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequest.java
Patch:
@@ -19,7 +19,7 @@
 import com.netflix.ribbon.CacheProvider;
 import com.netflix.ribbon.RequestWithMetaData;
 import com.netflix.ribbon.RibbonRequest;
-import com.netflix.ribbon.hystrix.HystrixCacheObservableCommand;
+import com.netflix.ribbon.hystrix.CacheObservableCommand;
 import com.netflix.ribbon.hystrix.HystrixObservableCommandChain;
 import com.netflix.ribbon.template.TemplateParser;
 import com.netflix.ribbon.template.TemplateParsingException;
@@ -94,10 +94,10 @@ public ByteBuf call(ByteBuf t1) {
     HystrixObservableCommandChain<T> createHystrixCommandChain() {
         List<HystrixObservableCommand<T>> commands = new ArrayList<HystrixObservableCommand<T>>(2);
         if (cacheProvider != null) {
-            commands.add(new HystrixCacheObservableCommand<T>(cacheProvider.getCacheProvider(), cacheProvider.getKey(), cacheHystrixCacheKey,
+            commands.add(new CacheObservableCommand<T>(cacheProvider.getCacheProvider(), cacheProvider.getKey(), cacheHystrixCacheKey,
                     requestProperties, template.cacheHystrixProperties()));
         }
-        commands.add(new RibbonHystrixObservableCommand<T>(client, httpRequest, hystrixCacheKey, requestProperties, template.fallbackHandler(),
+        commands.add(new HttpResourceObservableCommand<T>(client, httpRequest, hystrixCacheKey, requestProperties, template.fallbackHandler(),
                 template.responseValidator(), template.getClassType(), template.hystrixProperties()));
 
         return new HystrixObservableCommandChain<T>(commands);

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequestTemplate.java
Patch:
@@ -50,7 +50,7 @@
  */
 public class HttpRequestTemplate<T> extends RequestTemplate<T, HttpClientResponse<ByteBuf>> {
 
-    public static final String CACHE_HYSTRIX_COMMAND_SUFFIX = ".cache";
+    public static final String CACHE_HYSTRIX_COMMAND_SUFFIX = "_cache";
     public static final int DEFAULT_CACHE_TIMEOUT = 20;
 
     private final HttpClient<ByteBuf, ByteBuf> client;

File: ribbon/src/main/java/com/netflix/ribbon/hystrix/CacheObservableCommand.java
Patch:
@@ -9,14 +9,14 @@
 /**
  * @author Tomasz Bak
  */
-public class HystrixCacheObservableCommand<T> extends HystrixObservableCommand<T> {
+public class CacheObservableCommand<T> extends HystrixObservableCommand<T> {
 
     private final CacheProvider<T> cacheProvider;
     private final String key;
     private final String hystrixCacheKey;
     private final Map<String, Object> requestProperties;
 
-    public HystrixCacheObservableCommand(
+    public CacheObservableCommand(
             CacheProvider<T> cacheProvider,
             String key,
             String hystrixCacheKey,

File: ribbon-core/src/main/java/com/netflix/client/config/IClientConfig.java
Patch:
@@ -345,7 +345,7 @@ public Builder withServerListRefreshIntervalMills(int value) {
             config.set(CommonClientConfigKey.ServerListRefreshInterval, value);
             return this;
         }
-          
+        
         public Builder withZoneAffinityEnabled(boolean value) {
             config.set(CommonClientConfigKey.EnableZoneAffinity, value);
             return this;

File: ribbon-guice/src/test/java/com/netflix/ribbon/guice/RibbonModuleTest.java
Patch:
@@ -13,8 +13,10 @@
 
 import com.google.inject.Guice;
 import com.google.inject.Injector;
+import com.netflix.ribbon.ClientConfigFactory;
 import com.netflix.ribbon.ClientOptions;
 import com.netflix.ribbon.HttpResourceGroupFactory;
+import com.netflix.ribbon.RibbonTransportFactory;
 import com.netflix.ribbon.examples.rx.AbstractRxMovieClient;
 import com.netflix.ribbon.examples.rx.common.Movie;
 import com.netflix.ribbon.examples.rx.common.RecommendationServiceFallbackHandler;

File: ribbon-httpclient/src/main/java/com/netflix/client/http/HttpRequest.java
Patch:
@@ -212,6 +212,8 @@ public HttpRequest replaceUri(URI newURI) {
         .queryParams(this.queryParams)
         .setRetriable(this.isRetriable())
         .loadBalancerKey(this.getLoadBalancerKey())
-        .verb(this.getVerb()).build();        
+        .verb(this.getVerb())
+        .entity(this.entity)
+        .build();        
     }
 }

File: ribbon-transport/src/test/java/com/netflix/client/netty/http/NettyClientTest.java
Patch:
@@ -179,7 +179,7 @@ public Boolean call() {
     public void testPoolReuse() throws Exception {
         HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet(SERVICE_URI + "testAsync/person");
         NettyHttpClient<ByteBuf, ByteBuf> observableClient = (NettyHttpClient<ByteBuf, ByteBuf>) RibbonTransport.newHttpClient(
-                IClientConfig.Builder.newBuilder()
+                IClientConfig.Builder.newBuilder().withDefaultValues()
                 .withMaxAutoRetries(1)
                 .withMaxAutoRetriesNextServer(1).build());
         Observable<HttpClientResponse<ByteBuf>> response = observableClient.submit(request);

File: ribbon/src/main/java/com/netflix/ribbon/ClientOptions.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.netflix.ribbon;
 
+import com.netflix.client.config.IClientConfigKey;
+
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.netflix.client.config.IClientConfigKey;
-
 /**
  * API to construct Ribbon client options to be used by {@link ResourceGroup}
  * 
@@ -97,7 +97,7 @@ public ClientOptions withLoadBalancerEnabled(boolean value) {
         options.put(IClientConfigKey.Keys.InitializeNFLoadBalancer, value);
         return this;                                
     }
-    
+
     Map<IClientConfigKey<?>, Object> getOptions() {
         return options;
     }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpMetaRequest.java
Patch:
@@ -18,7 +18,7 @@
 import com.netflix.hystrix.HystrixExecutableInfo;
 import com.netflix.ribbon.RequestWithMetaData;
 import com.netflix.ribbon.RibbonResponse;
-import com.netflix.ribbon.http.hystrix.HystrixNotification;
+import com.netflix.ribbon.hystrix.HystrixNotification;
 import io.netty.buffer.ByteBuf;
 import rx.Observable;
 import rx.Observable.OnSubscribe;

File: ribbon/src/main/java/com/netflix/ribbon/http/RibbonHystrixObservableCommand.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbon.http.hystrix;
+package com.netflix.ribbon.http;
 
 import com.netflix.hystrix.HystrixObservableCommand;
 import com.netflix.hystrix.exception.HystrixBadRequestException;

File: ribbon/src/main/java/com/netflix/ribbon/hystrix/HystrixNotification.java
Patch:
@@ -1,4 +1,4 @@
-package com.netflix.ribbon.http.hystrix;
+package com.netflix.ribbon.hystrix;
 
 import com.netflix.hystrix.HystrixObservableCommand;
 import rx.Notification.Kind;

File: ribbon/src/main/java/com/netflix/ribbon/hystrix/HystrixObservableCommandChain.java
Patch:
@@ -1,4 +1,4 @@
-package com.netflix.ribbon.http.hystrix;
+package com.netflix.ribbon.hystrix;
 
 import com.netflix.hystrix.HystrixObservableCommand;
 import rx.Observable;
@@ -14,12 +14,12 @@
  * This class implements chaining mechanism for Hystrix commands. If a command in a chain fails, the next one
  * is run. If all commands in the chain failed, the error from the last one is reported.
  * To be able to identify the Hystrix command for which request was executed, a materialized
- * {@link com.netflix.ribbon.http.hystrix.HystrixNotification} event stream is returned by
+ * {@link HystrixNotification} event stream is returned by
  * {@link #materializedNotificationObservable()} method. For convinvience this stream is mapped by:
  * <ul>
  *     <li>{@link #toObservable()} - value of T observable (no access to Hystrix information)</li>
  *     <li>{@link #toNotificationObservable()} -
- *         does not encapsulate error in {@link com.netflix.ribbon.http.hystrix.HystrixNotification}, but calls
+ *         does not encapsulate error in {@link HystrixNotification}, but calls
  *         onError directly (we need it for mapping to future from observable).
  *     </li>
  * </ul>

File: ribbon/src/test/java/com/netflix/ribbon/http/TemplateBuilderTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import com.netflix.ribbon.http.hystrix.HystrixObservableCommandChain;
+import com.netflix.ribbon.hystrix.HystrixObservableCommandChain;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.reactivex.netty.protocol.http.client.HttpClientRequest;

File: ribbon/src/test/java/com/netflix/ribbon/hystrix/HystrixCommandChainTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.netflix.ribbon.http.hystrix;
+package com.netflix.ribbon.hystrix;
 
 import com.netflix.hystrix.HystrixCommandGroupKey;
 import com.netflix.hystrix.HystrixObservableCommand;

File: ribbon-httpclient/src/main/java/com/netflix/client/http/HttpRequest.java
Patch:
@@ -212,6 +212,8 @@ public HttpRequest replaceUri(URI newURI) {
         .queryParams(this.queryParams)
         .setRetriable(this.isRetriable())
         .loadBalancerKey(this.getLoadBalancerKey())
-        .verb(this.getVerb()).build();        
+        .verb(this.getVerb())
+        .entity(this.entity)
+        .build();        
     }
 }

File: ribbon-core/src/main/java/com/netflix/client/config/IClientConfig.java
Patch:
@@ -345,7 +345,7 @@ public Builder withServerListRefreshIntervalMills(int value) {
             config.set(CommonClientConfigKey.ServerListRefreshInterval, value);
             return this;
         }
-          
+        
         public Builder withZoneAffinityEnabled(boolean value) {
             config.set(CommonClientConfigKey.EnableZoneAffinity, value);
             return this;

File: ribbon-transport/src/test/java/com/netflix/client/netty/http/NettyClientTest.java
Patch:
@@ -179,7 +179,7 @@ public Boolean call() {
     public void testPoolReuse() throws Exception {
         HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet(SERVICE_URI + "testAsync/person");
         NettyHttpClient<ByteBuf, ByteBuf> observableClient = (NettyHttpClient<ByteBuf, ByteBuf>) RibbonTransport.newHttpClient(
-                IClientConfig.Builder.newBuilder()
+                IClientConfig.Builder.newBuilder().withDefaultValues()
                 .withMaxAutoRetries(1)
                 .withMaxAutoRetriesNextServer(1).build());
         Observable<HttpClientResponse<ByteBuf>> response = observableClient.submit(request);

File: ribbon/src/main/java/com/netflix/ribbon/ClientOptions.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.netflix.ribbon;
 
+import com.netflix.client.config.IClientConfigKey;
+
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.netflix.client.config.IClientConfigKey;
-
 /**
  * API to construct Ribbon client options to be used by {@link ResourceGroup}
  * 
@@ -97,7 +97,7 @@ public ClientOptions withLoadBalancerEnabled(boolean value) {
         options.put(IClientConfigKey.Keys.InitializeNFLoadBalancer, value);
         return this;                                
     }
-    
+
     Map<IClientConfigKey<?>, Object> getOptions() {
         return options;
     }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpResourceGroup.java
Patch:
@@ -38,7 +38,8 @@ public HttpResourceGroup(String groupName, ClientOptions options) {
         client = RibbonTransport.newHttpClient(getClientConfig());
         headers = new DefaultHttpHeaders();
     }
-    
+
+    @Override
     protected IClientConfig loadDefaultConfig(String groupName) {
         return IClientConfig.Builder.newBuilder(groupName).build();
     }

File: ribbon-core/src/main/java/com/netflix/client/config/IClientConfig.java
Patch:
@@ -343,7 +343,7 @@ public Builder withServerListRefreshIntervalMills(int value) {
             config.set(CommonClientConfigKey.ServerListRefreshInterval, value);
             return this;
         }
-          
+        
         public Builder withZoneAffinityEnabled(boolean value) {
             config.set(CommonClientConfigKey.EnableZoneAffinity, value);
             return this;

File: ribbon-transport/src/test/java/com/netflix/client/netty/http/NettyClientTest.java
Patch:
@@ -179,7 +179,7 @@ public Boolean call() {
     public void testPoolReuse() throws Exception {
         HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet(SERVICE_URI + "testAsync/person");
         NettyHttpClient<ByteBuf, ByteBuf> observableClient = (NettyHttpClient<ByteBuf, ByteBuf>) RibbonTransport.newHttpClient(
-                IClientConfig.Builder.newBuilder()
+                IClientConfig.Builder.newBuilder().withDefaultValues()
                 .withMaxAutoRetries(1)
                 .withMaxAutoRetriesNextServer(1).build());
         Observable<HttpClientResponse<ByteBuf>> response = observableClient.submit(request);

File: ribbon/src/main/java/com/netflix/ribbon/ClientOptions.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.netflix.ribbon;
 
+import com.netflix.client.config.IClientConfigKey;
+
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.netflix.client.config.IClientConfigKey;
-
 /**
  * API to construct Ribbon client options to be used by {@link ResourceGroup}
  * 
@@ -97,7 +97,7 @@ public ClientOptions withLoadBalancerEnabled(boolean value) {
         options.put(IClientConfigKey.Keys.InitializeNFLoadBalancer, value);
         return this;                                
     }
-    
+
     Map<IClientConfigKey<?>, Object> getOptions() {
         return options;
     }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpResourceGroup.java
Patch:
@@ -38,7 +38,8 @@ public HttpResourceGroup(String groupName, ClientOptions options) {
         client = RibbonTransport.newHttpClient(getClientConfig());
         headers = new DefaultHttpHeaders();
     }
-    
+
+    @Override
     protected IClientConfig loadDefaultConfig(String groupName) {
         return IClientConfig.Builder.newBuilder(groupName).build();
     }

File: ribbon-core/src/main/java/com/netflix/client/ClientRequest.java
Patch:
@@ -49,7 +49,7 @@ public ClientRequest(URI uri) {
      *
      * 
      * @param uri  URI to set
-     * @param loadBalancerKey the object that is used by {@link ILoadBalancer#chooseServer(Object)}, can be null
+     * @param loadBalancerKey the object that is used by {code com.netflix.loadbalancer.ILoadBalancer#chooseServer(Object)}, can be null
      * @param isRetriable if the operation is retriable on failures
      * @param overrideConfig client configuration that is used for this specific request. can be null. 
      */
@@ -122,7 +122,7 @@ protected final ClientRequest setOverrideConfig(IClientConfig overrideConfig) {
     }
     
     /**
-     * Create a client request using a new URI. This is used by {@link AbstractLoadBalancerAwareClient#computeFinalUriWithLoadBalancer(ClientRequest)}.
+     * Create a client request using a new URI. This is used by {@code com.netflix.client.AbstractLoadBalancerAwareClient#computeFinalUriWithLoadBalancer(ClientRequest)}.
      * It first tries to clone the request and if that fails it will use the copy constructor {@link #ClientRequest(ClientRequest)}.
      * Sub classes are recommended to override this method to provide more efficient implementation.
      * 

File: ribbon-core/src/main/java/com/netflix/client/DefaultLoadBalancerRetryHandler.java
Patch:
@@ -33,9 +33,6 @@
  * {@link RetryHandler}
  * 
  * @author awang
- *
- * @param <T> Type of request
- * @param <S> Type of response
  */
 public class DefaultLoadBalancerRetryHandler implements RetryHandler {
 

File: ribbon-core/src/main/java/com/netflix/client/RetryHandler.java
Patch:
@@ -33,7 +33,7 @@ public interface RetryHandler {
     /**
      * Test if an exception is retriable for the load balancer
      * 
-     * @param request Request that causes such exception
+     * @param e the original exception
      * @param sameServer if true, the method is trying to determine if retry can be 
      *        done on the same server. Otherwise, it is testing whether retry can be
      *        done on a different server

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpClientResponse.java
Patch:
@@ -97,7 +97,6 @@ public boolean containsHeader(String name) {
         * Returns the raw entity if available from the response 
         * @return
         * @throws IllegalArgumentException
-        * @throws ClientException
         */
     public InputStream getRawEntity() {
         return bcr.getEntityInputStream();

File: ribbon-loadbalancer/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java
Patch:
@@ -119,8 +119,8 @@ public T executeWithLoadBalancer(S request) throws ClientException {
     /**
      * This method should be used when the caller wants to dispatch the request to a server chosen by
      * the load balancer, instead of specifying the server in the request's URI. 
-     * It calculates the final URI by calling {@link #computeFinalUriWithLoadBalancer(ClientRequest)}
-     * and then calls {@link #execute(ClientRequest)}.
+     * It calculates the final URI by calling {@link #reconstructURIWithServer(com.netflix.loadbalancer.Server, java.net.URI)}
+     * and then calls {@link #executeWithLoadBalancer(ClientRequest, com.netflix.client.config.IClientConfig)}.
      * 
      * @param request request to be dispatched to a server chosen by the load balancer. The URI can be a partial
      * URI which does not contain the host name or the protocol.

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/BestAvailableRule.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * A rule that skips servers with "tripped" circuit breaker and picks the
  * server with lowest concurrent requests.
- * <p/>
+ * <p>
  * This rule should typically work with {@link ServerListSubsetFilter} which puts a limit on the 
  * servers that is visible to the rule. This ensure that it only needs to find the minimal 
  * concurrent requests among a small number of servers. Also, each client will get a random list of 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/DynamicServerListLoadBalancer.java
Patch:
@@ -158,7 +158,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     }
 
     void restOfInit(IClientConfig clientConfig) {
-        refeshIntervalMills = Integer.valueOf(clientConfig.getProperty(
+        refeshIntervalMills = Integer.parseInt(clientConfig.getProperty(
                 CommonClientConfigKey.ServerListRefreshInterval,
                 LISTOFSERVERS_CACHE_REPEAT_INTERVAL).toString());
 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/RetryRule.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Given that
- * <code>IRule<code> can be cascaded, this RetryRule class allows adding a retry logic to an existing Rule.
+ * {@link IRule} can be cascaded, this {@link RetryRule} class allows adding a retry logic to an existing Rule.
  * 
  * @author stonse
  * 

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/Server.java
Patch:
@@ -100,7 +100,7 @@ static Pair<String, Integer> getHostPort(String id) {
             } else {
                 host = id.substring(0, colon_idx);
                 try {
-                    port = Integer.valueOf(id.substring(colon_idx + 1));
+                    port = Integer.parseInt(id.substring(colon_idx + 1));
                 } catch (NumberFormatException e) {
                     throw e;
                 }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequestTemplate.java
Patch:
@@ -39,7 +39,7 @@
 
 /**
  * Provides API to construct a request template for HTTP resource. 
- * <p/>
+ * <p>
  * <b>Note:</b> This class is not thread safe. It is advised that the template is created and
  * constructed in same thread at initialization of the application. Users can call {@link #requestBuilder()}
  * later on which returns a {@link RequestBuilder} which is thread safe. 

File: ribbon/src/main/java/com/netflix/ribbon/template/TemplateVar.java
Patch:
@@ -17,7 +17,7 @@
 
 
 /**
- * TemplateVar is a base type for use in the template parser & URI Fragment builder to isolate template values from
+ * TemplateVar is a base type for use in the template parser &amp; URI Fragment builder to isolate template values from
  * static values
  */
 class TemplateVar {

File: ribbon/src/main/java/com/netflix/ribbon/RibbonRequest.java
Patch:
@@ -41,7 +41,7 @@ public interface RibbonRequest<T> {
     /**
      * Non blocking API that returns an {@link Observable} while the execution is started asynchronously.
      * Subscribing to the returned {@link Observable} is guaranteed to get the complete sequence from 
-     * the beginning, which might be replayed by the framework. 
+     * the beginning, which might be replayed by the framework. Use this API for "fire and forget".
      */
     public Observable<T> observe();
     

File: ribbon/src/main/java/com/netflix/ribbon/proxy/annotation/EvCache.java
Patch:
@@ -31,7 +31,7 @@
 
     String appName();
 
-    String cacheKeyTemplate();
+    String key();
 
     int ttl() default 100;
 

File: ribbon/src/main/java/com/netflix/ribbon/proxy/annotation/Http.java
Patch:
@@ -37,7 +37,7 @@ enum HttpMethod {
 
     HttpMethod method();
 
-    String uriTemplate() default "";
+    String uri() default "";
 
     Header[] headers() default {};
 

File: ribbon/src/test/java/com/netflix/ribbon/proxy/MethodTemplateTest.java
Patch:
@@ -11,6 +11,7 @@
 import com.netflix.ribbon.proxy.sample.MovieServiceInterfaces.TemplateNameDerivedFromMethodName;
 import com.netflix.ribbon.proxy.sample.MovieTransformer;
 import com.netflix.ribbon.proxy.sample.SampleCacheProviderFactory.SampleCacheProvider;
+import io.netty.buffer.ByteBuf;
 import org.junit.Test;
 
 import static com.netflix.ribbon.proxy.Utils.*;
@@ -34,7 +35,7 @@ public void testGetWithOneParameter() throws Exception {
         assertTrue("value2".equals(template.getHeaders().get("X-MyHeader2").get(0)));
 
         assertEquals(0, template.getParamPosition(0));
-        assertEquals(template.getResultType(), Movie.class);
+        assertEquals(template.getResultType(), ByteBuf.class);
 
         assertEquals("findMovieById/{id}", template.getHystrixCacheKey());
         assertNotNull(template.getHystrixFallbackHandler());

File: ribbon/src/test/java/com/netflix/ribbon/proxy/RibbonDynamicProxyTest.java
Patch:
@@ -83,7 +83,7 @@ public void testTypedClientGetWithPathParameter() throws Exception {
         replayAll();
 
         SampleMovieService service = RibbonDynamicProxy.newInstance(SampleMovieService.class, httpResourceGroupMock);
-        RibbonRequest<Movie> ribbonMovie = service.findMovieById("123");
+        RibbonRequest<ByteBuf> ribbonMovie = service.findMovieById("123");
 
         assertNotNull(ribbonMovie);
     }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/annotation/EvCache.java
Patch:
@@ -31,7 +31,7 @@
 
     String appName();
 
-    String cacheKeyTemplate();
+    String cacheKey();
 
     int ttl() default 100;
 

File: ribbon/src/main/java/com/netflix/ribbon/proxy/annotation/Http.java
Patch:
@@ -37,7 +37,7 @@ enum HttpMethod {
 
     HttpMethod method();
 
-    String uriTemplate() default "";
+    String uri() default "";
 
     Header[] headers() default {};
 

File: ribbon/src/test/java/com/netflix/ribbon/proxy/MethodTemplateTest.java
Patch:
@@ -11,6 +11,7 @@
 import com.netflix.ribbon.proxy.sample.MovieServiceInterfaces.TemplateNameDerivedFromMethodName;
 import com.netflix.ribbon.proxy.sample.MovieTransformer;
 import com.netflix.ribbon.proxy.sample.SampleCacheProviderFactory.SampleCacheProvider;
+import io.netty.buffer.ByteBuf;
 import org.junit.Test;
 
 import static com.netflix.ribbon.proxy.Utils.*;
@@ -34,7 +35,7 @@ public void testGetWithOneParameter() throws Exception {
         assertTrue("value2".equals(template.getHeaders().get("X-MyHeader2").get(0)));
 
         assertEquals(0, template.getParamPosition(0));
-        assertEquals(template.getResultType(), Movie.class);
+        assertEquals(template.getResultType(), ByteBuf.class);
 
         assertEquals("findMovieById/{id}", template.getHystrixCacheKey());
         assertNotNull(template.getHystrixFallbackHandler());

File: ribbon/src/test/java/com/netflix/ribbon/proxy/RibbonDynamicProxyTest.java
Patch:
@@ -83,7 +83,7 @@ public void testTypedClientGetWithPathParameter() throws Exception {
         replayAll();
 
         SampleMovieService service = RibbonDynamicProxy.newInstance(SampleMovieService.class, httpResourceGroupMock);
-        RibbonRequest<Movie> ribbonMovie = service.findMovieById("123");
+        RibbonRequest<ByteBuf> ribbonMovie = service.findMovieById("123");
 
         assertNotNull(ribbonMovie);
     }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequest.java
Patch:
@@ -73,6 +73,9 @@ public final String getKey() {
             this.cacheProvider = null;
         }
         this.template = requestBuilder.template();
+        if (!ByteBuf.class.isAssignableFrom(template.getClassType())) {
+            throw new IllegalArgumentException("Return type other than ByteBuf is not currently supported as serialization functionality is still work in progress");
+        }
     }
 
     RibbonHystrixObservableCommand<T> createHystrixCommand() {

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpMetaRequest.java
Patch:
@@ -117,7 +117,7 @@ public void onNext(T t) {
     @Override
     public Future<RibbonResponse<T>> queue() {
         final RibbonHystrixObservableCommand<T> hystrixCommand = request.createHystrixCommand();
-        final Future<T> f = hystrixCommand.queue();
+        final Future<T> f = hystrixCommand.getObservable().toBlocking().toFuture();
         return new Future<RibbonResponse<T>>() {
             @Override
             public boolean cancel(boolean arg0) {
@@ -154,7 +154,7 @@ public boolean isDone() {
     @Override
     public RibbonResponse<T> execute() {
         RibbonHystrixObservableCommand<T> hystrixCommand = request.createHystrixCommand();
-        T obj = hystrixCommand.execute();
+        T obj = hystrixCommand.getObservable().toBlocking().last();
         return new HttpMetaResponse<T>(obj, hystrixCommand);
     }    
 }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.Future;
 
 import rx.Observable;
+import rx.functions.Func1;
 
 import com.netflix.ribbon.CacheProvider;
 import com.netflix.ribbon.RequestWithMetaData;
@@ -81,12 +82,12 @@ RibbonHystrixObservableCommand<T> createHystrixCommand() {
     
     @Override
     public T execute() {
-        return createHystrixCommand().execute();
+        return createHystrixCommand().getObservable().toBlocking().last();
     }
 
     @Override
     public Future<T> queue() {
-        return createHystrixCommand().queue();
+        return createHystrixCommand().getObservable().toBlocking().toFuture();
     }
 
     @Override

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpMetaRequest.java
Patch:
@@ -117,7 +117,7 @@ public void onNext(T t) {
     @Override
     public Future<RibbonResponse<T>> queue() {
         final RibbonHystrixObservableCommand<T> hystrixCommand = request.createHystrixCommand();
-        final Future<T> f = hystrixCommand.queue();
+        final Future<T> f = hystrixCommand.getObservable().toBlocking().toFuture();
         return new Future<RibbonResponse<T>>() {
             @Override
             public boolean cancel(boolean arg0) {
@@ -154,7 +154,7 @@ public boolean isDone() {
     @Override
     public RibbonResponse<T> execute() {
         RibbonHystrixObservableCommand<T> hystrixCommand = request.createHystrixCommand();
-        T obj = hystrixCommand.execute();
+        T obj = hystrixCommand.getObservable().toBlocking().last();
         return new HttpMetaResponse<T>(obj, hystrixCommand);
     }    
 }

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.Future;
 
 import rx.Observable;
+import rx.functions.Func1;
 
 import com.netflix.ribbon.CacheProvider;
 import com.netflix.ribbon.RequestWithMetaData;
@@ -81,12 +82,12 @@ RibbonHystrixObservableCommand<T> createHystrixCommand() {
     
     @Override
     public T execute() {
-        return createHystrixCommand().execute();
+        return createHystrixCommand().getObservable().toBlocking().last();
     }
 
     @Override
     public Future<T> queue() {
-        return createHystrixCommand().queue();
+        return createHystrixCommand().getObservable().toBlocking().toFuture();
     }
 
     @Override

File: ribbon-core/src/main/java/com/netflix/client/ssl/AbstractSslContextFactory.java
Patch:
@@ -15,7 +15,7 @@
 * limitations under the License.
 *
 */
-package com.netflix.niws.cert;
+package com.netflix.client.ssl;
 
 import java.security.KeyManagementException;
 import java.security.KeyStore;
@@ -32,8 +32,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.netflix.niws.client.ClientSslSocketFactoryException;
-
 /**
  * 
  * Abstract class to represent what we logically associate with the ssl context on the client side,

File: ribbon-core/src/main/java/com/netflix/client/ssl/ClientSslSocketFactoryException.java
Patch:
@@ -15,7 +15,7 @@
 * limitations under the License.
 *
 */
-package com.netflix.niws.client;
+package com.netflix.client.ssl;
 
 /**
  * Reports problems detected by the ClientSslSocketFactory class.

File: ribbon-core/src/main/java/com/netflix/client/ssl/URLSslContextFactory.java
Patch:
@@ -15,7 +15,7 @@
 * limitations under the License.
 *
 */
-package com.netflix.niws.client;
+package com.netflix.client.ssl;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -31,7 +31,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
-import com.netflix.niws.cert.AbstractSslContextFactory;
 
 /**
  * Secure socket factory that is used the NIWS code if a non-standard key store or trust store

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/rx/common/RxMovieTransformer.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
-import io.reactivex.netty.serialization.ContentTransformer;
+import io.reactivex.netty.channel.ContentTransformer;
 
 import java.nio.charset.Charset;
 
@@ -27,7 +27,7 @@
  */
 public class RxMovieTransformer implements ContentTransformer<Movie> {
     @Override
-    public ByteBuf transform(Movie movie, ByteBufAllocator byteBufAllocator) {
+    public ByteBuf call(Movie movie, ByteBufAllocator byteBufAllocator) {
         byte[] bytes = movie.toString().getBytes(Charset.defaultCharset());
         ByteBuf byteBuf = byteBufAllocator.buffer(bytes.length);
         byteBuf.writeBytes(bytes);

File: ribbon-httpclient/src/main/java/com/netflix/http4/ssl/KeyStoreAwareSocketFactory.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.conn.ssl.X509HostnameVerifier;
 
-import com.netflix.niws.cert.AbstractSslContextFactory;
-import com.netflix.niws.client.ClientSslSocketFactoryException;
+import com.netflix.client.ssl.AbstractSslContextFactory;
+import com.netflix.client.ssl.ClientSslSocketFactoryException;
 
 /**
  *

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -57,6 +57,9 @@
 import com.netflix.client.config.IClientConfigKey;
 import com.netflix.client.http.HttpRequest;
 import com.netflix.client.http.HttpResponse;
+import com.netflix.client.ssl.AbstractSslContextFactory;
+import com.netflix.client.ssl.ClientSslSocketFactoryException;
+import com.netflix.client.ssl.URLSslContextFactory;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.config.DynamicIntProperty;
 import com.netflix.config.DynamicPropertyFactory;
@@ -67,9 +70,6 @@
 import com.netflix.http4.ssl.KeyStoreAwareSocketFactory;
 import com.netflix.loadbalancer.BaseLoadBalancer;
 import com.netflix.loadbalancer.ILoadBalancer;
-import com.netflix.niws.cert.AbstractSslContextFactory;
-import com.netflix.niws.client.ClientSslSocketFactoryException;
-import com.netflix.niws.client.URLSslContextFactory;
 import com.netflix.util.Pair;
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientResponse;

File: ribbon-test/src/main/java/com/netflix/ribbon/test/resources/EmbeddedResources.java
Patch:
@@ -112,7 +112,7 @@ public Response getPerson() throws IOException {
     @GET
     @Path("/context")
     @Produces(MediaType.TEXT_PLAIN)
-    public Response echoContext(@HeaderParam("RequestId") String requestId) throws IOException {
+    public Response echoContext(@HeaderParam("X-RXNETTY-REQUEST-ID") String requestId) throws IOException {
         return Response.ok(requestId).build();
     }
 

File: ribbon/src/main/java/com/netflix/ribbon/http/HttpRequestTemplate.java
Patch:
@@ -78,13 +78,12 @@ public final CacheProvider<T> getProvider() {
     public HttpRequestTemplate(String name, HttpResourceGroup group, Class<? extends T> classType) {
         this.client = group.getClient();
         this.classType = classType;
+        clientName = client.name();
         if (client instanceof LoadBalancingRxClient) {
             LoadBalancingRxClient<?, ? ,?> ribbonClient = (LoadBalancingRxClient<?, ? ,?>) client;
             maxResponseTime = ribbonClient.getResponseTimeOut();
-            clientName = ribbonClient.getName();
             concurrentRequestLimit = ribbonClient.getMaxConcurrentRequests();
         } else {
-            clientName = client.getClass().getName();
             maxResponseTime = -1;
             concurrentRequestLimit = -1;
         }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/annotation/ContentTransformerClass.java
Patch:
@@ -16,7 +16,8 @@
 
 package com.netflix.ribbon.proxy.annotation;
 
-import io.reactivex.netty.serialization.ContentTransformer;
+
+import io.reactivex.netty.channel.ContentTransformer;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: ribbon/src/test/java/com/netflix/ribbon/proxy/sample/MovieTransformer.java
Patch:
@@ -18,14 +18,14 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
-import io.reactivex.netty.serialization.ContentTransformer;
+import io.reactivex.netty.channel.ContentTransformer;
 
 /**
  * @author Tomasz Bak
  */
 public class MovieTransformer implements ContentTransformer<MovieTransformer> {
     @Override
-    public ByteBuf transform(MovieTransformer toTransform, ByteBufAllocator byteBufAllocator) {
+    public ByteBuf call(MovieTransformer toTransform, ByteBufAllocator byteBufAllocator) {
         return null;
     }
 }

File: ribbon/src/main/java/com/netflix/ribbon/proxy/annotation/ContentTransformerClass.java
Patch:
@@ -16,7 +16,8 @@
 
 package com.netflix.ribbon.proxy.annotation;
 
-import io.reactivex.netty.serialization.ContentTransformer;
+
+import io.reactivex.netty.channel.ContentTransformer;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: ribbon/src/test/java/com/netflix/ribbon/proxy/sample/MovieTransformer.java
Patch:
@@ -18,14 +18,14 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
-import io.reactivex.netty.serialization.ContentTransformer;
+import io.reactivex.netty.channel.ContentTransformer;
 
 /**
  * @author Tomasz Bak
  */
 public class MovieTransformer implements ContentTransformer<MovieTransformer> {
     @Override
-    public ByteBuf transform(MovieTransformer toTransform, ByteBufAllocator byteBufAllocator) {
+    public ByteBuf call(MovieTransformer toTransform, ByteBufAllocator byteBufAllocator) {
         return null;
     }
 }

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -110,7 +110,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
 
     public static final Boolean DEFAULT_CONNECTION_POOL_CLEANER_TASK_ENABLED = Boolean.TRUE;
 
-    public static final Boolean DEFAULT_FOLLOW_REDIRECTS = Boolean.TRUE;
+    public static final Boolean DEFAULT_FOLLOW_REDIRECTS = Boolean.FALSE;
 
     public static final float DEFAULT_PERCENTAGE_NIWS_EVENT_LOGGED = 0.0f;
 
@@ -889,7 +889,7 @@ public <T> T get(IClientConfigKey<T> key) {
     }
 
     @Override
-    public <T> IClientConfig set(IClientConfigKey<T> key, T value) {
+    public <T> DefaultClientConfigImpl set(IClientConfigKey<T> key, T value) {
         properties.put(key.key(), value);
         return this;
     }

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/RestClientTest.java
Patch:
@@ -52,6 +52,7 @@ public void testExecuteWithoutLB() throws Exception {
     @Test
     public void testExecuteWithLB() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("allservices.ribbon." + CommonClientConfigKey.ReadTimeout, "10000");
+        ConfigurationManager.getConfigInstance().setProperty("allservices.ribbon." + CommonClientConfigKey.FollowRedirects, "true");
         RestClient client = (RestClient) ClientFactory.getNamedClient("allservices");
         BaseLoadBalancer lb = new BaseLoadBalancer();
         Server[] servers = new Server[]{new Server("www.google.com", 80)};
@@ -78,14 +79,14 @@ public void testExecuteWithLB() throws Exception {
 
     @Test
     public void testVipAsURI()  throws Exception {
-    	ConfigurationManager.getConfigInstance().setProperty("test1.ribbon.DeploymentContextBasedVipAddresses", "google.com:80");
+    	ConfigurationManager.getConfigInstance().setProperty("test1.ribbon.DeploymentContextBasedVipAddresses", "www.google.com:80");
     	ConfigurationManager.getConfigInstance().setProperty("test1.ribbon.InitializeNFLoadBalancer", "false");
         RestClient client = (RestClient) ClientFactory.getNamedClient("test1");
         assertNull(client.getLoadBalancer());
         HttpRequest request = HttpRequest.newBuilder().uri(new URI("/")).build();
         HttpResponse response = client.executeWithLoadBalancer(request);
         assertEquals(200, response.getStatus());
-        assertEquals("http://google.com:80/", response.getRequestedURI().toString());
+        assertEquals("http://www.google.com:80/", response.getRequestedURI().toString());
     }
 
     @Test

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -114,7 +114,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
 
     public static final float DEFAULT_PERCENTAGE_NIWS_EVENT_LOGGED = 0.0f;
 
-    public static final int DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER = 0;
+    public static final int DEFAULT_MAX_AUTO_RETRIES_NEXT_SERVER = 1;
 
     public static final int DEFAULT_MAX_AUTO_RETRIES = 0;
 

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -858,7 +858,7 @@ public boolean getPropertyAsBoolean(IClientConfigKey key,
     @SuppressWarnings("unchecked")
     @Override
     public <T> T getPropertyWithType(IClientConfigKey<T> key) {
-        Object obj = properties.get(key.key());
+        Object obj = getProperty(key.key());
         if (obj == null) {
             return null;
         }

File: ribbon-core/src/test/java/com/netflix/client/config/DefaultClientConfigImplTest.java
Patch:
@@ -24,7 +24,8 @@ public void testTypedValue() {
         assertEquals("1000", config.getProperty(CommonClientConfigKey.ConnectTimeout));
         assertEquals(1000, config.getPropertyWithType(CommonClientConfigKey.ConnectTimeout).intValue());
         config.setPropertyWithType(CommonClientConfigKey.ConnectTimeout, 2000);
-        assertEquals(2000, config.getPropertyWithType(CommonClientConfigKey.ConnectTimeout).intValue());
+        // The archaius property should override code override
+        assertEquals(1000, config.getPropertyWithType(CommonClientConfigKey.ConnectTimeout).intValue());
     }
     
     @Test

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -858,7 +858,7 @@ public boolean getPropertyAsBoolean(IClientConfigKey key,
     @SuppressWarnings("unchecked")
     @Override
     public <T> T getPropertyWithType(IClientConfigKey<T> key) {
-        Object obj = properties.get(key.key());
+        Object obj = getProperty(key.key());
         if (obj == null) {
             return null;
         }

File: ribbon-core/src/test/java/com/netflix/client/config/DefaultClientConfigImplTest.java
Patch:
@@ -24,7 +24,8 @@ public void testTypedValue() {
         assertEquals("1000", config.getProperty(CommonClientConfigKey.ConnectTimeout));
         assertEquals(1000, config.getPropertyWithType(CommonClientConfigKey.ConnectTimeout).intValue());
         config.setPropertyWithType(CommonClientConfigKey.ConnectTimeout, 2000);
-        assertEquals(2000, config.getPropertyWithType(CommonClientConfigKey.ConnectTimeout).intValue());
+        // The archaius property should override code override
+        assertEquals(1000, config.getPropertyWithType(CommonClientConfigKey.ConnectTimeout).intValue());
     }
     
     @Test

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/Ribbon.java
Patch:
@@ -1,7 +1,7 @@
 package com.netflix.ribbonclientextensions;
 
 import com.netflix.ribbonclientextensions.http.HttpResourceGroup;
-import com.netflix.ribbonclientextensions.typedclient.RibbonDynamicProxy;
+import com.netflix.ribbonclientextensions.proxy.RibbonDynamicProxy;
 
 public final class Ribbon {
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/EvCacheProviderPool.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import com.netflix.ribbonclientextensions.CacheProvider;
 import com.netflix.ribbonclientextensions.evache.EvCacheOptions;
@@ -26,11 +26,11 @@
 /**
  * @author Tomasz Bak
  */
-public class EvCacheProviderPool {
+class EvCacheProviderPool {
 
     private final Map<CacheId, EvCacheProvider<?>> pool;
 
-    public EvCacheProviderPool(MethodTemplate[] methodTemplates) {
+    EvCacheProviderPool(MethodTemplate[] methodTemplates) {
         pool = createEvCachePool(methodTemplates);
     }
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/MethodTemplateExecutor.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import com.netflix.ribbonclientextensions.CacheProvider;
 import com.netflix.ribbonclientextensions.RibbonRequest;
@@ -36,7 +36,7 @@
 /**
  * @author Tomasz Bak
  */
-public class MethodTemplateExecutor {
+class MethodTemplateExecutor {
 
     private static final ContentTransformer<ByteBuf> BYTE_BUF_TRANSFORMER = new ContentTransformer<ByteBuf>() {
         @Override
@@ -52,7 +52,7 @@ public ByteBuf transform(ByteBuf toTransform, ByteBufAllocator byteBufAllocator)
     private final HttpRequestTemplate<?> httpRequestTemplate;
     private final EvCacheProviderPool evCacheProviderPool;
 
-    public MethodTemplateExecutor(HttpResourceGroup httpResourceGroup, MethodTemplate methodTemplate, EvCacheProviderPool evCacheProviderPool) {
+    MethodTemplateExecutor(HttpResourceGroup httpResourceGroup, MethodTemplate methodTemplate, EvCacheProviderPool evCacheProviderPool) {
         this.httpResourceGroup = httpResourceGroup;
         this.methodTemplate = methodTemplate;
         this.evCacheProviderPool = evCacheProviderPool;

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/RibbonDynamicProxy.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import com.netflix.ribbonclientextensions.http.HttpResourceGroup;
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/Utils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import java.lang.reflect.Method;
 
@@ -47,7 +47,7 @@ public static Object executeOnInstance(Object object, Method method, Object[] ar
         try {
             return targetMethod.invoke(object, args);
         } catch (Exception ex) {
-            throw new RibbonTypedClientException(format(
+            throw new RibbonProxyException(format(
                     "Failed to execute method %s on object %s",
                     method.getName(), object.getClass().getSimpleName()), ex);
         }
@@ -57,7 +57,7 @@ public static <T> T newInstance(Class<T> aClass) {
         try {
             return aClass.newInstance();
         } catch (Exception e) {
-            throw new RibbonTypedClientException("Cannot instantiate object from class " + aClass, e);
+            throw new RibbonProxyException("Cannot instantiate object from class " + aClass, e);
         }
     }
 }

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/CacheProviders.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import com.netflix.ribbonclientextensions.CacheProviderFactory;
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/Content.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/ContentTransformerClass.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import io.reactivex.netty.serialization.ContentTransformer;
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/EvCache.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import com.netflix.evcache.EVCacheTranscoder;
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/Http.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/Hystrix.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import com.netflix.hystrix.HystrixExecutableInfo;
 import com.netflix.ribbonclientextensions.http.HttpResponseValidator;

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/ResourceGroupSpec.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import com.netflix.ribbonclientextensions.http.HttpResourceGroup;
 

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/TemplateName.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/proxy/annotation/Var.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.netflix.ribbonclientextensions.typedclient.annotation;
+package com.netflix.ribbonclientextensions.proxy.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/ClassTemplateTest.java
Patch:
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import org.junit.Test;
 
-import static com.netflix.ribbonclientextensions.typedclient.sample.MovieServiceInterfaces.*;
+import static com.netflix.ribbonclientextensions.proxy.sample.MovieServiceInterfaces.*;
 import static org.junit.Assert.*;
 
 /**
@@ -47,7 +47,7 @@ public void testCreateWithResourceGroupClassAnnotation() throws Exception {
         assertNull("resource name not expected", classTemplate.getResourceGroupName());
     }
 
-    @Test(expected = RibbonTypedClientException.class)
+    @Test(expected = RibbonProxyException.class)
     public void testBothNameAndResourceGroupClassInAnnotation() throws Exception {
         new ClassTemplate(BrokenMovieServiceWithResourceGroupNameAndClassAnnotation.class);
     }

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/EvCacheProviderPoolTest.java
Patch:
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import com.netflix.ribbonclientextensions.CacheProvider;
 import com.netflix.ribbonclientextensions.evache.EvCacheOptions;
 import com.netflix.ribbonclientextensions.evache.EvCacheProvider;
-import com.netflix.ribbonclientextensions.typedclient.sample.MovieServiceInterfaces.SampleMovieService;
+import com.netflix.ribbonclientextensions.proxy.sample.MovieServiceInterfaces.SampleMovieService;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/UtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.netflix.ribbonclientextensions.typedclient;
+package com.netflix.ribbonclientextensions.proxy;
 
 import org.junit.Test;
 
@@ -40,7 +40,7 @@ public void testNewInstance() throws Exception {
         assertNotNull(Utils.newInstance(Object.class));
     }
 
-    @Test(expected = RibbonTypedClientException.class)
+    @Test(expected = RibbonProxyException.class)
     public void testNewInstanceForFailure() throws Exception {
         Utils.newInstance(InputStream.class);
     }

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/sample/EvCacheClasses.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient.sample;
+package com.netflix.ribbonclientextensions.proxy.sample;
 
 import com.netflix.evcache.EVCacheTranscoder;
 import net.spy.memcached.CachedData;

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/sample/HystrixHandlers.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient.sample;
+package com.netflix.ribbonclientextensions.proxy.sample;
 
 import com.netflix.hystrix.HystrixExecutableInfo;
 import com.netflix.ribbonclientextensions.ServerError;

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/sample/MovieTransformer.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient.sample;
+package com.netflix.ribbonclientextensions.proxy.sample;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/sample/ResourceGroupClasses.java
Patch:
@@ -1,4 +1,4 @@
-package com.netflix.ribbonclientextensions.typedclient.sample;
+package com.netflix.ribbonclientextensions.proxy.sample;
 
 import com.netflix.ribbonclientextensions.http.HttpResourceGroup;
 

File: ribbon-client-extensions/src/test/java/com/netflix/ribbonclientextensions/proxy/sample/SampleCacheProviderFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.netflix.ribbonclientextensions.typedclient.sample;
+package com.netflix.ribbonclientextensions.proxy.sample;
 
 import com.netflix.ribbonclientextensions.CacheProvider;
 import com.netflix.ribbonclientextensions.CacheProviderFactory;

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/http/HttpRequest.java
Patch:
@@ -74,7 +74,7 @@ private void addCacheProviders(List<CacheProviderWithKeyTemplate<T>> providers)
     
     RibbonHystrixObservableCommand<T> createHystrixCommand() {
         return new RibbonHystrixObservableCommand<T>(client, httpRequest, hystrixCacheKey, cacheProviders, requestProperties, template.fallbackHandler(), 
-                template.responseValidator(), template.getClassType(), template.hystrixProperties());
+                template.responseValidator(), template.classType(), template.hystrixProperties());
     }
     
     @Override

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/LoadBalancerContext.java
Patch:
@@ -461,7 +461,7 @@ protected Server getServerFromLoadBalancer(@Nullable URI original, @Nullable Obj
                 Server svc = lb.chooseServer(loadBalancerKey);
                 if (svc == null){
                     throw new ClientException(ClientException.ErrorType.GENERAL,
-                            "LoadBalancer returned null Server for :"
+                            "LoadBalancer does not have availble server for client: "
                                     + clientName);
                 }
                 host = svc.getHost();

File: ribbon-loadbalancer/src/main/java/com/netflix/loadbalancer/LoadBalancerContext.java
Patch:
@@ -461,7 +461,7 @@ protected Server getServerFromLoadBalancer(@Nullable URI original, @Nullable Obj
                 Server svc = lb.chooseServer(loadBalancerKey);
                 if (svc == null){
                     throw new ClientException(ClientException.ErrorType.GENERAL,
-                            "LoadBalancer returned null Server for :"
+                            "LoadBalancer does not have availble server for client: "
                                     + clientName);
                 }
                 host = svc.getHost();

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/Ribbon.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.netflix.ribbonclientextensions.http.HttpRequestTemplate;
 
+import com.netflix.ribbonclientextensions.typedclient.RibbonDynamicProxy;
 import io.reactivex.netty.protocol.http.client.HttpClient;
 
 public final class Ribbon {
@@ -14,6 +15,6 @@ public static <I, O> HttpRequestTemplate<I, O> newHttpRequestTemplate(String tem
     }
  
     public static <I, O, T> T from(Class<T> contract, HttpClient<I, O> transportClient) {
-        return null;
+        return RibbonDynamicProxy.newInstance(contract, transportClient);
     } 
 }

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/Ribbon.java
Patch:
@@ -7,11 +7,11 @@ public final class Ribbon {
     private Ribbon() {
     }
  
-    public static <I, O> RibbonHttpClient<I, O> from(HttpClient<I, O> transportClient) {
+    public static <I, O> HttpRequestTemplate<I, O> newHttpRequestTemplate(HttpClient<I, O> transportClient) {
         return null;
     }
  
-    public static <I, O, T> T create(Class<T> contract, HttpClient<I, O> transportClient) {
+    public static <I, O, T> T from(Class<T> contract, HttpClient<I, O> transportClient) {
         return null;
     }
  

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/RibbonRequest.java
Patch:
@@ -1,8 +1,7 @@
 package com.netflix.ribbonclientextensions;
 
-import com.netflix.ribbonclientextensions.hystrix.HystrixResponse;
 
-public interface RibbonRequest<T> extends AsyncRequest<T> {
+public interface RibbonRequest<T> extends RxRequest<T> {
 
-    public RibbonRequest<HystrixResponse<T>> withHystrixInfo();
+    public RibbonRequest<RibbonResponse<T>> withMetadata();
 }

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/RxRequest.java
Patch:
@@ -4,7 +4,7 @@
 
 import rx.Observable;
 
-public interface AsyncRequest<T> {
+interface RxRequest<T> {
     public T execute();
     
     public Future<T> queue();

File: ribbon-client-extensions/src/main/java/com/netflix/ribbonclientextensions/hystrix/FallbackHandler.java
Patch:
@@ -1,10 +1,9 @@
 package com.netflix.ribbonclientextensions.hystrix;
 
-import com.netflix.hystrix.HystrixCommand;
+import com.netflix.hystrix.HystrixObservableCommand;
 
 import rx.Observable;
 import rx.functions.Func1;
-import rx.functions.Func2;
 
 /**
  * 
@@ -13,5 +12,5 @@
  * @param <T> Output entity type
  * @param <R> Response 
  */
-public interface FallbackProvider<T> extends Func1<HystrixCommand<T>, Observable<T>> {
+public interface FallbackHandler<T> extends Func1<HystrixObservableCommand<T>, Observable<T>> {
 }

File: ribbon-loadbalancer/src/test/java/com/netflix/loadbalancer/LoadBalancerExecutorTest.java
Patch:
@@ -65,7 +65,6 @@ public void testRetryNextServer() {
             @Override
             public Observable<String> getObservableForEndpoint(Server server) {
                 if (count.incrementAndGet() < 3) {
-                    System.err.println("error on server " + server);
                     return Observable.error(new IllegalArgumentException());
                 } else {
                     return Observable.from(server.getHost());
@@ -91,7 +90,9 @@ public int getMaxRetriesOnNextServer() {
             }
         };
         String result = lbExecutor.executeWithLoadBalancer(observableProvider, handler).toBlockingObservable().single();
-        System.err.println(result);
+        assertEquals("3", result); // server2 is picked first
+        assertEquals(2, lbExecutor.getServerStats(server2).getTotalRequestsCount());
+        assertEquals(1, lbExecutor.getServerStats(server3).getTotalRequestsCount());
     }
 
 

File: ribbon-rxnetty/src/test/java/com/netflix/client/netty/http/NettyClientTest.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.log4j.LogManager;
 import org.codehaus.jackson.map.ObjectMapper;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import rx.Observable;
@@ -610,7 +611,8 @@ public String call(ByteBuf t1) {
         assertEquals("value1", responseContext.get().getContext("Context1"));
     }
     
-    @Test
+    // temporarily exclude the test due to RxNetty bug
+    @Ignore
     public void testRedirect() throws Exception {
         HttpClientRequest<ByteBuf> request = HttpClientRequest.createGet(SERVICE_URI + "testAsync/redirect?port=" + port);
         NettyHttpClient<ByteBuf, ByteBuf> observableClient = NettyHttpClient.createDefaultHttpClient();

File: ribbon-core/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -310,8 +310,9 @@ public Boolean call() throws Exception {
         return executorService.submit(ftConn);
     }
 
-    void shutdown() {
+    public void shutdown() {
         executorService.shutdown();
+        Monitors.unregisterObject(name + "_PrimeConnection", this);
     }
 
     private Boolean connectToServer(final Server s, final PrimeConnectionListener listener) {

File: ribbon-httpclient/src/main/java/com/netflix/http4/MonitoredConnectionManager.java
Patch:
@@ -83,6 +83,4 @@ public ClientConnectionRequest requestConnection(HttpRoute route,
         // TODO Auto-generated method stub
         return super.requestConnection(route, state);
     }
-    
-    
 }

File: ribbon-core/src/main/java/com/netflix/client/ClientRequest.java
Patch:
@@ -106,8 +106,8 @@ protected final ClientRequest setOverrideConfig(IClientConfig overrideConfig) {
      * Create a client request using a new URI. This is used by {@link AbstractLoadBalancerAwareClient#computeFinalUriWithLoadBalancer(ClientRequest)}.
      * It first tries to clone the request and if that fails it will use the copy constructor {@link #ClientRequest(ClientRequest)}.
      * Sub classes are recommended to override this method to provide more efficient implementation.
+     * 
      * @param newURI
-     * @return
      */
     public ClientRequest replaceUri(URI newURI) {
         ClientRequest req;

File: ribbon-core/src/main/java/com/netflix/client/IResponse.java
Patch:
@@ -17,14 +17,15 @@
 */
 package com.netflix.client;
 
+import java.io.Closeable;
 import java.net.URI;
 import java.util.Map;
 
 /**
  * Response interface for the client framework.  
  *
  */
-public interface IResponse
+public interface IResponse extends Closeable
 {
    
    /**

File: ribbon-core/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -262,7 +262,6 @@ public Void call() throws Exception {
      * 
      * @param servers
      * @param listener
-     * @return
      */
     public List<Future<Boolean>> primeConnectionsAsync(final List<Server> servers, final PrimeConnectionListener listener) {
         if (servers == null) {

File: ribbon-core/src/main/java/com/netflix/client/config/IClientConfig.java
Patch:
@@ -50,7 +50,6 @@ public interface IClientConfig {
 	
 	/**
 	 * Returns the applicable virtual addresses ("vip") used by this client configuration.
-	 * @return
 	 */
 	public String resolveDeploymentContextbasedVipAddresses();
 	

File: ribbon-core/src/main/java/com/netflix/client/config/IClientConfigKey.java
Patch:
@@ -27,8 +27,6 @@ public interface IClientConfigKey {
 
 	/**
 	 * The string representation of the key.
-	 * 
-	 * @return
 	 */
 	public String key();
 

File: ribbon-core/src/main/java/com/netflix/loadbalancer/IPing.java
Patch:
@@ -28,8 +28,6 @@ public interface IPing {
      * Checks whether the given <code>Server</code> is "alive" i.e. should be
      * considered a candidate while loadbalancing
      * 
-     * @param server
-     * @return
      */
     public boolean isAlive(Server server);
 }

File: ribbon-core/src/main/java/com/netflix/loadbalancer/LoadBalancerStats.java
Patch:
@@ -262,7 +262,6 @@ public ZoneSnapshot getZoneSnapshot(String zone) {
      * going over the list again for a different stat.
      * 
      * @param servers
-     * @return
      */
     public ZoneSnapshot getZoneSnapshot(List<? extends Server> servers) {
         if (servers == null || servers.size() == 0) {
@@ -357,7 +356,6 @@ public ServerStats getSingleServerStat(Server server) {
 
     /**
      * returns map of Stats for all servers
-     * @return
      */
     public Map<Server,ServerStats> getServerStats(){
         return serverStatsCache.asMap();

File: ribbon-core/src/main/java/com/netflix/loadbalancer/PredicateBasedRule.java
Patch:
@@ -32,7 +32,6 @@ public abstract class PredicateBasedRule extends ClientConfigEnabledRoundRobinRu
     /**
      * Method that provides an instance of {@link AbstractServerPredicate} to be used by this class.
      * 
-     * @return
      */
     public abstract AbstractServerPredicate getPredicate();
         

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ServerList.java
Patch:
@@ -33,7 +33,6 @@ public interface ServerList<T extends Server> {
      * Return updated list of servers. This is called say every 30 secs
      * (configurable) by the Loadbalancer's Ping cycle
      * 
-     * @return
      */
     public List<T> getUpdatedListOfServers();   
 

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ServerListSubsetFilter.java
Patch:
@@ -70,11 +70,11 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
      * <p>
      * <ul>
      * <li>Servers with their concurrent connection count exceeding the client configuration for 
-     *  {@code<clientName>.<nameSpace>.ServerListSubsetFilter.eliminationConnectionThresold} (default is 0)
+     *  {@code <clientName>.<nameSpace>.ServerListSubsetFilter.eliminationConnectionThresold} (default is 0)
      * <li>Servers with their failure count exceeding the client configuration for 
-     *  {@code<clientName>.<nameSpace>.ServerListSubsetFilter.eliminationFailureThresold}  (default is 0)
+     *  {@code <clientName>.<nameSpace>.ServerListSubsetFilter.eliminationFailureThresold}  (default is 0)
      *  <li>If the servers evicted above is less than the forced eviction percentage as defined by client configuration
-     *   {@code<clientName>.<nameSpace>.ServerListSubsetFilter.forceEliminatePercent} (default is 10%, or 0.1), the
+     *   {@code <clientName>.<nameSpace>.ServerListSubsetFilter.forceEliminatePercent} (default is 10%, or 0.1), the
      *   remaining servers will be sorted by their health status and servers will worst health status will be
      *   forced evicted.
      * </ul>

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ServerStats.java
Patch:
@@ -178,7 +178,6 @@ public void addToFailureCount(){
     /**
      * Returns the count of failures in the current window
      * 
-     * @return
      */
     public long getFailureCount(){
         long count = 0;

File: ribbon-core/src/main/java/com/netflix/loadbalancer/WeightedResponseTimeRule.java
Patch:
@@ -84,7 +84,7 @@ public String toString() {
     
     private int serverWeightTaskTimerInterval = DEFAULT_TIMER_INTERVAL;
 
-    private static final Logger logger = LoggerFactory.getLogger(ResponseTimeWeightedRule.class);
+    private static final Logger logger = LoggerFactory.getLogger(WeightedResponseTimeRule.class);
     
     // holds the accumulated weight from index 0 to current index
     // for example, element at index 2 holds the sum of weight of servers from 0 to 2

File: ribbon-eureka/src/test/java/com/netflix/niws/loadbalancer/DefaultNIWSServerListFilterTest.java
Patch:
@@ -65,6 +65,7 @@ private DiscoveryEnabledServer createServer(int hostId, String zoneSuffix) {
         return createServer(zoneSuffix + "-" + "server" + hostId, "Us-east-1" + zoneSuffix);
     }
 
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     @Test
     public void testZoneAffinityEnabled() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("DefaultNIWSServerListFilterTest1.ribbon.DeploymentContextBasedVipAddresses", "l10nservicegeneral.cloud.netflix.net:7001");
@@ -106,7 +107,7 @@ public void testZoneAffinityEnabled() throws Exception {
 
     }
 
-    
+    @SuppressWarnings({ "rawtypes", "unchecked" })    
     @Test
     public void testZoneExclusivity() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("DefaultNIWSServerListFilterTest2.ribbon.DeploymentContextBasedVipAddresses", "l10nservicegeneral.cloud.netflix.net:7001");
@@ -145,6 +146,7 @@ public void testZoneExclusivity() throws Exception {
         assertEquals(expected, filtered);
     }
     
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     @Test
     public void testZoneAffinityOverride() throws Exception {
         ConfigurationManager.getConfigInstance().setProperty("DefaultNIWSServerListFilterTest3.ribbon.DeploymentContextBasedVipAddresses", "l10nservicegeneral.cloud.netflix.net:7001");

File: ribbon-rxnetty/src/main/java/com/netflix/client/netty/http/NettyHttpClient.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.Map.Entry;
 import java.util.concurrent.TimeUnit;
 
+import javax.annotation.Nullable;
+
 import rx.Observable;
 import rx.Observer;
 import rx.Subscription;
@@ -48,7 +50,6 @@
 import com.netflix.serialization.SerializationUtils;
 import com.netflix.serialization.Serializer;
 import com.netflix.serialization.TypeDef;
-import com.sun.istack.internal.Nullable;
 
 public class NettyHttpClient {
 

File: ribbon-core/src/main/java/com/netflix/serialization/Serializer.java
Patch:
@@ -20,8 +20,6 @@
 import java.io.IOException;
 import java.io.OutputStream;
 
-import com.sun.istack.internal.Nullable;
-
 public interface Serializer<T> {
-    public void serialize(OutputStream out, T object, @Nullable TypeDef<?> type) throws IOException;    
+    public void serialize(OutputStream out, T object, TypeDef<?> type) throws IOException;    
 }

File: ribbon-core/src/main/java/com/netflix/client/AsyncClient.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.ByteBuffer;
 import java.util.concurrent.Future;
 
-import com.netflix.serialization.ContentTypeBasedSerializerKey;
+import com.netflix.serialization.HttpSerializationContext;
 import com.netflix.serialization.Deserializer;
 import com.netflix.serialization.Serializer;
 
@@ -33,7 +33,7 @@
  * @param <S> Response type
  * @param <U> Type of storage used for delivering partial content, for example, {@link ByteBuffer}
  * @param <V> Type of key to find {@link Serializer} and {@link Deserializer} for the content. For example, for HTTP communication,
- *            the key type is {@link ContentTypeBasedSerializerKey}
+ *            the key type is {@link HttpSerializationContext}
  */
 public interface AsyncClient<T extends ClientRequest, S extends IResponse, U, V> extends ResponseBufferingAsyncClient<T, S, V> {
     /**

File: ribbon-core/src/main/java/com/netflix/client/AsyncLoadBalancingClient.java
Patch:
@@ -38,7 +38,7 @@
 import com.netflix.loadbalancer.ILoadBalancer;
 import com.netflix.loadbalancer.Server;
 import com.netflix.loadbalancer.ServerStats;
-import com.netflix.serialization.ContentTypeBasedSerializerKey;
+import com.netflix.serialization.HttpSerializationContext;
 import com.netflix.serialization.Deserializer;
 import com.netflix.serialization.SerializationFactory;
 import com.netflix.serialization.Serializer;
@@ -59,7 +59,7 @@
  * @param <S> Response type
  * @param <U> Type of storage used for delivering partial content, for example, {@link ByteBuffer}
  * @param <V> Type of key to find {@link Serializer} and {@link Deserializer} for the content. For example, for HTTP communication,
- *            the key type is {@link ContentTypeBasedSerializerKey}
+ *            the key type is {@link HttpSerializationContext}
  */
 public class AsyncLoadBalancingClient<T extends ClientRequest, S extends IResponse, U, V>
         extends LoadBalancerContext<T, S> implements AsyncClient<T, S, U, V> {

File: ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java
Patch:
@@ -95,6 +95,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
         
        okToRetryOnAllOperations = clientConfig.getPropertyAsBoolean(CommonClientConfigKey.OkToRetryOnAllOperations, okToRetryOnAllOperations);
        tracer = getExecuteTracer();
+
        Monitors.registerObject("Client_" + clientName, this);
     }
 
@@ -421,6 +422,7 @@ protected T computeFinalUriWithLoadBalancer(T original) throws ClientException{
                 }
                 host = svc.getHost();
                 port = svc.getPort();
+
                 if (host == null){
                     throw new ClientException(ClientException.ErrorType.GENERAL,
                             "Invalid Server for :" + svc);

File: ribbon-core/src/main/java/com/netflix/client/http/AsyncBufferingHttpClient.java
Patch:
@@ -18,13 +18,13 @@
 package com.netflix.client.http;
 
 import com.netflix.client.ResponseBufferingAsyncClient;
-import com.netflix.serialization.ContentTypeBasedSerializerKey;
+import com.netflix.serialization.HttpSerializationContext;
 
 /**
  * An HTTP client that deals with buffered response.
  * 
  * @author awang
  *
  */
-public interface AsyncBufferingHttpClient extends ResponseBufferingAsyncClient<HttpRequest, HttpResponse, ContentTypeBasedSerializerKey>{
+public interface AsyncBufferingHttpClient extends ResponseBufferingAsyncClient<HttpRequest, HttpResponse, HttpSerializationContext>{
 }

File: ribbon-core/src/main/java/com/netflix/client/http/AsyncHttpClient.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.ByteBuffer;
 
 import com.netflix.client.AsyncClient;
-import com.netflix.serialization.ContentTypeBasedSerializerKey;
+import com.netflix.serialization.HttpSerializationContext;
 
 /**
  * An asynchronous HTTP client.
@@ -29,5 +29,5 @@
  *
  * @param <T> Type of storage used for delivering partial content, for example, {@link ByteBuffer}
  */
-public interface AsyncHttpClient<T> extends AsyncClient<HttpRequest, HttpResponse, T, ContentTypeBasedSerializerKey>, AsyncBufferingHttpClient {
+public interface AsyncHttpClient<T> extends AsyncClient<HttpRequest, HttpResponse, T, HttpSerializationContext>, AsyncBufferingHttpClient {
 }

File: ribbon-core/src/main/java/com/netflix/client/http/AsyncLoadBalancingHttpClient.java
Patch:
@@ -23,7 +23,7 @@
 import com.netflix.client.AsyncLoadBalancingClient;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.loadbalancer.ILoadBalancer;
-import com.netflix.serialization.ContentTypeBasedSerializerKey;
+import com.netflix.serialization.HttpSerializationContext;
 
 /**
  * An asynchronous HTTP client that is capable of load balancing from an {@link ILoadBalancer}. 
@@ -34,10 +34,10 @@
  * @param <T> Type of storage used for delivering partial content, for example, {@link ByteBuffer}
  */
 public class AsyncLoadBalancingHttpClient<T> 
-        extends AsyncLoadBalancingClient<HttpRequest, HttpResponse, T, ContentTypeBasedSerializerKey>
+        extends AsyncLoadBalancingClient<HttpRequest, HttpResponse, T, HttpSerializationContext>
         implements AsyncHttpClient<T> {
     
-    public AsyncLoadBalancingHttpClient(AsyncClient<HttpRequest, HttpResponse, T, ContentTypeBasedSerializerKey> client, IClientConfig config) {
+    public AsyncLoadBalancingHttpClient(AsyncClient<HttpRequest, HttpResponse, T, HttpSerializationContext> client, IClientConfig config) {
         super(client, config);
     }    
 }

File: ribbon-core/src/main/java/com/netflix/serialization/Deserializer.java
Patch:
@@ -20,6 +20,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-public interface Deserializer {
-    public <T> T deserialize(InputStream in, TypeDef<T> type) throws IOException;    
+public interface Deserializer<T> {
+    public T deserialize(InputStream in, TypeDef<T> type) throws IOException;    
 }

File: ribbon-core/src/main/java/com/netflix/serialization/SerializationFactory.java
Patch:
@@ -18,6 +18,6 @@
 package com.netflix.serialization;
 
 public interface SerializationFactory<K> {
-    public Deserializer getDeserializer(K key);  
-    public Serializer getSerializer(K key);
+    public <T> Deserializer<T> getDeserializer(K context, TypeDef<T> type);  
+    public <T> Serializer<T> getSerializer(K context, TypeDef<T> type);
 }

File: ribbon-core/src/main/java/com/netflix/serialization/Serializer.java
Patch:
@@ -20,6 +20,6 @@
 import java.io.IOException;
 import java.io.OutputStream;
 
-public interface Serializer {
-    public void serialize(OutputStream out, Object object) throws IOException;    
+public interface Serializer<T> {
+    public void serialize(OutputStream out, T object) throws IOException;    
 }

File: ribbon-rxnetty/src/main/java/com/netflix/client/netty/http/LoadBalancerObservables.java
Patch:
@@ -126,7 +126,6 @@ public Subscription onSubscribe(final Observer<? super T> t1) {
                 HttpRequest requestWithRealServer = null;
                 try {
                     requestWithRealServer = computeFinalUriWithLoadBalancer(request);
-                    System.err.println("URI: " + requestWithRealServer.getUri());
                 } catch (Exception e) {
                     t1.onError(e);
                     return Subscriptions.empty();

File: ribbon-rxnetty/src/test/java/com/netflix/client/netty/NettyClientTest.java
Patch:
@@ -87,7 +87,7 @@ public void call(Person t1) {
     }
     
     @Test
-    public void testObservableWithOverrideDeserializer() throws Exception {
+    public void testWithOverrideDeserializer() throws Exception {
         URI uri = new URI(SERVICE_URI + "testAsync/person");
         DefaultClientConfigImpl overrideConfig = new DefaultClientConfigImpl();
         overrideConfig.setTypedProperty(CommonClientConfigKey.Deserializer, new StringDeserializer());

File: ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java
Patch:
@@ -245,7 +245,7 @@ private ClientException generateTimeoutNIWSException(String uri, Throwable e){
      * This is called after a response is received or an exception is thrown from the client
      * to update related stats.  
      */
-    protected void noteRequestCompletion(ServerStats stats, ClientRequest request, IResponse response, Throwable e, long responseTime) {        
+    protected void noteRequestCompletion(ServerStats stats, ClientRequest request, Object response, Throwable e, long responseTime) {        
         try {
             if (stats != null) {
                 stats.decrementActiveRequestsCount();
@@ -259,7 +259,7 @@ protected void noteRequestCompletion(ServerStats stats, ClientRequest request, I
             logger.error("Unexpected exception", ex);
         }            
     }
-       
+    
     /**
      * This is usually called just before client execute a request.
      */

File: ribbon-core/src/main/java/com/netflix/client/ResponseWithTypedEntity.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.io.InputStream;
 
-import com.google.common.reflect.TypeToken;
+import com.netflix.serialization.TypeDef;
 
 /**
  * A response type that includes a typed entity in its content.
@@ -31,7 +31,7 @@ public interface ResponseWithTypedEntity extends IResponse {
     
     public <T> T getEntity(Class<T> type) throws Exception;
     
-    public <T> T getEntity(TypeToken<T> type) throws Exception;
+    public <T> T getEntity(TypeDef<T> type) throws Exception;
     
     public boolean hasEntity();
     

File: ribbon-core/src/main/java/com/netflix/serialization/Deserializer.java
Patch:
@@ -20,8 +20,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import com.google.common.reflect.TypeToken;
-
 public interface Deserializer {
-    public <T> T deserialize(InputStream in, TypeToken<T> type) throws IOException;    
+    public <T> T deserialize(InputStream in, TypeDef<T> type) throws IOException;    
 }

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/GetWithDeserialization.java
Patch:
@@ -29,6 +29,7 @@
 import com.netflix.client.http.HttpRequest;
 import com.netflix.client.http.HttpResponse;
 import com.netflix.ribbon.examples.server.ServerResources.Person;
+import com.netflix.serialization.TypeDef;
 
 /**
  * An example that shows how deserialization work on the {@link AsyncClient}
@@ -76,7 +77,7 @@ public void failed(Throwable e) {
                 @Override
                 public void completed(HttpResponse response) {
                     try {
-                        System.out.println(response.getEntity(new TypeToken<List<Person>>(){}));
+                        System.out.println(response.getEntity(new TypeDef<List<Person>>(){}));
                     } catch (Exception e) {
                         e.printStackTrace();
                     } finally {

File: ribbon-httpasyncclient/src/main/java/com/netflix/httpasyncclient/RibbonHttpAsyncClient.java
Patch:
@@ -303,7 +303,7 @@ private HttpUriRequest getRequest(HttpRequest ribbonRequest) throws ClientExcept
                 builder.setEntity(httpEntity);
             } else {
                 for (SerializationFactory<ContentTypeBasedSerializerKey> f: factories) {
-                    Serializer serializer = f.getSerializer(key).orNull();
+                    Serializer serializer = f.getSerializer(key);
                     if (serializer != null) {
                         try {
                             ByteArrayOutputStream bout = new ByteArrayOutputStream();

File: ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java
Patch:
@@ -453,7 +453,7 @@ protected T computeFinalUriWithLoadBalancer(T original) throws ClientException{
                 host = svc.getHost();
 
                 if(shouldUseOverridePort){
-                    logger.debug("Using override port of %d on client %s", clientName);
+                    logger.debug("Using override port of %d on client %s", overridePort, clientName);
                     port = overridePort;
                 }else{
                     port = svc.getPort();

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -150,7 +150,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     }
 
     protected Client apacheHttpClientSpecificInitialization() {
-        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName, true);
+        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName, this.ncc, true);
 
         if (httpClient4 instanceof AbstractHttpClient) {
             // DONT use our NFHttpClient's default Retry Handler since we have

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -149,7 +149,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     }
 
     protected Client apacheHttpClientSpecificInitialization() {
-        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName, true);
+        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName, this.ncc, true);
 
         if (httpClient4 instanceof AbstractHttpClient) {
             // DONT use our NFHttpClient's default Retry Handler since we have

File: ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java
Patch:
@@ -163,8 +163,8 @@ public T executeWithLoadBalancer(S request) throws ClientException {
         T response = null;
 
         do {
+            S resolved = computeFinalUriWithLoadBalancer(request);
             try {
-                S resolved = computeFinalUriWithLoadBalancer(request);
                 response = executeOnSingleServer(resolved);
                 done = true;
             } catch (Exception e) {      
@@ -178,15 +178,15 @@ public T executeWithLoadBalancer(S request) throws ClientException {
                     if (retries > numRetriesNextServer) {
                         throw new ClientException(
                                 ClientException.ErrorType.NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED,
-                                "NUMBER_OF_RETRIES_NEXTSERVER_EXCEEDED :"
+                                "NUMBER_OF_RETRIES_NEXTSERVER_EXCEEDED: "
                                 + numRetriesNextServer
                                 + " retries, while making a RestClient call for:"
                                 + request.getUri() + ":" +  getDeepestCause(e).getMessage(), e);
                     }
                     logger.error("Exception while executing request which is deemed retry-able, retrying ..., Next Server Retry Attempt#:"
                             + retries
                             + ", URI tried:"
-                            + request.getUri());
+                            + resolved.getUri());
                 } else {
                     if (e instanceof ClientException) {
                         throw (ClientException) e;

File: ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java
Patch:
@@ -163,8 +163,8 @@ public T executeWithLoadBalancer(S request) throws ClientException {
         T response = null;
 
         do {
+            S resolved = computeFinalUriWithLoadBalancer(request);
             try {
-                S resolved = computeFinalUriWithLoadBalancer(request);
                 response = executeOnSingleServer(resolved);
                 done = true;
             } catch (Exception e) {      
@@ -178,15 +178,15 @@ public T executeWithLoadBalancer(S request) throws ClientException {
                     if (retries > numRetriesNextServer) {
                         throw new ClientException(
                                 ClientException.ErrorType.NUMBEROF_RETRIES_NEXTSERVER_EXCEEDED,
-                                "NUMBER_OF_RETRIES_NEXTSERVER_EXCEEDED :"
+                                "NUMBER_OF_RETRIES_NEXTSERVER_EXCEEDED: "
                                 + numRetriesNextServer
                                 + " retries, while making a RestClient call for:"
                                 + request.getUri() + ":" +  getDeepestCause(e).getMessage(), e);
                     }
                     logger.error("Exception while executing request which is deemed retry-able, retrying ..., Next Server Retry Attempt#:"
                             + retries
                             + ", URI tried:"
-                            + request.getUri());
+                            + resolved.getUri());
                 } else {
                     if (e instanceof ClientException) {
                         throw (ClientException) e;

File: ribbon-core/src/main/java/com/netflix/client/AsyncLoadBalancingClient.java
Patch:
@@ -168,17 +168,17 @@ boolean isDone() {
 
         @Override
         public void completed(T response) {
-            latch.countDown();
             completeResponse = response;
+            latch.countDown();
             if (callback != null) {
                 callback.completed(response);
             }
         }
 
         @Override
         public void failed(Throwable e) {
-            latch.countDown();
             exception = e;
+            latch.countDown();
             if (callback != null) {
                 callback.failed(e);
             }

File: ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java
Patch:
@@ -41,7 +41,7 @@
  * @author awang
  *
  */
-public abstract class AbstractLoadBalancerAwareClient<S extends ClientRequest, T extends IResponse> extends LoadBalancerContext implements IClient<S, T> {    
+public abstract class AbstractLoadBalancerAwareClient<S extends ClientRequest, T extends IResponse> extends LoadBalancerContext<S, T> implements IClient<S, T> {    
     
     private static final Logger logger = LoggerFactory.getLogger(AbstractLoadBalancerAwareClient.class);
     

File: ribbon-core/src/main/java/com/netflix/client/AsyncClient.java
Patch:
@@ -1,8 +1,7 @@
 package com.netflix.client;
 
-import java.io.Closeable;
 import java.util.concurrent.Future;
 
-public interface AsyncClient<T extends ClientRequest, S extends IResponse, U> extends Closeable {
+public interface AsyncClient<T extends ClientRequest, S extends IResponse, U, V> extends ResponseBufferingAsyncClient<T, S, V> {
     public <E> Future<S> execute(T request, StreamDecoder<E, U> decooder, ResponseCallback<S, E> callback) throws ClientException;
 }

File: ribbon-core/src/main/java/com/netflix/client/ObservableAsyncClient.java
Patch:
@@ -35,9 +35,9 @@ public final E getEvent() {
     
     private static final Logger logger = LoggerFactory.getLogger(ObservableAsyncClient.class);
     
-    private final AsyncClient<T, S, U> client;
+    private final AsyncClient<T, S, U, ?> client;
     
-    public ObservableAsyncClient(AsyncClient<T, S, U> client) {
+    public ObservableAsyncClient(AsyncClient<T, S, U, ?> client) {
         this.client = client;
     }
     

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/CustomizedSerializerExample.java
Patch:
@@ -6,14 +6,14 @@
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.net.URI;
-import java.util.List;
 import java.util.concurrent.Future;
 
 import com.google.common.base.Optional;
-import com.google.common.collect.Lists;
 import com.google.common.reflect.TypeToken;
 import com.google.gson.Gson;
 import com.netflix.client.BufferedResponseCallback;
+import com.netflix.client.http.AsyncBufferingHttpClient;
+import com.netflix.client.http.AsyncHttpClientBuilder;
 import com.netflix.client.http.HttpRequest;
 import com.netflix.client.http.HttpResponse;
 import com.netflix.ribbon.examples.server.ServerResources.Person;
@@ -27,6 +27,7 @@ public class CustomizedSerializerExample extends ExampleAppWithLocalResource {
     public void run() throws Exception {
         URI uri = new URI(SERVICE_URI + "testAsync/person");
         HttpRequest request = HttpRequest.newBuilder().uri(uri).build();
+        AsyncBufferingHttpClient client = AsyncHttpClientBuilder.withApacheAsyncClient().buildBufferingClient();
         client.setSerializationFactory(new GsonSerializationFactory());
         Future<HttpResponse> future = client.execute(request, new BufferedResponseCallback<HttpResponse>() {
             @Override

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/ExampleAppWithLocalResource.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.Random;
 
-import com.netflix.httpasyncclient.RibbonHttpAsyncClient;
 import com.sun.jersey.api.container.httpserver.HttpServerFactory;
 import com.sun.jersey.api.core.PackagesResourceConfig;
 import com.sun.net.httpserver.HttpServer;
@@ -12,7 +11,6 @@ public abstract class ExampleAppWithLocalResource {
     int port = (new Random()).nextInt(1000) + 4000; 
     String SERVICE_URI = "http://localhost:" + port + "/";
     HttpServer server = null;
-    RibbonHttpAsyncClient client = new RibbonHttpAsyncClient();
     
     public abstract void run() throws Exception;
     
@@ -24,7 +22,6 @@ public final void runApp() throws Exception {
             run();
             // Thread.sleep(10000); // make sure server is running when run() is returned 
         } finally {
-            client.close();
             System.err.println("Shut down server, this will take a while ...");
             if (server != null) {
                 server.stop(0);

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/StreamingObservableExample.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.netflix.client.ObservableAsyncClient;
 import com.netflix.client.ObservableAsyncClient.StreamEvent;
+import com.netflix.client.http.AsyncHttpClientBuilder;
 import com.netflix.client.http.HttpRequest;
 import com.netflix.client.http.HttpResponse;
 
@@ -16,7 +17,7 @@ public class StreamingObservableExample extends ExampleAppWithLocalResource {
     public void run() throws Exception {
         HttpRequest request = HttpRequest.newBuilder().uri(SERVICE_URI + "testAsync/stream").build();
         ObservableAsyncClient<HttpRequest, HttpResponse, ByteBuffer> observableClient = 
-                new ObservableAsyncClient<HttpRequest, HttpResponse, ByteBuffer>(client);
+                AsyncHttpClientBuilder.withApacheAsyncClient().observableClient();
         observableClient.stream(request, new SSEDecoder())
             .toBlockingObservable()
             .forEach(new Action1<StreamEvent<HttpResponse, List<String>>>() {

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/server/ServerResources.java
Patch:
@@ -74,7 +74,7 @@ public boolean equals(Object obj) {
     public static final List<String> streamContent = Lists.newArrayList();
     
     static {
-        for (int i = 0; i < 100; i++) {
+        for (int i = 0; i < 1000; i++) {
             streamContent.add("data: line " + i);
         }
     }
@@ -128,7 +128,7 @@ public void write(OutputStream output) throws IOException,
                     String eventLine = line + "\n";
                     output.write(eventLine.getBytes("UTF-8"));
                     try {
-                       Thread.sleep(10);
+                       Thread.sleep(5);
                     } catch (Exception e) { // NOPMD
                     }
                 }

File: ribbon-httpasyncclient/src/test/java/com/netflix/httpasyncclient/EmbeddedResources.java
Patch:
@@ -86,7 +86,7 @@ public void write(OutputStream output) throws IOException,
                     String eventLine = line + "\n";
                     output.write(eventLine.getBytes("UTF-8"));
                     try {
-                       Thread.sleep(100);
+                       Thread.sleep(10);
                     } catch (Exception e) { // NOPMD
                     }
                 }

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -511,7 +511,7 @@ protected int getDefaultPortFromScheme(String scheme) {
     }
 
     @Override
-    protected Pair<String, Integer> deriveSchemeAndPortFromPartialUri(ClientRequest task) {
+    protected Pair<String, Integer> deriveSchemeAndPortFromPartialUri(HttpRequest task) {
         URI theUrl = task.getUri();
         boolean isSecure = getBooleanFromConfig(task.getOverrideConfig(), CommonClientConfigKey.IsSecure, this.isSecure);
         String scheme = theUrl.getScheme();

File: ribbon-core/src/main/java/com/netflix/client/http/HttpResponse.java
Patch:
@@ -1,9 +1,11 @@
-package com.netflix.client;
+package com.netflix.client.http;
 
 import java.io.Closeable;
 import java.util.Collection;
 import java.util.Map;
 
+import com.netflix.client.ResponseWithTypedEntity;
+
 public interface HttpResponse extends ResponseWithTypedEntity, Closeable {
     public int getStatus();
     

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/AsyncClientSampleApp.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.concurrent.Future;
 
 import com.netflix.client.FullResponseCallback;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.httpasyncclient.RibbonHttpAsyncClient;
 
 public class AsyncClientSampleApp {

File: ribbon-examples/src/main/java/com/netflix/ribbon/examples/SampleApp.java
Patch:
@@ -21,8 +21,8 @@
 import java.net.URI;
 
 import com.netflix.client.ClientFactory;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.loadbalancer.ZoneAwareLoadBalancer;
 import com.netflix.niws.client.http.RestClient;

File: ribbon-httpasyncclient/src/main/java/com/netflix/httpasyncclient/HttpClientResponse.java
Patch:
@@ -19,7 +19,7 @@
 import com.netflix.serialization.Deserializer;
 import com.netflix.serialization.SerializationFactory;
 
-class HttpClientResponse implements com.netflix.client.HttpResponse {
+class HttpClientResponse implements com.netflix.client.http.HttpResponse {
 
     private SerializationFactory<ContentTypeBasedSerializerKey>  factory;
     private HttpResponse response;

File: ribbon-httpasyncclient/src/test/java/com/netflix/httpasyncclient/HttpAsyncClienTest.java
Patch:
@@ -41,8 +41,8 @@
 import com.netflix.client.config.CommonClientConfigKey;
 import com.netflix.client.config.DefaultClientConfigImpl;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.client.http.HttpRequest.Verb;
-import com.netflix.client.HttpResponse;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.loadbalancer.AvailabilityFilteringRule;
 import com.netflix.loadbalancer.BaseLoadBalancer;
@@ -350,7 +350,7 @@ public void testLoadBalancingClientMultiServers() throws Exception {
         HttpRequest request = HttpRequest.newBuilder().uri(uri).build();
         ResponseCallbackWithLatch callback = new ResponseCallbackWithLatch();        
         loadBalancingClient.execute(request, callback);
-        callback.awaitCallback();        
+        callback.awaitCallback();       
         assertEquals(EmbeddedResources.defaultPerson, callback.getHttpResponse().getEntity(Person.class));
         assertEquals(1, lb.getLoadBalancerStats().getSingleServerStat(good).getTotalRequestsCount());
     }

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpClientResponse.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.common.collect.Multimap;
 import com.google.common.reflect.TypeToken;
 import com.netflix.client.ClientException;
-import com.netflix.client.HttpResponse;
+import com.netflix.client.http.HttpResponse;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.UniformInterfaceException;
 

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -52,12 +52,12 @@
 import com.netflix.client.AbstractLoadBalancerAwareClient;
 import com.netflix.client.ClientException;
 import com.netflix.client.ClientRequest;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.config.CommonClientConfigKey;
 import com.netflix.client.config.DefaultClientConfigImpl;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.client.config.IClientConfigKey;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.config.DynamicIntProperty;
 import com.netflix.config.DynamicPropertyFactory;

File: ribbon-httpclient/src/test/java/com/netflix/client/ManyShortLivedRequestsSurvivorTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.mockwebserver.MockResponse;
 import com.google.mockwebserver.MockWebServer;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.niws.client.http.RestClient;
 import org.junit.Test;
 

File: ribbon-httpclient/src/test/java/com/netflix/client/samples/SampleApp.java
Patch:
@@ -23,8 +23,8 @@
 import org.junit.Ignore;
 
 import com.netflix.client.ClientFactory;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.loadbalancer.ZoneAwareLoadBalancer;
 import com.netflix.niws.client.http.RestClient;

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/GetPostTest.java
Patch:
@@ -31,8 +31,8 @@
 import org.junit.Test;
 
 import com.netflix.client.ClientFactory;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.client.http.HttpRequest.Verb;
 import com.sun.jersey.api.container.httpserver.HttpServerFactory;
 import com.sun.jersey.api.core.PackagesResourceConfig;

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/RestClientTest.java
Patch:
@@ -30,8 +30,8 @@
 import org.junit.Test;
 
 import com.netflix.client.ClientFactory;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.loadbalancer.BaseLoadBalancer;
 import com.netflix.loadbalancer.Server;

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/SecureGetTest.java
Patch:
@@ -32,9 +32,9 @@
 import org.junit.Test;
 
 import com.netflix.client.ClientFactory;
-import com.netflix.client.HttpResponse;
 import com.netflix.client.config.CommonClientConfigKey;
 import com.netflix.client.http.HttpRequest;
+import com.netflix.client.http.HttpResponse;
 import com.netflix.client.testutil.SimpleSSLTestServer;
 import com.netflix.config.ConfigurationManager;
 import com.sun.jersey.api.client.ClientHandlerException;

File: ribbon-core/src/main/java/com/netflix/serialization/StreamDecoder.java
Patch:
@@ -1,7 +1,5 @@
 package com.netflix.serialization;
 
-import java.util.List;
-
 public interface StreamDecoder<T, S> {
-    List<S> decode(T input); 
+    S decode(T input); 
 }

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/ResponseTimeWeightedRuleTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Test;
 
 import com.netflix.client.ClientFactory;
+import com.netflix.client.http.HttpRequest;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.loadbalancer.AbstractLoadBalancer;
 import com.netflix.loadbalancer.WeightedResponseTimeRule;
@@ -28,7 +29,7 @@ public void testServerWeights(){
 
             RestClient client = (RestClient) ClientFactory.getNamedClient("sample-client"); 
 
-            HttpClientRequest request = HttpClientRequest.newBuilder().setUri(new URI("/")).build(); 
+            HttpRequest request = HttpRequest.newBuilder().uri(new URI("/")).build(); 
 
             for (int i = 0; i < 20; i++) {
                 client.executeWithLoadBalancer(request);

File: ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpClient.java
Patch:
@@ -95,7 +95,7 @@ protected NFHttpClient(){
 	}
 
 	protected NFHttpClient(String name){
-		super(new ThreadSafeClientConnManager());
+		super(new MonitoredConnectionManager(name));
 		this.name = name;
 		init();
 	}

File: ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpClient.java
Patch:
@@ -95,7 +95,7 @@ protected NFHttpClient(){
 	}
 
 	protected NFHttpClient(String name){
-		super(new ThreadSafeClientConnManager());
+		super(new MonitoredConnectionManager(name));
 		this.name = name;
 		init();
 	}

File: ribbon-core/src/main/java/com/netflix/client/AsyncLoadBalancingClient.java
Patch:
@@ -129,7 +129,7 @@ public void onException(Throwable e) {
                 if (isCircuitBreakerException(e) && serverStats != null) {
                     serverStats.incrementSuccessiveConnectionFailureCount();
                 }
-                boolean shouldRetry = retryOkayOnOperation && numRetries >= 0 && isRetriableException(e);
+                boolean shouldRetry = retryOkayOnOperation && numRetries > 0 && isRetriableException(e);
                 if (shouldRetry) {
                     if (retries.incrementAndGet() > numRetries) {
                         callback.onException(new ClientException(ClientException.ErrorType.NUMBEROF_RETRIES_EXEEDED,

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -64,7 +64,9 @@ public enum CommonClientConfigKey implements IClientConfigKey {
     KeyStorePassword("KeyStorePassword"),
     TrustStore("TrustStore"),
     TrustStorePassword("TrustStorePassword"),
-    IsClientAuthRequired("IsClientAuthRequired"),
+    IsClientAuthRequired("IsClientAuthRequired"), // if this is a secure rest client, must we use client auth too?
+    IsHostnameValidationRequired("IsHostnameValidationRequired"), // must host name match name in certificate?
+    IgnoreUserTokenInConnectionPoolForSecureClient("IgnoreUserTokenInConnectionPoolForSecureClient"), // see also http://hc.apache.org/httpcomponents-client-ga/tutorial/html/advanced.html
 
     // Client implementation
     ClientClassName("ClientClassName"),

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -126,8 +126,8 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
         this.ncc = clientConfig;
         this.restClientName = ncc.getClientName();
         this.isSecure = getBooleanFromConfig(ncc, CommonClientConfigKey.IsSecure, this.isSecure);
-        this.isHostnameValidationRequired = getBooleanFromConfig(ncc, CommonClientConfigKey.IsHostnameValidationRequired, this.isSecure);
-        this.isClientAuthRequired = getBooleanFromConfig(ncc, CommonClientConfigKey.IsHostnameValidationRequired, this.isSecure);
+        this.isHostnameValidationRequired = getBooleanFromConfig(ncc, CommonClientConfigKey.IsHostnameValidationRequired, this.isHostnameValidationRequired);
+        this.isClientAuthRequired = getBooleanFromConfig(ncc, CommonClientConfigKey.IsClientAuthRequired, this.isClientAuthRequired);
         this.bFollowRedirects = getBooleanFromConfig(ncc, CommonClientConfigKey.FollowRedirects, true);
         this.ignoreUserToken = getBooleanFromConfig(ncc, CommonClientConfigKey.IgnoreUserTokenInConnectionPoolForSecureClient, this.ignoreUserToken);
 

File: ribbon-core/src/main/java/com/netflix/loadbalancer/WeightedResponseTimeRule.java
Patch:
@@ -23,6 +23,8 @@
  * This class essentially contains the ResponseTimeWeightedRule class defined in
  * the loadbalancer package
  * 
+ * @deprecated Use {@link ResponseTimeWeightedRule}
+ * @see ResponseTimeWeightedRule
  * @author stonse
  * 
  */

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -85,6 +85,7 @@ public enum CommonClientConfigKey implements IClientConfigKey {
     EnableZoneExclusivity("EnableZoneExclusivity"),
     PrioritizeVipAddressBasedServers("PrioritizeVipAddressBasedServers"),
     VipAddressResolverClassName("VipAddressResolverClassName"),
+    TargetRegion("TargetRegion"),
     RulePredicateClasses("RulePredicateClasses");
 
     private final String configKey;

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -85,6 +85,7 @@ public enum CommonClientConfigKey implements IClientConfigKey {
     EnableZoneExclusivity("EnableZoneExclusivity"),
     PrioritizeVipAddressBasedServers("PrioritizeVipAddressBasedServers"),
     VipAddressResolverClassName("VipAddressResolverClassName"),
+    TargetRegion("TargetRegion"),
     RulePredicateClasses("RulePredicateClasses");
 
     private final String configKey;

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -84,7 +84,8 @@ public enum CommonClientConfigKey implements IClientConfigKey {
     EnableZoneAffinity("EnableZoneAffinity"),
     EnableZoneExclusivity("EnableZoneExclusivity"),
     PrioritizeVipAddressBasedServers("PrioritizeVipAddressBasedServers"),
-    VipAddressResolverClassName("VipAddressResolverClassName");
+    VipAddressResolverClassName("VipAddressResolverClassName"),
+    RulePredicateClasses("RulePredicateClasses");
 
     private final String configKey;
 

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ZoneStats.java
Patch:
@@ -51,7 +51,7 @@ public final String getZone() {
         return zone;
     }
             
-    @Monitor(name=PREFIX + "ActiveRequestsCount", type = DataSourceType.GAUGE)    
+    @Monitor(name=PREFIX + "ActiveRequestsCount", type = DataSourceType.INFORMATIONAL)    
     public int getActiveRequestsCount() {
         return loadBalancerStats.getActiveRequestsCount(zone);
     }
@@ -71,12 +71,12 @@ public double getActiveRequestsPerServer() {
         return loadBalancerStats.getActiveRequestsPerServer(zone);
     }
     
-    @Monitor(name=PREFIX + "RequestsMadeLast5Minutes", type = DataSourceType.GAUGE)    
+    // @Monitor(name=PREFIX + "RequestsMadeLast5Minutes", type = DataSourceType.GAUGE)    
     public long getMeasuredZoneHits() {
         return loadBalancerStats.getMeasuredZoneHits(zone);
     }
     
-    @Monitor(name=PREFIX + "CircuitBreakerTrippedPercentage", type = DataSourceType.GAUGE)    
+    @Monitor(name=PREFIX + "CircuitBreakerTrippedPercentage", type = DataSourceType.INFORMATIONAL)    
     public double getCircuitBreakerTrippedPercentage() {
         ZoneSnapshot snapShot = loadBalancerStats.getZoneSnapshot(zone);
         int totalCount = snapShot.getInstanceCount();

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpPrimeConnection.java
Patch:
@@ -65,7 +65,7 @@ public boolean connect(Server server, String primeConnectionsURIPath) throws Exc
 
     @Override
     public void initWithNiwsConfig(IClientConfig niwsClientConfig) {
-        client = NFHttpClientFactory.getNamedNFHttpClient(niwsClientConfig.getClientName() + "-PrimeConnsClient"); 
+        client = NFHttpClientFactory.getNamedNFHttpClient(niwsClientConfig.getClientName() + "-PrimeConnsClient", false); 
         HttpConnectionParams.setConnectionTimeout(client.getParams(), 2000);        
     }
 }

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -132,7 +132,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     }
 
     protected Client apacheHttpClientSpecificInitialization() {
-        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName);
+        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName, true);
 
         if (httpClient4 instanceof AbstractHttpClient) {
             // DONT use our NFHttpClient's default Retry Handler since we have

File: ribbon-core/src/main/java/com/netflix/loadbalancer/AbstractServerPredicate.java
Patch:
@@ -114,6 +114,8 @@ public Predicate<Server> getServerOnlyPredicate() {
      * Get servers filtered by this predicate from list of servers. Load balancer key
      * is presumed to be null. 
      * 
+     * @see #getEligibleServers(List, Object)
+     * 
      */
     public List<Server> getEligibleServers(List<Server> servers) {
         return getEligibleServers(servers, null);

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -84,7 +84,8 @@ public enum CommonClientConfigKey implements IClientConfigKey {
     EnableZoneAffinity("EnableZoneAffinity"),
     EnableZoneExclusivity("EnableZoneExclusivity"),
     PrioritizeVipAddressBasedServers("PrioritizeVipAddressBasedServers"),
-    VipAddressResolverClassName("VipAddressResolverClassName");
+    VipAddressResolverClassName("VipAddressResolverClassName"),
+    RulePredicateClasses("RulePredicateClasses");
 
     private final String configKey;
 

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ZoneStats.java
Patch:
@@ -51,7 +51,7 @@ public final String getZone() {
         return zone;
     }
             
-    @Monitor(name=PREFIX + "ActiveRequestsCount", type = DataSourceType.GAUGE)    
+    @Monitor(name=PREFIX + "ActiveRequestsCount", type = DataSourceType.INFORMATIONAL)    
     public int getActiveRequestsCount() {
         return loadBalancerStats.getActiveRequestsCount(zone);
     }
@@ -71,12 +71,12 @@ public double getActiveRequestsPerServer() {
         return loadBalancerStats.getActiveRequestsPerServer(zone);
     }
     
-    @Monitor(name=PREFIX + "RequestsMadeLast5Minutes", type = DataSourceType.GAUGE)    
+    // @Monitor(name=PREFIX + "RequestsMadeLast5Minutes", type = DataSourceType.GAUGE)    
     public long getMeasuredZoneHits() {
         return loadBalancerStats.getMeasuredZoneHits(zone);
     }
     
-    @Monitor(name=PREFIX + "CircuitBreakerTrippedPercentage", type = DataSourceType.GAUGE)    
+    @Monitor(name=PREFIX + "CircuitBreakerTrippedPercentage", type = DataSourceType.INFORMATIONAL)    
     public double getCircuitBreakerTrippedPercentage() {
         ZoneSnapshot snapShot = loadBalancerStats.getZoneSnapshot(zone);
         int totalCount = snapShot.getInstanceCount();

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpPrimeConnection.java
Patch:
@@ -65,7 +65,7 @@ public boolean connect(Server server, String primeConnectionsURIPath) throws Exc
 
     @Override
     public void initWithNiwsConfig(IClientConfig niwsClientConfig) {
-        client = NFHttpClientFactory.getNamedNFHttpClient(niwsClientConfig.getClientName() + "-PrimeConnsClient"); 
+        client = NFHttpClientFactory.getNamedNFHttpClient(niwsClientConfig.getClientName() + "-PrimeConnsClient", false); 
         HttpConnectionParams.setConnectionTimeout(client.getParams(), 2000);        
     }
 }

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -132,7 +132,7 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     }
 
     protected Client apacheHttpClientSpecificInitialization() {
-        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName);
+        httpClient4 = NFHttpClientFactory.getNamedNFHttpClient(restClientName, true);
 
         if (httpClient4 instanceof AbstractHttpClient) {
             // DONT use our NFHttpClient's default Retry Handler since we have

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -420,7 +420,7 @@ public HttpClientResponse execute(HttpClientRequest task) throws Exception {
     }
 
     private boolean isSecure(IClientConfig overriddenClientConfig) {
-        boolean isSecure = false;
+        boolean isSecure = this.isSecure;
         if (overriddenClientConfig != null && overriddenClientConfig.containsProperty(CommonClientConfigKey.IsSecure)){
             isSecure = Boolean.parseBoolean(overriddenClientConfig.getProperty(CommonClientConfigKey.IsSecure).toString());
         } 

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -420,7 +420,7 @@ public HttpClientResponse execute(HttpClientRequest task) throws Exception {
     }
 
     private boolean isSecure(IClientConfig overriddenClientConfig) {
-        boolean isSecure = false;
+        boolean isSecure = this.isSecure;
         if (overriddenClientConfig != null && overriddenClientConfig.containsProperty(CommonClientConfigKey.IsSecure)){
             isSecure = Boolean.parseBoolean(overriddenClientConfig.getProperty(CommonClientConfigKey.IsSecure).toString());
         } 

File: ribbon-core/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -98,7 +98,7 @@ public PrimeConnectionCounters(int initialSize) {
     private float primeRatio = 1.0f;
 
 
-    int maxRetries = 2;
+    int maxRetries = 9;
 
     long maxTotalTimeToPrimeConnections = 30 * 1000; // default time
 

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -97,7 +97,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
 
     public static final int DEFAULT_MAX_TOTAL_TIME_TO_PRIME_CONNECTIONS = 30000;
 
-    public static final int DEFAULT_MAX_RETRIES_PER_SERVER_PRIME_CONNECTION = 2;
+    public static final int DEFAULT_MAX_RETRIES_PER_SERVER_PRIME_CONNECTION = 9;
 
     public static final Boolean DEFAULT_ENABLE_PRIME_CONNECTIONS = Boolean.FALSE;
 

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -97,7 +97,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
 
     public static final int DEFAULT_MAX_TOTAL_TIME_TO_PRIME_CONNECTIONS = 30000;
 
-    public static final int DEFAULT_MAX_RETRIES_PER_SERVER_PRIME_CONNECTION = 2;
+    public static final int DEFAULT_MAX_RETRIES_PER_SERVER_PRIME_CONNECTION = 9;
 
     public static final Boolean DEFAULT_ENABLE_PRIME_CONNECTIONS = Boolean.FALSE;
 

File: ribbon-core/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -98,7 +98,7 @@ public PrimeConnectionCounters(int initialSize) {
     private float primeRatio = 1.0f;
 
 
-    int maxRetries = 2;
+    int maxRetries = 9;
 
     long maxTotalTimeToPrimeConnections = 30 * 1000; // default time
 

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpPrimeConnection.java
Patch:
@@ -54,7 +54,7 @@ public boolean connect(Server server, String primeConnectionsURIPath) throws Exc
         HttpResponse response = null;
         try {
             response = client.execute(get);
-            if (logger.isDebugEnabled()) {
+            if (logger.isDebugEnabled() && response.getStatusLine() != null) {
                 logger.debug("Response code:" + response.getStatusLine().getStatusCode());
             }
         } finally {

File: ribbon-core/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -331,6 +331,7 @@ private Boolean connectToServer(final Server s, final PrimeConnectionListener li
                 // It does not really matter if there was an exception,
                 // the goal here is to attempt "priming/opening" the route
                 // in ec2 .. actual http results do not matter
+                logger.debug("Error connecting to server: {}", e.getMessage());
                 lastException = e;
                 sleepBeforeRetry(tryNum);
             } 

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpPrimeConnection.java
Patch:
@@ -50,6 +50,7 @@ public HttpPrimeConnection() {
     @Override
     public boolean connect(Server server, String primeConnectionsURIPath) throws Exception {
         String url = "http://" + server.getHostPort() + primeConnectionsURIPath;
+        logger.debug("Trying URL: {}", url);
         HttpUriRequest get = new HttpGet(url);
         HttpResponse response = null;
         try {

File: ribbon-core/src/main/java/com/netflix/client/PrimeConnections.java
Patch:
@@ -331,6 +331,7 @@ private Boolean connectToServer(final Server s, final PrimeConnectionListener li
                 // It does not really matter if there was an exception,
                 // the goal here is to attempt "priming/opening" the route
                 // in ec2 .. actual http results do not matter
+                logger.debug("Error connecting to server: {}", e.getMessage());
                 lastException = e;
                 sleepBeforeRetry(tryNum);
             } 

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/HttpPrimeConnection.java
Patch:
@@ -50,6 +50,7 @@ public HttpPrimeConnection() {
     @Override
     public boolean connect(Server server, String primeConnectionsURIPath) throws Exception {
         String url = "http://" + server.getHostPort() + primeConnectionsURIPath;
+        logger.debug("Trying URL: {}", url);
         HttpUriRequest get = new HttpGet(url);
         HttpResponse response = null;
         try {

File: ribbon-core/src/main/java/com/netflix/loadbalancer/AbstractLoadBalancer.java
Patch:
@@ -63,5 +63,5 @@ public Server chooseServer() {
      * Obtain LoadBalancer related Statistics
      * @return
      */
-    public abstract LoadBalancerStats getLoadBalancerStats();
+    public abstract LoadBalancerStats getLoadBalancerStats();    
 }

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ILoadBalancer.java
Patch:
@@ -57,4 +57,6 @@ public interface ILoadBalancer {
 	 * @param server Server to mark as down
 	 */
 	public void markServerDown(Server server);
+	
+	public List<Server> getServerList(boolean availableOnly);
 }

File: ribbon-core/src/main/java/com/netflix/loadbalancer/WeightedResponseTimeRule.java
Patch:
@@ -38,16 +38,16 @@ public void initWithNiwsConfig(IClientConfig clientConfig) {
     @Override
     // TODO(stonse): Consider refactoring this so that we dont need to override
     // this
-    public void setLoadBalancer(AbstractLoadBalancer lb) {
+    public void setLoadBalancer(ILoadBalancer lb) {
         super.setLoadBalancer(lb);
         rule.setLoadBalancer(lb);// set it for the contained Rule class
         rule.initialize(lb);
     }
 
     @Override
-    public Server choose(BaseLoadBalancer lb, Object key) {
+    public Server choose(Object key) {
         if (rule != null) {
-            return rule.choose(lb, key);
+            return rule.choose(key);
         } else {
             throw new IllegalArgumentException(
                     "This class has not been initialized with the RoundRobinRule class");

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ZoneAwareLoadBalancer.java
Patch:
@@ -144,7 +144,7 @@ private BaseLoadBalancer getLoadBalancer(String zone) {
         zone = zone.toLowerCase();
         BaseLoadBalancer loadBalancer = balancers.get(zone);
         if (loadBalancer == null) {
-            loadBalancer = new BaseLoadBalancer(this.getName() + "_" + zone, this.getRule(), this.getLoadBalancerStats());
+            loadBalancer = new BaseLoadBalancer(this.getName() + "_" + zone, new AvailabilityFilteringRule(), this.getLoadBalancerStats());
             BaseLoadBalancer prev = balancers.putIfAbsent(zone, loadBalancer);
             if (prev != null) {
             	loadBalancer = prev;

File: ribbon-eureka/src/main/java/com/netflix/niws/loadbalancer/DiscoveryEnabledNIWSServerList.java
Patch:
@@ -124,7 +124,7 @@ public AbstractServerListFilter<DiscoveryEnabledServer> getFilterImpl(
                     ClientException.ErrorType.CONFIGURATION,
                     "Unable to get an instance of CommonClientConfigKey.NIWSServerListFilterClassName. Configured class:"
                             + niwsClientConfig
-                                    .getProperty(CommonClientConfigKey.NIWSServerListFilterClassName));
+                                    .getProperty(CommonClientConfigKey.NIWSServerListFilterClassName), e);
         }
 
     }

File: ribbon-eureka/src/main/java/com/netflix/niws/loadbalancer/DiscoveryEnabledNIWSServerList.java
Patch:
@@ -124,7 +124,7 @@ public AbstractServerListFilter<DiscoveryEnabledServer> getFilterImpl(
                     ClientException.ErrorType.CONFIGURATION,
                     "Unable to get an instance of CommonClientConfigKey.NIWSServerListFilterClassName. Configured class:"
                             + niwsClientConfig
-                                    .getProperty(CommonClientConfigKey.NIWSServerListFilterClassName));
+                                    .getProperty(CommonClientConfigKey.NIWSServerListFilterClassName), e);
         }
 
     }

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -140,7 +140,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
     
     public static final int DEFAULT_CONNECTIONIDLE_TIME_IN_MSECS = 30000; // all connections idle for 30 secs
 
-    volatile Map<String, Object> properties = new ConcurrentHashMap<String, Object>();
+    protected volatile Map<String, Object> properties = new ConcurrentHashMap<String, Object>();
     
     private static final Logger LOG = LoggerFactory.getLogger(DefaultClientConfigImpl.class);
 
@@ -406,7 +406,7 @@ private String getConfigKey(String propName) {
         return (clientName == null) ? getDefaultPropName(propName) : getInstancePropName(clientName, propName);
     }
     
-    private void setPropertyInternal(final String propName, Object value) {
+    protected void setPropertyInternal(final String propName, Object value) {
         String stringValue = (value == null) ? "" : String.valueOf(value);
         properties.put(propName, stringValue);
         if (!enableDynamicProperties) {

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -132,7 +132,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
         
     public static final float DEFAULT_MIN_PRIME_CONNECTIONS_RATIO = 1.0f;
     
-    public static final String DEFAULT_PRIME_CONNECTIONS_CLASS = "com.netflix.niws.client.HttpPrimeConnection";
+    public static final String DEFAULT_PRIME_CONNECTIONS_CLASS = "com.netflix.niws.client.http.HttpPrimeConnection";
     
     public static final String DEFAULT_SEVER_LIST_CLASS = "com.netflix.loadbalancer.ConfigurationBasedServerList";
     

File: ribbon-core/src/main/java/com/netflix/loadbalancer/RandomRule.java
Patch:
@@ -33,7 +33,7 @@ public RandomRule() {
         rand = new Random();
     }
 
-    /*
+    /**
      * Randomly choose from all living servers
      */
     @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE")

File: ribbon-core/src/main/java/com/netflix/client/config/DefaultClientConfigImpl.java
Patch:
@@ -132,7 +132,7 @@ public class DefaultClientConfigImpl implements IClientConfig {
         
     public static final float DEFAULT_MIN_PRIME_CONNECTIONS_RATIO = 1.0f;
     
-    public static final String DEFAULT_PRIME_CONNECTIONS_CLASS = "com.netflix.niws.client.HttpPrimeConnection";
+    public static final String DEFAULT_PRIME_CONNECTIONS_CLASS = "com.netflix.niws.client.http.HttpPrimeConnection";
     
     public static final String DEFAULT_SEVER_LIST_CLASS = "com.netflix.loadbalancer.ConfigurationBasedServerList";
     

File: ribbon-core/src/main/java/com/netflix/loadbalancer/RandomRule.java
Patch:
@@ -33,7 +33,7 @@ public RandomRule() {
         rand = new Random();
     }
 
-    /*
+    /**
      * Randomly choose from all living servers
      */
     @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE")

File: ribbon-core/src/main/java/com/netflix/client/AbstractLoadBalancerAwareClient.java
Patch:
@@ -172,7 +172,7 @@ protected T executeOnSingleServer(S request) throws ClientException {
                 }
             } finally {
                 w.stop();
-                noteRequestCompletion(serverStats, request, response, lastException, w.getDuration());
+                noteRequestCompletion(serverStats, request, response, lastException, w.getDuration(TimeUnit.MILLISECONDS));
             }
         } while (!done); 
         return response;

File: ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java
Patch:
@@ -77,6 +77,7 @@ public enum CommonClientConfigKey implements IClientConfigKey {
     NFLoadBalancerMaxTotalPingTime("NFLoadBalancerMaxTotalPingTime"),
     NIWSServerListClassName("NIWSServerListClassName"),
     NIWSServerListFilterClassName("NIWSServerListFilterClassName"),
+    ServerListRefreshInterval("ServerListRefreshInterval"),
     EnableMarkingServerDownOnReachingFailureLimit("EnableMarkingServerDownOnReachingFailureLimit"),
     ServerDownFailureLimit("ServerDownFailureLimit"),
     ServerDownStatWindowInMillis("ServerDownStatWindowInMillis"),

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ServerStats.java
Patch:
@@ -476,7 +476,6 @@ public String toString(){
             sb.append("\tLast connection failure: " + new Date(lastConnectionFailedTimestamp)  + ";");
         }
         sb.append("\tFirst connection made: " + new Date(firstConnectionTimestamp)  + ";");
-        sb.append("\tConnections made in last 5 minutes:" + requestCountInWindow.getCount()  + ";");
         sb.append("\tActive Connections:" + getMonitoredActiveRequestsCount()  + ";");
         sb.append("\ttotal failure count in last (" + failureCountSlidingWindowInterval + ") msecs:" + getFailureCount()  + ";");
         sb.append("\taverage resp time:" + getResponseTimeAvg()  + ";");

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/URLSslContextFactory.java
Patch:
@@ -37,8 +37,8 @@
  * Secure socket factory that is used the NIWS code if a non-standard key store or trust store
  * is specified.
  *
- * @author dyuan@netflix.com (Danny Yuan) 
- * @author pstout@netflix.com (Peter D. Stout)
+ * @author Danny Yuan
+ * @author Peter D. Stout
  */
 public class URLSslContextFactory extends AbstractSslContextFactory{
     private final static Logger LOGGER = LoggerFactory.getLogger(URLSslContextFactory.class);

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/http/RestClient.java
Patch:
@@ -474,6 +474,9 @@ private HttpClientResponse execute(Verb verb, URI uri,
 
 
         WebResource xResource = restClient.resource(uri.toString());
+        if (params != null) {
+        	xResource = xResource.queryParams(params);
+        }
         ClientResponse jerseyResponse;
 
         Builder b = xResource.getRequestBuilder();

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/TestResource.java
Patch:
@@ -25,6 +25,7 @@
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
@@ -36,9 +37,9 @@ public class TestResource {
 		
 	@Path("/getObject")
 	@GET
-	public Response getObject() {
+	public Response getObject(@QueryParam ("name") String name) {
 		TestObject obj = new TestObject();
-		obj.name = "test";
+		obj.name = name;
 		return Response.ok(obj).build();
 	}
 	

File: ribbon-core/src/main/java/com/netflix/niws/client/NIWSClientException.java
Patch:
@@ -149,7 +149,7 @@ static public HashMap getErrorCodes ( Class clazz ) {
             if (Modifier.isFinal(mods) && Modifier.isStatic(mods) && Modifier.isPublic(mods)) {
                 try {
                     map.put(flds[i].get(null), flds[i].getName());
-                } catch (Throwable t) {
+                } catch (Throwable t) { // NOPMD
                     // ignore this.
                 }
             }

File: ribbon-core/src/main/java/com/netflix/niws/client/NIWSDiscoveryLoadBalancer.java
Patch:
@@ -192,7 +192,7 @@ public void shutdownExecutorPool() {
 			if(_shutdownThread != null){
 				try{
 					Runtime.getRuntime().removeShutdownHook(_shutdownThread);
-				}catch(IllegalStateException ise){
+				}catch(IllegalStateException ise){ // NOPMD
 					// this can happen if we're in the middle of a real shutdown, 
 					// and that's 'ok'
 				}

File: ribbon-core/src/main/java/com/netflix/niws/client/PrimeConnections.java
Patch:
@@ -281,7 +281,7 @@ public List<Future<Boolean>> primeConnectionsAsync(final List<Server> servers, f
                     ftC = makeConnectionASync(s, listener);
                     ftList.add(ftC);
 
-                } catch (Throwable e) {
+                } catch (Throwable e) { // NOPMD
                     // It does not really matter if there was an exception,
                     // the goal here is to attempt "priming/opening" the route
                     // in ec2 .. actual http results do not matter
@@ -371,8 +371,7 @@ static class ASyncPrimeConnectionsThreadFactory implements ThreadFactory {
 
         ASyncPrimeConnectionsThreadFactory(String name) {
             SecurityManager s = System.getSecurityManager();
-            group = (s != null) ? s.getThreadGroup() : Thread.currentThread()
-                    .getThreadGroup();
+            group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup(); // NOPMD
             namePrefix = "ASyncPrimeConnectionsThreadFactory-" + name + "-"
                     + groupNumber.getAndIncrement() + "-thread-";
         }

File: ribbon-eureka/src/main/java/com/netflix/niws/client/DiscoveryEnabledNIWSServerList.java
Patch:
@@ -19,7 +19,6 @@ public class DiscoveryEnabledNIWSServerList extends AbstractNIWSServerList<Disco
 
     String clientName;
     String vipAddresses;
-    NiwsClientConfig niwsClientConfig;
     boolean isSecure = false;
     
     boolean prioritizeVipAddressBasedServers = true;
@@ -29,7 +28,6 @@ public class DiscoveryEnabledNIWSServerList extends AbstractNIWSServerList<Disco
     @Override
     public void initWithNiwsConfig(NiwsClientConfig niwsClientConfig) {
         this.clientName = niwsClientConfig.getClientName();
-        this.niwsClientConfig = niwsClientConfig;
         vipAddresses = niwsClientConfig.resolveDeploymentContextbasedVipAddresses();
         isSecure = Boolean.parseBoolean(""+niwsClientConfig.getProperty(NiwsClientConfig.NiwsClientConfigKey.IsSecure, "false"));
         prioritizeVipAddressBasedServers = Boolean.parseBoolean(""+niwsClientConfig.getProperty(NiwsClientConfig.NiwsClientConfigKey.PrioritizeVipAddressBasedServers, prioritizeVipAddressBasedServers));

File: ribbon-eureka/src/main/java/com/netflix/niws/client/DiscoveryEnabledServer.java
Patch:
@@ -11,6 +11,7 @@
  * @author stonse
  *
  */
+@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "EQ_DOESNT_OVERRIDE_EQUALS")
 public class DiscoveryEnabledServer extends Server{
 
     InstanceInfo instanceInfo;

File: ribbon-httpclient/src/main/java/com/netflix/http4/NFHttpMethodRetryHandler.java
Patch:
@@ -38,6 +38,7 @@ public NFHttpMethodRetryHandler(String httpClientName, int retryCount, boolean r
 	}
 
 	@Override
+	@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "ICAST_INTEGER_MULTIPLY_CAST_TO_LONG")
 	public boolean retryRequest(
 			final IOException exception, 
 			int executionCount, 

File: ribbon-httpclient/src/main/java/com/netflix/niws/client/URLSslContextFactory.java
Patch:
@@ -102,8 +102,7 @@ private static KeyStore createKeyStore(final URL storeFile, final String passwor
 			} finally {
     			try {
     				is.close();
-    			} catch (IOException ignore) {
-    				// no op
+    			} catch (IOException ignore) { // NOPMD    				
     			}
     		}
     	}catch(KeyStoreException e){

File: ribbon-httpclient/src/test/java/com/netflix/niws/client/http/GetPostTest.java
Patch:
@@ -66,15 +66,14 @@ public void testPost() throws Exception {
     	assertTrue(response.getEntity(TestObject.class).name.equals("fromClient"));
     }
     
-    @Ignore
+    @Test
     public void testChunkedEncoding() throws Exception {
         String obj = "chunked encoded content";
     	URI postUri = new URI(SERVICE_URI + "test/postStream");
-    	InputStream input = new ByteArrayInputStream(obj.getBytes());
+    	InputStream input = new ByteArrayInputStream(obj.getBytes("UTF-8"));
     	HttpClientRequest request = HttpClientRequest.newBuilder().setVerb(Verb.POST).setUri(postUri).setEntity(input).build();
     	HttpClientResponse response = client.execute(request);
     	assertEquals(200, response.getStatus());
-    	assertTrue(TestResource.lastCallChunked);
     	assertTrue(response.getEntity(String.class).equals(obj));
     }
 }        

File: ribbon-core/src/main/java/com/netflix/loadbalancer/NFLoadBalancer.java
Patch:
@@ -298,7 +298,7 @@ public void setPing(IPing ping) {
                 setupPingTask(); // since ping data changed
             }
         } else{
-            this.ping = ping;
+            this.ping = null;
             //cancel the timer task
             lbTimer.cancel();
         }

File: ribbon-core/src/main/java/com/netflix/loadbalancer/RandomRule.java
Patch:
@@ -12,6 +12,7 @@ public RandomRule() {
 	/*
 	 * Randomly choose from all living servers
 	 */
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE")
 	public Server choose(NFLoadBalancer lb, Object key) {
 		if (lb == null) {
 			return null;

File: ribbon-core/src/main/java/com/netflix/loadbalancer/ResponseTimeWeightedRule.java
Patch:
@@ -106,14 +106,12 @@ public void shutdown() {
 
     final static boolean availableOnly = false;
 
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE")
     public Server choose(NFLoadBalancer lb, Object key) {
         if (lb == null) {
             return null;
         }
         Server server = null;
-        if (lb == null) {
-            return null;
-        }
 
         while (server == null) {
             if (Thread.interrupted()) {

File: ribbon-core/src/main/java/com/netflix/niws/client/ClientFactory.java
Patch:
@@ -30,9 +30,9 @@ public class ClientFactory {
             try {
                 String clientClassName = (String) niwsClientConfig.getProperty(NiwsClientConfigKey.ClientClassName);
                 client = (AbstractLoadBalancerAwareClient<?, ?>) instantiateNiwsConfigAwareClassInstance(clientClassName, niwsClientConfig);
-                boolean initializeNFLoadBalancer = Boolean.valueOf("" + niwsClientConfig.getProperty(
+                boolean initializeNFLoadBalancer = Boolean.parseBoolean(niwsClientConfig.getProperty(
                                                 NiwsClientConfigKey.InitializeNFLoadBalancer,
-                                                Boolean.valueOf(NiwsClientConfig.DEFAULT_ENABLE_LOADBALANCER)));
+                                                NiwsClientConfig.DEFAULT_ENABLE_LOADBALANCER).toString());
                 if (initializeNFLoadBalancer) {
                     loadBalancer  = (AbstractLoadBalancer) getNamedLoadBalancer(restClientName);
                 }

File: ribbon-core/src/main/java/com/netflix/niws/client/ClientRequest.java
Patch:
@@ -50,7 +50,7 @@ protected final ClientRequest setLoadBalancerKey(Object loadBalancerKey) {
     }
 
     public boolean isRetriable() {
-        return (isRetriable == Boolean.TRUE);
+        return (Boolean.TRUE.equals(isRetriable));
     }
 
     protected final ClientRequest setRetriable(boolean isRetriable) {

File: ribbon-core/src/main/java/com/netflix/niws/client/PrimeConnections.java
Patch:
@@ -359,7 +359,7 @@ private void sleepBeforeRetry(int tryNum) {
             logger.debug("Sleeping for " + sleep + "ms ...");
             Thread.sleep(sleep); // making this seconds based is too slow
             // i.e. 200ms, 400 ms, 800ms, 1600ms etc.
-        } catch (Exception ex) {
+        } catch (InterruptedException ex) {
         }
     }
     

File: ribbon-core/src/main/java/com/netflix/loadbalancer/NFLoadBalancer.java
Patch:
@@ -24,7 +24,7 @@
 import com.netflix.servo.annotations.Monitor;
 import com.netflix.servo.monitor.Counter;
 import com.netflix.servo.monitor.Monitors;
-import com.netflix.util.concurrent.NFTimer;
+import com.netflix.util.concurrent.ShutdownEnabledTimer;
 
 /**
  * A Netflix Implementation of an ILoadBalancer 
@@ -188,7 +188,7 @@ private void setupPingTask() {
         if (lbTimer != null){
             lbTimer.cancel();
         }
-        lbTimer = new NFTimer("NFLoadBalancer-PingTimer-" + name, true);  
+        lbTimer = new ShutdownEnabledTimer("NFLoadBalancer-PingTimer-" + name, true);  
         lbTimer.schedule(new PingTask(), 0, pingIntervalSeconds*1000);
         forceQuickPing();
     }

